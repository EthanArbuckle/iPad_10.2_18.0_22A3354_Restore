unint64_t CTFontGetClientObject(unint64_t result)
{
  if (result)
    return atomic_load((unint64_t *)(*(_QWORD *)(result + 40) + 528));
  return result;
}

double *CTFontSwapDefaultLineHeightAdjustment(double a1)
{
  double *result;

  result = (double *)GetTable();
  if (result)
  {
    result[12] = a1;
    *((_QWORD *)result + 13) = ThreadSpecificNullDestructor<double>;
  }
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  if (font)
    return *(double *)(*((_QWORD *)font + 5) + 16);
  else
    return 0.0;
}

double CTFontDescriptorGetTextStyleSize(TDescriptorSource *a1, const __CFString *a2, uint64_t *a3, const __CFString **a4, double *a5)
{
  return TDescriptorSource::GetTextStyleSize(a1, a2, a3, a4, a5, 0, 0);
}

const __CFDictionary *TSplicedFontDict::ComponentHasVariations(TSplicedFontDict *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("hasVariations"));
    if (result)
      return (const __CFDictionary *)(CFBooleanGetValue(result) != 0);
  }
  return result;
}

TDescriptorSource *CTFontDescriptorCanCreateWithTextStyle(TDescriptorSource *a1)
{
  const __CFString *v2;
  _BYTE v4[8];

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)v4);
  return TDescriptorSource::IsValidTextStyle(a1, v2);
}

TDescriptorSource *TDescriptorSource::IsValidTextStyle(TDescriptorSource *this, const __CFString *a2)
{
  TDescriptorSource *v2;
  TDescriptorSource *result;
  uint64_t *v4;
  _BYTE __dst[336];
  __CFString var18;

  v2 = (TDescriptorSource *)MapTextStyleValue((uint64_t)this);
  if (v2 > 0x144)
    return 0;
  result = (TDescriptorSource *)TDescriptorSource::UIFontNameForUIType(v2);
  if (result)
  {
    var18.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    result = (TDescriptorSource *)TDescriptorSource::StashIndexForFontName(result, &var18, v4);
    if ((_DWORD)result)
    {
      memcpy(__dst, &__const__ZN17TDescriptorSource16IsValidTextStyleEPK10__CFString_overrideSpec, sizeof(__dst));
      return (TDescriptorSource *)(FindTextStyle((unint64_t)var18.isa, (uint64_t)__dst, -1) != 0);
    }
  }
  return result;
}

void TDescriptor::InitBaseFont(TDescriptor *this, uint64_t a2, double a3)
{
  __int16 v4;
  void *v7;
  TDescriptor **v8;
  TDescriptor **v9;
  TDescriptor *v10;
  const TInstanceFont *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  const TInstanceFont *v15;
  const __CFDictionary *v16;
  const void *Value;
  const void *v18;
  CFTypeID v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  CFTypeID v22;
  CFTypeID TypeID;
  double v24;
  TSplicedFont *v25;
  unint64_t OpticalSizeComponent;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  void *v32;
  void *v33;
  CFTypeID v34;
  const __CFDictionary *v35;
  void *v36;
  unint64_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  int v41;
  void *v42;
  TDescriptor **v43;
  TDescriptor **v44;
  TDescriptor *v45;
  const TInstanceFont *v46;
  const __CFDictionary *v47;
  const __CFDictionary *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  uint64_t v51;
  uint64_t v52;
  const TInstanceFont *v53;
  unsigned int *v54;
  unsigned int v55;
  unint64_t *v56;
  const TInstanceFont *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  const __CFDictionary *v65;
  const TInstanceFont *v66;
  int v67;
  id v68;
  void *values;
  uint64_t valuePtr;

  v4 = a2;
  v68 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CreateMatchingDescriptorInternal((TDescriptor *)&v68, this, 0, a2);
  v67 = 0x80000000;
  if (!atomic_load((unint64_t *)&v68))
    goto LABEL_61;
  v66 = (const TInstanceFont *)0xAAAAAAAAAAAAAAAALL;
  v7 = (void *)atomic_load((unint64_t *)&v68);
  v8 = v7;
  v9 = v8;
  v10 = v8[5];
  if ((*((_DWORD *)v10 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v8[5], 0, 0.0);
  v11 = (const TInstanceFont *)atomic_load((unint64_t *)v10 + 4);

  v66 = v11;
  if (!v11)
    goto LABEL_61;
  v12 = (void *)atomic_load((unint64_t *)&v68);
  v13 = v12;
  v14 = v13[5];

  if (v4 < 0 || !TDescriptor::IsSystemUIFont(this) && !TDescriptor::IsSystemUIFont((TDescriptor *)v14))
    goto LABEL_29;
  v67 |= *(_DWORD *)(v14 + 16) & 0x404;
  v15 = v66;
  if ((*(unsigned int (**)(const TInstanceFont *))(*(_QWORD *)v66 + 16))(v66) == 1414743620
    && (*(unsigned int (**)(const TInstanceFont *))(*(_QWORD *)v66 + 840))(v66))
  {
    v16 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
    if (v16)
    {
      Value = CFDictionaryGetValue(v16, CFSTR("NSCTFontOpticalSizeAttribute"));
      if (Value)
      {
        v18 = Value;
        v19 = CFGetTypeID(Value);
        if (v19 == CFNumberGetTypeID())
          goto LABEL_15;
      }
      if (a3 == 0.0)
      {
        v18 = CFDictionaryGetValue(v16, CFSTR("NSFontSizeAttribute"));
        if (!v18)
        {
LABEL_16:
          v21 = (const __CFDictionary *)CFDictionaryGetValue(v16, CFSTR("NSCTFontVariationAttribute"));
          if (v21)
            v18 = CFDictionaryGetValue(v21, &unk_1E1614B60);
          if (v18)
            goto LABEL_19;
LABEL_23:
          v24 = 12.0;
LABEL_24:
          v25 = v66;
LABEL_25:
          OpticalSizeComponent = TSplicedFont::GetOpticalSizeComponent(v25, v24);
          v15 = (const TInstanceFont *)OpticalSizeComponent;
          if (OpticalSizeComponent)
          {
            (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)OpticalSizeComponent + 128))(&valuePtr, OpticalSizeComponent);
            v27 = atomic_load((unint64_t *)&valuePtr);

            if (v27)
              v67 |= 0x8000u;
            v66 = v15;
            goto LABEL_30;
          }
LABEL_29:
          v15 = v66;
          if (!v66)
            goto LABEL_50;
          goto LABEL_30;
        }
LABEL_15:
        v20 = CFGetTypeID(v18);
        if (v20 == CFNumberGetTypeID())
        {
LABEL_19:
          v22 = CFGetTypeID(v18);
          TypeID = CFNumberGetTypeID();
          v24 = 12.0;
          if (v22 == TypeID)
          {
            valuePtr = -1;
            CFNumberGetValue((CFNumberRef)v18, kCFNumberDoubleType, &valuePtr);
            v24 = *(double *)&valuePtr;
          }
          goto LABEL_24;
        }
        goto LABEL_16;
      }
    }
    else if (a3 == 0.0)
    {
      goto LABEL_23;
    }
    v25 = v66;
    v24 = a3;
    goto LABEL_25;
  }
LABEL_30:
  (*(void (**)(uint64_t *__return_ptr, const TInstanceFont *))(*(_QWORD *)v15 + 120))(&valuePtr, v15);
  v28 = atomic_load((unint64_t *)&valuePtr);

  if (v28)
  {
    v29 = (void *)atomic_load((unint64_t *)this + 1);
    v30 = v29;
    v31 = v30;
    if (v30
      && (v32 = (void *)CFDictionaryGetValue(v30, CFSTR("NSCTFontVariationAttribute"))) != 0
      && (v33 = v32, v34 = CFGetTypeID(v32), v34 == CFDictionaryGetTypeID()))
    {

      values = v33;
      valuePtr = (uint64_t)CFSTR("NSCTFontVariationAttribute");
      v35 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&valuePtr, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>((uint64_t *)&v66, &v67, (unint64_t *)&valuePtr);
      do
        v36 = (void *)__ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));

      values = v36;
      v65 = v35;
      TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&values, &v65, (unint64_t *)&valuePtr);
      do
        v37 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v38 = (void *)__ldaxr((unint64_t *)&v68);
      while (__stlxr(v37, (unint64_t *)&v68));

      v39 = (void *)atomic_load((unint64_t *)&v68);
      v40 = v39;
      v41 = *(_DWORD *)(v40[5] + 16);

      if (v41 < 0)
      {
        v42 = (void *)atomic_load((unint64_t *)&v68);
        v43 = v42;
        v44 = v43;
        v45 = v43[5];
        if ((*((_DWORD *)v45 + 4) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(v43[5], 0, 0.0);
        v46 = (const TInstanceFont *)atomic_load((unint64_t *)v45 + 4);

        if (v46)
          v66 = v46;
      }

    }
    else
    {

      if ((*(unsigned int (**)(const TInstanceFont *))(*(_QWORD *)v66 + 16))(v66) == 1414088260)
      {
        atomic_load((unint64_t *)(v14 + 8));
        v47 = (const __CFDictionary *)atomic_load((unint64_t *)(v14 + 8));
        if (v47)
        {
          v48 = (const __CFDictionary *)CFDictionaryGetValue(v47, CFSTR("NSCTFontTraitsAttribute"));
          if (v48)
          {
            v49 = (const __CFNumber *)CFDictionaryGetValue(v48, CFSTR("NSCTFontWeightTrait"));
            if (v49)
            {
              v50 = v49;
              v51 = operator new();
              valuePtr = -1;
              CFNumberGetValue(v50, kCFNumberDoubleType, &valuePtr);
              v52 = valuePtr;
              TInstanceFont::TInstanceFont((TInstanceFont *)v51, v66);
              *(_QWORD *)(v51 + 616) = v52;
              *(_BYTE *)(v51 + 624) = 1;
              v66 = (const TInstanceFont *)v51;
            }
          }
        }
      }
    }
  }
LABEL_50:
  v53 = v66;
  v54 = (unsigned int *)((char *)v66 + 8);
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v56 = (unint64_t *)((char *)this + 32);
  while (!__ldaxr(v56))
  {
    if (!__stlxr((unint64_t)v53, v56))
      goto LABEL_61;
  }
  __clrex();
  v58 = v66;
  if (v66)
  {
    v59 = (unsigned int *)((char *)v66 + 8);
    do
    {
      v60 = __ldxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      __dmb(9u);
      (*(void (**)(const TInstanceFont *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
LABEL_61:
  v62 = (unsigned int *)((char *)this + 16);
  v63 = v67;
  do
    v64 = __ldxr(v62);
  while (__stxr(v64 | v63, v62));

}

void TTenuousComponentFont::CopyOpticalSizeAxis(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  if ((*((_BYTE *)this + 713) & 0x40) != 0)
    TBaseFont::CopyOpticalSizeAxis(this, a2);
  else
    *a2 = 0;
}

void TBaseFont::CopyOpticalSizeAxis(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  void *Value;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;

  *a2 = 0;
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 120))(&v13);
  if (atomic_load((unint64_t *)&v13))
  {
    v4 = (const __CFArray *)atomic_load((unint64_t *)&v13);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count)
      {
        v6 = Count;
        v7 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
          Value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
          if (Value == &unk_1E16170C8 || Value && CFEqual(Value, &unk_1E16170C8))
            break;
          if (v6 == ++v7)
            goto LABEL_14;
        }
        v12 = ValueAtIndex;
        do
          v10 = __ldaxr((unint64_t *)&v12);
        while (__stlxr(0, (unint64_t *)&v12));
        do
          v11 = (void *)__ldaxr(a2);
        while (__stlxr(v10, a2));

      }
    }
  }
LABEL_14:

}

void TTenuousComponentFont::CopyVariationAxes(TTenuousComponentFont *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFDictionary *v4;
  void *Value;
  unint64_t v6;
  id v7;

  if ((*((_BYTE *)this + 712) & 4) != 0)
  {
    v4 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
    if (v4 && (Value = (void *)CFDictionaryGetValue(v4, CFSTR("variationAxes"))) != 0)
    {
      v7 = Value;
      do
        v6 = __ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));
      *a2 = v6;

    }
    else
    {
      TBaseFont::CopyVariationAxes(this, a2);
    }
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t TSplicedFont::GetType(TSplicedFont *this)
{
  return 1414743620;
}

BOOL TDescriptor::IsSystemUIFont(TDescriptor *this)
{
  int v1;

  v1 = *((_DWORD *)this + 4);
  if (qword_1ECDE7640 != -1)
    dispatch_once_f(&qword_1ECDE7640, 0, (dispatch_function_t)TDescriptor::GetSystemUIFontOptions(void)::$_0::__invoke);
  return (_MergedGlobals_13 & v1) != 0;
}

void TDescriptor::CreateMatchingDescriptorInternal(TDescriptor *this, const __CFSet *a2, const __CFSet *a3, uint64_t a4)
{
  const __CFDictionary *Attributes;
  uint64_t v9;
  CFTypeID TypeID;
  CFTypeID v11;
  const __CFDictionary *v12;
  __CFString *Value;
  __CFString *v14;
  __CFString *v15;
  _BOOL4 IsSystemUIFont;
  unint64_t v17;
  void *v18;
  const __CFDictionary *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFDictionary *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFDictionary *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFDictionary *v31;
  const void *v32;
  const void *v33;
  CFTypeID v34;
  const void *v35;
  uint64_t v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  CFTypeID v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  __CFString *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  __CFString *v48;
  const __CFNumber *v49;
  char v50;
  const __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  unint64_t v55;
  const __CFString **v56;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  const __CFSet *MatchableAttributes;
  void *v61;
  const __CFString *v62;
  const __CFDictionary *v63;
  const __CFString *v64;
  CFTypeID v65;
  const __CFString *v66;
  const __CFString *v67;
  CFTypeID v68;
  CFIndex Count;
  CFIndex v70;
  __int128 v71;
  char *v72;
  TDescriptorSource **v73;
  const __CFString *v74;
  TDescriptorSource *v75;
  unint64_t v76;
  void *v77;
  TDescriptorSource *v78;
  unint64_t v79;
  const __CFDictionary *v80;
  const __CFSet *MatchableNameAttributes;
  void *v82;
  const __CFDictionary *v83;
  const __CFDictionary *v84;
  CFIndex v85;
  TDescriptorSource *v86;
  __CFDictionary *v87;
  const __CFDictionary *v88;
  unint64_t v89;
  void *v90;
  __CFString *FontNameForTextStyle;
  unint64_t *v93;
  const __CFString *v94;
  void *v95;
  unint64_t *v96;
  void *v97;
  void *v98;
  char v99;
  __CFString *FontNameForNameAndTrait;
  _BOOL4 v101;
  const __CFDictionary *v102;
  const __CFNumber *v103;
  const __CFNumber *v104;
  const __CFNumber *v105;
  unint64_t v106;
  const __CFDictionary *v107;
  const __CFNumber *v108;
  const __CFNumber *v109;
  const __CFNumber *v110;
  const __CFNumber *v111;
  const __CFNumber *v112;
  const __CFNumber *v113;
  const __CFNumber *v114;
  const __CFNumber *v115;
  const __CFNumber *v116;
  void *v117;
  unint64_t v118;
  void *v119;
  unint64_t v120;
  const __CFDictionary *v121;
  unint64_t v122;
  int v124;
  void *v125;
  const __CFDictionary *v126;
  const __CFDictionary *v127;
  void *v128;
  void *v129;
  CFTypeID v130;
  const __CFDictionary *v131;
  const CTFontDescriptor *v132;
  CTFontDescriptor *v133;
  __CFString *v134;
  void *v135;
  void *v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __CFString *v141;
  TDescriptor *v142;
  void *v143;
  unint64_t v144;
  void *v145;
  id v146;
  unint64_t v147;
  void *v148;
  const __CFNumber *v149;
  unsigned int v150;
  const __CFNumber *v151;
  const void *v152;
  uint64_t v153;
  const __CFNumber *v154;
  const __CFNumber *v155;
  __CFString *v156;
  const __CFSet *v157;
  uint64_t v158;
  const __CFNumber *v159;
  id values;
  const __CFString *v161;
  id v162;
  id v163;
  char v164;
  TPurgeableCache *v165;
  __CFString *valuePtr;
  void *v167[2];
  _OWORD v168[15];
  _OWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v165 = (TPurgeableCache *)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v165);
  Attributes = (const __CFDictionary *)TDescriptor::GetAttributes(a2, 1);
  if (!Attributes || CFDictionaryGetCount(Attributes) < 1)
  {
    IsSystemUIFont = TDescriptor::IsSystemUIFont(a2);
    TDescriptorSource::CreateDefaultDescriptor(IsSystemUIFont, (unint64_t *)&valuePtr);
    do
      v17 = __ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));
    do
      v18 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v17, (unint64_t *)this));
    goto LABEL_172;
  }
  v157 = a3;
  v9 = AsMatchingOptions(*((_DWORD *)a2 + 4));
  TypeID = CFStringGetTypeID();
  v11 = CFNumberGetTypeID();
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  Value = (__CFString *)CFDictionaryGetValue(v12, CFSTR("CTFontDescriptorLanguageAttribute"));
  if (Value)
  {
    v14 = Value;
    if (CFGetTypeID(Value) == TypeID)
      v15 = v14;
    else
      v15 = 0;
    v156 = v15;
  }
  else
  {
    v156 = 0;
  }
  v19 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v20 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("CTFontLanguageAwareLineHeightRatioAttribute"));
  if (v20)
  {
    v21 = v20;
    if (CFGetTypeID(v20) == v11)
      v22 = v21;
    else
      v22 = 0;
    v155 = v22;
  }
  else
  {
    v155 = 0;
  }
  v23 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v24 = (const __CFNumber *)CFDictionaryGetValue(v23, CFSTR("CTFontLineSpacingOverrideAttribute"));
  if (v24)
  {
    v25 = v24;
    if (CFGetTypeID(v24) == v11)
      v26 = v25;
    else
      v26 = 0;
    v154 = v26;
  }
  else
  {
    v154 = 0;
  }
  v27 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v28 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("CTFontLegibilityWeightAttribute"));
  if (v28)
  {
    v29 = v28;
    if (CFGetTypeID(v28) == v11)
      v30 = v29;
    else
      v30 = 0;
  }
  else
  {
    v30 = 0;
  }
  v31 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v32 = CFDictionaryGetValue(v31, CFSTR("CTFontIgnoreLegibilityWeightAttribute"));
  if (v32)
  {
    v33 = v32;
    v34 = CFGetTypeID(v32);
    if (v34 == CFBooleanGetTypeID())
      v35 = v33;
    else
      v35 = 0;
    v152 = v35;
    if (v30)
      goto LABEL_35;
  }
  else
  {
    v152 = 0;
    if (v30)
    {
LABEL_35:
      LODWORD(valuePtr) = -1431655766;
      CFNumberGetValue(v30, kCFNumberIntType, &valuePtr);
      v36 = (int)valuePtr;
      goto LABEL_38;
    }
  }
  v36 = -1;
LABEL_38:
  v153 = v36;
  v37 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v38 = (const __CFDictionary *)CFDictionaryGetValue(v37, CFSTR("NSCTFontTraitsAttribute"));
  if (v38)
  {
    v39 = v38;
    v40 = CFGetTypeID(v38);
    if (v40 == CFDictionaryGetTypeID())
      v41 = v39;
    else
      v41 = 0;
  }
  else
  {
    v41 = 0;
  }
  v158 = v9 | a4;
  v42 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  v43 = (__CFString *)CFDictionaryGetValue(v42, CFSTR("NSCTFontUIUsageAttribute"));
  v44 = v43;
  if (v43)
  {
    if (CFGetTypeID(v43) == TypeID)
      v45 = v44;
    else
      v45 = 0;
    if (!v41)
    {
      v49 = 0;
      if (v45)
      {
        v50 = 1;
        v151 = 0;
        v48 = 0;
        goto LABEL_68;
      }
LABEL_84:
      v149 = v49;
      v55 = v158 | 2;
      v63 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
      v64 = (const __CFString *)CFDictionaryGetValue(v63, CFSTR("NSFontNameAttribute"));
      if (!v64 || (v62 = v64, v65 = CFGetTypeID(v64), v65 != CFStringGetTypeID()))
      {
        v66 = (const __CFString *)CFDictionaryGetValue(v63, CFSTR("NSCTFontPostScriptNameAttribute"));
        if (!v66)
        {
          v62 = 0;
          if (!v63)
            goto LABEL_100;
LABEL_93:
          Count = CFDictionaryGetCount(v63);
          if (Count >= 2)
          {
            v70 = Count;
            *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v168[14] = v71;
            v168[13] = v71;
            v168[12] = v71;
            v168[11] = v71;
            v168[10] = v71;
            v168[9] = v71;
            v168[8] = v71;
            v168[7] = v71;
            v168[6] = v71;
            v168[5] = v71;
            v168[4] = v71;
            v168[3] = v71;
            v168[2] = v71;
            v168[1] = v71;
            v168[0] = v71;
            v167[0] = 0;
            v167[1] = 0;
            valuePtr = 0;
            v169 = v168;
            std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&valuePtr, Count);
            v72 = (char *)v167[0];
            bzero(v167[0], 8 * v70);
            v167[0] = &v72[8 * v70];
            v73 = (TDescriptorSource **)valuePtr;
            CFDictionaryGetKeysAndValues(v63, (const void **)&valuePtr->isa, 0);
            while (1)
            {
              v75 = *v73;
              if (TDescriptorSource::IsSearchableAttribute(*v73, v74))
              {
                if (!CFEqual(v75, CFSTR("NSFontNameAttribute"))
                  && !CFEqual(v75, CFSTR("NSCTFontPostScriptNameAttribute")))
                {
                  break;
                }
              }
              ++v73;
              if (!--v70)
              {
                values = &valuePtr;
                std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&values);
                goto LABEL_100;
              }
            }
            v163 = 0;
            values = &valuePtr;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&values);
            LOBYTE(v62) = 0;
LABEL_103:
            MatchableAttributes = v157;
            do
              v76 = __ldaxr((unint64_t *)&v163);
            while (__stlxr(0, (unint64_t *)&v163));
            do
              v77 = (void *)__ldaxr((unint64_t *)this);
            while (__stlxr(v76, (unint64_t *)this));

            v79 = atomic_load((unint64_t *)this);
            if (v157 || v79 || !v149)
              goto LABEL_167;
            valuePtr = (__CFString *)0xAAAAAAAAAAAAAAAALL;
            v80 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
            MatchableNameAttributes = (const __CFSet *)TDescriptorSource::GetMatchableNameAttributes(v78);
            TDescriptorSource::CopyMandatoryMatchableRequest(v80, MatchableNameAttributes, (unint64_t *)&valuePtr);
            v82 = (void *)atomic_load((unint64_t *)&valuePtr);
            v83 = v82;
            if (v83)
            {
              v84 = v83;
              v85 = CFDictionaryGetCount(v83);

              if (v85)
              {
                MatchableAttributes = 0;
LABEL_114:

                goto LABEL_167;
              }
            }
            else
            {

            }
            MatchableAttributes = (const __CFSet *)TDescriptorSource::GetMatchableAttributes(v86);
            v55 = v158 & 0xFFFFFFFFFFFFFFFDLL;
            goto LABEL_114;
          }
LABEL_100:
          if (v62)
          {
            TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v165, v62, v55, 0, v156, v155, v154, v153, (unint64_t *)&v163, v152);
            LOBYTE(v62) = 1;
          }
          else
          {
            v163 = 0;
          }
          goto LABEL_103;
        }
        v67 = v66;
        v68 = CFGetTypeID(v66);
        if (v68 == CFStringGetTypeID())
          v62 = v67;
        else
          v62 = 0;
      }
      if (!v63)
        goto LABEL_100;
      goto LABEL_93;
    }
    v44 = v45;
  }
  else if (!v41)
  {
    v49 = 0;
    goto LABEL_84;
  }
  v46 = (__CFString *)CFDictionaryGetValue(v41, CFSTR("NSCTFontUIFontDesignTrait"));
  if (v46)
  {
    v47 = v46;
    if (CFGetTypeID(v46) == TypeID)
      v48 = v47;
    else
      v48 = 0;
  }
  else
  {
    v48 = 0;
  }
  v51 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("NSCTFontWeightTrait"));
  if (v51)
  {
    v52 = v51;
    if (CFGetTypeID(v51) == v11)
      v53 = v52;
    else
      v53 = 0;
    v151 = v53;
  }
  else
  {
    v151 = 0;
  }
  v54 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("NSCTFontSymbolicTrait"));
  v49 = v54;
  if (v54 && CFGetTypeID(v54) != v11)
    v49 = 0;
  if (!v44)
  {
    if (v48)
    {
      v55 = v158 | 0x402;
      TDescriptorSource::CreateDescriptorForUIFontDesign(v41, &v165, v48, v158 | 0x402, v156, v155, v154, v153, (unint64_t *)&valuePtr, v152);
      do
        v59 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      MatchableAttributes = v157;
      do
        v61 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v59, (unint64_t *)this));

      LOBYTE(v62) = 0;
      goto LABEL_167;
    }
    goto LABEL_84;
  }
  v50 = 0;
LABEL_68:
  v55 = v158 | 0x402;
  if ((v44 == CFSTR("CTFont") || CFStringHasPrefix(v44, CFSTR("CTFont")))
    && CFStringHasSuffix(v44, CFSTR("Usage"))
    && (unint64_t)v151 | (unint64_t)v48)
  {
    if (v48)
    {
      TDescriptorSource::CreateDescriptorForUIFontDesign(v41, &v165, v48, v55, v156, v155, v154, v153, (unint64_t *)&valuePtr, v152);
      do
        v57 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v58 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v57, (unint64_t *)this));

    }
    else
    {
      valuePtr = (__CFString *)0xAAAAAAAAAAAAAAAALL;
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&valuePtr, v41);
      v87 = (__CFDictionary *)atomic_load((unint64_t *)&valuePtr);
      CFDictionarySetValue(v87, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignDefault"));
      v88 = (const __CFDictionary *)atomic_load((unint64_t *)&valuePtr);
      TDescriptorSource::CreateDescriptorForUIFontDesign(v88, &v165, CFSTR("NSCTFontUIFontDesignDefault"), v55, v156, v155, v154, v153, (unint64_t *)&values, v152);
      do
        v89 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v90 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v89, (unint64_t *)this));

    }
  }
  if (atomic_load((unint64_t *)this))
    goto LABEL_166;
  v164 = 0;
  v162 = 0;
  v163 = 0;
  valuePtr = (__CFString *)&v163;
  v167[0] = 0;
  values = &v162;
  v161 = 0;
  FontNameForTextStyle = TDescriptorSource::FindFontNameForTextStyle((TDescriptorSource *)v44, 0, (const __CFDictionary *)&v164, (BOOL *)v167, &v161, v56);
  v93 = (unint64_t *)values;
  v94 = v161;
  do
    v95 = (void *)__ldaxr(v93);
  while (__stlxr((unint64_t)v94, v93));

  v96 = (unint64_t *)valuePtr;
  v97 = v167[0];
  do
    v98 = (void *)__ldaxr(v96);
  while (__stlxr((unint64_t)v97, v96));

  if (FontNameForTextStyle)
  {
    if (v49
      && (LODWORD(valuePtr) = -1431655766,
          CFNumberGetValue(v49, kCFNumberIntType, &valuePtr),
          v99 = (char)valuePtr,
          (_DWORD)valuePtr))
    {
      FontNameForNameAndTrait = TDescriptorSource::FindFontNameForNameAndTrait((TDescriptorSource *)FontNameForTextStyle, 0, (uint64_t *)valuePtr, (int)valuePtr);
      FontNameForTextStyle = FontNameForNameAndTrait;
      v101 = (v99 & 1) != 0 && CFStringFind(FontNameForNameAndTrait, CFSTR("Italic"), 0).location == -1;
      v150 = v101;
    }
    else
    {
      v150 = 0;
    }
    v102 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
    v103 = (const __CFNumber *)CFDictionaryGetValue(v102, CFSTR("NSCTFontSizeCategoryAttribute"));
    if (v103)
    {
      v104 = v103;
      if (CFGetTypeID(v103) == v11)
        v105 = v104;
      else
        v105 = 0;
      v159 = v105;
    }
    else
    {
      v159 = 0;
    }
    if (v48 == CFSTR("NSCTFontUIFontDesignDefault")
      || v48 && CFSTR("NSCTFontUIFontDesignDefault") && CFEqual(v48, CFSTR("NSCTFontUIFontDesignDefault")))
    {
      v48 = 0;
    }
    v106 = v55;
    v107 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
    v108 = (const __CFNumber *)CFDictionaryGetValue(v107, CFSTR("NSCTFontTextStylePlatformAttribute"));
    if (v108)
    {
      v109 = v108;
      if (CFGetTypeID(v108) == v11)
        v110 = v109;
      else
        v110 = 0;
      if ((v50 & 1) != 0)
        goto LABEL_148;
    }
    else
    {
      v110 = 0;
      if ((v50 & 1) != 0)
      {
LABEL_148:
        v111 = 0;
        goto LABEL_159;
      }
    }
    v112 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("NSCTFontProportionTrait"));
    if (v112)
    {
      v113 = v112;
      if (CFGetTypeID(v112) == v11)
        v111 = v113;
      else
        v111 = 0;
    }
    else
    {
      v111 = 0;
    }
    v114 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("NSCTFontGradeTrait"));
    if (v114)
    {
      v115 = v114;
      if (CFGetTypeID(v114) == v11)
        v116 = v115;
      else
        v116 = 0;
      goto LABEL_160;
    }
LABEL_159:
    v116 = 0;
LABEL_160:
    v117 = (void *)atomic_load((unint64_t *)&v162);
    TDescriptorSource::CopySplicedDescriptorForName(FontNameForTextStyle, v156, v155, v154, v153, v152, (unint64_t *)&valuePtr, v159, v48, v151, v111, v116, v110, v150, v117);
    do
      v118 = __ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));
    v55 = v106;
    do
      v119 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v118, (unint64_t *)this));

  }
LABEL_166:
  LOBYTE(v62) = 0;
  MatchableAttributes = v157;
LABEL_167:
  v120 = atomic_load((unint64_t *)this);
  if ((v62 & 1) != 0 || v120)
    goto LABEL_173;
  v121 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 1);
  TDescriptorSource::CopyDescriptorForRequest((TDescriptorSource *)&v165, v121, MatchableAttributes, v41, v55, (unint64_t *)&valuePtr);
  do
    v122 = __ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));
  do
    v18 = (void *)__ldaxr((unint64_t *)this);
  while (__stlxr(v122, (unint64_t *)this));
LABEL_172:

LABEL_173:
  if (atomic_load((unint64_t *)this))
  {
    v124 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
    v125 = (void *)atomic_load((unint64_t *)a2 + 1);
    v126 = v125;
    v127 = v126;
    if (v126)
    {
      v128 = (void *)CFDictionaryGetValue(v126, CFSTR("NSCTFontCharacterSetAttribute"));
      v129 = v128;
      if (v128)
      {
        v130 = CFGetTypeID(v128);
        if (v130 != CFCharacterSetGetTypeID())
          v129 = 0;
      }
    }
    else
    {
      v129 = 0;
    }

    if (v129 || v124)
    {
      if (v129)
      {
        valuePtr = CFSTR("NSCTFontCharacterSetAttribute");
        values = v129;
        v131 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&valuePtr, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v132 = (const CTFontDescriptor *)atomic_load((unint64_t *)this);
        v133 = (CTFontDescriptor *)TCFBase<TDescriptor>::Allocate();
        if (v133)
        {
          CTFontDescriptor::CTFontDescriptor(v133, v132, v131, v124);
          valuePtr = v134;
          do
            v135 = (void *)__ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          values = v135;

        }
        else
        {
          values = 0;
        }
        do
          v144 = __ldaxr((unint64_t *)&values);
        while (__stlxr(0, (unint64_t *)&values));
        do
          v145 = (void *)__ldaxr((unint64_t *)this);
        while (__stlxr(v144, (unint64_t *)this));

        v146 = v131;
      }
      else
      {
        v136 = (void *)atomic_load((unint64_t *)this);
        v137 = v136;
        v138 = v137[5];

        if ((*(_DWORD *)(v138 + 16) & v124) != 0)
          return;
        v139 = atomic_load((unint64_t *)this);
        v140 = TCFBase<TDescriptor>::Allocate();
        if (v140)
        {
          v141 = (__CFString *)v140;
          v142 = (TDescriptor *)(v140 + 48);
          v141->data = 0;
          v141->length = (uint64_t)TDescriptor::Hash;
          v141[1].isa = 0;
          v141[1].info = (uint64_t)v142;
          TDescriptor::TDescriptor(v142, *(const TDescriptor **)(v139 + 40), v124);
          valuePtr = v141;
          do
            v143 = (void *)__ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          values = v143;

        }
        else
        {
          values = 0;
        }
        do
          v147 = __ldaxr((unint64_t *)&values);
        while (__stlxr(0, (unint64_t *)&values));
        do
          v148 = (void *)__ldaxr((unint64_t *)this);
        while (__stlxr(v147, (unint64_t *)this));

        v146 = values;
      }

    }
  }
}

double TDescriptorSource::GetTextStyleSize(TDescriptorSource *a1, const __CFString *a2, uint64_t *a3, const __CFString **a4, double *a5, int a6, const __CFString *a7)
{
  int IsVariableSizeTextStyleInstance;
  unint64_t *v15;
  const __CFString *v16;
  void *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  TDescriptorSource *v21;
  double v22;
  int ContentSizeCategoryIndex;
  void *v24;
  double v25;
  double v26;
  TDescriptorSource *v27;
  uint64_t v28;
  TDescriptorSource *v29;
  unsigned int v30;
  double v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *inited;
  unsigned int v37;
  double v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  double v47;
  const __CFString *v48;
  id v49;
  id v50;

  v49 = 0;
  v50 = 0;
  *(_QWORD *)&v40 = &v50;
  *((_QWORD *)&v40 + 1) = 0;
  v47 = COERCE_DOUBLE(&v49);
  v48 = 0;
  IsVariableSizeTextStyleInstance = TDescriptorSource::IsVariableSizeTextStyleInstance(a1, (const __CFString *)((char *)&v40 + 8), &v48, a4);
  v15 = *(unint64_t **)&v47;
  v16 = v48;
  do
    v17 = (void *)__ldaxr(v15);
  while (__stlxr((unint64_t)v16, v15));

  v18 = v40;
  do
    v19 = (void *)__ldaxr((unint64_t *)v18);
  while (__stlxr(*((unint64_t *)&v18 + 1), (unint64_t *)v18));

  if (IsVariableSizeTextStyleInstance)
  {
    v20 = atomic_load((unint64_t *)&v50);
    v21 = (TDescriptorSource *)MapTextStyleValue(v20);
    v22 = 0.0;
    if (v21 <= 0x144 && TDescriptorSource::UIFontNameForUIType(v21))
    {
      ContentSizeCategoryIndex = CTFontDescriptorGetContentSizeCategoryIndex(a2);
      v24 = (void *)atomic_load((unint64_t *)&v49);
      objc_msgSend(v24, "doubleValue");
      if (v25 == 0.0)
        v25 = 12.0;
      v22 = dbl_184931AA8[ContentSizeCategoryIndex] * v25;
      if (a5)
      {
        v26 = v22 * 1.2;
LABEL_25:
        *a5 = v26;
      }
    }
  }
  else
  {
    v27 = (TDescriptorSource *)MapTextStyleValue((uint64_t)a1);
    v22 = 0.0;
    if (v27 <= 0x144)
    {
      v28 = TDescriptorSource::UIFontNameForUIType(v27);
      if (v28)
      {
        v29 = (TDescriptorSource *)v28;
        v30 = CTFontDescriptorGetContentSizeCategoryIndex(a2);
        v47 = NAN;
        v22 = TDescriptorSource::MapTextStyleSizeCategory(v29, v30, a3, (double *)a4, a5, &v47, a7);
        if (a5)
        {
          if (a6)
          {
            v31 = v47;
            if (v47 <= 0.0 || v47 > 1.0)
            {
              if (v47 == 0.0)
                v31 = 1.0;
              v26 = v31 * *a5;
              goto LABEL_25;
            }
            v46 = (id)0xAAAAAAAAAAAAAAAALL;
            TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v40);
            TDescriptorSource::CreateDescriptorForTextStyle((__CFString *)a1, a2, (unint64_t)a7, 0, (unint64_t *)&v46);
            v32 = (void *)atomic_load((unint64_t *)&v46);
            v33 = v32;
            v34 = v33[5];

            if ((*(_DWORD *)(v34 + 16) & 0x80000000) == 0)
              TDescriptor::InitBaseFont((TDescriptor *)v34, 0, 0.0);
            v35 = (_DWORD *)atomic_load((unint64_t *)(v34 + 32));
            v42 = xmmword_184931B28;
            v43 = unk_184931B38;
            v44 = xmmword_184931B48;
            v45 = unk_184931B58;
            v40 = xmmword_184931B08;
            v41 = unk_184931B18;
            if (v35[62])
              inited = v35 + 62;
            else
              inited = TBaseFont::InitFontMetrics((TBaseFont *)v35, 0.0);
            StrikeMetrics::StrikeMetrics((uint64_t)&v40, (uint64_t)inited);
            v37 = v40;
            v38 = (*(double (**)(_DWORD *, double, double))(*(_QWORD *)v35 + 640))(v35, v22, *((double *)&v41 + 1));
            *a5 = v22 * (v38 + *((double *)&v40 + 1) + *(double *)&v41) / (double)v37;

          }
        }
      }
    }
  }

  return v22;
}

uint64_t CTFontDescriptorGetContentSizeCategoryIndex(const __CFString *cf)
{
  CFTypeID v2;
  void *v4;
  unsigned int valuePtr;

  if (!cf
    || CFSTR("UICTContentSizeCategoryL") == cf
    || CFSTR("UICTContentSizeCategoryL") && CFEqual(cf, CFSTR("UICTContentSizeCategoryL")))
  {
    return 3;
  }
  v2 = CFGetTypeID(cf);
  if (v2 == CFNumberGetTypeID())
  {
    valuePtr = -1431655766;
    CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }
  v4 = (void *)objc_msgSend(&unk_1E1605478, "objectForKeyedSubscript:", cf);
  if (!v4)
    return 3;
  else
    return objc_msgSend(v4, "unsignedIntValue");
}

uint64_t MapTextStyleValue(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (qword_1EDD16F00 != -1)
      dispatch_once(&qword_1EDD16F00, &__block_literal_global_432);
    return objc_msgSend((id)objc_msgSend((id)qword_1EDD16EF8, "objectForKeyedSubscript:", v1), "unsignedIntValue");
  }
  return result;
}

double TDescriptorSource::MapTextStyleSizeCategory(TDescriptorSource *a1, unsigned int a2, uint64_t *a3, double *a4, double *a5, double *a6, const __CFString *a7)
{
  double v7;
  int v12;
  unsigned int *TextStyle;
  uint64_t v15;
  uint64_t v16;
  _DWORD __dst[84];
  __CFString v19;

  v7 = 0.0;
  if (a1)
  {
    v12 = (int)a3;
    v19.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    if (TDescriptorSource::StashIndexForFontName(a1, &v19, a3))
    {
      memcpy(__dst, &__const__ZN17TDescriptorSource24MapTextStyleSizeCategoryEPK10__CFStringj23CTFontTextStylePlatformPdS4_S4_S2__overrideSpec, sizeof(__dst));
      __dst[5] = 3;
      TextStyle = FindTextStyle((unint64_t)v19.isa, (uint64_t)__dst, v12);
      if (TextStyle)
      {
        v15 = (uint64_t)TextStyle;
        if (a4)
          *a4 = GetWeightForLocalTrait(TextStyle[5]);
        v16 = v15 + 24;
        if (a5)
          *a5 = *(double *)(v16 + 24 * a2 + 8) * 0.5;
        if (a6)
          *a6 = LanguageAwareLineSpacingOverrideRatio(v15, a7);
        return *(double *)(v16 + 24 * a2) * 0.5;
      }
    }
  }
  return v7;
}

uint64_t TDescriptorSource::StashIndexForFontName(TDescriptorSource *this, const __CFString *a2, uint64_t *a3)
{
  uint64_t result;
  unsigned int v6;

  if (qword_1EDD16F30 != -1)
    dispatch_once(&qword_1EDD16F30, &__block_literal_global_1409);
  result = objc_msgSend((id)qword_1EDD16F28, "objectForKeyedSubscript:", this);
  if (result)
  {
    v6 = objc_msgSend((id)result, "unsignedIntValue");
    if (v6 > 0x179)
    {
      return 0;
    }
    else
    {
      a2->isa = (void *)v6;
      return 1;
    }
  }
  return result;
}

unsigned int *FindTextStyle(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  void **v14;
  char *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  TDescriptorSource *v20;
  uint64_t *v21;
  unint64_t isa;
  _BOOL4 v23;
  int v24;
  char *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  __int128 *v34;
  char *v35;
  __int128 v36;
  char *v37;
  int *v38;
  int v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  unsigned int *v44;
  int *v45;
  int *v46;
  char *v47;
  char *v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  double v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  _BOOL4 v60;
  BOOL v61;
  uint64_t v62;
  double v63;
  _BOOL4 v64;
  __CFString v65;

  if (qword_1EDD16F60 != -1)
    dispatch_once(&qword_1EDD16F60, &__block_literal_global_1903);
  if (a1 - 151 >= 5)
    v6 = -1;
  else
    v6 = a1 - 151;
  v7 = a1;
  if ((v6 & 0x80000000) == 0)
  {
    v8 = &kCondensedMapping[44 * v6];
    memcpy((void *)(a2 + 24), v8 + 5, 0x120uLL);
    if (*(double *)(a2 + 24) != 0.0)
    {
      for (i = 0; i != 264; i += 24)
      {
        v10 = a2 + i;
        if (*(double *)(a2 + i + 48) == 0.0)
        {
          *(_OWORD *)(a2 + i + 48) = *(_OWORD *)(v10 + 24);
          *(_QWORD *)(a2 + i + 64) = *(_QWORD *)(v10 + 40);
        }
      }
    }
    v11 = &kCondensedMapping[44 * v6];
    *(_QWORD *)(a2 + 328) = v11[43];
    *(_OWORD *)(a2 + 312) = *(_OWORD *)(v11 + 41);
    *(_DWORD *)(a2 + 20) = *((_DWORD *)v11 + 8);
    v7 = *v8;
  }
  if (v7 > 0x96)
    return 0;
  if (_MergedGlobals_88)
    v12 = 116;
  else
    v12 = 151;
  v13 = a3 + 1;
  if ((a3 + 1) > 2)
  {
    v14 = (void **)&_MergedGlobals_2;
  }
  else
  {
    v14 = (void **)(&off_1E15E7330 + v13);
    v12 = qword_1849480F8[v13];
  }
  v16 = (char *)*v14;
  if (v7 >= v12)
    v17 = &kTypeHierarchySpecPhonePad;
  else
    v17 = *v14;
  v18 = &v17[84 * v7];
  v19 = *v18;
  v65.isa = 0;
  v20 = (TDescriptorSource *)TDescriptorSource::UIFontNameForUIType((TDescriptorSource *)HIWORD(v19));
  if (v20)
  {
    TDescriptorSource::StashIndexForFontName(v20, &v65, v21);
    isa = (unint64_t)v65.isa;
  }
  else
  {
    isa = 0;
  }
  v23 = *(double *)(a2 + 24) == 0.0 && v7 != a1;
  if (v7 == a1)
  {
    if (v19 < 0x10000)
      goto LABEL_39;
    v25 = (char *)&kTypeHierarchySpecPhonePad + 336 * isa;
    if (isa >= 0x97)
      v25 = 0;
    v18 = (unsigned int *)(isa >= v12 ? v25 : &v16[336 * isa]);
    if (v18)
    {
LABEL_39:
      v64 = v23;
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_50;
      v26 = *v18;
      v28 = 9;
      do
      {
        v29 = v28 >> 1;
        v30 = &v27[2 * (v28 >> 1)];
        v32 = *v30;
        v31 = v30 + 2;
        v28 += ~(v28 >> 1);
        if (v32 >= v26)
          v28 = v29;
        else
          v27 = v31;
      }
      while (v28);
      if (v27 == (_DWORD *)&kOtherSpecCore || *v27 != v26)
      {
LABEL_50:
        v24 = 0;
      }
      else
      {
        memmove((void *)(a2 + 24), v18 + 6, 0xA8uLL);
        v33 = 0;
        v34 = (__int128 *)(a2 + 192);
        do
        {
          v35 = (char *)v34 + v33;
          v36 = *v34;
          *((_QWORD *)v35 + 2) = *(_QWORD *)(a2 + 208);
          *(_OWORD *)v35 = v36;
          v33 += 24;
        }
        while (v33 != 120);
        *(_DWORD *)(a2 + 20) = v27[1];
        v24 = 1;
      }
      v18 = &v17[84 * v7];
      v23 = v64;
    }
    else
    {
      v24 = 0;
      v18 = &v17[84 * v7];
    }
  }
  else
  {
    v24 = 1;
  }
  v37 = (char *)&v17[84 * v7];
  *(_OWORD *)a2 = *(_OWORD *)v18;
  v39 = *((_DWORD *)v37 + 4);
  v38 = (int *)(v37 + 16);
  *(_DWORD *)(a2 + 16) = v39;
  if ((v24 & 1) == 0)
    *(_DWORD *)(a2 + 20) = v17[84 * v7 + 5];
  if (v19 >= 0x10000)
  {
    v44 = v18;
    v45 = v38 - 2;
    v46 = v38 - 1;
    v47 = (char *)&kTypeHierarchySpecPhonePad + 336 * isa;
    if (isa >= 0x97)
      v47 = 0;
    if (isa >= v12)
      v48 = v47;
    else
      v48 = &v16[336 * isa];
    v49 = *v38;
    if ((v24 ^ 1 | v23) == 1)
    {
      v50 = v23;
      memmove((void *)(a2 + 24), v48 + 24, 0x120uLL);
      v51 = *((_QWORD *)v48 + 41);
      *(_OWORD *)(a2 + 312) = *(_OWORD *)(v48 + 312);
      *(_QWORD *)(a2 + 328) = v51;
      if (!v50)
        *(_DWORD *)(a2 + 20) = *((_DWORD *)v48 + 5);
      v24 = 1;
    }
    v52 = 4.0;
    if (v16 == (char *)&kTypeHierarchySpecWatch)
      v52 = 2.0;
    v53 = *((_DWORD *)v48 + 3);
    v54 = *v46;
    v55 = *(_DWORD *)(a2 + 20);
    if ((v49 & 0x20) != 0)
    {
      v18 = v44;
      if (v55 - 2 < 5)
        v55 = dword_184948110[v55 - 2];
    }
    else
    {
      v18 = v44;
      if ((v49 & 0x40) != 0)
      {
        if (v55 - 3 >= 2)
        {
          if (v55 == 6)
            v55 = 7;
        }
        else
        {
          v55 = 6;
        }
      }
      else if ((v49 & 0x80) != 0)
      {
        if (v55 == 3)
        {
          v55 = 4;
        }
        else if (v55 == 4)
        {
          v55 = 5;
        }
      }
      else
      {
        if (v55 == 6)
          v56 = 8;
        else
          v56 = *(_DWORD *)(a2 + 20);
        if ((v49 & 0x100) != 0)
          v55 = v56;
      }
    }
    v57 = v55 < 9 && *v45 == 1;
    v58 = v55 + 9;
    if (!v57)
      v58 = v55;
    *(_DWORD *)(a2 + 20) = v58;
    v60 = v54 == 1 || v54 == -1;
    if (v53)
      v61 = 1;
    else
      v61 = !v60;
    if (v61)
      goto LABEL_110;
    v62 = 32;
    while (v54 != 1)
    {
      if (v54 == -1)
      {
        v63 = v52 + *(double *)(a2 + v62);
        goto LABEL_107;
      }
LABEL_108:
      v62 += 24;
      if (v62 == 320)
      {
        *(_DWORD *)(a2 + 12) = v54;
        goto LABEL_110;
      }
    }
    v63 = *(double *)(a2 + v62) - v52;
LABEL_107:
    *(double *)(a2 + v62) = v63;
    goto LABEL_108;
  }
  if (v23)
  {
    v40 = v18;
    v41 = (char *)&v17[84 * v7];
    memmove((void *)(a2 + 24), v41 + 24, 0x120uLL);
    v42 = *((_QWORD *)v41 + 5);
    v43 = *(_OWORD *)(v41 + 24);
    v18 = v40;
    *(_OWORD *)(a2 + 312) = v43;
    *(_QWORD *)(a2 + 328) = v42;
  }
LABEL_110:
  if (v24)
    return (unsigned int *)a2;
  else
    return v18;
}

uint64_t TDescriptorSource::UIFontNameForUIType(TDescriptorSource *this)
{
  if (qword_1EDD16F20 != -1)
    dispatch_once(&qword_1EDD16F20, &__block_literal_global_1044);
  return objc_msgSend((id)qword_1EDD16F18, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", this));
}

double LanguageAwareLineSpacingOverrideRatio(uint64_t a1, const __CFString *a2)
{
  int ExuberatedGroupForLanguage;
  double v6;

  if (qword_1EDD16F58 != -1)
  ExuberatedGroupForLanguage = ExuberatedGroupForTallPseudolanguageIfEnabled();
  if (a2)
  {
    ExuberatedGroupForLanguage = GetExuberatedGroupForLanguage(a2, 0);
    if (!ExuberatedGroupForLanguage)
      return 0.0;
  }
  else if (!ExuberatedGroupForLanguage)
  {
    ExuberatedGroupForLanguage = _ExuberatedGroupForPreferredLanguages(0, 0);
    if (!ExuberatedGroupForLanguage)
      return 0.0;
  }
  if (dword_1EDD16EBC)
    return GetLanguageAwareAdjustRatio();
  v6 = *(double *)(a1 + 8 * ExuberatedGroupForLanguage + 296);
  if (v6 == 0.0)
    return GetLanguageAwareAdjustRatio();
  else
    return v6 / *(double *)(a1 + 104);
}

uint64_t _ExuberatedGroupForPreferredLanguages(BOOL *a1, const __CFString **a2)
{
  const __CFArray *v4;

  if (qword_1ECDE77F0 != -1)
    dispatch_once_f(&qword_1ECDE77F0, 0, (dispatch_function_t)GetLocaleChangedCount(void)::$_0::__invoke);
  if (dword_1ECDE77D8 != gLocaleChangedCount)
  {
    dword_1ECDE77DC = 0;
    v4 = CFLocaleCopyPreferredLanguages();
    if (qword_1ECDE77F0 != -1)
      dispatch_once_f(&qword_1ECDE77F0, 0, (dispatch_function_t)GetLocaleChangedCount(void)::$_0::__invoke);
    dword_1ECDE77D8 = gLocaleChangedCount;
    if (v4)
    {

      dword_1ECDE77DC = _LargestExuberatedGroupForLanguages(v4, (const __CFString **)&qword_1ECDE7810, 1, (BOOL *)&byte_1ECDE77C2);
    }

  }
  if (a2)
    *a2 = (const __CFString *)(id)qword_1ECDE7810;
  if (a1)
    *a1 = byte_1ECDE77C2;
  return dword_1ECDE77DC;
}

uint64_t ExuberatedGroupForTallPseudolanguageIfEnabled(void)
{
  if (qword_1ECDE77F8 != -1)
    dispatch_once_f(&qword_1ECDE77F8, 0, (dispatch_function_t)ExuberatedGroupForTallPseudolanguageIfEnabled(void)::$_0::__invoke);
  return dword_1ECDE77D0;
}

BOOL TFont::ShapesPreferredLanguage(TFont *this)
{
  const __CFData *v1;
  unint64_t v2;
  unint64_t v3;
  __int32 *BytePtr;
  CFIndex Length;
  __int32 *v6;
  __int32 *v7;

  v1 = (const __CFData *)atomic_load((unint64_t *)this + 38);
  if (!v1)
    return 0;
  v2 = ScriptAndLangSysForPreferredLanguage();
  v3 = HIDWORD(v2);
  if (!HIDWORD(v2))
    return 0;
  BytePtr = (__int32 *)CFDataGetBytePtr(v1);
  Length = CFDataGetLength(v1);
  v6 = wmemchr(BytePtr, v3, Length >> 2);
  if (v6)
    v7 = v6;
  else
    v7 = (__int32 *)((char *)BytePtr + Length);
  return (char *)v7 - (char *)BytePtr != Length;
}

void TDescriptorSource::TDescriptorSource(TDescriptorSource *this)
{
  int v2;
  void *v3;

  if (qword_1ECDE7768 != -1)
    dispatch_once_f(&qword_1ECDE7768, 0, (dispatch_function_t)TDescriptorSource::GetCache(void)::{lambda(void *)#1}::__invoke);
  v2 = dword_1ECDE76E8;
  if (v2 != GetLocaleChangedCount())
  {
    v3 = (void *)atomic_load((unint64_t *)qword_1ECDE7760);
    objc_msgSend(v3, "removeAllObjects");
    dword_1ECDE76E8 = GetLocaleChangedCount();
  }
  *(_QWORD *)this = qword_1ECDE7760;
  if (qword_1ECDE76F0 != -1)
    dispatch_once_f(&qword_1ECDE76F0, 0, (dispatch_function_t)TDescriptorSource::TDescriptorSource(void)::$_0::__invoke);
}

uint64_t ScriptAndLangSysForPreferredLanguage(void)
{
  unsigned __int8 v0;
  int LocaleChangedCount;
  __CFString *v2;
  uint64_t v3;
  id v5;

  if ((v0 & 1) == 0
  {
    ScriptAndLangSysForPreferredLanguage(void)::sPreferredScriptAndLangSys = 0xFFFFFFFFLL;
  }
  os_unfair_lock_lock_with_options();
  LocaleChangedCount = GetLocaleChangedCount();
  if (ScriptAndLangSysForPreferredLanguage(void)::sLocaleChangedCount != LocaleChangedCount)
  {
    ScriptAndLangSysForPreferredLanguage(void)::sLocaleChangedCount = LocaleChangedCount;
    CopyPreferredLanguage((unint64_t *)&v5);
    v2 = (__CFString *)atomic_load((unint64_t *)&v5);
    ScriptAndLangSysForPreferredLanguage(void)::sPreferredScriptAndLangSys = ScriptAndLangSysFromCanonicalLanguage(v2);

  }
  v3 = ScriptAndLangSysForPreferredLanguage(void)::sPreferredScriptAndLangSys;
  os_unfair_lock_unlock(&ScriptAndLangSysForPreferredLanguage(void)::sLock);
  return v3;
}

uint64_t GetLocaleChangedCount(void)
{
  if (qword_1ECDE77F0 != -1)
    dispatch_once_f(&qword_1ECDE77F0, 0, (dispatch_function_t)GetLocaleChangedCount(void)::$_0::__invoke);
  return gLocaleChangedCount;
}

uint64_t OTL::GSUB::AddShapingGlyphs(_QWORD *a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  os_unfair_lock_s *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t *v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v8;
  v28 = v8;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)&v27, a3);
  v9 = *(os_unfair_lock_s **)(a1[2] + 400);
  os_unfair_lock_lock_with_options();
  v10 = *a2;
  v11 = a2[1];
  while (1)
  {
    if (v10 == v11)
    {
      v19 = 1;
      goto LABEL_18;
    }
    v12 = TBaseFont::NthLookup<OTL::GSUB>((uint64_t)v9, a1, *v10);
    if (v12)
      break;
LABEL_15:
    v10 += 2;
  }
  v13 = (uint64_t)v12;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v25, a3);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v23, a4);
  v14 = OTL::GSUB::AddShapingGlyphsForLookup((uint64_t)a1, v13, (uint64_t)v25, (uint64_t)v23);
  v15 = v24;
  if (v24 == v23)
  {
    v15 = v23;
    v16 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_9;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_9:
  v17 = v26;
  if (v26 == v25)
  {
    v17 = v25;
    v18 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_14;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_14:
  if (v14)
    goto LABEL_15;
  v19 = 0;
LABEL_18:
  os_unfair_lock_unlock(v9 + 89);
  v20 = (__int128 *)*((_QWORD *)&v28 + 1);
  if (*((__int128 **)&v28 + 1) == &v27)
  {
    v21 = 4;
    v20 = &v27;
LABEL_22:
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  }
  else if (*((_QWORD *)&v28 + 1))
  {
    v21 = 5;
    goto LABEL_22;
  }
  return v19;
}

uint64_t *TBaseFont::NthLookup<OTL::GSUB>(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  BOOL v13;
  _QWORD *v15;
  char v16;
  char v17;
  unsigned int v19;
  __int128 *v20;
  unsigned int *v21;
  _BYTE v22[312];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = a3;
  v4 = a1 + 360;
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>((_QWORD *)(a1 + 360), &v19);
  if (v5)
    return v5 + 3;
  v7 = (unsigned __int16 *)a2[8];
  if (v19 >= bswap32(*v7) >> 16)
    return 0;
  v8 = (unint64_t)v7 + (bswap32(v7[v19 + 1]) >> 16);
  v10 = a2[4];
  v9 = a2[5];
  if (v8 + 4 < v10 || v8 + 6 > v9)
    return 0;
  v12 = v8
      + 2 * (bswap32(*(unsigned __int16 *)(v8 + 4)) >> 16)
      + (((unint64_t)*(unsigned __int16 *)(v8 + 2) >> 11) & 2)
      + 6;
  v13 = v10 <= v8 && v12 >= v8;
  if (!v13 || v12 > v9)
    return 0;
  OTL::Lookup::Lookup<OTL::GSUB>((OTL::Lookup *)v22, (uint64_t)a2, v8);
  v20 = (__int128 *)v22;
  v21 = &v19;
  v15 = std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<OTL::Lookup&&>>(v4, &v19, (uint64_t)&std::piecewise_construct, &v21, &v20);
  v17 = v16;
  OTL::Lookup::~Lookup((OTL::Lookup *)v22);
  if (!v17)
    return 0;
  v6 = v15 + 3;
  OTL::Lookup::InitCoverageUnion(v6);
  return (uint64_t *)v6;
}

BOOL OTL::Coverage::IterateFmt1(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int16 v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _BOOL8 result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  char v22;

  v3 = *a1;
  v2 = a1[1];
  v4 = (unsigned __int16 *)(*a1 + 4);
  v5 = __rev16(*(unsigned __int16 *)(*a1 + 2));
  v6 = &v4[v5];
  if (*a1 + 6 <= v2)
    v7 = (v2 - (_DWORD)v4) >> 1;
  else
    v7 = 0;
  v8 = bswap32(v7) >> 16;
  v9 = v6 < v4 || (unint64_t)v6 > v2;
  if (v9)
    v10 = v7;
  else
    v10 = v5;
  if (v9)
    v11 = v8;
  else
    v11 = *(unsigned __int16 *)(*a1 + 2);
  if (!v11)
    return 1;
  if ((v10 & 0xFFFE) != 0)
    v13 = v10;
  else
    v13 = 1;
  v14 = bswap32(*v4) >> 16;
  v15 = std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a2, v14, v14, 0);
  result = 0;
  if (v15)
  {
    v17 = 0;
    v18 = v3 + 6;
    v19 = v13 - 1;
    do
    {
      v20 = v17 + 1;
      if (v19 == v17)
        break;
      v21 = bswap32(*(unsigned __int16 *)(v18 + 2 * v17)) >> 16;
      v22 = std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a2, v21, v21, v20);
      v17 = v20;
    }
    while ((v22 & 1) != 0);
    return v20 >= v10;
  }
  return result;
}

uint64_t std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v4;
  _BOOL8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return (*(uint64_t (**)(uint64_t, __int16 *, __int16 *, __int16 *))(*(_QWORD *)v4 + 48))(v4, &v11, &v10, &v9);
  v6 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,BOOL ()(unsigned short,unsigned short,unsigned short)>::operator()(v6, v7, v8);
}

uint64_t std::__function::__func<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,BOOL ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:nn180100]<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>(a1 + 8, a2, a3);
}

BOOL OTL::GSUB::AddShapingGlyphsForLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t i;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unsigned int v44;
  __int128 *v45;
  uint64_t v46;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  int v54;
  _QWORD v55[3];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v56 = v6;
  v57 = v6;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)&v56, a3);
  v55[0] = a2;
  v55[1] = a4;
  v55[2] = &v56;
  v49 = (unsigned __int16)(-21845 * ((*(_DWORD *)(a2 + 96) - *(_DWORD *)(a2 + 88)) >> 4));
  if (-21845 * (unsigned __int16)((*(_DWORD *)(a2 + 96) - *(_DWORD *)(a2 + 88)) >> 4))
  {
    v50 = a2;
    v7 = 0;
    v51 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v50 + 88);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v50 + 96) - v8) >> 4) <= v7)
        v9 = 0;
      else
        v9 = *(_QWORD *)(v8 + 48 * v7);
      if (*(_WORD *)(v50 + 16) == 4)
      {
        v10 = *(_QWORD *)(a1 + 40);
        v11 = v9 + 6;
        if ((unint64_t)(v9 + 4) < *(_QWORD *)(a1 + 32) || v11 > v10)
          goto LABEL_87;
        v13 = __rev16(*(unsigned __int16 *)(v9 + 4));
        v14 = v11 + 2 * v13;
        v15 = v9 + 8 <= v10 ? (v10 - v11) >> 1 : 0;
        v16 = v14 <= v10 && v14 >= v11;
        v54 = v13;
        v52 = v15;
        if (!v16 && v15 != v13)
          goto LABEL_87;
        if (*(_WORD *)(v9 + 4))
        {
          for (i = 0; (_DWORD)i != v54; ++i)
          {
            v19 = bswap32(*(unsigned __int16 *)(v9 + 4)) >> 16;
            v20 = v11 + 2 * v19;
            if (v20 < v11 || v20 > v10)
            {
              if (v52 == v19 && i < v19)
              {
LABEL_36:
                v23 = (unsigned __int16 *)(v9 + (bswap32(*(unsigned __int16 *)(v9 + 2 * i + 6)) >> 16));
                v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) <= v10)
                {
                  v25 = *v23;
                  v26 = __rev16(v25);
                  v27 = (unint64_t)&v24[v26];
                  v28 = (unint64_t)(v23 + 2) <= v10 ? (v10 - (unint64_t)v24) >> 1 : 0;
                  v29 = v27 <= v10 && v27 >= (unint64_t)v24;
                  v30 = v29 || v28 == v26;
                  if (v30 && v25 != 0)
                  {
                    v32 = 0;
                    do
                    {
                      v33 = bswap32(*v23) >> 16;
                      v34 = (unint64_t)&v24[v33];
                      if (v34 < (unint64_t)v24 || v34 > v10)
                      {
                        if (v28 != v33 || v32 >= v33)
                          break;
                      }
                      else if (v32 >= v33)
                      {
                        break;
                      }
                      v37 = (char *)v23 + (bswap32(v24[v32]) >> 16);
                      v38 = (unsigned __int16 *)(v37 + 4);
                      if ((unint64_t)(v37 + 4) > v10)
                        break;
                      v39 = bswap32(*((unsigned __int16 *)v37 + 1)) >> 16;
                      v40 = &v38[v39 - 1];
                      v41 = (unint64_t)(v37 + 6) <= v10 ? (v10 - (unint64_t)v38) >> 1 : 0;
                      v42 = (unint64_t)v40 <= v10 && v40 >= v38;
                      if (!v42 && v41 != v39 - 1)
                        break;
                      if ((_DWORD)v39)
                      {
                        if ((_DWORD)v39 == 1)
                        {
                          if ((OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)const::$_1::operator()(v55, v7) & 1) == 0)goto LABEL_87;
                        }
                        else
                        {
                          v44 = bswap32(*v38) >> 16;
                          std::function<void ()(unsigned short,unsigned short)>::operator()(a3, v44, v44);
                        }
                      }
                      ++v32;
                    }
                    while (v26 != v32);
                  }
                }
              }
            }
            else if (i < v19)
            {
              goto LABEL_36;
            }
          }
        }
      }
      else if (!OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)const::$_1::operator()(v55, v7))
      {
        goto LABEL_87;
      }
      v51 = ++v7 >= v49;
      if (v7 == v49)
        goto LABEL_87;
    }
  }
  v51 = 1;
LABEL_87:
  v45 = (__int128 *)*((_QWORD *)&v57 + 1);
  if (*((__int128 **)&v57 + 1) == &v56)
  {
    v46 = 4;
    v45 = &v56;
    goto LABEL_91;
  }
  if (*((_QWORD *)&v57 + 1))
  {
    v46 = 5;
LABEL_91:
    (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
  }
  return v51;
}

uint64_t std::function<void ()(unsigned short,unsigned short)>::operator()(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v3;
  _BOOL8 v5;
  __int16 v6;
  __int16 v7;

  v7 = a2;
  v6 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, __int16 *, __int16 *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>(v5);
}

uint64_t std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 24;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__vallocate[abi:nn180100]((_QWORD *)a1, v4 >> 4);
    v7 = *(_QWORD *)(a1 + 8);
    if (a3 != a2)
      memmove(*(void **)(a1 + 8), a2, v4);
    *(_QWORD *)(a1 + 8) = v7 + 16 * (v4 >> 4);
  }
  return a1;
}

void *TInlineBufferAllocator<CFRange,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = (unint64_t *)(a1 + 64);
  v3 = v4;
  v5 = v4 + 16 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(16 * a2);
  }
}

uint64_t OTL::Coverage::Iterate(unsigned __int16 **a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*a1)
    return 0;
  v3 = bswap32(**a1) >> 16;
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
      v4 = OTL::Coverage::IterateFmt1(a1, (uint64_t)v10);
      v5 = v11;
      if (v11 == v10)
      {
        v6 = 4;
        v5 = v10;
LABEL_11:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
        return v4;
      }
      goto LABEL_8;
    }
    return 0;
  }
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v8, a2);
  v4 = OTL::Coverage::IterateFmt2(a1, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_11;
  }
LABEL_8:
  if (v5)
  {
    v6 = 5;
    goto LABEL_11;
  }
  return v4;
}

uint64_t OTL::Coverage::IterateFmt2(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v9;
  uint64_t result;
  BOOL v11;

  v3 = a1[1];
  v4 = (unsigned __int16 *)(*a1 + 4);
  v5 = *(unsigned __int16 *)(*a1 + 2);
  LODWORD(v6) = __rev16(v5);
  v7 = &v4[3 * v6];
  if (v7 < v4 || (unint64_t)v7 > v3)
  {
    if (*a1 + 10 > v3)
      LODWORD(v6) = 0;
    else
      v6 = (v3 - (unint64_t)v4) / 6;
    v5 = bswap32(v6) >> 16;
    LODWORD(v6) = (unsigned __int16)v6;
  }
  if (!v5)
    return 1;
  v9 = &v4[3 * v6];
  do
  {
    result = std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a2, bswap32(*v4) >> 16, bswap32(v4[1]) >> 16, bswap32(v4[2]) >> 16);
    v4 += 3;
    if ((_DWORD)result)
      v11 = v4 == v9;
    else
      v11 = 1;
  }
  while (!v11);
  return result;
}

uint64_t std::__function::__func<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0E20;
  a2[1] = v2;
  return result;
}

void OTL::Lookup::~Lookup(OTL::Lookup *this)
{
  char *v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)((char *)this + 88);
  std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 46)
    free(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    MEMORY[0x186DC03AC](v3, 0x1000C401B2BBF36);
}

_QWORD *std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  int64x2_t v11;
  char *v12;
  uint64_t v13;
  int64x2_t v14;
  char *v15;
  _QWORD *v16;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      abort();
    v3 = (char **)result;
    v4 = (result[1] - *result) / 48;
    v16 = result + 3;
    v5 = (char *)TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>::allocate((uint64_t)(result + 3), a2);
    v7 = *v3;
    v6 = (unint64_t)v3[1];
    if ((char *)v6 == *v3)
    {
      v11 = vdupq_n_s64(v6);
      v8 = &v5[48 * v4];
    }
    else
    {
      v8 = &v5[48 * v4];
      do
      {
        v9 = *(_OWORD *)(v6 - 48);
        v10 = *(_OWORD *)(v6 - 16);
        *((_OWORD *)v8 - 2) = *(_OWORD *)(v6 - 32);
        *((_OWORD *)v8 - 1) = v10;
        *((_OWORD *)v8 - 3) = v9;
        v8 -= 48;
        v6 -= 48;
      }
      while ((char *)v6 != v7);
      v11 = *(int64x2_t *)v3;
    }
    *v3 = v8;
    v3[1] = &v5[48 * v4];
    v14 = v11;
    v12 = v3[2];
    v3[2] = &v5[48 * a2];
    v15 = v12;
    v13 = v11.i64[0];
    return (_QWORD *)std::__split_buffer<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul> &>::~__split_buffer((uint64_t)&v13);
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 48) % 0x30uLL + *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (_QWORD *)(v4 + 192);
    if (v4 <= (unint64_t)v3 && v5 > v3)
    {
      if (*(_QWORD *)(a1 + 24) == *v5)
        *v5 = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<OTL::Lookup&&>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4, __int128 **a5)
{
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27[3];

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *a2;
      if (v9 <= v8)
        v11 = v8 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v8)
              return v13;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
  }
  v15 = (_QWORD *)(a1 + 16);
  v27[2] = 0xAAAAAAAAAAAAAA01;
  v13 = operator new(0x150uLL);
  v27[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v8;
  v16 = *a5;
  *((_DWORD *)v13 + 4) = **a4;
  OTL::Lookup::Lookup((uint64_t)(v13 + 3), v16);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v11 = v8 % v9;
      else
        v11 = v8;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
  if (v24)
  {
    *v13 = *v24;
LABEL_38:
    *v24 = v13;
    goto LABEL_39;
  }
  *v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v23 + 8 * v11) = v15;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,OTL::Lookup>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,OTL::Lookup>,void *>>>>::reset[abi:nn180100](v27, 0);
  return v13;
}

uint64_t OTL::Lookup::Lookup(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unsigned int v5;
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 *v9;

  v3 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 44) = *((_WORD *)a2 + 22);
  *(_QWORD *)(a1 + 80) = a1 + 46;
  if (v5 >= 2)
  {
    v6 = (__int128 *)*((_QWORD *)a2 + 10);
    if (v6 == (__int128 *)((char *)a2 + 46))
    {
      v7 = *v6;
      *(_OWORD *)(a1 + 60) = *(__int128 *)((char *)v6 + 14);
      *(_OWORD *)(a1 + 46) = v7;
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v6;
      *((_QWORD *)a2 + 10) = (char *)a2 + 46;
    }
  }
  v9 = (__int128 *)*((_QWORD *)a2 + 11);
  v8 = (__int128 *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 112;
  std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<OTL::LookupSubtable const*,OTL::Coverage> const*>,std::__wrap_iter<std::pair<OTL::LookupSubtable const*,OTL::Coverage> const*>>((char *)(a1 + 88), v9, v8, 0xAAAAAAAAAAAAAAABLL * (v8 - v9));
  return a1;
}

void *TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 192);
  v2 = (unint64_t *)(a1 + 192);
  v3 = v4;
  v5 = v4 + 48 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >= 0x555555555555556)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(48 * a2);
  }
}

_DWORD *OTL::Lookup::InitCoverageUnion(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  BOOL v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 32))
  {
    v1 = (uint64_t)this;
    *((_BYTE *)this + 32) = 1;
    v2 = *((_QWORD *)this + 11);
    v3 = *((_QWORD *)this + 12);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = -1;
      do
      {
        v7 = *(unsigned __int16 *)(v2 + 40);
        v8 = *(unsigned __int16 *)(v2 + 42);
        v9 = v6;
        if (v7 < v6)
          v9 = *(_WORD *)(v2 + 40);
        v10 = v5;
        if (v5 <= v8)
          v10 = *(_WORD *)(v2 + 42);
        v11 = v7 > v8;
        v12 = v7 <= v8;
        if (!v11)
        {
          v5 = v10;
          v6 = v9;
        }
        v4 |= v12;
        v2 += 48;
      }
      while (v2 != v3);
      if ((v4 & 1) != 0)
      {
        if (v6 == v5)
        {
          this[10] = 1;
          *((_WORD *)this + 22) = v5;
          return this;
        }
        v13 = this + 10;
        this = OTL::CoverageBitmap::Reset(this + 10, v6, v5);
        v15 = *(_QWORD *)(v1 + 88);
        v14 = *(_QWORD *)(v1 + 96);
        if (v15 != v14)
        {
          while (1)
          {
            v17[0] = &off_1E15E0E20;
            v17[1] = v13;
            v18 = v17;
            OTL::Coverage::Iterate((unsigned __int16 **)(v15 + 8), (uint64_t)v17);
            this = v18;
            if (v18 == v17)
              break;
            if (v18)
            {
              v16 = 5;
LABEL_20:
              this = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v16))();
            }
            v15 += 48;
            if (v15 == v14)
              return this;
          }
          this = v17;
          v16 = 4;
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

_DWORD *OTL::CoverageBitmap::Reset(_DWORD *this, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;

  v3 = this;
  if (a2 == a3)
  {
    *this = 1;
    *((_WORD *)this + 2) = a2;
  }
  else
  {
    *((_WORD *)this + 2) = a2 & 0xFFF8;
    v4 = a3 - (a2 & 0xFFF8u) + 1;
    *this = v4;
    if (v4 <= 0x10000)
      v5 = (unint64_t)(v4 + 7) >> 3;
    else
      v5 = 0x2000;
    if (v5 > 0x1E)
    {
      this = malloc_type_calloc(1uLL, v5, 0xEC86B7EuLL);
      v3[5] = this;
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)this + 5);
      *v6 = 0;
      v6[1] = 0;
      *(_QWORD *)((char *)v6 + 22) = 0;
      v6[2] = 0;
    }
  }
  return this;
}

uint64_t AsMatchingOptions(int a1)
{
  uint64_t v2;

  if (qword_1ECDE7640 != -1)
    dispatch_once_f(&qword_1ECDE7640, 0, (dispatch_function_t)TDescriptor::GetSystemUIFontOptions(void)::$_0::__invoke);
  v2 = a1 & 0x95;
  if ((_MergedGlobals_13 & a1) != 0)
    v2 |= 0x400uLL;
  return v2 | a1 & 0x10000;
}

BOOL TSplicedFont::IsOpticalFont(TSplicedFont *this)
{
  return *((_QWORD *)this + 77) != 0;
}

void std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__do_rehash<true>(a1, prime);
  }
}

double GetWeightForLocalTrait(unsigned int a1)
{
  uint64_t *v1;

  if (a1 > 0x11)
    v1 = &kCTFontWeightRegular;
  else
    v1 = (uint64_t *)*(&off_1E15E72A0 + (int)a1);
  return *(double *)v1;
}

void TDescriptorSource::CreateDescriptorForUIFontDesign(CFDictionaryRef theDict@<X2>, TPurgeableCache **a2@<X0>, const __CFString *a3@<X1>, uint64_t a4@<X3>, __CFString *a5@<X4>, const __CFNumber *a6@<X5>, const __CFNumber *a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, const void *a10)
{
  CFIndex Count;
  unint64_t v18;
  unint64_t v19;
  const __CFNumber *Value;
  const __CFString **v21;
  double v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  _BOOL4 v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  BOOL v31;
  int v34;
  int v35;
  BOOL v36;
  __CFString *NameForSystemFontOfWeight;
  uint64_t v38;
  double Weight;
  uint64_t v40;
  double v41;
  double v42;
  const __CTFontDescriptor *v43;
  const __CFArray *v44;
  const __CTFontDescriptor *v45;
  void *v46;
  const __CFDictionary *v47;
  unint64_t v48;
  void *v49;
  const __CTFontDescriptor *v50;
  void *v51;
  const __CFDictionary *v52;
  unint64_t v53;
  void *v54;
  const __CFDictionary *v55;
  const void *v56;
  const __CFDictionary *v57;
  double v58;
  const __CFAllocator *v59;
  const CFDictionaryKeyCallBacks *v60;
  const CFDictionaryValueCallBacks *v61;
  __CFDictionary *Mutable;
  void *v63;
  CFDictionaryRef v64;
  void *v65;
  CFDictionaryRef v66;
  const __CTFontDescriptor *v67;
  CTFontDescriptorRef CopyWithAttributes;
  void *v69;
  id v70;
  __CFDictionary *v71;
  __CFDictionary *v72;
  __CFDictionary *v73;
  void *v74;
  const __CFDictionary *v75;
  void *v76;
  const __CFArray *v77;
  const __CFArray *v78;
  void *v79;
  const __CFArray *v80;
  const __CFArray *v81;
  const void *ValueAtIndex;
  const void *v83;
  TDescriptorSource *v84;
  _BOOL4 v85;
  BOOL v86[4];
  BOOL v87[4];
  uint64_t v88;
  id v91;
  id v92;
  id v93;
  void *v94;
  id v95;
  void *values;
  const void *valuePtr[2];

  if (!theDict)
    goto LABEL_78;
  Count = CFDictionaryGetCount(theDict);
  v18 = Count - 1;
  if (Count < 1)
    goto LABEL_78;
  v19 = Count;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontWeightTrait"));
  if (Value)
  {
    valuePtr[0] = (const void *)-1;
    CFNumberGetValue(Value, kCFNumberDoubleType, valuePtr);
    v22 = *(double *)valuePtr;
    v19 = v18;
  }
  else
  {
    v22 = 0.0;
  }
  if (v19 < 2)
  {
    v88 = a8;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_37;
  }
  v23 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontSlantTrait"));
  v24 = v23;
  if (v23)
  {
    --v19;
    valuePtr[0] = (const void *)-1;
    CFNumberGetValue(v23, kCFNumberDoubleType, valuePtr);
    v25 = *(double *)valuePtr != 0.0;
    if (v19 < 2)
    {
      v27 = 0;
      v29 = 0;
      goto LABEL_55;
    }
    v85 = *(double *)valuePtr != 0.0;
  }
  else
  {
    v85 = 0;
  }
  v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontProportionTrait"));
  v88 = a8;
  if (v28)
  {
    valuePtr[0] = (const void *)-1;
    v26 = v28;
    CFNumberGetValue(v28, kCFNumberDoubleType, valuePtr);
    if (*(double *)valuePtr == 0.0 && --v19 < 2)
    {
      v27 = 0;
      v29 = v26;
      a8 = v88;
      v25 = v85;
      goto LABEL_55;
    }
  }
  else
  {
    v26 = 0;
  }
  v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontSymbolicTrait"));
  if (v30)
  {
    LODWORD(valuePtr[0]) = -1431655766;
    CFNumberGetValue(v30, kCFNumberIntType, valuePtr);
    if (v26)
      v31 = v22 == 0.0;
    else
      v31 = 1;
    if (!v31 && v24 != 0 || LODWORD(valuePtr[0]) == 0)
    {
      v25 = v85;
LABEL_33:
      if (--v19 < 2)
      {
        v27 = 0;
        v29 = v26;
        a8 = v88;
        goto LABEL_55;
      }
      v85 = v25;
      goto LABEL_35;
    }
    if (LODWORD(valuePtr[0]) == 1)
    {
      v25 = 1;
      goto LABEL_33;
    }
  }
LABEL_35:
  v27 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontGradeTrait"));
  if (!v27)
  {
    v29 = v26;
    a8 = v88;
    v25 = v85;
    goto LABEL_41;
  }
  --v19;
  v25 = v85;
LABEL_37:
  v31 = v19 == 1;
  v29 = v26;
  a8 = v88;
  if (v31)
    goto LABEL_55;
LABEL_41:
  if (CFSTR("NSCTFontUIFontDesignDefault") != a3)
  {
    if (!a3
      || !CFSTR("NSCTFontUIFontDesignDefault")
      || (*(_DWORD *)v86 = v25, v34 = CFEqual(a3, CFSTR("NSCTFontUIFontDesignDefault")), v25 = *(_DWORD *)v86, !v34))
    {
      if (CFSTR("NSCTFontUIFontDesignCore") == a3)
      {
        v36 = 1;
      }
      else
      {
        if (!a3 || !CFSTR("NSCTFontUIFontDesignCore"))
          goto LABEL_78;
        *(_DWORD *)v87 = v25;
        v35 = CFEqual(a3, CFSTR("NSCTFontUIFontDesignCore"));
        v25 = *(_DWORD *)v87;
        v36 = v35 != 0;
      }
      if (v29 && v36)
        goto LABEL_55;
LABEL_78:
      v95 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v95, theDict);
      v71 = (__CFDictionary *)atomic_load((unint64_t *)&v95);
      CFDictionaryRemoveValue(v71, CFSTR("NSCTFontSlantTrait"));
      v72 = (__CFDictionary *)atomic_load((unint64_t *)&v95);
      CFDictionaryRemoveValue(v72, CFSTR("NSCTFontProportionTrait"));
      v73 = (__CFDictionary *)atomic_load((unint64_t *)&v95);
      CFDictionaryRemoveValue(v73, CFSTR("NSCTFontSymbolicTrait"));
      v74 = (void *)atomic_load((unint64_t *)&v95);
      values = v74;
      valuePtr[0] = CFSTR("NSCTFontTraitsAttribute");
      v75 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], valuePtr, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr[0] = (const void *)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::CopySplicedDescriptorsForRequest((unint64_t *)valuePtr, a2, v75, a4, a5, a6, a7, a8, a10);
      v76 = (void *)atomic_load((unint64_t *)valuePtr);
      v77 = v76;
      v78 = v77;
      if (v77 && CFArrayGetCount(v77) >= 1)
      {
        v79 = (void *)atomic_load((unint64_t *)valuePtr);
        v80 = v79;
        v81 = v80;
        if (v80)
          ValueAtIndex = CFArrayGetValueAtIndex(v80, 0);
        else
          ValueAtIndex = 0;
        v83 = (const void *)*MEMORY[0x1E0C9B0D0];

        if (ValueAtIndex != v83)
        {
          v84 = (TDescriptorSource *)atomic_load((unint64_t *)valuePtr);
          TDescriptorSource::CreateVariantWithTraitsMatchingDescriptors(v84, theDict, a9);
          goto LABEL_87;
        }
      }
      else
      {

      }
      *a9 = 0;
LABEL_87:

      v70 = v95;
      goto LABEL_88;
    }
  }
  if (!v29)
    goto LABEL_78;
LABEL_55:
  v95 = 0;
  NameForSystemFontOfWeight = TDescriptorSource::GetNameForSystemFontOfWeight(a3, 0, v22, v25, &v95, v21);
  if (!NameForSystemFontOfWeight)
    goto LABEL_78;
  *a9 = 0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopySplicedDescriptorForName(NameForSystemFontOfWeight, a5, a6, a7, a8, a10, a9, 0, 0, 0, v29, v27, 0, 0, 0);
  if (!v95)
    return;
  v94 = (void *)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopySplicedDescriptorForName(v95, a5, a6, a7, a8, a10, (unint64_t *)&v94, 0, 0, 0, v29, v27, 0, 0, 0);
  v38 = atomic_load(a9);
  Weight = CTFontDescriptorGetWeight(v38);
  v40 = atomic_load((unint64_t *)&v94);
  v41 = CTFontDescriptorGetWeight(v40);
  v42 = 0.0;
  if (Weight != v41)
    v42 = (v22 - Weight) / (v41 - Weight);
  v43 = (const __CTFontDescriptor *)atomic_load(a9);
  valuePtr[0] = CTFontDescriptorCopyAttribute(v43, CFSTR("NSCTFontVariationAxesAttribute"));
  do
    v44 = (const __CFArray *)__ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));

  v93 = (id)0xAAAAAAAAAAAAAAAALL;
  v45 = (const __CTFontDescriptor *)atomic_load(a9);
  valuePtr[0] = CTFontDescriptorCopyAttribute(v45, CFSTR("NSCTFontVariationAttribute"));
  do
    v46 = (void *)__ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  v93 = v46;

  v47 = (const __CFDictionary *)atomic_load((unint64_t *)&v93);
  AddDefaultsToVariation(v44, v47, (unint64_t *)valuePtr);
  do
    v48 = __ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  do
    v49 = (void *)__ldaxr((unint64_t *)&v93);
  while (__stlxr(v48, (unint64_t *)&v93));

  v92 = (id)0xAAAAAAAAAAAAAAAALL;
  v50 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v94);
  valuePtr[0] = CTFontDescriptorCopyAttribute(v50, CFSTR("NSCTFontVariationAttribute"));
  do
    v51 = (void *)__ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  v92 = v51;

  v52 = (const __CFDictionary *)atomic_load((unint64_t *)&v92);
  AddDefaultsToVariation(v44, v52, (unint64_t *)valuePtr);
  do
    v53 = __ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  do
    v54 = (void *)__ldaxr((unint64_t *)&v92);
  while (__stlxr(v53, (unint64_t *)&v92));

  v55 = (const __CFDictionary *)atomic_load((unint64_t *)&v93);
  if (v55)
    v55 = (const __CFDictionary *)CFDictionaryGetValue(v55, &unk_1E1614CC8);
  valuePtr[0] = (const void *)-1;
  CFNumberGetValue(v55, kCFNumberDoubleType, valuePtr);
  v56 = valuePtr[0];
  v57 = (const __CFDictionary *)atomic_load((unint64_t *)&v92);
  if (v57)
    v57 = (const __CFDictionary *)CFDictionaryGetValue(v57, &unk_1E1614CC8);
  valuePtr[0] = (const void *)-1;
  CFNumberGetValue(v57, kCFNumberDoubleType, valuePtr);
  v58 = std::__lerp[abi:nn180100]<double>(*(double *)&v56, *(double *)valuePtr, v42);
  v59 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v60 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v61 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  TCFNumber::TCFNumber<double>((unint64_t *)&v91, v22);
  v63 = (void *)atomic_load((unint64_t *)&v91);
  values = v63;
  valuePtr[0] = CFSTR("NSCTFontWeightTrait");
  v64 = CFDictionaryCreate(v59, valuePtr, (const void **)&values, 1, v60, v61);
  CFDictionaryAddValue(Mutable, CFSTR("NSCTFontTraitsAttribute"), v64);

  TCFNumber::TCFNumber<double>((unint64_t *)&v91, v58);
  v65 = (void *)atomic_load((unint64_t *)&v91);
  values = v65;
  valuePtr[0] = &unk_1E1614CC8;
  v66 = CFDictionaryCreate(v59, valuePtr, (const void **)&values, 1, v60, v61);
  CFDictionaryAddValue(Mutable, CFSTR("NSCTFontVariationAttribute"), v66);

  v67 = (const __CTFontDescriptor *)atomic_load(a9);
  CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v67, Mutable);
  do
    v69 = (void *)__ldaxr(a9);
  while (__stlxr((unint64_t)CopyWithAttributes, a9));

  v70 = v94;
LABEL_88:

}

uint64_t TDescriptorSource::IsSearchableAttribute(TDescriptorSource *this, const __CFString *a2)
{
  uint64_t result;

  if (qword_1ECDE7738 != -1)
    dispatch_once_f(&qword_1ECDE7738, 0, (dispatch_function_t)TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke);
  result = qword_1ECDE7730;
  if (qword_1ECDE7730)
    return CFSetContainsValue((CFSetRef)qword_1ECDE7730, this) != 0;
  return result;
}

uint64_t _LargestExuberatedGroupForLanguages(CFArrayRef theArray, const __CFString **a2, int a3, BOOL *a4)
{
  const __CFString **v5;
  uint64_t v7;
  int v8;
  const __CFString *v9;
  CFIndex v10;
  const __CFString *ValueAtIndex;
  uint64_t ExuberatedGroupForLanguage;
  const __CFString *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  _BOOL4 v18;
  void *v19;
  __CFString *v20;
  __CFString *v21;
  int v22;
  const __CFString *v23;
  int v24;
  __CFString *v25;
  uint64_t v26;
  BOOL *v29;
  __CFString *v31;
  int v32;
  CFIndex Count;
  const __CFString *v34;
  id v35;

  v5 = a2;
  if (a4)
    *a4 = 0;
  if (!theArray)
  {
    v25 = 0;
    v26 = 0;
    if (!a2)
      return v26;
    goto LABEL_45;
  }
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v29 = a4;
    v7 = 0;
    v32 = 0;
    v31 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v10);
      v34 = 0;
      v35 = 0;
      ExuberatedGroupForLanguage = GetExuberatedGroupForLanguage(ValueAtIndex, &v34);
      v13 = v34;
      do
        v14 = (void *)__ldaxr((unint64_t *)&v35);
      while (__stlxr((unint64_t)v13, (unint64_t *)&v35));

      v15 = (void *)atomic_load((unint64_t *)&v35);
      v16 = v15;
      v17 = v16;
      if (v16 == CFSTR("ar"))
      {
        v18 = 1;
      }
      else if (v16)
      {
        v18 = CFEqual(v16, CFSTR("ar")) != 0;
      }
      else
      {
        v18 = 0;
      }

      v8 |= v18;
      if ((int)ExuberatedGroupForLanguage > (int)v7)
      {
        v19 = (void *)atomic_load((unint64_t *)&v35);
        v20 = v19;
        if (v20 == CFSTR("ur"))
        {

        }
        else
        {
          v21 = v20;
          if (!v20)
          {

            goto LABEL_23;
          }
          v22 = CFEqual(v20, CFSTR("ur"));

          if (!v22)
            goto LABEL_23;
        }
        if (v29)
          *v29 = (v8 & 1) == 0;
        if ((v8 & a3 & 1) == 0)
        {
          v23 = v31;
          if (a3)
            v23 = ValueAtIndex;
          v31 = (__CFString *)v23;
          if (a3)
            ValueAtIndex = v9;
          v24 = v32;
          if (a3)
            v24 = ExuberatedGroupForLanguage;
          v32 = v24;
          if (a3)
            ExuberatedGroupForLanguage = v7;
          else
            ExuberatedGroupForLanguage = ExuberatedGroupForLanguage;
          goto LABEL_23;
        }
      }
      ValueAtIndex = v9;
      ExuberatedGroupForLanguage = v7;
LABEL_23:

      ++v10;
      v7 = ExuberatedGroupForLanguage;
      v9 = ValueAtIndex;
      if (v10 == Count)
        goto LABEL_38;
    }
  }
  ValueAtIndex = 0;
  v31 = 0;
  v32 = 0;
  LODWORD(ExuberatedGroupForLanguage) = 0;
LABEL_38:
  if (v32 <= (int)ExuberatedGroupForLanguage)
    v25 = (__CFString *)ValueAtIndex;
  else
    v25 = v31;
  if (v32 <= (int)ExuberatedGroupForLanguage)
    v26 = ExuberatedGroupForLanguage;
  else
    v26 = v32;
  v5 = a2;
  if (a2)
LABEL_45:
    *v5 = v25;
  return v26;
}

uint64_t GetExuberatedGroupForLanguage(const __CFString *a1, const __CFString **a2)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  const __CFDictionary *v6;
  __CFString *Value;
  uint64_t v8;
  int v9;
  BOOL v10;
  const void *v11;
  const __CFNumber *v12;
  unsigned int valuePtr;
  __CFString v15;

  v15.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  MaximizedLocaleIdentifier(&v15, a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const __CFString *)atomic_load((unint64_t *)&v15);
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v3, v4);
  v6 = ComponentsFromLocaleIdentifier;
  if (ComponentsFromLocaleIdentifier)
  {
    Value = (__CFString *)CFDictionaryGetValue(ComponentsFromLocaleIdentifier, (const void *)*MEMORY[0x1E0C9B088]);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  Value = 0;
  if (a2)
LABEL_3:
    *a2 = Value;
LABEL_4:
  if (Value == CFSTR("vi"))
  {
    v8 = 2;
    goto LABEL_21;
  }
  if (!Value)
  {
    if (!v6)
      goto LABEL_20;
    goto LABEL_17;
  }
  v8 = 2;
  if (!CFEqual(Value, CFSTR("vi")) && Value != CFSTR("lut"))
  {
    v9 = CFEqual(Value, CFSTR("lut"));
    if (v6)
      v10 = v9 == 0;
    else
      v10 = 0;
    if (!v10)
    {
      v8 = 2 * (v9 != 0);
      goto LABEL_21;
    }
LABEL_17:
    v11 = CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0C9B090]);
    if (v11)
    {
      v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16054F0, v11);
      if (v12)
      {
        valuePtr = -1431655766;
        CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
        v8 = valuePtr;
        goto LABEL_21;
      }
    }
LABEL_20:
    v8 = 0;
  }
LABEL_21:

  return v8;
}

uint64_t OTL::GSUB::ApplySingleSubst(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int GlyphID;
  unsigned int v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
  v11 = bswap32(*a2) >> 16;
  if (v11 == 2)
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = a2 + 3;
    if ((unint64_t)(a2 + 3) <= v12)
    {
      v14 = bswap32(a2[2]) >> 16;
      v15 = __CFADD__(v13, 2 * v14);
      v16 = (unint64_t)&v13[v14] > v12 || v15;
      v17 = (v12 - (unint64_t)v13) >> 1;
      v18 = (unint64_t)(a2 + 4) <= v12 ? v17 : 0;
      v19 = v18 == v14 ? 0 : v16;
      if (v14 >= a4 && (v19 & 1) == 0)
        GlyphID = bswap32(a2[a4 + 2]) >> 16;
    }
  }
  else if (v11 == 1)
  {
    GlyphID += bswap32(a2[2]) >> 16;
  }
  TRunGlue::SetGlyphID<true>(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48), (unsigned __int16)GlyphID);
  std::function<void ()(CFRange,long)>::operator()(a5, *(_QWORD *)(a3 + 48), 1, 1);
  return 1;
}

unsigned __int16 *OTL::ClassDefTable::Iterate(unsigned __int16 *result, uint64_t a2)
{
  unsigned __int16 *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  unsigned __int16 *v16;
  _BYTE v17[24];
  unsigned __int16 *v18;
  uint64_t v19;

  v3 = result;
  v19 = *MEMORY[0x1E0C80C00];
  v4 = bswap32(*result) >> 16;
  if (v4 != 2)
  {
    if (v4 == 1 && result[2])
    {
      v5 = 0;
      v6 = bswap32(result[1]) >> 16;
      v7 = __rev16(result[2]);
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = v7;
      v9 = result + 3;
      do
      {
        result = (unsigned __int16 *)std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a2, (unsigned __int16)v6 + (unsigned __int16)v5, (unsigned __int16)v6 + (unsigned __int16)v5, bswap32(v9[v5]) >> 16);
        ++v5;
      }
      while (v8 != v5);
    }
    return result;
  }
  v10 = result[1];
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v15, a2);
  if (v10)
  {
    v11 = v3 + 2;
    v12 = (uint64_t)&v3[3 * __rev16(v10) + 2];
    do
    {
      std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()((uint64_t)v15, bswap32(*v11) >> 16, bswap32(v11[1]) >> 16, bswap32(v11[2]) >> 16);
      v11 += 3;
    }
    while (v11 != (unsigned __int16 *)v12);
  }
  result = v16;
  if (v16)
  {
    if (v16 == (unsigned __int16 *)v15)
    {
      v18 = (unsigned __int16 *)v17;
      (*(void (**)(_QWORD *, _BYTE *))(v15[0] + 24))(v15, v17);
      result = v18;
    }
    else
    {
      v18 = v16;
      v16 = 0;
    }
    if (result == (unsigned __int16 *)v17)
    {
      v13 = 4;
      result = (unsigned __int16 *)v17;
    }
    else
    {
      if (!result)
      {
LABEL_22:
        result = v16;
        if (v16 == (unsigned __int16 *)v15)
        {
          v14 = 4;
          result = (unsigned __int16 *)v15;
        }
        else
        {
          if (!v16)
            return result;
          v14 = 5;
        }
        return (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      }
      v13 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)result + 8 * v13))();
    goto LABEL_22;
  }
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a3;
  if (v4 <= v5 && v4 != (unsigned __int16)(v5 + 1))
  {
    v6 = *a4;
    v7 = *(_QWORD *)(result + 8);
    do
      *(_WORD *)(v7 + 2 * (unsigned __int16)v4) = v6;
    while (v5 != (unsigned __int16)v4++);
  }
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v3;
  _WORD *v4;

  v3 = *a3;
  v4 = *(_WORD **)(result + 8);
  if ((unsigned __int16)*v4 < v3)
    *v4 = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a3;
  if (v4 <= v5 && v4 != (unsigned __int16)(v5 + 1))
  {
    v6 = *a4;
    v7 = *(_QWORD *)(result + 8);
    do
      *(_WORD *)(v7 + 2 * (unsigned __int16)v4) = v6;
    while (v5 != (unsigned __int16)v4++);
  }
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v3;
  _WORD *v4;

  v3 = *a3;
  v4 = *(_WORD **)(result + 8);
  if ((unsigned __int16)*v4 < v3)
    *v4 = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3}>,void ()(unsigned short)>::operator()(uint64_t a1, __int16 *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, _WORD *a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>(a1 + 8, a2, a3, a4);
}

uint64_t OTL::GSUB::ApplyLookups(_QWORD *a1, TRunGlue *a2, int a3, unsigned __int16 **a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned __int16 **v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t GlyphID;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD *, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  char v54;
  char v55;
  __int128 *v56;
  uint64_t v57;
  os_unfair_lock_s *lock;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unsigned __int16 **v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  int v69;
  TRunGlue *v70;
  _QWORD *v71;
  _QWORD *v73;
  TRunGlue *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  __int16 v83;
  _QWORD v84[3];
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v7 = (char *)a4[1] - (char *)*a4;
  if (!v7)
  {
    v55 = 1;
    return v55 & 1;
  }
  v8 = a4;
  v68 = (unsigned __int8 *)*((_QWORD *)a2 + 25);
  v12 = *((_QWORD *)a2 + 78);
  v85 = 0;
  v13 = v7 / 104;
  v14 = (v12 + 7) >> 3;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v87 = v15;
  v88 = v15;
  if (v12 > 0x10000)
    v14 = 0x2000;
  v63 = v14;
  v86 = v15;
  *((_QWORD *)&v87 + 1) = 0;
  v84[0] = a4;
  v84[1] = a6;
  v84[2] = a7;
  v74 = (TRunGlue *)v84;
  std::function<void ()(CFRange,long)>::operator=<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},void>(&v86, (uint64_t *)&v74);
  *(_QWORD *)&v88 = &v85;
  v70 = a2;
  *((_QWORD *)&v88 + 1) = TRunGlue::length(a2) << 7;
  v16 = *(_QWORD *)(a1[2] + 400);
  lock = (os_unfair_lock_s *)(v16 + 356);
  os_unfair_lock_lock_with_options();
  v17 = 0;
  v18 = 0;
  v61 = v16;
  v62 = v13;
  if (v13 <= 1)
    v19 = 1;
  else
    v19 = v13;
  v60 = v19;
  v66 = v8;
  v73 = a1;
  do
  {
    v64 = v17;
    v65 = v18;
    v20 = *(_DWORD *)&(*v8)[52 * v18];
    v83 = 0;
    v21 = TBaseFont::NthLookup<OTL::GSUB>(v16, a1, (unsigned __int16)v20);
    if (v21)
    {
      v22 = v21;
      if (!v68 || OTL::CoverageBitmap::CoversBitmap((OTL::CoverageBitmap *)(v21 + 5), v68, v63))
      {
        v23 = HIWORD(v20);
        v24 = *((unsigned __int16 *)v22 + 8);
        v25 = a3;
        if (v24 == 8)
          v25 = -a3;
        v69 = v25;
        v26 = *v66;
        v27 = v66[1];
        if (*v66 != v27)
        {
          while (*v26 != (unsigned __int16)v20 || v26[1] != v23)
          {
            v26 += 52;
            if (v26 == v27)
            {
              v26 = v66[1];
              break;
            }
          }
        }
        v30 = (_QWORD *)*((_QWORD *)v26 + 1);
        v29 = (_QWORD *)*((_QWORD *)v26 + 2);
        v67 = v29;
        while (v30 != v29)
        {
          v32 = *v30;
          v31 = v30[1];
          v71 = v30;
          if (v31 < 0)
            v31 = TRunGlue::length(v70) - v32;
          v82 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v80 = v33;
          v81 = v33;
          v76 = -1431655766;
          v74 = v70;
          v75 = v69;
          v77 = v32 - 1;
          v78 = v31 + v32;
          v79 = -1;
          v34 = TRunGlue::length(v70);
          *(_QWORD *)&v81 = -1;
          *((_QWORD *)&v81 + 1) = -1;
          *(_QWORD *)&v80 = v34;
          v82 = 0;
          v35 = v77;
          if (v69 < 0)
          {
            v36 = v79;
            v77 = v78;
            v78 = v35;
            v79 = v34;
            *(_QWORD *)&v80 = v36;
            v35 = v77;
          }
          v37 = v22[3];
          *((_QWORD *)&v80 + 1) = v35;
          v82 = v37;
          if (TGlyphIterator::NextCoveredBy((TGlyphIterator *)&v74, (const OTL::Lookup *)v22))
          {
            while (1)
            {
              v38 = -1431655765 * ((*((_DWORD *)v22 + 24) - *((_DWORD *)v22 + 22)) >> 4);
              v39 = *((_QWORD *)&v80 + 1);
              GlyphID = TRunGlue::GetGlyphID(v74, *((uint64_t *)&v80 + 1));
              v41 = (unsigned __int16)v38;
              if ((_WORD)v38)
              {
                v42 = GlyphID;
                v43 = 0;
                v44 = 0;
                v45 = 48 * v41;
                do
                {
                  *((_QWORD *)&v80 + 1) = v39;
                  v46 = v22[11];
                  if (0xAAAAAAAAAAAAAAABLL * ((v22[12] - v46) >> 4) <= v44)
                    break;
                  v47 = v46 + v43;
                  v48 = *(uint64_t (**)(_QWORD *, uint64_t))(v46 + v43 + 24);
                  v49 = *(_QWORD *)(v47 + 32);
                  v50 = (_QWORD *)(v47 + (v49 >> 1) + 8);
                  if ((v49 & 1) != 0)
                    v48 = *(uint64_t (**)(_QWORD *, uint64_t))(*v50 + v48);
                  v51 = v48(v50, v42);
                  if (v51)
                  {
                    v52 = v22[11];
                    v53 = 0xAAAAAAAAAAAAAAABLL * ((v22[12] - v52) >> 4) <= v44 ? 0 : *(unsigned __int16 **)(v52 + v43);
                    v54 = 1;
                    if ((OTL::GSUB::ApplyLookupSubtable(v73, (int)v22, v24, v53, (TGlyphIterator *)&v74, v51, v23, &v83, (uint64_t)&v86, 1uLL) & 1) != 0)goto LABEL_39;
                  }
                  ++v44;
                  v43 += 48;
                }
                while (v45 != v43);
                v54 = 0;
LABEL_39:
                *a5 |= v54;
              }
              if (v85)
                break;
              if ((TGlyphIterator::NextCoveredBy((TGlyphIterator *)&v74, (const OTL::Lookup *)v22) & 1) == 0)
                goto LABEL_42;
            }
            v55 = v64;
            goto LABEL_46;
          }
LABEL_42:
          v30 = v71 + 2;
          v29 = v67;
        }
      }
    }
    v8 = v66;
    v18 = v65 + 1;
    v16 = v61;
    v17 = v65 + 1 >= v62;
    a1 = v73;
  }
  while (v65 + 1 != v60);
  v55 = 1;
LABEL_46:
  os_unfair_lock_unlock(lock);
  v56 = (__int128 *)*((_QWORD *)&v87 + 1);
  if (*((__int128 **)&v87 + 1) == &v86)
  {
    v57 = 4;
    v56 = &v86;
    goto LABEL_50;
  }
  if (*((_QWORD *)&v87 + 1))
  {
    v57 = 5;
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
  }
  return v55 & 1;
}

uint64_t OTL::Coverage::SearchFmt1Binary(OTL::Coverage *this, unsigned int a2)
{
  unint64_t v2;
  char *v3;
  unsigned int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned __int16 v9;
  unsigned int v10;
  char v12;
  unsigned __int16 *v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *((_QWORD *)this + 1);
  v3 = (char *)(*(_QWORD *)this + 4);
  v4 = __rev16(*(unsigned __int16 *)(*(_QWORD *)this + 2));
  v5 = (unsigned __int16 *)&v3[2 * v4];
  if (*(_QWORD *)this + 6 <= v2)
    v6 = (v2 - (_DWORD)v3) >> 1;
  else
    v6 = 0;
  v7 = bswap32(v6) >> 16;
  v8 = v5 < (unsigned __int16 *)v3 || (unint64_t)v5 > v2;
  if (v8)
    v9 = v6;
  else
    v9 = v4;
  if (v8)
    v10 = v7;
  else
    v10 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (!v10 || a2 < bswap32(*(unsigned __int16 *)v3) >> 16)
    return 0;
  v12 = __clz(v9) ^ 0x1F;
  v13 = (unsigned __int16 *)&v3[2 * (-1 << v12) + 2 * v9];
  v14 = *v13;
  if (bswap32(v14) >> 16 <= a2)
  {
    v15 = (char *)v13;
  }
  else
  {
    v14 = *(unsigned __int16 *)v3;
    v15 = (char *)(*(_QWORD *)this + 4);
  }
  v16 = (2 << v12);
  if (v16 >= 3)
  {
    do
    {
      if (a2 >= bswap32(*(unsigned __int16 *)&v15[v16 >> 1]) >> 16)
        v15 += v16 >> 1;
      v8 = v16 > 5;
      v16 >>= 1;
    }
    while (v8);
    v14 = *(unsigned __int16 *)v15;
  }
  v17 = (unint64_t)(v15 - v3) >> 1;
  if (a2 == bswap32(v14) >> 16)
    return (v17 + 1);
  else
    return 0;
}

BOOL OTL::CoverageBitmap::CoversBitmap(OTL::CoverageBitmap *this, const unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned __int8 *v11;
  const unsigned __int8 *v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;

  v3 = *(unsigned int *)this;
  if (!(_DWORD)v3)
    return 0;
  v4 = *((unsigned __int16 *)this + 2);
  if (a3 <= v4 >> 3)
    return 0;
  v5 = v4 >> 3;
  if ((_DWORD)v3 == 1)
    return (a2[v5] >> (v4 & 7)) & 1;
  v7 = a3 - v5;
  v8 = (unint64_t)(v3 + 7) >> 3;
  v9 = v3 > 0x10000;
  v10 = 0x2000;
  if (!v9)
    v10 = v8;
  if (v10 < v7)
    v7 = v10;
  if (!v7)
    return 0;
  v11 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v12 = &a2[v5];
  v13 = v7 - 1;
  do
  {
    v15 = *v11++;
    v14 = v15;
    v16 = *v12++;
    v17 = v16 & v14;
    result = v17 != 0;
    if (v17)
      v18 = 1;
    else
      v18 = v13 == 0;
    --v13;
  }
  while (!v18);
  return result;
}

uint64_t OTL::GSUB::ApplyLookupSubtable(_QWORD *a1, int a2, int a3, unsigned __int16 *a4, TGlyphIterator *this, unsigned int a6, unsigned int a7, _WORD *a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v10 = 0;
  switch(a3)
  {
    case 1:
      return OTL::GSUB::ApplySingleSubst((uint64_t)a1, a4, (uint64_t)this, a6, a9);
    case 2:
      if (*a4 != 256 || !OTL::GSUB::ApplyMultipleSubst((uint64_t)a1, (uint64_t)a4, this, a6, a8, a9))
        goto LABEL_21;
      v13 = TRunGlue::length(*(TRunGlue **)this);
      v10 = 1;
      if (v13 > *(_QWORD *)(a9 + 40))
        **(_BYTE **)(a9 + 32) = 1;
      goto LABEL_22;
    case 3:
      if (*a4 != 256)
        goto LABEL_21;
      return OTL::GSUB::ApplyAlternateSubst((uint64_t)a1, (uint64_t)a4, (uint64_t)this, a6, a7, a9);
    case 4:
      if (*a4 != 256)
        goto LABEL_21;
      return OTL::GSUB::ApplyLigatureSubst((uint64_t)a1, (uint64_t)a4, this, a6, a8, a9);
    case 5:
      v14 = bswap32(*a4) >> 16;
      switch(v14)
      {
        case 3u:
          result = OTL::GSUB::ApplyContextSubstFormat3(a1, (unint64_t)a4, (uint64_t)this, a8, a9, a10);
          break;
        case 2u:
          result = (uint64_t)OTL::GSUB::ApplyContextSubstFormat2(a1, a4, (uint64_t)this, a8, a9, a10);
          break;
        case 1u:
          result = OTL::GSUB::ApplyContextSubstFormat1(a1, (ContextSubstFormat1 *)a4, (uint64_t)this, a6, a8, a9, a10);
          break;
        default:
          goto LABEL_21;
      }
      break;
    case 6:
      v15 = bswap32(*a4) >> 16;
      switch(v15)
      {
        case 3u:
          result = OTL::GSUB::ApplyChainContextSubstFormat3(a1, (unint64_t)a4, (uint64_t)this, a8, a9, a10);
          break;
        case 2u:
          result = (uint64_t)OTL::GSUB::ApplyChainContextSubstFormat2(a1, a4, (uint64_t)this, a8, a9, a10);
          break;
        case 1u:
          result = OTL::GSUB::ApplyChainContextSubstFormat1(a1, (ChainContextSubstFormat1 *)a4, (uint64_t)this, a6, a8, a9, a10);
          break;
        default:
LABEL_21:
          v10 = 0;
LABEL_22:
          result = v10;
          break;
      }
      break;
    case 8:
      if (*a4 != 256)
        goto LABEL_21;
      return OTL::GSUB::ApplyReverseChainSingleSubst((uint64_t)a1, (unint64_t)a4, (uint64_t)this, a6, a9);
    default:
      goto LABEL_22;
  }
  return result;
}

uint64_t OTL::GSUB::ApplyLigatureSubst(uint64_t a1, uint64_t a2, TGlyphIterator *this, unsigned int a4, _WORD *a5, uint64_t a6)
{
  unint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  char v16;
  unint64_t v17;
  TGlyphIterator *v20;
  uint64_t v21;
  int GlyphID;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  TRunGlue **v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t *v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[33];

  v74[31] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (unsigned __int16 *)(a2 + 4);
  v8 = a2 + 6;
  if ((unint64_t)(a2 + 4) < *(_QWORD *)(a1 + 32) || v8 > v6)
    return 0;
  result = 0;
  v14 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v15 = __CFADD__(v8, 2 * v14);
  v16 = v8 + 2 * v14 > v6 || v15;
  if (a2 + 8 <= v6)
    v17 = (v6 - v8) >> 1;
  else
    v17 = 0;
  if (v17 == v14)
    v16 = 0;
  if (v14 >= a4 && (v16 & 1) == 0)
  {
    v20 = this;
    v66 = a1;
    v21 = *((_QWORD *)this + 6);
    v69 = v21;
    if (TGlyphIterator::Next(this, 1))
    {
      v68 = *((_QWORD *)v20 + 6);
      v69 = v68;
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)v20, v68);
    }
    else
    {
      GlyphID = 0xFFFF;
      v68 = v21;
    }
    v23 = v21;
    v24 = a4 - 1;
    v25 = bswap32(*v7) >> 16;
    v26 = v8 + 2 * v25;
    v67 = a6;
    v65 = a5;
    if (v26 < v8 || v26 > v6)
    {
      v27 = 0;
      if (v17 != v25 || v24 >= v25)
        goto LABEL_43;
    }
    else if (v24 >= v25)
    {
LABEL_42:
      v27 = 0;
LABEL_43:
      *((_QWORD *)v20 + 6) = v23;
      return v27 & 1;
    }
    v28 = (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 2 * v24 + 6)) >> 16));
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) > v6)
      goto LABEL_42;
    v30 = *v28;
    v31 = __rev16(v30);
    v32 = (unint64_t)&v29[v31];
    v33 = (unint64_t)(v28 + 2) <= v6 ? (v6 - (unint64_t)v29) >> 1 : 0;
    v34 = v32 <= v6 && v32 >= (unint64_t)v29;
    v35 = v34 || v33 == v31;
    if (!v35 || v30 == 0)
      goto LABEL_42;
    v37 = 0;
    v27 = 0;
    v38 = v74;
    v39 = v31 - 1;
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v41 = v68;
    v42 = v68;
    while (1)
    {
      v43 = bswap32(*v28) >> 16;
      v44 = (unint64_t)&v29[v43];
      if (v44 < (unint64_t)v29 || v44 > v6)
      {
        if (v33 != v43 || v37 >= v43)
          goto LABEL_43;
      }
      else if (v37 >= v43)
      {
        goto LABEL_43;
      }
      v47 = (unsigned __int16 *)((char *)v28 + (bswap32(v29[v37]) >> 16));
      v48 = v47 + 2;
      if ((unint64_t)(v47 + 2) > v6)
        goto LABEL_43;
      v49 = bswap32(v47[1]) >> 16;
      v50 = &v48[v49 - 1];
      v51 = (v6 - (unint64_t)v48) >> 1;
      if ((unint64_t)(v47 + 3) > v6)
        v51 = 0;
      v52 = (unint64_t)v50 <= v6 && v50 >= v48;
      if (!v52 && v51 != v49 - 1)
        goto LABEL_43;
      if (!(_DWORD)v49)
        goto LABEL_83;
      if ((_DWORD)v49 == 2)
        break;
      v54 = (v49 - 1);
      if ((_DWORD)v49 == 1)
      {
        v57 = v23;
        TGlyphIterator::DoLigature((TRunGlue **)v20, v23, bswap32(*v47) >> 16, 0, 0, *(const OTL::GDEF **)(v66 + 24));
        v27 = 1;
        std::function<void ()(CFRange,long)>::operator()(v67, v57, 1, 1);
        v23 = v57;
        goto LABEL_43;
      }
      if (v42 == v23)
      {
        v42 = v23;
LABEL_74:
        v41 = v23;
        if ((v27 & 1) != 0)
          goto LABEL_43;
        goto LABEL_84;
      }
      if (GlyphID == bswap32(*v48) >> 16)
      {
        v59 = v39;
        v60 = v38;
        v61 = v33;
        v62 = GlyphID;
        v63 = v23;
        v38[13] = v40;
        v38[14] = v40;
        v38[11] = v40;
        v38[12] = v40;
        v38[9] = v40;
        v38[10] = v40;
        v38[7] = v40;
        v38[8] = v40;
        v38[5] = v40;
        v38[6] = v40;
        v38[3] = v40;
        v38[4] = v40;
        v38[1] = v40;
        v38[2] = v40;
        *v38 = v40;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v74[30] = v38;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v71, (v49 - 1));
        v64 = (TRunGlue **)v20;
        v55 = (char *)v72;
        bzero(v72, 8 * v54);
        v56 = &v55[8 * v54];
        v20 = (TGlyphIterator *)v64;
        v72 = v56;
        *v71 = v68;
        if (TGlyphIterator::Next((TGlyphIterator *)v64, 1))
        {
          v20 = (TGlyphIterator *)v64;
          if (&v48[v54] == EqualSequenceAndNote<BigEndianScalar<unsigned short>>(v47 + 3, &v48[v54], (uint64_t *)v64, v71 + 1))
          {
            TGlyphIterator::DoLigature(v64, v63, bswap32(*v47) >> 16, v71, v54, *(const OTL::GDEF **)(v66 + 24));
            v27 = 1;
            std::function<void ()(CFRange,long)>::operator()(v67, v63, 1, 1);
            *v65 += v54;
          }
        }
        *((_QWORD *)v20 + 6) = v68;
        v70 = (void **)&v71;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v70);
        v42 = v68;
        v41 = v68;
        v23 = v63;
        GlyphID = v62;
        v38 = v60;
        v33 = v61;
        v39 = v59;
        *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
        if ((v27 & 1) != 0)
          goto LABEL_43;
      }
      else
      {
        v41 = v42;
        if ((v27 & 1) != 0)
          goto LABEL_43;
      }
LABEL_84:
      v35 = v39 == v37++;
      if (v35)
        goto LABEL_43;
    }
    if (v41 != v23)
    {
      if (GlyphID == bswap32(*v48) >> 16)
      {
        v27 = 1;
        v58 = v23;
        TGlyphIterator::DoLigature((TRunGlue **)v20, v23, bswap32(*v47) >> 16, &v69, 1, *(const OTL::GDEF **)(v66 + 24));
        std::function<void ()(CFRange,long)>::operator()(v67, v58, 1, 1);
        v23 = v58;
        ++*v65;
        goto LABEL_43;
      }
LABEL_83:
      if ((v27 & 1) != 0)
        goto LABEL_43;
      goto LABEL_84;
    }
    goto LABEL_74;
  }
  return result;
}

void *TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 240);
  v2 = (unint64_t *)(a1 + 240);
  v3 = v4;
  v5 = v4 + 8 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(8 * a2);
  }
}

uint64_t OTL::Coverage::SearchFmt1Linear(OTL::Coverage *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this + 4;
  v4 = __rev16(*(unsigned __int16 *)(*(_QWORD *)this + 2));
  v5 = v3 + 2 * v4;
  if (*(_QWORD *)this + 6 <= v2)
    v6 = (v2 - v3) >> 1;
  else
    v6 = 0;
  v7 = bswap32(v6) >> 16;
  v8 = v5 < v3 || v5 > v2;
  if (v8)
    LOWORD(v9) = v6;
  else
    LOWORD(v9) = v4;
  if (v8)
    v10 = v7;
  else
    v10 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (!v10)
    return 0;
  v11 = 0;
  if ((v9 & 0xFFFE) != 0)
    v9 = (unsigned __int16)v9;
  else
    v9 = 1;
  while (a2 != bswap32(*(unsigned __int16 *)(v3 + 2 * v11)) >> 16)
  {
    if (v9 == ++v11)
      return 0;
  }
  return (v11 + 1);
}

uint64_t OTL::GPOS::ApplyPairPosAccelerated(OTL::GPOS *this, const OTL::Lookup *a2, TGlyphIterator *a3)
{
  unsigned __int16 *v4;
  unsigned int v5;
  __int128 v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  TGlyphIterator *v13;
  uint64_t GlyphID;
  unsigned int v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  float **v19;
  float *i;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  char *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  __int32 v34;
  unsigned int v35;
  __int32 v36;
  int v37;
  unsigned __int16 *v38;
  int8x8_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  int8x8_t v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  unsigned __int16 *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  size_t v71;
  _WORD *v72;
  _WORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t (***v76)();
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  unsigned __int16 v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  _WORD *v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int8x8_t v105;
  uint64_t v106;
  uint8x8_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  BOOL v110;
  BOOL v111;
  unint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  TRunGlue *v116;
  uint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  unint64_t v120;
  void **v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  float v125;
  float v126;
  _BOOL8 v127;
  unint64_t v128;
  unint64_t v129;
  size_t v130;
  size_t prime;
  void *v132;
  void *v133;
  uint64_t v134;
  _QWORD *v135;
  size_t v136;
  uint8x8_t v137;
  unint64_t v138;
  uint8x8_t v139;
  uint64_t v140;
  _QWORD *v141;
  size_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  os_unfair_lock_s *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _WORD *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  os_unfair_lock_s *lock;
  TGlyphIterator *v165;
  uint64_t v166;
  unsigned int v168;
  unint64_t v169;
  unsigned __int16 *v170;
  unint64_t v171;
  TRunGlue *v173;
  uint64_t v174;
  unsigned __int16 *v175;
  uint64_t v176;
  OTL::GPOS *v177;
  unsigned __int16 v178;
  uint64_t (**v179)();
  uint64_t v180;
  uint64_t (***v181)();
  _QWORD v182[3];
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  void *__p;
  void *v189;
  _OWORD *v190;
  _OWORD v191[24];
  _QWORD v192[3];
  CGSize v193;

  v192[1] = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int16 *)*((_QWORD *)this + 5);
  v5 = -1431655765 * ((*((_DWORD *)a2 + 24) - *((_DWORD *)a2 + 22)) >> 4);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v191[22] = v6;
  v191[23] = v6;
  v191[20] = v6;
  v191[21] = v6;
  v191[18] = v6;
  v191[19] = v6;
  v191[16] = v6;
  v191[17] = v6;
  v191[15] = v6;
  v191[14] = v6;
  v191[13] = v6;
  v191[12] = v6;
  v191[11] = v6;
  v191[10] = v6;
  v191[9] = v6;
  v191[8] = v6;
  v191[7] = v6;
  v191[6] = v6;
  v191[5] = v6;
  v191[4] = v6;
  v191[3] = v6;
  v191[2] = v6;
  v191[1] = v6;
  v191[0] = v6;
  __p = 0;
  v189 = 0;
  v190 = 0;
  v192[0] = v191;
  v7 = (unsigned __int16)v5;
  if ((_WORD)v5)
  {
    if (&v191[2 * (unsigned __int16)v5] <= (_OWORD *)v192)
    {
      v192[0] = &v191[2 * (unsigned __int16)v5];
      v8 = v191;
    }
    else
    {
      v8 = operator new(32 * (unsigned __int16)v5);
    }
    v9 = &v8[2 * v7];
    __p = v8;
    v190 = v9;
    bzero(v8, 32 * v7);
    v189 = v9;
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *(_QWORD *)(v10 + 400);
  v156 = (os_unfair_lock_s *)(v10 + 448);
  os_unfair_lock_lock_with_options();
  v12 = *((_QWORD *)this + 2);
  if (!TGlyphIterator::Next(a3, 1))
  {
LABEL_250:
    v46 = 0;
    goto LABEL_252;
  }
  v170 = v4;
  v171 = v7;
  v163 = 0;
  v162 = v11;
  lock = (os_unfair_lock_s *)(v11 + 444);
  v165 = a3;
  v157 = (_QWORD *)(v11 + 448);
  v155 = (unint64_t *)(v11 + 480);
  v161 = v12;
  v150 = (_QWORD *)(v12 + 472);
  v151 = v11 + 472;
  do
  {
    v13 = v165;
    v166 = *((_QWORD *)v165 + 6);
    GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)v165, v166);
    if (!OTL::CoverageBitmap::Covers((const OTL::Lookup *)((char *)a2 + 40), GlyphID))
      goto LABEL_248;
    if (!TGlyphIterator::Next(v165, 1))
    {
      v46 = v163;
      break;
    }
    v158 = *((_QWORD *)v165 + 6);
    v15 = TRunGlue::GetGlyphID(*(TRunGlue **)v165, v158);
    *((_QWORD *)v165 + 6) = v166;
    v168 = v15;
    v169 = v15 | ((_DWORD)GlyphID << 16);
    v16 = *(int8x8_t *)(v161 + 464);
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8(v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = v15 | ((_DWORD)GlyphID << 16);
        if (*(_QWORD *)&v16 <= v169)
          v18 = v169 % *(_QWORD *)&v16;
      }
      else
      {
        v18 = (v16.i32[0] - 1) & v169;
      }
      v19 = *(float ***)(*(_QWORD *)(v161 + 456) + 8 * v18);
      if (v19)
      {
        for (i = *v19; i; i = *(float **)i)
        {
          v21 = *((_QWORD *)i + 1);
          if (v21 == v169)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v169)
            {
              v115 = i[5];
              if (v115 != 0.0)
              {
                v116 = *(TRunGlue **)v165;
                v193.width = TRunGlue::GetAdvance(*(TRunGlue **)v165, v166) + *((double *)v116 + 80) * v115;
                TRunGlue::SetAdvance(v116, v166, v193);
                goto LABEL_247;
              }
              goto LABEL_248;
            }
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v21 >= *(_QWORD *)&v16)
                v21 %= *(_QWORD *)&v16;
            }
            else
            {
              v21 &= *(_QWORD *)&v16 - 1;
            }
            if (v21 != v18)
              break;
          }
        }
      }
    }
    if (!v171)
      goto LABEL_248;
    v22 = 0;
    while (1)
    {
      v23 = *((_QWORD *)a2 + 11);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 12) - v23) >> 4) <= v22)
        goto LABEL_250;
      v24 = v23 + 48 * v22;
      v25 = *(uint64_t (**)(_QWORD *, uint64_t))(v24 + 24);
      v26 = *(_QWORD *)(v24 + 32);
      v27 = (_QWORD *)(v24 + (v26 >> 1) + 8);
      if ((v26 & 1) != 0)
        v25 = *(uint64_t (**)(_QWORD *, uint64_t))(*v27 + v25);
      v28 = v25(v27, GlyphID);
      if (!v28)
        goto LABEL_63;
      v29 = v28;
      v30 = __p;
      v31 = (char *)__p + 32 * v22;
      v32 = *(unsigned __int16 **)v31;
      if (*(_QWORD *)v31)
        goto LABEL_33;
      v43 = *((_QWORD *)a2 + 11);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 12) - v43) >> 4) <= v22)
        v32 = 0;
      else
        v32 = *(unsigned __int16 **)(v43 + 48 * v22);
      v46 = 0;
      if (*((_QWORD *)this + 4) > (unint64_t)v32 || v32 + 4 > v170)
        goto LABEL_252;
      v47 = bswap32(*v32) >> 16;
      if (v47 == 2)
      {
        if (v32 + 8 > v170)
          goto LABEL_250;
        v54 = (unsigned __int16 *)((char *)v32 + (bswap32(v32[4]) >> 16));
        if (v54 + 1 > v170)
          goto LABEL_250;
        v55 = bswap32(*v54) >> 16;
        if (v55 == 2)
        {
          v56 = 6 * (bswap32(v54[1]) >> 16) + 4;
        }
        else if (v55 == 1)
        {
          v56 = 2 * (bswap32(v54[2]) >> 16) + 6;
        }
        else
        {
          v56 = 0;
        }
        v46 = 0;
        v57 = (char *)v54 + v56;
        if (v57 < (char *)v54 || v57 > (char *)v170)
          goto LABEL_252;
        v58 = (unsigned __int16 *)((char *)v32 + (bswap32(v32[5]) >> 16));
        if (v58 + 1 > v170)
          goto LABEL_250;
        v59 = bswap32(*v58) >> 16;
        if (v59 == 2)
          v60 = 6 * (bswap32(v58[1]) >> 16) + 4;
        else
          v60 = v59 == 1 ? 2 * (bswap32(v58[2]) >> 16) + 6 : 0;
        v46 = 0;
        v61 = (char *)v58 + v60;
        if (v61 < (char *)v58 || v61 > (char *)v170)
          goto LABEL_252;
        os_unfair_lock_lock_with_options();
        v62 = *(_QWORD *)(v162 + 448);
        if (v22 < (*(_QWORD *)(v162 + 456) - v62) >> 3)
        {
          v63 = *(unsigned __int16 **)(v62 + 8 * v22);
          if (v63)
          {
            v64 = *v63;
            v65 = v63 + 2;
            v66 = v63[1];
            *(_QWORD *)v31 = v32;
            *((_DWORD *)v31 + 2) = 2;
            *((_WORD *)v31 + 6) = v64;
            *((_WORD *)v31 + 7) = v66;
            *((_QWORD *)v31 + 2) = v65;
            *((_QWORD *)v31 + 3) = &v65[v64 + 1];
LABEL_109:
            os_unfair_lock_unlock(lock);
            goto LABEL_33;
          }
        }
        LOWORD(v173) = 0;
        v186[0] = &off_1E15E0C28;
        v186[1] = &v173;
        v187 = v186;
        OTL::ClassDefTable::Iterate(v54, (uint64_t)v186);
        v67 = v187;
        if (v187 == v186)
        {
          v67 = v186;
          v68 = 4;
LABEL_89:
          (*(void (**)(void))(*v67 + 8 * v68))();
        }
        else if (v187)
        {
          v68 = 5;
          goto LABEL_89;
        }
        v178 = 0;
        v184[0] = &off_1E15E0C70;
        v184[1] = &v178;
        v185 = v184;
        OTL::ClassDefTable::Iterate(v58, (uint64_t)v184);
        v69 = v185;
        if (v185 == v184)
        {
          v69 = v184;
          v70 = 4;
LABEL_94:
          (*(void (**)(void))(*v69 + 8 * v70))();
        }
        else if (v185)
        {
          v70 = 5;
          goto LABEL_94;
        }
        v71 = 2 * (v178 + (unint64_t)(unsigned __int16)v173) + 8;
        v72 = (_WORD *)operator new[]();
        bzero(v72, v71);
        *v72 = (_WORD)v173;
        v73 = v72 + 2;
        v160 = v72;
        v72[1] = v178;
        v182[0] = &off_1E15E0CB8;
        v182[1] = v72 + 2;
        v183 = v182;
        OTL::ClassDefTable::Iterate(v54, (uint64_t)v182);
        v74 = v183;
        if (v183 == v182)
        {
          v74 = v182;
          v75 = 4;
LABEL_99:
          (*(void (**)(void))(*v74 + 8 * v75))();
        }
        else if (v183)
        {
          v75 = 5;
          goto LABEL_99;
        }
        v179 = &off_1E15E0D00;
        v180 = (uint64_t)&v73[(unsigned __int16)v173 + 1];
        v159 = v180;
        v181 = &v179;
        OTL::ClassDefTable::Iterate(v58, (uint64_t)&v179);
        v76 = v181;
        if (v181 == &v179)
        {
          v76 = &v179;
          v77 = 4;
LABEL_104:
          (*v76)[v77]();
        }
        else if (v181)
        {
          v77 = 5;
          goto LABEL_104;
        }
        v78 = *(_QWORD **)(v162 + 448);
        v79 = *(_QWORD **)(v162 + 456);
        v80 = v79 - v78;
        if (v80 <= v22)
        {
          v84 = v171 >= v80;
          v85 = v171 - v80;
          if (v171 <= v80)
          {
            v92 = v160;
            if (!v84)
              std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v157, &v78[v171]);
          }
          else
          {
            v86 = *(_QWORD *)(v162 + 464);
            if (v85 <= (v86 - (uint64_t)v79) >> 3)
            {
              bzero(*(void **)(v162 + 456), 8 * v85);
              *(_QWORD *)(v162 + 456) = &v79[v171 - v80];
              v92 = v160;
            }
            else
            {
              v87 = v86 - (_QWORD)v78;
              v88 = v87 >> 2;
              if (v87 >> 2 <= v171)
                v88 = v171;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v88;
              v90 = (char *)*v155;
              v91 = *v155 + 8 * v89;
              v153 = v89;
              v154 = v171 - v80;
              if (v91 <= (unint64_t)v155)
              {
                *v155 = v91;
              }
              else
              {
                if (v89 >> 61)
                  goto LABEL_259;
                v90 = (char *)operator new(8 * v89);
                v85 = v171 - v80;
              }
              v152 = v90;
              v93 = &v90[8 * v80];
              bzero(v93, 8 * v85);
              v94 = v93;
              if (v79 == v78)
              {
                v95 = (_QWORD *)v162;
                v96 = v153;
              }
              else
              {
                v95 = (_QWORD *)v162;
                v96 = v153;
                do
                {
                  v97 = *--v79;
                  *v79 = 0;
                  *((_QWORD *)v94 - 1) = v97;
                  v94 -= 8;
                }
                while (v79 != v78);
              }
              v98 = &v152[8 * v96];
              v99 = &v93[8 * v154];
              v100 = (unint64_t *)v95[56];
              v101 = (unint64_t *)v95[57];
              v95[56] = v94;
              v95[57] = v99;
              v102 = v95[58];
              v95[58] = v98;
              while (v101 != v100)
              {
                v104 = *--v101;
                v103 = v104;
                *v101 = 0;
                if (v104)
                  MEMORY[0x186DC0394](v103, 0x1000C80BDFB0063);
              }
              v92 = v160;
              if (v100)
              {
                if (v151 > (unint64_t)v100 || v155 <= v100)
                {
                  operator delete(v100);
                }
                else if (v102 == *v155)
                {
                  *v155 = (unint64_t)v100;
                }
              }
            }
          }
          v81 = *(_QWORD *)(*v157 + 8 * v22);
          *(_QWORD *)(*v157 + 8 * v22) = v92;
          if (v81)
LABEL_107:
            MEMORY[0x186DC0394](v81, 0x1000C80BDFB0063);
        }
        else
        {
          v81 = v78[v22];
          v78[v22] = v160;
          if (v81)
            goto LABEL_107;
        }
        v82 = (__int16)v173;
        v83 = v178;
        *(_QWORD *)v31 = v32;
        *((_DWORD *)v31 + 2) = 2;
        *((_WORD *)v31 + 6) = v82;
        *((_WORD *)v31 + 7) = v83;
        *((_QWORD *)v31 + 2) = v73;
        *((_QWORD *)v31 + 3) = v159;
        goto LABEL_109;
      }
      if (v47 != 1)
        goto LABEL_63;
      v48 = v32 + 5;
      if (v32 + 5 > v170)
        goto LABEL_250;
      v49 = bswap32(v32[4]) >> 16;
      v50 = (unint64_t)&v48[v49];
      v51 = v32 + 6 <= v170 ? (unint64_t)((char *)v170 - (char *)v48) >> 1 : 0;
      v52 = v50 <= (unint64_t)v170 && v50 >= (unint64_t)v48;
      if (!v52 && v51 != v49)
        goto LABEL_250;
      *(_QWORD *)v31 = v32;
      *((_DWORD *)v31 + 2) = 1;
      *(_QWORD *)(v31 + 20) = 0;
      *(_QWORD *)(v31 + 12) = 0;
      *((_DWORD *)v31 + 7) = 0;
LABEL_33:
      v33 = v32[2];
      v34 = __rev16(v33);
      v35 = v32[3];
      v36 = __rev16(v35);
      v37 = *((_DWORD *)v31 + 2);
      if (v37 == 2)
      {
        v44 = (char *)&v30[4 * v22];
        if (GlyphID <= *((unsigned __int16 *)v44 + 6))
          v45 = *(unsigned __int16 *)(*((_QWORD *)v44 + 2) + 2 * GlyphID);
        else
          v45 = 0;
        if (v168 <= *((unsigned __int16 *)v44 + 7))
          v53 = *(unsigned __int16 *)(v30[4 * v22 + 3] + 2 * v168);
        else
          v53 = 0;
        v41 = (unsigned __int16 *)PairPosFormat2::ValuePair((PairPosFormat2 *)v32, v45, v53, (unint64_t)v170);
        v40 = v32;
        if (v41)
          break;
        goto LABEL_63;
      }
      if (v37 == 1 && v29 <= bswap32(v32[4]) >> 16)
      {
        v38 = PairPosFormat1::NthPairSet((PairPosFormat1 *)v32, v29 - 1, (unint64_t)v170);
        if (!v38)
          goto LABEL_250;
        v40 = v38;
        v41 = PairSet::ValuePair((PairSet *)v38, v168, v34, v36, v170, v39);
        if (v41)
          break;
      }
LABEL_63:
      if (++v22 == v171)
      {
        v13 = v165;
        goto LABEL_248;
      }
    }
    v42.i32[0] = v33;
    v105 = vcnt_s8(v42);
    v105.i16[0] = vaddlv_u8((uint8x8_t)v105);
    v106 = v105.u32[0];
    v105.i32[0] = v35;
    v107 = (uint8x8_t)vcnt_s8(v105);
    v107.i16[0] = vaddlv_u8(v107);
    v108 = (v107.i32[0] + v106);
    v13 = v165;
    if (v32 > v41 || ((v109 = &v41[v108], v109 >= v41) ? (v110 = v109 > v170) : (v110 = 1), v110))
    {
      v111 = v41 + 1 > v170 || v32 > v41;
      v112 = (unint64_t)((char *)v170 - (char *)v41) >> 1;
      if (v111)
        v112 = 0;
      if (v112 != v108)
        goto LABEL_250;
    }
    if (v33)
    {
      v113 = *((_QWORD *)this + 2);
      v173 = (TRunGlue *)v41;
      LODWORD(v174) = v34;
      v175 = v40;
      v176 = v113;
      v177 = this;
      v114 = ValueRecord::operator()((unsigned __int16 **)&v173, *(TRunGlue **)v165, v166);
    }
    else
    {
      v114 = 0.0;
    }
    if (v35)
    {
      v117 = *((_QWORD *)this + 2);
      v173 = (TRunGlue *)&v41[v106];
      LODWORD(v174) = v36;
      v175 = v40;
      v176 = v117;
      v177 = this;
      if (ValueRecord::operator()((unsigned __int16 **)&v173, *(TRunGlue **)v165, v158) != 0.0)
      {
        v173 = *(TRunGlue **)v165;
        v174 = v166;
        TRunGlue::TGlyph::clearSafeToBreakAfter((uint64_t)&v173);
      }
      *((_QWORD *)v165 + 6) = v158;
      goto LABEL_247;
    }
    if ((v34 & 0xFFBB) != 0)
      goto LABEL_247;
    v118 = *(_QWORD *)(v161 + 464);
    if (v118)
    {
      v119 = (uint8x8_t)vcnt_s8((int8x8_t)v118);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        v120 = v169;
        if (v118 <= v169)
          v120 = v169 % v118;
      }
      else
      {
        v120 = ((_DWORD)v118 - 1) & v169;
      }
      v121 = *(void ***)(*(_QWORD *)(v161 + 456) + 8 * v120);
      if (v121)
      {
        v122 = *v121;
        if (*v121)
        {
          do
          {
            v123 = v122[1];
            if (v123 == v169)
            {
              if (*((_DWORD *)v122 + 4) == (_DWORD)v169)
                goto LABEL_246;
            }
            else
            {
              if (v119.u32[0] > 1uLL)
              {
                if (v123 >= v118)
                  v123 %= v118;
              }
              else
              {
                v123 &= v118 - 1;
              }
              if (v123 != v120)
                break;
            }
            v122 = (_QWORD *)*v122;
          }
          while (v122);
        }
      }
    }
    else
    {
      v120 = 0xAAAAAAAAAAAAAAAALL;
    }
    v122 = operator new(0x18uLL);
    v124 = v169;
    *v122 = 0;
    v122[1] = v169;
    v122[2] = v169;
    v125 = (float)(unint64_t)(*(_QWORD *)(v161 + 480) + 1);
    v126 = *(float *)(v161 + 488);
    if (!v118 || (float)(v126 * (float)v118) < v125)
    {
      v127 = (v118 & (v118 - 1)) != 0;
      if (v118 < 3)
        v127 = 1;
      v128 = v127 | (2 * v118);
      v129 = vcvtps_u32_f32(v125 / v126);
      if (v128 <= v129)
        v130 = v129;
      else
        v130 = v128;
      if (v130 == 1)
      {
        v130 = 2;
      }
      else if ((v130 & (v130 - 1)) != 0)
      {
        prime = std::__next_prime(v130);
        v124 = v169;
        v130 = prime;
        v118 = *(_QWORD *)(v161 + 464);
      }
      if (v130 > v118)
        goto LABEL_193;
      if (v130 < v118)
      {
        v138 = vcvtps_u32_f32((float)*(unint64_t *)(v161 + 480) / *(float *)(v161 + 488));
        if (v118 < 3 || (v139 = (uint8x8_t)vcnt_s8((int8x8_t)v118), v139.i16[0] = vaddlv_u8(v139), v139.u32[0] > 1uLL))
        {
          v138 = std::__next_prime(v138);
          v124 = v169;
        }
        else
        {
          v140 = 1 << -(char)__clz(v138 - 1);
          if (v138 >= 2)
            v138 = v140;
        }
        if (v130 <= v138)
          v130 = v138;
        if (v130 >= v118)
        {
          v118 = *(_QWORD *)(v161 + 464);
          goto LABEL_231;
        }
        if (!v130)
        {
          v144 = *(void **)(v161 + 456);
          *(_QWORD *)(v161 + 456) = 0;
          if (v144)
          {
            operator delete(v144);
            v124 = v169;
          }
          v118 = 0;
          *(_QWORD *)(v161 + 464) = 0;
          goto LABEL_231;
        }
LABEL_193:
        if (v130 >> 61)
LABEL_259:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v132 = operator new(8 * v130);
        v133 = *(void **)(v161 + 456);
        *(_QWORD *)(v161 + 456) = v132;
        if (v133)
          operator delete(v133);
        v134 = 0;
        *(_QWORD *)(v161 + 464) = v130;
        do
          *(_QWORD *)(*(_QWORD *)(v161 + 456) + 8 * v134++) = 0;
        while (v130 != v134);
        v135 = (_QWORD *)*v150;
        v124 = v169;
        if (!*v150)
          goto LABEL_221;
        v136 = v135[1];
        v137 = (uint8x8_t)vcnt_s8((int8x8_t)v130);
        v137.i16[0] = vaddlv_u8(v137);
        if (v137.u32[0] > 1uLL)
        {
          if (v136 >= v130)
            v136 %= v130;
        }
        else
        {
          v136 &= v130 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v161 + 456) + 8 * v136) = v150;
        v141 = (_QWORD *)*v135;
        if (!*v135)
        {
LABEL_221:
          v118 = v130;
          goto LABEL_231;
        }
        while (2)
        {
          v142 = v141[1];
          if (v137.u32[0] > 1uLL)
          {
            if (v142 >= v130)
              v142 %= v130;
          }
          else
          {
            v142 &= v130 - 1;
          }
          if (v142 == v136)
          {
LABEL_217:
            v142 = v136;
          }
          else
          {
            v143 = *(_QWORD *)(v161 + 456);
            if (*(_QWORD *)(v143 + 8 * v142))
            {
              *v135 = *v141;
              *v141 = **(_QWORD **)(*(_QWORD *)(v161 + 456) + 8 * v142);
              **(_QWORD **)(*(_QWORD *)(v161 + 456) + 8 * v142) = v141;
              v141 = v135;
              goto LABEL_217;
            }
            *(_QWORD *)(v143 + 8 * v142) = v135;
          }
          v135 = v141;
          v141 = (_QWORD *)*v141;
          v136 = v142;
          if (!v141)
          {
            v118 = v130;
            v124 = v169;
            break;
          }
          continue;
        }
      }
LABEL_231:
      if ((v118 & (v118 - 1)) != 0)
      {
        if (v118 <= v124)
          v120 = v124 % v118;
        else
          v120 = v124;
      }
      else
      {
        v120 = ((_DWORD)v118 - 1) & v124;
      }
    }
    v145 = *(_QWORD *)(v161 + 456);
    v146 = *(_QWORD **)(v145 + 8 * v120);
    if (v146)
    {
      *v122 = *v146;
      goto LABEL_244;
    }
    *v122 = *v150;
    *v150 = v122;
    *(_QWORD *)(v145 + 8 * v120) = v150;
    if (*v122)
    {
      v147 = *(_QWORD *)(*v122 + 8);
      if ((v118 & (v118 - 1)) != 0)
      {
        if (v147 >= v118)
          v147 %= v118;
      }
      else
      {
        v147 &= v118 - 1;
      }
      v146 = (_QWORD *)(*(_QWORD *)(v161 + 456) + 8 * v147);
LABEL_244:
      *v146 = v122;
    }
    ++*(_QWORD *)(v161 + 480);
LABEL_246:
    *((float *)v122 + 5) = v114;
LABEL_247:
    v163 = 1;
LABEL_248:
    v46 = v163;
  }
  while ((TGlyphIterator::Next(v13, 1) & 1) != 0);
LABEL_252:
  os_unfair_lock_unlock(v156);
  if (__p)
  {
    v189 = __p;
    if (v191 > __p || v192 <= __p)
      operator delete(__p);
  }
  return v46 & 1;
}

uint64_t TGlyphIterator::Next(TGlyphIterator *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 3))
    return 0;
  v3 = a2;
  if (a2 >= 1)
  {
    while (1)
    {
      v5 = *((int *)this + 2);
      v6 = *((_QWORD *)this + 6) + v5;
      *((_QWORD *)this + 6) = v6;
      if ((int)v5 < 1)
      {
        if ((v5 & 0x80000000) != 0 && v6 <= *((_QWORD *)this + 3))
          return 0;
      }
      else if (v6 >= *((_QWORD *)this + 3))
      {
        return 0;
      }
      if ((TGlyphIterator::CurrentGlyphIsIgnored(this, 0) & 1) == 0)
      {
        result = 1;
        if (v3-- <= 1)
          return result;
      }
    }
  }
  return 1;
}

uint64_t OTL::Coverage::SearchFmt2Binary(OTL::Coverage *this, unsigned int a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned int v4;
  unint64_t v5;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned int v12;

  v2 = *((_QWORD *)this + 1);
  v3 = (unsigned __int16 *)(*(_QWORD *)this + 4);
  v4 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  LODWORD(v5) = __rev16(v4);
  v6 = &v3[3 * v5];
  v7 = v6 < v3 || (unint64_t)v6 > v2;
  if (v7)
  {
    if (*(_QWORD *)this + 10 > v2)
      LODWORD(v5) = 0;
    else
      v5 = (v2 - (unint64_t)v3) / 6;
    v4 = bswap32(v5) >> 16;
  }
  if (!v4)
    return 0;
  v8 = *v3;
  if (a2 < bswap32(v8) >> 16)
    return 0;
  v9 = __clz((unsigned __int16)v5) ^ 0x1F;
  v10 = &v3[3 * (-1 << v9) + 3 * (unsigned __int16)v5];
  if (bswap32(*v10) >> 16 <= a2)
  {
    v8 = *v10;
    v3 = v10;
  }
  v11 = (6 << v9);
  if (v11 >= 7)
  {
    do
    {
      if (a2 >= bswap32(*(unsigned __int16 *)((char *)v3 + (v11 >> 1))) >> 16)
        v3 = (unsigned __int16 *)((char *)v3 + (v11 >> 1));
      v7 = v11 > 0xD;
      v11 >>= 1;
    }
    while (v7);
    v8 = *v3;
  }
  v12 = bswap32(v8) >> 16;
  if (v12 <= a2 && a2 <= bswap32(v3[1]) >> 16)
    return a2 - v12 + (bswap32(v3[2]) >> 16) + 1;
  else
    return 0;
}

uint64_t TGlyphIterator::NextCoveredBy(TGlyphIterator *this, const OTL::Lookup *a2)
{
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 3))
    return 0;
  do
  {
    v5 = *((int *)this + 2);
    v6 = *((_QWORD *)this + 6) + v5;
    *((_QWORD *)this + 6) = v6;
    if ((int)v5 < 1)
    {
      if ((v5 & 0x80000000) != 0 && v6 <= *((_QWORD *)this + 3))
        return 0;
    }
    else if (v6 >= *((_QWORD *)this + 3))
    {
      return 0;
    }
  }
  while ((TGlyphIterator::CurrentGlyphIsIgnored(this, a2) & 1) != 0);
  return 1;
}

uint64_t TGlyphIterator::CurrentGlyphIsIgnored(TGlyphIterator *this, const OTL::Lookup *a2)
{
  TRunGlue *v4;
  uint64_t v5;
  unsigned int GlyphID;
  unsigned int v7;
  uint64_t v10;

  v4 = *(TRunGlue **)this;
  v5 = *((_QWORD *)this + 6);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, v5);
  v7 = GlyphID;
  if (a2)
  {
    if (!OTL::CoverageBitmap::Covers((const OTL::Lookup *)((char *)a2 + 40), GlyphID) || v7 == 0xFFFF)
      return 1;
  }
  else if (GlyphID == 0xFFFF)
  {
    return 1;
  }
  if (TRunGlue::IsDeleted(v4, v5))
    return 1;
  v10 = *((_QWORD *)this + 9);
  if (v10)
    return (*(unsigned __int8 *)(v10 + ((unint64_t)v7 >> 3)) >> (v7 & 7)) & 1;
  else
    return 0;
}

uint64_t TRunGlue::GetGlyphID(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    v4 = *((_QWORD *)this + 22);
    v5 = a2 - *((_QWORD *)this + 20);
  }
  else
  {
    v4 = *((_QWORD *)this + 22);
    v5 = *((_QWORD *)this + 20) + a2;
  }
  return *(unsigned __int16 *)(v4 + 2 * v5);
}

uint64_t TRunGlue::FocusOnIndex(TRunGlue *this, uint64_t a2)
{
  if (!*((_QWORD *)this + 19))
    return -1;
  if (*((_QWORD *)this + 20) > a2 || *((_QWORD *)this + 21) <= a2)
    TRunGlue::SelectRunForIndex(this, a2);
  return *((_QWORD *)this + 16);
}

BOOL OTL::CoverageBitmap::Covers(OTL::CoverageBitmap *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;
  BOOL v5;
  unsigned __int16 v6;

  v2 = *(_DWORD *)this;
  if (!*(_DWORD *)this)
    return 0;
  if (v2 == 1)
    return *((unsigned __int16 *)this + 2) == a2;
  v4 = *((unsigned __int16 *)this + 2);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v5 && v2 > v6)
    return (*(unsigned __int8 *)(*((_QWORD *)this + 5) + ((unint64_t)v6 >> 3)) >> (v6 & 7)) & 1;
  else
    return 0;
}

BOOL TRunGlue::IsDeleted(TRunGlue *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    v4 = *(_DWORD *)(*((_QWORD *)this + 65) + 4 * (a2 - *((_QWORD *)this + 20)));
LABEL_5:
    v7 = v4 & 0x20;
    return v7 != 0;
  }
  v5 = *((_QWORD *)this + 20) + a2;
  v6 = *((_QWORD *)this + 65);
  if (v6)
  {
    v4 = *(_DWORD *)(v6 + 4 * v5);
    goto LABEL_5;
  }
  v9 = v5 + 7;
  if (v5 >= 0)
    v9 = *((_QWORD *)this + 20) + a2;
  v7 = (1 << (v5 & 7)) & *(unsigned __int8 *)(*((_QWORD *)this + 26) + (v9 >> 3));
  return v7 != 0;
}

double ValueRecord::operator()(unsigned __int16 **a1, TRunGlue *this, uint64_t a3)
{
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  const __int16 *VariationValues;
  const __int16 *v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  double v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  unint64_t v28;
  _QWORD v29[2];
  CGSize v30;
  CGSize v31;
  CGSize v32;
  CGSize v33;

  v29[0] = this;
  v29[1] = a3;
  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  if ((v7 & 1) != 0)
  {
    v9 = *v6++;
    v8 = v9;
    if (v9)
    {
      TRunGlue::TGlyph::AdjustXPositionBy((TRunGlue::TGlyph *)v29, (double)((int)bswap32(v8) >> 16));
      v7 = *((_DWORD *)a1 + 2);
    }
  }
  if ((v7 & 2) != 0)
  {
    v11 = *v6++;
    v10 = v11;
    if (v11)
    {
      TRunGlue::TGlyph::AdjustYPositionBy((TRunGlue::TGlyph *)v29, (double)((int)bswap32(v10) >> 16));
      v7 = *((_DWORD *)a1 + 2);
    }
  }
  v12 = 0.0;
  if ((v7 & 4) != 0)
  {
    v14 = *v6++;
    v13 = v14;
    if (v14)
    {
      if ((*(_BYTE *)a1[3] & 1) == 0)
      {
        v12 = (double)((int)bswap32(v13) >> 16);
        v30.width = TRunGlue::GetAdvance(this, a3) + *((double *)this + 80) * v12;
        TRunGlue::SetAdvance(this, a3, v30);
        v7 = *((_DWORD *)a1 + 2);
      }
    }
  }
  if ((v7 & 8) != 0)
  {
    v16 = *v6++;
    v15 = v16;
    if (v16)
    {
      if ((*(_BYTE *)a1[3] & 1) != 0)
      {
        v31.width = TRunGlue::GetAdvance(this, a3) + *((double *)this + 81) * (double)((int)bswap32(v15) >> 16);
        TRunGlue::SetAdvance(this, a3, v31);
        v7 = *((_DWORD *)a1 + 2);
      }
    }
  }
  if ((v7 & 0xF0) != 0)
  {
    v28 = 0xAAAAAAAAAAAAAAAALL;
    VariationValues = (const __int16 *)TFont::GetVariationValues((TFont *)a1[3], (id *)&v28);
    if (VariationValues)
    {
      v18 = VariationValues;
      if (((_BYTE)a1[1] & 0x10) != 0)
      {
        v19 = *v6++;
        v20 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)a1[4] + 3), (char *)a1[2], *((_QWORD *)a1[4] + 5), bswap32(v19) >> 16, v28, VariationValues);
        if (v20 != 0.0)
          TRunGlue::TGlyph::AdjustXPositionBy((TRunGlue::TGlyph *)v29, v20);
      }
      if (((_BYTE)a1[1] & 0x20) != 0)
      {
        v21 = *v6++;
        v22 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)a1[4] + 3), (char *)a1[2], *((_QWORD *)a1[4] + 5), bswap32(v21) >> 16, v28, v18);
        if (v22 != 0.0)
          TRunGlue::TGlyph::AdjustYPositionBy((TRunGlue::TGlyph *)v29, v22);
      }
      if (((_BYTE)a1[1] & 0x40) != 0)
      {
        v23 = *v6++;
        v24 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)a1[4] + 3), (char *)a1[2], *((_QWORD *)a1[4] + 5), bswap32(v23) >> 16, v28, v18);
        if (v24 != 0.0 && (*(_BYTE *)a1[3] & 1) == 0)
        {
          v25 = v24;
          v32.width = TRunGlue::GetAdvance(this, a3) + *((double *)this + 80) * v24;
          TRunGlue::SetAdvance(this, a3, v32);
          v12 = v12 + v25;
        }
      }
      if (((_BYTE)a1[1] & 0x80) != 0)
      {
        v26 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)a1[4] + 3), (char *)a1[2], *((_QWORD *)a1[4] + 5), bswap32(*v6) >> 16, v28, v18);
        if (v26 != 0.0 && (*(_BYTE *)a1[3] & 1) != 0)
        {
          v33.width = TRunGlue::GetAdvance(this, a3) + *((double *)this + 81) * v26;
          TRunGlue::SetAdvance(this, a3, v33);
        }
      }
    }
  }
  return v12;
}

unsigned __int16 *PairPosFormat1::NthPairSet(PairPosFormat1 *this, unsigned int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 4)) >> 16)
    return 0;
  if (!*((_WORD *)this + a2 + 5))
    return 0;
  v3 = (unsigned __int16 *)((char *)this + __rev16(*((unsigned __int16 *)this + a2 + 5)));
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > a3)
    return 0;
  v6 = bswap32(*v3) >> 16;
  v7 = (unint64_t)&v4[v6];
  if ((unint64_t)(v3 + 2) <= a3)
    v8 = (a3 - (unint64_t)v4) >> 1;
  else
    v8 = 0;
  if (v7 >= (unint64_t)v4 && v7 <= a3 || v8 == v6)
    return v3;
  else
    return 0;
}

unsigned __int16 *PairSet::ValuePair(PairSet *this, int a2, __int32 a3, __int32 a4, unsigned __int16 *a5, int8x8_t a6)
{
  BOOL v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int8x8_t v15;
  __int32 v16;
  uint8x8_t v17;
  unsigned __int32 v18;
  unsigned __int16 *v19;
  BOOL v20;
  unsigned __int16 *v21;
  BOOL v22;

  if (*(_WORD *)this)
    v6 = (char *)this + 4 > (char *)a5;
  else
    v6 = 1;
  if (v6)
    return 0;
  v7 = (unsigned __int16 *)((char *)this + 2);
  if (a2 < (int)bswap32(*((unsigned __int16 *)this + 1)) >> 16)
    return 0;
  v10 = __rev16(*(unsigned __int16 *)this);
  v11 = __clz(v10);
  v12 = v11 ^ 0x1F;
  v13 = 1 << (v11 ^ 0x1F);
  v14 = v10 - v13;
  a6.i32[0] = a3;
  v15 = vcnt_s8(a6);
  v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
  v16 = v15.i32[0];
  v15.i32[0] = a4;
  v17 = (uint8x8_t)vcnt_s8(v15);
  v17.i16[0] = vaddlv_u8(v17);
  v18 = v16 + v17.i32[0] + 1;
  v19 = &v7[v14 * (unint64_t)v18];
  v20 = v19 < (unsigned __int16 *)this || v19 + 1 > a5;
  if (!v20 && a2 >= (int)bswap32(*v19) >> 16)
    v7 = v19;
  if (v12)
  {
    do
    {
      v21 = &v7[v18 * (unint64_t)(v13 >> 1)];
      v22 = v21 < (unsigned __int16 *)this || v21 + 1 > a5;
      if (!v22 && a2 >= (int)bswap32(*v21) >> 16)
        v7 += v18 * (unint64_t)(v13 >> 1);
      v6 = v13 > 3;
      v13 >>= 1;
    }
    while (v6);
  }
  v8 = 0;
  if (v7 >= (unsigned __int16 *)this && v7 + 1 <= a5)
  {
    if (a2 == (int)bswap32(*v7) >> 16)
      return v7 + 1;
    else
      return 0;
  }
  return (unsigned __int16 *)v8;
}

double TRunGlue::GetAdvance(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    v4 = *((_QWORD *)this + 19);
    v5 = a2 - *((_QWORD *)this + 20);
    v6 = *(_QWORD *)(v4 + 216);
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
    {
      v11 = *(_QWORD *)(v6 + 24);
      if (v11)
      {
        v9 = v11 + 8 * *(_QWORD *)(v4 + 200) + 8 * v5;
        return *(double *)v9;
      }
    }
    v8 = v7 + 16 * *(_QWORD *)(v4 + 200);
  }
  else
  {
    v5 = *((_QWORD *)this + 20) + a2;
    v8 = *((_QWORD *)this + 23);
  }
  v9 = v8 + 16 * v5;
  return *(double *)v9;
}

_QWORD *TRunGlue::SetAdvance(_QWORD *this, uint64_t a2, CGSize a3)
{
  CGFloat height;
  CGFloat width;
  _QWORD *v6;
  CGSize v7;

  height = a3.height;
  width = a3.width;
  v6 = this;
  if (this[19])
  {
    TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    v7.width = width;
    v7.height = height;
    return (_QWORD *)TStorageRange::SetAdvance((TStorageRange *)(v6[19] + 192), a2 - v6[20], v7);
  }
  else
  {
    *(CGSize *)(this[23] + 16 * (this[20] + a2)) = a3;
  }
  return this;
}

char *PairPosFormat2::ValuePair(PairPosFormat2 *this, unsigned int a2, unsigned int a3, unint64_t a4)
{
  unsigned int v4;
  int8x8_t v5;
  uint16x4_t v6;
  unsigned __int32 v7;
  char *v8;
  unint64_t v9;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 6)) >> 16)
    return 0;
  v4 = bswap32(*((unsigned __int16 *)this + 7)) >> 16;
  if (v4 <= a3)
    return 0;
  v5.i32[0] = *((unsigned __int16 *)this + 2);
  v5.i32[1] = *((unsigned __int16 *)this + 3);
  v6 = vpaddl_u8((uint8x8_t)vcnt_s8(v5));
  v7 = vpadal_u16((uint32x2_t)vdup_lane_s32((int32x2_t)vpaddl_u16(v6), 1), v6).u32[0];
  v8 = (char *)this + 2 * (a3 + a2 * (unint64_t)v4) * v7 + 16;
  v9 = (unint64_t)&v8[2 * v7];
  if (v8 >= (char *)this && v9 >= (unint64_t)v8 && v9 <= a4)
    return v8;
  v12 = 0;
  v13 = (unint64_t)(v8 + 2) <= a4 && v8 >= (char *)this;
  v14 = (a4 - (unint64_t)v8) >> 1;
  if (!v13)
    v14 = 0;
  if (v14 == v7)
    return v8;
  return (char *)v12;
}

double OTL::GDEF::DeltaValue(OTL::GDEF *this, char *a2, unint64_t a3, int a4, unint64_t a5, const __int16 *a6)
{
  char *v6;

  if (a4 && (v6 = &a2[a4], (unint64_t)(v6 + 6) <= a3) && *((_WORD *)v6 + 2) == 128)
    return ItemVariationStore::ValueForDeltaSet((OTL::GDEF *)((char *)this + 32), bswap32(*(unsigned __int16 *)v6) >> 16, bswap32(*((unsigned __int16 *)v6 + 1)) >> 16, a5, a6, 0);
  else
    return 0.0;
}

unint64_t TFont::GetVariationValues(TFont *this, id *a2)
{
  unint64_t *v4;
  unint64_t v5;
  TBaseFont *v6;
  unint64_t v7;
  uint64_t VariationValues;
  const void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  id v14;
  id v15;

  v4 = (unint64_t *)((char *)this + 336);
  v5 = atomic_load((unint64_t *)this + 42);
  if (v5)
  {
    if (v5 == -1)
    {
      v5 = 0;
LABEL_17:
      *a2 = 0;
      return v5;
    }
    v14 = (id)*((_QWORD *)this + 41);
LABEL_15:
    *a2 = v14;
  }
  else
  {
    v6 = (TBaseFont *)*((_QWORD *)this + 50);
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)v6 + 120))(&v15, v6);
    v7 = atomic_load((unint64_t *)&v15);

    if (!v7
      || !TBaseFont::GetInitializedGraphicsFont(v6)
      || !CGFontGetParserFont()
      || (v15 = (id)0xAAAAAAAAAAAAAAAALL, (VariationValues = FPFontGetVariationValues()) == 0))
    {
      v5 = 0;
      atomic_store(0xFFFFFFFFFFFFFFFFLL, v4);
      goto LABEL_17;
    }
    v9 = (const void *)VariationValues;
    v10 = (void *)operator new[]();
    v5 = (unint64_t)v10;
    v11 = v15;
    if (v15)
      memmove(v10, v9, 2 * (_QWORD)v15);
    *((_QWORD *)this + 41) = v11;
    while (1)
    {
      v12 = __ldaxr(v4);
      if (v12)
        break;
      if (!__stlxr(v5, v4))
      {
        v14 = v15;
        goto LABEL_15;
      }
    }
    __clrex();
    *a2 = v15;
    MEMORY[0x186DC0394](v5, 0x1000C80BDFB0063);
    return v12;
  }
  return v5;
}

uint64_t OTL::GSUB::ApplyChainContextSubstFormat3(_QWORD *a1, unint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unsigned __int16 *v7;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  CFRange v31;
  CFIndex v32;
  _QWORD *v33;
  CFIndex v37;
  CFIndex v38;
  uint64_t v39;
  _OWORD v40[31];
  unint64_t v41;

  v6 = a1[5];
  v7 = (unsigned __int16 *)(a2 + 4);
  if (a2 + 4 > v6)
    return 0;
  v11 = *(_QWORD *)(a3 + 48);
  v12 = *(unsigned __int16 *)(a2 + 2);
  v13 = __rev16(v12);
  if (*(_WORD *)(a2 + 2))
  {
    v14 = *(_QWORD *)(a3 + 32);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v11 + v13 >= v14)
        return 0;
    }
    else if (v11 - v13 <= v14)
    {
      return 0;
    }
  }
  v15 = &v7[v13];
  if ((unint64_t)(v15 + 1) > v6 || !*v15)
    return 0;
  v16 = __rev16(*v15);
  v17 = &v15[v16 + 1];
  v18 = v17 + 1;
  if ((unint64_t)v17 < a2 || (unint64_t)v18 > v6)
    return 0;
  v20 = *v17;
  v21 = v16 - 1 + (bswap32(v20) >> 16);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a3 + 40);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v11 - v21 <= v22)
        return 0;
    }
    else if (v11 + v21 >= v22)
    {
      return 0;
    }
  }
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[29] = v23;
  v40[30] = v23;
  v40[27] = v23;
  v40[28] = v23;
  v40[25] = v23;
  v40[26] = v23;
  v40[23] = v23;
  v40[24] = v23;
  v40[21] = v23;
  v40[22] = v23;
  v40[19] = v23;
  v40[20] = v23;
  v40[17] = v23;
  v40[18] = v23;
  v40[16] = v23;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v40[15] = v23;
  v40[14] = v23;
  v40[13] = v23;
  v40[12] = v23;
  v40[11] = v23;
  v40[10] = v23;
  v40[9] = v23;
  v40[8] = v23;
  v40[7] = v23;
  v40[5] = v23;
  v40[6] = v23;
  v40[3] = v23;
  v40[4] = v23;
  v40[1] = v23;
  v40[2] = v23;
  v40[0] = v23;
  v39 = v11;
  if (v16 < 2)
  {
    v33 = a1;
    v25 = 1;
    goto LABEL_23;
  }
  if (v16 > 0x40)
    return 0;
  result = TGlyphIterator::MatchCoverSequenceAndNote(a3, v16 - 1, (uint64_t)(v15 + 2), (uint64_t)v40, a2, v6);
  if (!(_DWORD)result)
    return result;
  v33 = a1;
  v25 = result + 1;
LABEL_23:
  v38 = v11;
  if (!v12
    || (result = TGlyphIterator::MatchCoverSequence<(MatchDirection)1>(a3, v11, v13, v7, a2, v6, &v38), (_DWORD)result))
  {
    v26 = __rev16(v20);
    v27 = *(&v39 + v25 - 1);
    v37 = v27;
    if (!v20
      || (result = TGlyphIterator::MatchCoverSequence<(MatchDirection)0>(a3, v27, v26, v18, a2, v6, &v37), (_DWORD)result))
    {
      v28 = &v18[v26];
      v29 = v28 + 1;
      if ((unint64_t)v28 < a2 || (unint64_t)v29 > v6)
        return 0;
      if (OTL::GSUB::ApplySubstLookupRecords(v33, a2, v29, bswap32(*v28) >> 16, a3, v11, &v39, v25, a4, a5, a6)&& *(_QWORD *)(*(_QWORD *)a3 + 152))
      {
        if (v38 >= v37)
          v31.location = v37;
        else
          v31.location = v38;
        if (v38 - v37 >= 0)
          v32 = v38 - v37;
        else
          v32 = v37 - v38;
        v31.length = v32 + 1;
        TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)a3, v31);
      }
      return 1;
    }
  }
  return result;
}

BOOL TGlyphIterator::MatchCoverSequence<(MatchDirection)0>(uint64_t a1, uint64_t a2, int a3, unsigned __int16 *a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t GlyphID;
  __int128 v16;
  unsigned int v17;
  unsigned int (*v18)(_QWORD *, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;

  v12 = a2;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  if (TGlyphIterator::NextContext((TGlyphIterator *)a1, 1))
  {
    v21 = v14;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 48);
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a1, v12);
      v24 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22 = v16;
      v23 = v16;
      v17 = *a4++;
      OTL::Coverage::Coverage((OTL::Coverage *)&v22, (unsigned __int16 *)(a5 + (bswap32(v17) >> 16)), a6, 1);
      v18 = (unsigned int (*)(_QWORD *, uint64_t))v23;
      v19 = (_QWORD *)((char *)&v22 + (*((uint64_t *)&v23 + 1) >> 1));
      if ((BYTE8(v23) & 1) != 0)
        v18 = *(unsigned int (**)(_QWORD *, uint64_t))(*v19 + v23);
      if (!v18(v19, GlyphID))
        break;
      if (!--a3)
        break;
      if ((TGlyphIterator::NextContext((TGlyphIterator *)a1, 1) & 1) == 0)
      {
        a3 = 1;
        break;
      }
    }
    v14 = v21;
  }
  if (a7)
    *a7 = v12;
  *(_QWORD *)(a1 + 48) = v14;
  return a3 == 0;
}

uint64_t TGlyphIterator::NextContext(TGlyphIterator *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 5))
    return 0;
  v3 = a2;
  if (a2 >= 1)
  {
    while (1)
    {
      v5 = *((int *)this + 2);
      v6 = *((_QWORD *)this + 6) + v5;
      *((_QWORD *)this + 6) = v6;
      if ((int)v5 < 1)
      {
        if ((v5 & 0x80000000) != 0 && v6 <= *((_QWORD *)this + 5))
          return 0;
      }
      else if (v6 >= *((_QWORD *)this + 5))
      {
        return 0;
      }
      if ((TGlyphIterator::CurrentGlyphIsIgnored(this, 0) & 1) == 0)
      {
        result = 1;
        if (v3-- <= 1)
          return result;
      }
    }
  }
  return 1;
}

double ItemVariationStore::ValueForDeltaSet(ItemVariationStore *this, unsigned int a2, unsigned int a3, unint64_t a4, const __int16 *a5, const double *a6)
{
  double v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v24;
  unsigned int *v25;
  char *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  double v30;
  unsigned int v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unint64_t v35;
  double v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unint64_t v46;
  double v47;
  int v48;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = 0.0;
  if ((a3 & a2) != 0xFFFF)
  {
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (*((_QWORD *)this + 4) > (unint64_t)a2)
      {
        v9 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * a2);
        if (v9)
        {
          v10 = bswap32(v9);
          v11 = (unsigned __int16 *)(v8 + v10);
          v12 = *((_QWORD *)this + 1);
          v13 = (unsigned __int16 *)(v8 + v10 + 6);
          if ((unint64_t)v13 <= v12)
          {
            v14 = bswap32(v11[2]) >> 16;
            v15 = bswap32(*v11) >> 16;
            v16 = bswap32(v11[1]);
            v17 = HIWORD(v16) & 0x7FFF;
            v18 = (v17 + v14) << (v16 < 0);
            v19 = (unint64_t)&v11[v14 + 3] + v18 * (unint64_t)v15;
            v20 = v19 < (unint64_t)v11 || v19 > v12;
            if (!v20)
            {
              if (v15 <= a3)
              {
                v25 = 0;
                v17 = 0xAAAAAAAAAAAAAAAALL;
                v24 = 170;
                v14 = 0xAAAAAAAAAAAAAAAALL;
                v18 = 0xAAAAAAAAAAAAAAAALL;
              }
              else
              {
                v24 = v16 >> 31;
                v25 = (unsigned int *)((char *)&v13[v14] + v18 * (unint64_t)a3);
              }
              v26 = (char *)v25 + v18;
              if ((unint64_t)v26 <= v12 && v8 <= (unint64_t)v25 && v26 >= (char *)v25)
              {
                if (v24)
                {
                  if (v17)
                  {
                    v50 = &v25[v17];
                    v52 = v10;
                    v27 = v17;
                    while (1)
                    {
                      v28 = *v13++;
                      v29 = bswap32(v28) >> 16;
                      if (*((_QWORD *)this + 2) <= v29)
                        break;
                      if (a6)
                        v30 = a6[v29];
                      else
                        v30 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v29, a4, a5);
                      v31 = *v25++;
                      v6 = v6 + v30 * (double)(int)bswap32(v31);
                      if (!--v27)
                      {
                        v25 = v50;
                        v10 = v52;
                        goto LABEL_24;
                      }
                    }
                  }
                  else
                  {
LABEL_24:
                    v20 = v14 > v17;
                    v32 = v14 - v17;
                    if (!v20)
                      return v6;
                    v33 = (unsigned __int16 *)(v10 + 2 * v17 + v8 + 6);
                    while (1)
                    {
                      v34 = *v33++;
                      v35 = bswap32(v34) >> 16;
                      if (*((_QWORD *)this + 2) <= v35)
                        break;
                      if (a6)
                        v36 = a6[v35];
                      else
                        v36 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v35, a4, a5);
                      v37 = *(unsigned __int16 *)v25;
                      v25 = (unsigned int *)((char *)v25 + 2);
                      v6 = v6 + v36 * (double)((int)bswap32(v37) >> 16);
                      if (!--v32)
                        return v6;
                    }
                  }
                }
                else if (v17)
                {
                  v51 = (unsigned int *)((char *)v25 + 2 * v17);
                  v53 = v10;
                  v38 = v17;
                  while (1)
                  {
                    v39 = *v13++;
                    v40 = bswap32(v39) >> 16;
                    if (*((_QWORD *)this + 2) <= v40)
                      break;
                    if (a6)
                      v41 = a6[v40];
                    else
                      v41 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v40, a4, a5);
                    v42 = *(unsigned __int16 *)v25;
                    v25 = (unsigned int *)((char *)v25 + 2);
                    v6 = v6 + v41 * (double)((int)bswap32(v42) >> 16);
                    if (!--v38)
                    {
                      v25 = v51;
                      v10 = v53;
                      goto LABEL_41;
                    }
                  }
                }
                else
                {
LABEL_41:
                  v20 = v14 > v17;
                  v43 = v14 - v17;
                  if (!v20)
                    return v6;
                  v44 = (unsigned __int16 *)(v10 + 2 * v17 + v8 + 6);
                  while (1)
                  {
                    v45 = *v44++;
                    v46 = bswap32(v45) >> 16;
                    if (*((_QWORD *)this + 2) <= v46)
                      break;
                    if (a6)
                      v47 = a6[v46];
                    else
                      v47 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v46, a4, a5);
                    v48 = *(char *)v25;
                    v25 = (unsigned int *)((char *)v25 + 1);
                    v6 = v6 + v47 * (double)v48;
                    if (!--v43)
                      return v6;
                  }
                }
                return 0.0;
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

double ItemVariationStore::VariationRegionList::ComputeScalar(ItemVariationStore::VariationRegionList *this, uint64_t a2, unint64_t a3, const __int16 *a4)
{
  unint64_t v4;
  unint64_t v5;
  ItemVariationStore::RegionAxisCoordinates *v7;
  double v8;
  int v9;
  double v10;

  v4 = bswap32(*(unsigned __int16 *)this) >> 16;
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = v4;
  if (!v5)
    return 1.0;
  v7 = (ItemVariationStore::VariationRegionList *)((char *)this + 6 * v4 * a2 + 4);
  v8 = 1.0;
  while (1)
  {
    v9 = *a4++;
    v10 = ItemVariationStore::RegionAxisCoordinates::ComputeScalar(v7, v9);
    if (v10 == 0.0)
      break;
    v8 = v8 * v10;
    v7 = (ItemVariationStore::RegionAxisCoordinates *)((char *)v7 + 6);
    if (!--v5)
      return v8;
  }
  return 0.0;
}

double ItemVariationStore::RegionAxisCoordinates::ComputeScalar(ItemVariationStore::RegionAxisCoordinates *this, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  double result;
  int v6;
  int v7;
  BOOL v8;
  double v11;
  int v12;

  v2 = bswap32(*(unsigned __int16 *)this);
  v3 = *((unsigned __int16 *)this + 1);
  v4 = (int)bswap32(v3) >> 16;
  result = 1.0;
  if (v4 >= v2 >> 16)
  {
    v6 = (int)bswap32(*((unsigned __int16 *)this + 2)) >> 16;
    if (v6 >= v4)
    {
      v7 = v2 >> 16;
      v8 = v6 > 0 && v7 < 0;
      if (!v8 && v3 != 0)
      {
        result = 0.0;
        if (v7 <= a2 && v6 >= a2)
        {
          result = 1.0;
          if (v4 != a2)
          {
            if (v4 <= a2)
            {
              v11 = (double)(v6 - a2);
              v12 = v6 - v4;
            }
            else
            {
              v11 = (double)(a2 - v7);
              v12 = v4 - v7;
            }
            return v11 / (double)v12;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},std::allocator<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1}>,void ()(CFRange,long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0D48;
  a2[1] = v2;
  return result;
}

uint64_t std::function<void ()(CFRange,long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1847D4450);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

void TRunGlue::SetGlyphID<true>(TRunGlue *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t RenderingStyle;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;

  if ((_DWORD)a3 == 0xFFFF)
  {
    TRunGlue::Delete(this, a2, 0);
  }
  else
  {
    v6 = *((_QWORD *)this + 25);
    if (v6 && *((_QWORD *)this + 78) > (uint64_t)a3)
      *(_BYTE *)(v6 + ((unint64_t)a3 >> 3)) |= 1 << (a3 & 7);
    if (*((_QWORD *)this + 19))
    {
      TRunGlue::FocusOnIndex(this, a2);
      v7 = *((_QWORD *)this + 19);
      v8 = a2 - *((_QWORD *)this + 20);
      objc_msgSend(*(id *)(v7 + 216), "setGlyph:atIndex:", a3, *(_QWORD *)(v7 + 200) + v8);
      if (*((_BYTE *)this + 633) && *((_BYTE *)this + 632))
      {
        *((_BYTE *)this + 592) = 1;
        objc_msgSend(*(id *)(v7 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 40) + 4 * *(_QWORD *)(v7 + 200) + 4 * v8) | 0x800u, *(_QWORD *)(v7 + 200) + v8);
      }
      else
      {
        v14 = *((_QWORD *)this + 77);
        RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v7 + 40));
        TStorageRange::ResetAdvance(v7 + 192, v8, v14, RenderingStyle);
      }
      v16 = *(_QWORD **)(v7 + 216);
      v17 = *(_QWORD *)(v7 + 200);
      v18 = *(_DWORD *)(v16[5] + 4 * v17 + 4 * v8);
      if ((v18 & 0x40) != 0)
        objc_msgSend(v16, "setProps:atIndex:", v18 & 0xFFFFEFBF | 0x1000, v17 + v8);
    }
    else
    {
      v9 = *((_QWORD *)this + 20) + a2;
      *(_WORD *)(*((_QWORD *)this + 22) + 2 * v9) = a3;
      v10 = *((_QWORD *)this + 77);
      v20 = a3;
      v19 = NAN;
      TFont::GetUnsummedAdvancesForGlyphs(v10, (uint64_t)&v20, &v19, 1, 1, 0, 0);
      v11 = (uint64_t *)(*((_QWORD *)this + 23) + 16 * v9);
      *v11 = *(_QWORD *)&v19;
      v11[1] = 0;
      v12 = *((_QWORD *)this + 65);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 4 * v9);
        if ((v13 & 0x1040) != 0)
          *(_DWORD *)(v12 + 4 * v9) = v13 & 0xFFFFEFBF | 0x1000;
      }
    }
  }
}

uint64_t *std::__function::__func<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},std::allocator<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1}>,void ()(CFRange,long)>::operator()(uint64_t a1, CFIndex *a2, uint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1} &,CFRange,long>((uint64_t ***)(a1 + 8), a2, a3);
}

uint64_t *OTL::GlyphLookups::Substituted(uint64_t *this, CFRange a2, uint64_t a3)
{
  CFIndex v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  CFIndex *v7;
  CFIndex *v8;
  CFIndex v9;
  CFIndex *v10;
  CFIndex v11;
  uint64_t *v12;
  BOOL v13;
  CFIndex location;
  BOOL v15;

  v3 = a3 - a2.length;
  if (a3 - a2.length >= 1)
  {
    v4 = *this;
    v5 = this[1];
    if (*this != v5)
    {
      v6 = (uint64_t *)(a2.location + a2.length);
      do
      {
        v7 = *(CFIndex **)(v4 + 8);
        v8 = *(CFIndex **)(v4 + 16);
        while (v7 != v8)
        {
          v9 = *v7;
          v10 = v7 + 1;
          v11 = v7[1];
          this = (uint64_t *)(v11 + *v7);
          if ((uint64_t)this >= (uint64_t)v6)
            v12 = v6;
          else
            v12 = (uint64_t *)(v11 + *v7);
          v13 = a2.location <= v9 && v9 < (uint64_t)v6;
          location = *v7;
          if ((v13 || (v9 <= a2.location ? (v15 = a2.location < (uint64_t)this) : (v15 = 0), location = a2.location, v15))
            && (uint64_t)v12 > location)
          {
            v9 = v7[1];
          }
          else
          {
            v10 = v7;
            if (v9 <= a2.location)
              goto LABEL_22;
          }
          *v10 = v9 + v3;
LABEL_22:
          v7 += 2;
        }
        v4 += 104;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0CB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0C28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0D00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0C70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>(a1 + 8, a2);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v15;
  unsigned __int16 *v16;
  int v18;
  unsigned __int16 *v20;
  unsigned int v22;
  _WORD *v23;

  v4 = *a4;
  v5 = *(_DWORD *)(result + 16);
  if (v5 > v4)
  {
    v6 = *a2;
    v7 = *a3;
    v8 = *(_QWORD *)(result + 8);
    v10 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(result + 32);
    v11 = *(_QWORD *)(v8 + 104);
    v12 = *(_QWORD *)(v8 + 112);
    v13 = (unsigned __int16 *)(v10 + 2 * *a4);
    if ((unint64_t)v13 >= v11 && (unint64_t)(v13 + 1) <= v12)
    {
      v15 = bswap32(*v13) >> 16;
      v16 = (unsigned __int16 *)(v9 + 6 * v15);
      if ((unint64_t)v16 >= v11 && (unint64_t)(v16 + 3) <= v12)
      {
        v18 = *v16;
        if ((*(_WORD *)(v9 + 6 * v15 + 2) & 0xE0) != 0 || v18 != 0)
          return std::function<void ()(unsigned short,unsigned short)>::operator()(result + 40, v6, v7);
      }
    }
    if (*(_WORD *)(result + 72))
    {
      v20 = (unsigned __int16 *)(v10 + 2 * (v4 + v5 * *(unsigned __int16 *)(result + 72)));
      if ((unint64_t)v20 >= v11 && (unint64_t)(v20 + 1) <= v12)
      {
        v22 = bswap32(*v20) >> 16;
        v23 = (_WORD *)(v9 + 6 * v22);
        if ((unint64_t)v23 >= v11
          && (unint64_t)(v23 + 3) <= v12
          && ((*(_WORD *)(v9 + 6 * v22 + 2) & 0xE0) != 0 || *v23 != 0))
        {
          return std::function<void ()(unsigned short,unsigned short)>::operator()(result + 40, v6, v7);
        }
      }
    }
  }
  return result;
}

uint64_t OTL::GSUB::ApplyChainContextSubstFormat1(_QWORD *a1, ChainContextSubstFormat1 *this, uint64_t a3, int a4, _WORD *a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v21;
  __int128 v22;
  _WORD *v23;
  uint64_t v24;
  int GlyphID;
  CFIndex v26;
  ChainContextSubstFormat1 *v27;
  uint64_t v28;
  ChainContextSubstFormat1 *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  ChainContextSubstFormat1 *v35;
  ChainContextSubstFormat1 *v37;
  uint64_t v39;
  ChainContextSubstFormat1 *v40;
  BOOL v42;
  int v43;
  CFIndex v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unint64_t v51;
  unsigned __int16 *v52;
  CFIndex v53;
  CFIndex v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  BOOL v58;
  CFIndex v59;
  int v60;
  CFIndex v61;
  CFIndex v62;
  CFRange v63;
  unint64_t v64;
  _QWORD *v65;
  _WORD *v66;
  uint64_t v67;
  int v68;
  CFIndex v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[31];
  unint64_t v75;

  v7 = a1[5];
  v8 = (char *)this + 6;
  if ((unint64_t)this + 4 < a1[4] || (unint64_t)v8 > v7)
    return 0;
  result = 0;
  v12 = __rev16(*((unsigned __int16 *)this + 2));
  v13 = __CFADD__(v8, 2 * v12);
  v14 = (unint64_t)&v8[2 * v12] > v7 || v13;
  v15 = (v7 - (unint64_t)v8) >> 1;
  if ((unint64_t)this + 8 > v7)
    v15 = 0;
  if (v15 == v12)
    v16 = 0;
  else
    v16 = v14;
  if ((v16 & 1) == 0)
  {
    if (*((_WORD *)this + 2))
    {
      v21 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v74[29] = v22;
      v74[30] = v22;
      v74[27] = v22;
      v74[28] = v22;
      v74[25] = v22;
      v74[26] = v22;
      v74[23] = v22;
      v74[24] = v22;
      v74[21] = v22;
      v74[22] = v22;
      v74[19] = v22;
      v74[20] = v22;
      v74[17] = v22;
      v74[18] = v22;
      v74[16] = v22;
      v75 = 0xAAAAAAAAAAAAAAAALL;
      v74[15] = v22;
      v74[14] = v22;
      v74[13] = v22;
      v74[12] = v22;
      v74[11] = v22;
      v74[10] = v22;
      v74[9] = v22;
      v74[8] = v22;
      v74[6] = v22;
      v74[7] = v22;
      v74[4] = v22;
      v74[5] = v22;
      v74[2] = v22;
      v74[3] = v22;
      v74[0] = v22;
      v74[1] = v22;
      v70 = v21;
      v73 = v21;
      result = (uint64_t)ChainContextSubstFormat1::NthChainSubRuleSet(this, a4 - 1, v7);
      if (result)
      {
        v23 = (_WORD *)result;
        if (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
        {
          v24 = *(_QWORD *)(a3 + 48);
          GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v24);
          v26 = v24;
          v68 = GlyphID;
          v28 = v70;
          v27 = this;
        }
        else
        {
          v68 = 0xFFFF;
          v28 = v70;
          v27 = this;
          v26 = v70;
        }
        v64 = a7;
        v65 = a1;
        v66 = a5;
        v67 = a6;
        v29 = (ChainContextSubstFormat1 *)(v23 + 1);
        if (v23 + 1 < (_WORD *)v27
          || (LODWORD(v30) = __rev16((unsigned __int16)*v23),
              v31 = (unint64_t)v29 + 2 * v30,
              v31 < (unint64_t)v29)
          || v31 > v7)
        {
          v32 = (unint64_t)(v23 + 2) <= v7 && v29 >= v27;
          LODWORD(v30) = (v7 - (_DWORD)v29) >> 1;
          if (!v32)
            LODWORD(v30) = 0;
          if (!(bswap32(v30) >> 16))
            goto LABEL_107;
        }
        else if (!*v23)
        {
          goto LABEL_107;
        }
        v33 = 0;
        if ((v30 & 0xFFFE) != 0)
          v30 = (unsigned __int16)v30;
        else
          v30 = 1;
        v72 = v30;
        v69 = v26;
        while (1)
        {
          if (v33 >= bswap32((unsigned __int16)*v23) >> 16)
            goto LABEL_106;
          v34 = (unsigned __int16)v23[v33 + 1];
          v42 = v34 == 0;
          v35 = (ChainContextSubstFormat1 *)((char *)v23 + __rev16(v34));
          if (v42 || (unint64_t)v35 > v7)
            goto LABEL_106;
          v37 = (ChainContextSubstFormat1 *)((char *)v35 + 2);
          if (v35 < v27 || (unint64_t)v37 > v7)
            goto LABEL_107;
          if (*(_WORD *)v35)
            break;
          v44 = v28;
LABEL_65:
          if (v37 < v27)
            goto LABEL_107;
          v45 = (unsigned __int16 *)((char *)v37 + 2);
          if ((unint64_t)v37 + 2 > v7)
            goto LABEL_107;
          v46 = *(unsigned __int16 *)v37;
          if (*(_WORD *)v37)
          {
            v47 = __rev16(v46);
            if (v47 <= 0x40)
            {
              v48 = v47 - 1;
              v49 = &v45[v47 - 1];
              if (v49 < v45 || (unint64_t)v49 > v7)
              {
                v51 = (unint64_t)v37 + 4 <= v7 ? (v7 - (unint64_t)v45) >> 1 : 0;
                if (v51 != v48)
                  goto LABEL_107;
              }
              v52 = (unsigned __int16 *)((char *)v37 + 2 * v47);
              if (v46 == 256 || v26 == v28)
              {
                v53 = v28;
              }
              else
              {
                v53 = v28;
                if (v68 == bswap32(*v45) >> 16)
                {
                  *(_QWORD *)&v74[0] = v26;
                  v45 = (unsigned __int16 *)((char *)v37 + 4);
                  if (v46 == 512)
                  {
                    v53 = v26;
                  }
                  else
                  {
                    v54 = v44;
                    if (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
                    {
                      v45 = EqualSequenceAndNote<BigEndianScalar<unsigned short>>(v45, v52, (uint64_t *)a3, (_QWORD *)v74 + 1);
                      v53 = *(_QWORD *)(a3 + 48);
                      v26 = v69;
                      *(_QWORD *)(a3 + 48) = v69;
                    }
                    else
                    {
                      v26 = v69;
                      v53 = v69;
                    }
                    v28 = v70;
                    v27 = this;
                    v44 = v54;
                  }
                }
              }
              if (v45 == v52)
              {
                v55 = v52 + 1;
                if ((unint64_t)(v52 + 1) > v7)
                  goto LABEL_107;
                if (!*v52)
                {
LABEL_108:
                  if (v55 >= (unsigned __int16 *)v27 && (unint64_t)(v55 + 1) <= v7)
                  {
                    v61 = v44;
                    if (OTL::GSUB::ApplySubstLookupRecords(v65, (unint64_t)v27, v55 + 1, bswap32(*v55) >> 16, a3, v28, &v73, v47, v66, v67, v64)&& *(_QWORD *)(*(_QWORD *)a3 + 152))
                    {
                      v62 = v61 - v53;
                      if (v61 >= v53)
                        v63.location = v53;
                      else
                        v63.location = v61;
                      if (v61 - v53 < 0)
                        v62 = v53 - v61;
                      v63.length = v62 + 1;
                      TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)a3, v63);
                    }
                    return 1;
                  }
LABEL_107:
                  result = 0;
                  *(_QWORD *)(a3 + 48) = v28;
                  return result;
                }
                v56 = __rev16(*v52);
                v57 = &v55[v56];
                v58 = v57 < v55 || (unint64_t)v57 > v7;
                if (v58 && ((unint64_t)(v52 + 2) > v7 || (v7 - (unint64_t)v55) >> 1 != v56))
                  goto LABEL_107;
                v59 = v44;
                *(_QWORD *)(a3 + 48) = *(&v73 + v48);
                if (v56 <= 1)
                  v60 = 1;
                else
                  v60 = v56;
                while (TGlyphIterator::NextContext((TGlyphIterator *)a3, 1)
                     && TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48)) == bswap32(*v55) >> 16)
                {
                  ++v55;
                  if (!--v60)
                  {
                    v53 = *(_QWORD *)(a3 + 48);
                    v28 = v70;
                    *(_QWORD *)(a3 + 48) = v69;
                    v27 = this;
                    v44 = v59;
                    goto LABEL_108;
                  }
                }
                goto LABEL_105;
              }
            }
          }
LABEL_106:
          if (++v33 == v72)
            goto LABEL_107;
        }
        v39 = __rev16(*(unsigned __int16 *)v35);
        v40 = (ChainContextSubstFormat1 *)((char *)v37 + 2 * v39);
        if (v40 < v37 || (unint64_t)v40 > v7)
        {
          v42 = (unint64_t)v35 + 4 <= v7 && (v7 - (unint64_t)v37) >> 1 == v39;
          if (!v42)
            goto LABEL_107;
        }
        *(_QWORD *)(a3 + 48) = v28;
        if (v39 <= 1)
          v43 = 1;
        else
          v43 = v39;
        while (TGlyphIterator::PrevContext((TGlyphIterator *)a3, 1)
             && TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48)) == bswap32(*(unsigned __int16 *)v37) >> 16)
        {
          v37 = (ChainContextSubstFormat1 *)((char *)v37 + 2);
          if (!--v43)
          {
            v44 = *(_QWORD *)(a3 + 48);
            v26 = v69;
            v28 = v70;
            *(_QWORD *)(a3 + 48) = v69;
            v27 = this;
            goto LABEL_65;
          }
        }
LABEL_105:
        v26 = v69;
        v28 = v70;
        *(_QWORD *)(a3 + 48) = v69;
        v27 = this;
        goto LABEL_106;
      }
    }
  }
  return result;
}

unsigned __int16 *ChainContextSubstFormat1::NthChainSubRuleSet(ChainContextSubstFormat1 *this, unsigned int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 2)) >> 16)
    return 0;
  if (!*((_WORD *)this + a2 + 3))
    return 0;
  v3 = (unsigned __int16 *)((char *)this + __rev16(*((unsigned __int16 *)this + a2 + 3)));
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > a3)
    return 0;
  v6 = bswap32(*v3) >> 16;
  v7 = (unint64_t)&v4[v6];
  if ((unint64_t)(v3 + 2) <= a3)
    v8 = (a3 - (unint64_t)v4) >> 1;
  else
    v8 = 0;
  if (v7 >= (unint64_t)v4 && v7 <= a3 || v8 == v6)
    return v3;
  else
    return 0;
}

void std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t OTL::GSUB::ApplyMultipleSubst(uint64_t a1, uint64_t a2, TGlyphIterator *a3, unsigned int a4, _WORD *a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t result;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a2 + 6;
  if (a2 + 6 > v6)
    return 0;
  v11 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v12 = v7 + 2 * v11;
  v14 = v12 >= v7 && v12 <= v6;
  v15 = (v6 - v7) >> 1;
  if (a2 + 8 > v6)
    v15 = 0;
  if (!v14 && v15 != v11 || v11 < a4)
    return 0;
  v16 = a4 - 1;
  if (!v14)
  {
    if (v15 != v11 || v16 >= v11)
      return 0;
LABEL_20:
    v18 = (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 2 * v16 + 6)) >> 16));
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > v6)
      return 0;
    v20 = *v18;
    v21 = __rev16(v20);
    v22 = &v19[v21];
    v23 = (unint64_t)(v18 + 2) <= v6 ? (v6 - (unint64_t)v19) >> 1 : 0;
    v24 = (unint64_t)v22 <= v6 && v22 >= v19;
    if (!v24 && v23 != v21)
      return 0;
    if (!v20)
    {
      TRunGlue::Delete(*(_QWORD **)a3, *((_QWORD *)a3 + 6), 0);
      ++*a5;
      return 1;
    }
    v26 = *(_QWORD *)(a6 + 24);
    if (v26)
    {
      if (v26 == a6)
      {
        v33 = v32;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a6 + 24))(a6, v32);
      }
      else
      {
        v33 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      }
    }
    else
    {
      v33 = 0;
    }
    v28 = TGlyphIterator::ReplaceWithGlyphs((uint64_t)a3, v21, v19, (uint64_t)v32);
    v29 = v33;
    if (v33 == v32)
    {
      v30 = 4;
      v29 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_46:
        if (!v28)
        {
          result = 1;
          **(_BYTE **)(a6 + 32) = 1;
          return result;
        }
        v31 = *((_QWORD *)a3 + 9);
        *((_QWORD *)a3 + 9) = 0;
        TGlyphIterator::Next(a3, (v21 - 1));
        *((_QWORD *)a3 + 9) = v31;
        return 1;
      }
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_46;
  }
  if (v16 < v11)
    goto LABEL_20;
  return 0;
}

uint64_t TGlyphIterator::ReplaceWithGlyphs(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  TRunGlue *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  TRunGlue *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int GlyphProps;
  uint64_t v21;
  uint64_t v22;
  TRunGlue *v24[2];

  v4 = a2;
  if ((_DWORD)a2)
  {
    v8 = *(TRunGlue **)(a1 + 48);
    v24[0] = *(TRunGlue **)a1;
    v24[1] = v8;
    TRunGlue::SetGlyphID<true>(v24[0], (uint64_t)v8, bswap32(*a3) >> 16);
    if ((_DWORD)v4 != 1)
    {
      v9 = a3 + 1;
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!TGlyphIterator::Next((TGlyphIterator *)a1, 1))
        goto LABEL_7;
      v12 = *(_QWORD *)(a1 + 48);
      v13 = v12 + ~v10;
      v14 = v10 + ~v12;
      if (*(int *)(a1 + 8) >= 0)
        v14 = v13;
      if (v14 < (v4 - 1))
      {
LABEL_7:
        *(_QWORD *)(a1 + 72) = v11;
        *(_QWORD *)(a1 + 48) = v10;
        if (!TGlyphIterator::DoGlyphInsertion((_DWORD *)a1, (int)v4 - 1, (uint64_t)v9))
          return 0;
        v15 = v4;
        v4 = 1;
        std::function<void ()(CFRange,long)>::operator()(a4, v10, 1, v15);
        return v4;
      }
      TRunGlue::TGlyph::clearSafeToBreakAfter((uint64_t)v24);
      v16 = *(TRunGlue **)a1;
      v17 = v10 + *(int *)(a1 + 8);
      v18 = (v4 - 1);
      do
      {
        v19 = *v9++;
        TRunGlue::SetGlyphID<true>(v16, v17, bswap32(v19) >> 16);
        GlyphProps = TRunGlue::GetGlyphProps(v16, v17);
        TRunGlue::SetGlyphProps(v16, v17, GlyphProps & 0xFFFFFFDF);
        v21 = *(int *)(a1 + 8);
        v17 += v21;
        --v18;
      }
      while (v18);
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 48) = v10;
      if ((int)v21 >= 0)
        v22 = 0;
      else
        v22 = (v4 - 1);
      std::function<void ()(CFRange,long)>::operator()(a4, v10 - v22, v4, v4);
    }
    return 1;
  }
  return v4;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t **TRunGlue::TGlyph::AdjustXPositionBy(TRunGlue::TGlyph *this, double a2)
{
  uint64_t v3;
  uint64_t **result;
  int32x2_t v5;
  int64x2_t v6;
  int8x16_t v7;
  int8x16_t v8;
  CGPoint v10;

  v3 = *(_QWORD *)this;
  if ((*(_QWORD *)(v3 + 152) || *(_QWORD *)(v3 + 192)) && !*(_BYTE *)(v3 + 634))
  {
    v10.x = TRunGlue::GetOrigin((TRunGlue *)v3, *((_QWORD *)this + 1)) + *(double *)(*(_QWORD *)this + 640) * a2;
    return (uint64_t **)TRunGlue::SetOrigin(*(_QWORD **)this, *((_QWORD *)this + 1), v10);
  }
  else
  {
    result = std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(*(uint64_t ***)(v3 + 112), *((_QWORD *)this + 1), (uint64_t **)this + 1);
    v5 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)this + 634) == 0);
    v6.i64[0] = v5.u32[0];
    v6.i64[1] = v5.u32[1];
    v7 = (int8x16_t)vdupq_lane_s64(0x8000000000000000, 0);
    v8.i64[1] = v7.i64[1];
    *(double *)v8.i64 = a2;
    *(double *)&v7.i64[1] = a2;
    *(float64x2_t *)(result + 5) = vaddq_f64(*(float64x2_t *)(result + 5), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), v8, v7));
  }
  return result;
}

_QWORD *std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E15E0A78;
  v2[1] = v3;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

char *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E04D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 40), a1 + 40);
  *((_WORD *)v2 + 36) = *(_WORD *)(a1 + 72);
  return v2;
}

uint64_t TStorageRange::ResetAdvance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;

  v7 = *(_QWORD *)(a1 + 8) + a2;
  v8 = *(_BYTE *)(a1 + 33);
  v9 = *(_QWORD **)(a1 + 24);
  if ((v8 & 4) != 0)
  {
    objc_msgSend(v9, "customAdvanceForIndex:", v7);
  }
  else
  {
    v14 = *(_WORD *)(v9[2] + 2 * v7);
    v13 = NAN;
    TFont::GetUnsummedAdvancesForGlyphs(a3, (uint64_t)&v14, &v13, 1, 1, 0, a4);
    v10 = *(_QWORD *)&v13;
  }
  v11 = 0;
  return TStorageRange::SetAdvance((TStorageRange *)a1, a2, *(CGSize *)&v10);
}

void CTFontDrawGlyphsWithAdvances(uint64_t a1, CGGlyph *a2, float64x2_t *a3, unint64_t a4, CGContext *a5)
{
  CTFontDrawGlyphsWithAdvancesInternal(a1, a2, a3, a4, a5, 0);
}

CFRange CTLineGetStringRange(CTLineRef line)
{
  uint64_t v1;
  CFIndex v2;
  CFRange result;

  if (line)
  {
    v1 = *((_QWORD *)line + 5);
    line = *(CTLineRef *)(v1 + 72);
    v2 = *(_QWORD *)(v1 + 80);
  }
  else
  {
    v2 = 0;
  }
  result.length = v2;
  result.location = (CFIndex)line;
  return result;
}

uint64_t OTL::GCommon::IterateLangSysTables(unint64_t a1, unsigned __int16 *a2, unint64_t a3, uint64_t a4)
{
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v22;
  int v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v44;
  unsigned int v45;
  char v46;
  char *v47;
  unsigned int v48;

  v8 = a2 + 2;
  if ((unint64_t)(a2 + 2) < a1
    || ((v9 = a2[1],
         LODWORD(v10) = __rev16(v9),
         v11 = (unint64_t)&v8[3 * v10],
         v11 >= (unint64_t)v8)
      ? (v12 = v11 > a3)
      : (v12 = 1),
        v12))
  {
    if ((unint64_t)v8 < a1)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v13 = (a3 - (unint64_t)v8) / 6;
      if ((unint64_t)(a2 + 5) <= a3)
        LODWORD(v10) = v13;
      else
        LODWORD(v10) = 0;
    }
    v9 = bswap32(v10) >> 16;
  }
  if (*a2)
  {
    v14 = (char *)a2 + __rev16(*a2);
    v15 = (unint64_t)(v14 + 6);
    if ((unint64_t)(v14 + 4) < a1 || v15 > a3)
      goto LABEL_72;
    v17 = bswap32(*((unsigned __int16 *)v14 + 2)) >> 16;
    v18 = v15 + 2 * v17;
    v19 = (unint64_t)(v14 + 8) <= a3 ? (a3 - v15) >> 1 : 0;
    v20 = v18 <= a3 && v18 >= v15;
    if (!v20 && v19 != v17)
      goto LABEL_72;
    v46 = 0;
    v22 = *(_QWORD *)(a4 + 24);
    v48 = 0;
    v47 = v14;
    if (v22)
    {
      v23 = (*(uint64_t (**)(uint64_t, unsigned int *, char **, char *))(*(_QWORD *)v22 + 48))(v22, &v48, &v47, &v46);
      v24 = v23;
      if (v23)
        v25 = v46 == 0;
      else
        v25 = 0;
      if (!v25)
        return v24 & 1;
      if (!v9)
      {
        v24 = 1;
LABEL_65:
        LOBYTE(v41) = 1;
        goto LABEL_66;
      }
LABEL_37:
      v26 = 0;
      v24 = 0;
      v27 = (unsigned __int16)v10;
      if ((v10 & 0xFFFE) != 0)
        v10 = (unsigned __int16)v10;
      else
        v10 = 1;
      v28 = a2 + 4;
      v29 = a2 + 4;
      while (1)
      {
        v31 = *v29;
        v29 += 3;
        v30 = v31;
        if (v31)
        {
          v32 = (char *)a2 + __rev16(v30);
          v33 = (unint64_t)(v32 + 6);
          v34 = (unint64_t)(v32 + 4) < a1 || v33 > a3;
          if (v34
            || ((v35 = bswap32(*((unsigned __int16 *)v32 + 2)) >> 16,
                 v36 = v33 + 2 * v35,
                 (unint64_t)(v32 + 8) <= a3)
              ? (v37 = (a3 - v33) >> 1)
              : (v37 = 0),
                v36 <= a3 ? (v38 = v36 >= v33) : (v38 = 0),
                !v38 ? (v39 = v37 == v35) : (v39 = 1),
                !v39))
          {
            LOBYTE(v41) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          v32 = 0;
        }
        v46 = 0;
        v40 = *(_QWORD *)(a4 + 24);
        v48 = bswap32(*((_DWORD *)v28 - 1));
        v47 = v32;
        if (!v40)
          break;
        v41 = (*(uint64_t (**)(uint64_t, unsigned int *, char **, char *))(*(_QWORD *)v40 + 48))(v40, &v48, &v47, &v46);
        if (v41)
          v42 = v46 == 0;
        else
          v42 = 0;
        if (!v42)
          goto LABEL_66;
        v24 = ++v26 >= v27;
        v28 = v29;
        if (v10 == v26)
          goto LABEL_65;
      }
    }
  }
  else
  {
    if (v9)
      goto LABEL_37;
    v46 = 0;
    v44 = *(_QWORD *)(a4 + 24);
    v48 = 0;
    v47 = 0;
    if (v44)
    {
      if (((*(uint64_t (**)(uint64_t, unsigned int *, char **, char *))(*(_QWORD *)v44 + 48))(v44, &v48, &v47, &v46) & 1) == 0)
      {
LABEL_72:
        v24 = 0;
        return v24 & 1;
      }
      v24 = 1;
      LOBYTE(v41) = 1;
      if (v46)
        return v24 & 1;
LABEL_66:
      v24 |= v41;
      return v24 & 1;
    }
  }
  v45 = std::__throw_bad_function_call[abi:nn180100]();
  return IsOTFeatureTurnedOnByShapingEngine(v45);
}

BOOL IsOTFeatureTurnedOnByShapingEngine(unsigned int a1)
{
  unsigned __int8 v1;
  unsigned int v3;

  v3 = a1;
  v1 = atomic_load((unsigned __int8 *)&qword_1ECDE79E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE79E8))
  {
    xmmword_1ECDE7A88 = 0u;
    unk_1ECDE7A98 = 0u;
    dword_1ECDE7AA8 = 1065353216;
    __cxa_guard_release(&qword_1ECDE79E8);
  }
  if (qword_1ECDE79F0 != -1)
    dispatch_once_f(&qword_1ECDE79F0, 0, (dispatch_function_t)IsOTFeatureTurnedOnByShapingEngine::$_0::__invoke);
  return std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(&xmmword_1ECDE7A88, &v3) != 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

BOOL OTL::GCommon::GetLookups(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  int v25;
  int v26;
  unsigned __int16 *i;
  int v29;
  unsigned __int16 *v31;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a3;
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    return 0;
  v8 = *(unsigned __int16 **)(a1 + 56);
  v35 = bswap32(**(unsigned __int16 **)(a1 + 64)) >> 16;
  v9 = bswap32(*v8) >> 16;
  v10 = *(unsigned __int16 *)(v4 + 4);
  v33[0] = TFont::GetFeatureTableSubstitutions(*(TBaseFont ***)(a1 + 16), *(_DWORD *)(a1 + 8));
  v33[1] = &v34;
  v33[2] = a1;
  v33[3] = &v35;
  v33[4] = &v36;
  v34 = 0;
  if (a4)
  {
    v11 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2)) >> 16;
    if (v11 < v9)
      OTL::GCommon::GetLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *,BOOL)const::$_0::operator()((uint64_t)v33, v11, 0);
  }
  v13 = *(_DWORD **)a2;
  v12 = *(_DWORD **)(a2 + 8);
  if (v13 != v12)
  {
    v14 = 2 * __rev16(v10);
    do
    {
      v15 = v13[1];
      if (v15 && v10)
      {
        v16 = (unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 6);
        v17 = v14;
        while (1)
        {
          v18 = bswap32(*v16) >> 16;
          if (v18 < v9 && bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 6 * v18 + 2)) == *v13)
            break;
          ++v16;
          v17 -= 2;
          if (!v17)
            goto LABEL_15;
        }
        OTL::GCommon::GetLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *,BOOL)const::$_0::operator()((uint64_t)v33, v18, v15 - 1);
      }
LABEL_15:
      v13 += 2;
    }
    while (v13 != v12);
  }
  v20 = *(_QWORD *)v36;
  v19 = *(unsigned __int16 **)(v36 + 8);
  v21 = 126 - 2 * __clz(((uint64_t)v19 - *(_QWORD *)v36) >> 2);
  if (v19 == *(unsigned __int16 **)v36)
    v22 = 0;
  else
    v22 = v21;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *,false>(*(_QWORD *)v36, *(unsigned __int16 **)(v36 + 8), v22, 1);
  v23 = v36;
  if (v19 != (unsigned __int16 *)v20)
  {
    v24 = (_WORD *)(v20 - 4);
    while (v24 + 4 != v19)
    {
      v26 = (unsigned __int16)v24[2];
      v24 += 2;
      v25 = v26;
      if (v26 == (unsigned __int16)v24[2] && v24[1] == v24[3])
      {
        for (i = v24 + 4; i != v19; i += 2)
        {
          v29 = v25;
          v25 = *i;
          if (v29 != v25 || (unsigned __int16)v24[1] != i[1])
          {
            v24[2] = v25;
            v24 += 2;
            v24[1] = i[1];
          }
        }
        v31 = v24 + 2;
        goto LABEL_38;
      }
    }
  }
  v31 = v19;
LABEL_38:
  std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::erase(v23, v31, v19);
  return *(_QWORD *)v36 != *(_QWORD *)(v36 + 8);
}

void *TInlineBufferAllocator<unsigned int,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 120);
  v2 = (unint64_t *)(a1 + 120);
  v3 = v4;
  v5 = v4 + 4 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(4 * a2);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

__int128 *TFont::GetFeatureTableSubstitutions(TBaseFont **a1, unsigned int a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFData *CommonTable;
  const __CFData *v8;
  const UInt8 *BytePtr;
  uint64_t v10;
  __int128 v11;
  const UInt8 *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t ***v20;
  uint64_t **i;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t __n[2];
  __int128 v37;
  unint64_t v38;

  if (qword_1ECDE75F8 != -1)
    dispatch_once_f(&qword_1ECDE75F8, 0, (dispatch_function_t)TFont::GetFeatureTableSubstitutions(OTL::GCommon::Table)const::$_0::__invoke);
  v4 = (unint64_t *)&a1[a2 + 43];
  v5 = atomic_load(v4);
  if (v5)
  {
    if (v5 != -1)
      return (__int128 *)v5;
    return &xmmword_1ECDE7610;
  }
  if (a2)
    v6 = 1196445523;
  else
    v6 = 1196643650;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1[50], v6, 0);
  if (!CommonTable || (v8 = CommonTable, (BytePtr = CFDataGetBytePtr(CommonTable)) == 0))
  {
LABEL_63:
    atomic_store(0xFFFFFFFFFFFFFFFFLL, v4);
    return &xmmword_1ECDE7610;
  }
  v10 = (uint64_t)BytePtr;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__n = v11;
  v37 = v11;
  v38 = 0xAAAAAAAAFFFFFFFFLL;
  v12 = CFDataGetBytePtr(v8);
  if (v12)
    v13 = (unint64_t)&v12[CFDataGetLength(v8)];
  else
    v13 = 0;
  OTL::GCommon::FeatureTableSubstitutionsForFont(v10, v13, (TFont *)a1, (uint64_t)__n);
  if (!*((_QWORD *)&v37 + 1))
  {
    std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)__n);
    goto LABEL_63;
  }
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = v38;
  std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v5, __n[1]);
  v14 = (uint64_t *)v37;
  if (!(_QWORD)v37)
    goto LABEL_59;
  v15 = (_QWORD *)(v5 + 16);
  v16 = *(_QWORD *)(v5 + 8);
  do
  {
    v17 = *((unsigned __int16 *)v14 + 8);
    if (v16)
    {
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v19 = *((unsigned __int16 *)v14 + 8);
        if (v16 <= v17)
          v19 = v17 % v16;
      }
      else
      {
        v19 = ((_DWORD)v16 - 1) & v17;
      }
      v20 = *(uint64_t ****)(*(_QWORD *)v5 + 8 * v19);
      if (v20)
      {
        for (i = *v20; i; i = (uint64_t **)*i)
        {
          v22 = (unint64_t)i[1];
          if (v22 == v17)
          {
            if (*((unsigned __int16 *)i + 8) == (_DWORD)v17)
              goto LABEL_56;
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v22 >= v16)
                v22 %= v16;
            }
            else
            {
              v22 &= v16 - 1;
            }
            if (v22 != v19)
              break;
          }
        }
      }
    }
    else
    {
      v19 = 0xAAAAAAAAAAAAAAAALL;
    }
    v23 = operator new(0x20uLL);
    *v23 = 0;
    v23[1] = v17;
    *((_OWORD *)v23 + 1) = *((_OWORD *)v14 + 1);
    v24 = (float)(unint64_t)(*(_QWORD *)(v5 + 24) + 1);
    v25 = *(float *)(v5 + 32);
    if (!v16 || (float)(v25 * (float)v16) < v24)
    {
      v26 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3)
        v26 = 1;
      v27 = v26 | (2 * v16);
      v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28)
        v29 = v28;
      else
        v29 = v27;
      std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v5, v29);
      v16 = *(_QWORD *)(v5 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v16 <= v17)
          v19 = v17 % v16;
        else
          v19 = v17;
      }
      else
      {
        v19 = ((_DWORD)v16 - 1) & v17;
      }
    }
    v30 = *(_QWORD *)v5;
    v31 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v19);
    if (v31)
    {
      *v23 = *v31;
LABEL_54:
      *v31 = v23;
      goto LABEL_55;
    }
    *v23 = *v15;
    *v15 = v23;
    *(_QWORD *)(v30 + 8 * v19) = v15;
    if (*v23)
    {
      v32 = *(_QWORD *)(*v23 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v32 >= v16)
          v32 %= v16;
      }
      else
      {
        v32 &= v16 - 1;
      }
      v31 = (_QWORD *)(*(_QWORD *)v5 + 8 * v32);
      goto LABEL_54;
    }
LABEL_55:
    ++*(_QWORD *)(v5 + 24);
LABEL_56:
    v14 = (uint64_t *)*v14;
  }
  while (v14);
LABEL_59:
  while (1)
  {
    v33 = __ldaxr(v4);
    if (v33)
      break;
    if (!__stlxr(v5, v4))
      goto LABEL_61;
  }
  __clrex();
  v34 = std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table(v5);
  MEMORY[0x186DC03AC](v34, 0x10A0C408EF24B1CLL);
  v5 = v33;
LABEL_61:
  std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)__n);
  return (__int128 *)v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *,false>(uint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  unsigned __int16 *v38;
  unsigned int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  BOOL v43;
  char v44;
  unsigned __int16 v45;
  unsigned __int16 *v46;
  unsigned __int16 v47;
  unsigned __int16 *v48;
  unsigned int v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  BOOL v53;
  unsigned __int16 *v54;
  unsigned int v55;
  BOOL v56;
  char v57;
  unsigned int v58;
  BOOL v59;
  BOOL v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  BOOL v65;
  char v66;
  unsigned int v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  unsigned int v70;
  BOOL v71;
  char v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  BOOL v76;
  char v77;
  unsigned int v78;
  BOOL v79;
  char v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned int v83;
  BOOL v84;
  char v85;
  unsigned int v86;
  BOOL v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  unsigned __int16 v90;
  unsigned __int16 *v91;
  unsigned int v92;
  BOOL v93;
  char v94;
  unsigned int v95;
  BOOL v96;
  unsigned __int16 *v97;
  unsigned int v98;
  BOOL v99;
  char v100;
  unsigned int v101;
  BOOL v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  BOOL v109;
  unsigned __int16 v110;
  unsigned __int16 *v111;
  BOOL v113;
  uint64_t v114;
  unsigned __int16 *v115;
  unsigned __int16 *v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  char v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  char v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  char *v128;
  char v129;
  unsigned int v130;
  BOOL v131;
  unsigned __int16 *v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  uint64_t v136;
  unsigned __int16 *v137;
  unsigned int v138;
  unsigned int v139;
  BOOL v140;
  char v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  unsigned __int16 *v145;
  unsigned int v146;
  unsigned int v147;
  BOOL v148;
  char v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  unsigned __int16 *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  char v160;
  unsigned int v161;
  unsigned int v162;
  BOOL v163;
  char v164;
  unsigned int v165;
  BOOL v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  BOOL v179;
  char v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int16 *v186;
  unsigned int v187;
  unsigned int v188;
  BOOL v189;
  char v190;
  unsigned int v191;
  unsigned int v192;
  BOOL v193;
  unsigned int v194;
  unsigned int v195;
  char v196;
  unsigned int v197;
  BOOL v198;
  char v199;
  unsigned __int16 *v201;
  unsigned __int16 *v202;
  unsigned int v203;
  unsigned int v204;
  BOOL v205;
  char v206;
  unsigned int v207;
  unsigned int v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  unsigned __int16 *v212;
  char v213;
  unsigned int v214;
  BOOL v215;

  v7 = (unsigned __int16 *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 2;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v103 = *(a2 - 2);
        v104 = *v8;
        v105 = -1;
        if (v103 >= v104)
          v105 = 1;
        if (v103 == v104)
        {
          v106 = *(a2 - 1);
          v107 = v8[1];
          v108 = v106 >= v107;
          v109 = v106 == v107;
          v105 = -1;
          if (v108)
            v105 = 1;
          if (v109)
            v105 = 0;
        }
        if (v105 < 0)
        {
          *v8 = v103;
          *(a2 - 2) = v104;
          v110 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v110;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 95)
        {
          v111 = v8 + 2;
          v113 = v8 == a2 || v111 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v113)
            {
              v114 = 0;
              v115 = v8;
              do
              {
                v116 = v111;
                v117 = v115[2];
                v118 = *v115;
                v119 = v117 == v118;
                if (v117 >= v118)
                  v120 = 1;
                else
                  v120 = -1;
                if (v119)
                {
                  v121 = v115[3];
                  v122 = v115[1];
                  v123 = v121 == v122;
                  if (v121 >= v122)
                    v124 = 1;
                  else
                    v124 = -1;
                  if (v123)
                    v120 = 0;
                  else
                    v120 = v124;
                }
                if (v120 < 0)
                {
                  v125 = (unsigned __int16)*(_DWORD *)v116;
                  v126 = HIWORD(*(_DWORD *)v116);
                  v127 = v114;
                  while (1)
                  {
                    v128 = (char *)v8 + v127;
                    *((_WORD *)v128 + 2) = v118;
                    *((_WORD *)v128 + 3) = *(unsigned __int16 *)((char *)v8 + v127 + 2);
                    if (!v127)
                      break;
                    v118 = *((unsigned __int16 *)v128 - 2);
                    if (v118 <= v125)
                      v129 = 1;
                    else
                      v129 = -1;
                    if (v118 == v125)
                    {
                      v130 = *(unsigned __int16 *)((char *)v8 + v127 - 2);
                      v131 = v130 == v126;
                      v129 = v130 <= v126 ? 1 : -1;
                      if (v131)
                        v129 = 0;
                    }
                    v127 -= 4;
                    if ((v129 & 0x80) == 0)
                    {
                      v132 = (unsigned __int16 *)((char *)v8 + v127 + 4);
                      goto LABEL_228;
                    }
                  }
                  v132 = v8;
LABEL_228:
                  *v132 = v125;
                  v132[1] = v126;
                }
                v111 = v116 + 2;
                v114 += 4;
                v115 = v116;
              }
              while (v116 + 2 != a2);
            }
          }
          else if (!v113)
          {
            v201 = v8 + 3;
            do
            {
              v202 = v111;
              v203 = v7[2];
              v204 = *v7;
              v205 = v203 == v204;
              if (v203 >= v204)
                v206 = 1;
              else
                v206 = -1;
              if (v205)
              {
                v207 = v7[3];
                v208 = v7[1];
                v209 = v207 == v208;
                v206 = v207 >= v208 ? 1 : -1;
                if (v209)
                  v206 = 0;
              }
              if (v206 < 0)
              {
                v210 = (unsigned __int16)*(_DWORD *)v202;
                v211 = HIWORD(*(_DWORD *)v202);
                v212 = v201;
                do
                {
                  *(v212 - 1) = v204;
                  *v212 = *(v212 - 2);
                  v204 = *(v212 - 5);
                  if (v204 <= v210)
                    v213 = 1;
                  else
                    v213 = -1;
                  if (v204 == v210)
                  {
                    v214 = *(v212 - 4);
                    v215 = v214 == v211;
                    v213 = v214 <= v211 ? 1 : -1;
                    if (v215)
                      v213 = 0;
                  }
                  v212 -= 2;
                }
                while (v213 < 0);
                *(v212 - 1) = v210;
                *v212 = v211;
              }
              v111 = v202 + 2;
              v201 += 2;
              v7 = v202;
            }
            while (v202 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v133 = (v10 - 2) >> 1;
            v134 = v133;
            do
            {
              v135 = v134;
              if (v133 >= v134)
              {
                v136 = (2 * v134) | 1;
                v137 = &v8[2 * v136];
                if (2 * v135 + 2 < (uint64_t)v10)
                {
                  v138 = v137[2];
                  v139 = *v137;
                  v140 = v139 == v138;
                  if (v139 >= v138)
                    v141 = 1;
                  else
                    v141 = -1;
                  if (v140)
                  {
                    v142 = v8[2 * v136 + 1];
                    v143 = v137[3];
                    v144 = v142 == v143;
                    v141 = v142 >= v143 ? 1 : -1;
                    if (v144)
                      v141 = 0;
                  }
                  if (v141 < 0)
                  {
                    v137 += 2;
                    v136 = 2 * v135 + 2;
                  }
                }
                v145 = &v8[2 * v135];
                v146 = *v137;
                v147 = *v145;
                v148 = v146 == v147;
                if (v146 >= v147)
                  v149 = 1;
                else
                  v149 = -1;
                if (v148)
                {
                  v150 = v137[1];
                  v151 = v8[2 * v135 + 1];
                  v152 = v150 == v151;
                  v149 = v150 >= v151 ? 1 : -1;
                  if (v152)
                    v149 = 0;
                }
                if ((v149 & 0x80) == 0)
                {
                  v153 = (unsigned __int16)*(_DWORD *)v145;
                  v154 = HIWORD(*(_DWORD *)v145);
                  do
                  {
                    v155 = v137;
                    *v145 = v146;
                    v145[1] = v137[1];
                    if (v133 < v136)
                      break;
                    v156 = (2 * v136) | 1;
                    v137 = &v8[2 * v156];
                    v136 = 2 * v136 + 2;
                    if (v136 >= (uint64_t)v10)
                    {
                      v136 = v156;
                    }
                    else
                    {
                      v157 = v137[2];
                      v158 = *v137;
                      v159 = v158 == v157;
                      if (v158 >= v157)
                        v160 = 1;
                      else
                        v160 = -1;
                      if (v159)
                      {
                        v161 = v8[2 * v156 + 1];
                        v162 = v137[3];
                        v163 = v161 == v162;
                        v160 = v161 >= v162 ? 1 : -1;
                        if (v163)
                          v160 = 0;
                      }
                      if (v160 < 0)
                        v137 += 2;
                      else
                        v136 = v156;
                    }
                    v146 = *v137;
                    if (v146 >= v153)
                      v164 = 1;
                    else
                      v164 = -1;
                    if (v146 == v153)
                    {
                      v165 = v137[1];
                      v166 = v165 == v154;
                      if (v165 >= v154)
                        v167 = 1;
                      else
                        v167 = -1;
                      if (v166)
                        v164 = 0;
                      else
                        v164 = v167;
                    }
                    v145 = v155;
                  }
                  while ((v164 & 0x80) == 0);
                  *v155 = v153;
                  v155[1] = v154;
                }
              }
              v134 = v135 - 1;
            }
            while (v135);
            v168 = (unint64_t)v9 >> 2;
            do
            {
              v169 = 0;
              v170 = *(_DWORD *)v8;
              v171 = v168 - 2;
              if (v168 < 2)
                v171 = v168 - 1;
              v172 = v171 >> 1;
              v173 = v8;
              do
              {
                result = v169 + 1;
                v174 = &v173[2 * v169 + 2];
                v175 = (2 * v169) | 1;
                v176 = 2 * v169 + 2;
                if (v176 < v168)
                {
                  v177 = v174[2];
                  v178 = *v174;
                  v179 = v178 == v177;
                  if (v178 >= v177)
                    v180 = 1;
                  else
                    v180 = -1;
                  if (v179)
                  {
                    v181 = v173[2 * result + 1];
                    v182 = v174[3];
                    v183 = v181 == v182;
                    if (v181 >= v182)
                      result = 1;
                    else
                      result = 255;
                    if (v183)
                      v180 = 0;
                    else
                      v180 = result;
                  }
                  if (v180 < 0)
                  {
                    v174 += 2;
                    v175 = v176;
                  }
                }
                *v173 = *v174;
                v173[1] = v174[1];
                v173 = v174;
                v169 = v175;
              }
              while (v175 <= v172);
              if (v174 == a2 - 2)
              {
                *(_DWORD *)v174 = v170;
              }
              else
              {
                *v174 = *(a2 - 2);
                v174[1] = *(a2 - 1);
                *((_DWORD *)a2 - 1) = v170;
                v184 = (char *)v174 - (char *)v8 + 4;
                if (v184 >= 5)
                {
                  v185 = (((unint64_t)v184 >> 2) - 2) >> 1;
                  v186 = &v8[2 * v185];
                  v187 = *v186;
                  v188 = *v174;
                  v189 = v187 == v188;
                  if (v187 >= v188)
                    v190 = 1;
                  else
                    v190 = -1;
                  if (v189)
                  {
                    v191 = v186[1];
                    v192 = v174[1];
                    v193 = v191 == v192;
                    v190 = v191 >= v192 ? 1 : -1;
                    if (v193)
                      v190 = 0;
                  }
                  if (v190 < 0)
                  {
                    v194 = (unsigned __int16)*(_DWORD *)v174;
                    v195 = HIWORD(*(_DWORD *)v174);
                    do
                    {
                      result = (uint64_t)v186;
                      *v174 = v187;
                      v174[1] = v186[1];
                      if (!v185)
                        break;
                      v185 = (v185 - 1) >> 1;
                      v186 = &v8[2 * v185];
                      v187 = *v186;
                      if (v187 >= v194)
                        v196 = 1;
                      else
                        v196 = -1;
                      if (v187 == v194)
                      {
                        v197 = v186[1];
                        v198 = v197 == v195;
                        if (v197 >= v195)
                          v199 = 1;
                        else
                          v199 = -1;
                        if (v198)
                          v196 = 0;
                        else
                          v196 = v199;
                      }
                      v174 = (unsigned __int16 *)result;
                    }
                    while (v196 < 0);
                    *(_WORD *)result = v194;
                    *(_WORD *)(result + 2) = v195;
                  }
                }
              }
              a2 -= 2;
            }
            while (v168-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x201)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = v7[1];
          v7[1] = v12[1];
          v12[1] = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 2);
          v16 = *v7;
          v17 = v15 == v16;
          if (v15 >= v16)
            v18 = 1;
          else
            v18 = -1;
          if (v17)
          {
            v19 = *(v7 - 1);
            v20 = v7[1];
            v21 = v19 == v20;
            v18 = v19 >= v20 ? 1 : -1;
            if (v21)
              v18 = 0;
          }
          if ((v18 & 0x80) == 0)
          {
            v61 = HIWORD(*(_DWORD *)v7);
            v62 = *(a2 - 2);
            if (v62 <= (unsigned __int16)*(_DWORD *)v7)
              v63 = 1;
            else
              v63 = -1;
            if (v62 == (unsigned __int16)*(_DWORD *)v7)
            {
              v64 = *(a2 - 1);
              v65 = v64 == v61;
              if (v64 <= v61)
                v66 = 1;
              else
                v66 = -1;
              if (v65)
                v63 = 0;
              else
                v63 = v66;
            }
            v67 = (unsigned __int16)*(_DWORD *)v7;
            v68 = v7;
            if (v63 < 0)
            {
              do
              {
                v8 = v68 + 2;
                v75 = v68[2];
                v76 = v75 == v67;
                if (v75 <= v67)
                  v77 = 1;
                else
                  v77 = -1;
                if (v76)
                {
                  v78 = v68[3];
                  v79 = v78 == v61;
                  if (v78 <= v61)
                    v80 = 1;
                  else
                    v80 = -1;
                  if (v79)
                    v77 = 0;
                  else
                    v77 = v80;
                }
                v68 = v8;
              }
              while ((v77 & 0x80) == 0);
            }
            else
            {
              v69 = v7 + 2;
              do
              {
                v8 = v69;
                if (v69 >= a2)
                  break;
                v70 = *v69;
                v71 = v70 == v67;
                if (v70 <= v67)
                  v72 = 1;
                else
                  v72 = -1;
                if (v71)
                {
                  v73 = v69[1];
                  v74 = v73 == v61;
                  v72 = v73 <= v61 ? 1 : -1;
                  if (v74)
                    v72 = 0;
                }
                v69 += 2;
              }
              while ((v72 & 0x80) == 0);
            }
            v81 = a2;
            if (v8 < a2)
            {
              v82 = a2;
              v81 = a2;
              do
              {
                v83 = *(v81 - 2);
                v81 -= 2;
                v84 = v83 == v67;
                if (v83 <= v67)
                  v85 = 1;
                else
                  v85 = -1;
                if (v84)
                {
                  v86 = *(v82 - 1);
                  v87 = v86 == v61;
                  v85 = v86 <= v61 ? 1 : -1;
                  if (v87)
                    v85 = 0;
                }
                v82 = v81;
              }
              while (v85 < 0);
            }
            if (v8 < v81)
            {
              v88 = *v8;
              v89 = *v81;
              do
              {
                *v8 = v89;
                *v81 = v88;
                v90 = v8[1];
                v8[1] = v81[1];
                v81[1] = v90;
                v91 = v8;
                do
                {
                  v92 = v8[2];
                  v8 += 2;
                  v88 = v92;
                  v93 = v92 == v67;
                  if (v92 <= v67)
                    v94 = 1;
                  else
                    v94 = -1;
                  if (v93)
                  {
                    v95 = v91[3];
                    v96 = v95 == v61;
                    v94 = v95 <= v61 ? 1 : -1;
                    if (v96)
                      v94 = 0;
                  }
                  v91 = v8;
                }
                while ((v94 & 0x80) == 0);
                v97 = v81;
                do
                {
                  v98 = *(v81 - 2);
                  v81 -= 2;
                  v89 = v98;
                  v99 = v98 == v67;
                  if (v98 <= v67)
                    v100 = 1;
                  else
                    v100 = -1;
                  if (v99)
                  {
                    v101 = *(v97 - 1);
                    v102 = v101 == v61;
                    v100 = v101 <= v61 ? 1 : -1;
                    if (v102)
                      v100 = 0;
                  }
                  v97 = v81;
                }
                while (v100 < 0);
              }
              while (v8 < v81);
            }
            if (v8 - 2 != v7)
            {
              *v7 = *(v8 - 2);
              v7[1] = *(v8 - 1);
            }
            a4 = 0;
            *(v8 - 2) = v67;
            *(v8 - 1) = v61;
            continue;
          }
        }
        v22 = 0;
        v23 = (unsigned __int16)*(_DWORD *)v7;
        v24 = HIWORD(*(_DWORD *)v7);
        do
        {
          v25 = v7[v22 + 2];
          if (v25 >= v23)
            v26 = 1;
          else
            v26 = -1;
          if (v25 == v23)
          {
            v27 = v7[v22 + 3];
            v28 = v27 == v24;
            v26 = v27 >= v24 ? 1 : -1;
            if (v28)
              v26 = 0;
          }
          v22 += 2;
        }
        while (v26 < 0);
        v29 = &v7[v22];
        v30 = a2;
        if (v22 == 2)
        {
          v38 = a2;
          while (v29 < v38)
          {
            v31 = v38 - 2;
            v39 = *(v38 - 2);
            v40 = v39 == v23;
            if (v39 >= v23)
              v41 = 1;
            else
              v41 = -1;
            if (v40)
            {
              v42 = *(v38 - 1);
              v43 = v42 == v24;
              if (v42 >= v24)
                v44 = 1;
              else
                v44 = -1;
              if (v43)
                v41 = 0;
              else
                v41 = v44;
            }
            v38 = v31;
            if (v41 < 0)
              goto LABEL_62;
          }
          v31 = v38;
        }
        else
        {
          do
          {
            v31 = v30 - 2;
            v32 = *(v30 - 2);
            v33 = v32 == v23;
            if (v32 >= v23)
              v34 = 1;
            else
              v34 = -1;
            if (v33)
            {
              v35 = *(v30 - 1);
              v36 = v35 == v24;
              if (v35 >= v24)
                v37 = 1;
              else
                v37 = -1;
              if (v36)
                v34 = 0;
              else
                v34 = v37;
            }
            v30 = v31;
          }
          while ((v34 & 0x80) == 0);
        }
LABEL_62:
        if (v29 >= v31)
        {
          v8 = v29;
        }
        else
        {
          v45 = *v31;
          v46 = v31;
          v8 = v29;
          do
          {
            *v8 = v45;
            *v46 = v25;
            v47 = v8[1];
            v8[1] = v46[1];
            v46[1] = v47;
            v48 = v8;
            do
            {
              v49 = v8[2];
              v8 += 2;
              LOWORD(v25) = v49;
              v50 = v49 == v23;
              if (v49 >= v23)
                v51 = 1;
              else
                v51 = -1;
              if (v50)
              {
                v52 = v48[3];
                v53 = v52 == v24;
                v51 = v52 >= v24 ? 1 : -1;
                if (v53)
                  v51 = 0;
              }
              v48 = v8;
            }
            while (v51 < 0);
            v54 = v46;
            do
            {
              v55 = *(v46 - 2);
              v46 -= 2;
              v45 = v55;
              v56 = v55 == v23;
              if (v55 >= v23)
                v57 = 1;
              else
                v57 = -1;
              if (v56)
              {
                v58 = *(v54 - 1);
                v59 = v58 == v24;
                v57 = v58 >= v24 ? 1 : -1;
                if (v59)
                  v57 = 0;
              }
              v54 = v46;
            }
            while ((v57 & 0x80) == 0);
          }
          while (v8 < v46);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v23;
        *(v8 - 1) = v24;
        if (v29 < v31)
        {
LABEL_96:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v60 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v7, v8 - 2);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v60)
            continue;
          goto LABEL_96;
        }
        a2 = v8 - 2;
        if (!v60)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::erase(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *(_DWORD **)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = a3 - a2;
      v4 = a2;
      do
      {
        *v4 = v4[v5];
        ++v4;
      }
      while (&v4[v5] != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vdeallocate(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 144);
    if (a1 + 24 <= (unint64_t)v2 && v3 > v2)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 144))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void ConvertSettingsToOTFeatures(unsigned int **a1, unint64_t *a2, int a3, int64x2_t *a4, uint64_t (*a5)(_QWORD), _DWORD *a6, int a7)
{
  unint64_t v10;
  unsigned int *v11;
  const __CFArray *v12;
  TFontFeatureSettingList *v15;
  CFIndex Count;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t *MasterFeatureMapEntry;
  uint64_t *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  CFIndex v32;
  const __CFArray *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v41;
  unint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  BOOL v48;
  uint64_t *v49;
  _DWORD *v50;
  int v51;
  const __CFArray *v52;
  const void *v53;
  const __CFString *v54;
  unsigned int v55;
  char *v56;
  char *v57;
  char *v58;
  CFIndex v59;
  const __CFArray *v60;
  const void *v61;
  const __CFString *v62;
  unsigned int v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t *v84;
  unsigned __int8 v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  BOOL v94;
  _DWORD *v95;
  unint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int64x2_t v108;
  uint64_t v109;
  const __CFArray *v110;
  const void *v111;
  uint64_t v112;
  const __CFString *v113;
  unsigned int v114;
  unsigned int v115;
  const __CFNumber *v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int *v119;
  _DWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unsigned int *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  int64x2_t v131;
  uint64_t v132;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  int v138;
  _DWORD *v139;
  int v140;
  _DWORD *v141;
  _DWORD *v142;
  _DWORD *v143;
  int v144;
  _DWORD *v145;
  _DWORD *v146;
  uint64_t *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  int v152;
  int v153;
  uint64_t v154;
  const void *ValueAtIndex;
  int v156;
  int v157;
  uint64_t (*v158)(_QWORD);
  _DWORD *v159;
  _QWORD *v160;
  unint64_t *v161;
  int v162;
  char *valuePtr[3];
  uint64_t v164;
  __int8 *v165;

  v11 = *a1;
  v10 = (unint64_t)a1[1];
  v12 = (const __CFArray *)atomic_load(a2);
  if (v12 && (v15 = (TFontFeatureSettingList *)a2, Count = CFArrayGetCount(v12), Count >= 1))
  {
    v17 = Count;
    v161 = (unint64_t *)v15;
    v159 = a6;
    if ((unint64_t)v11 < v10)
    {
      v158 = a5;
      v18 = 0;
      if (a3)
        v19 = 32;
      else
        v19 = 16;
      v162 = v19;
      v154 = (uint64_t)&a4[1].i64[1];
      v160 = (_QWORD *)((char *)v15 + 16);
      v157 = a7;
      while (1)
      {
        v20 = (_DWORD *)a4->i64[0];
        v21 = (_DWORD *)a4->i64[1];
        v22 = *v11;
        if ((_DWORD *)a4->i64[0] != v21)
        {
          do
          {
            if (*v20 == v22)
              goto LABEL_12;
            v20 += 2;
          }
          while (v20 != v21);
          v20 = (_DWORD *)a4->i64[1];
        }
LABEL_12:
        MasterFeatureMapEntry = FindMasterFeatureMapEntry(v22);
        if (MasterFeatureMapEntry)
        {
          v24 = MasterFeatureMapEntry;
          v25 = *((_DWORD *)MasterFeatureMapEntry + 2);
          if ((v25 & v162) == 0)
          {
            v29 = *((unsigned __int16 *)MasterFeatureMapEntry + 2);
            if (a7 == 1 && (v25 & 2) != 0)
            {
              if ((v25 & 1) != 0)
              {
                v37 = *v160;
                if (!*v160)
                  goto LABEL_49;
                v38 = v160;
                do
                {
                  v39 = *(unsigned __int16 *)(v37 + 32);
                  v40 = v39 >= v29;
                  if (v39 >= v29)
                    v41 = (uint64_t *)v37;
                  else
                    v41 = (uint64_t *)(v37 + 8);
                  if (v40)
                    v38 = (_QWORD *)v37;
                  v37 = *v41;
                }
                while (*v41);
                if (v38 == v160 || *((unsigned __int16 *)v38 + 16) > v29 || v38[6] == -1)
                {
LABEL_49:
                  if (v20 != v21)
                    goto LABEL_108;
                  v43 = (_DWORD *)a4->i64[1];
                  v42 = a4[1].u64[0];
                  if ((unint64_t)v43 < v42)
                  {
                    *v43 = *(_DWORD *)v24;
                    v44 = 1;
                    goto LABEL_82;
                  }
                  v66 = ((uint64_t)v43 - a4->i64[0]) >> 3;
                  v67 = v66 + 1;
                  if ((unint64_t)(v66 + 1) >> 61)
                    goto LABEL_240;
                  v68 = v42 - a4->i64[0];
                  if (v68 >> 2 > v67)
                    v67 = v68 >> 2;
                  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                    v69 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v69 = v67;
                  v165 = &a4[1].i8[8];
                  v70 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v154, v69);
                  v71 = &v70[8 * v66];
                  *(_DWORD *)v71 = *(_DWORD *)v24;
                  *((_DWORD *)v71 + 1) = 1;
                  v73 = (_DWORD *)a4->i64[0];
                  v72 = a4->u64[1];
                  if (v72 != a4->i64[0])
                  {
                    v74 = &v70[8 * v66];
                    do
                    {
                      v75 = *(_QWORD *)(v72 - 8);
                      v72 -= 8;
                      *((_QWORD *)v74 - 1) = v75;
                      v74 -= 8;
                    }
                    while ((_DWORD *)v72 != v73);
                    goto LABEL_104;
                  }
                  goto LABEL_105;
                }
              }
              else if (TFontFeatureSettingList::IndexOfAATSetting(v15, v29, *((unsigned __int16 *)MasterFeatureMapEntry + 3) ^ 1u) == -1)
              {
                goto LABEL_49;
              }
              if (v20 == v21 || v158 && (v158(*(unsigned int *)v24) & 1) != 0)
                goto LABEL_109;
              v26 = v20 + 2;
              v30 = (_DWORD *)a4->i64[1];
              if (v20 + 2 == v30)
                goto LABEL_18;
              do
              {
                v31 = v26[1];
                *(v26 - 2) = *v26;
                *(v26 - 1) = v31;
                v26 += 2;
              }
              while (v26 != v30);
              goto LABEL_17;
            }
            if ((v25 & 0x40) != 0)
            {
              v45 = *v160;
              if (*v160)
              {
                v46 = v160;
                do
                {
                  v47 = *(unsigned __int16 *)(v45 + 32);
                  v48 = v47 >= v29;
                  if (v47 >= v29)
                    v49 = (uint64_t *)v45;
                  else
                    v49 = (uint64_t *)(v45 + 8);
                  if (v48)
                    v46 = (_QWORD *)v45;
                  v45 = *v49;
                }
                while (*v49);
                if (v46 != v160 && *((unsigned __int16 *)v46 + 16) <= v29)
                {
                  v32 = v46[6];
                  goto LABEL_31;
                }
              }
            }
            else
            {
              v32 = TFontFeatureSettingList::IndexOfAATSetting(v15, v29, *((unsigned __int16 *)MasterFeatureMapEntry + 3));
LABEL_31:
              if (v32 != -1)
              {
                if ((v24[1] & 0x40) != 0
                  && (v33 = (const __CFArray *)atomic_load(v161),
                      ValueAtIndex = CFArrayGetValueAtIndex(v33, v32),
                      (v34 = (const __CFNumber *)-[CTFeatureSetting type]((uint64_t)ValueAtIndex)) != 0)
                  && (LOWORD(valuePtr[0]) = -21846,
                      CFNumberGetValue(v34, kCFNumberShortType, valuePtr),
                      LOWORD(valuePtr[0]) == *((unsigned __int16 *)v24 + 2))
                  && (v35 = (const __CFNumber *)-[CTFeatureSetting selector]((uint64_t)ValueAtIndex)) != 0)
                {
                  LODWORD(valuePtr[0]) = -1431655766;
                  CFNumberGetValue(v35, kCFNumberIntType, valuePtr);
                  v36 = (int)valuePtr[0];
                }
                else
                {
                  v36 = 1;
                }
                v156 = v36;
                v52 = (const __CFArray *)atomic_load(v161);
                v53 = CFArrayGetValueAtIndex(v52, v32);
                v54 = (const __CFString *)-[CTFeatureSetting tag]((uint64_t)v53);
                v55 = FourCharCodeFromString(v54);
                if (!v55 || v55 == *(_DWORD *)v24)
                  goto LABEL_79;
                memset(valuePtr, 170, sizeof(valuePtr));
                TFontFeatureSettingList::IndexesOfAATSetting((TFontFeatureSettingList *)v161, *((_WORD *)v24 + 2), *((unsigned __int16 *)v24 + 3), valuePtr);
                v56 = valuePtr[0] + 8;
                do
                {
                  v57 = v56;
                  v58 = valuePtr[1];
                  if (v56 == valuePtr[1])
                    break;
                  v59 = *(_QWORD *)v56;
                  v60 = (const __CFArray *)atomic_load(v161);
                  v61 = CFArrayGetValueAtIndex(v60, v59);
                  v62 = (const __CFString *)-[CTFeatureSetting tag]((uint64_t)v61);
                  if (!v62)
                    break;
                  v63 = FourCharCodeFromString(v62);
                  v56 = v57 + 8;
                }
                while (v63 != *(_DWORD *)v24);
                if (valuePtr[0])
                {
                  valuePtr[1] = valuePtr[0];
                  operator delete(valuePtr[0]);
                }
                v94 = v57 == v58;
                a7 = v157;
                if (!v94)
                {
LABEL_79:
                  v15 = (TFontFeatureSettingList *)v161;
                  if (v20 != v21)
                    goto LABEL_108;
                  v43 = (_DWORD *)a4->i64[1];
                  v64 = a4[1].u64[0];
                  if ((unint64_t)v43 < v64)
                  {
                    *v43 = *(_DWORD *)v24;
                    v44 = v156;
LABEL_82:
                    v43[1] = v44;
                    v65 = v43 + 2;
LABEL_107:
                    a4->i64[1] = (uint64_t)v65;
                    a7 = v157;
LABEL_108:
                    v18 |= v24[1] & 0xFFFFFE00;
                    goto LABEL_109;
                  }
                  v76 = ((uint64_t)v43 - a4->i64[0]) >> 3;
                  v77 = v76 + 1;
                  if ((unint64_t)(v76 + 1) >> 61)
                    goto LABEL_240;
                  v78 = v64 - a4->i64[0];
                  if (v78 >> 2 > v77)
                    v77 = v78 >> 2;
                  if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                    v69 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v69 = v77;
                  v165 = &a4[1].i8[8];
                  v70 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v154, v69);
                  v71 = &v70[8 * v76];
                  *(_DWORD *)v71 = *(_DWORD *)v24;
                  *((_DWORD *)v71 + 1) = v156;
                  v79 = (_DWORD *)a4->i64[0];
                  v72 = a4->u64[1];
                  if (v72 != a4->i64[0])
                  {
                    v74 = &v70[8 * v76];
                    do
                    {
                      v80 = *(_QWORD *)(v72 - 8);
                      v72 -= 8;
                      *((_QWORD *)v74 - 1) = v80;
                      v74 -= 8;
                    }
                    while ((_DWORD *)v72 != v79);
LABEL_104:
                    v81 = *a4;
LABEL_106:
                    v65 = v71 + 8;
                    a4->i64[0] = (uint64_t)v74;
                    a4->i64[1] = (uint64_t)(v71 + 8);
                    *(int64x2_t *)&valuePtr[1] = v81;
                    v82 = a4[1].i64[0];
                    a4[1].i64[0] = (uint64_t)&v70[8 * v69];
                    v164 = v82;
                    valuePtr[0] = (char *)v81.i64[0];
                    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
                    v15 = (TFontFeatureSettingList *)v161;
                    goto LABEL_107;
                  }
LABEL_105:
                  v81 = vdupq_n_s64(v72);
                  v74 = v71;
                  goto LABEL_106;
                }
LABEL_83:
                v15 = (TFontFeatureSettingList *)v161;
                goto LABEL_109;
              }
            }
            if (v20 == v21
              || v158 && (((uint64_t (*)(_QWORD, uint64_t))v158)(*(unsigned int *)v24, v29) & 1) != 0)
            {
              goto LABEL_83;
            }
            v26 = v20 + 2;
            v50 = (_DWORD *)a4->i64[1];
            v15 = (TFontFeatureSettingList *)v161;
            if (v20 + 2 == v50)
              goto LABEL_18;
            do
            {
              v51 = v26[1];
              *(v26 - 2) = *v26;
              *(v26 - 1) = v51;
              v26 += 2;
            }
            while (v26 != v50);
LABEL_17:
            v20 = v26 - 2;
            goto LABEL_18;
          }
          if (v20 != v21)
          {
            v26 = v20 + 2;
            v27 = (_DWORD *)a4->i64[1];
            if (v20 + 2 != v27)
            {
              do
              {
                v28 = v26[1];
                *(v26 - 2) = *v26;
                *(v26 - 1) = v28;
                v26 += 2;
              }
              while (v26 != v27);
              goto LABEL_17;
            }
LABEL_18:
            a4->i64[1] = (uint64_t)v20;
          }
        }
LABEL_109:
        if ((unint64_t)++v11 >= v10)
          goto LABEL_161;
      }
    }
    v18 = 0;
    do
    {
LABEL_161:
      v110 = (const __CFArray *)atomic_load((unint64_t *)v15);
      v111 = CFArrayGetValueAtIndex(v110, v17 - 1);
      v112 = -[CTFeatureSetting tag]((uint64_t)v111);
      if (!v112)
        break;
      v113 = (const __CFString *)v112;
      if (-[CTFeatureSetting type]((uint64_t)v111))
        break;
      v114 = FourCharCodeFromString(v113);
      if (v114)
      {
        v115 = v114;
        v116 = (const __CFNumber *)-[CTFeatureSetting value]((uint64_t)v111);
        LODWORD(valuePtr[0]) = -1431655766;
        CFNumberGetValue(v116, kCFNumberIntType, valuePtr);
        v117 = valuePtr[0];
        if (LODWORD(valuePtr[0]))
        {
          v119 = (unsigned int *)a4->i64[1];
          v118 = a4[1].u64[0];
          if ((unint64_t)v119 >= v118)
          {
            v121 = ((uint64_t)v119 - a4->i64[0]) >> 3;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61)
              goto LABEL_240;
            v123 = v118 - a4->i64[0];
            if (v123 >> 2 > v122)
              v122 = v123 >> 2;
            if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
              v124 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v124 = v122;
            v165 = &a4[1].i8[8];
            v125 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a4[1].i64[1], v124);
            v126 = (unsigned int *)&v125[8 * v121];
            *v126 = v115;
            v126[1] = v117;
            v128 = a4->i64[0];
            v127 = a4->u64[1];
            if (v127 == a4->i64[0])
            {
              v131 = vdupq_n_s64(v127);
              v129 = &v125[8 * v121];
              v15 = (TFontFeatureSettingList *)v161;
            }
            else
            {
              v129 = &v125[8 * v121];
              v15 = (TFontFeatureSettingList *)v161;
              do
              {
                v130 = *(_QWORD *)(v127 - 8);
                v127 -= 8;
                *((_QWORD *)v129 - 1) = v130;
                v129 -= 8;
              }
              while (v127 != v128);
              v131 = *a4;
            }
            v120 = v126 + 2;
            a4->i64[0] = (uint64_t)v129;
            a4->i64[1] = (uint64_t)(v126 + 2);
            *(int64x2_t *)&valuePtr[1] = v131;
            v132 = a4[1].i64[0];
            a4[1].i64[0] = (uint64_t)&v125[8 * v124];
            v164 = v132;
            valuePtr[0] = (char *)v131.i64[0];
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
          }
          else
          {
            *v119 = v115;
            v119[1] = v117;
            v120 = v119 + 2;
          }
          a4->i64[1] = (uint64_t)v120;
        }
      }
    }
    while (v17-- > 1);
    a6 = v159;
    if (!v159)
      goto LABEL_186;
  }
  else
  {
    if (a3)
    {
      v83 = atomic_load((unsigned __int8 *)&qword_1ECDE7A18);
      if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7A18))
      {
        qword_1ECDE7B00 = 0;
        unk_1ECDE7B08 = 0;
        qword_1ECDE7B10 = 0;
        qword_1ECDE7B90 = (uint64_t)&unk_1ECDE7B18;
        __cxa_guard_release(&qword_1ECDE7A18);
      }
      if (qword_1ECDE7A20 != -1)
        dispatch_once_f(&qword_1ECDE7A20, 0, (dispatch_function_t)GetDefaultFeatureList<true>(void)::{lambda(void *)#1}::__invoke);
      v84 = &qword_1ECDE7B00;
    }
    else
    {
      v85 = atomic_load((unsigned __int8 *)&qword_1ECDE7A28);
      if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7A28))
      {
        qword_1ECDE7B98 = 0;
        unk_1ECDE7BA0 = 0;
        qword_1ECDE7BA8 = 0;
        qword_1ECDE7C28 = (uint64_t)&unk_1ECDE7BB0;
        __cxa_guard_release(&qword_1ECDE7A28);
      }
      if (qword_1ECDE7A30 != -1)
        dispatch_once_f(&qword_1ECDE7A30, 0, (dispatch_function_t)GetDefaultFeatureList<false>(void)::{lambda(void *)#1}::__invoke);
      v84 = &qword_1ECDE7B98;
    }
    if ((unint64_t)v11 >= v10)
    {
      v18 = 0;
    }
    else
    {
      v18 = 0;
      do
      {
        v87 = (unsigned int *)a4->i64[0];
        v86 = (unsigned int *)a4->i64[1];
        v88 = *v11;
        if ((unsigned int *)a4->i64[0] != v86)
        {
          while (*v87 != v88)
          {
            v87 += 2;
            if (v87 == v86)
            {
              v87 = (unsigned int *)a4->i64[1];
              break;
            }
          }
        }
        v89 = FindMasterFeatureMapEntry(v88);
        if (v89)
        {
          v90 = (unsigned int *)v89;
          v91 = (unsigned int *)a4->i64[1];
          if (v87 == v91)
          {
            v90 = (unsigned int *)*v84;
            v92 = (unsigned int *)v84[1];
            if ((unsigned int *)*v84 != v92)
            {
              v93 = *v11;
              while (*v90 <= v93)
              {
                v94 = *v90 != v93 || (v90[2] & 0x44) == 4;
                if (!v94)
                {
                  if (v90 == v92)
                    break;
                  v95 = a6;
                  v96 = a4[1].u64[0];
                  if ((unint64_t)v87 >= v96)
                  {
                    v98 = ((uint64_t)v91 - a4->i64[0]) >> 3;
                    v99 = v98 + 1;
                    if ((unint64_t)(v98 + 1) >> 61)
LABEL_240:
                      abort();
                    v100 = v96 - a4->i64[0];
                    if (v100 >> 2 > v99)
                      v99 = v100 >> 2;
                    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                      v101 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v101 = v99;
                    v165 = &a4[1].i8[8];
                    v102 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a4[1].i64[1], v101);
                    v103 = &v102[8 * v98];
                    *(_DWORD *)v103 = *v90;
                    *((_DWORD *)v103 + 1) = 1;
                    v105 = a4->i64[0];
                    v104 = a4->u64[1];
                    if (v104 == a4->i64[0])
                    {
                      v108 = vdupq_n_s64(v104);
                      v106 = &v102[8 * v98];
                    }
                    else
                    {
                      v106 = &v102[8 * v98];
                      do
                      {
                        v107 = *(_QWORD *)(v104 - 8);
                        v104 -= 8;
                        *((_QWORD *)v106 - 1) = v107;
                        v106 -= 8;
                      }
                      while (v104 != v105);
                      v108 = *a4;
                    }
                    v97 = v103 + 8;
                    a4->i64[0] = (uint64_t)v106;
                    a4->i64[1] = (uint64_t)(v103 + 8);
                    *(int64x2_t *)&valuePtr[1] = v108;
                    v109 = a4[1].i64[0];
                    a4[1].i64[0] = (uint64_t)&v102[8 * v101];
                    v164 = v109;
                    valuePtr[0] = (char *)v108.i64[0];
                    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
                  }
                  else
                  {
                    *v87 = v93;
                    v87[1] = 1;
                    v97 = v87 + 2;
                  }
                  a4->i64[1] = (uint64_t)v97;
                  a6 = v95;
                  goto LABEL_128;
                }
                v90 += 3;
                if (v90 == v92)
                  break;
              }
            }
          }
          else
          {
LABEL_128:
            v18 |= v90[2] & 0xFFFFFE00;
          }
        }
        ++v11;
      }
      while ((unint64_t)v11 < v10);
    }
    if (!a6)
      goto LABEL_186;
  }
  if (!*a6)
  {
    LOWORD(v18) = v18 | 0x200;
    if ((v18 & 0x200) == 0)
      goto LABEL_210;
    goto LABEL_190;
  }
  if ((v18 & 0x4000) != 0)
  {
    *a6 = 2;
    v18 ^= 0x4000u;
  }
LABEL_186:
  if (!v18)
    return;
  if ((v18 & 0x200) != 0)
  {
LABEL_190:
    v135 = (_DWORD *)a4->i64[0];
    v134 = (_DWORD *)a4->i64[1];
    v136 = (_DWORD *)a4->i64[0];
    if ((_DWORD *)a4->i64[0] != v134)
    {
      v136 = (_DWORD *)a4->i64[0];
      while (*v136 != 1801810542)
      {
        v136 += 2;
        if (v136 == v134)
          goto LABEL_201;
      }
    }
    if (v136 != v134)
    {
      v137 = v136 + 2;
      if (v136 + 2 == v134)
      {
        v134 = v136;
      }
      else
      {
        do
        {
          v138 = v137[1];
          *(v137 - 2) = *v137;
          *(v137 - 1) = v138;
          v137 += 2;
        }
        while (v137 != v134);
        v134 = v137 - 2;
      }
      a4->i64[1] = (uint64_t)v134;
    }
LABEL_201:
    if (v135 != v134)
    {
      while (*v135 != 1986753134)
      {
        v135 += 2;
        if (v135 == v134)
          goto LABEL_210;
      }
    }
    if (v135 != v134)
    {
      v139 = v135 + 2;
      if (v135 + 2 != v134)
      {
        do
        {
          v140 = v139[1];
          *(v139 - 2) = *v139;
          *(v139 - 1) = v140;
          v139 += 2;
        }
        while (v139 != v134);
        v135 = v139 - 2;
      }
      a4->i64[1] = (uint64_t)v135;
    }
  }
LABEL_210:
  if ((v18 & 0x800) != 0)
  {
    v142 = (_DWORD *)a4->i64[0];
    v141 = (_DWORD *)a4->i64[1];
    if ((_DWORD *)a4->i64[0] != v141)
    {
      while (*v142 != 1885432948)
      {
        v142 += 2;
        if (v142 == v141)
          goto LABEL_220;
      }
    }
    if (v142 != v141)
    {
      v143 = v142 + 2;
      if (v142 + 2 != v141)
      {
        do
        {
          v144 = v143[1];
          *(v143 - 2) = *v143;
          *(v143 - 1) = v144;
          v143 += 2;
        }
        while (v143 != v141);
        v142 = v143 - 2;
      }
      a4->i64[1] = (uint64_t)v142;
    }
  }
LABEL_220:
  if ((v18 & 0x2000) != 0)
  {
    v145 = (_DWORD *)a4->i64[0];
    v150 = (_DWORD *)a4->i64[1];
    v147 = &a4->i64[1];
    v149 = v150;
    if (v145 != v150)
    {
      while (*v145 != 1987212338)
      {
        v145 += 2;
        if (v145 == v149)
          return;
      }
    }
    if (v145 != v149)
    {
      v151 = v145 + 2;
      if (v145 + 2 != v149)
      {
        do
        {
          v152 = v151[1];
          *(v151 - 2) = *v151;
          *(v151 - 1) = v152;
          v151 += 2;
        }
        while (v151 != v149);
        goto LABEL_237;
      }
LABEL_238:
      *v147 = (uint64_t)v145;
    }
  }
  else if ((v18 & 0x1000) != 0)
  {
    v145 = (_DWORD *)a4->i64[0];
    v148 = (_DWORD *)a4->i64[1];
    v147 = &a4->i64[1];
    v146 = v148;
    if (v145 != v148)
    {
      while (*v145 != 1986359924)
      {
        v145 += 2;
        if (v145 == v146)
          return;
      }
    }
    if (v145 != v146)
    {
      v151 = v145 + 2;
      if (v145 + 2 != v146)
      {
        do
        {
          v153 = v151[1];
          *(v151 - 2) = *v151;
          *(v151 - 1) = v153;
          v151 += 2;
        }
        while (v151 != v146);
LABEL_237:
        v145 = v151 - 2;
        goto LABEL_238;
      }
      goto LABEL_238;
    }
  }
}

uint64_t *FindMasterFeatureMapEntry(unsigned int a1)
{
  uint64_t *result;

  if (qword_1ECDE7A10 != -1)
    dispatch_once_f(&qword_1ECDE7A10, 0, (dispatch_function_t)FindMasterFeatureMapEntry::$_0::__invoke);
  if (result)
    return (uint64_t *)result[3];
  return result;
}

uint64_t TFontFeatureSettingList::IndexOfAATSetting(TFontFeatureSettingList *this, unsigned __int16 a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  unsigned __int16 v10;

  v10 = a2;
  v4 = std::__tree<std::__value_type<unsigned short,AATFeaturePair>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,AATFeaturePair>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,AATFeaturePair>>>::__equal_range_multi<unsigned short>((uint64_t)this + 8, &v10);
  if (v4 == v5)
    return -1;
  while (*((unsigned __int16 *)v4 + 20) != a3)
  {
    v6 = (uint64_t *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (uint64_t *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
    if (v7 == v5)
      return -1;
  }
  return v4[6];
}

uint64_t *std::__tree<std::__value_type<unsigned short,AATFeaturePair>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,AATFeaturePair>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,AATFeaturePair>>>::__equal_range_multi<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t **v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((unsigned __int16 *)v3 + 16);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t **)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((unsigned __int16 *)v7 + 16);
      v9 = v8 >= v4;
      if (v8 >= v4)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        result = (uint64_t *)v7;
      v7 = (uint64_t **)*v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(unsigned __int16 *)(v11 + 32))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

BOOL OTL::GCommon::GetFeatures(OTL::GCommon *this, OTL::FeatureList *a2)
{
  unsigned __int16 *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v3 = (unsigned __int16 *)*((_QWORD *)this + 7);
  if (v3)
  {
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      v6 = *v3;
      v7 = *(unsigned __int16 *)(v5 + 4);
      v8 = __rev16(v7);
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::resize((uint64_t)a2, v8);
      v9 = *(_QWORD *)a2;
      if (v7)
      {
        v10 = 0;
        v11 = bswap32(v6) >> 16;
        if (v8 <= 1)
          v12 = 1;
        else
          v12 = v8;
        v13 = *((_QWORD *)this + 6) + 6;
        while (1)
        {
          v14 = bswap32(*(unsigned __int16 *)(v13 + 2 * v10)) >> 16;
          if (v14 >= v11)
            break;
          *(_DWORD *)(v9 + 4 * v10++) = bswap32(*(_DWORD *)(*((_QWORD *)this + 7) + 6 * v14 + 2));
          if (v12 == v10)
            goto LABEL_12;
        }
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::resize((uint64_t)a2, v10);
      }
LABEL_12:
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    }
  }
  return *(_QWORD *)a2 != *((_QWORD *)a2 + 1);
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  void **v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v7 = (unint64_t)(a1 + 3);
    v6 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      abort();
    v10 = v4 - v6;
    v11 = (v4 - v6) >> 1;
    if (v11 <= v9)
      v11 = a2 + (v8 >> 2);
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = a1[21];
      v14 = (unint64_t)&v13[4 * v12];
      if (v14 <= (unint64_t)(a1 + 21))
      {
        a1[21] = (char *)v14;
      }
      else
      {
        if (v12 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(4 * v12);
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[4 * (v8 >> 2)];
    v16 = &v13[4 * v12];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v5 != v6)
    {
      v18 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      if (v7 > (unint64_t)v6 || (v19 = (void **)(a1 + 21), a1 + 21 <= (char **)v6))
      {
        operator delete(v6);
      }
      else if (&v6[v10] == *v19)
      {
        *v19 = v6;
      }
    }
  }
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__append((char **)a1, a2 - v2);
  }
}

char **OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(char **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _DWORD *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  *a1 = 0;
  a1[1] = 0;
  v4 = (uint64_t)(a1 + 3);
  a1[2] = 0;
  a1[33] = (char *)(a1 + 3);
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      v8 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v8)
      {
        v9 = (v7 - *a1) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          abort();
        v10 = v8 - (_QWORD)*a1;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        v25 = v4;
        v13 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v4, v12);
        v14 = &v13[8 * v9];
        *(_DWORD *)v14 = *v6;
        *((_DWORD *)v14 + 1) = 1;
        v16 = *a1;
        v15 = (unint64_t)a1[1];
        if ((char *)v15 == *a1)
        {
          v19 = vdupq_n_s64(v15);
          v17 = &v13[8 * v9];
        }
        else
        {
          v17 = &v13[8 * v9];
          do
          {
            v18 = *(_QWORD *)(v15 - 8);
            v15 -= 8;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 8;
          }
          while ((char *)v15 != v16);
          v19 = *(int64x2_t *)a1;
        }
        v7 = v14 + 8;
        *a1 = v17;
        a1[1] = v14 + 8;
        v23 = v19;
        v20 = a1[2];
        a1[2] = &v13[8 * v12];
        v24 = v20;
        v22 = v19.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v22);
      }
      else
      {
        *(_DWORD *)v7 = *v6;
        *((_DWORD *)v7 + 1) = 1;
        v7 += 8;
      }
      a1[1] = v7;
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 240);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *UniversalShapingEngine::AddShapingGlyphsForScript(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 != 1145457748)
  {
    v4 = (uint64_t)result;
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v6, a3);
    UniversalClassTable::AddShapingGlyphsForScript(v4, a2, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

uint64_t UniversalClassTable::AddShapingGlyphsForScript(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  char v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  __int16 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 *v26;
  unint64_t v27;
  __int16 *v28;
  __int16 *v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  __int16 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int16 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int16 *v55;
  char *v56;
  __int16 v57;
  char *v58;
  __int16 *v59;
  char *v60;
  __int16 v61;
  char *v62;
  __int16 v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int16 *v72;
  char *v73;
  __int16 v74;
  __int16 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  __int16 *v82;
  unint64_t v83;
  __int16 *v84;
  __int16 v85;
  char *v86;
  __int16 *v87;
  char *v88;
  __int16 v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int16 *v95;
  __int16 v96;
  __int16 *v97;
  __int16 v98;
  char *v99;
  __int16 *v100;
  char *v101;
  __int16 v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  __int16 *v108;
  __int16 v109;
  __int16 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  __int16 *v116;
  __int16 v117;
  char *v118;
  char *v119;
  __int16 *v120;
  char *v121;
  __int16 v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  __int16 *v128;
  __int16 v129;
  char *v130;
  __int128 v131;
  unint64_t v132;
  __int16 *v133;
  __int16 *v134;
  __int16 *v135;
  unsigned __int16 *v140;
  __int16 *v141;
  __int16 *v142;
  char *v143;
  _OWORD v144[6];
  _OWORD *v145;
  __int16 *v146;
  __int16 *v147;
  char *v148;
  _OWORD v149[6];
  _OWORD *v150;
  uint64_t v151;

  v3 = a2;
  v4 = 0;
  v151 = *MEMORY[0x1E0C80C00];
  v5 = "****-";
  do
  {
    if (*(_DWORD *)v5 != v3)
      goto LABEL_229;
    v6 = *((unsigned __int16 *)v5 + 6);
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v149[4] = v7;
    v149[5] = v7;
    v149[2] = v7;
    v149[3] = v7;
    v149[0] = v7;
    v149[1] = v7;
    v146 = 0;
    v147 = 0;
    v148 = 0;
    v150 = v149;
    v8 = *((_DWORD *)v5 + 1);
    v9 = v8 + *((unsigned __int16 *)v5 + 4);
    v10 = v9 + *((unsigned __int16 *)v5 + 5);
    if (v8 > v10)
      goto LABEL_228;
    v140 = &kClassDataTable[v6];
    v11 = v9 - 1;
    v12 = *((_DWORD *)v5 + 1);
    do
    {
      if (v12 <= v11)
        v13 = v140[v12 - v8];
      else
        v13 = UniversalClassTable::determineCharClass(v12);
      if ((v13 & 0x8FE) == 0x812)
      {
        if (!HIWORD(v8))
        {
          v14 = v147;
          if (v147 >= (__int16 *)v148)
          {
            v15 = v146;
            v16 = (char *)v147 - (char *)v146;
            if ((char *)v147 - (char *)v146 <= -3)
              goto LABEL_231;
            v17 = v16 >> 1;
            if (v148 - (char *)v146 <= (unint64_t)((v16 >> 1) + 1))
              v18 = v17 + 1;
            else
              v18 = v148 - (char *)v146;
            if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            *((_QWORD *)&v144[0] + 1) = v149;
            if (v19)
            {
              v20 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v19);
              v15 = v146;
              v14 = v147;
            }
            else
            {
              v20 = 0;
            }
            v54 = &v20[2 * v17];
            *(_WORD *)v54 = v12;
            if (v14 == v15)
              goto LABEL_191;
            v55 = v14;
            v56 = &v20[2 * v17];
            do
            {
              v57 = *--v55;
              *((_WORD *)v56 - 1) = v57;
              v56 -= 2;
            }
            while (v55 != v15);
            goto LABEL_192;
          }
          goto LABEL_41;
        }
        v25 = (v12 >> 10) - 10304;
        v26 = v147;
        v27 = (unint64_t)v148;
        if (v147 >= (__int16 *)v148)
        {
          v30 = v146;
          v31 = (char *)v147 - (char *)v146;
          if ((char *)v147 - (char *)v146 <= -3)
            goto LABEL_231;
          v32 = v31 >> 1;
          if (v148 - (char *)v146 <= (unint64_t)((v31 >> 1) + 1))
            v33 = v32 + 1;
          else
            v33 = v148 - (char *)v146;
          if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
            v34 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v34)
          {
            v35 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v34);
            v30 = v146;
            v26 = v147;
          }
          else
          {
            v35 = 0;
          }
          v58 = &v35[2 * v32];
          *(_WORD *)v58 = v25;
          if (v26 == v30)
          {
            v60 = &v35[2 * v32];
          }
          else
          {
            v59 = v26;
            v60 = &v35[2 * v32];
            do
            {
              v61 = *--v59;
              *((_WORD *)v60 - 1) = v61;
              v60 -= 2;
            }
            while (v59 != v30);
          }
          v28 = (__int16 *)(v58 + 2);
          v146 = (__int16 *)v60;
          v147 = (__int16 *)(v58 + 2);
          v62 = v148;
          v148 = &v35[2 * v34];
          v143 = (char *)v26;
          *(_QWORD *)&v144[0] = v62;
          v141 = v30;
          v142 = v30;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
          v27 = (unint64_t)v148;
        }
        else
        {
          *v147 = v25;
          v28 = v26 + 1;
        }
        v147 = v28;
        v63 = v12 & 0x3FF | 0xDC00;
        if ((unint64_t)v28 >= v27)
        {
          v64 = v146;
          v65 = (char *)v28 - (char *)v146;
          if ((char *)v28 - (char *)v146 <= -3)
            goto LABEL_231;
          v66 = v65 >> 1;
          v67 = v27 - (_QWORD)v146;
          if (v67 <= (v65 >> 1) + 1)
            v68 = v66 + 1;
          else
            v68 = v67;
          if (v67 >= 0x7FFFFFFFFFFFFFFELL)
            v69 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v69 = v68;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v69)
          {
            v70 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v69);
            v64 = v146;
            v28 = v147;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[2 * v66];
          *(_WORD *)v71 = v63;
          if (v28 == v64)
            goto LABEL_216;
          v72 = v28;
          v73 = &v70[2 * v66];
          do
          {
            v74 = *--v72;
            *((_WORD *)v73 - 1) = v74;
            v73 -= 2;
          }
          while (v72 != v64);
          goto LABEL_217;
        }
LABEL_201:
        *v28 = v63;
        v29 = v28 + 1;
        goto LABEL_218;
      }
      if ((v13 & 0x1000) != 0)
      {
        if (!HIWORD(v8))
        {
          v14 = v147;
          if (v147 >= (__int16 *)v148)
          {
            v15 = v146;
            v45 = (char *)v147 - (char *)v146;
            if ((char *)v147 - (char *)v146 <= -3)
              goto LABEL_231;
            v46 = v45 >> 1;
            if (v148 - (char *)v146 <= (unint64_t)((v45 >> 1) + 1))
              v47 = v46 + 1;
            else
              v47 = v148 - (char *)v146;
            if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v47;
            *((_QWORD *)&v144[0] + 1) = v149;
            if (v19)
            {
              v20 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v19);
              v15 = v146;
              v14 = v147;
            }
            else
            {
              v20 = 0;
            }
            v54 = &v20[2 * v46];
            *(_WORD *)v54 = v12;
            if (v14 != v15)
            {
              v84 = v14;
              v56 = &v20[2 * v46];
              do
              {
                v85 = *--v84;
                *((_WORD *)v56 - 1) = v85;
                v56 -= 2;
              }
              while (v84 != v15);
              goto LABEL_192;
            }
            goto LABEL_191;
          }
          goto LABEL_41;
        }
        v36 = (v12 >> 10) - 10304;
        v37 = v147;
        v38 = (unint64_t)v148;
        if (v147 >= (__int16 *)v148)
        {
          v48 = v146;
          v49 = (char *)v147 - (char *)v146;
          if ((char *)v147 - (char *)v146 <= -3)
            goto LABEL_231;
          v50 = v49 >> 1;
          if (v148 - (char *)v146 <= (unint64_t)((v49 >> 1) + 1))
            v51 = v50 + 1;
          else
            v51 = v148 - (char *)v146;
          if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
            v52 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v52)
          {
            v53 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v52);
            v48 = v146;
            v37 = v147;
          }
          else
          {
            v53 = 0;
          }
          v86 = &v53[2 * v50];
          *(_WORD *)v86 = v36;
          if (v37 == v48)
          {
            v88 = &v53[2 * v50];
          }
          else
          {
            v87 = v37;
            v88 = &v53[2 * v50];
            do
            {
              v89 = *--v87;
              *((_WORD *)v88 - 1) = v89;
              v88 -= 2;
            }
            while (v87 != v48);
          }
          v28 = (__int16 *)(v86 + 2);
          v146 = (__int16 *)v88;
          v147 = (__int16 *)(v86 + 2);
          v90 = v148;
          v148 = &v53[2 * v52];
          v143 = (char *)v37;
          *(_QWORD *)&v144[0] = v90;
          v141 = v48;
          v142 = v48;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
          v38 = (unint64_t)v148;
        }
        else
        {
          *v147 = v36;
          v28 = v37 + 1;
        }
        v147 = v28;
        v63 = v12 & 0x3FF | 0xDC00;
        if ((unint64_t)v28 >= v38)
        {
          v64 = v146;
          v91 = (char *)v28 - (char *)v146;
          if ((char *)v28 - (char *)v146 <= -3)
            goto LABEL_231;
          v92 = v91 >> 1;
          v93 = v38 - (_QWORD)v146;
          if (v93 <= (v91 >> 1) + 1)
            v94 = v92 + 1;
          else
            v94 = v93;
          if (v93 >= 0x7FFFFFFFFFFFFFFELL)
            v69 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v69 = v94;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v69)
          {
            v70 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v69);
            v64 = v146;
            v28 = v147;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[2 * v92];
          *(_WORD *)v71 = v63;
          if (v28 != v64)
          {
            v95 = v28;
            v73 = &v70[2 * v92];
            do
            {
              v96 = *--v95;
              *((_WORD *)v73 - 1) = v96;
              v73 -= 2;
            }
            while (v95 != v64);
            goto LABEL_217;
          }
          goto LABEL_216;
        }
        goto LABEL_201;
      }
      if (v13 == 20 || v13 == 15)
      {
        if (!HIWORD(v8))
        {
          v14 = v147;
          if (v147 >= (__int16 *)v148)
          {
            v15 = v146;
            v22 = (char *)v147 - (char *)v146;
            if ((char *)v147 - (char *)v146 <= -3)
              goto LABEL_231;
            v23 = v22 >> 1;
            if (v148 - (char *)v146 <= (unint64_t)((v22 >> 1) + 1))
              v24 = v23 + 1;
            else
              v24 = v148 - (char *)v146;
            if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v19 = v24;
            *((_QWORD *)&v144[0] + 1) = v149;
            if (v19)
            {
              v20 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v19);
              v15 = v146;
              v14 = v147;
            }
            else
            {
              v20 = 0;
            }
            v54 = &v20[2 * v23];
            *(_WORD *)v54 = v12;
            if (v14 != v15)
            {
              v97 = v14;
              v56 = &v20[2 * v23];
              do
              {
                v98 = *--v97;
                *((_WORD *)v56 - 1) = v98;
                v56 -= 2;
              }
              while (v97 != v15);
              goto LABEL_192;
            }
            goto LABEL_191;
          }
          goto LABEL_41;
        }
        v42 = (v12 >> 10) - 10304;
        v43 = v147;
        v44 = (unint64_t)v148;
        if (v147 >= (__int16 *)v148)
        {
          v75 = v146;
          v76 = (char *)v147 - (char *)v146;
          if ((char *)v147 - (char *)v146 <= -3)
            goto LABEL_231;
          v77 = v76 >> 1;
          if (v148 - (char *)v146 <= (unint64_t)((v76 >> 1) + 1))
            v78 = v77 + 1;
          else
            v78 = v148 - (char *)v146;
          if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
            v79 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v79)
          {
            v80 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v79);
            v75 = v146;
            v43 = v147;
          }
          else
          {
            v80 = 0;
          }
          v99 = &v80[2 * v77];
          *(_WORD *)v99 = v42;
          if (v43 == v75)
          {
            v101 = &v80[2 * v77];
          }
          else
          {
            v100 = v43;
            v101 = &v80[2 * v77];
            do
            {
              v102 = *--v100;
              *((_WORD *)v101 - 1) = v102;
              v101 -= 2;
            }
            while (v100 != v75);
          }
          v28 = (__int16 *)(v99 + 2);
          v146 = (__int16 *)v101;
          v147 = (__int16 *)(v99 + 2);
          v103 = v148;
          v148 = &v80[2 * v79];
          v143 = (char *)v43;
          *(_QWORD *)&v144[0] = v103;
          v141 = v75;
          v142 = v75;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
          v44 = (unint64_t)v148;
        }
        else
        {
          *v147 = v42;
          v28 = v43 + 1;
        }
        v147 = v28;
        v63 = v12 & 0x3FF | 0xDC00;
        if ((unint64_t)v28 >= v44)
        {
          v64 = v146;
          v104 = (char *)v28 - (char *)v146;
          if ((char *)v28 - (char *)v146 <= -3)
            goto LABEL_231;
          v105 = v104 >> 1;
          v106 = v44 - (_QWORD)v146;
          if (v106 <= (v104 >> 1) + 1)
            v107 = v105 + 1;
          else
            v107 = v106;
          if (v106 >= 0x7FFFFFFFFFFFFFFELL)
            v69 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v69 = v107;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v69)
          {
            v70 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v69);
            v64 = v146;
            v28 = v147;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[2 * v105];
          *(_WORD *)v71 = v63;
          if (v28 != v64)
          {
            v108 = v28;
            v73 = &v70[2 * v105];
            do
            {
              v109 = *--v108;
              *((_WORD *)v73 - 1) = v109;
              v73 -= 2;
            }
            while (v108 != v64);
            goto LABEL_217;
          }
          goto LABEL_216;
        }
        goto LABEL_201;
      }
      if (((1 << u_charType(v12)) & 0x140) == 0)
        goto LABEL_219;
      if (HIWORD(v8))
      {
        v81 = (v12 >> 10) - 10304;
        v82 = v147;
        v83 = (unint64_t)v148;
        if (v147 >= (__int16 *)v148)
        {
          v110 = v146;
          v111 = (char *)v147 - (char *)v146;
          if ((char *)v147 - (char *)v146 <= -3)
            goto LABEL_231;
          v112 = v111 >> 1;
          if (v148 - (char *)v146 <= (unint64_t)((v111 >> 1) + 1))
            v113 = v112 + 1;
          else
            v113 = v148 - (char *)v146;
          if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
            v114 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v114 = v113;
          *((_QWORD *)&v144[0] + 1) = v149;
          if (v114)
          {
            v115 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v114);
            v110 = v146;
            v82 = v147;
          }
          else
          {
            v115 = 0;
          }
          v119 = &v115[2 * v112];
          *(_WORD *)v119 = v81;
          if (v82 == v110)
          {
            v121 = &v115[2 * v112];
          }
          else
          {
            v120 = v82;
            v121 = &v115[2 * v112];
            do
            {
              v122 = *--v120;
              *((_WORD *)v121 - 1) = v122;
              v121 -= 2;
            }
            while (v120 != v110);
          }
          v28 = (__int16 *)(v119 + 2);
          v146 = (__int16 *)v121;
          v147 = (__int16 *)(v119 + 2);
          v123 = v148;
          v148 = &v115[2 * v114];
          v143 = (char *)v82;
          *(_QWORD *)&v144[0] = v123;
          v141 = v110;
          v142 = v110;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
          v83 = (unint64_t)v148;
        }
        else
        {
          *v147 = v81;
          v28 = v82 + 1;
        }
        v147 = v28;
        v63 = v12 & 0x3FF | 0xDC00;
        if ((unint64_t)v28 < v83)
          goto LABEL_201;
        v64 = v146;
        v124 = (char *)v28 - (char *)v146;
        if ((char *)v28 - (char *)v146 <= -3)
          goto LABEL_231;
        v125 = v124 >> 1;
        v126 = v83 - (_QWORD)v146;
        if (v126 <= (v124 >> 1) + 1)
          v127 = v125 + 1;
        else
          v127 = v126;
        if (v126 >= 0x7FFFFFFFFFFFFFFELL)
          v69 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v69 = v127;
        *((_QWORD *)&v144[0] + 1) = v149;
        if (v69)
        {
          v70 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v69);
          v64 = v146;
          v28 = v147;
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[2 * v125];
        *(_WORD *)v71 = v63;
        if (v28 != v64)
        {
          v128 = v28;
          v73 = &v70[2 * v125];
          do
          {
            v129 = *--v128;
            *((_WORD *)v73 - 1) = v129;
            v73 -= 2;
          }
          while (v128 != v64);
          goto LABEL_217;
        }
LABEL_216:
        v73 = v71;
LABEL_217:
        v29 = (__int16 *)(v71 + 2);
        v146 = (__int16 *)v73;
        v147 = (__int16 *)(v71 + 2);
        v130 = v148;
        v148 = &v70[2 * v69];
        v143 = (char *)v28;
        *(_QWORD *)&v144[0] = v130;
        v141 = v64;
        v142 = v64;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
        goto LABEL_218;
      }
      v14 = v147;
      if (v147 >= (__int16 *)v148)
      {
        v15 = v146;
        v39 = (char *)v147 - (char *)v146;
        if ((char *)v147 - (char *)v146 <= -3)
          goto LABEL_231;
        v40 = v39 >> 1;
        if (v148 - (char *)v146 <= (unint64_t)((v39 >> 1) + 1))
          v41 = v40 + 1;
        else
          v41 = v148 - (char *)v146;
        if ((unint64_t)(v148 - (char *)v146) >= 0x7FFFFFFFFFFFFFFELL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v41;
        *((_QWORD *)&v144[0] + 1) = v149;
        if (v19)
        {
          v20 = (char *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v149, v19);
          v15 = v146;
          v14 = v147;
        }
        else
        {
          v20 = 0;
        }
        v54 = &v20[2 * v40];
        *(_WORD *)v54 = v12;
        if (v14 != v15)
        {
          v116 = v14;
          v56 = &v20[2 * v40];
          do
          {
            v117 = *--v116;
            *((_WORD *)v56 - 1) = v117;
            v56 -= 2;
          }
          while (v116 != v15);
          goto LABEL_192;
        }
LABEL_191:
        v56 = v54;
LABEL_192:
        v29 = (__int16 *)(v54 + 2);
        v146 = (__int16 *)v56;
        v147 = (__int16 *)(v54 + 2);
        v118 = v148;
        v148 = &v20[2 * v19];
        v143 = (char *)v14;
        *(_QWORD *)&v144[0] = v118;
        v141 = v15;
        v142 = v15;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer((uint64_t)&v141);
        goto LABEL_218;
      }
LABEL_41:
      *v14 = v12;
      v29 = v14 + 1;
LABEL_218:
      v147 = v29;
LABEL_219:
      ++v12;
    }
    while (v12 <= v10);
    v3 = a2;
    if (v146 != v147)
    {
      *(_QWORD *)&v131 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v131 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v144[4] = v131;
      v144[5] = v131;
      v144[2] = v131;
      v144[3] = v131;
      v144[0] = v131;
      v144[1] = v131;
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v145 = v144;
      v132 = (char *)v147 - (char *)v146;
      if ((char *)v147 - (char *)v146 < 0)
LABEL_231:
        abort();
      v133 = (__int16 *)TInlineBufferAllocator<unsigned short,48ul>::allocate((uint64_t)v144, v132 >> 1);
      v141 = v133;
      v143 = (char *)v133 + v132;
      bzero(v133, v132 & 0xFFFFFFFFFFFFFFFELL);
      v142 = (__int16 *)((char *)v133 + v132);
      (*(void (**)(_QWORD, __int16 *, __int16 *, unint64_t))(**(_QWORD **)(a1 + 400) + 664))(*(_QWORD *)(a1 + 400), v146, v133, v132 >> 1);
      v134 = v141;
      v135 = v142;
      while (v134 != v135)
      {
        if (*v134)
          std::function<void ()(unsigned short,unsigned short)>::operator()(a3, *v134, *v134);
        ++v134;
      }
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,48ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v141);
    }
LABEL_228:
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,48ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v146);
    v4 = 1;
LABEL_229:
    v5 += 16;
  }
  while (v5 != (const char *)kClassDataTable);
  return v4 & 1;
}

uint64_t std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *OTL::GCommon::FeatureTableSubstitutionsForFont@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, TFont *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t VariationValues;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0xAAAAAAAA3F800000;
  result = (_QWORD *)OTL::GCommon::GetFeatureVariationsTable(a1, a2);
  v13 = result;
  if (result)
  {
    v8 = (uint64_t)result;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    VariationValues = TFont::GetVariationValues(a3, (id *)&v12);
    v9 = operator new(0x30uLL);
    *v9 = &off_1E15E0718;
    v9[1] = &v14;
    v9[2] = &v13;
    v9[3] = &v12;
    v9[4] = &VariationValues;
    v9[5] = a4;
    v16 = v9;
    OTL::GCommon::IterateConditionSetTables((uint64_t)v9, v8, a2, (uint64_t)v15);
    result = v16;
    if (v16 == v15)
    {
      v10 = 4;
      result = v15;
    }
    else
    {
      if (!v16)
        return result;
      v10 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

uint64_t OTL::GCommon::GetFeatureVariationsTable(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  if (*(_WORD *)a1 != 256)
    return 0;
  if (!*(_WORD *)(a1 + 2))
    return 0;
  v2 = *(_DWORD *)(a1 + 10);
  if (!v2)
    return 0;
  v3 = a1 + bswap32(v2);
  v4 = v3 + 8;
  if (v3 + 8 > a2)
    return 0;
  v5 = bswap32(*(_DWORD *)(v3 + 4));
  v6 = v4 + 8 * v5;
  v7 = v3 + 16 <= a2 ? (a2 - v4) >> 3 : 0;
  v8 = v6 <= a2 && v6 >= v4;
  if (!v8 && v7 != v5)
    return 0;
  if (*(_WORD *)v3 == 256)
    return v3;
  return 0;
}

uint64_t TAttributes::HandleParagraphStyleAttribute(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(a2 + 40) = result;
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  double *v4;
  double v5;

  if (!line)
    return 0.0;
  v4 = (double *)*((_QWORD *)line + 5);
  if (ascent)
    *ascent = v4[14];
  if (descent)
    *descent = v4[15];
  if (leading)
  {
    v5 = v4[16];
    if (v5 == -1.79769313e308)
      v5 = 0.0;
    *leading = v5;
  }
  return v4[13];
}

CFArrayRef CTLineGetGlyphRuns(CFArrayRef line)
{
  if (line)
    return (CFArrayRef)TLine::GetRunCFArray(*((const void ****)line + 5));
  return line;
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  int *v1;
  int *inited;

  if (!font)
    return 0.0;
  v1 = (int *)*((_QWORD *)font + 5);
  if (v1[12])
    inited = v1 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v1);
  return *((double *)inited + 3);
}

uint64_t CTFontIsTextStyleFont(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 856))(v1);
  else
    return 0;
}

uint64_t CTLineGetStringIndexOfTabOverflow(uint64_t result, const TLine *a2, double a3)
{
  if (result)
    return TTypesetter::GetTabOverflowIndex(*(TTypesetter **)(result + 40), a2, a3);
  return result;
}

uint64_t TCFBase<TDescriptor>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  return (***(uint64_t (****)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40));
}

uint64_t TCFBase<TRun>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  return (***(uint64_t (****)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40));
}

void TCFBase<TLine>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  TLine::~TLine(*(TLine **)(a1 + 40));
}

uint64_t CTFontIsVertical(uint64_t result)
{
  if (result)
    return **(_BYTE **)(result + 40) & 1;
  return result;
}

_QWORD *TCFBase<TDescriptor>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t *TOpenTypeMorph::TOpenTypeMorph(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFRange *a5)
{
  uint64_t v8;
  uint64_t CommonTable;
  const __CFData *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t length;
  uint64_t location;
  uint64_t v17;
  int v18;
  uint64_t FullChar;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  int v44;
  __int128 v45;
  __int128 v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[168];
  __int128 v53;
  uint64_t v54;

  *a1 = a2;
  v8 = *(_QWORD *)(a2 + 616);
  a1[1] = v8;
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a1 + 20) = *(_BYTE *)(a2 + 634);
  *((_BYTE *)a1 + 21) = 1;
  a1[3] = a4;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[67] = (uint64_t)(a1 + 7);
  CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(v8 + 400), 1196643650, 0);
  a1[68] = CommonTable;
  a1[69] = a3;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  a1[70] = 0;
  a1[72] = 0;
  a1[71] = 0;
  *((_BYTE *)a1 + 584) = 0;
  *((_DWORD *)a1 + 162) = 2;
  *((_OWORD *)a1 + 41) = 0u;
  *((_OWORD *)a1 + 42) = 0u;
  a1[86] = 0;
  a1[89] = 0;
  a1[88] = 0;
  *((_BYTE *)a1 + 720) = 0;
  a1[80] = (uint64_t)&unk_1E15DEE98;
  if (!CommonTable)
    return a1;
  v10 = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(a1[1] + 400), 1195656518, 0);
  OTL::GDEF::GDEF((OTL::GDEF *)v52, v10);
  v11 = *(_OWORD *)&v52[48];
  *((_OWORD *)a1 + 37) = *(_OWORD *)&v52[32];
  *((_OWORD *)a1 + 38) = v11;
  *((_OWORD *)a1 + 39) = *(_OWORD *)&v52[64];
  v12 = *(_OWORD *)&v52[16];
  *((_OWORD *)a1 + 35) = *(_OWORD *)v52;
  *((_OWORD *)a1 + 36) = v12;
  if (!a3)
    goto LABEL_44;
  v13 = *(_QWORD *)(a1[1] + 400);
  if ((*(_DWORD *)(v13 + 184) & 0x400) == 0)
    TBaseFont::DetermineFontFlags(*(TBaseFont **)(a1[1] + 400), 1024);
  if ((*(_DWORD *)(v13 + 180) & 0x400) != 0 || *((_DWORD *)a1 + 6) == 128)
    goto LABEL_44;
  v53 = 0u;
  memset(&v52[8], 0, 160);
  v14 = *(_QWORD *)(a3 + 16);
  v54 = 0;
  *(_QWORD *)&v53 = v14;
  location = a5->location;
  length = a5->length;
  v51 = a5->location;
  *(_QWORD *)v52 = a3;
  if (length < 1)
  {
    v18 = -1;
    goto LABEL_24;
  }
  v49 = 0;
  v17 = length + location;
  v18 = -1;
  while (1)
  {
    FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v52, &v51, 0);
    v20 = ScriptCodeForLongCharacter(FullChar);
    if (!v20)
    {
      if (!IsRightAssociative(FullChar))
        goto LABEL_20;
      v21 = v51 + 1;
      v50 = v51 + 1;
      v22 = *a1;
      v23 = *(_QWORD *)(*a1 + 40);
      if (v23 == -1)
      {
        TRunGlue::ComputeEndIndex((_QWORD *)*a1);
        v23 = *(_QWORD *)(v22 + 40);
      }
      v24 = *(_QWORD *)(v22 + 48) + v23;
      if (v21 >= v24)
        goto LABEL_20;
      while (1)
      {
        v25 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v52, &v50, 0);
        v26 = ScriptCodeForLongCharacter(v25);
        if (v26)
          break;
        if (++v50 >= v24)
          goto LABEL_20;
      }
      v20 = v26;
    }
    if (v20 != v18 && !uscript_hasScript())
      break;
LABEL_20:
    location = v51 + 1;
    v51 = location;
    if (location >= v17)
    {
      location = a5->location;
      goto LABEL_24;
    }
  }
  if ((v49 & 1) == 0)
  {
    *((_DWORD *)a1 + 6) = v20;
    v49 = 1;
    v18 = v20;
    goto LABEL_20;
  }
  v48 = a5->location;
  a5->length = location - a5->location;
  location = v48;
LABEL_24:
  v27 = (_QWORD *)*a1;
  v29 = *(_QWORD *)(*a1 + 64);
  v28 = *(_QWORD *)(*a1 + 72);
  if (v29 >= v28)
  {
    v31 = v27[7];
    v32 = (uint64_t)(v29 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      abort();
    v34 = v28 - v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v36 = (char *)TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>::allocate((uint64_t)(v27 + 10), v35);
    v37 = &v36[16 * v32];
    *(_DWORD *)v37 = v18;
    *((_QWORD *)v37 + 1) = location;
    v39 = (char *)v27[7];
    v38 = (char *)v27[8];
    v40 = v37;
    if (v38 != v39)
    {
      do
      {
        *((_OWORD *)v40 - 1) = *((_OWORD *)v38 - 1);
        v40 -= 16;
        v38 -= 16;
      }
      while (v38 != v39);
      v38 = (char *)v27[7];
    }
    v30 = v37 + 16;
    v27[7] = v40;
    v27[8] = v37 + 16;
    v41 = v27[9];
    v27[9] = &v36[16 * v35];
    if (v38)
    {
      v42 = (char *)(v27 + 12);
      if (v27 + 10 <= (_QWORD *)v38 && v42 > v38)
      {
        if (v41 == *(_QWORD *)v42)
          *(_QWORD *)v42 = v38;
      }
      else
      {
        operator delete(v38);
      }
    }
  }
  else
  {
    *(_DWORD *)v29 = v18;
    *(_QWORD *)(v29 + 8) = location;
    v30 = (char *)(v29 + 16);
  }
  v27[8] = v30;
LABEL_44:
  v44 = ScriptTagForScriptCode(*((_DWORD *)a1 + 6));
  OTL::GCommon::GCommon((uint64_t)v52, 0, (_BYTE *)a1[1], (CFDataRef)a1[68], (uint64_t)(a1 + 70), v44, *((_DWORD *)a1 + 7));
  v45 = *(_OWORD *)&v52[24];
  v46 = *(_OWORD *)&v52[56];
  *(_OWORD *)(a1 + 85) = *(_OWORD *)&v52[40];
  *(_OWORD *)(a1 + 87) = v46;
  *(_OWORD *)((char *)a1 + 705) = *(_OWORD *)&v52[65];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v52[8];
  *(_OWORD *)(a1 + 83) = v45;
  if (!*((_BYTE *)a1 + 720) && v44 != *((_DWORD *)a1 + 178))
    *((_DWORD *)a1 + 6) = -1;
  TRunGlue::SetCharRange(*a1, *a5);
  return a1;
}

uint64_t TOpenTypePositioningEngine::PositionRuns(uint64_t a1, _BYTE *a2, int *a3)
{
  _QWORD **v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  OTL::GPOS *v15;
  __int128 v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  int v24;
  char v25;
  uint64_t **v26;
  uint64_t *i;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t j;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *k;
  unint64_t v52;
  char *v53;
  int *v54;
  int *v55;
  float v56;
  float v57;
  _BOOL8 v58;
  unint64_t v59;
  unint64_t v60;
  int8x8_t prime;
  void *v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint8x8_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  int *v77;
  int *v78;
  _WORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  int *v86;
  int *v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t *v98;
  uint64_t *v99;
  unsigned int v100;
  BOOL v101;
  int v102;
  unsigned __int16 *v103;
  _QWORD *v105;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t GlyphID;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(_QWORD *, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  char v132;
  double v133;
  double v134;
  double *v135;
  double *v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v143;
  TRun *v144;
  double *v145;
  double *v146;
  void *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _QWORD **v152;
  int v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  os_unfair_lock_s *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  TRunGlue *v161;
  BOOL v162;
  unsigned int v163;
  os_unfair_lock_t lock;
  int *v165;
  _QWORD *v166;
  unsigned int __dst[4];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int64x2_t **v172;
  int64x2_t v173;
  unint64_t v174;
  _OWORD v175[195];
  _OWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  int *v179;
  int *v180;
  uint64_t v181;
  _OWORD v182[7];
  unint64_t v183;
  _OWORD *v184;
  int64x2_t *v185;
  int64x2_t v186;
  _QWORD v187[16];
  int v188;
  TRunGlue *v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 *v201;
  uint64_t v202;

  v3 = (_QWORD **)a1;
  v202 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  *(_QWORD *)(*(_QWORD *)a1 + 112) = a1 + 224;
  v170 = 0u;
  v171 = 0u;
  *(_OWORD *)__dst = 0u;
  v169 = 0u;
  if (*(_BYTE *)(a1 + 208))
  {
    v6 = *(_DWORD *)(a1 + 192);
    v8 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    if (v6 == v7)
    {
      v9 = 0;
      switch(v8)
      {
        case 2:
        case 34:
        case 38:
          v9 = 2;
          goto LABEL_15;
        case 4:
        case 10:
        case 15:
        case 16:
        case 21:
        case 23:
        case 26:
        case 31:
        case 35:
        case 36:
          v9 = 0;
          *(_QWORD *)__dst = 0x626C776D6162766DLL;
          goto LABEL_15;
        case 18:
          goto LABEL_15;
        case 28:
          *(_QWORD *)__dst = 0x626C776D6162766DLL;
          goto LABEL_107;
        default:
          break;
      }
    }
    *(_QWORD *)__dst = 0x626C776D6162766DLL;
    v9 = 2;
    if (v8 == -1 || v8 == 25)
    {
LABEL_15:
      v13 = (uint64_t)(v3 + 5);
    }
    else
    {
      FirstBlockForScript(0, v7, (uint64_t)&v173);
      if (v173.i64[0])
      {
        if (!*((_BYTE *)v3 + 208))
          goto LABEL_250;
LABEL_107:
        v13 = (uint64_t)(v3 + 5);
        if (v3[5])
          *a2 |= ZeroMarkWidths((TRunGlue *)*v3, (uint64_t)(v3 + 5));
        v9 = 1;
      }
      else
      {
        if (!*((_BYTE *)v3 + 208))
        {
LABEL_250:
          std::__throw_bad_optional_access[abi:nn180100]();
LABEL_251:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v13 = (uint64_t)(v3 + 5);
        v9 = 2;
      }
    }
    if (v3[21])
    {
      v14 = v3[22];
      if (v14)
      {
        if (*v14)
        {
          v150 = v9;
          v149 = v13;
          v151 = v4;
          v15 = (OTL::GPOS *)(v3 + 15);
          *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v182[6] = v16;
          v182[5] = v16;
          v182[4] = v16;
          v182[3] = v16;
          v182[2] = v16;
          v182[1] = v16;
          v182[0] = v16;
          v183 = 0xAAAAAAAAAAAAAAAALL;
          v181 = 0;
          v179 = 0;
          v180 = 0;
          v184 = v182;
          v17 = v3[1];
          v18 = (*((unsigned int *)v3 + 8)
               + ((*((int *)v3 + 6) + 2654435769) << 6)
               + ((unint64_t)(*((int *)v3 + 6) + 2654435769) >> 2)
               + 2654435769u) ^ (*((int *)v3 + 6) + 2654435769);
          v19 = (*a3 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18;
          v20 = (unint64_t)(v17 + 25);
          os_unfair_lock_lock_with_options();
          v21 = (int8x8_t)v17[32];
          v152 = v3;
          if (v21)
          {
            v22 = (uint8x8_t)vcnt_s8(v21);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              v23 = v19;
              if (*(_QWORD *)&v21 <= v19)
                v23 = v19 % *(_QWORD *)&v21;
            }
            else
            {
              v23 = v19 & (*(_QWORD *)&v21 - 1);
            }
            v26 = *(uint64_t ***)(v17[31] + 8 * v23);
            if (v26)
            {
              for (i = *v26; i; i = (uint64_t *)*i)
              {
                v28 = i[1];
                if (v28 == v19)
                {
                  if (i[2] == v19)
                  {
                    std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short>*>,std::__wrap_iter<std::pair<unsigned short,unsigned short>*>>((char *)&v179, (int *)i[3], (int *)i[4], (i[4] - i[3]) >> 2);
                    *a3 = *((_DWORD *)i + 44);
                    goto LABEL_141;
                  }
                }
                else
                {
                  if (v22.u32[0] > 1uLL)
                  {
                    if (v28 >= *(_QWORD *)&v21)
                      v28 %= *(_QWORD *)&v21;
                  }
                  else
                  {
                    v28 &= *(_QWORD *)&v21 - 1;
                  }
                  if (v28 != v23)
                    break;
                }
              }
            }
          }
          v165 = a3;
          *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v200 = v29;
          v199 = v29;
          v198 = v29;
          v197 = v29;
          v196 = v29;
          v195 = v29;
          v194 = v29;
          v193 = v29;
          v192 = v29;
          v189 = 0;
          v190 = 0;
          v191 = 0;
          v201 = &v192;
          OTL::GCommon::GetFeatures((OTL::GCommon *)(v3 + 15), (OTL::FeatureList *)&v189);
          *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v175[14] = v30;
          v175[13] = v30;
          v175[12] = v30;
          v175[11] = v30;
          v175[10] = v30;
          v175[9] = v30;
          v175[8] = v30;
          v175[7] = v30;
          v175[6] = v30;
          v175[5] = v30;
          v175[4] = v30;
          v175[3] = v30;
          v175[2] = v30;
          v175[1] = v30;
          v175[0] = v30;
          v174 = 0;
          v173 = 0uLL;
          *(_QWORD *)&v175[15] = v175;
          if (OTL::FeatureList::StripMissingFeaturesFrom((unsigned int **)&v189, __dst))
          {
            for (j = 0; j != 16; ++j)
            {
              v32 = __dst[j];
              if (!v32)
                break;
              v33 = v173.i64[1];
              if (v173.i64[1] >= v174)
              {
                v35 = (v173.i64[1] - v173.i64[0]) >> 3;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61)
                  abort();
                v37 = v174 - v173.i64[0];
                if ((uint64_t)(v174 - v173.i64[0]) >> 2 > v36)
                  v36 = v37 >> 2;
                v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v36;
                v187[1] = v175;
                v39 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v175, v38);
                v40 = (unsigned int *)&v39[8 * v35];
                *v40 = v32;
                v40[1] = 1;
                v41 = v173.i64[1];
                v42 = v173.i64[0];
                if (v173.i64[1] == v173.i64[0])
                {
                  v45 = vdupq_n_s64(v173.u64[1]);
                  v43 = (uint64_t)&v39[8 * v35];
                }
                else
                {
                  v43 = (uint64_t)&v39[8 * v35];
                  do
                  {
                    v44 = *(_QWORD *)(v41 - 8);
                    v41 -= 8;
                    *(_QWORD *)(v43 - 8) = v44;
                    v43 -= 8;
                  }
                  while (v41 != v42);
                  v45 = v173;
                }
                v34 = (uint64_t)(v40 + 2);
                v173.i64[0] = v43;
                v173.i64[1] = (uint64_t)(v40 + 2);
                v186 = v45;
                v46 = v174;
                v174 = (unint64_t)&v39[8 * v38];
                v187[0] = v46;
                v185 = (int64x2_t *)v45.i64[0];
                std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v185);
              }
              else
              {
                *(_DWORD *)v173.i64[1] = v32;
                *(_DWORD *)(v33 + 4) = 1;
                v34 = v33 + 8;
              }
              v173.i64[1] = v34;
            }
          }
          ConvertSettingsToOTFeatures((unsigned int **)&v189, v17 + 21, *((unsigned __int8 *)v3 + 20), &v173, 0, v165, 1);
          OTL::GCommon::GetLookups((uint64_t)v15, (uint64_t)&v173, (uint64_t)&v179, 1);
          v185 = 0;
          v186 = 0uLL;
          v187[15] = v187;
          std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>,std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>>((char *)&v185, v179, v180, v180 - v179);
          v188 = *v165;
          v47 = v17[32];
          if (v47)
          {
            v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              v49 = v19;
              if (v47 <= v19)
                v49 = v19 % v47;
            }
            else
            {
              v49 = (v47 - 1) & v19;
            }
            v50 = *(_QWORD **)(v17[31] + 8 * v49);
            if (v50)
            {
              for (k = (_QWORD *)*v50; k; k = (_QWORD *)*k)
              {
                v52 = k[1];
                if (v52 == v19)
                {
                  if (k[2] == v19)
                    goto LABEL_140;
                }
                else
                {
                  if (v48.u32[0] > 1uLL)
                  {
                    if (v52 >= v47)
                      v52 %= v47;
                  }
                  else
                  {
                    v52 &= v47 - 1;
                  }
                  if (v52 != v49)
                    break;
                }
              }
            }
          }
          else
          {
            v49 = 0xAAAAAAAAAAAAAAAALL;
          }
          v53 = (char *)operator new(0xB8uLL);
          *(_QWORD *)v53 = 0;
          *((_QWORD *)v53 + 1) = v19;
          *((_QWORD *)v53 + 2) = v19;
          v54 = (int *)v185;
          v55 = (int *)v186.i64[0];
          *((_QWORD *)v53 + 4) = 0;
          *((_QWORD *)v53 + 5) = 0;
          *((_QWORD *)v53 + 3) = 0;
          *((_QWORD *)v53 + 21) = v53 + 48;
          std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>,std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>>(v53 + 24, v54, v55, v55 - v54);
          *((_DWORD *)v53 + 44) = v188;
          v56 = (float)(unint64_t)(v17[34] + 1);
          v57 = *((float *)v17 + 70);
          if (v47 && (float)(v57 * (float)v47) >= v56)
          {
LABEL_130:
            v74 = v17[31];
            v75 = *(_QWORD **)(v74 + 8 * v49);
            if (v75)
            {
              *(_QWORD *)v53 = *v75;
            }
            else
            {
              *(_QWORD *)v53 = v17[33];
              v17[33] = v53;
              *(_QWORD *)(v74 + 8 * v49) = v17 + 33;
              if (!*(_QWORD *)v53)
                goto LABEL_139;
              v76 = *(_QWORD *)(*(_QWORD *)v53 + 8);
              if ((v47 & (v47 - 1)) != 0)
              {
                if (v76 >= v47)
                  v76 %= v47;
              }
              else
              {
                v76 &= v47 - 1;
              }
              v75 = (_QWORD *)(v17[31] + 8 * v76);
            }
            *v75 = v53;
LABEL_139:
            ++v17[34];
LABEL_140:
            v172 = &v185;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v172);
            v185 = &v173;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v185);
            v173.i64[0] = (uint64_t)&v189;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v173);
            v20 = (unint64_t)(v17 + 25);
LABEL_141:
            v77 = v179;
            v78 = v180;
            os_unfair_lock_unlock((os_unfair_lock_t)v20);
            if (v77 == v78)
            {
              v12 = 1;
              v4 = v151;
LABEL_235:
              if (v150 == 2)
                *a2 |= ZeroMarkWidths((TRunGlue *)*v3, v149);
              v173.i64[0] = (uint64_t)&v179;
              std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v173);
              goto LABEL_238;
            }
            LOWORD(v185) = -21846;
            LOWORD(v185) = *(_WORD *)(v3[1][50] + 440);
            if ((unsigned __int16)v185 != 0xFFFF)
            {
LABEL_152:
              memset(v175, 170, sizeof(v175));
              v173 = 0uLL;
              v174 = 0;
              v176 = v175;
              v85 = TRunGlue::length((TRunGlue *)*v3);
              v86 = v179;
              v87 = v180;
              if (v179 != v180)
              {
                v88 = v85;
                do
                {
                  v89 = *v86++;
                  v20 = v20 & 0xFFFFFFFF00000000 | v89;
                  OTL::GlyphLookups::SetLookupInRange<false>(v173.i64, v20, 0, v88);
                }
                while (v86 != v87);
              }
              if (v173.i64[1] != v173.i64[0])
              {
                v153 = (unsigned __int16)v185;
                v154 = *((_DWORD *)v3 + 4);
                v90 = (v173.i64[1] - v173.i64[0]) / 104;
                v159 = (unsigned __int8 *)(*v3)[25];
                v91 = (*v3)[78];
                v92 = (v91 + 7) >> 3;
                v93 = v91 > 0x10000;
                v94 = 0x2000;
                if (!v93)
                  v94 = v92;
                v155 = v94;
                v161 = (TRunGlue *)*v3;
                v156 = TRunGlue::length((TRunGlue *)*v3);
                v158 = (os_unfair_lock_s *)v3[17][50];
                os_unfair_lock_lock_with_options();
                v95 = 0;
                if (v90 <= 1)
                  v96 = 1;
                else
                  v96 = v90;
                v157 = v96;
                do
                {
                  v160 = v95;
                  v97 = *(_DWORD *)(v173.i64[0] + 104 * v95);
                  v98 = TBaseFont::NthLookup<OTL::GPOS>((uint64_t)v158, v15, (unsigned __int16)v97);
                  if (v98)
                  {
                    v99 = v98;
                    v100 = *((unsigned __int16 *)v98 + 8);
                    if (v156 != 1 || (v100 <= 8 ? (v101 = ((1 << v100) & 0x182) == 0) : (v101 = 1), !v101))
                    {
                      if (!v159 || OTL::CoverageBitmap::CoversBitmap((OTL::CoverageBitmap *)(v98 + 5), v159, v155))
                      {
                        if (v100 == 3)
                        {
                          if ((*(_WORD *)(*v99 + 2) & 0x100) != 0)
                            v102 = -1;
                          else
                            v102 = 1;
                        }
                        else
                        {
                          v102 = 1;
                        }
                        v103 = (unsigned __int16 *)v173.i64[0];
                        if (v173.i64[0] != v173.i64[1])
                        {
                          while (*v103 != (unsigned __int16)v97 || v103[1] != HIWORD(v97))
                          {
                            v103 += 52;
                            if (v103 == (unsigned __int16 *)v173.i64[1])
                            {
                              v103 = (unsigned __int16 *)v173.i64[1];
                              break;
                            }
                          }
                        }
                        v105 = (_QWORD *)*((_QWORD *)v103 + 1);
                        lock = (os_unfair_lock_t)*((_QWORD *)v103 + 2);
                        if (v105 != (_QWORD *)lock)
                        {
                          v163 = v102 * v154;
                          v107 = v153 == (unsigned __int16)v97 && v100 == 2;
                          v162 = v107;
                          do
                          {
                            v108 = *v105;
                            v109 = v105[1];
                            v166 = v105;
                            *(_QWORD *)&v195 = 0xAAAAAAAAAAAAAAAALL;
                            *(_QWORD *)&v110 = 0xAAAAAAAAAAAAAAAALL;
                            *((_QWORD *)&v110 + 1) = 0xAAAAAAAAAAAAAAAALL;
                            v193 = v110;
                            v194 = v110;
                            v189 = v161;
                            v190 = v163 | 0xAAAAAAAA00000000;
                            v191 = v108 - 1;
                            *(_QWORD *)&v192 = v109 + v108;
                            *((_QWORD *)&v192 + 1) = -1;
                            v111 = TRunGlue::length(v161);
                            *(_QWORD *)&v194 = -1;
                            *((_QWORD *)&v194 + 1) = -1;
                            *(_QWORD *)&v193 = v111;
                            *(_QWORD *)&v195 = 0;
                            v112 = v191;
                            if ((v163 & 0x80000000) != 0)
                            {
                              v113 = *((_QWORD *)&v192 + 1);
                              v191 = v192;
                              *(_QWORD *)&v192 = v112;
                              *((_QWORD *)&v192 + 1) = v111;
                              *(_QWORD *)&v193 = v113;
                              v112 = v191;
                            }
                            v114 = v99[3];
                            *((_QWORD *)&v193 + 1) = v112;
                            *(_QWORD *)&v195 = v114;
                            if (v162)
                            {
                              *a2 |= OTL::GPOS::ApplyPairPosAccelerated(v15, (const OTL::Lookup *)v99, (TGlyphIterator *)&v189);
                            }
                            else if (TGlyphIterator::NextCoveredBy((TGlyphIterator *)&v189, (const OTL::Lookup *)v99))
                            {
                              do
                              {
                                v115 = -1431655765
                                     * ((*((_DWORD *)v99 + 24) - *((_DWORD *)v99 + 22)) >> 4);
                                v116 = *((_QWORD *)&v193 + 1);
                                GlyphID = TRunGlue::GetGlyphID(v189, *((uint64_t *)&v193 + 1));
                                v118 = (unsigned __int16)v115;
                                if ((_WORD)v115)
                                {
                                  v119 = GlyphID;
                                  v120 = 0;
                                  v121 = 0;
                                  v122 = 48 * v118;
                                  do
                                  {
                                    *((_QWORD *)&v193 + 1) = v116;
                                    v123 = v99[11];
                                    if (0xAAAAAAAAAAAAAAABLL * ((v99[12] - v123) >> 4) <= v121)
                                      break;
                                    v124 = v123 + v120;
                                    v125 = *(uint64_t (**)(_QWORD *, uint64_t))(v123 + v120 + 24);
                                    v126 = *(_QWORD *)(v124 + 32);
                                    v127 = (_QWORD *)(v124 + (v126 >> 1) + 8);
                                    if ((v126 & 1) != 0)
                                      v125 = *(uint64_t (**)(_QWORD *, uint64_t))(*v127 + v125);
                                    v128 = v125(v127, v119);
                                    if (v128)
                                    {
                                      v129 = v99[11];
                                      v130 = 0xAAAAAAAAAAAAAAABLL * ((v99[12] - v129) >> 4) <= v121
                                           ? 0
                                           : *(unsigned __int16 **)(v129 + v120);
                                      v131 = v124 + 8;
                                      v132 = 1;
                                      if ((OTL::GPOS::ApplyLookupSubtable(v15, (uint64_t)v99, v100, v130, (TGlyphIterator *)&v189, v131, v128, 1uLL) & 1) != 0)goto LABEL_207;
                                    }
                                    ++v121;
                                    v120 += 48;
                                  }
                                  while (v122 != v120);
                                }
                                v132 = 0;
LABEL_207:
                                *a2 |= v132;
                              }
                              while ((TGlyphIterator::NextCoveredBy((TGlyphIterator *)&v189, (const OTL::Lookup *)v99) & 1) != 0);
                            }
                            v105 = v166 + 2;
                          }
                          while (v166 + 2 != (_QWORD *)lock);
                        }
                      }
                    }
                  }
                  v95 = v160 + 1;
                }
                while (v160 + 1 != v157);
                os_unfair_lock_unlock(v158 + 89);
                v3 = v152;
              }
              if (v3[30])
              {
                v133 = *((double *)*v3 + 80);
                v134 = *((double *)*v3 + 81);
                v4 = v151;
                if ((*v3)[19] || (*v3)[24])
                {
                  v135 = (double *)v3[28];
                  if (v135 != (double *)(v3 + 29))
                  {
                    v136 = (double *)MEMORY[0x1E0C9D538];
                    do
                    {
                      v137 = v135[5];
                      v138 = v135[6];
                      if (v137 != 0.0 || v138 != 0.0)
                      {
                        v139 = v133 * v137;
                        v140 = v134 * v138;
                        v141 = -(v133 * v137);
                        if (!*((_BYTE *)v3 + 20))
                          v141 = v139;
                        if (v141 != *v136 || v140 != v136[1])
                        {
                          v143 = v134 * v138;
                          TRunGlue::SetOrigin(*v3, *((_QWORD *)v135 + 4), *(CGPoint *)&v141);
                          v144 = (TRun *)(*v3)[19];
                          if (v144)
                            TRun::NoteCrossStreamPosition(v144, v134 * v140);
                        }
                      }
                      v145 = (double *)*((_QWORD *)v135 + 1);
                      if (v145)
                      {
                        do
                        {
                          v146 = v145;
                          v145 = *(double **)v145;
                        }
                        while (v145);
                      }
                      else
                      {
                        do
                        {
                          v146 = (double *)*((_QWORD *)v135 + 2);
                          v101 = *(_QWORD *)v146 == (_QWORD)v135;
                          v135 = v146;
                        }
                        while (!v101);
                      }
                      v135 = v146;
                    }
                    while (v146 != (double *)(v3 + 29));
                  }
                  v12 = 1;
                  *a2 = 1;
                }
                else
                {
                  v12 = 0;
                }
              }
              else
              {
                v12 = 1;
                v4 = v151;
              }
              v189 = (TRunGlue *)&v173;
              std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v189);
              goto LABEL_235;
            }
            v79 = v3[22];
            v80 = (unint64_t)v3[19];
            v81 = (unint64_t)v3[20];
            v177[0] = &off_1E15E0640;
            v177[1] = &v185;
            v178 = v177;
            OTL::GCommon::IterateFeatureTables(v80, v79, v81, (uint64_t)v177);
            v82 = v178;
            if (v178 == v177)
            {
              v83 = 4;
              v82 = v177;
            }
            else
            {
              if (!v178)
              {
LABEL_149:
                v84 = (__int16)v185;
                if ((unsigned __int16)v185 == 0xFFFF)
                {
                  v84 = 0;
                  LOWORD(v185) = 0;
                }
                *(_WORD *)(v3[1][50] + 440) = v84;
                goto LABEL_152;
              }
              v83 = 5;
            }
            (*(void (**)(void))(*v82 + 8 * v83))();
            goto LABEL_149;
          }
          v58 = 1;
          if (v47 >= 3)
            v58 = (v47 & (v47 - 1)) != 0;
          v59 = v58 | (2 * v47);
          v60 = vcvtps_u32_f32(v56 / v57);
          if (v59 <= v60)
            prime = (int8x8_t)v60;
          else
            prime = (int8x8_t)v59;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v47 = v17[32];
          if (*(_QWORD *)&prime > v47)
            goto LABEL_91;
          if (*(_QWORD *)&prime < v47)
          {
            v68 = vcvtps_u32_f32((float)(unint64_t)v17[34] / *((float *)v17 + 70));
            if (v47 < 3 || (v69 = (uint8x8_t)vcnt_s8((int8x8_t)v47), v69.i16[0] = vaddlv_u8(v69), v69.u32[0] > 1uLL))
            {
              v68 = std::__next_prime(v68);
            }
            else
            {
              v70 = 1 << -(char)__clz(v68 - 1);
              if (v68 >= 2)
                v68 = v70;
            }
            if (*(_QWORD *)&prime <= v68)
              prime = (int8x8_t)v68;
            if (*(_QWORD *)&prime >= v47)
            {
              v47 = v17[32];
            }
            else
            {
              if (prime)
              {
LABEL_91:
                if (*(_QWORD *)&prime >> 61)
                  goto LABEL_251;
                v62 = operator new(8 * *(_QWORD *)&prime);
                v63 = (void *)v17[31];
                v17[31] = v62;
                if (v63)
                  operator delete(v63);
                v64 = 0;
                v17[32] = prime;
                do
                  *(_QWORD *)(v17[31] + 8 * v64++) = 0;
                while (*(_QWORD *)&prime != v64);
                v65 = (_QWORD *)v17[33];
                if (v65)
                {
                  v66 = v65[1];
                  v67 = (uint8x8_t)vcnt_s8(prime);
                  v67.i16[0] = vaddlv_u8(v67);
                  if (v67.u32[0] > 1uLL)
                  {
                    if (v66 >= *(_QWORD *)&prime)
                      v66 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v66 &= *(_QWORD *)&prime - 1;
                  }
                  *(_QWORD *)(v17[31] + 8 * v66) = v17 + 33;
                  v71 = (_QWORD *)*v65;
                  if (*v65)
                  {
                    do
                    {
                      v72 = v71[1];
                      if (v67.u32[0] > 1uLL)
                      {
                        if (v72 >= *(_QWORD *)&prime)
                          v72 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v72 &= *(_QWORD *)&prime - 1;
                      }
                      if (v72 != v66)
                      {
                        v73 = v17[31];
                        if (!*(_QWORD *)(v73 + 8 * v72))
                        {
                          *(_QWORD *)(v73 + 8 * v72) = v65;
                          goto LABEL_121;
                        }
                        *v65 = *v71;
                        *v71 = **(_QWORD **)(v17[31] + 8 * v72);
                        **(_QWORD **)(v17[31] + 8 * v72) = v71;
                        v71 = v65;
                      }
                      v72 = v66;
LABEL_121:
                      v65 = v71;
                      v71 = (_QWORD *)*v71;
                      v66 = v72;
                    }
                    while (v71);
                  }
                }
                v47 = (unint64_t)prime;
                goto LABEL_125;
              }
              v148 = (void *)v17[31];
              v17[31] = 0;
              if (v148)
                operator delete(v148);
              v47 = 0;
              v17[32] = 0;
            }
          }
LABEL_125:
          if ((v47 & (v47 - 1)) != 0)
          {
            if (v47 <= v19)
              v49 = v19 % v47;
            else
              v49 = v19;
          }
          else
          {
            v49 = (v47 - 1) & v19;
          }
          goto LABEL_130;
        }
      }
    }
    if (v9 == 2)
    {
      v24 = *((_DWORD *)v3 + 6);
      if (v24 == 19 || v24 == 2)
      {
        v25 = ZeroCombiningMarkWidths((TRunGlue *)*v3);
      }
      else
      {
        if (TBaseFont::GetCommonTable((TBaseFont *)v3[1][50], 1801810542, 0))
          goto LABEL_28;
        v25 = ZeroMarkWidths((TRunGlue *)*v3, v13);
      }
      *a2 |= v25;
      *a3 = 2;
    }
LABEL_28:
    v12 = 1;
    goto LABEL_238;
  }
  if ((*(_DWORD *)(a1 + 24) | 0x20) != 0x22)
    goto LABEL_28;
  v10 = *(_QWORD *)(a1 + 216);
  v11 = *(_QWORD **)a1;
  v173.i64[0] = (uint64_t)&off_1E15DE610;
  v173.i64[1] = v10;
  v174 = (unint64_t)v11;
  *(_QWORD *)&v175[0] = 0xAAAAAAAAAAAAAA00;
  if (v10)
    JoiningScriptShapingEngine::MakePositioningAdjustments((JoiningScriptShapingEngine *)&v173);
  v12 = 1;
  *a2 = 1;
LABEL_238:
  (*v3)[14] = v4;
  return v12;
}

uint64_t TRunGlue::length(TRunGlue *this)
{
  uint64_t result;

  if (!*((_QWORD *)this + 19))
    return *((_QWORD *)this + 21) - *((_QWORD *)this + 20);
  result = *((_QWORD *)this + 4);
  if (result == -1)
  {
    TRunGlue::ComputeEndIndex(this);
    return *((_QWORD *)this + 4);
  }
  return result;
}

uint64_t OTL::GCommon::GCommon(uint64_t a1, int a2, _BYTE *a3, CFDataRef theData, uint64_t a5, int a6, unsigned int a7)
{
  const UInt8 *BytePtr;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v36;
  _WORD *v37;
  char v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  char v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E15DEEC0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a5;
  if (!theData || (*(_QWORD *)(a1 + 32) = CFDataGetBytePtr(theData), (BytePtr = CFDataGetBytePtr(theData)) == 0))
  {
    *(_OWORD *)(a1 + 65) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
LABEL_30:
    *(_QWORD *)(a1 + 32) = 0;
    return a1;
  }
  v14 = (unint64_t)&BytePtr[CFDataGetLength(theData)];
  *(_QWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  v15 = *(unsigned __int16 **)(a1 + 32);
  if ((unint64_t)(v15 + 5) > v14 || bswap32(*v15) >> 16 > 1)
    goto LABEL_30;
  if (v15[1] && (unint64_t)(v15 + 7) > v14)
    goto LABEL_30;
  if (!v15[3])
    goto LABEL_19;
  v17 = (unsigned __int16 *)((char *)v15 + __rev16(v15[3]));
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) > v14)
    goto LABEL_19;
  v19 = bswap32(*v17) >> 16;
  v20 = (unint64_t)&v18[3 * v19];
  if (v20 < (unint64_t)v18 || v20 > v14)
  {
    v22 = (v14 - (unint64_t)v18) / 6;
    if ((unint64_t)(v17 + 4) > v14)
      v22 = 0;
    if (v22 != v19)
LABEL_19:
      v17 = 0;
  }
  *(_QWORD *)(a1 + 56) = v17;
  if (v15[4]
    && (v23 = (unsigned __int16 *)((char *)v15 + __rev16(v15[4])), v24 = v23 + 1, (unint64_t)(v23 + 1) <= v14))
  {
    v31 = bswap32(*v23) >> 16;
    v32 = (unint64_t)&v24[v31];
    if ((unint64_t)(v23 + 2) <= v14)
      v33 = (v14 - (unint64_t)v24) >> 1;
    else
      v33 = 0;
    v36 = v32 >= (unint64_t)v24 && v32 <= v14 || v33 == v31;
    if (!v36)
      v23 = 0;
    *(_QWORD *)(a1 + 64) = v23;
    if (v17 && v36)
    {
      OTL::GCommon::InitLangSysTable(a1, (uint64_t)a3, a6, a7);
      if (a2)
        return a1;
      goto LABEL_24;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  if (a2)
    return a1;
LABEL_24:
  if (!*(_BYTE *)(a1 + 80) || (*a3 & 1) == 0)
    return a1;
  v45 = 0;
  v26 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 32);
  v46[0] = &off_1E15E0760;
  v46[1] = &v45;
  v47 = v46;
  OTL::GCommon::IterateFeatureTables(v27, v25, v26, (uint64_t)v46);
  v28 = v47;
  if (v47 == v46)
  {
    v29 = 4;
    v28 = v46;
    goto LABEL_51;
  }
  if (v47)
  {
    v29 = 5;
LABEL_51:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  if (!v45)
  {
    v37 = *(_WORD **)(a1 + 56);
    if (*v37)
    {
      v38 = 0;
      LODWORD(v39) = __rev16((unsigned __int16)*v37);
      if (v39 <= 1)
        v39 = 1;
      else
        v39 = v39;
      v40 = (unsigned int *)(v37 + 1);
      do
      {
        v41 = *v40;
        v40 = (unsigned int *)((char *)v40 + 6);
        v42 = bswap32(v41);
        if (v42 == 1986359924 || v42 == 1987212338)
          v38 = 1;
        if (v42 == 1986359924 || v42 == 1987212338)
          break;
        --v39;
      }
      while (v39);
      if ((v38 & 1) != 0)
        OTL::GCommon::InitLangSysTable(a1, (uint64_t)a3, 0, 0);
    }
  }
  return a1;
}

void OTL::GCommon::InitLangSysTable(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int *v12;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unint64_t v18;
  int v20;
  signed int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  signed int v30;
  int v31;
  int v32;
  uint64_t v33;
  TBaseFont *v34;
  int v35;
  char *v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unsigned __int16 *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unsigned int v60;

  while (1)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v10 = __rev16(*(unsigned __int16 *)(v9 + 4));
    v11 = (unsigned __int16 *)(v9 + v10);
    v12 = (unsigned int *)(v9 + v10 + 2);
    if (!*(_WORD *)(v9 + 4) || (unint64_t)v12 > v8)
      break;
    v14 = *v11;
    v15 = __rev16(v14);
    v16 = (char *)v12 + 6 * v15;
    if (v16 < (char *)v12 || (unint64_t)v16 > v8)
    {
      if ((unint64_t)(v11 + 4) <= v8)
        v18 = (v8 - (unint64_t)v12) / 6;
      else
        v18 = 0;
      if (v18 != v15 || v14 == 0)
        return;
    }
    else if (!*v11)
    {
      return;
    }
    if (a3)
      v20 = a3;
    else
      v20 = 1818326126;
    v21 = v20 & 0xFFFFFF00 | 0x20;
    if (v21 > 1835822367)
    {
      if (v21 <= 1869773087)
      {
        if (v21 == 1835822368)
          goto LABEL_60;
        if (v21 == 1836674336)
          goto LABEL_39;
      }
      else
      {
        switch(v21)
        {
          case 1869773088:
            goto LABEL_53;
          case 1952803872:
            goto LABEL_52;
          case 1953328160:
            goto LABEL_33;
        }
      }
    }
    else if (v21 <= 1735029279)
    {
      a3 = 1650814567;
      v22 = 1651402547;
      if (v21 == 1651402528)
        goto LABEL_61;
      if (v21 == 1684370976)
        goto LABEL_36;
    }
    else
    {
      switch(v21)
      {
        case 1735029280:
          goto LABEL_46;
        case 1735750176:
          goto LABEL_47;
        case 1802396704:
          goto LABEL_28;
      }
    }
    if (v20 > 1835825516)
    {
      if (v20 <= 1869773152)
      {
        if (v20 == 1835825517)
        {
LABEL_60:
          v22 = 1835822387;
          a3 = 1835825517;
          goto LABEL_61;
        }
        if (v20 != 1836674418)
        {
LABEL_59:
          a3 = v20;
          v22 = v20;
          goto LABEL_61;
        }
LABEL_39:
        v22 = 1836674354;
        a3 = 1836674418;
        goto LABEL_61;
      }
      if (v20 == 1869773153)
      {
LABEL_53:
        v22 = 1869773107;
        a3 = 1869773153;
        goto LABEL_61;
      }
      if (v20 != 1952542060)
      {
        if (v20 != 1952803957)
          goto LABEL_59;
LABEL_52:
        v22 = 1952803891;
        a3 = 1952803957;
        goto LABEL_61;
      }
LABEL_33:
      v22 = 1953328179;
      a3 = 1952542060;
      goto LABEL_61;
    }
    if (v20 <= 1735748209)
    {
      if (v20 == 1650814567)
      {
        a3 = 1650814567;
        v22 = 1651402547;
        goto LABEL_61;
      }
      if (v20 != 1684371041)
        goto LABEL_59;
LABEL_36:
      v22 = 1684370995;
      a3 = 1684371041;
      goto LABEL_61;
    }
    if (v20 == 1735748210)
    {
LABEL_46:
      v22 = 1735029299;
      a3 = 1735748210;
      goto LABEL_61;
    }
    if (v20 == 1735750261)
    {
LABEL_47:
      v22 = 1735750195;
      a3 = 1735750261;
      goto LABEL_61;
    }
    if (v20 != 1802396769)
      goto LABEL_59;
LABEL_28:
    v22 = 1802396723;
    a3 = 1802396769;
LABEL_61:
    v23 = 0;
    v24 = (unsigned __int16 *)(v9 + v10 + 6);
    v25 = 1;
    while (1)
    {
      v26 = (unsigned __int16 *)((char *)v11 + (bswap32(*v24) >> 16));
      if ((unint64_t)(v26 + 2) > v8)
        break;
      v27 = *((_DWORD *)v24 - 1);
      v28 = bswap32(v27);
      if (v27 == 1414284868 && v23 == 0)
      {
        *(_DWORD *)(a1 + 72) = 1145457748;
        goto LABEL_89;
      }
      if ((v28 << 24) - 973078528 >= 0xF7000001)
      {
        v30 = v28 & 0xFFFFFF00 | 0x20;
        if (v30 > 1835822367)
        {
          if (v30 <= 1869773087)
          {
            v31 = 1835825517;
            if (v30 != 1835822368)
            {
              v31 = 1836674418;
              v32 = 1836674336;
              goto LABEL_82;
            }
          }
          else
          {
            v31 = 1869773153;
            if (v30 != 1869773088)
            {
              v31 = 1952803957;
              if (v30 != 1952803872)
              {
                v31 = 1952542060;
                v32 = 1953328160;
                goto LABEL_82;
              }
            }
          }
        }
        else if (v30 <= 1735029279)
        {
          v31 = 1650814567;
          if (v30 != 1651402528)
          {
            v31 = 1684371041;
            v32 = 1684370976;
            goto LABEL_82;
          }
        }
        else
        {
          v31 = 1735748210;
          if (v30 != 1735029280)
          {
            if (v30 == 1735750176)
            {
              v31 = 1735750261;
            }
            else
            {
              v31 = 1802396769;
              v32 = 1802396704;
LABEL_82:
              if (v30 != v32)
                v31 = v28;
            }
          }
        }
        if (v31 == a3)
        {
          *(_DWORD *)(a1 + 72) = a3;
          *(_DWORD *)(a1 + 76) = v28;
          goto LABEL_89;
        }
      }
      if (v28 != a3 || *(_DWORD *)(a1 + 76))
        goto LABEL_90;
      *(_DWORD *)(a1 + 72) = a3;
LABEL_89:
      v23 = v26;
LABEL_90:
      if (v28 < v22)
      {
        v24 += 3;
        v42 = v25++ >= v15;
        if (!v42)
          continue;
      }
      break;
    }
    if (v23)
      goto LABEL_101;
    v33 = a2;
    v34 = *(TBaseFont **)(a2 + 400);
    if ((*((_DWORD *)v34 + 46) & 0x400) == 0)
      TBaseFont::DetermineFontFlags(v34, 1024);
    v35 = *((_DWORD *)v34 + 45);
    a2 = v33;
    if ((v35 & 0x400) == 0)
      return;
    v23 = (unsigned __int16 *)((char *)v11 + (bswap32(v11[3]) >> 16));
    v8 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)(v23 + 2) > v8)
      return;
    *(_DWORD *)(a1 + 72) = bswap32(*v12);
    v9 = *(_QWORD *)(a1 + 32);
LABEL_101:
    if (*v23)
    {
      v36 = (char *)v23 + __rev16(*v23);
      v37 = (unint64_t)(v36 + 6);
      if ((unint64_t)(v36 + 4) < v9 || v37 > v8)
        return;
      v39 = bswap32(*((unsigned __int16 *)v36 + 2)) >> 16;
      v40 = v37 + 2 * v39;
      v41 = (unint64_t)(v36 + 8) <= v8 ? (v8 - v37) >> 1 : 0;
      v42 = v40 <= v8 && v40 >= v37;
      if (!v42 && v41 != v39)
        return;
      if (!a4)
      {
LABEL_159:
        *(_QWORD *)(a1 + 48) = v36;
        *(_BYTE *)(a1 + 80) = 1;
        return;
      }
      *(_QWORD *)(a1 + 48) = v36;
    }
    v44 = v23 + 2;
    if (v9 > (unint64_t)(v23 + 2)
      || ((LODWORD(v45) = __rev16(v23[1]),
           v46 = (unint64_t)&v44[3 * v45],
           v46 >= (unint64_t)v44)
        ? (v47 = v46 > v8)
        : (v47 = 1),
          v47))
    {
      LODWORD(v45) = 0;
      if (v9 <= (unint64_t)v44 && (unint64_t)(v23 + 5) <= v8)
        v45 = (v8 - (unint64_t)v44) / 6;
      if (!(bswap32(v45) >> 16))
        goto LABEL_154;
LABEL_130:
      if ((v45 & 0xFFFE) != 0)
        v48 = (unsigned __int16)v45;
      else
        v48 = 1;
      v49 = v23 + 4;
      v50 = v23 + 4;
      while (1)
      {
        v52 = *v50;
        v50 += 3;
        v51 = v52;
        if (v52)
        {
          v36 = (char *)v23 + __rev16(v51);
          v53 = (unint64_t)(v36 + 6);
          if ((unint64_t)(v36 + 4) < v9 || v53 > v8)
            return;
          v55 = bswap32(*((unsigned __int16 *)v36 + 2)) >> 16;
          v56 = v53 + 2 * v55;
          v57 = (unint64_t)(v36 + 8) <= v8 ? (v8 - v53) >> 1 : 0;
          v58 = v56 <= v8 && v56 >= v53;
          if (!v58 && v57 != v55)
            return;
          v60 = *((_DWORD *)v49 - 1);
          if (bswap32(v60) == a4)
            goto LABEL_159;
          if (!v60)
            *(_QWORD *)(a1 + 48) = v36;
        }
        v49 = v50;
        if (!--v48)
          goto LABEL_154;
      }
    }
    if (v23[1])
      goto LABEL_130;
LABEL_154:
    if (a4)
    {
      if (!*(_BYTE *)(a1 + 80))
      {
        a4 = FallbackForLangSysTag(a4);
        if (a4)
          continue;
      }
    }
    return;
  }
}

uint64_t ScriptTagForScriptCode(int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  _OWORD *v9;
  uint64_t *v10;
  unsigned __int16 v11;
  const char *ShortName;
  char *v13;
  float *v14;
  int v15;
  int v16;
  int v17;

  v2 = 1652128365;
  switch(a1)
  {
    case -1:
      return 0;
    case 0:
    case 1:
    case 102:
    case 103:
    case 129:
    case 174:
      return 1145457748;
    case 2:
      return 1634885986;
    case 3:
      v3 = 3084;
      v4 = 1634885986;
      return v4 | v3;
    case 4:
      return 1650814567;
    case 5:
      return 1651470447;
    case 6:
      return 1667786098;
    case 7:
      return 1668247668;
    case 8:
      return 1668903532;
    case 9:
      return 1685287540;
    case 10:
      return 1684371041;
    case 11:
      return 1702127721;
    case 12:
      return 1734700914;
    case 13:
      return 1735357544;
    case 14:
      return 1735550315;
    case 15:
      return 1735748210;
    case 16:
      return 1735750261;
    case 17:
      return 1751215721;
    case 18:
      return 1751215719;
    case 19:
      return 1751474802;
    case 20:
    case 22:
    case 54:
      return 1801547361;
    case 21:
      return 1802396769;
    case 23:
      return 1802005874;
    case 24:
      return 1818324768;
    case 25:
      return 1818326126;
    case 26:
      return 1835825517;
    case 27:
      v5 = 1836016745;
      return (v5 + 2558);
    case 28:
      return 1836674418;
    case 29:
      return 1869046125;
    case 30:
      return 1769234796;
    case 31:
      return 1869773153;
    case 32:
      return 1920298610;
    case 33:
      return 1936289384;
    case 34:
    case 95:
    case 96:
    case 97:
      return 1937338979;
    case 35:
      return 1952542060;
    case 36:
      return 1952803957;
    case 37:
      return 1952997729;
    case 38:
      v6 = 1952997729;
      return v6 | 8u;
    case 39:
      return 1953063540;
    case 40:
      return 1667329651;
    case 41:
      return 2036932640;
    case 42:
      return 1952935015;
    case 43:
      v6 = 1751215719;
      return v6 | 8u;
    case 44:
      return 1651861604;
    case 45:
      return 1952540514;
    case 46:
      return 1651663209;
    case 47:
      return 1668313716;
    case 48:
      return 1818848610;
    case 49:
      v7 = 1818848610;
      return (v7 + 256);
    case 50:
      return 1869835617;
    case 51:
      v8 = 24951;
      return v8 | 0x73680000u;
    case 52:
      return 1952541797;
    case 53:
      return 1969709426;
    case 55:
      return 1651861353;
    case 56:
      return 1735156071;
    case 57:
      return 1802002802;
    case 58:
      return 1937337455;
    case 59:
      return 1952541813;
    case 60:
      return 1952869991;
    case 61:
      return 2020631919;
    case 62:
      return 1650551913;
    case 63:
      return 1650553963;
    case 65:
      return 1651663208;
    case 66:
      return 1667785069;
    case 71:
      return 1701280112;
    case 75:
      return 1752002151;
    case 76:
      return 1752526439;
    case 78:
      return 1784772193;
    case 79:
      return 1801546857;
    case 82:
      return 1818587235;
    case 83:
      return 1818848865;
    case 84:
      return 1835101796;
    case 86:
      return 1835364975;
    case 87:
      return 1852534560;
    case 88:
      return 1869769576;
    case 89:
      return 1885696621;
    case 90:
      return 1885888871;
    case 91:
      return 1885892216;
    case 99:
      return 1986095392;
    case 101:
      return 2020832632;
    case 104:
      return 1667330665;
    case 106:
      return 1818324577;
    case 107:
      return 1819894633;
    case 108:
      v7 = 1819894633;
      return (v7 + 256);
    case 109:
      return 1869374315;
    case 110:
      return 1919577703;
    case 111:
      return 1935766898;
    case 112:
      return 1936158327;
    case 113:
      return 1937075812;
    case 115:
      return 1836344681;
    case 116:
      return 1634889065;
    case 117:
      return 1635152756;
    case 118:
      return 1667328877;
    case 120:
      return 1802791017;
    case 121:
      return 1835101801;
    case 122:
      return 1885891689;
    case 123:
      return 1885891696;
    case 125:
      return 1886549097;
    case 126:
      return 1935764850;
    case 127:
      return 1952544372;
    case 128:
      return 1835103336;
    case 130:
      return 1650552181;
    case 131:
      return 1818850165;
    case 133:
      return 1935766114;
    case 134:
      return 1650553715;
    case 135:
      return 1685418092;
    case 136:
      return 1701601889;
    case 137:
      return 1735549294;
    case 140:
      v5 = 1835361382;
      return (v5 + 2558);
    case 141:
      return 1835364963;
    case 142:
      return 1851880034;
    case 143:
      return 1851941236;
    case 144:
      return 1885432941;
    case 145:
      v3 = 2560;
      v4 = 1936286820;
      return v4 | v3;
    case 146:
      return 2002874977;
    case 149:
      return 1836216175;
    case 150:
      return 1853057141;
    case 151:
      v8 = 29284;
      return v8 | 0x73680000u;
    case 152:
      return 1936683617;
    case 153:
      return 1952541554;
    case 154:
      return 1952542311;
    case 156:
      return 1751938423;
    case 157:
      return 1802006378;
    case 158:
      return 1953067624;
    case 159:
      return 1634166882;
    case 160:
      return 1835100266;
    case 161:
      return 1634234221;
    case 162:
      return 1751217266;
    case 163:
      return 1836016745;
    case 164:
      return 1836412020;
    case 165:
      return 1885435235;
    case 166:
      return 1936286820;
    case 167:
      return 1633971309;
    case 168:
      return 1651010419;
    case 169:
      return 1835102819;
    case 170:
      return 1852143457;
    case 171:
      return 1869834085;
    case 175:
      return 1735356013;
    case 176:
      v11 = 31087;
      return v11 | 0x736F0000u;
    case 177:
      return 2053205602;
    case 178:
      return 1685022578;
    case 179:
      return 1735356007;
    case 180:
      return 1835101025;
    case 181:
      return 1835361382;
    case 182:
      return 1919903847;
    case 183:
      v11 = 26468;
      return v11 | 0x736F0000u;
    case 184:
      v3 = 11;
      v4 = 1936680804;
      return v4 | v3;
    case 193:
      return 1668312430;
    case 194:
      return 1869965170;
    case 195:
      return 1953395553;
    case 196:
      return 1953461359;
    case 197:
      return 1986622568;
    case 198:
      return 1801549673;
    case 199:
      return 1851877229;
    case 201:
      return v2;
    case 202:
      return 1836413795;
    default:
      os_unfair_lock_lock_with_options();
      v9 = (_OWORD *)qword_1ECDE79E0;
      if (qword_1ECDE79E0)
        goto LABEL_68;
      v9 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
      if (v9)
      {
        *v9 = 0u;
        v9[1] = 0u;
        *((_DWORD *)v9 + 8) = 1065353216;
        qword_1ECDE79E0 = (uint64_t)v9;
LABEL_68:
        v10 = std::__hash_table<std::__hash_value_type<UScriptCode,unsigned int>,std::__unordered_map_hasher<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::hash<UScriptCode>,std::equal_to<UScriptCode>,true>,std::__unordered_map_equal<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::equal_to<UScriptCode>,std::hash<UScriptCode>,true>,std::allocator<std::__hash_value_type<UScriptCode,unsigned int>>>::find<UScriptCode>(v9, a1);
        if (v10)
        {
          v2 = *((unsigned int *)v10 + 5);
          goto LABEL_176;
        }
      }
      else
      {
        qword_1ECDE79E0 = 0;
      }
      ShortName = (const char *)uscript_getShortName();
      if (ShortName && (v13 = (char *)ShortName, strlen(ShortName) > 3))
      {
        v2 = (v13[1] << 16) | (__tolower(*v13) << 24) | (v13[2] << 8) | v13[3];
        v14 = (float *)qword_1ECDE79E0;
        if (!qword_1ECDE79E0)
          goto LABEL_176;
        v15 = a1;
        v16 = a1;
        v17 = v2;
      }
      else
      {
        v2 = 1145457748;
        v14 = (float *)qword_1ECDE79E0;
        if (!qword_1ECDE79E0)
          goto LABEL_176;
        v15 = a1;
        v16 = a1;
        v17 = 1145457748;
      }
      std::__hash_table<std::__hash_value_type<UScriptCode,unsigned int>,std::__unordered_map_hasher<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::hash<UScriptCode>,std::equal_to<UScriptCode>,true>,std::__unordered_map_equal<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::equal_to<UScriptCode>,std::hash<UScriptCode>,true>,std::allocator<std::__hash_value_type<UScriptCode,unsigned int>>>::__emplace_unique_key_args<UScriptCode,std::pair<UScriptCode,unsigned int>>(v14, v15, v16, v17);
LABEL_176:
      os_unfair_lock_unlock(&stru_1ECDE79A4);
      return v2;
  }
}

uint64_t *TBaseFont::NthLookup<OTL::GPOS>(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  BOOL v13;
  _QWORD *v15;
  char v16;
  char v17;
  unsigned int v19;
  __int128 *v20;
  unsigned int *v21;
  _BYTE v22[312];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = a3;
  v4 = a1 + 400;
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>((_QWORD *)(a1 + 400), &v19);
  if (v5)
    return v5 + 3;
  v7 = (unsigned __int16 *)a2[8];
  if (v19 >= bswap32(*v7) >> 16)
    return 0;
  v8 = (unint64_t)v7 + (bswap32(v7[v19 + 1]) >> 16);
  v10 = a2[4];
  v9 = a2[5];
  if (v8 + 4 < v10 || v8 + 6 > v9)
    return 0;
  v12 = v8
      + 2 * (bswap32(*(unsigned __int16 *)(v8 + 4)) >> 16)
      + (((unint64_t)*(unsigned __int16 *)(v8 + 2) >> 11) & 2)
      + 6;
  v13 = v10 <= v8 && v12 >= v8;
  if (!v13 || v12 > v9)
    return 0;
  OTL::Lookup::Lookup<OTL::GPOS>((OTL::Lookup *)v22, (uint64_t)a2, v8);
  v20 = (__int128 *)v22;
  v21 = &v19;
  v15 = std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<OTL::Lookup&&>>(v4, &v19, (uint64_t)&std::piecewise_construct, &v21, &v20);
  v17 = v16;
  OTL::Lookup::~Lookup((OTL::Lookup *)v22);
  if (!v17)
    return 0;
  v6 = v15 + 3;
  OTL::Lookup::InitCoverageUnion(v6);
  return (uint64_t *)v6;
}

uint64_t OTL::GDEF::GDEF(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (a2)
  {
    if (a2 + 12 > a3 || *(_WORD *)a2 != 256)
      goto LABEL_23;
    if (*(_WORD *)(a2 + 4))
    {
      v5 = (char *)(a2 + __rev16(*(unsigned __int16 *)(a2 + 4)));
      *(_QWORD *)(a1 + 16) = v5;
      if ((unint64_t)(v5 + 2) > a3
        || ((v6 = bswap32(*(unsigned __int16 *)v5) >> 16, v6 == 2)
          ? (v7 = 6 * (bswap32(*((unsigned __int16 *)v5 + 1)) >> 16) + 4)
          : v6 != 1
          ? (v7 = 0)
          : (v7 = 2 * (bswap32(*((unsigned __int16 *)v5 + 2)) >> 16) + 6),
            (v8 = &v5[v7], v8 >= v5) ? (v9 = (unint64_t)v8 > a3) : (v9 = 1),
            v9))
      {
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
    v10 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
    if (v10 >= 2)
    {
      if (a2 + 14 <= a3)
      {
        if (v10 < 3)
        {
LABEL_21:
          *(_BYTE *)(a1 + 24) = 1;
          return a1;
        }
        if (a2 + 18 <= a3)
        {
          v11 = *(_DWORD *)(a2 + 14);
          if (v11)
            ItemVariationStore::Initialize(v4, a2 + bswap32(v11), a3);
          goto LABEL_21;
        }
      }
LABEL_23:
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

uint64_t OTL::GDEF::GDEF(OTL::GDEF *this, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const UInt8 *v5;
  unint64_t v6;

  if (!theData)
  {
    BytePtr = 0;
    goto LABEL_5;
  }
  BytePtr = CFDataGetBytePtr(theData);
  v5 = CFDataGetBytePtr(theData);
  if (!v5)
  {
LABEL_5:
    v6 = 0;
    return OTL::GDEF::GDEF((uint64_t)this, (uint64_t)BytePtr, v6);
  }
  v6 = (unint64_t)&v5[CFDataGetLength(theData)];
  return OTL::GDEF::GDEF((uint64_t)this, (uint64_t)BytePtr, v6);
}

void OTL::GlyphLookups::SetLookupInRange<false>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  char *v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  int64x2_t v27;
  uint64_t v28;
  void ***v29;
  _QWORD v30[2];
  void **v31[12];
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int16 *)*a1;
  v8 = (unsigned __int16 *)a1[1];
  if ((unsigned __int16 *)*a1 != v8)
  {
    while (*v9 != (unsigned __int16)a2 || v9[1] != HIWORD(a2))
    {
      v9 += 52;
      if (v9 == v8)
        goto LABEL_17;
    }
  }
  if (v9 == v8)
  {
LABEL_17:
    v37 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v35 = v17;
    v36 = v17;
    v33 = v17;
    v34 = v17;
    *(_OWORD *)&v32[16] = v17;
    *(_OWORD *)v32 = v17;
    v30[0] = a3;
    v30[1] = a4;
    TInlineVector<CFRange,4ul>::TInlineVector(v31, v30, 1uLL);
    *(_DWORD *)v32 = a2;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v32[8], (_BYTE *)v31[0], (_BYTE *)v31[1]);
    v29 = v31;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
    std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::emplace_back<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>>(a1, (uint64_t)v32);
    v31[0] = (void **)&v32[8];
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](v31);
  }
  else
  {
    v11 = (char *)*((_QWORD *)v9 + 1);
    v12 = (char *)*((_QWORD *)v9 + 2);
    if (v11 == v12
      || (v13 = *((_QWORD *)v12 - 1), (v13 & 0x8000000000000000) == 0)
      && (a3 == *((_QWORD *)v12 - 2) ? (v14 = a4 == v13) : (v14 = 0), !v14))
    {
      v15 = *((_QWORD *)v9 + 3);
      if ((unint64_t)v12 >= v15)
      {
        v18 = (v12 - v11) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          abort();
        v20 = v15 - (_QWORD)v11;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        *(_QWORD *)&v33 = v9 + 16;
        if (v21)
          v22 = (char *)TInlineBufferAllocator<CFRange,4ul>::allocate((uint64_t)(v9 + 16), v21);
        else
          v22 = 0;
        v23 = &v22[16 * v18];
        *(_QWORD *)v23 = a3;
        *((_QWORD *)v23 + 1) = a4;
        v24 = *((_QWORD *)v9 + 1);
        v25 = *((_QWORD *)v9 + 2);
        if (v25 == v24)
        {
          v27 = vdupq_n_s64(v25);
          v26 = &v22[16 * v18];
        }
        else
        {
          v26 = &v22[16 * v18];
          do
          {
            *((_OWORD *)v26 - 1) = *(_OWORD *)(v25 - 16);
            v26 -= 16;
            v25 -= 16;
          }
          while (v25 != v24);
          v27 = *(int64x2_t *)(v9 + 4);
        }
        v16 = v23 + 16;
        *((_QWORD *)v9 + 1) = v26;
        *((_QWORD *)v9 + 2) = v23 + 16;
        *(int64x2_t *)&v32[8] = v27;
        v28 = *((_QWORD *)v9 + 3);
        *((_QWORD *)v9 + 3) = &v22[16 * v21];
        *(_QWORD *)&v32[24] = v28;
        *(_QWORD *)v32 = v27.i64[0];
        std::__split_buffer<CFRange,TInlineBufferAllocator<CFRange,4ul> &>::~__split_buffer((uint64_t)v32);
      }
      else
      {
        *(_QWORD *)v12 = a3;
        *((_QWORD *)v12 + 1) = a4;
        v16 = v12 + 16;
      }
      *((_QWORD *)v9 + 2) = v16;
    }
  }
}

_DWORD *std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::emplace_back<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _QWORD v15[5];

  v5 = (_DWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v5 - *a1) >> 3);
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0x276276276276276)
      abort();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v15[4] = a1 + 3;
    if (v11)
      v12 = TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>::allocate(v7, v11);
    else
      v12 = 0;
    v13 = &v12[104 * v8];
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = &v12[104 * v11];
    *(_DWORD *)v13 = *(_DWORD *)a2;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)(v13 + 8), *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
    v15[2] = v13 + 104;
    std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__swap_out_circular_buffer(a1, v15);
    v6 = (_DWORD *)a1[1];
    std::__split_buffer<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul> &>::~__split_buffer(v15);
  }
  else
  {
    *v5 = *(_DWORD *)a2;
    v6 = v5 + 26;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)(v5 + 2), *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  }
  a1[1] = (uint64_t)v6;
  return v6 - 26;
}

uint64_t *std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 104);
    v4 -= 104;
    *(_DWORD *)(v6 - 104) = v7;
    v6 -= 104;
    result = (uint64_t *)std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>(v6 + 8, *(_BYTE **)(v4 + 8), *(_BYTE **)(v4 + 16));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__split_buffer<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul> &>::~__split_buffer(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;

  std::__split_buffer<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul> &>::clear[abi:nn180100]((uint64_t)a1);
  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = a1[4];
    v4 = (_QWORD *)(v3 + 3120);
    if (v3 <= (unint64_t)v2 && v4 > v2)
    {
      if (a1[3] == *v4)
        *v4 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
  return a1;
}

char *TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 3120);
  result = *(char **)(a1 + 3120);
  v4 = &result[104 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >= 0x276276276276277)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(104 * a2);
  }
  return result;
}

uint64_t ItemVariationStore::Initialize(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unint64_t v11;

  if (!a2)
    return 1;
  v3 = a2 + 8;
  if (a2 + 8 > a3)
    return 0;
  v4 = bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16;
  v5 = v3 + 4 * v4;
  if (v5 < v3 || v5 > a3)
  {
    v7 = a2 + 12 <= a3 ? (a3 - v3) >> 2 : 0;
    if (v7 != v4)
      return 0;
  }
  v8 = *(unsigned int *)(a2 + 2);
  if ((_DWORD)v8)
  {
    v9 = (unsigned __int16 *)(a2 + bswap32(v8));
    if ((unint64_t)(v9 + 2) <= a3)
    {
      v10 = bswap32(v9[1]) >> 16;
      v11 = (unint64_t)&v9[3 * (bswap32(*v9) >> 16) * v10 + 2];
      if (v11 >= (unint64_t)v9 && v11 <= a3)
      {
        *a1 = a2;
        a1[1] = a3;
        a1[2] = v10;
        a1[3] = v9;
        v8 = 1;
        a1[4] = v4;
        a1[5] = v3;
        return v8;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t FallbackForLangSysTag(unsigned int a1)
{
  uint64_t result;
  unsigned __int8 v3;

  if (HIWORD(a1) == 23112)
  {
    if (a1 == 1514689613)
      return 1514686496;
    else
      return 0;
  }
  else
  {
    v3 = atomic_load((unsigned __int8 *)&qword_1ECDE79A8);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE79A8))
    {
      xmmword_1ECDE7A38 = 0u;
      *(_OWORD *)&qword_1ECDE7A48 = 0u;
      dword_1ECDE7A58 = 1065353216;
      __cxa_guard_release(&qword_1ECDE79A8);
    }
    if (qword_1ECDE79B0 != -1)
      dispatch_once_f(&qword_1ECDE79B0, 0, (dispatch_function_t)FallbackForLangSysTag::$_0::__invoke);
    if (result)
      return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t *std::unordered_map<unsigned int,`anonymous namespace'::FeatureMapEntry const*>::find[abi:nn180100](uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t ZeroMarkWidths(TRunGlue *CommonTable, uint64_t a2)
{
  TRunGlue *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  size_t v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  double v17;
  double *v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v28;
  double v29;
  double *v30;
  unsigned int GlyphID;
  unsigned int v32;
  double Advance;
  double v34;
  double v35;
  double v36;
  double v37;
  const __CFData *v39;
  int v40;
  __int128 v41;
  _OWORD v42[4];
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  CGPoint v46;
  CGPoint v47;

  v2 = CommonTable;
  v45 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 16))
    return ZeroCombiningMarkWidths(CommonTable);
  v4 = *((_QWORD *)CommonTable + 77);
  v5 = *(_QWORD *)(v4 + 400);
  if ((*(_DWORD *)(v5 + 184) & 0x400) == 0)
    TBaseFont::DetermineFontFlags(*(TBaseFont **)(v4 + 400), 1024);
  if ((*(_DWORD *)(v5 + 180) & 0x400) != 0)
    goto LABEL_6;
  CommonTable = (TRunGlue *)TBaseFont::GetCommonTable(*(TBaseFont **)(v4 + 400), 1634561906, 0);
  if (CommonTable)
    goto LABEL_6;
  CommonTable = (TRunGlue *)TBaseFont::GetCommonTable(*(TBaseFont **)(v4 + 400), 1196643650, 0);
  if (!CommonTable)
    goto LABEL_6;
  v39 = CommonTable;
  v40 = *((uint64_t *)v2 + 2) < 1
      ? 0
      : ScriptTagForScriptCode(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 16)
                                                                 + 8 * *((_QWORD *)v2 + 1))
                                                     + 48)
                                         + 304));
  v44 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[3] = v41;
  v43 = v41;
  v42[1] = v41;
  v42[2] = v41;
  v42[0] = v41;
  CommonTable = (TRunGlue *)OTL::GCommon::GCommon((uint64_t)v42, 0, (_BYTE *)v4, v39, a2, v40, 0);
  if (DWORD2(v43))
  {
LABEL_6:
    v6 = *((_QWORD *)v2 + 78);
    if ((unint64_t)v6 <= 0x10000)
      v7 = (unint64_t)(v6 + 7) >> 3;
    else
      v7 = 0x2000;
    MEMORY[0x1E0C80A78](CommonTable, v7);
    v9 = (unsigned __int8 *)v42 - v8;
    bzero((char *)v42 - v8, v10);
    v11 = *(unsigned __int16 **)(a2 + 16);
    if (v11)
      OTL::ClassDefTable::PopulateGlyphClassBitmap(v11, 3, v9, v6);
    v12 = *((_DWORD *)v2 + 6);
    v13 = TRunGlue::length(v2);
    v14 = v13;
    if (v12 < 0)
    {
      if (v13)
      {
        v15 = 0;
        v28 = v13 - 1;
        v29 = 0.0;
        v30 = (double *)MEMORY[0x1E0C9D820];
        do
        {
          GlyphID = TRunGlue::GetGlyphID(v2, v28);
          if (GlyphID != 0xFFFF)
          {
            v32 = GlyphID;
            if (!TRunGlue::IsDeleted(v2, v28))
            {
              if (v6 > v32 && ((v9[(unint64_t)v32 >> 3] >> (v32 & 7)) & 1) != 0)
              {
                Advance = TRunGlue::GetAdvance(v2, v28);
                v35 = v34;
                v29 = v29 + Advance;
                if (v29 != 0.0 && (TRunGlue::GetGlyphProps(v2, v28) & 0x4000) != 0)
                {
                  v47.x = TRunGlue::GetOrigin(v2, v28) - v29;
                  TRunGlue::SetOrigin(v2, v28, v47);
                }
                v37 = v30[1];
                if (Advance != *v30 || v35 != v37)
                {
                  v36 = *v30;
                  TRunGlue::SetAdvance(v2, v28, *(CGSize *)(&v37 - 1));
                  v15 = 1;
                }
              }
              else
              {
                v29 = 0.0;
              }
            }
          }
          --v28;
        }
        while (v28 != -1);
        return v15 & 1;
      }
    }
    else if (v13)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0.0;
      v18 = (double *)MEMORY[0x1E0C9D820];
      do
      {
        v19 = TRunGlue::GetGlyphID(v2, v16);
        if (v19 != 0xFFFF)
        {
          v20 = v19;
          if (!TRunGlue::IsDeleted(v2, v16))
          {
            if (v6 > v20 && ((v9[(unint64_t)v20 >> 3] >> (v20 & 7)) & 1) != 0)
            {
              v21 = TRunGlue::GetAdvance(v2, v16);
              v23 = v22;
              if (v17 != 0.0 && (TRunGlue::GetGlyphProps(v2, v16) & 0x4000) != 0)
              {
                v46.x = v17 + TRunGlue::GetOrigin(v2, v16);
                TRunGlue::SetOrigin(v2, v16, v46);
              }
              v17 = v17 + v21;
              v25 = v18[1];
              if (v21 != *v18 || v23 != v25)
              {
                v24 = *v18;
                TRunGlue::SetAdvance(v2, v16, *(CGSize *)(&v25 - 1));
                v15 = 1;
              }
            }
            else
            {
              v17 = 0.0;
            }
          }
        }
        ++v16;
      }
      while (v14 != v16);
      return v15 & 1;
    }
  }
  v15 = 0;
  return v15 & 1;
}

uint64_t ZeroCombiningMarkWidths(TRunGlue *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  double *v6;
  double Advance;
  double v8;
  double v9;
  double v10;
  double v11;

  v2 = TRunGlue::length(a1);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = (double *)MEMORY[0x1E0C9D820];
    do
    {
      if ((TRunGlue::GetGlyphProps(a1, v5) & 0x1040) != 0)
      {
        Advance = TRunGlue::GetAdvance(a1, v5);
        v9 = v8;
        v11 = v6[1];
        if (Advance != *v6 || v9 != v11)
        {
          v10 = *v6;
          TRunGlue::SetAdvance(a1, v5, *(CGSize *)(&v11 - 1));
          v4 = 1;
        }
      }
      ++v5;
    }
    while (v3 != v5);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t TRunGlue::GetGlyphProps(TRunGlue *this, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    return *(unsigned int *)(*((_QWORD *)this + 65) + 4 * (a2 - *((_QWORD *)this + 20)));
  }
  else
  {
    v5 = *((_QWORD *)this + 20) + a2;
    v6 = *((_QWORD *)this + 65);
    if (v6)
    {
      return *(unsigned int *)(v6 + 4 * v5);
    }
    else
    {
      v7 = v5 + 7;
      if (v5 >= 0)
        v7 = *((_QWORD *)this + 20) + a2;
      return 32 * ((*(unsigned __int8 *)(*((_QWORD *)this + 26) + (v7 >> 3)) >> (v5 & 7)) & 1u);
    }
  }
}

uint64_t OTL::GPOS::ApplyLookupSubtable(_QWORD *a1, uint64_t a2, int a3, unsigned __int16 *a4, TGlyphIterator *this, uint64_t a6, unsigned int a7, unint64_t a8)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;

  switch(a3)
  {
    case 1:
      result = OTL::GPOS::ApplySinglePos((uint64_t)a1, a4, (uint64_t)this, a7);
      break;
    case 2:
      result = OTL::GPOS::ApplyPairPos(a1, a4, this, a7);
      break;
    case 3:
      if (*a4 != 256)
        goto LABEL_20;
      result = OTL::GPOS::ApplyCursivePos(a1, (uint64_t)a4, this, a6, a7, HIBYTE(*(unsigned __int16 *)(*(_QWORD *)a2 + 2)) & 1);
      break;
    case 4:
      if (*a4 != 256)
        goto LABEL_20;
      result = OTL::GPOS::ApplyMarkBasePos((uint64_t)a1, a4, (uint64_t)this, a7);
      break;
    case 5:
      if (*a4 != 256)
        goto LABEL_20;
      result = OTL::GPOS::ApplyMarkLigPos((uint64_t)a1, a4, this, a7);
      break;
    case 6:
      if (*a4 != 256)
        goto LABEL_20;
      result = OTL::GPOS::ApplyMarkMarkPos((uint64_t)a1, a2, a4, this, a7);
      break;
    case 7:
      v9 = bswap32(*a4) >> 16;
      switch(v9)
      {
        case 3u:
          result = OTL::GPOS::ApplyContextPosFormat3(a1, (unint64_t)a4, (uint64_t)this, a8);
          break;
        case 2u:
          result = OTL::GPOS::ApplyContextPosFormat2(a1, (unint64_t)a4, (uint64_t)this, a8);
          break;
        case 1u:
          result = OTL::GPOS::ApplyContextPosFormat1(a1, (unint64_t)a4, this, a7, a8);
          break;
        default:
          goto LABEL_20;
      }
      break;
    case 8:
      v10 = bswap32(*a4) >> 16;
      switch(v10)
      {
        case 3u:
          result = OTL::GPOS::ApplyChainContextPosFormat3(a1, (unint64_t)a4, (uint64_t)this, a8);
          break;
        case 2u:
          result = OTL::GPOS::ApplyChainContextPosFormat2(a1, a4, (uint64_t)this, a8);
          break;
        case 1u:
          result = OTL::GPOS::ApplyChainContextPosFormat1(a1, (unint64_t)a4, this, a7, a8);
          break;
        default:
          goto LABEL_20;
      }
      break;
    default:
LABEL_20:
      result = 0;
      break;
  }
  return result;
}

uint64_t OTL::GPOS::ApplyPairPos(_QWORD *a1, unsigned __int16 *a2, TGlyphIterator *this, unsigned int a4)
{
  unsigned __int16 *v4;
  uint64_t v10;
  unsigned int GlyphID;
  __int32 v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int16 *v16;
  uint64_t v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  char v22;
  unsigned __int16 *v23;
  int8x8_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int8x8_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int8x8_t v39;
  uint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  BOOL v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  __int32 v50;
  uint64_t v51;
  __int32 v52;
  unsigned __int16 *v53;
  __int32 v54;
  unsigned __int16 *v55;
  uint64_t v56;
  _QWORD *v57;

  v4 = (unsigned __int16 *)a1[5];
  if (a1[4] > (unint64_t)a2 || a2 + 4 > v4)
    return 0;
  v10 = *((_QWORD *)this + 6);
  if (!TGlyphIterator::Next(this, 1))
    goto LABEL_61;
  v51 = *((_QWORD *)this + 6);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, v51);
  v12 = __rev16(a2[2]);
  v13 = a2[3];
  v52 = __rev16(v13);
  v14 = bswap32(*a2) >> 16;
  if (v14 == 2)
  {
    if (a2 + 8 > v4)
      goto LABEL_61;
    v28 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[4]) >> 16));
    if (v28 + 1 > v4)
      goto LABEL_61;
    v29 = bswap32(*v28) >> 16;
    if (v29 == 2)
      v30 = 6 * (bswap32(v28[1]) >> 16) + 4;
    else
      v30 = v29 == 1 ? 2 * (bswap32(v28[2]) >> 16) + 6 : 0;
    v31 = (char *)v28 + v30;
    if (v31 < (char *)v28)
      goto LABEL_61;
    if (v31 > (char *)v4)
      goto LABEL_61;
    v32 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[5]) >> 16));
    if (v32 + 1 > v4)
      goto LABEL_61;
    v33 = bswap32(*v32) >> 16;
    if (v33 == 2)
      v34 = 6 * (bswap32(v32[1]) >> 16) + 4;
    else
      v34 = v33 == 1 ? 2 * (bswap32(v32[2]) >> 16) + 6 : 0;
    v35 = (char *)v32 + v34;
    if (v35 < (char *)v32 || v35 > (char *)v4)
      goto LABEL_61;
    v50 = a2[2];
    v36 = TRunGlue::GetGlyphID(*(TRunGlue **)this, v10);
    v37 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v28, v36);
    v38 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v32, GlyphID);
    v26 = (unsigned __int16 *)PairPosFormat2::ValuePair((PairPosFormat2 *)a2, v37, v38, (unint64_t)v4);
    v25 = a2;
  }
  else
  {
    v15 = v14 == 1;
    v16 = a2 + 5;
    if (!v15 || v16 > v4)
      goto LABEL_61;
    v18 = bswap32(a2[4]) >> 16;
    v19 = __CFADD__(v16, 2 * v18);
    v20 = &v16[v18] > v4 || v19;
    v21 = (unint64_t)((char *)v4 - (char *)v16) >> 1;
    if (a2 + 6 > v4)
      v21 = 0;
    v22 = v21 == v18 ? 0 : v20;
    if (v18 < a4)
      goto LABEL_61;
    if ((v22 & 1) != 0)
      goto LABEL_61;
    v50 = a2[2];
    v23 = PairPosFormat1::NthPairSet((PairPosFormat1 *)a2, a4 - 1, (unint64_t)v4);
    if (!v23)
      goto LABEL_61;
    v25 = v23;
    v26 = PairSet::ValuePair((PairSet *)v23, GlyphID, v12, v52, v4, v24);
  }
  if (!v26)
  {
LABEL_61:
    result = 0;
    *((_QWORD *)this + 6) = v10;
    return result;
  }
  v27.i32[0] = v50;
  v39 = vcnt_s8(v27);
  v39.i16[0] = vaddlv_u8((uint8x8_t)v39);
  v40 = v39.u32[0];
  v39.i32[0] = v13;
  v41 = (uint8x8_t)vcnt_s8(v39);
  v41.i16[0] = vaddlv_u8(v41);
  v42 = (v41.i32[0] + v40);
  if (v26 < a2 || ((v43 = &v26[v42], v43 >= v26) ? (v44 = v43 > v4) : (v44 = 1), v44))
  {
    v45 = v26 + 1 <= v4 && v26 >= a2;
    v46 = (unint64_t)((char *)v4 - (char *)v26) >> 1;
    if (!v45)
      v46 = 0;
    if (v46 != v42)
      return 0;
  }
  if (v50)
  {
    v47 = a1[2];
    v53 = v26;
    v54 = v12;
    v55 = v25;
    v56 = v47;
    v57 = a1;
    ValueRecord::operator()(&v53, *(TRunGlue **)this, v10);
  }
  if (v13)
  {
    v48 = a1[2];
    v53 = &v26[v40];
    v54 = v52;
    v55 = v25;
    v56 = v48;
    v57 = a1;
    ValueRecord::operator()(&v53, *(TRunGlue **)this, v51);
  }
  else
  {
    *((_QWORD *)this + 6) = v10;
  }
  return 1;
}

_QWORD *TRunGlue::ComputeEndIndex(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = this[1];
  v1 = this[2];
  v3 = *(_QWORD *)(*this + 16);
  v4 = *(_QWORD **)(*(_QWORD *)(v3 + 8 * v2) + 40);
  v5 = v4[26];
  this[4] = v5;
  v7 = v4[1];
  v6 = v4[2];
  this[5] = v7;
  this[6] = v6;
  if (v1 >= 2)
  {
    v8 = v1 + v2;
    v9 = v2 + 1;
    do
    {
      v10 = *(_QWORD **)(*(_QWORD *)(v3 + 8 * v9) + 40);
      v5 += v10[26];
      this[4] = v5;
      v12 = v10[1];
      v11 = v10[2];
      v13 = v6 + v7;
      if (v12 < v7)
        v7 = v12;
      v14 = v11 + v12;
      if (v13 <= v14)
        v13 = v14;
      v6 = v13 - v7;
      this[5] = v7;
      this[6] = v6;
      ++v9;
    }
    while (v9 < v8);
  }
  return this;
}

unsigned __int16 *OTL::ClassDefTable::PopulateGlyphClassBitmap(unsigned __int16 *this, int a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;

  v4 = bswap32(*this) >> 16;
  if (v4 == 2)
  {
    if (this[1])
    {
      v10 = this + 2;
      v11 = (uint64_t)&this[3 * __rev16(this[1]) + 2];
      do
      {
        if (a2 == bswap32(v10[2]) >> 16)
        {
          v12 = bswap32(*v10) >> 16;
          v13 = bswap32(v10[1]);
          if (v12 <= HIWORD(v13))
          {
            v14 = HIWORD(v13);
            if (v12 != (unsigned __int16)(v14 + 1))
            {
              do
              {
                if (a4 <= (unsigned __int16)v12)
                  break;
                v15 = v14 == (unsigned __int16)v12;
                a3[(unsigned __int16)v12 >> 3] |= 1 << (v12 & 7);
                LOWORD(v12) = v12 + 1;
              }
              while (!v15);
            }
          }
        }
        v10 += 3;
      }
      while (v10 != (unsigned __int16 *)v11);
    }
  }
  else if (v4 == 1 && this[2])
  {
    v5 = 0;
    v6 = bswap32(this[1]) >> 16;
    LODWORD(v7) = __rev16(this[2]);
    if (a4 <= v6)
      v8 = v6;
    else
      v8 = a4;
    v9 = v8 - v6;
    if (v7 <= 1)
      v7 = 1;
    else
      v7 = v7;
    do
    {
      if (v9 == v5)
        break;
      if (a2 == bswap32(this[v5 + 3]) >> 16)
        a3[(unsigned __int16)(v6 + v5) >> 3] |= 1 << ((v6 + v5) & 7);
      ++v5;
    }
    while (v7 != v5);
  }
  return this;
}

uint64_t OTL::GPOS::ApplyMarkLigPos(uint64_t a1, unsigned __int16 *a2, TGlyphIterator *this, int a4)
{
  unint64_t v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t GlyphID;
  OTL::ClassDefTable *v14;
  uint64_t result;
  __int128 v16;
  uint64_t (*v17)(_QWORD *, uint64_t);
  _QWORD *v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int16 *v28;
  char *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v39;
  unsigned int v40;
  char *v41;
  BOOL v42;
  _BOOL4 v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v47;
  unsigned int GlyphProps;
  unsigned int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) > (unint64_t)a2 || (unint64_t)(a2 + 6) > v4)
    return 0;
  v10 = *((_QWORD *)this + 6);
  v11 = *((_QWORD *)this + 7);
  v12 = v10;
  if (!TGlyphIterator::Prev(this))
  {
LABEL_10:
    result = 0;
    *((_QWORD *)this + 6) = v10;
    *((_QWORD *)this + 7) = v10;
    *((_QWORD *)this + 8) = v12;
    return result;
  }
  while (1)
  {
    v12 = *((_QWORD *)this + 6);
    if (v12 == v11)
      break;
    GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, *((_QWORD *)this + 6));
    v14 = *(OTL::ClassDefTable **)(*(_QWORD *)(a1 + 24) + 16);
    if (!v14 || OTL::ClassDefTable::ClassOf(v14, GlyphID) != 3)
      goto LABEL_12;
    if ((TGlyphIterator::Prev(this) & 1) == 0)
      goto LABEL_10;
  }
  v12 = *((_QWORD *)this + 8);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, v12);
LABEL_12:
  v61 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59 = v16;
  v60 = v16;
  OTL::Coverage::Coverage((OTL::Coverage *)&v59, (unsigned __int16 *)((char *)a2 + (bswap32(a2[2]) >> 16)), v4, 1);
  v17 = (uint64_t (*)(_QWORD *, uint64_t))v60;
  v18 = (_QWORD *)((char *)&v59 + (*((uint64_t *)&v60 + 1) >> 1));
  if ((BYTE8(v60) & 1) != 0)
    v17 = *(uint64_t (**)(_QWORD *, uint64_t))(*v18 + v60);
  v19 = v17(v18, GlyphID);
  *((_QWORD *)this + 6) = v10;
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)this + 8) = v12;
  if (!v19)
    return 0;
  v20 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[4]) >> 16));
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) > v4)
    return 0;
  v22 = bswap32(*v20) >> 16;
  v23 = (unint64_t)&v21[2 * v22];
  v24 = (unint64_t)(v20 + 3) <= v4 ? (v4 - (unint64_t)v21) >> 2 : 0;
  v25 = v23 <= v4 && v23 >= (unint64_t)v21;
  v26 = v25 || v24 == v22;
  if (!v26)
    return 0;
  v27 = (a4 - 1);
  if ((unint64_t)&v21[2 * v27 + 2] > v4)
    return 0;
  v28 = &v20[2 * v27];
  if (!v28[2])
    return 0;
  v29 = (char *)v20 + __rev16(v28[2]);
  if ((unint64_t)(v29 + 6) > v4)
    return 0;
  v30 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[5]) >> 16));
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) > v4)
    return 0;
  result = 0;
  v32 = v19 - 1;
  v33 = bswap32(*v30);
  v34 = HIWORD(v33);
  v35 = (unint64_t)&v31[v34];
  v36 = (v4 - (unint64_t)v31) >> 1;
  if ((unint64_t)(v30 + 2) > v4)
    v36 = 0;
  v39 = v35 >= (unint64_t)v31 && v35 <= v4 || v36 == v34;
  if (v32 < HIWORD(v33) && v39)
  {
    result = 0;
    v40 = v30[v32 + 1];
    v26 = v40 == 0;
    v41 = (char *)v30 + __rev16(v40);
    v42 = v26 || (unint64_t)(v41 + 2) > v4;
    v43 = v42;
    v44 = v43 ? 0 : (unsigned __int16 *)v41;
    if (!v43)
    {
      v45 = v44 + 1;
      if (v44 >= a2 && (unint64_t)v45 <= v4)
      {
        v57 = (uint64_t)v29;
        if (*v44)
        {
          v58 = bswap32(v28[1]) >> 16;
          v47 = __rev16(*v44) - 1;
          GlyphProps = TRunGlue::GetGlyphProps(*(TRunGlue **)this, v10);
          v49 = TRunGlue::GetGlyphProps(*(TRunGlue **)this, v12);
          v50 = ((v49 ^ GlyphProps) & 0xE0000000) != 0 || v49 >> 29 == 0;
          v51 = (GlyphProps >> 28) & 1;
          if (v50)
            v51 = 1;
          if ((GlyphProps & 0xF000000) == 0)
            v51 = 1;
          v52 = (HIBYTE(GlyphProps) & 0xF) - 1;
          if (v52 >= v47)
            v52 = v47;
          v53 = v51 ? v47 : v52;
          v54 = v58 + v53 * (bswap32(a2[3]) >> 16);
          if ((unint64_t)&v45[v54 + 1] <= v4)
          {
            v55 = v44[v54 + 1];
            if (v55)
            {
              v56 = (uint64_t)v44 + __rev16(v55);
              if (v56 + 6 <= v4)
              {
                AlignMarkAnchor((TRunGlue **)this, v12, v10, v56, v57, *(TFont **)(a1 + 16), a1);
                return 1;
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL IsRightAssociative(uint64_t a1)
{
  if (qword_1ECDE7910 != -1)
    dispatch_once_f(&qword_1ECDE7910, 0, (dispatch_function_t)IsRightAssociative::$_0::__invoke);
  return MEMORY[0x186DC0D24](_MergedGlobals_21, a1) != 0;
}

CFDictionaryRef CTRunGetAttributes(CFDictionaryRef run)
{
  if (run)
    return (CFDictionaryRef)TAttributes::GetDictionary((TAttributes *)(*((_QWORD *)run + 5) + 40));
  return run;
}

CFIndex CTRunGetGlyphCount(CFIndex run)
{
  if (run)
    return TRun::GetNonDeletedGlyphCount(*(TRun **)(run + 40));
  return run;
}

void CTFontSetClientObject(uint64_t a1, void *a2)
{
  if (a1)
    TCFRef<__CTFont const*>::Retain((unint64_t *)(*(_QWORD *)(a1 + 40) + 528), a2);
}

uint64_t (*TAttributes::ApplyAttributeHandlers(TAttributes *this, const void *a2, const void *a3, void *a4))(const void *, const void *)
{
  uint64_t (*result)(const void *, const void *);

  if (qword_1ECDE7870 != -1)
    dispatch_once_f(&qword_1ECDE7870, 0, (dispatch_function_t)TAttributes::ApplyAttributeHandlers(void const*,void const*,void *)::$_0::__invoke);
  result = (uint64_t (*)(const void *, const void *))CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7868, this);
  if (result)
    return (uint64_t (*)(const void *, const void *))result(a2, a3);
  return result;
}

void TAttributes::HandleForegroundNSColorAttribute(id a1, uint64_t *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a2;
    *(_BYTE *)(v2 + 136) = *(_BYTE *)(*a2 + 136) | 2;
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v2 + 32), a1);
  }
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  int *v1;
  int *inited;

  if (!font)
    return 0.0;
  v1 = (int *)*((_QWORD *)font + 5);
  if (v1[12])
    inited = v1 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v1);
  return *((double *)inited + 2);
}

CFRange CTRunGetStringRange(CTRunRef run)
{
  uint64_t v1;
  CFIndex v2;
  CFRange result;

  if (run)
  {
    v1 = *((_QWORD *)run + 5);
    run = *(CTRunRef *)(v1 + 8);
    v2 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v2 = 0;
  }
  result.length = v2;
  result.location = (CFIndex)run;
  return result;
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  if (line)
  {
    if (context)
      TLine::DrawGlyphs(*((TLine **)line + 5), context);
  }
}

double CTFontGetAscentForSystemFontOfSize(double a1)
{
  return (double)*((int *)kFont2X + 6) * a1 / *((double *)kFont2X + 1);
}

CGAffineTransform *__cdecl CTFontGetMatrix(CGAffineTransform *__return_ptr retstr, CGAffineTransform *font)
{
  _OWORD *v2;
  __int128 v3;

  v2 = (_OWORD *)MEMORY[0x1E0C9BAA8];
  if (font && *(_QWORD *)(*(_QWORD *)&font->ty + 40))
    v2 = *(_OWORD **)(*(_QWORD *)&font->ty + 40);
  v3 = v2[1];
  *(_OWORD *)&retstr->a = *v2;
  *(_OWORD *)&retstr->c = v3;
  *(_OWORD *)&retstr->tx = v2[2];
  return font;
}

double CTFontGetDescentForSystemFontOfSize(double a1)
{
  return (double)-*((_DWORD *)kFont2X + 7) * a1 / *((double *)kFont2X + 1);
}

_QWORD *TCFBase<TFont>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TGlyphEncoder::GetClusterRange(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  TCharStreamIterator *v11;
  uint64_t ClusterRangeForRange;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v8 = a4;
  v9 = a3;
  v11 = (TCharStreamIterator *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  switch(a2)
  {
    case 0:
      if (a5 > a3 || a3 >= a5 + a6)
      {
        if (a5 < a3 + a4)
          v17 = a5;
        else
          v17 = 0;
        if (a3 <= a5)
          return v17;
        else
          return 0;
      }
      return v9;
    case 1:
      ClusterRangeForRange = TCharStream::GetClusterRangeForRange(v10, a3, a4, 2);
      goto LABEL_7;
    case 2:
      ClusterRangeForRange = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a3, 2);
LABEL_7:
      v9 = ClusterRangeForRange;
      if (ClusterRangeForRange + v13 >= a5 + a6)
        v14 = a5 + a6;
      else
        v14 = ClusterRangeForRange + v13;
      if (a5 <= ClusterRangeForRange && ClusterRangeForRange < a5 + a6)
      {
        v8 = v14 - ClusterRangeForRange;
LABEL_22:
        if (!v8)
          return v9;
LABEL_23:
        if (v8 + v9 < a5 + a6)
          TCharStreamIterator::GetChar(v11, v8 + v9);
        return v9;
      }
      if (ClusterRangeForRange > a5 || a5 >= ClusterRangeForRange + v13)
        return 0;
      v8 = v14 - a5;
      v9 = a5;
      if (v14 != a5)
        goto LABEL_23;
      return v9;
    case 3:
      v9 = a5;
      v8 = a6;
      if (!a6)
        return v9;
      goto LABEL_23;
    default:
      goto LABEL_22;
  }
}

uint64_t TUnicodeEncoder::Encode(char ***this, const __CTFont *a2, const __CFString *a3, TCharStreamIterator *a4, CFRange a5, unsigned __int16 *a6, double *a7, unsigned int *a8, double *a9, BOOL a10)
{
  uint64_t v10;
  CFIndex length;
  uint64_t v14;
  double UnscaledTrackAmount;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned int Char;
  CFIndex v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  double v36;
  int v37;
  unsigned int v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  char **v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int v59;
  __int16 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  TFont *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *ShapingGlyphsQueue;
  CFIndex v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  CFIndex v75;
  uint64_t v76;
  uint64_t v77;
  CFIndex v78;
  char v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  CFIndex location;
  uint64_t v88;
  TBaseFont *v89;
  double *v90;
  unsigned __int16 *v92;
  void **v94[3];
  uint64_t v95;
  double v96;
  double v97;
  char *v98;
  _OWORD v99[4];
  _OWORD *v100;
  uint64_t v101;

  location = a5.location;
  v101 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 5);
  v89 = *(TBaseFont **)(v10 + 400);
  if (v89)
  {
    length = a5.length;
    v14 = *(_QWORD *)(v10 + 40);
    if (v14 && *(double *)(v14 + 8) * *(double *)(v14 + 16) != 0.0 || (*(_BYTE *)v10 & 1) != 0 || *(_BYTE *)(v10 + 392))
      v86 = 1;
    else
      v86 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v89 + 712))(v89);
    UnscaledTrackAmount = TFont::GetUnscaledTrackAmount((TFont *)v10);
    TFont::GetScaledMatrix((TFont *)v10, (CGAffineTransform *)&v96);
    if (length >= 1)
    {
      v16 = 0;
      v82 = 0;
      v17 = location + length;
      v92 = a6;
      v18 = v96;
      v19 = location;
      v90 = a7;
      v84 = v17;
      while (1)
      {
        v95 = v19;
        Char = TCharStreamIterator::GetChar(a4, v19);
        if ((Char & 0xFC00) == 0xD800 && v19 + 1 < v17)
        {
          v59 = TCharStreamIterator::GetChar(a4, v19 + 1);
          if ((v59 & 0xFC00) == 0xDC00)
          {
            Char = v59 + (Char << 10) - 56613888;
            v95 = v19 + 1;
          }
        }
        v22 = *((_QWORD *)a4 + 22);
        v23 = *((_QWORD *)a4 + 23);
        v24 = (char *)*((_QWORD *)a4 + 18);
        v25 = (char *)a4 + 8;
        v26 = location;
        if (*((_QWORD *)a4 + 19))
          v25 = 0;
        if (!v24)
          v24 = v25;
        if (v24)
          v27 = (uint64_t)&v24[-2 * v22];
        else
          v27 = 0;
        if (v17 >= v23)
          v28 = *((_QWORD *)a4 + 23);
        else
          v28 = v17;
        if (v22 > location || location >= v23)
        {
          v30 = v28 - v22;
          if (v22 < v17)
            v31 = *((_QWORD *)a4 + 22);
          else
            v31 = 0;
          if (v22 >= v17)
            v30 = 0;
          if (location <= v22)
            v26 = v31;
          else
            v26 = 0;
          if (location <= v22)
            v29 = v30;
          else
            v29 = 0;
        }
        else
        {
          v29 = v28 - location;
        }
        v32 = v92;
        v88 = v29;
        v33 = v26 + v29;
        if ((v86 & 1) != 0)
        {
          v34 = v19;
          v19 = v26 + v29;
          goto LABEL_92;
        }
        v85 = v27;
        v35 = (void **)TBaseFont::AcquireBMPDataCache(v89);
        if (v35)
          break;
        v34 = v19;
LABEL_91:
        v19 = v33;
        v27 = v85;
LABEL_92:
        if (v19 - v34 >= 1)
        {
          *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v99[2] = v61;
          v99[3] = v61;
          v99[0] = v61;
          v99[1] = v61;
          v96 = 0.0;
          v97 = 0.0;
          v98 = 0;
          v100 = v99;
          if (!v27)
            v27 = TCharStream::LazyCopyChars(*(_QWORD **)a4, v26, v88) - 2 * v26;
          v62 = v27 + 2 * v34;
          (*(void (**)(TBaseFont *, uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v89 + 664))(v89, v62, &v32[v34], v19 - v34);
          TFont::GetUnsummedAdvancesForGlyphs(v10, (uint64_t)&v32[v34], &v90[v34], 1, v19 - v34, 0, 0);
          bzero(&a8[v34], 4 * (v19 - v34));
          v63 = v62;
          a7 = v90;
          v32 = v92;
          v16 |= TUnicodeEncoder::EncodePortion(this, v34, v63, v19 - v34, (uint64_t)v89, a10, (uint64_t)v92, (uint64_t)v90, 1, (uint64_t)a8, a9, 0);
          v94[0] = (void **)&v96;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](v94);
          v17 = v84;
          if ((v16 & 1) != 0)
            goto LABEL_109;
LABEL_98:
          v64 = TBaseFont::GetShapingType(v89) == 2;
          v65 = (TFont *)v10;
          v66 = v26;
          if (!v64)
            goto LABEL_144;
          v67 = *(_QWORD *)(v10 + 400);
          if ((*(_DWORD *)(v67 + 184) & 0x400) == 0)
          {
            TBaseFont::DetermineFontFlags(*(TBaseFont **)(v10 + 400), 1024);
            v66 = v26;
            v65 = (TFont *)v10;
          }
          if ((*(_DWORD *)(v67 + 180) & 0x400) != 0)
          {
LABEL_144:
            if (*((_QWORD *)v65 + 40))
            {
              v16 |= TFont::NeedsShapingForGlyphs(v65, &v32[v66], v88, a3);
            }
            else
            {
              if ((v82 & 1) == 0)
              {
                ShapingGlyphsQueue = GetShapingGlyphsQueue();
                CFRetain(a2);
                dispatch_async_f(ShapingGlyphsQueue, a2, (dispatch_function_t)InitShapingGlyphsOnQueue(__CTFont const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::__invoke);
                v16 |= 1u;
              }
              v82 = 1;
            }
          }
          else
          {
            v16 |= 1u;
          }
          goto LABEL_109;
        }
        v19 = v34;
        if ((v16 & 1) == 0)
          goto LABEL_98;
LABEL_109:
        if (v19 >= v17)
          return (char)v16;
      }
      v94[1] = 0;
      v94[2] = (void **)0xAAAAAAAAFFFFFFFFLL;
      v36 = 0.0;
      v83 = (os_unfair_lock_s *)v35;
      v94[0] = v35;
      while (1)
      {
        if (Char >> 11 >= 0x1B)
        {
          if (Char < 0xE000)
            goto LABEL_89;
          if (Char >> 9 >= 0x7F && (Char >> 4 < 0xFE1 || Char - 917760 <= 0xEF))
            break;
        }
        *a9 = v36 + *a9;
        TBMPDataCache::Iterator::GetDataForCharacter((TBMPDataCache::Iterator *)v94, Char, (uint64_t)&v96);
        v37 = LOWORD(v96);
        v38 = v98;
        v39 = -0.0;
        if (v97 != 0.0)
          v39 = UnscaledTrackAmount;
        v40 = v97 + v39;
        v41 = v16 | 8;
        if (LOWORD(v96))
          v41 = v16;
        if ((v98 & 0x50) != 0)
          v41 |= 4u;
        if ((v98 & 0x20) != 0)
        {
          v40 = 0.0;
          v42 = v41 | 0x10;
        }
        else
        {
          v42 = v41;
        }
        v43 = v18 * v40;
        v32[v19] = LOWORD(v96);
        a7[v19] = v18 * v40;
        a8[v19] = v38 & 0xFFFF7FFF;
        if (v19 < v95 && v95 < v17)
        {
          ++v19;
          if (v37)
          {
            v32[v19] = -1;
            a7[v19] = 0.0;
            v44 = *this;
            v45 = (*this)[1];
            v46 = (*this)[2];
            if (v45 >= v46)
            {
              v48 = *v44;
              v49 = (v45 - *v44) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                abort();
              v51 = v46 - v48;
              if (v51 >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              *((_QWORD *)&v99[0] + 1) = v44 + 3;
              if (v52)
              {
                v53 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(v44 + 3), v52);
                v48 = *v44;
                v45 = v44[1];
              }
              else
              {
                v53 = 0;
              }
              v54 = (uint64_t *)&v53[8 * v49];
              *v54 = v19;
              if (v45 == v48)
              {
                v56 = &v53[8 * v49];
              }
              else
              {
                v55 = v45;
                v56 = &v53[8 * v49];
                do
                {
                  v57 = *((_QWORD *)v55 - 1);
                  v55 -= 8;
                  *((_QWORD *)v56 - 1) = v57;
                  v56 -= 8;
                }
                while (v55 != v48);
              }
              v47 = (char *)(v54 + 1);
              *v44 = v56;
              v96 = *(double *)&v48;
              v97 = *(double *)&v48;
              v44[1] = (char *)(v54 + 1);
              v98 = v45;
              v58 = v44[2];
              v44[2] = &v53[8 * v52];
              *(_QWORD *)&v99[0] = v58;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v96);
            }
            else
            {
              *(_QWORD *)v45 = v19;
              v47 = v45 + 8;
            }
            v44[1] = v47;
            a7 = v90;
            v32 = v92;
          }
        }
        v16 = v42 | (v38 >> 14) & 2;
        v36 = v43 + 0.0;
        if (++v19 >= v33)
          goto LABEL_89;
        v95 = v19;
        Char = TCharStreamIterator::GetFullChar(a4, &v95, 0);
      }
      if (v19 < 1)
      {
LABEL_89:
        v34 = v19;
        goto LABEL_90;
      }
      v60 = TCharStreamIterator::GetChar(a4, v19 - 1);
      if (v19 != 1 && (v60 & 0xFC00) == 0xDC00)
      {
        v34 = v19 - 2;
        if ((TCharStreamIterator::GetChar(a4, v19 - 2) & 0xFC00) == 0xD800)
          goto LABEL_87;
        TCharStreamIterator::GetChar(a4, v19 - 1);
      }
      v34 = v19 - 1;
LABEL_87:
      if (v34 >= location)
        v36 = v36 - a7[v34];
      else
        v34 = v19;
      v32 = v92;
      v69 = *((_QWORD *)a4 + 22);
      v70 = *((_QWORD *)a4 + 23);
      v71 = (char *)*((_QWORD *)a4 + 18);
      v72 = (char *)a4 + 8;
      if (*((_QWORD *)a4 + 19))
        v72 = 0;
      if (!v71)
        v71 = v72;
      if (v71)
        v73 = &v71[-2 * v69];
      else
        v73 = 0;
      if (v17 >= v70)
        v74 = *((_QWORD *)a4 + 23);
      else
        v74 = v17;
      v75 = location;
      if (v69 > location || location >= v70)
      {
        v77 = v74 - v69;
        if (v69 < v17)
          v78 = *((_QWORD *)a4 + 22);
        else
          v78 = 0;
        if (v69 >= v17)
          v77 = 0;
        if (location <= v69)
          v75 = v78;
        else
          v75 = 0;
        if (location <= v69)
          v76 = v77;
        else
          v76 = 0;
      }
      else
      {
        v76 = v74 - location;
      }
      v85 = (uint64_t)v73;
      v88 = v76;
      v26 = v75;
      v33 = v75 + v76;
LABEL_90:
      os_unfair_lock_unlock(v83 + 2);
      *a9 = v36 + *a9;
      goto LABEL_91;
    }
    LOBYTE(v16) = 0;
  }
  else
  {
    LOBYTE(v16) = 8;
  }
  return (char)v16;
}

uint64_t TBMPDataCache::PageForCharacter(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t *v4;
  TBMPDataCachePage *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;

  v8 = a2 >> 8;
  v9 = &v8;
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&this[4], &v8, (uint64_t)&std::piecewise_construct, &v9)+ 3;
  if (*v4)
    return *v4;
  os_unfair_lock_unlock(this + 2);
  v6 = (TBMPDataCachePage *)operator new(0x680uLL, MEMORY[0x1E0DE4E10]);
  v7 = (uint64_t)v6;
  if (!HIWORD(a2))
  {
    if (v6)
    {
      TBMPDataCachePage::TBMPDataCachePage(v6, *(const TBaseFont **)&this->_os_unfair_lock_opaque, a2);
      goto LABEL_9;
    }
LABEL_11:
    os_unfair_lock_lock_with_options();
    return 0;
  }
  if (!v6)
    goto LABEL_11;
  TSupplementaryDataCachePage::TSupplementaryDataCachePage(v6, *(const TBaseFont **)&this->_os_unfair_lock_opaque);
LABEL_9:
  os_unfair_lock_lock_with_options();
  if (*v4)
  {
    v9 = (unsigned int *)(v7 + 1568);
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v9);
    MEMORY[0x186DC03AC](v7, 0x1010C40E4D70334);
  }
  else
  {
    std::unique_ptr<TUnicodeDataCachePage>::reset[abi:nn180100](v4, v7);
  }
  return *v4;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0xAAAAAAAAAAAAAAAALL;
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

unint64_t TBaseFont::AcquireBMPDataCache(TBaseFont *this)
{
  unint64_t *v1;
  unint64_t v2;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v1 = (unint64_t *)((char *)this + 208);
  v2 = atomic_load((unint64_t *)this + 26);
  if (v2)
  {
LABEL_2:
    os_unfair_lock_lock_with_options();
    return v2;
  }
  v5 = operator new(0x38uLL, MEMORY[0x1E0DE4E10]);
  if (v5)
  {
    v2 = (unint64_t)v5;
    *(_QWORD *)v5 = this;
    v5[2] = 0;
    *((_OWORD *)v5 + 1) = 0u;
    v6 = (uint64_t)(v5 + 4);
    *(_OWORD *)(v2 + 32) = 0u;
    *(_DWORD *)(v2 + 48) = 1065353216;
    while (1)
    {
      v7 = __ldaxr(v1);
      if (v7)
        break;
      if (!__stlxr(v2, v1))
        goto LABEL_2;
    }
    __clrex();
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::~__hash_table(v6);
    MEMORY[0x186DC03AC](v2, 0x10E0C4057E07A5FLL);
    v2 = v7;
    goto LABEL_2;
  }
  do
  {
    v2 = __ldaxr(v1);
    if (v2)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(0, v1));
  return 0;
}

BOOL TScriptRun::NextRun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  TLine *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t RunWithCharIndex;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  TCharStreamIterator *v14;
  uint64_t FullChar;
  int Script;
  int v17;
  int32_t IntPropertyValue;
  int32_t v19;
  char *v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v53;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
  if (v4 >= *(_QWORD *)a1)
  {
    v53 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
    v8 = v4;
LABEL_10:
    v50 = v4;
    *(_QWORD *)(a1 + 24) = 0;
    if (v8 >= v3)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (TCharStreamIterator *)(a1 + 56);
      v51 = (unint64_t *)(a1 + 512);
      do
      {
        FullChar = TCharStreamIterator::GetFullChar(v14, &v53, 0);
        Script = uscript_getScript();
        v17 = Script;
        if (Script <= 1)
        {
          if (*(_BYTE *)(a1 + 40))
          {
            v17 = *(_DWORD *)(a1 + 36);
          }
          else if ((a2 & 0xFF00000000) != 0)
          {
            v17 = a2;
          }
          else
          {
            v17 = Script;
          }
        }
        IntPropertyValue = u_getIntPropertyValue(FullChar, UCHAR_BIDI_PAIRED_BRACKET_TYPE);
        v19 = IntPropertyValue;
        if (IntPropertyValue)
        {
          if (IntPropertyValue == 1)
          {
            ++*(_QWORD *)(a1 + 24);
            v20 = *(char **)(a1 + 256);
            v21 = *(_QWORD *)(a1 + 264);
            if ((unint64_t)v20 >= v21)
            {
              v28 = *(char **)(a1 + 248);
              v29 = (v20 - v28) >> 3;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 61)
                abort();
              if ((uint64_t)(v21 - (_QWORD)v28) >> 2 > v30)
                v30 = (uint64_t)(v21 - (_QWORD)v28) >> 2;
              if (v21 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              v32 = (char *)*v51;
              v33 = *v51 + 8 * v31;
              if (v33 <= (unint64_t)v51)
              {
                *v51 = v33;
              }
              else
              {
                if (v31 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v49 = v31;
                v32 = (char *)operator new(8 * v31);
                v31 = v49;
              }
              v34 = &v32[8 * v29];
              *(_DWORD *)v34 = FullChar;
              *((_DWORD *)v34 + 1) = v13;
              v35 = v34;
              if (v20 == v28)
              {
                v14 = (TCharStreamIterator *)(a1 + 56);
              }
              else
              {
                v14 = (TCharStreamIterator *)(a1 + 56);
                do
                {
                  v36 = *((_QWORD *)v20 - 1);
                  v20 -= 8;
                  *((_QWORD *)v35 - 1) = v36;
                  v35 -= 8;
                }
                while (v20 != v28);
                v20 = *(char **)(a1 + 248);
                v21 = *(_QWORD *)(a1 + 264);
              }
              v22 = v34 + 8;
              *(_QWORD *)(a1 + 248) = v35;
              *(_QWORD *)(a1 + 256) = v34 + 8;
              *(_QWORD *)(a1 + 264) = &v32[8 * v31];
              if (v20)
              {
                if (a1 + 272 <= (unint64_t)v20 && v51 > (unint64_t *)v20)
                {
                  if (v21 == *v51)
                    *v51 = (unint64_t)v20;
                }
                else
                {
                  operator delete(v20);
                }
                v14 = (TCharStreamIterator *)(a1 + 56);
              }
            }
            else
            {
              *(_DWORD *)v20 = FullChar;
              *((_DWORD *)v20 + 1) = v13;
              v22 = v20 + 8;
            }
            *(_QWORD *)(a1 + 256) = v22;
          }
          else
          {
            v23 = MEMORY[0x186DC0B08](FullChar);
            v24 = *(_DWORD **)(a1 + 248);
            v25 = *(_DWORD **)(a1 + 256);
            if (v24 != v25)
            {
              v26 = v25 - 2;
              while (*v26 != v23)
              {
                v27 = *(_QWORD *)(a1 + 24);
                if (v27)
                  *(_QWORD *)(a1 + 24) = v27 - 1;
                *(_QWORD *)(a1 + 256) = v26;
                v12 = v26 == v24;
                v26 -= 2;
                if (v12)
                  goto LABEL_56;
              }
              v17 = v26[1];
            }
          }
        }
LABEL_56:
        if (v13 == v17 || v13 < 2 || v17 < 2)
        {
          if (v13 <= 1 && v17 >= 2)
          {
            v40 = *(_QWORD *)(a1 + 24);
            if (v40)
            {
              v41 = (int *)(*(_QWORD *)(a1 + 256) - 4);
              v42 = -8 * v40;
              do
              {
                *v41 = v17;
                v41 -= 2;
                v42 += 8;
              }
              while (v42);
            }
            *(_QWORD *)(a1 + 24) = 0;
            v13 = v17;
          }
        }
        else if (!uscript_hasScript())
        {
          break;
        }
        if (v19 == 2)
        {
          v44 = *(_QWORD *)(a1 + 256);
          if (*(_QWORD *)(a1 + 248) != v44)
          {
            v45 = *(_QWORD *)(a1 + 24);
            if (v45)
              *(_QWORD *)(a1 + 24) = v45 - 1;
            *(_QWORD *)(a1 + 256) = v44 - 8;
          }
        }
        v8 = v53 + 1;
        v53 = v8;
      }
      while (v8 < *(_QWORD *)a1);
    }
    *(_QWORD *)(a1 + 8) = v50;
    *(_QWORD *)(a1 + 16) = v8 - v50;
    v46 = ScriptTagForScriptCode(v13);
    *(_DWORD *)(a1 + 32) = v46;
    if (v46 != 1145457748)
    {
      *(_DWORD *)(a1 + 36) = v13;
      *(_BYTE *)(a1 + 40) = 1;
    }
    v4 = v50;
  }
  else
  {
    v5 = *(TLine **)(a1 + 48);
    v6 = 2863311360;
    v7 = 1;
    v8 = v4;
    while (1)
    {
      RunWithCharIndex = TLine::FindRunWithCharIndex(v5, v8, 1);
      v5 = *(TLine **)(a1 + 48);
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8 * RunWithCharIndex) + 40);
      v11 = *(unsigned int *)(v10 + 304);
      if ((_DWORD)v11 == -1)
        break;
      if ((v7 & 1) != 0 || (v12 = (_DWORD)v6 == (_DWORD)v11, v11 = v6, v12))
      {
        v7 = 0;
        v8 = *(_QWORD *)(v10 + 16) + *(_QWORD *)(v10 + 8);
        v6 = v11;
        if (v8 < *(_QWORD *)a1)
          continue;
      }
      goto LABEL_84;
    }
    v53 = v8;
    if ((v7 & 1) != 0)
    {
      v3 = *(_QWORD *)a1;
      goto LABEL_10;
    }
LABEL_84:
    v47 = ScriptTagForScriptCode(v6);
    *(_DWORD *)(a1 + 32) = v47;
    if (v47 != 1145457748)
    {
      *(_DWORD *)(a1 + 36) = v6;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v8 - v4;
  }
  return v4 < v8;
}

uint64_t TCharStreamIterator::GetFullChar(TCharStreamIterator *this, uint64_t *a2, CFRange *a3)
{
  uint64_t Char;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CFIndex v11;
  int v12;

  Char = TCharStreamIterator::GetChar(this, *a2);
  v7 = Char;
  if ((Char & 0xF800) != 0xD800)
    goto LABEL_13;
  if ((Char & 0xFC00) != 0xDC00)
  {
    if ((Char & 0xFC00) == 0xD800)
    {
      v8 = *a2 + 1;
      if (v8 < *(_QWORD *)(*(_QWORD *)this + 16))
      {
        v9 = TCharStreamIterator::GetChar(this, *a2 + 1);
        if ((v9 & 0xFC00) == 0xDC00)
        {
          v7 = (v9 + ((_DWORD)v7 << 10) - 56613888);
          if (a3)
          {
            a3->location = *a2;
            a3->length = 2;
          }
          *a2 = v8;
          return v7;
        }
      }
    }
    goto LABEL_13;
  }
  v10 = *a2;
  if (*a2 <= *(_QWORD *)(*(_QWORD *)this + 8)
    || (v11 = v10 - 1, v12 = TCharStreamIterator::GetChar(this, v10 - 1), (v12 & 0xFC00) != 0xD800))
  {
LABEL_13:
    if (a3)
    {
      a3->location = *a2;
      a3->length = 1;
    }
    return v7;
  }
  v7 = (v7 + (v12 << 10) - 56613888);
  if (a3)
  {
    a3->location = v11;
    a3->length = 2;
  }
  return v7;
}

_QWORD *TSimpleTracking::TrackRun(_QWORD *this, TRun *a2, double a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;

  v4 = this;
  v6 = this[26];
  v5 = this[27];
  v7 = *(_QWORD *)(v5 + 32);
  if (v7 || (v10 = *(_QWORD *)(v5 + 24)) == 0)
  {
    v8 = 0;
    v9 = v7 + 16 * this[25];
  }
  else
  {
    v9 = v10 + 8 * this[25];
    v8 = 1;
  }
  if (v6 >= 1)
  {
    v11 = 0;
    v12 = v9;
    do
    {
      v13 = v4[27];
      v14 = v4[25];
      if (*(__int16 *)(*(_QWORD *)(v13 + 16) + 2 * v14 + 2 * v11) != -1
        && (*(_DWORD *)(*(_QWORD *)(v13 + 40) + 4 * v14 + 4 * v11) & 0x20) == 0)
      {
        if (v8)
        {
          v15 = (double *)(v9 + 8 * v11);
          v16 = 0;
        }
        else
        {
          v16 = *(_QWORD *)(v12 + 8);
          v15 = (double *)v12;
        }
        v17 = *v15 + a3;
        if (v17 < 0.0)
          v17 = 0.0;
        this = (_QWORD *)TStorageRange::SetAdvance((TStorageRange *)(v4 + 24), v11, *(CGSize *)(&v16 - 1));
      }
      ++v11;
      v12 += 16;
    }
    while (v6 != v11);
  }
  return this;
}

uint64_t TStorageRange::SetAdvance(TStorageRange *this, uint64_t a2, CGSize a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  v4 = v3[4];
  if (v4 || (v7 = v3[3]) == 0)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = (double *)(v4 + 16 * v5 + 16 * a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 1);
    v6 = (double *)(v7 + 8 * v5 + 8 * a2);
  }
  *(double *)this = *(double *)this + a3.width - *v6;
  return objc_msgSend(v3, "setAdvance:atIndex:", v5 + a2);
}

uint64_t TASCIIEncoder::Encode(TASCIIEncoder *this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int Char;
  __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  double v20;
  _WORD *inited;
  double *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
  v4 = atomic_load((unint64_t *)(v3 + 56));
  v5 = *(unint64_t **)(v4 + 40);
  if (!v5[50])
    goto LABEL_34;
  v6 = (unint64_t *)atomic_load(v5 + 48);
  if (!v6)
  {
    TFont::InitASCIIDataCache((TFont *)v5);
    v6 = v7;
  }
  if (v6)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = (_QWORD *)*((_QWORD *)this + 1);
      v11 = *((_QWORD *)this + 2);
      v12 = v10[5];
      v13 = v10[6];
      v14 = v8 + v11;
      v28 = v6 + 1;
      v29 = v10[2];
      v27 = v6 + 49;
      v15 = 0.0;
      while (1)
      {
        *(_QWORD *)(v13 + 8 * v11) = v11;
        Char = TCharStreamIterator::GetChar(*(TCharStreamIterator **)this, v11);
        v17 = Char;
        v18 = Char - 32;
        if (Char < 0x20)
        {
          if ((unsigned __int16)(Char - 14) < 0xFFFBu)
            goto LABEL_26;
          inited = (_WORD *)atomic_load(v6 + 242);
          if (!inited)
            inited = TASCIIDataCache::InitC0Whitespace((TASCIIDataCache *)v6);
          v22 = (double *)&inited[8 * (unsigned __int16)(v17 - 9)];
          v19 = *(_QWORD *)v22;
          v20 = v22[1];
        }
        else
        {
          if (Char > 0x7F)
          {
            if ((unsigned __int16)((unsigned __int16)(Char - 256) >> 5) < 0x7FDu)
            {
              LODWORD(v19) = 0;
              v20 = 0.0;
              goto LABEL_19;
            }
            v18 = Char - 64;
          }
          v23 = atomic_load(v6 + 241);
          if (!v23)
            v23 = TASCIIDataCache::InitProps((TFont **)v6);
          v20 = *(double *)&v27[v18];
          LODWORD(v19) = *((unsigned __int16 *)v28 + v18) | (*(unsigned __int16 *)(v23 + 2 * v18) << 16);
        }
LABEL_19:
        if ((_WORD)v19)
        {
          if ((v19 & 0x40000) != 0)
            *(_BYTE *)(v3 + 225) |= 1u;
          v24 = WORD1(v19) & 0x7FFF;
          if (a2)
          {
            v25 = v9 | 1;
            if ((int)v19 < 0)
              v24 = WORD1(v19) & 0x7FEF | 0x10;
            else
              v25 = v9;
          }
          else
          {
            v25 = (v19 >> 20) & 1 | v9;
          }
          v9 = (v24 >> 1) & 0x10 | v25;
          *(_WORD *)(v29 + 2 * v11) = v19;
          *(_DWORD *)(v12 + 4 * v11) = v24;
          objc_msgSend(*((id *)this + 1), "setAdvance:atIndex:", v11, v20, 0.0, v27, v28);
          v15 = v15 + v20;
          goto LABEL_29;
        }
LABEL_26:
        v9 |= 8u;
LABEL_29:
        if (++v11 >= v14)
          goto LABEL_32;
      }
    }
    LOBYTE(v9) = 0;
    v15 = 0.0;
LABEL_32:
    *(double *)(v3 + 192) = v15;
  }
  else
  {
LABEL_34:
    LOBYTE(v9) = 8;
  }
  return (char)v9;
}

uint64_t TCharStreamIterator::GetChar(TCharStreamIterator *this, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v3 = (char *)this + 8;
  v4 = *((_QWORD *)this + 22);
  v5 = __OFSUB__(a2, v4);
  v6 = a2 - v4;
  if (v6 < 0 != v5 || *((_QWORD *)this + 23) <= a2)
    return (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)this + 80))(*(_QWORD *)this, v3);
  v7 = *((_QWORD *)this + 18);
  if (v7)
  {
    return *(unsigned __int16 *)(v7 + 2 * v6);
  }
  else
  {
    v10 = *((_QWORD *)this + 19);
    if (v10)
      return (unsigned __int16)*(char *)(v10 + v6);
    else
      return *(unsigned __int16 *)&v3[2 * v6];
  }
}

uint64_t TCharStreamCFString::GetCharacterAtIndex(TCharStreamCFString *this, CFStringInlineBuffer *buffer, int64_t a3)
{
  const __CFString *v5;
  CFIndex v6;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  const UniChar *directUniCharBuffer;
  CFIndex length;
  CFIndex v11;
  const UniChar *v12;
  const char *directCStringBuffer;
  CFIndex bufferedRangeStart;
  CFIndex v17;
  CFRange v18;

  if (!buffer->theString)
  {
    v5 = (const __CFString *)atomic_load((unint64_t *)this + 4);
    v6 = *((_QWORD *)this + 2);
    buffer->theString = v5;
    buffer->rangeToBuffer.location = 0;
    buffer->rangeToBuffer.length = v6;
    CharactersPtr = CFStringGetCharactersPtr(v5);
    buffer->directUniCharBuffer = CharactersPtr;
    if (CharactersPtr)
    {
      buffer->directCStringBuffer = 0;
LABEL_5:
      length = buffer->rangeToBuffer.length;
      buffer->bufferedRangeStart = 0;
      buffer->bufferedRangeEnd = length;
      goto LABEL_6;
    }
    CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
    directUniCharBuffer = buffer->directUniCharBuffer;
    buffer->directCStringBuffer = CStringPtr;
    buffer->bufferedRangeStart = 0;
    buffer->bufferedRangeEnd = 0;
    if ((unint64_t)directUniCharBuffer | (unint64_t)CStringPtr)
      goto LABEL_5;
  }
LABEL_6:
  if (a3 < 0)
    return 0;
  v11 = buffer->rangeToBuffer.length;
  if (v11 <= a3)
  {
    return 0;
  }
  else
  {
    v12 = buffer->directUniCharBuffer;
    if (v12)
    {
      return v12[buffer->rangeToBuffer.location + a3];
    }
    else
    {
      directCStringBuffer = buffer->directCStringBuffer;
      if (directCStringBuffer)
      {
        return (unsigned __int16)directCStringBuffer[buffer->rangeToBuffer.location + a3];
      }
      else
      {
        if (buffer->bufferedRangeEnd <= a3
          || (bufferedRangeStart = buffer->bufferedRangeStart, bufferedRangeStart > a3))
        {
          v17 = a3 - 4;
          if ((unint64_t)a3 < 4)
            v17 = 0;
          if (v17 + 64 < v11)
            v11 = v17 + 64;
          buffer->bufferedRangeStart = v17;
          buffer->bufferedRangeEnd = v11;
          v18.location = buffer->rangeToBuffer.location + v17;
          v18.length = v11 - v17;
          CFStringGetCharacters(buffer->theString, v18, buffer->buffer);
          bufferedRangeStart = buffer->bufferedRangeStart;
        }
        return buffer->buffer[a3 - bufferedRangeStart];
      }
    }
  }
}

void TBaseFont::DetermineFontFlags(TBaseFont *this, int a2)
{
  int v2;
  const __CFString *v4;
  int v5;
  int v6;
  const __CFString *v7;
  int v8;
  const __CFString *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const void *Value;
  CFTypeID v18;
  id v19;
  CFRange v20;

  v2 = a2;
  v4 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  if ((a2 & 0x3D2) != 0)
  {
    if (v4 == CFSTR("LastResort"))
      goto LABEL_5;
    if (!v4)
    {
      v5 = 0;
      if (!IsSystemFontPostScriptName(0))
        goto LABEL_18;
      goto LABEL_16;
    }
    if (CFEqual(v4, CFSTR("LastResort")))
    {
LABEL_5:
      v2 |= 8u;
      v5 = 10;
    }
    else
    {
      v5 = 0;
    }
    if ((IsSystemFontPostScriptName(v4) & 1) == 0)
    {
      if (v4
        && (CFStringHasPrefix(v4, CFSTR("Batang"))
         || CFStringHasPrefix(v4, CFSTR("Dotum"))
         || CFStringHasPrefix(v4, CFSTR("Gulim"))
         || CFStringHasPrefix(v4, CFSTR("Gungsuh"))))
      {
        v5 |= 0x80u;
      }
      goto LABEL_18;
    }
LABEL_16:
    v5 |= HIBYTE(*((_DWORD *)this + 45)) & 0x10;
    if (IsPingFangPostScriptName(v4))
      v5 |= 0x100u;
LABEL_18:
    v7 = _CTGetEmojiFontName(1);
    if (v7 == v4 || v4 && v7 && CFEqual(v4, v7))
    {
      v8 = 576;
    }
    else
    {
      v9 = _CTGetEmojiFontName(0);
      if (v9 != v4 && (!v4 || !v9 || !CFEqual(v4, v9)))
        goto LABEL_29;
      v8 = 64;
    }
    v5 |= v8;
LABEL_29:
    if ((v5 & 0x240) != 0)
      v6 = v5 | 0x10;
    else
      v6 = v5;
    v2 |= 0x3D2u;
    if ((v2 & 8) == 0)
      goto LABEL_42;
    goto LABEL_33;
  }
  v6 = 0;
  if ((a2 & 8) == 0)
    goto LABEL_42;
LABEL_33:
  if (!v4
    || !CFStringGetLength(v4)
    || CFStringGetCharacterAtIndex(v4, 0) == 46
    || IsInvisibleSystemFontName(v4)
    || IsInvisibleSystemFontPostScriptNameWithoutPrecedingPeriod(v4))
  {
    v6 |= 8u;
    if ((v6 & 8) != 0)
      goto LABEL_42;
    goto LABEL_39;
  }
  v19 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyMetadata(this, 0, &v19);
  v14 = (void *)atomic_load((unint64_t *)&v19);
  v15 = v14;
  if (v15)
  {
    v16 = v15;
    Value = CFDictionaryGetValue(v15, CFSTR("MTD_Typeface_info_PlatformDelivery"));

    if (Value)
    {
      v18 = CFGetTypeID(Value);
      if (v18 == CFArrayGetTypeID())
      {
        v20.length = CFArrayGetCount((CFArrayRef)Value);
        v20.location = 0;
        if (CFArrayContainsValue((CFArrayRef)Value, v20, CFSTR("iOS-invisible")))
          v6 |= 8u;
      }
    }
  }
  else
  {

  }
  if ((v6 & 8) == 0)
  {
LABEL_39:
    v19 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 200))(&v19, this);
    atomic_load((unint64_t *)&v19);
    if (FSFontIsHidden())
      v6 |= 8u;

  }
LABEL_42:
  if ((v2 & 0x400) != 0 && (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 760))(this) == 2)
    v6 |= 0x400u;
  v10 = (unsigned int *)((char *)this + 180);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 | v6, v10));
  v12 = (unsigned int *)((char *)this + 184);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 | v2, v12));
}

const __CFString *_CTGetEmojiFontName(int a1)
{
  if (a1)
    return CFSTR(".AppleColorEmojiUI");
  else
    return CFSTR("AppleColorEmoji");
}

const __CFString *IsSystemFontPostScriptName(const __CFString *key)
{
  const __CFString *v1;

  if (key)
  {
    v1 = key;
    if (!qword_1ECDE7DE0)
      qword_1ECDE7DE0 = _sl_dlopen();
    if (qword_1ECDE7DE0
      && getFSFontIsOverriddenSystemFontNameSymbolLoc()
      && (SoftLinked__FSFontIsOverriddenSystemFontName(v1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      if (qword_1ECDE7DA8 != -1)
        dispatch_once(&qword_1ECDE7DA8, &__block_literal_global_13);
      key = (const __CFString *)qword_1ECDE7DA0;
      if (qword_1ECDE7DA0)
        return (const __CFString *)(CFDictionaryContainsKey((CFDictionaryRef)qword_1ECDE7DA0, v1) != 0);
    }
  }
  return key;
}

unint64_t TASCIIDataCache::InitProps(TFont **this)
{
  _OWORD *v2;
  unint64_t v3;
  __int16 *v4;
  TFont *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (_OWORD *)operator new();
  v3 = (unint64_t)v2;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v4 = &TASCIIDataCache::kSpecialCharacterFlags;
  v2[22] = 0u;
  v2[23] = 0u;
  do
  {
    *((_WORD *)v2 + (unsigned __int16)*v4) |= v4[1];
    v4 += 2;
  }
  while (v4 != (__int16 *)&jpt_184834D94);
  v5 = *this;
  if (!*((_QWORD *)*this + 40))
  {
    TFont::InitShapingGlyphs(v5);
    v5 = *this;
  }
  v16[0] = &off_1E15E0328;
  v16[1] = v3;
  v17 = v16;
  TFont::IterateShapingGlyphs((uint64_t)v5, (uint64_t)(this + 1), 192, 0, (uint64_t)v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (uint64_t)*this;
  v14[0] = &off_1E15E0370;
  v14[1] = v3;
  v15 = v14;
  TFont::IterateShapingGlyphs(v8, (uint64_t)(this + 1), 192, 1, (uint64_t)v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_14;
  }
  if (v15)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_WORD *)(v3 + 218) = 32;
  v11 = (unint64_t *)(this + 241);
  while (1)
  {
    v12 = __ldaxr(v11);
    if (v12)
      break;
    if (!__stlxr(v3, v11))
      return v3;
  }
  __clrex();
  MEMORY[0x186DC03AC](v3, 0x1000C400F47AF14);
  return v12;
}

uint64_t ForEachIndex(uint64_t result, int a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;

  if (a2)
  {
    v6 = result;
    if (result >= 1)
    {
      v7 = 0;
      while (1)
      {
        v13 = v7;
        v8 = *(_QWORD *)(a5 + 24);
        if (!v8)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v13);
        if (v6 == ++v7)
          return result;
      }
LABEL_10:
      v12 = std::__throw_bad_function_call[abi:nn180100]();
      return TFont::IterateShapingGlyphs(v12);
    }
  }
  else
  {
    while (a3 != a4)
    {
      v13 = *a3;
      v11 = *(_QWORD *)(a5 + 24);
      if (!v11)
        goto LABEL_10;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v13);
      ++a3;
    }
  }
  return result;
}

uint64_t TFont::IterateShapingGlyphs(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  _QWORD *v15;
  uint64_t v16;

  v7 = 320;
  if (a4)
    v7 = 312;
  v8 = atomic_load((unint64_t *)(result + v7));
  if (v8 == -1)
  {
    if (a3 >= 1)
    {
      v12 = 0;
      while (1)
      {
        v16 = v12;
        v13 = *(_QWORD *)(a5 + 24);
        if (!v13)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v16);
        if (a3 == ++v12)
          return result;
      }
LABEL_16:
      v14 = std::__throw_bad_function_call[abi:nn180100]();
      return std::__function::__func<TASCIIDataCache::InitProps(void)::$_1,std::allocator<TASCIIDataCache::InitProps(void)::$_1>,void ()(long)>::operator()(v14, v15);
    }
  }
  else if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      if (((*(unsigned __int8 *)(v8 + ((unint64_t)*(unsigned __int16 *)(a2 + 2 * i) >> 3)) >> (*(_WORD *)(a2 + 2 * i) & 7)) & 1) != 0)
      {
        v16 = i;
        v11 = *(_QWORD *)(a5 + 24);
        if (!v11)
          goto LABEL_16;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v16);
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<TASCIIDataCache::InitProps(void)::$_1,std::allocator<TASCIIDataCache::InitProps(void)::$_1>,void ()(long)>::operator()(uint64_t result, _QWORD *a2)
{
  *(_WORD *)(*(_QWORD *)(result + 8) + 2 * *a2) |= 0x8000u;
  return result;
}

uint64_t std::__function::__func<TASCIIDataCache::InitProps(void)::$_0,std::allocator<TASCIIDataCache::InitProps(void)::$_0>,void ()(long)>::operator()(uint64_t result, _QWORD *a2)
{
  *(_WORD *)(*(_QWORD *)(result + 8) + 2 * *a2) |= 0x10u;
  return result;
}

void TGlyphEncoder::AppendRunClone(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  int64x2_t *v6;
  unint64_t v7;
  void *v8;
  id v9;
  id v10[5];

  if ((a3 & 0x8000000000000000) == 0 && a4 > a3)
  {
    v10[3] = v4;
    v10[4] = v5;
    v6 = *(int64x2_t **)(a1 + 200);
    v7 = atomic_load(a2);
    (*(void (**)(id *__return_ptr))(v7 + 64))(&v9);
    do
      v8 = (void *)__ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    v10[0] = v8;
    TLine::AppendRun(v6, (unint64_t *)v10);

  }
}

CFStringRef TCharStreamCFString::CopyChars@<X0>(TCharStreamCFString *this@<X0>, CFRange range@<0:X1, 8:X2>, CFStringRef *a3@<X8>)
{
  const __CFAllocator *v4;
  const __CFString *v5;
  CFStringRef result;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  result = CFStringCreateWithSubstring(v4, v5, range);
  *a3 = result;
  return result;
}

void TGlyphEncoder::CreateRun(TGlyphEncoder *this, CFRange a2, const TAttributes *a3, const __CTFont *a4, const __CTFont *a5)
{
  CFIndex length;
  _CTGlyphStorage **location;
  uint64_t v11;
  _QWORD *v12;
  _CTGlyphStorage *v13;
  TRun *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v19;
  unint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  CFRange v25;

  length = a2.length;
  location = (_CTGlyphStorage **)a2.location;
  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  v11 = TCFBase<TRun>::Allocate();
  if (v11)
  {
    v12 = (_QWORD *)v11;
    v13 = *location;
    v14 = (TRun *)(v11 + 72);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = 0;
    v12[5] = v14;
    v12[6] = v14;
    v12[7] = CTGlyphRun::CloneEntire;
    v12[8] = CTGlyphRun::CloneRange;
    v25.location = length;
    v25.length = (CFIndex)a3;
    TRun::TRun(v14, v25, v13, a4, a5);
    v24 = v12;
    do
      v15 = (void *)__ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
    v23 = v15;

  }
  else
  {
    v23 = 0;
  }
  do
    v16 = __ldaxr((unint64_t *)&v23);
  while (__stlxr(0, (unint64_t *)&v23));
  *(_QWORD *)this = v16;

  v24 = (id)0xAAAAAAAAAAAAAAAALL;
  v17 = atomic_load((unint64_t *)this);
  TGlyphEncoder::CreateSpecialRun((unint64_t *)&v24, (uint64_t)location, v17, *((_WORD *)a4 + 69));
  if (atomic_load((unint64_t *)&v24))
  {
    v19 = (void *)atomic_load((unint64_t *)&v24);
    TCFRef<__CTFont const*>::Retain((unint64_t *)this, v19);
  }
  if (atomic_load((unint64_t *)this))
  {
    v21 = atomic_load((unint64_t *)this);
    v22 = *(_QWORD *)(v21 + 48);
    *(_QWORD *)(v22 + 8) = length;
    *(_QWORD *)(v22 + 16) = a3;
  }

}

void TGlyphEncoder::CreateSpecialRun(unint64_t *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  TRun *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  id v29;

  v28 = a3;
  *a1 = 0;
  if ((a4 & 0x40) != 0)
  {
    v8 = TCFBase<TRun>::Allocate();
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = v8 + 72;
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = 0;
      v9[5] = v10;
      v9[6] = v10;
      v9[7] = CTDelegateRun::CloneEntire;
      v9[8] = CTDelegateRun::CloneRange;
      TDelegateRun::TDelegateRun(v10, a3);
      v29 = v9;
      do
        v11 = (void *)__ldaxr((unint64_t *)&v29);
      while (__stlxr(0, (unint64_t *)&v29));
      v27 = v11;

    }
    else
    {
      v27 = 0;
    }
    do
      v16 = __ldaxr((unint64_t *)&v27);
    while (__stlxr(0, (unint64_t *)&v27));
    do
      v17 = (void *)__ldaxr(a1);
    while (__stlxr(v16, a1));
    goto LABEL_38;
  }
  if ((a4 & 4) != 0)
  {
    v12 = TCFBase<TRun>::Allocate();
    if (v12)
    {
      v13 = (_QWORD *)v12;
      v14 = v12 + 72;
      v13[2] = 0;
      v13[3] = 0;
      v13[4] = 0;
      v13[5] = v14;
      v13[6] = v14;
      v13[7] = CTEmojiImageRun::CloneEntire;
      v13[8] = CTEmojiImageRun::CloneRange;
      TEmojiImageRun::TEmojiImageRun(v14, a3);
      v29 = v13;
      do
        v15 = (void *)__ldaxr((unint64_t *)&v29);
      while (__stlxr(0, (unint64_t *)&v29));
      v27 = v15;

    }
    else
    {
      v27 = 0;
    }
    do
      v22 = __ldaxr((unint64_t *)&v27);
    while (__stlxr(0, (unint64_t *)&v27));
    do
      v17 = (void *)__ldaxr(a1);
    while (__stlxr(v22, a1));
    goto LABEL_38;
  }
  if ((a4 & 2) != 0)
  {
    v18 = TCFBase<TRun>::Allocate();
    if (v18)
    {
      v19 = (_QWORD *)v18;
      v20 = (TRun *)(v18 + 72);
      v19[2] = 0;
      v19[3] = 0;
      v19[4] = 0;
      v19[5] = v20;
      v19[6] = v20;
      v19[7] = CTMetricsDelegateRun::CloneEntire;
      v19[8] = CTMetricsDelegateRun::CloneRange;
      TRun::TRun(v20, *(const TRun **)(a3 + 40));
      v19[9] = &off_1E15DDD08;
      v29 = v19;
      do
        v21 = (void *)__ldaxr((unint64_t *)&v29);
      while (__stlxr(0, (unint64_t *)&v29));
      v27 = v21;

    }
    else
    {
      v27 = 0;
    }
    do
      v24 = __ldaxr((unint64_t *)&v27);
    while (__stlxr(0, (unint64_t *)&v27));
    do
      v17 = (void *)__ldaxr(a1);
    while (__stlxr(v24, a1));
LABEL_38:

    v25 = v27;
    goto LABEL_39;
  }
  if ((a4 & 0x800) != 0)
  {
    LOBYTE(v27) = *(_BYTE *)(*(_QWORD *)(a2 + 200) + 155) & 1;
    TCFBase_NEW<CTRubyRun,CTRun *&,BOOL>(&v28, (char *)&v27, (unint64_t *)&v29);
    do
      v23 = __ldaxr((unint64_t *)&v29);
    while (__stlxr(0, (unint64_t *)&v29));
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr(v23, a1));
  }
  else if ((a4 & 0x1000) != 0)
  {
    TCFBase_NEW<CTTateChuYokoRun,CTRun *&>(&v28, (unint64_t *)&v29);
    do
      v26 = __ldaxr((unint64_t *)&v29);
    while (__stlxr(0, (unint64_t *)&v29));
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr(v26, a1));
  }
  else
  {
    if ((a4 & 0x8000) == 0)
      return;
    TCFBase_NEW<CTTextEncapsulationRun,CTRun *&>((unint64_t *)&v29, &v28);
    do
      v6 = __ldaxr((unint64_t *)&v29);
    while (__stlxr(0, (unint64_t *)&v29));
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr(v6, a1));
  }

  v25 = v29;
LABEL_39:

}

void TAttributes::TAttributes(TAttributes *this, const TAttributes *a2, const __CTFont *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFDictionary *v28;
  const __CTFont *v29;
  const void *v30;
  unsigned int CompositionLanguage;
  void *v32;
  CFRange v33;

  v6 = (void *)atomic_load((unint64_t *)a2);
  *(_QWORD *)this = v6;
  v7 = (void *)atomic_load((unint64_t *)a2 + 1);
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = a3;
  v8 = (void *)atomic_load((unint64_t *)a2 + 3);
  *((_QWORD *)this + 3) = v8;
  v9 = (void *)atomic_load((unint64_t *)a2 + 4);
  *((_QWORD *)this + 4) = v9;
  v10 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v10;
  *((_WORD *)this + 24) = 1;
  *((_WORD *)this + 25) = *((_WORD *)a2 + 25);
  v11 = *(_OWORD *)((char *)a2 + 72);
  v12 = *(_OWORD *)((char *)a2 + 88);
  v13 = *((_QWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *((_QWORD *)this + 13) = v13;
  *(_OWORD *)((char *)this + 88) = v12;
  *(_OWORD *)((char *)this + 72) = v11;
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  if (*((_QWORD *)a2 + 15))
  {
    v14 = operator new();
    v15 = *((_QWORD *)a2 + 15);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v16 = *(_OWORD *)(v15 + 16);
    v17 = *(_OWORD *)(v15 + 32);
    v18 = *(_OWORD *)(v15 + 64);
    *(_OWORD *)(v14 + 48) = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 64) = v18;
    *(_OWORD *)(v14 + 16) = v16;
    *(_OWORD *)(v14 + 32) = v17;
    v19 = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v14 + 80) = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v14 + 88) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (void *)atomic_load((unint64_t *)(v15 + 96));
    *(_QWORD *)(v14 + 96) = v22;
  }
  else
  {
    v14 = 0;
  }
  *((_QWORD *)this + 15) = v14;
  if (*((_QWORD *)a2 + 16))
  {
    v23 = operator new();
    v24 = *((_QWORD *)a2 + 16);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  }
  else
  {
    v23 = 0;
  }
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = v23;
  *((_WORD *)this + 68) = *((_WORD *)a2 + 68);
  *((_WORD *)this + 69) = *((_WORD *)a2 + 69) & 0xF9FF;
  if (*((_QWORD *)a2 + 18))
  {
    v25 = operator new();
    v26 = *((_QWORD *)a2 + 18);
    memcpy((void *)v25, (const void *)v26, 0x109uLL);
    v27 = (void *)atomic_load((unint64_t *)(v26 + 272));
    *(_QWORD *)(v25 + 272) = v27;
    *(_BYTE *)(v25 + 280) = *(_BYTE *)(v26 + 280);
    std::unique_ptr<TBaselineAttributes>::reset[abi:nn180100]((uint64_t *)this + 18, v25);
  }
  v32 = 0;
  v28 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  v29 = (const __CTFont *)atomic_load((unint64_t *)this + 2);
  v33.location = 0;
  v33.length = 0;
  TAttributes::ApplyFont(this, v28, v29, 0, v33, (const void **)&v32);
  CompositionLanguage = TAttributes::GetCompositionLanguage(this, v30);
  *((_BYTE *)this + 112) = CompositionLanguage;
  if (CompositionLanguage >= 2 && CJKCompositionEngine::IsEnabled(CompositionLanguage, (uint64_t)this))
    *((_WORD *)this + 69) |= 0x100u;
  else
    *((_BYTE *)this + 112) = 1;
  TAttributes::SetLayoutAttributesForFont(this);
}

uint64_t TTenuousComponentFont::GetScriptAnalysisValue(TTenuousComponentFont *this)
{
  if ((*((_BYTE *)this + 714) & 1) != 0)
    return 2;
  else
    return TBaseFont::GetScriptAnalysisValue(this);
}

uint64_t TDelegateRun::TDelegateRun(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  const __CFDictionary *v5;
  const void *v6;
  double (*v7)(_QWORD, double);
  double v8;
  double v9;
  double (*v10)(_QWORD);
  void (*v11)(uint64_t, double);
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t i;
  CGSize v17;

  TRun::TRun((TRun *)a1, *(const TRun **)(a2 + 40));
  *v3 = &off_1E15DCB18;
  v4 = v3 + 40;
  v5 = (const __CFDictionary *)atomic_load(v3 + 5);
  *(_QWORD *)(a1 + 320) = (id)CFDictionaryGetValue(v5, CFSTR("CTRunDelegate"));
  v6 = (const void *)atomic_load(v4);
  TRunDelegate::TRunDelegate((TRunDelegate *)(a1 + 328), v6);
  v7 = *(double (**)(_QWORD, double))(a1 + 344);
  v8 = 0.0;
  v9 = 0.0;
  if (v7)
    v9 = v7(*(_QWORD *)(a1 + 368), 0.0);
  *(double *)(a1 + 376) = v9;
  v10 = *(double (**)(_QWORD))(a1 + 352);
  if (v10)
    v8 = v10(*(_QWORD *)(a1 + 368));
  *(double *)(a1 + 384) = v8;
  v11 = *(void (**)(uint64_t, double))(a1 + 360);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 368);
    if (*(_QWORD *)(a1 + 328) == 2)
      v11(v12, 0.0);
    else
      v13 = ((double (*)(uint64_t))v11)(v12);
  }
  else
  {
    v13 = 0.0;
  }
  *(double *)(a1 + 392) = v13;
  v14 = *(_QWORD *)(a1 + 208);
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      v17.width = *(CGFloat *)(a1 + 392);
      v17.height = 0.0;
      TStorageRange::SetAdvance((TStorageRange *)(a1 + 192), i, v17);
    }
  }
  return a1;
}

void TRunDelegate::TRunDelegate(TRunDelegate *this, CFTypeRef cf)
{
  CFTypeID v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = CFGetTypeID(cf);
  if (TCFBase<TRunDelegate>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRunDelegate>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRunDelegate>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  if (v4 == TCFBase<TRunDelegate>::fTypeID)
  {
    v5 = (__int128 *)*((_QWORD *)cf + 5);
    v6 = *v5;
    v7 = v5[1];
    *((_QWORD *)this + 4) = *((_QWORD *)v5 + 4);
    *(_OWORD *)this = v6;
    *((_OWORD *)this + 1) = v7;
    v8 = *((_QWORD *)v5 + 5);
  }
  else
  {
    v8 = 0;
    *((_QWORD *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  *((_QWORD *)this + 5) = v8;
}

CFTypeID CTRunDelegateGetTypeID(void)
{
  if (TCFBase<TRunDelegate>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRunDelegate>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRunDelegate>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TRunDelegate>::fTypeID;
}

_WORD *TASCIIDataCache::InitC0Whitespace(TASCIIDataCache *this)
{
  _WORD *v2;
  uint64_t i;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_WORD *)operator new[]();
  v9 = -21846;
  v8 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(_QWORD, uint64_t, uint64_t, unint64_t *))(**(_QWORD **)(*(_QWORD *)this + 400) + 672))(*(_QWORD *)(*(_QWORD *)this + 400), 9, 5, &v8);
  for (i = 0; i != 10; i += 2)
  {
    v4 = (uint64_t *)&v2[4 * i];
    *v4 = *(unsigned __int16 *)((char *)&v8 + i) | 0x10000;
    v4[1] = 0;
  }
  v2[1] |= 4u;
  v2[9] |= 2u;
  v2[17] |= 2u;
  v2[25] |= 2u;
  v2[33] |= 2u;
  v5 = (unint64_t *)((char *)this + 1936);
  while (1)
  {
    v6 = __ldaxr(v5);
    if (v6)
      break;
    if (!__stlxr((unint64_t)v2, v5))
      return v2;
  }
  __clrex();
  MEMORY[0x186DC0394](v2, 0x1000C80F7F8B94BLL);
  return (_WORD *)v6;
}

void TSupplementaryDataCachePage::TSupplementaryDataCachePage(TSupplementaryDataCachePage *this, const TBaseFont *a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  __int16 *v12;
  int16x8_t v13;
  __int128 v14;
  float64x2_t *v15;
  uint64_t i;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  _BYTE v20[2048];
  int v21[256];
  int __b[256];
  void **v23;
  _QWORD v24[3];
  _OWORD v25[15];
  _OWORD *v26;
  uint64_t v27;

  v2 = (_QWORD *)MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v6 = v5;
  v7 = (uint64_t)v2;
  v27 = *MEMORY[0x1E0C80C00];
  v2[197] = 0;
  v2[196] = 0;
  v2[198] = 0;
  v2[207] = v2 + 199;
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)v6 + 672))(v6, v3 & 0xFFFFFF00, 256, v2);
  memset(__b, 170, sizeof(__b));
  v8 = 0;
  v9 = (int16x8_t)vorrq_s8((int8x16_t)vdupq_n_s16(v4 & 0x300 | 0xFFFFDC00), (int8x16_t)xmmword_1849506C0);
  v10 = vdupq_n_s16((v4 >> 10) - 10304);
  v11.i64[0] = 0x8000800080008;
  v11.i64[1] = 0x8000800080008;
  do
  {
    v12 = (__int16 *)&__b[v8];
    v13 = v9;
    vst2q_s16(v12, *(int16x8x2_t *)v10.i8);
    v9 = vaddq_s16(v9, v11);
    v8 += 8;
  }
  while (v8 != 256);
  bzero(v21, 0x400uLL);
  memset(v20, 255, sizeof(v20));
  if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v6 + 512))(v6, v7, v20, 1, 256))
  {
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v25[14] = v14;
    v25[13] = v14;
    v25[12] = v14;
    v25[11] = v14;
    v25[10] = v14;
    v25[9] = v14;
    v25[8] = v14;
    v25[7] = v14;
    v25[6] = v14;
    v25[5] = v14;
    v25[4] = v14;
    v25[3] = v14;
    v25[2] = v14;
    v25[1] = v14;
    v25[0] = v14;
    memset(v24, 0, sizeof(v24));
    v26 = v25;
    v23 = (void **)v24;
    v19 = 0;
    v15 = (float64x2_t *)v20;
    TUnicodeEncoder::EncodePortion((char ***)&v23, 0, (uint64_t)__b, 512, v6, 0, v7, (uint64_t)v20, 1, (uint64_t)v21, (double *)&v19, 1);
    for (i = 0; i != 1024; i += 16)
    {
      v18 = *v15;
      v17 = v15[1];
      v15 += 2;
      *(float32x4_t *)(v7 + 512 + i) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v17);
    }
    v23 = (void **)v24;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v23);
  }
  else
  {
    bzero((void *)(v7 + 512), 0x400uLL);
  }
  TCompactArray<unsigned short,8ul,3ul,30ul>::assign<unsigned int *>(v7 + 1536, v21, __b);
}

uint64_t TRun::GetNextUnmappedCharRange(TRun *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t GlyphIndexForChar;
  uint64_t NextUnmappedGlyphRange;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
  if (v2 > a2)
  {
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2);
    NextUnmappedGlyphRange = TStorageRange::GetNextUnmappedGlyphRange((TRun *)((char *)this + 192), GlyphIndexForChar);
    if (NextUnmappedGlyphRange < *((_QWORD *)this + 26))
    {
      v7 = (_QWORD *)*((_QWORD *)this + 27);
      v8 = *((_QWORD *)this + 25);
      v2 = *(_QWORD *)(v7[6] + 8 * v8 + 8 * NextUnmappedGlyphRange);
      objc_msgSend(v7, "attachmentCountAtIndex:", v8 + v6 + NextUnmappedGlyphRange - 1);
    }
  }
  return v2;
}

uint64_t TKerningEngine::PositionGlyphs(TKerningEngine *this, TLine *a2, const TCharStream *a3)
{
  signed __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void **v11;
  _QWORD __dst[83];

  __dst[82] = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &__const__ZN14TKerningEngine14PositionGlyphsER5TLineRK11TCharStreama_glyphs, 0x290uLL);
  TRunGlue::TRunGlue((TRunGlue *)__dst, this);
  v7 = TKerningEngine::PositionGlyphs((TKerningEngine *)__dst, a2, a3, v6);
  v8 = (_QWORD *)__dst[73];
  if ((_QWORD *)__dst[73] == &__dst[70])
  {
    v9 = 4;
    v8 = &__dst[70];
    goto LABEL_5;
  }
  if (__dst[73])
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v11 = (void **)&__dst[46];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v11);
  v11 = (void **)&__dst[26];
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v11);
  v11 = (void **)&__dst[7];
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v11);
  return v7;
}

double CTLineGetTrailingWhitespaceWidth(CTLineRef line)
{
  double v2[3];

  if (!line)
    return 0.0;
  TLine::GetTrailingWhitespace(*((_QWORD *)line + 5), v2);
  return v2[2];
}

uint64_t TLine::GetTrailingWhitespace@<X0>(uint64_t this@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int64x2_t v10;
  double v11;
  int64x2_t v12;
  int64x2_t v13;
  double v14;

  v4 = *(_QWORD *)(this + 16);
  v3 = *(_QWORD *)(this + 24);
  v5 = v3 - v4;
  if (v3 == v4
    || (v6 = this,
        this = TLine::FindRunWithCharIndex((TLine *)this, *(_QWORD *)(this + 72) + *(_QWORD *)(this + 80) - 1, 1),
        this < 0)
    || v5 >> 3 <= this
    || ((*(_WORD *)(v6 + 152) & 8) != 0
      ? (v7 = 0)
      : (v7 = ((uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 3) - 1),
        this != v7))
  {
    *a2 = 0.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * this) + 40);
    v9 = *(unsigned __int8 *)(v8 + 224);
    v10 = 0uLL;
    v11 = 0.0;
    do
    {
      v12 = v10;
      this = TRun::GetTrailingWhitespace(v8, (double *)v13.i64);
      v10 = vaddq_s64(v13, v12);
      v11 = v11 + v14;
      if (v13.i64[0] < *(_QWORD *)(v8 + 16))
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
    }
    while (*(unsigned __int8 *)(v8 + 224) == v9);
    *(int64x2_t *)a2 = v10;
    a2[2] = v11;
  }
  return this;
}

uint64_t TLine::FindRunWithCharIndex(TLine *this, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3) - (_QWORD)v3;
  if (v4 == 8)
    return 0;
  v7 = *(_QWORD *)(*v3 + 40);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16) + v8;
  if (v8 <= a2 && v9 > a2)
  {
    v26 = 0;
LABEL_32:
    *((_QWORD *)this + 17) = v26;
    return v26;
  }
  result = v4 >> 3;
  v11 = *((_QWORD *)this + 17);
  if (v11 >= v4 >> 3)
  {
    if (result >= 0)
      v12 = v4 >> 3;
    else
      v12 = result + 1;
    v11 = v12 >> 1;
    *((_QWORD *)this + 17) = v12 >> 1;
  }
  v13 = *(_QWORD *)(v3[v11] + 40);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 16) + v14;
  if (v14 <= a2 && v15 > a2)
    return v11;
  v26 = v11 + 1;
  if (v11 + 1 < result)
  {
    v17 = *(_QWORD *)(v3[v26] + 40);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16) + v18;
    if (v18 <= a2 && v19 > a2)
      goto LABEL_32;
  }
  v21 = *((_WORD *)this + 76);
  if (v11 >= 2 && (v21 & 1) != 0)
  {
    v26 = v11 - 1;
    v22 = *(_QWORD *)(v3[v11 - 1] + 40);
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(_QWORD *)(v22 + 16) + v23;
    if (v23 <= a2 && v24 > a2)
      goto LABEL_32;
LABEL_43:
    v26 = result - 1;
    if (a3 < 0)
    {
      v34 = -1;
    }
    else
    {
      v26 = 0;
      v34 = v4 >> 3;
    }
    if (v26 == v34)
      goto LABEL_68;
    while (1)
    {
      v35 = *(_QWORD *)(v3[v26] + 40);
      v36 = *(_QWORD *)(v35 + 8);
      v37 = *(_QWORD *)(v35 + 16) + v36;
      if (v36 <= a2 && v37 > a2)
        break;
      v26 += a3;
      if (v34 == v26)
        goto LABEL_68;
    }
LABEL_67:
    if (v26 >= result)
      goto LABEL_68;
    goto LABEL_32;
  }
  if ((v21 & 1) != 0 || v4 < 808 || (*((_WORD *)this + 77) & 0x40) != 0)
    goto LABEL_43;
  v27 = &v3[result];
  v28 = v4 >> 3;
  v29 = v3;
  while (1)
  {
    v30 = v28 >> 1;
    v31 = &v29[v28 >> 1];
    v32 = *(_QWORD *)(*v31 + 40);
    v33 = *(_QWORD *)(v32 + 8);
    if (*(_QWORD *)(v32 + 16) + v33 <= a2)
    {
      v29 = v31 + 1;
      v30 = v28 + ~v30;
      goto LABEL_41;
    }
    if (v33 <= a2)
      break;
    v27 = &v29[v28 >> 1];
LABEL_41:
    v28 = v30;
    if (!v30)
      goto LABEL_68;
  }
  if (v28 >= 2)
  {
    do
    {
      v39 = v30 >> 1;
      v40 = &v29[v30 >> 1];
      v42 = *v40;
      v41 = v40 + 1;
      v30 += ~(v30 >> 1);
      if (*(_QWORD *)(*(_QWORD *)(v42 + 40) + 16) + *(_QWORD *)(*(_QWORD *)(v42 + 40) + 8) <= a2)
        v29 = v41;
      else
        v30 = v39;
    }
    while (v30);
  }
  v43 = v31 + 1;
  if (v27 != v31 + 1)
  {
    v44 = v27 - (v31 + 1);
    v27 = v43;
    do
    {
      v45 = v44 >> 1;
      v46 = &v27[v44 >> 1];
      v48 = *v46;
      v47 = v46 + 1;
      v44 += ~(v44 >> 1);
      if (*(_QWORD *)(*(_QWORD *)(v48 + 40) + 8) > a2)
        v44 = v45;
      else
        v27 = v47;
    }
    while (v44);
  }
  if (v29 != v27)
  {
    v26 = v29 - v3;
    goto LABEL_67;
  }
LABEL_68:
  if (v4 >= 1)
  {
    v49 = 0;
    v50 = *((_QWORD *)this + 9) + *((_QWORD *)this + 10);
    if (result <= 1)
      v51 = 1;
    else
      v51 = result;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v3[v49] + 40) + 8) < v50)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v3[v49] + 40) + 8);
        result = v49;
      }
      ++v49;
    }
    while (v51 != v49);
  }
  return result;
}

uint64_t TRun::GetTrailingWhitespace@<X0>(uint64_t this@<X0>, double *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  BOOL v23;
  double v24;
  uint64_t v25;

  if (*(uint64_t *)(this + 208) <= 0)
  {
    *a2 = 0.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
  }
  else
  {
    v3 = (_QWORD *)this;
    v4 = *(_QWORD *)(this + 216);
    v5 = *(_QWORD *)(v4 + 32);
    if (v5 || (v8 = *(_QWORD *)(v4 + 24)) == 0)
    {
      v6 = 0;
      v7 = v5 + 16 * *(_QWORD *)(this + 200);
    }
    else
    {
      v7 = v8 + 8 * *(_QWORD *)(this + 200);
      v6 = 1;
    }
    this = TRun::ResolveCharIndex((TRun *)this, *(_QWORD *)(this + 8) + *(_QWORD *)(this + 16) - 1);
    v25 = v9;
    v10 = this + 1;
    v11 = v3[1];
    v12 = 0;
    v13 = 0.0;
    if (v11 > this || v3[2] + v11 <= this)
    {
      v15 = this + 1;
    }
    else
    {
      v16 = this + 1;
      while (1)
      {
        v15 = this;
        v17 = v3[27];
        v18 = v3[25];
        if (*(__int16 *)(*(_QWORD *)(v17 + 16) + 2 * v18 + 2 * v25) != -1
          && (*(_DWORD *)(*(_QWORD *)(v17 + 40) + 4 * v18 + 4 * v25) & 0x21) == 0)
        {
          break;
        }
        ++v12;
        if (v6)
          v19 = 3;
        else
          v19 = 4;
        v13 = v13 + *(double *)(v7 + (v25 << v19));
        this = TRun::GetPrevChar((TRun *)v3, this, &v25);
        v20 = v3[1];
        if (v20 <= this)
        {
          v16 = v15;
          if (v3[2] + v20 > this)
            continue;
        }
        goto LABEL_27;
      }
      v24 = NAN;
      v23 = -86;
      this = TAttributes::GetKernSetting((TAttributes *)(v3 + 5), &v24, &v23);
      v21 = v24;
      if (v24 <= 0.0 || !v23)
        v21 = -0.0;
      v13 = v13 + v21;
      v15 = v16;
    }
LABEL_27:
    *(_QWORD *)a2 = v10 - v15;
    *((_QWORD *)a2 + 1) = v12;
    a2[2] = v13;
  }
  return this;
}

BOOL TAttributes::GetKernSetting(TAttributes *this, double *a2, BOOL *a3)
{
  uint64_t v3;
  double v4;

  *a2 = 0.0;
  if (a3)
    *a3 = 0;
  v3 = *((_QWORD *)this + 15);
  if (!v3)
    return (*((_WORD *)this + 69) & 0x40) == 0;
  if (*(_BYTE *)(v3 + 24))
  {
    *a2 = *(double *)(v3 + 16);
    if (a3)
      *a3 = 1;
    if (*(_BYTE *)(v3 + 8))
    {
      v4 = *(double *)v3;
      goto LABEL_11;
    }
  }
  else if (*(_BYTE *)(v3 + 8))
  {
    v4 = *(double *)v3;
    *a2 = *(double *)v3;
LABEL_11:
    if (v4 == 0.0)
      return 0;
  }
  if ((*(_WORD *)(v3 + 66) & 1) == 0)
    return (*((_WORD *)this + 69) & 0x40) == 0;
  return 0;
}

uint64_t TKerningEngine::PositionGlyphs(TRunGlue *this, int a2, const TFont *a3, char a4, __CFString *a5, uint64_t a6, char a7)
{
  unint64_t InitialScriptAndLangSys;
  int v12;
  uint64_t v14;
  uint64_t CommonTable;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex location;
  __int128 v21;
  uint64_t v22;
  const __CFData *v23;
  const __CFData *v25;
  int v26;
  CFRange v27;
  char v28;
  int v29;
  _BYTE __dst[408];
  uint64_t v31;

  InitialScriptAndLangSys = (unint64_t)a3;
  v12 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  v29 = a7 & 1;
  v28 = 0;
  if (a2 == 2)
  {
    v14 = -1;
  }
  else
  {
    CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)this + 77) + 400), 1634428274, 0);
    v14 = CommonTable;
    if (CommonTable && (a7 & 2) == 0)
    {
      v25 = (const __CFData *)CommonTable;
      v16 = 1;
LABEL_13:
      v23 = v25;
      if (v25 == (const __CFData *)-1)
        v23 = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)this + 77) + 400), 1634428274, 0);
      memcpy(__dst, &unk_18492E620, sizeof(__dst));
      TAATKerxEngine::TAATKerxEngine((TAATKerxEngine *)__dst, this, v23);
      if (*(_QWORD *)&__dst[88])
        v16 = TAATKerxEngine::KernRuns((uint64_t)__dst, &v28, &v29);
      TAATKerxEngine::~TAATKerxEngine((id **)__dst);
      if (v29 != 2)
      {
        *(_OWORD *)__dst = xmmword_18492E7B8;
        *(_OWORD *)&__dst[16] = unk_18492E7C8;
        memset(&__dst[32], 170, 88);
        TAATKernEngine::TAATKernEngine((TAATKernEngine *)__dst, this);
        if (*(_QWORD *)&__dst[96])
          v16 = TAATKernEngine::KernRuns((uint64_t)__dst, &v28, &v29);
        std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)&__dst[56], *(_QWORD **)&__dst[64]);
        if (*(_QWORD *)&__dst[32])
        {
          *(_QWORD *)&__dst[40] = *(_QWORD *)&__dst[32];
          operator delete(*(void **)&__dst[32]);
        }
      }
      goto LABEL_22;
    }
  }
  v26 = v12;
  if (!a4)
    InitialScriptAndLangSys = TOpenTypeMorph::GetInitialScriptAndLangSys(a5, *((__CFString **)this + 77), a3);
  v25 = (const __CFData *)v14;
  v17 = *((_QWORD *)this + 5);
  if (v17 == -1)
  {
    TRunGlue::ComputeEndIndex(this);
    v17 = *((_QWORD *)this + 5);
  }
  v18 = *((_QWORD *)this + 6);
  v19 = v18 + v17;
  v27.location = v17;
  location = v17;
  do
  {
    v27.length = v19 - location;
    *(_QWORD *)&__dst[240] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[208] = v21;
    *(_OWORD *)&__dst[224] = v21;
    *(_OWORD *)&__dst[176] = v21;
    *(_OWORD *)&__dst[192] = v21;
    *(_OWORD *)&__dst[144] = v21;
    *(_OWORD *)&__dst[160] = v21;
    *(_OWORD *)&__dst[112] = v21;
    *(_OWORD *)&__dst[128] = v21;
    *(_OWORD *)&__dst[80] = v21;
    *(_OWORD *)&__dst[96] = v21;
    *(_OWORD *)&__dst[48] = v21;
    *(_OWORD *)&__dst[64] = v21;
    *(_OWORD *)&__dst[16] = v21;
    *(_OWORD *)&__dst[32] = v21;
    *(_OWORD *)__dst = v21;
    TOpenTypePositioningEngine::TOpenTypePositioningEngine((uint64_t *)__dst, (uint64_t)this, a6, InitialScriptAndLangSys, &v27);
    v16 = TOpenTypePositioningEngine::PositionRuns((uint64_t)__dst, &v28, &v29);
    v27.location += v27.length;
    location = v27.location;
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(*(_QWORD **)&__dst[232]);
  }
  while (location < v19);
  *((_QWORD *)this + 5) = v17;
  *((_QWORD *)this + 6) = v18;
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = v22;
  v12 = v26;
  if (v29 != 2)
    goto LABEL_13;
LABEL_22:
  if (v12)
    TRunGlue::FilterJoiners(this);
  return v16;
}

void std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(*a1);
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t TRunGlue::FilterJoiners(TRunGlue *this)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t i;
  int GlyphID;
  int v10;
  unsigned __int16 *v11;
  TRunGlue *v13;
  uint64_t v14;
  unsigned __int16 v15;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 77) + 400) + 688))(*(_QWORD *)(*((_QWORD *)this + 77) + 400)) & 1) != 0
    || (v3 = TBaseFont::GetCachedSpaceAndJoinerGlyphs(*(TBaseFont **)(*((_QWORD *)this + 77) + 400), 0) + 2,
        (unsigned __int16 *)v3 == v2)
    || (v4 = v2, v15 = 0, v13 = this, v14 = 0, (v5 = TRunGlue::length(this)) == 0))
  {
    v7 = 0;
  }
  else
  {
    v6 = v5;
    v7 = 0;
    for (i = 0; i != v6; v14 = i)
    {
      GlyphID = TRunGlue::GetGlyphID(this, i);
      if (GlyphID != 0xFFFF)
      {
        v10 = GlyphID;
        if (!TRunGlue::IsDeleted(this, i))
        {
          v11 = (unsigned __int16 *)v3;
          while (*v11 != v10)
          {
            if (++v11 == v4)
            {
              v11 = v4;
              break;
            }
          }
          if (v11 != v4)
          {
            TRunGlue::FilterJoiner(this, (TRunGlue::TGlyph *)&v13, &v15);
            v7 = 1;
          }
        }
      }
      ++i;
    }
  }
  return v7 & 1;
}

uint64_t TBaseFont::GetCachedSpaceAndJoinerGlyphs(TBaseFont *this, TBaseFont **a2)
{
  TBaseFont *v4;
  unsigned __int16 *v6;
  TBaseFont **v7;
  uint64_t v8;
  TBaseFont *v9;
  TBaseFont *v10;
  uint64_t v11;
  char *v12;
  TBaseFont *v13;
  uint64_t v14;
  TBaseFont *v15;
  int v16;
  TBaseFont *v18;
  unsigned __int16 v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (TBaseFont *)((char *)this + 232);
  if (!atomic_load((unint64_t *)this + 29))
  {
    v6 = (unsigned __int16 *)((char *)this + 224);
    *(_QWORD *)v19 = 0x34F200D200C0020;
    if (a2)
    {
      v7 = a2;
    }
    else
    {
      v18 = this;
      v7 = &v18;
    }
    TcmapTable::Map(v7, v19, v6, 4, 1);
    v8 = 0;
    v9 = (TBaseFont *)((char *)this + 226);
    while (*(_WORD *)((char *)v9 + v8))
    {
      v8 += 2;
      if (v8 == 6)
      {
        v10 = v4;
        goto LABEL_10;
      }
    }
    v10 = (TBaseFont *)((char *)v9 + v8);
LABEL_10:
    if (v10 == v4)
    {
      v13 = (TBaseFont *)((char *)this + 228);
      v10 = v4;
    }
    else
    {
      if ((TBaseFont *)((char *)v10 + 2) != v4)
      {
        v11 = 2 * ((v10 - v9) >> 1);
        v12 = (char *)this + 228;
        do
        {
          if (*(_WORD *)&v12[v11])
          {
            *(_WORD *)v10 = *(_WORD *)&v12[v11];
            v10 = (TBaseFont *)((char *)v10 + 2);
          }
          v11 += 2;
        }
        while (v11 != 4);
      }
      if (v9 == v10)
      {
        v10 = (TBaseFont *)((char *)this + 226);
LABEL_28:
        __dmb(0xBu);
        *(_QWORD *)v4 = v10;
        return (uint64_t)this + 224;
      }
      v13 = (TBaseFont *)((char *)this + 228);
      if ((TBaseFont *)((char *)this + 228) == v10)
        goto LABEL_28;
    }
    v14 = 0;
    v15 = v13;
    do
    {
      v16 = *(unsigned __int16 *)v15;
      v15 = (TBaseFont *)((char *)v15 + 2);
      if (v16 == *(unsigned __int16 *)v9)
        ++v14;
    }
    while (v15 != v10);
    if (v14 == (v10 - v13) >> 1)
      v10 = (TBaseFont *)((char *)this + 226);
    goto LABEL_28;
  }
  return (uint64_t)this + 224;
}

uint64_t TTenuousComponentFont::IsLastResort(TTenuousComponentFont *this)
{
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 848))(this) & 1) != 0)
    return 0;
  if ((*((_DWORD *)this + 46) & 2) == 0)
    TBaseFont::DetermineFontFlags(this, 2);
  return (*((_DWORD *)this + 45) >> 1) & 1;
}

uint64_t TTenuousComponentFont::IsAppleColorEmoji(TTenuousComponentFont *this)
{
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 848))(this) & 1) != 0)
    return 0;
  if ((*((_DWORD *)this + 46) & 0x40) == 0)
    TBaseFont::DetermineFontFlags(this, 64);
  return (*((_DWORD *)this + 45) >> 6) & 1;
}

uint64_t TComponentFont::IsSystemUI(TComponentFont *this)
{
  return (*((unsigned __int8 *)this + 713) >> 4) & 1;
}

double CTFontTransformGlyphsWithLanguage(const __CTFont *a1, unsigned __int16 *a2, CGSize *a3, uint64_t a4, int a5, __CFString *a6, uint64_t a7)
{
  char v13;
  TFont *v14;
  int ShapingType;
  _BOOL8 HasAvailable;
  uint64_t v17;
  size_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BOOL4 v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v29[8192];
  void **v30;
  int v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[84];

  v36[82] = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3 && a4 > 0)
  {
    if (a5)
      v13 = a5;
    else
      v13 = 3;
    memcpy(v36, &unk_1849302A0, 0x290uLL);
    TRunGlue::TRunGlue((TRunGlue *)v36, a1, a2, a3, a4, 0, 0, 0);
    v14 = (TFont *)v36[77];
    ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(v36[77] + 400));
    HasAvailable = StackHasAvailable(0x8000uLL);
    if (!HasAvailable)
    {
      v19 = *MEMORY[0x1E0C9D820];
LABEL_43:
      v26 = (_QWORD *)v36[73];
      if ((_QWORD *)v36[73] == &v36[70])
      {
        v27 = 4;
        v26 = &v36[70];
      }
      else
      {
        if (!v36[73])
        {
LABEL_48:
          v30 = (void **)&v36[46];
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v30);
          v30 = (void **)&v36[26];
          std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v30);
          v30 = (void **)&v36[7];
          std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v30);
          return v19;
        }
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
      goto LABEL_48;
    }
    MEMORY[0x1E0C80A78](HasAvailable, v17);
    memset(v29, 170, sizeof(v29));
    if (ShapingType >= 2)
    {
      if (v36[78] <= 0x10000uLL)
        v18 = (unint64_t)(v36[78] + 7) >> 3;
      else
        v18 = 0x2000;
      bzero(v29, v18);
      TRunGlue::DetermineCoverage((uint64_t)v36, v29);
    }
    v30 = (void **)0xAAAAAAAAAAAAAA00;
    v31 = -1431655936;
    if ((v13 & 1) == 0)
    {
      if ((v13 & 2) == 0)
        goto LABEL_36;
LABEL_35:
      if (TKerningEngine::PositionGlyphs((TRunGlue *)v36, ShapingType, (const TFont *)v30, v31, a6, 0, 1))
      {
LABEL_36:
        v19 = *(double *)&v36[68];
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (*((_QWORD *)v14 + 40))
    {
      if (TFont::NeedsShapingForGlyphs(v14, a2, a4, a6))
      {
        v34[0] = &off_1E15DF440;
        v34[1] = a7;
        v35 = v34;
        std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(&v36[70], (uint64_t)v34);
        v20 = v35;
        if (v35 == v34)
        {
          v21 = 4;
          v20 = v34;
        }
        else
        {
          if (!v35)
          {
LABEL_39:
            v24 = TShapingEngine::ShapeGlyphs((uint64_t)v36, ShapingType, a6, (uint64_t)&v30, 0);
            goto LABEL_40;
          }
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
        goto LABEL_39;
      }
LABEL_32:
      LOBYTE(v24) = 1;
LABEL_33:
      if ((v13 & 2) == 0 || !v24)
        goto LABEL_36;
      goto LABEL_35;
    }
    v32[0] = &off_1E15DF440;
    v32[1] = a7;
    v33 = v32;
    std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(&v36[70], (uint64_t)v32);
    v22 = v33;
    if (v33 == v32)
    {
      v23 = 4;
      v22 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_28:
        v24 = TShapingEngine::ShapeGlyphs((uint64_t)v36, ShapingType, a6, (uint64_t)&v30, 0);
        if (!v24)
        {
LABEL_40:
          if (!a7 && !v24)
          {
LABEL_42:
            v19 = INFINITY;
            goto LABEL_43;
          }
          goto LABEL_33;
        }
        if (qword_1ECDE7550 != -1)
          dispatch_once_f(&qword_1ECDE7550, 0, (dispatch_function_t)GetShapingGlyphsQueue(void)::$_0::__invoke);
        v25 = qword_1ECDE7548;
        CFRetain(a1);
        dispatch_async_f(v25, a1, (dispatch_function_t)InitShapingGlyphsOnQueue(__CTFont const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::__invoke);
        goto LABEL_32;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_28;
  }
  return *MEMORY[0x1E0C9D820];
}

uint64_t TBaseFont::GetShapingType(TBaseFont *this)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((*((_DWORD *)this + 46) & 0x30000) != 0)
    return HIWORD(*((_DWORD *)this + 45)) & 3;
  v3 = (unsigned int *)((char *)this + 184);
  if (TBaseFont::GetCommonTable(this, 1634561906, 0))
  {
    if ((*v3 & 0x30000) != 0)
      return HIWORD(*((_DWORD *)this + 45)) & 3;
    result = 1;
  }
  else
  {
    result = 2 * (TBaseFont::GetCommonTable(this, 1196643650, 0) != 0);
  }
  v4 = (unsigned int *)((char *)this + 180);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 | ((_DWORD)result << 16), v4));
  do
    v6 = __ldxr(v3);
  while (__stxr(v6 | 0x30000, v3));
  return result;
}

BOOL StackHasAvailable(unint64_t a1)
{
  _opaque_pthread_t *v2;
  void *stackaddr_np;
  uint64_t vars0;

  v2 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v2);
  return (unint64_t)&vars0 + pthread_get_stacksize_np(v2) - (_QWORD)stackaddr_np > a1;
}

uint64_t TRunGlue::DetermineCoverage(uint64_t this, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t j;
  unint64_t v12;

  v3 = (_QWORD *)this;
  *(_QWORD *)(this + 200) = a2;
  if (*(_QWORD *)(this + 152))
  {
    v4 = *(_QWORD *)(this + 16);
    if (v4 >= 1)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * (*(_QWORD *)(this + 8) + i)) + 40);
        v7 = v6[26];
        if (v7 >= 1)
        {
          v8 = (unsigned __int16 *)(*(_QWORD *)(v6[27] + 16) + 2 * v6[25]);
          do
          {
            v10 = *v8++;
            v9 = v10;
            if (*(_QWORD *)(this + 624) > (uint64_t)v10)
              a2[v9 >> 3] |= 1 << (v9 & 7);
            --v7;
          }
          while (v7);
          v4 = *(_QWORD *)(this + 16);
        }
      }
    }
  }
  else
  {
    this = TRunGlue::length((TRunGlue *)this);
    if (this >= 1)
    {
      for (j = 0; j != this; ++j)
      {
        v12 = *(unsigned __int16 *)(v3[22] + 2 * (j + v3[20]));
        if (v3[78] > (int64_t)v12)
          a2[v12 >> 3] |= 1 << (v12 & 7);
      }
    }
  }
  return this;
}

BOOL TFont::NeedsShapingForGlyphs(TFont *this, const unsigned __int16 *a2, uint64_t a3, const __CFString *a4)
{
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  _BOOL8 result;
  BOOL v13;

  if (a4 || TFont::ShapesPreferredLanguage(this))
    v7 = (unint64_t *)((char *)this + 312);
  else
    v7 = (unint64_t *)((char *)this + 320);
  v8 = atomic_load(v7);
  if (v8 == -1)
    return 1;
  v9 = a3 - 1;
  if (a3 < 1)
    return 0;
  do
  {
    v10 = *a2++;
    v11 = (1 << (v10 & 7)) & *(unsigned __int8 *)(v8 + ((unint64_t)v10 >> 3));
    result = v11 != 0;
    if (v11)
      v13 = 1;
    else
      v13 = v9 == 0;
    --v9;
  }
  while (!v13);
  return result;
}

BOOL TRunGlue::NextRunRange(TRunGlue *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t InitializedGraphicsFont;
  uint64_t v20;

  v2 = *((_QWORD *)this + 1) + a2;
  v3 = *(_QWORD *)(*(_QWORD *)this + 16);
  v4 = *(_QWORD *)(*(_QWORD *)this + 24) - v3;
  v5 = v4 >> 3;
  if (v2 >= v4 >> 3)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 1) + a2;
  if (v4 != 8)
  {
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v5 - v6;
    *((_QWORD *)this + 4) = -1;
    *((_QWORD *)this + 5) = -1;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 16) = v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8 * v6) + 48);
    *((_QWORD *)this + 19) = v8;
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = *(_QWORD *)(v8 + 208);
    if ((*(_BYTE *)(v8 + 224) & 1) != 0)
    {
      *((_DWORD *)this + 6) = -1;
      v9 = TRunGlue::PhysicalRunIndexFromLogical(this, v6);
      v10 = *((_QWORD *)this + 16);
      if (v9 != v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)this + 16);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8 * v9) + 48) + 208);
        if (v9 > v10)
        {
          v13 = v11 - 8;
          v14 = v9;
          do
          {
            v15 = v12;
            v12 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8 * v14--) + 48) + 208);
          }
          while (v14 > v10);
          *((_QWORD *)this + 20) = v15;
        }
        *((_QWORD *)this + 21) = v12;
        *((_QWORD *)this + 16) = v9;
      }
    }
    else
    {
      *((_DWORD *)this + 6) = 1;
    }
    TRunGlue::UpdateForCurrentRealRun(this);
    *((_QWORD *)this + 25) = 0;
    v16 = *((_QWORD *)this + 77);
    v17 = *(_QWORD **)(v16 + 400);
    v18 = v17[25];
    if (!v18)
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v16 + 400));
      v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v17 + 872))(v17, InitializedGraphicsFont);
    }
    *((_QWORD *)this + 78) = v18;
    if (*((_BYTE *)this + 633))
      *((_WORD *)this + 316) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 77) + 400) + 104))(*(_QWORD *)(*((_QWORD *)this + 77) + 400)) | 0x100;
    *((_BYTE *)this + 592) = 0;
    *((_BYTE *)this + 634) = *(_BYTE *)(*((_QWORD *)this + 19) + 90);
    *((double *)this + 80) = TRunGlue::InitScale(this);
    *((_QWORD *)this + 81) = v20;
  }
  return v2 < v5;
}

void TRunGlue::TRunGlue(TRunGlue *this, TLine *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t InitializedGraphicsFont;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 72);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = (char *)this + 80;
  *((_DWORD *)this + 30) = 0;
  v4 = *(_QWORD *)(**((_QWORD **)a2 + 2) + 48);
  *((_QWORD *)this + 19) = v4;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = *(_QWORD *)(v4 + 208);
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = (char *)this + 232;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 64) = (char *)this + 392;
  *((_QWORD *)this + 67) = 0;
  *((_OWORD *)this + 34) = *MEMORY[0x1E0C9D820];
  *((_QWORD *)this + 73) = 0;
  *((_WORD *)this + 296) = 0;
  *((_QWORD *)this + 75) = 0;
  v5 = atomic_load((unint64_t *)(v4 + 56));
  *((_QWORD *)this + 76) = v5;
  v6 = *(_QWORD *)(v5 + 40);
  *((_QWORD *)this + 77) = v6;
  v7 = *(_QWORD **)(v6 + 400);
  v8 = v7[25];
  if (!v8)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v6 + 400));
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 872))(v7, InitializedGraphicsFont);
    v7 = *(_QWORD **)(*((_QWORD *)this + 77) + 400);
  }
  *((_QWORD *)this + 78) = v8;
  *((_BYTE *)this + 632) = (*(uint64_t (**)(_QWORD *))(*v7 + 104))(v7);
  *((_BYTE *)this + 633) = 1;
  *((_BYTE *)this + 634) = *(_BYTE *)(*((_QWORD *)this + 19) + 90);
  *((double *)this + 80) = TRunGlue::InitScale(this);
  *((_QWORD *)this + 81) = v10;
  TRunGlue::InitLevelRange(this);
  v11 = *((_QWORD *)this + 19);
  if ((*(_BYTE *)(v11 + 224) & 1) != 0)
  {
    *((_DWORD *)this + 6) = -1;
    v12 = *(_QWORD *)this;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, 0)) + 48);
    *((_QWORD *)this + 19) = v11;
    *((_QWORD *)this + 21) = *(_QWORD *)(v11 + 208);
    v13 = *((_QWORD *)this + 17) + *((_QWORD *)this + 18) - 1;
    if (v13 != *((_QWORD *)this + 16))
    {
      TRunGlue::SelectRun(this, v13);
      v11 = *((_QWORD *)this + 19);
    }
  }
  else
  {
    *((_DWORD *)this + 6) = 1;
  }
  v14 = *(_QWORD **)(v11 + 216);
  v15 = *(_QWORD *)(v11 + 200);
  *((_QWORD *)this + 22) = v14[2] + 2 * v15;
  *((_QWORD *)this + 65) = v14[5] + 4 * v15;
  *((_QWORD *)this + 66) = v14[6] + 8 * v15;
}

void TRunGlue::TRunGlue(TRunGlue *this, const __CTFont *a2, unsigned __int16 *a3, CGSize *a4, uint64_t a5, uint64_t a6, CGPoint *a7, uint64_t *a8)
{
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t InitializedGraphicsFont;
  uint64_t v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 4) = a5;
  *((_QWORD *)this + 5) = a6;
  *((_QWORD *)this + 6) = a5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = (char *)this + 80;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = -1;
  *((_QWORD *)this + 17) = -1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = a5;
  *((_QWORD *)this + 22) = a3;
  *((_QWORD *)this + 23) = a4;
  *((_QWORD *)this + 24) = a7;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 45) = (char *)this + 232;
  if ((unint64_t)(a5 + 14) >= 0xF)
  {
    v11 = (_QWORD *)((char *)this + 208);
    if (a5 >= -7)
      v12 = a5 + 7;
    else
      v12 = a5 + 14;
    std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__vallocate[abi:nn180100](v11, v12 >> 3);
    v13 = (char *)*((_QWORD *)this + 27);
    bzero(v13, v12 >> 3);
    *((_QWORD *)this + 27) = &v13[v12 >> 3];
  }
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 64) = (char *)this + 392;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 66) = a8;
  *((_QWORD *)this + 67) = 0;
  *((_OWORD *)this + 34) = *MEMORY[0x1E0C9D820];
  *((_QWORD *)this + 73) = 0;
  *((_WORD *)this + 296) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 76) = a2;
  v14 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 77) = v14;
  v15 = *(_QWORD **)(v14 + 400);
  v16 = v15[25];
  if (!v16)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v14 + 400));
    v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v15 + 872))(v15, InitializedGraphicsFont);
    v15 = *(_QWORD **)(*((_QWORD *)this + 77) + 400);
  }
  *((_QWORD *)this + 78) = v16;
  *((_BYTE *)this + 632) = (*(uint64_t (**)(_QWORD *))(*v15 + 104))(v15);
  *((_BYTE *)this + 633) = 1;
  *((_BYTE *)this + 634) = **((_BYTE **)this + 77) & 1;
  *((double *)this + 80) = TRunGlue::InitScale(this);
  *((_QWORD *)this + 81) = v18;
}

double TRunGlue::InitScale(TRunGlue *this)
{
  int *v2;
  int *inited;
  double result;

  v2 = (int *)*((_QWORD *)this + 77);
  if (v2[12])
    inited = v2 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v2);
  result = *((double *)inited + 5);
  if (*((_BYTE *)this + 634))
    return *((double *)inited + 6);
  return result;
}

uint64_t TTenuousComponentFont::HasVariations(TTenuousComponentFont *this)
{
  return (*((unsigned __int8 *)this + 712) >> 2) & 1;
}

_QWORD *TRunGlue::InitLevelRange(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(*this + 16);
  v2 = (*(_QWORD *)(*this + 24) - v1) >> 3;
  if ((*(_WORD *)(*this + 152) & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(this[19] + 224);
    v5 = this[1];
    this[17] = v5;
    if (v5 + 1 >= v2)
    {
      v8 = 1;
    }
    else
    {
      v6 = v2 - v5;
      v7 = v1 + 8 * v5;
      v8 = 1;
      while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 8 * v8) + 40) + 224) == v4)
      {
        if (v6 == ++v8)
        {
          v8 = v6;
          break;
        }
      }
    }
    this[18] = v8;
  }
  else
  {
    v3 = this[1];
    this[17] = v3;
    this[18] = v2 - v3;
  }
  return this;
}

unint64_t *AppendTrackAmountForRunIndex(unint64_t *result, uint64_t a2, double a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  unint64_t *v25;

  if (a3 != 0.0)
  {
    v5 = result;
    v7 = *result;
    v6 = result[1];
    if (*result != v6 && *(double *)(v6 - 24) == a3 && (v8 = *(_QWORD *)(v6 - 8), v8 + *(_QWORD *)(v6 - 16) == a2))
    {
      *(_QWORD *)(v6 - 8) = v8 + 1;
    }
    else
    {
      v9 = result[2];
      if (v6 >= v9)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v13 = (uint64_t)(result + 3);
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v7) >> 3);
        if (2 * v14 > v12)
          v12 = 2 * v14;
        if (v14 >= 0x555555555555555)
          v15 = 0xAAAAAAAAAAAAAAALL;
        else
          v15 = v12;
        v25 = v5 + 3;
        if (v15)
        {
          v16 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate(v13, v15);
          v7 = *v5;
          v6 = v5[1];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[24 * v11];
        *(double *)v17 = a3;
        *((_QWORD *)v17 + 1) = a2;
        *((_QWORD *)v17 + 2) = 1;
        if (v6 == v7)
        {
          v20 = vdupq_n_s64(v7);
          v18 = &v16[24 * v11];
        }
        else
        {
          v18 = &v16[24 * v11];
          do
          {
            v19 = *(_OWORD *)(v6 - 24);
            *((_QWORD *)v18 - 1) = *(_QWORD *)(v6 - 8);
            *(_OWORD *)(v18 - 24) = v19;
            v18 -= 24;
            v6 -= 24;
          }
          while (v6 != v7);
          v20 = *(int64x2_t *)v5;
        }
        v10 = (unint64_t)(v17 + 24);
        *v5 = (unint64_t)v18;
        v5[1] = (unint64_t)(v17 + 24);
        v23 = v20;
        v21 = v5[2];
        v5[2] = (unint64_t)&v16[24 * v15];
        v24 = v21;
        v22 = v20.i64[0];
        result = (unint64_t *)std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v22);
      }
      else
      {
        *(double *)v6 = a3;
        *(_QWORD *)(v6 + 8) = a2;
        *(_QWORD *)(v6 + 16) = 1;
        v10 = v6 + 24;
      }
      v5[1] = v10;
    }
  }
  return result;
}

uint64_t TKerningEngineImplementation::DetermineSimilarRuns(uint64_t result, double **a2)
{
  uint64_t v2;
  TRunGlue *v4;
  CFIndex v5;
  uint64_t v6;
  int KernSetting;
  CFIndex v8;
  uint64_t v9;
  unint64_t v10;
  TFont *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double *v23;
  char *v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  _QWORD v29[5];
  CFRange v30;

  v2 = *(_QWORD *)(result + 16);
  if (v2 >= 2)
  {
    v4 = (TRunGlue *)result;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 16) + 8 * v5) + 48);
    v28 = NAN;
    KernSetting = TAttributes::GetKernSetting((TAttributes *)(v6 + 40), &v28, 0);
    v8 = v5 + 1;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 16) + 8 * v8) + 48);
      v27 = NAN;
      if (*(unsigned __int8 *)(v6 + 224) != *(unsigned __int8 *)(v9 + 224))
        break;
      if (*(_DWORD *)(v6 + 304) != *(_DWORD *)(v9 + 304))
        break;
      v10 = atomic_load((unint64_t *)(v6 + 56));
      v11 = *(TFont **)(v10 + 40);
      v12 = atomic_load((unint64_t *)(v9 + 56));
      if (!TFont::Compare(v11, *(const TFont **)(v12 + 40), 0))
        break;
      result = TAttributes::GetKernSetting((TAttributes *)(v9 + 40), &v27, 0);
      if (KernSetting != (_DWORD)result)
        break;
      v13 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        v16 = *a2;
        v17 = v13 - *a2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          abort();
        v19 = v14 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v29[4] = a2 + 3;
        if (v20)
        {
          v21 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(a2 + 3), v20);
          v16 = *a2;
          v13 = a2[1];
        }
        else
        {
          v21 = 0;
        }
        v22 = (double *)&v21[8 * v17];
        *v22 = v27;
        if (v13 == v16)
        {
          v24 = &v21[8 * v17];
        }
        else
        {
          v23 = v13;
          v24 = &v21[8 * v17];
          do
          {
            v25 = *((_QWORD *)v23-- - 1);
            *((_QWORD *)v24 - 1) = v25;
            v24 -= 8;
          }
          while (v23 != v16);
        }
        v15 = v22 + 1;
        *a2 = (double *)v24;
        a2[1] = v22 + 1;
        v26 = a2[2];
        a2[2] = (double *)&v21[8 * v20];
        v29[2] = v13;
        v29[3] = v26;
        v29[0] = v16;
        v29[1] = v16;
        result = std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v29);
      }
      else
      {
        *v13 = v27;
        v15 = v13 + 1;
      }
      a2[1] = v15;
      if (++v8 >= v2 + v5)
        return result;
    }
    v30.length = v8 - v5;
    v30.location = v5;
    return (uint64_t)TRunGlue::SetRunRange(v4, v30);
  }
  return result;
}

void TOpenTypePositioningEngine::TOpenTypePositioningEngine(TOpenTypePositioningEngine *this, TRunGlue *a2, const TCharStream *a3)
{
  uint64_t v5;
  OTL::GDEF *v6;
  const __CFData *CommonTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t ScriptAndLangSys;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int FullChar;
  int v21;
  uint64_t v22;
  uint64_t NextChar;
  const TCharStream *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t GlyphIndexForChar;

  *(_QWORD *)this = a2;
  v5 = *((_QWORD *)a2 + 77);
  *((_QWORD *)this + 1) = v5;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 634);
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 8) = 0;
  v6 = (TOpenTypePositioningEngine *)((char *)this + 40);
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(v5 + 400), 1195656518, 0);
  OTL::GDEF::GDEF(v6, CommonTable);
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 27) = a3;
  *((_QWORD *)this + 28) = (char *)this + 232;
  v8 = *(_QWORD *)(*(_QWORD *)this + 8);
  v9 = *(_QWORD *)(*(_QWORD *)this + 16);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v8) + 48);
  ScriptAndLangSys = TAttributes::GetScriptAndLangSys((TAttributes *)(v10 + 40));
  v12 = ScriptAndLangSys;
  *((_DWORD *)this + 6) = ScriptAndLangSys;
  *((_DWORD *)this + 8) = HIDWORD(ScriptAndLangSys);
  if ((_DWORD)ScriptAndLangSys == -1)
    v12 = *(_DWORD *)(v10 + 304);
  TOpenTypePositioningEngine::SetScript((uint64_t)this, v12);
  if (*((_QWORD *)this + 27))
  {
    v13 = *((_DWORD *)this + 6);
    if (v13 == -1 || v13 != *(_DWORD *)(v10 + 304))
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 400);
      if ((*(_DWORD *)(v14 + 184) & 0x400) == 0)
        TBaseFont::DetermineFontFlags(*(TBaseFont **)(*((_QWORD *)this + 1) + 400), 1024);
      if ((*(_DWORD *)(v14 + 180) & 0x400) == 0)
      {
        v24 = a3;
        v35 = 0u;
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v15 = *((_QWORD *)a3 + 2);
        v16 = v9 + v8;
        v36 = 0;
        *(_QWORD *)&v35 = v15;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8);
          v18 = *(_QWORD *)(v10 + 16);
          NextChar = v17;
          if (v18 >= 1)
            break;
LABEL_14:
          if (++v8 == v16)
            return;
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v8) + 48);
        }
        v19 = v18 + v17;
        while (1)
        {
          FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v24, &NextChar, 0);
          v21 = ScriptCodeForLongCharacter(FullChar);
          if (v21)
            break;
          v22 = NextChar;
          GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v10, NextChar);
          NextChar = TRun::GetNextChar((TRun *)v10, v22, &GlyphIndexForChar);
          if (NextChar >= v19)
            goto LABEL_14;
        }
        TOpenTypePositioningEngine::SetScript((uint64_t)this, v21);
      }
    }
  }
}

uint64_t *TOpenTypePositioningEngine::TOpenTypePositioningEngine(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFRange *a5)
{
  int v6;
  uint64_t v9;
  OTL::GDEF *v10;
  const __CFData *CommonTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex location;
  uint64_t length;
  uint64_t v27;
  unsigned int FullChar;
  int v29;
  CFIndex v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v6 = a4;
  v48[3] = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  v9 = *(_QWORD *)(a2 + 616);
  a1[1] = v9;
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a1 + 20) = *(_BYTE *)(a2 + 634);
  a1[3] = 0xFFFFFFFFLL;
  *((_DWORD *)a1 + 8) = HIDWORD(a4);
  v10 = (OTL::GDEF *)(a1 + 5);
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(v9 + 400), 1195656518, 0);
  OTL::GDEF::GDEF(v10, CommonTable);
  *((_BYTE *)a1 + 120) = 0;
  *((_BYTE *)a1 + 208) = 0;
  a1[30] = 0;
  a1[29] = 0;
  a1[27] = a3;
  a1[28] = (uint64_t)(a1 + 29);
  TOpenTypePositioningEngine::SetScript((uint64_t)a1, v6);
  v12 = *(_QWORD *)(*a1 + 56);
  v13 = *(_QWORD *)(*a1 + 64);
  v47 = 0;
  v48[0] = 0xAAAAAAAAAAAAAAAALL;
  v45 = 0;
  v46 = 0;
  v48[1] = 0xAAAAAAAAAAAAAAAALL;
  v48[2] = v48;
  if (v13 != v12)
  {
    std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__vallocate[abi:nn180100](&v45, (v13 - v12) >> 4);
    v14 = 0;
    v15 = v46;
    do
    {
      *(_OWORD *)(v15 + v14) = *(_OWORD *)(v12 + v14);
      v14 += 16;
    }
    while (v12 + v14 != v13);
    v16 = v15 + v14;
    v46 = v16;
    v17 = v45;
    if (v45 != v16)
    {
      v18 = v16;
      while (v18 != v45)
      {
        v19 = v18 - 16;
        v20 = *(_QWORD *)(v18 - 8);
        v18 -= 16;
        if (v20 <= a5->location)
        {
          v17 = v19 + 16;
          break;
        }
      }
      if (v17 - 16 != v16)
      {
        v21 = *(_DWORD *)(v17 - 16);
        v22 = *((_DWORD *)a1 + 6);
        if (v22 == -1)
        {
          TOpenTypePositioningEngine::SetScript((uint64_t)a1, v21);
          if (v17 != v46)
            a5->length = *(_QWORD *)(v17 + 8) - a5->location;
        }
        else if (v22 != v21)
        {
          TOpenTypePositioningEngine::SetScript((uint64_t)a1, -1);
        }
      }
    }
  }
  if (a3 && *((_DWORD *)a1 + 6) == -1)
  {
    v23 = *(_QWORD *)(a1[1] + 400);
    if ((*(_DWORD *)(v23 + 184) & 0x400) == 0)
      TBaseFont::DetermineFontFlags(*(TBaseFont **)(a1[1] + 400), 1024);
    if ((*(_DWORD *)(v23 + 180) & 0x400) == 0)
    {
      v43 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v24 = *(_QWORD *)(a3 + 16);
      v44 = 0;
      *(_QWORD *)&v43 = v24;
      location = a5->location;
      length = a5->length;
      v31 = a5->location;
      v32 = (void **)a3;
      if (length >= 1)
      {
        v27 = length + location;
        while (1)
        {
          FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v32, &v31, 0);
          v29 = ScriptCodeForLongCharacter(FullChar);
          if (v29)
            break;
          if (++v31 >= v27)
            goto LABEL_26;
        }
        TOpenTypePositioningEngine::SetScript((uint64_t)a1, v29);
      }
    }
  }
LABEL_26:
  TRunGlue::SetCharRange(*a1, *a5);
  v32 = (void **)&v45;
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v32);
  return a1;
}

uint64_t TBaseFont::GetCommonTable(TBaseFont *this, uint64_t a2, unsigned int *a3)
{
  int v3;
  unsigned int *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  CGFont *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v15;
  unint64_t v16;
  CGFont *v17;
  unsigned int v18;
  CGFont *v20;
  unsigned int v21;
  int v23;
  unint64_t v24;
  CGFont *v25;
  unsigned int v26;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  CGFont *v32;
  unsigned int v33;
  void *v35;
  uint64_t result;
  unint64_t v37;
  CGFont *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v43;
  unint64_t v44;
  CGFont *v45;
  unint64_t v46;
  unint64_t v47;
  int v49;
  unsigned int v50;
  unint64_t v51;
  CGFont *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;

  v3 = a2;
  v5 = (unsigned int *)((char *)this + 176);
  while (1)
  {
    v6 = *v5;
    if (v3 > 1634561905)
      break;
    if (v3 <= 1634428273)
    {
      switch(v3)
      {
        case 1195656518:
          v7 = (unint64_t *)((char *)this + 16);
          if (atomic_load((unint64_t *)this + 2))
            v15 = 0;
          else
            v15 = (*v5 & 0x100) == 0;
          if (!v15)
          {
            if ((v6 & 0x100) == 0)
              return atomic_load(v7);
            return 0;
          }
          v62 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
          v20 = (CGFont *)atomic_load((unint64_t *)&v62);
          v61 = CGFontCopyTableForTag(v20, 0x47444546u);
          v10 = atomic_load((unint64_t *)&v61);
          if (v10)
          {
            do
              v11 = __ldaxr((unint64_t *)&v61);
            while (__stlxr(0, (unint64_t *)&v61));
            while (!__ldaxr(v7))
            {
              if (!__stlxr(v11, v7))
                goto LABEL_87;
            }
            goto LABEL_52;
          }
          do
            v21 = __ldxr(v5);
          while (__stxr(v21 | 0x100, v5));
          break;
        case 1196445523:
          v7 = (unint64_t *)((char *)this + 24);
          v16 = atomic_load((unint64_t *)this + 3);
          if (v16 || (v6 & 0x80) != 0)
          {
            if ((v6 & 0x80) == 0)
              return atomic_load(v7);
            return 0;
          }
          v62 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
          v17 = (CGFont *)atomic_load((unint64_t *)&v62);
          v61 = CGFontCopyTableForTag(v17, 0x47504F53u);
          v10 = atomic_load((unint64_t *)&v61);
          if (v10)
          {
            do
              v11 = __ldaxr((unint64_t *)&v61);
            while (__stlxr(0, (unint64_t *)&v61));
            while (!__ldaxr(v7))
            {
              if (!__stlxr(v11, v7))
                goto LABEL_87;
            }
            goto LABEL_52;
          }
          do
            v18 = __ldxr(v5);
          while (__stxr(v18 | 0x80, v5));
          break;
        case 1196643650:
          v7 = (unint64_t *)((char *)this + 32);
          v8 = atomic_load((unint64_t *)this + 4);
          if (v8 || (v6 & 0x40) != 0)
          {
            if ((v6 & 0x40) == 0)
              return atomic_load(v7);
            return 0;
          }
          v62 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
          v9 = (CGFont *)atomic_load((unint64_t *)&v62);
          v61 = CGFontCopyTableForTag(v9, 0x47535542u);
          v10 = atomic_load((unint64_t *)&v61);
          if (v10)
          {
            do
              v11 = __ldaxr((unint64_t *)&v61);
            while (__stlxr(0, (unint64_t *)&v61));
            while (!__ldaxr(v7))
            {
              if (!__stlxr(v11, v7))
                goto LABEL_87;
            }
            goto LABEL_52;
          }
          do
            v12 = __ldxr(v5);
          while (__stxr(v12 | 0x40, v5));
          break;
        default:
          return 0;
      }
LABEL_92:

      if (v10)
        return atomic_load(v7);
      return 0;
    }
    if (v3 == 1634428274)
    {
      if ((v6 & 0x2000000) == 0)
        goto LABEL_13;
      v28 = 134234112;
      if (a3)
        *a3 = 1801810552;
LABEL_128:
      v7 = (unint64_t *)((char *)this + 48);
      v51 = atomic_load((unint64_t *)this + 6);
      if (!v51 && (v6 & 0x4000) == 0)
      {
        v62 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
        v52 = (CGFont *)atomic_load((unint64_t *)&v62);
        v61 = CGFontCopyTableForTag(v52, 0x6B657278u);
        v53 = atomic_load((unint64_t *)&v61);
        if (v53)
        {
          do
            v54 = __ldaxr((unint64_t *)&v61);
          while (__stlxr(0, (unint64_t *)&v61));
          do
          {
            if (__ldaxr(v7))
            {
              v57 = 0;
              __clrex();
              goto LABEL_158;
            }
          }
          while (__stlxr(v54, v7));
          v57 = 1;
LABEL_158:
          if (v57)
            v60 = 0;
          else
            v60 = (void *)v54;

        }
        else
        {
          do
            v55 = __ldxr(v5);
          while (__stxr(v55 | 0x4000, v5));
        }

        result = 0;
        if (!v53 || (v28 & v6) == 0x4000)
          return result;
        return atomic_load(v7);
      }
      if ((v28 & v6) != 0x4000)
        return atomic_load(v7);
      return 0;
    }
    if (v3 != 1634497633)
      return 0;
    if ((v6 & 0x2000000) != 0)
    {
      if (a3)
        *a3 = 1819566439;
      v29 = 272629760;
LABEL_115:
      v7 = (unint64_t *)((char *)this + 56);
      v44 = atomic_load((unint64_t *)this + 7);
      if (!v44 && (v6 & 0x400000) == 0)
      {
        v62 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
        v45 = (CGFont *)atomic_load((unint64_t *)&v62);
        v61 = CGFontCopyTableForTag(v45, 0x6C746167u);
        v46 = atomic_load((unint64_t *)&v61);
        if (v46)
        {
          do
            v47 = __ldaxr((unint64_t *)&v61);
          while (__stlxr(0, (unint64_t *)&v61));
          while (!__ldaxr(v7))
          {
            if (!__stlxr(v47, v7))
            {
              v49 = 1;
              goto LABEL_150;
            }
          }
          v49 = 0;
          __clrex();
LABEL_150:
          if (v49)
            v59 = 0;
          else
            v59 = (void *)v47;

        }
        else
        {
          do
            v50 = __ldxr(v5);
          while (__stxr(v50 | 0x400000, v5));
        }

        result = 0;
        if (!v46 || (v29 & v6) == 0x400000)
          return result;
        return atomic_load(v7);
      }
      if ((v29 & v6) != 0x400000)
        return atomic_load(v7);
      return 0;
    }
LABEL_13:
    TBaseFont::InitAnnexTables(this);
    a3 = 0;
  }
  if (v3 > 1801810541)
  {
    if (v3 <= 1819566438)
    {
      if (v3 != 1801810542)
      {
        if (v3 != 1801810552 || (~v6 & 0xA000000) == 0)
          return 0;
        v28 = 0x4000;
        goto LABEL_128;
      }
      v7 = (unint64_t *)((char *)this + 40);
      v31 = atomic_load((unint64_t *)this + 5);
      if (v31 || (v6 & 1) != 0)
      {
        if ((v6 & 1) == 0)
          return atomic_load(v7);
        return 0;
      }
      v62 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
      v32 = (CGFont *)atomic_load((unint64_t *)&v62);
      v61 = CGFontCopyTableForTag(v32, 0x6B65726Eu);
      v10 = atomic_load((unint64_t *)&v61);
      if (v10)
      {
        do
          v11 = __ldaxr((unint64_t *)&v61);
        while (__stlxr(0, (unint64_t *)&v61));
        while (!__ldaxr(v7))
        {
          if (!__stlxr(v11, v7))
          {
LABEL_87:
            v23 = 1;
            goto LABEL_88;
          }
        }
LABEL_52:
        v23 = 0;
        __clrex();
LABEL_88:
        if (v23)
          v35 = 0;
        else
          v35 = (void *)v11;

      }
      else
      {
        do
          v33 = __ldxr(v5);
        while (__stxr(v33 | 1, v5));
      }
    }
    else
    {
      if (v3 == 1819566439)
      {
        if ((~v6 & 0x12000000) == 0)
          return 0;
        v29 = 0x400000;
        goto LABEL_115;
      }
      if (v3 == 1836020344)
      {
        if ((~v6 & 0x22000000) != 0)
        {
          v30 = 4;
          goto LABEL_96;
        }
        return 0;
      }
      if (v3 != 1953653099)
        return 0;
      v7 = (unint64_t *)((char *)this + 72);
      v24 = atomic_load((unint64_t *)this + 9);
      if (v24 || (v6 & 8) != 0)
      {
        if ((v6 & 8) == 0)
          return atomic_load(v7);
        return 0;
      }
      v62 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
      v25 = (CGFont *)atomic_load((unint64_t *)&v62);
      v61 = CGFontCopyTableForTag(v25, 0x7472616Bu);
      v10 = atomic_load((unint64_t *)&v61);
      if (v10)
      {
        do
          v11 = __ldaxr((unint64_t *)&v61);
        while (__stlxr(0, (unint64_t *)&v61));
        while (!__ldaxr(v7))
        {
          if (!__stlxr(v11, v7))
            goto LABEL_87;
        }
        goto LABEL_52;
      }
      do
        v26 = __ldxr(v5);
      while (__stxr(v26 | 8, v5));
    }
    goto LABEL_92;
  }
  if (v3 != 1634561906)
    return 0;
  if ((v6 & 0x2000000) == 0)
    goto LABEL_13;
  v30 = 536870916;
  if (a3)
    *a3 = 1836020344;
LABEL_96:
  v7 = (unint64_t *)((char *)this + 64);
  v37 = atomic_load((unint64_t *)this + 8);
  if (v37 || (v6 & 4) != 0)
  {
    if ((v30 & v6) != 4)
      return atomic_load(v7);
    return 0;
  }
  v62 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t, unsigned int *))(*(_QWORD *)this + 496))(&v62, this, a2, a3);
  v38 = (CGFont *)atomic_load((unint64_t *)&v62);
  v61 = CGFontCopyTableForTag(v38, 0x6D6F7278u);
  v39 = atomic_load((unint64_t *)&v61);
  if (v39)
  {
    do
      v40 = __ldaxr((unint64_t *)&v61);
    while (__stlxr(0, (unint64_t *)&v61));
    do
    {
      if (__ldaxr(v7))
      {
        v43 = 0;
        __clrex();
        goto LABEL_142;
      }
    }
    while (__stlxr(v40, v7));
    v43 = 1;
LABEL_142:
    if (v43)
      v58 = 0;
    else
      v58 = (void *)v40;

  }
  else
  {
    do
      v41 = __ldxr(v5);
    while (__stxr(v41 | 4, v5));
  }

  result = 0;
  if (v39 && (v30 & v6) != 4)
    return atomic_load(v7);
  return result;
}

uint64_t TRunGlue::SetCharRange(uint64_t this, CFRange a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(this + 40) != a2.location || *(_QWORD *)(this + 48) != a2.length)
  {
    v3 = *(_QWORD *)(this + 160);
    v4 = *(int *)(this + 24);
    v5 = v3;
    if ((v4 & 0x80000000) != 0)
      v5 = *(_QWORD *)(this + 168) - 1;
    v6 = *(_QWORD *)(this + 32);
    if ((v5 & 0x8000000000000000) == 0 && v6 > v5)
    {
      while (*(_QWORD *)(*(_QWORD *)(this + 528) + 8 * v5) < a2.location)
      {
        v5 += v4;
        if (v5 < 0 || v6 <= v5)
          goto LABEL_14;
      }
      *(_QWORD *)(this + 160) = v5;
      v3 = v5;
      v5 += v4;
    }
LABEL_14:
    if ((v5 & 0x8000000000000000) == 0 && v6 > v5)
    {
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(this + 528) + 8 * v5) >= a2.location + a2.length)
          break;
        v5 += v4;
        if (v5 < 0)
          break;
      }
      while (v6 > v5);
    }
    *(_QWORD *)(this + 168) = v5;
    if ((v4 & 0x80000000) != 0)
    {
      *(_QWORD *)(this + 160) = v5 + 1;
      *(_QWORD *)(this + 168) = v3 + 1;
    }
    *(CFRange *)(this + 40) = a2;
  }
  return this;
}

unint64_t TAttributes::GetScriptAndLangSys(TAttributes *this)
{
  __CFString *v2;
  uint64_t v3;
  unint64_t v4;

  if (atomic_load((unint64_t *)this + 3))
  {
    v2 = (__CFString *)atomic_load((unint64_t *)this + 3);
    v3 = ScriptAndLangSysFromCanonicalLanguage(v2);
LABEL_6:
    v4 = v3 & 0xFFFFFFFF00000000;
    return v3 | v4;
  }
  if ((*((_WORD *)this + 69) & 0x400) != 0)
  {
    v3 = ScriptAndLangSysForPreferredLanguage();
    goto LABEL_6;
  }
  v4 = 0;
  LODWORD(v3) = -1;
  return v3 | v4;
}

_QWORD *TRunGlue::UpdateForCurrentRealRun(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = atomic_load((unint64_t *)(this[19] + 56));
  if (this[76] != v1)
  {
    this[76] = v1;
    this[77] = *(_QWORD *)(v1 + 40);
  }
  v2 = this[19];
  v3 = *(_QWORD **)(v2 + 216);
  v4 = *(_QWORD *)(v2 + 200);
  this[22] = v3[2] + 2 * v4;
  this[65] = v3[5] + 4 * v4;
  this[66] = v3[6] + 8 * v4;
  return this;
}

uint64_t TRun::TRun(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v21;
  CFIndex v22;
  _BOOL4 v24;
  CFIndex v25;
  CFRange v26;
  uint64_t GlyphIndexForChar;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  CFIndex v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFRange v65;

  *(_QWORD *)a1 = &off_1E15DE6F0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 89) = 0;
  *(_BYTE *)(a1 + 91) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  TAttributes::operator=(a1 + 40, a2 + 40);
  TStorageRange::TStorageRange((TStorageRange *)(a1 + 192), (const TStorageRange *)(a2 + 192));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v10 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = -1;
  *(_QWORD *)(a1 + 272) = v10;
  v11 = (_OWORD *)MEMORY[0x1E0C9D820];
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = *v11;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  if (*(_QWORD *)(a2 + 312))
  {
    v12 = operator new();
    v13 = *(__int128 **)(a2 + 312);
    v15 = v13[1];
    v14 = v13[2];
    v16 = *v13;
    *(_QWORD *)(v12 + 48) = *((_QWORD *)v13 + 6);
    *(_OWORD *)(v12 + 16) = v15;
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)v12 = v16;
    std::vector<CGSize>::vector((_QWORD *)(v12 + 56), (uint64_t)v13 + 56);
    v17 = (void *)atomic_load((unint64_t *)v13 + 10);
    *(_QWORD *)(v12 + 80) = v17;
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(a1 + 312) = v12;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  if (a3 == v18 && a4 == v19)
    return a1;
  v21 = a3 + a4;
  if (a5 == 3 || *(_DWORD *)(a1 + 256) != 2)
    goto LABEL_26;
  v22 = v19 + v18;
  v24 = a3 == v18 || v22 == v21;
  if (a5 != 1 || !v24)
  {
LABEL_68:
    *(_DWORD *)(a1 + 256) = 3;
    if (!v12)
      return a1;
    *(_OWORD *)v12 = *v11;
    goto LABEL_83;
  }
  v25 = v22 - v21;
  if (!v25)
    v19 = a4;
  if (a3 == v18)
    v26.length = v25;
  else
    v26.length = v19;
  if (a3 == v18)
    v26.location = a3 + a4;
  else
    v26.location = *(_QWORD *)(a2 + 8);
  if ((TRun::IsRangeMonotonic((TRun *)a2, v26) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 312);
    goto LABEL_68;
  }
LABEL_26:
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(a2, v21 - 1);
  v28 = TRun::GetGlyphIndexForCharIndex<false>(a2, a3);
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 216) + 48);
  v30 = *(_QWORD *)(a2 + 200);
  if ((*(_BYTE *)(a1 + 224) & 1) != 0)
    v31 = -1;
  else
    v31 = 1;
  v61 = *(_QWORD *)(a2 + 200);
  v62 = *(_QWORD *)(*(_QWORD *)(a2 + 216) + 48);
  if ((a5 & 0xFFFFFFFD) == 1 || *(_DWORD *)(a1 + 256) == 1)
  {
    v32 = *(_QWORD *)(a2 + 208);
    if ((*(_BYTE *)(a1 + 224) & 1) != 0)
      v33 = -1;
    else
      v33 = *(_QWORD *)(a2 + 208);
    v34 = v33 - v31;
    do
    {
      v35 = GlyphIndexForChar;
      if (v34 == GlyphIndexForChar)
        break;
      GlyphIndexForChar += v31;
      v36 = *(_QWORD *)(v29 + 8 * v31 + 8 * v30 + 8 * v35);
    }
    while (a3 <= v36 && v21 > v36);
    if ((*(_BYTE *)(a1 + 224) & 1) == 0)
      v32 = -1;
    v38 = v32 + v31;
    do
    {
      v39 = v28;
      if (v38 == v28)
        break;
      v28 -= v31;
      v40 = *(_QWORD *)(v29 - 8 * v31 + 8 * v30 + 8 * v39);
    }
    while (a3 <= v40 && v21 > v40);
    v28 = v39;
    GlyphIndexForChar = v35;
  }
  v42 = v28 - GlyphIndexForChar;
  if (v28 >= GlyphIndexForChar)
    v43 = GlyphIndexForChar;
  else
    v43 = v28;
  if (v28 - GlyphIndexForChar < 0)
    v42 = GlyphIndexForChar - v28;
  v63 = v42;
  v44 = v42 + 1;
  v65.location = v43;
  v65.length = v42 + 1;
  TStorageRange::SetStorageSubRange((TStorageRange *)(a1 + 192), v65);
  if (a5 != 2)
    goto LABEL_88;
  v64 = TRun::GetGlyphIndexForCharIndex<false>(a2, v21 - 1);
  if (TRun::GetNextChar((TRun *)a2, v21 - 1, &v64) == v21)
  {
    v45 = *(_QWORD *)(a1 + 8);
    if (v45 == *(_QWORD *)(a2 + 8))
      goto LABEL_88;
    if (v45 >= 1)
    {
      v53 = *(_QWORD *)(a2 + 216);
      v54 = *(_QWORD *)(a2 + 200);
      v55 = v28;
      while (v55 - v31 >= 0 && *(_QWORD *)(a2 + 208) > v55 - v31)
      {
        v56 = v55 - v31;
        v57 = *(_QWORD *)(*(_QWORD *)(v53 + 48) - 8 * v31 + 8 * v54 + 8 * v55);
        v55 -= v31;
        if (v57 < v45)
        {
          if ((*(_DWORD *)(*(_QWORD *)(v53 + 40) + 4 * v54 + 4 * v56) & 8) != 0)
            goto LABEL_81;
          break;
        }
      }
    }
    if (*(_QWORD *)(v62 + 8 * v61 + 8 * v28) == v45 && TRun::ResolveCharIndex((TRun *)a2, v45) == *(_QWORD *)(a1 + 8))
    {
LABEL_88:
      if (v43 != *(_QWORD *)(a2 + 200))
      {
        v46 = *(_OWORD **)(a1 + 312);
        if (v46)
          *v46 = *MEMORY[0x1E0C9D820];
      }
      v47 = *(_QWORD *)(a2 + 312);
      if (v47 && *(_QWORD *)(v47 + 56) != *(_QWORD *)(v47 + 64))
      {
        TRun::InitStretchFactors((TRun *)a1);
        v48 = *(_QWORD *)(a1 + 312);
        std::vector<CGSize>::resize(v48 + 56, v44);
        v49 = *(_OWORD **)(v48 + 56);
        v50 = *(_QWORD *)(a2 + 312);
        if (!v50 || (v51 = *(_QWORD *)(v50 + 56), v51 == *(_QWORD *)(v50 + 64)))
        {
          v52 = v63 + 2;
          do
          {
            *v49++ = kUnitSize;
            --v52;
          }
          while (v52 > 1);
        }
        else
        {
          memmove(v49, (const void *)(v51 + 16 * v43), 16 * v44);
        }
      }
      return a1;
    }
  }
LABEL_81:
  *(_DWORD *)(a1 + 256) = 3;
  v58 = *(_OWORD **)(a1 + 312);
  if (!v58)
    return a1;
  *v58 = *MEMORY[0x1E0C9D820];
LABEL_83:
  v59 = *(_QWORD *)(a1 + 312);
  if (v59)
  {
    v60 = *(_QWORD *)(v59 + 56);
    if (v60 != *(_QWORD *)(v59 + 64))
      *(_QWORD *)(v59 + 64) = v60;
  }
  return a1;
}

uint64_t TRun::ResolveCharIndex(TRun *this, uint64_t a2)
{
  uint64_t NextChar;
  uint64_t v5;
  uint64_t PrevChar;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t GlyphIndexForChar;

  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2);
  NextChar = TRun::GetNextChar(this, a2, &GlyphIndexForChar);
  v5 = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
  if (NextChar < v5)
    return TRun::GetPrevChar(this, NextChar, &GlyphIndexForChar);
  v7 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, v5 - 1);
  GlyphIndexForChar = v7;
  v8 = (_QWORD *)*((_QWORD *)this + 27);
  v9 = *((_QWORD *)this + 25);
  v10 = *(_QWORD *)(v8[6] + 8 * v9 + 8 * v7);
  if (*(__int16 *)(v8[2] + 2 * v9 + 2 * v7) == -1 || (*(_DWORD *)(v8[5] + 4 * v9 + 4 * v7) & 0x20) != 0)
  {
    v14 = v7;
    PrevChar = TRun::GetPrevChar(this, v10, &v14);
    v11 = *((_QWORD *)this + 1);
    if (v11 <= PrevChar && *((_QWORD *)this + 2) + v11 > PrevChar)
    {
      GlyphIndexForChar = v14;
      return PrevChar;
    }
  }
  return v10;
}

uint64_t TRun::GetGlyphIndexForCharIndex<false>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 208);
  if (v2 < 1)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 - v5 >= v2)
    v7 = v2 - 1;
  else
    v7 = a2 - v5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = *(_BYTE *)(a1 + 224);
  if ((v9 & 1) != 0)
    v10 = v2 + ~v8;
  else
    v10 = v8;
  v11 = *(_QWORD **)(a1 + 216);
  v12 = v11[6];
  v13 = *(_QWORD *)(a1 + 200);
  v14 = v12 + 8 * v13;
  v15 = *(_QWORD *)(v14 + 8 * v10);
  if (v15 == a2)
    return v10;
  if (*(_DWORD *)(a1 + 256) != 2)
  {
    if (v15 >= a2)
    {
      if ((v9 & 1) != 0)
      {
        if (v2 + ~v8 <= v2 - 1)
          v10 = v2 - 1;
        else
          v10 = v2 + ~v8;
        v18 = v2 - v8;
        while (v10 + 1 != v18)
        {
          v19 = *(_QWORD *)(v14 + 8 * v18++);
          if (v19 <= a2)
            return v18 - 1;
        }
      }
      else if (v8 < 1)
      {
        return v8;
      }
      else
      {
        do
        {
          v10 = v7 - 1;
          if (v7 < 2)
            break;
          v17 = *(_QWORD *)(v12 + 8 * v13 - 8 + 8 * v7--);
        }
        while (v17 > a2);
      }
      return v10;
    }
    if (objc_msgSend(v11, "attachmentCountAtIndex:", v10 + v13) + v15 >= a2)
      return v10;
  }
  return TRun::FindGlyphIndex<false>(a1, a2, 1);
}

uint64_t TRun::GetNextChar(TRun *this, uint64_t NextGlyphIndex, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *((_DWORD *)this + 64);
  if (v6)
  {
    while (1)
    {
      if (v6 > 1)
      {
        result = TRun::FindNextGlyphIndex(this, NextGlyphIndex, a3);
      }
      else
      {
        v7 = *a3;
        if ((*((_BYTE *)this + 224) & 1) != 0)
        {
          v8 = v7 - 1;
          *a3 = v7 - 1;
          if (v7 > 0)
          {
LABEL_8:
            result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v8);
            goto LABEL_9;
          }
        }
        else
        {
          v8 = v7 + 1;
          *a3 = v7 + 1;
          if (v7 + 1 < *((_QWORD *)this + 26))
            goto LABEL_8;
        }
        result = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
      }
LABEL_9:
      if (result == NextGlyphIndex)
      {
        v6 = *((_DWORD *)this + 64);
      }
      else
      {
        if (result >= *((_QWORD *)this + 2) + *((_QWORD *)this + 1))
          return result;
        v10 = *((_QWORD *)this + 27);
        v11 = *((_QWORD *)this + 25);
        if (*(__int16 *)(*(_QWORD *)(v10 + 16) + 2 * v11 + 2 * *a3) != -1
          && (*(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v11 + 4 * *a3) & 0x20) == 0)
        {
          return result;
        }
        v6 = *((_DWORD *)this + 64);
        NextGlyphIndex = result;
      }
    }
  }
  while (1)
  {
    if (v6 > 1)
    {
      NextGlyphIndex = TRun::FindNextGlyphIndex(this, NextGlyphIndex, a3);
    }
    else
    {
      v14 = *a3;
      if ((*((_BYTE *)this + 224) & 1) != 0)
      {
        v15 = v14 - 1;
        *a3 = v14 - 1;
        if (v14 > 0)
        {
LABEL_24:
          NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48)
                                     + 8 * *((_QWORD *)this + 25)
                                     + 8 * v15);
          goto LABEL_25;
        }
      }
      else
      {
        v15 = v14 + 1;
        *a3 = v14 + 1;
        if (v14 + 1 < *((_QWORD *)this + 26))
          goto LABEL_24;
      }
      NextGlyphIndex = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
    }
LABEL_25:
    if (NextGlyphIndex >= *((_QWORD *)this + 2) + *((_QWORD *)this + 1))
      return NextGlyphIndex;
    v12 = *((_QWORD *)this + 27);
    v13 = *((_QWORD *)this + 25);
    if (*(__int16 *)(*(_QWORD *)(v12 + 16) + 2 * v13 + 2 * *a3) != -1
      && (*(_DWORD *)(*(_QWORD *)(v12 + 40) + 4 * v13 + 4 * *a3) & 0x20) == 0)
    {
      return NextGlyphIndex;
    }
    v6 = *((_DWORD *)this + 64);
  }
}

void TRun::TRun(TRun *this, _CTGlyphStorage *a2, CFRange a3, const TAttributes *a4)
{
  uint64_t length;
  CFIndex location;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFRange v15;

  length = a3.length;
  location = a3.location;
  *(_WORD *)((char *)this + 89) = 0;
  *(_QWORD *)this = &off_1E15DE6F0;
  *((_BYTE *)this + 91) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  TAttributes::operator=((uint64_t)this + 40, (uint64_t)a4);
  v15.location = location;
  v15.length = length;
  TStorageRange::TStorageRange((TRun *)((char *)this + 192), a2, v15);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = -1;
  *((_OWORD *)this + 18) = *MEMORY[0x1E0C9D820];
  *((_DWORD *)this + 76) = -1;
  *((_QWORD *)this + 39) = 0;
  v8 = length - 1;
  if (length < 1)
  {
    v12 = 0;
    v14 = 0;
  }
  else
  {
    v9 = (_QWORD *)*((_QWORD *)this + 27);
    v10 = *((_QWORD *)this + 25);
    v11 = (uint64_t *)(v9[6] + 8 * v10);
    v12 = *v11;
    v13 = v11[v8];
    v14 = v13 - v12 + objc_msgSend(v9, "attachmentCountAtIndex:", v10 + v8) + 1;
  }
  *((_QWORD *)this + 1) = v12;
  *((_QWORD *)this + 2) = v14;
}

void TStorageRange::TStorageRange(TStorageRange *this, _CTGlyphStorage *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  char v6;
  int v7;
  char v8;
  char v9;
  char v10;
  __int16 *v11;
  int v12;

  length = a3.length;
  location = a3.location;
  *(_QWORD *)this = 0;
  *(CFRange *)((char *)this + 8) = a3;
  *((_QWORD *)this + 3) = a2;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 33) &= ~1u;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = 2;
  else
    v6 = 0;
  *((_BYTE *)this + 33) = *((_BYTE *)this + 33) & 0xFD | v6;
  v7 = objc_msgSend(*((id *)this + 3), "isMemberOfClass:", objc_opt_class());
  v8 = 0;
  if (v7)
  {
    if (objc_msgSend(*((id *)this + 3), "hasCustomAdvances"))
      v8 = 4;
    else
      v8 = 0;
  }
  v9 = *((_BYTE *)this + 33);
  v10 = v9 & 0xE3 | v8;
  *((_BYTE *)this + 33) = v10;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((v9 & 2) != 0 && length)
  {
    v11 = (__int16 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 2 * location);
    while (1)
    {
      v12 = *v11++;
      if (v12 == -1)
        break;
      if (!--length)
        return;
    }
    *((_BYTE *)this + 33) = v10 | 8;
  }
}

void TStorageRange::TStorageRange(TStorageRange *this, const TStorageRange *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((id *)a2 + 3);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  v4 = *((_BYTE *)this + 33) & 0xFE | *((_BYTE *)a2 + 33) & 1;
  *((_BYTE *)this + 33) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((unsigned __int8 *)a2 + 33) >> 1) & 1));
  *((_BYTE *)this + 33) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((unsigned __int8 *)a2 + 33) >> 2) & 1));
  *((_BYTE *)this + 33) = v6;
  LOBYTE(v6) = v6 & 0xF7 | (8 * ((*((_BYTE *)a2 + 33) & 8) != 0));
  *((_BYTE *)this + 33) = v6;
  *((_BYTE *)this + 33) = v6 & 0xEF | *((_BYTE *)a2 + 33) & 0x10;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
}

uint64_t TRun::GetPrevChar(TRun *this, uint64_t PrevGlyphIndex, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *((_DWORD *)this + 64);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        if (v6 > 1 || (*((_BYTE *)this + 224) & 1) != 0)
        {
          result = TRun::FindPrevGlyphIndex(this, PrevGlyphIndex, a3);
        }
        else
        {
          v7 = *a3;
          v8 = *a3 - 1;
          *a3 = v8;
          result = v7 <= 0
                 ? *((_QWORD *)this + 1) - 1
                 : *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v8);
        }
        if (result != PrevGlyphIndex)
          break;
        v6 = *((_DWORD *)this + 64);
      }
      if (result < *((_QWORD *)this + 1))
        break;
      v10 = *((_QWORD *)this + 27);
      v11 = *((_QWORD *)this + 25);
      if (*(__int16 *)(*(_QWORD *)(v10 + 16) + 2 * v11 + 2 * *a3) != -1
        && (*(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v11 + 4 * *a3) & 0x20) == 0)
      {
        break;
      }
      v6 = *((_DWORD *)this + 64);
      PrevGlyphIndex = result;
    }
  }
  else
  {
    while (1)
    {
      if (v6 > 1 || (*((_BYTE *)this + 224) & 1) != 0)
      {
        PrevGlyphIndex = TRun::FindPrevGlyphIndex(this, PrevGlyphIndex, a3);
      }
      else
      {
        v14 = *a3;
        v15 = *a3 - 1;
        *a3 = v15;
        PrevGlyphIndex = v14 <= 0
                       ? *((_QWORD *)this + 1) - 1
                       : *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v15);
      }
      if (PrevGlyphIndex < *((_QWORD *)this + 1))
        break;
      v12 = *((_QWORD *)this + 27);
      v13 = *((_QWORD *)this + 25);
      if (*(__int16 *)(*(_QWORD *)(v12 + 16) + 2 * v13 + 2 * *a3) != -1
        && (*(_DWORD *)(*(_QWORD *)(v12 + 40) + 4 * v13 + 4 * *a3) & 0x20) == 0)
      {
        break;
      }
      v6 = *((_DWORD *)this + 64);
    }
    return PrevGlyphIndex;
  }
  return result;
}

double TStorageRange::SetStorageSubRange(TStorageRange *this, CFRange a2)
{
  CFIndex v3;
  char v4;
  char *v5;
  CFIndex length;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  uint64_t v11;
  double result;
  double __C;

  v3 = *((_QWORD *)this + 1) + a2.location;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = a2.length;
  v4 = *((_BYTE *)this + 33);
  if ((v4 & 1) != 0)
  {
    *((_BYTE *)this + 33) = v4 & 0xFE;
    if (a2.length >= 1)
    {
      v5 = (char *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 4 * v3);
      length = a2.length;
      while (1)
      {
        v7 = *v5;
        v5 += 4;
        if ((v7 & 4) != 0)
          break;
        if (!--length)
          goto LABEL_8;
      }
      *((_BYTE *)this + 33) = v4 | 1;
    }
  }
LABEL_8:
  __C = NAN;
  v8 = *((_QWORD *)this + 3);
  v9 = *(_QWORD *)(v8 + 32);
  if (v9 || (v11 = *(_QWORD *)(v8 + 24)) == 0)
  {
    v10 = (const double *)(v9 + 16 * v3);
    a2.location = 2;
  }
  else
  {
    v10 = (const double *)(v11 + 8 * v3);
    a2.location = 1;
  }
  vDSP_sveD(v10, a2.location, &__C, a2.length);
  result = __C;
  *(double *)this = __C;
  return result;
}

uint64_t std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 24) % 0x18uLL + *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (_QWORD *)(v4 + 720);
    if (v4 <= (unint64_t)v3 && v5 > v3)
    {
      if (*(_QWORD *)(a1 + 24) == *v5)
        *v5 = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

char *TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 720);
  result = *(char **)(a1 + 720);
  v4 = &result[24 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(24 * a2);
  }
  return result;
}

uint64_t TStorageRange::GetNextUnmappedGlyphRange(TStorageRange *this, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  int v14;

  v4 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
  if (v5)
  {
    if (result > a2)
    {
      v6 = *((_QWORD *)this + 1);
      v7 = v5 + 2 * v6;
      v8 = 2 * v6 + 2 * a2 + v5 + 2;
      while (*(_WORD *)(v7 + 2 * a2))
      {
        ++a2;
        v8 += 2;
        if (result == a2)
          return result;
      }
      v9 = result - a2;
      if (result - a2 < 2)
      {
        v12 = 1;
      }
      else
      {
        v10 = 0;
        while (!*(_WORD *)(v8 + 2 * v10))
        {
          v11 = v10 + 2;
          ++v10;
          if (v11 >= v9)
          {
            v12 = result - a2;
            goto LABEL_15;
          }
        }
        v12 = v10 + 1;
      }
LABEL_15:
      if (v12 < v9)
      {
        v13 = (__int16 *)(v8 + 2 * v12 - 2);
        while (1)
        {
          v14 = *v13++;
          if (v14 != -1)
            break;
          if (++v12 >= v9)
            return a2;
        }
      }
    }
    return a2;
  }
  return result;
}

void TBaseFont::InitAnnexTables(TBaseFont *this)
{
  unsigned int *v2;
  int v3;
  int v4;
  const void *v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  unint64_t v8;
  const void *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  unint64_t *v15;
  void *v16;
  int v18;
  unsigned int v19;
  const __CFBoolean *v20;
  const __CFBoolean *v21;
  const void *v22;
  unsigned int v23;
  unint64_t *v24;
  void *v25;
  id v27;

  v2 = (unsigned int *)((char *)this + 176);
  v3 = *((_DWORD *)this + 44);
  v4 = v3 | 0x2000000;
  if ((*((_DWORD *)this + 45) & 0x20000000) != 0
    || (*((_DWORD *)this + 44) & 0xC0) == 0xC0
    || (v5 = (const void *)atomic_load((unint64_t *)this + 12),
        (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)&unk_1E1604E10, v5)) == 0))
  {
    ConvertToMorxSync(this);
    goto LABEL_17;
  }
  v7 = Value;
  v27 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *))(*(_QWORD *)this + 72))(&v27, this, CFSTR("CTFontVersionName"));
  v8 = atomic_load((unint64_t *)&v27);
  if (v8
    && (v9 = (const void *)atomic_load((unint64_t *)&v27),
        (v10 = (const __CFDictionary *)CFDictionaryGetValue(v7, v9)) != 0)
    && ((v11 = v10, (v12 = CFDictionaryGetValue(v10, CFSTR("aka"))) == 0)
     || (v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, v12)) != 0))
  {
    v13 = CFDictionaryGetValue(v11, CFSTR("kerx"));
    v14 = CFDictionaryGetValue(v11, CFSTR("morx"));
    if (v13)
    {
      v15 = (unint64_t *)((char *)this + 48);
      v16 = (void *)CFRetain(v13);
      while (!__ldaxr(v15))
      {
        if (!__stlxr((unint64_t)v16, v15))
        {

          v18 = 167772160;
          goto LABEL_20;
        }
      }
      __clrex();

    }
    else
    {
      v18 = 33570816;
LABEL_20:
      v4 = v3 | v18;
    }
    v20 = (const __CFBoolean *)CFDictionaryGetValue(v11, CFSTR("ignoreGDEF"));
    if (v20 && CFBooleanGetValue(v20))
      v4 |= 0x100u;
    v21 = (const __CFBoolean *)CFDictionaryGetValue(v11, CFSTR("converted"));
    if (v21 && CFBooleanGetValue(v21))
    {
      v22 = CFDictionaryGetValue(v11, CFSTR("ltag"));
      TBaseFont::SetConvertedTables(this, v14, v22);
      do
        v23 = __ldxr(v2);
      while (__stxr(v23 | v4, v2));

      return;
    }
    if (v14)
    {
      v24 = (unint64_t *)((char *)this + 64);
      v25 = (void *)CFRetain(v14);
      while (!__ldaxr(v24))
      {
        if (!__stlxr((unint64_t)v25, v24))
        {

          v4 |= 0x20000000u;
          goto LABEL_16;
        }
      }
      __clrex();

      goto LABEL_16;
    }
  }
  else
  {
    v4 = v3 | 0x2004000;
  }
  v4 |= 4u;
LABEL_16:

  do
LABEL_17:
    v19 = __ldxr(v2);
  while (__stxr(v19 | v4, v2));
}

size_t TBaseFont::InitGlyphCount(TBaseFont *this, CGFontRef font)
{
  size_t result;

  if (!font)
    return 0;
  result = CGFontGetNumberOfGlyphs(font);
  atomic_store(result, (unint64_t *)this + 25);
  return result;
}

uint64_t TInstanceFont::HasVariations(TInstanceFont *this)
{
  return 1;
}

void TAATKerxEngine::TAATKerxEngine(TAATKerxEngine *this, TRunGlue *a2, CFDataRef theData)
{
  const UInt8 *BytePtr;
  TRunGlue *v6;
  char v7;
  int64x2_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  BOOL v19;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  char *v62;
  uint64_t v63;
  __CFString *v64;
  unint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  char *v69;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = theData;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    v6 = *(TRunGlue **)this;
  }
  else
  {
    BytePtr = 0;
    v6 = a2;
  }
  v7 = *((_BYTE *)v6 + 634);
  *((_QWORD *)this + 14) = 0;
  v8 = (int64x2_t *)((char *)this + 112);
  *((_QWORD *)this + 11) = BytePtr;
  *((_BYTE *)this + 104) = v7;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = (char *)this + 136;
  *((_QWORD *)this + 48) = 0;
  if (!BytePtr)
    return;
  v9 = (unint64_t)&BytePtr[CFDataGetLength(*((CFDataRef *)this + 10))];
  *((_QWORD *)this + 12) = v9;
  v10 = (unsigned int *)*((_QWORD *)this + 11);
  v11 = v10 + 2;
  if ((unint64_t)(v10 + 2) > v9 || (v12 = bswap32(*v10) >> 16, v12 - 2 > 2))
  {
LABEL_84:
    v64 = TFont::DebugDescription(*(TFont **)(*(_QWORD *)this + 616));
    CFLog();

    v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 616) + 400);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 488))(v63, 1801810552);
    *((_QWORD *)this + 11) = 0;
    return;
  }
  if (v12 < 3)
    return;
  v13 = v10[1];
  if (!v13)
    return;
  v14 = bswap32(v13);
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  do
  {
    if ((unint64_t)(v11 + 1) > v9)
      goto LABEL_84;
    v11 = (unsigned int *)((char *)v11 + bswap32(*v11));
    if ((unint64_t)v11 > v9)
      goto LABEL_84;
    --v15;
  }
  while (v15);
  v16 = &v11[v14];
  if (v10 > v11 || v16 < v11 || (unint64_t)v16 > v9)
  {
    v19 = v10 > v11 || (unint64_t)(v11 + 1) > v9;
    if (v19 || (v9 - (unint64_t)v11) >> 2 != v14)
      return;
  }
  v21 = 0;
  v22 = *((_QWORD *)a2 + 78);
  if (v22 <= 0x10000)
    v23 = (v22 + 7) >> 3;
  else
    v23 = 0x2000;
  v24 = &v11[v14];
  v25 = v11;
  v65 = v23;
  while (1)
  {
    v26 = bswap32(*v25);
    if (v26 + 1 <= 1)
    {
      if (v13 == 0x1000000)
        goto LABEL_87;
      v28 = (_QWORD *)*((_QWORD *)this + 15);
      v27 = *((_QWORD *)this + 16);
      if ((unint64_t)v28 >= v27)
      {
        v44 = ((uint64_t)v28 - v8->i64[0]) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
LABEL_91:
          abort();
        v45 = v27 - v8->i64[0];
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        v69 = (char *)this + 136;
        if (v47)
          v48 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)this + 136, v47);
        else
          v48 = 0;
        v56 = &v48[8 * v44];
        v57 = &v48[8 * v47];
        v68 = v57;
        *(_QWORD *)v56 = 0;
        v29 = v56 + 8;
        v67.i64[1] = (uint64_t)(v56 + 8);
        v59 = *((_QWORD *)this + 14);
        v58 = *((_QWORD *)this + 15);
        if (v58 == v59)
        {
          v61 = vdupq_n_s64(v58);
        }
        else
        {
          do
          {
            v60 = *(_QWORD *)(v58 - 8);
            v58 -= 8;
            *((_QWORD *)v56 - 1) = v60;
            v56 -= 8;
          }
          while (v58 != v59);
          v61 = *v8;
          v29 = (_QWORD *)v67.i64[1];
          v57 = v68;
        }
        *((_QWORD *)this + 14) = v56;
        *((_QWORD *)this + 15) = v29;
        v67 = v61;
        v62 = (char *)*((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = v57;
        v68 = v62;
        v66 = v61.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v66);
        goto LABEL_80;
      }
      *v28 = 0;
      v29 = v28 + 1;
      goto LABEL_81;
    }
    v30 = (char *)v11 + v26;
    v31 = *((_QWORD *)this + 12);
    v32 = &v30[v23] < v30 || (unint64_t)&v30[v23] > v31;
    v33 = !v32 && *((_QWORD *)this + 11) <= (unint64_t)v30;
    v34 = (unint64_t)(v30 + 1) <= v31;
    v35 = v31 - (_QWORD)v30;
    v36 = *((_QWORD *)this + 11) <= (unint64_t)v30 && v34 ? v35 : 0;
    if (!v33 && v36 != v23)
      break;
    v38 = (char **)*((_QWORD *)this + 15);
    v37 = *((_QWORD *)this + 16);
    if ((unint64_t)v38 >= v37)
    {
      v39 = ((uint64_t)v38 - v8->i64[0]) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
        goto LABEL_91;
      v40 = v37 - v8->i64[0];
      v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      v69 = (char *)this + 136;
      if (v42)
        v43 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)this + 136, v42);
      else
        v43 = 0;
      v49 = &v43[8 * v39];
      v50 = &v43[8 * v42];
      v68 = v50;
      *(_QWORD *)v49 = v30;
      v29 = v49 + 8;
      v67.i64[1] = (uint64_t)(v49 + 8);
      v52 = *((_QWORD *)this + 14);
      v51 = *((_QWORD *)this + 15);
      if (v51 == v52)
      {
        v54 = vdupq_n_s64(v51);
      }
      else
      {
        do
        {
          v53 = *(_QWORD *)(v51 - 8);
          v51 -= 8;
          *((_QWORD *)v49 - 1) = v53;
          v49 -= 8;
        }
        while (v51 != v52);
        v54 = *v8;
        v29 = (_QWORD *)v67.i64[1];
        v50 = v68;
      }
      *((_QWORD *)this + 14) = v49;
      *((_QWORD *)this + 15) = v29;
      v67 = v54;
      v55 = (char *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v50;
      v68 = v55;
      v66 = v54.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v66);
      v21 = 1;
LABEL_80:
      v23 = v65;
      goto LABEL_81;
    }
    *v38 = v30;
    v29 = v38 + 1;
    v21 = 1;
LABEL_81:
    *((_QWORD *)this + 15) = v29;
    if (++v25 == v24)
    {
      if ((v21 & 1) != 0)
        return;
      goto LABEL_89;
    }
  }
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
LABEL_87:
  if ((v21 & 1) == 0)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 15);
LABEL_89:
    if ((_QWORD *)v8->i64[0] != v29)
      *((_QWORD *)this + 15) = v8->i64[0];
  }
}

void TAATKernEngine::TAATKernEngine(TAATKernEngine *this, TRunGlue *a2)
{
  const __CFData *CommonTable;
  const UInt8 *BytePtr;
  const UInt8 *v5;
  CFIndex Length;
  int *v7;
  int v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  uint64_t v14;
  __CFString *v15;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_BYTE *)this + 80) = 0;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)a2 + 77) + 400), 1801810542, 0);
  *((_QWORD *)this + 11) = CommonTable;
  if (!CommonTable)
  {
    *((_QWORD *)this + 12) = 0;
    *((_BYTE *)this + 112) = *(_BYTE *)(*(_QWORD *)this + 634);
    return;
  }
  BytePtr = CFDataGetBytePtr(CommonTable);
  *((_QWORD *)this + 12) = BytePtr;
  *((_BYTE *)this + 112) = *(_BYTE *)(*(_QWORD *)this + 634);
  if (BytePtr)
  {
    v5 = BytePtr;
    Length = CFDataGetLength(*((CFDataRef *)this + 11));
    *((_QWORD *)this + 13) = &v5[Length];
    v7 = (int *)*((_QWORD *)this + 12);
    if (v7 + 2 <= (int *)&v5[Length])
    {
      v8 = *v7;
      if (v8 == 256)
      {
        *((_BYTE *)this + 113) = 0;
        return;
      }
      if (!(_WORD)v8)
      {
        *((_BYTE *)this + 113) = 1;
        return;
      }
    }
    v9 = (void *)atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 616) + 400) + 96));
    v10 = v9;
    if (v10 == CFSTR("Bauhaus93"))
    {
      v13 = CFSTR("Bauhaus93");
    }
    else
    {
      if (v10)
      {
        v11 = v10;
        v12 = CFEqual(v10, CFSTR("Bauhaus93"));

        if (v12)
        {
LABEL_18:
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 616) + 400);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 488))(v14, 1801810542);
          *((_QWORD *)this + 12) = 0;
          return;
        }
      }
      else
      {

      }
      v15 = TFont::DebugDescription(*(TFont **)(*(_QWORD *)this + 616));
      CFLog();
      v13 = v15;
    }

    goto LABEL_18;
  }
}

const __CFDictionary *TSplicedFont::HasVariations(TSplicedFont *this)
{
  return TSplicedFontDict::ComponentHasVariations((TSplicedFont *)((char *)this + 600));
}

uint64_t TSplicedFont::IsLastResort(TSplicedFont *this)
{
  return 0;
}

uint64_t TRun::FindGlyphIndex<false>(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  uint64_t v23;

  v3 = *(_QWORD **)(a1 + 216);
  v4 = *(_QWORD *)(a1 + 200);
  v5 = v3[6] + 8 * v4;
  v6 = *(_BYTE *)(a1 + 224);
  if ((v6 & 1) != 0)
    v7 = -a3;
  else
    v7 = a3;
  if (v7 >= 0)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 208) - 1;
  if (v7 < 0)
    v9 = -1;
  else
    v9 = *(_QWORD *)(a1 + 208);
  if (*(int *)(a1 + 256) >= 2)
  {
    if (v8 == v9)
    {
      LOBYTE(v11) = 1;
      v12 = v8;
    }
    else
    {
      v17 = v3[2] + 2 * v4;
      v18 = 4 * v4;
      v11 = 1;
      v12 = v8;
      do
      {
        if (*(__int16 *)(v17 + 2 * v8) != -1 && (*(_DWORD *)(v3[5] + v18 + 4 * v8) & 0x20) == 0)
        {
          v19 = *(_QWORD *)(v5 + 8 * v8);
          if (v19 == a2)
            goto LABEL_29;
          v20 = (v19 < a2) & ((v19 > *(_QWORD *)(v5 + 8 * v12)) | v11);
          v11 &= v20 ^ 1;
          if (v20)
            v12 = v8;
        }
        v8 += v7;
      }
      while (v9 != v8);
      v8 = v9;
    }
LABEL_29:
    if (v8 == v9)
      result = v12;
    else
      result = v8;
    if (v8 == v9)
    {
      if ((v6 & 1) != 0)
        v22 = -1;
      else
        v22 = 1;
      v23 = v9 - v7;
      if (v7 == v22)
        v23 = v12;
      if ((v11 & 1) != 0)
        return v23;
    }
  }
  else
  {
    if (v8 == v9)
    {
      v10 = v8;
    }
    else
    {
      v13 = v3[2] + 2 * v4;
      v14 = 4 * v4;
      v15 = v8;
      while (1)
      {
        v10 = v8;
        if (*(__int16 *)(v13 + 2 * v15) != -1 && (*(_DWORD *)(v3[5] + v14 + 4 * v15) & 0x20) == 0)
        {
          v16 = *(_QWORD *)(v5 + 8 * v15);
          v8 = v15;
          if (v16 >= a2)
            break;
        }
        v15 += v7;
        if (v9 == v15)
        {
          v10 = v8;
          v8 = v9;
          goto LABEL_44;
        }
      }
      if (v16 <= a2)
        v8 = v15;
      else
        v8 = v10;
    }
LABEL_44:
    if (v8 == v9)
      return v10;
    else
      return v8;
  }
  return result;
}

size_t TSplicedFont::InitGlyphCount(TSplicedFont *this, CGFontRef font)
{
  size_t result;
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  const __CFNumber *v7;
  const __CFNumber *v8;
  CFTypeID v9;
  int valuePtr;

  if (!*((_BYTE *)this + 632))
  {
    v5 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
    if (v5)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("FontMetrics"));
      valuePtr = 0;
      if (Value)
      {
        v7 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("numGlyphs"));
        if (v7)
        {
          v8 = v7;
          v9 = CFGetTypeID(v7);
          if (v9 == CFNumberGetTypeID() || v9 == CFBooleanGetTypeID())
          {
            CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
            LODWORD(result) = valuePtr;
            return (int)result;
          }
          if (v9 == CFStringGetTypeID())
          {
            LODWORD(result) = CFStringGetIntValue((CFStringRef)v8);
            return (int)result;
          }
        }
      }
    }
  }
  if (!font)
    return 0;
  result = CGFontGetNumberOfGlyphs(font);
  atomic_store(result, (unint64_t *)this + 25);
  return result;
}

uint64_t TRun::FindPrevGlyphIndex(TRun *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Glyph;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2;
  v6 = (_QWORD *)*((_QWORD *)this + 27);
  v7 = *((_QWORD *)this + 25);
  v8 = v6[6] + 8 * v7;
  if (*((int *)this + 64) <= 1 && (*((_BYTE *)this + 224) & 1) != 0)
  {
    Glyph = *a3 + 1;
    *a3 = Glyph;
    if (Glyph != *((_QWORD *)this + 26))
      return *(_QWORD *)(v8 + 8 * Glyph);
    return *((_QWORD *)this + 1) - 1;
  }
  else
  {
    v9 = *a3;
    v10 = v6[5] + 4 * v7;
    if ((*(_DWORD *)(v10 + 4 * *a3) & 0x380) == 0)
      goto LABEL_16;
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
      Glyph = v9 + 1;
      v13 = *((_QWORD *)this + 26);
      v12 = 1;
    }
    else
    {
      Glyph = v9 - 1;
      v12 = -1;
      v13 = -1;
    }
    if (Glyph != v13)
    {
      v15 = v6[2] + 2 * v7;
      while (*(__int16 *)(v15 + 2 * Glyph) == -1
           || (*(_DWORD *)(v10 + 4 * Glyph) & 0x20) != 0
           || *(_QWORD *)(v8 + 8 * Glyph) != a2)
      {
        Glyph += v12;
        if (v13 == Glyph)
          goto LABEL_15;
      }
LABEL_18:
      *a3 = Glyph;
      return *(_QWORD *)(v8 + 8 * Glyph);
    }
LABEL_15:
    v4 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + TRun::FindGlyphIndex<false>((uint64_t)this, a2, -1))+ a2;
LABEL_16:
    while (1)
    {
      v14 = v4 - 1;
      if (v4 <= *((_QWORD *)this + 1))
        break;
      Glyph = TRun::FindGlyphIndex<false>((uint64_t)this, --v4, -1);
      if (Glyph != *a3)
        goto LABEL_18;
    }
  }
  return v14;
}

void TBaseFont::SetConvertedTables(TBaseFont *this, CFTypeRef cf, CFTypeRef a3)
{
  unint64_t *v5;
  void *v6;
  int v8;
  unsigned int *v9;
  const void **v10;
  unsigned int v11;
  int v12;
  unint64_t *v13;
  void *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if (cf)
  {
    if (a3)
    {
      v5 = (unint64_t *)((char *)this + 56);
      v6 = (void *)CFRetain(a3);
      while (!__ldaxr(v5))
      {
        if (!__stlxr((unint64_t)v6, v5))
        {
          v8 = 1;
          goto LABEL_12;
        }
      }
      v8 = 0;
      __clrex();
LABEL_12:
      if (v8)
      {
        v6 = 0;
        v12 = 369098752;
      }
      else
      {
        v12 = 100663296;
      }

    }
    else
    {
      v12 = 100663296;
    }
    v13 = (unint64_t *)((char *)this + 64);
    v14 = (void *)CFRetain(cf);
    while (!__ldaxr(v13))
    {
      if (!__stlxr((unint64_t)v14, v13))
      {

        v12 |= 0x20000000u;
        goto LABEL_21;
      }
    }
    __clrex();

LABEL_21:
    v16 = (unsigned int *)((char *)this + 176);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 | v12, v16));
    v18 = (unsigned int *)((char *)this + 180);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 | 0xF0000, v18));
    v20 = (unsigned int *)((char *)this + 184);
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 | 0xF0000, v20));
  }
  else
  {
    v9 = (unsigned int *)((char *)this + 176);
    v10 = (const void **)MEMORY[0x1E0C9AE40];
    do
      v11 = __ldxr(v9);
    while (__stxr(v11 | 0x6000000, v9));
  }
  TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, *v10, CFSTR("CTFontMorxConversionResultAttribute"));
}

uint64_t _CTGetVisibleFormatterCharacterSet()
{
  if (qword_1ECDE7C88 != -1)
    dispatch_once_f(&qword_1ECDE7C88, 0, (dispatch_function_t)_CTGetVisibleFormatterCharacterSet::$_0::__invoke);
  return qword_1ECDE7C80;
}

const void *CTRunCreateMutableRunsWithStorageAndOptions(_CTGlyphStorage *a1, CFIndex a2, CFIndex a3, const __CFDictionary *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *result;
  int64_t count;
  CFIndex v18;
  CFRange v19;
  _QWORD v20[3];

  result = 0;
  if (a1 && a6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      result = 0;
      if (a4)
      {
        if ((a2 & 0x8000000000000000) == 0 && (a3 & 0x8000000000000000) == 0)
        {
          count = a1->_count;
          if (a2 + a3 <= count)
          {
            v18 = count - a2;
            if (a3)
              v19.length = a3;
            else
              v19.length = v18;
            v20[0] = a6;
            v20[1] = a7;
            v20[2] = a8;
            v19.location = a2;
            return TRunEncoder::Encode((TRunEncoder *)v20, a1, v19, a5, a4);
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *TRunEncoder::Encode(TRunEncoder *this, _CTGlyphStorage *a2, CFRange a3, unsigned int a4, const __CFDictionary *a5)
{
  void *v7;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  _BYTE v13[152];
  id v14;
  id v15;
  _CTGlyphStorage *v16;
  CFRange v17;
  CFRange v18;

  v17 = a3;
  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  v16 = a2;
  v18.location = 0;
  v18.length = 0;
  TAttributes::TAttributes((TAttributes *)v13, a5, 0, v18, 1);
  TCFBase_NEW<CTGlyphRun,_CTGlyphStorage *&,CFRange &,TAttributes>(&v16, &v17, (const TAttributes *)v13, (unint64_t *)&v14);
  do
    v7 = (void *)__ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));
  v15 = v7;

  TAttributes::~TAttributes((TAttributes *)v13);
  if (!atomic_load((unint64_t *)&v15))
  {
    v11 = 0;
    goto LABEL_17;
  }
  v9 = atomic_load((unint64_t *)&v15);
  v10 = *(_QWORD *)(v9 + 48);
  objc_msgSend(*(id *)(v10 + 216), "resetOrigins:", *(_QWORD *)(v10 + 200), *(_QWORD *)(v10 + 208));
  TStorageRange::SyncWithStorage((TStorageRange *)(v10 + 192));
  if ((a4 & 8) != 0)
    TAttributes::SetRareAttributes((TAttributes *)(v10 + 40), 1);
  TAttributes::SetRareAttributes((TAttributes *)(v10 + 40), 2);
  if ((a4 & 0x10) == 0)
  {
    if ((a4 & 2) == 0)
      goto LABEL_8;
LABEL_11:
    *(_DWORD *)(v10 + 260) |= 1u;
    TAttributes::SetRareAttributes((TAttributes *)(v10 + 40), 8);
    if ((a4 & 0x20) == 0)
      goto LABEL_14;
LABEL_12:
    if (*(int *)(v10 + 256) <= 1)
      *(_DWORD *)(v10 + 256) = 1;
    goto LABEL_14;
  }
  *(_BYTE *)(v10 + 225) |= 1u;
  if ((a4 & 2) != 0)
    goto LABEL_11;
LABEL_8:
  if ((a4 & 0x20) != 0)
    goto LABEL_12;
LABEL_14:
  if ((a4 & 5) != 0)
  {
    v11 = TRunEncoder::EncodeWithLineOptions((uint64_t *)this, (unint64_t *)&v15, a4);
  }
  else
  {
    do
      v11 = (const void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
  }
LABEL_17:

  return v11;
}

uint64_t TAttributes::SetRareAttributes(TAttributes *this, __int16 a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)((char *)this + 120);
  result = *((_QWORD *)this + 15);
  if (result)
    goto LABEL_2;
  result = operator new();
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_DWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  v5 = *v4;
  *v4 = result;
  if (!v5
    || (std::default_delete<TAttributes::RareData>::operator()[abi:nn180100]((uint64_t)v4, v5), (result = *v4) != 0))
  {
LABEL_2:
    *(_WORD *)(result + 66) |= a2;
  }
  return result;
}

double TStorageRange::SyncWithStorage(TStorageRange *this)
{
  uint64_t v2;
  uint64_t v3;
  const double *v4;
  vDSP_Stride v5;
  uint64_t v6;
  double result;
  double __C;

  objc_msgSend(*((id *)this + 3), "sync");
  __C = NAN;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 || (v6 = *(_QWORD *)(v2 + 24)) == 0)
  {
    v4 = (const double *)(v3 + 16 * *((_QWORD *)this + 1));
    v5 = 2;
  }
  else
  {
    v4 = (const double *)(v6 + 8 * *((_QWORD *)this + 1));
    v5 = 1;
  }
  vDSP_sveD(v4, v5, &__C, *((_QWORD *)this + 2));
  result = __C;
  *(double *)this = __C;
  return result;
}

void TCFBase_NEW<CTGlyphRun,_CTGlyphStorage *&,CFRange &,TAttributes>(_CTGlyphStorage **a1@<X0>, CFRange *a2@<X1>, const TAttributes *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _CTGlyphStorage *v10;
  TRun *v11;
  unint64_t v12;
  id v13;
  CFRange v14;

  v8 = TCFBase<TRun>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a1;
    v14 = *a2;
    v11 = (TRun *)(v8 + 72);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v11;
    v9[6] = v11;
    v9[7] = CTGlyphRun::CloneEntire;
    v9[8] = CTGlyphRun::CloneRange;
    TRun::TRun(v11, v10, v14, a3);
    v13 = v9;
    do
      v12 = __ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    *a4 = v12;

  }
  else
  {
    *a4 = 0;
  }
}

void addPosingWithWeightAndSlant(TDescriptorSource *a1, int a2, int a3, int a4, const __CFString *a5, const void *a6, TCFMutableDictionary *a7, const void *a8, const void *a9)
{
  const __CFString *v17;
  const __CFString *v18;
  __CFDictionary *v19;
  id v20;

  v17 = (const __CFString *)TDescriptorSource::UIFontNameForUIType(a1);
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  makeStyleName((unint64_t *)&v20, a2, a3, 0);
  v18 = (const __CFString *)atomic_load((unint64_t *)&v20);
  addNames(a5, v18, v17, a7);
  addMetrics(a2, a3, a4, a8, a9, (unint64_t *)a7);
  if (a6)
  {
    v19 = (__CFDictionary *)atomic_load((unint64_t *)a7);
    CFDictionaryAddValue(v19, CFSTR("NSCTFontUIFontDesignTrait"), a6);
  }

}

void addMetrics(int a1, int a2, int a3, const void *a4, const void *a5, unint64_t *a6)
{
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  const __CFString *v14;
  const __CFString *v15;
  __CFDictionary *v16;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = Mutable;
  if ((a1 - 2) > 7)
    v14 = CFSTR("w1");
  else
    v14 = off_1E15E73E8[a1 - 2];
  CFDictionaryAddValue(Mutable, CFSTR("weightClass"), v14);
  if (a2 == 1)
    CFDictionaryAddValue(v13, CFSTR("italicAngle"), CFSTR("12.5"));
  if (a3 == 1)
  {
    v15 = CFSTR("shortTrait");
    goto LABEL_10;
  }
  if (a3 == -1)
  {
    v15 = CFSTR("tallTrait");
LABEL_10:
    CFDictionaryAddValue(v13, v15, CFSTR("1"));
  }
  if (a4 && a5)
    CFDictionaryAddValue(v13, a4, a5);
  v16 = (__CFDictionary *)atomic_load(a6);
  CFDictionaryAddValue(v16, CFSTR("FontMetrics"), v13);

}

void makeStyleName(unint64_t *a1, int a2, int a3, uint64_t a4)
{
  __CFString *v5;
  CFStringRef v6;
  void *v7;
  CFStringRef v8;
  CFStringRef v9;

  if ((a2 - 1) > 8)
    v5 = 0;
  else
    v5 = off_1E15E73A0[a2 - 1];
  *a1 = 0;
  if (a3 && a4)
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ %@ %@"), a4, v5, CFSTR("Italic"));
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr((unint64_t)v6, a1));
LABEL_16:

    return;
  }
  if (a3)
  {
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ %@"), v5, CFSTR("Italic"));
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr((unint64_t)v8, a1));
    goto LABEL_16;
  }
  if (a4)
  {
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ %@"), a4, v5);
    do
      v7 = (void *)__ldaxr(a1);
    while (__stlxr((unint64_t)v9, a1));
    goto LABEL_16;
  }
  TCFRef<__CTFont const*>::Retain(a1, v5);
}

double CTRunGetTypographicBounds(CTRunRef run, CFRange range, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  double v5;
  CFIndex length;
  CFIndex location;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v16;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  CFRange v26;
  double *v27;

  v5 = 0.0;
  if (!run)
    return v5;
  length = range.length;
  location = range.location;
  v10 = *((_QWORD *)run + 5);
  if ((*(_BYTE *)(v10 + 225) & 8) != 0)
  {
    v11 = *(_QWORD *)(v10 + 264);
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 216) + 16);
    v14 = *(_QWORD *)(v10 + 200);
    v13 = *(_QWORD *)(v10 + 208);
    if (v13 < 1 || range.location < 1)
    {
      location = 0;
    }
    else
    {
      v16 = range.location;
      location = 0;
      do
      {
        v18 = v11 == location || *(__int16 *)(v12 + 2 * v14 + 2 * location) != -1;
        if (++location >= v13)
          break;
        v16 -= v18;
      }
      while (v16);
    }
    if (range.length)
    {
      v19 = 0;
      if (v13 > location && range.length >= 1)
      {
        v19 = 0;
        v20 = v11 - location;
        v21 = v12 + 2 * location + 2 * v14;
        do
        {
          v23 = v20 == v19 || *(__int16 *)(v21 + 2 * v19) != -1;
          v24 = location + 1 + v19++;
          if (v24 >= v13)
            break;
          length -= v23;
        }
        while (length);
      }
    }
    else
    {
      v19 = v13 - location;
    }
    length = v19;
  }
  if (ascent)
    *ascent = (*(double (**)(_QWORD))(*(_QWORD *)v10 + 56))(*((_QWORD *)run + 5));
  if (descent)
    *descent = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
  if (leading)
    *leading = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
  if (location < 0)
    return v5;
  v25 = *(_QWORD *)(v10 + 208);
  if (location + length > v25)
    return v5;
  if (length)
    v26.length = length;
  else
    v26.length = v25 - location;
  if (!location && v26.length == v25)
  {
    v27 = *(double **)(v10 + 312);
    if (!v27)
      v27 = (double *)MEMORY[0x1E0C9D820];
    return *(double *)(v10 + 192) + *v27;
  }
  v26.location = location;
  return TStorageRange::GetWidth((TStorageRange *)(v10 + 192), v26);
}

void TRun::~TRun(void **this)
{
  uint64_t v2;

  *this = &off_1E15DE6F0;
  free(this[35]);
  v2 = (uint64_t)this[39];
  this[39] = 0;
  if (v2)
    std::default_delete<TRun::RareData>::operator()[abi:nn180100]((uint64_t)(this + 39), v2);

  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)(this + 29));
  TAttributes::~TAttributes((TAttributes *)(this + 5));
}

{
  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

CFIndex TRun::GetLeftHangersGlyphCountAndWidth(TRun *this, uint64_t a2, char a3, const TCharStream *a4, int a5)
{
  char v7;
  CFIndex v8;
  TRun *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  __int128 v16;
  const __CTFont *v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  double v27;
  uint64_t (*v28)(_QWORD *, _QWORD);
  _QWORD *v29;
  UTF32Char v30;
  double *v31;
  const void *v32;
  unsigned int v33;
  CFRange v34;
  unsigned int CompositionLanguage;
  uint64_t v36;
  uint64_t v37;
  UChar32 FullChar;
  uint64_t v39;
  const TCharStream *v41;
  int v43;
  CFIndex v44;
  TRun *v45;
  const __CFCharacterSet *theSet;
  int v47;
  uint64_t v48;
  const TCharStream *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62[2];
  __int128 v63;
  uint64_t v64;

  v7 = a3;
  v8 = a2;
  v9 = this;
  v10 = (_QWORD *)*((_QWORD *)this + 27);
  v11 = v10[4];
  if (v11 || (v36 = v10[3]) == 0)
  {
    v47 = 0;
    v12 = *((_QWORD *)this + 25);
    v13 = v11 + 16 * v12;
    if (a2 < 0)
    {
LABEL_21:
      TAttributes::GetCompositionLanguage((TRun *)((char *)this + 40), (const void *)a2);
      v23 = v8;
      goto LABEL_34;
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 25);
    v13 = v36 + 8 * v12;
    v47 = 1;
    if (a2 < 0)
      goto LABEL_21;
  }
  v14 = *((_QWORD *)this + 26);
  if ((a3 & 4) == 0 || v14 <= a2)
  {
    CompositionLanguage = TAttributes::GetCompositionLanguage((TRun *)((char *)this + 40), (const void *)a2);
    v23 = v8;
LABEL_23:
    if (v14 > v23 && CompositionLanguage >= 2)
    {
      v49 = a4;
      v60 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v37 = *((_QWORD *)a4 + 2);
      v61 = 0;
      *(_QWORD *)&v60 = v37;
      v62[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 27) + 48) + 8 * *((_QWORD *)v9 + 25) + 8 * v23);
      FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v49, v62, 0);
      if (CJKCompositionEngine::IsEnabled(void)::once != -1)
        dispatch_once_f(&CJKCompositionEngine::IsEnabled(void)::once, 0, (dispatch_function_t)CJKCompositionEngine::IsEnabled(void)::$_0::__invoke);
      if (gCJKCompositionRulesEnabled)
      {
        v39 = *((_QWORD *)v9 + 20);
        if (!v39 || (*(_WORD *)(v39 + 66) & 0x20) == 0)
        {
          LOBYTE(v48) = -86;
          if (CJKCompositionRules::ShouldGlyphImageLeftFlush(CompositionLanguage, *((unsigned __int8 *)v9 + 90), FullChar, (BOOL *)&v48))
          {
            v34.location = v23;
            GetOpticalBoundsAdjustment(0, v9, v34);
            if (!(_BYTE)v48)
              atomic_load((unint64_t *)v9 + 7);
          }
        }
      }
      else if ((CompositionLanguage - 3) <= 1u)
      {
        ChineseCompositionRules::GetCharacterClass(FullChar, 0, CompositionLanguage);
      }
    }
    if (a5 < 0)
      return v8 - v23;
    if (v14 > v23)
      return v23 - v8 + TRun::GetLeftPartialHangingGlyphCountAndWidth(v9, v23, v7, (const TCharStream *)v34.length);
    return v23 - v8;
  }
  v15 = v10[2] + 2 * v12;
  v64 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v62 = v16;
  v63 = v16;
  v17 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
  TAATPropTable::TAATPropTable((TAATPropTable *)v62, v17);
  v49 = a4;
  v60 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v18 = *((_QWORD *)a4 + 2);
  v61 = 0;
  *(_QWORD *)&v60 = v18;
  v41 = a4;
  v19 = v14;
  if (qword_1ECDE7450 != -1)
    dispatch_once_f(&qword_1ECDE7450, 0, (dispatch_function_t)GetLeftHangingCharacters(void)::$_0::__invoke);
  v45 = v9;
  v20 = *(_QWORD *)(*((_QWORD *)v9 + 27) + 48) + 8 * *((_QWORD *)v9 + 25);
  v21 = a5;
  theSet = (const __CFCharacterSet *)_MergedGlobals_5;
  v22 = v13 + 16 * v8;
  v23 = v8;
  v24 = 16 * a5;
  v25 = v13 + 8 * v23;
  v43 = a5;
  v44 = v23;
  v26 = 8 * a5;
  v27 = 0.0;
  do
  {
    v48 = *(_QWORD *)(v20 + 8 * v23);
    v28 = (uint64_t (*)(_QWORD *, _QWORD))*((_QWORD *)&v63 + 1);
    v29 = (uint64_t *)((char *)v62 + (v64 >> 1));
    if ((v64 & 1) != 0)
      v28 = *(uint64_t (**)(_QWORD *, _QWORD))(*v29 + DWORD2(v63));
    if ((v28(v29, *(unsigned __int16 *)(v15 + 2 * v23)) & 0x4000) == 0)
    {
      v30 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v49, &v48, 0);
      if (!CFCharacterSetIsLongCharacterMember(theSet, v30))
        break;
    }
    v31 = (double *)(v47 ? v25 : v22);
    v27 = v27 + *v31;
    v23 += v21;
    if (v23 < 0)
      break;
    v22 += v24;
    v25 += v26;
  }
  while (v19 > v23);

  v9 = v45;
  v33 = TAttributes::GetCompositionLanguage((TRun *)((char *)v45 + 40), v32);
  if ((v23 & 0x8000000000000000) == 0)
  {
    CompositionLanguage = v33;
    a5 = v43;
    v8 = v44;
    v7 = a3;
    v14 = v19;
    a4 = v41;
    goto LABEL_23;
  }
  a5 = v43;
  v8 = v44;
LABEL_34:
  if ((a5 & 0x80000000) == 0)
    return v23 - v8;
  return v8 - v23;
}

void TLine::UpdateCachedMetricsForRun(TLine *this, const TRun *a2)
{
  uint64_t v4;
  double *v5;
  char v6;
  __int16 v7;
  unint64_t *v8;
  const __CFString **v9;
  uint64_t v10;
  unint64_t v11;
  void *BackgroundColor;
  TAttributes *v13;
  unint64_t *v14;
  const void *v16;
  void *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;

  *((_QWORD *)this + 18) += *((_QWORD *)a2 + 26);
  v4 = *((_QWORD *)a2 + 39);
  v5 = (double *)MEMORY[0x1E0C9D820];
  if (v4)
    v5 = (double *)*((_QWORD *)a2 + 39);
  *((double *)this + 13) = *((double *)this + 13) + *((double *)a2 + 24) + *v5;
  v6 = *((_BYTE *)a2 + 225);
  if ((v6 & 1) != 0)
  {
    *((_WORD *)this + 76) |= 2u;
    v6 = *((_BYTE *)a2 + 225);
  }
  if ((v6 & 8) != 0)
    *((_WORD *)this + 77) |= 8u;
  if (*((_BYTE *)a2 + 224))
    *((_WORD *)this + 76) |= 1u;
  if (*((_DWORD *)a2 + 64) == 3)
    *((_WORD *)this + 76) |= 4u;
  if (*((unsigned __int8 *)a2 + 90) | *((unsigned __int8 *)a2 + 144)
    || v4 && *(_QWORD *)(v4 + 56) != *(_QWORD *)(v4 + 64))
  {
    *((_WORD *)this + 77) |= 2u;
  }
  v7 = *((_WORD *)a2 + 89);
  if ((v7 & 0x9842) != 0)
    *((_WORD *)this + 76) |= 0x10u;
  if ((v7 & 0x800) != 0)
    *((_WORD *)this + 76) |= 0x20u;
  v8 = (unint64_t *)((char *)a2 + 40);
  if ((v7 & 0x100) != 0)
    *((_WORD *)this + 77) |= 4u;
  if (TAttributes::GetCompositionLanguage((const TRun *)((char *)a2 + 40), a2) >= 2)
    *((_WORD *)this + 77) |= 0x200u;
  v10 = *((_QWORD *)a2 + 23);
  if (v10 && *(_BYTE *)(v10 + 264)
    || (v11 = atomic_load((unint64_t *)a2 + 7),
        (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 40) + 400) + 384))(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 400))))
  {
    *((_WORD *)this + 77) |= 0x10u;
  }
  if ((*((_BYTE *)a2 + 177) & 1) != 0)
  {
    v13 = (TAttributes *)atomic_load(v8);
    BackgroundColor = (void *)TAttributes::GetBackgroundColor(v13, 0, v9);
  }
  else
  {
    BackgroundColor = 0;
  }
  v14 = (unint64_t *)((char *)this + 168);
  if (atomic_load((unint64_t *)this + 21))
  {
    v16 = (const void *)atomic_load(v14);
    if (BackgroundColor != v16 && (!BackgroundColor || !v16 || !CFEqual(v16, BackgroundColor)))
    {
      do
        v17 = (void *)__ldaxr(v14);
      while (__stlxr(0, v14));

    }
  }
  else if (*((_QWORD *)this + 3) - *((_QWORD *)this + 2) == 8)
  {
    TCFRef<__CTFont const*>::Retain((unint64_t *)this + 21, BackgroundColor);
  }
  v18 = *((_QWORD *)a2 + 20);
  if (v18)
    v19 = *(double *)(v18 + 48);
  else
    v19 = 0.0;
  v20 = v19 + (*(double (**)(const TRun *))(*(_QWORD *)a2 + 56))(a2);
  if (v20 > *((double *)this + 14))
    *((double *)this + 14) = v20;
  v21 = (*(double (**)(const TRun *))(*(_QWORD *)a2 + 64))(a2) - v19;
  if (v21 > *((double *)this + 15))
    *((double *)this + 15) = v21;
  v22 = (*(double (**)(const TRun *))(*(_QWORD *)a2 + 72))(a2);
  if (v22 > *((double *)this + 16))
    *((double *)this + 16) = v22;
}

uint64_t TAttributes::GetCompositionLanguage(TAttributes *this, const void *a2)
{
  uint64_t result;
  id *v4;
  __CFString *v5;

  result = *((unsigned __int8 *)this + 112);
  if (!(_DWORD)result)
  {
    v4 = (id *)*((_QWORD *)this + 16);
    if (!v4 || (result = (uint64_t)TParagraphStyle::GetCompositionLanguage(v4, a2), !(_DWORD)result))
    {
      if ((*((_WORD *)this + 69) & 0x200) != 0)
      {
        v5 = (__CFString *)atomic_load((unint64_t *)this + 3);
        return CTParagraphStyleGetCompositionLanguageForLanguage(v5);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TBaseFont::HasScriptSpecificMetrics(TBaseFont *this)
{
  __int128 v2;
  const __CFData *v3;
  const UInt8 *BytePtr;
  const UInt8 *v5;
  unint64_t v6;
  uint64_t HasScriptSpecificMetrics;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[4];
  id v15;

  if ((*((_DWORD *)this + 46) & 0x2000000) != 0)
    return (*((_DWORD *)this + 45) >> 25) & 1;
  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v15, this, 1111577413);
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  v3 = (const __CFData *)atomic_load((unint64_t *)&v15);
  if (!v3)
  {
    BytePtr = 0;
    goto LABEL_7;
  }
  BytePtr = CFDataGetBytePtr(v3);
  v5 = CFDataGetBytePtr(v3);
  if (!v5)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v6 = (unint64_t)&v5[CFDataGetLength(v3)];
LABEL_8:
  v8 = (unsigned int *)((char *)this + 184);
  OTL::BASE::BASE((uint64_t)v14, (uint64_t)BytePtr, v6);
  HasScriptSpecificMetrics = OTL::BASE::HasScriptSpecificMetrics((OTL::BASE *)v14);
  v9 = (unsigned int *)((char *)this + 180);
  if ((_DWORD)HasScriptSpecificMetrics)
    v10 = 0x2000000;
  else
    v10 = 0;
  do
    v11 = __ldxr(v9);
  while (__stxr(v11 | v10, v9));
  do
    v12 = __ldxr(v8);
  while (__stxr(v12 | 0x2000000, v8));

  return HasScriptSpecificMetrics;
}

double TRun::GetAscent(TRun *this)
{
  uint64_t v1;
  double result;
  unint64_t v3;
  int *v4;
  int *inited;

  v1 = *((_QWORD *)this + 39);
  if (!v1 || (result = *(double *)(v1 + 32), result <= 0.0))
  {
    v3 = atomic_load((unint64_t *)this + 7);
    v4 = *(int **)(v3 + 40);
    if (v4[12])
      inited = v4 + 12;
    else
      inited = TFont::InitStrikeMetrics((TFont *)v4);
    return *((double *)inited + 1);
  }
  return result;
}

double TRun::GetDescent(TRun *this)
{
  uint64_t v1;
  double result;
  unint64_t v3;
  int *v4;
  int *inited;

  v1 = *((_QWORD *)this + 39);
  if (!v1 || (result = *(double *)(v1 + 40), result <= 0.0))
  {
    v3 = atomic_load((unint64_t *)this + 7);
    v4 = *(int **)(v3 + 40);
    if (v4[12])
      inited = v4 + 12;
    else
      inited = TFont::InitStrikeMetrics((TFont *)v4);
    return *((double *)inited + 2);
  }
  return result;
}

double TRun::GetLeading(TRun *this)
{
  uint64_t v1;
  double result;
  unint64_t v3;
  int *v4;
  int *inited;

  v1 = *((_QWORD *)this + 39);
  if (!v1 || (result = *(double *)(v1 + 48), result <= 0.0))
  {
    v3 = atomic_load((unint64_t *)this + 7);
    v4 = *(int **)(v3 + 40);
    if (v4[12])
      inited = v4 + 12;
    else
      inited = TFont::InitStrikeMetrics((TFont *)v4);
    return *((double *)inited + 3);
  }
  return result;
}

void TAttributes::~TAttributes(TAttributes *this)
{
  uint64_t v2;
  uint64_t v3;

  std::unique_ptr<TBaselineAttributes>::reset[abi:nn180100]((uint64_t *)this + 18, 0);
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    MEMORY[0x186DC03AC](v2, 0x10C0C40E6EFC850);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    std::default_delete<TAttributes::RareData>::operator()[abi:nn180100]((uint64_t)this + 120, v3);

}

uint64_t TAttributes::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;

  v4 = (void *)atomic_load((unint64_t *)a2);
  TCFRef<__CTFont const*>::Retain((unint64_t *)a1, v4);
  v5 = (void *)atomic_load((unint64_t *)(a2 + 8));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 8), v5);
  v6 = (void *)atomic_load((unint64_t *)(a2 + 16));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 16), v6);
  v7 = (void *)atomic_load((unint64_t *)(a2 + 24));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 24), v7);
  v8 = (void *)atomic_load((unint64_t *)(a2 + 32));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 32), v8);
  v9 = (void *)atomic_load((unint64_t *)(a2 + 40));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 40), v9);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v13 = (uint64_t *)(a1 + 120);
  if (*(_QWORD *)(a2 + 120))
  {
    v14 = operator new();
    v15 = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v16 = *(_OWORD *)(v15 + 16);
    v17 = *(_OWORD *)(v15 + 32);
    v18 = *(_OWORD *)(v15 + 64);
    *(_OWORD *)(v14 + 48) = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v14 + 64) = v18;
    *(_OWORD *)(v14 + 16) = v16;
    *(_OWORD *)(v14 + 32) = v17;
    v19 = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v14 + 80) = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v14 + 88) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (void *)atomic_load((unint64_t *)(v15 + 96));
    *(_QWORD *)(v14 + 96) = v22;
  }
  else
  {
    v14 = 0;
  }
  v23 = *v13;
  *v13 = v14;
  if (v23)
    std::default_delete<TAttributes::RareData>::operator()[abi:nn180100](a1 + 120, v23);
  if (*(_QWORD *)(a2 + 128))
  {
    v24 = operator new();
    v25 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  }
  else
  {
    v24 = 0;
  }
  v26 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v24;
  if (v26)
    MEMORY[0x186DC03AC](v26, 0x10C0C40E6EFC850);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  if (*(_QWORD *)(a2 + 144))
  {
    v27 = operator new();
    v28 = *(_QWORD *)(a2 + 144);
    memcpy((void *)v27, (const void *)v28, 0x109uLL);
    v29 = (void *)atomic_load((unint64_t *)(v28 + 272));
    *(_QWORD *)(v27 + 272) = v29;
    *(_BYTE *)(v27 + 280) = *(_BYTE *)(v28 + 280);
    v30 = (uint64_t *)(a1 + 144);
    v31 = v27;
  }
  else
  {
    v30 = (uint64_t *)(a1 + 144);
    v31 = 0;
  }
  std::unique_ptr<TBaselineAttributes>::reset[abi:nn180100](v30, v31);
  return a1;
}

void TCFRef<__CTFont const*>::Retain(unint64_t *a1, id a2)
{
  id v2;
  id v4;
  void *v5;

  v2 = (id)atomic_load(a1);
  if (v2 != a2)
  {
    v4 = a2;
    do
      v5 = (void *)__ldaxr(a1);
    while (__stlxr((unint64_t)v4, a1));

  }
}

uint64_t TRun::GetLeftPartialHangingGlyphCountAndWidth(TRun *this, uint64_t a2, char a3, const TCharStream *a4)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  TFont *v15;
  double MinX;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  CGSize v22;
  double v23;
  double *v24;
  CGSize v25;
  CGRect v27;
  unsigned __int16 v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v6 = (_QWORD *)*((_QWORD *)this + 27);
  v7 = v6[4];
  if (v7 || (v11 = v6[3]) == 0)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 25);
    v10 = v7 + 16 * v9;
  }
  else
  {
    v9 = *((_QWORD *)this + 25);
    v10 = v11 + 8 * v9;
    v8 = 1;
  }
  if ((a3 & 0x18) != 0)
  {
    v12 = *((_QWORD *)this + 26);
    v13 = v6[2] + 2 * v9;
    v14 = atomic_load((unint64_t *)this + 7);
    v15 = *(TFont **)(v14 + 40);
    v29.origin.x = TFont::GetBoundingBox(v15);
    MinX = CGRectGetMinX(v29);
    if ((a3 & 0x10) != 0)
    {
      v28 = *(_WORD *)(v13 + 2 * a2);
      v25.width = NAN;
      v25.height = NAN;
      v27.origin = (CGPoint)v25;
      v27.size = v25;
      v31.origin.x = TFont::GetOpticalBoundsForGlyphs(v15, &v28, &v27, 1);
      CGRectGetMinX(v31);
    }
    else
    {
      v17 = -MinX;
      v18 = v10 + 16 * a2;
      v19 = v10 + 8 * a2;
      v20 = 0.0;
      v21 = 1.79769313e308;
      do
      {
        if (v20 > v17)
          break;
        v28 = *(_WORD *)(v13 + 2 * a2);
        v22.width = NAN;
        v22.height = NAN;
        v27.origin = (CGPoint)v22;
        v27.size = v22;
        v30.origin.x = TFont::GetBoundingBoxesForGlyphs(v15, &v28, &v27, 1, kCTFontOrientationDefault);
        v23 = v20 + CGRectGetMinX(v30);
        if (v23 < v21)
          v21 = v23;
        v24 = (double *)(v8 ? v19 : v18);
        v20 = v20 + *v24;
        ++a2;
        v18 += 16;
        v19 += 8;
      }
      while (a2 < v12);
    }
  }
  return 0;
}

uint64_t CTParagraphStyleGetCompositionLanguageForLanguage(__CFString *cf1)
{
  const __CFArray *v2;
  uint64_t v3;
  const __CFArray *v4;
  void *values;

  if (!cf1 || cf1 == CFSTR("en-US-POSIX") || CFEqual(cf1, CFSTR("en-US-POSIX")))
  {
    os_unfair_lock_lock_with_options();
    if (dword_1ECDE791C != TGenerationSeed::sGeneration)
    {
      dword_1ECDE791C = TGenerationSeed::sGeneration;
      v2 = CFLocaleCopyPreferredLanguages();
      _MergedGlobals_22 = CompositionLanguageWithPreferences(v2);

    }
    v3 = _MergedGlobals_22;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECDE7920);
  }
  else
  {
    values = cf1;
    v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v3 = CompositionLanguageWithPreferences(v4);

  }
  return v3;
}

const void *TAttributes::GetBackgroundColor(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  const __CFString *v5;
  const void *result;

  v5 = CFSTR("CTBackgroundColor");
  result = CFDictionaryGetValue(this, CFSTR("CTBackgroundColor"));
  if (a2 && result
    || !result
    && (v5 = CFSTR("NSBackgroundColor"), result = CFDictionaryGetValue(this, CFSTR("NSBackgroundColor")), a2)
    && result)
  {
    *(_QWORD *)a2 = v5;
  }
  return result;
}

id TParagraphStyle::GetCompositionLanguage(id *this, const void *a2)
{
  int v3;
  TParagraphStyle *v4;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = (TParagraphStyle *)*this;
  if (v3)
    return (id)*((unsigned __int8 *)TParagraphStyle::GetNative(v4, a2) + 48);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(*this, sel_compositionLanguage);
  return 0;
}

uint64_t TParagraphStyle::SetStyle(TParagraphStyle *this, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t result;
  unsigned __int8 v5;

  if (!cf)
    return 0;
  *(_QWORD *)this = cf;
  v3 = CFGetTypeID(cf);
  if (TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeParagraphStyle>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  if (v3 == TCFBase<TNativeParagraphStyle>::fTypeID)
  {
    result = 1;
    *((_BYTE *)this + 8) = 1;
  }
  else
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ECDE7998);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7998))
    {
      _MergedGlobals_23 = (uint64_t)NSClassFromString(CFSTR("NSParagraphStyle"));
      __cxa_guard_release(&qword_1ECDE7998);
    }
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *((_BYTE *)this + 8) = 0;
      return 1;
    }
    else
    {
      result = 0;
      *(_QWORD *)this = 0;
    }
  }
  return result;
}

uint64_t *TParagraphStyle::GetNative(TParagraphStyle *this, const void *a2)
{
  CFTypeID v3;
  unsigned __int8 v5;
  TNativeParagraphStyle *v6;

  if (this)
  {
    v3 = CFGetTypeID(this);
    if (TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once != -1)
      dispatch_once_f(&TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeParagraphStyle>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
    if (v3 == TCFBase<TNativeParagraphStyle>::fTypeID)
      return (uint64_t *)*((_QWORD *)this + 5);
  }
  if ((v5 & 1) != 0)
    return &TParagraphStyle::GetNative(void const*)::sBackstop;
  if ((_DWORD)v6)
  {
    TParagraphStyle::GetNative(void const*)::sBackstop = 0;
    *(_QWORD *)algn_1EDD17638 = 0;
    qword_1EDD17640 = 0;
    qword_1EDD17648 = (uint64_t)TNativeParagraphStyle::CopyDefaultTabStops(v6);
    word_1EDD17650 = 1024;
    byte_1EDD17652 = -1;
    qword_1EDD17658 = 0;
    byte_1EDD17660 = 0;
  }
  return &TParagraphStyle::GetNative(void const*)::sBackstop;
}

CFTypeID CTParagraphStyleGetTypeID(void)
{
  if (TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeParagraphStyle>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TNativeParagraphStyle>::fTypeID;
}

double TDelegateRun::GetAscent(TDelegateRun *this)
{
  return *((double *)this + 47);
}

double TDelegateRun::GetDescent(TDelegateRun *this)
{
  return *((double *)this + 48);
}

CGRect CTFontGetBoundingBox(CTFontRef font)
{
  double BoundingBox;
  double v2;
  double v3;
  double v4;
  CGRect result;

  if (font)
  {
    BoundingBox = TFont::GetBoundingBox(*((TFont **)font + 5));
  }
  else
  {
    BoundingBox = *MEMORY[0x1E0C9D628];
    v2 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v3 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v4 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = BoundingBox;
  return result;
}

double TFont::GetBoundingBox(TFont *this)
{
  int *inited;

  if (*((_DWORD *)this + 12))
    inited = (int *)((char *)this + 48);
  else
    inited = TFont::InitStrikeMetrics(this);
  return *((double *)inited + 7);
}

double TDelegateRun::GetLeading(TDelegateRun *this)
{
  return 0.0;
}

uint64_t OTL::BASE::HasScriptSpecificMetrics(OTL::BASE *this)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned __int16 *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  __int32 *v29;
  __int32 *v30;
  _QWORD v32[2];
  __int32 __s[9];
  _BYTE v34[12];

  *(_QWORD *)&v34[4] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = 0;
  v4 = 0;
  qmemcpy(__s, "gnahbfcilfcirfcitfcioediptdihtamnmor", sizeof(__s));
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int16 *)(v1 + 4);
  v7 = v1 + __rev16(v6);
  if (v7 + 4 > v5 || v6 == 0)
    v9 = 0;
  else
    v9 = v7;
  v10 = *(unsigned __int16 *)(v1 + 6);
  v11 = v1 + __rev16(v10);
  if (v11 + 4 > v5 || v10 == 0)
    v11 = 0;
  v32[0] = v9;
  v32[1] = v11;
  while (1)
  {
    v13 = v3;
    v14 = (unsigned __int16 *)v32[v4];
    if (v14)
    {
      v15 = *v14;
      v16 = (char *)v14 + __rev16(v15);
      v17 = v15 ? v16 : 0;
      v18 = *((_QWORD *)this + 1);
      v19 = (unsigned int *)(v17 + 2);
      if (*(_QWORD *)this <= (unint64_t)v17 && (unint64_t)v19 <= v18)
      {
        v21 = *(unsigned __int16 *)v17;
        v22 = __rev16(v21);
        v23 = &v19[v22];
        v24 = (unint64_t)(v17 + 6) <= v18 ? (v18 - (unint64_t)v19) >> 2 : 0;
        v25 = (unint64_t)v23 <= v18 && v23 >= v19;
        v26 = v25 || v24 == v22;
        if (v26 && v21 != 0)
          break;
      }
    }
LABEL_41:
    v3 = 1;
    v4 = 1;
    if ((v13 & 1) != 0)
      return 0;
  }
  v28 = 4 * v22;
  while (1)
  {
    v29 = wmemchr(__s, bswap32(*v19), 9uLL);
    v30 = v29 ? v29 : (__int32 *)v34;
    if ((char *)v30 - (char *)__s == 36)
      return 1;
    ++v19;
    v28 -= 4;
    if (!v28)
      goto LABEL_41;
  }
}

uint64_t OTL::BASE::BASE(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  unsigned int v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (a2)
  {
    if (a2 + 8 > a3 || *(_WORD *)a2 != 256)
      goto LABEL_9;
    if (!*(_WORD *)(a2 + 2))
      return a1;
    if (a2 + 12 > a3)
    {
LABEL_9:
      *(_QWORD *)a1 = 0;
      return a1;
    }
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
      ItemVariationStore::Initialize(v4, a2 + bswap32(v5), a3);
  }
  return a1;
}

double TFont::GetOpticalBoundsForGlyphs(TFont *this, const unsigned __int16 *a2, CGRect *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  const __CFData *CommonTable;
  __int128 v11;
  const __CFData *v12;
  int *v13;
  int *inited;
  double v15;
  int *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  const unsigned __int16 *v22;
  __int16 v23;
  __int128 v24;
  CGFloat v25;
  double v26;
  __int128 v27;
  CGRect *v28;
  double *p_width;
  const unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  __int128 v34;
  double *v35;
  uint64_t v36;
  unsigned int v37;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGSize *p_size;
  double (*v51)(_QWORD *, _QWORD);
  _QWORD *v52;
  unsigned int v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  CGRect *v62;
  int v63;
  _OWORD v64[5];
  unint64_t v65;
  _OWORD v66[5];
  double v67;
  __int128 v68;
  _OWORD v69[16];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v80 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 50);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 400))(v8))
  {
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v66[3] = v9;
    v66[4] = v9;
    v66[2] = v9;
    v66[0] = v9;
    v66[1] = v9;
    CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*((TBaseFont **)this + 50), 1195656518, 0);
    OTL::GDEF::GDEF((OTL::GDEF *)v66, CommonTable);
    v65 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v64[3] = v11;
    v64[4] = v11;
    v64[1] = v11;
    v64[2] = v11;
    v64[0] = v11;
    v12 = (const __CFData *)TBaseFont::GetCommonTable(*((TBaseFont **)this + 50), 1196445523, 0);
    OTL::GCommon::GCommon((uint64_t)v64, 1, this, v12, (uint64_t)v66, 1145457748, 0);
    *(_QWORD *)&v64[0] = &off_1E15DEE70;
    v13 = (int *)((char *)this + 48);
    inited = (int *)((char *)this + 48);
    if (!*((_DWORD *)this + 12))
      inited = TFont::InitStrikeMetrics(this);
    v62 = a3;
    v15 = *((double *)inited + 1);
    v16 = (int *)((char *)this + 48);
    if (!*v13)
      v16 = TFont::InitStrikeMetrics(this);
    v17 = MEMORY[0x1E0C9D648];
    if (a4)
    {
      v18 = *((double *)v16 + 2);
      v19 = -v18;
      v20 = v15 + v18;
      v21 = 2 * a4;
      v22 = a2;
      do
      {
        v23 = *v22++;
        LOWORD(v70) = v23;
        v24 = *(_OWORD *)(v17 + 16);
        v68 = *(_OWORD *)v17;
        v69[0] = v24;
        TFont::GetAdvancesForGlyphs((uint64_t)this, (uint64_t)&v70, (double *)v69, 2, 1, 0, 0, 0);
        v25 = *(double *)v69;
        *(_QWORD *)&a3->origin.x = v68;
        a3->origin.y = v19;
        a3->size.width = v25;
        a3->size.height = v20;
        ++a3;
        v21 -= 2;
      }
      while (v21);
    }
    if (!*v13)
      v13 = TFont::InitStrikeMetrics(this);
    v26 = *((double *)v13 + 5);
    *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v27;
    v79 = v27;
    v76 = v27;
    v77 = v27;
    v74 = v27;
    v75 = v27;
    v72 = v27;
    v73 = v27;
    v63 = 1818649188;
    v70 = v27;
    v71 = v27;
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)&v68, &v63, v64);
    OTL::GCommon::GetLookups((uint64_t)v64, (uint64_t)&v68, (uint64_t)&v70);
    v67 = COERCE_DOUBLE(&v68);
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v67);
    v28 = v62;
    if (BYTE8(v79))
    {
      if (a4 < 1)
        goto LABEL_19;
      p_width = &v62->size.width;
      v30 = a2;
      v31 = a4;
      do
      {
        v67 = NAN;
        *(_QWORD *)&v68 = -1;
        v32 = *v30++;
        if (OTL::GPOS::GetSinglePosAdjustments((OTL::GPOS *)v64, (unsigned __int16 **)&v70, v32, (double *)&v68, &v67))
        {
          v33 = v26 * *(double *)&v68;
          *(p_width - 2) = *(p_width - 2) - v26 * *(double *)&v68;
          *p_width = v33 + *p_width;
        }
        p_width += 4;
        --v31;
      }
      while (v31);
      v28 = v62;
      if (BYTE8(v79))
      {
LABEL_19:
        *(_QWORD *)&v68 = &v70;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v68);
      }
    }
    *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v34;
    v79 = v34;
    v76 = v34;
    v77 = v34;
    v74 = v34;
    v75 = v34;
    v72 = v34;
    v73 = v34;
    v70 = v34;
    v71 = v34;
    v63 = 1920229988;
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)&v68, &v63, v64);
    OTL::GCommon::GetLookups((uint64_t)v64, (uint64_t)&v68, (uint64_t)&v70);
    v67 = COERCE_DOUBLE(&v68);
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v67);
    if (BYTE8(v79))
    {
      if (a4 < 1)
        goto LABEL_27;
      v35 = &v28->size.width;
      v36 = a4;
      do
      {
        v67 = NAN;
        *(_QWORD *)&v68 = -1;
        v37 = *a2++;
        if (OTL::GPOS::GetSinglePosAdjustments((OTL::GPOS *)v64, (unsigned __int16 **)&v70, v37, (double *)&v68, &v67))*v35 = v26 * v67 + *v35;
        v35 += 4;
        --v36;
      }
      while (v36);
      if (BYTE8(v79))
      {
LABEL_27:
        *(_QWORD *)&v68 = &v70;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v68);
      }
    }
    x = *(double *)v17;
    y = *(double *)(v17 + 8);
    width = *(double *)(v17 + 16);
    height = *(double *)(v17 + 24);
    if (a4 >= 1)
    {
      v42 = &v28->size.width;
      do
      {
        v44 = *(v42 - 2);
        v43 = *(v42 - 1);
        v46 = *v42;
        v45 = v42[1];
        v81.origin.x = x;
        v81.origin.y = y;
        v81.size.width = width;
        v81.size.height = height;
        if (CGRectIsEmpty(v81))
        {
          x = v44;
          y = v43;
          width = v46;
          height = v45;
        }
        else
        {
          v82.origin.x = v44;
          v82.origin.y = v43;
          v82.size.width = v46;
          v82.size.height = v45;
          if (!CGRectIsEmpty(v82))
          {
            v83.origin.x = x;
            v83.origin.y = y;
            v83.size.width = width;
            v83.size.height = height;
            v89.origin.x = v44;
            v89.origin.y = v43;
            v89.size.width = v46;
            v89.size.height = v45;
            v84 = CGRectUnion(v83, v89);
            x = v84.origin.x;
            y = v84.origin.y;
            width = v84.size.width;
            height = v84.size.height;
          }
        }
        v42 += 4;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    v68 = xmmword_184930788;
    v69[0] = unk_184930798;
    memset(&v69[1], 170, 40);
    TAATOpbdTable::TAATOpbdTable((TAATOpbdTable *)&v68, (const TBaseFont **)this);
    x = *MEMORY[0x1E0C9D648];
    v47 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v48 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v49 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    if (a4 >= 1)
    {
      p_size = &a3->size;
      do
      {
        v51 = *(double (**)(_QWORD *, _QWORD))&v69[2];
        v52 = (_QWORD *)((char *)&v69[-1] + (*((uint64_t *)&v69[2] + 1) >> 1));
        if ((BYTE8(v69[2]) & 1) != 0)
          v51 = *(double (**)(_QWORD *, _QWORD))(*v52 + LODWORD(v69[2]));
        v53 = *a2++;
        v54 = v51(v52, v53);
        v56 = v55;
        v58 = v57;
        v60 = v59;
        p_size[-1].width = v54;
        p_size[-1].height = v55;
        p_size->width = v57;
        p_size->height = v59;
        v85.origin.x = x;
        v85.origin.y = v47;
        v85.size.width = v48;
        v85.size.height = v49;
        if (CGRectIsEmpty(v85))
        {
          x = v54;
          v47 = v56;
          v48 = v58;
          v49 = v60;
        }
        else
        {
          v86.origin.x = v54;
          v86.origin.y = v56;
          v86.size.width = v58;
          v86.size.height = v60;
          if (!CGRectIsEmpty(v86))
          {
            v87.origin.x = x;
            v87.origin.y = v47;
            v87.size.width = v48;
            v87.size.height = v49;
            v90.origin.x = v54;
            v90.origin.y = v56;
            v90.size.width = v58;
            v90.size.height = v60;
            v88 = CGRectUnion(v87, v90);
            x = v88.origin.x;
            v47 = v88.origin.y;
            v48 = v88.size.width;
            v49 = v88.size.height;
          }
        }
        p_size += 2;
        --a4;
      }
      while (a4);
    }
    TAATOpbdTable::~TAATOpbdTable((TAATOpbdTable *)&v68);
  }
  return x;
}

BOOL TBaseFont::HasOpticalBoundsInGPOS(TBaseFont *this)
{
  void *v2;
  _DWORD *v3;
  _BOOL8 v4;
  int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v12[3];

  if ((*((_DWORD *)this + 46) & 0x4000000) != 0)
    return (*((_DWORD *)this + 45) >> 26) & 1;
  memset(v12, 170, sizeof(v12));
  CustomOTFeatures(this, 0, v12);
  v2 = (void *)v12[0];
  if (v12[0] == v12[1])
  {
    v6 = (_DWORD *)v12[0];
LABEL_15:
    v4 = v6 != (_DWORD *)v12[1];
    v5 = v4 << 26;
    goto LABEL_16;
  }
  v3 = (_DWORD *)v12[0];
  while (*v3 != 1818649188)
  {
    if (++v3 == (_DWORD *)v12[1])
    {
      v3 = (_DWORD *)v12[1];
      break;
    }
  }
  if (v3 == (_DWORD *)v12[1])
  {
    v6 = (_DWORD *)v12[0];
    while (*v6 != 1920229988)
    {
      if (++v6 == (_DWORD *)v12[1])
      {
        v6 = (_DWORD *)v12[1];
        goto LABEL_15;
      }
    }
    goto LABEL_15;
  }
  v4 = 1;
  v5 = 0x4000000;
LABEL_16:
  v7 = (unsigned int *)((char *)this + 184);
  v8 = (unsigned int *)((char *)this + 180);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 | v5, v8));
  do
    v10 = __ldxr(v7);
  while (__stxr(v10 | 0x4000000, v7));
  if (v2)
  {
    v12[1] = v2;
    operator delete(v2);
  }
  return v4;
}

double TAATOpbdTable::GetDefaultBounds(TAATOpbdTable *this, __int16 a2)
{
  __int128 v3;
  TFont *v4;
  __int16 v6;
  __int128 v7;
  __int128 v8;

  v6 = a2;
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v7 = *MEMORY[0x1E0C9D648];
  v8 = v3;
  TFont::GetAdvancesForGlyphs(*(_QWORD *)this, (uint64_t)&v6, (double *)&v8, 2, 1, 0, 0, 0);
  v4 = *(TFont **)this;
  if (!*(_DWORD *)(*(_QWORD *)this + 48))
  {
    TFont::InitStrikeMetrics(v4);
    v4 = *(TFont **)this;
  }
  if (!*((_DWORD *)v4 + 12))
    TFont::InitStrikeMetrics(v4);
  return *(double *)&v7;
}

void TAATOpbdTable::~TAATOpbdTable(TAATOpbdTable *this)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  v4 = (void **)*((_QWORD *)this + 8);
  v2 = (_QWORD *)((char *)this + 64);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<TAATControlPointAccess>::operator()[abi:nn180100]((uint64_t)v2, v3);

}

void TAATOpbdTable::TAATOpbdTable(TAATOpbdTable *this, const TBaseFont **a2)
{
  void *v4;
  const __CFData *v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  void *v8;
  id v9;
  const __CFData *v10;
  const __CFData *v11;
  const UInt8 *v12;
  _WORD *v13;
  void *v14;
  _WORD *v15;
  unsigned int v16;
  unsigned int v17;
  const UInt8 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v24;
  unsigned int v26;
  TAATControlPointAccess *v27;
  void **v28;
  uint64_t v29;
  CGAffineTransform v30;

  *(_QWORD *)this = a2;
  TFont::GetScaledMatrix((TFont *)a2, &v30);
  *(float64x2_t *)((char *)this + 8) = vaddq_f64(vaddq_f64(*(float64x2_t *)&v30.a, *(float64x2_t *)&v30.c), *(float64x2_t *)&v30.tx);
  (*(void (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2[50] + 480))(a2[50], 1869636196);
  v4 = (void *)atomic_load((unint64_t *)this + 3);
  v5 = v4;
  v6 = v5;
  if (v5)
    BytePtr = CFDataGetBytePtr(v5);
  else
    BytePtr = 0;

  *((_QWORD *)this + 4) = BytePtr;
  v8 = (void *)atomic_load((unint64_t *)this + 3);
  v9 = v8;
  v10 = (const __CFData *)v9;
  if (v10)
  {
    v11 = v10;
    v12 = CFDataGetBytePtr(v10);

    if (v12)
      v12 += CFDataGetLength((CFDataRef)v9);
  }
  else
  {

    v12 = 0;
  }

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = v12;
  *((_QWORD *)this + 6) = TAATOpbdTable::GetDefaultBounds;
  *((_QWORD *)this + 7) = 0;
  v13 = (_WORD *)*((_QWORD *)this + 4);
  if (v13)
  {
    if (v13 + 4 <= (_WORD *)v12)
    {
      switch(bswap32((unsigned __int16)v13[3]) >> 16)
      {
        case 0u:
          goto LABEL_35;
        case 2u:
        case 4u:
        case 6u:
          if (v13 + 6 > (_WORD *)v12)
            goto LABEL_10;
          v15 = v13 + 9;
          v16 = bswap32((unsigned __int16)v13[4]) >> 16;
          v17 = (unsigned __int16)v13[5];
          goto LABEL_31;
        case 8u:
          v18 = (const UInt8 *)(v13 + 6);
          if (v13 + 6 > (_WORD *)v12)
            goto LABEL_10;
          v19 = bswap32((unsigned __int16)v13[5]) >> 16;
          v20 = (unint64_t)&v18[2 * v19];
          v21 = v13 + 7 <= (_WORD *)v12 ? (unint64_t)(v12 - v18) >> 1 : 0;
          v22 = v20 <= (unint64_t)v12 && v20 >= (unint64_t)v18;
          if (!v22 && v21 != v19)
            goto LABEL_10;
          goto LABEL_35;
        case 0xAu:
          v15 = v13 + 7;
          if (v13 + 7 > (_WORD *)v12)
            goto LABEL_10;
          v16 = bswap32((unsigned __int16)v13[4]) >> 16;
          v17 = (unsigned __int16)v13[6];
LABEL_31:
          v24 = (unint64_t)v15 + (bswap32(v17) >> 16) * (unint64_t)v16;
          if (v24 < (unint64_t)v15 || v24 > (unint64_t)v12)
            goto LABEL_10;
LABEL_35:
          if (*v13 != 256)
            goto LABEL_10;
          v26 = bswap32((unsigned __int16)v13[2]) >> 16;
          if (v26 == 1)
          {
            *((_QWORD *)this + 6) = TAATOpbdTable::LookupByControlPoint;
            *((_QWORD *)this + 7) = 0;
            v27 = (TAATControlPointAccess *)operator new();
            TAATControlPointAccess::TAATControlPointAccess(v27, a2[50]);
            v28 = (void **)*((_QWORD *)this + 8);
            *((_QWORD *)this + 8) = v29;
            if (v28)
              std::default_delete<TAATControlPointAccess>::operator()[abi:nn180100]((uint64_t)this + 64, v28);
            return;
          }
          if (v26)
            goto LABEL_10;
          v14 = TAATOpbdTable::LookupByDistance;
          break;
        default:
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      (*(void (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2[50] + 488))(a2[50], 1869636196);
      v14 = TAATOpbdTable::InvalidLookup;
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = 0;
  }
}

uint64_t CompositionLanguageWithPreferences(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const __CFString *ValueAtIndex;
  const __CFString *v6;
  int HasPrefix;
  int v8;
  int v9;
  uint64_t v10;
  CFArrayRef v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex v14;
  const __CFArray *v15;
  __CFString *v16;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      v3 = Count;
      v4 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v4);
        if (ValueAtIndex == CFSTR("zh"))
          break;
        v6 = ValueAtIndex;
        if (ValueAtIndex)
        {
          HasPrefix = CFStringHasPrefix(ValueAtIndex, CFSTR("zh"));
          if (v6 == CFSTR("wuu"))
            break;
          if (HasPrefix)
            break;
          v8 = CFStringHasPrefix(v6, CFSTR("wuu"));
          if (v6 == CFSTR("yue"))
            break;
          if (v8)
            break;
          v9 = CFStringHasPrefix(v6, CFSTR("yue"));
          if (v6 == CFSTR("ja") || v9 || CFStringHasPrefix(v6, CFSTR("ja")))
            break;
        }
        if (v3 == ++v4)
          return 1;
      }
      v11 = CFBundleCopyLocalizationsForPreferences((CFArrayRef)&unk_1E1619308, a1);
      v12 = v11;
      if (v12)
      {
        v13 = v12;
        v14 = CFArrayGetCount(v12);

        if (!v14)
          goto LABEL_37;
        v12 = v11;
        if (v12)
        {
          v15 = v12;
          v16 = (__CFString *)CFArrayGetValueAtIndex(v12, 0);

          v10 = 1;
          if (v16 == CFSTR("zxx") || !v16 || CFEqual(v16, CFSTR("zxx")))
            goto LABEL_38;
          if (v16 == CFSTR("zh-Hans"))
          {
            v10 = 3;
            goto LABEL_38;
          }
          v10 = 3;
          if (CFEqual(v16, CFSTR("zh-Hans"))
            || v16 == CFSTR("wuu-Hans")
            || CFEqual(v16, CFSTR("wuu-Hans"))
            || v16 == CFSTR("yue-Hans")
            || CFEqual(v16, CFSTR("yue-Hans")))
          {
            goto LABEL_38;
          }
          if (v16 == CFSTR("zh-Hant"))
          {
            v10 = 4;
            goto LABEL_38;
          }
          v10 = 4;
          if (CFEqual(v16, CFSTR("zh-Hant"))
            || v16 == CFSTR("yue-Hant")
            || CFEqual(v16, CFSTR("yue-Hant"))
            || v16 == CFSTR("wuu-Hant")
            || CFEqual(v16, CFSTR("wuu-Hant")))
          {
            goto LABEL_38;
          }
          if (v16 == CFSTR("ja") || CFEqual(v16, CFSTR("ja")))
          {
            v10 = 2;
LABEL_38:

            return v10;
          }
LABEL_37:
          v10 = 1;
          goto LABEL_38;
        }
      }

      goto LABEL_37;
    }
  }
  return 1;
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  int *v1;
  int *inited;

  if (!font)
    return 0.0;
  v1 = (int *)*((_QWORD *)font + 5);
  if (v1[12])
    inited = v1 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v1);
  return *((double *)inited + 1);
}

uint64_t CTFontHasExuberatedLineHeight(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return CurrentLocaleIsExuberated();
  result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 784))(result);
  return result;
}

unint64_t CTRunGetFont(unint64_t result)
{
  if (result)
    return atomic_load((unint64_t *)(*(_QWORD *)(result + 40) + 56));
  return result;
}

uint64_t **CTLineCreateTruncatedLineWithTokenHandler(uint64_t **a1, unsigned __int32 a2, const void *a3, double a4)
{
  return CreateTruncatedLine(a1, a2, 0, a3, a4);
}

CTLineRef CTTypesetterCreateLine(CTTypesetterRef typesetter, CFRange stringRange)
{
  return (CTLineRef)TypesetterCreateLine(typesetter, stringRange, 0.0);
}

uint64_t TBaseFont::GetScriptAnalysisValue(TBaseFont *this)
{
  void *v2;
  const __CFNumber *v3;
  uint64_t v4;
  const __CFData *CommonTable;
  const __CFData *v6;
  int v7;
  id v9;
  id valuePtr;

  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontIgnoreScriptAnalysisAttribute"), &valuePtr);
  do
    v2 = (void *)__ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));

  if (v2)
  {
    v3 = v2;
    LODWORD(valuePtr) = -1431655766;
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    if ((_DWORD)valuePtr)
      v4 = 2;
    else
      v4 = 1;

  }
  else
  {
    CommonTable = (const __CFData *)TBaseFont::GetCommonTable(this, 1196643650, 0);
    if (IgnoreScriptAnalysisForGCommonTable(CommonTable))
    {
      v6 = (const __CFData *)TBaseFont::GetCommonTable(this, 1196445523, 0);
      if (v6)
        v7 = IgnoreScriptAnalysisForGCommonTable(v6);
      else
        v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    TCFNumber::TCFNumber<int>((unint64_t *)&v9, v7);
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v9, CFSTR("CTFontIgnoreScriptAnalysisAttribute"));

    if (v7)
      v4 = 2;
    else
      v4 = 0;
  }

  return v4;
}

uint64_t IgnoreScriptAnalysisForGCommonTable(const __CFData *a1)
{
  const UInt8 *BytePtr;
  unint64_t v3;
  const UInt8 *v4;
  unint64_t v5;

  if (!a1)
    return 1;
  BytePtr = CFDataGetBytePtr(a1);
  if (!BytePtr)
    return 1;
  v3 = (unint64_t)BytePtr;
  v4 = CFDataGetBytePtr(a1);
  if (v4)
    v5 = (unint64_t)&v4[CFDataGetLength(a1)];
  else
    v5 = 0;
  return OTL::GCommon::IgnoreScriptAnalysis(v3, v5);
}

uint64_t OTL::GCommon::IgnoreScriptAnalysis(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unsigned __int16 *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int32 *v19;
  char *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  char *LangSysTable;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  _DWORD *v37;
  unint64_t v38;
  unsigned int v40;
  unsigned __int16 *v41;
  _DWORD *v42;
  unint64_t v43;
  unsigned int v45;
  char *v46;
  unsigned __int16 *v47;
  unsigned int v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unint64_t v52;
  BOOL v53;
  unsigned int v55;
  char *v56;
  unsigned __int16 *v57;
  unsigned int v59;
  uint64_t v60;
  unsigned __int16 *v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v65;
  _BYTE v66[40];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*(_WORD *)(a1 + 4))
    return 1;
  v4 = __rev16(*(unsigned __int16 *)(a1 + 4));
  v5 = (unsigned __int16 *)(a1 + v4);
  v6 = a1 + v4 + 2;
  if (v6 > a2)
    return 1;
  v8 = *v5;
  v9 = __rev16(v8);
  v10 = v6 + 6 * v9;
  if (v10 < v6 || v10 > a2)
  {
    v12 = (a2 - v6) / 6;
    if ((unint64_t)(v5 + 4) > a2)
      v12 = 0;
    if (v12 != v9 || v8 == 0)
      return 1;
  }
  else if (!*v5)
  {
    return 1;
  }
  v14 = (unsigned __int16 *)((char *)v5 + (bswap32(v5[3]) >> 16));
  if ((unint64_t)(v14 + 1) >= a1 && (unint64_t)(v14 + 2) <= a2)
  {
    qmemcpy(v66, "lryckerginahanakntalnmrarehcroegrnurmago", sizeof(v66));
    if (v9 <= 1)
      v16 = 1;
    else
      v16 = v9;
    v17 = v4 + 2;
    while (1)
    {
      v18 = *(_DWORD *)(a1 + v17);
      if (v18 != 1414284868)
      {
        v19 = wmemchr((__int32 *)v66, bswap32(v18), 0xAuLL);
        v20 = v19 ? (char *)v19 : (char *)&v67;
        if (v20 - v66 == 40)
          break;
      }
      v17 += 6;
      if (!--v16)
      {
        if (*(_WORD *)(a1 + 6))
        {
          v21 = (unsigned __int16 *)(a1 + __rev16(*(unsigned __int16 *)(a1 + 6)));
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) <= a2)
          {
            v23 = bswap32(*v21) >> 16;
            v24 = (unint64_t)&v22[3 * v23];
            if (v24 >= (unint64_t)v22 && v24 <= a2)
              goto LABEL_43;
            v26 = (a2 - (unint64_t)v22) / 6;
            if ((unint64_t)(v21 + 4) > a2)
              v26 = 0;
            if (v26 == v23)
            {
LABEL_43:
              result = (uint64_t)OTL::FirstLangSysTable(v14, a1, a2);
              if (!result)
                return result;
              if (v9 < 2)
              {
                LODWORD(v31) = 1;
              }
              else
              {
                v27 = result;
                v28 = *(unsigned __int16 *)(result + 4);
                v29 = __rev16(v28);
                v30 = v29 <= 1 ? 1 : v29;
                v31 = 1;
                while (1)
                {
                  v32 = (unsigned __int16 *)((char *)v5 + (bswap32(v5[3 * v31 + 3]) >> 16));
                  if ((unint64_t)(v32 + 2) > a2)
                    break;
                  LangSysTable = OTL::FirstLangSysTable(v32, a1, a2);
                  if (!LangSysTable || *((unsigned __int16 *)LangSysTable + 2) != v28)
                    break;
                  if (v28)
                  {
                    v34 = 0;
                    do
                    {
                      v35 = bswap32(*(unsigned __int16 *)(v27 + 2 * v34 + 6)) >> 16;
                      v36 = &v21[3 * v35];
                      v37 = v36 + 1;
                      v38 = (unint64_t)(v36 + 4);
                      if ((unint64_t)v37 < a1 || v38 > a2)
                        return 0;
                      v40 = bswap32(*(unsigned __int16 *)&LangSysTable[2 * v34 + 6]) >> 16;
                      v41 = &v21[3 * v40];
                      v42 = v41 + 1;
                      v43 = (unint64_t)(v41 + 4);
                      if ((unint64_t)v42 < a1 || v43 > a2)
                        return 0;
                      if (*v37 != *v42)
                        goto LABEL_103;
                      v45 = v21[3 * v35 + 3];
                      v46 = (char *)v21 + __rev16(v45);
                      v47 = (unsigned __int16 *)(v46 + 4);
                      if ((unint64_t)(v46 + 2) < a1 || (unint64_t)v47 > a2)
                        return 0;
                      v49 = *((unsigned __int16 *)v46 + 1);
                      v50 = __rev16(v49);
                      v51 = &v47[v50];
                      v52 = (unint64_t)(v46 + 6) <= a2 ? (a2 - (unint64_t)v47) >> 1 : 0;
                      v53 = (unint64_t)v51 <= a2 && v51 >= v47;
                      if (!v53 && v52 != v50)
                        return 0;
                      v55 = v21[3 * v40 + 3];
                      v56 = (char *)v21 + __rev16(v55);
                      v57 = (unsigned __int16 *)(v56 + 4);
                      if (v56 + 2 < (char *)v21 || (unint64_t)v57 > a2)
                        return 0;
                      v59 = *((unsigned __int16 *)v56 + 1);
                      v60 = __rev16(v59);
                      v61 = &v57[v60];
                      v62 = (unint64_t)(v56 + 6) <= a2 ? (a2 - (unint64_t)v57) >> 1 : 0;
                      v63 = (unint64_t)v61 <= a2 && v61 >= v57;
                      if (!v63 && v62 != v60)
                        return 0;
                      if (v45 != v55)
                      {
                        if (v49 != v59)
                          goto LABEL_103;
                        if (v49)
                        {
                          v65 = 2 * v50;
                          while (*v47 == *v57)
                          {
                            ++v47;
                            ++v57;
                            v65 -= 2;
                            if (!v65)
                              goto LABEL_99;
                          }
                          goto LABEL_103;
                        }
                      }
LABEL_99:
                      ;
                    }
                    while (++v34 != v30);
                  }
                  ++v31;
                  result = 1;
                  if (v31 == v9)
                    return result;
                }
              }
LABEL_103:
              if ((_DWORD)v31 == (_DWORD)v9)
                return 1;
            }
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

char *OTL::FirstLangSysTable(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *result;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*a1)
  {
    v4 = __rev16(*a1);
  }
  else
  {
    if (!a1[1])
      return 0;
    result = 0;
    if ((unint64_t)(a1 + 4) < a2 || (unint64_t)(a1 + 5) > a3)
      return result;
    v4 = bswap32(a1[4]) >> 16;
  }
  v6 = (char *)a1 + v4;
  v7 = (unint64_t)(v6 + 6);
  if ((unint64_t)(v6 + 4) < a2 || v7 > a3)
    return 0;
  v9 = bswap32(*((unsigned __int16 *)v6 + 2)) >> 16;
  v10 = v7 + 2 * v9;
  if ((unint64_t)(v6 + 8) <= a3)
    v11 = (a3 - v7) >> 1;
  else
    v11 = 0;
  if (v10 >= v7 && v10 <= a3 || v11 == v9)
    return v6;
  else
    return 0;
}

void TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>(unint64_t *a1, unint64_t *a2, const void *a3)
{
  os_unfair_lock_s *v6;
  __CFDictionary *v9;
  const void *v11;

  v6 = (os_unfair_lock_s *)(a1 + 14);
  os_unfair_lock_lock_with_options();
  if (atomic_load(a2))
  {
    if (!atomic_load(a1 + 15))
      TBaseFont::InitAttributesDict((TBaseFont *)a1);
  }
  v9 = (__CFDictionary *)atomic_load(a1 + 15);
  if (v9)
  {
    if (atomic_load(a2))
    {
      v11 = (const void *)atomic_load(a2);
      CFDictionarySetValue(v9, a3, v11);
    }
    else
    {
      CFDictionaryRemoveValue(v9, a3);
    }
  }
  os_unfair_lock_unlock(v6);
}

unint64_t *TCFNumber::TCFNumber<int>(unint64_t *a1, int a2)
{
  unint64_t v3;
  id v5;
  int valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  *a1 = v3;

  return a1;
}

CFStringRef CTFontCopyFullName(CTFontRef font)
{
  const __CFString *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**(_QWORD **)(*((_QWORD *)font + 5) + 400)
                                                                       + 72))(&v3, *(_QWORD *)(*((_QWORD *)font + 5) + 400), CFSTR("CTFontFullName"));
  do
    v1 = (const __CFString *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  int *v1;
  int v2;

  if (font)
  {
    v1 = (int *)*((_QWORD *)font + 5);
    v2 = *v1;
    LODWORD(font) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 50) + 160))(*((_QWORD *)v1 + 50)) | ((v2 & 1) << 11);
  }
  return font;
}

unsigned int *TBaseFont::GetSymbolicTraitsInternal(TBaseFont *this)
{
  unsigned int *result;

  result = (unsigned int *)atomic_load((unint64_t *)this + 30);
  if (result)
    return (unsigned int *)*result;
  result = (unsigned int *)TBaseFont::CreateTraitsValues(this);
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t TInstanceFont::GetSymbolicTraitsInternal(TInstanceFont *this)
{
  void *v2;
  void *v4;
  const __CFNumber *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  void *Value;
  void *v10;
  void *v11;
  const __CFNumber *v12;
  uint64_t v13;
  id v15;
  id v16;
  unsigned int valuePtr;
  id v18;

  valuePtr = 0;
  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontSymbolicTrait"), &v18);
  do
    v2 = (void *)__ldaxr((unint64_t *)&v18);
  while (__stlxr(0, (unint64_t *)&v18));
  v16 = v2;

  if (atomic_load((unint64_t *)&v16))
  {
    v4 = (void *)atomic_load((unint64_t *)&v16);
    v5 = v4;
    CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
  }
  else
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TInstanceFont *))(*(_QWORD *)this + 152))(&v18, this);
    do
      v5 = (const __CFNumber *)__ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));

    v6 = v5;
    v7 = v6;
    if (v6)
      Value = (void *)CFDictionaryGetValue(v6, CFSTR("NSCTFontSymbolicTrait"));
    else
      Value = 0;
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v16, Value);

    if (atomic_load((unint64_t *)&v16))
    {
      v10 = (void *)atomic_load((unint64_t *)&v16);
      v15 = v10;
      TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v15, CFSTR("NSCTFontSymbolicTrait"));

      v11 = (void *)atomic_load((unint64_t *)&v16);
      v12 = v11;
      CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);

    }
  }

  v13 = valuePtr;
  return v13;
}

BOOL TBaseFont::GetOpticalPointSizes(TBaseFont *this, double *a2, double *a3)
{
  void *v6;
  const __CFNumber *v7;
  unsigned int v8;
  _BOOL8 v9;
  id v11;
  int valuePtr;

  valuePtr = -65536;
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 432))(&v11);
  if (atomic_load((unint64_t *)&v11))
  {
    v6 = (void *)atomic_load((unint64_t *)&v11);
    v7 = v6;
    CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);

  }
  v8 = valuePtr;
  if (valuePtr != -65536)
  {
    *a2 = (double)(unsigned __int16)valuePtr / 20.0;
    *a3 = (double)HIWORD(v8) / 20.0;
  }
  v9 = v8 != -65536;

  return v9;
}

void TBaseFont::CopyOpticalPointSizes(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id valuePtr[3];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontOpticalPointSizesAttribute"), valuePtr);
  do
    v4 = __ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    memset(valuePtr, 170, sizeof(valuePtr));
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v12, this, 1330851634);
    OS2::OS2((unint64_t *)valuePtr, (unint64_t *)&v12);

    if ((uint64_t)valuePtr[2] >= 100
      && bswap32(*(unsigned __int16 *)valuePtr[1]) >> 16 >= 5
      && ((v6 = *((unsigned __int16 *)valuePtr[1] + 49), *((_WORD *)valuePtr[1] + 48)) || v6 != 0xFFFF))
    {
      v7 = (__PAIR64__(__rev16(v6), bswap32(*((unsigned __int16 *)valuePtr[1] + 48))) >> 16);
    }
    else
    {
      v7 = 4294901760;
    }

    valuePtr[0] = (id)v7;
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, valuePtr);
    do
      v8 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    do
      v9 = (void *)__ldaxr(a2);
    while (__stlxr(v8, a2));

    v10 = (void *)atomic_load(a2);
    v11 = v10;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v11, CFSTR("CTFontOpticalPointSizesAttribute"));

  }
}

void TBaseFont::CopyCSSWidth(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  const __CFString *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  id v11;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFIndex Count;
  unint64_t v16;
  void *v17;
  void *v20;
  unint64_t TraitsValues;
  unint64_t v22;
  void *v23;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32[3];
  id v33;
  id v34;
  id valuePtr;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontCSSWidthAttribute"), v32);
  do
    v4 = __ldaxr((unint64_t *)v32);
  while (__stlxr(0, (unint64_t *)v32));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    {
      v6 = (const __CFString *)atomic_load((unint64_t *)this + 12);
      CopyAttributeForSystemFont(v6, CFSTR("CTFontCSSWidthAttribute"), (const __CFString **)v32);
      do
        v7 = __ldaxr((unint64_t *)v32);
      while (__stlxr(0, (unint64_t *)v32));
      do
        v8 = (void *)__ldaxr(a2);
      while (__stlxr(v7, a2));

      if (atomic_load(a2))
      {
        v10 = (void *)atomic_load(a2);
        v34 = v10;
        TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v34, CFSTR("CTFontCSSWidthAttribute"));
        v11 = v34;
LABEL_30:

        return;
      }
    }
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v33, this);
    v12 = (void *)atomic_load((unint64_t *)&v33);
    v13 = v12;
    if (v13)
    {
      v14 = v13;
      Count = CFDictionaryGetCount(v13);

      if (Count > 0)
        goto LABEL_20;
    }
    else
    {

    }
    memset(v32, 170, sizeof(v32));
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&valuePtr, this, 1330851634);
    OS2::OS2((unint64_t *)v32, (unint64_t *)&valuePtr);

    if ((uint64_t)v32[2] >= 78)
    {
      valuePtr = COERCE_ID(WidthPercentOfClass(bswap32(*((unsigned __int16 *)v32[1] + 3)) >> 16));
      v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
      do
        v16 = __ldaxr((unint64_t *)&v31);
      while (__stlxr(0, (unint64_t *)&v31));
      do
        v17 = (void *)__ldaxr(a2);
      while (__stlxr(v16, a2));

    }
LABEL_20:
    if (!atomic_load(a2))
    {
      TraitsValues = atomic_load((unint64_t *)this + 30);
      if (!TraitsValues)
        TraitsValues = TBaseFont::CreateTraitsValues(this);
      TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontCSSWidthAttribute"), v32);
      do
        v22 = __ldaxr((unint64_t *)v32);
      while (__stlxr(0, (unint64_t *)v32));
      do
        v23 = (void *)__ldaxr(a2);
      while (__stlxr(v22, a2));

      if (atomic_load(a2))
        goto LABEL_29;
      if (TraitsValues)
      {
        v25 = ClassOfWidth(*(double *)(TraitsValues + 16));
        v32[0] = COERCE_ID(WidthPercentOfClass(v25));
        valuePtr = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, v32);
        do
          v26 = __ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        do
          v27 = (void *)__ldaxr(a2);
        while (__stlxr(v26, a2));

      }
    }
    if (!atomic_load(a2))
    {
      LODWORD(valuePtr) = 100;
      v32[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      do
        v28 = __ldaxr((unint64_t *)v32);
      while (__stlxr(0, (unint64_t *)v32));
      do
        v29 = (void *)__ldaxr(a2);
      while (__stlxr(v28, a2));

    }
    v20 = (void *)atomic_load(a2);
    v30 = v20;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v30, CFSTR("CTFontCSSWidthAttribute"));

LABEL_29:
    v11 = v33;
    goto LABEL_30;
  }
}

void TBaseFont::CopyCSSWeight(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  const __CFString *v6;
  unint64_t v7;
  void *v8;
  void *v10;
  id v11;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFIndex Count;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  void *v20;
  void *v23;
  unint64_t TraitsValues;
  unint64_t v25;
  void *v26;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34[3];
  id v35;
  id v36;
  int valuePtr;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontCSSWeightAttribute"), v34);
  do
    v4 = __ldaxr((unint64_t *)v34);
  while (__stlxr(0, (unint64_t *)v34));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    {
      v6 = (const __CFString *)atomic_load((unint64_t *)this + 12);
      CopyAttributeForSystemFont(v6, CFSTR("CTFontCSSWeightAttribute"), (const __CFString **)v34);
      do
        v7 = __ldaxr((unint64_t *)v34);
      while (__stlxr(0, (unint64_t *)v34));
      do
        v8 = (void *)__ldaxr(a2);
      while (__stlxr(v7, a2));

      if (atomic_load(a2))
      {
        v10 = (void *)atomic_load(a2);
        v36 = v10;
        TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v36, CFSTR("CTFontCSSWeightAttribute"));
        v11 = v36;
LABEL_37:

        return;
      }
    }
    v35 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v35, this);
    v12 = (void *)atomic_load((unint64_t *)&v35);
    v13 = v12;
    if (v13)
    {
      v14 = v13;
      Count = CFDictionaryGetCount(v13);

      if (Count > 0)
        goto LABEL_27;
    }
    else
    {

    }
    memset(v34, 170, sizeof(v34));
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v33, this, 1330851634);
    OS2::OS2((unint64_t *)v34, (unint64_t *)&v33);

    if ((uint64_t)v34[2] >= 78)
    {
      v16 = bswap32(*((unsigned __int16 *)v34[1] + 2)) >> 16;
      if (v16 < 0xB)
        LOWORD(v16) = 100 * v16;
      v17 = (unsigned __int16)v16;
      if ((unsigned __int16)v16 >= 0x3E8u)
        v17 = 1000;
      if ((_WORD)v16)
        v18 = v17;
      else
        v18 = 1;
      valuePtr = v18;
      v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      do
        v19 = __ldaxr((unint64_t *)&v33);
      while (__stlxr(0, (unint64_t *)&v33));
      do
        v20 = (void *)__ldaxr(a2);
      while (__stlxr(v19, a2));

    }
LABEL_27:
    if (!atomic_load(a2))
    {
      TraitsValues = atomic_load((unint64_t *)this + 30);
      if (!TraitsValues)
        TraitsValues = TBaseFont::CreateTraitsValues(this);
      TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontCSSWeightAttribute"), v34);
      do
        v25 = __ldaxr((unint64_t *)v34);
      while (__stlxr(0, (unint64_t *)v34));
      do
        v26 = (void *)__ldaxr(a2);
      while (__stlxr(v25, a2));

      if (atomic_load(a2))
        goto LABEL_36;
      if (TraitsValues)
      {
        LODWORD(v33) = ClassOfWeight(*(double *)(TraitsValues + 8));
        v34[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v33);
        do
          v28 = __ldaxr((unint64_t *)v34);
        while (__stlxr(0, (unint64_t *)v34));
        do
          v29 = (void *)__ldaxr(a2);
        while (__stlxr(v28, a2));

      }
    }
    if (!atomic_load(a2))
    {
      LODWORD(v33) = 400;
      v34[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v33);
      do
        v30 = __ldaxr((unint64_t *)v34);
      while (__stlxr(0, (unint64_t *)v34));
      do
        v31 = (void *)__ldaxr(a2);
      while (__stlxr(v30, a2));

    }
    v23 = (void *)atomic_load(a2);
    v32 = v23;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v32, CFSTR("CTFontCSSWeightAttribute"));

LABEL_36:
    v11 = v35;
    goto LABEL_37;
  }
}

uint64_t TCFBase<TFont>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TFont::operator==(*(TFont **)(a1 + 40), *(TFont **)(a2 + 40));
}

uint64_t TFont::operator==(TFont *this, TFont *a2)
{
  const void *v4;
  const void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;

  if (this == a2)
    return 1;
  if (*((double *)this + 2) != *((double *)a2 + 2)
    || *(_DWORD *)this != *(_DWORD *)a2
    || TFont::CompareExtras(this, a2) != 2)
  {
    return 0;
  }
  v4 = (const void *)atomic_load((unint64_t *)this + 1);
  v5 = (const void *)atomic_load((unint64_t *)a2 + 1);
  if (v4 == v5 || (result = 0, v4) && v5 && (result = CFEqual(v4, v5), (_DWORD)result))
  {
    v7 = *((_QWORD *)this + 5);
    v8 = *((_QWORD *)a2 + 5);
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      if (v7)
        v9 = (const void *)*((_QWORD *)this + 5);
      else
        v9 = (const void *)MEMORY[0x1E0C9BAA8];
      if (v8)
        v10 = (const void *)*((_QWORD *)a2 + 5);
      else
        v10 = (const void *)MEMORY[0x1E0C9BAA8];
      return memcmp(v9, v10, 0x30uLL) == 0;
    }
  }
  return result;
}

BOOL TCFBase<TDescriptor>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TDescriptor::Equal(*(TDescriptor **)(a1 + 40), *(const TDescriptor **)(a2 + 40));
}

BOOL TDescriptor::Equal(TDescriptor *this, const TDescriptor *a2)
{
  unint64_t v4;
  uint64_t v5;
  const void *Attributes;
  const void *v8;
  unint64_t v9;
  unint64_t v10;

  if (this == a2)
    return 1;
  v4 = TDescriptor::Hash(this);
  if (v4 != TDescriptor::Hash(a2) || ((*((_DWORD *)a2 + 4) ^ *((_DWORD *)this + 4)) & 0x7FFCC408) != 0)
    return 0;
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0 && (*((_DWORD *)a2 + 4) & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, 0, 0.0);
    v9 = atomic_load((unint64_t *)this + 4);
    if ((*((_DWORD *)a2 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(a2, 0, 0.0);
    v10 = atomic_load((unint64_t *)a2 + 4);
    if (v9 && v10)
    {
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9))
        goto LABEL_9;
    }
    else if (!(v9 | v10))
    {
      goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v5 = 1;
  Attributes = (const void *)TDescriptor::GetAttributes(this, 1);
  v8 = (const void *)TDescriptor::GetAttributes(a2, 1);
  if (Attributes != v8)
  {
    v5 = 0;
    if (Attributes)
    {
      if (v8)
        return CFEqual(Attributes, v8) != 0;
    }
  }
  return v5;
}

unint64_t TFont::Hash(TFont *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v24;

  v2 = *((_QWORD *)this + 2) + 2654435769;
  if (*((double *)this + 2) == 0.0)
    v2 = 2654435769;
  v3 = (*(unsigned int *)this + (v2 << 6) + (v2 >> 2) + 2654435769u) ^ v2;
  if (atomic_load((unint64_t *)this + 1))
  {
    v5 = atomic_load((unint64_t *)this + 1);
    v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + TDescriptor::Hash(*(TDescriptor **)(v5 + 40));
  }
  v6 = (double *)*((_QWORD *)this + 5);
  if (v6)
  {
    v7 = v6[1];
    v8 = v6[2];
    v9 = v6[3];
    v10 = v6[4];
    v11 = v6[5];
    v12 = *v6 == 0.0;
    v13 = *(_QWORD *)v6 + 2654435769;
    if (v12)
      v13 = 2654435769;
    v14 = *(_QWORD *)&v7 + 2654435769;
    if (v7 == 0.0)
      v14 = 2654435769;
    v15 = ((v13 >> 2) + (v13 << 6) + v14) ^ v13;
    v16 = *(_QWORD *)&v8 + 2654435769;
    if (v8 == 0.0)
      v16 = 2654435769;
    v17 = (v16 + (v15 << 6) + (v15 >> 2)) ^ v15;
    v18 = *(_QWORD *)&v9 + 2654435769;
    if (v9 == 0.0)
      v18 = 2654435769;
    v19 = (v18 + (v17 << 6) + (v17 >> 2)) ^ v17;
    v20 = *(_QWORD *)&v10 + 2654435769;
    if (v10 == 0.0)
      v20 = 2654435769;
    v21 = (v20 + (v19 << 6) + (v19 >> 2)) ^ v19;
    v22 = *(_QWORD *)&v11 + 2654435769;
    if (v11 == 0.0)
      v22 = 2654435769;
    v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + ((v22 + (v21 << 6) + (v21 >> 2)) ^ v21);
  }
  if (atomic_load((unint64_t *)this + 20))
  {
    v24 = (const void *)atomic_load((unint64_t *)this + 20);
    v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + CFHash(v24);
  }
  return v3;
}

unint64_t TDescriptor::Hash(TDescriptor *this)
{
  unint64_t v1;
  unint64_t v3;
  void *v4;
  id v5;
  void *v6;
  CFHashCode v7;
  const void *Attributes;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, 0, 0.0);
    v3 = atomic_load((unint64_t *)this + 4);
    if (v3 && (v4 = (void *)atomic_load((unint64_t *)(v3 + 96)), (v5 = v4) != 0))
    {
      v6 = v5;
      v7 = CFHash(v5);
    }
    else
    {
      Attributes = (const void *)TDescriptor::GetAttributes(this, 1);
      v7 = CFHash(Attributes);
      v6 = 0;
    }
    v1 = (((v7 + 2654435769u) << 6) + ((v7 + 2654435769u) >> 2) + (*((_DWORD *)this + 4) & 0x7FFCC408) + 2654435769) ^ (v7 + 2654435769u);
    *((_QWORD *)this + 3) = v1;

  }
  return v1;
}

void TDescriptor::CopyAttributes(TDescriptor *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  v4 = (id)TDescriptor::GetAttributes(this, 1);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

unint64_t TDescriptor::GetAttributes(TDescriptor *this, int a2)
{
  unint64_t *v2;
  BOOL v4;
  TBaseFont *v6;
  unint64_t v7;
  int v9;
  void *v10;
  id v12;

  v2 = (unint64_t *)((char *)this + 8);
  if (atomic_load((unint64_t *)this + 1))
    v4 = 1;
  else
    v4 = a2 == 0;
  if (!v4)
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, 0, 0.0);
    v6 = (TBaseFont *)atomic_load((unint64_t *)this + 4);
    if (v6)
    {
      TBaseFont::CreateDescriptorAttributes(v6, (CFDictionaryRef *)&v12);
      do
        v7 = __ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));

      while (!__ldaxr(v2))
      {
        if (!__stlxr(v7, v2))
        {
          v9 = 1;
          goto LABEL_15;
        }
      }
      v9 = 0;
      __clrex();
LABEL_15:
      if (v9)
        v10 = 0;
      else
        v10 = (void *)v7;

    }
  }
  return atomic_load(v2);
}

uint64_t TComponentFont::Equal(TComponentFont *this, const TBaseFont *a2)
{
  int v4;
  const void *v5;
  const void *v6;
  uint64_t result;

  if (this == a2)
    return 1;
  v4 = (*(uint64_t (**)(TComponentFont *))(*(_QWORD *)this + 16))(this);
  if (v4 != (*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2)
    || *((_DWORD *)this + 178) != *((_DWORD *)a2 + 178))
  {
    return 0;
  }
  v5 = (const void *)atomic_load((unint64_t *)this + 93);
  v6 = (const void *)atomic_load((unint64_t *)a2 + 93);
  if (v5 == v6)
    return 1;
  result = 0;
  if (v5)
  {
    if (v6)
    {
      result = CFEqual(v5, v6);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t TTenuousComponentFont::GetType(TTenuousComponentFont *this)
{
  return 1414809156;
}

void TBaseFont::CreateDescriptorAttributes(TBaseFont *this@<X0>, CFDictionaryRef *a2@<X8>)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  void **v17;
  void **v18;
  void **v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  void *v28;
  int64x2_t v29;
  void **v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  void **v44;
  void **v45;
  void **v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  void **v51;
  void **v52;
  void **v53;
  void **v54;
  void *v55;
  int64x2_t v56;
  void **v57;
  id v58;
  int64x2_t v59;
  void **v60;
  _OWORD *v61;
  void **values[2];
  void **v63;
  _OWORD v64[15];
  _OWORD *v65;
  int64x2_t v66;
  char *v67;
  _OWORD v68[15];
  _OWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[14] = v4;
  v68[13] = v4;
  v68[12] = v4;
  v68[11] = v4;
  v68[10] = v4;
  v68[9] = v4;
  v68[8] = v4;
  v68[7] = v4;
  v68[6] = v4;
  v68[5] = v4;
  v68[4] = v4;
  v68[3] = v4;
  v68[2] = v4;
  v68[1] = v4;
  v68[0] = v4;
  v66 = 0uLL;
  v67 = 0;
  v69 = v68;
  v64[14] = v4;
  v64[13] = v4;
  v64[12] = v4;
  v64[11] = v4;
  v64[10] = v4;
  v64[9] = v4;
  v64[8] = v4;
  v64[7] = v4;
  v64[6] = v4;
  v64[5] = v4;
  v64[4] = v4;
  v64[3] = v4;
  v64[2] = v4;
  v64[1] = v4;
  v64[0] = v4;
  values[1] = 0;
  v63 = 0;
  values[0] = 0;
  v65 = v64;
  v5 = (void *)atomic_load((unint64_t *)this + 12);
  if (v5)
  {
    v6 = (v66.i64[1] - v66.i64[0]) >> 3;
    if ((unint64_t)(v6 + 1) >> 61)
      goto LABEL_69;
    v7 = (uint64_t)&v67[-v66.i64[0]] >> 2;
    if (v7 <= v6 + 1)
      v7 = v6 + 1;
    if ((unint64_t)&v67[-v66.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
      v8 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v61 = v68;
    if (v8)
      v9 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v68, v8);
    else
      v9 = 0;
    v10 = &v9[8 * v6];
    v11 = &v9[8 * v8];
    v60 = (void **)v11;
    *(_QWORD *)v10 = CFSTR("NSFontNameAttribute");
    v12 = v10 + 8;
    v59.i64[1] = (uint64_t)(v10 + 8);
    v13 = v66.i64[1];
    v14 = v66.i64[0];
    if (v66.i64[1] == v66.i64[0])
    {
      v16 = vdupq_n_s64(v66.u64[1]);
    }
    else
    {
      do
      {
        v15 = *(_QWORD *)(v13 - 8);
        v13 -= 8;
        *((_QWORD *)v10 - 1) = v15;
        v10 -= 8;
      }
      while (v13 != v14);
      v16 = v66;
      v12 = (_QWORD *)v59.i64[1];
      v11 = (char *)v60;
    }
    v66.i64[0] = (uint64_t)v10;
    v66.i64[1] = (uint64_t)v12;
    v59 = v16;
    v17 = (void **)v67;
    v67 = v11;
    v60 = v17;
    v58 = (id)v16.i64[0];
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v58);
    v66.i64[1] = (uint64_t)v12;
    v18 = values[1];
    if (values[1] >= v63)
    {
      v20 = values[1] - values[0];
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_69;
      v21 = ((char *)v63 - (char *)values[0]) >> 2;
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      if ((unint64_t)((char *)v63 - (char *)values[0]) >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v61 = v64;
      if (v22)
        v23 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v64, v22);
      else
        v23 = 0;
      v24 = (void **)&v23[8 * v20];
      v25 = (void **)&v23[8 * v22];
      v60 = v25;
      *v24 = v5;
      v19 = v24 + 1;
      v59.i64[1] = (uint64_t)(v24 + 1);
      v27 = values[0];
      v26 = values[1];
      if (values[1] == values[0])
      {
        v29 = vdupq_n_s64((unint64_t)values[1]);
      }
      else
      {
        do
        {
          v28 = *--v26;
          *--v24 = v28;
        }
        while (v26 != v27);
        v29 = *(int64x2_t *)values;
        v19 = (void **)v59.i64[1];
        v25 = v60;
      }
      values[0] = v24;
      values[1] = v19;
      v59 = v29;
      v30 = v63;
      v63 = v25;
      v60 = v30;
      v58 = (id)v29.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *values[1] = v5;
      v19 = v18 + 1;
    }
    values[1] = v19;
  }
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontMatrixAttribute"), &v58);
  do
    v31 = (void *)__ldaxr((unint64_t *)&v58);
  while (__stlxr(0, (unint64_t *)&v58));

  if (v31)
  {
    v32 = v66.i64[1];
    if (v66.i64[1] >= (unint64_t)v67)
    {
      v34 = (v66.i64[1] - v66.i64[0]) >> 3;
      if ((unint64_t)(v34 + 1) >> 61)
        goto LABEL_69;
      v35 = (uint64_t)&v67[-v66.i64[0]] >> 2;
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      if ((unint64_t)&v67[-v66.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v61 = v68;
      if (v36)
        v37 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v68, v36);
      else
        v37 = 0;
      v38 = &v37[8 * v34];
      v39 = &v37[8 * v36];
      v60 = (void **)v39;
      *(_QWORD *)v38 = CFSTR("NSCTFontMatrixAttribute");
      v33 = v38 + 8;
      v59.i64[1] = (uint64_t)(v38 + 8);
      v40 = v66.i64[1];
      v41 = v66.i64[0];
      if (v66.i64[1] == v66.i64[0])
      {
        v43 = vdupq_n_s64(v66.u64[1]);
      }
      else
      {
        do
        {
          v42 = *(_QWORD *)(v40 - 8);
          v40 -= 8;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        v43 = v66;
        v33 = (_QWORD *)v59.i64[1];
        v39 = (char *)v60;
      }
      v66.i64[0] = (uint64_t)v38;
      v66.i64[1] = (uint64_t)v33;
      v59 = v43;
      v44 = (void **)v67;
      v67 = v39;
      v60 = v44;
      v58 = (id)v43.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *(_QWORD *)v66.i64[1] = CFSTR("NSCTFontMatrixAttribute");
      v33 = (_QWORD *)(v32 + 8);
    }
    v66.i64[1] = (uint64_t)v33;
    v45 = values[1];
    if (values[1] < v63)
    {
      *values[1] = v31;
      v46 = v45 + 1;
LABEL_67:
      values[1] = v46;
      goto LABEL_68;
    }
    v47 = values[1] - values[0];
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      v48 = ((char *)v63 - (char *)values[0]) >> 2;
      if (v48 <= v47 + 1)
        v48 = v47 + 1;
      if ((unint64_t)((char *)v63 - (char *)values[0]) >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      v61 = v64;
      if (v49)
        v50 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v64, v49);
      else
        v50 = 0;
      v51 = (void **)&v50[8 * v47];
      v52 = (void **)&v50[8 * v49];
      v60 = v52;
      *v51 = v31;
      v46 = v51 + 1;
      v59.i64[1] = (uint64_t)(v51 + 1);
      v54 = values[0];
      v53 = values[1];
      if (values[1] == values[0])
      {
        v56 = vdupq_n_s64((unint64_t)values[1]);
      }
      else
      {
        do
        {
          v55 = *--v53;
          *--v51 = v55;
        }
        while (v53 != v54);
        v56 = *(int64x2_t *)values;
        v46 = (void **)v59.i64[1];
        v52 = v60;
      }
      values[0] = v51;
      values[1] = v46;
      v59 = v56;
      v57 = v63;
      v63 = v52;
      v60 = v57;
      v58 = (id)v56.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v58);
      goto LABEL_67;
    }
LABEL_69:
    abort();
  }
LABEL_68:
  (*(void (**)(TBaseFont *, int64x2_t *, void ***))(*(_QWORD *)this + 832))(this, &v66, values);
  *a2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v66.i64[0], (const void **)values[0], (v66.i64[1] - v66.i64[0]) >> 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);

  v58 = values;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v58);
  values[0] = (void **)&v66;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](values);
}

void TBaseFont::CopyName(TBaseFont *this@<X0>, const __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  void *v10;
  unint64_t v11;
  void *v12;
  id v13;
  void *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  void *v17;
  CFTypeID v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  CGFont *v26;
  int v27;
  unint64_t v28;
  void *v29;
  __CFDictionary *v31;
  const void *v32;
  const void *v33;
  id v34;
  id v35;
  id v36;

  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontNames"), &v36);
  do
    v6 = (void *)__ldaxr((unint64_t *)&v36);
  while (__stlxr(0, (unint64_t *)&v36));

  Value = v6;
  v8 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
  *a3 = (unint64_t)Value;

  if (!atomic_load(a3))
  {
    if (CFSTR("CTFontSyntheticName") == a2
      || a2 && CFSTR("CTFontSyntheticName") && CFEqual(a2, CFSTR("CTFontSyntheticName")))
    {
      a2 = CFSTR("CTFontPostScriptName");
    }
    else if (CFSTR("CTFontSyntheticFamilyName") == a2
           || a2 && CFSTR("CTFontSyntheticFamilyName") && CFEqual(a2, CFSTR("CTFontSyntheticFamilyName")))
    {
      a2 = CFSTR("CTFontFamilyName");
    }
    if (CFSTR("CTFontPostScriptName") == a2
      || a2 && CFSTR("CTFontPostScriptName") && CFEqual(CFSTR("CTFontPostScriptName"), a2))
    {
      v10 = (void *)atomic_load((unint64_t *)this + 12);
      v36 = v10;
      do
        v11 = __ldaxr((unint64_t *)&v36);
      while (__stlxr(0, (unint64_t *)&v36));
      do
        v12 = (void *)__ldaxr(a3);
      while (__stlxr(v11, a3));

      v13 = v36;
LABEL_46:

      goto LABEL_47;
    }
    if ((TBaseFont::SkipMetadata(this) & 1) != 0)
    {
LABEL_47:
      if (!atomic_load(a3))
      {
        v26 = (CGFont *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 576))(this);
        v27 = FontNameCodeForKey(a2);
        CopyFontNameInternal(v26, 0, v27, (unint64_t *)&v36);
        do
          v28 = __ldaxr((unint64_t *)&v36);
        while (__stlxr(0, (unint64_t *)&v36));
        do
          v29 = (void *)__ldaxr(a3);
        while (__stlxr(v28, a3));

      }
      if (atomic_load(a3))
      {
        v36 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v36, (CFDictionaryRef)v6);
        v31 = (__CFDictionary *)atomic_load((unint64_t *)&v36);
        v32 = (const void *)atomic_load(a3);
        CFDictionarySetValue(v31, a2, v32);
        v33 = (const void *)atomic_load((unint64_t *)&v36);
        TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v33, CFSTR("CTFontNames"));

      }
      goto LABEL_54;
    }
    if (CFSTR("CTFontMarketingName") == a2
      || a2 && CFSTR("CTFontMarketingName") && CFEqual(a2, CFSTR("CTFontMarketingName")))
    {
      v36 = (id)0xAAAAAAAAAAAAAAAALL;
      TBaseFont::CopyMetadata(this, 0, &v36);
      v14 = (void *)atomic_load((unint64_t *)&v36);
      v15 = v14;
      if (v15)
      {
        v16 = v15;
        v17 = (void *)CFDictionaryGetValue(v15, CFSTR("MTD_Typeface_ID_TypefaceMarketingName"));

        if (v17)
        {
          v18 = CFGetTypeID(v17);
          if (v18 == CFStringGetTypeID())
          {
            v35 = v17;
            do
              v19 = (void *)__ldaxr((unint64_t *)&v35);
            while (__stlxr(0, (unint64_t *)&v35));
            v34 = v19;
            v20 = v35;
LABEL_39:

LABEL_42:
            goto LABEL_43;
          }
        }
      }
      else
      {

      }
      v34 = 0;
      goto LABEL_42;
    }
    v34 = 0;
    if (!(*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    {
      do
LABEL_43:
        v23 = __ldaxr((unint64_t *)&v34);
      while (__stlxr(0, (unint64_t *)&v34));
      do
        v24 = (void *)__ldaxr(a3);
      while (__stlxr(v23, a3));

      v13 = v34;
      goto LABEL_46;
    }
    v21 = (const __CFString *)atomic_load((unint64_t *)this + 12);
    CopyAttributeForSystemFont(v21, a2, (const __CFString **)&v36);
    do
      v22 = __ldaxr((unint64_t *)&v36);
    while (__stlxr(0, (unint64_t *)&v36));
    do
      v20 = (void *)__ldaxr((unint64_t *)&v34);
    while (__stlxr(v22, (unint64_t *)&v34));
    goto LABEL_39;
  }
LABEL_54:

}

void TBaseFont::CopyAttributeInternal(TBaseFont *this@<X0>, const void *a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  const __CFDictionary *Value;

  v6 = (os_unfair_lock_s *)((char *)this + 112);
  os_unfair_lock_lock_with_options();
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  Value = (const __CFDictionary *)atomic_load((unint64_t *)this + 15);
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
  *a3 = Value;
  os_unfair_lock_unlock(v6);
}

uint64_t TTenuousComponentFont::AddDescriptorAttributes(uint64_t a1, int64x2_t *a2, int64x2_t *a3)
{
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  char *v40;
  __int8 *v41;

  result = (uint64_t)TComponentFont::AddDescriptorAttributes((unint64_t *)a1, a2, a3);
  if (*(_BYTE *)(a1 + 793))
  {
    v8 = (_QWORD *)a2->i64[1];
    v7 = a2[1].u64[0];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((uint64_t)v8 - a2->i64[0]) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_36;
      v11 = v7 - a2->i64[0];
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v41 = &a2[1].i8[8];
      if (v13)
        v14 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      v40 = v16;
      *(_QWORD *)v15 = CFSTR("NSCTFontVariationAttribute");
      v9 = v15 + 8;
      v39.i64[1] = (uint64_t)(v15 + 8);
      v18 = a2->i64[0];
      v17 = a2->u64[1];
      if (v17 == a2->i64[0])
      {
        v20 = vdupq_n_s64(v17);
      }
      else
      {
        do
        {
          v19 = *(_QWORD *)(v17 - 8);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v20 = *a2;
        v9 = (_QWORD *)v39.i64[1];
        v16 = v40;
      }
      a2->i64[0] = (uint64_t)v15;
      a2->i64[1] = (uint64_t)v9;
      v39 = v20;
      v21 = a2[1].i64[0];
      a2[1].i64[0] = (uint64_t)v16;
      v40 = (char *)v21;
      v38 = v20.i64[0];
      result = std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v38);
    }
    else
    {
      *v8 = CFSTR("NSCTFontVariationAttribute");
      v9 = v8 + 1;
    }
    a2->i64[1] = (uint64_t)v9;
    v22 = atomic_load((unint64_t *)(a1 + 768));
    v24 = (unint64_t *)a3->i64[1];
    v23 = a3[1].u64[0];
    if ((unint64_t)v24 < v23)
    {
      *v24 = v22;
      v25 = v24 + 1;
LABEL_34:
      a3->i64[1] = (uint64_t)v25;
      return result;
    }
    v26 = ((uint64_t)v24 - a3->i64[0]) >> 3;
    if (!((unint64_t)(v26 + 1) >> 61))
    {
      v27 = v23 - a3->i64[0];
      v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      v41 = &a3[1].i8[8];
      if (v29)
        v30 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v29);
      else
        v30 = 0;
      v31 = (unint64_t *)&v30[8 * v26];
      v32 = &v30[8 * v29];
      v40 = v32;
      *v31 = v22;
      v25 = v31 + 1;
      v39.i64[1] = (uint64_t)(v31 + 1);
      v34 = a3->i64[0];
      v33 = a3->u64[1];
      if (v33 == a3->i64[0])
      {
        v36 = vdupq_n_s64(v33);
      }
      else
      {
        do
        {
          v35 = *(_QWORD *)(v33 - 8);
          v33 -= 8;
          *--v31 = v35;
        }
        while (v33 != v34);
        v36 = *a3;
        v25 = (_QWORD *)v39.i64[1];
        v32 = v40;
      }
      a3->i64[0] = (uint64_t)v31;
      a3->i64[1] = (uint64_t)v25;
      v39 = v36;
      v37 = a3[1].i64[0];
      a3[1].i64[0] = (uint64_t)v32;
      v40 = (char *)v37;
      v38 = v36.i64[0];
      result = std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v38);
      goto LABEL_34;
    }
LABEL_36:
    abort();
  }
  return result;
}

const __CFDictionary *TComponentFont::AddDescriptorAttributes(unint64_t *a1, int64x2_t *a2, int64x2_t *a3)
{
  const void *ComponentAttribute;
  const void *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  char *v37;
  const void *v38;
  const void *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  char *v69;
  void *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64x2_t v84;
  char *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64x2_t v99;
  char *v100;
  const __CFDictionary *result;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64x2_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64x2_t v131;
  char *v132;
  id v133;
  int64x2_t v134;
  char *v135;
  uint64_t *v136;

  if ((*(unsigned int (**)(unint64_t *))(*a1 + 840))(a1))
  {
    ComponentAttribute = TComponentFont::GetComponentAttribute((TComponentFont *)a1, CFSTR("NSCTFontUIUsageAttribute"));
    if (ComponentAttribute)
    {
      v7 = ComponentAttribute;
      v9 = (_QWORD *)a2->i64[1];
      v8 = a2[1].u64[0];
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((uint64_t)v9 - a2->i64[0]) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_143;
        v12 = v8 - a2->i64[0];
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v136 = &a2[1].i64[1];
        if (v14)
          v15 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        v135 = v17;
        *(_QWORD *)v16 = CFSTR("NSCTFontUIUsageAttribute");
        v10 = v16 + 8;
        v134.i64[1] = (uint64_t)(v16 + 8);
        v19 = a2->i64[0];
        v18 = a2->u64[1];
        if (v18 == a2->i64[0])
        {
          v21 = vdupq_n_s64(v18);
        }
        else
        {
          do
          {
            v20 = *(_QWORD *)(v18 - 8);
            v18 -= 8;
            *((_QWORD *)v16 - 1) = v20;
            v16 -= 8;
          }
          while (v18 != v19);
          v21 = *a2;
          v10 = (_QWORD *)v134.i64[1];
          v17 = v135;
        }
        a2->i64[0] = (uint64_t)v16;
        a2->i64[1] = (uint64_t)v10;
        v134 = v21;
        v22 = (char *)a2[1].i64[0];
        a2[1].i64[0] = (uint64_t)v17;
        v135 = v22;
        v133 = (id)v21.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
      }
      else
      {
        *v9 = CFSTR("NSCTFontUIUsageAttribute");
        v10 = v9 + 1;
      }
      a2->i64[1] = (uint64_t)v10;
      v24 = (_QWORD *)a3->i64[1];
      v23 = a3[1].u64[0];
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((uint64_t)v24 - a3->i64[0]) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_143;
        v27 = v23 - a3->i64[0];
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        v136 = &a3[1].i64[1];
        if (v29)
          v30 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v29);
        else
          v30 = 0;
        v31 = &v30[8 * v26];
        v32 = &v30[8 * v29];
        v135 = v32;
        *(_QWORD *)v31 = v7;
        v25 = v31 + 8;
        v134.i64[1] = (uint64_t)(v31 + 8);
        v34 = a3->i64[0];
        v33 = a3->u64[1];
        if (v33 == a3->i64[0])
        {
          v36 = vdupq_n_s64(v33);
        }
        else
        {
          do
          {
            v35 = *(_QWORD *)(v33 - 8);
            v33 -= 8;
            *((_QWORD *)v31 - 1) = v35;
            v31 -= 8;
          }
          while (v33 != v34);
          v36 = *a3;
          v25 = (_QWORD *)v134.i64[1];
          v32 = v135;
        }
        a3->i64[0] = (uint64_t)v31;
        a3->i64[1] = (uint64_t)v25;
        v134 = v36;
        v37 = (char *)a3[1].i64[0];
        a3[1].i64[0] = (uint64_t)v32;
        v135 = v37;
        v133 = (id)v36.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
      }
      else
      {
        *v24 = v7;
        v25 = v24 + 1;
      }
      a3->i64[1] = (uint64_t)v25;
      if ((*(unsigned int (**)(unint64_t *))(*a1 + 856))(a1))
      {
        v38 = TComponentFont::GetComponentAttribute((TComponentFont *)a1, CFSTR("sizeCategory"));
        if (v38)
        {
          v39 = v38;
          v41 = (_QWORD *)a2->i64[1];
          v40 = a2[1].u64[0];
          if ((unint64_t)v41 >= v40)
          {
            v43 = ((uint64_t)v41 - a2->i64[0]) >> 3;
            if ((unint64_t)(v43 + 1) >> 61)
              goto LABEL_143;
            v44 = v40 - a2->i64[0];
            v45 = v44 >> 2;
            if (v44 >> 2 <= (unint64_t)(v43 + 1))
              v45 = v43 + 1;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            v136 = &a2[1].i64[1];
            if (v46)
              v47 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v46);
            else
              v47 = 0;
            v48 = &v47[8 * v43];
            v49 = &v47[8 * v46];
            v135 = v49;
            *(_QWORD *)v48 = CFSTR("NSCTFontSizeCategoryAttribute");
            v42 = v48 + 8;
            v134.i64[1] = (uint64_t)(v48 + 8);
            v51 = a2->i64[0];
            v50 = a2->u64[1];
            if (v50 == a2->i64[0])
            {
              v53 = vdupq_n_s64(v50);
            }
            else
            {
              do
              {
                v52 = *(_QWORD *)(v50 - 8);
                v50 -= 8;
                *((_QWORD *)v48 - 1) = v52;
                v48 -= 8;
              }
              while (v50 != v51);
              v53 = *a2;
              v42 = (_QWORD *)v134.i64[1];
              v49 = v135;
            }
            a2->i64[0] = (uint64_t)v48;
            a2->i64[1] = (uint64_t)v42;
            v134 = v53;
            v54 = (char *)a2[1].i64[0];
            a2[1].i64[0] = (uint64_t)v49;
            v135 = v54;
            v133 = (id)v53.i64[0];
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
          }
          else
          {
            *v41 = CFSTR("NSCTFontSizeCategoryAttribute");
            v42 = v41 + 1;
          }
          a2->i64[1] = (uint64_t)v42;
          v56 = (_QWORD *)a3->i64[1];
          v55 = a3[1].u64[0];
          if ((unint64_t)v56 >= v55)
          {
            v58 = ((uint64_t)v56 - a3->i64[0]) >> 3;
            if ((unint64_t)(v58 + 1) >> 61)
              goto LABEL_143;
            v59 = v55 - a3->i64[0];
            v60 = v59 >> 2;
            if (v59 >> 2 <= (unint64_t)(v58 + 1))
              v60 = v58 + 1;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            v136 = &a3[1].i64[1];
            if (v61)
              v62 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v61);
            else
              v62 = 0;
            v63 = &v62[8 * v58];
            v64 = &v62[8 * v61];
            v135 = v64;
            *(_QWORD *)v63 = v39;
            v57 = v63 + 8;
            v134.i64[1] = (uint64_t)(v63 + 8);
            v66 = a3->i64[0];
            v65 = a3->u64[1];
            if (v65 == a3->i64[0])
            {
              v68 = vdupq_n_s64(v65);
            }
            else
            {
              do
              {
                v67 = *(_QWORD *)(v65 - 8);
                v65 -= 8;
                *((_QWORD *)v63 - 1) = v67;
                v63 -= 8;
              }
              while (v65 != v66);
              v68 = *a3;
              v57 = (_QWORD *)v134.i64[1];
              v64 = v135;
            }
            a3->i64[0] = (uint64_t)v63;
            a3->i64[1] = (uint64_t)v57;
            v134 = v68;
            v69 = (char *)a3[1].i64[0];
            a3[1].i64[0] = (uint64_t)v64;
            v135 = v69;
            v133 = (id)v68.i64[0];
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
          }
          else
          {
            *v56 = v39;
            v57 = v56 + 1;
          }
          a3->i64[1] = (uint64_t)v57;
        }
      }
      (*(void (**)(id *__return_ptr, unint64_t *, uint64_t))(*a1 + 40))(&v133, a1, 56);
      do
        v70 = (void *)__ldaxr((unint64_t *)&v133);
      while (__stlxr(0, (unint64_t *)&v133));

      if (v70)
      {
        v72 = (_QWORD *)a2->i64[1];
        v71 = a2[1].u64[0];
        if ((unint64_t)v72 >= v71)
        {
          v74 = ((uint64_t)v72 - a2->i64[0]) >> 3;
          if ((unint64_t)(v74 + 1) >> 61)
            goto LABEL_143;
          v75 = v71 - a2->i64[0];
          v76 = v75 >> 2;
          if (v75 >> 2 <= (unint64_t)(v74 + 1))
            v76 = v74 + 1;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v76;
          v136 = &a2[1].i64[1];
          if (v77)
            v78 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v77);
          else
            v78 = 0;
          v79 = &v78[8 * v74];
          v80 = &v78[8 * v77];
          v135 = v80;
          *(_QWORD *)v79 = CFSTR("NSCTFontTraitsAttribute");
          v73 = v79 + 8;
          v134.i64[1] = (uint64_t)(v79 + 8);
          v82 = a2->i64[0];
          v81 = a2->u64[1];
          if (v81 == a2->i64[0])
          {
            v84 = vdupq_n_s64(v81);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v81 - 8);
              v81 -= 8;
              *((_QWORD *)v79 - 1) = v83;
              v79 -= 8;
            }
            while (v81 != v82);
            v84 = *a2;
            v73 = (_QWORD *)v134.i64[1];
            v80 = v135;
          }
          a2->i64[0] = (uint64_t)v79;
          a2->i64[1] = (uint64_t)v73;
          v134 = v84;
          v85 = (char *)a2[1].i64[0];
          a2[1].i64[0] = (uint64_t)v80;
          v135 = v85;
          v133 = (id)v84.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
        }
        else
        {
          *v72 = CFSTR("NSCTFontTraitsAttribute");
          v73 = v72 + 1;
        }
        a2->i64[1] = (uint64_t)v73;
        v87 = (_QWORD *)a3->i64[1];
        v86 = a3[1].u64[0];
        if ((unint64_t)v87 >= v86)
        {
          v89 = ((uint64_t)v87 - a3->i64[0]) >> 3;
          if ((unint64_t)(v89 + 1) >> 61)
            goto LABEL_143;
          v90 = v86 - a3->i64[0];
          v91 = v90 >> 2;
          if (v90 >> 2 <= (unint64_t)(v89 + 1))
            v91 = v89 + 1;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v91;
          v136 = &a3[1].i64[1];
          if (v92)
            v93 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v92);
          else
            v93 = 0;
          v94 = &v93[8 * v89];
          v95 = &v93[8 * v92];
          v135 = v95;
          *(_QWORD *)v94 = v70;
          v88 = v94 + 8;
          v134.i64[1] = (uint64_t)(v94 + 8);
          v97 = a3->i64[0];
          v96 = a3->u64[1];
          if (v96 == a3->i64[0])
          {
            v99 = vdupq_n_s64(v96);
          }
          else
          {
            do
            {
              v98 = *(_QWORD *)(v96 - 8);
              v96 -= 8;
              *((_QWORD *)v94 - 1) = v98;
              v94 -= 8;
            }
            while (v96 != v97);
            v99 = *a3;
            v88 = (_QWORD *)v134.i64[1];
            v95 = v135;
          }
          a3->i64[0] = (uint64_t)v94;
          a3->i64[1] = (uint64_t)v88;
          v134 = v99;
          v100 = (char *)a3[1].i64[0];
          a3[1].i64[0] = (uint64_t)v95;
          v135 = v100;
          v133 = (id)v99.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
        }
        else
        {
          *v87 = v70;
          v88 = v87 + 1;
        }
        a3->i64[1] = (uint64_t)v88;
      }

    }
  }
  result = (const __CFDictionary *)atomic_load(a1 + 90);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ignoreLegibilityWeight"));
    if (result)
    {
      v103 = (_QWORD *)a2->i64[1];
      v102 = a2[1].u64[0];
      if ((unint64_t)v103 >= v102)
      {
        v105 = ((uint64_t)v103 - a2->i64[0]) >> 3;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_143;
        v106 = v102 - a2->i64[0];
        v107 = v106 >> 2;
        if (v106 >> 2 <= (unint64_t)(v105 + 1))
          v107 = v105 + 1;
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        v136 = &a2[1].i64[1];
        if (v108)
          v109 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v108);
        else
          v109 = 0;
        v110 = &v109[8 * v105];
        v111 = &v109[8 * v108];
        v135 = v111;
        *(_QWORD *)v110 = CFSTR("CTFontIgnoreLegibilityWeightAttribute");
        v104 = v110 + 8;
        v134.i64[1] = (uint64_t)(v110 + 8);
        v113 = a2->i64[0];
        v112 = a2->u64[1];
        if (v112 == a2->i64[0])
        {
          v115 = vdupq_n_s64(v112);
        }
        else
        {
          do
          {
            v114 = *(_QWORD *)(v112 - 8);
            v112 -= 8;
            *((_QWORD *)v110 - 1) = v114;
            v110 -= 8;
          }
          while (v112 != v113);
          v115 = *a2;
          v104 = (_QWORD *)v134.i64[1];
          v111 = v135;
        }
        a2->i64[0] = (uint64_t)v110;
        a2->i64[1] = (uint64_t)v104;
        v134 = v115;
        v116 = (char *)a2[1].i64[0];
        a2[1].i64[0] = (uint64_t)v111;
        v135 = v116;
        v133 = (id)v115.i64[0];
        result = (const __CFDictionary *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
      }
      else
      {
        *v103 = CFSTR("CTFontIgnoreLegibilityWeightAttribute");
        v104 = v103 + 1;
      }
      a2->i64[1] = (uint64_t)v104;
      v117 = *MEMORY[0x1E0C9AE50];
      v119 = (_QWORD *)a3->i64[1];
      v118 = a3[1].u64[0];
      if ((unint64_t)v119 < v118)
      {
        *v119 = v117;
        v120 = v119 + 1;
LABEL_141:
        a3->i64[1] = (uint64_t)v120;
        return result;
      }
      v121 = ((uint64_t)v119 - a3->i64[0]) >> 3;
      if (!((unint64_t)(v121 + 1) >> 61))
      {
        v122 = v118 - a3->i64[0];
        v123 = v122 >> 2;
        if (v122 >> 2 <= (unint64_t)(v121 + 1))
          v123 = v121 + 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
          v124 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        v136 = &a3[1].i64[1];
        if (v124)
          v125 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v124);
        else
          v125 = 0;
        v126 = &v125[8 * v121];
        v127 = &v125[8 * v124];
        v135 = v127;
        *(_QWORD *)v126 = v117;
        v120 = v126 + 8;
        v134.i64[1] = (uint64_t)(v126 + 8);
        v129 = a3->i64[0];
        v128 = a3->u64[1];
        if (v128 == a3->i64[0])
        {
          v131 = vdupq_n_s64(v128);
        }
        else
        {
          do
          {
            v130 = *(_QWORD *)(v128 - 8);
            v128 -= 8;
            *((_QWORD *)v126 - 1) = v130;
            v126 -= 8;
          }
          while (v128 != v129);
          v131 = *a3;
          v120 = (_QWORD *)v134.i64[1];
          v127 = v135;
        }
        a3->i64[0] = (uint64_t)v126;
        a3->i64[1] = (uint64_t)v120;
        v134 = v131;
        v132 = (char *)a3[1].i64[0];
        a3[1].i64[0] = (uint64_t)v127;
        v135 = v132;
        v133 = (id)v131.i64[0];
        result = (const __CFDictionary *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v133);
        goto LABEL_141;
      }
LABEL_143:
      abort();
    }
  }
  return result;
}

void TBaseFont::SetAttributeInternal<__CFDictionary const*>(unint64_t *a1, const void *a2, const void *a3)
{
  os_unfair_lock_s *v6;
  __CFDictionary *v7;
  __CFDictionary *v8;

  v6 = (os_unfair_lock_s *)(a1 + 14);
  os_unfair_lock_lock_with_options();
  v7 = (__CFDictionary *)atomic_load(a1 + 15);
  if (a2)
  {
    if (!v7)
      TBaseFont::InitAttributesDict((TBaseFont *)a1);
    v8 = (__CFDictionary *)atomic_load(a1 + 15);
    if (v8)
      CFDictionarySetValue(v8, a3, a2);
  }
  else if (v7)
  {
    CFDictionaryRemoveValue(v7, a3);
  }
  os_unfair_lock_unlock(v6);
}

BOOL TSplicedFont::Equal(TSplicedFont *this, const TBaseFont *a2)
{
  int v4;
  const void *v5;
  const void *v6;
  _BOOL8 result;

  if (this == a2)
    return 1;
  v4 = (*(uint64_t (**)(TSplicedFont *))(*(_QWORD *)this + 16))(this);
  result = 0;
  if (v4 == (*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2))
  {
    v5 = (const void *)atomic_load((unint64_t *)this + 75);
    v6 = (const void *)atomic_load((unint64_t *)a2 + 75);
    if (v5 == v6 || v5 && v6 && CFEqual(v5, v6))
      return 1;
  }
  return result;
}

uint64_t FontNameCodeForKey(const __CFString *key)
{
  unint64_t i;
  uint64_t IntValue;
  uint64_t result;
  void *value;

  for (i = 0; i != 160; i += 8)
  {
    if (FontNameCodeForKey(__CFString const*)::keys[i / 8] == key)
      return FontNameCodeForKey(__CFString const*)::values[i / 4];
  }
  value = (void *)0xFFFFFFFFLL;
  if (FontNameCodeForKey(__CFString const*)::once != -1)
    dispatch_once_f(&FontNameCodeForKey(__CFString const*)::once, 0, (dispatch_function_t)FontNameCodeForKey(__CFString const*)::$_0::__invoke);
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)FontNameCodeForKey(__CFString const*)::sCodeLookupDict, key, (const void **)&value))
  {
    return value;
  }
  IntValue = CFStringGetIntValue(key);
  result = 0xFFFFFFFFLL;
  if ((_DWORD)IntValue != 0x80000000 && (_DWORD)IntValue && (_DWORD)IntValue != 0x7FFFFFFF)
    return IntValue;
  return result;
}

void CopyFontNameInternal(CGFontRef font@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  CFStringRef v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v12;
  void *v13;
  BOOL v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  __CFString *v19;
  uint64_t v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  int v25;
  id v26;
  const __CFAllocator *v27;
  __CFString *v28;
  const __CFCharacterSet *v29;
  const __CFString *v30;
  const __CFString *v31;
  UTF32Char CharacterAtIndex;
  __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  unint64_t v36;
  void *v37;
  unint64_t v39;
  void *v40;
  id v41;
  id MutableCopy;
  CFRange v43;
  CFRange v44;

  if (!((unint64_t)font | a2) || a3 == -1)
  {
    *a4 = 0;
    return;
  }
  if (a3 < 0)
  {
    CopyStaticOTFeatureName(0, a3, a4);
    return;
  }
  *a4 = 0;
  if (a3 != 6)
  {
    if (a2 || CGFontNameTableCreate())
    {
      if (a3 == 1 || a3 == 2)
      {
        v9 = CGFontNameTableCopyRootName();
        do
          v10 = (void *)__ldaxr(a4);
        while (__stlxr(v9, a4));

      }
      if (!atomic_load(a4))
      {
        v12 = CGFontNameTableCopyRootName();
        do
          v13 = (void *)__ldaxr(a4);
        while (__stlxr(v12, a4));

      }
    }
    if (atomic_load(a4))
      v15 = 1;
    else
      v15 = a3 > 0x13;
    if (v15)
      goto LABEL_58;
    if (((0xB7FFFu >> a3) & 1) == 0)
      goto LABEL_58;
    if (!**((_QWORD **)&unk_1E15E2300 + a3))
      goto LABEL_58;
    v16 = CGFontCopyName();
    do
      v17 = (void *)__ldaxr(a4);
    while (__stlxr(v16, a4));

    v18 = atomic_load(a4);
    if (a3 != 2 || v18)
      goto LABEL_58;
    v41 = 0;
    v19 = (__CFString *)CGFontCopyFullName(font);
    v20 = CGFontCopyFamilyName();
    v21 = (__CFString *)v20;
    if (v19 && v20)
    {
      v22 = v19;
      v23 = v21;
      if (v22 == v23)
      {

        v26 = v22;
LABEL_50:

        goto LABEL_52;
      }
      v24 = v23;
      if (!v22 || !v23)
      {

LABEL_40:
        if (!CFStringHasPrefix(v19, v21))
        {
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v41, v19);
          goto LABEL_52;
        }
        v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v19);
        v43.length = CFStringGetLength(v21);
        v28 = (__CFString *)atomic_load((unint64_t *)&MutableCopy);
        v43.location = 0;
        CFStringDelete(v28, v43);
        v29 = CFCharacterSetCreateWithCharactersInString(v27, CFSTR(" -"));
        if (v29)
        {
          v30 = (const __CFString *)atomic_load((unint64_t *)&MutableCopy);
          if (CFStringGetLength(v30) >= 1)
          {
            do
            {
              v31 = (const __CFString *)atomic_load((unint64_t *)&MutableCopy);
              CharacterAtIndex = CFStringGetCharacterAtIndex(v31, 0);
              if (!CFCharacterSetIsLongCharacterMember(v29, CharacterAtIndex))
                break;
              v33 = (__CFString *)atomic_load((unint64_t *)&MutableCopy);
              v44.location = 0;
              v44.length = 1;
              CFStringDelete(v33, v44);
              v34 = (const __CFString *)atomic_load((unint64_t *)&MutableCopy);
            }
            while (CFStringGetLength(v34) > 0);
          }
        }
        v35 = (const __CFString *)atomic_load((unint64_t *)&MutableCopy);
        if (CFStringGetLength(v35) >= 1)
        {
          do
            v36 = __ldaxr((unint64_t *)&MutableCopy);
          while (__stlxr(0, (unint64_t *)&MutableCopy));
          do
            v37 = (void *)__ldaxr((unint64_t *)&v41);
          while (__stlxr(v36, (unint64_t *)&v41));

        }
        v26 = MutableCopy;
        goto LABEL_50;
      }
      v25 = CFEqual(v22, v23);

      if (!v25)
        goto LABEL_40;
    }
LABEL_52:
    if (!atomic_load((unint64_t *)&v41))
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v41, CFSTR("Regular"));

    do
      v39 = __ldaxr((unint64_t *)&v41);
    while (__stlxr(0, (unint64_t *)&v41));
    do
      v40 = (void *)__ldaxr(a4);
    while (__stlxr(v39, a4));

LABEL_58:
    CGFontNameTableRelease();
    return;
  }
  v7 = CGFontCopyPostScriptName(font);
  do
    v8 = (void *)__ldaxr(a4);
  while (__stlxr((unint64_t)v7, a4));

}

const __CFDictionary *TSplicedFont::AddDescriptorAttributes(unint64_t *a1, int64x2_t *a2, int64x2_t *a3)
{
  const __CFDictionary *v6;
  const void *Value;
  const void *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  void *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  char *v69;
  const __CFDictionary *v70;
  const void *v71;
  const void *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64x2_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64x2_t v101;
  char *v102;
  const __CFDictionary *result;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64x2_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64x2_t v133;
  char *v134;
  id v135;
  int64x2_t v136;
  char *v137;
  uint64_t *v138;

  if (((*(uint64_t (**)(unint64_t *))(*a1 + 840))(a1) & 1) == 0)
  {
    v6 = (const __CFDictionary *)atomic_load(a1 + 75);
    if (v6)
    {
      Value = CFDictionaryGetValue(v6, CFSTR("NSCTFontUIUsageAttribute"));
      if (Value)
      {
        v8 = Value;
        v10 = (_QWORD *)a2->i64[1];
        v9 = a2[1].u64[0];
        if ((unint64_t)v10 >= v9)
        {
          v12 = ((uint64_t)v10 - a2->i64[0]) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            goto LABEL_144;
          v13 = v9 - a2->i64[0];
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          v138 = &a2[1].i64[1];
          if (v15)
            v16 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v15);
          else
            v16 = 0;
          v17 = &v16[8 * v12];
          v18 = &v16[8 * v15];
          v137 = v18;
          *(_QWORD *)v17 = CFSTR("NSCTFontUIUsageAttribute");
          v11 = v17 + 8;
          v136.i64[1] = (uint64_t)(v17 + 8);
          v20 = a2->i64[0];
          v19 = a2->u64[1];
          if (v19 == a2->i64[0])
          {
            v22 = vdupq_n_s64(v19);
          }
          else
          {
            do
            {
              v21 = *(_QWORD *)(v19 - 8);
              v19 -= 8;
              *((_QWORD *)v17 - 1) = v21;
              v17 -= 8;
            }
            while (v19 != v20);
            v22 = *a2;
            v11 = (_QWORD *)v136.i64[1];
            v18 = v137;
          }
          a2->i64[0] = (uint64_t)v17;
          a2->i64[1] = (uint64_t)v11;
          v136 = v22;
          v23 = (char *)a2[1].i64[0];
          a2[1].i64[0] = (uint64_t)v18;
          v137 = v23;
          v135 = (id)v22.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
        }
        else
        {
          *v10 = CFSTR("NSCTFontUIUsageAttribute");
          v11 = v10 + 1;
        }
        a2->i64[1] = (uint64_t)v11;
        v25 = (_QWORD *)a3->i64[1];
        v24 = a3[1].u64[0];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((uint64_t)v25 - a3->i64[0]) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_144;
          v28 = v24 - a3->i64[0];
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v138 = &a3[1].i64[1];
          if (v30)
            v31 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v30);
          else
            v31 = 0;
          v32 = &v31[8 * v27];
          v33 = &v31[8 * v30];
          v137 = v33;
          *(_QWORD *)v32 = v8;
          v26 = v32 + 8;
          v136.i64[1] = (uint64_t)(v32 + 8);
          v35 = a3->i64[0];
          v34 = a3->u64[1];
          if (v34 == a3->i64[0])
          {
            v37 = vdupq_n_s64(v34);
          }
          else
          {
            do
            {
              v36 = *(_QWORD *)(v34 - 8);
              v34 -= 8;
              *((_QWORD *)v32 - 1) = v36;
              v32 -= 8;
            }
            while (v34 != v35);
            v37 = *a3;
            v26 = (_QWORD *)v136.i64[1];
            v33 = v137;
          }
          a3->i64[0] = (uint64_t)v32;
          a3->i64[1] = (uint64_t)v26;
          v136 = v37;
          v38 = (char *)a3[1].i64[0];
          a3[1].i64[0] = (uint64_t)v33;
          v137 = v38;
          v135 = (id)v37.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
        }
        else
        {
          *v25 = v8;
          v26 = v25 + 1;
        }
        a3->i64[1] = (uint64_t)v26;
        (*(void (**)(id *__return_ptr, unint64_t *, uint64_t))(*a1 + 40))(&v135, a1, 56);
        do
          v39 = (void *)__ldaxr((unint64_t *)&v135);
        while (__stlxr(0, (unint64_t *)&v135));

        if (v39)
        {
          v41 = (_QWORD *)a2->i64[1];
          v40 = a2[1].u64[0];
          if ((unint64_t)v41 >= v40)
          {
            v43 = ((uint64_t)v41 - a2->i64[0]) >> 3;
            if ((unint64_t)(v43 + 1) >> 61)
              goto LABEL_144;
            v44 = v40 - a2->i64[0];
            v45 = v44 >> 2;
            if (v44 >> 2 <= (unint64_t)(v43 + 1))
              v45 = v43 + 1;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            v138 = &a2[1].i64[1];
            if (v46)
              v47 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v46);
            else
              v47 = 0;
            v48 = &v47[8 * v43];
            v49 = &v47[8 * v46];
            v137 = v49;
            *(_QWORD *)v48 = CFSTR("NSCTFontTraitsAttribute");
            v42 = v48 + 8;
            v136.i64[1] = (uint64_t)(v48 + 8);
            v51 = a2->i64[0];
            v50 = a2->u64[1];
            if (v50 == a2->i64[0])
            {
              v53 = vdupq_n_s64(v50);
            }
            else
            {
              do
              {
                v52 = *(_QWORD *)(v50 - 8);
                v50 -= 8;
                *((_QWORD *)v48 - 1) = v52;
                v48 -= 8;
              }
              while (v50 != v51);
              v53 = *a2;
              v42 = (_QWORD *)v136.i64[1];
              v49 = v137;
            }
            a2->i64[0] = (uint64_t)v48;
            a2->i64[1] = (uint64_t)v42;
            v136 = v53;
            v54 = (char *)a2[1].i64[0];
            a2[1].i64[0] = (uint64_t)v49;
            v137 = v54;
            v135 = (id)v53.i64[0];
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
          }
          else
          {
            *v41 = CFSTR("NSCTFontTraitsAttribute");
            v42 = v41 + 1;
          }
          a2->i64[1] = (uint64_t)v42;
          v56 = (_QWORD *)a3->i64[1];
          v55 = a3[1].u64[0];
          if ((unint64_t)v56 >= v55)
          {
            v58 = ((uint64_t)v56 - a3->i64[0]) >> 3;
            if ((unint64_t)(v58 + 1) >> 61)
              goto LABEL_144;
            v59 = v55 - a3->i64[0];
            v60 = v59 >> 2;
            if (v59 >> 2 <= (unint64_t)(v58 + 1))
              v60 = v58 + 1;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            v138 = &a3[1].i64[1];
            if (v61)
              v62 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v61);
            else
              v62 = 0;
            v63 = &v62[8 * v58];
            v64 = &v62[8 * v61];
            v137 = v64;
            *(_QWORD *)v63 = v39;
            v57 = v63 + 8;
            v136.i64[1] = (uint64_t)(v63 + 8);
            v66 = a3->i64[0];
            v65 = a3->u64[1];
            if (v65 == a3->i64[0])
            {
              v68 = vdupq_n_s64(v65);
            }
            else
            {
              do
              {
                v67 = *(_QWORD *)(v65 - 8);
                v65 -= 8;
                *((_QWORD *)v63 - 1) = v67;
                v63 -= 8;
              }
              while (v65 != v66);
              v68 = *a3;
              v57 = (_QWORD *)v136.i64[1];
              v64 = v137;
            }
            a3->i64[0] = (uint64_t)v63;
            a3->i64[1] = (uint64_t)v57;
            v136 = v68;
            v69 = (char *)a3[1].i64[0];
            a3[1].i64[0] = (uint64_t)v64;
            v137 = v69;
            v135 = (id)v68.i64[0];
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
          }
          else
          {
            *v56 = v39;
            v57 = v56 + 1;
          }
          a3->i64[1] = (uint64_t)v57;
        }

      }
    }
    v70 = (const __CFDictionary *)atomic_load(a1 + 75);
    if (v70)
    {
      v71 = CFDictionaryGetValue(v70, CFSTR("language"));
      if (v71)
      {
        v72 = v71;
        v74 = (_QWORD *)a2->i64[1];
        v73 = a2[1].u64[0];
        if ((unint64_t)v74 >= v73)
        {
          v76 = ((uint64_t)v74 - a2->i64[0]) >> 3;
          if ((unint64_t)(v76 + 1) >> 61)
            goto LABEL_144;
          v77 = v73 - a2->i64[0];
          v78 = v77 >> 2;
          if (v77 >> 2 <= (unint64_t)(v76 + 1))
            v78 = v76 + 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v79 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          v138 = &a2[1].i64[1];
          if (v79)
            v80 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v79);
          else
            v80 = 0;
          v81 = &v80[8 * v76];
          v82 = &v80[8 * v79];
          v137 = v82;
          *(_QWORD *)v81 = CFSTR("CTFontDescriptorLanguageAttribute");
          v75 = v81 + 8;
          v136.i64[1] = (uint64_t)(v81 + 8);
          v84 = a2->i64[0];
          v83 = a2->u64[1];
          if (v83 == a2->i64[0])
          {
            v86 = vdupq_n_s64(v83);
          }
          else
          {
            do
            {
              v85 = *(_QWORD *)(v83 - 8);
              v83 -= 8;
              *((_QWORD *)v81 - 1) = v85;
              v81 -= 8;
            }
            while (v83 != v84);
            v86 = *a2;
            v75 = (_QWORD *)v136.i64[1];
            v82 = v137;
          }
          a2->i64[0] = (uint64_t)v81;
          a2->i64[1] = (uint64_t)v75;
          v136 = v86;
          v87 = (char *)a2[1].i64[0];
          a2[1].i64[0] = (uint64_t)v82;
          v137 = v87;
          v135 = (id)v86.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
        }
        else
        {
          *v74 = CFSTR("CTFontDescriptorLanguageAttribute");
          v75 = v74 + 1;
        }
        a2->i64[1] = (uint64_t)v75;
        v89 = (_QWORD *)a3->i64[1];
        v88 = a3[1].u64[0];
        if ((unint64_t)v89 >= v88)
        {
          v91 = ((uint64_t)v89 - a3->i64[0]) >> 3;
          if ((unint64_t)(v91 + 1) >> 61)
            goto LABEL_144;
          v92 = v88 - a3->i64[0];
          v93 = v92 >> 2;
          if (v92 >> 2 <= (unint64_t)(v91 + 1))
            v93 = v91 + 1;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
            v94 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v94 = v93;
          v138 = &a3[1].i64[1];
          if (v94)
            v95 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v94);
          else
            v95 = 0;
          v96 = &v95[8 * v91];
          v97 = &v95[8 * v94];
          v137 = v97;
          *(_QWORD *)v96 = v72;
          v90 = v96 + 8;
          v136.i64[1] = (uint64_t)(v96 + 8);
          v99 = a3->i64[0];
          v98 = a3->u64[1];
          if (v98 == a3->i64[0])
          {
            v101 = vdupq_n_s64(v98);
          }
          else
          {
            do
            {
              v100 = *(_QWORD *)(v98 - 8);
              v98 -= 8;
              *((_QWORD *)v96 - 1) = v100;
              v96 -= 8;
            }
            while (v98 != v99);
            v101 = *a3;
            v90 = (_QWORD *)v136.i64[1];
            v97 = v137;
          }
          a3->i64[0] = (uint64_t)v96;
          a3->i64[1] = (uint64_t)v90;
          v136 = v101;
          v102 = (char *)a3[1].i64[0];
          a3[1].i64[0] = (uint64_t)v97;
          v137 = v102;
          v135 = (id)v101.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
        }
        else
        {
          *v89 = v72;
          v90 = v89 + 1;
        }
        a3->i64[1] = (uint64_t)v90;
      }
    }
  }
  result = (const __CFDictionary *)atomic_load(a1 + 75);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ignoreLegibilityWeight"));
    if (result)
    {
      v105 = (_QWORD *)a2->i64[1];
      v104 = a2[1].u64[0];
      if ((unint64_t)v105 >= v104)
      {
        v107 = ((uint64_t)v105 - a2->i64[0]) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_144;
        v108 = v104 - a2->i64[0];
        v109 = v108 >> 2;
        if (v108 >> 2 <= (unint64_t)(v107 + 1))
          v109 = v107 + 1;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        v138 = &a2[1].i64[1];
        if (v110)
          v111 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v110);
        else
          v111 = 0;
        v112 = &v111[8 * v107];
        v113 = &v111[8 * v110];
        v137 = v113;
        *(_QWORD *)v112 = CFSTR("CTFontIgnoreLegibilityWeightAttribute");
        v106 = v112 + 8;
        v136.i64[1] = (uint64_t)(v112 + 8);
        v115 = a2->i64[0];
        v114 = a2->u64[1];
        if (v114 == a2->i64[0])
        {
          v117 = vdupq_n_s64(v114);
        }
        else
        {
          do
          {
            v116 = *(_QWORD *)(v114 - 8);
            v114 -= 8;
            *((_QWORD *)v112 - 1) = v116;
            v112 -= 8;
          }
          while (v114 != v115);
          v117 = *a2;
          v106 = (_QWORD *)v136.i64[1];
          v113 = v137;
        }
        a2->i64[0] = (uint64_t)v112;
        a2->i64[1] = (uint64_t)v106;
        v136 = v117;
        v118 = (char *)a2[1].i64[0];
        a2[1].i64[0] = (uint64_t)v113;
        v137 = v118;
        v135 = (id)v117.i64[0];
        result = (const __CFDictionary *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
      }
      else
      {
        *v105 = CFSTR("CTFontIgnoreLegibilityWeightAttribute");
        v106 = v105 + 1;
      }
      a2->i64[1] = (uint64_t)v106;
      v119 = *MEMORY[0x1E0C9AE50];
      v121 = (_QWORD *)a3->i64[1];
      v120 = a3[1].u64[0];
      if ((unint64_t)v121 < v120)
      {
        *v121 = v119;
        v122 = v121 + 1;
LABEL_142:
        a3->i64[1] = (uint64_t)v122;
        return result;
      }
      v123 = ((uint64_t)v121 - a3->i64[0]) >> 3;
      if (!((unint64_t)(v123 + 1) >> 61))
      {
        v124 = v120 - a3->i64[0];
        v125 = v124 >> 2;
        if (v124 >> 2 <= (unint64_t)(v123 + 1))
          v125 = v123 + 1;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        v138 = &a3[1].i64[1];
        if (v126)
          v127 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a3[1].i64[1], v126);
        else
          v127 = 0;
        v128 = &v127[8 * v123];
        v129 = &v127[8 * v126];
        v137 = v129;
        *(_QWORD *)v128 = v119;
        v122 = v128 + 8;
        v136.i64[1] = (uint64_t)(v128 + 8);
        v131 = a3->i64[0];
        v130 = a3->u64[1];
        if (v130 == a3->i64[0])
        {
          v133 = vdupq_n_s64(v130);
        }
        else
        {
          do
          {
            v132 = *(_QWORD *)(v130 - 8);
            v130 -= 8;
            *((_QWORD *)v128 - 1) = v132;
            v128 -= 8;
          }
          while (v130 != v131);
          v133 = *a3;
          v122 = (_QWORD *)v136.i64[1];
          v129 = v137;
        }
        a3->i64[0] = (uint64_t)v128;
        a3->i64[1] = (uint64_t)v122;
        v136 = v133;
        v134 = (char *)a3[1].i64[0];
        a3[1].i64[0] = (uint64_t)v129;
        v137 = v134;
        v135 = (id)v133.i64[0];
        result = (const __CFDictionary *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v135);
        goto LABEL_142;
      }
LABEL_144:
      abort();
    }
  }
  return result;
}

void TInstanceFont::AddDescriptorAttributes(unint64_t *a1, int64x2_t *a2, unint64_t **a3)
{
  void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFIndex Count;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  char *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int64x2_t v39;
  unint64_t *v40;
  uint64_t v41;
  int64x2_t v42;
  char *v43;
  uint64_t *v44;

  if (((*(uint64_t (**)(unint64_t *))(*a1 + 456))(a1) & 1) == 0)
  {
    v6 = (void *)atomic_load(a1 + 75);
    v7 = v6;
    if (!v7)
    {

      return;
    }
    v8 = v7;
    Count = CFDictionaryGetCount(v7);

    if (Count)
    {
      v11 = (_QWORD *)a2->i64[1];
      v10 = a2[1].u64[0];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((uint64_t)v11 - a2->i64[0]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          goto LABEL_39;
        v14 = v10 - a2->i64[0];
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v44 = &a2[1].i64[1];
        if (v16)
          v17 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&a2[1].i64[1], v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        v43 = v19;
        *(_QWORD *)v18 = CFSTR("NSCTFontVariationAttribute");
        v12 = v18 + 8;
        v42.i64[1] = (uint64_t)(v18 + 8);
        v21 = a2->i64[0];
        v20 = a2->u64[1];
        if (v20 == a2->i64[0])
        {
          v23 = vdupq_n_s64(v20);
        }
        else
        {
          do
          {
            v22 = *(_QWORD *)(v20 - 8);
            v20 -= 8;
            *((_QWORD *)v18 - 1) = v22;
            v18 -= 8;
          }
          while (v20 != v21);
          v23 = *a2;
          v12 = (_QWORD *)v42.i64[1];
          v19 = v43;
        }
        a2->i64[0] = (uint64_t)v18;
        a2->i64[1] = (uint64_t)v12;
        v42 = v23;
        v24 = (char *)a2[1].i64[0];
        a2[1].i64[0] = (uint64_t)v19;
        v43 = v24;
        v41 = v23.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v41);
      }
      else
      {
        *v11 = CFSTR("NSCTFontVariationAttribute");
        v12 = v11 + 1;
      }
      a2->i64[1] = (uint64_t)v12;
      v25 = atomic_load(a1 + 75);
      v27 = a3[1];
      v26 = (unint64_t)a3[2];
      if ((unint64_t)v27 < v26)
      {
        *v27 = v25;
        v28 = v27 + 1;
LABEL_37:
        a3[1] = v28;
        return;
      }
      v29 = v27 - *a3;
      if (!((unint64_t)(v29 + 1) >> 61))
      {
        v30 = v26 - (_QWORD)*a3;
        v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v29 + 1))
          v31 = v29 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        v44 = (uint64_t *)(a3 + 3);
        if (v32)
          v33 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(a3 + 3), v32);
        else
          v33 = 0;
        v34 = (unint64_t *)&v33[8 * v29];
        v35 = &v33[8 * v32];
        v43 = v35;
        *v34 = v25;
        v28 = v34 + 1;
        v42.i64[1] = (uint64_t)(v34 + 1);
        v37 = *a3;
        v36 = (unint64_t)a3[1];
        if ((unint64_t *)v36 == *a3)
        {
          v39 = vdupq_n_s64(v36);
        }
        else
        {
          do
          {
            v38 = *(_QWORD *)(v36 - 8);
            v36 -= 8;
            *--v34 = v38;
          }
          while ((unint64_t *)v36 != v37);
          v39 = *(int64x2_t *)a3;
          v28 = (unint64_t *)v42.i64[1];
          v35 = v43;
        }
        *a3 = v34;
        a3[1] = v28;
        v42 = v39;
        v40 = a3[2];
        a3[2] = (unint64_t *)v35;
        v43 = (char *)v40;
        v41 = v39.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v41);
        goto LABEL_37;
      }
LABEL_39:
      abort();
    }
  }
}

unint64_t TLine::GetRunCFArray(const void ***this)
{
  unint64_t *v1;
  unint64_t v3;
  int v5;
  void *v6;
  id v8;

  v1 = (unint64_t *)(this + 20);
  if (!atomic_load((unint64_t *)this + 20))
  {
    v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], this[2], this[3] - this[2], MEMORY[0x1E0C9B378]);
    do
      v3 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));

    while (!__ldaxr(v1))
    {
      if (!__stlxr(v3, v1))
      {
        v5 = 1;
        goto LABEL_9;
      }
    }
    v5 = 0;
    __clrex();
LABEL_9:
    if (v5)
      v6 = 0;
    else
      v6 = (void *)v3;

  }
  return atomic_load(v1);
}

double TStorageRange::GetWidth(TStorageRange *this, CFRange a2)
{
  uint64_t v2;
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double __C;

  __C = NAN;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 || (v5 = *(_QWORD *)(v2 + 24)) == 0)
  {
    v4 = (const double *)(v3 + 16 * *((_QWORD *)this + 1) + 16 * a2.location);
    a2.location = 2;
  }
  else
  {
    v4 = (const double *)(v5 + 8 * *((_QWORD *)this + 1) + 8 * a2.location);
    a2.location = 1;
  }
  vDSP_sveD(v4, a2.location, &__C, a2.length);
  return __C;
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  CGFont *v2;
  id v4;

  if (!font)
    return 0;
  if (attributes)
    *attributes = 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 496))(&v4);
  do
    v2 = (CGFont *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

id TInstanceFont::CopyGraphicsFont@<X0>(TInstanceFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 79);
  result = v3;
  *a2 = result;
  return result;
}

uint64_t TSplicedFont::CopyGraphicsFont(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 496))(v2);
}

double CTSwapLineBreakEpsilon(double a1)
{
  double v1;
  double *v3;
  _QWORD *Table;
  _QWORD *v5;
  double *v6;

  v1 = 0.0002;
  if (a1 == 0.0002)
  {
    v3 = 0;
  }
  else
  {
    v3 = (double *)operator new();
    *v3 = a1;
  }
  Table = GetTable();
  if (Table)
  {
    v5 = Table;
    v6 = (double *)Table[8];
    v5[8] = v3;
    v5[9] = PointerToEpsilonDestructor;
    if (v6)
    {
      v1 = *v6;
      MEMORY[0x186DC03AC]();
    }
  }
  return v1;
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  const CGPath *v3;
  id v5;

  if (!font)
    return 0;
  TFont::CreatePathForGlyph(*((TFont **)font + 5), matrix, glyph, (unint64_t *)&v5);
  do
    v3 = (const CGPath *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));

  return v3;
}

void TFont::CreatePathForGlyph(TFont *this@<X0>, const CGAffineTransform *a2@<X2>, unsigned int a3@<W1>, unint64_t *a4@<X8>)
{
  unint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  id v15;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(&v15, *((_QWORD *)this + 50), 1935829368);
  v8 = atomic_load((unint64_t *)&v15);
  if (v8 && (v9 = (void *)atomic_load((unint64_t *)&v15), TFont::HasColorBitmapForGlyph(this, a3, v9)))
  {
    *a4 = 0;
  }
  else
  {
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    *(_OWORD *)&v14.c = v10;
    *(_OWORD *)&v14.tx = v10;
    *(_OWORD *)&v14.a = v10;
    TFont::GetScaledMatrix(this, &v14);
    if (a2)
    {
      t1 = v14;
      v11 = *(_OWORD *)&a2->c;
      *(_OWORD *)&t2.a = *(_OWORD *)&a2->a;
      *(_OWORD *)&t2.c = v11;
      *(_OWORD *)&t2.tx = *(_OWORD *)&a2->tx;
      CGAffineTransformConcat(&v13, &t1, &t2);
      v14 = v13;
    }
    t1.a = -3.72066208e-103;
    (*(void (**)(CGAffineTransform *__return_ptr))(**((_QWORD **)this + 50) + 496))(&t1);
    atomic_load((unint64_t *)&t1);
    *(_QWORD *)&t2.a = CGFontCreateGlyphPath();
    do
      v12 = __ldaxr((unint64_t *)&t2);
    while (__stlxr(0, (unint64_t *)&t2));
    *a4 = v12;

  }
}

double TStorageRange::GetImageBounds(TStorageRange *this, const TFont *a2, CGContext *a3, CFRange a4, const CGPoint *a5, const CGSize *a6)
{
  const CGSize *v6;
  const CGPoint *v7;
  CFIndex length;
  CFIndex location;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const unsigned __int16 *v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  CGFloat *p_y;
  double *p_height;
  double v23;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect **v29;
  CGRect *v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[960];
  _BYTE *v34;
  uint64_t v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return *MEMORY[0x1E0C9D628];
  v6 = a6;
  if (!a6)
    return *MEMORY[0x1E0C9D628];
  v7 = a5;
  length = a4.length;
  location = a4.location;
  memset(v33, 170, sizeof(v33));
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v34 = v33;
  if (length
    && (std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100]((char **)&v30, length),
        v12 = (char *)v31,
        bzero(v31, 32 * length),
        v31 = &v12[32 * length],
        v30))
  {
    v13 = *((_QWORD *)this + 3);
    v14 = *((_QWORD *)this + 1);
    v15 = (const unsigned __int16 *)(*(_QWORD *)(v13 + 16) + 2 * v14 + 2 * location);
    if (length >= 1 && *(__int16 *)v15 == -1 && !*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v14 + 8 * location))
    {
      ++v15;
      ++v6;
      ++v7;
      --length;
    }
    TFont::GetBoundingBoxesForGlyphs(a2, v15, v30, length, kCTFontOrientationDefault);
    v16 = *MEMORY[0x1E0C9D648];
    v17 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v18 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v19 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    if (length >= 1)
    {
      v20 = 0;
      p_y = &v7->y;
      p_height = &v6->height;
      do
      {
        v23 = *(p_height - 1);
        v36.origin.x = v23 * v30[v20].origin.x;
        v36.origin.y = *p_height * v30[v20].origin.y;
        v36.size.width = v23 * v30[v20].size.width;
        v36.size.height = *p_height * v30[v20].size.height;
        v37 = CGRectOffset(v36, *(p_y - 1), *p_y);
        x = v37.origin.x;
        y = v37.origin.y;
        width = v37.size.width;
        height = v37.size.height;
        v37.origin.x = v16;
        v37.origin.y = v17;
        v37.size.width = v18;
        v37.size.height = v19;
        if (CGRectIsEmpty(v37))
        {
          v16 = x;
          v17 = y;
          v18 = width;
          v19 = height;
        }
        else
        {
          v38.origin.x = x;
          v38.origin.y = y;
          v38.size.width = width;
          v38.size.height = height;
          if (!CGRectIsEmpty(v38))
          {
            v39.origin.x = v16;
            v39.origin.y = v17;
            v39.size.width = v18;
            v39.size.height = v19;
            v41.origin.x = x;
            v41.origin.y = y;
            v41.size.width = width;
            v41.size.height = height;
            v40 = CGRectUnion(v39, v41);
            v16 = v40.origin.x;
            v17 = v40.origin.y;
            v18 = v40.size.width;
            v19 = v40.size.height;
          }
        }
        p_y += 2;
        ++v20;
        p_height += 2;
        --length;
      }
      while (length);
    }
  }
  else
  {
    v16 = *MEMORY[0x1E0C9D628];
  }
  v29 = &v30;
  std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
  return v16;
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  double BoundingBoxesForGlyphs;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char **v21;
  char *v22[3];
  _BYTE v23[960];
  _BYTE *v24;
  uint64_t v25;
  CGRect result;

  v25 = *MEMORY[0x1E0C80C00];
  if (font && glyphs)
  {
    memset(v23, 170, sizeof(v23));
    memset(v22, 0, sizeof(v22));
    v24 = v23;
    if (!boundingRects)
    {
      std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::resize(v22, count);
      boundingRects = (CGRect *)v22[0];
    }
    BoundingBoxesForGlyphs = TFont::GetBoundingBoxesForGlyphs(*((TFont **)font + 5), glyphs, boundingRects, count, orientation);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v21 = v22;
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v21);
  }
  else
  {
    BoundingBoxesForGlyphs = *MEMORY[0x1E0C9D628];
    v12 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v14 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  v17 = BoundingBoxesForGlyphs;
  v18 = v12;
  v19 = v14;
  v20 = v16;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

BOOL TBaseFont::IsUserInstalled(TBaseFont *this)
{
  const __CFURL *v1;
  CFURLRef v2;
  void *v3;
  _BOOL8 v4;
  id v6;
  id v7;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v6);
  v1 = (const __CFURL *)atomic_load((unint64_t *)&v6);
  if (v1)
  {
    v7 = 0;
    if (CFURLGetBaseURL(v1))
    {
      v2 = CFURLCopyAbsoluteURL(v1);
      do
        v3 = (void *)__ldaxr((unint64_t *)&v7);
      while (__stlxr((unint64_t)v2, (unint64_t *)&v7));

      v1 = (const __CFURL *)atomic_load((unint64_t *)&v7);
    }
    v1 = (const __CFURL *)CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);

  }
  v4 = !IsSystemFontPath((CFStringRef)v1);

  return v4;
}

void TDescriptorSource::AddCachedDescriptor(TDescriptorSource *this, const __CFString *a2, uint64_t a3, const __CTFontDescriptor *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  if (a3)
  {
    v12 = 0;
    v6 = *(_QWORD *)(a3 + 40);
    if ((*(_DWORD *)(v6 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(a3 + 40), 0, 0.0);
    v7 = atomic_load((unint64_t *)(v6 + 32));
    if (v7)
    {
      (*(void (**)(id *__return_ptr))(*(_QWORD *)v7 + 200))(&v11);
      do
        v8 = __ldaxr((unint64_t *)&v11);
      while (__stlxr(0, (unint64_t *)&v11));
      do
        v9 = (void *)__ldaxr((unint64_t *)&v12);
      while (__stlxr(v8, (unint64_t *)&v12));

    }
    TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(&v11);
    v10 = (void *)atomic_load((unint64_t *)&v12);
    TRequestCache::AddResultForRequest((TRequestCache *)&v11, v10, this, (uint64_t)a2, 0);

  }
  else
  {
    TDescriptorSource::AddMissedRequest(this, a2, 0, (CFComparisonResult (*)(const void *, const void *, void *))a4);
  }
}

id TBaseFont::CopyFontURL@<X0>(TBaseFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 10);
  result = v3;
  *a2 = result;
  return result;
}

void TDescriptorSource::CopyFontDescriptorPerPostScriptName(TPurgeableCache **a1@<X0>, const __CFString *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, __CFString *a5@<X4>, const __CFNumber *a6@<X5>, const __CFNumber *a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, const void *a10)
{
  unint64_t v15;
  __CFString *v16;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  TPurgeableCache **v26;
  __CFString *v27;
  unint64_t *v28;
  const __CFString *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  void *v34;
  CFComparisonResult (*v35)(const void *, const void *, void *);
  _QWORD *v36;
  const void *v38;
  CFTypeID v39;
  const __CFURL *v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  void *v44;
  const __CFURL *v45;
  CGFont *v46;
  __CFString *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  const __CTFontDescriptor *v51;
  CGFont *v52;
  const __CFString *v53;
  __CFString *v54;
  unint64_t v55;
  void *v56;
  unint64_t v58;
  void *v59;
  const __CFArray *v60;
  const __CFArray *v61;
  CFIndex Count;
  const __CFArray *v63;
  unint64_t v64;
  void *v65;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  void *v70;
  const __CTFontDescriptor *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const __CFString *v75;
  unint64_t v77;
  __CFString *v78;
  const __CFArray *v79;
  const __CFURL *ValueAtIndex;
  unint64_t v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  id v87;
  id v88;
  id v89;
  id v90;
  TTraitsValues v91;
  id v92[2];

  v15 = a3;
  v16 = (__CFString *)a2;
  v90 = 0;
  v18 = a4 & 4;
  if (!(a4 & 8 | a3 & 0x10400) && TDescriptorSource::ShouldSubstituteInvisibleFontName(a2, a2))
  {
    CTFontLogSystemFontNameRequest();
    v16 = CFSTR("TimesNewRomanPSMT");
  }
  v89 = 0;
  if (v18 | v15 & 0x400)
  {
    if ((v15 & 0x20) != 0)
    {
LABEL_14:
      v85 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    CopyNormalizedSystemFontPostScriptName(v16, &v91);
    do
      v19 = __ldaxr((unint64_t *)&v91.var0);
    while (__stlxr(0, (unint64_t *)&v91.var0));
    do
      v20 = (void *)__ldaxr((unint64_t *)&v89);
    while (__stlxr(v19, (unint64_t *)&v89));

    v16 = (__CFString *)atomic_load((unint64_t *)&v89);
    if ((v15 & 0x20) != 0)
      goto LABEL_14;
  }
  if (dispatch_get_specific((const void *)TDescriptorSource::DoNotCacheKey))
  {
    v85 = 0;
    v15 |= 0x20uLL;
    goto LABEL_15;
  }
  if (a5)
    goto LABEL_14;
  do
    v34 = (void *)__ldaxr((unint64_t *)&v90);
  while (__stlxr(0, (unint64_t *)&v90));

  if (!TDescriptorSource::HasMissedRequest((TDescriptorSource *)v16, (void *)v15, 0, v35))
  {
    *(_QWORD *)&v91.var0 = 0;
    v36 = TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(v92);
    if (!TRequestCache::CopyResultForRequest(v36, v16, v15, (unint64_t *)&v91.var0, 0))
    {

      v85 = 1;
LABEL_15:
      if (v15 & 0x10 | v18)
      {
        v21 = (v15 >> 4) & 1;
      }
      else
      {
        if ((a4 & 2) != 0)
          goto LABEL_22;
        if (v16 == CFSTR("."))
          goto LABEL_21;
        if (!v16)
          goto LABEL_33;
        if (CFStringHasPrefix(v16, CFSTR(".")))
LABEL_21:
          LOBYTE(v21) = IsSystemFontPostScriptName(v16);
        else
LABEL_22:
          LOBYTE(v21) = 1;
      }
      if (v16 != CFSTR("LastResort")
        && v16
        && !CFEqual(v16, CFSTR("LastResort"))
        && CFStringCompare(v16, CFSTR("LastResort"), 1uLL) == kCFCompareEqualTo)
      {
        TDescriptorSource::CopyLastResort(a9);
        goto LABEL_111;
      }
      if ((v21 & 1) == 0)
      {
        TDescriptorSource::CopySplicedDescriptorForName(v16, a5, a6, a7, a8, a10, (unint64_t *)&v91.var0, 0, 0, 0, 0, 0, 0, 0, 0);
        do
          v22 = __ldaxr((unint64_t *)&v91.var0);
        while (__stlxr(0, (unint64_t *)&v91.var0));
        do
          v23 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v22, (unint64_t *)&v90));

        if (atomic_load((unint64_t *)&v90))
        {
          TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v90, v15, 0, a9);
          goto LABEL_111;
        }
      }
LABEL_33:
      v92[0] = (id)0xAAAAAAAAAAAAAAAALL;
      v92[0] = (id)GSFontCopyFontFilePath();
      if (atomic_load((unint64_t *)v92))
      {
        v26 = a1;
        if (qword_1ECDE7788 != -1)
          dispatch_once(&qword_1ECDE7788, &__block_literal_global_445);
        v27 = v16;
        v28 = a9;
        if (_MergedGlobals_16 == 1)
        {
          v29 = (const __CFString *)atomic_load((unint64_t *)v92);
          v27 = v16;
          if (CFStringHasSuffix(v29, CFSTR("PingFangUI.ttc")))
          {
            if (qword_1ECDE7758 != -1)
              dispatch_once(&qword_1ECDE7758, &__block_literal_global_0);
            v27 = v16;
            if (qword_1ECDE7750)
            {
              v30 = 0;
              while (!CFEqual(sPingFangFacesMap[v30], v16))
              {
                v30 += 2;
                if (v30 == 36)
                {
                  v27 = v16;
                  goto LABEL_65;
                }
              }
              v27 = sPingFangFacesMap[v30 + 1];
              TCFRef<__CTFont const*>::Retain((unint64_t *)v92, (id)qword_1ECDE7750);
            }
          }
        }
LABEL_65:
        atomic_load((unint64_t *)v92);
        v45 = (const __CFURL *)CGFontURLCreate();
        if (v45)
        {
          v46 = v45;
          v47 = (__CFString *)atomic_load((unint64_t *)v92);
          TDescriptorSource::CopyDescriptor(v26, v45, v47, v27, (unint64_t *)&v91.var0);
          do
            v48 = __ldaxr((unint64_t *)&v91.var0);
          while (__stlxr(0, (unint64_t *)&v91.var0));
          do
            v49 = (void *)__ldaxr((unint64_t *)&v90);
          while (__stlxr(v48, (unint64_t *)&v90));

          v50 = atomic_load((unint64_t *)&v90);
          TDescriptorSource::AddCachedDescriptor((TDescriptorSource *)v16, (const __CFString *)v15, v50, v51);
          TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v90, v15, 0, a9);
          goto LABEL_110;
        }

      }
      else
      {
        v26 = a1;
        if (v18)
        {
          v28 = a9;
        }
        else
        {
          v31 = GSFontCopyNormalizedAdditionalFontName();
          do
            v32 = (void *)__ldaxr((unint64_t *)&v89);
          while (__stlxr(v31, (unint64_t *)&v89));

          v33 = atomic_load((unint64_t *)&v89);
          v28 = a9;
          if (v33)
            v16 = (__CFString *)atomic_load((unint64_t *)&v89);
        }
      }
      v52 = CGFontCreateWithFontName(v16);
      v46 = v52;
      if (v52)
      {
        if ((a4 & 1) != 0)
        {
          v53 = CGFontCopyPostScriptName(v52);
          v54 = (__CFString *)v53;
          if (!v53 || CFStringCompare(v53, v16, 0) && ((v15 & 0x200) != 0 || !IsPostScriptNameAlias(v16, v54)))
          {
            *v28 = 0;
            v78 = v54;
            goto LABEL_109;
          }

        }
        TDescriptorSource::CopyDescriptor(v26, v46, 0, (unint64_t *)&v91.var0);
        do
          v55 = __ldaxr((unint64_t *)&v91.var0);
        while (__stlxr(0, (unint64_t *)&v91.var0));
        do
          v56 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v55, (unint64_t *)&v90));

      }
      if (atomic_load((unint64_t *)&v90))
        goto LABEL_83;
      *(_QWORD *)&v91.var0 = 0xAAAAAAAAAAAAAAAALL;
      CopyLowercasedString(v16, (unint64_t *)&v91.var0);
      v88 = (id)0xAAAAAAAAAAAAAAAALL;
      v75 = (const __CFString *)atomic_load((unint64_t *)&v91.var0);
      CopyPostScriptNameForAliasLowercased(v75, (unint64_t *)&v88);
      if (!atomic_load((unint64_t *)&v88))
      {

LABEL_83:
        v58 = atomic_load((unint64_t *)&v90);
        if (v58 | a4 & 0x11)
        {
LABEL_92:
          if (!atomic_load((unint64_t *)&v90))
          {
            TDescriptorSource::CopyFontDescriptorFromVariationPostScriptName((TDescriptorSource *)v26, v16, v15, a4, (unint64_t *)&v91.var0);
            do
              v67 = __ldaxr((unint64_t *)&v91.var0);
            while (__stlxr(0, (unint64_t *)&v91.var0));
            do
              v68 = (void *)__ldaxr((unint64_t *)&v90);
            while (__stlxr(v67, (unint64_t *)&v90));

          }
          TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v90, v15, 0, (unint64_t *)&v91.var0);
          do
            v69 = __ldaxr((unint64_t *)&v91.var0);
          while (__stlxr(0, (unint64_t *)&v91.var0));
          do
            v70 = (void *)__ldaxr((unint64_t *)&v90);
          while (__stlxr(v69, (unint64_t *)&v90));

          if (v85)
          {
            v72 = atomic_load((unint64_t *)&v90);
            if (!a4 || v72)
            {
              v73 = atomic_load((unint64_t *)&v90);
              TDescriptorSource::AddCachedDescriptor((TDescriptorSource *)v16, (const __CFString *)v15, v73, v71);
            }
          }
          do
            v74 = __ldaxr((unint64_t *)&v90);
          while (__stlxr(0, (unint64_t *)&v90));
          *v28 = v74;
          goto LABEL_110;
        }
        v88 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopyDescriptorsForRequestWithFamilyName((TDescriptorSource *)&v88, (const __CFString *)v26, v16, v15);
        v59 = (void *)atomic_load((unint64_t *)&v88);
        v60 = v59;
        if (v60)
        {
          v61 = v60;
          Count = CFArrayGetCount(v60);

          if (!Count)
          {
LABEL_91:

            goto LABEL_92;
          }
          v63 = (const __CFArray *)atomic_load((unint64_t *)&v88);
          memset(&v91.var1, 0, 24);
          *(_QWORD *)&v91.var0 = 0xAAAAAAAA00000000;
          TBaseFont::CreateVariantWithTraitsMatchingDescriptors(&v91, v63, (unint64_t *)&v87);
          do
            v64 = __ldaxr((unint64_t *)&v87);
          while (__stlxr(0, (unint64_t *)&v87));
          do
            v65 = (void *)__ldaxr((unint64_t *)&v90);
          while (__stlxr(v64, (unint64_t *)&v90));

          v60 = (const __CFArray *)v87;
        }

        goto LABEL_91;
      }
      v77 = atomic_load((unint64_t *)&v88);
      TDescriptorSource::CopyFontDescriptorPerPostScriptName(v28, v26, v77, v15, a4, 0, 0, 0, -1, *MEMORY[0x1E0C9AE40]);

      v78 = *(__CFString **)&v91.var0;
LABEL_109:

LABEL_110:
      goto LABEL_111;
    }
    if (atomic_load((unint64_t *)&v91.var0))
    {
      v38 = (const void *)atomic_load((unint64_t *)&v91.var0);
      v39 = CFGetTypeID(v38);
      if (v39 == CFURLGetTypeID())
      {
        v40 = (const __CFURL *)atomic_load((unint64_t *)&v91.var0);
        TDescriptorSource::CopyDescriptor(a1, v40, 0, 0, (unint64_t *)v92);
        do
          v41 = __ldaxr((unint64_t *)v92);
        while (__stlxr(0, (unint64_t *)v92));
        do
          v42 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v41, (unint64_t *)&v90));

        TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v90, v15, 0, (unint64_t *)v92);
        do
          v43 = __ldaxr((unint64_t *)v92);
        while (__stlxr(0, (unint64_t *)v92));
        do
          v44 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v43, (unint64_t *)&v90));
      }
      else
      {
        v79 = (const __CFArray *)atomic_load((unint64_t *)&v91.var0);
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v79, 0);
        TDescriptorSource::CopyDescriptor(a1, ValueAtIndex, 0, 0, (unint64_t *)v92);
        do
          v81 = __ldaxr((unint64_t *)v92);
        while (__stlxr(0, (unint64_t *)v92));
        do
          v82 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v81, (unint64_t *)&v90));

        TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v90, v15, 0, (unint64_t *)v92);
        do
          v83 = __ldaxr((unint64_t *)v92);
        while (__stlxr(0, (unint64_t *)v92));
        do
          v44 = (void *)__ldaxr((unint64_t *)&v90);
        while (__stlxr(v83, (unint64_t *)&v90));
      }

    }
  }
  do
    v84 = __ldaxr((unint64_t *)&v90);
  while (__stlxr(0, (unint64_t *)&v90));
  *a9 = v84;
LABEL_111:

}

_QWORD *TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(_QWORD *a1)
{
  _QWORD *Table;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = 0;
  Table = GetTable();
  if (Table && (v3 = (_DWORD *)Table[6]) != 0)
  {
    if (*v3 != TGenerationSeed::sGeneration)
      TLRUCacheImp<TRequestCacheNode,16ul>::RemoveAll(Table[6]);
  }
  else
  {
    v4 = operator new();
    v3 = (_DWORD *)v4;
    v5 = 0;
    *(_DWORD *)v4 = TGenerationSeed::sGeneration;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 + 24) = &off_1E15DDA18;
      *(_QWORD *)(v6 + 32) = 0;
      *(_OWORD *)(v6 + 40) = 0uLL;
      *(_OWORD *)(v6 + 56) = 0uLL;
      v5 += 48;
    }
    while (v5 != 768);
    *(_OWORD *)(v4 + 8) = xmmword_184931350;
    v7 = (uint64_t *)(v4 + 32);
    for (i = 1; i != 16; ++i)
    {
      *v7 = i;
      v7 += 6;
    }
    *(_QWORD *)(v4 + 752) = 0;
    v9 = GetTable();
    if (v9)
    {
      v10 = v9;
      v9 = (_QWORD *)v9[6];
      v10[6] = v3;
      v10[7] = TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::DestroyCache;
    }
    TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::DestroyCache((uint64_t)v9);
  }
  *a1 = v3;
  return a1;
}

BOOL TDescriptorSource::HasMissedRequest(TDescriptorSource *this, void *a2, void *a3, CFComparisonResult (*a4)(const void *, const void *, void *))
{
  _QWORD *MissedRequests;
  _BOOL8 v8;
  id v10[3];

  if (!this)
    return 0;
  os_unfair_lock_lock_with_options();
  MissedRequests = GetMissedRequests();
  v10[0] = this;
  v10[1] = a2;
  v10[2] = a3;

  os_unfair_lock_unlock((os_unfair_lock_t)&sMissedRequestCacheLock);
  return v8;
}

uint64_t STL::hash_val<unsigned long,unsigned long,CFComparisonResult (*)(void const*,void const*,void *)>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (a2 + ((a1 + 2654435769) << 6) + ((unint64_t)(a1 + 2654435769) >> 2) + 2654435769u) ^ (a1 + 2654435769);
  v4 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v4 >> 47) ^ v4);
  return ((v3 << 6) + (v3 >> 2) - 0x622015F714C7D297 * (v5 ^ (v5 >> 47)) + 2654435769u) ^ v3;
}

_QWORD *GetMissedRequests(void)
{
  _QWORD *v0;
  _QWORD *v1;
  id *v2;
  id *v3;
  uint64_t v4;
  uint64_t i;

  v0 = (_QWORD *)qword_1ECDE7780;
  if (!qword_1ECDE7780)
  {
    v1 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    v0 = v1;
    if (v1)
    {
      *(_OWORD *)v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
      *((_DWORD *)v1 + 8) = 1065353216;
    }
    qword_1ECDE7780 = (uint64_t)v1;
  }
  if (TGenerationSeed::sGeneration != dword_1ECDE76EC)
  {
    if (v0[3])
    {
      v2 = (id *)v0[2];
      if (v2)
      {
        do
        {
          v3 = (id *)*v2;

          operator delete(v2);
          v2 = v3;
        }
        while (v3);
      }
      v0[2] = 0;
      v4 = v0[1];
      if (v4)
      {
        for (i = 0; i != v4; ++i)
          *(_QWORD *)(*v0 + 8 * i) = 0;
      }
      v0[3] = 0;
      v0 = (_QWORD *)qword_1ECDE7780;
    }
    dword_1ECDE76EC = TGenerationSeed::sGeneration;
  }
  return v0;
}

uint64_t TRequestCache::CopyResultForRequest(_QWORD *a1, id a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t *v24;
  id v25;

  v9 = a2;
  v10 = 0;
  v11 = 0;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 8);
  v14 = *a1 + 24;
  v24 = v13;
  v25 = v10;
  while (1)
  {
    v15 = *v13;
    v16 = v14 + 48 * *v13;
    if (*(_QWORD *)(v16 + 24) == a3 && *(_QWORD *)(v14 + 48 * v15 + 32) == a5)
    {
      v17 = (id)atomic_load((unint64_t *)(v14 + 48 * v15 + 16));
      if (v9 == v17 || v9 && v17 && CFEqual(v17, v9))
        break;
    }
    if (v15 == *(_QWORD *)(v12 + 16))
    {
      do
        v18 = (void *)__ldaxr(a4);
      while (__stlxr(0, a4));

      v19 = 0;
      goto LABEL_17;
    }
    v13 = (uint64_t *)(v16 + 8);
    v11 = v15;
  }
  v20 = *v24;
  if (v15 != *v24)
  {
    *(_QWORD *)(v14 + 48 * v11 + 8) = *(_QWORD *)(v16 + 8);
    v21 = *(_QWORD *)(v12 + 16);
    if (v15 == v21)
    {
      *(_QWORD *)(v12 + 16) = v11;
      v21 = v11;
    }
    *(_QWORD *)(v16 + 8) = v20;
    *v24 = v15;
    *(_QWORD *)(v14 + 48 * v21 + 8) = v15;
  }
  v22 = (void *)atomic_load((unint64_t *)(v14 + 48 * v15 + 40));
  TCFRef<__CTFont const*>::Retain(a4, v22);
  v19 = 1;
LABEL_17:

  return v19;
}

void TDescriptorSource::CopyFontDescriptorWithOptions(unint64_t *a1@<X0>, int a2@<W1>, const void *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v6;
  void *v9;
  _QWORD *v10;
  TDescriptor *v11;
  void *v12;
  TDescriptor **v13;
  TDescriptor **v14;
  TDescriptor *v15;
  TBaseFont *v16;
  const __CFDictionary *v17;
  __CFDictionary *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  TBaseFont *v23;
  TDescriptor *v24;
  void *v25;
  unint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  id v32;
  id v33;
  TBaseFont *v34;
  int v35;
  id v36;

  v6 = atomic_load(a1);
  if ((*(_QWORD *)&a2 & 0x10400) == 0 || v6 == 0)
    goto LABEL_22;
  v35 = a2 & 0x10485;
  v9 = (void *)atomic_load(a1);
  v10 = v9;
  v11 = (TDescriptor *)v10[5];

  v34 = (TBaseFont *)0xAAAAAAAAAAAAAAAALL;
  v12 = (void *)atomic_load(a1);
  v13 = v12;
  v14 = v13;
  v15 = v13[5];
  if ((*((_DWORD *)v15 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v13[5], 0, 0.0);
  v16 = (TBaseFont *)atomic_load((unint64_t *)v15 + 4);

  v34 = v16;
  if (a3)
  {
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptor::CopyAttributes(v11, (unint64_t *)&v36);
    v17 = (const __CFDictionary *)atomic_load((unint64_t *)&v36);
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v33, v17);

    v18 = (__CFDictionary *)atomic_load((unint64_t *)&v33);
    CFDictionarySetValue(v18, CFSTR("NSFontSizeAttribute"), a3);
    v19 = atomic_load(a1);
    v20 = (void *)atomic_load((unint64_t *)&v33);
    v21 = TCFBase<TDescriptor>::Allocate();
    if (v21)
    {
      v22 = (_QWORD *)v21;
      v23 = v34;
      v24 = (TDescriptor *)(v21 + 48);
      v22[2] = 0;
      v22[3] = TDescriptor::Hash;
      v22[4] = 0;
      v22[5] = v24;
      TDescriptor::TDescriptor(v24, *(const TDescriptor **)(v19 + 40), v23, v20);
      v36 = v22;
      do
        v25 = (void *)__ldaxr((unint64_t *)&v36);
      while (__stlxr(0, (unint64_t *)&v36));
      v32 = v25;

    }
    else
    {
      v32 = 0;
    }
    do
      v29 = __ldaxr((unint64_t *)&v32);
    while (__stlxr(0, (unint64_t *)&v32));
    do
      v30 = (void *)__ldaxr(a1);
    while (__stlxr(v29, a1));

    v28 = v33;
  }
  else
  {
    if ((v35 & ~*((_DWORD *)v11 + 4)) == 0)
      goto LABEL_22;
    TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>((uint64_t *)&v34, &v35, (unint64_t *)&v36);
    do
      v26 = __ldaxr((unint64_t *)&v36);
    while (__stlxr(0, (unint64_t *)&v36));
    do
      v27 = (void *)__ldaxr(a1);
    while (__stlxr(v26, a1));

    v28 = v36;
  }

  do
LABEL_22:
    v31 = __ldaxr(a1);
  while (__stlxr(0, a1));
  *a4 = v31;
}

uint64_t TDescriptorSource::ShouldSubstituteInvisibleFontName(const __CFString *this, const __CFString *a2)
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
  {
    if (this != CFSTR("."))
    {
      if (!this)
        return 0;
      result = CFStringHasPrefix(this, CFSTR("."));
      if (!(_DWORD)result)
        return result;
    }
    if (this != CFSTR(".AppleSystemUIFont"))
    {
      result = 1;
      if (this)
        return CFStringHasPrefix(this, CFSTR(".AppleSystemUIFont")) == 0;
      return result;
    }
    return 0;
  }
  return result;
}

void TRequestCache::AddResultForRequest(TRequestCache *this, void *a2, id a3, uint64_t a4, CFComparisonResult (*a5)(const void *, const void *, void *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18[2];
  id v19;
  uint64_t v20;
  CFComparisonResult (*v21)(const void *, const void *, void *);
  id v22;

  v18[0] = (unint64_t)&off_1E15DDA18;
  v18[1] = 0;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a2;
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(*(_QWORD *)this + 16);
  v11 = *(_QWORD *)this + 24;
  v12 = TRequestCacheNode::operator=((unint64_t *)(v11 + 48 * v10), v18);
  v13 = *(_QWORD *)(v9 + 8);
  do
  {
    v14 = v13;
    v15 = v11 + 48 * v13;
    v17 = *(_QWORD *)(v15 + 8);
    v16 = (_QWORD *)(v15 + 8);
    v13 = v17;
  }
  while (v17 != *(_QWORD *)(v9 + 16));
  v12[1] = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v9 + 16) = v14;
  *v16 = v10;
  v18[0] = (unint64_t)&off_1E15DDA18;

}

unint64_t *TRequestCacheNode::operator=(unint64_t *a1, unint64_t *a2)
{
  void *v4;
  void *v5;

  if (a1 != a2)
  {
    v4 = (void *)atomic_load(a2 + 2);
    TCFRef<__CTFont const*>::Retain(a1 + 2, v4);
    a1[3] = a2[3];
    v5 = (void *)atomic_load(a2 + 5);
    TCFRef<__CTFont const*>::Retain(a1 + 5, v5);
    a1[4] = a2[4];
  }
  return a1;
}

double TFont::GetBoundingBoxesForGlyphs(TFont *this, const unsigned __int16 *a2, CGRect *a3, uint64_t a4, CTFontOrientation a5)
{
  CGFont *v9;
  CGRect *v10;
  __int128 v11;
  int BoundingBoxesForSVGGlyphs;
  __int128 v13;
  int v14;
  __int128 v15;
  CGSize *v16;
  CGSize *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double v21;
  CGSize *p_size;
  uint64_t v23;
  float64x2_t v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGSize *v29;
  _QWORD *v30;
  uint64_t v31;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  uint64_t v37;
  CGAffineTransform v38;
  id v39;
  CGRect *bboxes;
  CGAffineTransform v41;
  _BYTE v42[24];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  CGSize *v46[2];
  _QWORD v47[62];
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _OWORD v51[15];
  _OWORD *v52;
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v53 = *MEMORY[0x1E0C80C00];
  v39 = (id)0xAAAAAAAAAAAAAAAALL;
  bboxes = a3;
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 496))(&v39);
  if (a4 >= 1)
  {
    v9 = (CGFont *)atomic_load((unint64_t *)&v39);
    v10 = bboxes;
    if (CGFontGetGlyphBBoxes(v9, a2, a4, bboxes))
    {
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v51[14] = v11;
      v51[13] = v11;
      v51[12] = v11;
      v51[11] = v11;
      v51[10] = v11;
      v51[9] = v11;
      v51[8] = v11;
      v51[7] = v11;
      v51[6] = v11;
      v51[5] = v11;
      v51[4] = v11;
      v51[3] = v11;
      v51[2] = v11;
      v51[1] = v11;
      v51[0] = v11;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v52 = v51;
      BoundingBoxesForSVGGlyphs = TFont::GetBoundingBoxesForSVGGlyphs(this, 0, (uint64_t)a2, (uint64_t)v10, a4, 1, (double *)&v48, 0);
      *(_QWORD *)&v13 = -1;
      *((_QWORD *)&v13 + 1) = -1;
      *(_OWORD *)&v38.c = v13;
      *(_OWORD *)&v38.tx = v13;
      v14 = BoundingBoxesForSVGGlyphs ^ 1;
      *(_OWORD *)&v38.a = v13;
      TFont::GetScaledMatrix(this, &v38);
      if (a5 != kCTFontOrientationVertical && (a5 || (*(_BYTE *)this & 1) == 0))
      {
LABEL_18:
        v21 = *MEMORY[0x1E0C9D648];
        v26 = *(double *)(MEMORY[0x1E0C9D648] + 8);
        v27 = *(double *)(MEMORY[0x1E0C9D648] + 16);
        v28 = *(double *)(MEMORY[0x1E0C9D648] + 24);
        v46[0] = COERCE_CGSIZE_(TFont::GetColorBitmapFontTranslate(this));
        v46[1] = v29;
        v30 = operator new(0x20uLL);
        *v30 = &off_1E15E11C8;
        v30[1] = &bboxes;
        v30[2] = &v38;
        v30[3] = v46;
        v43 = v30;
        ForEachIndex(a4, v14, v48, v49, (uint64_t)v42);
        (*(void (**)(_QWORD *))(*v30 + 40))(v30);
        v31 = 0;
        do
        {
          x = bboxes[v31].origin.x;
          y = bboxes[v31].origin.y;
          width = bboxes[v31].size.width;
          height = bboxes[v31].size.height;
          v56.origin.x = v21;
          v56.origin.y = v26;
          v56.size.width = v27;
          v56.size.height = v28;
          if (CGRectIsEmpty(v56))
          {
            v21 = x;
            v26 = y;
            v27 = width;
            v28 = height;
          }
          else
          {
            v57.origin.x = x;
            v57.origin.y = y;
            v57.size.width = width;
            v57.size.height = height;
            if (!CGRectIsEmpty(v57))
            {
              v58.origin.x = v21;
              v58.origin.y = v26;
              v58.size.width = v27;
              v58.size.height = v28;
              v60.origin.x = x;
              v60.origin.y = y;
              v60.size.width = width;
              v60.size.height = height;
              v59 = CGRectUnion(v58, v60);
              v21 = v59.origin.x;
              v26 = v59.origin.y;
              v27 = v59.size.width;
              v28 = v59.size.height;
            }
          }
          ++v31;
          --a4;
        }
        while (a4);
        goto LABEL_24;
      }
      TFont::GetEffectiveMatrix(this, (uint64_t)v46);
      *(_OWORD *)&v38.a = *(_OWORD *)v46;
      *(_OWORD *)&v38.c = *(_OWORD *)v47;
      *(_OWORD *)&v38.tx = *(_OWORD *)&v47[2];
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v47[57] = v15;
      *(_OWORD *)&v47[59] = v15;
      *(_OWORD *)&v47[53] = v15;
      *(_OWORD *)&v47[55] = v15;
      *(_OWORD *)&v47[49] = v15;
      *(_OWORD *)&v47[51] = v15;
      *(_OWORD *)&v47[45] = v15;
      *(_OWORD *)&v47[47] = v15;
      *(_OWORD *)&v47[41] = v15;
      *(_OWORD *)&v47[43] = v15;
      *(_OWORD *)&v47[37] = v15;
      *(_OWORD *)&v47[39] = v15;
      *(_OWORD *)&v47[33] = v15;
      *(_OWORD *)&v47[35] = v15;
      *(_OWORD *)&v47[31] = v15;
      *(_OWORD *)&v47[29] = v15;
      *(_OWORD *)&v47[27] = v15;
      *(_OWORD *)&v47[25] = v15;
      *(_OWORD *)&v47[23] = v15;
      *(_OWORD *)&v47[21] = v15;
      *(_OWORD *)&v47[19] = v15;
      *(_OWORD *)&v47[17] = v15;
      *(_OWORD *)&v47[15] = v15;
      *(_OWORD *)&v47[13] = v15;
      *(_OWORD *)&v47[11] = v15;
      *(_OWORD *)&v47[9] = v15;
      *(_OWORD *)&v47[7] = v15;
      *(_OWORD *)&v47[5] = v15;
      *(_OWORD *)&v47[3] = v15;
      *(_OWORD *)&v47[1] = v15;
      v46[0] = 0;
      v46[1] = 0;
      v47[0] = 0;
      v47[61] = &v47[1];
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)v46, a4);
      v16 = v46[1];
      bzero(v46[1], 16 * a4);
      v46[1] = &v16[a4];
      v17 = v46[0];
      if (!v46[0])
      {
        v21 = *MEMORY[0x1E0C9D628];
        *(_QWORD *)&v41.a = v46;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v41);
LABEL_24:
        v46[0] = (CGSize *)&v48;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v46);
        goto LABEL_25;
      }
      if (TFont::GetUnscaledVerticalTranslationsForGlyphs(this, a2, v46[0], a4))
      {
        TFont::GetScaleFactor((double *)this);
        v37 = v18;
        v44[0] = &off_1E15E1180;
        v44[1] = &bboxes;
        v44[2] = &v37;
        v45 = v44;
        ForEachIndex(a4, v14, v48, v49, (uint64_t)v44);
        v19 = v45;
        if (v45 == v44)
        {
          v20 = 4;
          v19 = v44;
        }
        else
        {
          if (!v45)
            goto LABEL_15;
          v20 = 5;
        }
        (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_15:
        p_size = &bboxes->size;
        v23 = a4;
        do
        {
          v54 = *(CGRect *)&p_size[-1].width;
          v41 = *(CGAffineTransform *)kRotateLeftTransform;
          v55 = CGRectApplyAffineTransform(v54, &v41);
          *(CGRect *)&p_size[-1].width = v55;
          v24 = *(float64x2_t *)v17++;
          v55.size.height = v55.origin.y;
          v25 = v55.origin.x;
          p_size[-1] = (CGSize)vextq_s8((int8x16_t)vsubq_f64(*(float64x2_t *)&v55.size.height, v24), (int8x16_t)vaddq_f64(*(float64x2_t *)&v55.origin.y, v24), 8uLL);
          p_size += 2;
          --v23;
        }
        while (v23);
        *(_QWORD *)&v41.a = v46;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v41);
        goto LABEL_18;
      }
      *(_QWORD *)&v41.a = v46;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v41);
      v46[0] = (CGSize *)&v48;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v46);
    }
  }
  v21 = *MEMORY[0x1E0C9D628];
LABEL_25:

  return v21;
}

void TBaseFont::CopyNativeFont(TBaseFont *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  void *v5;
  TCGFontCache *v8;
  const __CFString *v9;
  const __CFString *v10;
  void *v12;
  id v13;
  id v15;
  int v16;
  void *v18;
  uint64_t v19;
  int v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t v29;
  int v31;
  id v32;
  void *v33;
  void *v34;
  _BYTE v35[8];
  id v36;
  id v37;
  id v38;
  id v39;

  v3 = (unint64_t *)((char *)this + 104);
  if (atomic_load((unint64_t *)this + 13))
  {
    v5 = (void *)atomic_load(v3);
    *a2 = v5;
    return;
  }
  v39 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v39);
  if (!atomic_load((unint64_t *)&v39))
    goto LABEL_15;
  v38 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = (TCGFontCache *)atomic_load((unint64_t *)&v39);
  v9 = (const __CFString *)atomic_load((unint64_t *)this + 11);
  if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 16))(this) == 1414088260)
    v10 = 0;
  else
    v10 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  TCGFontCache::CopyFont(v8, v9, v10, (unint64_t *)&v38);
  if (!atomic_load((unint64_t *)&v38))
  {
    atomic_load((unint64_t *)&v39);
    atomic_load((unint64_t *)this + 11);
    atomic_load((unint64_t *)this + 12);
    CFLog();

LABEL_15:
    v38 = (id)0xAAAAAAAAAAAAAAAALL;
    v16 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 16))(this);
    if (v16 == 1414809156 || v16 == 1413695044)
    {
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v37);
      TDescriptorSource::CreateDefaultDescriptor(0, (unint64_t *)&v38);
    }
    else
    {
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v37);
      TDescriptorSource::CopyLastResort((unint64_t *)&v38);
    }
    v37 = (id)0xAAAAAAAAAAAAAAAALL;
    v19 = atomic_load((unint64_t *)&v38);
    TBaseFont::CopyNativeFontForDescriptor((TBaseFont *)&v37, this, v19);
    if (!atomic_load((unint64_t *)&v37))
    {
      v21 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 16))(this);
      if (v21 == 1414809156 || v21 == 1413695044)
      {
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)v35);
        TDescriptorSource::CopyLastResort((unint64_t *)&v36);
        do
          v23 = __ldaxr((unint64_t *)&v36);
        while (__stlxr(0, (unint64_t *)&v36));
        do
          v24 = (void *)__ldaxr((unint64_t *)&v38);
        while (__stlxr(v23, (unint64_t *)&v38));

        v25 = atomic_load((unint64_t *)&v38);
        TBaseFont::CopyNativeFontForDescriptor((TBaseFont *)&v36, this, v25);
        do
          v26 = __ldaxr((unint64_t *)&v36);
        while (__stlxr(0, (unint64_t *)&v36));
        do
          v27 = (void *)__ldaxr((unint64_t *)&v37);
        while (__stlxr(v26, (unint64_t *)&v37));

      }
    }
    if (atomic_load((unint64_t *)&v37))
    {
      do
        v29 = __ldaxr((unint64_t *)&v37);
      while (__stlxr(0, (unint64_t *)&v37));
      do
      {
        if (__ldaxr(v3))
        {
          v31 = 0;
          __clrex();
          goto LABEL_44;
        }
      }
      while (__stlxr(v29, v3));
      v31 = 1;
LABEL_44:
      if (v31)
        v33 = 0;
      else
        v33 = (void *)v29;

      v34 = (void *)atomic_load(v3);
      v32 = v34;
    }
    else
    {
      CFLog();
      v32 = 0;
    }
    *a2 = v32;

    goto LABEL_49;
  }
  v12 = (void *)atomic_load((unint64_t *)&v38);
  v13 = v12;
  do
  {
    if (__ldaxr(v3))
    {
      __clrex();

      v18 = (void *)atomic_load(v3);
      v15 = v18;
      goto LABEL_22;
    }
  }
  while (__stlxr((unint64_t)v13, v3));

  do
    v15 = (id)__ldaxr((unint64_t *)&v38);
  while (__stlxr(0, (unint64_t *)&v38));
LABEL_22:
  *a2 = v15;
LABEL_49:

}

id TTenuousComponentFont::CopyFontURL@<X0>(TTenuousComponentFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id result;

  if ((*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this))
  {
    v4 = (void *)atomic_load((unint64_t *)this + 10);
    result = v4;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void TCGFontCache::CopyFontWithOpticalSizeVariation(TCGFontCache *this@<X0>, CGFont *a2@<X1>, CFDictionaryRef theDict@<X2>, unint64_t *a4@<X8>)
{
  const __CFNumber *Value;
  const __CFNumber *v10;
  CFTypeID v11;
  id receiver;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *Cache;
  unint64_t v17;
  unint64_t v19;
  void *v20;
  TCGFontCache *v21;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  objc_super v26;

  if (this
    && theDict
    && (Value = (const __CFNumber *)CFDictionaryGetValue(theDict, &unk_1E1617188)) != 0
    && (v10 = Value, v11 = CFGetTypeID(Value), v11 == CFNumberGetTypeID()))
  {
    v26.receiver = (id)-1;
    CFNumberGetValue(v10, kCFNumberDoubleType, &v26);
    receiver = v26.receiver;
    v13 = [_CGFontCacheKey alloc];
    if (v13)
    {
      v26.receiver = (id)v13;
      v26.super_class = (Class)_CGFontCacheKey;
      v13 = -[TCGFontCache init](&v26, sel_init);
      v14 = v13;
      if (v13)
      {
        *(_QWORD *)(v13 + 16) = a2;
        *(double *)(v14 + 24) = *(double *)&receiver;
        v13 = -[CGFont hash](a2, "hash");
        v15 = (uint64_t)receiver + 2654435769;
        if (*(double *)&receiver == 0.0)
          v15 = 2654435769;
        *(_QWORD *)(v14 + 8) = v13 ^ v15;
      }
    }
    else
    {
      v14 = 0;
    }
    *a4 = 0xAAAAAAAAAAAAAAAALL;
    Cache = TCGFontCache::GetCache((TCGFontCache *)v13);
    TPurgeableCache::RetainedValueForKey((TPurgeableCache *)Cache, (const void *)v14, (unint64_t *)&v26);
    do
      v17 = __ldaxr((unint64_t *)&v26);
    while (__stlxr(0, (unint64_t *)&v26));
    *a4 = v17;

    if (!atomic_load(a4))
    {
      CreateFontWithVariation(this, theDict, (unint64_t *)&v26);
      do
        v19 = __ldaxr((unint64_t *)&v26);
      while (__stlxr(0, (unint64_t *)&v26));
      do
        v20 = (void *)__ldaxr(a4);
      while (__stlxr(v19, a4));

      if (atomic_load(a4))
      {
        v23 = TCGFontCache::GetCache(v21);
        v24 = atomic_load(a4);
        v25 = (void *)atomic_load(v23);
        if (v24)
          objc_msgSend(v25, "setObject:forKey:", v24, v14);
        else
          objc_msgSend(v25, "removeObjectForKey:", v14);
      }
    }

  }
  else
  {
    *a4 = 0;
  }
}

void TCGFontCache::CopyFont(TCGFontCache *this@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *Cache;
  unint64_t v10;
  unint64_t v12;
  void *v13;
  TCGFontCache *v14;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  id v19;

  if (this)
  {
    *a4 = 0xAAAAAAAAAAAAAAAALL;
    Cache = TCGFontCache::GetCache(this);
    TPurgeableCache::RetainedValueForKey((TPurgeableCache *)Cache, this, (unint64_t *)&v19);
    do
      v10 = __ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    *a4 = v10;

    if (!atomic_load(a4))
    {
      CreateFontWithFontURL(this, a2, a3, (unint64_t *)&v19);
      do
        v12 = __ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
      do
        v13 = (void *)__ldaxr(a4);
      while (__stlxr(v12, a4));

      if (atomic_load(a4))
      {
        v16 = TCGFontCache::GetCache(v14);
        v17 = atomic_load(a4);
        v18 = (void *)atomic_load(v16);
        if (v17)
          objc_msgSend(v18, "setObject:forKey:", v17, this);
        else
          objc_msgSend(v18, "removeObjectForKey:", this);
      }
    }
  }
  else
  {
    *a4 = 0;
  }
}

unint64_t *TCGFontCache::GetCache(TCGFontCache *this)
{
  unint64_t *v1;
  void *v2;
  void *v3;
  unint64_t v4;

  v1 = (unint64_t *)atomic_load(&TCGFontCache::sSharedCache);
  if (!v1)
  {
    v1 = (unint64_t *)operator new();
    *v1 = objc_opt_new();
    v2 = (void *)atomic_load(v1);
    objc_msgSend(v2, "setName:", CFSTR("com.apple.CoreText.TCGFontCache"));
    v3 = (void *)atomic_load(v1);
    objc_msgSend(v3, "setEvictsObjectsWithDiscardedContent:", 0);
    while (1)
    {
      v4 = __ldaxr(&TCGFontCache::sSharedCache);
      if (v4)
        break;
      if (!__stlxr((unint64_t)v1, &TCGFontCache::sSharedCache))
        return v1;
    }
    __clrex();

    MEMORY[0x186DC03AC](v1, 0x80C40B8603338);
    return (unint64_t *)v4;
  }
  return v1;
}

void TPurgeableCache::RetainedValueForKey(TPurgeableCache *this@<X0>, const void *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  void *v7;

  *a3 = 0;
  v6 = (void *)MEMORY[0x186DC070C]();
  v7 = (void *)atomic_load((unint64_t *)this);
  TCFRef<__CTFont const*>::Retain(a3, (id)objc_msgSend(v7, "objectForKey:", a2));
  objc_autoreleasePoolPop(v6);
}

void TDescriptorSource::CopyDescriptor(TPurgeableCache **this@<X0>, const __CFURL *a2@<X1>, __CFString *a3@<X2>, __CFString *a4@<X3>, unint64_t *a5@<X8>)
{
  BOOL v8;
  char v9;
  unint64_t v10;
  void *v11;
  TDescriptor **v12;
  TDescriptor **v13;
  TDescriptor *v14;
  unint64_t v15;
  TPurgeableCache *v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  id v21;
  id v22;

  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  if (a3)
    v8 = a4 == 0;
  else
    v8 = 1;
  v9 = !v8;
  TDescriptorSource::CopyDescriptorUncached(this, a2, a3, a4, v9 ^ 1, (unint64_t *)&v22);
  v10 = atomic_load((unint64_t *)&v22);
  if ((v9 & 1) == 0 && v10)
  {
    v21 = (id)0xAAAAAAAAAAAAAAAALL;
    v11 = (void *)atomic_load((unint64_t *)&v22);
    v12 = v11;
    v13 = v12;
    v14 = v12[5];
    if ((*((_DWORD *)v14 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v12[5], 0, 0.0);
    v15 = atomic_load((unint64_t *)v14 + 4);
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v15 + 496))(&v21);

    if (!atomic_load((unint64_t *)&v21))
    {
      *a5 = 0;

      goto LABEL_18;
    }

  }
  v17 = *this;
  v18 = atomic_load((unint64_t *)&v22);
  v19 = (void *)atomic_load((unint64_t *)v17);
  if (v18)
    objc_msgSend(v19, "setObject:forKey:", v18, a2);
  else
    objc_msgSend(v19, "removeObjectForKey:", a2);
  do
    v20 = __ldaxr((unint64_t *)&v22);
  while (__stlxr(0, (unint64_t *)&v22));
  *a5 = v20;
LABEL_18:

}

void TDescriptorSource::CopyDescriptorUncached(TPurgeableCache **this@<X0>, const __CFURL *a2@<X1>, __CFString *a3@<X2>, __CFString *a4@<X3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  void *v11;
  unint64_t v13;
  TBaseFont *v14;
  void *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFDictionary *Value;
  CGFont *v19;
  CGFont *v20;
  CTFontDescriptor *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  CGFont *v26;
  void *v28;
  TDescriptor **v29;
  TDescriptor **v30;
  TDescriptor *v31;
  unint64_t v32;
  void *v33;
  TBaseFont *v34;
  unint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;

  if (a2)
  {
    v41 = (id)0xAAAAAAAAAAAAAAAALL;
    TPurgeableCache::RetainedValueForKey(*this, a2, (unint64_t *)&v42);
    do
      v11 = (void *)__ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    v41 = v11;

    if (atomic_load((unint64_t *)&v41))
    {
      do
        v13 = __ldaxr((unint64_t *)&v41);
      while (__stlxr(0, (unint64_t *)&v41));
LABEL_6:
      *a6 = v13;
LABEL_7:

      return;
    }
    v14 = (TBaseFont *)operator new();
    TBaseFont::TBaseFont(v14, a2, a3, a4);
    if ((a5 & 1) == 0)
    {
      v40 = v14;
      TCFBase_NEW<CTFontDescriptor,TBaseFont const*>((unint64_t *)&v42, (uint64_t *)&v40);
      do
        v24 = __ldaxr((unint64_t *)&v42);
      while (__stlxr(0, (unint64_t *)&v42));
      *a6 = v24;

      goto LABEL_7;
    }
    v40 = (id)0xAAAAAAAAAAAAAAAALL;
    CreateFontInfoDictionaryFromFontURL(a2, (unint64_t *)&v40);
    v15 = (void *)atomic_load((unint64_t *)&v40);
    v16 = v15;
    if (v16)
    {
      v17 = v16;
      Value = (const __CFDictionary *)CFDictionaryGetValue(v16, CFSTR("variation"));

      if (!Value)
        goto LABEL_30;
      v39 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)v14 + 496))(&v39, v14);
      v38 = (id)0xAAAAAAAAAAAAAAAALL;
      v19 = (CGFont *)atomic_load((unint64_t *)&v39);
      CreateFontWithVariation(v19, Value, (unint64_t *)&v38);
      *a6 = 0xAAAAAAAAAAAAAAAALL;
      v20 = (CGFont *)atomic_load((unint64_t *)&v39);
      v21 = (CTFontDescriptor *)TCFBase<TDescriptor>::Allocate();
      if (v21)
      {
        CTFontDescriptor::CTFontDescriptor(v21, v20, Value);
        v42 = v22;
        do
          v23 = (void *)__ldaxr((unint64_t *)&v42);
        while (__stlxr(0, (unint64_t *)&v42));
        v37 = v23;

      }
      else
      {
        v37 = 0;
      }
      do
        v25 = __ldaxr((unint64_t *)&v37);
      while (__stlxr(0, (unint64_t *)&v37));
      *a6 = v25;

      v26 = (CGFont *)atomic_load((unint64_t *)&v38);
      if (!IsNamedInstance(v26))
      {

        (*(void (**)(TBaseFont *))(*(_QWORD *)v14 + 8))(v14);
        goto LABEL_7;
      }
      if (atomic_load(a6))
      {
        v28 = (void *)atomic_load(a6);
        v29 = v28;
        v30 = v29;
        v31 = v29[5];
        if ((*((_DWORD *)v31 + 4) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(v29[5], 0, 0.0);
        v32 = atomic_load((unint64_t *)v31 + 4);

        if (v32)
        {
          v42 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v32 + 200))(&v42, v32);
          v33 = (void *)atomic_load((unint64_t *)&v42);
          v34 = (TBaseFont *)operator new();
          TBaseFont::TBaseFont(v34, v33, 0, 0);
          (*(void (**)(TBaseFont *))(*(_QWORD *)v14 + 8))(v14);

          v14 = v34;
        }
      }

      v16 = (const __CFDictionary *)v39;
    }

LABEL_30:
    v39 = v14;
    TCFBase_NEW<CTFontDescriptor,TBaseFont const*>((unint64_t *)&v42, (uint64_t *)&v39);
    do
      v35 = __ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    do
      v36 = (void *)__ldaxr((unint64_t *)&v41);
    while (__stlxr(v35, (unint64_t *)&v41));

    do
      v13 = __ldaxr((unint64_t *)&v41);
    while (__stlxr(0, (unint64_t *)&v41));
    goto LABEL_6;
  }
  *a6 = 0;
}

uint64_t TFont::GetBoundingBoxesForSVGGlyphs(TFont *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, double *a7, CGFloat *a8)
{
  uint64_t result;
  int v17;
  char v18;
  unint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  uint64_t v24;
  unint64_t v25;
  double *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  CGFloat width;
  CGFloat height;
  double x;
  double y;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  CGFloat v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  double v48;
  CGFloat v49;
  CGFloat v50;
  unint64_t *v51;
  unint64_t *v52;
  char *v53;
  uint64_t v54;
  CGFloat v55;
  CGFloat *v56;
  int v57;
  _OWORD *v58;
  uint64_t v59;
  CGSize v60;
  CGAffineTransform v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;

  result = TFont::ensureSVGTableObject(a1);
  if (result)
  {
    if (a6 == 2)
    {
      v17 = 1;
    }
    else if (a6)
    {
      v17 = 0;
    }
    else
    {
      v17 = *(_BYTE *)a1 & 1;
    }
    TFont::GetPaletteColors(a1);
    if (a5 < 1)
    {
      return 0;
    }
    else
    {
      v57 = v17;
      v56 = a8;
      v58 = a2;
      v18 = 0;
      v19 = 0;
      v21 = *(double *)(MEMORY[0x1E0C9D648] + 16);
      v20 = *(double *)(MEMORY[0x1E0C9D648] + 24);
      v23 = *MEMORY[0x1E0C9D648];
      v22 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v59 = a4 + 16;
      do
      {
        v24 = -2 * v19;
        v25 = v19;
        v26 = (double *)(v59 + 32 * v19);
        while (OTSVGTableGetDocumentIndexForGlyph() == -1)
        {
          if ((v18 & 1) != 0)
          {
            v38 = (unint64_t *)*((_QWORD *)a7 + 1);
            v39 = *((_QWORD *)a7 + 2);
            if ((unint64_t)v38 >= v39)
            {
              v41 = *a7;
              v42 = ((uint64_t)v38 - *(_QWORD *)a7) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                abort();
              v44 = v39 - *(_QWORD *)&v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              *(_QWORD *)&v61.tx = a7 + 3;
              if (v45)
              {
                v46 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(a7 + 3), v45);
                v41 = *a7;
                v38 = (unint64_t *)*((_QWORD *)a7 + 1);
              }
              else
              {
                v46 = 0;
              }
              v51 = (unint64_t *)&v46[8 * v42];
              *v51 = v25;
              if (v38 == *(unint64_t **)&v41)
              {
                v53 = &v46[8 * v42];
              }
              else
              {
                v52 = v38;
                v53 = &v46[8 * v42];
                do
                {
                  v54 = *--v52;
                  *((_QWORD *)v53 - 1) = v54;
                  v53 -= 8;
                }
                while (v52 != *(unint64_t **)&v41);
              }
              v40 = v51 + 1;
              *(_QWORD *)a7 = v53;
              *((_QWORD *)a7 + 1) = v51 + 1;
              v55 = a7[2];
              *((_QWORD *)a7 + 2) = &v46[8 * v45];
              *(_QWORD *)&v61.c = v38;
              v61.d = v55;
              v61.a = v41;
              v61.b = v41;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v61);
            }
            else
            {
              *v38 = v25;
              v40 = v38 + 1;
            }
            *((_QWORD *)a7 + 1) = v40;
            goto LABEL_49;
          }
          v18 = 0;
          result = 0;
          ++v25;
          v24 -= 2;
          v26 += 4;
          if (a5 == v25)
            return result;
        }
        if ((v18 & 1) == 0)
        {
          std::vector<long,TInlineBufferAllocator<long,30ul>>::resize((uint64_t)a7, v25);
          v27 = *(_QWORD **)a7;
          v28 = (_QWORD *)*((_QWORD *)a7 + 1);
          if (*(_QWORD **)a7 != v28)
          {
            v29 = 0;
            do
              *v27++ = v29++;
            while (v27 != v28);
          }
        }
        if (OTSVGDocumentCreate())
        {
          if (OTSVGGlyphRecordingCreate())
          {
            OTSVGGlyphRecordingGetBoundingRect();
            *(v26 - 2) = v30;
            *(v26 - 1) = v31;
            *v26 = v32;
            v26[1] = v33;
            if (v57)
            {
              v60.width = NAN;
              v60.height = NAN;
              TFont::GetUnscaledVerticalTranslationsForGlyphs(a1, (const unsigned __int16 *)(a3 - v24), &v60, 1);
              v62 = *(CGRect *)(v26 - 2);
              v61 = *(CGAffineTransform *)kRotateLeftTransform;
              v63 = CGRectApplyAffineTransform(v62, &v61);
              width = v63.size.width;
              height = v63.size.height;
              *v26 = v63.size.width;
              v26[1] = v63.size.height;
              x = v63.origin.x - v60.height;
              y = v63.origin.y + v60.width;
              *(v26 - 2) = v63.origin.x - v60.height;
              *(v26 - 1) = y;
            }
            else
            {
              x = v30;
              y = v31;
              width = v32;
              height = v33;
            }
            if (v58)
            {
              v47 = v58[1];
              *(_OWORD *)&v61.a = *v58;
              *(_OWORD *)&v61.c = v47;
              *(_OWORD *)&v61.tx = v58[2];
              v48 = x;
              *(double *)&v47 = y;
              v49 = width;
              v50 = height;
              v64 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v47 - 8), &v61);
              x = v64.origin.x;
              y = v64.origin.y;
              width = v64.size.width;
              height = v64.size.height;
              *(CGRect *)(v26 - 2) = v64;
            }
            v65.origin.x = v23;
            v65.origin.y = v22;
            v65.size.width = v21;
            v65.size.height = v20;
            if (!CGRectIsEmpty(v65))
            {
              v66.origin.x = x;
              v66.origin.y = y;
              v66.size.width = width;
              v66.size.height = height;
              if (CGRectIsEmpty(v66))
              {
                x = v23;
                y = v22;
                width = v21;
                height = v20;
              }
              else
              {
                v67.origin.x = v23;
                v67.origin.y = v22;
                v67.size.width = v21;
                v67.size.height = v20;
                v69.origin.x = x;
                v69.origin.y = y;
                v69.size.width = width;
                v69.size.height = height;
                v68 = CGRectUnion(v67, v69);
                x = v68.origin.x;
                y = v68.origin.y;
                width = v68.size.width;
                height = v68.size.height;
              }
            }
            OTSVGGlyphRecordingRelease();
            v23 = x;
            v22 = y;
            v21 = width;
            v20 = height;
          }
          OTSVGDocumentRelease();
        }
LABEL_49:
        v19 = v25 + 1;
        v18 = 1;
      }
      while (a5 - 1 != v25);
      if (v56)
      {
        *v56 = v23;
        v56[1] = v22;
        result = 1;
        v56[2] = v21;
        v56[3] = v20;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

double TFont::GetColorBitmapFontTranslate(TFont *this)
{
  double UnscaledTrackAmount;
  int v3;
  double v4;
  double v5;
  double v6;

  if (TFont::GetEffectiveSize(this) == *((double *)this + 2))
    return *MEMORY[0x1E0C9D538];
  UnscaledTrackAmount = TFont::GetUnscaledTrackAmount(this);
  v3 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 2) != 0)
    return 0.0;
  v4 = UnscaledTrackAmount;
  v5 = 0.5;
  if (UnscaledTrackAmount != 0.0)
  {
    TFont::GetScaleFactor((double *)this);
    v5 = v4 * v6 * 0.4 + 0.0;
    v3 = *(_DWORD *)this;
  }
  if ((v3 & 1) == 0)
    dyld_program_sdk_at_least();
  return v5;
}

void CopyNormalizedSystemFontPostScriptName(__CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFDictionary *Value;
  void *v5;
  id v6;
  void *v7;
  __CFString *v8;
  __CFString *v9;
  id v10;
  id v11;

  if (a1)
  {
    if (qword_1ECDE7DD8 != -1)
      dispatch_once(&qword_1ECDE7DD8, &__block_literal_global_80);
    if (qword_1ECDE7DD0)
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7DD0, CFSTR("PSNames"));
    else
      Value = 0;
    v11 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyLowercasedString(a1, (unint64_t *)&v11);
    v5 = (void *)atomic_load((unint64_t *)&v11);
    v6 = v5;
    if (Value)
      v7 = (void *)CFDictionaryGetValue(Value, v6);
    else
      v7 = 0;
    v10 = v7;
    do
      v8 = (__CFString *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));

    if (v8)
      v9 = v8;
    else
      v9 = a1;
    *a2 = v9;

  }
  else
  {
    *a2 = 0;
  }
}

void CopyLowercasedString(CFStringRef theString@<X0>, unint64_t *a2@<X8>)
{
  __CFString *v4;
  unint64_t v5;
  id MutableCopy;

  if (theString)
  {
    if (qword_1ECDE7C68 != -1)
      dispatch_once_f(&qword_1ECDE7C68, 0, (dispatch_function_t)CopyLowercasedString(__CFString const*)::$_0::__invoke);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
    v4 = (__CFString *)atomic_load((unint64_t *)&MutableCopy);
    CFStringFold(v4, 1uLL, (CFLocaleRef)_MergedGlobals_26);
    do
      v5 = __ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));
    *a2 = v5;

  }
  else
  {
    *a2 = 0;
  }
}

void CreateFontWithFontURL(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v6;
  void *v7;
  void *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  const __CFArray *v12;
  void *ValueAtIndex;
  unint64_t v14;
  CFIndex v15;
  __int128 v16;
  int64_t v17;
  size_t v18;
  CFIndex v19;
  CFIndex location;
  id p_FontsWithURL;
  id FontsWithURL;
  char *v23;
  char *v24;
  _OWORD v25[2];
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!a2 || !a3)
  {
    FontsWithURL = (id)CGFontCreateFontsWithURL();
    do
      v8 = (void *)__ldaxr((unint64_t *)&FontsWithURL);
    while (__stlxr(0, (unint64_t *)&FontsWithURL));

    v9 = v8;
    v10 = v9;
    if (v9)
    {
      Count = CFArrayGetCount(v9);

      if (Count < 1)
      {
LABEL_15:
        v7 = v8;
        goto LABEL_16;
      }
      v12 = v8;
      v10 = v12;
      if (v12)
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v12, 0);
      else
        ValueAtIndex = 0;
      TCFRef<__CTFont const*>::Retain(a4, ValueAtIndex);
    }

    goto LABEL_15;
  }
  v6 = CGFontCreateWithPathAndName();
  do
    v7 = (void *)__ldaxr(a4);
  while (__stlxr(v6, a4));
LABEL_16:

  v14 = atomic_load(a4);
  if (a1)
  {
    if (!v14)
    {
      v15 = CFURLGetBytes(a1, 0, 0);
      if (v15 != -1 && v15 <= 383)
      {
        *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[0] = v16;
        v25[1] = v16;
        v17 = (int64_t)v25;
        v23 = 0;
        v24 = 0;
        FontsWithURL = 0;
        v26 = (char *)v25;
        if (v15 <= -2)
          abort();
        v18 = v15 + 1;
        if (v15 <= 29)
          v26 = (char *)&FontsWithURL + v15 + 25;
        else
          v17 = (int64_t)operator new(v15 + 1);
        FontsWithURL = (id)v17;
        v24 = (char *)(v17 + v18);
        bzero((void *)v17, v18);
        v23 = (char *)(v17 + v18);
        v19 = CFURLGetBytes(a1, (UInt8 *)v17, v17 + v18 + ~v17);
        *((_BYTE *)FontsWithURL + v19) = 0;
        location = CFURLGetByteRangeForComponent(a1, kCFURLComponentNetLocation, 0).location;
        p_FontsWithURL = 0;
        if (location != -1 && sscanf((const char *)FontsWithURL + location, "iNmEmOrYcGfOnT_%p", &p_FontsWithURL) == 1)
          TCFRef<__CTFont const*>::Retain(a4, p_FontsWithURL);
        p_FontsWithURL = &FontsWithURL;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_FontsWithURL);
      }
    }
  }
}

void TBaseFont::TBaseFont(TBaseFont *this, id a2, __CFString *a3, __CFString *a4)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E15DE850;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = a2;
  *((_QWORD *)this + 11) = a3;
  *((_QWORD *)this + 12) = a4;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_QWORD *)((char *)this + 180) = 0x3000000010000000;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v7 = (_OWORD *)MEMORY[0x1E0C9D538];
  v8 = (_OWORD *)MEMORY[0x1E0C9D648];
  *((_DWORD *)this + 62) = 0;
  v9 = v8[1];
  *((_OWORD *)this + 19) = *v8;
  *((_OWORD *)this + 20) = v9;
  *((_OWORD *)this + 18) = *v7;
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 98) = 1065353216;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 1065353216;
  *((_WORD *)this + 220) = -1;
  *(_QWORD *)((char *)this + 460) = 0;
  *((_DWORD *)this + 117) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *(_QWORD *)((char *)this + 452) = 0;
  *((_QWORD *)this + 60) = (char *)this + 472;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 68) = (char *)this + 512;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  TBaseFont::Init(this, 0);
}

void TCFBase_NEW<CTFontDescriptor,TBaseFont const*>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  id v9;

  v4 = TCFBase<TDescriptor>::Allocate();
  if (v4)
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v4 + 48;
    *(_QWORD *)(v4 + 56) = 0;
    *(_DWORD *)(v4 + 64) = 0x80000000;
    *(_QWORD *)(v4 + 72) = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_QWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = 0;
    v9 = (id)v4;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a1 = v8;

  }
  else
  {
    *a1 = 0;
  }
}

char *TInlineBufferAllocator<DecorationOverride,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 960);
  result = *(char **)(a1 + 960);
  v4 = &result[32 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(32 * a2);
  }
  return result;
}

uint64_t TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::DestroyCache(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  if (result)
  {
    v1 = result;
    for (i = 0; i != -768; i -= 48)
    {
      *(_QWORD *)(v1 + i + 744) = &off_1E15DDA18;

    }
    JUMPOUT(0x186DC03ACLL);
  }
  return result;
}

uint64_t TDescriptorSource::GetCache(void)::{lambda(void *)#1}::__invoke()
{
  unint64_t *v0;
  void *v1;
  void *v2;
  uint64_t result;

  v0 = (unint64_t *)operator new();
  *v0 = objc_opt_new();
  v1 = (void *)atomic_load(v0);
  objc_msgSend(v1, "setName:", CFSTR("com.apple.CoreText.TDescriptorSource"));
  v2 = (void *)atomic_load(v0);
  objc_msgSend(v2, "setEvictsObjectsWithDiscardedContent:", 0);
  qword_1ECDE7760 = (uint64_t)v0;
  result = GetLocaleChangedCount();
  dword_1ECDE76E8 = result;
  return result;
}

void std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v22 = &v3[32 * a2];
    goto LABEL_21;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 5)
  {
    bzero(a1[1], 32 * v6);
    v22 = &v4[32 * v6];
LABEL_21:
    a1[1] = v22;
    return;
  }
  if (a2 >> 59)
    abort();
  v8 = (unint64_t)(a1 + 3);
  v9 = v7 - v3;
  v10 = v9 >> 4;
  if (v9 >> 4 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(a1 + 3), v11);
  v13 = &v12[32 * v5];
  v14 = &v12[32 * v11];
  bzero(v13, 32 * v6);
  v15 = &v13[32 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_OWORD *)v16 - 1);
      *((_OWORD *)v13 - 2) = *((_OWORD *)v16 - 2);
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 32;
      v16 -= 32;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v13;
  a1[1] = v15;
  v19 = a1[2];
  a1[2] = v14;
  if (v16)
  {
    v20 = (char *)(a1 + 123);
    if (v8 <= (unint64_t)v16 && v20 > v16)
    {
      if (v19 == *(char **)v20)
        *(_QWORD *)v20 = v16;
    }
    else
    {
      operator delete(v16);
    }
  }
}

void TLRUCacheImp<TRequestCacheNode,16ul>::RemoveAll(uint64_t a1)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t j;
  unint64_t v5[2];
  id v6[2];
  id v7[2];

  *(_DWORD *)a1 = TGenerationSeed::sGeneration;
  v5[0] = (unint64_t)&off_1E15DDA18;
  v5[1] = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v7 = 0u;
  for (i = 24; i != 792; i += 48)
    TRequestCacheNode::operator=((unint64_t *)(a1 + i), v5);
  v5[0] = (unint64_t)&off_1E15DDA18;

  *(_OWORD *)(a1 + 8) = xmmword_184931350;
  v3 = (uint64_t *)(a1 + 32);
  for (j = 1; j != 16; ++j)
  {
    *v3 = j;
    v3 += 6;
  }
  *(_QWORD *)(a1 + 752) = 0;
}

void TBaseFont::~TBaseFont(TBaseFont *this)
{
  TBaseFont::~TBaseFont(this);
  JUMPOUT(0x186DC03ACLL);
}

{
  unint64_t v3;
  void *v4;
  const __CFURL *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t i;
  _QWORD *v12;
  char *v13;
  char *v14;
  _QWORD *v16;
  char *v17;
  TBaseFont *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t j;
  UInt8 __b[1025];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E15DE850;
  if (atomic_load((unint64_t *)this + 10))
  {
    v3 = atomic_load((unint64_t *)this + 10);
    if (v3)
    {
      v4 = (void *)atomic_load(TCGFontCache::GetCache(this));
      objc_msgSend(v4, "removeObjectForKey:", v3);
    }
  }
  if ((*((_DWORD *)this + 45) & 0x10000000) == 0)
  {
    memset(__b, 170, sizeof(__b));
    v5 = (const __CFURL *)atomic_load((unint64_t *)this + 10);
    if (CFURLGetFileSystemRepresentation(v5, 1u, __b, 1025))
      FPFontPurgeCaches();
  }
  v6 = *((_QWORD *)this + 26);
  if (v6)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::~__hash_table(v6 + 16);
    MEMORY[0x186DC03AC](v6, 0x10E0C4057E07A5FLL);
  }
  v7 = *((_QWORD *)this + 27);
  if (v7)
  {
    v8 = std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table(v7);
    MEMORY[0x186DC03AC](v8, 0x10A0C408EF24B1CLL);
  }
  v9 = *((_QWORD *)this + 30);
  if (v9)
    MEMORY[0x186DC03AC](v9, 0x1000C4089CA3EB1);
  v10 = (id *)*((_QWORD *)this + 74);
  if ((unint64_t)v10 + 1 >= 2)
  {

    MEMORY[0x186DC03AC](v10, 0xE0C40F3C7A20ELL);
  }
  for (i = 584; i != 544; i -= 8)

  v12 = (_QWORD *)*((_QWORD *)this + 61);
  if (v12)
  {
    std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 488, v12);
    v13 = (char *)*((_QWORD *)this + 61);
    v14 = (char *)this + 544;
    if ((char *)this + 512 <= v13 && v14 > v13)
    {
      if (*((_QWORD *)this + 63) == *((_QWORD *)this + 68))
        *(_QWORD *)v14 = v13;
    }
    else
    {
      operator delete(v13);
    }
  }
  v16 = (_QWORD *)*((_QWORD *)this + 56);
  if (v16)
  {
    std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 448, v16);
    v17 = (char *)*((_QWORD *)this + 56);
    if ((char *)this + 472 > v17 || (char *)this + 480 <= v17)
    {
      operator delete(v17);
    }
    else if (*((_QWORD *)this + 58) == *((_QWORD *)this + 60))
    {
      *((_QWORD *)this + 60) = v17;
    }
  }
  v18 = (TBaseFont *)((char *)this + 440);
  do
  {
    v19 = (_QWORD *)*((_QWORD *)v18 - 3);
    if (v19)
    {
      do
      {
        v20 = (_QWORD *)*v19;
        OTL::Lookup::~Lookup((OTL::Lookup *)(v19 + 3));
        operator delete(v19);
        v19 = v20;
      }
      while (v20);
    }
    v22 = (void *)*((_QWORD *)v18 - 5);
    v18 = (TBaseFont *)((char *)v18 - 40);
    v21 = v22;
    *(_QWORD *)v18 = 0;
    if (v22)
      operator delete(v21);
  }
  while (v18 != (TBaseFont *)((char *)this + 360));

  for (j = 168; j != 144; j -= 8)
  do
  {

    j -= 8;
  }
  while (j != 120);

}

void CTFontDescriptor::CTFontDescriptor(CTFontDescriptor *this, CGFont *a2, const __CFDictionary *a3)
{
  TInstanceFont *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = TDescriptor::Hash;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  v6 = (TInstanceFont *)operator new();
  TInstanceFont::TInstanceFont(v6, a2, a3);
  *((_QWORD *)this + 6) = &off_1E15DCAF0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0x80000000;
  *((_QWORD *)this + 9) = 0;
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  *((_QWORD *)this + 10) = v7;
  *((_QWORD *)this + 11) = 0;
}

double TFont::SwapPerThreadSize(TFont *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double *Table;
  double v6;

  v2 = 12.0;
  v3 = NAN;
  if (a2 != 0.0)
    v3 = a2;
  if (a2 == 12.0)
    v4 = 0.0;
  else
    v4 = v3;
  Table = (double *)GetTable();
  if (Table)
  {
    v6 = Table[10];
    Table[10] = v4;
    *((_QWORD *)Table + 11) = ThreadSpecificNullDestructor<unsigned long>;
    if (v6 != 0.0)
    {
      if (v6 == NAN)
        return 0.0;
      else
        return v6;
    }
  }
  return v2;
}

void *GetTable(void)
{
  void *v0;
  _OWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  if (GetInternalKey(void)::sOnce != -1)
    dispatch_once_f(&GetInternalKey(void)::sOnce, 0, (dispatch_function_t)GetInternalKey(void)::$_0::__invoke);
  v0 = pthread_getspecific(0x5FuLL);
  if (!v0)
  {
    v1 = (_OWORD *)operator new();
    v0 = v1;
    v2 = 0;
    *v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
    v1[3] = 0u;
    v1[4] = 0u;
    v1[5] = 0u;
    v1[6] = 0u;
    v1[7] = 0u;
    v1[8] = 0u;
    do
    {
      v3 = &v1[v2];
      *v3 = 0;
      v3[1] = NullDestructor;
      ++v2;
    }
    while (v2 != 9);
    if (GetInternalKey(void)::sOnce != -1)
      dispatch_once_f(&GetInternalKey(void)::sOnce, 0, (dispatch_function_t)GetInternalKey(void)::$_0::__invoke);
    pthread_setspecific(0x5FuLL, v0);
  }
  return v0;
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  int *v1;
  int *inited;

  if (!font)
    return 0.0;
  v1 = (int *)*((_QWORD *)font + 5);
  if (v1[12])
    inited = v1 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v1);
  return *((double *)inited + 4);
}

uint64_t CTFontGetUIFontDesign(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 536))(v1);
  else
    return 0;
}

unint64_t CTFontDescriptorCreateWithAttributesAndOptions(void *a1, int a2)
{
  void *v2;
  unint64_t v3;
  id v5;
  id v6;
  int v7;
  void *v8;

  v8 = a1;
  v7 = a2;
  if (!a1)
    return 0;
  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&,unsigned int &>(&v8, &v7, (unint64_t *)&v5);
  do
    v2 = (void *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  v6 = v2;

  do
    v3 = __ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  return v3;
}

void TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>(uint64_t *a1@<X0>, const __CFDictionary **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  TDescriptor *v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = *a1;
    v9 = *a2;
    v10 = (TDescriptor *)(v6 + 48);
    v7[2] = 0;
    v7[3] = TDescriptor::Hash;
    v7[4] = 0;
    v7[5] = v10;
    TDescriptor::TDescriptor(v10, *(const TDescriptor **)(v8 + 40), v9);
    v12 = v7;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    *a3 = 0;
  }
}

void TDescriptor::TDescriptor(TDescriptor *this, const TDescriptor *a2, const __CFDictionary *a3)
{
  unint64_t *v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  const __CFDictionary *v13;
  unint64_t *v14;
  CFIndex Count;
  __int128 v16;
  char *v17;
  void **v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  CFTypeID v31;
  const TBaseFont *v32;
  int v33;
  unsigned int v34;
  const void *v35;
  CFTypeRef v36;
  void *v37;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  const __CFDictionary *Value;
  const __CFDictionary *v41;
  CFTypeID v42;
  const __CFDictionary *v43;
  CFTypeRef v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  const __CFArray *v51;
  const __CFArray *v52;
  CFTypeID v53;
  void *v54;
  const __CFDictionary *v55;
  const __CFDictionary *v56;
  const __CFArray *v57;
  __CFDictionary *v58;
  __CFArray *v59;
  __CFDictionary *v60;
  const void *v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  CFTypeID v64;
  TBaseFont *v65;
  void *v66;
  const __CFDictionary *v67;
  const __CFDictionary *v68;
  const __CFDictionary *v69;
  __CFDictionary *v70;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v72;
  uint64_t *SymbolicTraitsFromTraits;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  CFTypeRef v77;
  int cf1;
  CFTypeRef cf1a;
  id v80;
  id v81;
  void ***p_keys;
  void **keys;
  void *v84;
  uint64_t v85;
  _OWORD v86[15];
  _OWORD *v87;
  uint64_t v88;
  CFRange v89;

  v88 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E15DCAF0;
  *((_QWORD *)this + 1) = 0;
  v6 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
  v7 = (unsigned int *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v8 = atomic_load((unint64_t *)a2 + 4);
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 180) & 0x10000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 | 0x80000000, v7));
      v10 = (unsigned int *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  *((_QWORD *)this + 4) = v8;
  v12 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v12;
  v81 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttributes(a2, (unint64_t *)&v81);
  v80 = (id)0xAAAAAAAAAAAAAAAALL;
  v13 = (const __CFDictionary *)atomic_load((unint64_t *)&v81);
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v80, v13);
  if (a3)
  {
    v14 = (unint64_t *)(v7 + 4);
    cf1 = *((_DWORD *)a2 + 4);
    if (cf1 < 0)
    {
      Count = CFDictionaryGetCount(a3);
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v86[14] = v16;
      v86[13] = v16;
      v86[12] = v16;
      v86[11] = v16;
      v86[10] = v16;
      v86[9] = v16;
      v86[8] = v16;
      v86[7] = v16;
      v86[6] = v16;
      v86[5] = v16;
      v86[4] = v16;
      v86[3] = v16;
      v86[2] = v16;
      v86[1] = v16;
      v86[0] = v16;
      v84 = 0;
      v85 = 0;
      keys = 0;
      v87 = v86;
      if (Count)
      {
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&keys, Count);
        v17 = (char *)v84;
        bzero(v84, 8 * Count);
        v84 = &v17[8 * Count];
        v18 = keys;
      }
      else
      {
        v18 = 0;
      }
      CFDictionaryGetKeysAndValues(a3, (const void **)v18, 0);
      if (qword_1ECDE7650 != -1)
        dispatch_once_f(&qword_1ECDE7650, 0, (dispatch_function_t)TDescriptor::TDescriptor(TDescriptor const&,__CFDictionary const*)::$_0::__invoke);
      if (Count < 1)
      {
LABEL_18:
        v19 = atomic_load((unint64_t *)a2 + 4);
        if (v19)
        {
          v20 = (unsigned int *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        do
          v22 = __ldxr(v14);
        while (__stxr(v19, v14));
        do
          v23 = __ldxr(v7);
        while (__stxr(v23 | 0x80000000, v7));
        if (v22)
        {
          v24 = (unsigned int *)(v22 + 8);
          do
          {
            v25 = __ldxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            __dmb(9u);
            (*(void (**)(unint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
        }
      }
      else
      {
        while (CFSetContainsValue((CFSetRef)qword_1ECDE7648, *v18))
        {
          ++v18;
          if (!--Count)
            goto LABEL_18;
        }
      }
      do
        v27 = __ldxr(v7);
      while (__stxr(v27 | 0x10000, v7));
      p_keys = &keys;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_keys);
    }
    if ((*v7 & 0x80000000) != 0)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("NSCTFontTraitsAttribute"));
      if (Value)
      {
        v41 = Value;
        v42 = CFGetTypeID(Value);
        if (v42 == CFDictionaryGetTypeID())
        {
          if (CFDictionaryContainsKey(v41, CFSTR("NSCTFontGradeTrait")))
            goto LABEL_103;
          if (CFDictionaryContainsKey(v41, CFSTR("NSCTFontUIFontDesignTrait")))
          {
            v43 = (const __CFDictionary *)atomic_load((unint64_t *)&v80);
            v77 = CFDictionaryGetValue(v43, CFSTR("NSCTFontUIFontDesignTrait"));
            v44 = CFDictionaryGetValue(v41, CFSTR("NSCTFontUIFontDesignTrait"));
            if (v77 != v44 && (!v77 || !v44 || !CFEqual(v77, v44)))
              goto LABEL_103;
          }
        }
      }
      if (CFDictionaryContainsKey(a3, CFSTR("CTFontLanguageAwareLineHeightRatioAttribute"))
        || CFDictionaryContainsKey(a3, CFSTR("CTFontLineSpacingOverrideAttribute"))
        || CFDictionaryContainsKey(a3, CFSTR("CTFontLegibilityWeightAttribute"))
        || CFDictionaryContainsKey(a3, CFSTR("CTFontIgnoreLegibilityWeightAttribute")))
      {
        goto LABEL_103;
      }
      if ((*((_DWORD *)a2 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(a2, 0, 0.0);
      v76 = atomic_load((unint64_t *)a2 + 4);
      if (v76)
      {
        if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v76 + 840))(v76)
          && (CFDictionaryContainsKey(a3, CFSTR("NSFontSizeAttribute"))
           || CFDictionaryContainsKey(a3, CFSTR("NSCTFontOpticalSizeAttribute"))))
        {
LABEL_103:
          do
            v45 = __ldxr(v7);
          while (__stxr(v45 & 0x7FFFFFFF, v7));
          do
            v46 = __ldxr(v14);
          while (__stxr(0, v14));
          if (v46)
          {
            v47 = (unsigned int *)(v46 + 8);
            do
            {
              v48 = __ldxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              __dmb(9u);
              (*(void (**)(unint64_t))(*(_QWORD *)v46 + 8))(v46);
            }
          }
        }
      }
    }
    v28 = (void *)atomic_load((unint64_t *)&v80);
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke, v28);
    v29 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("NSCTFontVariationAttribute"));
    if (!v29)
      goto LABEL_68;
    v30 = v29;
    v31 = CFGetTypeID(v29);
    if (v31 != CFDictionaryGetTypeID())
      goto LABEL_68;
    if ((*((_DWORD *)a2 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(a2, 0, 0.0);
    v32 = (const TBaseFont *)atomic_load((unint64_t *)a2 + 4);
    if (!v32)
      goto LABEL_68;
    if ((cf1 & 0x80000000) == 0)
    {
      v33 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
      do
        v34 = __ldaxr(v7);
      while (__stlxr(v34 | v33, v7));
    }
    v35 = CFDictionaryGetValue(v30, &unk_1E1614B60);
    if (!v35)
    {
LABEL_67:
      TDescriptor::MergeVariationWithBase(this, v32, v30, (TCFMutableDictionary *)&v80);
LABEL_68:
      v51 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("NSCTFontFeatureSettingsAttribute"));
      if (v51)
      {
        v52 = v51;
        v53 = CFGetTypeID(v51);
        if (v53 == CFArrayGetTypeID())
        {
          v54 = (void *)atomic_load((unint64_t *)&v81);
          v55 = v54;
          v56 = v55;
          if (v55)
            v57 = (const __CFArray *)CFDictionaryGetValue(v55, CFSTR("NSCTFontFeatureSettingsAttribute"));
          else
            v57 = 0;

          keys = (void **)0xAAAAAAAAAAAAAAAALL;
          TCFMutableArray::TCFMutableArray((TCFMutableArray *)&keys, v57);
          v59 = (__CFArray *)atomic_load((unint64_t *)&keys);
          v89.length = CFArrayGetCount(v52);
          v89.location = 0;
          CFArrayAppendArray(v59, v52, v89);
          v60 = (__CFDictionary *)atomic_load((unint64_t *)&v80);
          v61 = (const void *)atomic_load((unint64_t *)&keys);
          CFDictionarySetValue(v60, CFSTR("NSCTFontFeatureSettingsAttribute"), v61);

        }
        else
        {
          v58 = (__CFDictionary *)atomic_load((unint64_t *)&v80);
          CFDictionaryRemoveValue(v58, CFSTR("NSCTFontFeatureSettingsAttribute"));
        }
      }
      v62 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("NSCTFontTraitsAttribute"));
      if (v62)
      {
        v63 = v62;
        v64 = CFGetTypeID(v62);
        if (v64 == CFDictionaryGetTypeID())
        {
          if ((*((_DWORD *)a2 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(a2, 0, 0.0);
          v65 = (TBaseFont *)atomic_load((unint64_t *)a2 + 4);
          if (v65)
          {
            v66 = (void *)atomic_load((unint64_t *)&v81);
            v67 = v66;
            v68 = v67;
            if (v67)
              v69 = (const __CFDictionary *)CFDictionaryGetValue(v67, CFSTR("NSCTFontTraitsAttribute"));
            else
              v69 = 0;

            if ((((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v65 + 856))(v65) & 1) != 0
               || (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v65 + 536))(v65))
              && v69
              && CFDictionaryGetCount(v69))
            {
              MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v69);
              CFDictionaryApplyFunction(v63, (CFDictionaryApplierFunction)SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke, MutableCopy);
              v72 = (__CFDictionary *)atomic_load((unint64_t *)&v80);
              CFDictionarySetValue(v72, CFSTR("NSCTFontTraitsAttribute"), MutableCopy);

            }
            SymbolicTraitsFromTraits = (uint64_t *)GetSymbolicTraitsFromTraits(v63);
            if ((_DWORD)SymbolicTraitsFromTraits)
              TBaseFont::SystemUIFontAttributesForSymbolicTraits(v65, (TCFMutableDictionary *)&v80, SymbolicTraitsFromTraits, (int)SymbolicTraitsFromTraits, a2);
          }
        }
        else
        {
          v70 = (__CFDictionary *)atomic_load((unint64_t *)&v80);
          CFDictionaryRemoveValue(v70, CFSTR("NSCTFontTraitsAttribute"));
        }
      }
      goto LABEL_91;
    }
    v36 = v35;
    keys = (void **)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(void ***__return_ptr, const TBaseFont *))(*(_QWORD *)v32 + 112))(&keys, v32);
    v37 = (void *)atomic_load((unint64_t *)&keys);
    v38 = v37;
    if (v38)
    {
      v39 = v38;
      cf1a = CFDictionaryGetValue(v38, &unk_1E1614B60);

      if (cf1a == v36 || cf1a && CFEqual(cf1a, v36))
        goto LABEL_66;
    }
    else
    {

    }
    do
      v50 = __ldxr(v7);
    while (__stxr(v50 & 0xFFFF7FFF, v7));
LABEL_66:

    goto LABEL_67;
  }
  do
LABEL_91:
    v74 = __ldaxr((unint64_t *)&v80);
  while (__stlxr(0, (unint64_t *)&v80));
  do
    v75 = (void *)__ldaxr(v6);
  while (__stlxr(v74, v6));

}

void SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (key)
  {
    if (value)
      CFDictionarySetValue(theDict, key, value);
  }
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  TDescriptor *v3;
  const __CTFontDescriptor *v4;
  void *v5;
  const __CTFont *v6;
  const __CTFontDescriptor *v8;
  id v9;
  id v10;
  id v11;
  CGAffineTransform *v12;
  CGFloat v13;
  CTFontDescriptorRef v14;

  v14 = descriptor;
  v13 = size;
  v12 = (CGAffineTransform *)matrix;
  if (!descriptor)
    return 0;
  v3 = (TDescriptor *)*((_QWORD *)descriptor + 5);
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CreateMatchingDescriptor(v3, 0, size, 0, (TDescriptor *)&v11);
  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v11);
  v8 = v4;
  TCFBase_NEW<CTFont,__CTFontDescriptor const*,double &,CGAffineTransform const*&,__CTFontDescriptor const*&>(&v8, &v13, &v12, &v14, (unint64_t *)&v9);
  do
    v5 = (void *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  v10 = v5;

  do
    v6 = (const __CTFont *)__ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));

  return v6;
}

void TDescriptor::CreateMatchingDescriptor(TDescriptor *this@<X0>, const __CFSet *a2@<X1>, double a3@<D0>, uint64_t a4@<X2>, TDescriptor *a5@<X8>)
{
  uint64_t v5;
  int v10;
  const __CFDictionary *v11;
  const __CFNumber *Value;
  const __CFNumber *v13;
  CFTypeID v14;
  SInt32 IntValue;
  const __CFDictionary *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  void *Attributes;
  unsigned int v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  CFTypeID v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  id v34;
  unint64_t v35;
  _QWORD v36[2];
  unint64_t v37[2];
  uint64_t v38;
  int v39;

  v5 = a4;
  v39 = -1431655766;
  v10 = *((_DWORD *)this + 4) | a4 & 0x10485;
  v39 = v10;
  if (qword_1ECDE7640 != -1)
    dispatch_once_f(&qword_1ECDE7640, 0, (dispatch_function_t)TDescriptor::GetSystemUIFontOptions(void)::$_0::__invoke);
  if ((_MergedGlobals_13 & v10) == 0)
  {
    atomic_load((unint64_t *)this + 1);
    v16 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
    if (v16)
    {
      if (CFDictionaryGetValue(v16, CFSTR("NSCTFontUIUsageAttribute")))
        v39 |= 0x404u;
    }
  }
  atomic_load((unint64_t *)this + 1);
  v11 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
  if (v11)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("NSCTFontEnabledAttribute"));
    if (Value)
    {
      v13 = Value;
      LODWORD(v34) = 0;
      v14 = CFGetTypeID(Value);
      if (v14 == CFNumberGetTypeID() || v14 == CFBooleanGetTypeID())
      {
        CFNumberGetValue(v13, kCFNumberIntType, &v34);
        IntValue = (int)v34;
      }
      else if (v14 == CFStringGetTypeID())
      {
        IntValue = CFStringGetIntValue((CFStringRef)v13);
      }
      else
      {
        IntValue = 0;
      }
      v5 = (IntValue != 0) | (unint64_t)v5;
    }
  }
  if (a2)
  {
    TDescriptor::CreateMatchingDescriptorInternal(a5, this, a2, v5);
    return;
  }
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v17 = *((_QWORD *)this + 4);
  v38 = v17;
  if (v17 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 840))(v17)
    || (v18 = v39, a3 <= 0.0) && v39 == *((_DWORD *)this + 4))
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, v5, 0.0);
    v19 = atomic_load((unint64_t *)this + 4);
    v38 = v19;
    if (!v39)
    {
      if (v19 && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v19 + 16))(v19) == 1414809156)
      {
        v39 = 1028;
      }
      else
      {
        atomic_load((unint64_t *)this + 1);
        v25 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
        if (v25)
        {
          v25 = (const __CFDictionary *)CFDictionaryGetValue(v25, CFSTR("NSCTFontTraitsAttribute"));
          if (v25)
          {
            v26 = v25;
            v27 = CFGetTypeID(v25);
            if (v27 == CFDictionaryGetTypeID())
              v25 = v26;
            else
              v25 = 0;
          }
        }
        v28 = v25;
        v29 = v28;
        if (v28 && CFDictionaryContainsKey(v28, CFSTR("NSCTFontUIFontDesignTrait")))
          v39 |= 0x404u;

      }
    }
    if ((*((_DWORD *)this + 4) & 0x8000) != 0)
    {
      v22 = 0;
      v39 |= 0x8000u;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v36[0] = 0xAAAAAAAAAAAAAAAALL;
    Attributes = (void *)TDescriptor::GetAttributes(this, 1);
    v34 = &off_1E15DCAF0;
    v35 = 0;
    LODWORD(v36[0]) = v18 & 0x7FFFFFFF;
    v37[0] = 0;
    v37[1] = 0;
    v36[1] = 0;
    if ((v18 & 0x40000000) != 0)
    {
      do
        v21 = __ldxr((unsigned int *)v36);
      while (__stxr(v21 | 0x80000000, (unsigned int *)v36));
    }
    TCFRef<__CTFont const*>::Retain(&v35, Attributes);
    if ((v36[0] & 0x80000000) == 0)
      TDescriptor::InitBaseFont((TDescriptor *)&v34, v5, a3);
    v22 = atomic_load(v37);
    v38 = v22;
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v39 |= v36[0] & 0x8404;
    TDescriptor::~TDescriptor((TDescriptor *)&v34);
  }
  if (!v38)
  {
    *(_QWORD *)a5 = 0;
    if (!v22)
      return;
    goto LABEL_55;
  }
  TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>(&v38, &v39, (unint64_t *)&v34);
  do
    v30 = __ldaxr((unint64_t *)&v34);
  while (__stlxr(0, (unint64_t *)&v34));
  *(_QWORD *)a5 = v30;

  if (v22)
  {
LABEL_55:
    v31 = (unsigned int *)(v22 + 8);
    do
    {
      v32 = __ldxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      __dmb(9u);
      (*(void (**)(unint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
  }
}

void TDescriptor::~TDescriptor(TDescriptor *this)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E15DCAF0;
  v2 = atomic_load((unint64_t *)this + 4);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }

}

{
  TDescriptor::~TDescriptor(this);
  JUMPOUT(0x186DC03ACLL);
}

void TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>(uint64_t *a1@<X0>, int *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    v7 = *a1;
    v8 = *a2;
    *(_QWORD *)(v6 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    *(_QWORD *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 64) = v8 | 0x80000000;
    *(_QWORD *)(v6 + 72) = 0;
    if (v7)
    {
      v9 = (unsigned int *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_QWORD *)(v6 + 80) = v7;
    *(_QWORD *)(v6 + 88) = 0;
    v12 = (id)v6;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    *a3 = 0;
  }
}

void TCFBase_NEW<CTFont,__CTFontDescriptor const*,double &,CGAffineTransform const*&,__CTFontDescriptor const*&>(const __CTFontDescriptor **a1@<X0>, double *a2@<X1>, CGAffineTransform **a3@<X2>, const __CTFontDescriptor **a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  const __CTFontDescriptor *v12;
  double v13;
  CGAffineTransform *v14;
  const __CTFontDescriptor *v15;
  TFont *v16;
  unint64_t v17;
  id v18;

  v10 = TCFBase<TFont>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = *a1;
    v13 = *a2;
    v14 = *a3;
    v15 = *a4;
    v16 = (TFont *)(v10 + 48);
    v11[2] = 0;
    v11[3] = TFont::Hash;
    v11[4] = 0;
    v11[5] = v16;
    TFont::TFont(v16, v12, v13, v14, v15);
    v18 = v11;
    do
      v17 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    *a5 = v17;

  }
  else
  {
    *a5 = 0;
  }
}

uint64_t TCFBase<TFont>::Allocate()
{
  if (TCFBase<TFont>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TFont>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFont>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

void TFont::TFont(TFont *this, const __CTFontDescriptor *a2, double a3, CGAffineTransform *a4, const __CTFontDescriptor *a5)
{
  unint64_t *v9;
  const __CTFontDescriptor *v10;
  __int128 v11;
  uint64_t v12;

  *(_DWORD *)this = 0;
  v9 = (unint64_t *)((char *)this + 8);
  TFont::InitDescriptor(a2, (unint64_t *)this + 1);
  *((double *)this + 2) = TFont::InitSize(a5, a3, v10);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0x80000000;
  TFont::InitMatrix((TFont *)a4, (const CGAffineTransform *)a5, (_QWORD *)this + 5);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  v11 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 120) = v11;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = TFont::InitBaseFont(v12, v9);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 122) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  TFont::SetExtras(this, a5, 0);
  TFont::SetFlags(this, 0, a5);
  TFont::SetOpticalSize(this, a5);
  TFont::AddFontSpecificFeatureSettings(this);
}

void TFont::AddFontSpecificFeatureSettings(TFont *this)
{
  uint64_t v2;
  TFont *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *((_QWORD *)this + 50);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 712))(v2))
    goto LABEL_7;
  if (IsGB18030ComplianceRequired(void)::once != -1)
    dispatch_once_f(&IsGB18030ComplianceRequired(void)::once, 0, (dispatch_function_t)IsGB18030ComplianceRequired(void)::$_0::__invoke);
  if (IsGB18030ComplianceRequired(void)::kGB18030ComplianceRequired)
  {
    v3 = this;
    v4 = 444;
    v5 = 1;
    v6 = 1;
  }
  else
  {
LABEL_7:
    if ((*(_BYTE *)this & 4) == 0)
      return;
    v3 = this;
    v4 = 35;
    v5 = 14;
    v6 = 0;
  }
  TFont::AppendFeatureSettingWithTypeAndSelector((uint64_t)v3, v4, v5, v6);
}

double TFont::InitSize(TFont *this, double a2, const __CTFontDescriptor *a3)
{
  double v3;
  const __CFNumber *v4;
  const __CFNumber *v5;
  CFTypeID v6;
  double *Table;
  uint64_t v8;
  double valuePtr;

  v3 = a2;
  valuePtr = a2;
  if (a2 <= 0.0)
  {
    if (this)
    {
      v4 = (const __CFNumber *)CTFontDescriptorCopyAttribute(this, CFSTR("NSFontSizeAttribute"));
      if (v4)
      {
        v5 = v4;
        v6 = CFGetTypeID(v4);
        if (v6 == CFNumberGetTypeID())
          CFNumberGetValue(v5, kCFNumberDoubleType, &valuePtr);
        CFRelease(v5);
        v3 = valuePtr;
      }
    }
    if (v3 <= 0.0)
    {
      Table = (double *)GetTable();
      v3 = 12.0;
      if (Table)
      {
        v8 = *((_QWORD *)Table + 10);
        if (v8)
        {
          if (v8 == -1)
            return 0.0;
          else
            return Table[10];
        }
      }
    }
  }
  return v3;
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  const void *v2;
  id v4;

  v2 = 0;
  if (descriptor && attribute)
  {
    TDescriptor::CopyAttributeExternal(*((TDescriptor **)descriptor + 5), attribute, (unint64_t *)&v4);
    do
      v2 = (const void *)__ldaxr((unint64_t *)&v4);
    while (__stlxr(0, (unint64_t *)&v4));

  }
  return v2;
}

void TDescriptor::CopyAttributeExternal(TDescriptor *this@<X0>, const __CFString *cf1@<X1>, unint64_t *a3@<X8>)
{
  const __CFDictionary *v6;
  void *Value;
  unint64_t FontAttributeID;
  uint64_t v9;
  unint64_t v10;

  atomic_load((unint64_t *)this + 1);
  v6 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
  if (v6 && (Value = (void *)CFDictionaryGetValue(v6, cf1)) != 0)
  {
    *a3 = (unint64_t)Value;
  }
  else if (CFEqual(cf1, CFSTR("NSFontDescriptorHiddenAttribute"))
         || CFEqual(cf1, CFSTR("NSFontDescriptorNegativeAttribute"))
         || (FontAttributeID = (unint64_t)GetFontAttributeID(cf1), v9 = FontAttributeID, FontAttributeID <= 0x36)
         && ((1 << FontAttributeID) & 0x4B080000727F00) != 0)
  {
    *a3 = 0;
  }
  else
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, 0, 0.0);
    v10 = atomic_load((unint64_t *)this + 4);
    if (v10)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v9);
    else
      TDescriptor::CopyAttributeForNonNormalized(this, 0, v9, a3);
  }
}

const void *GetFontAttributeID(const __CFString *key)
{
  if (GetFontAttributeID(__CFString const*)::once != -1)
    dispatch_once_f(&GetFontAttributeID(__CFString const*)::once, 0, (dispatch_function_t)GetFontAttributeID(__CFString const*)::$_0::__invoke);
  return CFDictionaryGetValue((CFDictionaryRef)GetFontAttributeID(__CFString const*)::sFontAttributes, key);
}

unint64_t TFont::InitBaseFont(uint64_t a1, unint64_t *a2)
{
  void *v4;
  TDescriptor **v5;
  TDescriptor **v6;
  TDescriptor *v7;
  unint64_t v8;
  TDescriptor *v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  _BOOL4 v14;
  void *v15;
  TDescriptor **v16;
  TDescriptor **v17;
  TDescriptor *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v22;
  id v23;

  if (!atomic_load(a2))
    return 0;
  v4 = (void *)atomic_load(a2);
  v5 = v4;
  v6 = v5;
  v7 = v5[5];
  if ((*((_DWORD *)v7 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v5[5], 0, 0.0);
  v8 = atomic_load((unint64_t *)v7 + 4);

  if (v8)
  {
    v10 = (unsigned int *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    v12 = atomic_load(a2);
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 40) + 16);
    v14 = (TDescriptor::GetSystemUIFontOptions(v9) & v13) != 0;
    v23 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v22);
    TDescriptorSource::CreateDefaultDescriptor(v14, (unint64_t *)&v23);
    v15 = (void *)atomic_load((unint64_t *)&v23);
    v16 = v15;
    v17 = v16;
    v18 = v16[5];
    if ((*((_DWORD *)v18 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v16[5], 0, 0.0);
    v8 = atomic_load((unint64_t *)v18 + 4);
    if (v8)
    {
      v19 = (unsigned int *)(v8 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

  }
  return v8;
}

void TFont::InitMatrix(TFont *this@<X0>, const CGAffineTransform *a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v6;
  void *v7;
  __int128 v8;
  unint64_t *v9;
  const __CFDictionary *v10;
  const __CFData *v11;
  const __CFData *v12;
  CFIndex Length;
  float32x4_t v14;
  float32x4_t v15;
  const __CFDictionary *v16;
  void *Value;
  _OWORD *v18;
  __int128 v19;
  float64x2_t v20;
  float64x2_t v21;
  int64x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  CFRange v26;
  CFRange v27;

  v25 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    if (!a2)
      goto LABEL_23;
    v9 = (unint64_t *)(*(_QWORD *)&a2->ty + 8);
    atomic_load(v9);
    v10 = (const __CFDictionary *)atomic_load(v9);
    if (v10 && (v11 = (const __CFData *)CFDictionaryGetValue(v10, CFSTR("NSCTFontMatrixAttribute"))) != 0)
    {
      v12 = v11;
      v7 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
      if (!v7)
        goto LABEL_24;
      Length = CFDataGetLength(v12);
      if (Length < 16)
      {
        v18 = (_OWORD *)MEMORY[0x1E0C9BAA8];
        v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        *((_OWORD *)v7 + 2) = v19;
        *(_OWORD *)v7 = *v18;
        v20 = *((float64x2_t *)v7 + 2);
LABEL_21:
        v22 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)v7, (float64x2_t)xmmword_18492FA90), (int8x16_t)vceqq_f64(*((float64x2_t *)v7 + 1), (float64x2_t)xmmword_18492E300)), (int8x16_t)vceqzq_f64(v20));
        if ((vandq_s8((int8x16_t)v22, (int8x16_t)vdupq_laneq_s64(v22, 1)).u64[0] & 0x8000000000000000) == 0)
          goto LABEL_24;
        MEMORY[0x186DC03AC](v7, 0x1000C40EED21634);
LABEL_23:
        v7 = 0;
        goto LABEL_24;
      }
      if ((unint64_t)Length < 0x19)
      {
        v23.i64[0] = -1;
        v23.i64[1] = -1;
        v27.location = 0;
        v27.length = 16;
        CFDataGetBytes(v12, v27, (UInt8 *)&v23);
        v21 = vcvt_hight_f64_f32(v23);
        *(float64x2_t *)v7 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
        *((float64x2_t *)v7 + 1) = v21;
      }
      else
      {
        v14.i64[0] = -1;
        v14.i64[1] = -1;
        v23 = v14;
        v24 = v14;
        v26.location = 0;
        v26.length = 32;
        CFDataGetBytes(v12, v26, (UInt8 *)&v23);
        v15 = v24;
        *(float32x4_t *)v7 = v23;
        *((float32x4_t *)v7 + 1) = v15;
      }
    }
    else
    {
      atomic_load(v9);
      v16 = (const __CFDictionary *)atomic_load(v9);
      if (v16)
        Value = (void *)CFDictionaryGetValue(v16, CFSTR("NSFontMatrixAttribute"));
      else
        Value = 0;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || strcmp((const char *)objc_msgSend(Value, "objCType"), "{CGAffineTransform=dddddd}"))
      {
        goto LABEL_23;
      }
      v7 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
      if (!v7)
        goto LABEL_24;
      objc_msgSend(Value, "getValue:", v7);
    }
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 5) = 0;
    v20 = 0uLL;
    goto LABEL_21;
  }
  v6 = operator new(0x30uLL, MEMORY[0x1E0DE4E10]);
  v7 = v6;
  if (v6)
  {
    v8 = *((_OWORD *)this + 1);
    *v6 = *(_OWORD *)this;
    v6[1] = v8;
    *((_QWORD *)v6 + 4) = 0;
    *((_QWORD *)v6 + 5) = 0;
  }
LABEL_24:
  *a3 = v7;
}

void TFont::SetFlags(TFont *this, int a2, const __CTFontDescriptor *a3)
{
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFDictionary *Value;
  int v15;
  unint64_t *v16;
  const __CFDictionary *v17;
  const __CFBoolean *v18;
  const __CFBoolean *v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  SInt32 IntValue;
  CFTypeID v25;
  char v26;
  unint64_t *v27;
  const __CFDictionary *v28;
  const __CFArray *v29;
  void *v31;
  const __CFDictionary *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID v35;
  const __CFDictionary *v36;
  __CFString *v37;
  __CFString *v38;
  CFTypeID v39;
  void *v40;
  __CFString *v41;
  __CFString *v42;
  int HasPrefix;
  id v44[8];
  __int128 v45;
  _OWORD v46[2];
  unint64_t v47;
  id v48;

  if (a3)
  {
    v6 = *((_QWORD *)a3 + 5);
    atomic_load((unint64_t *)(v6 + 8));
    v7 = (const __CFDictionary *)atomic_load((unint64_t *)(v6 + 8));
    if (v7
      && (v8 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("NSCTFontOrientationAttribute"))) != 0
      && (v9 = v8, v10 = CFGetTypeID(v8), v10 == CFNumberGetTypeID()))
    {
      LODWORD(v44[0]) = -1431655766;
      CFNumberGetValue(v9, kCFNumberIntType, v44);
      if (LODWORD(v44[0]) == 1)
      {
        a2 &= ~1u;
      }
      else if (LODWORD(v44[0]) == 2)
      {
        a2 |= 1u;
      }
    }
    else
    {
      TDescriptor::CopyAttributes(*((TDescriptor **)a3 + 5), (unint64_t *)v44);
      do
        v11 = (void *)__ldaxr((unint64_t *)v44);
      while (__stlxr(0, (unint64_t *)v44));

      v12 = v11;
      v13 = v12;
      if (v12)
        Value = (const __CFDictionary *)CFDictionaryGetValue(v12, CFSTR("NSCTFontTraitsAttribute"));
      else
        Value = 0;

      a2 |= (GetSymbolicTraitsFromTraits(Value) >> 11) & 1;
    }
    v16 = (unint64_t *)(v6 + 8);
    atomic_load((unint64_t *)(v6 + 8));
    v17 = (const __CFDictionary *)atomic_load((unint64_t *)(v6 + 8));
    if (v17)
    {
      v18 = (const __CFBoolean *)CFDictionaryGetValue(v17, CFSTR("CTFontCacheGlyphImagesAttribute"));
      if (v18)
      {
        v19 = v18;
        v20 = CFGetTypeID(v18);
        if (v20 == CFBooleanGetTypeID() && !CFBooleanGetValue(v19))
          a2 |= 2u;
      }
    }
    atomic_load(v16);
    v21 = (const __CFDictionary *)atomic_load(v16);
    if (v21)
    {
      v22 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("CTFontDisableColorBitmapSizeModAttribute"));
      if (v22)
      {
        v23 = v22;
        IntValue = -1431655766;
        LODWORD(v44[0]) = -1431655766;
        v25 = CFGetTypeID(v22);
        if (v25 == CFNumberGetTypeID() || v25 == CFBooleanGetTypeID())
        {
          CFNumberGetValue(v23, kCFNumberIntType, v44);
          v26 = 1;
          IntValue = (SInt32)v44[0];
        }
        else if (v25 == CFStringGetTypeID())
        {
          IntValue = CFStringGetIntValue((CFStringRef)v23);
          v26 = 1;
        }
        else
        {
          v26 = 0;
        }
        if ((v26 & (IntValue != 0)) != 0)
          a2 |= 0x10u;
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    atomic_load((unint64_t *)(v6 + 8));
    v28 = (const __CFDictionary *)atomic_load((unint64_t *)(v6 + 8));
    if (v28)
    {
      v29 = (const __CFArray *)CFDictionaryGetValue(v28, CFSTR("NSCTFontFeatureSettingsAttribute"));
      if (v29)
      {
        v48 = (id)0xAAAAAAAAAAAAAAAALL;
        CreateFeatureSettingsByConverting(v29, (unint64_t *)&v48);
        if (atomic_load((unint64_t *)&v48))
        {
          v45 = xmmword_184930840;
          memset(v46, 170, sizeof(v46));
          v47 = 0xAAAAAAAAFFFFFFFFLL;
          memset(v44, 170, sizeof(v44));
          v31 = (void *)atomic_load((unint64_t *)&v48);
          TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)v44, v31);
          if (TFont::ShouldPropagateFeatureSetting(this, (const TFontFeatureSettingList *)v44))
            a2 |= 4u;
          std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)v46);
          std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v44[5]);
          std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)&v44[1], (_QWORD *)v44[2]);

        }
      }
    }
    atomic_load(v27);
    v32 = (const __CFDictionary *)atomic_load(v27);
    if (v32
      && (v33 = (const __CFNumber *)CFDictionaryGetValue(v32, CFSTR("NSCTFontFallbackOptionAttribute"))) != 0
      && (v34 = v33, v35 = CFGetTypeID(v33), v35 == CFNumberGetTypeID()))
    {
      v44[0] = (id)0xAAAAAAAAAAAAAAAALL;
      CFNumberGetValue(v34, kCFNumberLongType, v44);
      v15 = (int)v44[0];
    }
    else
    {
      v15 = 3;
    }
    atomic_load((unint64_t *)(v6 + 8));
    v36 = (const __CFDictionary *)atomic_load((unint64_t *)(v6 + 8));
    if (v36)
    {
      v37 = (__CFString *)CFDictionaryGetValue(v36, CFSTR("CTFontDescriptorLanguageAttribute"));
      if (v37)
      {
        v38 = v37;
        v39 = CFGetTypeID(v37);
        if (v39 == CFStringGetTypeID())
        {
          v44[0] = (id)0xAAAAAAAAAAAAAAAALL;
          LanguageIdentifierByNormalizing(v38, 0, (unint64_t *)v44);
          v40 = (void *)atomic_load((unint64_t *)v44);
          v41 = v40;
          if (v41 == CFSTR("zh-"))
          {

          }
          else
          {
            v42 = v41;
            if (!v41)
            {

              goto LABEL_52;
            }
            HasPrefix = CFStringHasPrefix(v41, CFSTR("zh-"));

            if (!HasPrefix)
              goto LABEL_52;
          }
          a2 |= 0x20u;
LABEL_52:

        }
      }
    }
  }
  else
  {
    v15 = 3;
  }
  *(_DWORD *)this = a2 | (v15 << 6);
}

const __CFDictionary *GetSymbolicTraitsFromTraits(const __CFDictionary *result)
{
  unsigned int valuePtr;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("NSCTFontSymbolicTrait"));
    if (result)
    {
      valuePtr = -1431655766;
      CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }
  }
  return result;
}

void TFont::InitDescriptor(TFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  *a2 = (unint64_t)this;
  if (!this)
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v7);
    TDescriptorSource::CreateDefaultDescriptor(0, (unint64_t *)&v8);
    do
      v5 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    do
      v6 = (void *)__ldaxr(a2);
    while (__stlxr(v5, a2));

  }
}

unint64_t CopyAttributeToExtras(uint64_t a1, __CFDictionary *a2, void *key, int a4)
{
  unint64_t result;
  __CFString *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  CFComparisonResult v11;

  atomic_load((unint64_t *)(a1 + 8));
  result = atomic_load((unint64_t *)(a1 + 8));
  if (result)
  {
    result = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)result, key);
    if (result)
    {
      v8 = (__CFString *)result;
      v9 = CFGetTypeID((CFTypeRef)result);
      switch(a4)
      {
        case 0:
          TypeID = CFDictionaryGetTypeID();
          goto LABEL_15;
        case 1:
          TypeID = CFNullGetTypeID();
          goto LABEL_15;
        case 2:
          TypeID = CFNumberGetTypeID();
          goto LABEL_15;
        case 3:
          if (CFNumberGetTypeID() != v9)
          {
            if (CFStringGetTypeID() != v9)
              goto LABEL_13;
            if (v8 != CFSTR("auto"))
            {
              v11 = CFStringCompare(v8, CFSTR("auto"), 1uLL);
              if (v8 != CFSTR("none") && v11 && CFStringCompare(v8, CFSTR("none"), 1uLL))
                goto LABEL_13;
            }
          }
          goto LABEL_16;
        case 4:
          TypeID = CFStringGetTypeID();
LABEL_15:
          if (v9 == TypeID)
            goto LABEL_16;
LABEL_13:
          result = 0;
          break;
        default:
LABEL_16:
          CFDictionarySetValue(a2, key, v8);
          result = 1;
          break;
      }
    }
  }
  return result;
}

void CreateFeatureSettingsByConverting(const __CFArray *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  __CFArray *Mutable;
  unint64_t v6;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  CFTypeID v18;
  CFIndex v19;
  CFIndex v20;
  const void *v21;
  NSNumber *v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  void *v27;
  id v28;
  __CFArray *v29;
  unint64_t v30;
  unint64_t *v31;
  __CFArray *v32;
  CFTypeID v33;
  CFTypeID v34;
  id v35;
  id v36;

  if (a1 && (v4 = CFArrayGetCount(a1), v4 > 0))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, MEMORY[0x1E0C9B378]);
    if (Mutable
      && (v6 = 0x1ECDE6000uLL,
          objc_opt_class(),
          TypeID = CFArrayGetTypeID(),
          v34 = CFDictionaryGetTypeID(),
          v33 = CFNumberGetTypeID(),
          CFGetTypeID(a1) == TypeID))
    {
      v31 = a2;
      Count = CFArrayGetCount(a1);
      if (Count)
      {
        v9 = Count;
        v10 = 0;
        v32 = Mutable;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v10);
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
          else
          {
            v12 = CFGetTypeID(ValueAtIndex);
            if (v12 == v34)
            {
              v13 = (void *)objc_msgSend(objc_alloc((Class)(v6 + 3504)), "initWithDictionary:", ValueAtIndex);
              v14 = v13;
              if (v13)
              {
                v15 = v13;
                CFArrayAppendValue(Mutable, v15);
                v16 = v15;
                v6 = 0x1ECDE6000;

              }
              v17 = v14;
              goto LABEL_33;
            }
            v18 = v12;
            if (v12 != TypeID)
            {
              v22 = 0;
              goto LABEL_20;
            }
            v19 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
            if (v19 >= 1)
            {
              v20 = v19;
              v21 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0);
              v18 = CFGetTypeID(v21);
              if (v20 == 1)
                v22 = 0;
              else
                v22 = (NSNumber *)CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 1);
              ValueAtIndex = v21;
              v6 = 0x1ECDE6000uLL;
LABEL_20:
              v36 = 0;
              if (v18 == v33)
              {
                v35 = -[CTFeatureSetting initWithType:selector:tag:value:](objc_alloc((Class)(v6 + 3504)), (uint64_t)ValueAtIndex, (uint64_t)v22, 0, 0);
                do
                  v23 = __ldaxr((unint64_t *)&v35);
                while (__stlxr(0, (unint64_t *)&v35));
                Mutable = v32;
                do
                  v24 = (void *)__ldaxr((unint64_t *)&v36);
                while (__stlxr(v23, (unint64_t *)&v36));
              }
              else
              {
                v35 = -[CTFeatureSetting initWithType:selector:tag:value:](objc_alloc((Class)(v6 + 3504)), 0, 0, (uint64_t)ValueAtIndex, v22);
                do
                  v25 = __ldaxr((unint64_t *)&v35);
                while (__stlxr(0, (unint64_t *)&v35));
                Mutable = v32;
                do
                  v24 = (void *)__ldaxr((unint64_t *)&v36);
                while (__stlxr(v25, (unint64_t *)&v36));
              }

              if (atomic_load((unint64_t *)&v36))
              {
                v27 = (void *)atomic_load((unint64_t *)&v36);
                v28 = v27;
                CFArrayAppendValue(Mutable, v28);

              }
              v17 = v36;
LABEL_33:

            }
          }
          ++v10;
        }
        while (v10 != v9);
      }
      if (CFArrayGetCount(Mutable) <= 0)
        v29 = 0;
      else
        v29 = Mutable;
      v36 = v29;
      do
        v30 = __ldaxr((unint64_t *)&v36);
      while (__stlxr(0, (unint64_t *)&v36));
      *v31 = v30;

    }
    else
    {
      *a2 = 0;
    }

  }
  else
  {
    *a2 = 0;
  }
}

const __CFDictionary *ClampValueToRangeOfAxis(double a1, const __CFDictionary *result)
{
  const __CFDictionary *v2;
  double v3;
  double v4;

  if (result)
  {
    v2 = result;
    v3 = trunc(a1 * 10000.0) / 10000.0;
    v4 = NAN;
    result = (const __CFDictionary *)CompareValueWithValueInAxisForKey(v3, result, CFSTR("NSCTVariationAxisMinimumValue"), &v4);
    if (result != (const __CFDictionary *)-1)
      return (const __CFDictionary *)CompareValueWithValueInAxisForKey(v3, v2, CFSTR("NSCTVariationAxisMaximumValue"), &v4);
  }
  return result;
}

CFComparisonResult CompareValueWithValueInAxisForKey(double a1, const __CFDictionary *a2, const __CFString *a3, double *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  uint64_t valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a2, a3);
  v7 = Value;
  if (a4)
  {
    valuePtr = -1;
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    *(_QWORD *)a4 = valuePtr;
  }
  return CFNumberCompare((CFNumberRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a1), v7, 0);
}

unint64_t CTFontDescriptorCreateWithTextStyleAndAttributes(__CFString *a1, const __CFString *a2, const __CFDictionary *a3)
{
  unint64_t v6;
  uint64_t v8;
  id v9;

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
  TDescriptorSource::CreateDescriptorForTextStyle(a1, a2, 0, a3, (unint64_t *)&v9);
  do
    v6 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  return v6;
}

void TDescriptorSource::CreateDescriptorForTextStyle(__CFString *a1@<X1>, const __CFString *a2@<X2>, unint64_t a3@<X3>, const __CFDictionary *a4@<X4>, unint64_t *a5@<X8>)
{
  __CFString *v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  TDescriptorSource *FontNameForTextStyle;
  BOOL v15;
  uint64_t ContentSizeCategoryIndex;
  const __CFNumber *v17;
  uint64_t v18;
  const __CFDictionary *v19;
  const __CFString *v20;
  const __CFString **v21;
  double v22;
  const __CFString *v23;
  unint64_t v24;
  void *v25;
  __CFDictionary *Mutable;
  double v27;
  int v28;
  unint64_t v29;
  id v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t *v34;
  int v35;
  void *v36;
  unint64_t v37;
  int v38;
  id v39;
  id v40;
  void *value;
  double v42;
  uint64_t v43;
  unint64_t v44;
  TDescriptorSource *valuePtr;
  _QWORD v46[4];
  _QWORD v47[5];

  v9 = a1;
  v47[4] = *MEMORY[0x1E0C80C00];
  v11 = MapTextStyleValue((uint64_t)a1);
  if (v11 >= 0x145)
    v12 = 2;
  else
    v12 = v11;
  v43 = 0;
  v44 = 0xAAAAAAAAFFFFFFFFLL;
  if (!v9)
    v9 = CFSTR("CTFontRegularUsage");
  value = 0;
  v42 = 0.0;
  v13 = SetDescriptorInfoForUIType((uint64_t)&value, (TDescriptorSource *)v12);
  FontNameForTextStyle = (TDescriptorSource *)value;
  if (v13)
    v15 = value == 0;
  else
    v15 = 1;
  if (v15)
  {
    *a5 = 0;
  }
  else
  {
    ContentSizeCategoryIndex = CTFontDescriptorGetContentSizeCategoryIndex(a2);
    if (a4)
    {
      v17 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("NSCTFontTextStylePlatformAttribute"));
      if (v17)
      {
        LODWORD(valuePtr) = -1431655766;
        CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
        v18 = valuePtr;
      }
      else
      {
        v18 = 0xFFFFFFFFLL;
      }
      v19 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("NSCTFontTraitsAttribute"));
      if (v19)
      {
        v20 = (const __CFString *)v19;
        if (CFDictionaryGetCount(v19) == 1
          && (GetSymbolicTraitsFromTraits((const __CFDictionary *)v20) & 0x40) != 0)
        {
          FontNameForTextStyle = (TDescriptorSource *)TDescriptorSource::FindFontNameForTextStyle((TDescriptorSource *)v9, v20, 0, 0, 0, v21);
        }
      }
    }
    else
    {
      v18 = 0xFFFFFFFFLL;
    }
    v22 = TDescriptorSource::MapTextStyleSizeCategory(FontNameForTextStyle, ContentSizeCategoryIndex, (uint64_t *)v18, 0, 0, 0, 0);
    v40 = 0;
    if (TDescriptorSource::IsVariableSizeTextStyleName((TDescriptorSource *)v9, v23))
    {
      TDescriptorSource::CreateVariableSizeTextStyle((TDescriptorSource *)v9, a4, &valuePtr);
      do
        v24 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v25 = (void *)__ldaxr((unint64_t *)&v40);
      while (__stlxr(v24, (unint64_t *)&v40));

      v9 = (__CFString *)atomic_load((unint64_t *)&v40);
    }
    if (a3 | (unint64_t)a4)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(Mutable, CFSTR("NSFontNameAttribute"), value);
      v27 = v42;
      if (v22 != 0.0)
        v27 = v22;
      CFDictionaryAddValue(Mutable, CFSTR("NSFontSizeAttribute"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v27));
      if (a3)
        CFDictionaryAddValue(Mutable, CFSTR("CTFontDescriptorLanguageAttribute"), (const void *)a3);
      if ((_DWORD)v12)
      {
        CFDictionaryAddValue(Mutable, CFSTR("NSCTFontUIUsageAttribute"), v9);
        CFDictionaryAddValue(Mutable, CFSTR("NSCTFontSizeCategoryAttribute"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", ContentSizeCategoryIndex));
        if (a4)
          CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke, Mutable);
      }
      v39 = Mutable;
      if (v12 <= 1)
        v28 = 20;
      else
        v28 = 1028;
      v38 = v28;
      TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&,unsigned int &>(&v39, &v38, (unint64_t *)&valuePtr);
      do
        v29 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      *a5 = v29;

      v30 = Mutable;
    }
    else
    {
      v47[0] = value;
      v46[0] = CFSTR("NSFontNameAttribute");
      v46[1] = CFSTR("NSFontSizeAttribute");
      v47[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v22);
      v47[2] = v9;
      v46[2] = CFSTR("NSCTFontUIUsageAttribute");
      v46[3] = CFSTR("NSCTFontSizeCategoryAttribute");
      v47[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", ContentSizeCategoryIndex);
      v31 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v46, 4);
      v32 = (_QWORD *)TCFBase<TDescriptor>::Allocate();
      if (v32)
      {
        v33 = v32;
        v32[6] = &off_1E15DCAF0;
        v32[2] = 0;
        v32[3] = TDescriptor::Hash;
        v32[4] = 0;
        v32[5] = v32 + 6;
        v32[7] = 0;
        v34 = v32 + 7;
        if (v12 <= 1)
          v35 = 20;
        else
          v35 = 1028;
        *((_DWORD *)v33 + 16) = v35;
        v33[10] = 0;
        v33[11] = 0;
        v33[9] = 0;
        TCFRef<__CTFont const*>::Retain(v34, v31);
        valuePtr = (TDescriptorSource *)v33;
        do
          v36 = (void *)__ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        v39 = v36;

      }
      else
      {
        v39 = 0;
      }
      do
        v37 = __ldaxr((unint64_t *)&v39);
      while (__stlxr(0, (unint64_t *)&v39));
      *a5 = v37;
      v30 = v39;
    }

  }
}

uint64_t SetDescriptorInfoForUIType(uint64_t a1, TDescriptorSource *this)
{
  const __CFString *v3;
  uint64_t v4;
  uint64_t result;

  switch((int)this)
  {
    case 0:
      v3 = CFSTR("Helvetica");
      goto LABEL_13;
    case 1:
      v3 = CFSTR("Menlo-Regular");
      goto LABEL_15;
    case 2:
    case 3:
LABEL_28:
      result = TDescriptorSource::UIFontNameForUIType(this);
      if (!result)
        return result;
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = 0x402A000000000000;
      return 1;
    case 4:
    case 17:
    case 21:
    case 24:
    case 25:
      v3 = CFSTR(".AppleSystemUIFont");
      goto LABEL_3;
    case 5:
      v3 = CFSTR(".AppleSystemUIFontEmphasized");
LABEL_3:
      v4 = 0x4026000000000000;
      goto LABEL_25;
    case 6:
    case 19:
      v3 = CFSTR(".AppleSystemUIFont");
      goto LABEL_24;
    case 7:
      v3 = CFSTR(".AppleSystemUIFontEmphasized");
      goto LABEL_24;
    case 8:
    case 26:
      v3 = CFSTR(".AppleSystemUIFont");
LABEL_13:
      v4 = 0x4028000000000000;
      goto LABEL_25;
    case 9:
    case 16:
    case 23:
      v3 = CFSTR(".AppleSystemUIFont");
      goto LABEL_22;
    case 10:
    case 22:
      v3 = CFSTR(".AppleSystemUIFont");
LABEL_15:
      v4 = 0x4024000000000000;
      goto LABEL_25;
    case 11:
    case 12:
    case 13:
      v3 = CFSTR(".AppleSystemUIFont");
      goto LABEL_19;
    case 14:
      v3 = CFSTR("Helvetica");
LABEL_19:
      v4 = 0x402C000000000000;
      goto LABEL_25;
    case 15:
      *(_QWORD *)(a1 + 16) = CFSTR("UICTFontTextStyleHeadline");
      *(_DWORD *)(a1 + 24) = 3;
      return 1;
    case 18:
      v3 = CFSTR(".AppleSystemUIFontBold");
LABEL_22:
      v4 = 0x402A000000000000;
      goto LABEL_25;
    case 20:
      v3 = CFSTR(".AppleSystemUIFontBold");
LABEL_24:
      v4 = 0x4022000000000000;
LABEL_25:
      *(_QWORD *)a1 = v3;
      *(_QWORD *)(a1 + 8) = v4;
      return 1;
    default:
      switch((int)this)
      {
        case 1000:
        case 1003:
        case 1005:
        case 1006:
          v3 = CFSTR(".AppleSystemUIFontBold");
          goto LABEL_13;
        case 1001:
        case 1002:
          v3 = CFSTR(".AppleSystemUIFontBold");
          goto LABEL_19;
        default:
          goto LABEL_28;
      }
  }
}

void TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&,unsigned int &>(void **a1@<X0>, int *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  id v14;

  v6 = TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *a2;
    *(_DWORD *)(v6 + 64) = *a2 & 0x7FFFFFFF;
    v10 = *a1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v6 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    v9 = v6 + 64;
    *(_QWORD *)(v6 + 56) = 0;
    v11 = (unint64_t *)(v6 + 56);
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    if ((v8 & 0x40000000) != 0)
    {
      do
        v12 = __ldxr((unsigned int *)v9);
      while (__stxr(v12 | 0x80000000, (unsigned int *)v9));
    }
    TCFRef<__CTFont const*>::Retain(v11, v10);
    v14 = v7;
    do
      v13 = __ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    *a3 = v13;

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TCFBase<TDescriptor>::Allocate()
{
  if (TCFBase<TDescriptor>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TDescriptor>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TDescriptor>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

void addNames(const __CFString *a1, const __CFString *a2, const __CFString *a3, TCFMutableDictionary *a4)
{
  __CFArray *Mutable;
  int v9;
  const __CFString *v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("1");
  v18 = a1;
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("2");
  v18 = a2;
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  if (a3 == CFSTR(".AppleSystemUIFont"))
    goto LABEL_4;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v9 = CFEqual(a3, CFSTR(".AppleSystemUIFont"));
  v10 = a3;
  if (v9)
LABEL_4:
    v10 = CFSTR(".AppleSystemUIFontRegular");
LABEL_6:
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("4");
  v18 = v10;
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("3");
  v18 = a3;
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("18");
  v18 = a3;
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  v15 = CFSTR("type");
  v16 = CFSTR("string");
  v17 = CFSTR("7");
  v18 = CFSTR("Apple Inc.");
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v15, 2));
  v11 = (__CFDictionary *)atomic_load((unint64_t *)a4);
  CFDictionaryAddValue(v11, CFSTR("name"), a3);
  v12 = (__CFDictionary *)atomic_load((unint64_t *)a4);
  CFDictionaryAddValue(v12, CFSTR("familyName"), a1);
  v13 = (__CFDictionary *)atomic_load((unint64_t *)a4);
  CFDictionaryAddValue(v13, CFSTR("version"), CFSTR("1.0"));
  v14 = (__CFDictionary *)atomic_load((unint64_t *)a4);
  CFDictionaryAddValue(v14, CFSTR("FontNames"), Mutable);

}

BOOL TFont::ShouldPropagateFeatureSetting(TFont *this, const TFontFeatureSettingList *a2)
{
  void *v4;
  __CFString *v5;
  __CFString *v6;
  _BOOL8 v7;
  BOOL v9;

  if (!TFont::IsSystemUIFontAndForShaping(this, &v9)
    || TFontFeatureSettingList::IndexOfAATSetting(a2, 0x23u, 14) == -1)
  {
    return 0;
  }
  v4 = (void *)atomic_load((unint64_t *)(*((_QWORD *)this + 50) + 96));
  v5 = v4;
  v6 = v5;
  if (v5 == CFSTR(".SF"))
  {
    v7 = 1;
  }
  else if (v5)
  {
    v7 = CFStringHasPrefix(v5, CFSTR(".SF")) != 0;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t TBaseFont::IsOpticalFont(TBaseFont *this)
{
  return 0;
}

void TFont::UpdateFeatureSettings(uint64_t a1, __CFDictionary *a2, id a3, int a4)
{
  unint64_t *v5;
  const TBaseFont *v6;
  const void *v8;
  id v9;

  v5 = (unint64_t *)(a1 + 168);
  if (a4)
    v6 = (const TBaseFont *)a3;
  else
    v6 = TFontFeatures::CopyNonDefaultSettings(*(TFontFeatures **)(a1 + 400), (const TBaseFont *)a3, (const __CFArray *)a3);
  v9 = v6;
  TFontFeatureSettingList::Emplace((uint64_t)v5, (unint64_t *)&v9);

  if (atomic_load(v5))
  {
    v8 = (const void *)atomic_load(v5);
    CFDictionarySetValue(a2, CFSTR("NSCTFontFeatureSettingsAttribute"), v8);
  }
}

void CreateFeatureSettingsForLigatureSetting(unint64_t *a1, uint64_t a2, int a3)
{
  __int128 v4;
  const __CFArray *v5;
  CFIndex v6;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFDictionary *v14;
  const __CFNumber *v15;
  __int16 v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void **v33;
  char *v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  void **v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __CFArray *v47;
  unint64_t v48;
  const __CFArray *v50;
  CFIndex Count;
  id v52;
  void **valuePtr[4];
  _OWORD *v54;
  void **v55;
  void **v56;
  void **v57;
  _OWORD v58[4];
  _OWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58[3] = v4;
  v58[2] = v4;
  v58[1] = v4;
  v58[0] = v4;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v59 = v58;
  v52 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 136))(&v52, a2, 0);
  v5 = (const __CFArray *)atomic_load((unint64_t *)&v52);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count)
    {
      v6 = 0;
      v50 = v5;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CTFeatureTypeIdentifier"));
        if (Value)
        {
          LOWORD(valuePtr[0]) = -21846;
          CFNumberGetValue(Value, kCFNumberShortType, valuePtr);
          if (LOWORD(valuePtr[0]) == 1)
          {
            v9 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CTFeatureTypeSelectors"));
            if (v9)
            {
              v10 = v9;
              v11 = CFArrayGetCount(v9);
              if (v11)
                break;
            }
          }
        }
LABEL_66:
        if (++v6 == Count)
          goto LABEL_67;
      }
      v12 = v11;
      v13 = 0;
      while (1)
      {
        v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
        v15 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("CTFeatureSelectorIdentifier"));
        if (v15)
        {
          LOWORD(valuePtr[0]) = -21846;
          CFNumberGetValue(v15, kCFNumberShortType, valuePtr);
          v16 = (__int16)valuePtr[0];
          if (!LOWORD(valuePtr[0]))
          {
            v17 = v56;
            if (v56 < v57)
            {
              *(_WORD *)v56 = 0;
              v24 = (void **)((char *)v17 + 2);
              goto LABEL_27;
            }
            v18 = v55;
            v26 = (char *)v56 - (char *)v55;
            if ((char *)v56 - (char *)v55 <= -3)
              goto LABEL_74;
            v27 = v26 >> 1;
            if ((char *)v57 - (char *)v55 <= (unint64_t)((v26 >> 1) + 1))
              v28 = v27 + 1;
            else
              v28 = (char *)v57 - (char *)v55;
            if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFFELL)
              v22 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v22 = v28;
            v54 = v58;
            if (v22)
            {
              v23 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v58, v22);
              v18 = v55;
              v17 = v56;
            }
            else
            {
              v23 = 0;
            }
            v32 = &v23[2 * v27];
            *(_WORD *)v32 = 0;
            if (v17 == v18)
            {
              v34 = &v23[2 * v27];
            }
            else
            {
              v33 = v17;
              v34 = &v23[2 * v27];
              do
              {
                v35 = *((_WORD *)v33 - 1);
                v33 = (void **)((char *)v33 - 2);
                *((_WORD *)v34 - 1) = v35;
                v34 -= 2;
              }
              while (v33 != v18);
            }
            goto LABEL_63;
          }
          if (!a3)
          {
            v16 = LOWORD(valuePtr[0]) + 1;
            v17 = v56;
            if (v56 < v57)
              goto LABEL_26;
            v18 = v55;
            v29 = (char *)v56 - (char *)v55;
            if ((char *)v56 - (char *)v55 <= -3)
LABEL_74:
              abort();
            v30 = v29 >> 1;
            if ((char *)v57 - (char *)v55 <= (unint64_t)((v29 >> 1) + 1))
              v31 = v30 + 1;
            else
              v31 = (char *)v57 - (char *)v55;
            if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFFELL)
              v22 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v22 = v31;
            v54 = v58;
            if (v22)
            {
              v23 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v58, v22);
              v18 = v55;
              v17 = v56;
            }
            else
            {
              v23 = 0;
            }
            v32 = &v23[2 * v30];
            *(_WORD *)v32 = v16;
            if (v17 == v18)
              goto LABEL_62;
            v38 = v17;
            v34 = &v23[2 * v30];
            v5 = v50;
            do
            {
              v39 = *((_WORD *)v38 - 1);
              v38 = (void **)((char *)v38 - 2);
              *((_WORD *)v34 - 1) = v39;
              v34 -= 2;
            }
            while (v38 != v18);
LABEL_63:
            v25 = (void **)(v32 + 2);
            v55 = (void **)v34;
            v56 = (void **)(v32 + 2);
            v40 = v57;
            v57 = (void **)&v23[2 * v22];
            valuePtr[2] = v17;
            valuePtr[3] = v40;
            valuePtr[0] = v18;
            valuePtr[1] = v18;
            std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)valuePtr);
            goto LABEL_64;
          }
          if (a3 == 2)
          {
            v17 = v56;
            if (v56 >= v57)
            {
              v18 = v55;
              v19 = (char *)v56 - (char *)v55;
              if ((char *)v56 - (char *)v55 <= -3)
                goto LABEL_74;
              v20 = v19 >> 1;
              if ((char *)v57 - (char *)v55 <= (unint64_t)((v19 >> 1) + 1))
                v21 = v20 + 1;
              else
                v21 = (char *)v57 - (char *)v55;
              if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFFELL)
                v22 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v22 = v21;
              v54 = v58;
              if (v22)
              {
                v23 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v58, v22);
                v18 = v55;
                v17 = v56;
              }
              else
              {
                v23 = 0;
              }
              v32 = &v23[2 * v20];
              *(_WORD *)v32 = v16;
              if (v17 != v18)
              {
                v36 = v17;
                v34 = &v23[2 * v20];
                v5 = v50;
                do
                {
                  v37 = *((_WORD *)v36 - 1);
                  v36 = (void **)((char *)v36 - 2);
                  *((_WORD *)v34 - 1) = v37;
                  v34 -= 2;
                }
                while (v36 != v18);
                goto LABEL_63;
              }
LABEL_62:
              v34 = v32;
              v5 = v50;
              goto LABEL_63;
            }
LABEL_26:
            *(_WORD *)v17 = v16;
            v24 = (void **)((char *)v17 + 2);
LABEL_27:
            v25 = v24;
LABEL_64:
            v56 = v25;
          }
        }
        if (++v13 == v12)
          goto LABEL_66;
      }
    }
  }
LABEL_67:
  if (v55 == v56)
  {
    *a1 = 0;
  }
  else
  {
    valuePtr[0] = (void **)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ((char *)v56 - (char *)v55) >> 1, MEMORY[0x1E0C9B378]);
    v41 = (unsigned __int16 *)v55;
    v42 = (unsigned __int16 *)v56;
    if (v55 != v56)
    {
      do
      {
        v43 = *v41++;
        v44 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 1);
        v45 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], v44, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v43), 0, 0);
        v46 = v45;
        v47 = (__CFArray *)atomic_load((unint64_t *)valuePtr);
        CFArrayAppendValue(v47, v46);

      }
      while (v41 != v42);
    }
    do
      v48 = __ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));
    *a1 = v48;

  }
  valuePtr[0] = (void **)&v55;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](valuePtr);
}

const TBaseFont *TFontFeatures::CopyNonDefaultSettings(TFontFeatures *this, const TBaseFont *a2, const __CFArray *a3)
{
  const TBaseFont *v3;
  void *v5;
  id v7;
  id v8;

  v3 = a2;
  if (a2)
  {
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TFontFeatures *, _QWORD, const __CFArray *))(*(_QWORD *)this + 136))(&v7, this, 0, a3);
    do
      v5 = (void *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));
    v8 = v5;

    v3 = (const TBaseFont *)TFontFeatures::CopyNonDefault((TFontFeatures *)&v8, this, v3);
  }
  return v3;
}

void TBaseFont::CopyFeaturesInternal(TBaseFont *this@<X0>, const TBaseFont *a2@<X1>, int a3@<W2>, const __CFArray **a4@<X8>)
{
  int v8;
  const __CFString *v9;
  void *v10;
  const __CFString *v12;
  unint64_t v13;
  void *v14;
  const __CFArray *v16;
  CFIndex Count;
  void *v18;
  void *v20;
  id v21;
  void *v22;
  void *v24;
  void *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;

  v8 = *((_DWORD *)this + 44);
  if (a3)
    v9 = CFSTR("NSCTFontFeaturesAttribute");
  else
    v9 = CFSTR("NSCTFontFeaturesInternalAttribute");
  v32 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, v9, &v31);
  do
    v10 = (void *)__ldaxr((unint64_t *)&v31);
  while (__stlxr(0, (unint64_t *)&v31));
  v32 = v10;

  if (!atomic_load((unint64_t *)&v32) && (a3 & 1) == 0 && v8 != 208)
  {
    if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    {
      v12 = (const __CFString *)atomic_load((unint64_t *)a2 + 12);
      CopyAttributeForSystemFont(v12, CFSTR("NSCTFontFeaturesAttribute"), (const __CFString **)&v31);
      do
        v13 = __ldaxr((unint64_t *)&v31);
      while (__stlxr(0, (unint64_t *)&v31));
      do
        v14 = (void *)__ldaxr((unint64_t *)&v32);
      while (__stlxr(v13, (unint64_t *)&v32));

      if (atomic_load((unint64_t *)&v32))
      {
        v16 = (const __CFArray *)atomic_load((unint64_t *)&v32);
        Count = CFArrayGetCount(v16);
        v18 = (void *)atomic_load((unint64_t *)&v32);
        if (!Count)
          goto LABEL_22;
        v30 = v18;
        TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v30, v9);

      }
    }
  }
  if (!atomic_load((unint64_t *)&v32) && v8 != 208)
  {
    TFontFeatures::TFontFeatures((TFontFeatures *)&v31, a2, a3);
    v20 = (void *)atomic_load((unint64_t *)&v31);
    v21 = v20;
    do
      v22 = (void *)__ldaxr((unint64_t *)&v32);
    while (__stlxr((unint64_t)v21, (unint64_t *)&v32));

    if (atomic_load((unint64_t *)&v32))
    {
      v24 = (void *)atomic_load((unint64_t *)&v32);
      v29 = v24;
      TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v29, v9);

    }
  }
LABEL_22:
  v25 = (void *)atomic_load((unint64_t *)&v32);
  v26 = v25;
  v27 = v26;
  if (v26)
  {
    if (CFArrayGetCount(v26) < 1)
    {
      v26 = 0;
    }
    else
    {
      v28 = (void *)atomic_load((unint64_t *)&v32);
      v26 = v28;
    }
  }
  *a4 = v26;

}

void TBaseFont::CopyFeatures(TBaseFont *this@<X0>, int a2@<W1>, const __CFArray **a3@<X8>)
{
  TBaseFont::CopyFeaturesInternal(this, this, a2, a3);
}

NSNumber *ValidatedValue(NSNumber *a1)
{
  NSNumber *v1;
  CFTypeID v2;

  if (!a1)
    return (NSNumber *)*MEMORY[0x1E0C9AE50];
  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID() && v2 != CFBooleanGetTypeID())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
  }
  return v1;
}

uint64_t TBaseFont::IsTextStyleFont(TBaseFont *this)
{
  return 0;
}

void TSplicedFont::CopyAttribute(TSplicedFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  const __CFDictionary *v7;
  const __CFString *v8;
  const __CFDictionary *Value;
  unint64_t v10;
  const __CFDictionary *v11;
  id v12;

  switch(a2)
  {
    case '/':
    case '8':
      v5 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
      if ((*(_DWORD *)(v5 + 16) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
      v6 = atomic_load((unint64_t *)(v5 + 32));
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
      return;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      goto LABEL_8;
    case '9':
      Value = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
      if (Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("languageAwareLineHeightRatio"));
      v12 = Value;
      do
        v10 = __ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
      goto LABEL_18;
    case ':':
      v11 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
      if (v11)
        v11 = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("lineSpacingOverride"));
      v12 = v11;
      do
        v10 = __ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
LABEL_18:
      *a3 = v10;

      return;
    case ';':
      v7 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
      if (!v7)
        goto LABEL_24;
      v8 = CFSTR("legibilityWeight");
      goto LABEL_23;
    case '<':
      v7 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
      if (!v7)
        goto LABEL_24;
      v8 = CFSTR("ignoreLegibilityWeight");
      goto LABEL_23;
    default:
      if (a2 == 42)
      {
        v7 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
        if (v7)
        {
          v8 = CFSTR("NSCTFontUIUsageAttribute");
LABEL_23:
          v7 = (const __CFDictionary *)CFDictionaryGetValue(v7, v8);
        }
LABEL_24:
        *a3 = (unint64_t)v7;
      }
      else
      {
LABEL_8:
        TBaseFont::CopyAttribute(this, a2, a3);
      }
      return;
  }
}

void TFont::AppendFeatureSettingWithTypeAndSelector(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const __CFArray *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  __CFArray *v13;
  unint64_t *v14;
  void *v15;
  void *v17;
  unint64_t v18;
  void *v19;
  __CFDictionary *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id Mutable;

  v26 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = (const __CFArray *)atomic_load((unint64_t *)(a1 + 168));
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v26, v8);
  v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", a2);
  v10 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], v9, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", a3), 0, 0);
  v11 = v10;
  if (v10)
  {
    v12 = v10;
    v13 = (__CFArray *)atomic_load((unint64_t *)&v26);
    CFArrayAppendValue(v13, v12);

    v14 = (unint64_t *)(a1 + 160);
    v15 = (void *)atomic_load((unint64_t *)(a1 + 160));
    v25 = v15;
    if (!atomic_load((unint64_t *)&v25))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
        v17 = (void *)__ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      v24 = v17;

      do
        v18 = __ldaxr((unint64_t *)&v24);
      while (__stlxr(0, (unint64_t *)&v24));
      do
        v19 = (void *)__ldaxr((unint64_t *)&v25);
      while (__stlxr(v18, (unint64_t *)&v25));

    }
    v20 = (__CFDictionary *)atomic_load((unint64_t *)&v25);
    v21 = (void *)atomic_load((unint64_t *)&v26);
    TFont::UpdateFeatureSettings(a1, v20, v21, a4);
    do
      v22 = __ldaxr((unint64_t *)&v25);
    while (__stlxr(0, (unint64_t *)&v25));
    do
      v23 = (void *)__ldaxr(v14);
    while (__stlxr(v22, v14));

    *(_DWORD *)a1 &= ~8u;
  }

}

void TDescriptor::CopyAttributeForNonNormalized(TDescriptor *this@<X0>, const __CFString **a2@<X2>, uint64_t a3@<X1>, unint64_t *a4@<X8>)
{
  void *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  void *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  unint64_t v15;
  void *v16;
  const __CFDictionary *v17;
  unint64_t v18;
  const __CFDictionary *v19;
  unint64_t v20;
  id v21;

  if (a3 == 23)
  {
    v6 = (void *)atomic_load((unint64_t *)this + 1);
    Value = v6;
    v8 = Value;
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("NSCTFontDesignLanguagesAttribute"));
    *a4 = (unint64_t)Value;

    return;
  }
  if (a3 == 36)
  {
    *a4 = (unint64_t)(id)*MEMORY[0x1E0C9AE40];
    return;
  }
  v10 = (void *)atomic_load((unint64_t *)this + 1);
  v11 = v10;
  if (!v11)
  {

    goto LABEL_17;
  }
  v12 = v11;
  v13 = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("NSCTFontLocalizedNamesForNonNormalizedAttribute"));

  if (!v13)
  {
LABEL_17:
    *a4 = 0;
    return;
  }
  *a4 = 0;
  switch(a3)
  {
    case 4:
      v17 = (const __CFDictionary *)CFDictionaryGetValue(v13, CFSTR("NSFontFaceAttribute"));
      CopyValueForCurrentUser(v17, a2, (unint64_t *)&v21);
      do
        v18 = __ldaxr((unint64_t *)&v21);
      while (__stlxr(0, (unint64_t *)&v21));
      do
        v16 = (void *)__ldaxr(a4);
      while (__stlxr(v18, a4));
      break;
    case 3:
      v19 = (const __CFDictionary *)CFDictionaryGetValue(v13, CFSTR("NSFontFamilyAttribute"));
      CopyValueForCurrentUser(v19, a2, (unint64_t *)&v21);
      do
        v20 = __ldaxr((unint64_t *)&v21);
      while (__stlxr(0, (unint64_t *)&v21));
      do
        v16 = (void *)__ldaxr(a4);
      while (__stlxr(v20, a4));
      break;
    case 2:
      v14 = (const __CFDictionary *)CFDictionaryGetValue(v13, CFSTR("NSFontVisibleNameAttribute"));
      CopyValueForCurrentUser(v14, a2, (unint64_t *)&v21);
      do
        v15 = __ldaxr((unint64_t *)&v21);
      while (__stlxr(0, (unint64_t *)&v21));
      do
        v16 = (void *)__ldaxr(a4);
      while (__stlxr(v15, a4));
      break;
    default:
      return;
  }

}

void TSplicedFont::CopyFeatures(TSplicedFont *this@<X0>, int a2@<W1>, const __CFArray **a3@<X8>)
{
  uint64_t v6;
  const TBaseFont *v7;

  v6 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v6 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v7 = (const TBaseFont *)atomic_load((unint64_t *)(v6 + 32));
  TBaseFont::CopyFeaturesInternal(this, v7, a2, a3);
}

uint64_t TBaseFont::GetDesignUITrait(TBaseFont *this)
{
  return 0;
}

uint64_t TTrackingEngine::TrackRuns(TTrackingEngine *this, TLine *a2, const TCharStream *a3, CFRange a4, double a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t i;
  unint64_t v17;
  uint64_t v18;
  _BOOL4 Run;
  TRun *v20;
  uint64_t v21;
  int v22;
  void **v23;
  _QWORD __b[67];

  result = 0;
  __b[65] = *MEMORY[0x1E0C80C00];
  if (a4.location >= 1 && a5 != 0.0)
  {
    v10 = (uint64_t)a3 + a4.location - 1;
    if (v10 < 1)
    {
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)*((_QWORD *)this + 2);
      v13 = (char *)a3 + a4.location - 1;
      do
      {
        v14 = *v12++;
        v11 += *(_QWORD *)(*(_QWORD *)(v14 + 40) + 208);
        --v13;
      }
      while (v13);
    }
    v15 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v10) + 48); ; v11 -= *(_QWORD *)(i + 208))
    {
      if ((*(_WORD *)(i + 178) & 0x40) == 0)
      {
        if ((*(_BYTE *)(i + 260) & 1) != 0)
          goto LABEL_14;
        v17 = atomic_load((unint64_t *)(i + 56));
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 40) + 400) + 472))(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 400), 1786082164) & 1) != 0)goto LABEL_14;
        memset(__b, 170, 0x208uLL);
        v18 = *(_QWORD *)(i + 8);
        __b[0] = *(_QWORD *)(i + 16) + v18;
        __b[1] = v18;
        LOBYTE(__b[5]) = 0;
        __b[2] = 0;
        __b[3] = 0;
        *(_QWORD *)((char *)&__b[3] + 5) = 0;
        __b[6] = this;
        __b[7] = a2;
        memset(&__b[8], 0, 208);
        __b[28] = *((_QWORD *)a2 + 2);
        __b[64] = &__b[34];
        Run = TScriptRun::NextRun((uint64_t)__b, 0);
        v22 = __b[4];
        v23 = (void **)&__b[31];
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v23);
        if (!Run)
          goto LABEL_17;
        if (v22 == 1634885986)
        {
LABEL_14:
          v15 |= TJustEngine::ApplyTrackingToRun(this, a2, (const TCharStream *)v10, v11, a5);
        }
        else
        {
LABEL_17:
          TSimpleTracking::TrackRun((_QWORD *)i, v20, a5);
          v15 = 1;
        }
      }
      if (v10 <= (uint64_t)a3)
        break;
      v21 = *((_QWORD *)this + 2) + 8 * v10--;
      i = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 48);
    }
    return v15 & 1;
  }
  return result;
}

void DrawGlyphsAtPositions(TBaseFont **this, const CGGlyph *a2, const CGPoint *a3, uint64_t a4, CGContext *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  int Type;
  TLine *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex ClusterRange;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  BOOL v24;
  CFIndex v25;
  CFIndex v26;
  BOOL v27;
  CFIndex v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat v45;
  unint64_t v46;
  void *v47;
  __int128 v48;
  CGGlyph *v49;
  int v50;
  uint64_t v51;
  CGRect *v52;
  CGFont *InitializedGraphicsFont;
  __int128 v54;
  __int128 v55;
  unint64_t PaletteColors;
  float64x2_t v58;
  int64x2_t v59;
  double v65;
  CGFloat v66;
  __int128 v67;
  __int128 v68;
  double ColorBitmapFontTranslate;
  double v70;
  void *v72;
  TBaseFont *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  CGRect *v77;
  CGFont *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  CGColor *FillColorAsColor;
  BOOL v83;
  long double ContentsScale;
  double v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  float64x2_t v90;
  int64x2_t v91;
  double v94;
  CGFloat v95;
  __int128 v96;
  __int128 v97;
  CGPoint TextPosition;
  void *v99;
  _BOOL4 v100;
  unint64_t v101;
  id v102;
  __int128 v103;
  __int128 v104;
  float64x2_t v106;
  int64x2_t v107;
  double v110;
  CGFloat v111;
  double v112;
  CGFloat a;
  CGFloat b;
  float64x2_t v115;
  int64x2_t v116;
  CGFloat *p_y;
  CGGlyph v118;
  void *v119;
  void *v120;
  double v121;
  double v122;
  __int128 v123;
  __int128 v124;
  uint64_t Style;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  const __CFData *v129;
  double *p_x;
  double v131;
  uint64_t v132;
  CGFloat v133;
  CGFloat v134;
  unsigned int v135;
  CFIndex v136;
  CGColor *ValueAtIndex;
  const CGPath *v139;
  CGFloat v140;
  unint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  CGAffineTransform *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  TFont *theArray;
  const __CFArray *theArraya;
  unsigned int v156;
  CFIndex Count;
  _QWORD v158[8];
  id v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  CGAffineTransform v163;
  CGAffineTransform v164;
  float64x2_t v165[3];
  CGAffineTransform v166[2];
  CGAffineTransform v167;
  CGAffineTransform v168;
  CGAffineTransform v169;
  CGAffineTransform v170;
  TBaseFont **v171;
  unint64_t v172;
  double v173;
  double v174;
  uint64_t v175;
  CGAffineTransform v176;
  CGContext *v177;
  unint64_t v178;
  float64x2_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  CGAffineTransform v187;
  id v188[3];
  id v189;
  CGAffineTransform v190;
  float64x2_t v191[6];
  CGAffineTransform v192;
  CGAffineTransform v193;
  CGAffineTransform v194;
  id v195;
  id v196;
  CGAffineTransform v197;
  CGAffineTransform v198;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE keys[984];
  _BYTE *v202;
  void *values[3];
  _OWORD v204[30];
  _OWORD *v205;
  id v206;
  _BYTE *v207;
  uint64_t v208;
  _OWORD v209[4];
  _OWORD *v210;
  uint64_t v211;

  v6 = a6;
  v211 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a6 + 96);
  if (!v10)
  {
    v36 = 0;
    v148 = 0;
    v196 = 0;
    v195 = 0;
    v146 = -1;
    v156 = 1;
    goto LABEL_61;
  }
  if ((*(_BYTE *)(v10 + 224) & 1) != 0)
    v11 = -1;
  else
    v11 = 1;
  v156 = v11;
  v196 = 0;
  v195 = 0;
  Type = *(_DWORD *)(a6 + 108);
  if (Type == 13)
  {
    Type = CGContextGetType();
    *(_DWORD *)(v6 + 108) = Type;
  }
  if (Type != 1 || (v13 = *(TLine **)(v10 + 272)) == 0)
  {
    v36 = 0;
    v148 = 0;
    v146 = -1;
    goto LABEL_61;
  }
  theArray = (TFont *)this;
  v14 = *(_QWORD **)v13;
  (*(void (**)(_BYTE *__return_ptr, _QWORD))(**(_QWORD **)v13 + 8))(keys, *(_QWORD *)v13);
  do
    v15 = __ldaxr((unint64_t *)keys);
  while (__stlxr(0, (unint64_t *)keys));
  do
    v16 = (void *)__ldaxr((unint64_t *)&v196);
  while (__stlxr(v15, (unint64_t *)&v196));

  v17 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 216) + 48) + 8 * *(_QWORD *)(v10 + 200));
  v18 = *(_QWORD *)(v10 + 8);
  v19 = *(_QWORD *)(v10 + 16);
  v148 = v17;
  v146 = v18;
  if ((*(_BYTE *)(v10 + 224) & 1) == 0)
  {
    memset(keys, 170, 16);
    ClusterRange = TLine::GetClusterRange(v13, v14, *v17, 2, keys, 0, 0);
    if (ClusterRange + v21 >= v19 + v18)
      v22 = v19 + v18;
    else
      v22 = ClusterRange + v21;
    v23 = v22 - v18;
    v24 = ClusterRange <= v18 && v18 < ClusterRange + v21;
    if (v24)
      v25 = v18;
    else
      v25 = 0;
    if (!v24)
      v23 = 0;
    v26 = v22 - ClusterRange;
    v27 = v18 <= ClusterRange && ClusterRange < v19 + v18;
    if (v27)
      v25 = ClusterRange;
    if (v27)
      v28 = v26;
    else
      v28 = v23;
    _ZF = v25 == ClusterRange && v28 == v21;
    this = (TBaseFont **)theArray;
    if (_ZF)
      goto LABEL_60;
    v30 = *((_QWORD *)v13 + 2);
    v31 = *((_QWORD *)v13 + 3);
    if (v31 == v30)
      goto LABEL_60;
    v32 = 0;
    v33 = 0;
    v34 = (v31 - v30) >> 3;
    while (1)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + v32) + 40) + 208) + v33;
      if (v35 > *(uint64_t *)keys)
        break;
      v32 += 8;
      v33 = v35;
      if (v30 + v32 == v31)
        goto LABEL_60;
    }
    v40 = v32 >> 3;
    if (v32 >> 3 >= v34)
      goto LABEL_60;
    v41 = v30 + 8 * v40;
    if (v10 == *(_QWORD *)(*(_QWORD *)v41 + 40))
    {
      v45 = *MEMORY[0x1E0C9AE50];
      values[0] = CFSTR("begin");
      v170.a = v45;
      v206 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, (const void **)&v170, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
        v46 = __ldaxr((unint64_t *)&v206);
      while (__stlxr(0, (unint64_t *)&v206));
      do
        v47 = (void *)__ldaxr((unint64_t *)&v195);
      while (__stlxr(v46, (unint64_t *)&v195));
    }
    else
    {
      if (v41 == v31)
        goto LABEL_60;
      v42 = 0;
      v43 = *(_QWORD *)keys - v33 + *(_QWORD *)&keys[8];
      v44 = 8 * v40;
      while (1)
      {
        v42 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + v44) + 40) + 208);
        if (v42 >= v43)
          break;
        v44 += 8;
        if (v30 + v44 == v31)
          goto LABEL_60;
      }
      if (v44 >> 3 >= v34 || v10 != *(_QWORD *)(*(_QWORD *)(v30 + 8 * (v44 >> 3)) + 40))
        goto LABEL_60;
      v140 = *MEMORY[0x1E0C9AE50];
      values[0] = CFSTR("finished");
      v170.a = v140;
      v206 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, (const void **)&v170, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
        v141 = __ldaxr((unint64_t *)&v206);
      while (__stlxr(0, (unint64_t *)&v206));
      do
        v47 = (void *)__ldaxr((unint64_t *)&v195);
      while (__stlxr(v141, (unint64_t *)&v195));
    }

LABEL_60:
    v36 = v19;
    goto LABEL_61;
  }
  v37 = (void *)*MEMORY[0x1E0C9AE50];
  *(_QWORD *)keys = CFSTR("rightToLeft");
  values[0] = v37;
  *(_QWORD *)&v170.a = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v38 = __ldaxr((unint64_t *)&v170);
  while (__stlxr(0, (unint64_t *)&v170));
  v36 = v19;
  this = (TBaseFont **)theArray;
  do
    v39 = (void *)__ldaxr((unint64_t *)&v195);
  while (__stlxr(v38, (unint64_t *)&v195));

LABEL_61:
  *(_QWORD *)&v48 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v209[3] = v48;
  v209[2] = v48;
  v209[1] = v48;
  v209[0] = v48;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v210 = v209;
  v204[28] = v48;
  v204[29] = v48;
  v204[26] = v48;
  v204[27] = v48;
  v204[24] = v48;
  v204[25] = v48;
  v204[22] = v48;
  v204[23] = v48;
  v204[20] = v48;
  v204[21] = v48;
  v204[18] = v48;
  v204[19] = v48;
  v204[16] = v48;
  v204[17] = v48;
  v204[15] = v48;
  v204[14] = v48;
  v204[13] = v48;
  v204[12] = v48;
  v204[11] = v48;
  v204[10] = v48;
  v204[9] = v48;
  v204[8] = v48;
  v204[7] = v48;
  v204[6] = v48;
  v204[5] = v48;
  v204[4] = v48;
  v204[3] = v48;
  v204[2] = v48;
  v204[1] = v48;
  v204[0] = v48;
  memset(values, 0, sizeof(values));
  v205 = v204;
  *(_QWORD *)&v167.a = TFont::ensureSVGTableObject((TFont *)this);
  v150 = v36;
  if (!*(_QWORD *)&v167.a)
  {
    v49 = (CGGlyph *)a2;
    v50 = v156;
    goto LABEL_76;
  }
  memset(&keys[24], 170, 0x3C0uLL);
  memset(keys, 0, 24);
  v202 = &keys[24];
  v49 = (CGGlyph *)a2;
  v50 = v156;
  if (a4)
  {
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100]((char **)keys, a4);
    v51 = *(_QWORD *)&keys[8];
    bzero(*(void **)&keys[8], 32 * a4);
    *(_QWORD *)&keys[8] = v51 + 32 * a4;
    v52 = *(CGRect **)keys;
  }
  else
  {
    v52 = 0;
  }
  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this[50]);
  if (!InitializedGraphicsFont || !CGFontGetGlyphBBoxes(InitializedGraphicsFont, a2, a4, v52))
  {
LABEL_75:
    *(_QWORD *)&v170.a = keys;
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v170);
LABEL_76:
    ColorBitmapFontTranslate = *MEMORY[0x1E0C9D538];
    v70 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v189 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this[50] + 480))(&v189, this[50], 1935829368);
    if (atomic_load((unint64_t *)&v189))
    {
      memset(v188, 170, sizeof(v188));
      v72 = (void *)atomic_load((unint64_t *)&v189);
      v73 = this[50];
      if (!*((_QWORD *)v73 + 25))
      {
        v74 = TBaseFont::GetInitializedGraphicsFont(this[50]);
        (*(void (**)(TBaseFont *, uint64_t))(*(_QWORD *)v73 + 872))(v73, v74);
      }
      TsbixContext::TsbixContext((TsbixContext *)v188, v72);
      if (v188[1])
        v75 = (*((unsigned __int16 *)v188[1] + 1) >> 9) & 1;
      else
        v75 = 0;
      memset(&keys[24], 170, 0x3C0uLL);
      memset(keys, 0, 24);
      v202 = &keys[24];
      if (a4)
      {
        std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100]((char **)keys, a4);
        v76 = *(_QWORD *)&keys[8];
        bzero(*(void **)&keys[8], 32 * a4);
        *(_QWORD *)&keys[8] = v76 + 32 * a4;
      }
      if (((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this[50] + 712))(this[50]) & 1) != 0
        || (v77 = *(CGRect **)keys, (v78 = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this[50])) != 0)
        && CGFontGetGlyphBBoxes(v78, v49, a4, v77))
      {
        *(_QWORD *)&v79 = -1;
        *((_QWORD *)&v79 + 1) = -1;
        *(_OWORD *)&v198.tx = v79;
        *(_OWORD *)&v198.c = v79;
        *(_OWORD *)&v198.a = v79;
        GetFontScaleTransform(&v198, (CGContext *)this);
        *(_QWORD *)&v80 = -1;
        *((_QWORD *)&v80 + 1) = -1;
        *(_OWORD *)&v197.tx = v80;
        *(_OWORD *)&v197.c = v80;
        *(_OWORD *)&v197.a = v80;
        CGContextGetTextMatrix(&v197, a5);
        *(_QWORD *)&v81 = -1;
        *((_QWORD *)&v81 + 1) = -1;
        *(_OWORD *)&v193.tx = v81;
        *(_OWORD *)&v193.c = v81;
        *(_OWORD *)&v193.a = v81;
        CGContextGetCTM(&v193, a5);
        FillColorAsColor = (CGColor *)CGContextGetFillColorAsColor();
        v83 = CGColorGetAlpha(FillColorAsColor) == 0.0;
        ContentsScale = GetContentsScale(a5);
        ColorBitmapFontTranslate = TFont::GetColorBitmapFontTranslate((TFont *)this);
        v70 = v85;
        v175 = unk_1849305B8;
        v178 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v170.a = keys;
        *(_QWORD *)&v170.b = v188;
        *(_QWORD *)&v170.c = a4;
        *(_QWORD *)&v170.d = __PAIR64__(unk_184930584, v50);
        *(_QWORD *)&v170.tx = a3;
        *(_QWORD *)&v170.ty = v49;
        v171 = this;
        v172 = *(_QWORD *)&ContentsScale;
        v173 = ColorBitmapFontTranslate;
        v174 = v85;
        LOBYTE(v175) = v83;
        v176 = v198;
        v177 = a5;
        LOBYTE(v178) = v75;
        v86 = *(_OWORD *)(v6 + 80);
        v183 = *(_OWORD *)(v6 + 64);
        v184 = v86;
        v185 = *(_OWORD *)(v6 + 96);
        v186 = *(_QWORD *)(v6 + 112);
        v87 = *(_OWORD *)(v6 + 16);
        v179 = *(float64x2_t *)v6;
        v180 = v87;
        v88 = *(_OWORD *)(v6 + 48);
        v181 = *(_OWORD *)(v6 + 32);
        v182 = v88;
        v187 = v193;
        _V2.D[1] = v197.b;
        v90 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
        v91 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v90, vabsq_f64(vaddq_f64(*(float64x2_t *)&v197.c, (float64x2_t)xmmword_18492F290))), (int8x16_t)vcgeq_f64(v90, vabsq_f64(vaddq_f64(*(float64x2_t *)&v197.a, (float64x2_t)xmmword_18492F280))));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v91, 1), (int8x16_t)v91).u64[0] & 0x8000000000000000) != 0)
        {
          v169 = v193;
          CGAffineTransformMakeTranslation(&v168, v197.tx, v197.ty);
        }
        else
        {
          _D3 = 0;
          __asm { FMLA            D1, D3, V2.D[1]; __y }
          v94 = hypot(vmlad_n_f64(v197.c, 0.0, v197.a), _D1);
          v95 = 1.0;
          if (v94 > 1.0)
          {
            t1 = v197;
            CGAffineTransformScale(&t2, &t1, 1.0 / v94, 1.0 / v94);
            v197 = t2;
            v95 = v94;
          }
          *(_QWORD *)&v96 = -1;
          *((_QWORD *)&v96 + 1) = -1;
          *(_OWORD *)&v192.tx = v96;
          *(_OWORD *)&v192.c = v96;
          *(_OWORD *)&v192.a = v96;
          CGAffineTransformMakeScale(&v192, v95, v95);
          *(_QWORD *)&v97 = -1;
          *((_QWORD *)&v97 + 1) = -1;
          *(_OWORD *)&v167.c = v97;
          *(_OWORD *)&v167.tx = v97;
          *(_OWORD *)&v167.a = v97;
          t1 = v197;
          t2 = v193;
          CGAffineTransformConcat(&v167, &t1, &t2);
          v166[1] = v167;
          CGContextSetCTM();
          v166[0] = v167;
          v165[0] = *(float64x2_t *)&v192.a;
          v165[1] = *(float64x2_t *)&v192.c;
          v165[2] = *(float64x2_t *)&v192.tx;
          v164 = v193;
          CGContextSetCTM();
        }
      }
      *(_QWORD *)&v170.a = keys;
      std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v170);

      if (!v75)
        goto LABEL_145;
    }
    if (ColorBitmapFontTranslate != 0.0 || v70 != 0.0)
    {
      TextPosition = CGContextGetTextPosition(a5);
      CGContextSetTextPosition(a5, ColorBitmapFontTranslate + TextPosition.x, v70 + TextPosition.y);
    }
    v99 = *(void **)(v6 + 112);
    if (v99)
    {
      DrawGlyphsWithTextEffects(v99, v49, a3, a4, a5);
LABEL_145:

      goto LABEL_146;
    }
    if (*(_BYTE *)(v6 + 104))
    {
      CGContextGetTextMatrix(&v163, a5);
      v100 = HandleFlippedTextMatrix(a5, &v163);
    }
    else
    {
      v100 = 0;
    }
    v192.a = -3.72066208e-103;
    (*(void (**)(CGAffineTransform *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this[50] + 480))(&v192, this[50], 1129270354);
    v101 = atomic_load((unint64_t *)&v192);
    if (!v101
      || (theArraya = (const __CFArray *)TFont::GetPaletteColors((TFont *)this),
          Count = CFArrayGetCount(theArraya),
          Count < 1))
    {

      v115 = *(float64x2_t *)(v6 + 16);
      v116 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)v6, (float64x2_t)xmmword_18492FA90), (int8x16_t)vceqq_f64(v115, (float64x2_t)xmmword_18492E300)), (int8x16_t)vceqzq_f64(*(float64x2_t *)(v6 + 32)));
      if ((vandq_s8((int8x16_t)v116, (int8x16_t)vdupq_laneq_s64(v116, 1)).u64[0] & 0x8000000000000000) != 0)
      {
        v158[0] = MEMORY[0x1E0C809B0];
        v158[1] = 3321888768;
        v158[2] = ___ZL21DrawGlyphsAtPositionsPK5TFontPKtPK7CGPointmP9CGContextRKN12_GLOBAL__N_123DrawGlyphsConfigurationE_block_invoke;
        v158[3] = &__block_descriptor_96_8_64c27_ZTS6TCFRefIPK10__CFStringE88c31_ZTS6TCFRefIPK14__CFDictionaryE_e16_v28__0___qq_8B24l;
        v158[4] = a5;
        v158[5] = v49;
        v158[6] = a3;
        v158[7] = v148;
        v119 = (void *)atomic_load((unint64_t *)&v196);
        v159 = v119;
        v160 = v146;
        v161 = v150;
        v120 = (void *)atomic_load((unint64_t *)&v195);
        v162 = v120;
        EnumerateOverlappingGlyphs(this[50], v49, a4, v50, (uint64_t)v158);

      }
      else
      {
        *(_OWORD *)keys = *(_OWORD *)v6;
        *(float64x2_t *)&keys[16] = v115;
        *(_OWORD *)&keys[32] = *MEMORY[0x1E0C9D538];
        if (a4)
        {
          p_y = &a3->y;
          do
          {
            v118 = *v49++;
            DrawVisibleGlyph(a5, v118, *(CGPoint *)(p_y - 1), (const CGAffineTransform *)keys, (const CGAffineTransform *)(v6 + 48));
            p_y += 2;
            --a4;
          }
          while (a4);
        }
      }
LABEL_143:
      if (v100)
        RestoreFlippedTextMatrix(a5);
      goto LABEL_145;
    }
    v102 = (id)CGContextGetFillColorAsColor();
    *(_QWORD *)&v103 = -1;
    *((_QWORD *)&v103 + 1) = -1;
    *(_OWORD *)&t1.tx = v103;
    *(_OWORD *)&t1.c = v103;
    *(_OWORD *)&t1.a = v103;
    CGContextGetTextMatrix(&t1, a5);
    *(_QWORD *)&v104 = -1;
    *((_QWORD *)&v104 + 1) = -1;
    *(_OWORD *)&t2.tx = v104;
    *(_OWORD *)&t2.c = v104;
    *(_OWORD *)&t2.a = v104;
    CGContextGetCTM(&t2, a5);
    _V2.D[1] = t1.b;
    v106 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
    v107 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v106, vabsq_f64(vaddq_f64(*(float64x2_t *)&t1.c, (float64x2_t)xmmword_18492F290))), (int8x16_t)vcgeq_f64(v106, vabsq_f64(vaddq_f64(*(float64x2_t *)&t1.a, (float64x2_t)xmmword_18492F280))));
    v142 = v100;
    v147 = (CGAffineTransform *)(v6 + 48);
    if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v107, 1), (int8x16_t)v107).u64[0] & 0x8000000000000000) != 0)
    {
      v145 = *(_OWORD *)&t2.tx;
      v144 = *(_OWORD *)&t2.c;
      b = t2.b;
      a = t2.a;
      CGAffineTransformMakeTranslation((CGAffineTransform *)keys, t1.tx, t1.ty);
    }
    else
    {
      _D3 = 0;
      __asm { FMLA            D1, D3, V2.D[1]; __y }
      v110 = hypot(vmlad_n_f64(t1.c, 0.0, t1.a), _D1);
      v111 = 1.0;
      if (v110 > 1.0)
      {
        v112 = v110;
        *(CGAffineTransform *)keys = t1;
        CGAffineTransformScale(&v170, (CGAffineTransform *)keys, 1.0 / v110, 1.0 / v110);
        t1 = v170;
        v111 = v112;
      }
      *(CGAffineTransform *)keys = t1;
      v170 = t2;
      CGAffineTransformConcat(&v198, (CGAffineTransform *)keys, &v170);
      a = v198.a;
      b = v198.b;
      v144 = *(_OWORD *)&v198.c;
      v145 = *(_OWORD *)&v198.tx;
      CGAffineTransformMakeScale((CGAffineTransform *)keys, v111, v111);
    }
    v121 = *(double *)keys;
    v122 = *(double *)&keys[8];
    v123 = *(_OWORD *)&keys[16];
    v124 = *(_OWORD *)&keys[32];
    Style = CGContextGetStyle();
    if (v50 >= 0)
      v126 = 0;
    else
      v126 = a4 - 1;
    if (v50 < 0)
      v127 = -1;
    else
      v127 = a4;
    v149 = v127;
    v151 = Style;
    if (v126 == v127)
      goto LABEL_142;
    v143 = v6;
LABEL_123:
    v128 = v49[v126];
    memset(&v193, 170, 24);
    v129 = (const __CFData *)atomic_load((unint64_t *)&v192);
    LayerRecordsForGlyph(v129, v128, &v193);
    p_x = &a3[v126].x;
    v131 = *p_x;
    v132 = *((_QWORD *)p_x + 1);
    if (*(_QWORD *)&v193.a == *(_QWORD *)&v193.b)
    {
      DrawVisibleGlyph(a5, v128, *(CGPoint *)&v131, (const CGAffineTransform *)v6, v147);
      goto LABEL_139;
    }
    DrawInvisibleGlyph(a5, v128, *(CGPoint *)&v131, (const CGAffineTransform *)v6, v147);
    CGContextSaveGState(a5);
    CGAffineTransformMakeTranslation(&v198, *(double *)&v124 + *(double *)&v123 * p_x[1] + v121 * *p_x, *((double *)&v124 + 1) + *((double *)&v123 + 1) * p_x[1] + v122 * *p_x);
    *(CGAffineTransform *)keys = v198;
    v170.a = a;
    v170.b = b;
    *(_OWORD *)&v170.c = v144;
    *(_OWORD *)&v170.tx = v145;
    CGAffineTransformConcat(&v197, (CGAffineTransform *)keys, &v170);
    CGContextSetCTM();
    if (v151)
      CGContextBeginTransparencyLayer(a5, 0);
    v133 = v193.a;
    v134 = v193.b;
    while (1)
    {
      if (*(_QWORD *)&v133 == *(_QWORD *)&v134)
      {
        if (v151)
          CGContextEndTransparencyLayer(a5);
        CGContextRestoreGState(a5);
        v6 = v143;
LABEL_139:
        if (*(_QWORD *)&v193.a)
        {
          v193.b = v193.a;
          operator delete(*(void **)&v193.a);
        }
        v126 += v50;
        if (v126 == v149)
        {
LABEL_142:

          v100 = v142;
          goto LABEL_143;
        }
        goto LABEL_123;
      }
      v135 = (unsigned __int16)**(_WORD **)&v133;
      v136 = *(unsigned __int16 *)(*(_QWORD *)&v133 + 2);
      ValueAtIndex = (CGColor *)v102;
      if (v136 != 0xFFFF)
      {
        if (Count <= v136)
          goto LABEL_134;
        ValueAtIndex = (CGColor *)CFArrayGetValueAtIndex(theArraya, v136);
      }
      CGContextSetFillColorWithColor(a5, ValueAtIndex);
      *(_QWORD *)keys = 0xAAAAAAAAAAAAAAAALL;
      TFont::CreatePathForGlyph((TFont *)this, 0, v135, (unint64_t *)keys);
      if (atomic_load((unint64_t *)keys))
      {
        v139 = (const CGPath *)atomic_load((unint64_t *)keys);
        CGContextAddPath(a5, v139);
        CGContextDrawPath(a5, kCGPathFill);
      }

LABEL_134:
      *(_QWORD *)&v133 += 4;
    }
  }
  *(_QWORD *)&v54 = -1;
  *((_QWORD *)&v54 + 1) = -1;
  *(_OWORD *)&v198.tx = v54;
  *(_OWORD *)&v198.c = v54;
  *(_OWORD *)&v198.a = v54;
  CGContextGetTextMatrix(&v198, a5);
  *(_QWORD *)&v55 = -1;
  *((_QWORD *)&v55 + 1) = -1;
  *(_OWORD *)&v197.tx = v55;
  *(_OWORD *)&v197.c = v55;
  *(_OWORD *)&v197.a = v55;
  CGContextGetCTM(&v197, a5);
  PaletteColors = TFont::GetPaletteColors((TFont *)this);
  *(_QWORD *)&v170.a = &v167;
  *(_QWORD *)&v170.b = &v206;
  *(_QWORD *)&v170.c = values;
  *(_QWORD *)&v170.d = a4;
  *(_QWORD *)&v170.tx = a2;
  *(_QWORD *)&v170.ty = PaletteColors;
  v171 = (TBaseFont **)a3;
  v172 = v156 | 0xAAAAAAAA00000000;
  v173 = *(double *)&a5;
  _V2.D[1] = v198.b;
  v58 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  v59 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v58, vabsq_f64(vaddq_f64(*(float64x2_t *)&v198.c, (float64x2_t)xmmword_18492F290))), (int8x16_t)vcgeq_f64(v58, vabsq_f64(vaddq_f64(*(float64x2_t *)&v198.a, (float64x2_t)xmmword_18492F280))));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v59, 1), (int8x16_t)v59).u64[0] & 0x8000000000000000) != 0)
  {
    CGAffineTransformMakeTranslation(&v194, v198.tx, v198.ty);
  }
  else
  {
    _D3 = 0;
    __asm { FMLA            D1, D3, V2.D[1]; __y }
    v65 = hypot(vmlad_n_f64(v198.c, 0.0, v198.a), _D1);
    v66 = 1.0;
    if (v65 > 1.0)
    {
      t1 = v198;
      CGAffineTransformScale(&t2, &t1, 1.0 / v65, 1.0 / v65);
      v198 = t2;
      v66 = v65;
    }
    *(_QWORD *)&v67 = -1;
    *((_QWORD *)&v67 + 1) = -1;
    *(_OWORD *)&v193.tx = v67;
    *(_OWORD *)&v193.c = v67;
    *(_OWORD *)&v193.a = v67;
    CGAffineTransformMakeScale(&v193, v66, v66);
    *(_QWORD *)&v68 = -1;
    *((_QWORD *)&v68 + 1) = -1;
    *(_OWORD *)&v192.tx = v68;
    *(_OWORD *)&v192.c = v68;
    *(_OWORD *)&v192.a = v68;
    t1 = v198;
    t2 = v197;
    CGAffineTransformConcat(&v192, &t1, &t2);
    v191[3] = *(float64x2_t *)&v192.a;
    v191[4] = *(float64x2_t *)&v192.c;
    v191[5] = *(float64x2_t *)&v192.tx;
    CGContextSetCTM();
    v191[0] = *(float64x2_t *)&v193.a;
    v191[1] = *(float64x2_t *)&v193.c;
    v191[2] = *(float64x2_t *)&v193.tx;
    v190 = v197;
    CGContextSetCTM();
  }
  v49 = (CGGlyph *)v206;
  if (v207 != v206)
  {
    a4 = (v207 - (_BYTE *)v206) >> 1;
    a3 = (const CGPoint *)values[0];
    goto LABEL_75;
  }
  *(_QWORD *)&v170.a = keys;
  std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v170);
LABEL_146:
  *(_QWORD *)keys = values;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)keys);
  *(_QWORD *)keys = &v206;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)keys);

}

void TBaseFont::CopyTable(TBaseFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  TBaseFont *v6;
  int v7;
  unint64_t v8;
  CGFont *InitializedGraphicsFont;
  unsigned int *v11;
  unsigned int v12;
  id v13;

  if ((_DWORD)a2 && (v6 = (TBaseFont *)TableFlagForIdentifier(a2), (*((_DWORD *)this + 44) & v6) == 0))
  {
    v7 = (int)v6;
    if (TBaseFont::IsCommonTableFlag(v6))
    {
      v13 = (id)TBaseFont::GetCommonTable(this, a2, 0);
      do
        v8 = __ldaxr((unint64_t *)&v13);
      while (__stlxr(0, (unint64_t *)&v13));
      *a3 = v8;

    }
    else
    {
      InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
      *a3 = (unint64_t)CGFontCopyTableForTag(InitializedGraphicsFont, a2);
      if (!atomic_load(a3))
      {
        v11 = (unsigned int *)((char *)this + 176);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 | v7, v11));
      }
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TBaseFont::IsCommonTableFlag(TBaseFont *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if (v1 <= 127)
  {
    v3 = v1 - 1;
    if (v3 <= 0x3F && ((1 << v3) & 0x8000000000000089) != 0)
      return result;
    return 0;
  }
  if (v1 >= 0x4000)
  {
    if (v1 != 0x4000 && v1 != 0x400000)
      return 0;
  }
  else if (v1 != 128 && v1 != 256)
  {
    return 0;
  }
  return result;
}

uint64_t TBaseFont::HasTable(TBaseFont *this, int a2)
{
  int v4;
  char v5;
  int v6;
  CGFont *InitializedGraphicsFont;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  int v13;
  int ValueAtIndex;
  int v15;
  unsigned int *v16;
  unsigned int v17;

  if (a2 && (v4 = TableFlagForIdentifier(a2), (*((_DWORD *)this + 44) & v4) == 0))
  {
    v6 = v4;
    InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
    v8 = CGFontCopyTableTags(InitializedGraphicsFont);
    v9 = v8;
    if (v8 && (Count = CFArrayGetCount(v8)) != 0)
    {
      v11 = Count;
      v5 = 0;
      v12 = 0;
      v13 = 0x7FFFFF;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
        if (ValueAtIndex == a2)
        {
          v5 = 1;
          v15 = v6;
        }
        else
        {
          v15 = TableFlagForIdentifier(ValueAtIndex);
        }
        v13 &= ~v15;
        ++v12;
      }
      while (v11 != v12);
    }
    else
    {
      v5 = 0;
      v13 = 0x7FFFFF;
    }
    v16 = (unsigned int *)((char *)this + 176);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 | v13, v16));

  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t TableFlagForIdentifier(int a1)
{
  if (a1 <= 1717920115)
  {
    if (a1 <= 1296388678)
    {
      if (a1 <= 1195656517)
      {
        if (a1 == 1111577413)
          return 0x10000;
        if (a1 == 1129270354)
          return 32;
      }
      else
      {
        switch(a1)
        {
          case 1195656518:
            return 256;
          case 1196445523:
            return 128;
          case 1196643650:
            return 64;
        }
      }
    }
    else if (a1 > 1398163231)
    {
      switch(a1)
      {
        case 1398163232:
          return 1024;
        case 1634626418:
          return 0x20000;
        case 1651731566:
          return 0x8000;
      }
    }
    else
    {
      switch(a1)
      {
        case 1296388679:
          return 2;
        case 1330851634:
          return 0x100000;
        case 1398030676:
          return 0x200000;
      }
    }
  }
  else if (a1 > 1819566438)
  {
    if (a1 > 1886547823)
    {
      switch(a1)
      {
        case 1886547824:
          return 2048;
        case 1935829368:
          return 0x2000;
        case 1953653099:
          return 8;
      }
    }
    else
    {
      switch(a1)
      {
        case 1819566439:
          return 0x400000;
        case 1836020344:
          return 4;
        case 1869636196:
          return 0x40000;
      }
    }
  }
  else if (a1 > 1801810541)
  {
    switch(a1)
    {
      case 1801810542:
        return 1;
      case 1801810552:
        return 0x4000;
      case 1818452338:
        return 4096;
    }
  }
  else
  {
    switch(a1)
    {
      case 1717920116:
        return 16;
      case 1751474532:
        return 0x80000;
      case 1786082164:
        return 512;
    }
  }
  return 0;
}

unsigned __int16 *OTL::GSUB::ApplyChainContextSubstFormat2(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6)
{
  unsigned int GlyphID;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 *result;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  unsigned int v30;
  _WORD *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  _WORD *v45;
  _WORD *v47;
  unsigned int v49;
  uint64_t v50;
  CFIndex v51;
  char *v52;
  uint64_t v53;
  _WORD *v54;
  BOOL v55;
  int v56;
  unsigned int v57;
  unsigned __int16 *v58;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  unint64_t v65;
  unsigned __int16 *v66;
  CFIndex v67;
  CFIndex v68;
  unsigned __int16 *v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unsigned __int16 *v74;
  BOOL v75;
  CFIndex v76;
  int v77;
  unsigned int v78;
  CFIndex v79;
  CFIndex v80;
  CFIndex v81;
  CFRange v82;
  unint64_t v83;
  _QWORD *v84;
  _WORD *v85;
  uint64_t v86;
  unsigned __int16 *v87;
  OTL::ClassDefTable *v88;
  int v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[31];
  unint64_t v98;

  v95 = *(_QWORD *)(a3 + 48);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v95);
  v13 = a1[5];
  v14 = a2 + 6;
  if ((unint64_t)(a2 + 5) < a1[4] || (unint64_t)v14 > v13)
    return 0;
  v16 = __rev16(a2[5]);
  v17 = (unint64_t)&v14[v16];
  v18 = (unint64_t)(a2 + 7) <= v13 ? (v13 - (unint64_t)v14) >> 1 : 0;
  v19 = v17 <= v13 && v17 >= (unint64_t)v14;
  v20 = v19 || v18 == v16;
  if (!v20)
    return 0;
  v21 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[3]) >> 16));
  if ((unint64_t)(v21 + 1) > v13)
    return 0;
  v22 = GlyphID;
  v23 = bswap32(*v21) >> 16;
  if (v23 == 2)
  {
    v24 = 6 * (bswap32(v21[1]) >> 16) + 4;
  }
  else if (v23 == 1)
  {
    v24 = 2 * (bswap32(v21[2]) >> 16) + 6;
  }
  else
  {
    v24 = 0;
  }
  result = 0;
  v26 = (char *)v21 + v24;
  if (v26 < (char *)v21 || (unint64_t)v26 > v13)
    return result;
  if (!a2[5])
    return 0;
  v27 = a2[2];
  v28 = a2[4];
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97[29] = v29;
  v97[30] = v29;
  v97[27] = v29;
  v97[28] = v29;
  v97[25] = v29;
  v97[26] = v29;
  v97[23] = v29;
  v97[24] = v29;
  v97[21] = v29;
  v97[22] = v29;
  v97[19] = v29;
  v97[20] = v29;
  v97[17] = v29;
  v97[18] = v29;
  v97[16] = v29;
  v98 = 0xAAAAAAAAAAAAAAAALL;
  v97[15] = v29;
  v97[14] = v29;
  v97[13] = v29;
  v97[12] = v29;
  v97[11] = v29;
  v97[10] = v29;
  v97[9] = v29;
  v97[8] = v29;
  v97[7] = v29;
  v97[5] = v29;
  v97[6] = v29;
  v97[3] = v29;
  v97[4] = v29;
  v97[1] = v29;
  v97[2] = v29;
  v97[0] = v29;
  v96 = v95;
  v88 = (OTL::ClassDefTable *)v21;
  v30 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v21, v22);
  v93 = (unint64_t)a2;
  result = ChainContextSubstFormat2::NthChainSubClassSet((ChainContextSubstFormat2 *)a2, v30, v13);
  if (!result)
    return result;
  v31 = result;
  if (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
  {
    v32 = *(_QWORD *)(a3 + 48);
    v33 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v32);
    v34 = OTL::ClassDefTable::ClassOf(v88, v33);
    v35 = v32;
    v89 = v34;
    v36 = v95;
  }
  else
  {
    v89 = 0;
    v36 = v95;
    v35 = v95;
  }
  v37 = v93;
  v83 = a6;
  v84 = a1;
  v38 = v31 + 1;
  v85 = a4;
  v86 = a5;
  if ((unint64_t)(v31 + 1) < v93
    || (LODWORD(v39) = __rev16((unsigned __int16)*v31),
        v40 = (unint64_t)&v38[v39],
        v40 < (unint64_t)v38)
    || v40 > v13)
  {
    v41 = (unint64_t)(v31 + 2) <= v13 && (unint64_t)v38 >= v93;
    LODWORD(v39) = (v13 - (_DWORD)v38) >> 1;
    if (!v41)
      LODWORD(v39) = 0;
    if (!(bswap32(v39) >> 16))
      goto LABEL_129;
  }
  else if (!*v31)
  {
LABEL_129:
    result = 0;
    *(_QWORD *)(a3 + 48) = v36;
    return result;
  }
  v42 = 0;
  v43 = (unsigned __int16 *)(v93 + (bswap32(v27) >> 16));
  v90 = (unsigned __int16 *)(v93 + (bswap32(v28) >> 16));
  v91 = v43 + 1;
  v87 = v90 + 1;
  if ((v39 & 0xFFFE) != 0)
    v39 = (unsigned __int16)v39;
  else
    v39 = 1;
  v94 = v39;
  v92 = v35;
  while (1)
  {
    if (v42 >= bswap32((unsigned __int16)*v31) >> 16)
      goto LABEL_128;
    v44 = (unsigned __int16)v31[v42 + 1];
    v20 = v44 == 0;
    v45 = (_WORD *)((char *)v31 + __rev16(v44));
    if (v20 || (unint64_t)v45 > v13)
      goto LABEL_128;
    v47 = v45 + 1;
    if ((unint64_t)v45 < v37 || (unint64_t)v47 > v13)
      goto LABEL_129;
    if (*v45)
    {
      if ((unint64_t)v91 > v13)
        goto LABEL_129;
      v49 = bswap32(*v43) >> 16;
      if (v49 == 2)
        v50 = 6 * (bswap32(*v91) >> 16) + 4;
      else
        v50 = v49 == 1 ? 2 * (bswap32(v43[2]) >> 16) + 6 : 0;
      v52 = (char *)v43 + v50;
      if (v52 < (char *)v43 || (unint64_t)v52 > v13)
        goto LABEL_129;
      v53 = __rev16((unsigned __int16)*v45);
      v54 = &v47[v53];
      v55 = v54 < v47 || (unint64_t)v54 > v13;
      if (v55 && ((unint64_t)(v45 + 2) > v13 || (v13 - (unint64_t)v47) >> 1 != v53))
        goto LABEL_129;
      *(_QWORD *)(a3 + 48) = v36;
      if (v53 <= 1)
        v56 = 1;
      else
        v56 = v53;
      while (TGlyphIterator::PrevContext((TGlyphIterator *)a3, 1))
      {
        v57 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
        if (OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v43, v57) != bswap32((unsigned __int16)*v47) >> 16)
          break;
        ++v47;
        if (!--v56)
        {
          v51 = *(_QWORD *)(a3 + 48);
          v35 = v92;
          v37 = v93;
          *(_QWORD *)(a3 + 48) = v92;
          v36 = v95;
          goto LABEL_77;
        }
      }
      goto LABEL_127;
    }
    v51 = v36;
LABEL_77:
    v58 = v47 + 1;
    if ((unint64_t)v47 < v37 || (unint64_t)v58 > v13)
      goto LABEL_129;
    v60 = (unsigned __int16)*v47;
    if (*v47)
    {
      v61 = __rev16(v60);
      if (v61 <= 0x40)
      {
        v62 = v61 - 1;
        v63 = &v58[v61 - 1];
        if (v63 < v58 || (unint64_t)v63 > v13)
        {
          v65 = (unint64_t)(v47 + 2) <= v13 ? (v13 - (unint64_t)v58) >> 1 : 0;
          if (v65 != v62)
            goto LABEL_129;
        }
        v66 = &v47[v61];
        if (v35 == v36 || v60 == 256)
        {
          v67 = v36;
        }
        else
        {
          v67 = v36;
          if (v89 == bswap32(*v58) >> 16)
          {
            *(_QWORD *)&v97[0] = v35;
            v58 = v47 + 2;
            if (v60 == 512)
            {
              v67 = v35;
            }
            else
            {
              v68 = v51;
              if (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
              {
                v58 = EqualClassSequenceAndNote<BigEndianScalar<unsigned short>>(v88, v58, v66, a3, (_QWORD *)v97 + 1);
                v67 = *(_QWORD *)(a3 + 48);
                v35 = v92;
                *(_QWORD *)(a3 + 48) = v92;
              }
              else
              {
                v35 = v92;
                v67 = v92;
              }
              v36 = v95;
              v37 = v93;
              v51 = v68;
            }
          }
        }
        if (v58 == v66)
          break;
      }
    }
LABEL_128:
    if (++v42 == v94)
      goto LABEL_129;
  }
  v69 = v66 + 1;
  if ((unint64_t)(v66 + 1) > v13)
    goto LABEL_129;
  if (*v66)
  {
    if ((unint64_t)v87 > v13)
      goto LABEL_129;
    v70 = bswap32(*v90) >> 16;
    if (v70 == 2)
      v71 = 6 * (bswap32(*v87) >> 16) + 4;
    else
      v71 = v70 == 1 ? 2 * (bswap32(v90[2]) >> 16) + 6 : 0;
    v72 = (char *)v90 + v71;
    if (v72 < (char *)v90 || (unint64_t)v72 > v13)
      goto LABEL_129;
    v73 = __rev16(*v66);
    v74 = &v69[v73];
    v75 = v74 < v69 || (unint64_t)v74 > v13;
    if (v75 && ((unint64_t)(v66 + 2) > v13 || (v13 - (unint64_t)v69) >> 1 != v73))
      goto LABEL_129;
    v76 = v51;
    *(_QWORD *)(a3 + 48) = *(&v96 + v62);
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v73;
    while (TGlyphIterator::NextContext((TGlyphIterator *)a3, 1))
    {
      v78 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
      if (OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v90, v78) != bswap32(*v69) >> 16)
        break;
      ++v69;
      if (!--v77)
      {
        v67 = *(_QWORD *)(a3 + 48);
        v37 = v93;
        *(_QWORD *)(a3 + 48) = v92;
        v36 = v95;
        v51 = v76;
        goto LABEL_130;
      }
    }
LABEL_127:
    v35 = v92;
    v37 = v93;
    *(_QWORD *)(a3 + 48) = v92;
    v36 = v95;
    goto LABEL_128;
  }
LABEL_130:
  if ((unint64_t)v69 < v37 || (unint64_t)(v69 + 1) > v13)
    goto LABEL_129;
  v79 = v67;
  v80 = v51;
  if (OTL::GSUB::ApplySubstLookupRecords(v84, v37, v69 + 1, bswap32(*v69) >> 16, a3, v36, &v96, v61, v85, v86, v83)&& *(_QWORD *)(*(_QWORD *)a3 + 152))
  {
    v81 = v80 - v79;
    if (v80 >= v79)
      v82.location = v79;
    else
      v82.location = v80;
    if (v80 - v79 < 0)
      v81 = v79 - v80;
    v82.length = v81 + 1;
    TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)a3, v82);
  }
  return (unsigned __int16 *)1;
}

void EnumerateOverlappingGlyphs(TBaseFont *a1, unsigned __int16 *a2, uint64_t a3, int a4, uint64_t a5)
{
  id *MergeTable;
  uint64_t v10;
  _BYTE *v11;
  _BOOL8 v12;
  id *v13;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  unsigned __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  int64x2_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char *v67;
  _QWORD *v68;
  uint64_t v70;
  uint64_t v72;
  int64x2_t v73;
  char *v74;
  _BYTE *v75;
  int64x2_t v76;
  char *v77;
  _BYTE v78[720];
  _QWORD v79[3];

  v79[1] = *MEMORY[0x1E0C80C00];
  memset(v78, 170, sizeof(v78));
  v76 = 0uLL;
  v77 = 0;
  v79[0] = v78;
  MergeTable = TBaseFont::GetMergeTable(a1);
  if (!MergeTable)
  {
    v12 = (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)a1 + 392))(a1)
       && (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)a1 + 208))(a1) != 5;
    (*(void (**)(uint64_t, _QWORD, uint64_t, _BOOL8))(a5 + 16))(a5, 0, a3, v12);
LABEL_87:
    v11 = (_BYTE *)v76.i64[0];
    if (!v76.i64[0])
      return;
    goto LABEL_88;
  }
  if (a3 > 1)
  {
    v13 = MergeTable;
    if (*((_WORD *)MergeTable[1] + 1) == 256)
    {
      v14 = *(_BYTE *)MergeTable[3];
      if (a4 < 0)
        v14 = *(_BYTE *)MergeTable[3] >> 4;
      v15 = v14 & 1;
      v16 = v76.i64[1];
      if (v76.i64[1] < (unint64_t)v77)
      {
        *(_QWORD *)v76.i64[1] = 0;
        *(_QWORD *)(v16 + 8) = a3;
        v11 = (_BYTE *)(v16 + 24);
        *(_BYTE *)(v16 + 16) = v15;
        goto LABEL_85;
      }
      v53 = 0xAAAAAAAAAAAAAAABLL * ((v76.i64[1] - v76.i64[0]) >> 3);
      v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_94;
      if (0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3) > v54)
        v54 = 0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v77[-v76.i64[0]] >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v54;
      v75 = v78;
      v20 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v78, v19);
      v21 = &v20[8 * ((v76.i64[1] - v76.i64[0]) >> 3)];
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = a3;
      v21[16] = v15;
      v23 = v76.u64[1];
      v55 = v76.i64[0];
      if (v76.i64[1] != v76.i64[0])
      {
        v24 = &v20[24 * v53];
        do
        {
          v56 = *(_OWORD *)(v23 - 24);
          *(v24 - 8) = *(_BYTE *)(v23 - 8);
          *(_OWORD *)(v24 - 24) = v56;
          v24 -= 24;
          v23 -= 24;
        }
        while (v23 != v55);
        goto LABEL_69;
      }
LABEL_70:
      v57 = vdupq_n_s64(v23);
      v24 = v21;
      goto LABEL_71;
    }
    v70 = a5;
    v26 = OTL::MergeTable::MergeClassForGlyph((OTL::MergeTable *)MergeTable, *a2);
    v27 = 0;
    v28 = 0;
    v29 = 1;
    v30 = 1;
    while (1)
    {
      v31 = OTL::MergeTable::MergeClassForGlyph((OTL::MergeTable *)v13, a2[v29]);
      v32 = v31;
      v33 = bswap32(*((unsigned __int16 *)v13[1] + 1)) >> 16;
      if (v33 <= (unsigned __int16)v26 || v33 <= v31)
        break;
      v37 = *((unsigned __int8 *)v13[3] + (unsigned __int16)v26 * (unint64_t)v33 + v31);
      if ((_DWORD)v31 == (unsigned __int16)v26 && v37 == 0)
        goto LABEL_40;
      if (a4 < 0)
        v37 >>= 4;
      if (!v37)
        break;
      if ((v37 & 1) != 0)
        v28 = 1;
      if ((v37 & 4) == 0)
LABEL_40:
        v26 = v31;
      ++v30;
      v32 = v26;
LABEL_55:
      ++v29;
      v26 = v32;
      if (v29 == a3)
      {
        v52 = v76.i64[1];
        if (v76.i64[1] < (unint64_t)v77)
        {
          *(_QWORD *)v76.i64[1] = v27;
          *(_QWORD *)(v52 + 8) = v30;
          v11 = (_BYTE *)(v52 + 24);
          *(_BYTE *)(v52 + 16) = v28;
          a5 = v70;
          goto LABEL_85;
        }
        v59 = 0xAAAAAAAAAAAAAAABLL * ((v76.i64[1] - v76.i64[0]) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          if (0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3) > v60)
            v60 = 0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v77[-v76.i64[0]] >> 3) >= 0x555555555555555)
            v61 = 0xAAAAAAAAAAAAAAALL;
          else
            v61 = v60;
          v75 = v78;
          v62 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v78, v61);
          v63 = &v62[24 * v59];
          *(_QWORD *)v63 = v27;
          *((_QWORD *)v63 + 1) = v30;
          v63[16] = v28;
          v65 = v76.i64[1];
          v64 = v76.i64[0];
          if (v76.i64[1] == v76.i64[0])
          {
            v57 = vdupq_n_s64(v76.u64[1]);
            v24 = &v62[24 * v59];
            a5 = v70;
          }
          else
          {
            v24 = &v62[24 * v59];
            a5 = v70;
            do
            {
              v66 = *(_OWORD *)(v65 - 24);
              *(v24 - 8) = *(_BYTE *)(v65 - 8);
              *(_OWORD *)(v24 - 24) = v66;
              v24 -= 24;
              v65 -= 24;
            }
            while (v65 != v64);
            v57 = v76;
          }
          v11 = v63 + 24;
          v58 = &v62[24 * v61];
          goto LABEL_84;
        }
LABEL_94:
        abort();
      }
    }
    v35 = v76.i64[1];
    if (v76.i64[1] >= (unint64_t)v77)
    {
      v39 = a2;
      v40 = a3;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v76.i64[1] - v76.i64[0]) >> 3);
      v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_94;
      if (0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3) > v42)
        v42 = 0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v77[-v76.i64[0]] >> 3) >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v42;
      v75 = v78;
      v44 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v78, v43);
      v45 = &v44[24 * v41];
      *(_QWORD *)v45 = v27;
      *((_QWORD *)v45 + 1) = v30;
      v45[16] = v28;
      v47 = v76.i64[1];
      v46 = v76.i64[0];
      if (v76.i64[1] == v76.i64[0])
      {
        v50 = vdupq_n_s64(v76.u64[1]);
        v48 = &v44[24 * v41];
        a3 = v40;
      }
      else
      {
        v48 = &v44[24 * v41];
        a3 = v40;
        do
        {
          v49 = *(_OWORD *)(v47 - 24);
          *(v48 - 8) = *(_BYTE *)(v47 - 8);
          *(_OWORD *)(v48 - 24) = v49;
          v48 -= 24;
          v47 -= 24;
        }
        while (v47 != v46);
        v50 = v76;
      }
      a2 = v39;
      v36 = v45 + 24;
      v76.i64[0] = (uint64_t)v48;
      v76.i64[1] = (uint64_t)(v45 + 24);
      v73 = v50;
      v51 = v77;
      v77 = &v44[24 * v43];
      v74 = v51;
      v72 = v50.i64[0];
      std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v72);
    }
    else
    {
      *(_QWORD *)v76.i64[1] = v27;
      *(_QWORD *)(v35 + 8) = v30;
      v36 = (char *)(v35 + 24);
      *(_BYTE *)(v35 + 16) = v28;
    }
    v28 = 0;
    v76.i64[1] = (uint64_t)v36;
    v30 = 1;
    v27 = v29;
    goto LABEL_55;
  }
  v10 = v76.i64[1];
  if (v76.i64[1] < (unint64_t)v77)
  {
    *(_QWORD *)v76.i64[1] = 0;
    *(_QWORD *)(v10 + 8) = a3;
    v11 = (_BYTE *)(v10 + 24);
    *(_BYTE *)(v10 + 16) = 0;
    goto LABEL_85;
  }
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v76.i64[1] - v76.i64[0]) >> 3);
  v18 = v17 + 1;
  if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_94;
  if (0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3) > v18)
    v18 = 0x5555555555555556 * ((uint64_t)&v77[-v76.i64[0]] >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v77[-v76.i64[0]] >> 3) >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  v75 = v78;
  v20 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v78, v19);
  v21 = &v20[8 * ((v76.i64[1] - v76.i64[0]) >> 3)];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = a3;
  v21[16] = 0;
  v23 = v76.u64[1];
  v22 = v76.i64[0];
  if (v76.i64[1] == v76.i64[0])
    goto LABEL_70;
  v24 = &v20[24 * v17];
  do
  {
    v25 = *(_OWORD *)(v23 - 24);
    *(v24 - 8) = *(_BYTE *)(v23 - 8);
    *(_OWORD *)(v24 - 24) = v25;
    v24 -= 24;
    v23 -= 24;
  }
  while (v23 != v22);
LABEL_69:
  v57 = v76;
LABEL_71:
  v11 = v21 + 24;
  v58 = &v20[24 * v19];
LABEL_84:
  v76.i64[0] = (uint64_t)v24;
  v76.i64[1] = (uint64_t)v11;
  v73 = v57;
  v67 = v77;
  v77 = v58;
  v74 = v67;
  v72 = v57.i64[0];
  std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v72);
LABEL_85:
  v76.i64[1] = (uint64_t)v11;
  v68 = (_QWORD *)v76.i64[0];
  if ((_BYTE *)v76.i64[0] != v11)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, *v68, v68[1], *((unsigned __int8 *)v68 + 16));
      v68 += 3;
    }
    while (v68 != (_QWORD *)v11);
    goto LABEL_87;
  }
LABEL_88:
  v76.i64[1] = (uint64_t)v11;
  if (v78 > v11 || v79 <= (_QWORD *)v11)
    operator delete(v11);
}

uint64_t OTL::MergeTable::MergeClassForGlyph(OTL::MergeTable *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (!*(_WORD *)(v2 + 6))
    return 0;
  v4 = __rev16(*(unsigned __int16 *)(v2 + 6));
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 4);
  while (1)
  {
    v7 = *v6++;
    result = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)(v2 + (bswap32(v7) >> 16)), a2);
    if ((_DWORD)result)
      break;
    if (!--v5)
      return 0;
  }
  return result;
}

uint64_t OTL::ClassDefTable::ClassOf(OTL::ClassDefTable *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  char *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  v2 = bswap32(*(unsigned __int16 *)this) >> 16;
  if (v2 == 2)
  {
    if (*((_WORD *)this + 1) && a2 >= bswap32(*((unsigned __int16 *)this + 2)) >> 16)
    {
      v5 = __rev16(*((unsigned __int16 *)this + 1));
      v6 = __clz(v5);
      v7 = v6 ^ 0x1F;
      v8 = 1 << (v6 ^ 0x1F);
      v9 = v5 - v8;
      if (a2 < bswap32(*((unsigned __int16 *)this + 3 * (v5 - v8) + 2)) >> 16)
        v9 = 0;
      if (v7)
      {
        do
        {
          if (a2 >= bswap32(*((unsigned __int16 *)this + 3 * v9 + 3 * (v8 >> 1) + 2)) >> 16)
            v9 += v8 >> 1;
          v10 = v8 > 3;
          v8 >>= 1;
        }
        while (v10);
      }
      if (a2 >= bswap32(*((unsigned __int16 *)this + 3 * v9 + 2)) >> 16
        && a2 <= bswap32(*((unsigned __int16 *)this + 3 * v9 + 3)) >> 16)
      {
        v4 = (char *)this + 6 * v9 + 8;
        return bswap32(*(unsigned __int16 *)v4) >> 16;
      }
    }
    return 0;
  }
  if (v2 != 1)
    return 0;
  v3 = bswap32(*((unsigned __int16 *)this + 1)) >> 16;
  if (v3 > a2 || v3 + (bswap32(*((unsigned __int16 *)this + 2)) >> 16) <= a2)
    return 0;
  v4 = (char *)this + 2 * (int)(a2 - v3) + 6;
  return bswap32(*(unsigned __int16 *)v4) >> 16;
}

id *TBaseFont::GetMergeTable(TBaseFont *this)
{
  unint64_t *v1;
  id *v2;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  id *v8;
  id v9;

  v1 = (unint64_t *)((char *)this + 592);
  v2 = (id *)atomic_load((unint64_t *)this + 74);
  if (v2 == (id *)-1)
    return 0;
  if (!v2)
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v9, this, 1296388679);
    if (atomic_load((unint64_t *)&v9))
    {
      v4 = (unint64_t *)operator new();
      v5 = OTL::MergeTable::MergeTable(v4, (unint64_t *)&v9);
      v8 = (id *)v5;
      v6 = v5[1];
      if (v6 && (*(_WORD *)(v6 + 2) != 256 || *(_BYTE *)v5[3]))
      {
        while (1)
        {
          v2 = (id *)__ldaxr(v1);
          if (v2)
            break;
          if (!__stlxr((unint64_t)v5, v1))
          {
            v2 = v8;
            v8 = 0;
            goto LABEL_14;
          }
        }
        __clrex();
LABEL_14:
        std::unique_ptr<OTL::MergeTable const>::reset[abi:nn180100](&v8, 0);

        return v2;
      }
      std::unique_ptr<OTL::MergeTable const>::reset[abi:nn180100](&v8, 0);
    }

    v2 = 0;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, v1);
  }
  return v2;
}

uint64_t TGlyphIterator::PrevContext(TGlyphIterator *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 4))
    return 0;
  v3 = a2;
  if (a2 >= 1)
  {
    while (1)
    {
      v5 = *((int *)this + 2);
      v6 = *((_QWORD *)this + 6) - v5;
      *((_QWORD *)this + 6) = v6;
      if ((int)v5 < 1)
      {
        if ((v5 & 0x80000000) != 0 && v6 >= *((_QWORD *)this + 4))
          return 0;
      }
      else if (v6 <= *((_QWORD *)this + 4))
      {
        return 0;
      }
      if ((TGlyphIterator::CurrentGlyphIsIgnored(this, 0) & 1) == 0)
      {
        result = 1;
        if (v3-- <= 1)
          return result;
      }
    }
  }
  return 1;
}

void ___ZL21DrawGlyphsAtPositionsPK5TFontPKtPK7CGPointmP9CGContextRKN12_GLOBAL__N_123DrawGlyphsConfigurationE_block_invoke(uint64_t a1, uint64_t a2, size_t count, int a4)
{
  CGContext *v5;
  const unsigned __int16 *v6;
  const CGPoint *v7;
  const uint64_t *v8;
  const __CFString *v9;
  CFIndex v10;
  CFIndex v11;
  const __CFDictionary *v12;
  CFRange v13;

  v5 = *(CGContext **)(a1 + 32);
  v6 = (const unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * a2);
  v7 = (const CGPoint *)(*(_QWORD *)(a1 + 48) + 16 * a2);
  v8 = (const uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * a2);
  v9 = (const __CFString *)atomic_load((unint64_t *)(a1 + 64));
  v11 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 88));
  if (a4)
  {
    CGContextGetShouldDrawBitmapRuns();
    CGContextSetShouldDrawBitmapRuns();
    v13.location = v11;
    v13.length = v10;
    DrawGlyphsAtPositionsWithString(v5, v6, v7, v8, count, v9, v13, v12);
    CGContextSetShouldDrawBitmapRuns();
  }
  else
  {
    DrawGlyphsAtPositionsWithString(v5, v6, v7, v8, count, v9, *(CFRange *)(a1 + 72), v12);
  }
}

void DrawGlyphsAtPositionsWithString(CGContext *a1, const unsigned __int16 *a2, const CGPoint *a3, const uint64_t *a4, size_t count, const __CFString *a6, CFRange a7, const __CFDictionary *a8)
{
  if (a4 && a6)
    CGContextShowGlyphsAtPositionsWithString();
  else
    CGContextShowGlyphsAtPositions(a1, a2, a3, count);
}

uint64_t TBaseFont::SupportsConnectedLanguage(TBaseFont *this)
{
  unsigned int *v2;
  const __CFString *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CFIndex location;
  __CFString *v12;
  const __CFSet *v13;
  __CFString *v14;
  __CFString *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  id v31;
  _QWORD v32[3];
  CFRange v33;

  v32[2] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 46) & 0x800000) != 0)
    return (*((_DWORD *)this + 45) >> 23) & 1;
  v2 = (unsigned int *)((char *)this + 184);
  v3 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  if (v3 == CFSTR(".SFUI") || v3 && CFStringHasPrefix(v3, CFSTR(".SFUI")) || IsPingFangPostScriptName(v3))
  {
    v4 = (unsigned int *)((char *)this + 180);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5, v4));
    do
      v6 = __ldxr(v2);
    while (__stxr(v6 | 0x800000, v2));
    return 0;
  }
  if (qword_1EDD171C8 == -1)
  {
    if (!v3)
      goto LABEL_29;
  }
  else
  {
    dispatch_once_f(&qword_1EDD171C8, 0, (dispatch_function_t)TBaseFont::SupportsConnectedLanguage(void)const::$_0::__invoke);
    if (!v3)
      goto LABEL_29;
  }
  if (qword_1EDD171C0 && CFSetContainsValue((CFSetRef)qword_1EDD171C0, v3))
  {
    v8 = (unsigned int *)((char *)this + 180);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 | 0x800000, v8));
    result = 1;
    do
      v10 = __ldxr(v2);
    while (__stxr(v10 | 0x800000, v2));
    return result;
  }
  location = CFStringFind(v3, CFSTR("-"), 0).location;
  if (location != -1)
  {
    v33.length = location;
    v33.location = 0;
    v12 = (__CFString *)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, v33);
    v13 = (const __CFSet *)qword_1EDD171C0;
    v14 = v12;
    v15 = v14;
    if (v13)
    {
      v16 = CFSetContainsValue(v13, v14);

      if (v16)
      {
        v17 = (unsigned int *)((char *)this + 180);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 | 0x800000, v17));
        do
          v19 = __ldxr(v2);
        while (__stxr(v19 | 0x800000, v2));
        v20 = v12;
LABEL_50:

        return 1;
      }
    }
    else
    {

    }
  }
LABEL_29:
  if (((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 704))(this) & 1) == 0)
  {
    v32[0] = 0xAAAAAAAAAAAAAAAALL;
    v32[1] = 0xAAAAAAAAAAAAAAAALL;
    v31 = 0;
    if (TBaseFont::GetOS2UnicodeRanges(this, v32, (unint64_t *)&v31))
    {
      v21 = 0;
      while (((*(_DWORD *)((char *)v32 + (((unint64_t)dword_18494F61C[v21] >> 3) & 0x1FFFFFFC)) >> dword_18494F61C[v21]) & 1) == 0)
      {
        if (++v21 == 8)
          goto LABEL_34;
      }
      v28 = (unsigned int *)((char *)this + 180);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 | 0x800000, v28));
      do
        v30 = __ldxr(v2);
      while (__stxr(v30 | 0x800000, v2));
      v20 = v31;
      goto LABEL_50;
    }
LABEL_34:

  }
  if (((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 704))(this) & 1) != 0
    || !(*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 376))(this))
  {
    v25 = (unsigned int *)((char *)this + 180);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26, v25));
    do
      v27 = __ldxr(v2);
    while (__stxr(v27 | 0x800000, v2));
    return 0;
  }
  v22 = (unsigned int *)((char *)this + 180);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 | 0x800000, v22));
  result = 1;
  do
    v24 = __ldxr(v2);
  while (__stxr(v24 | 0x800000, v2));
  return result;
}

unsigned __int16 *ChainContextSubstFormat2::NthChainSubClassSet(ChainContextSubstFormat2 *this, unsigned int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 5)) >> 16)
    return 0;
  if (!*((_WORD *)this + a2 + 6))
    return 0;
  v3 = (unsigned __int16 *)((char *)this + __rev16(*((unsigned __int16 *)this + a2 + 6)));
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > a3)
    return 0;
  v6 = bswap32(*v3) >> 16;
  v7 = (unint64_t)&v4[v6];
  if ((unint64_t)(v3 + 2) <= a3)
    v8 = (a3 - (unint64_t)v4) >> 1;
  else
    v8 = 0;
  if (v7 >= (unint64_t)v4 && v7 <= a3 || v8 == v6)
    return v3;
  else
    return 0;
}

unint64_t *OTL::MergeTable::MergeTable(unint64_t *a1, unint64_t *a2)
{
  void *v3;
  const UInt8 *BytePtr;
  const __CFData *v5;
  const UInt8 *v6;
  unint64_t v7;
  _WORD *v8;
  _WORD *v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  BOOL v23;
  unsigned __int16 *v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;

  v3 = (void *)atomic_load(a2);
  *a1 = (unint64_t)v3;
  BytePtr = (const UInt8 *)atomic_load(a1);
  if (BytePtr)
    BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
  a1[1] = (unint64_t)BytePtr;
  v5 = (const __CFData *)atomic_load(a1);
  if (v5 && (v6 = CFDataGetBytePtr(v5)) != 0)
    v7 = (unint64_t)&v6[CFDataGetLength(v5)];
  else
    v7 = 0;
  a1[3] = 0;
  a1[2] = v7;
  a1[4] = 0;
  v8 = (_WORD *)a1[1];
  if (v8)
  {
    v9 = v8 + 4;
    if ((unint64_t)(v8 + 4) > v7
      || !v8[1]
      || !v8[2]
      || ((v10 = __rev16((unsigned __int16)v8[1]),
           v11 = (char *)v8 + __rev16((unsigned __int16)v8[2]),
           v12 = v10 * v10,
           v13 = (unint64_t)&v11[v12],
           (unint64_t)(v11 + 1) <= v7)
        ? (v14 = v7 - (_QWORD)v11 == v12)
        : (v14 = 0),
          !v14 ? (v15 = 0) : (v15 = 1),
          v13 <= v7 ? (v16 = v13 >= (unint64_t)v11) : (v16 = 0),
          !v16 && (v15 & 1) == 0))
    {
LABEL_53:
      a1[1] = 0;
      return a1;
    }
    a1[3] = (unint64_t)v11;
    if (v8[3])
    {
      v17 = (unsigned __int16)*v9;
      if (*v9)
      {
        v18 = __rev16((unsigned __int16)v8[3]);
        v19 = (_WORD *)((char *)v8 + __rev16(v17));
        v20 = (unint64_t)&v19[v18];
        v21 = (unint64_t)(v19 + 1) <= v7 && v18 == (v7 - (unint64_t)v19) >> 1;
        v22 = v21;
        v23 = v20 <= v7 && v20 >= (unint64_t)v19;
        if (v23 || v22)
        {
          if (v18 <= 1)
            v18 = 1;
          v25 = v19;
          while (1)
          {
            v26 = *v25++;
            v27 = (char *)v8 + (bswap32(v26) >> 16);
            if ((unint64_t)(v27 + 2) > v7)
              break;
            v28 = bswap32(*(unsigned __int16 *)v27) >> 16;
            if (v28 == 2)
              v29 = 6 * (bswap32(*((unsigned __int16 *)v27 + 1)) >> 16) + 4;
            else
              v29 = v28 == 1 ? 2 * (bswap32(*((unsigned __int16 *)v27 + 2)) >> 16) + 6 : 0;
            v30 = &v27[v29];
            if (v30 < v27 || (unint64_t)v30 > v7)
              break;
            if (!--v18)
            {
              a1[4] = (unint64_t)v19;
              return a1;
            }
          }
        }
      }
      goto LABEL_53;
    }
  }
  return a1;
}

uint64_t TRunGlue::ClearSafeToBreakAfter(uint64_t this, CFRange a2)
{
  uint64_t v2;
  int v3;
  int v4;
  CFIndex location;
  CFIndex v6;
  CFIndex v7;
  int v8;

  if (a2.length >= 2)
  {
    v2 = this;
    v3 = 0;
    v4 = *(_DWORD *)(this + 24);
    if (v4 <= 0)
      location = a2.location;
    else
      location = a2.location + a2.length - 1;
    if (v4 <= 0)
      v6 = a2.location + a2.length;
    else
      v6 = a2.location - 1;
    do
    {
      this = TRunGlue::FocusOnIndex((TRunGlue *)v2, location);
      v7 = location - *(_QWORD *)(v2 + 160);
      v8 = *(_DWORD *)(*(_QWORD *)(v2 + 520) + 4 * v7);
      if ((v8 & 0x20) == 0)
      {
        if (v3)
          this = objc_msgSend(*(id *)(*(_QWORD *)(v2 + 152) + 216), "setProps:atIndex:", v8 | 8u, *(_QWORD *)(*(_QWORD *)(v2 + 152) + 200) + v7);
        v3 = 1;
      }
      location -= *(int *)(v2 + 24);
    }
    while (location != v6);
  }
  return this;
}

uint64_t TBaseFont::GetFormat(TBaseFont *this)
{
  TBaseFont *v1;
  const __CFString *v2;
  uint64_t FontFormat;
  uint64_t v4;
  int v5;
  int IsSuitcase;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  CGFont *InitializedGraphicsFont;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CFIndex v19;
  int ValueAtIndex;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  int v36;
  TBaseFont *v37;
  char v38;
  unint64_t v39;
  id v40;
  id v41;

  v1 = this;
  if ((*((_DWORD *)this + 44) & 0x80000000) != 0)
    return *((unsigned int *)this + 88);
  v2 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  FontFormat = GetFontFormat(v2);
  if ((_DWORD)FontFormat)
  {
    v4 = FontFormat;
LABEL_4:
    v5 = 0;
    goto LABEL_96;
  }
  if (TBaseFont::GetInitializedGraphicsFont(v1) && CGFontGetParserFont())
  {
    IsSuitcase = FPFontIsSuitcase();
    v5 = 0;
    v7 = 3;
    v4 = 5;
    switch(FPFontGetFormat())
    {
      case 1u:
      case 5u:
      case 0x1Fu:
        goto LABEL_96;
      case 2u:
      case 3u:
      case 4u:
      case 6u:
      case 7u:
      case 9u:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        goto LABEL_20;
      case 8u:
        v5 = 0;
        v4 = 3;
        break;
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x13u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x21u:
        v7 = 1;
        goto LABEL_20;
      case 0x10u:
      case 0x11u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x1Du:
        v5 = 0;
        v4 = 4;
        break;
      default:
        goto LABEL_11;
    }
    goto LABEL_96;
  }
  IsSuitcase = 0;
LABEL_11:
  v41 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)v1 + 192))(&v41, v1);
  v8 = atomic_load((unint64_t *)&v41);
  if (v8
    && (v40 = (id)0xAAAAAAAAAAAAAAAALL,
        v9 = (void *)atomic_load((unint64_t *)&v41),
        objc_msgSend(v9, "getResourceValue:forKey:error:", &v40, *MEMORY[0x1E0C998E0], 0)))
  {
    if (qword_1EDD171D0 != -1)
      dispatch_once(&qword_1EDD171D0, &__block_literal_global_4);
    if ((objc_msgSend(v40, "conformsToType:", qword_1EDD171D8) & 1) != 0)
    {
      v4 = 3;
    }
    else if ((objc_msgSend(v40, "conformsToType:", qword_1EDD171E0) & 1) != 0)
    {
      v4 = 3;
      IsSuitcase = 1;
    }
    else if ((objc_msgSend(v40, "conformsToType:", qword_1EDD171E8) & 1) != 0)
    {
      v4 = 1;
    }
    else if (objc_msgSend(v40, "conformsToType:", qword_1EDD171F0))
    {
      v4 = 4;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
  }

  if ((v4 & 0xFFFFFFFD) != 1)
    goto LABEL_4;
  v7 = v4;
LABEL_20:
  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(v1);
  v11 = CGFontCopyTableTags(InitializedGraphicsFont);
  v12 = v11;
  if (v11)
  {
    Count = CFArrayGetCount(v11);
    if (Count)
    {
      v14 = Count;
      v36 = IsSuitcase;
      v37 = v1;
      v38 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v39 = 0;
      v19 = 0;
      v5 = 0x7FFFFF;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v19);
        if (ValueAtIndex <= 1415139376)
        {
          if (ValueAtIndex > 1196445522)
          {
            if (ValueAtIndex == 1196445523 || ValueAtIndex == 1196643650)
              v38 = 1;
          }
          else
          {
            v27 = v39;
            if (ValueAtIndex == 1146308935)
              v28 = 1;
            else
              v28 = v39;
            if (ValueAtIndex == 1128678944)
              v7 = 4;
            else
              v7 = v7;
            if (ValueAtIndex != 1128678944)
              v27 = v28;
            v29 = HIDWORD(v39);
            if (ValueAtIndex == 1128678944)
              v29 = 1;
            v39 = __PAIR64__(v29, v27);
          }
        }
        else
        {
          if (ValueAtIndex == 1819239265)
            v21 = 1;
          else
            v21 = v17;
          if (ValueAtIndex == 1735162214)
            v22 = 3;
          else
            v22 = v7;
          if (ValueAtIndex == 1735162214)
            v23 = 1;
          else
            v23 = v18;
          if (ValueAtIndex == 1735162214)
            v21 = v17;
          if (ValueAtIndex == 1651273571)
          {
            v22 = v7;
            v23 = v18;
            v21 = v17;
            v24 = 1;
          }
          else
          {
            v24 = v15;
          }
          if (ValueAtIndex == 1650745716)
            v25 = 1;
          else
            v25 = v16;
          if (ValueAtIndex == 1415139377)
            v26 = 4;
          else
            v26 = v7;
          if (ValueAtIndex == 1415139377)
            v25 = v16;
          if (ValueAtIndex <= 1651273570)
            v7 = v26;
          else
            v7 = v22;
          if (ValueAtIndex <= 1651273570)
          {
            v16 = v25;
          }
          else
          {
            v18 = v23;
            v17 = v21;
            v15 = v24;
          }
        }
        v5 &= ~TableFlagForIdentifier(ValueAtIndex);
        ++v19;
      }
      while (v14 != v19);
      if ((v39 & 0x100000000) != 0)
        v30 = 1;
      else
        v30 = 2;
      if (((v39 | v38) & 1) != 0)
      {
        v7 = v30;
LABEL_85:
        v1 = v37;
        goto LABEL_95;
      }
      if ((_DWORD)v7 != 3)
        goto LABEL_85;
      if ((v18 & 1) != 0)
      {
        if ((v16 & v15 & 1) != 0)
          v32 = 5;
        else
          v32 = 0;
        if ((v17 & 1) != 0)
          v7 = 3;
        else
          v7 = v32;
        goto LABEL_85;
      }
      v1 = v37;
      if (!v36)
        goto LABEL_91;
      goto LABEL_75;
    }
  }
  v5 = 0x7FFFFF;
  if ((_DWORD)v7 == 3)
  {
    v16 = 0;
    v15 = 0;
    if (!IsSuitcase)
    {
LABEL_91:
      v31 = (v16 & v15 & 1) == 0;
LABEL_92:
      if (v31)
        v7 = 4;
      else
        v7 = 5;
      goto LABEL_95;
    }
LABEL_75:
    v31 = CGFontIsBitmapOnly() == 0;
    goto LABEL_92;
  }
LABEL_95:

  v4 = v7;
LABEL_96:
  v33 = (unsigned int *)((char *)v1 + 176);
  *((_DWORD *)v1 + 88) = v4;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 | v5 & 0x7FFFFFEF | 0x80000000, v33));
  return v4;
}

BOOL IsPingFangPostScriptName(CFStringRef theString)
{
  int HasPrefix;
  _BOOL8 result;

  if (theString == CFSTR(".PingFang"))
    return 1;
  if (!theString)
    return 0;
  HasPrefix = CFStringHasPrefix(theString, CFSTR(".PingFang"));
  result = 1;
  if (theString != CFSTR("PingFang") && !HasPrefix)
    return CFStringHasPrefix(theString, CFSTR("PingFang")) != 0;
  return result;
}

uint64_t TBaseFont::GetOS2UnicodeRanges(TBaseFont *a1, _DWORD *a2, unint64_t *a3)
{
  _BOOL8 v6;
  void *v7;
  unint64_t v9;
  void *v10;
  void *v13;
  void *v14;
  char *v15;
  id v17[3];
  id v18;

  if (TBaseFont::GetInitializedGraphicsFont(a1) && CGFontGetParserFont())
  {
    FPFontGetOS2UnicodeRanges();
    return 1;
  }
  else
  {
    v18 = 0;
    if (a3)
    {
      v7 = (void *)atomic_load(a3);
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v18, v7);
    }
    if (!atomic_load((unint64_t *)&v18))
    {
      (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)a1 + 480))(v17, a1, 1330851634);
      do
        v9 = __ldaxr((unint64_t *)v17);
      while (__stlxr(0, (unint64_t *)v17));
      do
        v10 = (void *)__ldaxr((unint64_t *)&v18);
      while (__stlxr(v9, (unint64_t *)&v18));

    }
    if (atomic_load((unint64_t *)&v18))
    {
      if (a3)
      {
        if (!atomic_load(a3))
        {
          v13 = (void *)atomic_load((unint64_t *)&v18);
          TCFRef<__CTFont const*>::Retain(a3, v13);
        }
      }
      memset(v17, 170, sizeof(v17));
      v14 = (void *)atomic_load((unint64_t *)&v18);
      OS2::OS2((OS2 *)v17, v14);
      v6 = (uint64_t)v17[2] > 77;
      if ((uint64_t)v17[2] >= 78)
      {
        v15 = (char *)v17[1];
        *a2 = bswap32(*(_DWORD *)((char *)v17[1] + 42));
        a2[1] = bswap32(*(_DWORD *)(v15 + 46));
        a2[2] = bswap32(*(_DWORD *)(v15 + 50));
        a2[3] = bswap32(*(_DWORD *)(v15 + 54));
      }

    }
    else
    {
      v6 = 0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
    }

  }
  return v6;
}

void RestoreFlippedTextMatrix(CGContext *a1)
{
  __int128 v2;
  CGAffineTransform v3;
  CGAffineTransform v4;

  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = v2;
  *(_OWORD *)&v4.a = v2;
  CGContextGetTextMatrix(&v4, a1);
  v4.d = -v4.d;
  v3 = v4;
  CGContextSetTextMatrix(a1, &v3);
  CGContextRestoreGState(a1);
}

uint64_t TSplicedFont::CopyTable(TSplicedFont *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v4 = atomic_load((unint64_t *)(v3 + 32));
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 480))(v4, a2);
}

uint64_t GetFontFormat(const __CFString *a1)
{
  const __CFNumber *v1;
  uint64_t v2;
  id v4;
  unsigned int valuePtr;

  if (!a1)
    return 0;
  valuePtr = 0;
  CopyAttributeForSystemFont(a1, CFSTR("NSCTFontFormatAttribute"), (const __CFString **)&v4);
  do
    v1 = (const __CFNumber *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  if (v1)
    CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
  v2 = valuePtr;

  return v2;
}

CFIndex CTTypesetterSuggestLineBreak(CTTypesetterRef typesetter, CFIndex startIndex, double width)
{
  return TypesetterSuggestLineBreak(typesetter, startIndex, width, 0.0);
}

void TFont::GetAdvancesForGlyphs(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, double *a8)
{
  float64x2_t v16;
  int64x2_t v17;
  unint64_t v18;
  double UnscaledTrackAmount;
  int v20;
  int v21;
  _BOOL4 AdvancesForGlyphsWithStyleFromCG;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  const __CFDictionary *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  double a;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  _BOOL4 v43;
  double v44;
  double *v45;
  uint64_t v46;
  double v47;
  double v48;
  CGAffineTransform v49;
  CGAffineTransform v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  CGAffineTransform t2;
  CGAffineTransform __C;

  v16.f64[0] = NAN;
  v16.f64[1] = NAN;
  v52 = v16;
  v53 = v16;
  v51 = v16;
  TFont::GetEffectiveMatrix((TFont *)a1, (uint64_t)&v51);
  v17 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v51, (float64x2_t)xmmword_18492FA90), vandq_s8((int8x16_t)vceqq_f64(v52, (float64x2_t)xmmword_18492E300), (int8x16_t)vceqzq_f64(v53)));
  v18 = vandq_s8((int8x16_t)v17, (int8x16_t)vdupq_laneq_s64(v17, 1)).u64[0];
  UnscaledTrackAmount = TFont::GetUnscaledTrackAmount((TFont *)a1);
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 712))(*(_QWORD *)(a1 + 400));
  v21 = v20;
  if ((a7 & 0xFF00000000) != 0)
    a7 = a7;
  else
    a7 = 5;
  if (a6 == 2 || !a6 && (*(_BYTE *)a1 & 1) != 0)
  {
    if (GetUnscaledAdvances(a1, a2, (uint64_t)a3, a4, a5, a6))
    {
      if (*(_BYTE *)(a1 + 392))
      {
        if ((a7 & 4) != 0)
          v27 = v21;
        else
          v27 = 1;
        v28 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 160));
        ApplyFixedAdvances(v28, v27, a5, a3, a4);
      }
      else
      {
        TFont::GetScaleFactor((double *)a1);
        v34 = v33;
        if ((v18 & 0x8000000000000000) != 0)
        {
          v43 = v33 != 1.0;
          if (UnscaledTrackAmount != 0.0)
            v43 = 1;
          if ((v43 | v21) == 1)
          {
            if (a5 >= 1)
            {
              v44 = 0.0;
              v45 = a3;
              v46 = a5;
              do
              {
                if (*v45 != 0.0)
                {
                  v47 = v34 * (UnscaledTrackAmount + *v45);
                  v48 = round(v47);
                  if (v21)
                    v47 = v48;
                  *v45 = v47;
                  v44 = v44 + v47;
                }
                v45 += (int)a4;
                --v46;
              }
              while (v46);
            }
          }
          else
          {
            __C.a = NAN;
            vDSP_sveD(a3, (int)a4, &__C.a, a5);
          }
        }
        else
        {
          *(_QWORD *)&v35 = -1;
          *((_QWORD *)&v35 + 1) = -1;
          *(_OWORD *)&v50.c = v35;
          *(_OWORD *)&v50.tx = v35;
          *(_OWORD *)&v50.a = v35;
          CGAffineTransformMakeScale(&v49, v34, v34);
          *(float64x2_t *)&__C.a = v51;
          *(float64x2_t *)&__C.c = v52;
          *(float64x2_t *)&__C.tx = v53;
          t2 = v49;
          CGAffineTransformConcat(&v50, &__C, &t2);
          if (a5 >= 1)
          {
            a = v50.a;
            v37 = 0.0;
            v38 = v50.c * 0.0;
            v39 = a3;
            v40 = a5;
            do
            {
              if (*v39 != 0.0)
              {
                v41 = v38 + a * (UnscaledTrackAmount + *v39);
                v42 = round(v41);
                if (v21)
                  v41 = v42;
                *v39 = v41;
                v37 = v37 + v41;
              }
              v39 += (int)a4;
              --v40;
            }
            while (v40);
          }
        }
      }
      if (a8)
      {
        v29 = 0.0;
        if (a5 >= 1)
        {
          v30 = *a8;
          v31 = a8[2] * 0.0;
          do
          {
            v32 = v31 + v30 * *a3;
            *a3 = v32;
            v29 = v29 + v32;
            a3 += (int)a4;
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else
  {
    AdvancesForGlyphsWithStyleFromCG = TFont::GetAdvancesForGlyphsWithStyleFromCG(a1, a7, a2, a3, a4, a5, (uint64_t)&v51, v18 >> 63, UnscaledTrackAmount, v20);
    v23 = 0.0;
    if (AdvancesForGlyphsWithStyleFromCG)
    {
      if (a8)
      {
        if (a5 >= 1)
        {
          v24 = *a8;
          v25 = a8[2] * 0.0;
          do
          {
            v26 = v25 + v24 * *a3;
            *a3 = v26;
            v23 = v23 + v26;
            a3 += (int)a4;
            --a5;
          }
          while (a5);
        }
      }
      else
      {
        __C.a = NAN;
        vDSP_sveD(a3, (int)a4, &__C.a, a5);
      }
    }
  }
}

void TAttributes::TAttributes(TAttributes *this, const __CFDictionary *a2, const TCharStream *a3, CFRange a4, int a5)
{
  unint64_t *v7;
  const void *v8;
  TParagraphStyle *v9;
  uint64_t v10;
  int v11;
  id *v12;
  unsigned int CompositionLanguage;
  CFTypeRef cf;

  *((_OWORD *)this + 1) = 0u;
  v7 = (unint64_t *)((char *)this + 16);
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  if (a2)
  {
    cf = 0;
    TAttributes::ApplyFont(this, a2, 0, a3, a4, &cf);
    if (cf)
    {
      v9 = (TParagraphStyle *)operator new(0x10uLL, MEMORY[0x1E0DE4E10]);
      if (v9)
      {
        *(_QWORD *)v9 = 0;
        *((_BYTE *)v9 + 8) = 0;
      }
      v10 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v9;
      if (v10)
      {
        MEMORY[0x186DC03AC](v10, 0x10C0C40E6EFC850);
        v9 = (TParagraphStyle *)*((_QWORD *)this + 16);
      }
      if (v9)
      {
        v11 = TParagraphStyle::SetStyle(v9, cf);
        v12 = (id *)*((_QWORD *)this + 16);
        if (v11)
        {
          if ((unint64_t)TParagraphStyle::GetLineBoundsOptions(v12, v8) >= 4)
            *((_WORD *)this + 69) |= 0x100u;
        }
        else
        {
          *((_QWORD *)this + 16) = 0;
          if (v12)
            MEMORY[0x186DC03AC](v12, 0x10C0C40E6EFC850);
        }
      }
      else
      {
        *((_QWORD *)this + 16) = 0;
      }
    }
  }
  else
  {
    if (qword_1ECDE7888 != -1)
      dispatch_once_f(&qword_1ECDE7888, 0, (dispatch_function_t)TAttributes::GetDefaultAttributes(void)::{lambda(void *)#1}::__invoke);
    TCFRef<__CTFont const*>::Retain((unint64_t *)this, (id)_MergedGlobals_18);
    if (qword_1ECDE7890 != -1)
      dispatch_once_f(&qword_1ECDE7890, 0, (dispatch_function_t)TAttributes::GetDefaultFont(void)::{lambda(void *)#1}::__invoke);
    TCFRef<__CTFont const*>::Retain(v7, (id)qword_1ECDE7860);
  }
  CompositionLanguage = TAttributes::GetCompositionLanguage(this, v8);
  *((_BYTE *)this + 112) = CompositionLanguage;
  if (a5)
  {
    TAttributes::SetRareAttributes(this, 32);
    CompositionLanguage = *((unsigned __int8 *)this + 112);
  }
  if (CompositionLanguage >= 2 && CJKCompositionEngine::IsEnabled(CompositionLanguage, (uint64_t)this))
    *((_WORD *)this + 69) |= 0x100u;
  else
    *((_BYTE *)this + 112) = 1;
}

void TAttributes::ApplyFont(TAttributes *this, const __CFDictionary *a2, const __CTFont *a3, const TCharStream *a4, CFRange a5, const void **a6)
{
  CFIndex length;
  CFIndex location;
  int v13;
  void (__cdecl *v14)(const void *, const void *, void *);
  unsigned __int8 v15;
  int v16;
  BOOL v18;
  __CFDictionary *MutableCopy;
  const void *v20;
  void *v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  TFont *v26;
  __int128 v27;
  float64x2_t v28;
  int64x2_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGFloat v34;
  void *v35;
  const __CTFont *v36;
  TBaseFont ***v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  TBaselineAttributes *v42;
  void *v43;
  const __CFDictionary *v44;
  const __CFNumber *v45;
  TFont **v46;
  unsigned __int8 v47;
  unint64_t v48;
  const __CFDictionary *v49;
  const __CFNumber *Value;
  const __CFNumber *v51;
  CFTypeID v52;
  double a;
  uint64_t v54;
  double OriginalValueOf;
  const __CFString *v56;
  const __CFDictionary *v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  CFTypeID v60;
  double v61;
  const __CFDictionary *v62;
  void *v63;
  unint64_t v65;
  void *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 v69;
  _QWORD *v70;
  CGFloat d;
  CGFloat v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t *v76;
  const __CTFont *v77;
  unint64_t v79;
  void *v80;
  char *v81;
  CGFloat v82;
  __int128 v83;
  unint64_t *v84;
  const __CTFont *v85;
  unint64_t v87;
  void *v88;
  char *v89;
  _QWORD *v90;
  _BYTE *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v96;
  const __CTFont *v97;
  unint64_t v99;
  uint64_t v100;
  double v101;
  const __CFString *v102;
  int v103;
  CGAffineTransform valuePtr;
  CGAffineTransform v105;
  id v106;
  id v107;
  double DoubleValue;
  void *__p;
  _QWORD *v110;
  uint64_t v111;
  _BYTE v112[960];
  _BYTE *v113;
  CGAffineTransform context;
  void **p_p;
  unint64_t v116;
  uint64_t v117;

  length = a5.length;
  location = a5.location;
  v117 = *MEMORY[0x1E0C80C00];
  memset(v112, 170, sizeof(v112));
  __p = 0;
  v110 = 0;
  v111 = 0;
  v113 = v112;
  v13 = *((unsigned __int8 *)this + 50);
  context.b = -3.72066208e-103;
  *(_QWORD *)&context.a = this;
  *(_QWORD *)&context.c = a4;
  *(_QWORD *)&context.d = location;
  *(_QWORD *)&context.tx = length;
  *(_QWORD *)&context.ty = a6;
  p_p = &__p;
  v116 = 0xAAAAAAAAAAAA0000;
  v103 = v13;
  if (a3)
  {
    if (!*((_BYTE *)this + 51))
    {
      v16 = 0;
      v15 = 0;
LABEL_20:
      v24 = (unint64_t *)((char *)this + 16);
      v25 = atomic_load((unint64_t *)this + 2);
      v26 = *(TFont **)(v25 + 40);
      *(_QWORD *)&v27 = -1;
      *((_QWORD *)&v27 + 1) = -1;
      *(_OWORD *)&context.c = v27;
      *(_OWORD *)&context.tx = v27;
      *(_OWORD *)&context.a = v27;
      TFont::GetEffectiveMatrix(v26, (uint64_t)&context);
      v28 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
      v29 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v28, (float64x2_t)vandq_s8(*(int8x16_t *)&context.tx, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL))), (int8x16_t)vcgeq_f64(v28, vabsq_f64(vaddq_f64(*(float64x2_t *)&context.a, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v28, vabsq_f64(vaddq_f64(*(float64x2_t *)&context.c, (float64x2_t)xmmword_18492F290))));
      if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v29, 1), (int8x16_t)v29).u64[0] & 0x8000000000000000) == 0)
      {
        v103 = 0;
        v30 = *(_OWORD *)&context.c;
        *(_OWORD *)((char *)this + 56) = *(_OWORD *)&context.a;
        *(_OWORD *)((char *)this + 72) = v30;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)&context.tx;
        *((_BYTE *)this + 104) = 1;
      }
      if ((*((_WORD *)this + 69) & 0x2000) != 0)
      {
        context.a = -3.72066208e-103;
        TAttributes::OriginalFont(this, (unint64_t *)&context);
        v31 = atomic_load((unint64_t *)&context);
        v32 = *(_QWORD *)(v31 + 40);
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 400) + 776))(*(_QWORD *)(v32 + 400))
          || TFont::GetSecondaryScaleData((TFont *)v32))
        {
          v33 = TAttributes::EnsureRareData(this);
          v34 = *(double *)(v32 + 16);
          v35 = (void *)atomic_load((unint64_t *)this + 2);
          v36 = v35;
          v37 = (TBaseFont ***)v36;
          v38 = (unint64_t *)(v33 + 96);
          v39 = atomic_load((unint64_t *)(v33 + 96));
          if (v39)
          {
            *(_QWORD *)&v105.a = CTFontCreateCopyWithAttributes(v36, v34, 0, 0);
            do
              v40 = __ldaxr((unint64_t *)&v105);
            while (__stlxr(0, (unint64_t *)&v105));
            do
              v41 = (void *)__ldaxr(v38);
            while (__stlxr(v40, v38));

            v42 = (TBaselineAttributes *)TAttributes::EnsureBaselineAttributes(this);
            v43 = (void *)atomic_load(v38);
            TBaselineAttributes::SetReferenceFont(v42, v43);
          }
          else
          {
            TCFRef<__CTFont const*>::Retain((unint64_t *)(v33 + 96), v36);
          }
          v44 = (const __CFDictionary *)atomic_load((unint64_t *)this);
          v45 = CustomRatioFromAttributes(v44);
          v105.a = -3.72066208e-103;
          v46 = (TFont **)atomic_load((unint64_t *)&context);
          CopySecondaryScaleRecipeInternal((unint64_t *)&v105, v37, v46, (uint64_t)v45, v47);
          v48 = atomic_load((unint64_t *)&v105);
          v23 = v48 != 0;
          if (v48)
          {
            valuePtr.a = 0.0;
            v49 = (const __CFDictionary *)atomic_load((unint64_t *)&v105);
            Value = (const __CFNumber *)CFDictionaryGetValue(v49, CFSTR("CTBaselineOffset"));
            if (Value)
            {
              v51 = Value;
              v52 = CFGetTypeID(Value);
              if (v52 == CFNumberGetTypeID() || v52 == CFBooleanGetTypeID())
              {
                CFNumberGetValue(v51, kCFNumberDoubleType, &valuePtr);
              }
              else if (v52 == CFStringGetTypeID())
              {
                valuePtr.a = CFStringGetDoubleValue((CFStringRef)v51);
              }
            }
            if (!*((_BYTE *)this + 50))
            {
              a = valuePtr.a;
              v54 = *((_QWORD *)this + 15);
              OriginalValueOf = 0.0;
              if (v54)
              {
                v56 = *(const __CFString **)(v54 + 40);
                if (v56)
                  OriginalValueOf = TAttributes::GetOriginalValueOf(this, v56);
              }
              *(double *)(v33 + 48) = a + OriginalValueOf;
            }
            DoubleValue = 0.0;
            v57 = (const __CFDictionary *)atomic_load((unint64_t *)&v105);
            v58 = (const __CFNumber *)CFDictionaryGetValue(v57, CFSTR("CTTracking"));
            if (v58)
            {
              v59 = v58;
              v60 = CFGetTypeID(v58);
              if (v60 == CFNumberGetTypeID() || v60 == CFBooleanGetTypeID())
              {
                CFNumberGetValue(v59, kCFNumberDoubleType, &DoubleValue);
              }
              else if (v60 == CFStringGetTypeID())
              {
                DoubleValue = CFStringGetDoubleValue((CFStringRef)v59);
              }
            }
            if ((*((_WORD *)this + 69) & 0x1000) == 0)
            {
              v61 = DoubleValue;
              *(double *)(v33 + 16) = v61 + TAttributes::GetOriginalValueOf(this, CFSTR("CTTracking"));
              *(_BYTE *)(v33 + 24) = 1;
            }
            v62 = (const __CFDictionary *)atomic_load((unint64_t *)&v105);
            v106 = (id)CFDictionaryGetValue(v62, CFSTR("NSFont"));
            do
              v63 = (void *)__ldaxr((unint64_t *)&v106);
            while (__stlxr(0, (unint64_t *)&v106));
            v107 = v63;
            if (atomic_load((unint64_t *)&v107))
            {
              do
                v65 = __ldaxr((unint64_t *)&v107);
              while (__stlxr(0, (unint64_t *)&v107));
              do
                v66 = (void *)__ldaxr(v24);
              while (__stlxr(v65, v24));

              *((_BYTE *)this + 48) = 1;
            }

          }
          else if (v39)
          {
            if (!*((_BYTE *)this + 50))
            {
              v100 = *((_QWORD *)this + 15);
              v101 = 0.0;
              if (v100)
              {
                v102 = *(const __CFString **)(v100 + 40);
                if (v102)
                  v101 = TAttributes::GetOriginalValueOf(this, v102) + 0.0;
              }
              *(double *)(v33 + 48) = v101;
            }
            if ((*((_WORD *)this + 69) & 0x1000) == 0)
            {
              *(double *)(v33 + 16) = TAttributes::GetOriginalValueOf(this, CFSTR("CTTracking")) + 0.0;
              *(_BYTE *)(v33 + 24) = 1;
            }
          }

        }
        else
        {
          v23 = 0;
        }

        v22 = 1;
      }
      else
      {
        v23 = 0;
        v22 = 1;
      }
      goto LABEL_57;
    }
    LOBYTE(context.b) = 1;
    v14 = (void (__cdecl *)(const void *, const void *, void *))TAttributes::ApplyFontAttributeHandlers;
  }
  else
  {
    v14 = (void (__cdecl *)(const void *, const void *, void *))TAttributes::ApplyAttributeHandlers;
  }
  CFDictionaryApplyFunction(a2, v14, &context);
  v15 = v116;
  v16 = BYTE1(v116);
  v18 = (unsigned __int16)v116 > 0xFFu || __p != v110;
  *((_BYTE *)this + 51) = v18;
  if (LOBYTE(context.b))
  {
    if (!a3)
      TCFRef<__CTFont const*>::Retain((unint64_t *)this, a2);
    goto LABEL_20;
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  if (qword_1ECDE7890 != -1)
    dispatch_once_f(&qword_1ECDE7890, 0, (dispatch_function_t)TAttributes::GetDefaultFont(void)::{lambda(void *)#1}::__invoke);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 2, (id)qword_1ECDE7860);
  v20 = (const void *)atomic_load((unint64_t *)this + 2);
  CFDictionarySetValue(MutableCopy, CFSTR("NSFont"), v20);
  do
    v21 = (void *)__ldaxr((unint64_t *)this);
  while (__stlxr((unint64_t)MutableCopy, (unint64_t *)this));

  v22 = 0;
  v23 = 0;
LABEL_57:
  v67 = __p;
  v68 = v110;
  if (__p != v110)
  {
    while (1)
    {
      *(_QWORD *)&v69 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v69 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&context.a = v69;
      *(_OWORD *)&context.c = v69;
      v70 = (_QWORD *)v67[3];
      if (!v70)
      {
        context.d = 0.0;
LABEL_128:
        std::__throw_bad_function_call[abi:nn180100]();
      }
      if (v67 == v70)
      {
        *(_QWORD *)&context.d = &context;
        (*(void (**)(_QWORD, CGAffineTransform *))(*(_QWORD *)v67[3] + 24))(v67[3], &context);
        d = context.d;
        if (!*(_QWORD *)&context.d)
          goto LABEL_128;
      }
      else
      {
        d = COERCE_DOUBLE((*(uint64_t (**)(_QWORD *))(*v70 + 16))(v70));
        context.d = d;
        if (d == 0.0)
          goto LABEL_128;
      }
      (*(void (**)(CGFloat, TAttributes *))(**(_QWORD **)&d + 48))(COERCE_CGFLOAT(*(_QWORD *)&d), this);
      v72 = context.d;
      if (*(CGAffineTransform **)&context.d == &context)
        break;
      if (*(_QWORD *)&context.d)
      {
        v73 = 5;
LABEL_67:
        (*(void (**)(void))(**(_QWORD **)&v72 + 8 * v73))();
      }
      v67 += 4;
      if (v67 == v68)
        goto LABEL_69;
    }
    v72 = COERCE_DOUBLE(&context);
    v73 = 4;
    goto LABEL_67;
  }
LABEL_69:
  v74 = *((_QWORD *)this + 15);
  if (!v74 || !*(_BYTE *)(v74 + 24) || (*(double *)(v74 + 16) != 0.0 ? (v75 = v16 == 0) : (v75 = 0), !v75))
  {
    if (!v16 || v15 == 1)
      goto LABEL_82;
    context.a = -3.72066208e-103;
    v76 = (unint64_t *)((char *)this + 16);
    v77 = (const __CTFont *)atomic_load((unint64_t *)this + 2);
    TAttributes::CopyOfFontWithLigatureSetting((CTFontRef *)&context, v77, v15);
    if (!atomic_load((unint64_t *)&context))
      goto LABEL_81;
    do
      v79 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v80 = (void *)__ldaxr(v76);
    while (__stlxr(v79, v76));
    goto LABEL_80;
  }
  if (v23)
    goto LABEL_82;
  context.a = -3.72066208e-103;
  v96 = (unint64_t *)((char *)this + 16);
  v97 = (const __CTFont *)atomic_load((unint64_t *)this + 2);
  TAttributes::CopyOfFontWithLigatureSetting((CTFontRef *)&context, v97, 0);
  if (atomic_load((unint64_t *)&context))
  {
    do
      v99 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v80 = (void *)__ldaxr(v96);
    while (__stlxr(v99, v96));
LABEL_80:

    *((_BYTE *)this + 48) = 1;
  }
LABEL_81:

LABEL_82:
  if (*((_BYTE *)this + 50))
  {
    if (!v103)
    {
      v81 = (char *)this + 56;
      if (!*((_BYTE *)this + 104))
        v81 = (char *)MEMORY[0x1E0C9BAA8];
      v82 = *(double *)v81;
      *(_OWORD *)&context.b = *(_OWORD *)(v81 + 8);
      context.a = *((CGFloat *)v81 + 3);
      context.d = v82;
      *(_OWORD *)&context.tx = *((_OWORD *)v81 + 2);
      v105 = *(CGAffineTransform *)kRotateLeftTransform;
      CGAffineTransformConcat(&valuePtr, &context, &v105);
      v83 = *(_OWORD *)&valuePtr.c;
      *(_OWORD *)((char *)this + 56) = *(_OWORD *)&valuePtr.a;
      *(_OWORD *)((char *)this + 72) = v83;
      *(_OWORD *)((char *)this + 88) = *(_OWORD *)&valuePtr.tx;
      *((_BYTE *)this + 104) = 1;
    }
    v84 = (unint64_t *)((char *)this + 16);
    v85 = (const __CTFont *)atomic_load((unint64_t *)this + 2);
    VerticalCopyOf(v85, (CTFontRef *)&context);
    if (atomic_load((unint64_t *)&context))
    {
      do
        v87 = __ldaxr((unint64_t *)&context);
      while (__stlxr(0, (unint64_t *)&context));
      do
        v88 = (void *)__ldaxr(v84);
      while (__stlxr(v87, v84));

      *((_BYTE *)this + 48) = 1;
    }

  }
  if (v22)
    TAttributes::SetLayoutAttributesForFont(this);
  v89 = (char *)__p;
  if (!__p)
    return;
  v90 = v110;
  v91 = __p;
  if (v110 == __p)
    goto LABEL_103;
  do
  {
    v92 = (char *)(v90 - 4);
    v93 = (_QWORD *)*(v90 - 1);
    if (v90 - 4 == v93)
    {
      v93 = v90 - 4;
      v94 = 4;
    }
    else
    {
      if (!v93)
        goto LABEL_101;
      v94 = 5;
    }
    (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_101:
    v90 = v92;
  }
  while (v92 != v89);
  v91 = __p;
LABEL_103:
  v110 = v89;
  if (v112 > v91 || &v113 <= (_BYTE **)v91)
    operator delete(v91);
}

TFont *TAttributes::SetLayoutAttributesForFont(TAttributes *this)
{
  unint64_t v2;
  TFont *result;
  __int16 v4;
  BOOL v5;

  v2 = atomic_load((unint64_t *)this + 2);
  result = *(TFont **)(v2 + 40);
  if (result)
  {
    v5 = -86;
    result = (TFont *)TFont::IsSystemUIFontAndForShaping(result, &v5);
    if ((_DWORD)result)
    {
      v4 = *((_WORD *)this + 69);
      *((_WORD *)this + 69) = v4 | 0x200;
      if (v5)
        *((_WORD *)this + 69) = v4 | 0x600;
    }
  }
  return result;
}

uint64_t TBaseFont::IsAppleColorEmoji(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x40) == 0)
    TBaseFont::DetermineFontFlags(this, 64);
  return (*((_DWORD *)this + 45) >> 6) & 1;
}

CGAffineTransform *TFont::GetScaledMatrix@<X0>(TFont *this@<X0>, CGAffineTransform *a2@<X8>)
{
  double v4;
  CGFloat v5;
  __int128 v6;
  CGAffineTransform v8;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v11;

  TFont::GetScaleFactor((double *)this);
  v5 = v4;
  TFont::GetEffectiveMatrix(this, (uint64_t)&v8);
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)&v11.c = v6;
  *(_OWORD *)&v11.tx = v6;
  *(_OWORD *)&v11.a = v6;
  CGAffineTransformMakeScale(&v11, v5, v5);
  t1 = v8;
  t2 = v11;
  return CGAffineTransformConcat(a2, &t1, &t2);
}

void TFont::GetUnsummedAdvancesForGlyphs(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  float64x2_t v14;
  int64x2_t v15;
  unint64_t v16;
  double UnscaledTrackAmount;
  int v18;
  int v19;
  int v20;
  const __CFDictionary *v21;
  double v22;
  __int128 v23;
  double a;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  double v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v14.f64[0] = NAN;
  v14.f64[1] = NAN;
  v33 = v14;
  v34 = v14;
  v32 = v14;
  TFont::GetEffectiveMatrix((TFont *)a1, (uint64_t)&v32);
  v15 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v32, (float64x2_t)xmmword_18492FA90), vandq_s8((int8x16_t)vceqq_f64(v33, (float64x2_t)xmmword_18492E300), (int8x16_t)vceqzq_f64(v34)));
  v16 = vandq_s8((int8x16_t)v15, (int8x16_t)vdupq_laneq_s64(v15, 1)).u64[0];
  UnscaledTrackAmount = TFont::GetUnscaledTrackAmount((TFont *)a1);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 712))(*(_QWORD *)(a1 + 400));
  v19 = v18;
  if ((a7 & 0xFF00000000) != 0)
    a7 = a7;
  else
    a7 = 5;
  if (a6 == 2 || !a6 && (*(_BYTE *)a1 & 1) != 0)
  {
    if (GetUnscaledAdvances(a1, a2, (uint64_t)a3, a4, a5, a6))
    {
      if (*(_BYTE *)(a1 + 392))
      {
        if ((a7 & 4) != 0)
          v20 = v19;
        else
          v20 = 1;
        v21 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 160));
        ApplyFixedAdvances(v21, v20, a5, a3, a4);
      }
      else
      {
        TFont::GetScaleFactor((double *)a1);
        if ((v16 & 0x8000000000000000) != 0)
        {
          v28 = v22 != 1.0;
          if (UnscaledTrackAmount != 0.0)
            v28 = 1;
          if (a5 >= 1 && v28 | v19)
          {
            do
            {
              if (*a3 != 0.0)
              {
                v29 = v22 * (UnscaledTrackAmount + *a3);
                *a3 = v29;
                if (v19)
                  *a3 = round(v29);
              }
              a3 += (int)a4;
              --a5;
            }
            while (a5);
          }
        }
        else
        {
          *(_QWORD *)&v23 = -1;
          *((_QWORD *)&v23 + 1) = -1;
          *(_OWORD *)&v31.c = v23;
          *(_OWORD *)&v31.tx = v23;
          *(_OWORD *)&v31.a = v23;
          CGAffineTransformMakeScale(&v30, v22, v22);
          *(float64x2_t *)&t1.a = v32;
          *(float64x2_t *)&t1.c = v33;
          *(float64x2_t *)&t1.tx = v34;
          t2 = v30;
          CGAffineTransformConcat(&v31, &t1, &t2);
          if (a5 >= 1)
          {
            a = v31.a;
            v25 = v31.c * 0.0;
            do
            {
              if (*a3 != 0.0)
              {
                v26 = v25 + a * (UnscaledTrackAmount + *a3);
                v27 = round(v26);
                if (v19)
                  v26 = v27;
                *a3 = v26;
              }
              a3 += (int)a4;
              --a5;
            }
            while (a5);
          }
        }
      }
    }
  }
  else
  {
    TFont::GetAdvancesForGlyphsWithStyleFromCG(a1, a7, a2, a3, a4, a5, (uint64_t)&v32, v16 >> 63, UnscaledTrackAmount, v18);
  }
}

__n128 TFont::GetEffectiveMatrix@<Q0>(TFont *this@<X0>, uint64_t a2@<X8>)
{
  __n128 *v4;
  __n128 *v5;
  BOOL v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 result;
  __n128 *v14;
  __int128 v15;
  CGAffineTransform v16;
  CGAffineTransform t1;

  v4 = (__n128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 50) + 168))(*((_QWORD *)this + 50));
  v5 = (__n128 *)*((_QWORD *)this + 5);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v9 = *v4;
    v10 = v4[2];
    *(__n128 *)&t1.c = v4[1];
    *(__n128 *)&t1.tx = v10;
    *(__n128 *)&t1.a = v9;
    v11 = *v5;
    v12 = v5[2];
    *(__n128 *)&v16.c = v5[1];
    *(__n128 *)&v16.tx = v12;
    *(__n128 *)&v16.a = v11;
    CGAffineTransformConcat((CGAffineTransform *)a2, &t1, &v16);
    return result;
  }
  if (v4)
  {
    result = *v4;
    v7 = v4[1];
    v8 = v4[2];
  }
  else
  {
    if (!v5)
    {
      v14 = (__n128 *)MEMORY[0x1E0C9BAA8];
      v15 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)(a2 + 16) = v15;
      result = v14[2];
      *(__n128 *)(a2 + 32) = result;
      return result;
    }
    result = *v5;
    v7 = v5[1];
    v8 = v5[2];
  }
  *(__n128 *)(a2 + 16) = v7;
  *(__n128 *)(a2 + 32) = v8;
  *(__n128 *)a2 = result;
  return result;
}

unint64_t TComponentFont::GetFontMatrix(TComponentFont *this)
{
  unint64_t *v2;
  const __CFArray *ComponentAttribute;
  const __CFArray *v4;
  _OWORD *v5;
  _QWORD *v6;
  CFIndex v7;
  __int128 v8;
  __int128 v9;
  const __CFNumber *ValueAtIndex;
  uint64_t v11;
  uint64_t valuePtr;

  if ((*((_BYTE *)this + 712) & 0x40) == 0)
    return 0;
  v2 = (unint64_t *)((char *)this + 728);
  if (!*((_QWORD *)this + 91))
  {
    ComponentAttribute = (const __CFArray *)TComponentFont::GetComponentAttribute(this, CFSTR("Matrix"));
    if (ComponentAttribute)
    {
      v4 = ComponentAttribute;
      v5 = malloc_type_calloc(1uLL, 0x30uLL, 0x1000040EED21634uLL);
      v6 = v5;
      if (v5)
      {
        v7 = 0;
        v8 = *MEMORY[0x1E0C9BAA8];
        v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        v5[1] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        v5[2] = v9;
        *v5 = v8;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, v7);
          if (ValueAtIndex)
          {
            valuePtr = -1;
            CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
            v11 = valuePtr;
          }
          else
          {
            v11 = 0;
          }
          v6[v7++] = v11;
        }
        while (v7 != 6);
      }
      while (!__ldaxr(v2))
      {
        if (!__stlxr((unint64_t)v6, v2))
          return atomic_load(v2);
      }
      __clrex();
      free(v6);
    }
  }
  return atomic_load(v2);
}

double TFont::GetUnscaledTrackAmount(TFont *this)
{
  int v1;
  void *v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  _DWORD *v7;
  double v8;
  unint64_t v9;
  int *inited;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  int valuePtr;

  valuePtr = -1431655766;
  v1 = *((_DWORD *)this + 8);
  if (v1 == 0x80000000)
  {
    valuePtr = 0;
    v3 = (void *)atomic_load((unint64_t *)this + 20);
    v4 = v3;
    if (v4)
    {
      v5 = v4;
      Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("NSCTFontUnscaledTrackingAttribute"));

      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        goto LABEL_16;
      }
    }
    else
    {

    }
    v7 = (_DWORD *)*((_QWORD *)this + 50);
    v8 = *((double *)this + 3);
    if (v8 <= 0.0)
    {
      if ((v7[46] & 0x100) == 0)
        TBaseFont::DetermineFontFlags(*((TBaseFont **)this + 50), 256);
      if ((v7[45] & 0x100) == 0 || !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v7 + 696))(v7))
        goto LABEL_16;
      v8 = *((double *)this + 2);
    }
    if (v8 != 0.0)
    {
      v9 = atomic_load((unint64_t *)this + 20);
      inited = (int *)((char *)this + 48);
      v11 = *(_DWORD *)this;
      if (!*((_DWORD *)this + 12))
        inited = TFont::InitStrikeMetrics(this);
      valuePtr = (int)(*(double (**)(_DWORD *, unint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v7 + 552))(v7, v9, v11 & 1, *inited, v8);
    }
LABEL_16:
    v12 = (unsigned int *)((char *)this + 32);
    v13 = valuePtr;
    do
      __ldaxr(v12);
    while (__stlxr(v13, v12));
    return (double)valuePtr;
  }
  return (double)v1;
}

void TTenuousComponentFont::CopyGraphicsFont(TTenuousComponentFont *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  void *v5;

  v4 = atomic_load((unint64_t *)this + 96);
  if (v4 && !*((_BYTE *)this + 792))
  {
    TTenuousComponentFont::InitializeVariationGraphicsFont(this);
    v5 = (void *)atomic_load((unint64_t *)this + 98);
    *a2 = v5;
  }
  else
  {
    TBaseFont::CopyNativeFont(this, a2);
  }
}

BOOL TFont::GetAdvancesForGlyphsWithStyleFromCG(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, unsigned __int8 a10)
{
  uint64_t InitializedGraphicsFont;
  double EffectiveSize;
  __int128 v21;
  int v22;
  _BOOL8 result;
  const __CFDictionary *v24;
  CGFloat v25;
  __int128 v26;
  CGFloat v27;
  __int128 v28;
  double a;
  double v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CGAffineTransform v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;

  InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(a1 + 400));
  if ((~(_DWORD)a2 & 5) == 0 && a5 == 1 && !*(_BYTE *)(a1 + 392) && CGFontGetParserFont())
  {
    *(_QWORD *)&v26 = -1;
    *((_QWORD *)&v26 + 1) = -1;
    *(_OWORD *)&v40.c = v26;
    *(_OWORD *)&v40.tx = v26;
    *(_OWORD *)&v40.a = v26;
    TFont::GetScaleFactor((double *)a1);
    CGAffineTransformMakeScale(&v40, v27, v27);
    if ((a8 & 1) == 0)
    {
      v28 = *(_OWORD *)(a7 + 16);
      *(_OWORD *)&t1.a = *(_OWORD *)a7;
      *(_OWORD *)&t1.c = v28;
      *(_OWORD *)&t1.tx = *(_OWORD *)(a7 + 32);
      t2 = v40;
      CGAffineTransformConcat(&v39, &t1, &t2);
      v40 = v39;
    }
    FPFontGetGlyphIdealAdvanceWidths();
    if (a6 >= 1)
    {
      a = v40.a;
      v30 = v40.c * 0.0;
      v31 = a4;
      v32 = a6;
      do
      {
        if (*v31 != 0.0)
          *v31 = v30 + a * (*v31 + a9);
        ++v31;
        --v32;
      }
      while (v32);
      if (a10)
      {
        v33 = a6 + 1;
        do
        {
          *a4 = round(*a4);
          ++a4;
          --v33;
        }
        while (v33 > 1);
      }
    }
    return 1;
  }
  if ((a2 & 1) != 0)
  {
    if ((a2 & 4) != 0)
      v22 = a10;
    else
      v22 = 1;
    result = GetGlyphAdvancesForStyle(InitializedGraphicsFont, 0, a2 | 4, a3, a6, a4, a5);
    if (result)
    {
      if (*(_BYTE *)(a1 + 392))
      {
        v24 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 160));
        ApplyFixedAdvances(v24, v22, a6, a4, a5);
      }
      else
      {
        *(_QWORD *)&v34 = -1;
        *((_QWORD *)&v34 + 1) = -1;
        *(_OWORD *)&t1.c = v34;
        *(_OWORD *)&t1.tx = v34;
        *(_OWORD *)&t1.a = v34;
        TFont::GetScaledMatrix((TFont *)a1, &t1);
        if (a6 >= 1)
        {
          v35 = t1.a;
          v36 = t1.c * 0.0;
          do
          {
            if (*a4 != 0.0)
            {
              v37 = v36 + v35 * (*a4 + a9);
              v38 = round(v37);
              if (v22)
                v37 = v38;
              *a4 = v37;
            }
            a4 += a5;
            --a6;
          }
          while (a6);
        }
      }
      return 1;
    }
  }
  else
  {
    EffectiveSize = TFont::GetEffectiveSize((TFont *)a1);
    *(_QWORD *)&v21 = -1;
    *((_QWORD *)&v21 + 1) = -1;
    *(_OWORD *)&t2.c = v21;
    *(_OWORD *)&t2.tx = v21;
    *(_OWORD *)&t2.a = v21;
    if (a8)
    {
      CGAffineTransformMakeScale(&t2, EffectiveSize, EffectiveSize);
    }
    else
    {
      v25 = *(double *)(a7 + 16);
      t1.a = *(CGFloat *)a7;
      t1.b = 0.0;
      t1.c = v25;
      t1.d = 1.0;
      *(_OWORD *)&t1.tx = *(_OWORD *)(a7 + 32);
      CGAffineTransformScale(&t2, &t1, EffectiveSize, EffectiveSize);
    }
    return GetGlyphAdvancesForStyle(InitializedGraphicsFont, (uint64_t)&t2, a2, a3, a6, a4, a5);
  }
  return result;
}

uint64_t TBaseFont::GetInitializedGraphicsFont(TBaseFont *this)
{
  uint64_t v2;
  id v4;

  v2 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 568))(this);
  if (!v2)
  {
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 496))(&v4, this);
    v2 = atomic_load((unint64_t *)&v4);

  }
  return v2;
}

unint64_t TTenuousComponentFont::GetGraphicsFont(TTenuousComponentFont *this)
{
  unint64_t v2;
  unint64_t *v3;

  v2 = atomic_load((unint64_t *)this + 96);
  if (v2 && !*((_BYTE *)this + 792))
  {
    TTenuousComponentFont::InitializeVariationGraphicsFont(this);
    v3 = (unint64_t *)((char *)this + 784);
  }
  else
  {
    v3 = (unint64_t *)((char *)this + 104);
  }
  return atomic_load(v3);
}

void TTenuousComponentFont::InitializeVariationGraphicsFont(TTenuousComponentFont *this)
{
  unint64_t *v1;
  unint64_t v2;
  CGFont *v4;
  const __CFDictionary *v5;
  unint64_t v6;
  void *v7;
  TCGFontCache *v8;
  CGFont *v9;
  const __CFDictionary *v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  void *v15;
  id v16;
  id v17;
  id v18;

  v1 = (unint64_t *)((char *)this + 784);
  v2 = atomic_load((unint64_t *)this + 98);
  if (!v2 && (*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this))
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::CopyNativeFont(this, &v18);
    v17 = 0;
    if (*((_BYTE *)this + 793))
    {
      v4 = (CGFont *)atomic_load((unint64_t *)&v18);
      v5 = (const __CFDictionary *)atomic_load((unint64_t *)this + 96);
      CreateFontWithVariation(v4, v5, (unint64_t *)&v16);
      do
        v6 = __ldaxr((unint64_t *)&v16);
      while (__stlxr(0, (unint64_t *)&v16));
      do
        v7 = (void *)__ldaxr((unint64_t *)&v17);
      while (__stlxr(v6, (unint64_t *)&v17));
    }
    else
    {
      v8 = (TCGFontCache *)atomic_load((unint64_t *)&v18);
      v9 = (CGFont *)atomic_load((unint64_t *)this + 10);
      v10 = (const __CFDictionary *)atomic_load((unint64_t *)this + 96);
      TCGFontCache::CopyFontWithOpticalSizeVariation(v8, v9, v10, (unint64_t *)&v16);
      do
        v11 = __ldaxr((unint64_t *)&v16);
      while (__stlxr(0, (unint64_t *)&v16));
      do
        v7 = (void *)__ldaxr((unint64_t *)&v17);
      while (__stlxr(v11, (unint64_t *)&v17));
    }

    do
      v12 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    while (!__ldaxr(v1))
    {
      if (!__stlxr(v12, v1))
      {
        v14 = 1;
        goto LABEL_17;
      }
    }
    v14 = 0;
    __clrex();
LABEL_17:
    if (v14)
      v15 = 0;
    else
      v15 = (void *)v12;

  }
}

double *TFont::GetScaleFactor(double *this)
{
  uint64_t v1;
  double EffectiveSize;

  if (this[18] == 0.0)
  {
    v1 = (uint64_t)this;
    EffectiveSize = TFont::GetEffectiveSize((TFont *)this);
    if (*(_DWORD *)(v1 + 48))
      this = (double *)(v1 + 48);
    else
      this = (double *)TFont::InitStrikeMetrics((TFont *)v1);
    *(double *)(v1 + 144) = EffectiveSize / (double)*(unsigned int *)this;
  }
  return this;
}

uint64_t TBaseFont::GetFontMatrix(TBaseFont *this)
{
  return 0;
}

unint64_t TBaseFont::GetGraphicsFont(TBaseFont *this)
{
  return atomic_load((unint64_t *)this + 13);
}

uint64_t CTLineSuggestClusterBreakWithTabOverflow(uint64_t result, const TLine *a2, uint64_t *a3, uint64_t *a4, double a5, double a6)
{
  TTypesetter *v7;
  uint64_t v8;

  if (result)
  {
    v7 = *(TTypesetter **)(result + 40);
    v8 = -1;
    result = TTypesetter::SuggestClusterBreak(v7, a2, (uint64_t)&v8, a5, a6, a4);
    if (a3)
      *a3 = v8;
  }
  return result;
}

uint64_t TTypesetter::SuggestClusterBreak(TTypesetter *this, const TLine *a2, uint64_t a3, double a4, double a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[4];
  _QWORD v12[3];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  v11[0] = this;
  v11[1] = v6;
  v11[2] = 0;
  v11[3] = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 6) = 0;
  v12[2] = a3;
  v14 = 0;
  v7 = TTypesetter::SuggestClusterBreak((uint64_t)v11, (CFIndex)a2, (uint64_t)v13, a4, a5);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

uint64_t TTypesetter::SuggestClusterBreak(uint64_t a1, CFIndex a2, uint64_t a3, double a4, double a5)
{
  void *Table;
  double v11;
  double *v12;
  char v13;
  CFIndex Chars;
  double v15;
  _QWORD *v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23[8];
  CFIndex v24;
  double v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  Table = GetTable();
  v11 = 0.0002;
  if (Table)
  {
    v12 = (double *)*((_QWORD *)Table + 8);
    if (v12)
      v11 = *v12;
  }
  if (v11 >= a4)
  {
LABEL_8:
    Chars = *(_QWORD *)(a3 + 24) == 0;
    goto LABEL_9;
  }
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v26, a3);
  TTypesetter::FindGraphicalBreak((uint64_t *)a1, a2, (uint64_t)v26, (uint64_t)v23, a4, a5);
  v13 = v23[0];
  Chars = v24;
  v15 = v25;
  v16 = v27;
  if (v27 == v26)
  {
    v17 = 4;
    v16 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_19;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_19:
  if ((v13 & 3) != 0)
    return Chars;
  if (v15 - a4 <= v11)
    Chars = TTypesetter::DecomposeLastChars((const TLine **)a1, a2, Chars, a4);
  if (!Chars)
    goto LABEL_8;
LABEL_9:
  v18 = Chars + a2;
  v19 = (*(uint64_t (**)(_QWORD, CFIndex, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v18 - 1, 2);
  if (v19 + v20 >= v18)
    v21 = v18 - 1;
  else
    v21 = v19 + v20 - 1;
  if (v19 + v20 > v18)
    v21 = v19 - 1;
  if (v19 <= a2)
    v21 = v19 + v20 - 1;
  return v21 - a2 + 1;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = *(_OWORD *)(a1 + 216);
  v20 = *(_QWORD *)(a1 + 232);
  v21 = a1 + 240;
  v22 = *(_DWORD *)(a1 + 260);
  v23 = *(_BYTE *)(a1 + 264);
  v24 = *(_BYTE *)(a1 + 257);
  v25 = 0;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v26, a3);
  v14 = TTypesetter::SuggestClusterBreak((uint64_t)&v18, a2, (uint64_t)v26, a4, a5);
  v15 = v27;
  if (v27 == v26)
  {
    v16 = 4;
    v15 = v26;
    goto LABEL_5;
  }
  if (v27)
  {
    v16 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v8, v9, v10, v11, v12, v13);
  }
  return v14;
}

void TTypesetter::FindGraphicalBreak(uint64_t *a1@<X0>, CFIndex a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  CFIndex v11;
  char v13;
  CFIndex v14;
  double v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  const TLine *v19;
  const TLine *v20;
  double updated;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  unint64_t *v26;
  double v27;
  uint64_t v28;
  CFIndex v29;
  CFIndex location;
  uint64_t v31;
  const void *v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  CFIndex v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  const void *v48;
  unint64_t *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t *v55;
  uint64_t v56;
  double v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  CFIndex v65;
  uint64_t v66;
  uint64_t v67;
  TLine *v68;
  _OWORD v69[4];
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  _OWORD v74[2];
  __int128 v75;
  CFRange v76;
  uint64_t v77;
  __int128 v78;
  double v79;
  _BYTE v80[24];
  _BYTE *v81;
  _OWORD v82[2];
  _BYTE v83[32];
  _BYTE *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _BYTE v89[28];
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[24];
  _BYTE *v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  double v112;
  unint64_t v113;
  unint64_t *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[64];
  _BYTE v120[32];
  __int128 v121;
  __int128 v122;
  _BYTE v123[24];
  uint64_t v124;
  CFRange v125;
  CFRange v126;
  CFRange v127;
  CFRange v128;

  v6 = a4;
  v124 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (*(_QWORD *)(*a1 + 80) + *(_QWORD *)(*a1 + 72) <= a2)
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  v11 = a2;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v96, a3);
  TLine::FindWidthOverflow(v7, v11, 0, (uint64_t)v96, (uint64_t)&v115, a5);
  v13 = v115;
  v14 = *((_QWORD *)&v115 + 1);
  v15 = *(double *)&v116;
  v16 = v97;
  if (v97 == v96)
  {
    v17 = 4;
    v16 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_8;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_8:
  v18 = v13 & 0x20;
  if ((v13 & 0x5C) == 0)
    goto LABEL_95;
  v19 = (const TLine *)*a1;
  v75 = xmmword_18492EFB8;
  v90 = unk_18492EFD4;
  v73 = unk_18492EFE8;
  memset(v74, 170, sizeof(v74));
  v92 = unk_18492EFE8;
  memset(v72, 170, sizeof(v72));
  v70 = unk_18492EFA8;
  v71 = xmmword_18492EF98;
  memset(v69, 170, sizeof(v69));
  memset(&v83[8], 170, 24);
  *(_QWORD *)v83 = 0;
  memset(v82, 0, sizeof(v82));
  v84 = &v83[8];
  BYTE8(v92) = 0;
  v88 = 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  memset(&v89[8], 0, 20);
  LOBYTE(v92) = 0;
  v95 = 0;
  v93 = 0;
  v94 = 0;
  v91 = 0uLL;
  *(_QWORD *)v89 = 0xFFEFFFFFFFFFFFFFLL;
  if ((v13 & 8) == 0)
    goto LABEL_17;
  v125.length = *((_QWORD *)v19 + 10) - v11;
  v20 = v19;
  v125.location = v11;
  TLine::CopyStringRange((TLine *)v82, v19, v125);
  TTypesetter::ReorderRunsIfNecessary((uint64_t)a1, (uint64_t)v82);
  updated = TLine::UpdateWidth((TLine *)v82, a6);
  v19 = v20;
  if (updated == 0.0)
    goto LABEL_17;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v80, a3);
  TLine::FindWidthOverflow((uint64_t)v82, v11, 0, (uint64_t)v80, (uint64_t)&v115, a5);
  v13 = v115;
  v14 = *((_QWORD *)&v115 + 1);
  v15 = *(double *)&v116;
  v22 = v81;
  if (v81 == v80)
  {
    v23 = 4;
    v22 = v80;
    goto LABEL_15;
  }
  if (v81)
  {
    v23 = 5;
LABEL_15:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  v19 = (const TLine *)v82;
LABEL_17:
  if ((v13 & 0x54) == 0)
    goto LABEL_94;
  v76.location = v11;
  v68 = v19;
  v63 = v6;
  v62 = v18;
  if ((v13 & 0x10) == 0)
  {
    v64 = v14;
    if ((v13 & 4) == 0)
      goto LABEL_53;
    *(_DWORD *)&v120[28] = HIDWORD(v74[1]);
    v122 = v73;
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v69[1] + 1);
    v118 = v69[0];
    *(_QWORD *)&v117 = 0;
    v115 = 0u;
    v116 = 0u;
    *(_QWORD *)v119 = (char *)&v117 + 8;
    BYTE8(v122) = 0;
    memset(&v119[8], 0, 56);
    memset(&v120[8], 0, 20);
    LOBYTE(v122) = 0;
    memset(v123, 0, sizeof(v123));
    v121 = 0uLL;
    *(_QWORD *)v120 = 0xFFEFFFFFFFFFFFFFLL;
    v126.location = v11;
    v126.length = v14;
    TLine::CopyStringRange((TLine *)&v115, v19, v126);
    TTypesetter::MakeLineConsistent((uint64_t)a1, (TLine *)&v115);
    TTypesetter::ReorderRunsIfNecessary((uint64_t)a1, (uint64_t)&v115);
    v24 = a1[1];
    v76.length = (CFIndex)&v115;
    v77 = v24;
    v111 = 0xAAAAAAAAAAAAAAAALL;
    v112 = NAN;
    *(double *)&v113 = -3.72066208e-103;
    TTabEngine::ApplyTabs((TLine **)&v76.length, a6, a5, v25, (uint64_t)&v111);
    if ((_BYTE)v113)
    {
      v26 = (unint64_t *)a1[6];
      if (v26)
      {
        *v26 = v111;
        v64 = v111 - v11;
        v15 = v112 - a6;
        v13 = 5;
LABEL_52:
        TLine::~TLine((TLine *)&v115);
        v19 = v68;
LABEL_53:
        if ((v13 & 0x40) != 0)
          goto LABEL_59;
LABEL_54:
        v14 = v64;
        goto LABEL_94;
      }
    }
    *(_QWORD *)&v100 = 0;
    TLine::FindWidthOverflow((uint64_t)&v115, v11, 1, (uint64_t)&v98, (uint64_t)&v78, a5);
    v13 = v78;
    v64 = *((_QWORD *)&v78 + 1);
    v15 = v79;
    v36 = (unint64_t *)v100;
    if ((unint64_t *)v100 == &v98)
    {
      v37 = 4;
      v36 = &v98;
    }
    else
    {
      if (!(_QWORD)v100)
      {
LABEL_49:
        if ((v13 & 1) != 0 && (int64_t)(v64 + v11) < *((_QWORD *)v68 + 10) + *((_QWORD *)v68 + 9))
          v13 &= ~1u;
        goto LABEL_52;
      }
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
    goto LABEL_49;
  }
  v27 = *(double *)&v14;
  if (v14 < 1)
    goto LABEL_58;
  v66 = *((_QWORD *)v19 + 10);
  v67 = *((_QWORD *)v19 + 9);
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  v29 = v14;
  while (1)
  {
    v122 = v73;
    *(_DWORD *)&v120[28] = HIDWORD(v74[1]);
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v69[1] + 1);
    v118 = v69[0];
    *(_QWORD *)&v117 = 0;
    v115 = 0u;
    v116 = 0u;
    *(_QWORD *)v119 = (char *)&v117 + 8;
    BYTE8(v122) = 0;
    memset(&v120[8], 0, 20);
    memset(&v119[8], 0, 56);
    v121 = 0uLL;
    LOBYTE(v122) = 0;
    memset(v123, 0, sizeof(v123));
    *(_QWORD *)v120 = 0xFFEFFFFFFFFFFFFFLL;
    location = v76.location;
    v127.location = v76.location;
    v127.length = v29;
    TLine::CopyStringRange((TLine *)&v115, v19, v127);
    TTypesetter::MakeLineConsistent((uint64_t)a1, (TLine *)&v115);
    if ((v120[24] & 2) == 0)
      goto LABEL_29;
    TTypesetter::ReorderRunsIfNecessary((uint64_t)a1, (uint64_t)&v115);
    v31 = a1[1];
    *(_QWORD *)&v78 = &v115;
    *((_QWORD *)&v78 + 1) = v31;
    v111 = 0xAAAAAAAAAAAAAAAALL;
    v112 = NAN;
    *(double *)&v113 = -3.72066208e-103;
    TTabEngine::ApplyTabs((TLine **)&v78, a6, a5, v32, (uint64_t)&v111);
    if ((_BYTE)v113)
    {
      v33 = (unint64_t *)a1[6];
      if (v33)
        break;
    }
    location = v76.location;
LABEL_29:
    *(_QWORD *)&v100 = 0;
    TLine::FindWidthOverflow((uint64_t)&v115, location, 1, (uint64_t)&v98, (uint64_t)&v111, a5);
    v13 = v111;
    v15 = *(double *)&v113;
    v34 = (unint64_t *)v100;
    if ((unint64_t *)v100 == &v98)
    {
      v34 = &v98;
      v35 = 4;
      v27 = v112;
    }
    else
    {
      v27 = v112;
      if (!(_QWORD)v100)
        goto LABEL_34;
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_34:
    if ((v13 & 2) != 0)
      goto LABEL_56;
    if ((v13 & 1) != 0 || *(uint64_t *)&v27 >= v28)
    {
      if (*(_QWORD *)&v27 + v76.location < v66 + v67)
        v13 &= ~1u;
      goto LABEL_56;
    }
    TLine::GetTrailingWhitespace((uint64_t)&v115, (double *)&v111);
    if ((uint64_t)(v111 + *(_QWORD *)&v27) >= v29)
    {
      v13 = 1;
      v15 = *(double *)&v119[40];
      v27 = *(double *)&v29;
LABEL_56:
      TLine::~TLine((TLine *)&v115);
      goto LABEL_57;
    }
    if ((v13 & 0x10) == 0)
      goto LABEL_56;
    v29 += ~v111;
    TLine::~TLine((TLine *)&v115);
    v28 = *(_QWORD *)&v27;
    v19 = v68;
    if (v29 <= 0)
      goto LABEL_58;
  }
  *v33 = v111;
  *(_QWORD *)&v27 = v111 - v76.location;
  v15 = v112 - a6;
  TLine::~TLine((TLine *)&v115);
  v13 = 5;
LABEL_57:
  v19 = v68;
LABEL_58:
  v64 = *(_QWORD *)&v27;
  v6 = v63;
  v18 = v62;
  v11 = v76.location;
  if ((v13 & 0x40) == 0)
    goto LABEL_54;
LABEL_59:
  v38 = 0;
  v65 = *((_QWORD *)v19 + 9);
  v39 = *((_QWORD *)v19 + 10) + v65;
  v40 = v13 & 0xFE;
  if ((uint64_t)(v64 + v11) >= v39)
    v40 = v13;
  v61 = v40;
  v41 = 0.0;
  v13 = 0;
  while (2)
  {
    v117 = v69[1];
    v118 = v69[0];
    *(_OWORD *)&v119[32] = v71;
    *(_OWORD *)&v119[48] = v70;
    *(_OWORD *)v119 = v72[1];
    *(_OWORD *)&v119[16] = v72[0];
    memset(v123, 170, sizeof(v123));
    v121 = v74[0];
    v122 = v73;
    *(_OWORD *)v120 = v75;
    *(_OWORD *)&v120[16] = v74[1];
    v115 = v69[3];
    v116 = v69[2];
    v43 = *(_QWORD *)*a1;
    v42 = *(_QWORD *)(*a1 + 8);
    if (v42)
    {
      v44 = (unint64_t *)(v42 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    *(_QWORD *)&v115 = v43;
    *((_QWORD *)&v115 + 1) = v42;
    *(_QWORD *)&v117 = 0;
    v116 = 0uLL;
    BYTE8(v122) = 0;
    memset(&v120[8], 0, 21);
    memset(&v119[8], 0, 56);
    v121 = 0uLL;
    LOBYTE(v122) = 0;
    memset(v123, 0, sizeof(v123));
    *(_QWORD *)v119 = (char *)&v117 + 8;
    *(_QWORD *)v120 = 0xFFEFFFFFFFFFFFFFLL;
    v128.location = v76.location;
    v128.length = v14;
    TLine::CopyStringRange((TLine *)&v115, v19, v128);
    TTypesetter::MakeLineConsistent((uint64_t)a1, (TLine *)&v115);
    if ((v120[26] & 4) == 0)
    {
      if (!v38)
      {
        v38 = v64;
        v41 = v15;
      }
      goto LABEL_92;
    }
    v46 = v120[24];
    if ((v120[24] & 2) == 0)
      goto LABEL_70;
    TTypesetter::ReorderRunsIfNecessary((uint64_t)a1, (uint64_t)&v115);
    v47 = a1[1];
    *(_QWORD *)&v78 = &v115;
    *((_QWORD *)&v78 + 1) = v47;
    v98 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v99 = -1;
    *((_QWORD *)&v99 + 1) = 0xAAAAAAAAAAAAAAAALL;
    TTabEngine::ApplyTabs((TLine **)&v78, a6, a5, v48, (uint64_t)&v98);
    if (!BYTE8(v99) || (v49 = (unint64_t *)a1[6]) == 0)
    {
      v46 = v120[24];
LABEL_70:
      if ((v46 & 8) != 0)
      {
        TLine::GetLeftPartialHangingGlyphCountAndWidth((TLine *)&v115, 0);
        v51 = v53;
        TLine::GetRightHangersGlyphCountAndWidth((TLine *)&v115, 0);
      }
      else
      {
        TLine::GetLeftHangersGlyphCountAndWidth((TLine *)&v115, 0);
        v51 = v50;
        TLine::GetRightPartialHangingGlyphCountAndWidth((TLine *)&v115, 0);
      }
      v54 = v52 + v51;
      v78 = xmmword_18492F010;
      v79 = NAN;
      v114 = 0;
      TLine::FindWidthOverflow((uint64_t)&v115, v76.location, 1, (uint64_t)&v111, (uint64_t)&v78, v52 + v51 + a5);
      v55 = v114;
      if (v114 == &v111)
      {
        v55 = &v111;
        v56 = 4;
LABEL_77:
        (*(void (**)(void))(*v55 + 8 * v56))();
      }
      else if (v114)
      {
        v56 = 5;
        goto LABEL_77;
      }
      v57 = v79 - v54;
      v79 = v79 - v54;
      v58 = v78;
      if ((v78 & 2) == 0)
      {
        if ((v78 & 1) != 0)
        {
          v58 = v61;
          LOBYTE(v78) = v61;
        }
        if (*((uint64_t *)&v78 + 1) > v38)
        {
          v13 = v58;
          v38 = *((_QWORD *)&v78 + 1);
          v41 = v57;
        }
        if (*((uint64_t *)&v78 + 1) < v14)
          goto LABEL_92;
        v76.length = v14;
        if (v65 > v14 || v39 <= v14)
          goto LABEL_92;
        v59 = a1[1];
        v99 = 0u;
        v100 = 0u;
        v101 = 0u;
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v108 = 0u;
        v110 = 0;
        v109 = 0u;
        v60 = *(_QWORD *)(v59 + 16);
        v98 = v59;
        *(_QWORD *)&v109 = v60;
        TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v98, &v76.length, 0);
        v14 = v76.length + 1;
        TLine::~TLine((TLine *)&v115);
        v19 = v68;
        if (v14 + v76.location > v39)
          goto LABEL_93;
        continue;
      }
      v38 = *((_QWORD *)&v78 + 1);
      v41 = v57;
      v13 = v78;
LABEL_92:
      TLine::~TLine((TLine *)&v115);
      goto LABEL_93;
    }
    break;
  }
  *v49 = v98;
  v38 = v98 - v76.location;
  v41 = *(double *)&v99 - a6;
  TLine::~TLine((TLine *)&v115);
  v13 = 5;
LABEL_93:
  v14 = v38;
  v15 = v41;
  v6 = v63;
  v18 = v62;
LABEL_94:
  TLine::~TLine((TLine *)v82);
LABEL_95:
  *(_BYTE *)v6 = v13 | v18;
  *(_QWORD *)(v6 + 8) = v14;
  *(double *)(v6 + 16) = v15;
}

uint64_t TLine::FindWidthOverflow@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  double v28;

  v7 = (_QWORD *)this;
  v10 = *(_QWORD *)(this + 16);
  v9 = *(_QWORD *)(this + 24);
  v11 = v9 - v10;
  if (v9 == v10 || (this = TLine::FindRunWithCharIndex((TLine *)this, a2, 1), this < 0) || v11 >> 3 <= this)
  {
    v16 = v7[9] - a2 + v7[10];
    v18 = 0.0;
    v19 = 1;
    goto LABEL_25;
  }
  v15 = *(_QWORD **)(*(_QWORD *)(v7[2] + 8 * this) + 40);
  this = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t, double))(*v15 + 48))(&v26, v15, a2, *v7, a3, a6);
  v16 = v27;
  v17 = v28;
  v18 = v28 + 0.0;
  v19 = (16 * *((_BYTE *)v7 + 154)) & 0x40 | v26;
  if ((v26 & 2) == 0)
  {
    if (v27 >= 1)
    {
      v20 = v15[1];
      if (v20 <= v27 + a2 && v15[2] + v20 > v27 + a2)
        goto LABEL_25;
      do
      {
        a6 = a6 - v17;
        if (a6 <= 0.0)
          break;
        v15 = (_QWORD *)v15[3];
        if (!v15)
          break;
        v22 = v15[1];
        v23 = v15[2];
        v24 = *(_QWORD *)(a4 + 24);
        if (v24)
        {
          v26 = v15[1];
          this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v26);
          if ((_DWORD)this)
          {
            v19 |= this;
            goto LABEL_25;
          }
        }
        this = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t, double))(*v15 + 48))(&v26, v15, v22, *v7, a3, a6);
        v17 = v28;
        v19 |= v26;
        if (v22 - a2 + v27 > v16)
          v16 = v22 - a2 + v27;
        v18 = v18 + v28;
        if ((v19 & 2) != 0)
          goto LABEL_25;
      }
      while (v27 >= v23 && v27 != 0);
    }
    v19 |= v7[9] - a2 + v7[10] == v16;
  }
LABEL_25:
  *(_BYTE *)a5 = v19;
  *(_QWORD *)(a5 + 8) = v16;
  *(double *)(a5 + 16) = v18;
  return this;
}

uint64_t TRun::FindBreak@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __n128 v16;
  double v17;
  double *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  char v33;
  double v34;
  double *v35;
  char *v36;
  int v37;
  id *v38;
  char LineBoundsOptions;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t GlyphIndexForChar;

  if (*(uint64_t *)(result + 208) <= 0)
  {
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    return result;
  }
  v10 = result;
  v11 = *(_QWORD **)(result + 216);
  v12 = v11[4];
  if (v12 || (v14 = v11[3]) == 0)
  {
    v61 = 0;
    v13 = *(_QWORD *)(result + 200);
    v60 = v12 + 16 * v13;
  }
  else
  {
    v13 = *(_QWORD *)(result + 200);
    v60 = v14 + 8 * v13;
    v61 = 1;
  }
  v65 = v11[6];
  v63 = *(_BYTE *)(result + 225);
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<true>(result, a2);
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 216) + 40) + 4 * *(_QWORD *)(v10 + 200) + 4 * GlyphIndexForChar) >> 1;
  result = (uint64_t)GetTable();
  v17 = 0.0002;
  if (result)
  {
    v18 = *(double **)(result + 64);
    if (v18)
      v17 = *v18;
  }
  v19 = v15 & 0x10;
  v20 = *(_QWORD *)(v10 + 8);
  if (v20 == a2 && *(double *)(v10 + 192) - a6 <= v17)
    a6 = 1.79769313e308;
  v21 = *(_QWORD *)(v10 + 16) + v20;
  v22 = -1;
  if ((*(_BYTE *)(v10 + 224) & 1) != 0)
    v23 = 1;
  else
    v23 = -1;
  if (v21 <= a2)
  {
    v64 = 0;
    v24 = 0;
    v26 = 0.0;
    v25 = 0.0;
    v27 = a2;
    goto LABEL_80;
  }
  v56 = *(_BYTE *)(v10 + 224);
  v57 = a4;
  v24 = 0;
  v64 = 0;
  v55 = *(_QWORD *)(v10 + 208);
  v25 = 0.0;
  v26 = 0.0;
  v27 = a2;
  v58 = v65 + 8 * v13;
  v62 = v13;
  while (1)
  {
    while (1)
    {
      v28 = GlyphIndexForChar;
      result = *(_QWORD *)(v10 + 216);
      v29 = *(_QWORD *)(v10 + 200);
      v30 = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * v29 + 4 * GlyphIndexForChar);
      if ((v30 & 2) == 0)
        break;
      if ((v30 & 0x20) == 0)
      {
        LOBYTE(v19) = v19 | 2;
        v44 = *(_QWORD *)(v58 + 8 * GlyphIndexForChar);
        result = objc_msgSend((id)result, "attachmentCountAtIndex:", v29 + GlyphIndexForChar);
        v27 = v44 + result + 1;
        goto LABEL_79;
      }
      if (*(int *)(v10 + 256) > 1)
      {
        result = TRun::FindNextGlyphIndex((TRun *)v10, v27, &GlyphIndexForChar);
        v27 = result;
      }
      else
      {
        if ((*(_BYTE *)(v10 + 224) & 1) != 0)
        {
          v31 = --GlyphIndexForChar;
          if (v28 > 0)
          {
LABEL_25:
            v27 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v29 + 8 * v31);
            goto LABEL_26;
          }
        }
        else
        {
          v31 = ++GlyphIndexForChar;
          if (v28 + 1 < *(_QWORD *)(v10 + 208))
            goto LABEL_25;
        }
        v27 = *(_QWORD *)(v10 + 16) + *(_QWORD *)(v10 + 8);
      }
LABEL_26:
      if (v27 >= v21)
        goto LABEL_79;
    }
    if ((v63 & 1) == 0)
      break;
    v32 = (v30 >> 2) & 1;
    if (v57 || (v30 & 4) == 0)
      goto LABEL_30;
    v19 |= 4u;
    if (*(int *)(v10 + 256) > 1)
    {
      result = TRun::FindNextGlyphIndex((TRun *)v10, v27, &GlyphIndexForChar);
      v27 = result;
    }
    else
    {
      if ((*(_BYTE *)(v10 + 224) & 1) != 0)
      {
        v40 = --GlyphIndexForChar;
        if (v28 > 0)
        {
LABEL_74:
          v27 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v29 + 8 * v40);
          goto LABEL_75;
        }
      }
      else
      {
        v40 = ++GlyphIndexForChar;
        if (v28 + 1 < *(_QWORD *)(v10 + 208))
          goto LABEL_74;
      }
      v27 = *(_QWORD *)(v10 + 16) + *(_QWORD *)(v10 + 8);
    }
LABEL_75:
    v13 = v62;
    if (v27 >= v21)
      goto LABEL_80;
  }
  v32 = 0;
LABEL_30:
  v33 = 3;
  if (!v61)
    v33 = 4;
  v34 = v25 + *(double *)(v60 + (GlyphIndexForChar << v33));
  if (!GlyphIndexForChar)
  {
    v35 = *(double **)(v10 + 312);
    if (!v35)
      v35 = (double *)MEMORY[0x1E0C9D820];
    v34 = v34 + *v35;
  }
  if (v34 - a6 <= v17)
  {
    v26 = 0.0;
    v22 = -1;
    goto LABEL_54;
  }
  if (v24 > v27 || (v36 = v64, (uint64_t)&v64[v24] <= v27))
  {
    v37 = v32;
    v16.n128_f64[0] = v34 - a6;
    result = (*(uint64_t (**)(const TCharStream *, uint64_t, uint64_t, __n128))(*(_QWORD *)a3 + 40))(a3, v27, 2, v16);
    v32 = v37;
    v24 = result;
  }
  v64 = v36;
  if ((char *)v27 != &v36[v24 - 1])
  {
    v41 = v22 == -1;
    if (v22 == -1)
      v22 = v27;
    if (v41)
      v26 = v25;
LABEL_54:
    if (v32)
      v19 |= 4u;
    if (*(int *)(v10 + 256) > 1)
    {
      result = TRun::FindNextGlyphIndex((TRun *)v10, v27, &GlyphIndexForChar);
      v27 = result;
      goto LABEL_63;
    }
    if ((*(_BYTE *)(v10 + 224) & 1) != 0)
    {
      v42 = v28 - 1;
      GlyphIndexForChar = v28 - 1;
      if (v28 <= 0)
        goto LABEL_59;
    }
    else
    {
      v42 = v28 + 1;
      GlyphIndexForChar = v28 + 1;
      if (v28 + 1 >= *(_QWORD *)(v10 + 208))
      {
LABEL_59:
        v27 = *(_QWORD *)(v10 + 16) + *(_QWORD *)(v10 + 8);
LABEL_63:
        v25 = v34;
        goto LABEL_75;
      }
    }
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 216) + 48) + 8 * *(_QWORD *)(v10 + 200) + 8 * v42);
    goto LABEL_63;
  }
  v38 = *(id **)(v10 + 168);
  if (v38)
    LineBoundsOptions = TParagraphStyle::GetLineBoundsOptions(v38, v36);
  else
    LineBoundsOptions = 0;
  if ((v56 & 1) == 0)
  {
    result = TRun::GetRightHangersGlyphCountAndWidth((TRun *)v10, v28, LineBoundsOptions, a3, 1);
    if (result < 1)
      goto LABEL_79;
    v43 = result + v28;
    GlyphIndexForChar = result + v28;
    if (result + v28 == v55)
      goto LABEL_110;
    goto LABEL_72;
  }
  result = TRun::GetLeftHangersGlyphCountAndWidth((TRun *)v10, v28, LineBoundsOptions, a3, -1);
  if (result < 1)
    goto LABEL_79;
  v43 = v28 - result;
  GlyphIndexForChar = v28 - result;
  if (v28 - result != -1)
  {
LABEL_72:
    v27 = *(_QWORD *)(v58 + 8 * v43);
    goto LABEL_75;
  }
LABEL_110:
  v27 = v21;
LABEL_79:
  v13 = v62;
LABEL_80:
  v45 = v19 & 0xFD;
  if (v22 >= v27)
    v45 = v19;
  if (v22 == -1)
    v46 = v27;
  else
    v46 = v22;
  if (v22 == -1)
    v47 = v25;
  else
    v47 = v26;
  if (v22 == -1)
    v45 = v19;
  v48 = v46 - a2;
  if (v48 >= 1 && v48 < *(_QWORD *)(v10 + 16) && (v45 & 2) == 0)
  {
    v50 = *(_QWORD *)(v10 + 208);
    v51 = GlyphIndexForChar;
    do
    {
      v52 = v51 + v23;
      if (v51 + v23 < 0 || v50 <= v52)
        goto LABEL_105;
      v53 = *(_QWORD *)(v65 + 8 * v23 + 8 * v13 + 8 * v51);
      v54 = v24 > v53 || (uint64_t)&v64[v24] <= v53;
      v51 = v52;
    }
    while (!v54);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 216) + 40) + 4 * *(_QWORD *)(v10 + 200) + 4 * v52) & 8) == 0)
    {
LABEL_105:
      if (GlyphIndexForChar < 0
        || v50 <= GlyphIndexForChar
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 216) + 40) + 4 * *(_QWORD *)(v10 + 200) + 4 * GlyphIndexForChar) & 0x380) == 0)
      {
        goto LABEL_109;
      }
    }
    v45 |= 0x10u;
  }
LABEL_109:
  *(_BYTE *)a5 = v45;
  *(_QWORD *)(a5 + 8) = v48;
  *(double *)(a5 + 16) = v47;
  return result;
}

double CTLineGetPenOffsetForFlush(CTLineRef line, CGFloat flushFactor, double flushWidth)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if (!line)
    return 0.0;
  v5 = (double *)*((_QWORD *)line + 5);
  v6 = v5[13];
  TLine::GetLeftHangersGlyphCountAndWidth((TLine *)v5, 0);
  v8 = v7;
  TLine::GetRightHangersGlyphCountAndWidth((TLine *)v5, 0);
  v10 = 1.0;
  if (flushFactor <= 1.0)
    v10 = flushFactor;
  if (flushFactor < 0.0)
    v10 = 0.0;
  if (flushWidth <= 0.0)
    return v10 * v8;
  else
    return v10 * (flushWidth - (v6 - v8 - v9));
}

uint64_t TLine::GetLeftHangersGlyphCountAndWidth(TLine *this, const unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  TRun *v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  CFIndex LeftHangersGlyphCountAndWidth;

  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = (unint64_t)v2 >> 3;
    v8 = (*((unsigned __int16 *)this + 76) >> 3) & 1;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    v10 = 0.0;
    while (1)
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5);
      v12 = *(TRun **)(v11 + 40);
      v13 = *((_QWORD *)v12 + 26);
      if ((v8 & 1) == 0)
        break;
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 80))(*(_QWORD *)(v11 + 40));
      v6 += v14;
      v10 = v10 + *(double *)&a2;
      if (v14 < v13)
      {
        v15 = v14;
        if (*(double *)&a2 == 0.0)
        {
LABEL_9:
          v16 = (id *)*((_QWORD *)v12 + 21);
          if (v16)
            LOBYTE(v17) = TParagraphStyle::GetLineBoundsOptions(v16, a2);
          else
            LOBYTE(v17) = 0;
          goto LABEL_13;
        }
LABEL_12:
        v17 = *a2;
LABEL_13:
        LeftHangersGlyphCountAndWidth = TRun::GetLeftHangersGlyphCountAndWidth(v12, v15, v17, *(const TCharStream **)this, 1);
        v6 += LeftHangersGlyphCountAndWidth;
        v10 = v10 + *(double *)&a2;
        if (LeftHangersGlyphCountAndWidth < v13)
          return v6;
        LOBYTE(v8) = 0;
        goto LABEL_16;
      }
      LOBYTE(v8) = 1;
LABEL_16:
      if (v9 == ++v5)
        return v6;
    }
    v15 = 0;
    if (*(double *)&a2 == 0.0)
      goto LABEL_9;
    goto LABEL_12;
  }
  return 0;
}

id TParagraphStyle::GetLineBoundsOptions(id *this, const void *a2)
{
  int v3;
  TParagraphStyle *v4;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = (TParagraphStyle *)*this;
  if (v3)
    return (id)TParagraphStyle::GetNative(v4, a2)[5];
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(*this, sel__lineBoundsOptions);
  return 0;
}

uint64_t TLine::GetRightHangersGlyphCountAndWidth(TLine *this, const unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  TRun *v11;
  CFIndex v12;
  uint64_t RightWhitespaceGlyphCountAndWidth;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  CFIndex RightHangersGlyphCountAndWidth;
  unint64_t v18;

  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = (unint64_t)v2 >> 3;
    v7 = (*((_WORD *)this + 76) & 8) == 0;
    v8 = v6 - 1;
    v9 = 0.0;
    while (1)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8);
      v11 = *(TRun **)(v10 + 40);
      v12 = *((_QWORD *)v11 + 26);
      if (!v7)
        break;
      RightWhitespaceGlyphCountAndWidth = TRun::GetRightWhitespaceGlyphCountAndWidth(*(TRun **)(v10 + 40));
      v5 += RightWhitespaceGlyphCountAndWidth;
      v9 = v9 + *(double *)&a2;
      if (RightWhitespaceGlyphCountAndWidth < v12)
      {
        v14 = RightWhitespaceGlyphCountAndWidth;
        if (*(double *)&a2 == 0.0)
        {
LABEL_6:
          v15 = (id *)*((_QWORD *)v11 + 21);
          if (v15)
            LOBYTE(v16) = TParagraphStyle::GetLineBoundsOptions(v15, a2);
          else
            LOBYTE(v16) = 0;
          goto LABEL_10;
        }
LABEL_9:
        v16 = *a2;
LABEL_10:
        RightHangersGlyphCountAndWidth = TRun::GetRightHangersGlyphCountAndWidth(v11, v12 + ~v14, v16, *(const TCharStream **)this, -1);
        v5 += RightHangersGlyphCountAndWidth;
        v9 = v9 + *(double *)&a2;
        if (RightHangersGlyphCountAndWidth < v12)
          return v5;
        v7 = 0;
        goto LABEL_13;
      }
      v7 = 1;
LABEL_13:
      v18 = v8-- + 1;
      if (v18 <= 1)
        return v5;
    }
    v14 = 0;
    if (*(double *)&a2 == 0.0)
      goto LABEL_6;
    goto LABEL_9;
  }
  return 0;
}

CFIndex TRun::GetRightHangersGlyphCountAndWidth(TRun *this, uint64_t a2, char a3, const TCharStream *a4, int a5)
{
  char v7;
  CFIndex v8;
  TRun *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  const __CTFont *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  double v27;
  CFIndex v28;
  uint64_t (*v29)(_QWORD *, _QWORD);
  _QWORD *v30;
  UTF32Char FullChar;
  double *v32;
  const void *v33;
  unsigned int CompositionLanguage;
  CFRange v35;
  unsigned int v36;
  uint64_t v37;
  UChar32 v38;
  const TCharStream *v40;
  int v41;
  CFIndex v43;
  TRun *v44;
  const __CFCharacterSet *theSet;
  CFIndex v46;
  uint64_t v47;
  const TCharStream *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;

  v7 = a3;
  v8 = a2;
  v9 = this;
  v10 = (_QWORD *)*((_QWORD *)this + 27);
  v11 = v10[4];
  if (v11 || (v15 = v10[3]) == 0)
  {
    v12 = 0;
    v13 = *((_QWORD *)this + 25);
    v14 = v11 + 16 * v13;
  }
  else
  {
    v13 = *((_QWORD *)this + 25);
    v14 = v15 + 8 * v13;
    v12 = 1;
  }
  v46 = *((_QWORD *)this + 26);
  if (a2 < 0)
  {
    TAttributes::GetCompositionLanguage((TRun *)((char *)this + 40), (const void *)a2);
    v28 = v8;
    goto LABEL_33;
  }
  if ((a3 & 4) != 0 && v46 > a2)
  {
    v16 = v10[2] + 2 * v13;
    v63 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v61 = v17;
    v62 = v17;
    v18 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
    TAATPropTable::TAATPropTable((TAATPropTable *)v61, v18);
    v48 = a4;
    v59 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v19 = *((_QWORD *)a4 + 2);
    v60 = 0;
    *(_QWORD *)&v59 = v19;
    v40 = a4;
    if (qword_1ECDE7460 != -1)
      dispatch_once_f(&qword_1ECDE7460, 0, (dispatch_function_t)GetRightHangingCharacters(void)::$_0::__invoke);
    v20 = *(_QWORD *)(*((_QWORD *)v9 + 27) + 48) + 8 * *((_QWORD *)v9 + 25);
    v21 = a5;
    v44 = v9;
    theSet = (const __CFCharacterSet *)qword_1ECDE7458;
    v22 = v14 + 16 * v8;
    v23 = v8;
    v24 = 16 * a5;
    v25 = v14 + 8 * v23;
    v41 = a5;
    v26 = 8 * a5;
    v27 = 0.0;
    v43 = v23;
    v28 = v23;
    do
    {
      v47 = *(_QWORD *)(v20 + 8 * v28);
      v29 = (uint64_t (*)(_QWORD *, _QWORD))*((_QWORD *)&v62 + 1);
      v30 = (uint64_t *)((char *)v61 + (v63 >> 1));
      if ((v63 & 1) != 0)
        v29 = *(uint64_t (**)(_QWORD *, _QWORD))(*v30 + DWORD2(v62));
      if ((v29(v30, *(unsigned __int16 *)(v16 + 2 * v28)) & 0x2000) == 0)
      {
        FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v48, &v47, 0);
        if (!CFCharacterSetIsLongCharacterMember(theSet, FullChar))
          break;
      }
      v32 = (double *)(v12 ? v25 : v22);
      v27 = v27 + *v32;
      v28 += v21;
      if (v28 < 0)
        break;
      v22 += v24;
      v25 += v26;
    }
    while (v46 > v28);

    v9 = v44;
    CompositionLanguage = TAttributes::GetCompositionLanguage((TRun *)((char *)v44 + 40), v33);
    if (v28 < 0)
    {
      v7 = a3;
      v8 = v43;
      a5 = v41;
      goto LABEL_33;
    }
    v36 = CompositionLanguage;
    v7 = a3;
    v8 = v43;
    a4 = v40;
    a5 = v41;
  }
  else
  {
    v36 = TAttributes::GetCompositionLanguage((TRun *)((char *)this + 40), (const void *)a2);
    v28 = v8;
  }
  if (v46 > v28 && v36 >= 2)
  {
    v48 = a4;
    v59 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v37 = *((_QWORD *)a4 + 2);
    v60 = 0;
    *(_QWORD *)&v59 = v37;
    v61[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 27) + 48) + 8 * *((_QWORD *)v9 + 25) + 8 * v28);
    v38 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v48, v61, 0);
    if (CJKCompositionEngine::IsEnabled(void)::once != -1)
      dispatch_once_f(&CJKCompositionEngine::IsEnabled(void)::once, 0, (dispatch_function_t)CJKCompositionEngine::IsEnabled(void)::$_0::__invoke);
    if (gCJKCompositionRulesEnabled)
    {
      LOBYTE(v47) = -86;
      if (CJKCompositionRules::ShouldGlyphImageRightFlush(v36, *((unsigned __int8 *)v9 + 90), v38, (BOOL *)&v47))
      {
        v35.location = v28;
        GetOpticalBoundsAdjustment(1, v9, v35);
        if (!(_BYTE)v47)
          atomic_load((unint64_t *)v9 + 7);
      }
    }
  }
LABEL_33:
  if (a5 >= 1)
    return v28 - v8;
  if (v28 < 0 || v46 <= v28)
    return v8 - v28;
  return v8 - v28 + TRun::GetRightPartialHangingGlyphCountAndWidth(v9, v28, v7, (const TCharStream *)v35.length);
}

uint64_t TRun::GetRightPartialHangingGlyphCountAndWidth(TRun *this, uint64_t a2, char a3, const TCharStream *a4)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  TFont *v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  __int128 v22;
  double v23;
  double *v24;
  double v25;
  __int128 v27;
  CGAffineTransform v29;
  BOOL v30[2];
  CGRect v31;
  CGRect v32;

  v6 = (_QWORD *)*((_QWORD *)this + 27);
  v7 = v6[4];
  if (v7 || (v11 = v6[3]) == 0)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 25);
    v10 = v7 + 16 * v9;
  }
  else
  {
    v9 = *((_QWORD *)this + 25);
    v10 = v11 + 8 * v9;
    v8 = 1;
  }
  if ((a3 & 0x18) != 0)
  {
    v12 = v6[2] + 2 * v9;
    v13 = atomic_load((unint64_t *)this + 7);
    v14 = *(TFont **)(v13 + 40);
    v15 = *((_QWORD *)v14 + 50);
    TFont::GetScaledMatrix(v14, &v29);
    (*(void (**)(uint64_t, CGAffineTransform *, _QWORD))(*(_QWORD *)v15 + 624))(v15, &v29, *(_DWORD *)v14 & 1);
    if ((a3 & 0x10) != 0)
    {
      *(_WORD *)v30 = *(_WORD *)(v12 + 2 * a2);
      *(_QWORD *)&v27 = -1;
      *((_QWORD *)&v27 + 1) = -1;
      *(_OWORD *)&v29.a = v27;
      *(_OWORD *)&v29.c = v27;
      v32.origin.x = TFont::GetOpticalBoundsForGlyphs(v14, (const unsigned __int16 *)v30, (CGRect *)&v29, 1);
      CGRectGetMaxX(v32);
    }
    else
    {
      v17 = v16;
      v18 = v10 + 16 * a2;
      v19 = v10 + 8 * a2;
      v20 = 0.0;
      v21 = -1.79769313e308;
      do
      {
        if (v17 < v20)
          break;
        *(_WORD *)v30 = *(_WORD *)(v12 + 2 * a2);
        *(_QWORD *)&v22 = -1;
        *((_QWORD *)&v22 + 1) = -1;
        *(_OWORD *)&v29.a = v22;
        *(_OWORD *)&v29.c = v22;
        v31.origin.x = TFont::GetBoundingBoxesForGlyphs(v14, (const unsigned __int16 *)v30, (CGRect *)&v29, 1, kCTFontOrientationDefault);
        v23 = CGRectGetMaxX(v31) - v20;
        v24 = (double *)(v8 ? v19 : v18);
        v25 = v23 - *v24;
        if (v21 < v25)
          v21 = v25;
        v20 = v20 + *v24;
        v18 -= 16;
        v19 -= 8;
      }
      while (a2-- > 0);
    }
  }
  else
  {
    v29.a = NAN;
    v30[0] = -86;
    TAttributes::GetKernSetting((TRun *)((char *)this + 40), &v29.a, v30);
  }
  return 0;
}

uint64_t TRun::GetRightWhitespaceGlyphCountAndWidth(TRun *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;

  v1 = *((_QWORD *)this + 26);
  v2 = (_QWORD *)*((_QWORD *)this + 27);
  v3 = v1 - 1;
  v4 = v2[4];
  if (v4 || (v8 = v2[3]) == 0)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 25);
    v7 = v4 + 16 * v6;
  }
  else
  {
    v6 = *((_QWORD *)this + 25);
    v7 = v8 + 8 * v6;
    v5 = 1;
  }
  if (v1 < 1)
  {
    v13 = v1 - 1;
  }
  else
  {
    v9 = v2[5] + 4 * v6;
    v10 = v7 + 16 * v1 - 16;
    v11 = v7 + 8 * v1 - 8;
    v12 = 0.0;
    v13 = v1 - 1;
    while ((*(_DWORD *)(v9 + 4 * v13) & 0x20) != 0 || (*(_DWORD *)(v9 + 4 * v13) & 5) == 1)
    {
      if (v5)
        v14 = (double *)v11;
      else
        v14 = (double *)v10;
      v12 = v12 + *v14;
      v10 -= 16;
      v11 -= 8;
      if (v13-- <= 0)
      {
        v13 = -1;
        return v3 - v13;
      }
    }
  }
  return v3 - v13;
}

uint64_t TRun::GetGlyphIndexForCharIndex<true>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 208);
  if (v2 < 1)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 - v5 >= v2)
    v7 = v2 - 1;
  else
    v7 = a2 - v5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = *(_BYTE *)(a1 + 224);
  if ((v9 & 1) != 0)
    v10 = v2 + ~v8;
  else
    v10 = v8;
  v11 = *(_QWORD **)(a1 + 216);
  v12 = v11[6];
  v13 = *(_QWORD *)(a1 + 200);
  v14 = v12 + 8 * v13;
  v15 = *(_QWORD *)(v14 + 8 * v10);
  if (v15 == a2)
    return v10;
  if (*(_DWORD *)(a1 + 256) != 2)
  {
    if (v15 >= a2)
    {
      if ((v9 & 1) != 0)
      {
        if (v2 + ~v8 <= v2 - 1)
          v10 = v2 - 1;
        else
          v10 = v2 + ~v8;
        v18 = v2 - v8;
        while (v10 + 1 != v18)
        {
          v19 = *(_QWORD *)(v14 + 8 * v18++);
          if (v19 <= a2)
            return v18 - 1;
        }
      }
      else if (v8 < 1)
      {
        return v8;
      }
      else
      {
        do
        {
          v10 = v7 - 1;
          if (v7 < 2)
            break;
          v17 = *(_QWORD *)(v12 + 8 * v13 - 8 + 8 * v7--);
        }
        while (v17 > a2);
      }
      return v10;
    }
    if (objc_msgSend(v11, "attachmentCountAtIndex:", v10 + v13) + v15 >= a2)
      return v10;
  }
  return TRun::FindGlyphIndex<true>(a1, a2, 1);
}

int *TFont::InitStrikeMetrics(TFont *this)
{
  int *v2;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v2 = (int *)((char *)this + 48);
  TFont::GetStrikeMetrics((TBaseFont **)this, *(_DWORD *)this & 1, (uint64_t)&v4);
  if (v2 != &v4)
  {
    *((_DWORD *)this + 12) = v4;
    *(_OWORD *)((char *)this + 56) = v5;
    *(_OWORD *)((char *)this + 72) = v6;
    *(_OWORD *)((char *)this + 88) = v7;
    *(_OWORD *)((char *)this + 104) = v8;
    *(_OWORD *)((char *)this + 120) = v9;
    *((_BYTE *)this + 136) = v10;
  }
  return v2;
}

void TFont::GetStrikeMetrics(TBaseFont **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float64x2_t v6;
  __n128 EffectiveMatrix;
  double EffectiveSize;
  int64x2_t v9;
  const CGAffineTransform *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;

  v6.f64[0] = NAN;
  v6.f64[1] = NAN;
  v12 = v6;
  v13 = v6;
  v11 = v6;
  EffectiveMatrix = TFont::GetEffectiveMatrix((TFont *)this, (uint64_t)&v11);
  if ((*(unsigned int (**)(TBaseFont *, __n128))(*(_QWORD *)this[50] + 720))(this[50], EffectiveMatrix))
    EffectiveSize = *((double *)this + 2);
  else
    EffectiveSize = TFont::GetEffectiveSize((TFont *)this);
  v9 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v11, (float64x2_t)xmmword_18492FA90), vandq_s8((int8x16_t)vceqq_f64(v12, (float64x2_t)xmmword_18492E300), (int8x16_t)vceqzq_f64(v13)));
  if (vandq_s8((int8x16_t)v9, (int8x16_t)vdupq_laneq_s64(v9, 1)).i64[0] >= 0)
    v10 = (const CGAffineTransform *)&v11;
  else
    v10 = 0;
  TBaseFont::GetStrikeMetrics(this[50], EffectiveSize, v10, a2, a3);
}

double TFont::GetEffectiveSize(TFont *this)
{
  double v1;
  double v3;

  v1 = *((double *)this + 51);
  if (v1 == 0.0)
  {
    v1 = *((double *)this + 2);
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 50) + 712))(*((_QWORD *)this + 50)))
    {
LABEL_11:
      *((double *)this + 51) = v1;
      return v1;
    }
    if ((*(_BYTE *)this & 0x10) == 0)
    {
      if (v1 <= 16.0)
      {
        v3 = v1 * 0.25;
      }
      else
      {
        v3 = 0.0;
        if (v1 < 24.0)
          v3 = (24.0 - v1) * 0.5;
      }
      v1 = v1 + v3;
      if (v1 == *((double *)this + 2))
        v1 = v1 + 0.0001;
      goto LABEL_11;
    }
  }
  return v1;
}

void TBaseFont::GetStrikeMetrics(TBaseFont *this@<X0>, double a2@<D0>, const CGAffineTransform *a3@<X1>, int a4@<W2>, uint64_t a5@<X8>)
{
  _DWORD *inited;
  __int128 v10;
  __int128 v11;
  CGAffineTransform v12;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v15;
  CGAffineTransform v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v19 = xmmword_18494F7D8;
  v20 = unk_18494F7E8;
  v21 = xmmword_18494F7F8;
  v22 = unk_18494F808;
  v17 = __const__ZNK9TBaseFont16GetStrikeMetricsEdPK17CGAffineTransformb_metrics;
  v18 = unk_18494F7C8;
  if (a4)
  {
    (*(void (**)(__int128 *__return_ptr, TBaseFont *, uint64_t, double))(*(_QWORD *)this + 632))(&v17, this, 1, 0.0);
  }
  else
  {
    if (*((_DWORD *)this + 62))
      inited = (_DWORD *)((char *)this + 248);
    else
      inited = TBaseFont::InitFontMetrics(this, a2);
    StrikeMetrics::StrikeMetrics((uint64_t)&v17, (uint64_t)inited);
    *((_QWORD *)&v18 + 1) = (*(double (**)(TBaseFont *, double, double))(*(_QWORD *)this + 640))(this, a2, *((double *)&v18 + 1));
  }
  *(_QWORD *)&v10 = -1;
  *((_QWORD *)&v10 + 1) = -1;
  *(_OWORD *)&v16.c = v10;
  *(_OWORD *)&v16.tx = v10;
  *(_OWORD *)&v16.a = v10;
  CGAffineTransformMakeScale(&v16, a2 / (double)v17, a2 / (double)v17);
  if (a3)
  {
    v11 = *(_OWORD *)&a3->c;
    *(_OWORD *)&t1.a = *(_OWORD *)&a3->a;
    *(_OWORD *)&t1.c = v11;
    *(_OWORD *)&t1.tx = *(_OWORD *)&a3->tx;
    t2 = v16;
    CGAffineTransformConcat(&v15, &t1, &t2);
    v16 = v15;
  }
  v12 = v16;
  StrikeMetrics::ApplyTransform((StrikeMetrics *)&v17, &v12);
  StrikeMetrics::StrikeMetrics(a5, (uint64_t)&v17);
}

__n128 StrikeMetrics::StrikeMetrics(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = *MEMORY[0x1E0C9D538];
  result = *(__n128 *)MEMORY[0x1E0C9D648];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 56) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 72) = v3;
  *(_BYTE *)(a1 + 88) = 0;
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    result = *(__n128 *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 72);
    *(__n128 *)(a1 + 56) = result;
    *(_OWORD *)(a1 + 72) = v4;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  return result;
}

StrikeMetrics *StrikeMetrics::ApplyTransform(StrikeMetrics *this, CGAffineTransform *a2)
{
  __int128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  CGAffineTransform v13;
  CGRect v14;

  v14 = *(CGRect *)((char *)this + 56);
  v4 = *(_OWORD *)&a2->c;
  *(_OWORD *)&v13.a = *(_OWORD *)&a2->a;
  *(_OWORD *)&v13.c = v4;
  *(_OWORD *)&v13.tx = *(_OWORD *)&a2->tx;
  *(CGRect *)((char *)this + 56) = CGRectApplyAffineTransform(v14, &v13);
  a2->tx = 0.0;
  a2->ty = 0.0;
  v5 = *((double *)this + 2);
  v6 = *((double *)this + 1) * a2->d + a2->b * 0.0 + 0.0;
  *((double *)this + 1) = v6;
  v7 = a2->ty + v5 * a2->d + a2->b * 0.0;
  *((double *)this + 2) = v7;
  v8 = *((double *)this + 4);
  v9 = a2->ty + *((double *)this + 3) * a2->d + a2->b * 0.0;
  *((double *)this + 3) = v9;
  v10 = a2->ty + v8 * a2->d + a2->b * 0.0;
  *((double *)this + 4) = v10;
  v11 = vaddq_f64(vaddq_f64(*(float64x2_t *)&a2->a, *(float64x2_t *)&a2->c), *(float64x2_t *)&a2->tx);
  *(float64x2_t *)((char *)this + 40) = v11;
  if (v11.f64[1] < 0.0)
  {
    *((double *)this + 1) = -v6;
    *((double *)this + 2) = -v7;
    *((double *)this + 3) = -v9;
    *((double *)this + 4) = -v10;
  }
  return this;
}

uint64_t TTenuousComponentFont::IsAppleColorEmojiUI(TTenuousComponentFont *this)
{
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 848))(this) & 1) != 0)
    return 0;
  if ((*((_DWORD *)this + 46) & 0x200) == 0)
    TBaseFont::DetermineFontFlags(this, 512);
  return (*((_DWORD *)this + 45) >> 9) & 1;
}

double TComponentFont::GetOpticalLeading(TComponentFont *this, double a2, double a3)
{
  const __CFDictionary *v6;
  const __CFNumber *Value;
  double valuePtr;

  if ((*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 840))(this))
  {
    v6 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
    if (!v6)
      return InterpolateOpticalValue(a2, a3, *((double *)this + 75), *((double *)this + 76), *((double *)this + 83), *((double *)this + 82));
    Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("lineSpacingOverride"));
    if (!Value)
      return InterpolateOpticalValue(a2, a3, *((double *)this + 75), *((double *)this + 76), *((double *)this + 83), *((double *)this + 82));
    valuePtr = NAN;
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    if (valuePtr <= 0.0)
      return InterpolateOpticalValue(a2, a3, *((double *)this + 75), *((double *)this + 76), *((double *)this + 83), *((double *)this + 82));
  }
  return a3;
}

double InterpolateOpticalValue(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v7;

  if (a3 - a1 > -0.01 && a3 - a1 < 0.01)
  {
    if (a4 == 0.0)
      return a2;
    return a4;
  }
  if (a6 == 0.0)
    return a4;
  if (a6 - a4 > -0.01 && a6 - a4 < 0.01)
    return a6;
  if (a4 != 0.0)
    a2 = a4;
  v7 = 0.0;
  if (a3 != a5)
    v7 = (a1 - a3) / (a5 - a3);
  return std::__lerp[abi:nn180100]<double>(a2, a6, v7);
}

double TBaseFont::GetUnscaledTrackAmount(TBaseFont *this, const __CFDictionary *a2, double a3, const __CFData *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v10;
  CFTypeID v11;
  double v12;
  TAATTrakTable *v13;
  double v15;
  id v16;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v16, this, 1953653099);
  if (atomic_load((unint64_t *)&v16))
  {
    v15 = 0.0;
    if (a2)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("NSCTFontTrackAttribute"));
      if (Value)
      {
        v10 = Value;
        v11 = CFGetTypeID(Value);
        if (v11 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v10, kCFNumberDoubleType, &v15);
LABEL_12:
          v13 = (TAATTrakTable *)atomic_load((unint64_t *)&v16);
          v12 = TAATTrakTable::UnscaledTrackAmountForSize(v13, a4, a3, v15);
          goto LABEL_13;
        }
      }
    }
    else if (((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 848))(this) & 1) == 0)
    {
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 848))(this))
    {
      if (qword_1EDD17208 != -1)
        dispatch_once_f(&qword_1EDD17208, 0, (dispatch_function_t)TBaseFont::GetUnscaledTrackAmount(__CFDictionary const*,double,BOOL,unsigned int)const::$_0::__invoke);
      *(_QWORD *)&v15 = qword_1EDD17210;
    }
    goto LABEL_12;
  }
  v12 = 0.0;
LABEL_13:

  return v12;
}

double TComponentFont::GetUnscaledTrackAmount(TComponentFont *this, const __CFDictionary *a2, double a3, const __CFData *a4, unsigned int a5)
{
  double v10;

  if (!(*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 840))(this))
    return TBaseFont::GetUnscaledTrackAmount(this, a2, a3, a4);
  v10 = *((double *)this + 78);
  if (v10 == 0.0)
    return TBaseFont::GetUnscaledTrackAmount(this, a2, a3, a4);
  else
    return InterpolateOpticalValue(a3, 0.0, *((double *)this + 75), v10, *((double *)this + 85), *((double *)this + 82))
         * (double)a5
         / 1000.0;
}

BOOL GetGlyphAdvancesForStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6, int a7)
{
  uint64_t v8;
  __int128 v9;
  char *v11;
  char *v12;
  uint64_t v13;
  char **v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _OWORD v19[30];
  _OWORD *v20;
  uint64_t v21;

  v8 = a5;
  v21 = *MEMORY[0x1E0C80C00];
  if (a7 == 2)
    return (CGFontGetGlyphAdvancesForStyle() & 1) != 0;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[28] = v9;
  v19[29] = v9;
  v19[26] = v9;
  v19[27] = v9;
  v19[24] = v9;
  v19[25] = v9;
  v19[22] = v9;
  v19[23] = v9;
  v19[20] = v9;
  v19[21] = v9;
  v19[18] = v9;
  v19[19] = v9;
  v19[16] = v9;
  v19[17] = v9;
  v19[15] = v9;
  v19[14] = v9;
  v19[13] = v9;
  v19[12] = v9;
  v19[11] = v9;
  v19[10] = v9;
  v19[9] = v9;
  v19[8] = v9;
  v19[7] = v9;
  v19[6] = v9;
  v19[4] = v9;
  v19[5] = v9;
  v19[2] = v9;
  v19[3] = v9;
  v19[0] = v9;
  v19[1] = v9;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = v19;
  if (a5)
  {
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100](&v16, a5);
    v11 = (char *)v17;
    bzero(v17, 16 * v8);
    v17 = &v11[16 * v8];
    if ((CGFontGetGlyphAdvancesForStyle() & 1) != 0)
    {
      if (v8 >= 1)
      {
        v12 = v16;
        do
        {
          v13 = *(_QWORD *)v12;
          v12 += 16;
          *a6 = v13;
          a6 += a7;
          --v8;
        }
        while (v8);
      }
      goto LABEL_11;
    }
  }
  else if ((CGFontGetGlyphAdvancesForStyle() & 1) != 0)
  {
LABEL_11:
    v15 = &v16;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v15);
    return 1;
  }
  v15 = &v16;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v15);
  return 0;
}

double TBaseFont::GetOpticalLeading(TBaseFont *this, double a2, double a3)
{
  return a3;
}

uint64_t TBaseFont::IsAppleColorEmojiUI(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x200) == 0)
    TBaseFont::DetermineFontFlags(this, 512);
  return (*((_DWORD *)this + 45) >> 9) & 1;
}

uint64_t TLine::GetRightPartialHangingGlyphCountAndWidth(TLine *this, const unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  TRun *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t RightPartialHangingGlyphCountAndWidth;

  v4 = 0;
  v5 = (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
  v6 = 0.0;
  do
  {
    v7 = v5 - 1;
    if (v5 < 1)
      break;
    v8 = *(TRun **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5 - 8) + 40);
    v9 = *((_QWORD *)v8 + 26);
    if (*(double *)&a2 == 0.0)
    {
      v11 = (id *)*((_QWORD *)v8 + 21);
      LOBYTE(v10) = v11 ? TParagraphStyle::GetLineBoundsOptions(v11, a2) : 0;
    }
    else
    {
      v10 = *a2;
    }
    RightPartialHangingGlyphCountAndWidth = TRun::GetRightPartialHangingGlyphCountAndWidth(v8, v9 - 1, v10, *(const TCharStream **)this);
    v4 += RightPartialHangingGlyphCountAndWidth;
    v6 = v6 + *(double *)&a2;
    v5 = v7;
  }
  while (RightPartialHangingGlyphCountAndWidth >= v9);
  return v4;
}

uint64_t TSplicedFont::GetFontMatrix(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 168))(v2);
}

uint64_t TBaseFont::IsSystemUI(TBaseFont *this)
{
  return 0;
}

uint64_t TSplicedFont::GetGraphicsFont(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 568))(v2);
}

CGFloat TSplicedFontDict::GetMaxAdvance(TSplicedFontDict *this, double a2, const CGAffineTransform *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;

  v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v4)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FontMetrics"));
    if (Value)
    {
      v7 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v8 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("advanceMax"));
        if (v8)
          return a3->tx + a3->c * 0.0 + a3->a * CFStringGetDoubleValue(v8);
      }
    }
  }
  return a2;
}

uint64_t TDelegateRun::FindBreak@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t result;

  *(_OWORD *)a5 = xmmword_18494F928;
  *(_QWORD *)(a5 + 16) = -1;
  result = TRun::FindBreak(a1, a2, a3, a4, a5, a6);
  *(_BYTE *)a5 |= 8u;
  return result;
}

double TAttributes::GetOriginalValueOf(TAttributes *this, const __CFString *a2)
{
  const __CFDictionary *v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  double valuePtr;

  valuePtr = 0.0;
  v2 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  Value = (const __CFNumber *)CFDictionaryGetValue(v2, a2);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID() || v5 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    }
    else if (v5 == CFStringGetTypeID())
    {
      return CFStringGetDoubleValue((CFStringRef)v4);
    }
  }
  return valuePtr;
}

uint64_t TRun::GetLeftWhitespaceGlyphCountAndWidth(TRun *this)
{
  double *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *i;
  int v13;
  double *v15;

  v1 = (double *)MEMORY[0x1E0C9D820];
  if (*((_QWORD *)this + 39))
    v1 = (double *)*((_QWORD *)this + 39);
  v2 = *((_QWORD *)this + 26);
  v3 = (_QWORD *)*((_QWORD *)this + 27);
  v4 = v3[4];
  if (v4 || (v8 = v3[3]) == 0)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 25);
    v7 = (double *)(v4 + 16 * v6);
  }
  else
  {
    v6 = *((_QWORD *)this + 25);
    v7 = (double *)(v8 + 8 * v6);
    v5 = 1;
  }
  v9 = *v1;
  if (v2 < 1)
    return 0;
  v10 = 0;
  v11 = v3[5] + 4 * v6;
  for (i = v7; ; i += 2)
  {
    v13 = *(_DWORD *)(v11 + 4 * v10);
    if ((v13 & 0x20) == 0
      && (*(_DWORD *)(v11 + 4 * v10) & 5) != 1
      && ((v13 & 0x1040) == 0 || (*((_BYTE *)this + 224) & 1) == 0))
    {
      break;
    }
    if (v5)
      v15 = v7;
    else
      v15 = i;
    v9 = v9 + *v15;
    ++v10;
    ++v7;
    if (v2 == v10)
      return *((_QWORD *)this + 26);
  }
  return v10;
}

uint64_t TSplicedFont::GetUnscaledTrackAmount(TSplicedFont *this, const __CFDictionary *a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v9 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v10 = atomic_load((unint64_t *)(v9 + 32));
  return (*(uint64_t (**)(unint64_t, const __CFDictionary *, uint64_t, uint64_t, double))(*(_QWORD *)v10 + 552))(v10, a2, a4, a5, a3);
}

const __CFNumber *CustomRatioFromAttributes(const __CFDictionary *a1)
{
  const __CFNumber *result;
  const __CFNumber *v2;
  CFTypeID v3;
  double DoubleValue;
  uint64_t valuePtr;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("NSTextScaleRatio"));
  if (result)
  {
    v2 = result;
    valuePtr = -1;
    v3 = CFGetTypeID(result);
    if (v3 == CFNumberGetTypeID() || v3 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v2, kCFNumberDoubleType, &valuePtr);
      DoubleValue = *(double *)&valuePtr;
    }
    else
    {
      if (v3 != CFStringGetTypeID())
        return 0;
      DoubleValue = CFStringGetDoubleValue((CFStringRef)v2);
    }
    if (DoubleValue < 0.0)
      DoubleValue = 0.0;
    return *(const __CFNumber **)&DoubleValue;
  }
  return result;
}

BOOL TShapingEngine::ShapeGlyphs(uint64_t a1, int a2, __CFString *this, uint64_t a4, uint64_t a5)
{
  __CFString *v9;
  unint64_t InitialScriptAndLangSys;
  uint64_t v11;
  int v13;
  CFIndex v14;
  CFIndex v15;
  char v16;
  CFIndex location;
  uint64_t v19;
  uint64_t v20;
  char v21;
  CFRange v22;
  uint64_t __b[93];

  __b[91] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v9 = *(__CFString **)(a1 + 616);
  if (a2 == 2 || a2 == 3 && (FontRequiresOpenTypeShaping(*(const TFont **)(a1 + 616)) & 1) != 0)
  {
    InitialScriptAndLangSys = TOpenTypeMorph::GetInitialScriptAndLangSys(this, v9, (const TFont *)this);
    v11 = InitialScriptAndLangSys;
    if (*(_BYTE *)(a4 + 8))
    {
      *(_QWORD *)a4 = InitialScriptAndLangSys;
    }
    else
    {
      *(_QWORD *)a4 = InitialScriptAndLangSys;
      *(_BYTE *)(a4 + 8) = 1;
    }
    v14 = *(_QWORD *)(a1 + 40);
    if (v14 == -1)
    {
      TRunGlue::ComputeEndIndex((_QWORD *)a1);
      v14 = *(_QWORD *)(a1 + 40);
    }
    v20 = *(_QWORD *)(a1 + 48);
    v15 = v20 + v14;
    v22.location = v14;
    v16 = 1;
    location = v14;
    do
    {
      v22.length = v15 - location;
      memset(__b, 170, 0x2D8uLL);
      TOpenTypeMorph::TOpenTypeMorph(__b, a1, a5, v11, &v22);
      if (__b[68])
      {
        v21 = 0;
        v16 = TOpenTypeMorph::ShapeGlyphs((uint64_t)__b, (uint64_t)&v21);
      }
      v22.location += v22.length;
      location = v22.location;
      std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&__b[4]);
      v13 = v16 & 1;
    }
    while (location < v15 && v13 != 0);
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v20;
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = v19;
  }
  else
  {
    memset(__b, 170, 0x2A0uLL);
    TAATMorphTableMorx::TAATMorphTableMorx((TAATMorphTableMorx *)__b, (TRunGlue *)a1);
    if (__b[5])
    {
      LOBYTE(v22.location) = 0;
      v13 = TAATMorphTable::ShapeGlyphs(__b, &v22, (CFIndex)this);
    }
    else
    {
      v13 = 1;
    }
    __b[0] = (uint64_t)off_1E15DDB28;
    __b[8] = (uint64_t)off_1E15DDAE8;
    v22.location = (CFIndex)&__b[32];
    std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v22);
  }
  TRunGlue::UpdateAdvancesIfNeeded((TRunGlue *)a1);
  return v13 != 0;
}

void TRunGlue::UpdateAdvancesIfNeeded(TRunGlue *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  TAttributes *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t RenderingStyle;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;

  *((_WORD *)this + 316) = 256;
  if (*((_BYTE *)this + 592))
  {
    *((_BYTE *)this + 592) = 0;
    if (*((_QWORD *)this + 19))
    {
      if (*((uint64_t *)this + 2) >= 1)
      {
        v2 = 0;
        do
        {
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * (v2 + *((_QWORD *)this + 1))) + 48);
          v4 = v3 + 192;
          v5 = (TAttributes *)(v3 + 40);
          v6 = atomic_load((unint64_t *)(v3 + 56));
          v7 = *(_QWORD *)(v6 + 40);
          RenderingStyle = TAttributes::GetRenderingStyle(v5);
          TStorageRange::UpdateAdvances(v4, v7, RenderingStyle);
          ++v2;
        }
        while (v2 < *((_QWORD *)this + 2));
      }
    }
    else
    {
      v9 = *((_QWORD *)this + 77);
      v10 = *((_QWORD *)this + 22);
      v11 = (double *)*((_QWORD *)this + 23);
      v12 = TRunGlue::length(this);
      TFont::GetUnsummedAdvancesForGlyphs(v9, v10, v11, 2, v12, 0, 0);
    }
  }
}

uint64_t TOpenTypeMorph::ShapeGlyphs(uint64_t a1, uint64_t a2)
{
  TRunGlue **v2;
  _BYTE *v3;
  _BYTE *v4;
  TRunGlue **v5;
  TRunGlue *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  const OTL::GSUB *v12;
  unint64_t v13;
  _BOOL4 SingleSubstLookups;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unsigned int v21;
  TRunGlue *v22;
  int v23;
  __int128 v24;
  __int128 *v25;
  unint64_t Lookups;
  void **v27;
  void **v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  BengaliShapingEngine *v32;
  const TCharStream *v33;
  TOpenTypeMorph *v34;
  TRunGlue *v35;
  uint64_t *StaticClassTable;
  TRunGlue *v37;
  char *v38;
  unsigned __int16 *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  DevanagariShapingEngine *v46;
  const TCharStream *v47;
  TOpenTypeMorph *v48;
  TRunGlue *v49;
  uint64_t *v50;
  TRunGlue *v51;
  char *v52;
  unsigned __int16 *v53;
  char *v54;
  GujaratiShapingEngine *v55;
  const TCharStream *v56;
  TOpenTypeMorph *v57;
  TRunGlue *v58;
  uint64_t *v59;
  TRunGlue *v60;
  char *v61;
  unsigned __int16 *v62;
  char *v63;
  GurmukhiShapingEngine *v64;
  const TCharStream *v65;
  TOpenTypeMorph *v66;
  TRunGlue *v67;
  uint64_t *v68;
  TRunGlue *v69;
  char *v70;
  unsigned __int16 *v71;
  char *v72;
  TRunGlue *v73;
  char v74;
  KannadaShapingEngine *v75;
  const TCharStream *v76;
  TOpenTypeMorph *v77;
  TRunGlue *v78;
  uint64_t *v79;
  TRunGlue *v80;
  char *v81;
  unsigned __int16 *v82;
  char *v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned __int16 *v88;
  char *v89;
  void **v90;
  char *v91;
  __int128 v92;
  MalayalamShapingEngine *v93;
  const TCharStream *v94;
  TOpenTypeMorph *v95;
  TRunGlue *v96;
  uint64_t *v97;
  TRunGlue *v98;
  char *v99;
  unsigned __int16 *v100;
  char *v101;
  TRunGlue *v102;
  OriyaShapingEngine *v103;
  const TCharStream *v104;
  TOpenTypeMorph *v105;
  TRunGlue *v106;
  uint64_t *v107;
  TRunGlue *v108;
  char *v109;
  unsigned __int16 *v110;
  char *v111;
  TamilShapingEngine *v112;
  const TCharStream *v113;
  TOpenTypeMorph *v114;
  TRunGlue *v115;
  uint64_t *v116;
  TRunGlue *v117;
  char *v118;
  unsigned __int16 *v119;
  char *v120;
  TeluguShapingEngine *v121;
  const TCharStream *v122;
  TOpenTypeMorph *v123;
  TRunGlue *v124;
  uint64_t *v125;
  TRunGlue *v126;
  char *v127;
  unsigned __int16 *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  TRunGlue *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  int v152;
  char *v153;
  char *v154;
  void **v155;
  char *v156;
  int v157;
  char *v158;
  __int128 v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  void **v172;
  unsigned __int16 *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  unsigned int *v180;
  unsigned int *v181;
  uint64_t v182;
  void **v183;
  unint64_t v184;
  uint64_t v185;
  TRunGlue *v186;
  unint64_t v188;
  const OTL::GSUB *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  TRunGlue **v193;
  BOOL v194;
  void *__p;
  char *v196;
  char *v197;
  _QWORD v198[2];
  uint64_t (*v199)(KhmerShapingEngine *);
  unsigned int v200[8];
  __int128 v201;
  __int128 v202;
  void **v203;
  void **v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 *v215;
  void **v216;
  void **v217;
  void **v218;
  _OWORD v219[7];
  unint64_t v220;
  _OWORD *v221;
  __int128 v222;
  void **p_p;
  uint64_t (**v224)(KhmerShapingEngine *);
  char *v225;
  char *v226;
  uint64_t v227;
  _BYTE v228[3120];
  _BYTE *v229;
  _QWORD v230[3];
  _QWORD *v231;
  __int128 v232;
  _BYTE __b[3144];
  _BYTE *v234;
  uint64_t v235;

  v2 = (TRunGlue **)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v235 = *MEMORY[0x1E0C80C00];
  v6 = *v2;
  v230[0] = &off_1E15E01C0;
  v231 = v230;
  TRunGlue::GlyphRangeByTrimming(v6, (uint64_t)v230);
  v8 = v7;
  v9 = v231;
  if (v231 == v230)
  {
    v10 = 4;
    v9 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  if (v8 < 1)
    return 1;
  v190 = *((_QWORD *)*v5 + 13);
  *((_QWORD *)*v5 + 13) = v5 + 4;
  memset(v228, 170, sizeof(v228));
  v226 = 0;
  v227 = 0;
  v225 = 0;
  v229 = v228;
  v201 = 0u;
  v202 = 0u;
  memset(v200, 0, sizeof(v200));
  v197 = 0;
  v198[0] = 0xAAAAAAAAAAAAAAAALL;
  __p = 0;
  v196 = 0;
  v198[1] = v198;
  v199 = 0;
  v194 = 0;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v212 = v11;
  v211 = v11;
  v210 = v11;
  v209 = v11;
  v208 = v11;
  v207 = v11;
  v206 = v11;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v12 = (const OTL::GSUB *)(v5 + 80);
  LODWORD(v222) = 1920365166;
  *(_QWORD *)&v213 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v213 + 1) = &v206;
  v13 = (unint64_t)v5;
  OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)__b, &v222, (_DWORD *)&v222 + 1);
  SingleSubstLookups = OTL::GSUB::GetSingleSubstLookups(v5 + 80, (uint64_t)__b, (uint64_t)&v203);
  v216 = (void **)__b;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
  if (SingleSubstLookups)
  {
    v15 = v4;
    memset(&__b[24], 170, 0xC30uLL);
    memset(__b, 0, 24);
    v234 = &__b[24];
    v16 = v13;
    v17 = TRunGlue::length(*(TRunGlue **)v13);
    v18 = v203;
    v19 = v204;
    if (v203 != v204)
    {
      v20 = v17;
      do
      {
        v21 = *(_DWORD *)v18;
        v18 = (void **)((char *)v18 + 4);
        v13 = v13 & 0xFFFFFFFF00000000 | v21;
        OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)__b, v13, 0, v20);
      }
      while (v18 != v19);
    }
    v13 = v16;
    v22 = *(TRunGlue **)v16;
    v23 = *(_DWORD *)(v16 + 16);
    v4 = v15;
    OTL::GSUB::ApplyLookups(v12, v22, v23, (unsigned __int16 **)__b, v15, 0, 0);
    v216 = (void **)__b;
    std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
  }
  *(_QWORD *)__b = &v203;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__b);
  v222 = xmmword_184948840;
  v232 = xmmword_184948850;
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v212 = v24;
  v211 = v24;
  v210 = v24;
  v209 = v24;
  v208 = v24;
  v207 = v24;
  v206 = v24;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  if (*(int *)(v13 + 16) <= 0)
    v25 = &v232;
  else
    v25 = &v222;
  *(_QWORD *)&v213 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v213 + 1) = &v206;
  OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)__b, v25, (_DWORD *)v25 + 4);
  Lookups = OTL::GCommon::GetLookups((uint64_t)v12, (uint64_t)__b, (uint64_t)&v203, 0);
  v216 = (void **)__b;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
  if ((_DWORD)Lookups)
  {
    v27 = v203;
    v28 = v204;
    while (v27 != v28)
    {
      v29 = *(_DWORD *)v27;
      v27 = (void **)((char *)v27 + 4);
      Lookups = Lookups & 0xFFFFFFFF00000000 | v29;
      OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)&v225, Lookups, 0, -1);
    }
  }
  v30 = *(_DWORD *)(v13 + 24);
  if (!*(_BYTE *)(v13 + 21))
  {
    v31 = (unint64_t)v4;
    if (v30 == 2)
    {
LABEL_31:
      v44 = *(_QWORD *)(v13 + 552);
      *(_QWORD *)&__b[16] = *(_QWORD *)v13;
      *(_QWORD *)&__b[24] = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)__b = &off_1E15DDC10;
      *(_QWORD *)&__b[8] = v44;
      *(_BYTE *)v31 |= ArabicShapingEngine::ApplyScriptShaping((ArabicShapingEngine *)__b, v12, (OTL::GlyphLookups *)&v225, v200, &v194);
      v45 = TOpenTypeMorph::ApplyShapingEngine<TInlineVector<unsigned int,1ul>>(OTL::GlyphLookups &,unsigned int *,BOOL (**),TInlineVector<unsigned int,1ul> &,SyncState &,BOOL *)::{lambda#1}::__invoke;
LABEL_32:
      v199 = (uint64_t (*)(KhmerShapingEngine *))v45;
    }
    else if (v30 == 34)
    {
LABEL_30:
      v43 = *(_QWORD *)(v13 + 552);
      *(_QWORD *)&__b[16] = *(_QWORD *)v13;
      *(_QWORD *)&__b[24] = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)__b = &off_1E15DDC40;
      *(_QWORD *)&__b[8] = v43;
      *(_BYTE *)v31 |= JoiningScriptShapingEngine::ApplyScriptShaping((JoiningScriptShapingEngine *)__b, v12, (OTL::GlyphLookups *)&v225, &v194);
    }
    goto LABEL_147;
  }
  v31 = (unint64_t)v4;
  switch(v30)
  {
    case 2:
      goto LABEL_31;
    case 3:
    case 6:
    case 8:
    case 12:
    case 14:
    case 19:
    case 25:
    case 29:
    case 32:
      goto LABEL_147;
    case 4:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v32 = (BengaliShapingEngine *)memset(__b, 170, 0x380uLL);
      v33 = *(const TCharStream **)(v13 + 552);
      v34 = (TOpenTypeMorph *)v13;
      v35 = *(TRunGlue **)v13;
      StaticClassTable = BengaliShapingEngine::GetStaticClassTable(v32);
      v37 = v35;
      v13 = (unint64_t)v34;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v33, v37, (const IndicClassTable *)StaticClassTable, v12);
      *(_QWORD *)__b = &off_1E15DDDE0;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v34, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v39 = (unsigned __int16 *)v225;
      v38 = v226;
      if (v226 != v225)
      {
        do
        {
          v40 = v38 - 104;
          v216 = (void **)(v38 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v38 = v40;
        }
        while (v40 != (char *)v39);
      }
      v226 = (char *)v39;
      TOpenTypeMorph::SetInitLookups((TOpenTypeMorph *)v13, (OTL::GlyphLookups *)&v225);
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 10:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v46 = (DevanagariShapingEngine *)memset(__b, 170, 0x380uLL);
      v47 = *(const TCharStream **)(v13 + 552);
      v48 = (TOpenTypeMorph *)v13;
      v49 = *(TRunGlue **)v13;
      v50 = DevanagariShapingEngine::GetStaticClassTable(v46);
      v51 = v49;
      v13 = (unint64_t)v48;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v47, v51, (const IndicClassTable *)v50, v12);
      *(_QWORD *)__b = &off_1E15DE490;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v48, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v53 = (unsigned __int16 *)v225;
      v52 = v226;
      if (v226 != v225)
      {
        do
        {
          v54 = v52 - 104;
          v216 = (void **)(v52 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v52 = v54;
        }
        while (v54 != (char *)v53);
      }
      v226 = (char *)v53;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 15:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v55 = (GujaratiShapingEngine *)memset(__b, 170, 0x380uLL);
      v56 = *(const TCharStream **)(v13 + 552);
      v57 = (TOpenTypeMorph *)v13;
      v58 = *(TRunGlue **)v13;
      v59 = GujaratiShapingEngine::GetStaticClassTable(v55);
      v60 = v58;
      v13 = (unint64_t)v57;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v56, v60, (const IndicClassTable *)v59, v12);
      *(_QWORD *)__b = &off_1E15DDE30;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v57, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v62 = (unsigned __int16 *)v225;
      v61 = v226;
      if (v226 != v225)
      {
        do
        {
          v63 = v61 - 104;
          v216 = (void **)(v61 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v61 = v63;
        }
        while (v63 != (char *)v62);
      }
      v226 = (char *)v62;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 16:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v64 = (GurmukhiShapingEngine *)memset(__b, 170, 0x380uLL);
      v65 = *(const TCharStream **)(v13 + 552);
      v66 = (TOpenTypeMorph *)v13;
      v67 = *(TRunGlue **)v13;
      v68 = GurmukhiShapingEngine::GetStaticClassTable(v64);
      v69 = v67;
      v13 = (unint64_t)v66;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v65, v69, (const IndicClassTable *)v68, v12);
      *(_QWORD *)__b = &off_1E15DDE58;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v66, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v71 = (unsigned __int16 *)v225;
      v70 = v226;
      if (v226 != v225)
      {
        do
        {
          v72 = v70 - 104;
          v216 = (void **)(v70 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v70 = v72;
        }
        while (v72 != (char *)v71);
      }
      v226 = (char *)v71;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 17:
    case 54:
      goto LABEL_120;
    case 18:
      if (*(_QWORD *)(v13 + 552))
      {
        v73 = *(TRunGlue **)v13;
        *(_QWORD *)__b = *(_QWORD *)(v13 + 552);
        *(_QWORD *)&__b[8] = v73;
        if ((*((_DWORD *)v73 + 6) & 0x80000000) != 0)
          v74 = 0;
        else
          v74 = HangulShapingEngine::SetFeatures((HangulShapingEngine *)__b, v12, (OTL::GlyphLookups *)&v225);
        *v4 |= v74;
      }
LABEL_120:
      v141 = v196;
      if (v196 >= v197)
      {
        v143 = (char *)__p;
        v144 = (v196 - (_BYTE *)__p) >> 2;
        v145 = v144 + 1;
        if (!((unint64_t)(v144 + 1) >> 62))
        {
          v146 = v197 - (_BYTE *)__p;
          if ((v197 - (_BYTE *)__p) >> 1 > v145)
            v145 = v146 >> 1;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
            v147 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          *(_QWORD *)&__b[32] = v198;
          if (v147)
          {
            v148 = (char *)TInlineBufferAllocator<unsigned int,1ul>::allocate((uint64_t)v198, v147);
            v143 = (char *)__p;
            v141 = v196;
          }
          else
          {
            v148 = 0;
          }
          v149 = &v148[4 * v144];
          *(_DWORD *)v149 = 1667329140;
          if (v141 == v143)
          {
            v151 = &v148[4 * v144];
          }
          else
          {
            v150 = v141;
            v151 = &v148[4 * v144];
            do
            {
              v152 = *((_DWORD *)v150 - 1);
              v150 -= 4;
              *((_DWORD *)v151 - 1) = v152;
              v151 -= 4;
            }
            while (v150 != v143);
          }
          v142 = v149 + 4;
          __p = v151;
          v196 = v149 + 4;
          v153 = v197;
          v197 = &v148[4 * v147];
          *(_QWORD *)&__b[16] = v141;
          *(_QWORD *)&__b[24] = v153;
          *(_QWORD *)__b = v143;
          *(_QWORD *)&__b[8] = v143;
          std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,1ul> &>::~__split_buffer((uint64_t)__b);
          goto LABEL_137;
        }
LABEL_186:
        abort();
      }
      *(_DWORD *)v196 = 1667329140;
      v142 = v141 + 4;
LABEL_137:
      v196 = v142;
LABEL_147:
      *(_QWORD *)__b = &v203;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__b);
      if (*(_QWORD *)(v13 + 688))
      {
        *(_QWORD *)&v222 = v13;
        *((_QWORD *)&v222 + 1) = v200;
        p_p = &__p;
        v224 = &v199;
        v192 = *(_QWORD *)(*(_QWORD *)v13 + 16);
        v189 = v12;
        if (v192 > 1)
        {
          v188 = v31;
          v191 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          v220 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v168 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v168 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v219[6] = v168;
          v219[5] = v168;
          v219[4] = v168;
          v219[3] = v168;
          v219[2] = v168;
          v219[1] = v168;
          v219[0] = v168;
          v217 = 0;
          v218 = 0;
          v216 = 0;
          v221 = v219;
          v214 = v168;
          v213 = v168;
          v212 = v168;
          v211 = v168;
          v210 = v168;
          v209 = v168;
          v208 = v168;
          v207 = v168;
          v206 = v168;
          v203 = 0;
          v204 = 0;
          v205 = 0;
          v215 = &v206;
          v193 = (TRunGlue **)v13;
          if (*(_DWORD *)(v13 + 24) != 2 && OTL::GCommon::GetFeatures(v12, (OTL::FeatureList *)&v203))
          {
            *(_QWORD *)&v169 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v169 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&__b[248] = v169;
            *(_OWORD *)&__b[232] = v169;
            *(_OWORD *)&__b[216] = v169;
            *(_OWORD *)&__b[200] = v169;
            *(_OWORD *)&__b[184] = v169;
            *(_OWORD *)&__b[168] = v169;
            *(_OWORD *)&__b[152] = v169;
            *(_OWORD *)&__b[136] = v169;
            *(_OWORD *)&__b[120] = v169;
            *(_OWORD *)&__b[104] = v169;
            *(_OWORD *)&__b[88] = v169;
            *(_OWORD *)&__b[72] = v169;
            *(_OWORD *)&__b[56] = v169;
            *(_OWORD *)&__b[40] = v169;
            *(_OWORD *)&__b[24] = v169;
            memset(__b, 0, 24);
            *(_QWORD *)&__b[264] = &__b[24];
            GetOTFeaturesForOptionalLigatures((uint64_t)&v203, (char **)__b);
            OTL::GCommon::GetLookups((uint64_t)v12, (uint64_t)__b, (uint64_t)&v216, 0);
            *(_QWORD *)&v232 = __b;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v232);
          }
          v170 = 0;
          v171 = 0;
          v172 = v216;
          v173 = (unsigned __int16 *)v217;
          do
          {
            v174 = *(_QWORD *)*v193;
            v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v174 + 16)
                                         + 8 * TRunGlue::PhysicalRunIndexFromLogical(*v193, v171 + v191))
                             + 48);
            v176 = atomic_load((unint64_t *)(v175 + 56));
            v177 = *(_QWORD *)(v176 + 40);
            v178 = *(_QWORD *)(v175 + 208);
            *(_QWORD *)&__b[136] = 0xAAAAAAAAAAAAAAAALL;
            *(_QWORD *)&v179 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v179 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&__b[104] = v179;
            *(_OWORD *)&__b[120] = v179;
            *(_OWORD *)&__b[72] = v179;
            *(_OWORD *)&__b[88] = v179;
            *(_OWORD *)&__b[40] = v179;
            *(_OWORD *)&__b[56] = v179;
            *(_OWORD *)&__b[24] = v179;
            memset(__b, 0, 24);
            *(_QWORD *)&__b[144] = &__b[24];
            if (TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_2::operator()((uint64_t *)&v222, v177 + 168, (uint64_t)__b))
            {
              v180 = *(unsigned int **)__b;
              v181 = *(unsigned int **)&__b[8];
              while (v180 != v181)
              {
                v182 = *v180;
                v183 = v172;
                if (v172 != (void **)v173)
                {
                  v183 = v172;
                  while (*(unsigned __int16 *)v183 != (unsigned __int16)v182)
                  {
                    v183 = (void **)((char *)v183 + 4);
                    if (v183 == (void **)v173)
                      goto LABEL_169;
                  }
                }
                if (v183 == (void **)v173)
                {
LABEL_169:
                  v13 = v13 & 0xFFFFFFFF00000000 | v182;
                  OTL::GlyphLookups::SetLookupInRange<true>((uint64_t *)&v225, v13, v170, v178);
                }
                else
                {
                  v31 = v31 & 0xFFFFFFFF00000000 | v182;
                  OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)&v225, v31, v170, v178);
                }
                ++v180;
              }
            }
            v170 += v178;
            *(_QWORD *)&v232 = __b;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v232);
            ++v171;
          }
          while (v171 != v192);
          *(_QWORD *)__b = &v203;
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__b);
          *(_QWORD *)__b = &v216;
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__b);
          v13 = (unint64_t)v193;
          v31 = v188;
          v167 = v190;
        }
        else
        {
          *(_QWORD *)&v159 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v159 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&__b[120] = v159;
          *(_OWORD *)&__b[104] = v159;
          *(_OWORD *)&__b[88] = v159;
          *(_OWORD *)&__b[72] = v159;
          *(_OWORD *)&__b[56] = v159;
          *(_OWORD *)&__b[40] = v159;
          *(_OWORD *)&__b[24] = v159;
          memset(__b, 0, 24);
          v160 = v13;
          v161 = *(_QWORD *)(v13 + 8) + 168;
          *(_QWORD *)&__b[136] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&__b[144] = &__b[24];
          if (TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_2::operator()((uint64_t *)&v222, v161, (uint64_t)__b))
          {
            v162 = TRunGlue::length(*(TRunGlue **)v13);
            v163 = *(unsigned int **)__b;
            v164 = *(unsigned int **)&__b[8];
            if (*(_QWORD *)__b != *(_QWORD *)&__b[8])
            {
              v165 = v162;
              do
              {
                v166 = *v163++;
                v13 = v13 & 0xFFFFFFFF00000000 | v166;
                OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)&v225, v13, 0, v165);
              }
              while (v163 != v164);
            }
          }
          v203 = (void **)__b;
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v203);
          v13 = v160;
          v167 = v190;
        }
        if (*(_DWORD *)(v13 + 24) != 2)
        {
          v184 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((v226 - v225) >> 3));
          if (v226 == v225)
            v185 = 0;
          else
            v185 = v184;
          std::__introsort<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*,false>((unsigned __int16 *)v225, (unsigned __int16 *)v226, v185, 1);
        }
        v42 = OTL::GSUB::ApplyLookups(v189, *(TRunGlue **)v13, *(_DWORD *)(v13 + 16), (unsigned __int16 **)&v225, (_BYTE *)v31, 0, 0);
        if (v194)
          JoiningScriptShapingEngine::FinishStretching(*(JoiningScriptShapingEngine **)(v13 + 552), *(const TCharStream **)v13, v186);
      }
      else
      {
        v42 = 1;
        v167 = v190;
      }
      *(_QWORD *)(*(_QWORD *)v13 + 104) = v167;
      if (__p)
      {
        v196 = (char *)__p;
        if (v198 > __p || (char *)v198 + 4 <= __p)
          operator delete(__p);
      }
      *(_QWORD *)__b = &v225;
      std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__b);
      return v42;
    case 21:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v75 = (KannadaShapingEngine *)memset(__b, 170, 0x380uLL);
      v76 = *(const TCharStream **)(v13 + 552);
      v77 = (TOpenTypeMorph *)v13;
      v78 = *(TRunGlue **)v13;
      v79 = KannadaShapingEngine::GetStaticClassTable(v75);
      v80 = v78;
      v13 = (unint64_t)v77;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v76, v80, (const IndicClassTable *)v79, v12);
      *(_QWORD *)__b = &off_1E15DDE08;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v77, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v82 = (unsigned __int16 *)v225;
      v81 = v226;
      if (v226 != v225)
      {
        do
        {
          v83 = v81 - 104;
          v216 = (void **)(v81 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v81 = v83;
        }
        while (v83 != (char *)v82);
      }
      v226 = (char *)v82;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 23:
      *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[464] = v84;
      *(_OWORD *)&__b[480] = v84;
      *(_OWORD *)&__b[432] = v84;
      *(_OWORD *)&__b[448] = v84;
      *(_OWORD *)&__b[400] = v84;
      *(_OWORD *)&__b[416] = v84;
      *(_OWORD *)&__b[368] = v84;
      *(_OWORD *)&__b[384] = v84;
      *(_OWORD *)&__b[336] = v84;
      *(_OWORD *)&__b[352] = v84;
      *(_OWORD *)&__b[304] = v84;
      *(_OWORD *)&__b[320] = v84;
      *(_OWORD *)&__b[272] = v84;
      *(_OWORD *)&__b[288] = v84;
      *(_OWORD *)&__b[240] = v84;
      *(_OWORD *)&__b[256] = v84;
      *(_OWORD *)&__b[208] = v84;
      *(_OWORD *)&__b[224] = v84;
      *(_OWORD *)&__b[176] = v84;
      *(_OWORD *)&__b[192] = v84;
      *(_OWORD *)&__b[144] = v84;
      *(_OWORD *)&__b[160] = v84;
      *(_OWORD *)&__b[112] = v84;
      *(_OWORD *)&__b[128] = v84;
      *(_OWORD *)&__b[80] = v84;
      *(_OWORD *)&__b[96] = v84;
      *(_OWORD *)&__b[48] = v84;
      *(_OWORD *)&__b[64] = v84;
      *(_OWORD *)&__b[16] = v84;
      *(_OWORD *)&__b[32] = v84;
      *(_OWORD *)__b = v84;
      OpenTypeShapingEngine::OpenTypeShapingEngine((OpenTypeShapingEngine *)__b, *(const TCharStream **)(v13 + 552), *(TRunGlue **)v13);
      *(_QWORD *)__b = &off_1E15DDA90;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups((TOpenTypeMorph *)v13, v200, (OTL::GlyphLookups *)&v225);
      v85 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((v226 - v225) >> 3));
      if (v226 == v225)
        v86 = 0;
      else
        v86 = v85;
      std::__introsort<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*,false>((unsigned __int16 *)v225, (unsigned __int16 *)v226, v86, 1);
      OTL::GSUB::ApplyLookups(v12, *(TRunGlue **)v13, *(_DWORD *)(v13 + 16), (unsigned __int16 **)&v225, v4, 0, 0);
      v88 = (unsigned __int16 *)v225;
      v87 = v226;
      if (v226 != v225)
      {
        do
        {
          v89 = v87 - 104;
          v216 = (void **)(v87 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v87 = v89;
        }
        while (v89 != (char *)v88);
      }
      v226 = (char *)v88;
      strcpy((char *)v200, "serpswlbsvbastspgilc");
      BYTE1(v200[5]) = 0;
      HIWORD(v200[5]) = 0;
      v199 = KhmerShapingEngine::IsRequiredPresentationFeature;
      v90 = (void **)v196;
      if (v196 >= v197)
      {
        v135 = (void **)__p;
        v136 = (v196 - (_BYTE *)__p) >> 2;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 62)
          goto LABEL_186;
        v138 = v197 - (_BYTE *)__p;
        if ((v197 - (_BYTE *)__p) >> 1 > v137)
          v137 = v138 >> 1;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
          v139 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        *((_QWORD *)&v219[0] + 1) = v198;
        if (v139)
        {
          v140 = (char *)TInlineBufferAllocator<unsigned int,1ul>::allocate((uint64_t)v198, v139);
          v135 = (void **)__p;
          v90 = (void **)v196;
        }
        else
        {
          v140 = 0;
        }
        v154 = &v140[4 * v136];
        *(_DWORD *)v154 = 1818847073;
        if (v90 == v135)
        {
          v156 = &v140[4 * v136];
        }
        else
        {
          v155 = v90;
          v156 = &v140[4 * v136];
          do
          {
            v157 = *((_DWORD *)v155 - 1);
            v155 = (void **)((char *)v155 - 4);
            *((_DWORD *)v156 - 1) = v157;
            v156 -= 4;
          }
          while (v155 != v135);
        }
        v91 = v154 + 4;
        __p = v156;
        v196 = v154 + 4;
        v158 = v197;
        v197 = &v140[4 * v139];
        v218 = v90;
        *(_QWORD *)&v219[0] = v158;
        v216 = v135;
        v217 = v135;
        std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,1ul> &>::~__split_buffer((uint64_t)&v216);
      }
      else
      {
        *(_DWORD *)v196 = 1818847073;
        v91 = (char *)v90 + 4;
      }
      v196 = v91;
LABEL_146:
      OpenTypeShapingEngine::~OpenTypeShapingEngine((OpenTypeShapingEngine *)__b);
      goto LABEL_147;
    case 24:
      *(_QWORD *)&v92 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v92 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[464] = v92;
      *(_OWORD *)&__b[480] = v92;
      *(_OWORD *)&__b[432] = v92;
      *(_OWORD *)&__b[448] = v92;
      *(_OWORD *)&__b[400] = v92;
      *(_OWORD *)&__b[416] = v92;
      *(_OWORD *)&__b[368] = v92;
      *(_OWORD *)&__b[384] = v92;
      *(_OWORD *)&__b[336] = v92;
      *(_OWORD *)&__b[352] = v92;
      *(_OWORD *)&__b[304] = v92;
      *(_OWORD *)&__b[320] = v92;
      *(_OWORD *)&__b[272] = v92;
      *(_OWORD *)&__b[288] = v92;
      *(_OWORD *)&__b[240] = v92;
      *(_OWORD *)&__b[256] = v92;
      *(_OWORD *)&__b[208] = v92;
      *(_OWORD *)&__b[224] = v92;
      *(_OWORD *)&__b[176] = v92;
      *(_OWORD *)&__b[192] = v92;
      *(_OWORD *)&__b[144] = v92;
      *(_OWORD *)&__b[160] = v92;
      *(_OWORD *)&__b[112] = v92;
      *(_OWORD *)&__b[128] = v92;
      *(_OWORD *)&__b[80] = v92;
      *(_OWORD *)&__b[96] = v92;
      *(_OWORD *)&__b[48] = v92;
      *(_OWORD *)&__b[64] = v92;
      *(_OWORD *)&__b[16] = v92;
      *(_OWORD *)&__b[32] = v92;
      *(_OWORD *)__b = v92;
      OpenTypeShapingEngine::OpenTypeShapingEngine((OpenTypeShapingEngine *)__b, *(const TCharStream **)(v13 + 552), *(TRunGlue **)v13);
      *(_QWORD *)__b = &off_1E15DD8D0;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      OpenTypeShapingEngine::~OpenTypeShapingEngine((OpenTypeShapingEngine *)__b);
      goto LABEL_105;
    case 26:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v93 = (MalayalamShapingEngine *)memset(__b, 170, 0x380uLL);
      v94 = *(const TCharStream **)(v13 + 552);
      v95 = (TOpenTypeMorph *)v13;
      v96 = *(TRunGlue **)v13;
      v97 = MalayalamShapingEngine::GetStaticClassTable(v93);
      v98 = v96;
      v13 = (unint64_t)v95;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v94, v98, (const IndicClassTable *)v97, v12);
      *(_QWORD *)__b = &off_1E15DE3D8;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v95, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v100 = (unsigned __int16 *)v225;
      v99 = v226;
      if (v226 != v225)
      {
        do
        {
          v101 = v99 - 104;
          v216 = (void **)(v99 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v99 = v101;
        }
        while (v101 != (char *)v100);
      }
      v226 = (char *)v100;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 28:
      if (*(_QWORD *)(v13 + 552) && *(_DWORD *)(v13 + 716))
      {
        v102 = *(TRunGlue **)v13;
        *(_QWORD *)__b = *(_QWORD *)(v13 + 552);
        *(_QWORD *)&__b[8] = v102;
        *v4 |= MyanmarShapingEngine::ApplyScriptShaping((MyanmarShapingEngine *)__b, v12, (OTL::GlyphLookups *)&v225);
        strcpy((char *)v200, "serpsvbaswlbstsp");
        BYTE1(v200[4]) = 0;
        HIWORD(v200[4]) = 0;
        goto LABEL_147;
      }
      strcpy((char *)v200, "gilcagil");
      BYTE1(v200[2]) = 0;
      HIWORD(v200[2]) = 0;
      v45 = TOpenTypeMorph::ApplyShapingEngine<TInlineVector<unsigned int,1ul>>(OTL::GlyphLookups &,unsigned int *,BOOL (**),TInlineVector<unsigned int,1ul> &,SyncState &,BOOL *)::{lambda#2}::__invoke;
      goto LABEL_32;
    case 31:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v103 = (OriyaShapingEngine *)memset(__b, 170, 0x380uLL);
      v104 = *(const TCharStream **)(v13 + 552);
      v105 = (TOpenTypeMorph *)v13;
      v106 = *(TRunGlue **)v13;
      v107 = OriyaShapingEngine::GetStaticClassTable(v103);
      v108 = v106;
      v13 = (unint64_t)v105;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v104, v108, (const IndicClassTable *)v107, v12);
      *(_QWORD *)__b = &off_1E15DDAC0;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v105, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v110 = (unsigned __int16 *)v225;
      v109 = v226;
      if (v226 != v225)
      {
        do
        {
          v111 = v109 - 104;
          v216 = (void **)(v109 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v109 = v111;
        }
        while (v111 != (char *)v110);
      }
      v226 = (char *)v110;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 34:
      goto LABEL_30;
    case 35:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v112 = (TamilShapingEngine *)memset(__b, 170, 0x380uLL);
      v113 = *(const TCharStream **)(v13 + 552);
      v114 = (TOpenTypeMorph *)v13;
      v115 = *(TRunGlue **)v13;
      v116 = TamilShapingEngine::GetStaticClassTable(v112);
      v117 = v115;
      v13 = (unint64_t)v114;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v113, v117, (const IndicClassTable *)v116, v12);
      *(_QWORD *)__b = &off_1E15DDBE8;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v114, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v119 = (unsigned __int16 *)v225;
      v118 = v226;
      if (v226 != v225)
      {
        do
        {
          v120 = v118 - 104;
          v216 = (void **)(v118 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v118 = v120;
        }
        while (v120 != (char *)v119);
      }
      v226 = (char *)v119;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
      goto LABEL_102;
    case 36:
      if (((*(_DWORD *)(v13 + 716) << 24) - 956301313) > 0xF9FFFFFE || *(int *)(v13 + 16) < 1)
        goto LABEL_105;
      v121 = (TeluguShapingEngine *)memset(__b, 170, 0x380uLL);
      v122 = *(const TCharStream **)(v13 + 552);
      v123 = (TOpenTypeMorph *)v13;
      v124 = *(TRunGlue **)v13;
      v125 = TeluguShapingEngine::GetStaticClassTable(v121);
      v126 = v124;
      v13 = (unint64_t)v123;
      IndicShapingEngine::IndicShapingEngine((IndicShapingEngine *)__b, v122, v126, (const IndicClassTable *)v125, v12);
      *(_QWORD *)__b = &off_1E15DDDB8;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      TOpenTypeMorph::SetLookups(v123, v200, (OTL::GlyphLookups *)&v225);
      *v4 |= IndicShapingEngine::ApplyLookups((IndicShapingEngine *)__b, (unsigned __int16 **)&v225);
      v128 = (unsigned __int16 *)v225;
      v127 = v226;
      if (v226 != v225)
      {
        do
        {
          v129 = v127 - 104;
          v216 = (void **)(v127 - 96);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v216);
          v127 = v129;
        }
        while (v129 != (char *)v128);
      }
      v226 = (char *)v128;
      v41 = __b[888];
      if (__b[888])
      {
        strcpy((char *)&v200[1], "svbaswlbstspnlah");
        BYTE1(v200[5]) = 0;
        HIWORD(v200[5]) = 0;
        v41 = 1886545267;
      }
LABEL_102:
      v200[0] = v41;
      TOpenTypeMorph::SetPresentationLookups((TOpenTypeMorph *)v13, v200, (OTL::GlyphLookups *)&v225);
      v200[0] = 0;
      DevanagariShapingEngine::~DevanagariShapingEngine((DevanagariShapingEngine *)__b);
      goto LABEL_147;
    case 38:
      *(_QWORD *)&v130 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v130 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[464] = v130;
      *(_OWORD *)&__b[480] = v130;
      *(_OWORD *)&__b[432] = v130;
      *(_OWORD *)&__b[448] = v130;
      *(_OWORD *)&__b[400] = v130;
      *(_OWORD *)&__b[416] = v130;
      *(_OWORD *)&__b[368] = v130;
      *(_OWORD *)&__b[384] = v130;
      *(_OWORD *)&__b[336] = v130;
      *(_OWORD *)&__b[352] = v130;
      *(_OWORD *)&__b[304] = v130;
      *(_OWORD *)&__b[320] = v130;
      *(_OWORD *)&__b[272] = v130;
      *(_OWORD *)&__b[288] = v130;
      *(_OWORD *)&__b[240] = v130;
      *(_OWORD *)&__b[256] = v130;
      *(_OWORD *)&__b[208] = v130;
      *(_OWORD *)&__b[224] = v130;
      *(_OWORD *)&__b[176] = v130;
      *(_OWORD *)&__b[192] = v130;
      *(_OWORD *)&__b[144] = v130;
      *(_OWORD *)&__b[160] = v130;
      *(_OWORD *)&__b[112] = v130;
      *(_OWORD *)&__b[128] = v130;
      *(_OWORD *)&__b[80] = v130;
      *(_OWORD *)&__b[96] = v130;
      *(_OWORD *)&__b[48] = v130;
      *(_OWORD *)&__b[64] = v130;
      *(_OWORD *)&__b[16] = v130;
      *(_OWORD *)&__b[32] = v130;
      *(_OWORD *)__b = v130;
      OpenTypeShapingEngine::OpenTypeShapingEngine((OpenTypeShapingEngine *)__b, *(const TCharStream **)(v13 + 552), *(TRunGlue **)v13);
      *(_QWORD *)__b = &off_1E15DDA38;
      *v4 |= OpenTypeShapingEngine::ApplyScriptShaping((OpenTypeShapingEngine *)__b, v200);
      goto LABEL_146;
    default:
      if (*(_DWORD *)(v13 + 712) != 1145457748)
      {
LABEL_105:
        v131 = *(_QWORD *)(v13 + 552);
        if (v131)
        {
          v132 = *(TRunGlue **)v13;
          v133 = ScriptTagForScriptCode(*(_DWORD *)(v13 + 24));
          *(_QWORD *)__b = v131;
          *(_QWORD *)&__b[8] = v132;
          UniversalClassTable::ClassTableForScript(v133, &v216);
          *(_QWORD *)&__b[16] = v216;
          if (v216)
          {
            *v4 |= UniversalShapingEngine::ApplyScriptShaping((UniversalShapingEngine *)__b, v12, (OTL::GlyphLookups *)&v225);
            strcpy((char *)v200, "svbaswlbnlahserpstsp");
            BYTE1(v200[5]) = 0;
            HIWORD(v200[5]) = 0;
            v134 = *(_QWORD *)&__b[16];
            *(_QWORD *)&__b[16] = 0;
            if (v134)
              MEMORY[0x186DC03AC](v134, 0x1050C409ECFBC67);
          }
        }
      }
      goto LABEL_147;
  }
}

uint64_t TRunGlue::GlyphRangeByTrimming(TRunGlue *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v11;
  TRunGlue *v12;
  uint64_t v13;

  v4 = TRunGlue::length(a1);
  if (v4 < 1)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      v12 = a1;
      v13 = v5;
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
        break;
      if (!(*(unsigned int (**)(uint64_t, TRunGlue **))(*(_QWORD *)v6 + 48))(v6, &v12))
      {
        v7 = v4 - v5;
        if (v7 < 1)
          return v5;
        v8 = v5 + v7;
        while (1)
        {
          --v8;
          v12 = a1;
          v13 = v8;
          v9 = *(_QWORD *)(a2 + 24);
          if (!v9)
            break;
          if ((*(unsigned int (**)(uint64_t, TRunGlue **))(*(_QWORD *)v9 + 48))(v9, &v12))
          {
            --v7;
            if (v8 > v5)
              continue;
          }
          return v5;
        }
        break;
      }
      if (v4 == ++v5)
        return v4;
    }
    v11 = std::__throw_bad_function_call[abi:nn180100]();
    return TRunGlue::TGlyph::IsIgnorable((TRunGlue::TGlyph *)v11);
  }
}

BOOL TRunGlue::TGlyph::IsIgnorable(TRunGlue::TGlyph *this)
{
  return (unsigned __int16)(TRunGlue::GetGlyphID(*(TRunGlue **)this, *((_QWORD *)this + 1)) + 1) < 2u
      || TRunGlue::IsDeleted(*(TRunGlue **)this, *((_QWORD *)this + 1));
}

BOOL OTL::GSUB::GetSingleSubstLookups(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;

  v5 = 0;
  if (OTL::GCommon::GetLookups((uint64_t)a1, a2, a3, 0))
  {
    v6 = *(_QWORD *)(a1[2] + 400);
    v7 = (os_unfair_lock_s *)(v6 + 356);
    os_unfair_lock_lock_with_options();
    v8 = *(unsigned __int16 **)(a3 + 8);
    v9 = std::remove_if[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> *>,std::__not_fn_t<OTL::GSUB::GetSingleSubstLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *)::IsSingleSubst>>(*(unsigned __int16 **)a3, v8, a1, v6);
    std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::erase(a3, v9, v8);
    v5 = *(_QWORD *)a3 != *(_QWORD *)(a3 + 8);
    os_unfair_lock_unlock(v7);
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*,false>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  __int16 *v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  BOOL v36;
  unsigned __int16 *v37;
  unsigned int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  BOOL v42;
  char v43;
  __int16 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  BOOL v50;
  __int16 *v51;
  unsigned int v52;
  BOOL v53;
  char v54;
  unsigned int v55;
  BOOL v56;
  char v57;
  __int128 v58;
  unsigned __int16 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  char v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  unsigned int v72;
  BOOL v73;
  char v74;
  unsigned int v75;
  BOOL v76;
  __int16 *v77;
  unsigned __int16 *v78;
  unsigned int v79;
  BOOL v80;
  char v81;
  unsigned int v82;
  BOOL v83;
  unsigned __int16 *v84;
  unsigned int v85;
  BOOL v86;
  char v87;
  unsigned int v88;
  BOOL v89;
  __int16 *v90;
  unsigned int v91;
  BOOL v92;
  char v93;
  unsigned int v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  char v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  BOOL v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  char v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  __int128 v115;
  unsigned int v116;
  uint64_t v117;
  char *v118;
  char v119;
  unsigned int v120;
  BOOL v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  unsigned __int16 *v127;
  unsigned int v128;
  unsigned int v129;
  BOOL v130;
  char v131;
  unsigned int v132;
  unsigned int v133;
  BOOL v134;
  char *v135;
  unsigned int v136;
  unsigned int v137;
  BOOL v138;
  char v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;
  __int128 v143;
  unsigned int v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  BOOL v148;
  char v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  __int16 v153;
  char v154;
  unsigned int v155;
  BOOL v156;
  char *v157;
  int64_t v158;
  __int128 v159;
  uint64_t v160;
  char *v161;
  unsigned __int16 *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  char v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int16 *v176;
  unsigned int v177;
  unsigned int v178;
  BOOL v179;
  char v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  __int128 v184;
  unsigned int v185;
  unsigned __int16 *v186;
  char v187;
  unsigned int v188;
  BOOL v189;
  unsigned __int16 *v191;
  char *v192;
  unsigned __int16 *v193;
  unsigned int v194;
  unsigned int v195;
  BOOL v196;
  char v197;
  unsigned int v198;
  unsigned int v199;
  BOOL v200;
  __int128 v201;
  unsigned int v202;
  char *v203;
  char v204;
  unsigned int v205;
  __int16 *v206;
  void **v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  unint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = a2;
  v206 = (__int16 *)(a2 - 52);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v7 - (char *)v8;
    v10 = 0x4EC4EC4EC4EC4EC5 * (v9 >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v96 = *(a2 - 52);
        v97 = *a1;
        v98 = v96 == v97;
        if (v96 >= v97)
          v99 = 1;
        else
          v99 = -1;
        if (v98)
        {
          v100 = *(a2 - 51);
          v101 = a1[1];
          v102 = v100 >= v101;
          v103 = v100 == v101;
          v99 = -1;
          if (v102)
            v99 = 1;
          if (v103)
            v99 = 0;
        }
        if (v99 < 0)
          std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100]((__int16 *)a1, (__int16 *)a2 - 52);
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1, (__int16 *)a1 + 52, v206);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1, (__int16 *)a1 + 52, (__int16 *)a1 + 104, v206);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1, (__int16 *)a1 + 52, (__int16 *)a1 + 104, (__int16 *)a1 + 156, v206);
        return;
      default:
        if (v9 <= 2495)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v7)
            {
              v104 = a1 + 52;
              if (a1 + 52 != a2)
              {
                v105 = 0;
                v106 = a1;
                do
                {
                  v107 = v104;
                  v108 = v106[52];
                  v109 = *v106;
                  v110 = v108 == v109;
                  if (v108 >= v109)
                    v111 = 1;
                  else
                    v111 = -1;
                  if (v110)
                  {
                    v112 = v106[53];
                    v113 = v106[1];
                    v114 = v112 == v113;
                    v111 = v112 >= v113 ? 1 : -1;
                    if (v114)
                      v111 = 0;
                  }
                  if (v111 < 0)
                  {
                    v222 = 0xAAAAAAAAAAAAAAAALL;
                    *(_QWORD *)&v115 = 0xAAAAAAAAAAAAAAAALL;
                    *((_QWORD *)&v115 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    v220 = v115;
                    v221 = v115;
                    v218 = v115;
                    v219 = v115;
                    v217 = v115;
                    v216 = v115;
                    LODWORD(v216) = *(_DWORD *)v107;
                    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *((_BYTE **)v106 + 14), *((_BYTE **)v106 + 15));
                    LOWORD(v116) = *v106;
                    v117 = v105;
                    while (1)
                    {
                      v118 = (char *)a1 + v117;
                      *((_WORD *)v118 + 52) = v116;
                      *((_WORD *)v118 + 53) = *(unsigned __int16 *)((char *)a1 + v117 + 2);
                      std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a1 + v117 + 112, *(char **)((char *)a1 + v117 + 8), *(_QWORD *)((char *)a1 + v117 + 16), (uint64_t)(*(_QWORD *)((char *)a1 + v117 + 16) - *(_QWORD *)((char *)a1 + v117 + 8)) >> 4);
                      if (!v117)
                        break;
                      v116 = *((unsigned __int16 *)v118 - 52);
                      if ((unsigned __int16)v216 >= v116)
                        v119 = 1;
                      else
                        v119 = -1;
                      if ((unsigned __int16)v216 == v116)
                      {
                        v120 = *(unsigned __int16 *)((char *)a1 + v117 - 102);
                        v121 = WORD1(v216) == v120;
                        v119 = WORD1(v216) >= v120 ? 1 : -1;
                        if (v121)
                          v119 = 0;
                      }
                      v117 -= 104;
                      if ((v119 & 0x80) == 0)
                      {
                        v122 = (uint64_t)a1 + v117 + 104;
                        goto LABEL_223;
                      }
                    }
                    v122 = (uint64_t)a1;
LABEL_223:
                    *(_DWORD *)v122 = v216;
                    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)(v122 + 8), *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
                    *(_QWORD *)&v209 = (char *)&v216 + 8;
                    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v209);
                  }
                  v104 = v107 + 52;
                  v105 += 104;
                  v106 = v107;
                }
                while (v107 + 52 != a2);
              }
            }
          }
          else if (a1 != v7)
          {
            v191 = a1 + 52;
            if (a1 + 52 != a2)
            {
              v192 = (char *)(a1 + 56);
              do
              {
                v193 = v191;
                v194 = a1[52];
                v195 = *a1;
                v196 = v194 == v195;
                if (v194 >= v195)
                  v197 = 1;
                else
                  v197 = -1;
                if (v196)
                {
                  v198 = a1[53];
                  v199 = a1[1];
                  v200 = v198 == v199;
                  v197 = v198 >= v199 ? 1 : -1;
                  if (v200)
                    v197 = 0;
                }
                if (v197 < 0)
                {
                  v222 = 0xAAAAAAAAAAAAAAAALL;
                  *(_QWORD *)&v201 = 0xAAAAAAAAAAAAAAAALL;
                  *((_QWORD *)&v201 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  v220 = v201;
                  v221 = v201;
                  v218 = v201;
                  v219 = v201;
                  v217 = v201;
                  v216 = v201;
                  LODWORD(v216) = *(_DWORD *)v193;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *((_BYTE **)a1 + 14), *((_BYTE **)a1 + 15));
                  LOWORD(v202) = *a1;
                  v203 = v192;
                  do
                  {
                    *((_WORD *)v203 - 4) = v202;
                    *((_WORD *)v203 - 3) = *((_WORD *)v203 - 55);
                    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v203, *((char **)v203 - 13), *((_QWORD *)v203 - 12), (uint64_t)(*((_QWORD *)v203 - 12) - *((_QWORD *)v203 - 13)) >> 4);
                    v202 = *((unsigned __int16 *)v203 - 108);
                    if ((unsigned __int16)v216 >= v202)
                      v204 = 1;
                    else
                      v204 = -1;
                    if ((unsigned __int16)v216 == v202)
                    {
                      v205 = *((unsigned __int16 *)v203 - 107);
                      v204 = WORD1(v216) >= v205 ? 1 : -1;
                      if (WORD1(v216) == v205)
                        v204 = 0;
                    }
                    v203 -= 104;
                  }
                  while (v204 < 0);
                  *((_DWORD *)v203 - 2) = v216;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v203, *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
                  *(_QWORD *)&v209 = (char *)&v216 + 8;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v209);
                }
                v191 = v193 + 52;
                v192 += 104;
                a1 = v193;
              }
              while (v193 + 52 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v123 = (unint64_t)(v10 - 2) >> 1;
            v124 = v123;
            do
            {
              v125 = v124;
              if (v123 >= v124)
              {
                v126 = (2 * v124) | 1;
                v127 = &a1[52 * v126];
                if (2 * v124 + 2 < v10)
                {
                  v128 = v127[52];
                  v129 = *v127;
                  v130 = v129 == v128;
                  if (v129 >= v128)
                    v131 = 1;
                  else
                    v131 = -1;
                  if (v130)
                  {
                    v132 = v127[1];
                    v133 = v127[53];
                    v134 = v132 == v133;
                    v131 = v132 >= v133 ? 1 : -1;
                    if (v134)
                      v131 = 0;
                  }
                  if (v131 < 0)
                  {
                    v127 += 52;
                    v126 = 2 * v124 + 2;
                  }
                }
                v135 = (char *)&a1[52 * v124];
                v136 = *v127;
                v137 = *(unsigned __int16 *)v135;
                v138 = v136 == v137;
                if (v136 >= v137)
                  v139 = 1;
                else
                  v139 = -1;
                if (v138)
                {
                  v140 = v127[1];
                  v141 = *((unsigned __int16 *)v135 + 1);
                  v142 = v140 == v141;
                  v139 = v140 >= v141 ? 1 : -1;
                  if (v142)
                    v139 = 0;
                }
                if ((v139 & 0x80) == 0)
                {
                  v222 = 0xAAAAAAAAAAAAAAAALL;
                  *(_QWORD *)&v143 = 0xAAAAAAAAAAAAAAAALL;
                  *((_QWORD *)&v143 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  v220 = v143;
                  v221 = v143;
                  v218 = v143;
                  v219 = v143;
                  v217 = v143;
                  v216 = v143;
                  LODWORD(v216) = *(_DWORD *)v135;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *(_BYTE **)&a1[52 * v125 + 4], *(_BYTE **)&a1[52 * v125 + 8]);
                  LOWORD(v144) = *v127;
                  while (1)
                  {
                    v145 = (char *)v127;
                    *(_WORD *)v135 = v144;
                    *((_WORD *)v135 + 1) = v127[1];
                    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v135 + 8, *((char **)v127 + 1), *((_QWORD *)v127 + 2), (uint64_t)(*((_QWORD *)v127 + 2) - *((_QWORD *)v127 + 1)) >> 4);
                    if (v123 < v126)
                      break;
                    v127 = &a1[52 * ((2 * v126) | 1)];
                    if (2 * v126 + 2 >= v10)
                    {
                      v126 = (2 * v126) | 1;
                    }
                    else
                    {
                      v146 = v127[52];
                      v147 = *v127;
                      v148 = v147 == v146;
                      if (v147 >= v146)
                        v149 = 1;
                      else
                        v149 = -1;
                      if (v148)
                      {
                        v150 = v127[1];
                        v151 = v127[53];
                        v152 = v150 == v151;
                        v149 = v150 >= v151 ? 1 : -1;
                        if (v152)
                          v149 = 0;
                      }
                      if (v149 < 0)
                      {
                        v127 += 52;
                        v126 = 2 * v126 + 2;
                      }
                      else
                      {
                        v126 = (2 * v126) | 1;
                      }
                    }
                    v144 = *v127;
                    v153 = v216;
                    if (v144 >= (unsigned __int16)v216)
                      v154 = 1;
                    else
                      v154 = -1;
                    if (v144 == (unsigned __int16)v216)
                    {
                      v155 = v127[1];
                      v156 = v155 == WORD1(v216);
                      v154 = v155 >= WORD1(v216) ? 1 : -1;
                      if (v156)
                        v154 = 0;
                    }
                    v135 = v145;
                    if (v154 < 0)
                    {
                      v157 = v145 + 8;
                      goto LABEL_282;
                    }
                  }
                  v157 = (char *)(v127 + 4);
                  v153 = v216;
LABEL_282:
                  *(_WORD *)v145 = v153;
                  *((_WORD *)v145 + 1) = WORD1(v216);
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v157, *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
                  *(_QWORD *)&v209 = (char *)&v216 + 8;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v209);
                }
              }
              v124 = v125 - 1;
            }
            while (v125);
            v158 = v9 / 0x68uLL;
            do
            {
              if (v158 >= 2)
              {
                v215 = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v159 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v159 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v213 = v159;
                v214 = v159;
                v211 = v159;
                v212 = v159;
                v209 = v159;
                v210 = v159;
                LODWORD(v209) = *(_DWORD *)a1;
                std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v209 + 8, *((_BYTE **)a1 + 1), *((_BYTE **)a1 + 2));
                v160 = 0;
                v161 = (char *)a1;
                do
                {
                  v162 = (unsigned __int16 *)&v161[104 * v160 + 104];
                  v163 = (2 * v160) | 1;
                  v164 = 2 * v160 + 2;
                  if (v164 < v158)
                  {
                    v165 = v162[52];
                    v166 = *v162;
                    v167 = v166 == v165;
                    if (v166 >= v165)
                      v168 = 1;
                    else
                      v168 = -1;
                    if (v167)
                    {
                      v169 = v162[1];
                      v170 = v162[53];
                      v171 = v169 == v170;
                      v168 = v169 >= v170 ? 1 : -1;
                      if (v171)
                        v168 = 0;
                    }
                    if (v168 < 0)
                    {
                      v162 += 52;
                      v163 = v164;
                    }
                  }
                  *(_WORD *)v161 = *v162;
                  *((_WORD *)v161 + 1) = v162[1];
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v161 + 8, *((char **)v162 + 1), *((_QWORD *)v162 + 2), (uint64_t)(*((_QWORD *)v162 + 2) - *((_QWORD *)v162 + 1)) >> 4);
                  v161 = (char *)v162;
                  v160 = v163;
                }
                while (v163 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
                v172 = (char *)(v162 + 4);
                if (v162 == a2 - 52)
                {
                  *(_DWORD *)v162 = v209;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v172, *((char **)&v209 + 1), v210, (uint64_t)(v210 - *((_QWORD *)&v209 + 1)) >> 4);
                }
                else
                {
                  v173 = (char *)*((_QWORD *)a2 - 12);
                  *v162 = *(a2 - 52);
                  v162[1] = *(a2 - 51);
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v172, v173, *((_QWORD *)a2 - 11), (uint64_t)(*((_QWORD *)a2 - 11) - (_QWORD)v173) >> 4);
                  *((_DWORD *)a2 - 26) = v209;
                  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a2 - 96, *((char **)&v209 + 1), v210, (uint64_t)(v210 - *((_QWORD *)&v209 + 1)) >> 4);
                  v174 = (char *)v162 - (char *)a1 + 104;
                  if (v174 >= 105)
                  {
                    v175 = (v174 / 0x68uLL - 2) >> 1;
                    v176 = &a1[52 * v175];
                    v177 = *v176;
                    v178 = *v162;
                    v179 = v177 == v178;
                    if (v177 >= v178)
                      v180 = 1;
                    else
                      v180 = -1;
                    if (v179)
                    {
                      v181 = v176[1];
                      v182 = v162[1];
                      v183 = v181 == v182;
                      v180 = v181 >= v182 ? 1 : -1;
                      if (v183)
                        v180 = 0;
                    }
                    if (v180 < 0)
                    {
                      v222 = 0xAAAAAAAAAAAAAAAALL;
                      *(_QWORD *)&v184 = 0xAAAAAAAAAAAAAAAALL;
                      *((_QWORD *)&v184 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      v220 = v184;
                      v221 = v184;
                      v218 = v184;
                      v219 = v184;
                      v217 = v184;
                      v216 = v184;
                      LODWORD(v216) = *(_DWORD *)v162;
                      std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *((_BYTE **)v162 + 1), *((_BYTE **)v162 + 2));
                      LOWORD(v185) = *v176;
                      do
                      {
                        v186 = v176;
                        *v162 = v185;
                        v162[1] = v176[1];
                        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)v162 + 8, *((char **)v176 + 1), *((_QWORD *)v176 + 2), (uint64_t)(*((_QWORD *)v176 + 2) - *((_QWORD *)v176 + 1)) >> 4);
                        if (!v175)
                          break;
                        v175 = (v175 - 1) >> 1;
                        v176 = &a1[52 * v175];
                        v185 = *v176;
                        if (v185 >= (unsigned __int16)v216)
                          v187 = 1;
                        else
                          v187 = -1;
                        if (v185 == (unsigned __int16)v216)
                        {
                          v188 = v176[1];
                          v189 = v188 == WORD1(v216);
                          v187 = v188 >= WORD1(v216) ? 1 : -1;
                          if (v189)
                            v187 = 0;
                        }
                        v162 = v186;
                      }
                      while (v187 < 0);
                      *(_DWORD *)v186 = v216;
                      std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)v186 + 8, *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
                      v208 = (void **)&v216 + 1;
                      std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v208);
                    }
                  }
                }
                *(_QWORD *)&v216 = (char *)&v209 + 8;
                std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v216);
              }
              a2 -= 52;
            }
            while ((unint64_t)v158-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int16 *)&a1[52 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x3401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(v12, (__int16 *)a1, v206);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1, v12, v206);
          v13 = 52 * v11;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1 + 52, (__int16 *)&a1[v13 - 52], (__int16 *)a2 - 104);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1 + 104, (__int16 *)&a1[v13 + 52], (__int16 *)a2 - 156);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)&a1[v13 - 52], v12, (__int16 *)&a1[v13 + 52]);
          std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100]((__int16 *)a1, v12);
        }
        --a3;
        v7 = a2;
        if ((a4 & 1) == 0)
        {
          v14 = *(a1 - 52);
          v15 = *a1;
          v16 = v14 == v15;
          if (v14 >= v15)
            v17 = 1;
          else
            v17 = -1;
          if (v16)
          {
            v18 = *(a1 - 51);
            v19 = a1[1];
            v20 = v18 == v19;
            v17 = v18 >= v19 ? 1 : -1;
            if (v20)
              v17 = 0;
          }
          if ((v17 & 0x80) == 0)
          {
            v222 = 0xAAAAAAAAAAAAAAAALL;
            *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v220 = v58;
            v221 = v58;
            v218 = v58;
            v219 = v58;
            v217 = v58;
            v216 = v58;
            LODWORD(v216) = *(_DWORD *)a1;
            std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *((_BYTE **)a1 + 1), *((_BYTE **)a1 + 2));
            v59 = v216;
            v60 = (unsigned __int16)*v206;
            if ((unsigned __int16)v216 == v60)
            {
              v61 = WORD1(v216);
              v62 = *(a2 - 51);
              v63 = WORD1(v216) == v62;
              if (WORD1(v216) >= v62)
                v64 = 1;
              else
                v64 = -1;
              if (v63)
                v64 = 0;
            }
            else
            {
              if ((unsigned __int16)v216 >= v60)
                v64 = 1;
              else
                v64 = -1;
              v61 = WORD1(v216);
            }
            v65 = a1;
            if (v64 < 0)
            {
              do
              {
                v8 = v65 + 52;
                v72 = v65[52];
                v73 = (unsigned __int16)v216 == v72;
                if ((unsigned __int16)v216 >= v72)
                  v74 = 1;
                else
                  v74 = -1;
                if (v73)
                {
                  v75 = v65[53];
                  v76 = v61 == v75;
                  v74 = v61 >= v75 ? 1 : -1;
                  if (v76)
                    v74 = 0;
                }
                v65 += 52;
              }
              while ((v74 & 0x80) == 0);
            }
            else
            {
              v66 = a1 + 52;
              do
              {
                v8 = v66;
                if (v66 >= a2)
                  break;
                v67 = *v66;
                v68 = (unsigned __int16)v216 == v67;
                if ((unsigned __int16)v216 >= v67)
                  v69 = 1;
                else
                  v69 = -1;
                if (v68)
                {
                  v70 = v66[1];
                  v71 = v61 == v70;
                  v69 = v61 >= v70 ? 1 : -1;
                  if (v71)
                    v69 = 0;
                }
                v66 += 52;
              }
              while ((v69 & 0x80) == 0);
            }
            v77 = (__int16 *)a2;
            if (v8 < a2)
            {
              v78 = a2;
              v77 = (__int16 *)a2;
              do
              {
                v79 = (unsigned __int16)*(v77 - 52);
                v77 -= 52;
                v80 = (unsigned __int16)v216 == v79;
                if ((unsigned __int16)v216 >= v79)
                  v81 = 1;
                else
                  v81 = -1;
                if (v80)
                {
                  v82 = *(v78 - 51);
                  v83 = v61 == v82;
                  v81 = v61 >= v82 ? 1 : -1;
                  if (v83)
                    v81 = 0;
                }
                v78 = (unsigned __int16 *)v77;
              }
              while (v81 < 0);
            }
            while (v8 < (unsigned __int16 *)v77)
            {
              std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100]((__int16 *)v8, v77);
              v59 = v216;
              v84 = v8;
              do
              {
                v85 = v8[52];
                v8 += 52;
                v86 = (unsigned __int16)v216 == v85;
                if ((unsigned __int16)v216 >= v85)
                  v87 = 1;
                else
                  v87 = -1;
                if (v86)
                {
                  v88 = v84[53];
                  v89 = WORD1(v216) == v88;
                  v87 = WORD1(v216) >= v88 ? 1 : -1;
                  if (v89)
                    v87 = 0;
                }
                v84 = v8;
              }
              while ((v87 & 0x80) == 0);
              v90 = v77;
              do
              {
                v91 = (unsigned __int16)*(v77 - 52);
                v77 -= 52;
                v92 = (unsigned __int16)v216 == v91;
                if ((unsigned __int16)v216 >= v91)
                  v93 = 1;
                else
                  v93 = -1;
                if (v92)
                {
                  v94 = (unsigned __int16)*(v90 - 51);
                  v95 = WORD1(v216) == v94;
                  v93 = WORD1(v216) >= v94 ? 1 : -1;
                  if (v95)
                    v93 = 0;
                }
                v90 = v77;
              }
              while (v93 < 0);
            }
            if (v8 - 52 != a1)
            {
              *a1 = *(v8 - 52);
              a1[1] = *(v8 - 51);
              std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a1 + 8, *((char **)v8 - 12), *((_QWORD *)v8 - 11), (uint64_t)(*((_QWORD *)v8 - 11) - *((_QWORD *)v8 - 12)) >> 4);
              v59 = v216;
            }
            *(v8 - 52) = v59;
            *(v8 - 51) = WORD1(v216);
            std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)v8 - 96, *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
            *(_QWORD *)&v209 = (char *)&v216 + 8;
            std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v209);
            a4 = 0;
            continue;
          }
        }
        v222 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v220 = v21;
        v221 = v21;
        v218 = v21;
        v219 = v21;
        v217 = v21;
        v216 = v21;
        LODWORD(v216) = *(_DWORD *)a1;
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v216 + 8, *((_BYTE **)a1 + 1), *((_BYTE **)a1 + 2));
        v22 = 0;
        v23 = v216;
        do
        {
          v24 = a1[v22 + 52];
          v25 = v24 == (unsigned __int16)v216;
          if (v24 >= (unsigned __int16)v216)
            v26 = 1;
          else
            v26 = -1;
          if (v25)
          {
            v27 = a1[v22 + 53];
            v28 = v27 == WORD1(v216);
            v26 = v27 >= WORD1(v216) ? 1 : -1;
            if (v28)
              v26 = 0;
          }
          v22 += 52;
        }
        while (v26 < 0);
        v29 = &a1[v22];
        v30 = a2;
        if (v22 == 52)
        {
          v37 = a2;
          while (v29 < v37)
          {
            v32 = (__int16 *)(v37 - 52);
            v38 = *(v37 - 52);
            v39 = v38 == (unsigned __int16)v216;
            if (v38 >= (unsigned __int16)v216)
              v40 = 1;
            else
              v40 = -1;
            if (v39)
            {
              v41 = *(v37 - 51);
              v42 = v41 == WORD1(v216);
              if (v41 >= WORD1(v216))
                v43 = 1;
              else
                v43 = -1;
              if (v42)
                v40 = 0;
              else
                v40 = v43;
            }
            v37 = (unsigned __int16 *)v32;
            if (v40 < 0)
              goto LABEL_62;
          }
          v32 = (__int16 *)v37;
        }
        else
        {
          do
          {
            v32 = (__int16 *)(v30 - 52);
            v31 = *(v30 - 52);
            v33 = v31 == (unsigned __int16)v216;
            if (v31 >= (unsigned __int16)v216)
              v34 = 1;
            else
              v34 = -1;
            if (v33)
            {
              v35 = *(v30 - 51);
              v36 = v35 == WORD1(v216);
              v34 = v35 >= WORD1(v216) ? 1 : -1;
              if (v36)
                v34 = 0;
            }
            v30 -= 52;
          }
          while ((v34 & 0x80) == 0);
        }
LABEL_62:
        if (v29 >= (unsigned __int16 *)v32)
        {
          v8 = v29;
        }
        else
        {
          v44 = v32;
          v8 = v29;
          do
          {
            std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100]((__int16 *)v8, v44);
            v23 = v216;
            v45 = v8;
            do
            {
              v46 = v8[52];
              v8 += 52;
              v47 = v46 == (unsigned __int16)v216;
              if (v46 >= (unsigned __int16)v216)
                v48 = 1;
              else
                v48 = -1;
              if (v47)
              {
                v49 = v45[53];
                v50 = v49 == WORD1(v216);
                v48 = v49 >= WORD1(v216) ? 1 : -1;
                if (v50)
                  v48 = 0;
              }
              v45 = v8;
            }
            while (v48 < 0);
            v51 = v44;
            do
            {
              v52 = (unsigned __int16)*(v44 - 52);
              v44 -= 52;
              v53 = v52 == (unsigned __int16)v216;
              if (v52 >= (unsigned __int16)v216)
                v54 = 1;
              else
                v54 = -1;
              if (v53)
              {
                v55 = (unsigned __int16)*(v51 - 51);
                v56 = v55 == WORD1(v216);
                v54 = v55 >= WORD1(v216) ? 1 : -1;
                if (v56)
                  v54 = 0;
              }
              v51 = v44;
            }
            while ((v54 & 0x80) == 0);
          }
          while (v8 < (unsigned __int16 *)v44);
        }
        if (v8 - 52 != a1)
        {
          *a1 = *(v8 - 52);
          a1[1] = *(v8 - 51);
          std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a1 + 8, *((char **)v8 - 12), *((_QWORD *)v8 - 11), (uint64_t)(*((_QWORD *)v8 - 11) - *((_QWORD *)v8 - 12)) >> 4);
          v23 = v216;
        }
        *(v8 - 52) = v23;
        *(v8 - 51) = WORD1(v216);
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)v8 - 96, *((char **)&v216 + 1), v217, (uint64_t)(v217 - *((_QWORD *)&v216 + 1)) >> 4);
        *(_QWORD *)&v209 = (char *)&v216 + 8;
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v209);
        if (v29 < (unsigned __int16 *)v32)
        {
LABEL_96:
          std::__introsort<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*,false>(a1, v8 - 52, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v57 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)a1, v8 - 52);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>((__int16 *)v8, a2))
        {
          if ((v57 & 1) != 0)
            continue;
          goto LABEL_96;
        }
        a2 = v8 - 52;
        if ((v57 & 1) == 0)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t CTFontIsSystemUIFont(uint64_t result)
{
  BOOL v1;

  if (result)
    return TFont::IsSystemUIFontAndForShaping(*(TFont **)(result + 40), &v1);
  return result;
}

unint64_t TOpenTypeMorph::GetInitialScriptAndLangSys(__CFString *this, __CFString *a2, const TFont *a3)
{
  uint64_t v3;
  int IsSystemUIFontAndForShaping;
  unint64_t v5;
  BOOL v7;

  if (this)
  {
    v3 = ScriptAndLangSysFromCanonicalLanguage(this);
LABEL_6:
    v5 = v3 & 0xFFFFFFFF00000000;
    return v5 | v3;
  }
  v7 = -86;
  IsSystemUIFontAndForShaping = TFont::IsSystemUIFontAndForShaping((TFont *)a2, &v7);
  v5 = 0;
  LODWORD(v3) = -1;
  if (IsSystemUIFontAndForShaping && v7)
  {
    v3 = ScriptAndLangSysForPreferredLanguage();
    goto LABEL_6;
  }
  return v5 | v3;
}

uint64_t TFont::IsSystemUIFontAndForShaping(TFont *this, BOOL *a2)
{
  unint64_t v3;
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t result;

  v3 = atomic_load((unint64_t *)this + 1);
  if (v3
    && (v5 = atomic_load((unint64_t *)this + 1),
        v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 16),
        (TDescriptor::GetSystemUIFontOptions(this) & v6) != 0))
  {
    v7 = (*(_BYTE *)this & 0x20) == 0;
    result = 1;
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t TDescriptor::GetSystemUIFontOptions(TDescriptor *this)
{
  if (qword_1ECDE7640 != -1)
    dispatch_once_f(&qword_1ECDE7640, 0, (dispatch_function_t)TDescriptor::GetSystemUIFontOptions(void)::$_0::__invoke);
  return _MergedGlobals_13;
}

BOOL OTL::FeatureList::StripMissingFeaturesFrom(unsigned int **this, unsigned int *__dst)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;

  if (!*__dst)
    return 0;
  v4 = __dst;
  do
  {
    v5 = v4[1];
    ++v4;
  }
  while (v5);
  if (v4 > __dst)
  {
    v6 = *this;
    v7 = __dst;
    do
    {
      v8 = this[1];
      if (v8 == v6)
        goto LABEL_14;
      v9 = v8 - v6;
      v10 = *v7;
      v11 = v6;
      do
      {
        v12 = v9 >> 1;
        v13 = &v11[v9 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v9 += ~(v9 >> 1);
        if (v15 < v10)
          v11 = v14;
        else
          v9 = v12;
      }
      while (v9);
      if (v11 == v8 || v10 < *v11)
      {
LABEL_14:
        if (v4 != v7 + 1)
        {
          memmove(v7, v7 + 1, (char *)v4 - (char *)(v7 + 1));
          v6 = *this;
        }
        --v4;
      }
      else
      {
        ++v7;
      }
    }
    while (v7 < v4);
  }
  *v4 = 0;
  return v4 != __dst;
}

void TOpenTypeMorph::TOpenTypeMorph(TOpenTypeMorph *this, TRunGlue *a2, const TCharStream *a3)
{
  uint64_t v5;
  uint64_t CommonTable;
  const __CFData *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  unint64_t ScriptAndLangSys;
  const TRun *v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  const __CFData *v20;
  unsigned int v21;
  char *v22;
  int v23;
  uint64_t v24;
  int v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  const TRun *v29;
  char v30;
  uint64_t NextChar;
  uint64_t v32;
  uint64_t FullChar;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _BYTE *v41;
  const __CFData *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  const __CFData *v51;
  int v52;
  __int128 v53;
  __int128 v54;
  _BYTE *v55;
  const __CFData *v56;
  int v57;
  __int128 v58;
  __int128 v59;
  const TRun *v60;
  __int128 v61;
  __int128 v62;
  CFIndex v63;
  const TRun *v64;
  char v65;
  TRunGlue *v66;
  CFRange v67;
  TRunGlue *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CFIndex v73;
  CFIndex v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];
  uint64_t GlyphIndexForChar;
  uint64_t v84;
  _BYTE v85[168];
  __int128 v86;
  uint64_t v87;

  *(_QWORD *)this = a2;
  v5 = *((_QWORD *)a2 + 77);
  *((_QWORD *)this + 1) = v5;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 634);
  *((_BYTE *)this + 21) = 1;
  *((_DWORD *)this + 6) = -1;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 67) = (char *)this + 56;
  CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(v5 + 400), 1196643650, 0);
  *((_QWORD *)this + 68) = CommonTable;
  *((_QWORD *)this + 69) = a3;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_BYTE *)this + 584) = 0;
  *((_DWORD *)this + 162) = 2;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_BYTE *)this + 720) = 0;
  *((_QWORD *)this + 80) = &unk_1E15DEE98;
  if (!CommonTable)
    return;
  v7 = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)this + 1) + 400), 1195656518, 0);
  OTL::GDEF::GDEF((OTL::GDEF *)v85, v7);
  v8 = *(_OWORD *)&v85[48];
  *((_OWORD *)this + 37) = *(_OWORD *)&v85[32];
  *((_OWORD *)this + 38) = v8;
  *((_OWORD *)this + 39) = *(_OWORD *)&v85[64];
  v9 = *(_OWORD *)&v85[16];
  *((_OWORD *)this + 35) = *(_OWORD *)v85;
  *((_OWORD *)this + 36) = v9;
  v77 = (char *)this + 560;
  v11 = *(_QWORD *)(*(_QWORD *)this + 8);
  v10 = *(_QWORD *)(*(_QWORD *)this + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v11) + 48);
  *((_BYTE *)this + 21) = *(_DWORD *)(v12 + 256) == 0;
  ScriptAndLangSys = TAttributes::GetScriptAndLangSys((TAttributes *)(v12 + 40));
  *((_QWORD *)this + 3) = ScriptAndLangSys;
  if ((_DWORD)ScriptAndLangSys == -1)
  {
    LODWORD(ScriptAndLangSys) = *(_DWORD *)(v12 + 304);
    *((_DWORD *)this + 6) = ScriptAndLangSys;
    if (!a3)
    {
LABEL_58:
      if (v10 < 2)
        return;
      v63 = 1;
      while (1)
      {
        v64 = *(const TRun **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v11 + 8 * v63) + 48);
        if (!TOpenTypeMorph::CompareRuns((TOpenTypeMorph *)v12, v64, v14))
          break;
        v65 = *((_BYTE *)this + 21);
        if (v65)
          v65 = *((_DWORD *)v64 + 64) == 0;
        *((_BYTE *)this + 21) = v65;
        ++v63;
        if (v11 + v63 >= v10 + v11)
          return;
      }
      v66 = *(TRunGlue **)this;
      v67.location = v11;
      v67.length = v63;
      goto LABEL_71;
    }
  }
  else if (!a3)
  {
    goto LABEL_58;
  }
  v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 400);
  if ((*(_DWORD *)(v15 + 184) & 0x400) == 0)
  {
    TBaseFont::DetermineFontFlags(*(TBaseFont **)(*((_QWORD *)this + 1) + 400), 1024);
    LODWORD(ScriptAndLangSys) = *((_DWORD *)this + 6);
  }
  v76 = (_OWORD *)((char *)this + 648);
  if ((*(_DWORD *)(v15 + 180) & 0x400) != 0)
  {
    if ((_DWORD)ScriptAndLangSys == -1)
    {
      v19 = (_BYTE *)*((_QWORD *)this + 1);
      v20 = (const __CFData *)*((_QWORD *)this + 68);
      v21 = *((_DWORD *)this + 7);
      v22 = (char *)this + 560;
      v23 = 0;
      goto LABEL_57;
    }
    v16 = ScriptTagForScriptCode(ScriptAndLangSys);
    OTL::GCommon::GCommon((uint64_t)v85, 0, *((_BYTE **)this + 1), *((CFDataRef *)this + 68), (uint64_t)v77, v16, *((_DWORD *)this + 7));
    v17 = *(_OWORD *)&v85[24];
    v18 = *(_OWORD *)&v85[56];
    *(_OWORD *)((char *)this + 680) = *(_OWORD *)&v85[40];
    *(_OWORD *)((char *)this + 696) = v18;
    *(_OWORD *)((char *)this + 705) = *(_OWORD *)&v85[65];
    *v76 = *(_OWORD *)&v85[8];
    *(_OWORD *)((char *)this + 664) = v17;
    if (!*((_BYTE *)this + 720))
    {
      if (v16 != *((_DWORD *)this + 178))
        *((_DWORD *)this + 6) = -1;
      goto LABEL_58;
    }
    LODWORD(ScriptAndLangSys) = *((_DWORD *)this + 6);
  }
  if ((_DWORD)ScriptAndLangSys == 128)
  {
    v19 = (_BYTE *)*((_QWORD *)this + 1);
    v20 = (const __CFData *)*((_QWORD *)this + 68);
    v21 = *((_DWORD *)this + 7);
    v22 = (char *)this + 560;
    v23 = 1835103336;
LABEL_57:
    OTL::GCommon::GCommon((uint64_t)v85, 0, v19, v20, (uint64_t)v22, v23, v21);
    v61 = *(_OWORD *)&v85[24];
    v62 = *(_OWORD *)&v85[56];
    *(_OWORD *)((char *)this + 680) = *(_OWORD *)&v85[40];
    *(_OWORD *)((char *)this + 696) = v62;
    *(_OWORD *)((char *)this + 705) = *(_OWORD *)&v85[65];
    *v76 = *(_OWORD *)&v85[8];
    *(_OWORD *)((char *)this + 664) = v61;
    goto LABEL_58;
  }
  *(_QWORD *)v85 = a3;
  v86 = 0u;
  v24 = *((_QWORD *)a3 + 2);
  v71 = v10 + v11;
  v69 = 8 * v11;
  v25 = -1;
  v75 = 1;
  v87 = 0;
  *(_QWORD *)&v86 = v24;
  v26 = v11;
  memset(&v85[8], 0, 160);
  v73 = v11;
  while (1)
  {
    v74 = v26 + 1;
    v28 = *(_QWORD *)(v12 + 8);
    v27 = *(_QWORD *)(v12 + 16);
    GlyphIndexForChar = 0xAAAAAAAAAAAAAAAALL;
    v84 = v28;
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v12, v28);
    if (v27 >= 1)
      break;
LABEL_45:
    v49 = *((_DWORD *)this + 6);
    if (v49)
    {
      if (!*((_DWORD *)this + 178))
      {
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        v51 = (const __CFData *)*((_QWORD *)this + 68);
        v52 = ScriptTagForScriptCode(*((_DWORD *)this + 6));
        OTL::GCommon::GCommon((uint64_t)&v78, 0, v50, v51, (uint64_t)v77, v52, *((_DWORD *)this + 7));
        v53 = v82[0];
        *(_OWORD *)((char *)this + 680) = v81;
        *(_OWORD *)((char *)this + 696) = v53;
        *(_OWORD *)((char *)this + 705) = *(_OWORD *)((char *)v82 + 9);
        v54 = v80;
        *v76 = v79;
        *(_OWORD *)((char *)this + 664) = v54;
        v49 = *((_DWORD *)this + 6);
      }
    }
    else
    {
      if (v25 == -1)
        v49 = 25;
      else
        v49 = v25;
      *((_DWORD *)this + 6) = v49;
      v55 = (_BYTE *)*((_QWORD *)this + 1);
      v56 = (const __CFData *)*((_QWORD *)this + 68);
      v57 = ScriptTagForScriptCode(v49);
      OTL::GCommon::GCommon((uint64_t)&v78, 0, v55, v56, (uint64_t)v77, v57, *((_DWORD *)this + 7));
      v58 = v82[0];
      *(_OWORD *)((char *)this + 680) = v81;
      *(_OWORD *)((char *)this + 696) = v58;
      *(_OWORD *)((char *)this + 705) = *(_OWORD *)((char *)v82 + 9);
      v59 = v80;
      *v76 = v79;
      *(_OWORD *)((char *)this + 664) = v59;
    }
    *(_DWORD *)(v12 + 304) = v49;
    v25 = v49;
LABEL_53:
    if (v74 == v71)
      return;
    v60 = *(const TRun **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v74) + 48);
    if (!TOpenTypeMorph::CompareRuns((TOpenTypeMorph *)v12, v60, v29))
    {
      v67.length = v74 - v11;
      v66 = *(TRunGlue **)this;
      v67.location = v11;
LABEL_71:
      TRunGlue::SetRunRange(v66, v67);
      return;
    }
    ++v75;
    v26 = v74;
    v12 = (uint64_t)v60;
  }
  v72 = v26;
  v30 = 0;
  NextChar = v28;
  v32 = v27 + v28;
  v70 = NextChar;
  while (1)
  {
    FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v85, &v84, 0);
    v34 = ScriptCodeForLongCharacter(FullChar);
    if (!v34)
    {
      if (!IsRightAssociative(FullChar))
        goto LABEL_36;
      v35 = v84 + 1;
      v78 = v84 + 1;
      v36 = *(_QWORD *)this;
      v37 = *(_QWORD *)(*(_QWORD *)this + 40);
      if (v37 == -1)
      {
        TRunGlue::ComputeEndIndex(*(_QWORD **)this);
        v37 = *(_QWORD *)(v36 + 40);
      }
      v38 = *(_QWORD *)(v36 + 48) + v37;
      if (v35 >= v38)
        goto LABEL_36;
      while (1)
      {
        v39 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v85, &v78, 0);
        v40 = ScriptCodeForLongCharacter(v39);
        if (v40)
          break;
        if (++v78 >= v38)
          goto LABEL_36;
      }
      v34 = v40;
    }
    if (v34 == v25)
    {
      if ((v30 & 1) == 0)
        goto LABEL_34;
      goto LABEL_35;
    }
    if (!v25)
      break;
    if (!uscript_hasScript())
    {
      if ((v30 & 1) != 0)
        goto LABEL_67;
      if (v25 != -1)
        goto LABEL_70;
      *((_DWORD *)this + 6) = v34;
      v41 = (_BYTE *)*((_QWORD *)this + 1);
      v42 = (const __CFData *)*((_QWORD *)this + 68);
      v43 = ScriptTagForScriptCode(v34);
      OTL::GCommon::GCommon((uint64_t)&v78, 0, v41, v42, (uint64_t)v77, v43, *((_DWORD *)this + 7));
      v44 = v82[0];
      *(_OWORD *)((char *)this + 680) = v81;
      *(_OWORD *)((char *)this + 696) = v44;
      *(_OWORD *)((char *)this + 705) = *(_OWORD *)((char *)v82 + 9);
      v45 = v80;
      *v76 = v79;
      *(_OWORD *)((char *)this + 664) = v45;
      if (v34 != 25)
      {
        if (v72 >= v73)
        {
          v46 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)this + 16) + v69);
          v47 = v75;
          do
          {
            v48 = *v46++;
            *(_DWORD *)(*(_QWORD *)(v48 + 48) + 304) = v34;
            v30 = 1;
            --v47;
          }
          while (v47);
        }
        else
        {
          v30 = 1;
        }
        v25 = v34;
        goto LABEL_36;
      }
      v25 = 25;
LABEL_34:
      *(_DWORD *)(v12 + 304) = v25;
LABEL_35:
      v30 = 1;
    }
LABEL_36:
    NextChar = TRun::GetNextChar((TRun *)v12, v84, &GlyphIndexForChar);
    v84 = NextChar;
    if (NextChar >= v32)
    {
      v11 = v73;
      if ((v30 & 1) != 0)
        goto LABEL_53;
      goto LABEL_45;
    }
  }
  if ((v30 & 1) == 0)
  {
LABEL_70:
    v67.location = v73;
    v67.length = v72 - v73;
    v66 = *(TRunGlue **)this;
    goto LABEL_71;
  }
LABEL_67:
  v68 = *(TRunGlue **)this;
  if (*(_QWORD *)(*(_QWORD *)this + 152) && TLine::SplitRun(*(_QWORD *)v68, v72, NextChar - v70))
  {
    TRunGlue::UpdateForSplitRun(v68, 1);
    v66 = *(TRunGlue **)this;
    v67.location = v73;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 16) + 8 * v74) + 48) + 304) = -1;
    v67.length = v72 - v73 + 1;
    goto LABEL_71;
  }
  *((_QWORD *)this + 68) = 0;
}

uint64_t UniversalClassTable::ClassTableForScript@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  _QWORD v5[3];
  BOOL v6;

  if ((_DWORD)this)
  {
    v6 = 0;
    memset(v5, 170, sizeof(v5));
    FirstBlockForScript(&v6, this, (uint64_t)v5);
    v3 = v5[0];
    if (v5[0])
    {
      this = operator new();
      v4 = v6;
      *(_QWORD *)this = v5[1];
      *(_BYTE *)(this + 8) = v4;
      *(_QWORD *)(this + 16) = v3;
    }
    else
    {
      this = 0;
    }
    *a2 = this;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

BOOL std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0>,BOOL ()(TRunGlue::TGlyph)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return TRunGlue::TGlyph::IsIgnorable((TRunGlue::TGlyph *)&v3);
}

void TStorageRange::UpdateAdvances(uint64_t a1, uint64_t a2, uint64_t x2_0)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  void **v9;
  void *i;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void **v20;
  void *v21;
  void **v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t k;
  uint64_t j;
  _QWORD *v44;
  uint64_t v45;
  char **v46;
  double *v47;
  void *v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 *v80;
  void **v81;
  void **v82;
  void **v83;
  _OWORD v84[15];
  _OWORD *v85;
  uint64_t v86;
  CGSize v87;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 33);
  if ((v7 & 2) != 0)
  {
    v31 = *(_QWORD *)(a1 + 8);
    v32 = *(_QWORD **)(a1 + 24);
    v33 = v32[3];
    if (v33)
    {
      v34 = (double *)(v33 + 8 * v31);
      v35 = a2;
      v36 = 1;
    }
    else
    {
      v34 = (double *)(v32[4] + 16 * v31);
      v35 = a2;
      v36 = 2;
    }
    TFont::GetAdvancesForGlyphs(v35, v32[2] + 2 * v31, v34, v36, v6, 0, x2_0, 0);
    *(_QWORD *)a1 = v37;
    return;
  }
  if ((*(_BYTE *)(a1 + 33) & 4) != 0)
  {
    if ((objc_msgSend(*(id *)(a1 + 24), "implementsCustomAdvancesForIndexes") & 1) != 0)
    {
      *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v84[14] = v8;
      v84[13] = v8;
      v84[12] = v8;
      v84[11] = v8;
      v84[10] = v8;
      v84[9] = v8;
      v84[8] = v8;
      v84[7] = v8;
      v84[6] = v8;
      v84[5] = v8;
      v84[4] = v8;
      v84[3] = v8;
      v84[2] = v8;
      v84[1] = v8;
      v84[0] = v8;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v85 = v84;
      if (v6 >= 1)
      {
        v9 = 0;
        for (i = 0; i != (void *)v6; i = (char *)i + 1)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4 * *(_QWORD *)(a1 + 8) + 4 * (_QWORD)i) & 0x800) != 0)
          {
            if (v9 >= v83)
            {
              v12 = (char *)v81;
              v13 = v9 - v81;
              v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 61)
                abort();
              v15 = (char *)v83 - (char *)v81;
              if (((char *)v83 - (char *)v81) >> 2 > v14)
                v14 = v15 >> 2;
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v14;
              *((_QWORD *)&v50 + 1) = v84;
              if (v16)
              {
                v17 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v84, v16);
                v9 = v82;
                v12 = (char *)v81;
              }
              else
              {
                v17 = 0;
              }
              v18 = &v17[8 * v13];
              *(_QWORD *)v18 = i;
              if (v9 == (void **)v12)
              {
                v20 = (void **)&v17[8 * v13];
              }
              else
              {
                v19 = (char *)v9;
                v20 = (void **)&v17[8 * v13];
                do
                {
                  v21 = (void *)*((_QWORD *)v19 - 1);
                  v19 -= 8;
                  *--v20 = v21;
                }
                while (v19 != v12);
              }
              v11 = (void **)(v18 + 8);
              v81 = v20;
              v82 = (void **)(v18 + 8);
              v22 = v83;
              v83 = (void **)&v17[8 * v16];
              v49 = v9;
              *(_QWORD *)&v50 = v22;
              v47 = (double *)v12;
              v48 = v12;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v47);
              v9 = v11;
            }
            else
            {
              *v9++ = i;
              v11 = v9;
            }
            v82 = v11;
          }
        }
        if (v81 != v9)
        {
          *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v78 = v23;
          v79 = v23;
          v24 = (char *)v9 - (char *)v81;
          v25 = v9 - v81;
          v76 = v23;
          v77 = v23;
          v74 = v23;
          v75 = v23;
          v72 = v23;
          v73 = v23;
          v70 = v23;
          v71 = v23;
          v68 = v23;
          v69 = v23;
          v66 = v23;
          v67 = v23;
          v65 = v23;
          v64 = v23;
          v63 = v23;
          v62 = v23;
          v61 = v23;
          v60 = v23;
          v59 = v23;
          v58 = v23;
          v57 = v23;
          v56 = v23;
          v55 = v23;
          v54 = v23;
          v53 = v23;
          v52 = v23;
          v51 = v23;
          v50 = v23;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v80 = &v50;
          std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&v47, v25);
          v26 = (char *)v48;
          bzero(v48, (2 * v24) & 0xFFFFFFFFFFFFFFF0);
          v48 = &v26[2 * v24];
          objc_msgSend(*(id *)(a1 + 24), "getCustomAdvances:forIndexes:count:", v47, v81, v25);
          v27 = 0;
          v28 = 0;
          if (v25 <= 1)
            v29 = 1;
          else
            v29 = v25;
          do
          {
            v30 = (uint64_t)v81[v28];
            TStorageRange::SetAdvance((TStorageRange *)a1, v30, *(CGSize *)&v47[v27]);
            objc_msgSend(*(id *)(a1 + 24), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4 * *(_QWORD *)(a1 + 8) + 4 * v30) & 0xFFFFF7FF, *(_QWORD *)(a1 + 8) + v30);
            ++v28;
            v27 += 2;
          }
          while (v29 != v28);
          v46 = (char **)&v47;
          std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v46);
        }
      }
      v47 = (double *)&v81;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v47);
      return;
    }
    v7 = *(_BYTE *)(a1 + 33);
  }
  if ((v7 & 4) != 0)
  {
    if (v6 >= 1)
    {
      for (j = 0; j != v6; ++j)
      {
        v44 = *(_QWORD **)(a1 + 24);
        v45 = *(_QWORD *)(a1 + 8);
        if ((*(_DWORD *)(v44[5] + 4 * v45 + 4 * j) & 0x800) != 0)
        {
          objc_msgSend(v44, "customAdvanceForIndex:", j + v45);
          TStorageRange::SetAdvance((TStorageRange *)a1, j, v87);
          objc_msgSend(*(id *)(a1 + 24), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4 * *(_QWORD *)(a1 + 8) + 4 * j) & 0xFFFFF7FF, j + *(_QWORD *)(a1 + 8));
        }
      }
    }
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 2 * *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v39;
    v79 = v39;
    v76 = v39;
    v77 = v39;
    v74 = v39;
    v75 = v39;
    v72 = v39;
    v73 = v39;
    v70 = v39;
    v71 = v39;
    v68 = v39;
    v69 = v39;
    v66 = v39;
    v67 = v39;
    v65 = v39;
    v64 = v39;
    v63 = v39;
    v62 = v39;
    v61 = v39;
    v60 = v39;
    v59 = v39;
    v58 = v39;
    v57 = v39;
    v56 = v39;
    v55 = v39;
    v54 = v39;
    v53 = v39;
    v52 = v39;
    v51 = v39;
    v50 = v39;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v80 = &v50;
    if (v6)
    {
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&v47, v6);
      v40 = (char *)v48;
      bzero(v48, 16 * v6);
      v48 = &v40[16 * v6];
      TFont::GetAdvancesForGlyphs(a2, v38, v47, 2, v6, 0, x2_0, 0);
      if (v6 >= 1)
      {
        v41 = 0;
        for (k = 0; k != v6; ++k)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4 * *(_QWORD *)(a1 + 8) + 4 * k) & 0x800) != 0)
          {
            TStorageRange::SetAdvance((TStorageRange *)a1, k, *(CGSize *)&v47[v41]);
            objc_msgSend(*(id *)(a1 + 24), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4 * *(_QWORD *)(a1 + 8) + 4 * k) & 0xFFFFF7FF, k + *(_QWORD *)(a1 + 8));
          }
          v41 += 2;
        }
      }
    }
    else
    {
      TFont::GetAdvancesForGlyphs(a2, v38, 0, 2, 0, 0, x2_0, 0);
    }
    v81 = (void **)&v47;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v81);
  }
}

const __CFArray *FontRequiresOpenTypeShaping(const TFont *a1)
{
  const __CFArray *result;
  CFIndex Count;
  CFIndex v4;
  const __CFArray *v5;
  const void *ValueAtIndex;

  result = (const __CFArray *)atomic_load((unint64_t *)a1 + 21);
  if (result)
  {
    Count = CFArrayGetCount(result);
    v4 = Count - 1;
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = (const __CFArray *)atomic_load((unint64_t *)a1 + 21);
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v4);
      return (const __CFArray *)(-[CTFeatureSetting tag]((uint64_t)ValueAtIndex) != 0);
    }
  }
  return result;
}

uint64_t GetOTFeaturesForOptionalLigatures(uint64_t result, char **a2)
{
  __int32 **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int32 v7;
  uint64_t v8;
  unint64_t v9;
  __int32 *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int32 *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;

  v3 = (__int32 **)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = &kMasterFeatureMap;
  v6 = (uint64_t)(a2 + 3);
  do
  {
    if ((*((_BYTE *)v5 + 9) & 1) != 0)
    {
      v7 = *(_DWORD *)v5;
      result = (uint64_t)wmemchr(*v3, *(_DWORD *)v5, (v4 - (uint64_t)*v3) >> 2);
      v8 = result ? result : v4;
      if (v8 != v4)
      {
        v10 = (__int32 *)a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = ((char *)v10 - *a2) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v14 = v9 - (_QWORD)*a2;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          v27 = v6;
          v16 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v6, v15);
          v17 = (__int32 *)&v16[8 * v12];
          *v17 = v7;
          v17[1] = 1;
          v19 = *a2;
          v18 = (unint64_t)a2[1];
          if ((char *)v18 == *a2)
          {
            v22 = vdupq_n_s64(v18);
            v20 = &v16[8 * v12];
          }
          else
          {
            v20 = &v16[8 * v12];
            do
            {
              v21 = *(_QWORD *)(v18 - 8);
              v18 -= 8;
              *((_QWORD *)v20 - 1) = v21;
              v20 -= 8;
            }
            while ((char *)v18 != v19);
            v22 = *(int64x2_t *)a2;
          }
          v11 = (char *)(v17 + 2);
          *a2 = v20;
          a2[1] = (char *)(v17 + 2);
          v25 = v22;
          v23 = a2[2];
          a2[2] = &v16[8 * v15];
          v26 = v23;
          v24 = v22.i64[0];
          result = std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v24);
        }
        else
        {
          *v10 = v7;
          v10[1] = 1;
          v11 = (char *)(v10 + 2);
        }
        a2[1] = v11;
      }
    }
    v5 = (uint64_t *)((char *)v5 + 12);
  }
  while (v5 != (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf);
  return result;
}

uint64_t TTypesetter::GetTabOverflowIndex(TTypesetter *this, const TLine *a2, double a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[4];
  _QWORD v10[3];
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = -1;
  v11 = -1;
  if ((*((_WORD *)this + 76) & 2) != 0)
  {
    v5 = *(_QWORD *)this;
    v9[0] = (uint64_t)this;
    v9[1] = v5;
    v9[2] = 0;
    v9[3] = 0;
    v10[0] = 0;
    *(_QWORD *)((char *)v10 + 6) = 0;
    v10[2] = &v11;
    v13 = 0;
    TTypesetter::FindGraphicalBreak(v9, (CFIndex)a2, (uint64_t)v12, (uint64_t)&v8, 1.79769313e308, a3);
    v6 = v13;
    if (v13 == v12)
    {
      v7 = 4;
      v6 = v12;
    }
    else
    {
      if (!v13)
        return v11;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    return v11;
  }
  return result;
}

CFIndex CTLineGetGlyphCount(CFIndex line)
{
  if (line)
    return TLine::GetNonDeletedGlyphCount(*(TLine **)(line + 40));
  return line;
}

uint64_t CTFontDescriptorGetSymbolicTraits(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;
  const __CFDictionary *SymbolicTraitsFromTraits;
  unint64_t v5;
  id v6;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0 || (v5 = atomic_load((unint64_t *)(v1 + 32))) == 0)
  {
    TDescriptor::CopyAttribute((TDescriptor *)v1, CFSTR("NSCTFontTraitsAttribute"), 5, &v6);
    do
      v2 = (const __CFDictionary *)__ldaxr((unint64_t *)&v6);
    while (__stlxr(0, (unint64_t *)&v6));

    SymbolicTraitsFromTraits = GetSymbolicTraitsFromTraits(v2);
    return (uint64_t)SymbolicTraitsFromTraits;
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 160))(v5);
}

id CTFontCopySystemUIFontExcessiveLineHeightCharacterSet()
{
  if (qword_1ECDE75D8 != -1)
    dispatch_once_f(&qword_1ECDE75D8, 0, (dispatch_function_t)GetExcessiveLineHeightCharacterSet(void)::$_0::__invoke);
  return (id)qword_1ECDE75D0;
}

_QWORD *TCFBase<TRunDelegate>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

BOOL TGlyphIterator::MatchCoverSequence<(MatchDirection)1>(uint64_t a1, uint64_t a2, int a3, unsigned __int16 *a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t GlyphID;
  __int128 v16;
  unsigned int v17;
  unsigned int (*v18)(_QWORD *, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;

  v12 = a2;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  if (TGlyphIterator::PrevContext((TGlyphIterator *)a1, 1))
  {
    v21 = v14;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 48);
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a1, v12);
      v24 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22 = v16;
      v23 = v16;
      v17 = *a4++;
      OTL::Coverage::Coverage((OTL::Coverage *)&v22, (unsigned __int16 *)(a5 + (bswap32(v17) >> 16)), a6, 1);
      v18 = (unsigned int (*)(_QWORD *, uint64_t))v23;
      v19 = (_QWORD *)((char *)&v22 + (*((uint64_t *)&v23 + 1) >> 1));
      if ((BYTE8(v23) & 1) != 0)
        v18 = *(unsigned int (**)(_QWORD *, uint64_t))(*v19 + v23);
      if (!v18(v19, GlyphID))
        break;
      if (!--a3)
        break;
      if ((TGlyphIterator::PrevContext((TGlyphIterator *)a1, 1) & 1) == 0)
      {
        a3 = 1;
        break;
      }
    }
    v14 = v21;
  }
  if (a7)
    *a7 = v12;
  *(_QWORD *)(a1 + 48) = v14;
  return a3 == 0;
}

uint64_t OTL::Coverage::SearchFmt2Linear(OTL::Coverage *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)this + 4;
  v5 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  v6 = __rev16(v5);
  v7 = v4 + 6 * v6;
  if (v7 < v4 || v7 > v3)
  {
    if (v2 + 10 > v3)
      LODWORD(v6) = 0;
    else
      v6 = (v3 - v4) / 6;
    v5 = bswap32(v6) >> 16;
    v6 = (unsigned __int16)v6;
  }
  if (!v5)
    return 0;
  v9 = (unsigned __int16 *)(v2 + 8);
  v10 = 6 * v6;
  while (1)
  {
    if (a2 <= bswap32(*(v9 - 1)) >> 16)
    {
      v11 = bswap32(*(v9 - 2)) >> 16;
      if (v11 <= a2)
        break;
    }
    v9 += 3;
    v10 -= 6;
    if (!v10)
      return 0;
  }
  return a2 - v11 + (bswap32(*v9) >> 16) + 1;
}

_QWORD *TRunGlue::SelectRun(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v4 <= a2)
  {
    v6 = *((_QWORD *)this + 16);
    v4 = *((_QWORD *)this + 2) + v5;
  }
  else
  {
    v6 = v5 - 1;
    *((_QWORD *)this + 21) = 0;
  }
  do
  {
    *((_QWORD *)this + 16) = v6 + 1;
    if (v6 + 1 >= v4)
      break;
    v7 = *(_QWORD *)this;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, v6 + 1)) + 48);
    v9 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 19) = v8;
    *((_QWORD *)this + 20) = v9;
    *((_QWORD *)this + 21) = *(_QWORD *)(v8 + 208) + v9;
    v6 = *((_QWORD *)this + 16);
  }
  while (v6 != a2);
  return TRunGlue::UpdateForCurrentRealRun(this);
}

TRunGlue *TRunGlue::SetRunRange(TRunGlue *this, CFRange a2)
{
  TRunGlue *v2;
  int v4;
  uint64_t v5;

  v2 = this;
  if (a2.location == *((_QWORD *)this + 1) && a2.length == *((_QWORD *)this + 2))
  {
    v4 = *((_DWORD *)this + 6);
    *(CFRange *)((char *)this + 8) = a2;
    *((_QWORD *)this + 4) = -1;
    *((_QWORD *)this + 5) = -1;
    *((_QWORD *)this + 6) = 0;
    if ((v4 & 0x80000000) == 0)
      return this;
  }
  else
  {
    *(CFRange *)((char *)this + 8) = a2;
    *((_QWORD *)this + 4) = -1;
    *((_QWORD *)this + 5) = -1;
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 16) = a2.location;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16)
                             + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, a2.location))
                 + 48);
  *((_QWORD *)v2 + 19) = v5;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 21) = *(_QWORD *)(v5 + 208);
  return (TRunGlue *)TRunGlue::UpdateForCurrentRealRun(v2);
}

TRunGlue *TRunGlue::SelectRunForIndex(TRunGlue *this, uint64_t a2)
{
  TRunGlue *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  if (a2 < 0)
  {
    *((_QWORD *)this + 16) = *((_QWORD *)this + 1) - 1;
    v7 = -1;
LABEL_7:
    *((_QWORD *)v2 + 20) = v7;
    *((_QWORD *)v2 + 21) = v7;
    return this;
  }
  this = (TRunGlue *)TRunGlue::length(this);
  if ((uint64_t)this <= a2)
  {
    *((_QWORD *)v2 + 16) = *((_QWORD *)v2 + 2) + *((_QWORD *)v2 + 1);
    v7 = *((_QWORD *)v2 + 4);
    goto LABEL_7;
  }
  v4 = *((_QWORD *)v2 + 20);
  if (v4 == *((_QWORD *)v2 + 21))
  {
    v5 = *((_QWORD *)v2 + 1);
    v6 = *((_QWORD *)v2 + 2) + v5;
LABEL_10:
    *((_QWORD *)v2 + 16) = v5 - 1;
    *((_QWORD *)v2 + 21) = 0;
    goto LABEL_12;
  }
  if (v4 > a2)
  {
    v6 = *((_QWORD *)v2 + 16);
    v5 = *((_QWORD *)v2 + 1);
    goto LABEL_10;
  }
  v6 = *((_QWORD *)v2 + 2) + *((_QWORD *)v2 + 1);
  do
  {
LABEL_12:
    v8 = *((_QWORD *)v2 + 16) + 1;
    *((_QWORD *)v2 + 16) = v8;
    if (v8 >= v6)
      break;
    v9 = *(_QWORD *)v2;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * TRunGlue::PhysicalRunIndexFromLogical(v2, v8)) + 48);
    v11 = *((_QWORD *)v2 + 21);
    *((_QWORD *)v2 + 19) = v10;
    *((_QWORD *)v2 + 20) = v11;
    v12 = *(_QWORD *)(v10 + 208) + v11;
    *((_QWORD *)v2 + 21) = v12;
  }
  while (v12 <= a2);
  return (TRunGlue *)TRunGlue::UpdateForCurrentRealRun(v2);
}

uint64_t TRunGlue::PhysicalRunIndexFromLogical(TRunGlue *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a2;
  if (*((int *)this + 6) <= 0)
  {
    v4 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 18) + v4;
    if (v4 > a2 || v5 <= a2)
    {
      TRunGlue::InitLevelRange(this);
      v4 = *((_QWORD *)this + 17);
      v5 = *((_QWORD *)this + 18) + v4;
    }
    v7 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2) + v7;
    if (v8 >= v5)
      v9 = v5;
    else
      v9 = *((_QWORD *)this + 2) + v7;
    if (v4 <= v7 && v7 < v5)
    {
      v11 = v9 - v7;
    }
    else if (v7 > v4)
    {
      v7 = 0;
      v11 = 0;
    }
    else
    {
      if (v4 < v8)
        v7 = v4;
      else
        v7 = 0;
      if (v4 < v8)
        v11 = v9 - v4;
      else
        v11 = 0;
    }
    return v11 + ~v2 + 2 * v7;
  }
  return v2;
}

void TCFBase_NEW<CTGlyphRun,TRun const&>(const TRun *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TRun *v6;
  unint64_t v7;
  id v8;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTGlyphRun::CloneEntire;
    v5[8] = CTGlyphRun::CloneRange;
    TRun::TRun(v6, a1);
    v8 = v5;
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t TGlyphEncoder::EncodeChars(TCharStream **a1, CFIndex a2, CFIndex a3, uint64_t a4, int a5)
{
  uint64_t v10;
  _QWORD *v11;
  _CTGlyphStorage *v12;
  TRun *v13;
  CGFloat v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  TParagraphStyle **v18;
  unsigned int BaseWritingDirection;
  uint64_t v20;
  __int16 v21;
  const __CFDictionary *v22;
  const __CFNumber *Value;
  TCharStream **v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t InitializedGraphicsFont;
  TCharStream *v33;
  unsigned __int16 *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  void *v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  int64x2_t *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  const __CFDictionary *v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;
  const __CTFont *v73;
  const __CFString *v74;
  int Glyph;
  uint64_t v76;
  const __CTFont *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  __CFString *v87;
  uint64_t v88;
  uint64_t v89;
  CFIndex v90;
  int64x2_t *v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  void *v95;
  __int128 v96;
  unint64_t v97;
  TCharStream *v98;
  unint64_t v99;
  _BOOL4 v100;
  _WORD **v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  TFont *v111;
  unint64_t v112;
  unsigned int v113;
  __int128 v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  int v121;
  unint64_t v122;
  int64x2_t *v123;
  CGFloat v124;
  CGFloat width;
  TLine *v126;
  TFontCascade *v127;
  TLine *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  double *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t RenderingStyle;
  unint64_t v140;
  int64x2_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  CFIndex v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  TCharStreamIterator *v149;
  CGSize *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  CGFloat v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  int64x2_t *v171;
  CGFloat v172;
  unint64_t v173;
  int64x2_t *v174;
  unint64_t v175;
  TCharStream **v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  CGGlyph glyphs[4];
  id v182[2];
  unsigned __int16 v183;
  id v184;
  uint64_t p_valuePtr;
  CGSize v186;
  uint64_t v187;
  _OWORD v188[4];
  _OWORD *v189;
  __int128 valuePtr;
  _BYTE v191[24];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  _BYTE *v206;
  uint64_t v207;
  CFRange v208;

  v207 = *MEMORY[0x1E0C80C00];
  v180 = (id)0xAAAAAAAAAAAAAAAALL;
  v10 = TCFBase<TRun>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = (_CTGlyphStorage *)*a1;
    v13 = (TRun *)(v10 + 72);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v13;
    v11[6] = v13;
    v11[7] = CTGlyphRun::CloneEntire;
    v11[8] = CTGlyphRun::CloneRange;
    v208.location = a2;
    v208.length = a3;
    TRun::TRun(v13, v208, v12, (const TAttributes *)a4);
    *(_QWORD *)&valuePtr = v11;
    do
      v14 = COERCE_DOUBLE(__ldaxr((unint64_t *)&valuePtr));
    while (__stlxr(0, (unint64_t *)&valuePtr));
    v186.width = v14;

  }
  else
  {
    v186.width = 0.0;
  }
  do
    v15 = (void *)__ldaxr((unint64_t *)&v186);
  while (__stlxr(0, (unint64_t *)&v186));
  v180 = v15;

  if ((*(_WORD *)(a4 + 138) & 8) != 0)
    goto LABEL_14;
  v17 = *(_QWORD *)(a4 + 120);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 66) & 4) != 0)
      goto LABEL_14;
  }
  v18 = *(TParagraphStyle ***)(a4 + 128);
  if (!v18)
    goto LABEL_13;
  BaseWritingDirection = TParagraphStyle::GetBaseWritingDirection(v18, v16);
  if (BaseWritingDirection == 1)
  {
LABEL_14:
    v20 = 2;
    goto LABEL_15;
  }
  if (BaseWritingDirection == 255)
  {
LABEL_13:
    if (GetDefaultWritingDirection() == 1)
      goto LABEL_14;
  }
  v20 = 0;
LABEL_15:
  v21 = *(_WORD *)(a4 + 138);
  if ((v21 & 0x98F6) == 0)
  {
LABEL_72:
    v68 = 0;
LABEL_73:
    v87 = (__CFString *)atomic_load((unint64_t *)(a4 + 24));
    if (*(_BYTE *)(a4 + 50))
    {
      if (a3)
      {
        v88 = *((_QWORD *)*a1 + 6);
        v89 = 8 * a3;
        v90 = a2;
        do
        {
          *(_QWORD *)(v88 + 8 * v90) = v90;
          ++v90;
          v89 -= 8;
        }
        while (v89);
      }
      LOBYTE(v20) = v20 | 8;
      goto LABEL_78;
    }
    *(_QWORD *)&v96 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v96 + 1) = 0xAAAAAAAAAAAAAAAALL;
    valuePtr = v96;
    *(_OWORD *)v191 = v96;
    v97 = atomic_load((unint64_t *)&v180);
    v98 = *a1;
    *(_QWORD *)&valuePtr = a1 + 1;
    *((_QWORD *)&valuePtr + 1) = v98;
    *(_QWORD *)v191 = a2;
    *(_QWORD *)&v191[8] = a3;
    *(_QWORD *)&v191[16] = v97;
    v99 = atomic_load((unint64_t *)(a4 + 16));
    if (v87)
      v100 = 1;
    else
      v100 = TFont::ShapesPreferredLanguage(*(TFont **)(v99 + 40));
    v121 = TASCIIEncoder::Encode((TASCIIEncoder *)&valuePtr, v100);
    LODWORD(v20) = v121 | v20;
    if ((((int)v20 < 4) & ~v68) == 0)
    {
      if ((v121 & 0x10) != 0)
      {
        v122 = atomic_load((unint64_t *)&v180);
        *(_BYTE *)(*(_QWORD *)(v122 + 48) + 225) |= 8u;
      }
LABEL_78:
      v91 = (int64x2_t *)a1[25];
      v92 = (v91[1].i64[1] - v91[1].i64[0]) >> 3;
      if ((v20 & 8) != 0)
      {
        *(_QWORD *)&v94 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v205 = v94;
        v204 = v94;
        v203 = v94;
        v202 = v94;
        v201 = v94;
        v200 = v94;
        v199 = v94;
        v198 = v94;
        v197 = v94;
        v196 = v94;
        v195 = v94;
        v194 = v94;
        v193 = v94;
        v192 = v94;
        *(_OWORD *)&v191[8] = v94;
        valuePtr = 0uLL;
        *(_QWORD *)v191 = 0;
        v206 = &v191[8];
        v186.width = -3.72066208e-103;
        if ((*(_WORD *)(a4 + 138) & 0x200) != 0)
        {
          TAttributes::OriginalFont((TAttributes *)a4, (unint64_t *)&v186);
        }
        else
        {
          v95 = (void *)atomic_load((unint64_t *)(a4 + 16));
          *(_QWORD *)&v186.width = v95;
        }
        v182[0] = 0;
        v101 = (_WORD **)atomic_load((unint64_t *)&v186);
        v102 = TGlyphEncoder::RunUnicodeEncoderRecursively(a1, 0, (unint64_t *)&v180, v101, a2, a3, (char **)&valuePtr, a5, (TFontCascade **)v182, v87, 0, 1);
        v103 = *((_QWORD *)a1[25] + 3) - *((_QWORD *)a1[25] + 2);
        v104 = v92 + 1;
        if (v92 + 1 < v103 >> 3)
        {
          v105 = v103 >> 3;
          v106 = v92;
          do
          {
            v107 = *((_QWORD *)a1[25] + 2);
            v108 = *(_QWORD *)(*(_QWORD *)(v107 + 8 * v106) + 40);
            v109 = *(_QWORD *)(*(_QWORD *)(v107 + 8 * v104) + 40);
            if (*(_QWORD *)(v108 + 216) == *(_QWORD *)(v109 + 216))
            {
              v110 = atomic_load((unint64_t *)(v108 + 56));
              v111 = *(TFont **)(v110 + 40);
              v112 = atomic_load((unint64_t *)(v109 + 56));
              if (TFont::operator==(v111, *(TFont **)(v112 + 40)))
              {
                v113 = TLine::AbsorbRunFollowing(a1[25], v106);
                if (v113)
                  v104 = v106;
                v105 -= v113;
              }
            }
            v106 = v104++;
          }
          while (v104 < v105);
        }
        LOBYTE(v20) = v102 | v20;
        if ((_QWORD)valuePtr != *((_QWORD *)&valuePtr + 1))
        {
          LOBYTE(p_valuePtr) = -86;
          std::__sort<std::__less<long,long> &,long *>();
          v114 = valuePtr;
          if ((_QWORD)valuePtr != *((_QWORD *)&valuePtr + 1))
          {
            v115 = (uint64_t *)(valuePtr + 8);
            while (v115 != *((uint64_t **)&valuePtr + 1))
            {
              v116 = *(v115 - 1);
              v117 = *v115++;
              if (v116 == v117)
              {
                v118 = v115 - 2;
                while (v115 != *((uint64_t **)&v114 + 1))
                {
                  v119 = v116;
                  v116 = *v115;
                  if (v119 != *v115)
                  {
                    v118[1] = v116;
                    ++v118;
                  }
                  ++v115;
                }
                v120 = v118 + 1;
                goto LABEL_114;
              }
            }
          }
          v120 = (_QWORD *)*((_QWORD *)&valuePtr + 1);
LABEL_114:
          if (*((_QWORD **)&v114 + 1) != v120)
            *((_QWORD *)&valuePtr + 1) = v120;
          v126 = a1[25];
          if (a2)
            TLine::DeleteChars((uint64_t)v126, (uint64_t)((uint64_t)v120 - v114) >> 3, (const uint64_t *)v114);
          else
            TLine::DeleteGlyphs(v126, 0, (uint64_t)((uint64_t)v120 - v114) >> 3, (const uint64_t *)v114);
          LOBYTE(v20) = v20 | 0x10;
        }
        v127 = (TFontCascade *)v182[0];
        v182[0] = 0;
        if (v127)
        {
          TFontCascade::~TFontCascade(v127);
          MEMORY[0x186DC03AC]();
        }

        *(_QWORD *)&v186.width = &valuePtr;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v186);
        if (!v68)
          goto LABEL_182;
      }
      else
      {
        do
          v93 = __ldaxr((unint64_t *)&v180);
        while (__stlxr(0, (unint64_t *)&v180));
        *(_QWORD *)&valuePtr = v93;
        TLine::AppendRun(v91, (unint64_t *)&valuePtr);

        if (!v68)
          goto LABEL_182;
      }
      v128 = a1[25];
      v129 = *((_QWORD *)v128 + 3) - *((_QWORD *)v128 + 2);
      if (v92 < v129 >> 3)
      {
        v130 = v129 >> 3;
        do
        {
          v131 = *(unint64_t **)(*(_QWORD *)(*((_QWORD *)a1[25] + 2) + 8 * v92) + 48);
          v132 = v131[25];
          v133 = v131[26];
          v134 = v131[27];
          v135 = *(_QWORD *)(v134 + 16) + 2 * v132;
          v136 = (double *)(*(_QWORD *)(v134 + 24) + 8 * v132);
          v137 = atomic_load(v131 + 7);
          v138 = *(_QWORD *)(v137 + 40);
          RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v131 + 5));
          TFont::GetAdvancesForGlyphs(v138, v135, v136, 1, v133, 0, RenderingStyle, 0);
          v131[24] = v140;
          ++v92;
        }
        while (v130 != v92);
        v128 = a1[25];
      }
      TLine::SyncWithRuns(v128);
      goto LABEL_182;
    }
    v123 = (int64x2_t *)a1[25];
    do
      v124 = COERCE_DOUBLE(__ldaxr((unint64_t *)&v180));
    while (__stlxr(0, (unint64_t *)&v180));
    v186.width = v124;
    TLine::AppendRun(v123, (unint64_t *)&v186);
    width = v186.width;
LABEL_170:

LABEL_182:
    return (char)v20;
  }
  v179 = a2;
  if ((v21 & 0x30) != 0)
  {
    if ((v21 & 0x10) != 0)
    {
      v22 = (const __CFDictionary *)atomic_load((unint64_t *)a4);
      Value = (const __CFNumber *)CFDictionaryGetValue(v22, CFSTR("CTImposedGlyph"));
      LOWORD(valuePtr) = -21846;
      CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
      if ((_WORD)valuePtr)
      {
        v24 = a1;
        v183 = valuePtr;
        v25 = atomic_load((unint64_t *)&v180);
        v26 = *(_QWORD *)(v25 + 48);
        v27 = atomic_load((unint64_t *)(v26 + 56));
        v28 = *(_QWORD *)(v27 + 40);
        v29 = v183;
        v30 = *(_QWORD **)(v28 + 400);
        v31 = v30[25];
        if (!v31)
        {
          InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v28 + 400));
          v31 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v30 + 872))(v30, InitializedGraphicsFont);
        }
        if (v31 > v29)
        {
          v182[0] = (id)-1;
          v182[1] = (id)-1;
          TFont::GetUnsummedAdvancesForGlyphs(v28, (uint64_t)&v183, (double *)v182, 2, 1, 0, 0);
          v33 = *v24;
          v34 = (unsigned __int16 *)(*((_QWORD *)*v24 + 2) + 2 * v179);
          if (a3 >= 1)
          {
            v35 = a3 + 1;
            v36 = (unsigned __int16 *)(*((_QWORD *)*v24 + 2) + 2 * v179);
            do
            {
              *v36++ = v183;
              --v35;
            }
            while (v35 > 1);
          }
          if (a3)
          {
            v37 = *((_QWORD *)v33 + 6);
            v38 = 8 * a3;
            v39 = v179;
            do
            {
              *(_QWORD *)(v37 + 8 * v39) = v39;
              ++v39;
              v38 -= 8;
            }
            while (v38);
          }
          *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v188[3] = v40;
          v188[2] = v40;
          v188[1] = v40;
          v188[0] = v40;
          v186.height = 0.0;
          v187 = 0;
          v186.width = 0.0;
          v189 = v188;
          v41 = TCharStream::LazyCopyChars(v24[1], v179, a3);
          v42 = (id *)(*((_QWORD *)*v24 + 3) + 8 * v179);
          v43 = *((_QWORD *)*v24 + 5);
          *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v205 = v44;
          v45 = v43 + 4 * v179;
          v204 = v44;
          v203 = v44;
          v202 = v44;
          v201 = v44;
          v200 = v44;
          v199 = v44;
          v198 = v44;
          v197 = v44;
          v196 = v44;
          v195 = v44;
          v194 = v44;
          v193 = v44;
          v192 = v44;
          *(_OWORD *)&v191[8] = v44;
          valuePtr = 0uLL;
          *(_QWORD *)v191 = 0;
          v206 = &v191[8];
          v184 = 0;
          p_valuePtr = (uint64_t)&valuePtr;
          v46 = TUnicodeEncoder::EncodePortion((char ***)&p_valuePtr, 0, v41, a3, *(_QWORD *)(v28 + 400), 0, (uint64_t)v34, (uint64_t)v42, 1, v45, (double *)&v184, 0);
          v47 = v46;
          if (a3 >= 1 && (v46 & 0x10) != 0)
          {
            v48 = a3 + 1;
            do
            {
              *v34++ = v183;
              --v48;
            }
            while (v48 > 1);
            v49 = a3 + 1;
            v50 = (_DWORD *)v45;
            do
            {
              *v50++ &= ~0x20u;
              --v49;
            }
            while (v49 > 1);
          }
          if (a3)
          {
            v51 = 4 * a3;
            v52 = (_BYTE *)v45;
            while ((*v52 & 4) == 0)
            {
              v52 += 4;
              v51 -= 4;
              if (!v51)
                goto LABEL_174;
            }
          }
          else
          {
            v52 = (_BYTE *)v45;
          }
          if (v52 != (_BYTE *)(v45 + 4 * a3))
            *(_BYTE *)(v26 + 225) |= 1u;
LABEL_174:
          if (a3 >= 1)
          {
            v173 = a3 + 1;
            do
            {
              *v42++ = v182[0];
              --v173;
            }
            while (v173 > 1);
          }
          *(double *)(v26 + 192) = *(double *)v182 * (double)a3;
          if ((_QWORD)valuePtr != *((_QWORD *)&valuePtr + 1))
            TRun::DeleteGlyphs((TRun *)v26, (uint64_t)(*((_QWORD *)&valuePtr + 1) - valuePtr) >> 3, (char *)valuePtr, v179);
          v174 = (int64x2_t *)v24[25];
          do
            v175 = __ldaxr((unint64_t *)&v180);
          while (__stlxr(0, (unint64_t *)&v180));
          *(_QWORD *)glyphs = v175;
          TLine::AppendRun(v174, (unint64_t *)glyphs);

          p_valuePtr = (uint64_t)&valuePtr;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_valuePtr);
          *(_QWORD *)&valuePtr = &v186;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
          LOBYTE(v20) = v20 | v47 & 0xEE | 1;
          goto LABEL_182;
        }
        a1 = v24;
        a2 = v179;
      }
    }
    v69 = (const __CFDictionary *)atomic_load((unint64_t *)a4);
    v70 = (void *)CFDictionaryGetValue(v69, CFSTR("NSGlyphInfo"));
    if (v70)
    {
      TGlyphInfo::TGlyphInfo((TGlyphInfo *)v182, v70);
      v184 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TCharStream *, CFIndex, CFIndex))(*(_QWORD *)a1[1] + 16))(&v184, a1[1], a2, a3);
      v71 = atomic_load((unint64_t *)&v180);
      v72 = *(_QWORD *)(v71 + 48);
      glyphs[0] = -21846;
      v73 = (const __CTFont *)atomic_load((unint64_t *)(v72 + 56));
      v74 = (const __CFString *)atomic_load((unint64_t *)&v184);
      Glyph = TGlyphInfo::GetGlyph((TGlyphInfo *)v182, v73, v74);
      glyphs[0] = Glyph;
      if (Glyph)
      {
        v76 = *((_QWORD *)*a1 + 6);
        *(_WORD *)(*((_QWORD *)*a1 + 2) + 2 * a2) = Glyph;
        v186.width = NAN;
        v186.height = NAN;
        v77 = (const __CTFont *)atomic_load((unint64_t *)(v72 + 56));
        CTFontGetAdvancesForGlyphs(v77, kCTFontOrientationDefault, glyphs, &v186, 1);
        -[TCharStream setAdvance:atIndex:](*a1, "setAdvance:atIndex:", a2, v186.width, v186.height);
        if (a3)
        {
          v78 = 8 * a3;
          v79 = 8 * a3;
          do
          {
            *(_QWORD *)(v76 + 8 * a2) = a2;
            ++a2;
            v79 -= 8;
          }
          while (v79);
          *(CGFloat *)(v72 + 192) = v186.width;
          if (a3 >= 2)
          {
            *(_QWORD *)&v80 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v80 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v205 = v80;
            v81 = a3 - 1;
            v204 = v80;
            v203 = v80;
            v202 = v80;
            v201 = v80;
            v200 = v80;
            v199 = v80;
            v198 = v80;
            v197 = v80;
            v196 = v80;
            v195 = v80;
            v194 = v80;
            v193 = v80;
            v192 = v80;
            *(_OWORD *)&v191[8] = v80;
            valuePtr = 0uLL;
            *(_QWORD *)v191 = 0;
            v206 = &v191[8];
            std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&valuePtr, a3 - 1);
            v82 = *((_QWORD *)&valuePtr + 1);
            bzero(*((void **)&valuePtr + 1), v78 - 8);
            v83 = (_QWORD *)(v82 + 8 * v81);
            *((_QWORD *)&valuePtr + 1) = v83;
            v84 = (char *)valuePtr;
            if ((_QWORD *)valuePtr != v83)
            {
              v85 = 1;
              v86 = (_QWORD *)valuePtr;
              do
                *v86++ = v85++;
              while (v86 != v83);
            }
            TRun::DeleteGlyphs((TRun *)v72, v81, v84, *((_QWORD *)a1[25] + 9));
            p_valuePtr = (uint64_t)&valuePtr;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_valuePtr);
          }
        }
        else
        {
          *(CGFloat *)(v72 + 192) = v186.width;
        }
        v141 = (int64x2_t *)a1[25];
        do
          v142 = __ldaxr((unint64_t *)&v180);
        while (__stlxr(0, (unint64_t *)&v180));
        *(_QWORD *)&valuePtr = v142;
        TLine::AppendRun(v141, (unint64_t *)&valuePtr);

        LOBYTE(v20) = v20 | 1;
        goto LABEL_182;
      }

    }
    goto LABEL_72;
  }
  v182[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v53 = atomic_load((unint64_t *)&v180);
  TGlyphEncoder::CreateSpecialRun((unint64_t *)v182, (uint64_t)a1, v53, *(_WORD *)(a4 + 138));
  if (atomic_load((unint64_t *)v182))
  {
    v55 = (void *)atomic_load((unint64_t *)v182);
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v180, v55);
    v56 = *(_WORD *)(a4 + 138);
    if ((v56 & 0x40) != 0 && a3 == 1)
    {
      if (TCharStreamIterator::GetChar((TCharStreamIterator *)(a1 + 1), a2) == 65532)
      {
        v57 = atomic_load((unint64_t *)&v180);
        v58 = *(_QWORD *)(v57 + 48);
        v59 = atomic_load((unint64_t *)&v180);
        v60 = atomic_load((unint64_t *)(*(_QWORD *)(v59 + 40) + 56));
        v61 = *(unsigned __int16 *)TBaseFont::GetCachedSpaceAndJoinerGlyphs(*(TBaseFont **)(*(_QWORD *)(v60 + 40) + 400), 0);
        if (v61 <= 1)
          v62 = 1;
        else
          v62 = v61;
        objc_msgSend(*(id *)(v58 + 216), "setGlyph:atIndex:", v62, *(_QWORD *)(v58 + 200));
        v63 = *(_BYTE *)(v58 + 225);
        if ((_DWORD)v62 == 0xFFFF && (v63 & 2) != 0)
          *(_BYTE *)(v58 + 225) = v63 | 8;
        objc_msgSend(*(id *)(v58 + 216), "setStringIndex:atIndex:", a2, *(_QWORD *)(v58 + 200));
        v65 = (int64x2_t *)a1[25];
        do
          v66 = __ldaxr((unint64_t *)&v180);
        while (__stlxr(0, (unint64_t *)&v180));
        *(_QWORD *)&valuePtr = v66;
        TLine::AppendRun(v65, (unint64_t *)&valuePtr);

LABEL_169:
        width = *(double *)v182;
        goto LABEL_170;
      }
      if ((*(_WORD *)(a4 + 138) & 4) == 0)
        goto LABEL_133;
    }
    else
    {
      if ((v56 & 4) == 0)
      {
LABEL_133:
        v68 = 0;
        goto LABEL_134;
      }
      if (!a3)
      {
LABEL_137:
        *(_QWORD *)&v146 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v146 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v205 = v146;
        v204 = v146;
        v203 = v146;
        v202 = v146;
        v201 = v146;
        v200 = v146;
        v199 = v146;
        v198 = v146;
        v197 = v146;
        v196 = v146;
        v195 = v146;
        v194 = v146;
        v193 = v146;
        v192 = v146;
        *(_OWORD *)&v191[8] = v146;
        valuePtr = 0uLL;
        *(_QWORD *)v191 = 0;
        v206 = &v191[8];
        v147 = atomic_load((unint64_t *)&v180);
        v148 = *(_QWORD *)(v147 + 48);
        p_valuePtr = a2;
        v177 = a1;
        if (a3 >= 1)
        {
          v178 = a3 + a2;
          v149 = (TCharStreamIterator *)(a1 + 1);
          v150 = (CGSize *)MEMORY[0x1E0C9D820];
          v151 = a2;
          do
          {
            v152 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v149 + 40))(*(_QWORD *)v149, v151, 2);
            v154 = v152 + v153;
            if (v151 < v152 + v153)
            {
              v155 = v152;
              do
              {
                if (v151 != v155)
                {
                  v156 = v151 - a2;
                  objc_msgSend(*(id *)(v148 + 216), "setGlyph:atIndex:", 0xFFFFLL, *(_QWORD *)(v148 + 200) + v156);
                  if ((*(_BYTE *)(v148 + 225) & 2) != 0)
                    *(_BYTE *)(v148 + 225) |= 8u;
                  TStorageRange::SetAdvance((TStorageRange *)(v148 + 192), v156, *v150);
                  objc_msgSend(*(id *)(v148 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 216) + 40) + 4 * *(_QWORD *)(v148 + 200) + 4 * v156) | 0x20u, *(_QWORD *)(v148 + 200) + v156);
                  v20 = v20 | 0x10;
                }
                if (!((TCharStreamIterator::GetFullChar(v149, &p_valuePtr, 0) - 0x10000) >> 20))
                {
                  v157 = v20;
                  v158 = *((_QWORD *)&valuePtr + 1);
                  if (*((_QWORD *)&valuePtr + 1) >= *(_QWORD *)v191)
                  {
                    v160 = *(double *)&valuePtr;
                    v161 = (uint64_t)(*((_QWORD *)&valuePtr + 1) - valuePtr) >> 3;
                    v162 = v161 + 1;
                    if ((unint64_t)(v161 + 1) >> 61)
                      abort();
                    v163 = *(_QWORD *)v191 - valuePtr;
                    if ((uint64_t)(*(_QWORD *)v191 - valuePtr) >> 2 > v162)
                      v162 = v163 >> 2;
                    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
                      v164 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v164 = v162;
                    *((_QWORD *)&v188[0] + 1) = &v191[8];
                    if (v164)
                    {
                      v165 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v191[8], v164);
                      v158 = *((_QWORD *)&valuePtr + 1);
                      v160 = *(double *)&valuePtr;
                    }
                    else
                    {
                      v165 = 0;
                    }
                    v166 = (uint64_t *)&v165[8 * v161];
                    *v166 = p_valuePtr;
                    if (v158 == *(_QWORD *)&v160)
                    {
                      v168 = &v165[8 * v161];
                    }
                    else
                    {
                      v167 = v158;
                      v168 = &v165[8 * v161];
                      do
                      {
                        v169 = *(_QWORD *)(v167 - 8);
                        v167 -= 8;
                        *((_QWORD *)v168 - 1) = v169;
                        v168 -= 8;
                      }
                      while (v167 != *(_QWORD *)&v160);
                    }
                    v159 = v166 + 1;
                    *(_QWORD *)&valuePtr = v168;
                    *((_QWORD *)&valuePtr + 1) = v166 + 1;
                    v170 = *(_QWORD *)v191;
                    *(_QWORD *)v191 = &v165[8 * v164];
                    v187 = v158;
                    *(_QWORD *)&v188[0] = v170;
                    v186.width = v160;
                    v186.height = v160;
                    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v186);
                  }
                  else
                  {
                    **((_QWORD **)&valuePtr + 1) = p_valuePtr;
                    v159 = (_QWORD *)(v158 + 8);
                  }
                  *((_QWORD *)&valuePtr + 1) = v159;
                  v20 = v157;
                  a2 = v179;
                }
                v151 = p_valuePtr + 1;
                p_valuePtr = v151;
              }
              while (v151 < v154);
            }
          }
          while (v151 < v178);
        }
        v171 = (int64x2_t *)v177[25];
        do
          v172 = COERCE_DOUBLE(__ldaxr((unint64_t *)&v180));
        while (__stlxr(0, (unint64_t *)&v180));
        v186.width = v172;
        TLine::AppendRun(v171, (unint64_t *)&v186);

        TLine::DeleteChars((uint64_t)v177[25], (uint64_t)(*((_QWORD *)&valuePtr + 1) - valuePtr) >> 3, (const uint64_t *)valuePtr);
        *(_QWORD *)&v186.width = &valuePtr;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v186);
        goto LABEL_169;
      }
    }
    v143 = *((_QWORD *)*a1 + 6);
    v144 = 8 * a3;
    v145 = a2;
    do
    {
      *(_QWORD *)(v143 + 8 * v145) = v145;
      ++v145;
      v144 -= 8;
    }
    while (v144);
    goto LABEL_137;
  }
  v67 = TAttributes::GetRenderingStyle((TAttributes *)a4);
  if ((v67 & 0xFF00000000) != 0)
  {
    v68 = (~(_BYTE)v67 & 5) != 0;
LABEL_134:

    goto LABEL_73;
  }
  std::__throw_bad_optional_access[abi:nn180100]();
  return TCFBase<TRun>::Allocate();
}

uint64_t TCFBase<TRun>::Allocate()
{
  if (TCFBase<TRun>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRun>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRun>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

uint64_t GetDefaultWritingDirection(void)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___Z26GetDefaultWritingDirectionv_block_invoke;
  block[3] = &__block_descriptor_33_8_32c40_ZTSKZ26GetDefaultWritingDirectionvE3__0_e5_v8__0l;
  if (qword_1ECDE7538 != -1)
    dispatch_once(&qword_1ECDE7538, block);
  return _MergedGlobals_10;
}

void TTypesetter::FillLine(const TLine **a1, TLine *this, CFRange a3, double a4, double a5)
{
  TLine::CopyStringRange(this, *a1, a3);
  if (*((_WORD *)this + 76))
    TTypesetter::FinishLineFill((uint64_t)a1, (uint64_t)this, a4, a5);
}

void TLine::CopyStringRange(TLine *this, const TLine *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  BOOL v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t RunWithCharIndex;
  CFIndex v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  BOOL v27;
  CFIndex v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFIndex v44;
  uint64_t v45;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  void **v76;
  void **v77;
  void **v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  void **v85;
  char *v86;
  uint64_t v87;
  void **v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  BOOL v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _OWORD v111[2];
  unint64_t v112;
  __int128 v113;
  void **v114[5];
  void **v115;
  char *v116;
  void **v117;
  _OWORD v118[15];
  _OWORD *v119;
  unint64_t v120;
  char *v121;
  char *v122;
  _OWORD v123[15];
  _OWORD *v124;
  uint64_t v125;

  length = a3.length;
  location = a3.location;
  v125 = *MEMORY[0x1E0C80C00];
  v7 = a3.location == *((_QWORD *)a2 + 9) && a3.length == *((_QWORD *)a2 + 10);
  if (v7 && (*((_WORD *)a2 + 76) & 1) == 0)
  {
    TLine::operator=((uint64_t)this, (uint64_t)a2);
    return;
  }
  v8 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v113 = *(_QWORD *)a2;
  *((_QWORD *)&v113 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)this, &v113);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *((_QWORD *)this + 9) = location;
  *((_QWORD *)this + 10) = length;
  if ((*((_BYTE *)a2 + 155) & 1) != 0)
    *((_WORD *)this + 77) |= 0x100u;
  v14 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if (v14 && length)
  {
    v15 = *((_WORD *)a2 + 77);
    if ((v15 & 0x20) != 0)
    {
      *((_WORD *)this + 77) |= 0x20u;
      v15 = *((_WORD *)a2 + 77);
    }
    v16 = v14 >> 3;
    if ((v15 & 0x40) != 0)
    {
      if ((v15 & 0x80) != 0)
        *((_WORD *)this + 77) |= 0x80u;
      memset(v111, 0, sizeof(v111));
      v112 = 0xAAAAAAAA3F800000;
      *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v123[14] = v36;
      v123[13] = v36;
      v123[12] = v36;
      v123[11] = v36;
      v123[10] = v36;
      v123[9] = v36;
      v123[8] = v36;
      v123[7] = v36;
      v123[6] = v36;
      v123[5] = v36;
      v123[4] = v36;
      v123[3] = v36;
      v123[2] = v36;
      v123[1] = v36;
      v123[0] = v36;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v124 = v123;
      if (v14 >= 1)
      {
        v37 = 0;
        v38 = location + length;
        if (v16 <= 1)
          v39 = 1;
        else
          v39 = v14 >> 3;
        do
        {
          v40 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v37);
          v41 = *(_QWORD *)(v40 + 40);
          v114[0] = (void **)v41;
          v43 = *(_QWORD *)(v41 + 8);
          v42 = *(_QWORD *)(v41 + 16);
          v44 = v42 + v43;
          if (v42 + v43 >= v38)
            v45 = v38;
          else
            v45 = v42 + v43;
          if (location <= v43 && v43 < v38)
          {
            v48 = v45 - v43;
          }
          else if (v43 <= location && location < v44)
          {
            v48 = v45 - location;
            v43 = location;
          }
          else
          {
            v43 = 0;
            v48 = 0;
          }
          if (v48 < 1)
          {
            if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
            {
              v49 = v121;
              if (v121 >= v122)
              {
                v51 = (char *)v120;
                v52 = (uint64_t)&v121[-v120] >> 3;
                v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 61)
LABEL_164:
                  abort();
                v54 = (uint64_t)&v122[-v120];
                if ((uint64_t)&v122[-v120] >> 2 > v53)
                  v53 = v54 >> 2;
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                  v55 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v55 = v53;
                *((_QWORD *)&v118[0] + 1) = v123;
                if (v55)
                {
                  v56 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v123, v55);
                  v51 = (char *)v120;
                  v49 = v121;
                }
                else
                {
                  v56 = 0;
                }
                v57 = &v56[8 * v52];
                *(_QWORD *)v57 = v37;
                if (v49 == v51)
                {
                  v59 = &v56[8 * v52];
                }
                else
                {
                  v58 = v49;
                  v59 = &v56[8 * v52];
                  do
                  {
                    v60 = *((_QWORD *)v58 - 1);
                    v58 -= 8;
                    *((_QWORD *)v59 - 1) = v60;
                    v59 -= 8;
                  }
                  while (v58 != v51);
                }
                v50 = v57 + 8;
                v120 = (unint64_t)v59;
                v121 = v57 + 8;
                v61 = v122;
                v122 = &v56[8 * v55];
                v117 = (void **)v49;
                *(_QWORD *)&v118[0] = v61;
                v115 = (void **)v51;
                v116 = v51;
                std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v115);
              }
              else
              {
                *(_QWORD *)v121 = v37;
                v50 = v49 + 8;
              }
              v121 = v50;
            }
          }
          else
          {
            std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__emplace_unique_key_args<TRun const*,std::piecewise_construct_t const&,std::tuple<TRun const* const&>,std::tuple<>>((uint64_t)v111, v41, v114)[3] = v37;
            TLine::InsertPartialRun(this, (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3, v40, v43, v48);
          }
          ++v37;
        }
        while (v37 != v39);
      }
      v62 = *((_QWORD *)this + 2);
      v63 = *((_QWORD *)this + 3);
      if (v62 == v63)
        goto LABEL_162;
      *(_QWORD *)&v64 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v118[14] = v64;
      v118[13] = v64;
      v118[12] = v64;
      v118[11] = v64;
      v118[10] = v64;
      v118[9] = v64;
      v118[8] = v64;
      v118[7] = v64;
      v118[6] = v64;
      v118[5] = v64;
      v118[4] = v64;
      v118[3] = v64;
      v118[2] = v64;
      v118[1] = v64;
      v118[0] = v64;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v119 = v118;
      std::vector<long,TInlineBufferAllocator<long,30ul>>::reserve((char **)&v115, (v63 - v62) >> 3);
      v65 = *((_QWORD *)a2 + 11);
      v110 = v65;
      if (!v65)
        goto LABEL_134;
LABEL_98:
      if (!*((_QWORD *)&v111[0] + 1))
        goto LABEL_133;
      v66 = 0x9DDFEA08EB382D69 * (((8 * v65) + 8) ^ HIDWORD(v65));
      v67 = 0x9DDFEA08EB382D69 * (HIDWORD(v65) ^ (v66 >> 47) ^ v66);
      v68 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
      v69 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v111 + 8));
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] > 1uLL)
      {
        v70 = v68;
        if (v68 >= *((_QWORD *)&v111[0] + 1))
          v70 = v68 % *((_QWORD *)&v111[0] + 1);
      }
      else
      {
        v70 = v68 & (*((_QWORD *)&v111[0] + 1) - 1);
      }
      v71 = *(_QWORD **)(*(_QWORD *)&v111[0] + 8 * v70);
      if (!v71)
        goto LABEL_133;
      v72 = (_QWORD *)*v71;
      if (!v72)
        goto LABEL_133;
      while (1)
      {
        v73 = v72[1];
        if (v73 == v68)
        {
          if (v72[2] == v65)
          {
            v74 = std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__emplace_unique_key_args<TRun const*,std::piecewise_construct_t const&,std::tuple<TRun const* const&>,std::tuple<>>((uint64_t)v111, v65, &v110);
            v75 = v74;
            v76 = (void **)v116;
            if (v116 < (char *)v117)
            {
              *(_QWORD *)v116 = v74[3];
              v77 = v76 + 1;
              goto LABEL_132;
            }
            v78 = v115;
            v79 = (v116 - (char *)v115) >> 3;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61)
              goto LABEL_164;
            v81 = (char *)v117 - (char *)v115;
            if (((char *)v117 - (char *)v115) >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            v114[4] = (void **)v118;
            if (v82)
            {
              v83 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v118, v82);
              v78 = v115;
              v76 = (void **)v116;
            }
            else
            {
              v83 = 0;
            }
            v84 = &v83[8 * v79];
            *(_QWORD *)v84 = v75[3];
            if (v76 == v78)
            {
              v86 = &v83[8 * v79];
            }
            else
            {
              v85 = v76;
              v86 = &v83[8 * v79];
              do
              {
                v87 = (uint64_t)*--v85;
                *((_QWORD *)v86 - 1) = v87;
                v86 -= 8;
              }
              while (v85 != v78);
            }
            v77 = (void **)(v84 + 8);
            v115 = (void **)v86;
            v116 = v84 + 8;
            v88 = v117;
            v117 = (void **)&v83[8 * v82];
            v114[2] = v76;
            v114[3] = v88;
            v114[0] = v78;
            v114[1] = v78;
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v114);
LABEL_132:
            v116 = (char *)v77;
LABEL_133:
            v65 = *(_QWORD *)(v65 + 24);
            v110 = v65;
            if (!v65)
            {
LABEL_134:
              v89 = (char *)v120;
              v90 = v121;
              if ((char *)v120 != v121)
              {
                v91 = v121 - 8;
                if ((unint64_t)(v121 - 8) > v120)
                {
                  v92 = v120 + 8;
                  do
                  {
                    v93 = *(_QWORD *)(v92 - 8);
                    *(_QWORD *)(v92 - 8) = *(_QWORD *)v91;
                    *(_QWORD *)v91 = v93;
                    v91 -= 8;
                    v94 = v92 >= (unint64_t)v91;
                    v92 += 8;
                  }
                  while (!v94);
                }
              }
              v96 = (char *)v115;
              v95 = v116;
              while (v89 != v90)
              {
                if (v96 != v95)
                {
                  v97 = *(_QWORD *)v89;
                  v98 = v96;
                  do
                  {
                    if (*(_QWORD *)v98 > v97)
                      --*(_QWORD *)v98;
                    v98 += 8;
                  }
                  while (v98 != v95);
                }
                v89 += 8;
              }
              v99 = v96 + 8;
              v100 = v96;
              if (v96 != v95)
              {
                v100 = v96;
                if (v99 != v95)
                {
                  v101 = *(_QWORD *)v96;
                  v102 = v96 + 8;
                  v100 = v96;
                  v103 = v96 + 8;
                  do
                  {
                    v105 = *(_QWORD *)v103;
                    v103 += 8;
                    v104 = v105;
                    if (v105 < v101)
                    {
                      v101 = v104;
                      v100 = v102;
                    }
                    v102 = v103;
                  }
                  while (v103 != v95);
                }
              }
              if (v96 != v95)
              {
                v106 = *(_QWORD *)v100;
                if (v106)
                {
                  v107 = v96;
                  do
                  {
                    *(_QWORD *)v107 -= v106;
                    v107 += 8;
                  }
                  while (v107 != v95);
                }
              }
              if (v96 != v95)
              {
                while (v99 != v95)
                {
                  v109 = *((_QWORD *)v99 - 1);
                  v108 = *(_QWORD *)v99;
                  v99 += 8;
                  if (v108 < v109)
                  {
                    *((_WORD *)this + 77) |= 0x40u;
                    break;
                  }
                }
              }
              TLine::LinkRunsWithOrder(this, (uint64_t *)&v115);
              v114[0] = (void **)&v115;
              std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](v114);
LABEL_162:
              v115 = (void **)&v120;
              std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v115);
              std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v111);
              return;
            }
            goto LABEL_98;
          }
        }
        else
        {
          if (v69.u32[0] > 1uLL)
          {
            if (v73 >= *((_QWORD *)&v111[0] + 1))
              v73 %= *((_QWORD *)&v111[0] + 1);
          }
          else
          {
            v73 &= *((_QWORD *)&v111[0] + 1) - 1;
          }
          if (v73 != v70)
            goto LABEL_133;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_133;
      }
    }
    RunWithCharIndex = TLine::FindRunWithCharIndex(a2, location, 1);
    if (RunWithCharIndex >= v16)
      return;
    v18 = location + length;
    v19 = (char *)this + 96;
    while (1)
    {
      v20 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * RunWithCharIndex);
      v21 = *(_QWORD *)(v20 + 40);
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      v24 = v22 + v23;
      if (v22 + v23 >= v18)
        v25 = v18;
      else
        v25 = v22 + v23;
      v26 = v25 - location;
      v27 = v23 <= location && location < v24;
      if (v27)
        v28 = location;
      else
        v28 = 0;
      if (!v27)
        v26 = 0;
      v29 = v25 - v23;
      v30 = location <= v23 && v23 < v18;
      if (v30)
        v31 = v23;
      else
        v31 = v28;
      if (v30)
        v32 = v29;
      else
        v32 = v26;
      if (v32 < 1)
        return;
      v33 = *(_QWORD *)(TLine::InsertPartialRun(this, (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3, v20, v31, v32)+ 40);
      if (*((_QWORD *)this + 11))
      {
        v34 = *(_QWORD *)v19;
        *(_QWORD *)(*(_QWORD *)v19 + 24) = v33;
      }
      else
      {
        *((_QWORD *)this + 11) = v33;
        v35 = (_QWORD *)((char *)this + 96);
        if (!v33)
          goto LABEL_51;
        v34 = 0;
      }
      *(_QWORD *)(v33 + 32) = v34;
      *(_QWORD *)v19 = v33;
      v35 = (_QWORD *)(v33 + 24);
LABEL_51:
      *v35 = 0;
      length -= v32;
      if (length >= 1)
      {
        RunWithCharIndex = TLine::FindRunWithCharIndex(a2, v24, 1);
        if (RunWithCharIndex < v16)
          continue;
      }
      return;
    }
  }
}

unint64_t TLine::InsertPartialRun(TLine *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const TRun **v7;
  unint64_t v8;
  id v10;

  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 64))(&v10, a3, a4, a5, 2);
  v7 = (const TRun **)atomic_load((unint64_t *)&v10);
  TLine::InsertRun(a1, a2, v7);
  v8 = atomic_load((unint64_t *)&v10);

  return v8;
}

void CTGlyphRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v6;
  id v7;
  int v8;
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8 = a4;
  TCFBase_NEW<CTGlyphRun,TRun const&,CFRange &,TRun::SubrangingStyle &>(a1 + 72, v9, &v8, (unint64_t *)&v7);
  do
    v6 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));
  *a5 = v6;

}

void TCFBase_NEW<CTGlyphRun,TRun const&,CFRange &,TRun::SubrangingStyle &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  CFIndex v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TRun>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a2;
    v11 = a2[1];
    v12 = *a3;
    v13 = v8 + 72;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v13;
    v9[6] = v13;
    v9[7] = CTGlyphRun::CloneEntire;
    v9[8] = CTGlyphRun::CloneRange;
    TRun::TRun(v13, a1, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

void TLine::InsertRun(TLine *a1, uint64_t a2, const TRun **a3)
{
  uint64_t v5;
  char *v6;
  const TRun **v7;

  v5 = (uint64_t)a1 + 16;
  v6 = (char *)(*((_QWORD *)a1 + 2) + 8 * a2);
  v7 = a3;
  std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(v5, v6, &v7);
  TLine::UpdateCachedMetricsForRun(a1, a3[5]);
}

char *std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v29 = 0;
    v13 = ((v6 - v12) >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = __src - v12;
    v15 = (__src - v12) >> 3;
    v16 = v7 - (_QWORD)v12;
    if (v16 >> 2 > v13)
      v13 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v13;
    v31 = a1 + 24;
    if (v17)
      v18 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 24, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v15];
    v27 = v18;
    v28 = v19;
    v20 = &v18[8 * v17];
    v30 = v20;
    if (v15 == v17)
    {
      if (v14 < 1)
      {
        if (v12 == v4)
          v22 = 1;
        else
          v22 = v14 >> 2;
        v36 = a1 + 24;
        v23 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 24, v22);
        v24 = &v23[8 * (v22 >> 2)];
        v27 = v23;
        v28 = v24;
        v32 = v18;
        v33 = &v18[8 * v15];
        v30 = &v23[8 * v22];
        v34 = v33;
        v35 = v20;
        std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v32);
        v19 = v24;
      }
      else
      {
        v21 = v15 + 2;
        if (v15 >= -1)
          v21 = v15 + 1;
        v19 -= 8 * (v21 >> 1);
        v28 = v19;
      }
    }
    *(_QWORD *)v19 = *a3;
    v29 = v19 + 8;
    v4 = std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v27, v4);
    std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v27);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v8 = __src + 8;
    v9 = v6 - 8;
    v10 = *(_QWORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      v9 += 8;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-8 * ((v6 - v8) >> 3)], __src, v6 - v8);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void TLine::AppendRun(int64x2_t *this, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  __int8 *v24;

  do
    v3 = __ldaxr(a2);
  while (__stlxr(0, a2));
  v5 = (unint64_t *)this[1].i64[1];
  v4 = this[2].u64[0];
  if ((unint64_t)v5 >= v4)
  {
    v7 = this[1].i64[0];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = &this[2].i8[8];
    v10 = v4 - v7;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v8 + 1))
      v11 = v8 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = &this[2].i8[8];
    if (v12)
      v13 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate((uint64_t)v9, v12);
    else
      v13 = 0;
    v14 = (unint64_t *)&v13[8 * v8];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v3;
    v6 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = this[1].i64[0];
    v16 = this[1].u64[1];
    if (v16 == v17)
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 8);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = this[1];
      v6 = (_QWORD *)v22.i64[1];
      v15 = v23;
    }
    this[1].i64[0] = (uint64_t)v14;
    this[1].i64[1] = (uint64_t)v6;
    v22 = v19;
    v20 = this[2].i64[0];
    this[2].i64[0] = (uint64_t)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v5 = v3;
    v6 = v5 + 1;
  }
  this[1].i64[1] = (uint64_t)v6;
  TLine::UpdateCachedMetricsForRun((TLine *)this, *(const TRun **)(v3 + 40));
}

void *TInlineBufferAllocator<CTRun *,3ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  v2 = (unint64_t *)(a1 + 24);
  v3 = v4;
  v5 = v4 + 8 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(8 * a2);
  }
}

uint64_t std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 24);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

char *std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *TLine::LinkRuns(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = this[2];
  v1 = this[3];
  if (v2 != v1)
  {
    v3 = *(_QWORD **)(*(_QWORD *)v2 + 48);
    this[11] = v3;
    if (v3)
    {
      v3[4] = 0;
      v4 = v2 + 8;
      if (v4 == v1)
      {
LABEL_4:
        v5 = v3;
LABEL_9:
        this[12] = v5;
        v7 = v5 + 3;
        goto LABEL_10;
      }
    }
    else
    {
      v4 = v2 + 8;
      if (v4 == v1)
      {
        v7 = this + 12;
LABEL_10:
        *v7 = 0;
        return this;
      }
    }
    v6 = v3[1];
    while (1)
    {
      v5 = *(_QWORD **)(*(_QWORD *)v4 + 48);
      v6 += v3[2];
      if (v6 != v5[1])
        goto LABEL_4;
      v5[4] = v3;
      v3[3] = v5;
      v4 += 8;
      v3 = v5;
      if (v4 == v1)
        goto LABEL_9;
    }
  }
  return this;
}

uint64_t TTypesetter::CanLayout(TTypesetter *this, uint64_t a2)
{
  char v3;
  uint64_t result;
  int v5;

  v3 = (char)this;
  if (qword_1ECDE7470 == -1)
  {
    if ((this & 1) != 0)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1ECDE7470, 0, (dispatch_function_t)CheckForUnboundedLayout(BOOL)::$_0::__invoke);
    if ((v3 & 1) != 0)
      return 1;
  }
  if (byte_1ECDE7469)
    v5 = 1;
  else
    v5 = dyld_program_sdk_at_least();
  result = 1;
  if (a2 >= 10241 && v5)
  {
    if ((_MergedGlobals_6 & 1) != 0)
    {
      return 0;
    }
    else
    {
      if (os_variant_has_internal_diagnostics())
        CFLog();
      result = 0;
      _MergedGlobals_6 = 1;
    }
  }
  return result;
}

uint64_t TCompositionEngine::AdjustSpacing(TCompositionEngine *this, TLine *a2, const TCharStream *a3)
{
  unint64_t v3;
  uint64_t v4;
  TCharStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  TLine *v11;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  const __CFData *CommonTable;
  __int128 v20;
  _BOOL4 SingleSubstLookups;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double Advance;
  int v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  unsigned int v34;
  unsigned __int8 *v35;
  int CompositionLanguage;
  uint64_t v37;
  uint64_t v38;
  UChar32 FullChar;
  uint64_t v40;
  int v41;
  UChar32 v42;
  int v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  const TCharStream *v48;
  uint64_t v49;
  const void *v50;
  TAttributes *v51;
  int v52;
  const void *v53;
  uint64_t v54;
  int v55;
  UChar32 v56;
  unsigned int CharacterClass;
  uint64_t v58;
  UChar32 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  _BOOL4 v71;
  unsigned int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  int v75;
  int v77;
  _BOOL4 v78;
  BOOL v79;
  BOOL v83;
  BOOL v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  __int128 v89;
  _BOOL4 v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  CFIndex v95;
  CFIndex v96;
  uint64_t v97;
  uint64_t __b;
  unsigned int v99;
  TLine *v100;
  TLine *v101;
  uint64_t v102;
  TCharStream *v103;
  uint64_t v104[2];
  uint64_t v105[2];
  uint64_t StringIndex;
  unint64_t v107;
  uint64_t v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  _BYTE v114[24];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t __dst[82];
  unsigned __int16 *v128;
  __int128 v129;
  _QWORD v130[391];
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  _OWORD v135[7];
  unint64_t v136;
  _OWORD *v137;
  uint64_t v138;
  CFRange v139;

  v4 = MEMORY[0x1E0C80A78](this, a2);
  v103 = v5;
  v138 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(v4 + 72);
  v6 = *(_QWORD *)(v4 + 80);
  v104[0] = v7;
  v104[1] = v6;
  if (!v6)
    return v6;
  if ((*(_WORD *)(v4 + 154) & 0x200) == 0)
    return 0;
  if (CJKCompositionEngine::IsEnabled(void)::once != -1)
  {
    v94 = v4;
    dispatch_once_f(&CJKCompositionEngine::IsEnabled(void)::once, 0, (dispatch_function_t)CJKCompositionEngine::IsEnabled(void)::$_0::__invoke);
    v4 = v94;
  }
  if (!gCJKCompositionRulesEnabled)
  {
    v101 = (TLine *)v4;
    if (*(_QWORD *)(v4 + 24) == *(_QWORD *)(v4 + 16))
      v35 = 0;
    else
      v35 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16)
                                                      + 8 * TLine::FindRunWithCharIndex((TLine *)v4, v7, 1))
                                          + 40)
                              + 40);
    CompositionLanguage = TAttributes::GetCompositionLanguage((TAttributes *)v35, v5);
    *(_DWORD *)v114 = 9;
    memset(&v130[18], 0, 24);
    v129 = 0u;
    memset(v130, 0, 144);
    v37 = *((_QWORD *)v103 + 2);
    v38 = v6 + v7;
    v128 = (unsigned __int16 *)v103;
    v130[18] = v37;
    if (v6 < 1)
    {
      FullChar = 0;
      v40 = v7;
    }
    else
    {
      FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v128, v104, 0);
      *(_DWORD *)v114 = ChineseCompositionRules::GetCharacterClass(FullChar, 0, CompositionLanguage);
      v40 = v104[0];
    }
    v41 = v35[50];
    __dst[0] = v40 + 1;
    if (v40 + 1 >= v38)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v42 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v128, __dst, 0);
        v43 = 1 << u_charType(v42);
        if (v42 == 8205 || (v43 & 0x10080) == 0)
        {
          switch(ChineseCompositionRules::GetCharacterSpacing(CompositionLanguage, v41 != 0, FullChar, *(int *)v114, v42, v43, (unsigned int *)v114))
          {
            case 1u:
              v44 = __dst[0];
              v45 = 0.25;
              goto LABEL_73;
            case 2u:
              v44 = __dst[0];
              v45 = 0.0;
              goto LABEL_71;
            case 3u:
              v44 = __dst[0];
              v45 = 0.125;
              goto LABEL_73;
            case 4u:
              v44 = __dst[0];
              v45 = 0.0;
              v46 = 0.125;
              goto LABEL_77;
            case 5u:
              v44 = __dst[0];
              v46 = 0.0;
              v47 = (uint64_t)v101;
              v48 = v103;
              v49 = v7;
              v45 = 0.04;
              goto LABEL_78;
            case 6u:
              v44 = __dst[0];
              v45 = 0.5;
              goto LABEL_73;
            case 7u:
              v44 = __dst[0];
              v45 = 0.0;
              v46 = 0.5;
              goto LABEL_77;
            case 8u:
              v44 = __dst[0];
              v45 = 0.25;
              goto LABEL_71;
            case 9u:
              v44 = __dst[0];
              v45 = 0.5;
LABEL_71:
              v46 = 0.25;
              goto LABEL_77;
            case 0xAu:
              v44 = __dst[0];
              v45 = -0.25;
LABEL_73:
              v46 = 0.0;
              goto LABEL_77;
            case 0xBu:
              v44 = __dst[0];
              v45 = 0.0;
              goto LABEL_76;
            case 0xCu:
              v44 = __dst[0];
              v45 = -0.25;
LABEL_76:
              v46 = -0.25;
LABEL_77:
              v47 = (uint64_t)v101;
              v48 = v103;
              v49 = v7;
LABEL_78:
              AddSpace(v47, v48, v49, v45, v44, v46);
              v6 = 1;
              break;
            default:
              v44 = __dst[0];
              break;
          }
          FullChar = v42;
          v7 = v44;
        }
        else
        {
          v44 = __dst[0];
        }
        __dst[0] = v44 + 1;
      }
      while (v44 + 1 < v38);
    }
    if (v38 > 1
      && ChineseCompositionRules::GetCharacterSpacing(CompositionLanguage, v41 != 0, FullChar, *(int *)v114, 0, 0, (unsigned int *)v114) == 10)
    {
      AddSpace((uint64_t)v101, v103, v7, -0.25, -1, 0.0);
      return 1;
    }
    return v6;
  }
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_QWORD *)(v4 + 80);
  v105[0] = v9;
  v105[1] = v10;
  if (!v10 || (*(_WORD *)(v4 + 154) & 0x200) == 0)
    return 0;
  v11 = (TLine *)v4;
  memcpy(__dst, &unk_18492DC00, sizeof(__dst));
  v100 = v11;
  TRunGlue::TRunGlue((TRunGlue *)__dst, v11);
  if (BYTE1(__dst[79]))
    BYTE1(__dst[79]) = 0;
  v12 = __dst[1];
  v13 = __dst[2];
  if (TRunGlue::length((TRunGlue *)__dst))
  {
    v95 = v13;
    v96 = v12;
    v126 = 0;
    v124 = 0u;
    *(_OWORD *)&v114[8] = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0u;
    v15 = *((_QWORD *)v103 + 2);
    *(_QWORD *)v114 = v103;
    *(_QWORD *)&v124 = v15;
    v125 = 0;
    while (1)
    {
      v16 = TAttributes::GetCompositionLanguage((TAttributes *)(__dst[19] + 40), v14);
      if (v16 >= 2)
      {
        v17 = v16;
        v18 = (_BYTE *)__dst[77];
        CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(__dst[77] + 400), 1196643650, 0);
        if (CommonTable)
        {
          v136 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v135[5] = v20;
          v135[6] = v20;
          v135[3] = v20;
          v135[4] = v20;
          v135[1] = v20;
          v135[2] = v20;
          v135[0] = v20;
          v132 = 0;
          v133 = 0;
          v134 = 0;
          v137 = v135;
          v113 = 0xAAAAAAAAAAAAAAAALL;
          v111 = v20;
          v112 = v20;
          v109 = v20;
          v110 = v20;
          *(_OWORD *)v108 = v20;
          memset(&v130[1], 0, 48);
          v128 = 0;
          v129 = 0uLL;
          LOBYTE(v130[0]) = 0;
          OTL::GCommon::GCommon((uint64_t)v108, 0, v18, CommonTable, (uint64_t)&v128, 0, 0);
          v108[0] = (uint64_t)&unk_1E15DEE98;
          v131 = 0x484F504568776964;
          OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)&v128, &v131, &v132);
          SingleSubstLookups = OTL::GSUB::GetSingleSubstLookups(v108, (uint64_t)&v128, (uint64_t)&v132);
          StringIndex = (uint64_t)&v128;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&StringIndex);
          if (SingleSubstLookups)
          {
            memset(v130, 170, 0xC30uLL);
            v128 = 0;
            v129 = 0uLL;
            v130[390] = v130;
            v22 = *(_QWORD *)(__dst[19] + 208);
            if (v22 >= 1)
            {
              v23 = 0;
              v24 = 0;
              Advance = NAN;
              while (1)
              {
                StringIndex = TRunGlue::GetStringIndex((TRunGlue *)__dst, v23);
                v26 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v114, &StringIndex, 0);
                if (v26 > 65280)
                {
                  if ((v26 - 65281) > 0x1E)
                    goto LABEL_31;
                  v27 = 1 << (v26 - 1);
                  if ((v27 & 0x2980) != 0)
                    goto LABEL_32;
                  if ((v27 & 0x46000001) != 0)
                  {
                    if (v17 != 2)
                      goto LABEL_32;
                  }
                  else
                  {
LABEL_31:
                    if (v26 == 65371 || v26 == 65373)
                      goto LABEL_32;
                  }
                }
                else if ((v26 - 12289) <= 0x16 && ((1 << (v26 - 1)) & 0x79FF83) != 0
                       || (v26 - 8216) <= 5 && ((1 << (v26 - 24)) & 0x33) != 0)
                {
LABEL_32:
                  v28 = (unsigned int *)v132;
                  v29 = v133;
                  while (v28 != v29)
                  {
                    v30 = *v28++;
                    v3 = v3 & 0xFFFFFFFF00000000 | v30;
                    OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)&v128, v3, v23, 1);
                  }
                  if (v23 + 1 == v22)
                  {
                    v31 = (*(uint64_t (**)(TCharStream *, uint64_t, uint64_t))(*(_QWORD *)v103 + 40))(v103, StringIndex, 2);
                    if (v31 + v32 == *(_QWORD *)(__dst[0] + 80) + *(_QWORD *)(__dst[0] + 72))
                    {
                      Advance = TRunGlue::GetAdvance((TRunGlue *)__dst, v23);
                      v24 = 1;
                    }
                  }
                }
                if (++v23 == v22)
                {
                  v22 = *(_QWORD *)(__dst[19] + 208);
                  goto LABEL_40;
                }
              }
            }
            v24 = 0;
            Advance = NAN;
LABEL_40:
            StringIndex = v22 - 1;
            v107 = 0xAAAAAAAAAAAAAA00;
            if (v24)
              v33 = CJKCompositionEngine::SubstituteGlyphsForCJKComposition(TRunGlue &,TCharStream const&)::$_0::__invoke;
            else
              v33 = 0;
            OTL::GSUB::ApplyLookups(v108, (TRunGlue *)__dst, __dst[3], &v128, &v126, (uint64_t)v33, (uint64_t)&StringIndex);
            if ((_BYTE)v107)
              TStorageRange::SetOriginalFinalAdvanceWidth((TStorageRange *)(__dst[19] + 192), Advance);
            StringIndex = (uint64_t)&v128;
            std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&StringIndex);
          }
          v128 = (unsigned __int16 *)&v132;
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v128);
        }
      }
      if (!TRunGlue::NextRunRange((TRunGlue *)__dst, 1))
      {
        v34 = v126;
        v13 = v95;
        v12 = v96;
        goto LABEL_87;
      }
    }
  }
  v34 = 0;
LABEL_87:
  v139.location = v12;
  v139.length = v13;
  TRunGlue::SetRunRange((TRunGlue *)__dst, v139);
  if (*((_QWORD *)v100 + 3) == *((_QWORD *)v100 + 2))
    v51 = 0;
  else
    v51 = (TAttributes *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v100 + 2) + 8 * TLine::FindRunWithCharIndex(v100, v9, 1))
                                    + 40)
                        + 40);
  v52 = TAttributes::GetCompositionLanguage(v51, v50);
  v132 = v9;
  memset(&v130[18], 0, 24);
  v129 = 0u;
  memset(v130, 0, 144);
  v54 = *((_QWORD *)v103 + 2);
  v128 = (unsigned __int16 *)v103;
  v130[18] = v54;
  v99 = v34;
  if (v10 < 1)
  {
    v56 = 0;
    CharacterClass = 8;
    v58 = v9;
  }
  else
  {
    v55 = v52;
    v56 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v128, v105, 0);
    CharacterClass = CJKCompositionRules::GetCharacterClass(v56, 0, v55);
    v58 = v105[0];
  }
  v59 = 0;
  v97 = v10 + v9;
  v60 = v58 + 1;
  do
  {
    v108[0] = v60;
    v61 = *(_QWORD *)(__dst[19] + 8);
    v62 = *(_QWORD *)(__dst[19] + 16) + v61;
    v63 = TAttributes::GetCompositionLanguage((TAttributes *)(__dst[19] + 40), v53);
    v64 = v63;
    if (v60 < v61 || v63 < 2)
    {
      v132 = v62 - 1;
      v56 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v128, &v132, 0);
      v66 = v60;
      v60 = v62;
      continue;
    }
    v102 = v62;
    if (v60 < v62)
    {
      v67 = v132;
      __b = v63 - 2;
      v60 = v102;
      while (1)
      {
        v59 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v128, v108, 0);
        v68 = 1 << u_charType(v59);
        if (v59 == 8205 || (v68 & 0x10080) == 0)
          break;
        v69 = v108[0];
LABEL_199:
        v66 = v69 + 1;
        v108[0] = v69 + 1;
        if (v69 + 1 >= v60)
        {
          v132 = v67;
          goto LABEL_206;
        }
      }
      *(_QWORD *)&v114[8] = 0;
      *(_QWORD *)v114 = 0;
      *(_QWORD *)&v114[16] = 0xAAAAAAAA00000000;
      if (CharacterClass == 8)
        CharacterClass = CJKCompositionRules::GetCharacterClass(v56, 0, v64);
      v70 = CJKCompositionRules::GetCharacterClass(v59, v68, v64);
      v71 = CharacterClass != 4 || CJKCompositionEngine::GetCharacterClass(v56, 0) != 7;
      v72 = CharacterClass & 0xFFFFFFFE;
      v73 = v64 != 4;
      v74 = (CharacterClass & 0xFFFFFFFE) == 2;
      if ((CharacterClass & 0xFFFFFFFE) != 2)
        v73 = 1;
      if (v70 == 7)
        v74 = 0;
      if ((v70 | CharacterClass) < 2)
        v74 = 1;
      v75 = v70 & 6;
      if (CharacterClass == 4 && v75 == 2)
        v74 = 1;
      if (v70 != 4)
        v73 = 1;
      v77 = v74 && v73;
      v114[16] = v74 && v73;
      if (v70 <= 1 && CharacterClass != 7)
        goto LABEL_132;
      v78 = v70 == 4;
      v79 = v72 == 2;
      if (v75 == 2)
        v78 = 1;
      else
        v79 = 0;
      if (CharacterClass != 4)
        v78 = 0;
      if (v79 || v78)
LABEL_132:
        LOBYTE(v78) = v64 != 4 || CharacterClass != 4 || v70 > 1;
      v114[17] = v78;
      v83 = v72 == 2 && CJKCompositionEngine::GetCharacterClass(v56, 0) == 4 && v75 == 2;
      v114[18] = v83;
      v85 = v70 <= 1 && CJKCompositionEngine::GetCharacterClass(v59, 0) == 1 && CharacterClass < 2;
      v114[19] = v85;
      if ((v56 - 48) <= 9)
      {
        v86 = 0x3FA47AE147AE147BLL;
        if (v59 == 26085)
          goto LABEL_196;
        v86 = 0x3FA47AE147AE147BLL;
        if (v59 == 26376)
          goto LABEL_196;
      }
      if (v56 == 26376 || v56 == 26085)
      {
        v86 = 0x3FA47AE147AE147BLL;
        if ((v59 - 48) < 0xA)
          goto LABEL_196;
      }
      if (CharacterClass == 7 && v70 == 6)
      {
        if (v56 != 41)
        {
          CharacterClass = 7;
          v87 = 6;
          goto LABEL_181;
        }
        CharacterClass = 5;
      }
      else if (CharacterClass == 6 && v70 == 7)
      {
        if (v59 == 40)
          v87 = 5;
        else
          v87 = 7;
        CharacterClass = 6;
LABEL_178:
        if (v56 == 8217 && v87 == 5)
        {
          v77 = 0;
          v114[16] = 0;
          CharacterClass = 5;
        }
LABEL_181:
        if (v64 == 4)
        {
          if ((v56 & 0xFFFFFFFB) == 0x2018 && v70 <= 1)
          {
            v114[17] = 0;
            v71 = 1;
          }
          else
          {
            v71 = 1;
            if ((v59 & 0xFFFFFFFB) == 0x2019 && v72 == 2)
            {
              v77 = 0;
              v114[16] = 0;
            }
          }
        }
        v88 = CJKCompositionRules::GetCharacterSpacing(CTCompositionLanguage,BOOL,unsigned int,CJKCompositionRules::CharacterClass,unsigned int,unsigned int,CJKCompositionRules::CharacterClass*)::kTable[64 * __b + 8 * CharacterClass + v87];
        v89 = CJKCompositionRules::GetCharacterSpacing(CTCompositionLanguage,BOOL,unsigned int,CJKCompositionRules::CharacterClass,unsigned int,unsigned int,CJKCompositionRules::CharacterClass*)::kSpacingValues[v88];
        *(_OWORD *)v114 = v89;
        v91 = v70 < 2 || v87 == 5;
        if (v71 || (v86 = 0x3FD999999999999ALL, !v91))
        {
          v69 = v108[0];
          if (*(double *)&v89 == 0.0 && ((0xDB9uLL >> v88) & 1) != 0 && !v77)
            goto LABEL_198;
          goto LABEL_197;
        }
LABEL_196:
        *(_QWORD *)v114 = v86;
        *(_QWORD *)&v114[8] = 0;
        v69 = v108[0];
LABEL_197:
        CJKAddSpace((uint64_t)v100, v103, v67, v69, (uint64_t)v114, 0, 0);
        v99 = 1;
LABEL_198:
        v67 = v69;
        CharacterClass = v70;
        v56 = v59;
        v60 = v102;
        goto LABEL_199;
      }
      if (v59 == 8216)
      {
        v87 = v70;
        if (CharacterClass == 5)
        {
          v114[17] = 0;
          v87 = 5;
          goto LABEL_181;
        }
      }
      else
      {
        v87 = v70;
      }
      goto LABEL_178;
    }
    v66 = v60;
    v60 = v62;
LABEL_206:
    ;
  }
  while (TRunGlue::NextRunRange((TRunGlue *)__dst, 1));
  LOBYTE(StringIndex) = -86;
  if (v59 && v66 == v97)
  {
    v6 = v99;
    if (CJKCompositionRules::ShouldGlyphImageRightFlush(v64, 0, v59, (BOOL *)&StringIndex))
    {
      *(_QWORD *)&v114[8] = 0;
      *(_QWORD *)v114 = 0;
      v6 = 1;
      *(_QWORD *)&v114[16] = 0xAAAAAAAA00000001;
      CJKAddSpace((uint64_t)v100, v103, v132, -1, (uint64_t)v114, 1, StringIndex);
    }
  }
  else
  {
    v6 = v99;
  }
  v92 = (uint64_t *)__dst[73];
  if ((uint64_t *)__dst[73] == &__dst[70])
  {
    v93 = 4;
    v92 = &__dst[70];
LABEL_216:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  else if (__dst[73])
  {
    v93 = 5;
    goto LABEL_216;
  }
  v128 = (unsigned __int16 *)&__dst[46];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v128);
  v128 = (unsigned __int16 *)&__dst[26];
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v128);
  v128 = (unsigned __int16 *)&__dst[7];
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v128);
  return v6;
}

void TCharStreamCFAttrString::TCharStreamCFAttrString(TCharStreamCFAttrString *this, const __CFAttributedString *a2)
{
  const __CFAttributedString *v3;
  void *v4;
  id v5;
  id v6;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_1E15DE4B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 6) = CFAttributedStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  v3 = (const __CFAttributedString *)atomic_load((unint64_t *)this + 6);
  v5 = (id)CFAttributedStringGetString(v3);
  do
    v4 = (void *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  v6 = v4;
  TCharStreamCFString::SetString(this, (unint64_t *)&v6);

}

void TTypesetter::TTypesetter(TTypesetter *this, uint64_t *a2, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 27) = *a2;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_WORD *)this + 128) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_WORD *)this + 77) = 1;
  if (theDict)
    TTypesetter::UnpackOptions(this, theDict);
}

const UniChar *TCharStreamCFString::SetString(_QWORD *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  const UniChar *result;

  v3 = a1 + 4;
  do
    v4 = __ldaxr(a2);
  while (__stlxr(0, a2));
  do
    v5 = (void *)__ldaxr(v3);
  while (__stlxr(v4, v3));

  v6 = (const __CFString *)atomic_load(a1 + 4);
  a1[2] = CFStringGetLength(v6);
  v7 = (const __CFString *)atomic_load(a1 + 4);
  result = CFStringGetCharactersPtr(v7);
  a1[3] = result;
  return result;
}

void TLine::DeleteGlyphs(TLine *this, uint64_t a2, uint64_t a3, const uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  TLine *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  TRun *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  const uint64_t *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v25;
  void **v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  _OWORD v30[15];
  _OWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v4)
  {
    v6 = a3;
    v8 = this;
    v9 = 0;
    v10 = 0;
    v11 = v4 >> 3;
    do
    {
      if (a2 >= v11)
        return;
      v12 = *(TRun **)(*(_QWORD *)(*((_QWORD *)v8 + 2) + 8 * a2) + 48);
      v13 = *((_QWORD *)v12 + 26);
      if (v6 > v10)
      {
        v14 = 0;
        while (a4[v10 + v14] - v9 < v13)
        {
          if (v6 - v10 == ++v14)
          {
            v14 = v6 - v10;
            break;
          }
        }
        if (v14)
        {
          v25 = v11;
          *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v30[13] = v15;
          v30[14] = v15;
          v30[11] = v15;
          v30[12] = v15;
          v30[9] = v15;
          v30[10] = v15;
          v30[7] = v15;
          v30[8] = v15;
          v30[5] = v15;
          v30[6] = v15;
          v30[3] = v15;
          v30[4] = v15;
          v30[1] = v15;
          v30[2] = v15;
          v30[0] = v15;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v31 = v30;
          std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v27, v14);
          v16 = a4;
          v17 = (char *)v28;
          bzero(v28, 8 * v14);
          v18 = 0;
          v19 = &v17[8 * v14];
          a4 = v16;
          v28 = v19;
          v20 = v27;
          do
          {
            v20[v18] = v16[v10 + v18] - v9;
            ++v18;
          }
          while (v14 != v18);
          v8 = this;
          v21 = TRun::DeleteGlyphs(v12, v14, (char *)v20, *((_QWORD *)this + 9));
          *((_QWORD *)this + 18) += *((_QWORD *)v12 + 26) - v13;
          v10 += v18;
          if (v21 > 0 && TLine::AttachToPreviousRun(this, a2, v21))
          {
            v6 = a3;
            if (v10 >= a3)
            {
LABEL_19:
              v22 = 3;
            }
            else
            {
              v25 = (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
              v9 += v13;
              v22 = 2;
            }
            v26 = (void **)&v27;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v26);
            v11 = v25;
            continue;
          }
          v6 = a3;
          if (v10 >= a3)
            goto LABEL_19;
          v26 = (void **)&v27;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v26);
          v11 = v25;
        }
      }
      v22 = 0;
      ++a2;
      v9 += v13;
    }
    while (v22 != 3);
  }
}

void CTDelegateRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  id v16;

  v10 = TCFBase<TRun>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = v10 + 72;
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = CTDelegateRun::CloneEntire;
    v11[8] = CTDelegateRun::CloneRange;
    TDelegateRun::TDelegateRun(v12, a1 + 72, a2, a3, a4);
    v16 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    v15 = v13;

  }
  else
  {
    v15 = 0;
  }
  do
    v14 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  *a5 = v14;

}

uint64_t TDelegateRun::TDelegateRun(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  void *v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)TRun::TRun(a1, a2, a3, a4, a5) = &off_1E15DCB18;
  v7 = (void *)atomic_load((unint64_t *)(a2 + 320));
  *(_QWORD *)(a1 + 320) = v7;
  v8 = *(_OWORD *)(a2 + 328);
  v9 = *(_OWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 328) = v8;
  *(_OWORD *)(a1 + 344) = v9;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  return a1;
}

CFComparisonResult CompareDescriptorsByTraitsAndPrecedenceForSingleFamily(_QWORD *a1, _QWORD *a2, void *a3)
{
  return CompareLocalizedDescriptorsByTraitsAndPrecedence(a1, a2, a3, 0, 0, 1);
}

_BYTE *OTL::GDEF::IterateMarkGlyphsNotInSet(_BYTE *result, unsigned int a2, uint64_t a3)
{
  unsigned __int16 *v3;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  unint64_t v10;
  _OWORD *v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!result[24])
    return result;
  v3 = (unsigned __int16 *)*((_QWORD *)result + 2);
  if (!v3)
    return result;
  v10 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v5;
  v9[1] = v5;
  OTL::GDEF::MarkFilteringSet((OTL::Coverage *)result, a2, (uint64_t)v9);
  v11 = v9;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v12, a3);
  std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>>((uint64_t)v14, (uint64_t *)&v11);
  OTL::ClassDefTable::Iterate(v3, (uint64_t)v14);
  v6 = v15;
  if (v15 == v14)
  {
    v7 = 4;
    v6 = v14;
    goto LABEL_7;
  }
  if (v15)
  {
    v7 = 5;
LABEL_7:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
}

OTL::Lookup *OTL::Lookup::Lookup<OTL::GPOS>(OTL::Lookup *this, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  __int16 v41;
  char *v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  char *v51;

  *(_QWORD *)this = a3;
  v4 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)this + 1) = v4;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_WORD *)this + 22) = 0;
  *((_QWORD *)this + 10) = (char *)this + 46;
  *((_QWORD *)this + 11) = 0;
  v5 = (int64x2_t *)((char *)this + 88);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v42 = (char *)this + 112;
  *((_QWORD *)this + 38) = (char *)this + 112;
  if (a3 + 6 <= v4)
  {
    LODWORD(v6) = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
    v7 = *(unsigned __int16 *)(a3 + 2);
    v8 = a3 + 2 * v6 + ((v7 >> 11) & 2) + 6;
    if (v8 >= a3 && v8 <= v4)
    {
      if ((v7 & 0x1EFF) != 0)
      {
        OTL::Lookup::PopulateIgnoreSet(this, *(const OTL::GDEF **)(a2 + 24));
        a3 = *(_QWORD *)this;
        v4 = *((_QWORD *)this + 1);
        LODWORD(v6) = bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 4)) >> 16;
      }
      v11 = 2 * v6 + a3 + 6;
      if (v11 < a3 + 6 || v11 > v4)
      {
        if (a3 + 8 > v4)
          return this;
        v6 = (v4 - (a3 + 6)) >> 1;
      }
      if ((_DWORD)v6)
      {
        v13 = v6;
        std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::reserve(v5, v6);
        v14 = 0;
        v15 = **(unsigned __int16 **)this;
        v41 = __rev16(v15);
        do
        {
          v16 = *(_QWORD *)this + (bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 2 * v14 + 6)) >> 16);
          if (v15 == 2304)
          {
            v17 = *((_QWORD *)this + 1);
            if (v16 + 8 > v17 || *(_WORD *)v16 != 256)
              return this;
            v18 = *(unsigned __int16 *)(v16 + 2);
            if (v18 == 2304)
            {
              v16 = 0;
              v21 = 9;
            }
            else
            {
              v19 = __rev16(v18);
              v20 = v16 + bswap32(*(_DWORD *)(v16 + 4));
              if (v20 + 2 <= v17)
                v16 = v20;
              else
                v16 = 0;
              if (v20 + 2 <= v17)
                v21 = v19;
              else
                v21 = 9;
            }
          }
          else
          {
            v21 = v41;
          }
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v43, a2);
          v45 = v43[0];
          v46 = v43[1];
          v47 = v44;
          v22 = *((_QWORD *)this + 12);
          v23 = *((_QWORD *)this + 13);
          if (v22 >= v23)
          {
            v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v5->i64[0]) >> 4);
            v27 = v26 + 1;
            if (v26 + 1 > 0x555555555555555)
              abort();
            v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v5->i64[0]) >> 4);
            if (2 * v28 > v27)
              v27 = 2 * v28;
            if (v28 >= 0x2AAAAAAAAAAAAAALL)
              v29 = 0x555555555555555;
            else
              v29 = v27;
            v51 = v42;
            if (v29)
              v30 = (char *)TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>::allocate((uint64_t)v42, v29);
            else
              v30 = 0;
            v31 = &v30[48 * v26];
            *(_QWORD *)v31 = v16;
            v32 = v46;
            *(_OWORD *)(v31 + 8) = v45;
            *(_OWORD *)(v31 + 24) = v32;
            *((_QWORD *)v31 + 5) = v47;
            v34 = *((_QWORD *)this + 11);
            v33 = *((_QWORD *)this + 12);
            if (v33 == v34)
            {
              v38 = vdupq_n_s64(v33);
              v35 = &v30[48 * v26];
            }
            else
            {
              v35 = &v30[48 * v26];
              do
              {
                v36 = *(_OWORD *)(v33 - 48);
                v37 = *(_OWORD *)(v33 - 16);
                *((_OWORD *)v35 - 2) = *(_OWORD *)(v33 - 32);
                *((_OWORD *)v35 - 1) = v37;
                *((_OWORD *)v35 - 3) = v36;
                v35 -= 48;
                v33 -= 48;
              }
              while (v33 != v34);
              v38 = *v5;
            }
            v25 = v31 + 48;
            *((_QWORD *)this + 11) = v35;
            *((_QWORD *)this + 12) = v31 + 48;
            v49 = v38;
            v39 = *((_QWORD *)this + 13);
            *((_QWORD *)this + 13) = &v30[48 * v29];
            v50 = v39;
            v48 = v38.i64[0];
            std::__split_buffer<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul> &>::~__split_buffer((uint64_t)&v48);
          }
          else
          {
            *(_QWORD *)v22 = v16;
            v24 = v46;
            *(_OWORD *)(v22 + 8) = v45;
            *(_OWORD *)(v22 + 24) = v24;
            *(_QWORD *)(v22 + 40) = v47;
            v25 = (char *)(v22 + 48);
          }
          *((_QWORD *)this + 12) = v25;
          ++v14;
        }
        while (v14 != v13);
        *((_WORD *)this + 8) = v21;
      }
    }
  }
  return this;
}

OTL::Lookup *OTL::Lookup::Lookup<OTL::GSUB>(OTL::Lookup *this, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  __int16 v41;
  char *v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  char *v51;

  *(_QWORD *)this = a3;
  v4 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)this + 1) = v4;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_WORD *)this + 22) = 0;
  *((_QWORD *)this + 10) = (char *)this + 46;
  *((_QWORD *)this + 11) = 0;
  v5 = (int64x2_t *)((char *)this + 88);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v42 = (char *)this + 112;
  *((_QWORD *)this + 38) = (char *)this + 112;
  if (a3 + 6 <= v4)
  {
    LODWORD(v6) = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
    v7 = *(unsigned __int16 *)(a3 + 2);
    v8 = a3 + 2 * v6 + ((v7 >> 11) & 2) + 6;
    if (v8 >= a3 && v8 <= v4)
    {
      if ((v7 & 0x1EFF) != 0)
      {
        OTL::Lookup::PopulateIgnoreSet(this, *(const OTL::GDEF **)(a2 + 24));
        a3 = *(_QWORD *)this;
        v4 = *((_QWORD *)this + 1);
        LODWORD(v6) = bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 4)) >> 16;
      }
      v11 = 2 * v6 + a3 + 6;
      if (v11 < a3 + 6 || v11 > v4)
      {
        if (a3 + 8 > v4)
          return this;
        v6 = (v4 - (a3 + 6)) >> 1;
      }
      if ((_DWORD)v6)
      {
        v13 = v6;
        std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::reserve(v5, v6);
        v14 = 0;
        v15 = **(unsigned __int16 **)this;
        v41 = __rev16(v15);
        do
        {
          v16 = *(_QWORD *)this + (bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 2 * v14 + 6)) >> 16);
          if (v15 == 1792)
          {
            v17 = *((_QWORD *)this + 1);
            if (v16 + 8 > v17 || *(_WORD *)v16 != 256)
              return this;
            v18 = *(unsigned __int16 *)(v16 + 2);
            if (v18 == 1792)
            {
              v16 = 0;
              v21 = 7;
            }
            else
            {
              v19 = __rev16(v18);
              v20 = v16 + bswap32(*(_DWORD *)(v16 + 4));
              if (v20 + 2 <= v17)
                v16 = v20;
              else
                v16 = 0;
              if (v20 + 2 <= v17)
                v21 = v19;
              else
                v21 = 7;
            }
          }
          else
          {
            v21 = v41;
          }
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v43, a2);
          v45 = v43[0];
          v46 = v43[1];
          v47 = v44;
          v22 = *((_QWORD *)this + 12);
          v23 = *((_QWORD *)this + 13);
          if (v22 >= v23)
          {
            v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v5->i64[0]) >> 4);
            v27 = v26 + 1;
            if (v26 + 1 > 0x555555555555555)
              abort();
            v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v5->i64[0]) >> 4);
            if (2 * v28 > v27)
              v27 = 2 * v28;
            if (v28 >= 0x2AAAAAAAAAAAAAALL)
              v29 = 0x555555555555555;
            else
              v29 = v27;
            v51 = v42;
            if (v29)
              v30 = (char *)TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>::allocate((uint64_t)v42, v29);
            else
              v30 = 0;
            v31 = &v30[48 * v26];
            *(_QWORD *)v31 = v16;
            v32 = v46;
            *(_OWORD *)(v31 + 8) = v45;
            *(_OWORD *)(v31 + 24) = v32;
            *((_QWORD *)v31 + 5) = v47;
            v34 = *((_QWORD *)this + 11);
            v33 = *((_QWORD *)this + 12);
            if (v33 == v34)
            {
              v38 = vdupq_n_s64(v33);
              v35 = &v30[48 * v26];
            }
            else
            {
              v35 = &v30[48 * v26];
              do
              {
                v36 = *(_OWORD *)(v33 - 48);
                v37 = *(_OWORD *)(v33 - 16);
                *((_OWORD *)v35 - 2) = *(_OWORD *)(v33 - 32);
                *((_OWORD *)v35 - 1) = v37;
                *((_OWORD *)v35 - 3) = v36;
                v35 -= 48;
                v33 -= 48;
              }
              while (v33 != v34);
              v38 = *v5;
            }
            v25 = v31 + 48;
            *((_QWORD *)this + 11) = v35;
            *((_QWORD *)this + 12) = v31 + 48;
            v49 = v38;
            v39 = *((_QWORD *)this + 13);
            *((_QWORD *)this + 13) = &v30[48 * v29];
            v50 = v39;
            v48 = v38.i64[0];
            std::__split_buffer<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul> &>::~__split_buffer((uint64_t)&v48);
          }
          else
          {
            *(_QWORD *)v22 = v16;
            v24 = v46;
            *(_OWORD *)(v22 + 8) = v45;
            *(_OWORD *)(v22 + 24) = v24;
            *(_QWORD *)(v22 + 40) = v47;
            v25 = (char *)(v22 + 48);
          }
          *((_QWORD *)this + 12) = v25;
          ++v14;
        }
        while (v14 != v13);
        *((_WORD *)this + 8) = v21;
      }
    }
  }
  return this;
}

OTL::Coverage *OTL::Coverage::Coverage(OTL::Coverage *this, unsigned __int16 *a2, unint64_t a3, char a4)
{
  void *v5;
  unsigned int v8;
  void *v9;
  uint64_t (*v10)(OTL::Coverage *, unsigned int);
  BOOL v11;
  BOOL v12;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 8) = 0xFFFF;
  v12 = 0;
  if ((unint64_t)(a2 + 2) > a3 || (a4 & 1) == 0 && !OTL::Coverage::Init(this, &v12))
    goto LABEL_2;
  v8 = bswap32(*a2) >> 16;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      if (v12)
      {
        v5 = OTL::Coverage::SearchFmt1Linear;
        goto LABEL_3;
      }
      v9 = OTL::Coverage::SearchFmt1Linear;
      v10 = OTL::Coverage::SearchFmt1Binary;
      v11 = bswap32(a2[1]) >> 16 > 4;
      goto LABEL_14;
    }
LABEL_2:
    *(_QWORD *)this = 0;
    v5 = OTL::Coverage::SearchUnknown;
    goto LABEL_3;
  }
  if (v12)
  {
    v5 = OTL::Coverage::SearchFmt2Linear;
    goto LABEL_3;
  }
  v9 = OTL::Coverage::SearchFmt2Linear;
  v10 = OTL::Coverage::SearchFmt2Binary;
  v11 = bswap32(a2[1]) >> 16 > 7;
LABEL_14:
  if (v11)
    v5 = v10;
  else
    v5 = v9;
LABEL_3:
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 0;
  return this;
}

uint64_t OTL::Coverage::Init(OTL::Coverage *this, BOOL *a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 v15;
  char v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v24;
  char v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;

  v2 = *(unsigned __int16 **)this;
  v3 = bswap32(**(unsigned __int16 **)this) >> 16;
  if (v3 == 2)
  {
    v18 = v2 + 2;
    v19 = v2[1];
    v20 = *((_QWORD *)this + 1);
    v21 = __rev16(v19);
    v22 = (unint64_t)&v2[3 * v21 + 2];
    if (v22 < (unint64_t)(v2 + 2) || v22 > v20)
    {
      if ((unint64_t)(v2 + 5) > v20)
        LODWORD(v24) = 0;
      else
        v24 = (v20 - (unint64_t)v18) / 6;
      v19 = bswap32(v24) >> 16;
      v21 = (unsigned __int16)v24;
    }
    if (v19)
    {
      v25 = 0;
      LOWORD(v13) = 0;
      v26 = &v18[3 * v21];
      v15 = -1;
      do
      {
        v27 = bswap32(*v18) >> 16;
        v28 = bswap32(v18[1]);
        if (v27 <= HIWORD(v28))
        {
          if ((v25 & (v27 <= (unsigned __int16)v13)) == 1)
            *a2 = 1;
          if (v27 < v15)
            v15 = v27;
          if ((unsigned __int16)v13 <= HIWORD(v28))
            LOWORD(v13) = HIWORD(v28);
          v25 = 1;
        }
        else
        {
          *a2 = 1;
        }
        v18 += 3;
      }
      while (v18 != v26);
      goto LABEL_50;
    }
    LOWORD(v13) = 0;
  }
  else
  {
    if (v3 != 1)
      return 0;
    v4 = v2 + 2;
    v5 = v2[1];
    v6 = *((_QWORD *)this + 1);
    v7 = __rev16(v5);
    v8 = (unint64_t)&v2[v7 + 2];
    if ((unint64_t)(v2 + 3) <= v6)
      v9 = (v6 - ((_DWORD)v2 + 4)) >> 1;
    else
      v9 = 0;
    v10 = bswap32(v9) >> 16;
    v11 = v8 < (unint64_t)v4 || v8 > v6;
    if (v11)
      v12 = (unsigned __int16)v9;
    else
      v12 = v7;
    if (v11)
      v13 = v10;
    else
      v13 = v5;
    if (v13)
    {
      LOWORD(v13) = 0;
      v14 = 2 * v12;
      v15 = -1;
      v16 = 1;
      do
      {
        v17 = bswap32(*v4) >> 16;
        if ((v16 & 1) == 0 && v17 <= (unsigned __int16)v13)
          *a2 = 1;
        v16 = 0;
        if (v17 < v15)
          v15 = v17;
        if (v17 > (unsigned __int16)v13)
          LOWORD(v13) = v17;
        ++v4;
        v14 -= 2;
      }
      while (v14);
      goto LABEL_50;
    }
  }
  v15 = -1;
LABEL_50:
  *((_WORD *)this + 16) = v15;
  *((_WORD *)this + 17) = v13;
  return 1;
}

OTL::Coverage *OTL::LookupWithCoverage::GetCoverage@<X0>(OTL::Coverage *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((unint64_t)this + 4 <= a2)
    return OTL::Coverage::Coverage((OTL::Coverage *)a3, (unsigned __int16 *)((char *)this + (bswap32(*((unsigned __int16 *)this + 1)) >> 16)), a2, 0);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = OTL::Coverage::SearchUnknown;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0xFFFF;
  return this;
}

OTL::Coverage *OTL::GSUB::GetCoverageForSubtable@<X0>(OTL::LookupWithCoverage *this@<X3>, OTL::Coverage *result@<X0>, unint64_t a3@<X1>, int a4@<W2>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char *v11;
  char *v13;
  unsigned __int16 *v14;
  unint64_t v15;

  if (a3 > (unint64_t)this || (v5 = *((_QWORD *)result + 5), (unint64_t)this + 2 > v5))
  {
LABEL_17:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = OTL::Coverage::SearchUnknown;
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 0xFFFF;
  }
  else
  {
    switch(a4)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 8:
        return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
      case 5:
        v6 = bswap32(*(unsigned __int16 *)this) >> 16;
        if (v6 - 1 < 2)
          return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
        if (v6 != 3 || (unint64_t)this + 8 > v5)
          goto LABEL_17;
        v8 = *((unsigned __int16 *)this + 3);
        goto LABEL_23;
      case 6:
        v9 = bswap32(*(unsigned __int16 *)this) >> 16;
        if (v9 - 1 < 2)
          return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
        v10 = v9 == 3;
        v11 = (char *)this + 4;
        if (!v10 || (unint64_t)v11 > v5)
          goto LABEL_17;
        v13 = &v11[2 * (bswap32(*((unsigned __int16 *)this + 1)) >> 16)];
        v14 = (unsigned __int16 *)(v13 + 2);
        v15 = (unint64_t)(v13 + 4);
        if (v14 < (unsigned __int16 *)this || v15 > v5)
          goto LABEL_17;
        v8 = *v14;
LABEL_23:
        result = OTL::Coverage::Coverage((OTL::Coverage *)a5, (unsigned __int16 *)((char *)this + (bswap32(v8) >> 16)), v5, 0);
        break;
      default:
        goto LABEL_17;
    }
  }
  return result;
}

OTL::Coverage *OTL::GPOS::GetCoverageForSubtable@<X0>(OTL::LookupWithCoverage *this@<X3>, OTL::Coverage *result@<X0>, unint64_t a3@<X1>, int a4@<W2>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;

  if (a3 > (unint64_t)this)
    goto LABEL_19;
  v5 = *((_QWORD *)result + 5);
  if ((unint64_t)this + 2 > v5)
    goto LABEL_19;
  if ((a4 - 1) < 6)
    return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
  if (a4 == 7)
  {
    v9 = bswap32(*(unsigned __int16 *)this) >> 16;
    if (v9 - 1 < 2)
      return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
    if (v9 == 3 && (unint64_t)this + 8 <= v5)
    {
      v8 = *((unsigned __int16 *)this + 3);
      return OTL::Coverage::Coverage((OTL::Coverage *)a5, (unsigned __int16 *)((char *)this + (bswap32(v8) >> 16)), v5, 0);
    }
LABEL_19:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = OTL::Coverage::SearchUnknown;
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 0xFFFF;
    return result;
  }
  if (a4 != 8)
    goto LABEL_19;
  v6 = bswap32(*(unsigned __int16 *)this) >> 16;
  if (v6 - 1 < 2)
    return OTL::LookupWithCoverage::GetCoverage(this, v5, a5);
  if (v6 != 3)
    goto LABEL_19;
  if ((unint64_t)this + 4 > v5)
    goto LABEL_19;
  v7 = (char *)this + 2 * (bswap32(*((unsigned __int16 *)this + 1)) >> 16) + 4;
  if (v7 + 2 < (char *)this || (unint64_t)(v7 + 4) > v5)
    goto LABEL_19;
  v8 = *((unsigned __int16 *)v7 + 1);
  return OTL::Coverage::Coverage((OTL::Coverage *)a5, (unsigned __int16 *)((char *)this + (bswap32(v8) >> 16)), v5, 0);
}

_QWORD *OTL::Lookup::PopulateIgnoreSet(OTL::Lookup *this, const OTL::GDEF *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = operator new(0x2000uLL, MEMORY[0x1E0DE4E10]);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = result;
  if (v5)
  {
    MEMORY[0x186DC03AC](v5, 0x1000C401B2BBF36);
    result = (_QWORD *)*((_QWORD *)this + 3);
  }
  if (result)
  {
    bzero(result, 0x2000uLL);
    v6 = *((_QWORD *)this + 3);
    v7 = *(_QWORD *)this;
    v9[0] = &off_1E15E06D0;
    v9[1] = v6;
    v10 = v9;
    OTL::GDEF::IterateGlyphsIgnoredByLookupTable(a2, v7, (uint64_t)v9);
    result = v10;
    if (v10 == v9)
    {
      v8 = 4;
      result = v9;
    }
    else
    {
      if (!v10)
        return result;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

_QWORD *OTL::GDEF::IterateGlyphsIgnoredByLookupTable(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v5 = result;
  v16 = *MEMORY[0x1E0C80C00];
  v6 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  if ((v6 & 0xE) != 0)
  {
    v14[0] = &unk_1E15E0B98;
    v14[1] = a3;
    v15 = v14;
    OTL::GDEF::IterateGlyphsWithClassMask(result, v6 & 0xE, (uint64_t)v14);
    result = v15;
    if (v15 == v14)
    {
      v7 = 4;
      result = v14;
    }
    else
    {
      if (!v15)
        goto LABEL_7;
      v7 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
LABEL_7:
  if ((v6 & 8) != 0)
    return result;
  if ((v6 & 0x10) != 0)
  {
    v9 = bswap32(*(unsigned __int16 *)(a2 + 2 * (bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16) + 6)) >> 16;
    v12[0] = &unk_1E15E0B08;
    v12[1] = a3;
    v13 = v12;
    OTL::GDEF::IterateMarkGlyphsNotInSet(v5, v9, (uint64_t)v12);
    result = v13;
    if (v13 == v12)
    {
      v8 = 4;
      result = v12;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
    }
  }
  else
  {
    if (v6 < 0x100)
      return result;
    v10[0] = &unk_1E15E0B50;
    v10[1] = a3;
    v11 = v10;
    OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(v5, v6 >> 8, (uint64_t)v10);
    result = v11;
    if (v11 == v10)
    {
      v8 = 4;
      result = v10;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
    }
  }
  if (!result)
    return result;
  v8 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3}>,void ()(unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E15E0B50;
  a2[1] = v2;
  return result;
}

uint64_t OTL::GPOS::ApplyMarkMarkPos(uint64_t a1, uint64_t a2, unsigned __int16 *a3, TGlyphIterator *this, int a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t GlyphID;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  char *v22;
  BOOL v23;
  OTL::ClassDefTable *v24;
  uint64_t result;
  __int128 v26;
  uint64_t (*v27)(_QWORD *, uint64_t);
  _QWORD *v28;
  int v29;
  unsigned int GlyphProps;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v42;
  unsigned __int16 *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;

  v5 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) > (unint64_t)a3 || (unint64_t)(a3 + 6) > v5)
    return 0;
  v54 = *((_QWORD *)this + 9);
  v55 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 9) = 0;
  while (1)
  {
    if ((TGlyphIterator::Prev(this) & 1) == 0)
    {
LABEL_28:
      result = 0;
      *((_QWORD *)this + 9) = v54;
      *((_QWORD *)this + 6) = v55;
      return result;
    }
    v11 = *((_QWORD *)this + 6);
    GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, v11);
    v13 = *(uint64_t **)(a1 + 24);
    v14 = bswap32(*(unsigned __int16 *)(*(_QWORD *)a2 + 2)) >> 16;
    if ((v14 & 0x10) != 0)
      break;
    if (v14 < 0x100)
      goto LABEL_30;
    v15 = *v13;
    if (*v13)
    {
      if (*(_WORD *)(v15 + 10))
      {
        v16 = (unsigned __int16 *)(v15 + __rev16(*(unsigned __int16 *)(v15 + 10)));
        v17 = v13[1];
        if ((unint64_t)(v16 + 1) <= v17)
        {
          v18 = bswap32(*v16) >> 16;
          if (v18 == 2)
            v19 = 6 * (bswap32(v16[1]) >> 16) + 4;
          else
            v19 = v18 == 1 ? 2 * (bswap32(v16[2]) >> 16) + 6 : 0;
          v22 = (char *)v16 + v19;
          v23 = v22 < (char *)v16 || (unint64_t)v22 > v17;
          if (!v23 && v14 >> 8 == OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v16, GlyphID))
            goto LABEL_30;
        }
      }
    }
LABEL_26:
    v24 = (OTL::ClassDefTable *)v13[2];
    if (!v24 || OTL::ClassDefTable::ClassOf(v24, GlyphID) != 3)
      goto LABEL_28;
  }
  OTL::GDEF::MarkFilteringSet(*(OTL::Coverage **)(a1 + 24), bswap32(*(unsigned __int16 *)(*(_QWORD *)a2 + 2 * (bswap32(*(unsigned __int16 *)(*(_QWORD *)a2 + 4)) >> 16) + 6)) >> 16, (uint64_t)&v56);
  v20 = (unsigned int (*)(_QWORD *, uint64_t))v57;
  v21 = (_QWORD *)((char *)&v56 + (*((uint64_t *)&v57 + 1) >> 1));
  if ((BYTE8(v57) & 1) != 0)
    v20 = *(unsigned int (**)(_QWORD *, uint64_t))(*v21 + v57);
  if (!v20(v21, GlyphID))
  {
    v13 = *(uint64_t **)(a1 + 24);
    goto LABEL_26;
  }
LABEL_30:
  v58 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v56 = v26;
  v57 = v26;
  OTL::Coverage::Coverage((OTL::Coverage *)&v56, (unsigned __int16 *)((char *)a3 + (bswap32(a3[2]) >> 16)), v5, 1);
  v27 = (uint64_t (*)(_QWORD *, uint64_t))v57;
  v28 = (_QWORD *)((char *)&v56 + (*((uint64_t *)&v57 + 1) >> 1));
  if ((BYTE8(v57) & 1) != 0)
    v27 = *(uint64_t (**)(_QWORD *, uint64_t))(*v28 + v57);
  result = v27(v28, GlyphID);
  *((_QWORD *)this + 9) = v54;
  *((_QWORD *)this + 6) = v55;
  if ((_DWORD)result)
  {
    v29 = result;
    GlyphProps = TRunGlue::GetGlyphProps(*(TRunGlue **)this, v55);
    v31 = TRunGlue::GetGlyphProps(*(TRunGlue **)this, v11);
    v32 = v31 >> 28;
    if ((v31 ^ GlyphProps) >> 29)
    {
      if (GlyphProps >> 29 && (GlyphProps & 0x10000000) != 0)
        goto LABEL_45;
      result = 0;
      if (v31 >> 29)
      {
        if ((v31 & 0x10000000) != 0)
          goto LABEL_45;
      }
    }
    else
    {
      if (!(GlyphProps >> 29))
        goto LABEL_45;
      result = 0;
      v33 = HIBYTE(GlyphProps) & 0xF;
      v34 = HIBYTE(v31) & 0xF;
      if ((GlyphProps & 0x10000000) != 0)
        v33 = 0;
      if ((v32 & 1) != 0)
        v34 = 0;
      if (v33 == v34)
      {
LABEL_45:
        v35 = (unsigned __int16 *)((char *)a3 + (bswap32(a3[4]) >> 16));
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) > v5)
          return 0;
        v37 = bswap32(*v35) >> 16;
        v38 = (unint64_t)&v36[2 * v37];
        v39 = (unint64_t)(v35 + 3) <= v5 ? (v5 - (unint64_t)v36) >> 2 : 0;
        v40 = v38 <= v5 && v38 >= (unint64_t)v36;
        if (!v40 && v39 != v37)
          return 0;
        v42 = (a5 - 1);
        if ((unint64_t)&v36[2 * v42 + 2] > v5)
          return 0;
        v43 = &v35[2 * v42];
        if (!v43[2])
          return 0;
        result = 0;
        v44 = (char *)v35 + __rev16(v43[2]);
        if ((unint64_t)(v44 + 6) <= v5)
          v45 = (unint64_t)v44;
        else
          v45 = 0;
        if ((unint64_t)(v44 + 6) <= v5 && v45 >= (unint64_t)a3 && v45 + 6 <= v5)
        {
          v46 = (char *)a3 + (bswap32(a3[5]) >> 16);
          if ((unint64_t)(v46 + 2) <= v5)
          {
            v47 = (bswap32(v43[1]) >> 16) + (v29 - 1) * (bswap32(a3[3]) >> 16);
            if ((unint64_t)&v46[2 * v47 + 4] <= v5)
            {
              v48 = *(unsigned __int16 *)&v46[2 * v47 + 2];
              if (v48)
              {
                v49 = &v46[__rev16(v48)];
                v50 = (unint64_t)(v49 + 6) <= v5 ? (unint64_t)v49 : 0;
                v51 = (unint64_t)(v49 + 6) <= v5 && v50 >= (unint64_t)a3;
                if (v51 && v50 + 6 <= v5)
                {
                  AlignMarkAnchor((TRunGlue **)this, v11, v55, v50, v45, *(TFont **)(a1 + 16), a1);
                  return 1;
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

OTL::Coverage *OTL::GDEF::MarkFilteringSet@<X0>(OTL::Coverage *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;

  if (*((_BYTE *)this + 24))
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(_QWORD *)this + (bswap32(*(unsigned __int16 *)(*(_QWORD *)this + 12)) >> 16);
    v5 = v4 + 4;
    if (v4 + 4 <= v3)
    {
      v6 = bswap32(*(unsigned __int16 *)(v4 + 2)) >> 16;
      v7 = v5 + 4 * v6;
      if (v7 >= v5 && v7 <= v3)
        goto LABEL_11;
      v9 = (v3 - v5) >> 2;
      if (v4 + 8 > v3)
        v9 = 0;
      if (v9 == v6)
      {
LABEL_11:
        if (v6 > a2)
          return OTL::Coverage::Coverage((OTL::Coverage *)a3, (unsigned __int16 *)(v4 + bswap32(*(_DWORD *)(v4 + 4 * a2 + 4))), v3, 1);
      }
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = OTL::Coverage::SearchUnknown;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0xFFFF;
  return this;
}

uint64_t OTL::GPOS::ApplyMarkBasePos(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t GlyphID;
  OTL::ClassDefTable *v15;
  uint64_t (*v16)(_QWORD *, uint64_t);
  _QWORD *v17;
  uint64_t result;
  int GlyphProps;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  _QWORD *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) > (unint64_t)a2 || (unint64_t)(a2 + 6) > v4)
    return 0;
  v10 = *(_QWORD *)(a3 + 48);
  v44 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v11;
  v43 = v11;
  OTL::Coverage::Coverage((OTL::Coverage *)&v42, (unsigned __int16 *)((char *)a2 + (bswap32(a2[2]) >> 16)), v4, 1);
  v12 = *(_QWORD *)(a3 + 56);
  if (TGlyphIterator::Prev((TGlyphIterator *)a3))
  {
    while (1)
    {
      v13 = *(_QWORD *)(a3 + 48);
      if (v13 == v12)
        break;
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
      v15 = *(OTL::ClassDefTable **)(*(_QWORD *)(a1 + 24) + 16);
      if (!v15 || OTL::ClassDefTable::ClassOf(v15, GlyphID) != 3)
      {
        v16 = (uint64_t (*)(_QWORD *, uint64_t))v43;
        v17 = (_QWORD *)((char *)&v42 + (*((uint64_t *)&v43 + 1) >> 1));
        if ((BYTE8(v43) & 1) != 0)
          v16 = *(uint64_t (**)(_QWORD *, uint64_t))(*v17 + v43);
        LODWORD(result) = v16(v17, GlyphID);
        if ((_DWORD)result)
        {
          *(_QWORD *)(a3 + 48) = v10;
          *(_QWORD *)(a3 + 56) = v10;
          *(_QWORD *)(a3 + 64) = v13;
          goto LABEL_23;
        }
        GlyphProps = TRunGlue::GetGlyphProps(*(TRunGlue **)a3, v13);
        if ((GlyphProps & 0x10000000) != 0 || (GlyphProps & 0xF000000) == 0)
          goto LABEL_17;
      }
      if ((TGlyphIterator::Prev((TGlyphIterator *)a3) & 1) == 0)
        goto LABEL_17;
    }
    v13 = *(_QWORD *)(a3 + 64);
    v20 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v13);
    v21 = (uint64_t (*)(_QWORD *, uint64_t))v43;
    v22 = (_QWORD *)((char *)&v42 + (*((uint64_t *)&v43 + 1) >> 1));
    if ((BYTE8(v43) & 1) != 0)
      v21 = *(uint64_t (**)(_QWORD *, uint64_t))(*v22 + v43);
    result = v21(v22, v20);
    *(_QWORD *)(a3 + 48) = v10;
    *(_QWORD *)(a3 + 56) = v10;
    *(_QWORD *)(a3 + 64) = v13;
    if (!(_DWORD)result)
      return result;
LABEL_23:
    v23 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[4]) >> 16));
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) <= v4)
    {
      v25 = bswap32(*v23) >> 16;
      v26 = (unint64_t)&v24[2 * v25];
      v27 = (unint64_t)(v23 + 3) <= v4 ? (v4 - (unint64_t)v24) >> 2 : 0;
      v28 = v26 <= v4 && v26 >= (unint64_t)v24;
      if (v28 || v27 == v25)
      {
        v30 = (a4 - 1);
        if ((unint64_t)&v24[2 * v30 + 2] <= v4)
        {
          v31 = &v23[2 * v30];
          if (v31[2])
          {
            v32 = (uint64_t)v23 + __rev16(v31[2]);
            if (v32 + 6 <= v4)
            {
              v33 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[5]) >> 16));
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) <= v4)
              {
                v35 = v31[1];
                v36 = bswap32(*v33) >> 16;
                v37 = (unint64_t)&v34[v36];
                v38 = (unint64_t)(v33 + 2) <= v4 ? (v4 - (unint64_t)v34) >> 1 : 0;
                v39 = v37 <= v4 && v37 >= (unint64_t)v34;
                if (v39 || v38 == v36)
                {
                  v40 = (bswap32(v35) >> 16) + ((_DWORD)result - 1) * (bswap32(a2[3]) >> 16);
                  if ((unint64_t)&v34[v40 + 1] <= v4)
                  {
                    if (v33[v40 + 1])
                    {
                      v41 = (uint64_t)v33 + __rev16(v33[v40 + 1]);
                      if (v41 + 6 <= v4)
                      {
                        AlignMarkAnchor((TRunGlue **)a3, v13, v10, v41, v32, *(TFont **)(a1 + 16), a1);
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v13 = 0;
LABEL_17:
  result = 0;
  *(_QWORD *)(a3 + 48) = v10;
  *(_QWORD *)(a3 + 56) = v10;
  *(_QWORD *)(a3 + 64) = v13;
  return result;
}

uint64_t TGlyphIterator::Prev(TGlyphIterator *this)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 2))
    return 0;
  do
  {
    v3 = *((int *)this + 2);
    v4 = *((_QWORD *)this + 6) - v3;
    *((_QWORD *)this + 6) = v4;
    if ((int)v3 < 1)
    {
      if ((v3 & 0x80000000) != 0 && v4 >= *((_QWORD *)this + 2))
        return 0;
    }
    else if (v4 <= *((_QWORD *)this + 2))
    {
      return 0;
    }
  }
  while ((TGlyphIterator::CurrentGlyphIsIgnored(this, 0) & 1) != 0);
  return 1;
}

void AlignMarkAnchor(TRunGlue **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, TFont *this, uint64_t a7)
{
  double v10;
  double v11;
  TRunGlue *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t **v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  TRunGlue *v32;
  uint64_t *v33;
  TRunGlue *v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CGPoint v40;

  v38 = NAN;
  v39 = NAN;
  v36 = NAN;
  v37 = NAN;
  GetAnchors(a4, a5, this, a7, &v38, &v36);
  v10 = v38 - v36;
  v11 = v39 - v37;
  v12 = *a1;
  v34 = v12;
  v35 = a2;
  v32 = v12;
  v33 = (uint64_t *)a3;
  TRunGlue::GetUnscaledPosition(v12, a2);
  v14 = v10 + v13;
  v16 = v11 + v15;
  if (a2 >= a3)
  {
    do
    {
      TRunGlue::GetUnscaledAdvance(*a1, --a2);
      v14 = v14 + v19;
      v16 = v16 + v20;
    }
    while (a2 > a3);
  }
  else
  {
    do
    {
      TRunGlue::GetUnscaledAdvance(*a1, a2);
      v14 = v14 - v17;
      v16 = v16 - v18;
      ++a2;
    }
    while (a3 != a2);
  }
  TRunGlue::TGlyph::clearSafeToBreakAfter((uint64_t)&v34);
  if ((*((_QWORD *)v12 + 19) || *((_QWORD *)v12 + 24)) && !*((_BYTE *)v12 + 634))
  {
    v40.x = v14 * *((double *)v12 + 80);
    v40.y = v16 * *((double *)v12 + 81);
    TRunGlue::SetOrigin(v12, a3, v40);
  }
  else
  {
    v21 = std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(*((uint64_t ***)v12 + 14), a3, &v33);
    v22 = -v16;
    if (*((_BYTE *)v12 + 634))
      v23 = v14;
    else
      v23 = v16;
    if (!*((_BYTE *)v12 + 634))
      v22 = v14;
    *((double *)v21 + 5) = v22;
    *((double *)v21 + 6) = v23;
  }
  if (*((_QWORD *)v12 + 19))
  {
    TRunGlue::FocusOnIndex(v12, a3);
    v24 = *((_QWORD *)v12 + 19);
    v25 = a3 - *((_QWORD *)v12 + 20);
    v26 = *(_QWORD **)(v24 + 216);
    v27 = *(_QWORD *)(v24 + 200);
    LODWORD(a3) = *(_DWORD *)(v26[5] + 4 * v27 + 4 * v25);
    if ((a3 & 0x40) != 0)
    {
      a3 = a3 & 0xFFFFEFBF | 0x1000;
      objc_msgSend(v26, "setProps:atIndex:", a3, v27 + v25, v32, v33, v34, v35);
      v26 = *(_QWORD **)(v24 + 216);
      v27 = *(_QWORD *)(v24 + 200);
    }
    objc_msgSend(v26, "setProps:atIndex:", a3 | 0x4000, v27 + v25, v32);
  }
  else
  {
    v28 = *((_QWORD *)v12 + 20) + a3;
    v29 = *((_QWORD *)v12 + 65);
    if (!v29)
    {
      TRunGlue::InitPropertiesFromDeletedGlyphs(v12);
      v29 = *((_QWORD *)v12 + 65);
    }
    v30 = *(_DWORD *)(v29 + 4 * v28);
    if ((v30 & 0x40) != 0)
      v31 = v30 & 0xFFFFAFBF | 0x5000;
    else
      v31 = v30 | 0x4000;
    *(_DWORD *)(v29 + 4 * v28) = v31;
  }
}

void TRunGlue::GetUnscaledPosition(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  TRunGlue::FocusOnIndex(this, a2);
  TRunGlue::GetOrigin(this, a2);
  v4 = *((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    if (v5)
    {
      do
      {
        if (v5[4] >= a2)
          v6 = v5;
        else
          v6 = v5 + 1;
        v5 = (_QWORD *)*v6;
      }
      while (*v6);
    }
  }
}

double TRunGlue::GetOrigin(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    v4 = *((_QWORD *)this + 19);
    if ((*(_BYTE *)(v4 + 225) & 0x10) != 0)
    {
      objc_msgSend(*(id *)(v4 + 216), "originAtIndex:", a2 - *((_QWORD *)this + 20) + *(_QWORD *)(v4 + 200));
      return result;
    }
    goto LABEL_6;
  }
  v6 = *((_QWORD *)this + 24);
  if (!v6)
  {
LABEL_6:
    v7 = MEMORY[0x1E0C9D538];
    return *(double *)v7;
  }
  v7 = v6 + 16 * (*((_QWORD *)this + 20) + a2);
  return *(double *)v7;
}

void TRunGlue::GetUnscaledAdvance(TRunGlue *this, uint64_t a2)
{
  TRunGlue::FocusOnIndex(this, a2);
  TRunGlue::GetAdvance(this, a2);
}

uint64_t TRunGlue::TGlyph::clearSafeToBreakAfter(uint64_t this)
{
  TRunGlue *v1;
  uint64_t v2;

  v1 = *(TRunGlue **)this;
  if (*(_QWORD *)(*(_QWORD *)this + 152))
  {
    v2 = *(_QWORD *)(this + 8);
    TRunGlue::FocusOnIndex(*(TRunGlue **)this, v2);
    return objc_msgSend(*(id *)(*((_QWORD *)v1 + 19) + 216), "setProps:atIndex:", *(_DWORD *)(*((_QWORD *)v1 + 65) + 4 * (v2 - *((_QWORD *)v1 + 20))) | 8u, *(_QWORD *)(*((_QWORD *)v1 + 19) + 200) + v2 - *((_QWORD *)v1 + 20));
  }
  return this;
}

void GetAnchors(uint64_t a1, uint64_t a2, TFont *this, uint64_t a4, double *a5, double *a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  const __int16 *VariationValues;
  const __int16 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v11 = (double)((int)bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
  v12 = (double)((int)bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16);
  v13 = (double)((int)bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16);
  v14 = (double)((int)bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16);
  if (*(_WORD *)a1 == 768 || *(_WORD *)a2 == 768)
  {
    v19 = 0xAAAAAAAAAAAAAAAALL;
    VariationValues = (const __int16 *)TFont::GetVariationValues(this, (id *)&v19);
    if (VariationValues)
    {
      v16 = VariationValues;
      if (*(_WORD *)a1 == 768)
      {
        v17 = v19;
        v11 = OTL::GDEF::DeltaValue(*(OTL::GDEF **)(a4 + 24), (char *)a1, *(_QWORD *)(a4 + 40), bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16, v19, VariationValues)+ v11;
        v12 = OTL::GDEF::DeltaValue(*(OTL::GDEF **)(a4 + 24), (char *)a1, *(_QWORD *)(a4 + 40), bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16, v17, v16)+ v12;
      }
      if (*(_WORD *)a2 == 768)
      {
        v18 = v19;
        v13 = OTL::GDEF::DeltaValue(*(OTL::GDEF **)(a4 + 24), (char *)a2, *(_QWORD *)(a4 + 40), bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16, v19, v16)+ v13;
        v14 = OTL::GDEF::DeltaValue(*(OTL::GDEF **)(a4 + 24), (char *)a2, *(_QWORD *)(a4 + 40), bswap32(*(unsigned __int16 *)(a2 + 8)) >> 16, v18, v16)+ v14;
      }
    }
  }
  *a5 = v11;
  a5[1] = v12;
  *a6 = v13;
  a6[1] = v14;
}

uint64_t TRunGlue::DoGlyphInsertion(TRunGlue *this, const unsigned __int16 *a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7, char a8, BOOL *a9)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t StringIndex;
  unsigned int GlyphProps;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  CFRange v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int *v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  CGPoint *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v61;
  uint64_t v62;
  void **v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  _OWORD v69[7];
  unint64_t v70;
  _OWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 19))
  {
    if (a7 < 0)
      return 0;
LABEL_6:
    TRunGlue::FocusOnIndex(this, a7);
    v16 = TRunGlue::length(this);
    if (v16 - 1 >= a7)
      v17 = a7;
    else
      v17 = v16 - 1;
    StringIndex = TRunGlue::GetStringIndex(this, v17);
    GlyphProps = TRunGlue::GetGlyphProps(this, v17);
    v20 = GlyphProps & 0xFFFFEF37;
    if ((GlyphProps & 0x300) == 0)
      TRunGlue::SetGlyphProps(this, v17, v20 | 0x80);
    if (a5)
      v21 = 256;
    else
      v21 = 512;
    TRunGlue::FocusOnIndex(this, a6);
    v62 = a6;
    v22 = (a4 ^ 1u) + a6;
    if (v22 < 0 || *((_QWORD *)this + 21) < v22)
    {
      if (a9)
      {
        result = 0;
        *a9 = 1;
        return result;
      }
      return 0;
    }
    v23 = *((_QWORD *)this + 19);
    if (v23)
    {
      if (v23 != *((_QWORD *)this + 67))
      {
        TStorageRange::DetachStorageIfShared((TStorageRange *)(v23 + 192));
        v23 = *((_QWORD *)this + 19);
        *((_QWORD *)this + 67) = v23;
      }
      if (v22 - *((_QWORD *)this + 20) < 0)
        v24.location = 0;
      else
        v24.location = v22 - *((_QWORD *)this + 20);
      v24.length = a3;
      TStorageRange::InsertGlyphs((id *)(v23 + 192), v24);
    }
    else
    {
      result = std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(*((_QWORD *)this + 73), *((_QWORD *)this + 20) + v22, a3, (uint64_t)this + 176, (uint64_t)this + 184, (uint64_t)this + 192, (uint64_t)this + 528);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 65))
      {
        v33 = *((_QWORD *)this + 46);
        if (v33 != *((_QWORD *)this + 47))
        {
          LODWORD(v66) = 0;
          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::insert((uint64_t *)this + 46, (char *)(v33 + 4 * v22), a3, (char *)&v66);
          *((_QWORD *)this + 65) = *((_QWORD *)this + 46);
        }
      }
      else
      {
        v47 = TRunGlue::length(this);
        v48 = a3 + v47 + 14;
        if (a3 + v47 + 7 >= 0)
          v48 = a3 + v47 + 7;
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::resize((_QWORD *)this + 26, v48 >> 3);
        v49 = TRunGlue::length(this);
        v50 = v22 + a3;
        if (v49 >= v50)
        {
          do
          {
            v51 = v49 + *((_QWORD *)this + 20);
            v52 = v51 + 1;
            v53 = v51 + 7;
            if (v51 >= 0)
              v53 = v49 + *((_QWORD *)this + 20);
            v54 = v53 >> 3;
            v55 = *((_QWORD *)this + 26);
            v56 = v51 & 7;
            v57 = 1 << (v52 & 7);
            v58 = v52 / 8;
            if (((*(unsigned __int8 *)(v55 + v54) >> v56) & 1) != 0)
              v59 = *(_BYTE *)(v55 + v58) | v57;
            else
              v59 = *(_BYTE *)(v55 + v58) & ~(_BYTE)v57;
            *(_BYTE *)(v55 + v58) = v59;
          }
          while (v49-- > v50);
        }
        if (a3)
        {
          v61 = v22;
          do
          {
            *(_BYTE *)(*((_QWORD *)this + 26) + (v61 + *((_QWORD *)this + 20)) / 8) &= ~(1 << ((v61
                                                                                              + *((_BYTE *)this + 160)) & 7));
            ++v61;
          }
          while (v61 < v50);
        }
      }
    }
    TRunGlue::InsertedGlyphs(this, a3);
    v25 = *((_QWORD *)this + 13);
    if (v25)
    {
      v26 = *(char **)v25;
      v27 = *(_QWORD *)(v25 + 8);
      if (*(_QWORD *)v25 != v27 && v22 <= (v27 - (uint64_t)v26) >> 4)
        std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::insert((char **)v25, (uint64_t)&v26[16 * v22], a3, &v26[16 * v17]);
    }
    *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v69[5] = v28;
    v69[6] = v28;
    v69[3] = v28;
    v69[4] = v28;
    v69[1] = v28;
    v69[2] = v28;
    v69[0] = v28;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v70 = 0xAAAAAAAAAAAAAAAALL;
    v71 = v69;
    if (a3)
    {
      v29 = v20 | v21;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vallocate[abi:nn180100](&v66, a3);
      v30 = v67;
      v31 = &v67[a3];
      v32 = 4 * a3;
      do
      {
        *v30++ = v29;
        v32 -= 4;
      }
      while (v32);
      v67 = v31;
    }
    else
    {
      v31 = 0;
    }
    if (!(GlyphProps >> 29) && (a8 & 1) == 0)
    {
      v34 = v66;
      if ((int *)v66 != v31)
      {
        v35 = 0x1000000;
        v36 = v66;
        do
        {
          *(_BYTE *)(v36 + 3) = HIBYTE(v35) & 0xF;
          v36 += 4;
          v35 += 0x1000000;
        }
        while ((int *)v36 != v31);
      }
      if ((*((_DWORD *)this + 6) & 0x80000000) != 0 && (int *)v34 != v31)
      {
        v37 = v31 - 1;
        if ((unint64_t)v37 > v34)
        {
          v38 = v34 + 4;
          do
          {
            v39 = *(_DWORD *)(v38 - 4);
            *(_DWORD *)(v38 - 4) = *v37;
            *v37-- = v39;
            v40 = v38 >= (unint64_t)v37;
            v38 += 4;
          }
          while (!v40);
        }
      }
    }
    if (a3)
    {
      v41 = 0;
      v42 = (CGPoint *)MEMORY[0x1E0C9D538];
      do
      {
        TRunGlue::SetGlyphProps(this, v22 + v41, *(unsigned int *)(v66 + 4 * v41));
        TRunGlue::SetOrigin(this, v22 + v41, *v42);
        TRunGlue::SetStringIndex(this, v22 + v41, StringIndex);
        TRunGlue::SetAttachmentCount(this, v22 + v41, 0);
        v43 = a2[v41];
        TRunGlue::SetGlyphID<true>(this, v22 + v41, v43);
        v44 = *((_QWORD *)this + 25);
        if (v44)
        {
          if (*((_QWORD *)this + 78) > v43)
            *(_BYTE *)(v44 + ((unint64_t)v43 >> 3)) |= 1 << (v43 & 7);
        }
        ++v41;
      }
      while (a3 != v41);
    }
    v45 = *((_QWORD *)this + 19);
    if (!v45)
      goto LABEL_62;
    if (a7 == v62)
    {
      if (*(int *)(v45 + 256) > 1)
      {
LABEL_62:
        v65 = (void **)&v66;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v65);
        return 1;
      }
      v46 = 1;
    }
    else
    {
      v46 = 2;
    }
    *(_DWORD *)(v45 + 256) = v46;
    goto LABEL_62;
  }
  result = 0;
  if ((a7 & 0x8000000000000000) == 0 && *((_QWORD *)this + 73))
    goto LABEL_6;
  return result;
}

_QWORD *TRunGlue::SetOrigin(_QWORD *this, uint64_t a2, CGPoint a3)
{
  double y;
  double x;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  y = a3.y;
  x = a3.x;
  v6 = this;
  if (this[19])
  {
    TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    v7 = v6[19];
    objc_msgSend(*(id *)(v7 + 216), "setOrigin:atIndex:", a2 - v6[20] + *(_QWORD *)(v7 + 200), x, y);
    if (x != *MEMORY[0x1E0C9D538] || y != *(double *)(MEMORY[0x1E0C9D538] + 8))
      *(_BYTE *)(v7 + 225) |= 0x10u;
    return (_QWORD *)TRun::NoteCrossStreamPosition((TRun *)v6[19], y);
  }
  else
  {
    v9 = this[24];
    if (v9)
      *(CGPoint *)(v9 + 16 * (this[20] + a2)) = a3;
  }
  return this;
}

uint64_t TRun::NoteCrossStreamPosition(TRun *this, double a2)
{
  uint64_t result;
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t v13;

  result = *((_QWORD *)this + 39);
  if (!result)
  {
    if (a2 == 0.0)
      return result;
    v7 = (uint64_t *)((char *)this + 312);
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(result + 32) = _Q1;
    *(_QWORD *)(result + 48) = 0xBFF0000000000000;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    v13 = *v7;
    *v7 = result;
    if (v13)
    {
      std::default_delete<TRun::RareData>::operator()[abi:nn180100]((uint64_t)v7, v13);
      result = *v7;
    }
  }
  v5 = *(double *)(result + 16);
  v6 = *(double *)(result + 24);
  if (v5 > a2)
    v5 = a2;
  if (v6 < a2)
    v6 = a2;
  *(double *)(result + 16) = v5;
  *(double *)(result + 24) = v6;
  return result;
}

void TRunGlue::SetGlyphProps(TRunGlue *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    objc_msgSend(*(id *)(*((_QWORD *)this + 19) + 216), "setProps:atIndex:", a3, a2 - *((_QWORD *)this + 20) + *(_QWORD *)(*((_QWORD *)this + 19) + 200));
    return;
  }
  v6 = *((_QWORD *)this + 20) + a2;
  v7 = *((_QWORD *)this + 65);
  if (v7)
    goto LABEL_6;
  if ((a3 & 0xFFFFFFDF) != 0)
  {
    TRunGlue::InitPropertiesFromDeletedGlyphs(this);
    v7 = *((_QWORD *)this + 65);
LABEL_6:
    *(_DWORD *)(v7 + 4 * v6) = a3;
    return;
  }
  v8 = 1 << (v6 & 7);
  v9 = v6 / 8;
  v10 = *((_QWORD *)this + 26);
  if ((a3 & 0x20) != 0)
    v11 = *(_BYTE *)(v10 + v9) | v8;
  else
    v11 = *(_BYTE *)(v10 + v9) & ~(_BYTE)v8;
  *(_BYTE *)(v10 + v9) = v11;
}

BOOL OTL::GCommon::HasFeature(OTL::GCommon *this, unsigned int a2)
{
  __int128 v2;
  _BOOL8 v3;
  unsigned int **v5;
  unsigned int *v6[3];
  _OWORD v7[9];
  _OWORD *v8;
  unsigned int __dst[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  __dst[0] = a2;
  __dst[1] = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[8] = v2;
  v7[7] = v2;
  v7[6] = v2;
  v7[5] = v2;
  v7[4] = v2;
  v7[3] = v2;
  v7[2] = v2;
  v7[1] = v2;
  v7[0] = v2;
  memset(v6, 0, sizeof(v6));
  v8 = v7;
  v3 = 0;
  if (OTL::GCommon::GetFeatures(this, (OTL::FeatureList *)v6))
    v3 = OTL::FeatureList::StripMissingFeaturesFrom(v6, __dst);
  v5 = v6;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v5);
  return v3;
}

void JoiningScriptShapingEngine::SetFeatures(JoiningScriptShapingEngine *this, const OTL::GSUB *a2, unsigned __int16 **a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  TRunGlue *v7;
  uint64_t v8;
  int *v9;
  __int32 *v10;
  uint64_t v11;
  __int128 v12;
  TRunGlue *v13;
  TRunGlue *v14;
  char **v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  __int32 *v32;
  __int32 *v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  TRunGlue *v46;
  uint64_t v47;
  _BOOL4 v48;
  BOOL v49;
  unsigned __int16 v50;
  uint64_t v51;
  BOOL IsDeleted;
  TRunGlue *v53;
  unint64_t FullChar;
  int v55;
  __int16 GlyphProps;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  __int16 v61;
  __int16 v62;
  unsigned int **v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  int GlyphID;
  TRunGlue *v68;
  char *v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t i;
  TRunGlue *v75;
  __int16 v76;
  __int16 v77;
  uint64_t v78;
  unint64_t v80;
  TRunGlue *v81;
  int v83;
  __int32 *__s;
  int __sa;
  _OWORD v86[12];
  TRunGlue **v87;
  uint64_t v88[2];
  TRunGlue **v89;
  _OWORD v90[5];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  TRunGlue *v98;
  TRunGlue *v99;
  uint64_t v100;
  _OWORD v101[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105;
  _OWORD *v106;
  uint64_t v107;

  v4 = 0;
  v107 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v86[10] = v5;
  v86[11] = v5;
  v86[8] = v5;
  v86[9] = v5;
  v86[6] = v5;
  v86[7] = v5;
  v86[4] = v5;
  v86[5] = v5;
  v86[2] = v5;
  v86[3] = v5;
  v86[0] = v5;
  v86[1] = v5;
  do
  {
    v6 = &v86[v4];
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    v6[5] = (char *)&v86[v4 + 1] + 8;
    v4 += 3;
  }
  while (v4 != 12);
  v7 = (TRunGlue *)*((_QWORD *)this + 2);
  v8 = TRunGlue::length(v7);
  v9 = (int *)*((_QWORD *)this + 2);
  v80 = v9[6];
  v10 = (__int32 *)&JoiningScriptShapingEngine::SetFeatures(OTL::GSUB const&,OTL::GlyphLookups &)::rtlTagArray;
  if ((int)v80 < 1)
  {
    v75 = v7;
    v81 = (TRunGlue *)(v8 - 1);
    v78 = -1;
    v76 = 2;
    v77 = 1;
  }
  else
  {
    v78 = TRunGlue::length((TRunGlue *)v9);
    v81 = 0;
    if (*((_DWORD *)a2 + 18) != 1634885986)
      v10 = (__int32 *)"lositinianifidem";
    v76 = 1;
    v77 = 2;
    v75 = (TRunGlue *)v9;
  }
  v11 = 0;
  __s = v10;
  do
  {
    v105 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v103 = v12;
    v104 = v12;
    v101[3] = v12;
    v102 = v12;
    v101[1] = v12;
    v101[2] = v12;
    v101[0] = v12;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v106 = v101;
    LODWORD(v87) = v10[v11];
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)&v89, &v87, (_DWORD *)&v87 + 1);
    OTL::GCommon::GetLookups((uint64_t)a2, (uint64_t)&v89, (uint64_t)&v98, 0);
    v88[0] = (uint64_t)&v89;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    v14 = v98;
    v13 = v99;
    if (v98 != v99)
    {
      v15 = (char **)&v86[3 * v11];
      v16 = v15[1];
      do
      {
        v17 = *(_DWORD *)v14;
        v18 = (unint64_t)v15[2];
        if ((unint64_t)v16 >= v18)
        {
          v19 = (v16 - *v15) >> 2;
          if ((unint64_t)(v19 + 1) >> 62)
            abort();
          v20 = v18 - (_QWORD)*v15;
          v21 = v20 >> 1;
          if (v20 >> 1 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          *((_QWORD *)&v90[1] + 1) = v15 + 3;
          if (v22)
            v23 = (char *)TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul>::allocate((uint64_t)(v15 + 3), v22);
          else
            v23 = 0;
          v24 = &v23[4 * v19];
          v25 = &v23[4 * v22];
          *(_QWORD *)&v90[1] = v25;
          *(_DWORD *)v24 = v17;
          v16 = v24 + 4;
          *((_QWORD *)&v90[0] + 1) = v24 + 4;
          v27 = *v15;
          v26 = (unint64_t)v15[1];
          if ((char *)v26 == *v15)
          {
            v29 = vdupq_n_s64(v26);
          }
          else
          {
            do
            {
              v28 = *(_DWORD *)(v26 - 4);
              v26 -= 4;
              *((_DWORD *)v24 - 1) = v28;
              v24 -= 4;
            }
            while ((char *)v26 != v27);
            v29 = *(int64x2_t *)v15;
            v16 = (char *)*((_QWORD *)&v90[0] + 1);
            v25 = *(char **)&v90[1];
          }
          *v15 = v24;
          v15[1] = v16;
          v90[0] = v29;
          v30 = v15[2];
          v15[2] = v25;
          *(_QWORD *)&v90[1] = v30;
          v89 = (TRunGlue **)v29.i64[0];
          std::__split_buffer<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&v89);
        }
        else
        {
          *(_DWORD *)v16 = v17;
          v16 += 4;
        }
        v15[1] = v16;
        v14 = (TRunGlue *)((char *)v14 + 4);
      }
      while (v14 != v13);
    }
    v89 = &v98;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v89);
    ++v11;
    v10 = __s;
  }
  while (v11 != 4);
  v31 = 0;
  *(_OWORD *)v88 = xmmword_1849506F0;
  do
  {
    v32 = wmemchr(v10, *((_DWORD *)v88 + v31), 4uLL);
    if (v32)
      v33 = v32;
    else
      v33 = __s + 4;
    v34 = (unsigned int **)&v86[3 * (v33 - v10)];
    v35 = *v34;
    v36 = v34[1];
    while (v35 != v36)
    {
      v37 = *v35;
      v38 = *a3;
      v39 = a3[1];
      if (*a3 != v39)
      {
        while (*v38 != (unsigned __int16)v37 || v38[1] != HIWORD(v37))
        {
          v38 += 52;
          if (v38 == v39)
            goto LABEL_43;
        }
      }
      if (v38 == v39)
      {
LABEL_43:
        v98 = 0;
        v99 = 0;
        v100 = 0;
        *(_QWORD *)&v102 = v101;
        LODWORD(v89) = v37;
        memset(v90, 0, 24);
        *((_QWORD *)&v91 + 1) = (char *)&v90[1] + 8;
        std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::emplace_back<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>>((uint64_t *)a3, (uint64_t)&v89);
        v87 = (TRunGlue **)v90;
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v87);
        v87 = &v98;
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v87);
      }
      ++v35;
    }
    ++v31;
    v10 = __s;
  }
  while (v31 != 4);
  v41 = v80;
  v42 = *((_QWORD *)this + 1);
  memset(v90, 0, sizeof(v90));
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v97 = 0;
  v96 = 0u;
  v43 = *(_QWORD *)(v42 + 16);
  v89 = (TRunGlue **)v42;
  *(_QWORD *)&v96 = v43;
  if ((int)v80 > 0)
    v44 = 1;
  else
    v44 = 2;
  __sa = v44;
  if ((int)v80 <= 0)
    v45 = 1;
  else
    v45 = 2;
  v83 = v45;
  v98 = v75;
  v99 = v81;
  v46 = (TRunGlue *)v78;
  if (v81 != (TRunGlue *)v78)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    while (1)
    {
      IsDeleted = TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v98);
      v53 = v99;
      if (!IsDeleted)
      {
        v88[0] = TRunGlue::GetStringIndex(v98, (uint64_t)v99);
        FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v89, v88, 0);
        v55 = JoiningScriptShapingEngine::shapeTypes[u_getIntPropertyValue(FullChar, UCHAR_JOINING_TYPE)];
        GlyphProps = TRunGlue::GetGlyphProps(v98, (uint64_t)v99);
        if (v88[0] == v51)
          v57 = 4;
        else
          v57 = v55;
        if ((GlyphProps & 0x300) != 0)
        {
          v58 = 4;
        }
        else
        {
          v51 = v88[0];
          v58 = v57;
        }
        if ((v58 & 4) != 0)
        {
          if (v47 >= 1
            && FullChar >= 0x180B
            && (FullChar >> 1 < 0xC07 || (_DWORD)FullChar == 6159))
          {
            v53 = v99;
            v68 = v81;
            v69 = (char *)v81 + v47;
            if ((uint64_t)v99 < (uint64_t)v81)
              v68 = v99;
            if ((uint64_t)v69 <= (uint64_t)((char *)v99 + 1))
              v69 = (char *)v99 + 1;
            v47 = v69 - (char *)v68;
            v81 = v68;
          }
          else
          {
            v53 = v99;
            if (!*((_BYTE *)this + 24))
            {
              GlyphID = TRunGlue::GetGlyphID(v98, (uint64_t)v99);
              v53 = v99;
              v41 = v80;
              if (!GlyphID)
              {
                TRunGlue::Delete(*((_QWORD **)this + 2), (uint64_t)v99, 0);
                v53 = v99;
              }
              goto LABEL_84;
            }
          }
          v41 = v80;
        }
        else
        {
          v59 = (v58 & 8) == 0;
          v60 = v49 && (v58 & v83) != 0;
          if ((v59 & v60) != 0)
            v61 = v77;
          else
            v61 = 0;
          v49 = (v58 & __sa) != 0;
          if (v47 >= 1)
          {
            v62 = v76;
            if ((v60 & v48) == 0)
              v62 = 0;
            v63 = (unsigned int **)&v86[3 * (unsigned __int16)(v62 + v50)];
            v64 = *v63;
            v65 = v63[1];
            if (*v63 != v65)
            {
              do
              {
                v66 = *v64++;
                FullChar = FullChar & 0xFFFFFFFF00000000 | v66;
                OTL::GlyphLookups::SetLookupInRange<true>((uint64_t *)a3, FullChar, (uint64_t)v81, v47);
              }
              while (v64 != v65);
            }
          }
          v53 = v99;
          v50 = v61;
          v48 = v59;
          v81 = v99;
          v47 = 1;
          v41 = v80;
          v46 = (TRunGlue *)v78;
        }
      }
LABEL_84:
      v99 = (TRunGlue *)((char *)v53 + v41);
      if ((TRunGlue *)((char *)v53 + v41) == v46)
      {
        if (v47 > 0)
        {
          v70 = (unsigned int **)&v86[3 * v50];
          v71 = *v70;
          v72 = v70[1];
          if (*v70 != v72)
          {
            do
            {
              v73 = *v71++;
              v41 = v41 & 0xFFFFFFFF00000000 | v73;
              OTL::GlyphLookups::SetLookupInRange<true>((uint64_t *)a3, v41, (uint64_t)v81, v47);
            }
            while (v71 != v72);
          }
        }
        break;
      }
    }
  }
  for (i = 9; i != -3; i -= 3)
  {
    v89 = (TRunGlue **)&v86[i];
    std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v89);
  }
}

uint64_t TRunGlue::GetStringIndex(TRunGlue *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    v4 = *((_QWORD *)this + 66);
    v5 = a2 - *((_QWORD *)this + 20);
    return *(_QWORD *)(v4 + 8 * v5);
  }
  v4 = *((_QWORD *)this + 66);
  if (v4)
  {
    v5 = *((_QWORD *)this + 20) + a2;
    return *(_QWORD *)(v4 + 8 * v5);
  }
  return -1;
}

BOOL TRunGlue::TGlyph::IsDeleted(TRunGlue::TGlyph *this)
{
  return TRunGlue::GetGlyphID(*(TRunGlue **)this, *((_QWORD *)this + 1)) == 0xFFFF
      || TRunGlue::IsDeleted(*(TRunGlue **)this, *((_QWORD *)this + 1));
}

uint64_t std::__split_buffer<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 16);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void *TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  v2 = (unint64_t *)(a1 + 16);
  v3 = v4;
  v5 = v4 + 4 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(4 * a2);
  }
}

void OTL::GlyphLookups::SetLookupInRange<true>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int64x2_t v36;
  uint64_t v37;
  void ***v38;
  _QWORD v39[2];
  void **v40[12];
  _BYTE v41[32];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int16 *)*a1;
  v8 = (unsigned __int16 *)a1[1];
  if ((unsigned __int16 *)*a1 != v8)
  {
    while (*v9 != (unsigned __int16)a2 || v9[1] != HIWORD(a2))
    {
      v9 += 52;
      if (v9 == v8)
        goto LABEL_13;
    }
  }
  if (v9 == v8)
  {
LABEL_13:
    v46 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v44 = v16;
    v45 = v16;
    v42 = v16;
    v43 = v16;
    *(_OWORD *)&v41[16] = v16;
    *(_OWORD *)v41 = v16;
    v39[0] = a3;
    v39[1] = a4;
    TInlineVector<CFRange,4ul>::TInlineVector(v40, v39, 1uLL);
    *(_DWORD *)v41 = a2;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v41[8], (_BYTE *)v40[0], (_BYTE *)v40[1]);
    v38 = v40;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v38);
    std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::emplace_back<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>>(a1, (uint64_t)v41);
    v40[0] = (void **)&v41[8];
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](v40);
    return;
  }
  v12 = (char *)*((_QWORD *)v9 + 1);
  v11 = (char *)*((_QWORD *)v9 + 2);
  if (v12 != v11)
  {
    v13 = *((_QWORD *)v11 - 1);
    if (v13 < 0)
      return;
    v14 = *((_QWORD *)v11 - 2);
    v15 = v14 + v13;
    if (v14 + v13 == a3)
    {
      *((_QWORD *)v11 - 1) = v13 + a4;
      return;
    }
    v17 = a3 + a4;
    if (a3 + a4 == v14)
    {
      *((_QWORD *)v11 - 2) = a3;
      *((_QWORD *)v11 - 1) = v13 + a4;
      return;
    }
    if (v17 >= v15)
      v18 = v14 + v13;
    else
      v18 = a3 + a4;
    v19 = v14 <= a3 && a3 < v15;
    v20 = a3;
    if (v19 || (a3 <= v14 ? (v21 = v14 < v17) : (v21 = 0), v20 = *((_QWORD *)v11 - 2), v21))
    {
      if (v18 > v20)
      {
        if (v14 >= a3)
          v22 = a3;
        else
          v22 = *((_QWORD *)v11 - 2);
        if (v17 <= v15)
          v23 = v14 + v13;
        else
          v23 = a3 + a4;
        *((_QWORD *)v11 - 2) = v22;
        *((_QWORD *)v11 - 1) = v23 - v22;
        return;
      }
    }
    if (a3 == v14 && a4 == v13)
      return;
  }
  v25 = *((_QWORD *)v9 + 3);
  if ((unint64_t)v11 >= v25)
  {
    v27 = (v11 - v12) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      abort();
    v29 = v25 - (_QWORD)v12;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    *(_QWORD *)&v42 = v9 + 16;
    if (v30)
      v31 = (char *)TInlineBufferAllocator<CFRange,4ul>::allocate((uint64_t)(v9 + 16), v30);
    else
      v31 = 0;
    v32 = &v31[16 * v27];
    *(_QWORD *)v32 = a3;
    *((_QWORD *)v32 + 1) = a4;
    v33 = *((_QWORD *)v9 + 1);
    v34 = *((_QWORD *)v9 + 2);
    if (v34 == v33)
    {
      v36 = vdupq_n_s64(v34);
      v35 = &v31[16 * v27];
    }
    else
    {
      v35 = &v31[16 * v27];
      do
      {
        *((_OWORD *)v35 - 1) = *(_OWORD *)(v34 - 16);
        v35 -= 16;
        v34 -= 16;
      }
      while (v34 != v33);
      v36 = *(int64x2_t *)(v9 + 4);
    }
    v26 = v32 + 16;
    *((_QWORD *)v9 + 1) = v35;
    *((_QWORD *)v9 + 2) = v32 + 16;
    *(int64x2_t *)&v41[8] = v36;
    v37 = *((_QWORD *)v9 + 3);
    *((_QWORD *)v9 + 3) = &v31[16 * v30];
    *(_QWORD *)&v41[24] = v37;
    *(_QWORD *)v41 = v36.i64[0];
    std::__split_buffer<CFRange,TInlineBufferAllocator<CFRange,4ul> &>::~__split_buffer((uint64_t)v41);
  }
  else
  {
    *(_QWORD *)v11 = a3;
    *((_QWORD *)v11 + 1) = a4;
    v26 = v11 + 16;
  }
  *((_QWORD *)v9 + 2) = v26;
}

uint64_t std::__split_buffer<CFRange,TInlineBufferAllocator<CFRange,4ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 64);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t TRunGlue::SetAttachmentCount(TRunGlue *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = TRunGlue::FocusOnIndex(this, a2);
  v7 = *((_QWORD *)this + 19);
  if (v7)
    return objc_msgSend(*(id *)(v7 + 216), "setAttachmentCount:atIndex:", a3, a2 - *((_QWORD *)this + 20) + *(_QWORD *)(v7 + 200));
  return result;
}

_QWORD *TRunGlue::SetStringIndex(_QWORD *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  const TStorageRange *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = this;
  if (this[19])
  {
    this = (_QWORD *)TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    v6 = v5[19];
    if (v6)
    {
      this = (_QWORD *)objc_msgSend(*(id *)(v6 + 216), "setStringIndex:atIndex:", a3, a2 - v5[20] + *(_QWORD *)(v6 + 200));
      v8 = v5[19];
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16) + v9;
      if (v9 > a3 || v10 <= a3)
      {
        this = (_QWORD *)TRunGlue::ActualCharRangeForStorage((TRunGlue *)(v6 + 192), v7);
        v12 = v5[19];
        *(_QWORD *)(v12 + 8) = this;
        *(_QWORD *)(v12 + 16) = v13;
      }
    }
  }
  else
  {
    v14 = this[66];
    if (v14)
      *(_QWORD *)(v14 + 8 * (this[20] + a2)) = a3;
  }
  return this;
}

_QWORD *TRunGlue::InsertedGlyphs(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = this;
  if (this[19])
  {
    *(_QWORD *)(*this + 144) += a2;
    this = TRunGlue::UpdateForCurrentRealRun(this);
  }
  v3[21] += a2;
  v4 = v3[4];
  if (v4 != -1)
    v3[4] = v4 + a2;
  return this;
}

uint64_t TStorageRange::InsertGlyphs(id *this, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  CFIndex v5;
  double *v6;

  length = a2.length;
  location = a2.location;
  objc_msgSend(this[3], "insertGlyphsAtRange:", a2.location, a2.length);
  this[2] = (char *)this[2] + length;
  if (length >= 1)
  {
    v5 = location + length;
    v6 = (double *)MEMORY[0x1E0C9D820];
    do
      objc_msgSend(this[3], "setAdvance:atIndex:", location++, *v6, v6[1]);
    while (location < v5);
  }
  return objc_msgSend(this[3], "sync");
}

__n128 std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15E0BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void TStorageRange::DetachStorageIfShared(TStorageRange *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 || v3[1] != *((_QWORD *)this + 2))
  {
    v4 = objc_msgSend(v3, "copyWithRange:");

    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(_QWORD *result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v3 = *result;
  if (*result)
  {
    if (*(_WORD *)(v3 + 10))
    {
      v4 = result;
      v5 = (char *)(v3 + __rev16(*(unsigned __int16 *)(v3 + 10)));
      v14 = v5;
      v6 = result[1];
      if ((unint64_t)(v5 + 2) <= v6)
      {
        v8 = bswap32(*(unsigned __int16 *)v5) >> 16;
        if (v8 == 2)
          v9 = 6 * (bswap32(*((unsigned __int16 *)v5 + 1)) >> 16) + 4;
        else
          v9 = v8 == 1 ? 2 * (bswap32(*((unsigned __int16 *)v5 + 2)) >> 16) + 6 : 0;
        v10 = &v5[v9];
        if (v10 >= v5 && (unint64_t)v10 <= v6)
        {
          v12 = operator new(0x20uLL);
          *v12 = &off_1E15E0BE0;
          v12[1] = &v14;
          v12[2] = &v15;
          v12[3] = a3;
          v17 = v12;
          OTL::GDEF::IterateGlyphsWithClassMask(v4, 8, (uint64_t)v16);
          result = v17;
          if (v17 == v16)
          {
            v13 = 4;
            result = v16;
          }
          else
          {
            if (!v17)
              return result;
            v13 = 5;
          }
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
        }
      }
    }
  }
  return result;
}

uint64_t CTLineIsRightToLeft(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(*(_QWORD *)(result + 40) + 152) >> 3) & 1;
  return result;
}

double CTLineGetWidthForStringRangeWithOffset(uint64_t a1, CFIndex a2, CFIndex a3, double a4)
{
  double v4;
  const TLine **v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  CFRange v10;
  const TLine *v11;
  const TLine *v12;
  const TLine *v13;
  unint64_t *v14;
  unint64_t v15;
  const TLine *v17[4];
  _QWORD v18[3];
  _BYTE v19[128];
  _BYTE v20[48];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = 0.0;
  if (a1)
  {
    v5 = *(const TLine ***)(a1 + 40);
    v6 = (CFIndex)v5[9];
    v7 = (CFIndex)v5[10] + v6;
    v8 = v7 - a2;
    if (a3)
      v8 = a3;
    if ((v8 & 0x8000000000000000) == 0 && a2 >= v6 && v8 + a2 <= v7)
    {
      *(_OWORD *)&v19[80] = unk_18492F1F8;
      *(_OWORD *)&v19[96] = xmmword_18492F208;
      v21 = unk_18492F258;
      *(_OWORD *)v20 = xmmword_18492F228;
      memset(&v20[16], 170, 32);
      if (v7 <= a2)
        v10.length = 0;
      else
        v10.length = v8;
      if (v7 <= a2)
        v10.location = 0;
      else
        v10.location = a2;
      *(_OWORD *)&v19[112] = unk_18492F218;
      memset(v19, 170, 80);
      v12 = *v5;
      v11 = v5[1];
      v13 = *v5;
      if (v11)
      {
        v14 = (unint64_t *)((char *)v11 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v13 = *v5;
      }
      *(_QWORD *)v19 = v12;
      *(_QWORD *)&v19[8] = v11;
      memset(&v19[16], 0, 24);
      *(_QWORD *)&v19[64] = &v19[40];
      BYTE8(v21) = 0;
      memset(&v19[72], 0, 56);
      memset(&v20[8], 0, 21);
      *(_QWORD *)&v20[32] = 0;
      *(_QWORD *)&v20[40] = 0;
      LOBYTE(v21) = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      *(_QWORD *)v20 = 0xFFEFFFFFFFFFFFFFLL;
      v17[0] = (const TLine *)v5;
      v17[1] = v13;
      v17[2] = 0;
      v17[3] = 0;
      v18[0] = 0;
      *(_QWORD *)((char *)v18 + 6) = 0;
      v18[2] = 0;
      TTypesetter::FillLine(v17, (TLine *)v19, v10, 1.79769313e308, a4);
      v4 = *(double *)&v19[104];
      TLine::~TLine((TLine *)v19);
    }
  }
  return v4;
}

void TFramesetter::FrameInRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6)
{
  uint64_t v10;
  double v11;
  CGFloat x;
  double v13;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  CFIndex v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  TFramesetter *v31;
  TParagraphStyle **v32;
  unsigned int v33;
  int v34;
  const void *v35;
  double HeadIndent;
  double v37;
  TParagraphStyle **v38;
  double TailIndent;
  double v40;
  double v41;
  uint64_t v42;
  _BYTE *v43;
  char v44;
  char v45;
  uint64_t v46;
  CFIndex v47;
  CFIndex v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  _BOOL4 v53;
  unint64_t v54;
  TLine *v55;
  __int16 v56;
  const TCharStream *v57;
  _BOOL4 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  int v68;
  double v69;
  double v70;
  double v71;
  double v72;
  char v73;
  const __CFArray *v74;
  CFIndex Count;
  CFIndex v76;
  const __CFArray *v77;
  uint64_t v78;
  double v80;
  double v81;
  CFIndex v82;
  unint64_t v83;
  unsigned __int32 v84;
  TParagraphStyle **v85;
  const void *v86;
  unsigned int LineBreakMode;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  const void *v94;
  __CFArray *v95;
  uint64_t **v96;
  uint64_t **TruncatedLine;
  uint64_t **v98;
  __CFArray *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v109;
  double v110;
  char v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  BOOL IsParagraphSeparator;
  unsigned int v118;
  uint64_t v119;
  _BYTE v120[48];
  id v121;
  id v122;
  id v123;
  void *__p;
  void *v125;
  uint64_t v126;
  CFMutableArrayRef Mutable;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  uint64_t v132;
  CFRange v133;
  CFRange v134;
  CFRange v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;

  v132 = *MEMORY[0x1E0C80C00];
  v116 = *(_DWORD *)(a2 + 144);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v11 = *(double *)(a2 + 40);
  x = *(double *)(a2 + 48);
  v13 = v11 * 0.5;
  y = *(double *)(a2 + 56);
  width = *(double *)(a2 + 64);
  v109 = a2;
  height = *(double *)(a2 + 72);
  if (v11 != 0.0)
  {
    v136 = CGRectInset(*(CGRect *)(a2 + 48), v13, v13);
    x = v136.origin.x;
    y = v136.origin.y;
    width = v136.size.width;
    height = v136.size.height;
  }
  v137.origin.x = x;
  v137.origin.y = y;
  v137.size.width = width;
  v137.size.height = height;
  v17 = CGRectGetHeight(v137);
  v138.origin.x = x;
  v138.origin.y = y;
  v138.size.width = width;
  v138.size.height = height;
  v18 = CGRectGetWidth(v138);
  if (v116)
    v19 = v17;
  else
    v19 = v18;
  v110 = v19;
  v107 = v17;
  if (v116)
    v20 = v18;
  else
    v20 = v17;
  if (a3)
    IsParagraphSeparator = TCharStream::IsParagraphSeparator(*(TCharStream **)v10, a3 - 1);
  else
    IsParagraphSeparator = 1;
  v21 = *(_QWORD *)(a2 + 152);
  v113 = *(unsigned __int8 *)(a2 + 162);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  __p = 0;
  v125 = 0;
  v126 = 0;
  v123 = 0;
  v105 = a4;
  v106 = a3;
  if (a4 >= 1)
  {
    v22 = 0;
    v23 = 0.0;
    if (v116 == 2)
      v24 = 0.0;
    else
      v24 = v20;
    v112 = v21 - 1;
    v114 = 1;
    v25 = a3;
    v26 = a4;
    while (1)
    {
      v28 = *(_QWORD *)(v10 + 16);
      v27 = *(_QWORD *)(v10 + 24);
      if (v27 == v28)
      {
        v31 = 0;
        LODWORD(v32) = 0;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * TLine::FindRunWithCharIndex((TLine *)v10, v25, 1))
                        + 40);
        v31 = (TFramesetter *)(v30 + 40);
        v32 = *(TParagraphStyle ***)(v30 + 168);
        if (v32)
          LODWORD(v32) = TParagraphStyle::GetLineBreakMode(v32, v29);
      }
      if (v32 <= 2)
        v33 = v32;
      else
        v33 = 0;
      if (v32 >= 3)
        v34 = (int)v32;
      else
        v34 = 4;
      if (v112 == v22)
        v33 = v34;
      if (v21 < 1)
        v33 = v32;
      v118 = v33;
      HeadIndent = TFramesetter::GetHeadIndent(v31, (const TAttributes *)IsParagraphSeparator);
      v37 = 0.0;
      if (v27 == v28
        || (v38 = (TParagraphStyle **)*((_QWORD *)v31 + 16)) == 0
        || (TailIndent = TParagraphStyle::GetTailIndent(v38, v35), v37 = TailIndent, TailIndent <= 0.0))
      {
        v40 = v110 - HeadIndent + v37;
      }
      else
      {
        v40 = TailIndent - HeadIndent;
      }
      if (v118 <= 1)
        v41 = v40;
      else
        v41 = 1.79769313e308;
      if (v118 == 1)
      {
        v129 = 0;
        v42 = TTypesetter::SuggestClusterBreak(v10, v25, (uint64_t)v128, v41, HeadIndent);
        v43 = v129;
        v111 = v44;
        if (v129 == v128)
        {
          v43 = v128;
LABEL_47:
          v46 = 4;
          goto LABEL_48;
        }
      }
      else
      {
        v131 = 0;
        v42 = TTypesetter::SuggestLineBreak(v10, v25, (uint64_t)v130, v41, HeadIndent);
        v43 = v131;
        v111 = v45;
        if (v131 == v130)
        {
          v43 = v130;
          goto LABEL_47;
        }
      }
      if (!v43)
        goto LABEL_49;
      v46 = 5;
LABEL_48:
      (*(void (**)(void))(*(_QWORD *)v43 + 8 * v46))();
LABEL_49:
      if (v42 < 0)
        v47 = v26;
      else
        v47 = v42;
      if (v47 >= v26)
        v48 = v26;
      else
        v48 = v47;
      v122 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>((uint64_t *)v10, (unint64_t *)&v122);
      v49 = atomic_load((unint64_t *)&v122);
      v119 = v25;
      if (!v49)
      {
        v73 = v111;

        goto LABEL_81;
      }
      v115 = (uint64_t)v31;
      v50 = v21;
      v51 = v26;
      v52 = a5;
      v53 = v113 != 0;
      v54 = atomic_load((unint64_t *)&v122);
      v55 = *(TLine **)(v54 + 40);
      v134.location = v25;
      v134.length = v48;
      TTypesetter::FillLine((TTypesetter *)v10, v55, v134, v41, HeadIndent);
      v121 = (id)0xAAAAAAAAAAAAAAAALL;
      v121 = (id)ExternalizeLine((unint64_t *)&v122);
      v56 = *((_WORD *)v55 + 76);
      v58 = TFramesetter::ParagraphEndsWith(v55, *(const TLine **)v10, v57);
      *(_QWORD *)&v59 = -1;
      *((_QWORD *)&v59 + 1) = -1;
      *(_OWORD *)&v120[16] = v59;
      *(_OWORD *)&v120[32] = v59;
      *(_OWORD *)v120 = v59;
      TFramesetter::GetLineMetrics((uint64_t)v120, v55, (const void *)(v114 & 1), IsParagraphSeparator, v58, v53);
      v60 = *(_QWORD *)&v120[24];
      if (v116 == 2)
      {
        a5 = v52;
        v61 = *(_QWORD *)&v120[40];
        v62 = *(double *)v120;
        if (*(double *)v120 + *(double *)&v120[40] + *(double *)&v120[24] + v23 + *v52 - v20 <= 0.0002)
        {
          v63 = *(_QWORD *)&v120[8];
          v64 = v23 + *(double *)&v120[24] + *(double *)&v120[8];
          v65 = *v52 + v64;
          v24 = v24 + v64;
          v66 = *(_QWORD *)v120;
          v26 = v51;
          v21 = v50;
LABEL_68:
          if ((v56 & 8) != 0)
            v69 = v37;
          else
            v69 = HeadIndent;
          *a5 = v65;
          *(_QWORD *)a6 = v66;
          *(_QWORD *)(a6 + 8) = v63;
          v70 = *(double *)&v120[16];
          v71 = *(double *)&v120[32];
          *(_QWORD *)(a6 + 16) = *(_QWORD *)&v120[16];
          *(_QWORD *)(a6 + 24) = v60;
          *(double *)(a6 + 32) = v71;
          *(_QWORD *)(a6 + 40) = v61;
          v72 = v107;
          if (!v116)
            v72 = v69;
          if (TFramesetter::AppendLine(v115, v116 == 0, (v56 & 8) >> 3, v58, v118, v22, (unint64_t *)&v121, (unint64_t *)&Mutable, v40, v13 + v72, v13 + v24, (uint64_t)&__p, (unint64_t *)&v123)&& (v26 -= v48, v119 += v48, v62 + v70 + v71 + *a5 < v20))
          {
            v114 = 0;
            v68 = 1;
            IsParagraphSeparator = v58;
            v23 = v62 + v70 + v71;
          }
          else
          {
            v68 = 0;
          }
          goto LABEL_77;
        }
LABEL_60:
        v68 = 0;
        v26 = v51;
        v21 = v50;
        goto LABEL_77;
      }
      v66 = *(_QWORD *)v120;
      v67 = v23 + *(double *)&v120[24] + *(double *)v120;
      a5 = v52;
      v65 = *v52 + v67;
      if (v65 > v20)
        goto LABEL_60;
      v61 = *(_QWORD *)&v120[40];
      v26 = v51;
      v21 = v50;
      if (*(_BYTE *)(v109 + 160) || v65 + *(double *)&v120[40] - v20 <= 0.0002)
      {
        if (*(_BYTE *)(v109 + 161) || v65 + *(double *)&v120[40] + *(double *)&v120[16] - v20 <= 0.0002)
        {
          v24 = v24 - v67;
          v62 = *(double *)&v120[8];
          v63 = *(_QWORD *)&v120[8];
          goto LABEL_68;
        }
        v68 = 0;
      }
      else
      {
        v68 = 0;
      }
LABEL_77:

      v25 = v119;
      if (v68)
      {
        ++v22;
        if (v26 > 0)
          continue;
      }
      v73 = v111;
      goto LABEL_81;
    }
  }
  v73 = 0;
  v26 = a4;
  v119 = a3;
LABEL_81:
  v74 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
  Count = CFArrayGetCount(v74);
  if (!v21 && v26 >= 1)
  {
    v76 = Count - 1;
    if (Count >= 1)
    {
      v77 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
      v78 = *((_QWORD *)CFArrayGetValueAtIndex(v77, v76) + 5);
      v122 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>((uint64_t *)v10, (unint64_t *)&v122);
      if (atomic_load((unint64_t *)&v122))
      {
        v80 = *((double *)__p + 2 * v76);
        v81 = v110 - v80;
        v82 = *(_QWORD *)(v78 + 72);
        v135.length = *(_QWORD *)(v78 + 80) + v26;
        v83 = atomic_load((unint64_t *)&v122);
        v135.location = v82;
        TTypesetter::FillLine((TTypesetter *)v10, *(TLine **)(v83 + 40), v135, v81, v80);
        v84 = 1;
        if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(v10 + 16))
        {
          v85 = *(TParagraphStyle ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16)
                                                             + 8 * TLine::FindRunWithCharIndex((TLine *)v10, v82, 1))
                                                 + 40)
                                     + 168);
          if (v85)
          {
            LineBreakMode = TParagraphStyle::GetLineBreakMode(v85, v86);
            if (LineBreakMode <= 2)
              v84 = 1;
            else
              v84 = LineBreakMode - 3;
          }
        }
        if ((v73 & 2) != 0 && v84 == 1)
        {
          v121 = (id)0xAAAAAAAAAAAAAAAALL;
          TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>((uint64_t *)v10, (unint64_t *)&v121);
          if (atomic_load((unint64_t *)&v121))
          {
            TCharStream::GetRangeOfParagraphSeparatorAtIndex(*(TCharStream **)v10, *(_QWORD *)(v78 + 72) + *(_QWORD *)(v78 + 80) - 1);
            v90 = v89;
            *(_QWORD *)v120 = -1;
            *(_QWORD *)&v91 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v120[8] = v91;
            *(_OWORD *)&v120[24] = v91;
            v92 = atomic_load((unint64_t *)&v122);
            v93 = atomic_load((unint64_t *)&v121);
            TTruncator::TTruncator((uint64_t)v120, v92, *(_QWORD *)(v93 + 40));
            v133.location = *(_QWORD *)(v78 + 72) - v90 + *(_QWORD *)(v78 + 80);
            v133.length = v90 + v26;
            TTruncator::AppendToken((TLine **)v120, v133, v81);
            v94 = (const void *)ExternalizeLine((unint64_t *)&v121);
            v95 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArraySetValueAtIndex(v95, v76, v94);
            CFRelease(v94);
          }

        }
        else
        {
          v96 = (uint64_t **)atomic_load((unint64_t *)&v122);
          TruncatedLine = CreateTruncatedLine(v96, v84, 0, 0, v81);
          if (TruncatedLine)
          {
            v98 = TruncatedLine;
            v99 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArraySetValueAtIndex(v99, v76, v98);
            CFRelease(v98);
          }
        }
      }

    }
  }
  v101 = v105;
  v100 = v106;
  v102 = v119 - v106;
  v103 = (void *)atomic_load((unint64_t *)&Mutable);
  v104 = (void *)atomic_load((unint64_t *)&v123);
  TFrame::SetLines(v109, v103, (uint64_t)&__p, v104, v100, v101, v100, v102);

  if (__p)
  {
    v125 = __p;
    operator delete(__p);
  }

}

unint64_t TypesetterCreateLine(const __CTTypesetter *a1, CFRange a2, double a3)
{
  CFIndex location;
  uint64_t *v5;
  CFIndex v6;
  CFIndex length;
  uint64_t v8;
  CFIndex v9;
  CFIndex v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t RunWithCharIndex;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  TRun *v29;
  uint64_t v30;
  unint64_t v31;
  id v33;
  CFRange v34;

  if (!a1)
    return 0;
  location = a2.location;
  v5 = (uint64_t *)*((_QWORD *)a1 + 5);
  v6 = *(_QWORD *)(v5[27] + 16);
  length = v6 - a2.location;
  if (a2.length)
    length = a2.length;
  v8 = length + a2.location;
  if (length + a2.location >= v6)
    v9 = *(_QWORD *)(v5[27] + 16);
  else
    v9 = length + a2.location;
  if (a2.location < 0 || v6 <= a2.location)
  {
    v11 = v8 > 0 && a2.location < 1;
    location = 0;
    if (v11)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v10 = v9 - a2.location;
  }
  v33 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(v5, (unint64_t *)&v33);
  if (atomic_load((unint64_t *)&v33))
  {
    v13 = atomic_load((unint64_t *)&v33);
    v34.location = location;
    v34.length = v10;
    TTypesetter::FillLine((TTypesetter *)v5, *(TLine **)(v13 + 40), v34, 1.79769313e308, a3);
    if (!atomic_load((unint64_t *)&v33))
    {
      do
LABEL_42:
        v31 = __ldaxr((unint64_t *)&v33);
      while (__stlxr(0, (unint64_t *)&v33));
      goto LABEL_43;
    }
    v15 = atomic_load((unint64_t *)&v33);
    v16 = *(_QWORD *)(v15 + 40);
    v17 = *(uint64_t **)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24) - (_QWORD)v17;
    if (v18 >= 1)
    {
      v19 = (unint64_t)v18 >> 3;
      if ((unint64_t)v18 >> 3 <= 1)
        v19 = 1;
      do
      {
        v20 = *v17++;
        *(_QWORD *)(*(_QWORD *)(v20 + 48) + 272) = v16;
        --v19;
      }
      while (v19);
    }
    if ((*(_WORD *)(v16 + 154) & 8) == 0)
    {
LABEL_40:
      if ((*(_WORD *)(v16 + 154) & 0x20) != 0)
        TLine::DoGlyphFixups((TLine *)v16);
      goto LABEL_42;
    }
    v21 = v18 >> 3;
    v22 = *(_QWORD *)(v16 + 72);
    v23 = *(_QWORD *)(v16 + 88);
    if (v23)
      goto LABEL_24;
    RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v16, *(_QWORD *)(v16 + 72), 1);
    if (RunWithCharIndex >= v21)
    {
      v23 = 0;
    }
    else
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * RunWithCharIndex) + 48);
      if (v23)
      {
LABEL_24:
        if ((*(_BYTE *)(v23 + 224) & 1) != 0)
          v24 = *(_QWORD *)(v23 + 208) - 1;
        else
          v24 = 0;
        v26 = *(_QWORD *)(v23 + 216);
        v27 = *(_QWORD *)(v23 + 200);
        if (*(__int16 *)(*(_QWORD *)(v26 + 16) + 2 * v27 + 2 * v24) == -1
          && *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * v27 + 8 * v24) == v22)
        {
          *(_QWORD *)(v23 + 264) = v24;
        }
      }
    }
    if (v18 >= 1)
    {
      v28 = v21 - 1;
      do
      {
        v29 = *(TRun **)(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v28) + 48);
        if (v29 != (TRun *)v23 && !TRun::GetNonDeletedGlyphCount(v29))
          TLine::DeleteRun((TLine *)v16, v28);
        v30 = v28-- + 1;
      }
      while (v30 > 1);
    }
    goto LABEL_40;
  }
  v31 = 0;
LABEL_43:

  return v31;
}

void TTypesetter::FillLine(TTypesetter *this, TLine *a2, CFRange a3, double a4, double a5)
{
  const TLine *v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;

  v5 = this;
  v6 = *(_OWORD *)((char *)this + 216);
  v7 = *((_QWORD *)this + 29);
  v8 = (char *)this + 240;
  v9 = *((_DWORD *)this + 65);
  v10 = *((_BYTE *)this + 264);
  v11 = *((_BYTE *)this + 257);
  v12 = 0;
  TTypesetter::FillLine(&v5, a2, a3, a4, a5);
}

void TTruncator::CreateToken(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t Dictionary;
  unint64_t v12;
  unint64_t v13;
  id v14;
  const __CFDictionary *v15;
  __CFDictionary *MutableCopy;
  unint64_t v17;
  void *v18;
  const __CFString *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  CFIndex shared_weak_owners;
  unint64_t v23;
  id v24;
  uint64_t v25;
  const __CFDictionary *v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t GlyphIndexForChar;
  char v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE v41[152];
  id v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[6];
  unint64_t v55;
  id v56;
  id v57;
  _BYTE v58[128];
  _BYTE v59[48];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFRange v65;

  v64 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = a2[1];
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16)
                              + 8 * TLine::FindRunWithCharIndex(*(TLine **)(a1 + 24), *a2, 1))
                  + 40);
  v57 = 0;
  if (a3)
  {
    Dictionary = TAttributes::GetDictionary((TAttributes *)(v10 + 40));
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, unint64_t))(a3 + 16))(a3, *(_QWORD *)(a1 + 16), a2, Dictionary);
    do
      v13 = __ldaxr((unint64_t *)&v57);
    while (__stlxr(v12, (unint64_t *)&v57));
    v14 = (id)v13;
  }
  else
  {
    v56 = 0;
    if ((*(_WORD *)(v10 + 178) & 0x40) != 0)
    {
      v15 = (const __CFDictionary *)TAttributes::GetDictionary((TAttributes *)(v10 + 40));
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v15);
      if (MutableCopy)
      {
        v17 = (unint64_t)MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("CTRunDelegate"));
        do
          v18 = (void *)__ldaxr((unint64_t *)&v56);
        while (__stlxr(v17, (unint64_t *)&v56));

      }
    }
    v40 = v9;
    if (*(_BYTE *)(v10 + 90))
      v19 = CFSTR("︙");
    else
      v19 = CFSTR("…");
    v20 = (std::__shared_weak_count *)operator new(0x48uLL);
    v20->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
    TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)&v20[1], v19, 0);
    shared_weak_owners = v20[1].__shared_weak_owners_;
    *(_OWORD *)v59 = xmmword_18494F1A8;
    memset(&v59[16], 170, 32);
    v60 = unk_18494F1D8;
    *(_OWORD *)&v58[96] = xmmword_18494F188;
    *(_OWORD *)&v58[112] = unk_18494F198;
    memset(v58, 170, 96);
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    *(_QWORD *)v58 = v20 + 1;
    *(_QWORD *)&v58[8] = v20;
    memset(&v58[16], 0, 24);
    *(_QWORD *)&v58[64] = &v58[40];
    BYTE8(v60) = 0;
    memset(&v58[72], 0, 56);
    memset(&v59[8], 0, 21);
    *(_QWORD *)&v59[40] = 0;
    LOBYTE(v60) = 0;
    v63 = 0;
    v61 = 0;
    v62 = 0;
    *(_QWORD *)&v59[32] = 0;
    *(_QWORD *)v59 = 0xFFEFFFFFFFFFFFFFLL;
    v24 = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", shared_weak_owners, shared_weak_owners);
    v55 = 0xAAAAAAAAFFFFFFFFLL;
    memset(v54, 170, sizeof(v54));
    v42[0] = v24;
    v42[1] = &v20[1];
    v52 = 0u;
    v53 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v25 = v20[1].__shared_weak_owners_;
    v54[0] = 0;
    v54[1] = v58;
    *(_QWORD *)&v53 = v25;
    memset(&v54[2], 0, 32);
    LODWORD(v55) = 1065353216;
    if (atomic_load((unint64_t *)&v56))
    {
      v27 = (const __CFDictionary *)atomic_load((unint64_t *)&v56);
      v65.location = 0;
      v65.length = 0;
      TAttributes::TAttributes((TAttributes *)v41, v27, 0, v65, 0);
      TGlyphEncoder::EncodeChars((TCharStream **)v42, 0, shared_weak_owners, (uint64_t)v41, 0);
      TAttributes::~TAttributes((TAttributes *)v41);
    }
    else
    {
      TGlyphEncoder::EncodeChars((TCharStream **)v42, 0, shared_weak_owners, v10 + 40, 0);
    }

    if (*(_QWORD *)&v58[24] - *(_QWORD *)&v58[16] == 8)
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v57, **(id **)&v58[16]);
    std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v54[2]);
    TLine::~TLine((TLine *)v58);
    v9 = v40;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v14 = v56;
  }

  if (atomic_load((unint64_t *)&v57))
  {
    v30 = atomic_load((unint64_t *)&v57);
    v31 = *(_QWORD *)(v30 + 48);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 16);
      v33 = v8 - *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v31 + 8) = v8;
      objc_msgSend(*(id *)(v31 + 216), "puntStringIndicesInRange:by:", *(_QWORD *)(v31 + 200), *(_QWORD *)(v31 + 208), v33);
      if (v32 + v8 >= 1)
      {
        GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v31, v32 + v8 - 1);
        objc_msgSend(*(id *)(v31 + 216), "setAttachmentCount:atIndex:", v9- v32+ objc_msgSend(*(id *)(v31 + 216), "attachmentCountAtIndex:", *(_QWORD *)(v31 + 200) + GlyphIndexForChar), *(_QWORD *)(v31 + 200) + GlyphIndexForChar);
        *(_QWORD *)(v31 + 8) = v8;
        *(_QWORD *)(v31 + 16) = v9;
      }
    }
    v35 = *(_BYTE *)(v10 + 224);
    if (v35)
    {
      v42[0] = (id)0xAAAAAAAAAAAAAAAALL;
      v36 = atomic_load((unint64_t *)&v57);
      (*(void (**)(id *__return_ptr))(v36 + 56))(v42);
      v37 = atomic_load((unint64_t *)v42);
      *(_BYTE *)(*(_QWORD *)(v37 + 48) + 224) = v35;
      v38 = (void *)atomic_load((unint64_t *)v42);
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v57, v38);

    }
    do
      v39 = __ldaxr((unint64_t *)&v57);
    while (__stlxr(0, (unint64_t *)&v57));
  }
  else
  {
    v39 = 0;
  }
  *a4 = v39;

}

unint64_t CTLineCreateFromLineWithOffset(uint64_t a1, CFIndex a2, CFIndex a3, double a4)
{
  unint64_t v5;
  uint64_t *v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  CFRange v13;
  unint64_t v14;
  TLine *v15;
  const TLine *v16;
  id v18;
  const TLine *v19[4];
  _QWORD v20[3];

  if (!a1)
    return 0;
  v5 = 0;
  v6 = *(uint64_t **)(a1 + 40);
  v7 = v6[9];
  v8 = v6[10] + v7;
  if (a3)
    v9 = a3;
  else
    v9 = v8 - a2;
  if ((v9 & 0x8000000000000000) == 0 && a2 >= v7 && v9 + a2 <= v8)
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(v6, (unint64_t *)&v18);
    if (atomic_load((unint64_t *)&v18))
    {
      if (v8 <= a2)
        v13.location = 0;
      else
        v13.location = a2;
      if (v8 <= a2)
        v13.length = 0;
      else
        v13.length = v9;
      v14 = atomic_load((unint64_t *)&v18);
      v15 = *(TLine **)(v14 + 40);
      v16 = (const TLine *)*v6;
      v19[0] = (const TLine *)v6;
      v19[1] = v16;
      v19[2] = 0;
      v19[3] = 0;
      v20[0] = 0;
      *(_QWORD *)((char *)v20 + 6) = 0;
      v20[2] = 0;
      TTypesetter::FillLine(v19, v15, v13, 1.79769313e308, a4);
      v5 = ExternalizeLine((unint64_t *)&v18);
    }
    else
    {
      v5 = 0;
    }

  }
  return v5;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  const __CFAttributedString *v1;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  id v8;
  uint64_t __dst[35];

  v1 = attrString;
  __dst[34] = *MEMORY[0x1E0C80C00];
  if (attrString)
  {
    memcpy(__dst, &unk_18492F098, 0x110uLL);
    TTypesetterAttrString::TTypesetterAttrString((TTypesetterAttrString *)__dst, v1, 0, 0);
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(__dst, (unint64_t *)&v8);
    if (atomic_load((unint64_t *)&v8))
    {
      v3 = atomic_load((unint64_t *)&v8);
      TTypesetter::FillLine((TTypesetter *)__dst, *(TLine **)(v3 + 40), 1.79769313e308, 0.0);
      v1 = (const __CFAttributedString *)ExternalizeLine((unint64_t *)&v8);
    }
    else
    {
      v1 = 0;
    }

    v4 = (std::__shared_weak_count *)__dst[31];
    if (__dst[31])
    {
      v5 = (unint64_t *)(__dst[31] + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    TLine::~TLine((TLine *)__dst);
  }
  return v1;
}

void TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = TCFBase<TLine>::Allocate();
  if (v4)
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 48) = v6;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v4 + 48;
    *(_QWORD *)(v4 + 56) = v5;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 112) = v4 + 88;
    *(_BYTE *)(v4 + 232) = 0;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_QWORD *)(v4 + 197) = 0;
    *(_QWORD *)(v4 + 208) = 0;
    *(_QWORD *)(v4 + 216) = 0;
    *(_BYTE *)(v4 + 224) = 0;
    *(_QWORD *)(v4 + 248) = 0;
    *(_QWORD *)(v4 + 256) = 0;
    *(_QWORD *)(v4 + 240) = 0;
    *(_QWORD *)(v4 + 176) = 0xFFEFFFFFFFFFFFFFLL;
    v10 = (id)v4;
    do
      v9 = __ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    *a2 = v9;

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t TCFBase<TLine>::Allocate()
{
  if (TCFBase<TLine>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TLine>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TLine>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

unint64_t ExternalizeLine(unint64_t *a1)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t RunWithCharIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  TRun *v17;
  uint64_t v18;
  unint64_t result;

  if (!atomic_load(a1))
    goto LABEL_26;
  v3 = atomic_load(a1);
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(uint64_t **)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24) - (_QWORD)v5;
  if (v6 >= 1)
  {
    v7 = (unint64_t)v6 >> 3;
    if ((unint64_t)v6 >> 3 <= 1)
      v7 = 1;
    do
    {
      v8 = *v5++;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 272) = v4;
      --v7;
    }
    while (v7);
  }
  if ((*(_WORD *)(v4 + 154) & 8) != 0)
  {
    v9 = v6 >> 3;
    v10 = *(_QWORD *)(v4 + 72);
    v11 = *(_QWORD *)(v4 + 88);
    if (v11)
      goto LABEL_8;
    RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v4, *(_QWORD *)(v4 + 72), 1);
    if (RunWithCharIndex >= v9)
    {
      v11 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * RunWithCharIndex) + 48);
      if (v11)
      {
LABEL_8:
        if ((*(_BYTE *)(v11 + 224) & 1) != 0)
          v12 = *(_QWORD *)(v11 + 208) - 1;
        else
          v12 = 0;
        v14 = *(_QWORD *)(v11 + 216);
        v15 = *(_QWORD *)(v11 + 200);
        if (*(__int16 *)(*(_QWORD *)(v14 + 16) + 2 * v15 + 2 * v12) == -1
          && *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v15 + 8 * v12) == v10)
        {
          *(_QWORD *)(v11 + 264) = v12;
        }
      }
    }
    if (v6 >= 1)
    {
      v16 = v9 - 1;
      do
      {
        v17 = *(TRun **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v16) + 48);
        if (v17 != (TRun *)v11 && !TRun::GetNonDeletedGlyphCount(v17))
          TLine::DeleteRun((TLine *)v4, v16);
        v18 = v16-- + 1;
      }
      while (v18 > 1);
    }
  }
  if ((*(_WORD *)(v4 + 154) & 0x20) != 0)
    TLine::DoGlyphFixups((TLine *)v4);
  do
LABEL_26:
    result = __ldaxr(a1);
  while (__stlxr(0, a1));
  return result;
}

void TTypesetter::FillLine(TTypesetter *this, TLine *a2, double a3, double a4)
{
  TTypesetter *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;

  TLine::operator=((uint64_t)a2, (uint64_t)this);
  if (*((_WORD *)a2 + 76))
  {
    v8 = this;
    v9 = *(_OWORD *)((char *)this + 216);
    v10 = *((_QWORD *)this + 29);
    v11 = (char *)this + 240;
    v12 = *((_DWORD *)this + 65);
    v13 = *((_BYTE *)this + 264);
    v14 = *((_BYTE *)this + 257);
    v15 = 0;
    TTypesetter::FinishLineFill((uint64_t)&v8, (uint64_t)a2, a3, a4);
  }
}

uint64_t TLine::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  __int16 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  char *v20;
  void *__dst;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 154) & 1) != 0)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v19 = *(_QWORD *)a2;
    *((_QWORD *)&v19 + 1) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::shared_ptr<TCharStream const>::operator=[abi:nn180100](a1, &v19);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
    v10 = (void *)atomic_load((unint64_t *)(a2 + 168));
    TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 168), v10);
    v11 = *(_WORD *)(a1 + 154);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    *(_WORD *)(a2 + 154) = v11;
    v13 = *(_BYTE **)(a1 + 16);
    v12 = *(_BYTE **)(a1 + 24);
    v22 = 0;
    memset(v23, 170, 24);
    v20 = 0;
    __dst = 0;
    v23[3] = v23;
    v14 = v12 - v13;
    if (v12 != v13)
    {
      std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__vallocate[abi:nn180100](&v20, v14 >> 3);
      v15 = (char *)__dst;
      memmove(__dst, v13, v14);
      __dst = &v15[v14];
    }
    std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CTRun * const*>,std::__wrap_iter<CTRun * const*>>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CTRun * const*>,std::__wrap_iter<CTRun * const*>>((char *)(a2 + 16), v20, (uint64_t)__dst, ((_BYTE *)__dst - v20) >> 3);
    std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v20);
    v16 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = v16;
    v17 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v17;
  }
  else
  {
    TLine::operator=(a1, a2);
  }
  return a1;
}

{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  _QWORD **v29;
  _QWORD *i;
  unint64_t v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64x2_t v96;
  uint64_t v97;
  unint64_t *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v107;
  uint64_t v108;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  __int128 v114;
  id v115[5];
  char *v116;
  int64x2_t v117;
  _OWORD v118[15];
  _OWORD *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return a1;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v114 = *(_QWORD *)a2;
  *((_QWORD *)&v114 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::shared_ptr<TCharStream const>::operator=[abi:nn180100](a1, &v114);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154) & 0xFFFE;
  v10 = (void *)atomic_load((unint64_t *)(a2 + 168));
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 168), v10);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24) - v11;
  v13 = v12 >> 3;
  if (!(v12 >> 3))
    return a1;
  if (v13 == 1)
  {
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v11 + 56))(v115);
    do
      v14 = __ldaxr((unint64_t *)v115);
    while (__stlxr(0, (unint64_t *)v115));
    v16 = *(unint64_t **)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v16 >= v15)
    {
      v73 = *(_QWORD *)(a1 + 16);
      v74 = ((uint64_t)v16 - v73) >> 3;
      if ((unint64_t)(v74 + 1) >> 61)
LABEL_141:
        abort();
      v75 = v15 - v73;
      v76 = v75 >> 2;
      if (v75 >> 2 <= (unint64_t)(v74 + 1))
        v76 = v74 + 1;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      *((_QWORD *)&v118[0] + 1) = a1 + 40;
      if (v77)
        v78 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 40, v77);
      else
        v78 = 0;
      v98 = (unint64_t *)&v78[8 * v74];
      v99 = &v78[8 * v77];
      *(_QWORD *)&v118[0] = v99;
      *v98 = v14;
      v17 = v98 + 1;
      v117.i64[1] = (uint64_t)(v98 + 1);
      v101 = *(_QWORD *)(a1 + 16);
      v100 = *(_QWORD *)(a1 + 24);
      if (v100 == v101)
      {
        v103 = vdupq_n_s64(v100);
      }
      else
      {
        do
        {
          v102 = *(_QWORD *)(v100 - 8);
          v100 -= 8;
          *--v98 = v102;
        }
        while (v100 != v101);
        v103 = *(int64x2_t *)(a1 + 16);
        v17 = (_QWORD *)v117.i64[1];
        v99 = *(char **)&v118[0];
      }
      *(_QWORD *)(a1 + 16) = v98;
      *(_QWORD *)(a1 + 24) = v17;
      v117 = v103;
      v104 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v99;
      *(_QWORD *)&v118[0] = v104;
      v116 = (char *)v103.i64[0];
      std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v116);
    }
    else
    {
      *v16 = v14;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 24) = v17;

    v105 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 48);
    *(_QWORD *)(a1 + 88) = v105;
    if (v105)
    {
      *(_QWORD *)(a1 + 96) = v105;
      *(_QWORD *)(v105 + 24) = 0;
      *(_QWORD *)(v105 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = 0;
    }
    return a1;
  }
  v18 = *(_QWORD *)(a2 + 88);
  if (v18)
  {
    v107 = v12 >> 3;
    v111 = 0u;
    v112 = 0u;
    v113 = 0xAAAAAAAA3F800000;
    if (v12 < 1)
    {
LABEL_79:
      *(_QWORD *)&v57 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v118[14] = v57;
      v118[13] = v57;
      v118[12] = v57;
      v118[11] = v57;
      v118[10] = v57;
      v118[9] = v57;
      v118[8] = v57;
      v118[7] = v57;
      v118[6] = v57;
      v118[5] = v57;
      v118[4] = v57;
      v118[3] = v57;
      v118[2] = v57;
      v118[1] = v57;
      v118[0] = v57;
      v116 = 0;
      v117 = 0uLL;
      v119 = v118;
      std::vector<long,TInlineBufferAllocator<long,30ul>>::reserve(&v116, v107);
      v110 = v18;
      do
      {
        v58 = std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__emplace_unique_key_args<TRun const*,std::piecewise_construct_t const&,std::tuple<TRun const* const&>,std::tuple<>>((uint64_t)&v111, v18, &v110);
        v59 = v58;
        v60 = (char *)v117.i64[0];
        if (v117.i64[0] >= (unint64_t)v117.i64[1])
        {
          v62 = v116;
          v63 = (v117.i64[0] - (uint64_t)v116) >> 3;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61)
            goto LABEL_141;
          v65 = v117.i64[1] - (_QWORD)v116;
          if ((v117.i64[1] - (uint64_t)v116) >> 2 > v64)
            v64 = v65 >> 2;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          v115[4] = v118;
          if (v66)
          {
            v67 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v118, v66);
            v62 = v116;
            v60 = (char *)v117.i64[0];
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[8 * v63];
          *(_QWORD *)v68 = v59[3];
          if (v60 == v62)
          {
            v70 = &v67[8 * v63];
          }
          else
          {
            v69 = v60;
            v70 = &v67[8 * v63];
            do
            {
              v71 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *((_QWORD *)v70 - 1) = v71;
              v70 -= 8;
            }
            while (v69 != v62);
          }
          v61 = v68 + 8;
          v116 = v70;
          v117.i64[0] = (uint64_t)(v68 + 8);
          v72 = (void *)v117.i64[1];
          v117.i64[1] = (uint64_t)&v67[8 * v66];
          v115[2] = v60;
          v115[3] = v72;
          v115[0] = v62;
          v115[1] = v62;
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v115);
        }
        else
        {
          *(_QWORD *)v117.i64[0] = v58[3];
          v61 = v60 + 8;
        }
        v117.i64[0] = (uint64_t)v61;
        v18 = *(_QWORD *)(v18 + 24);
        v110 = v18;
      }
      while (v18);
      TLine::LinkRunsWithOrder((_QWORD *)a1, (uint64_t *)&v116);
      v115[0] = &v116;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v115);
      std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v111);
      return a1;
    }
    v19 = 0;
    v20 = v12 >> 3;
    if (v107 <= 1)
      v20 = 1;
    v108 = v20;
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v19);
      v22 = *(_QWORD *)(v21 + 40);
      v23 = 0x9DDFEA08EB382D69 * (((8 * v22) + 8) ^ HIDWORD(v22));
      v24 = 0x9DDFEA08EB382D69 * (HIDWORD(v22) ^ (v23 >> 47) ^ v23);
      v25 = 0x9DDFEA08EB382D69 * (v24 ^ (v24 >> 47));
      v26 = *((_QWORD *)&v111 + 1);
      if (*((_QWORD *)&v111 + 1))
      {
        v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v111 + 8));
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          v28 = 0x9DDFEA08EB382D69 * (v24 ^ (v24 >> 47));
          if (v25 >= *((_QWORD *)&v111 + 1))
            v28 = v25 % *((_QWORD *)&v111 + 1);
        }
        else
        {
          v28 = v25 & (*((_QWORD *)&v111 + 1) - 1);
        }
        v29 = *(_QWORD ***)(v111 + 8 * v28);
        if (v29)
        {
          for (i = *v29; i; i = (_QWORD *)*i)
          {
            v31 = i[1];
            if (v31 == v25)
            {
              if (i[2] == v22)
                goto LABEL_60;
            }
            else
            {
              if (v27.u32[0] > 1uLL)
              {
                if (v31 >= *((_QWORD *)&v111 + 1))
                  v31 %= *((_QWORD *)&v111 + 1);
              }
              else
              {
                v31 &= *((_QWORD *)&v111 + 1) - 1;
              }
              if (v31 != v28)
                break;
            }
          }
        }
      }
      else
      {
        v28 = 0xAAAAAAAAAAAAAAAALL;
      }
      i = operator new(0x20uLL);
      *i = 0;
      i[1] = v25;
      i[2] = v22;
      i[3] = 0;
      v32 = (float)(unint64_t)(*((_QWORD *)&v112 + 1) + 1);
      if (!v26 || (float)(*(float *)&v113 * (float)v26) < v32)
      {
        v33 = (v26 & (v26 - 1)) != 0;
        if (v26 < 3)
          v33 = 1;
        v34 = v33 | (2 * v26);
        v35 = vcvtps_u32_f32(v32 / *(float *)&v113);
        if (v34 <= v35)
          v36 = v35;
        else
          v36 = v34;
        std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>((uint64_t)&v111, v36);
        v26 = *((_QWORD *)&v111 + 1);
        if ((*((_QWORD *)&v111 + 1) & (*((_QWORD *)&v111 + 1) - 1)) != 0)
        {
          if (v25 >= *((_QWORD *)&v111 + 1))
            v28 = v25 % *((_QWORD *)&v111 + 1);
          else
            v28 = v25;
        }
        else
        {
          v28 = (*((_QWORD *)&v111 + 1) - 1) & v25;
        }
      }
      v37 = v111;
      v38 = *(_QWORD **)(v111 + 8 * v28);
      if (v38)
      {
        *i = *v38;
      }
      else
      {
        *i = v112;
        *(_QWORD *)&v112 = i;
        *(_QWORD *)(v37 + 8 * v28) = &v112;
        if (!*i)
          goto LABEL_59;
        v39 = *(_QWORD *)(*i + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v39 >= v26)
            v39 %= v26;
        }
        else
        {
          v39 &= v26 - 1;
        }
        v38 = (_QWORD *)(v111 + 8 * v39);
      }
      *v38 = i;
LABEL_59:
      ++*((_QWORD *)&v112 + 1);
LABEL_60:
      i[3] = v19;
      (*(void (**)(id *__return_ptr, uint64_t))(v21 + 56))(v115, v21);
      do
        v40 = __ldaxr((unint64_t *)v115);
      while (__stlxr(0, (unint64_t *)v115));
      v42 = *(unint64_t **)(a1 + 24);
      v41 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = ((uint64_t)v42 - v44) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          goto LABEL_141;
        v46 = v41 - v44;
        v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        *((_QWORD *)&v118[0] + 1) = a1 + 40;
        if (v48)
          v49 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 40, v48);
        else
          v49 = 0;
        v50 = (unint64_t *)&v49[8 * v45];
        v51 = &v49[8 * v48];
        *(_QWORD *)&v118[0] = v51;
        *v50 = v40;
        v43 = v50 + 1;
        v117.i64[1] = (uint64_t)(v50 + 1);
        v53 = *(_QWORD *)(a1 + 16);
        v52 = *(_QWORD *)(a1 + 24);
        if (v52 == v53)
        {
          v55 = vdupq_n_s64(v52);
        }
        else
        {
          do
          {
            v54 = *(_QWORD *)(v52 - 8);
            v52 -= 8;
            *--v50 = v54;
          }
          while (v52 != v53);
          v55 = *(int64x2_t *)(a1 + 16);
          v43 = (_QWORD *)v117.i64[1];
          v51 = *(char **)&v118[0];
        }
        *(_QWORD *)(a1 + 16) = v50;
        *(_QWORD *)(a1 + 24) = v43;
        v117 = v55;
        v56 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v51;
        *(_QWORD *)&v118[0] = v56;
        v116 = (char *)v55.i64[0];
        std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v116);
      }
      else
      {
        *v42 = v40;
        v43 = v42 + 1;
      }
      *(_QWORD *)(a1 + 24) = v43;

      if (++v19 == v108)
        goto LABEL_79;
    }
  }
  if (v12 >= 1)
  {
    v79 = 0;
    if (v13 <= 1)
      v80 = 1;
    else
      v80 = v12 >> 3;
    do
    {
      (*(void (**)(id *__return_ptr))(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v79) + 56))(v115);
      do
        v81 = __ldaxr((unint64_t *)v115);
      while (__stlxr(0, (unint64_t *)v115));
      v83 = *(unint64_t **)(a1 + 24);
      v82 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v83 >= v82)
      {
        v85 = *(_QWORD *)(a1 + 16);
        v86 = ((uint64_t)v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_141;
        v87 = v82 - v85;
        v88 = v87 >> 2;
        if (v87 >> 2 <= (unint64_t)(v86 + 1))
          v88 = v86 + 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        *((_QWORD *)&v118[0] + 1) = a1 + 40;
        if (v89)
          v90 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 40, v89);
        else
          v90 = 0;
        v91 = (unint64_t *)&v90[8 * v86];
        v92 = &v90[8 * v89];
        *(_QWORD *)&v118[0] = v92;
        *v91 = v81;
        v84 = v91 + 1;
        v117.i64[1] = (uint64_t)(v91 + 1);
        v94 = *(_QWORD *)(a1 + 16);
        v93 = *(_QWORD *)(a1 + 24);
        if (v93 == v94)
        {
          v96 = vdupq_n_s64(v93);
        }
        else
        {
          do
          {
            v95 = *(_QWORD *)(v93 - 8);
            v93 -= 8;
            *--v91 = v95;
          }
          while (v93 != v94);
          v96 = *(int64x2_t *)(a1 + 16);
          v84 = (_QWORD *)v117.i64[1];
          v92 = *(char **)&v118[0];
        }
        *(_QWORD *)(a1 + 16) = v91;
        *(_QWORD *)(a1 + 24) = v84;
        v117 = v96;
        v97 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v92;
        *(_QWORD *)&v118[0] = v97;
        v116 = (char *)v96.i64[0];
        std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v116);
      }
      else
      {
        *v83 = v81;
        v84 = v83 + 1;
      }
      *(_QWORD *)(a1 + 24) = v84;

      ++v79;
    }
    while (v79 != v80);
  }
  return a1;
}

void TLine::~TLine(TLine *this)
{
  _QWORD *v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = (_QWORD *)((char *)this + 16);
  v3 = *((_WORD *)this + 77);
  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  v5 = v4 >> 3;
  if (!atomic_load((unint64_t *)this + 20))
  {
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v7 = (const void *)atomic_load((unint64_t *)this + 20);
  if (CFGetRetainCount(v7) == 1 || !*(_QWORD *)this)
  {
    if (v4 >= 1)
    {
      v8 = 0;
      if (v5 <= 1)
        v9 = 1;
      else
        v9 = v4 >> 3;
      while (1)
      {
        v10 = *(_QWORD **)(*v2 + 8 * v8);
        if (v10)
        {
          if (CFGetRetainCount(*(CFTypeRef *)(*v2 + 8 * v8)) != 2 && *(_QWORD *)this)
            goto LABEL_5;
          if ((v3 & 1) == 0)
            *(_QWORD *)(v10[6] + 272) = 0;
          CFRelease(v10);
        }
        if (v9 == ++v8)
          goto LABEL_25;
      }
    }
    goto LABEL_18;
  }
  v8 = 0;
LABEL_5:
  TLine::CachePositions((uint64_t)this);
LABEL_19:
  if (v8 < v5)
  {
    do
    {
      v11 = *(_QWORD **)(*v2 + 8 * v8);
      if (v11)
      {
        if ((v3 & 1) == 0)
          *(_QWORD *)(v11[6] + 272) = 0;
        CFRelease(v11);
      }
      ++v8;
    }
    while (v5 != v8);
  }
LABEL_25:
  v12 = *((_QWORD *)this + 26);
  if (v12)
    MEMORY[0x186DC0394](v12, 0x1000C8099076E91);
  v13 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v13)
    std::default_delete<TLine::TruncationInfo>::operator()[abi:nn180100]((uint64_t)this + 192, v13);

  std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v2);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void TCharStreamCFAttrString::~TCharStreamCFAttrString(id *this)
{
  id *v2;

  *this = &off_1E15DE4B8;
  v2 = this + 5;

  *this = &off_1E15DDC70;
}

{
  TCharStreamCFAttrString::~TCharStreamCFAttrString(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__shared_ptr_emplace<TCharStreamCFAttrString>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t TRun::GetNonDeletedGlyphCount(TRun *this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t v4;
  int v5;

  v1 = *((_QWORD *)this + 26);
  if ((*((_BYTE *)this + 225) & 8) != 0)
  {
    v2 = 0;
    if (v1)
    {
      v3 = (__int16 *)(*(_QWORD *)(*((_QWORD *)this + 27) + 16) + 2 * *((_QWORD *)this + 25));
      v4 = 2 * v1;
      do
      {
        v5 = *v3++;
        if (v5 != -1)
          ++v2;
        v4 -= 2;
      }
      while (v4);
    }
    if (*((_QWORD *)this + 33) == -1)
      return v2;
    else
      return v2 + 1;
  }
  return v1;
}

uint64_t std::__shared_ptr_emplace<TCharStreamCFString>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void TCharStreamCFString::~TCharStreamCFString(id *this)
{
  id *v1;

  *this = &off_1E15DDC70;
  v1 = this + 4;

}

{
  id *v1;

  *this = &off_1E15DDC70;
  v1 = this + 4;

  JUMPOUT(0x186DC03ACLL);
}

void TCharStreamCFString::TCharStreamCFString(TCharStreamCFString *this, const __CFString *a2, const __CFDictionary *a3)
{
  const __CFAllocator *v5;
  CFDictionaryRef Copy;
  const __CFString *v7;
  const __CFString *v8;

  *(_QWORD *)this = &off_1E15DDC70;
  *((_QWORD *)this + 1) = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *((_QWORD *)this + 4) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  if (a3)
    Copy = CFDictionaryCreateCopy(v5, a3);
  else
    Copy = 0;
  *((_QWORD *)this + 5) = Copy;
  v7 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  *((_QWORD *)this + 2) = CFStringGetLength(v7);
  v8 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  *((_QWORD *)this + 3) = CFStringGetCharactersPtr(v8);
}

CFIndex TypesetterSuggestLineBreak(const __CTTypesetter *a1, CFIndex a2, double a3, double a4)
{
  uint64_t v4;
  CFIndex v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = *((_QWORD *)a1 + 5);
  v10 = 0;
  v5 = TTypesetter::SuggestLineBreak(v4, a2, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v7 = 5;
LABEL_6:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

CFIndex TTypesetter::SuggestLineBreak(uint64_t a1, CFIndex a2, uint64_t a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = *(_OWORD *)(a1 + 216);
  v20 = *(_QWORD *)(a1 + 232);
  v21 = a1 + 240;
  v22 = *(_DWORD *)(a1 + 260);
  v23 = *(_BYTE *)(a1 + 264);
  v24 = *(_BYTE *)(a1 + 257);
  v25 = 0;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v26, a3);
  v14 = TTypesetter::SuggestLineBreak(&v18, a2, (uint64_t)v26, a4, a5);
  v15 = v27;
  if (v27 == v26)
  {
    v16 = 4;
    v15 = v26;
    goto LABEL_5;
  }
  if (v27)
  {
    v16 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v8, v9, v10, v11, v12, v13);
  }
  return v14;
}

CFIndex TTypesetter::SuggestLineBreak(uint64_t *a1, CFIndex a2, uint64_t a3, double a4, double a5)
{
  unsigned int v10;
  CFIndex Chars;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[8];
  CFIndex v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v17, a3);
  TTypesetter::FindGraphicalBreak(a1, a2, (uint64_t)v17, (uint64_t)v15, a4, a5);
  v10 = v15[0];
  Chars = v16;
  v12 = v18;
  if (v18 == v17)
  {
    v13 = 4;
    v12 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  if ((v10 & 1) == 0)
  {
    if (!Chars)
    {
      Chars = TTypesetter::DecomposeLastChars((const TLine **)a1, a2, 0, a4);
      if (!Chars)
        Chars = *(_QWORD *)(a3 + 24) == 0;
    }
    return TTypesetter::FindLineBreak((TLine **)a1, a2, Chars, v10);
  }
  return Chars;
}

CFIndex TTypesetter::DecomposeLastChars(const TLine **a1, CFIndex a2, CFIndex a3, double a4)
{
  CFIndex v4;
  uint64_t v5;
  TRun *v9;
  uint64_t NextChar;
  uint64_t v11;
  CFIndex v12;
  uint64_t v14;
  double v15;
  const TLine *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[5];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFRange v45;

  v4 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  v5 = a2 + a3;
  if (a2 + a3 >= *((_QWORD *)a1[1] + 2) - 1)
    return v4;
  v9 = *(TRun **)(*(_QWORD *)(*((_QWORD *)*a1 + 2) + 8 * TLine::FindRunWithCharIndex(*a1, a2 + a3, 1)) + 40);
  *(_QWORD *)&v30[0] = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v9, v5);
  NextChar = TRun::GetNextChar(v9, v5, (uint64_t *)v30);
  v11 = *((_QWORD *)a1[1] + 2);
  if (NextChar > v11)
    return v4;
  v16 = a1[1];
  v27 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v14 = NextChar - v5;
  v28 = 0;
  *(_QWORD *)&v27 = v11;
  do
  {
    v12 = v4;
    if (--v14 < 1)
      break;
    v40 = unk_18492EFE8;
    memset(v39, 170, sizeof(v39));
    memset(v32, 170, sizeof(v32));
    memset(v30, 0, sizeof(v30));
    v31 = 0;
    v33 = v32;
    BYTE8(v40) = 0;
    v37 = 0;
    memset(v39, 0, 21);
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v39[3] = 0;
    v39[4] = 0;
    LOBYTE(v40) = 0;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v38 = 0xFFEFFFFFFFFFFFFFLL;
    v29 = v4 + a2;
    TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v16, &v29, 0);
    v4 = v29 - a2 + 1;
    v45.location = a2;
    v45.length = v4;
    TTypesetter::FillLine(a1, (TLine *)v30, v45, a4, 0.0);
    v15 = *(double *)&v36;
    TLine::~TLine((TLine *)v30);
  }
  while (v15 <= a4);
  return v12;
}

uint64_t TTruncator::TTruncator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v8[3];

  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = a3;
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v4 + 72) + v5 - 1;
  TLine::GetTrailingWhitespace(v4, v8);
  v6 = v8[0];
  *(double *)a1 = v8[2];
  if (v6 != 0.0 && *(_QWORD *)&v6 != v5)
    *(_QWORD *)(a1 + 8) -= *(_QWORD *)&v6;
  return a1;
}

uint64_t TTruncator::TruncateWithTokenHandler(TTruncator *this, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  CFIndex v17;
  uint64_t v18;
  unint64_t v19;
  int64x2_t *v20;
  CFIndex started;
  unint64_t v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  void *Table;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  TLine *v40;
  uint64_t v41;
  unint64_t inserted;
  uint64_t v43;
  char v44;
  char v45;
  TLine *v46;
  const TRun **v47;
  unsigned int v49;
  double v50[3];
  id v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 v54;

  v10 = *((_QWORD *)this + 3);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 80);
  v13 = v12 + v11;
  v54 = -86;
  v14 = a5 * 0.5;
  if (a3 == 2)
    v15 = v14;
  else
    v15 = a5;
  v16 = v15 + *(double *)this;
  v49 = a3 - 1;
  v17 = v11;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  while (1)
  {
    v20 = (int64x2_t *)*((_QWORD *)this + 4);
    v20[4].i64[1] = v11;
    v20[5].i64[0] = v12;
    if (v49 >= 2)
    {
      if (a3)
        goto LABEL_10;
      started = TTruncator::TruncateStartChars(this, v17, v15 + *(double *)this, v20, (BOOL *)&v54);
    }
    else
    {
      started = TTruncator::TruncateEndChars(this, v13, v15, (TLine *)v20, (BOOL *)&v54);
    }
    v18 = started;
    v19 = v22;
LABEL_10:
    if (TTruncator::NoRunAdded((uint64_t)this, a4, 0, -1, a5))
      return v18;
    if (a3 == 2)
    {
      v23 = TTruncator::TruncateStartChars(this, v17, v16 + v15 - *(double *)(*((_QWORD *)this + 4) + 104), (int64x2_t *)a2, (BOOL *)&v54);
      v25 = v24;
      if (TTruncator::NoRunAdded((uint64_t)this, a4, a2, v18, a5))
        return v18;
      v19 = v25 - v18 + v23;
    }
    v52 = v18;
    v53 = v19;
    v51 = (id)0xAAAAAAAAAAAAAAAALL;
    TTruncator::CreateToken((uint64_t)this, &v52, a4, (unint64_t *)&v51);
    if (!atomic_load((unint64_t *)&v51))
      goto LABEL_45;
    v27 = atomic_load((unint64_t *)&v51);
    v28 = *(_QWORD *)(v27 + 40);
    v29 = *(double **)(v28 + 312);
    if (!v29)
      v29 = (double *)MEMORY[0x1E0C9D820];
    v30 = *(double *)(v28 + 192) + *v29;
    if (a3 == 1)
    {
      TRun::GetTrailingWhitespace(v28, v50);
      v30 = v30 - v50[2];
    }
    if (v30 == 0.0)
      goto LABEL_45;
    v31 = *(double *)(*((_QWORD *)this + 4) + 104);
    if (a3 == 2)
      v32 = *(double *)(a2 + 104);
    else
      v32 = -0.0;
    Table = GetTable();
    v34 = 0.0002;
    if (Table)
    {
      v35 = (double *)*((_QWORD *)Table + 8);
      v34 = 0.0002;
      if (v35)
        v34 = *v35;
    }
    v36 = v31 + v32;
    if (v30 + v31 + v32 - a5 > v34)
    {
      v37 = -v30;
      if (a3 == 2)
      {
        v16 = v16 - v30 * (*(double *)(a2 + 104) / v36);
        v38 = *(double *)(*((_QWORD *)this + 4) + 104) / v36;
        TLine::ClearLine((TLine *)a2);
      }
      else
      {
        v38 = 1.0;
      }
      v15 = v15 + v37 * v38;
      goto LABEL_36;
    }
    if (!a3)
    {
      v17 = v53 + v52;
      if ((uint64_t)(v53 + v52) <= (uint64_t)(v19 + v18))
      {
        v46 = (TLine *)*((_QWORD *)this + 4);
        v47 = (const TRun **)atomic_load((unint64_t *)&v51);
        TLine::InsertRun(v46, 0, v47);
        goto LABEL_45;
      }
      goto LABEL_36;
    }
    if (a3 != 1)
      break;
    v13 = v52;
    if (v52 >= v18)
      goto LABEL_38;
LABEL_36:
    TLine::ClearLine(*((TLine **)this + 4));

    v39 = *((_QWORD *)this + 3);
    v11 = *(_QWORD *)(v39 + 72);
    v12 = *(_QWORD *)(v39 + 80);
  }
  if (a3 != 2)
    goto LABEL_45;
LABEL_38:
  v40 = (TLine *)*((_QWORD *)this + 4);
  v41 = atomic_load((unint64_t *)&v51);
  inserted = TLine::InsertPartialRun(v40, (uint64_t)(*((_QWORD *)v40 + 3) - *((_QWORD *)v40 + 2)) >> 3, v41, *(_QWORD *)(v28 + 8), *(_QWORD *)(v28 + 16));
  v43 = *(_QWORD *)(inserted + 48);
  v44 = *(_BYTE *)(*(_QWORD *)(inserted + 40) + 224);
  if ((v44 & 1) == v54)
    v45 = *(_BYTE *)(*(_QWORD *)(inserted + 40) + 224);
  else
    v45 = v44 + 1;
  if (((*(unsigned __int8 *)(v43 + 224) ^ ((v45 & 1) == 0)) & 1) == 0)
    TRun::ReverseGlyphs(*(_QWORD *)(inserted + 48));
  *(_BYTE *)(v43 + 224) = v45;
LABEL_45:

  return v18;
}

BOOL TTruncator::NoRunAdded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    a3 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  if (v6 == v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(v8 + 72);
    v9 = *(_QWORD *)(v8 + 80);
    if (a4 == -1)
      v11 = v10;
    else
      v11 = a4;
    TTruncator::CreateAndAppendToken(a1, v11, v10 - v11 + v9, a5, 0, a2);
  }
  return v6 == v7;
}

_QWORD *TTruncator::HandleLeveledRuns(TTruncator *this, TLine *a2, unsigned __int8 *a3)
{
  _QWORD *result;
  __int16 v5;

  result = (_QWORD *)*((_QWORD *)this + 4);
  v5 = *((_WORD *)result + 76);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(*((_QWORD *)this + 3) + 152) & 8) != 0)
      *((_WORD *)result + 76) = v5 | 8;
    return TRunReorder::ReorderRuns(result, a2, a3);
  }
  return result;
}

void TTypesetter::FinishLineFill(uint64_t a1, uint64_t a2, double a3, double a4)
{
  const void *v8;
  TLine *v9;
  _BYTE v10[24];
  TLine *v11[2];

  TTypesetter::MakeLineConsistent(a1, (TLine *)a2);
  TTypesetter::ReorderRunsIfNecessary(a1, a2);
  TLine::UpdateWidth((TLine *)a2, a4);
  if ((*(_WORD *)(a2 + 152) & 2) != 0)
  {
    v9 = *(TLine **)(a1 + 8);
    v11[0] = (TLine *)a2;
    v11[1] = v9;
    TTabEngine::ApplyTabs(v11, a4, a3, v8, (uint64_t)v10);
  }
  *(double *)(a2 + 176) = a4;
  *(_BYTE *)(a2 + 184) = 1;
}

double TLine::UpdateWidth(TLine *this, double a2)
{
  double v2;
  unint64_t *v5;
  void *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double *v21;

  v2 = 0.0;
  if ((*((_WORD *)this + 76) & 0x10) != 0)
  {
    v5 = (unint64_t *)((char *)this + 160);
    do
      v6 = (void *)__ldaxr(v5);
    while (__stlxr(0, v5));

    v7 = *((_WORD *)this + 76);
    if ((v7 & 8) != 0)
      v8 = ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3) - 1;
    else
      v8 = 0;
    if ((v7 & 8) != 0)
      v9 = -1;
    else
      v9 = (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
    if ((v7 & 8) != 0)
      v10 = -1;
    else
      v10 = 1;
    v2 = 0.0;
    if (v8 != v9)
    {
      v11 = 0.0;
      v12 = (double *)MEMORY[0x1E0C9D820];
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8) + 40);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13) & 1) != 0)
        {
          TLine::DetachRun(this, v8);
          v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8) + 48);
          v16 = *(double *)(v15 + 192);
          v17 = *(double **)(v15 + 312);
          if (!v17)
            v17 = v12;
          v18 = *v17;
          v14.n128_f64[0] = v2 + v11 + a2;
          v19 = (*(double (**)(_QWORD, TLine *, uint64_t, __n128))(*(_QWORD *)v15 + 96))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8) + 48), this, v8, v14);
          if ((*(double (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15) > *((double *)this + 14))
            *((double *)this + 14) = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
          v20 = v16 + v18;
          v2 = v2 + v19;
          if ((*(double (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15) > *((double *)this + 15))
            *((double *)this + 15) = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
        }
        else
        {
          v21 = *(double **)(v13 + 312);
          if (!v21)
            v21 = v12;
          v20 = *(double *)(v13 + 192) + *v21;
        }
        v11 = v11 + v20;
        v8 += v10;
      }
      while (v9 != v8);
    }
    *((double *)this + 13) = v2 + *((double *)this + 13);
  }
  return v2;
}

void TTypesetter::MakeLineConsistent(uint64_t a1, TLine *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_WORD *)this + 76) & 4) != 0)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3) - v3;
    if (v4 >= 8)
    {
      v6 = 0;
      v7 = (unint64_t)v4 >> 3;
      do
      {
        v8 = *(_QWORD *)(v3 + 8 * v6);
        if (*(_DWORD *)(*(_QWORD *)(v8 + 40) + 256) == 3)
        {
          TTypesetter::RelayoutRun(a1, v8, this, v6);
          v3 = *((_QWORD *)this + 2);
          v7 = (*((_QWORD *)this + 3) - v3) >> 3;
        }
        ++v6;
      }
      while (v6 < v7);
      TLine::SyncWithRuns(this);
    }
  }
}

void TLine::DetachRun(TLine *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(v4 + 56))(&v10);
  v5 = atomic_load((unint64_t *)&v10);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = objc_msgSend(*(id *)(v6 + 216), "copyWithRange:", *(_QWORD *)(v6 + 200), *(_QWORD *)(v6 + 208));

  *(_QWORD *)(v6 + 216) = v7;
  *(_QWORD *)(v6 + 200) = 0;
  do
    v8 = (void *)__ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));
  v9 = v8;
  TLine::ReplaceRun(this, a2, (unint64_t *)&v9);

}

void TLine::ReplaceRun(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1[2] + 8 * a2);
  v5 = v4[5];
  do
    v6 = __ldaxr(a3);
  while (__stlxr(0, a3));
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_QWORD *)(v5 + 32);
  if (v8)
  {
    *(_QWORD *)(v8 + 24) = v7;
  }
  else
  {
    a1[11] = v7;
    if (!v7)
    {
      v9 = *(_QWORD *)(v5 + 24);
      if (!v9)
      {
        a1[12] = 0;
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  *(_QWORD *)(v7 + 32) = v8;
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
  {
    a1[12] = v7;
    *(_QWORD *)(v7 + 24) = 0;
    goto LABEL_9;
  }
LABEL_7:
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v9 + 32) = v7;
LABEL_9:
  *(_QWORD *)(a1[2] + 8 * a2) = v6;

}

void TTypesetter::ReorderRunsIfNecessary(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((*(_WORD *)(a2 + 152) & 1) != 0 && !*(_BYTE *)(a1 + 45))
  {
    v6 = 0xAAAAAAAAAAAAAAAALL;
    v7 = 0xAAAAAAAAAAAAAAAALL;
    TTypesetter::GetLevelsProvider(a1, &v6);
    TRunReorder::ReorderRuns(v6, a2);
    v3 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v4 = (unint64_t *)(v7 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void CTDelegateRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TDelegateRun *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TDelegateRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTDelegateRun::CloneEntire;
    v5[8] = CTDelegateRun::CloneRange;
    TDelegateRun::TDelegateRun(v6, (const TDelegateRun *)(a1 + 72));
    v10 = v5;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    v9 = v7;

  }
  else
  {
    v9 = 0;
  }
  do
    v8 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  *a2 = v8;

}

void TDelegateRun::TDelegateRun(TDelegateRun *this, const TDelegateRun *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  __int128 v7;

  TRun::TRun(this, a2);
  *v4 = &off_1E15DCB18;
  v5 = (void *)atomic_load((unint64_t *)a2 + 40);
  *((_QWORD *)this + 40) = v5;
  v6 = *(_OWORD *)((char *)a2 + 328);
  v7 = *(_OWORD *)((char *)a2 + 344);
  *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
  *(_OWORD *)((char *)this + 328) = v6;
  *(_OWORD *)((char *)this + 344) = v7;
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  *((_OWORD *)this + 24) = *((_OWORD *)a2 + 24);
}

void TRun::TRun(TRun *this, const TRun *a2)
{
  __int128 v4;
  char *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;

  *(_QWORD *)this = &off_1E15DE6F0;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (char *)this + 40;
  *(_WORD *)((char *)this + 89) = 0;
  *((_BYTE *)this + 91) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 8) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  TAttributes::operator=((uint64_t)this + 40, (uint64_t)a2 + 40);
  TStorageRange::TStorageRange((TStorageRange *)(v5 + 152), (const TRun *)((char *)a2 + 192));
  *((_QWORD *)v5 + 27) = *((_QWORD *)a2 + 32);
  v6 = *((_QWORD *)a2 + 34);
  *((_QWORD *)v5 + 28) = -1;
  *((_QWORD *)v5 + 29) = v6;
  v7 = (_OWORD *)MEMORY[0x1E0C9D820];
  *((_QWORD *)v5 + 30) = 0;
  *(_OWORD *)(v5 + 248) = *v7;
  *((_DWORD *)v5 + 66) = *((_DWORD *)a2 + 76);
  if (*((_QWORD *)a2 + 39))
  {
    v8 = operator new();
    v9 = (__int128 *)*((_QWORD *)a2 + 39);
    v11 = v9[1];
    v10 = v9[2];
    v12 = *v9;
    *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)v8 = v12;
    std::vector<CGSize>::vector((_QWORD *)(v8 + 56), (uint64_t)v9 + 56);
    v13 = (void *)atomic_load((unint64_t *)v9 + 10);
    *(_QWORD *)(v8 + 80) = v13;
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 39) = v8;
}

uint64_t TDelegateRun::CanUpdateWidth(TDelegateRun *this)
{
  return 1;
}

uint64_t TRun::CanUpdateWidth(TRun *this)
{
  return 0;
}

uint64_t TFramesetterAttrString::Typesetter(TFramesetterAttrString *this)
{
  return (uint64_t)this + 8;
}

double TLine::ClearLine(TLine *this)
{
  void **v2;
  void **v3;
  void *v4;
  double result;

  v2 = (void **)*((_QWORD *)this + 2);
  v3 = (void **)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;

    }
    while (v2 != v3);
    v2 = (void **)*((_QWORD *)this + 2);
  }
  *((_QWORD *)this + 3) = v2;
  result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  return result;
}

CFIndex TCharStream::FindLineBreak(TCharStream *this, CFRange a2, int a3, __CFString *a4)
{
  CFIndex length;
  CFIndex location;
  CFIndex v9;
  TCharStream *NativeIndex;
  CFIndex v11;
  unsigned int v12;
  int isWhitespace;
  const __CFString *v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  UText ut;

  length = a2.length;
  if (a2.length)
  {
    location = a2.location;
    memset(&ut, 0, sizeof(ut));
    ut.magic = 878368812;
    ut.sizeOfStruct = 144;
    if ((**(uint64_t (***)(TCharStream *, UText *))this)(this, &ut))
    {
      v9 = location + length;
      if (a3)
      {
        utext_setNativeIndex(&ut, v9 - 1);
      }
      else
      {
        v11 = *((_QWORD *)this + 2);
        if (v9 >= v11)
        {
          length = v11 - location;
          goto LABEL_18;
        }
        utext_setNativeIndex(&ut, location + length);
        v12 = utext_next32(&ut);
        isWhitespace = u_isWhitespace(v12);
        NativeIndex = (TCharStream *)utext_getNativeIndex(&ut);
        if (v12 >> 1 != 4103 && !isWhitespace)
        {
          if (TCharStream::CopyBreakIterator(a4, v14))
          {
            ubrk_setUText();
            v15 = (int)ubrk_preceding();
            if (a4)
              ubrk_close();
            if (location >= v15)
            {
              if (v9 >= *((_QWORD *)this + 2))
                goto LABEL_18;
              v16 = (*(uint64_t (**)(TCharStream *, CFIndex, uint64_t))(*(_QWORD *)this + 40))(this, location + length, 2);
              v15 = v16;
              if (v16 <= location)
              {
                length = v17 - location + v16;
                goto LABEL_18;
              }
            }
            length = v15 - location;
          }
LABEL_18:
          utext_close(&ut);
          return length;
        }
      }
      length = TCharStream::FindLineBreakInWhitespace(NativeIndex, &ut) - location;
      goto LABEL_18;
    }
  }
  return length;
}

uint64_t TCharStreamCFString::OpenUText(TCharStreamCFString *this, UText *a2)
{
  atomic_load((unint64_t *)this + 4);
  return CFStringOpenUText();
}

CFIndex TTypesetter::FindLineBreak(TLine **a1, CFIndex a2, CFIndex a3, unsigned int a4)
{
  __CFString *v8;
  CFRange v10;

  if (*((_QWORD *)*a1 + 3) == *((_QWORD *)*a1 + 2))
    v8 = 0;
  else
    v8 = (__CFString *)atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 2)
                                                                              + 8
                                                                              * TLine::FindRunWithCharIndex(*a1, a2 + a3, 1))+ 40)+ 64));
  v10.location = a2;
  v10.length = a3;
  return TCharStream::FindLineBreak(a1[1], v10, (a4 >> 1) & 1, v8);
}

uint64_t TCharStream::CopyBreakIterator(id this, const __CFString *a2)
{
  __CFString *v4;
  CFLocaleIdentifier CanonicalLocaleIdentifierFromString;
  unint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  const __CFString *v13;
  _QWORD *Table;
  uint64_t (*v15)(void);
  id v17;
  _BYTE v18[21];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[26];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (this || (v8 = GetTable()) == 0 || (v9 = v8[2]) == 0)
  {
    v17 = this;
    if (!atomic_load((unint64_t *)&v17))
    {
      v4 = (__CFString *)CFPreferencesCopyValue(CFSTR("AppleTextBreakLocale"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      if (v4)
      {
        CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
        do
          v6 = __ldaxr((unint64_t *)&v17);
        while (__stlxr((unint64_t)CanonicalLocaleIdentifierFromString, (unint64_t *)&v17));
        v7 = (void *)v6;
      }
      else
      {
        CopyPreferredLanguage((unint64_t *)v18);
        do
          v10 = __ldaxr((unint64_t *)v18);
        while (__stlxr(0, (unint64_t *)v18));
        do
          v11 = (void *)__ldaxr((unint64_t *)&v17);
        while (__stlxr(v10, (unint64_t *)&v17));

        v7 = *(void **)v18;
      }

    }
    memset(v32, 0, sizeof(v32));
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 0u;
    v24 = 0u;
    v23 = 0u;
    v22 = 0u;
    v21 = 0u;
    v20 = 0u;
    v19 = 0u;
    *(_OWORD *)&v18[5] = 0u;
    qmemcpy(v18, "en_US", 5);
    if (atomic_load((unint64_t *)&v17))
    {
      v13 = (const __CFString *)atomic_load((unint64_t *)&v17);
      CFStringGetCString(v13, v18, 255, 0x600u);
    }
    v9 = ubrk_open();
    if (!this)
    {
      Table = GetTable();
      if (Table)
      {
        v15 = MEMORY[0x1E0DE5C98];
        Table[2] = v9;
        Table[3] = v15;
      }
    }

  }
  return v9;
}

id TParagraphStyle::GetLineBreakMode(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
    return (id)*((unsigned __int8 *)TParagraphStyle::GetNative(v3, a2) + 32);
  else
    return -[TParagraphStyle lineBreakMode](v3, sel_lineBreakMode);
}

double TParagraphStyle::GetTailIndent(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t *Native;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    Native = TParagraphStyle::GetNative(v3, a2);
    if (*Native)
      return *(double *)(*Native + 16);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle tailIndent](v3, sel_tailIndent);
  }
  return result;
}

double TParagraphStyle::GetFirstLineHeadIndent(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t *Native;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    Native = TParagraphStyle::GetNative(v3, a2);
    if (*Native)
      return *(double *)*Native;
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle firstLineHeadIndent](v3, sel_firstLineHeadIndent);
  }
  return result;
}

BOOL TFramesetter::ParagraphEndsWith(TFramesetter *this, const TLine *a2, const TCharStream *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t RunWithCharIndex;
  uint64_t v12;

  v3 = *((_QWORD *)this + 10) + *((_QWORD *)this + 9);
  if (v3 == *((_QWORD *)a2 + 2))
    return 1;
  v7 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v8 = v6 - v7;
  if (v6 != v7
    && (v10 = v3 - 1, RunWithCharIndex = TLine::FindRunWithCharIndex(this, v3 - 1, 1), RunWithCharIndex < v8 >> 3)
    && (v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * RunWithCharIndex) + 40),
        (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 216) + 40)
                   + 4 * *(_QWORD *)(v12 + 200)
                   + 4 * TRun::GetGlyphIndexForCharIndex<false>(v12, v10)) & 2) != 0))
  {
    return TCharStream::IsParagraphSeparator(a2, v10);
  }
  else
  {
    return 0;
  }
}

double TFramesetter::GetHeadIndent(TFramesetter *this, const TAttributes *a2)
{
  TParagraphStyle **v2;

  if (this)
  {
    v2 = (TParagraphStyle **)*((_QWORD *)this + 16);
    if ((_DWORD)a2)
    {
      if (v2)
        return TParagraphStyle::GetFirstLineHeadIndent(v2, a2);
    }
    else if (v2)
    {
      return TParagraphStyle::GetHeadIndent(v2, a2);
    }
  }
  return 0.0;
}

uint64_t TFramesetter::AppendLine(uint64_t a1, int a2, char a3, int a4, unsigned int a5, CFIndex a6, unint64_t *a7, unint64_t *a8, double a9, double a10, double a11, uint64_t a12, unint64_t *a13)
{
  const void *v24;
  uint64_t **v25;
  uint64_t **TruncatedLine;
  void *v27;
  double v28;
  TParagraphStyle **v29;
  int Alignment;
  int v31;
  const __CTLine *v32;
  double v33;
  double PenOffsetForFlush;
  uint64_t v35;
  double v36;
  const __CTLine *v37;
  CTLineRef JustifiedLine;
  void *v40;
  id v41;
  __CFArray *v42;
  double v43;
  double v44;
  unint64_t v45;
  double *v46;
  double *v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  double *v55;
  char *v56;
  CFMutableBitVectorRef Mutable;
  void *v59;
  __CFBitVector *v60;
  const __CFArray *v61;
  CFIndex Count;
  __CFBitVector *v63;

  v24 = (const void *)(a5 - 3);
  if (a5 >= 3)
  {
    v25 = (uint64_t **)atomic_load(a7);
    TruncatedLine = CreateTruncatedLine(v25, (unsigned __int32)v24, 0, 0, a9);
    if (!TruncatedLine)
      return 0;
    do
      v27 = (void *)__ldaxr(a7);
    while (__stlxr((unint64_t)TruncatedLine, a7));

  }
  v28 = 0.0;
  if (a1)
  {
    v29 = *(TParagraphStyle ***)(a1 + 128);
    if (v29)
    {
      Alignment = TParagraphStyle::GetAlignment(v29, v24);
      if (a4)
        v31 = 4;
      else
        v31 = 3;
      if (Alignment != 3)
        v31 = Alignment;
      if (v31 == 5)
      {
        LOBYTE(v31) = a3 ^ 1;
LABEL_16:
        if (v31 - 1 >= 2)
        {
          if (v31 == 3)
          {
            v37 = (const __CTLine *)atomic_load(a7);
            JustifiedLine = CTLineCreateJustifiedLine(v37, 1.0, a9);
            if (JustifiedLine)
              TCFRef<__CTFont const*>::Retain(a7, JustifiedLine);

          }
        }
        else
        {
          v32 = (const __CTLine *)atomic_load(a7);
          v33 = 0.5;
          if (v31 == 1)
            v33 = 1.0;
          PenOffsetForFlush = CTLineGetPenOffsetForFlush(v32, v33, a9);
          v28 = PenOffsetForFlush;
          v35 = *(_QWORD *)(a1 + 120);
          if (v35)
          {
            v36 = floor(PenOffsetForFlush);
            if ((*(_WORD *)(v35 + 66) & 0x10) != 0)
              v28 = v36;
          }
        }
        goto LABEL_27;
      }
      if (v31 != 4)
        goto LABEL_16;
    }
    LOBYTE(v31) = a3;
    goto LABEL_16;
  }
LABEL_27:
  if (!atomic_load(a7))
    return 0;
  v40 = (void *)atomic_load(a7);
  v41 = v40;
  v42 = (__CFArray *)atomic_load(a8);
  CFArrayAppendValue(v42, v41);

  v43 = a10 + v28;
  if (a2)
    v44 = a11;
  else
    v44 = a10 - v28;
  if (a2)
    a11 = v43;
  v45 = *(_QWORD *)(a12 + 16);
  v46 = *(double **)(a12 + 8);
  if ((unint64_t)v46 >= v45)
  {
    v49 = *(double **)a12;
    v50 = ((uint64_t)v46 - *(_QWORD *)a12) >> 4;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60)
      abort();
    v52 = v45 - (_QWORD)v49;
    if (v52 >> 3 > v51)
      v51 = v52 >> 3;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>(a12 + 16, v53);
      v49 = *(double **)a12;
      v46 = *(double **)(a12 + 8);
    }
    else
    {
      v54 = 0;
    }
    v55 = (double *)&v54[16 * v50];
    v56 = &v54[16 * v53];
    *v55 = a11;
    v55[1] = v44;
    v47 = v55 + 2;
    if (v46 != v49)
    {
      do
      {
        *((_OWORD *)v55 - 1) = *((_OWORD *)v46 - 1);
        v55 -= 2;
        v46 -= 2;
      }
      while (v46 != v49);
      v49 = *(double **)a12;
    }
    *(_QWORD *)a12 = v55;
    *(_QWORD *)(a12 + 8) = v47;
    *(_QWORD *)(a12 + 16) = v56;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *v46 = a11;
    v46[1] = v44;
    v47 = v46 + 2;
  }
  *(_QWORD *)(a12 + 8) = v47;
  if (a5 != 2)
    return 1;
  if (!atomic_load(a13))
  {
    Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    do
      v59 = (void *)__ldaxr(a13);
    while (__stlxr((unint64_t)Mutable, a13));

  }
  v60 = (__CFBitVector *)atomic_load(a13);
  v61 = (const __CFArray *)atomic_load(a8);
  Count = CFArrayGetCount(v61);
  CFBitVectorSetCount(v60, Count);
  v63 = (__CFBitVector *)atomic_load(a13);
  v48 = 1;
  CFBitVectorSetBitAtIndex(v63, a6, 1u);
  return v48;
}

uint64_t TParagraphStyle::GetAlignment(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  unint64_t v4;
  unsigned int v5;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    LOBYTE(v4) = *((_BYTE *)TParagraphStyle::GetNative(v3, a2) + 33);
  }
  else
  {
    v5 = -[TParagraphStyle alignment](v3, sel_alignment);
    v4 = 0x403010200uLL >> (8 * v5);
    if (v5 >= 5)
      LOBYTE(v4) = v5;
  }
  return v4;
}

void TFrame::SetLines(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a8;
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 104), a2);
  if (a1 + 112 != a3)
    std::vector<CGPoint>::__assign_with_size[abi:nn180100]<CGPoint*,CGPoint*>((char *)(a1 + 112), *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  TCFRef<__CTFont const*>::Retain((unint64_t *)(a1 + 136), a4);
}

uint64_t std::__shared_ptr_pointer<TBidiLevelsProvider  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL TTruncator::CreateAndAppendToken(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  id v15;
  uint64_t v16[2];

  v16[0] = a2;
  v16[1] = a3;
  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  TTruncator::CreateToken(a1, v16, a6, (unint64_t *)&v15);
  v8 = atomic_load((unint64_t *)&v15);
  if (v8)
  {
    v9 = atomic_load((unint64_t *)&v15);
    v10 = *(_QWORD *)(v9 + 40);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(double **)(v10 + 312);
    if (!v12)
      v12 = (double *)MEMORY[0x1E0C9D820];
    if (*(double *)(v11 + 104) + *(double *)(v10 + 192) + *v12 <= a4)
    {
      v13 = atomic_load((unint64_t *)&v15);
      TLine::InsertPartialRun((TLine *)v11, (uint64_t)(*(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16)) >> 3, v13, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16));
    }
  }

  return v8 != 0;
}

int64_t TCharStream::FindLineBreakInWhitespace(TCharStream *this, UText *ut)
{
  int v3;
  unsigned int v4;
  int v5;
  UChar32 v6;

  while (1)
  {
    v3 = utext_next32(ut);
    v4 = v3;
    if (v3 > 12)
      break;
    if ((v3 - 10) < 3 || v3 == -1)
      return utext_getNativeIndex(ut);
LABEL_8:
    v5 = u_charType(v3);
    if (v4 >> 1 != 4103 && v5 != 12)
      return utext_getPreviousNativeIndex(ut);
  }
  if ((v3 - 8232) < 2)
    return utext_getNativeIndex(ut);
  if (v3 != 13)
  {
    if (v3 == 133)
      return utext_getNativeIndex(ut);
    goto LABEL_8;
  }
  v6 = utext_next32(ut);
  if (v6 == 10 || v6 == -1)
    return utext_getNativeIndex(ut);
  return utext_getPreviousNativeIndex(ut);
}

double TParagraphStyle::GetHeadIndent(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t *Native;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    Native = TParagraphStyle::GetNative(v3, a2);
    if (*Native)
      return *(double *)(*Native + 8);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle headIndent](v3, sel_headIndent);
  }
  return result;
}

void TLine::DeleteRun(TLine *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RunWithCharIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD **)(*(_QWORD *)(v4 + 8 * a2) + 48);
  v7 = (_QWORD *)v5[3];
  v6 = v5[4];
  if (*((_QWORD *)this + 3) - v4 >= 9)
  {
    v9 = v5[1];
    v8 = v5[2];
    if (v9 == *((_QWORD *)this + 9))
    {
      if (!v7)
      {
        RunWithCharIndex = TLine::FindRunWithCharIndex(this, v8 + v9, 1);
        if (RunWithCharIndex == a2)
          return;
        v7 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * RunWithCharIndex) + 48);
      }
      v11 = v7[1];
      if (v9 >= v11)
        v12 = v7[1];
      else
        v12 = v9;
      v13 = v7[2] + v11;
      if (v13 <= v8 + v9)
        v13 = v8 + v9;
      v7[1] = v12;
      v7[2] = v13 - v12;
    }
    else
    {
      v14 = v9 - 1;
      if (!v6)
      {
        v15 = TLine::FindRunWithCharIndex(this, v9 - 1, -1);
        if (v15 == a2)
          return;
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v15) + 48);
      }
      v16 = *(_QWORD *)(v6 + 8);
      v17 = *(_QWORD *)(v6 + 16) + v16;
      v18 = v8 + v9;
      v19 = __OFSUB__(v8 + v9, v17);
      v20 = v8 + v9 - v17;
      if (!((v20 < 0) ^ v19 | (v20 == 0)))
      {
        if (v9 >= v16)
          v21 = *(_QWORD *)(v6 + 8);
        else
          v21 = v9;
        v22 = v18 - v21;
        v23 = objc_msgSend(*(id *)(v6 + 216), "copyWithRange:", *(_QWORD *)(v6 + 200), *(_QWORD *)(v6 + 208));

        *(_QWORD *)(v6 + 216) = v23;
        *(_QWORD *)(v6 + 200) = 0;
        TRun::IncrementAttachCountForChar(v6, v14, v20);
        *(_QWORD *)(v6 + 8) = v21;
        *(_QWORD *)(v6 + 16) = v22;
      }
    }
  }
  *((_QWORD *)this + 18) -= v5[26];
  TLine::SimpleRunDelete(this, a2);
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = v7;
    if (!v7)
    {
      *((_QWORD *)this + 12) = v6;
      *(_QWORD *)(v6 + 24) = 0;
      return;
    }
  }
  else
  {
    *((_QWORD *)this + 11) = v7;
    if (!v7)
    {
      *((_QWORD *)this + 12) = 0;
      return;
    }
  }
  v7[4] = v6;
}

void TCFBase<TFont>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  TFont::~TFont(*(TFont **)(a1 + 40));
}

uint64_t TAttributes::HandleRunDelegateAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x40u;
  return result;
}

void TBaseFont::CreateSystemDefaultFallbacks(uint64_t a1@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, int a4@<W3>, const __CFArray **a5@<X8>)
{
  __CFString *v9;
  void *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  _CTFontFallbacksArray *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const __CFURL *v22;
  CFStringRef v23;
  CFHashCode v24;
  void *v25;
  id v26;
  CFHashCode v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  int v37;
  uint64_t v38;
  const __CFArray *v39;
  id obj;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  objc_super v49;
  id v50[18];

  v50[16] = *(id *)MEMORY[0x1E0C80C00];
  v9 = (__CFString *)atomic_load((unint64_t *)(a1 + 96));
  if (v9 == CFSTR(".TimesFB") || v9 && CFEqual(v9, CFSTR(".TimesFB")))
    a2 = CFSTR("serif");
  v43 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)v50);
  TDescriptorSource::CopyDefaultSubstitutionListForLanguages(a2, a3, (TFontFallbacks *)&v43);
  v11 = (void *)atomic_load((unint64_t *)&v43);
  v12 = v11;
  v13 = v12;
  if (v12)
  {
    Count = CFArrayGetCount(v12);

    if (Count >= 1
      && (*a5 = (const __CFArray *)0xAAAAAAAAAAAAAAAALL,
          v15 = [_CTFontFallbacksArray alloc],
          v16 = atomic_load((unint64_t *)&v43),
          obj = (id)v16,
          v15)
      && (v49.receiver = v15,
          v49.super_class = (Class)_CTFontFallbacksArray,
          (v17 = objc_msgSendSuper2(&v49, sel_init)) != 0))
    {
      v18 = v17;
      v17[2] = a1;
      v19 = objc_msgSend(obj, "count");
      v18[5] = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v19);
      v18[6] = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v19);
      *((_DWORD *)v18 + 16) = a4;
      v20 = (unint64_t *)v18[2];
      v50[0] = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, unint64_t *))(*v20 + 200))(v50, v20);
      v21 = atomic_load((unint64_t *)v50);
      v39 = (const __CFArray *)v18;
      if (v21)
      {
        v22 = (const __CFURL *)atomic_load((unint64_t *)v50);
        v23 = CFURLGetString(v22);
        v24 = CFHash(v23);
      }
      else
      {
        v25 = (void *)atomic_load(v20 + 12);
        v26 = v25;
        v24 = CFHash(v26);

      }
      v27 = v24 + 2654435769u;
      v38 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v28 = (void *)atomic_load((unint64_t *)(a1 + 96));
      v42 = v28;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      if (v29)
      {
        v30 = v29;
        v41 = *(_QWORD *)v46;
        do
        {
          for (i = 0; i != v30; ++i)
          {
            if (*(_QWORD *)v46 != v41)
              objc_enumerationMutation(obj);
            v32 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
            TDescriptor::CopyAttribute(*(TDescriptor **)(v32 + 40), CFSTR("NSFontNameAttribute"), 1, &v44);
            do
              v33 = (void *)__ldaxr((unint64_t *)&v44);
            while (__stlxr(0, (unint64_t *)&v44));

            v34 = v42;
            v35 = v33;
            if (v34 == v35)
            {

            }
            else
            {
              v36 = v35;
              if (v34 && v35)
              {
                v37 = CFEqual(v34, v35);

                if (v37)
                  goto LABEL_29;
              }
              else
              {

              }
              v27 ^= (v27 << 6) + 2654435769u + (v27 >> 2) + CFHash(v33);
              objc_msgSend(*((id *)v39 + 5), "addObject:", v32);
              objc_msgSend(*((id *)v39 + 6), "addObject:", v38);
              ++*((_QWORD *)v39 + 4);
            }
LABEL_29:

          }
          v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
        }
        while (v30);
      }
      v13 = v39;
      *((_QWORD *)v39 + 7) = v27;
      *((_QWORD *)v39 + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v39 + 2) + 800))(*((_QWORD *)v39 + 2));

    }
    else
    {
      v13 = 0;
    }
  }
  else
  {

  }
  *a5 = v13;

}

BOOL DictHasUnmatchedNames(NSDictionary *a1, NSString *a2, NSString *a3, NSString *a4)
{
  unint64_t v7;
  unint64_t v9;

  if (!a4)
    return 0;
  v7 = -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  if (-[NSString isEqualToString:](a4, "isEqualToString:", v7))
    return 0;
  v9 = -[NSDictionary objectForKey:](a1, "objectForKey:", a3);
  return !-[NSString isEqualToString:](a4, "isEqualToString:", v9) && (v7 | v9) != 0;
}

CFDictionaryRef CTFontDescriptorCopyAttributes(CTFontDescriptorRef descriptor)
{
  const __CFDictionary *v1;
  id v3;

  if (!descriptor)
    return 0;
  TDescriptor::CopyAttributes(*((TDescriptor **)descriptor + 5), (unint64_t *)&v3);
  do
    v1 = (const __CFDictionary *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

void TInstanceFont::~TInstanceFont(id *this)
{
  TInstanceFont::~TInstanceFont(this);
  JUMPOUT(0x186DC03ACLL);
}

{
  *this = &off_1E15DCF58;

  TBaseFont::~TBaseFont((TBaseFont *)this);
}

void TSplicedFont::~TSplicedFont(TSplicedFont *this)
{
  TSplicedFont::~TSplicedFont(this);
  JUMPOUT(0x186DC03ACLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E15DCBC8;
  v2 = *((_QWORD *)this + 77);
  if (v2)
    free((void *)(v2 - 56));

  TBaseFont::~TBaseFont(this);
}

void TTenuousComponentFont::~TTenuousComponentFont(id *this)
{
  *this = &off_1E15DDF90;

  TComponentFont::~TComponentFont(this);
  JUMPOUT(0x186DC03ACLL);
}

{
  *this = &off_1E15DDF90;

  TComponentFont::~TComponentFont(this);
}

void CTFontRemoveFromCaches(uint64_t a1)
{
  uint64_t v1;
  const __CFURL *v3;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  uint64_t v7;
  id v8;

  if (a1)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400);
    if (v1)
    {
      v8 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, uint64_t))(*(_QWORD *)v1 + 200))(&v8, v1);
      if (atomic_load((unint64_t *)&v8))
      {
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v7);
        v3 = (const __CFURL *)atomic_load((unint64_t *)&v8);
        TDescriptorSource::PurgeFromCaches((TDescriptorSource *)&v7, v3);
        v4 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 880))(v1);
        if (v4)
        {
          Value = CFDictionaryGetValue(v4, CFSTR("cacheKey"));
          if (Value)
          {
            v6 = Value;
            TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v7);
            TDescriptorSource::PurgeFromSplicedFonts((TDescriptorSource *)&v7, v6);
          }
        }
      }
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 568))(v1))
      {
        CGFontDBGetLocal();
        CGFontDBPurgeFont();
      }

    }
  }
  else
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
    TDescriptorSource::PurgeFromCaches((TDescriptorSource *)&v8, 0);
    CGFontDBGetLocal();
    CGFontDBPurgeFont();
    FPFontPurgeCaches();
  }
}

void TComponentFont::TComponentFont(TComponentFont *this, const TComponentFont *a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  const __CFDictionary *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id MutableCopy;

  TBaseFont::TBaseFont(this, 0);
  *(_QWORD *)v4 = &off_1E15DD370;
  *(_DWORD *)(v4 + 712) = *((_DWORD *)a2 + 178);
  *((_QWORD *)this + 90) = (id)(*(uint64_t (**)(const TComponentFont *))(*(_QWORD *)a2 + 880))(a2);
  *(_OWORD *)((char *)this + 728) = 0u;
  v5 = (void *)atomic_load((unint64_t *)a2 + 93);
  *((_QWORD *)this + 93) = v5;
  *((_QWORD *)this + 94) = *((_QWORD *)a2 + 94);
  v7 = *(_OWORD *)((char *)a2 + 616);
  v6 = *(_OWORD *)((char *)a2 + 632);
  v8 = *(_OWORD *)((char *)a2 + 600);
  *((_QWORD *)this + 81) = *((_QWORD *)a2 + 81);
  *(_OWORD *)((char *)this + 616) = v7;
  *(_OWORD *)((char *)this + 632) = v6;
  *(_OWORD *)((char *)this + 600) = v8;
  v9 = *((_QWORD *)a2 + 88);
  v11 = *((_OWORD *)a2 + 42);
  v10 = *((_OWORD *)a2 + 43);
  *((_OWORD *)this + 41) = *((_OWORD *)a2 + 41);
  *((_OWORD *)this + 42) = v11;
  *((_OWORD *)this + 43) = v10;
  *((_QWORD *)this + 88) = v9;
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)this + 93);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v12);
  v13 = (unint64_t *)((char *)this + 120);
  do
    v14 = __ldaxr((unint64_t *)&MutableCopy);
  while (__stlxr(0, (unint64_t *)&MutableCopy));
  do
    v15 = (void *)__ldaxr(v13);
  while (__stlxr(v14, v13));

  v16 = (void *)atomic_load((unint64_t *)a2 + 11);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 11, v16);
  v17 = (void *)atomic_load((unint64_t *)a2 + 12);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 12, v17);
}

unint64_t TComponentFont::GetSplicedDict(TComponentFont *this)
{
  return atomic_load((unint64_t *)this + 90);
}

void TDescriptorSource::PurgeFromCaches(TDescriptorSource *this, const __CFURL *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t *v7;
  void *v8;
  void *v9;
  TDescriptorSource *v10;
  UInt8 __b[1025];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  TTypesetter::PurgeAttributesCache(this);
  if (a2)
  {
    memset(__b, 170, sizeof(__b));
    v4 = CFURLGetFileSystemRepresentation(a2, 1u, __b, 1025);
    if ((_DWORD)v4)
      v4 = FPFontPurgeCaches();
    v5 = (void *)atomic_load(TCGFontCache::GetCache((TCGFontCache *)v4));
    objc_msgSend(v5, "removeObjectForKey:", a2);
    v6 = (void *)atomic_load(*(unint64_t **)this);
    objc_msgSend(v6, "removeObjectForKey:", a2);
  }
  else
  {
    FPFontPurgeCaches();
    v7 = (unint64_t *)atomic_load(&TCGFontCache::sSharedCache);
    if (v7)
    {
      v8 = (void *)atomic_load(v7);
      objc_msgSend(v8, "removeAllObjects");
    }
    v9 = (void *)atomic_load(*(unint64_t **)this);
    TDescriptorSource::PurgeFontFallbacksCache((TDescriptorSource *)objc_msgSend(v9, "removeAllObjects"));
    TDescriptorSource::PurgeSplicedFontStash(v10);
  }
}

void TTypesetter::PurgeAttributesCache(TTypesetter *this)
{
  id *Table;
  void *v2;
  id *v3;
  void *v4;

  Table = (id *)GetTable();
  if (Table)
  {
    v3 = Table;
    Table = (id *)*Table;
    *v3 = 0;
    v3[1] = NullDestructor;
  }
  TTypesetter::DestroyAttributesCache(Table, v2);
  do
    v4 = (void *)__ldaxr(&sPreviousSecondaryScaleFontsAndRecipe);
  while (__stlxr(0, &sPreviousSecondaryScaleFontsAndRecipe));

}

id *TTypesetter::DestroyAttributesCache(id *this, void *a2)
{
  id *v2;

  if (this)
  {
    v2 = this;
    TAttributes::~TAttributes((TAttributes *)(this + 1));

    JUMPOUT(0x186DC03ACLL);
  }
  return this;
}

void TComponentFont::~TComponentFont(void **this)
{
  void *v2;

  *this = &off_1E15DD370;
  free(this[91]);
  v2 = this[92];
  if (v2)
    MEMORY[0x186DC03AC](v2, 0x1000C4089CA3EB1);

  TBaseFont::~TBaseFont((TBaseFont *)this);
}

{
  TComponentFont::~TComponentFont(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TBaseFont::GetSplicedDict(TBaseFont *this)
{
  return 0;
}

void TDescriptorSource::PurgeFromSplicedFonts(TDescriptorSource *this, const void *a2)
{
  os_unfair_lock_lock_with_options();
  if (TDescriptorSource::sSplicedFonts)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)TDescriptorSource::sSplicedFonts, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)&TDescriptorSource::sSplicedFontsLock);
}

void CopyValueForCurrentUser(const __CFDictionary *a1@<X0>, const __CFString **a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFArray *v6;
  void *v7;
  CFArrayRef v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  void *ValueAtIndex;
  const void *v13;
  void *Value;

  if (a1)
  {
    v6 = (const __CFArray *)-[__CFDictionary allKeys](a1, "allKeys");
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
    if ((objc_msgSend(v7, "containsObject:", CFSTR("en")) & 1) == 0)
      v7 = (void *)objc_msgSend(v7, "arrayByAddingObject:", CFSTR("en"));
    v8 = CFBundleCopyLocalizationsForPreferences(v6, (CFArrayRef)v7);
    *a3 = 0;
    v9 = v8;
    if (v9)
    {
      v10 = v9;
      Count = CFArrayGetCount(v9);

      if (Count)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v8, 0);
        v13 = ValueAtIndex;
        if (a2)
          *a2 = (const __CFString *)ValueAtIndex;
        Value = (void *)CFDictionaryGetValue(a1, v13);
        TCFRef<__CTFont const*>::Retain(a3, Value);
      }
    }
    else
    {

    }
  }
  else
  {
    *a3 = 0;
  }
}

void TCFBase<TNativeTextTab>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);
  const void *v3;

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  v3 = *(const void **)(*(_QWORD *)(a1 + 40) + 16);
  if (v3)
    CFRelease(v3);
}

CTRunStatus CTRunGetStatus(CTRunRef run)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (run)
  {
    v1 = *((_QWORD *)run + 5);
    v2 = *(_BYTE *)(v1 + 224) & 1 | (2 * (*(_DWORD *)(v1 + 256) == 2));
    if (*(_BYTE *)(v1 + 90) || *(_BYTE *)(v1 + 144))
      v2 |= 4u;
    v3 = *(_QWORD *)(v1 + 312);
    if (v3 && *(_QWORD *)(v3 + 56) != *(_QWORD *)(v3 + 64))
      v2 |= 8u;
    LODWORD(run) = v2 | *(_BYTE *)(v1 + 225) & 0x10;
  }
  return run;
}

uint64_t MapTightTrait(__int16 a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
  {
    if (a2)
      v8 = a8;
    else
      v8 = a7;
    v10 = a6;
    v11 = a7;
    v12 = a8;
  }
  else
  {
    if (a2)
      v8 = a5;
    else
      v8 = a4;
    v10 = a3;
    v11 = a4;
    v12 = a5;
  }
  v13 = v8;
  return TDescriptorSource::UIFontNameForUIType((TDescriptorSource *)*(&v10 + (a1 & 3)));
}

void TTenuousComponentFont::CopyCharacterSet(TTenuousComponentFont *this@<X0>, _QWORD *a2@<X8>)
{
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this) & 1) != 0)
    TComponentFont::CopyCharacterSet(this, a2);
  else
    *a2 = 0;
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithSymbolicTraits(CTFontDescriptorRef original, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  TDescriptor **CopyWithAttributes;
  uint64_t v5;
  TBaseFont *v6;
  int v7;
  int v8;
  unsigned int v9;
  const __CFDictionary *v11;
  const __CTFontDescriptor *v12;
  TDescriptor *v13;
  TDescriptor *v14;
  unint64_t v15;
  int v16;
  int v17;
  const __CFAllocator *v18;
  CFNumberRef v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  CFDictionaryRef v22;
  const __CFDictionary *v23;
  id v24;
  void *v25;
  const __CFAllocator *v26;
  CFNumberRef v27;
  CFDictionaryRef v28;
  __CFDictionary *v29;
  int v30;
  void *v31;
  id v33;
  id v34;
  unsigned int v35;
  void *values;
  id valuePtr;

  CopyWithAttributes = (TDescriptor **)original;
  v35 = symTraitValue;
  if (original)
  {
    v5 = *((_QWORD *)original + 5);
    if ((*(_DWORD *)(v5 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*((TDescriptor **)original + 5), 0, 0.0);
    v6 = (TBaseFont *)atomic_load((unint64_t *)(v5 + 32));
    if (v6)
    {
      v7 = (unsigned __int16)symTraitMask & (unsigned __int16)v35 & 0x800;
      v8 = (unsigned __int16)symTraitMask & (unsigned __int16)v35 & 0x1000;
      v9 = v35 & 0xFFFFE7FF;
      v35 &= 0xFFFFE7FF;
      if ((symTraitMask & 0xFFFFE7FF) == 0)
      {
        valuePtr = (id)(v8 | v7 | v9);
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
        values = v19;
        valuePtr = CFSTR("NSCTFontSymbolicTrait");
        v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        v22 = CFDictionaryCreate(v18, (const void **)&valuePtr, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        values = v22;
        valuePtr = CFSTR("NSCTFontTraitsAttribute");
        v23 = CFDictionaryCreate(v18, (const void **)&valuePtr, (const void **)&values, 1, v20, v21);
        CopyWithAttributes = (TDescriptor **)CTFontDescriptorCreateCopyWithAttributes((CTFontDescriptorRef)CopyWithAttributes, v23);

        v24 = v19;
LABEL_30:

        return (CTFontDescriptorRef)CopyWithAttributes;
      }
      v34 = (id)0xAAAAAAAAAAAAAAAALL;
      TBaseFont::CreateVariantWithSymbolicTraits(v6, &v35, (const __CTFontDescriptor *)CopyWithAttributes, symTraitMask & 0xFFFFE7FF, (unint64_t *)&v34);
      if (!atomic_load((unint64_t *)&v34))
      {
        CopyWithAttributes = 0;
LABEL_29:
        v24 = v34;
        goto LABEL_30;
      }
      TDescriptor::CopyAttributes(CopyWithAttributes[5], (unint64_t *)&valuePtr);
      do
        v11 = (const __CFDictionary *)__ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));

      v12 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v34);
      v13 = CTFontDescriptorCopyAttributes(v12);
      v14 = v13;
      v15 = atomic_load((unint64_t *)&v34);
      if (v15
        && (v16 = *(_DWORD *)(*(_QWORD *)(v15 + 40) + 16),
            (TDescriptor::GetSystemUIFontOptions(v13) & v16) != 0)
        || v11 && CFDictionaryGetCount(v11) == 1 && CFDictionaryGetValue(v11, CFSTR("NSFontNameAttribute")))
      {
        LOBYTE(v17) = 0;
        if (v7)
          goto LABEL_23;
      }
      else
      {
        v17 = (*((_DWORD *)v6 + 45) >> 28) & 1;
        if (v7)
          goto LABEL_23;
      }
      if ((v17 & 1) == 0)
      {
        do
          CopyWithAttributes = (TDescriptor **)__ldaxr((unint64_t *)&v34);
        while (__stlxr(0, (unint64_t *)&v34));
LABEL_28:

        goto LABEL_29;
      }
LABEL_23:
      v33 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v33, v11);
      v25 = (void *)atomic_load((unint64_t *)&v33);
      if (v14)
        CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke, v25);
      if (v7)
      {
        valuePtr = (id)(v7 | v8 | v35);
        v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
        values = v27;
        valuePtr = CFSTR("NSCTFontSymbolicTrait");
        v28 = CFDictionaryCreate(v26, (const void **)&valuePtr, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v29 = (__CFDictionary *)atomic_load((unint64_t *)&v33);
        CFDictionarySetValue(v29, CFSTR("NSCTFontTraitsAttribute"), v28);

      }
      v30 = *((_DWORD *)CopyWithAttributes[5] + 4);
      v31 = (void *)atomic_load((unint64_t *)&v33);
      CopyWithAttributes = (TDescriptor **)CTFontDescriptorCreateWithAttributesAndOptions(v31, v30);

      goto LABEL_28;
    }
    return 0;
  }
  return (CTFontDescriptorRef)CopyWithAttributes;
}

void TBaseFont::CreateVariantWithSymbolicTraits(TBaseFont *this@<X0>, unsigned int *a2@<X1>, const __CTFontDescriptor *a3@<X3>, int a4@<W2>, unint64_t *a5@<X8>)
{
  TDescriptor *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  void *v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  id v21;
  const __CFDictionary *Value;
  void *v23;
  const __CFString *v24;
  int v26;
  const __CFString *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  __CFString *UIFontFamilyNameForDesign;
  const __CFArray *v31;
  double v32;
  CFIndex Count;
  CFIndex v34;
  CFIndex v35;
  double v36;
  double v37;
  const __CFDictionary *ValueAtIndex;
  const void *v39;
  const void *v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  void *v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  const __CFNumber *v48;
  unint64_t v50;
  void *v51;
  uint64_t v54;
  unsigned int *v55;
  double v56;
  unint64_t v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  const __CFNumber *v60;
  float v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  const __CFString *v65;
  const __CTFontDescriptor *v66;
  __int128 v67;
  const __CFArray *v68;
  unsigned int *v69;
  CFIndex v70;
  CFIndex v71;
  CFIndex v72;
  double v73;
  double v74;
  TDescriptor **v75;
  const __CTFontDescriptor *v76;
  TDescriptor *v77;
  unint64_t *v78;
  unint64_t TraitsValues;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  BOOL v91;
  double v92;
  void *v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  const __CFNumber *v96;
  const __CFNumber *v97;
  void *v98;
  void *v99;
  id v100;
  double v102;
  void *v103;
  const __CFDictionary *v104;
  const __CFDictionary *v105;
  const __CFNumber *v106;
  const __CFDictionary *v107;
  unint64_t v108;
  void *v109;
  const __CFDictionary *v110;
  const __CFDictionary *v111;
  void *v112;
  const __CTFontDescriptor *v113;
  int v114;
  unint64_t *v115;
  float v116;
  int v117;
  TDescriptor *v118;
  const __CFNumber *v119;
  unsigned int *v120;
  int v122;
  const __CFDictionary *v123;
  const TBaseFont *v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id Mutable;
  id v132;
  id valuePtr;
  char *v134;
  char *v135;
  _OWORD v136[15];
  _QWORD v137[3];

  v137[1] = *MEMORY[0x1E0C80C00];
  v9 = (TDescriptor *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 160))(this);
  v10 = (int)v9;
  v11 = (uint64_t *)*a2;
  v12 = *((_QWORD *)a3 + 5);
  v13 = *(_DWORD *)(v12 + 16);
  v14 = TDescriptor::GetSystemUIFontOptions(v9) & v13;
  if ((v11 ^ v10) & a4 | v14)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = *a2 & a4 | v10 & ~a4;
    v120 = a2;
    *a2 = v15;
    if (v14)
      v16 = (v15 >> 10) & 1;
    else
      v16 = 0;
    if (v14 && ((v15 & 0x400) == 0 || (v10 & 0x400) != 0))
    {
      if ((TBaseFont::SystemUIFontAttributesForSymbolicTraits(this, (TCFMutableDictionary *)&Mutable, v11, a4, (const TDescriptor *)v12) & 1) != 0)
      {
        v17 = (void *)atomic_load((unint64_t *)&Mutable);
        v132 = v17;
        LODWORD(v130) = 1028;
        TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&,unsigned int &>(&v132, (int *)&v130, (unint64_t *)&valuePtr);
        do
          v18 = __ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        *a5 = v18;
        v19 = valuePtr;
        goto LABEL_151;
      }
      v15 = *a2;
    }
    *a2 = v15 & 0xFFFE7FFF;
    v130 = (id)0xAAAAAAAAAAAAAAAALL;
    atomic_load((unint64_t *)(v12 + 8));
    Value = (const __CFDictionary *)atomic_load((unint64_t *)(v12 + 8));
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("NSFontFamilyAttribute"));
    v130 = Value;
    TDescriptor::CopyAttribute((TDescriptor *)v12, CFSTR("NSCTFontTraitsAttribute"), 5, &valuePtr);
    do
      v23 = (void *)__ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));

    if (atomic_load((unint64_t *)&v130))
      v26 = v16;
    else
      v26 = 1;
    if (v26 == 1)
    {
      if ((v16 & 1) != 0)
      {
        v27 = CFSTR("NSCTFontUIFontDesignMonospaced");
        if (!CFSTR("NSCTFontUIFontDesignMonospaced"))
          goto LABEL_32;
        goto LABEL_31;
      }
      v28 = v23;
      v29 = v28;
      if (v28)
        v27 = (const __CFString *)CFDictionaryGetValue(v28, CFSTR("NSCTFontUIFontDesignTrait"));
      else
        v27 = 0;

      if (v27)
      {
LABEL_31:
        UIFontFamilyNameForDesign = (__CFString *)TDescriptorSource::GetUIFontFamilyNameForDesign(v27, v24);
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v130, UIFontFamilyNameForDesign);
      }
    }
LABEL_32:
    v114 = v14;
    v113 = a3;
    v129 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 120))(&v129, this);
    v128 = (id)0xAAAAAAAAAAAAAAAALL;
    v115 = (unint64_t *)this;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v128, this);
    v127 = 0;
    v31 = (const __CFArray *)atomic_load((unint64_t *)&v129);
    v32 = 0.0;
    v118 = (TDescriptor *)v12;
    if (v31 && (Count = CFArrayGetCount(v31)) != 0)
    {
      v34 = Count;
      v119 = 0;
      v35 = 0;
      v36 = 0.0;
      v37 = 0.0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, v35);
        v39 = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
        if (v39)
        {
          v40 = v39;
          if (CFEqual(v39, &unk_1E16170E0))
          {
            TCFRef<__CTFont const*>::Retain((unint64_t *)&v127, ValueAtIndex);
          }
          else if (CFEqual(v40, &unk_1E16170B0))
          {
            v41 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisMaximumValue"));
            v42 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisMinimumValue"));
            v43 = (void *)atomic_load((unint64_t *)&v128);
            v44 = v43;
            v45 = v44;
            v46 = v44 ? (const __CFNumber *)CFDictionaryGetValue(v44, &unk_1E16170B0) : 0;

            v47 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisDefaultValue"));
            v119 = v47;
            v48 = v46 ? v46 : v47;
            if (v41 && v42 && v48 && !CFEqual(v41, v42))
            {
              *(double *)&valuePtr = NAN;
              CFNumberGetValue(v41, kCFNumberDoubleType, &valuePtr);
              v37 = *(double *)&valuePtr;
              *(double *)&valuePtr = NAN;
              CFNumberGetValue(v42, kCFNumberDoubleType, &valuePtr);
              v36 = *(double *)&valuePtr;
              *(double *)&valuePtr = NAN;
              CFNumberGetValue(v48, kCFNumberDoubleType, &valuePtr);
              v32 = (*(double *)&valuePtr - v36) / (v37 - v36);
            }
          }
        }
        ++v35;
      }
      while (v34 != v35);
    }
    else
    {
      v119 = 0;
      v37 = 0.0;
      v36 = 0.0;
    }
    if (!atomic_load((unint64_t *)&v130))
    {
      (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *))(*v115 + 72))(&valuePtr, v115, CFSTR("CTFontSyntheticFamilyName"));
      do
        v50 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v51 = (void *)__ldaxr((unint64_t *)&v130);
      while (__stlxr(v50, (unint64_t *)&v130));

    }
    if (!atomic_load((unint64_t *)&v130) && !atomic_load((unint64_t *)&v127))
    {
      *a5 = 0;
LABEL_150:

      v19 = v130;
LABEL_151:

      v21 = Mutable;
      goto LABEL_152;
    }
    v54 = (*(uint64_t (**)(unint64_t *))(*v115 + 776))(v115);
    if ((a4 & 2) != 0 && !v54)
    {
      v55 = v120;
      v56 = 0.400000006;
      if ((*(_BYTE *)v120 & 2) == 0)
        v56 = 0.0;
LABEL_76:
      v61 = v56;
      if ((*(unsigned int (**)(unint64_t *))(*v115 + 696))(v115))
        v62 = 2;
      else
        v62 = 0;
      v63 = *((_DWORD *)v118 + 4);
      v126 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&valuePtr);
      if (v114)
        v64 = v62 | 0x400;
      else
        v64 = v62;
      v65 = (const __CFString *)atomic_load((unint64_t *)&v130);
      if (v114)
        v66 = v113;
      else
        v66 = 0;
      v117 = v64 | v63 & 0x10000;
      TDescriptorSource::CopyMatchingDescriptorsForFamily((TPurgeableCache **)&valuePtr, v65, (CFComparisonResult (*)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily, v64 | *(_QWORD *)&v63 & 0x10000, (unint64_t *)&v126);
      *(_QWORD *)&v67 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v67 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v136[14] = v67;
      v136[13] = v67;
      v136[12] = v67;
      v136[11] = v67;
      v136[10] = v67;
      v136[9] = v67;
      v136[8] = v67;
      v136[7] = v67;
      v136[6] = v67;
      v136[5] = v67;
      v136[4] = v67;
      v136[3] = v67;
      v136[2] = v67;
      v136[1] = v67;
      v136[0] = v67;
      v134 = 0;
      v135 = 0;
      *(double *)&valuePtr = 0.0;
      v137[0] = v136;
      *v55 &= 0xFFFBBFFu;
      v68 = (const __CFArray *)atomic_load((unint64_t *)&v126);
      v116 = v61;
      if (v68 && (v69 = v55, (v70 = CFArrayGetCount(v68)) != 0))
      {
        v71 = v70;
        v72 = 0;
        v73 = v61;
        v74 = INFINITY;
        do
        {
          v75 = (TDescriptor **)CFArrayGetValueAtIndex(v68, v72);
          v76 = (const __CTFontDescriptor *)v75;
          v77 = v75[5];
          if ((*((_DWORD *)v77 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(v75[5], 0, 0.0);
          v78 = (unint64_t *)atomic_load((unint64_t *)v77 + 4);
          if (v78)
          {
            TraitsValues = atomic_load(v78 + 30);
            if (!TraitsValues)
              TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v78);
            if (TraitsValues && *v69 == (*(_DWORD *)TraitsValues & 0xFFFBBFF))
            {
              v80 = v134;
              if (v134 >= v135)
              {
                v82 = (v134 - (_BYTE *)valuePtr) >> 3;
                if ((unint64_t)(v82 + 1) >> 61)
                  abort();
                v83 = (v135 - (_BYTE *)valuePtr) >> 2;
                if (v83 <= v82 + 1)
                  v83 = v82 + 1;
                v84 = (unint64_t)(v135 - (_BYTE *)valuePtr) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v83;
                if (v84)
                {
                  v85 = (char *)v137[0];
                  if (v137[0] + 8 * v84 <= (unint64_t)v137)
                  {
                    v137[0] += 8 * v84;
                  }
                  else
                  {
                    if (v84 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v85 = (char *)operator new(8 * v84);
                  }
                }
                else
                {
                  v85 = 0;
                }
                v86 = &v85[8 * v82];
                *(_QWORD *)v86 = v76;
                v81 = v86 + 8;
                v88 = valuePtr;
                v87 = v134;
                if (v134 != valuePtr)
                {
                  do
                  {
                    v89 = *--v87;
                    *((_QWORD *)v86 - 1) = v89;
                    v86 -= 8;
                  }
                  while (v87 != v88);
                  v87 = valuePtr;
                }
                valuePtr = v86;
                v134 = v81;
                v90 = v135;
                v135 = &v85[8 * v84];
                if (v87)
                {
                  v91 = v136 <= (_OWORD *)v87 && v137 > v87;
                  v69 = v120;
                  if (v91)
                  {
                    if (v90 == (char *)v137[0])
                      v137[0] = v87;
                  }
                  else
                  {
                    operator delete(v87);
                  }
                }
                else
                {
                  v69 = v120;
                }
              }
              else
              {
                *(_QWORD *)v134 = v76;
                v81 = v80 + 8;
              }
              v134 = v81;
              v92 = (*(double *)(TraitsValues + 8) - v73) * (*(double *)(TraitsValues + 8) - v73);
              if (v37 > v36)
              {
                v125 = (id)0xAAAAAAAAAAAAAAAALL;
                (*(void (**)(id *__return_ptr, unint64_t *))(*v78 + 112))(&v125, v78);
                v93 = (void *)atomic_load((unint64_t *)&v125);
                v94 = v93;
                v95 = v94;
                if (v94)
                  v96 = (const __CFNumber *)CFDictionaryGetValue(v94, &unk_1E16170B0);
                else
                  v96 = 0;

                if (v96)
                  v97 = v96;
                else
                  v97 = v119;
                *(double *)&v132 = NAN;
                CFNumberGetValue(v97, kCFNumberDoubleType, &v132);
                v92 = v92
                    + (v32 - (*(double *)&v132 - v36) / (v37 - v36)) * (v32 - (*(double *)&v132 - v36) / (v37 - v36));

              }
              if (v74 > v92)
              {
                v66 = v76;
                v74 = v92;
                if (fabs(v92) < 0.001)
                  break;
              }
            }
          }
          ++v72;
          v76 = v66;
        }
        while (v72 != v71);
      }
      else
      {
        v76 = v66;
      }
      TDescriptor::CopyAttribute(v118, CFSTR("NSFontSizeAttribute"), 8, &v132);
      do
        v98 = (void *)__ldaxr((unint64_t *)&v132);
      while (__stlxr(0, (unint64_t *)&v132));

      if (v76)
      {
        v125 = v76;
        do
          v99 = (void *)__ldaxr((unint64_t *)&v125);
        while (__stlxr(0, (unint64_t *)&v125));
LABEL_143:
        v132 = v99;
        TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v132, v117, v98, a5);

        v100 = v125;
LABEL_144:

        goto LABEL_145;
      }
      if (valuePtr != v134)
      {
        v125 = *(id *)valuePtr;
        do
          v99 = (void *)__ldaxr((unint64_t *)&v125);
        while (__stlxr(0, (unint64_t *)&v125));
        goto LABEL_143;
      }
      if (atomic_load((unint64_t *)&v127))
      {
        v102 = (double)ClassOfWeight(v116);
        v103 = (void *)atomic_load((unint64_t *)&v128);
        v104 = v103;
        if (v104)
        {
          v105 = v104;
          v106 = (const __CFNumber *)CFDictionaryGetValue(v104, &unk_1E16170E0);

          if (v106)
          {
            *(double *)&v132 = NAN;
            CFNumberGetValue(v106, kCFNumberDoubleType, &v132);
            if (vabdd_f64(*(double *)&v132, v102) < 0.001)
              goto LABEL_166;
          }
        }
        else
        {

        }
        v107 = (const __CFDictionary *)atomic_load((unint64_t *)&v128);
        CopyVariationWithValue(v107, (const __CFNumber *)&unk_1E16170E0, v102, (unint64_t *)&v132);
        do
          v108 = __ldaxr((unint64_t *)&v132);
        while (__stlxr(0, (unint64_t *)&v132));
        do
          v109 = (void *)__ldaxr((unint64_t *)&v128);
        while (__stlxr(v108, (unint64_t *)&v128));

        v110 = (const __CFDictionary *)atomic_load((unint64_t *)&v127);
        if (IsValueInRangeOfAxis(v102, v110))
        {
          *(double *)&v132 = -3.72066208e-103;
          v111 = (const __CFDictionary *)atomic_load((unint64_t *)&v128);
          v123 = v111;
          v124 = (const TBaseFont *)v115;
          v122 = v117 & 0x10400;
          TCFBase_NEW<CTFontDescriptor,TBaseFont const*,__CFDictionary const*,unsigned int>((unint64_t *)&v125, &v124, &v123, &v122);
          do
            v112 = (void *)__ldaxr((unint64_t *)&v125);
          while (__stlxr(0, (unint64_t *)&v125));
          v132 = v112;

          TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v132, v117, v98, a5);
          v100 = v132;
          goto LABEL_144;
        }
      }
LABEL_166:
      *a5 = 0;
LABEL_145:

      if (*(double *)&valuePtr != 0.0)
      {
        v134 = (char *)valuePtr;
        if (v136 > valuePtr || v137 <= valuePtr)
          operator delete(valuePtr);
      }

      goto LABEL_150;
    }
    v57 = atomic_load(v115 + 30);
    if (!v57)
      v57 = TBaseFont::CreateTraitsValues((TBaseFont *)v115);
    v58 = v23;
    if (v58)
    {
      v59 = v58;
      v60 = (const __CFNumber *)CFDictionaryGetValue(v58, CFSTR("NSCTFontWeightTrait"));

      if (v60)
      {
        LODWORD(valuePtr) = -1;
        CFNumberGetValue(v60, kCFNumberFloatType, &valuePtr);
        v56 = *(float *)&valuePtr;
LABEL_75:
        v55 = v120;
        goto LABEL_76;
      }
    }
    else
    {

    }
    if (v57)
      v56 = *(double *)(v57 + 8);
    else
      v56 = 0.0;
    goto LABEL_75;
  }
  *(double *)&valuePtr = COERCE_DOUBLE(a3);
  do
    v20 = __ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));
  *a5 = v20;
  v21 = valuePtr;
LABEL_152:

}

uint64_t TBaseFont::SystemUIFontAttributesForSymbolicTraits(TBaseFont *this, TCFMutableDictionary *a2, uint64_t *a3, int a4, const TDescriptor *a5)
{
  int v10;
  void *v11;
  const __CFString **v12;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  TDescriptorSource *v17;
  TDescriptorSource *FontNameForTextStyle;
  int v19;
  BOOL v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  unint64_t *v23;
  const __CFString *v24;
  uint64_t result;
  __CFString *v26;
  __CFDictionary *v27;
  const __CFString *v28;
  uint64_t *v29;
  uint64_t v30;
  const void *v31;
  __CFDictionary *v32;
  void *v33;
  _BOOL4 v34;
  void *v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  void *v38;
  const __CFDictionary *v39;
  const __CFDictionary *v40;
  _BOOL4 v41;
  const __CFDictionary *v42;
  __CFDictionary *v43;
  __CFDictionary *v44;
  void *v45;
  void *v46;
  const __CFDictionary *v47;
  const __CFDictionary *v48;
  const __CFNumber *Value;
  unsigned int v50;
  const __CFDictionary *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  const __CFDictionary *v55;
  const __CFDictionary *v56;
  CFIndex Count;
  __CFDictionary *v58;
  const void *v59;
  void *v60;
  __CFDictionary *v61;
  void *v62;
  __CFDictionary *v63;
  void *v64;
  void *v65;
  __CFDictionary *v66;
  unint64_t v67;
  void *v68;
  const __CFNumber *v69;
  unsigned int v70;
  const __CFNumber *v71;
  double v72;
  unint64_t v73;
  void *v74;
  __CFDictionary *v76;
  const void *v77;
  __CFDictionary *v79;
  const void *v80;
  unsigned int valuePtr;
  id v82;
  id v83;

  v10 = *((_DWORD *)a5 + 4);
  if ((TDescriptor::GetSystemUIFontOptions(this) & v10) != 0)
  {
    v83 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontUIUsageAttribute"), 42, &v82);
    do
      v11 = (void *)__ldaxr((unint64_t *)&v82);
    while (__stlxr(0, (unint64_t *)&v82));
    v83 = v11;

    if (!atomic_load((unint64_t *)&v83))
    {
      TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontUIUsageAttribute"), &v82);
      do
        v14 = __ldaxr((unint64_t *)&v82);
      while (__stlxr(0, (unint64_t *)&v82));
      do
        v15 = (void *)__ldaxr((unint64_t *)&v83);
      while (__stlxr(v14, (unint64_t *)&v83));

    }
    v16 = atomic_load((unint64_t *)&v83);
    if (v16
      && (v17 = (TDescriptorSource *)atomic_load((unint64_t *)&v83),
          (FontNameForTextStyle = (TDescriptorSource *)TDescriptorSource::FindFontNameForTextStyle(v17, 0, 0, 0, 0, v12)) != 0)|| this&& ((v19 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 16))(this), v19 != 1414809156)? (v20 = v19 == 1413695044): (v20 = 1), v20&& (v21 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90)) != 0&& (FontNameForTextStyle = (TDescriptorSource *)CFDictionaryGetValue(v21, CFSTR("name"))) != 0))
    {

      goto LABEL_29;
    }
    atomic_load((unint64_t *)a5 + 1);
    v22 = (const __CFDictionary *)atomic_load((unint64_t *)a5 + 1);
    if (v22)
    {
      FontNameForTextStyle = (TDescriptorSource *)CFDictionaryGetValue(v22, CFSTR("NSFontNameAttribute"));

      if (FontNameForTextStyle)
        goto LABEL_29;
    }
    else
    {

    }
  }
  if ((*((_DWORD *)a5 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(a5, 0, 0.0);
  v23 = (unint64_t *)atomic_load((unint64_t *)a5 + 4);
  if (!v23)
    return 0;
  if ((*(unsigned int (**)(unint64_t *))(*v23 + 16))(v23) != 1414743620)
    return 0;
  FontNameForTextStyle = (TDescriptorSource *)atomic_load(v23 + 12);
  if (!FontNameForTextStyle)
    return 0;
LABEL_29:
  v24 = (const __CFString *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 160))(this);
  result = (uint64_t)TDescriptorSource::FindFontNameForNameAndTrait(FontNameForTextStyle, v24, a3, a4);
  if (!result)
    return result;
  v26 = (__CFString *)result;
  v27 = (__CFDictionary *)atomic_load((unint64_t *)a2);
  CFDictionarySetValue(v27, CFSTR("NSFontNameAttribute"), v26);
  v30 = TDescriptorSource::TextStyleForUIFontName((TDescriptorSource *)v26, v28, v29);
  if (!v30)
    goto LABEL_75;
  v31 = (const void *)v30;
  v32 = (__CFDictionary *)atomic_load((unint64_t *)a2);
  CFDictionarySetValue(v32, CFSTR("NSCTFontUIUsageAttribute"), v31);
  v83 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontTextStyleTraitsAttribute"), 56, &v82);
  do
    v33 = (void *)__ldaxr((unint64_t *)&v82);
  while (__stlxr(0, (unint64_t *)&v82));
  v83 = v33;

  if ((a4 & 2) != 0)
  {
    v35 = (void *)atomic_load((unint64_t *)&v83);
    v36 = v35;
    v37 = v36;
    if (v36)
      v34 = CFDictionaryContainsKey(v36, CFSTR("NSCTFontWeightTrait")) != 0;
    else
      v34 = 0;

  }
  else
  {
    v34 = 0;
  }
  if ((a4 & 0x60) != 0)
  {
    v38 = (void *)atomic_load((unint64_t *)&v83);
    v39 = v38;
    v40 = v39;
    if (v39)
      v41 = CFDictionaryContainsKey(v39, CFSTR("NSCTFontProportionTrait")) != 0;
    else
      v41 = 0;

  }
  else
  {
    v41 = 0;
  }
  if (v34 || v41)
  {
    v82 = (id)0xAAAAAAAAAAAAAAAALL;
    v42 = (const __CFDictionary *)atomic_load((unint64_t *)&v83);
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v82, v42);
    if (v34)
    {
      v43 = (__CFDictionary *)atomic_load((unint64_t *)&v82);
      CFDictionaryRemoveValue(v43, CFSTR("NSCTFontWeightTrait"));
    }
    if (v41)
    {
      v44 = (__CFDictionary *)atomic_load((unint64_t *)&v82);
      CFDictionaryRemoveValue(v44, CFSTR("NSCTFontProportionTrait"));
    }
    v45 = (void *)atomic_load((unint64_t *)&v82);
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v83, v45);

  }
  valuePtr = 0;
  v46 = (void *)atomic_load((unint64_t *)&v83);
  v47 = v46;
  if (v47)
  {
    v48 = v47;
    Value = (const __CFNumber *)CFDictionaryGetValue(v47, CFSTR("NSCTFontSymbolicTrait"));

    if (Value)
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if ((a4 & 1) == 0)
      goto LABEL_56;
LABEL_58:
    v50 = (a3 & 1) != 0 && CFStringFind(v26, CFSTR("Italic"), 0).location == -1;
    goto LABEL_61;
  }

  if ((a4 & 1) != 0)
    goto LABEL_58;
LABEL_56:
  v50 = valuePtr;
LABEL_61:
  if (v50 != valuePtr)
  {
    v51 = (const __CFDictionary *)atomic_load((unint64_t *)&v83);
    CreateTraitsWithSymbolicTraits(v51, v50, v50 | a4, &v82);
    do
      v52 = __ldaxr((unint64_t *)&v82);
    while (__stlxr(0, (unint64_t *)&v82));
    do
      v53 = (void *)__ldaxr((unint64_t *)&v83);
    while (__stlxr(v52, (unint64_t *)&v83));

  }
  v54 = (void *)atomic_load((unint64_t *)&v83);
  v55 = v54;
  if (v55)
  {
    v56 = v55;
    Count = CFDictionaryGetCount(v55);

    if (Count)
    {
      v58 = (__CFDictionary *)atomic_load((unint64_t *)a2);
      v59 = (const void *)atomic_load((unint64_t *)&v83);
      CFDictionarySetValue(v58, CFSTR("NSCTFontTraitsAttribute"), v59);
    }
  }
  else
  {

  }
  TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontTextStylePlatformAttribute"), 55, &v82);
  do
    v60 = (void *)__ldaxr((unint64_t *)&v82);
  while (__stlxr(0, (unint64_t *)&v82));

  if (v60)
  {
    v61 = (__CFDictionary *)atomic_load((unint64_t *)a2);
    CFDictionarySetValue(v61, CFSTR("NSCTFontTextStylePlatformAttribute"), v60);
  }

LABEL_75:
  TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontOpticalSizeAttribute"), 9, &v83);
  do
    v62 = (void *)__ldaxr((unint64_t *)&v83);
  while (__stlxr(0, (unint64_t *)&v83));

  if (v62)
  {
    v63 = (__CFDictionary *)atomic_load((unint64_t *)a2);
    CFDictionarySetValue(v63, CFSTR("NSCTFontOpticalSizeAttribute"), v62);
  }
  v83 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttribute(a5, CFSTR("NSFontSizeAttribute"), 8, &v82);
  do
    v64 = (void *)__ldaxr((unint64_t *)&v82);
  while (__stlxr(0, (unint64_t *)&v82));
  v83 = v64;

  TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontSizeCategoryAttribute"), 47, &v82);
  do
    v65 = (void *)__ldaxr((unint64_t *)&v82);
  while (__stlxr(0, (unint64_t *)&v82));

  if (v65)
  {
    v66 = (__CFDictionary *)atomic_load((unint64_t *)a2);
    CFDictionarySetValue(v66, CFSTR("NSCTFontSizeCategoryAttribute"), v65);
    v67 = atomic_load((unint64_t *)&v83);
    if ((a3 & 0x40) != 0 || !v67)
    {
      TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontTextStylePlatformAttribute"), 55, &v82);
      do
        v68 = (void *)__ldaxr((unint64_t *)&v82);
      while (__stlxr(0, (unint64_t *)&v82));

      v69 = v65;
      LODWORD(v82) = -1431655766;
      CFNumberGetValue(v69, kCFNumberIntType, &v82);
      v70 = v82;
      if (v68)
      {
        v71 = v68;
        LODWORD(v82) = -1431655766;
        CFNumberGetValue(v71, kCFNumberIntType, &v82);
        v72 = TDescriptorSource::MapTextStyleSizeCategory((TDescriptorSource *)v26, v70, (uint64_t *)v82, 0, 0, 0, 0);

      }
      else
      {
        v72 = TDescriptorSource::MapTextStyleSizeCategory((TDescriptorSource *)v26, v82, (uint64_t *)0xFFFFFFFFLL, 0, 0, 0, 0);
      }

      TCFNumber::TCFNumber<double>((unint64_t *)&v82, v72);
      do
        v73 = __ldaxr((unint64_t *)&v82);
      while (__stlxr(0, (unint64_t *)&v82));
      do
        v74 = (void *)__ldaxr((unint64_t *)&v83);
      while (__stlxr(v73, (unint64_t *)&v83));

    }
  }
  if (atomic_load((unint64_t *)&v83))
  {
    v76 = (__CFDictionary *)atomic_load((unint64_t *)a2);
    v77 = (const void *)atomic_load((unint64_t *)&v83);
    CFDictionarySetValue(v76, CFSTR("NSFontSizeAttribute"), v77);
  }
  v82 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttribute(a5, CFSTR("NSCTFontFeatureSettingsAttribute"), 20, &v82);
  if (atomic_load((unint64_t *)&v82))
  {
    v79 = (__CFDictionary *)atomic_load((unint64_t *)a2);
    v80 = (const void *)atomic_load((unint64_t *)&v82);
    CFDictionarySetValue(v79, CFSTR("NSCTFontFeatureSettingsAttribute"), v80);
  }

  return 1;
}

void TTenuousComponentFont::CopyAttribute(TTenuousComponentFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFString *v6;
  void *v7;
  unint64_t v8;
  id v9;
  unint64_t v10;
  void *ComponentAttribute;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  __CFString *v15;
  unint64_t *v16;
  __int128 v18;
  __CFString *v19;
  void **p_isa;
  void *v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  const void *Value;
  uint64_t v25;
  _QWORD *v26;
  const __CFDictionary *v27;
  unint64_t v28;
  const __CFDictionary *v29;
  void *v30;
  void *v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  char *v45;
  char *v46;
  void *v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int64x2_t v57;
  char *v58;
  void *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const __CFNumber *v63;
  void **v64;
  const __CFString *v65;
  void *v66;
  const __CFDictionary *v67;
  const __CFDictionary *v68;
  const void *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  char *v82;
  char *v83;
  void *v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int64x2_t v94;
  char *v95;
  unint64_t v96;
  int v98;
  void *v99;
  double valuePtr;
  int64x2_t v101;
  char *v102;
  _OWORD *v103;
  id v104[2];
  char *v105;
  _OWORD v106[15];
  _OWORD *v107;
  int64x2_t v108;
  char *v109;
  _OWORD v110[15];
  _OWORD *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (a2 > 14)
  {
    switch(a2)
    {
      case '*':
        v6 = CFSTR("NSCTFontUIUsageAttribute");
        goto LABEL_20;
      case '+':
      case ',':
      case '-':
      case '.':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
        goto LABEL_17;
      case '/':
        v6 = CFSTR("sizeCategory");
LABEL_20:
        ComponentAttribute = (void *)TComponentFont::GetComponentAttribute(this, v6);
        goto LABEL_151;
      case '7':
        v12 = (void *)atomic_load((unint64_t *)this + 90);
        v13 = v12;
        v14 = v13;
        if (!v13)
          goto LABEL_52;
        v15 = CFSTR("platform");
        goto LABEL_51;
      case '8':
        v16 = (unint64_t *)((char *)this + 776);
        if (atomic_load((unint64_t *)this + 97))
          goto LABEL_150;
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v110[14] = v18;
        v110[13] = v18;
        v110[12] = v18;
        v110[11] = v18;
        v110[10] = v18;
        v110[9] = v18;
        v110[8] = v18;
        v110[7] = v18;
        v110[6] = v18;
        v110[5] = v18;
        v110[4] = v18;
        v110[3] = v18;
        v110[2] = v18;
        v110[1] = v18;
        v110[0] = v18;
        v108 = 0uLL;
        v109 = 0;
        v111 = v110;
        v106[14] = v18;
        v106[13] = v18;
        v106[12] = v18;
        v106[11] = v18;
        v106[10] = v18;
        v106[9] = v18;
        v106[8] = v18;
        v106[7] = v18;
        v106[6] = v18;
        v106[5] = v18;
        v106[4] = v18;
        v106[3] = v18;
        v106[2] = v18;
        v106[1] = v18;
        v106[0] = v18;
        v104[1] = 0;
        v105 = 0;
        v104[0] = 0;
        v107 = v106;
        if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 856))(this) & 1) != 0
          || (*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 848))(this))
        {
          v19 = (__CFString *)(*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 536))(this);
          if (v19)
          {
            p_isa = &v19->isa;
            if (v19 != CFSTR("NSCTFontUIFontDesignDefault")
              && (!CFSTR("NSCTFontUIFontDesignDefault") || !CFEqual(v19, CFSTR("NSCTFontUIFontDesignDefault"))))
            {
              std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)&v108, &kCTFontUIFontDesignTrait);
              valuePtr = *(double *)&p_isa;
              std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)v104, &valuePtr);
            }
          }
        }
        v21 = (void *)atomic_load((unint64_t *)this + 90);
        v22 = v21;
        if (v22)
        {
          v23 = v22;
          Value = CFDictionaryGetValue(v22, CFSTR("weight"));

          if (Value)
          {
            v25 = v108.i64[1];
            if (v108.i64[1] >= (unint64_t)v109)
            {
              v35 = (v108.i64[1] - v108.i64[0]) >> 3;
              if ((unint64_t)(v35 + 1) >> 61)
                goto LABEL_153;
              v36 = (uint64_t)&v109[-v108.i64[0]] >> 2;
              if (v36 <= v35 + 1)
                v36 = v35 + 1;
              if ((unint64_t)&v109[-v108.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v36;
              v103 = v110;
              if (v37)
                v38 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v110, v37);
              else
                v38 = 0;
              v39 = &v38[8 * v35];
              v40 = &v38[8 * v37];
              v102 = v40;
              *(_QWORD *)v39 = CFSTR("NSCTFontWeightTrait");
              v26 = v39 + 8;
              v101.i64[1] = (uint64_t)(v39 + 8);
              v41 = v108.i64[1];
              v42 = v108.i64[0];
              if (v108.i64[1] == v108.i64[0])
              {
                v44 = vdupq_n_s64(v108.u64[1]);
              }
              else
              {
                do
                {
                  v43 = *(_QWORD *)(v41 - 8);
                  v41 -= 8;
                  *((_QWORD *)v39 - 1) = v43;
                  v39 -= 8;
                }
                while (v41 != v42);
                v44 = v108;
                v26 = (_QWORD *)v101.i64[1];
                v40 = v102;
              }
              v108.i64[0] = (uint64_t)v39;
              v108.i64[1] = (uint64_t)v26;
              v101 = v44;
              v45 = v109;
              v109 = v40;
              v102 = v45;
              valuePtr = *(double *)v44.i64;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&valuePtr);
            }
            else
            {
              *(_QWORD *)v108.i64[1] = CFSTR("NSCTFontWeightTrait");
              v26 = (_QWORD *)(v25 + 8);
            }
            v108.i64[1] = (uint64_t)v26;
            v46 = (char *)v104[1];
            if (v104[1] >= v105)
            {
              v48 = ((char *)v104[1] - (char *)v104[0]) >> 3;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_153;
              v49 = (v105 - (char *)v104[0]) >> 2;
              if (v49 <= v48 + 1)
                v49 = v48 + 1;
              if ((unint64_t)(v105 - (char *)v104[0]) >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              v103 = v106;
              if (v50)
                v51 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v106, v50);
              else
                v51 = 0;
              v52 = &v51[8 * v48];
              v53 = &v51[8 * v50];
              v102 = v53;
              *(_QWORD *)v52 = Value;
              v47 = v52 + 8;
              v101.i64[1] = (uint64_t)(v52 + 8);
              v55 = (char *)v104[0];
              v54 = (char *)v104[1];
              if (v104[1] == v104[0])
              {
                v57 = vdupq_n_s64((unint64_t)v104[1]);
              }
              else
              {
                do
                {
                  v56 = *((_QWORD *)v54 - 1);
                  v54 -= 8;
                  *((_QWORD *)v52 - 1) = v56;
                  v52 -= 8;
                }
                while (v54 != v55);
                v57 = *(int64x2_t *)v104;
                v47 = (void *)v101.i64[1];
                v53 = v102;
              }
              v104[0] = v52;
              v104[1] = v47;
              v101 = v57;
              v58 = v105;
              v105 = v53;
              v102 = v58;
              valuePtr = *(double *)v57.i64;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&valuePtr);
            }
            else
            {
              *(_QWORD *)v104[1] = Value;
              v47 = v46 + 8;
            }
            v104[1] = v47;
          }
        }
        else
        {

        }
        v59 = (void *)atomic_load((unint64_t *)this + 90);
        v60 = v59;
        if (v60)
        {
          v61 = v60;
          v62 = (const __CFDictionary *)CFDictionaryGetValue(v60, CFSTR("FontMetrics"));

          if (v62)
          {
            v63 = (const __CFNumber *)CFDictionaryGetValue(v62, CFSTR("width"));
            if (v63)
            {
              v64 = (void **)v63;
              valuePtr = NAN;
              CFNumberGetValue(v63, kCFNumberDoubleType, &valuePtr);
              if (valuePtr != 0.0)
              {
                std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)&v108, &kCTFontWidthTrait);
                valuePtr = *(double *)&v64;
                std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)v104, &valuePtr);
              }
            }
            v65 = (const __CFString *)TComponentFont::GetComponentAttribute(this, CFSTR("NSCTFontUIUsageAttribute"));
            if (v65
              && CFStringFind(v65, CFSTR("Italic"), 0).location == -1
              && CFDictionaryGetValue(v62, CFSTR("italicAngle")))
            {
              std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)&v108, &kCTFontSymbolicTrait);
              valuePtr = COERCE_DOUBLE(&unk_1E16170F8);
              std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100]((uint64_t)v104, &valuePtr);
            }
          }
        }
        else
        {

        }
        v66 = (void *)atomic_load((unint64_t *)this + 90);
        v67 = v66;
        if (v67)
        {
          v68 = v67;
          v69 = CFDictionaryGetValue(v67, CFSTR("grade"));

          if (v69)
          {
            v70 = v108.i64[1];
            if (v108.i64[1] >= (unint64_t)v109)
            {
              v72 = (v108.i64[1] - v108.i64[0]) >> 3;
              if ((unint64_t)(v72 + 1) >> 61)
                goto LABEL_153;
              v73 = (uint64_t)&v109[-v108.i64[0]] >> 2;
              if (v73 <= v72 + 1)
                v73 = v72 + 1;
              if ((unint64_t)&v109[-v108.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              v103 = v110;
              if (v74)
                v75 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v110, v74);
              else
                v75 = 0;
              v76 = &v75[8 * v72];
              v77 = &v75[8 * v74];
              v102 = v77;
              *(_QWORD *)v76 = CFSTR("NSCTFontGradeTrait");
              v71 = v76 + 8;
              v101.i64[1] = (uint64_t)(v76 + 8);
              v78 = v108.i64[1];
              v79 = v108.i64[0];
              if (v108.i64[1] == v108.i64[0])
              {
                v81 = vdupq_n_s64(v108.u64[1]);
              }
              else
              {
                do
                {
                  v80 = *(_QWORD *)(v78 - 8);
                  v78 -= 8;
                  *((_QWORD *)v76 - 1) = v80;
                  v76 -= 8;
                }
                while (v78 != v79);
                v81 = v108;
                v71 = (_QWORD *)v101.i64[1];
                v77 = v102;
              }
              v108.i64[0] = (uint64_t)v76;
              v108.i64[1] = (uint64_t)v71;
              v101 = v81;
              v82 = v109;
              v109 = v77;
              v102 = v82;
              valuePtr = *(double *)v81.i64;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&valuePtr);
            }
            else
            {
              *(_QWORD *)v108.i64[1] = CFSTR("NSCTFontGradeTrait");
              v71 = (_QWORD *)(v70 + 8);
            }
            v108.i64[1] = (uint64_t)v71;
            v83 = (char *)v104[1];
            if (v104[1] < v105)
            {
              *(_QWORD *)v104[1] = v69;
              v84 = v83 + 8;
LABEL_136:
              v104[1] = v84;
              goto LABEL_137;
            }
            v85 = ((char *)v104[1] - (char *)v104[0]) >> 3;
            if (!((unint64_t)(v85 + 1) >> 61))
            {
              v86 = (v105 - (char *)v104[0]) >> 2;
              if (v86 <= v85 + 1)
                v86 = v85 + 1;
              if ((unint64_t)(v105 - (char *)v104[0]) >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              v103 = v106;
              if (v87)
                v88 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v106, v87);
              else
                v88 = 0;
              v89 = &v88[8 * v85];
              v90 = &v88[8 * v87];
              v102 = v90;
              *(_QWORD *)v89 = v69;
              v84 = v89 + 8;
              v101.i64[1] = (uint64_t)(v89 + 8);
              v92 = (char *)v104[0];
              v91 = (char *)v104[1];
              if (v104[1] == v104[0])
              {
                v94 = vdupq_n_s64((unint64_t)v104[1]);
              }
              else
              {
                do
                {
                  v93 = *((_QWORD *)v91 - 1);
                  v91 -= 8;
                  *((_QWORD *)v89 - 1) = v93;
                  v89 -= 8;
                }
                while (v91 != v92);
                v94 = *(int64x2_t *)v104;
                v84 = (void *)v101.i64[1];
                v90 = v102;
              }
              v104[0] = v89;
              v104[1] = v84;
              v101 = v94;
              v95 = v105;
              v105 = v90;
              v102 = v95;
              valuePtr = *(double *)v94.i64;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&valuePtr);
              goto LABEL_136;
            }
LABEL_153:
            abort();
          }
        }
        else
        {

        }
LABEL_137:
        if (v108.i64[0] != v108.i64[1])
        {
          valuePtr = COERCE_DOUBLE(CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v108.i64[0], (const void **)v104[0], (v108.i64[1] - v108.i64[0]) >> 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]));
          do
            v96 = __ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          do
          {
            if (__ldaxr(v16))
            {
              v98 = 0;
              __clrex();
              goto LABEL_145;
            }
          }
          while (__stlxr(v96, v16));
          v98 = 1;
LABEL_145:
          if (v98)
            v99 = 0;
          else
            v99 = (void *)v96;

        }
        valuePtr = COERCE_DOUBLE(v104);
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
        v104[0] = &v108;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v104);
LABEL_150:
        ComponentAttribute = (void *)atomic_load(v16);
LABEL_151:
        *a3 = (unint64_t)ComponentAttribute;
        return;
      case '9':
        v27 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
        if (v27)
          v27 = (const __CFDictionary *)CFDictionaryGetValue(v27, CFSTR("languageAwareLineHeightRatio"));
        v108.i64[0] = (uint64_t)v27;
        do
          v28 = __ldaxr((unint64_t *)&v108);
        while (__stlxr(0, (unint64_t *)&v108));
        goto LABEL_44;
      case ':':
        v29 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
        if (v29)
          v29 = (const __CFDictionary *)CFDictionaryGetValue(v29, CFSTR("lineSpacingOverride"));
        v108.i64[0] = (uint64_t)v29;
        do
          v28 = __ldaxr((unint64_t *)&v108);
        while (__stlxr(0, (unint64_t *)&v108));
LABEL_44:
        *a3 = v28;
        goto LABEL_45;
      case ';':
        v30 = (void *)atomic_load((unint64_t *)this + 90);
        v13 = v30;
        v14 = v13;
        if (!v13)
          goto LABEL_52;
        v15 = CFSTR("legibilityWeight");
        goto LABEL_51;
      case '<':
        v31 = (void *)atomic_load((unint64_t *)this + 90);
        v13 = v31;
        v14 = v13;
        if (!v13)
          goto LABEL_52;
        v15 = CFSTR("ignoreLegibilityWeight");
LABEL_51:
        v13 = (const __CFDictionary *)CFDictionaryGetValue(v14, v15);
LABEL_52:
        *a3 = (unint64_t)v13;

        return;
      case '=':
        if ((*((_BYTE *)this + 712) & 4) == 0 || *((_BYTE *)this + 792))
          goto LABEL_55;
        v108.i64[0] = 0xAAAAAAAAAAAAAAAALL;
        TTenuousComponentFont::CopyDefaultVariation((TTenuousComponentFont *)&v108, (uint64_t)this);
        v32 = (const __CFDictionary *)atomic_load((unint64_t *)this + 96);
        v33 = (const __CFDictionary *)atomic_load((unint64_t *)&v108);
        CreateCodableVariationFromDefaultVariation(v32, v33, (unint64_t *)v104);
        do
          v34 = __ldaxr((unint64_t *)v104);
        while (__stlxr(0, (unint64_t *)v104));
        *a3 = v34;

        goto LABEL_45;
      default:
        if (a2 != 15)
          goto LABEL_17;
        goto LABEL_18;
    }
  }
  if (a2 == 5)
  {
    v108.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(int64x2_t *__return_ptr, TTenuousComponentFont *))(*(_QWORD *)this + 152))(&v108, this);
    do
      v7 = (void *)__ldaxr((unint64_t *)&v108);
    while (__stlxr(0, (unint64_t *)&v108));
    v104[0] = v7;

    do
      v8 = __ldaxr((unint64_t *)v104);
    while (__stlxr(0, (unint64_t *)v104));
    *a3 = v8;
    v9 = v104[0];
LABEL_46:

    return;
  }
  if (a2 == 7)
  {
    (*(void (**)(int64x2_t *__return_ptr, TTenuousComponentFont *))(*(_QWORD *)this + 112))(&v108, this);
    do
      v10 = __ldaxr((unint64_t *)&v108);
    while (__stlxr(0, (unint64_t *)&v108));
    *a3 = v10;
LABEL_45:
    v9 = (id)v108.i64[0];
    goto LABEL_46;
  }
  if (a2 != 12)
  {
LABEL_17:
    if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this) & 1) != 0)
    {
LABEL_18:
      TBaseFont::CopyAttribute(this, a2, a3);
      return;
    }
  }
LABEL_55:
  *a3 = 0;
}

id TDescriptor::CopyAttribute@<X0>(TDescriptor *this@<X0>, const __CFString *key@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  const __CFDictionary *v7;
  void *Value;
  id result;

  atomic_load((unint64_t *)this + 1);
  v7 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
  if (v7 && (Value = (void *)CFDictionaryGetValue(v7, key)) != 0)
  {
    result = Value;
    *a4 = result;
  }
  else
  {
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(this, 0, 0.0);
    result = (id)atomic_load((unint64_t *)this + 4);
    if (result)
      return (id)(*(uint64_t (**)(id, uint64_t))(*(_QWORD *)result + 40))(result, a3);
    else
      *a4 = 0;
  }
  return result;
}

uint64_t TComponentFont::IsTextStyleFont(TComponentFont *this)
{
  return (*((unsigned __int8 *)this + 713) >> 3) & 1;
}

unint64_t TTenuousComponentFont::Substantiate(TTenuousComponentFont *this)
{
  os_unfair_lock_s *v2;
  unint64_t *v3;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  const void *ComponentAttribute;
  void *v10;
  TDescriptor **v11;
  TDescriptor **v12;
  TDescriptor *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  unint64_t v21;
  void *v22;
  id v25;
  __CFString v26;

  v2 = (os_unfair_lock_s *)((char *)this + 796);
  os_unfair_lock_lock_with_options();
  v3 = (unint64_t *)((char *)this + 80);
  if (atomic_load((unint64_t *)this + 10))
    goto LABEL_2;
  v6 = (unsigned __int8 *)this + 800;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(1u, v6));
  if ((v7 & 1) != 0)
  {
LABEL_27:
    v5 = 0;
    goto LABEL_28;
  }
  v5 = atomic_load((unint64_t *)this + 12);
  if (!v5)
    goto LABEL_28;
  ComponentAttribute = TComponentFont::GetComponentAttribute(this, CFSTR("url"));
  if (!ComponentAttribute)
  {
    v17 = (unint64_t *)((char *)this + 88);
    v18 = GSFontCopyFontFilePath();
    do
      v19 = (void *)__ldaxr(v17);
    while (__stlxr(v18, v17));

    if (atomic_load(v17))
    {
      atomic_load(v17);
      v26.isa = (void *)CGFontURLCreate();
      do
        v21 = __ldaxr((unint64_t *)&v26);
      while (__stlxr(0, (unint64_t *)&v26));
      do
        v22 = (void *)__ldaxr(v3);
      while (__stlxr(v21, v3));

    }
    if (atomic_load(v3))
      goto LABEL_2;
    CFLog();
    goto LABEL_27;
  }
  v26.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  CopyComponentFontDescriptorWithBaseSystemFallback(&v26, (const __CFURL *)v5, (uint64_t)ComponentAttribute, 1024);
  if (!atomic_load((unint64_t *)&v26))
  {
    CFLog();
LABEL_26:

    goto LABEL_27;
  }
  v10 = (void *)atomic_load((unint64_t *)&v26);
  v11 = v10;
  v12 = v11;
  v13 = v11[5];
  if ((*((_DWORD *)v13 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v11[5], 0, 0.0);
  v14 = atomic_load((unint64_t *)v13 + 4);

  if (!v14)
    goto LABEL_26;
  (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v14 + 200))(&v25, v14);
  do
    v15 = __ldaxr((unint64_t *)&v25);
  while (__stlxr(0, (unint64_t *)&v25));
  do
    v16 = (void *)__ldaxr(v3);
  while (__stlxr(v15, v3));

LABEL_2:
  v5 = 1;
LABEL_28:
  os_unfair_lock_unlock(v2);
  return v5;
}

unsigned int *TComponentFont::GetSymbolicTraitsInternal(TComponentFont *this)
{
  unsigned int *result;

  if ((*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 840))(this))
    return (unsigned int *)*((unsigned int *)this + 163);
  result = (unsigned int *)atomic_load((unint64_t *)this + 30);
  if (result)
    return (unsigned int *)*result;
  result = (unsigned int *)TBaseFont::CreateTraitsValues(this);
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t TComponentFont::IsOpticalFont(TComponentFont *this)
{
  return (*((unsigned __int8 *)this + 712) >> 4) & 1;
}

void TBaseFont::CopyAttribute(TBaseFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 IsUserInstalled;
  id *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  id *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  id v49;

  *a3 = 0;
  switch(a2)
  {
    case 0:
      return;
    case 1:
    case 34:
      v4 = (void *)atomic_load((unint64_t *)this + 12);
      v49 = v4;
      do
        v5 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v5, a3));
      goto LABEL_137;
    case 2:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *))(*(_QWORD *)this + 72))(&v49, this, CFSTR("CTFontFullName"));
      do
        v23 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v23, a3));
      goto LABEL_137;
    case 3:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *))(*(_QWORD *)this + 72))(&v49, this, CFSTR("CTFontFamilyName"));
      do
        v24 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v24, a3));
      goto LABEL_137;
    case 4:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *))(*(_QWORD *)this + 72))(&v49, this, CFSTR("CTFontSubFamilyName"));
      do
        v25 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v25, a3));
      goto LABEL_137;
    case 5:
      v49 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 152))(&v49);
      do
        v26 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      v48 = (void *)v26;

      do
        v27 = __ldaxr((unint64_t *)&v48);
      while (__stlxr(0, (unint64_t *)&v48));
      do
        v28 = (void *)__ldaxr(a3);
      while (__stlxr(v27, a3));

      v29 = v48;
      goto LABEL_138;
    case 6:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 120))(&v49);
      do
        v30 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v30, a3));
      goto LABEL_137;
    case 7:
    case 61:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 112))(&v49);
      do
        v8 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v8, a3));
      goto LABEL_137;
    case 12:
    case 13:
      TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontMatrixAttribute"), &v49);
      do
        v9 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v9, a3));
      goto LABEL_137;
    case 15:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 184))(&v49);
      do
        v31 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v31, a3));
      goto LABEL_137;
    case 16:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 336))(&v49);
      do
        v32 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v32, a3));
      goto LABEL_137;
    case 19:
      (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 136))(&v49, this, 1);
      do
        v33 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v33, a3));
      goto LABEL_137;
    case 23:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 368))(&v49);
      do
        v34 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v34, a3));
      goto LABEL_137;
    case 24:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 504))(&v49);
      do
        v10 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v10, a3));
      goto LABEL_137;
    case 25:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 192))(&v49);
      do
        v35 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v35, a3));
      goto LABEL_137;
    case 26:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 216))(&v49);
      do
        v36 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v36, a3));
      goto LABEL_137;
    case 27:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 224))(&v49);
      do
        v37 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v37, a3));
      goto LABEL_137;
    case 28:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 232))(&v49);
      do
        v11 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v11, a3));
      goto LABEL_137;
    case 29:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 248))(&v49);
      do
        v38 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v38, a3));
      goto LABEL_137;
    case 30:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 264))(&v49);
      do
        v39 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v39, a3));
      goto LABEL_137;
    case 31:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 280))(&v49);
      do
        v40 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v40, a3));
      goto LABEL_137;
    case 32:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 296))(&v49);
      do
        v41 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v41, a3));
      goto LABEL_137;
    case 33:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v49);
      do
        v42 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v42, a3));
      goto LABEL_137;
    case 35:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 312))(&v49);
      do
        v12 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v12, a3));
      goto LABEL_137;
    case 36:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 328))(&v49);
      do
        v13 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v13, a3));
      goto LABEL_137;
    case 44:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 432))(&v49);
      do
        v43 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v43, a3));
      goto LABEL_137;
    case 45:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 440))(&v49);
      do
        v44 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v44, a3));
      goto LABEL_137;
    case 46:
      (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 448))(&v49);
      do
        v45 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v45, a3));
      goto LABEL_137;
    case 50:
      TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontMorxConversionResultAttribute"), &v49);
      do
        v46 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v46, a3));
      goto LABEL_137;
    case 53:
      IsUserInstalled = TBaseFont::IsUserInstalled(this);
      v15 = (id *)MEMORY[0x1E0C9AE50];
      if (!IsUserInstalled)
        v15 = (id *)MEMORY[0x1E0C9AE40];
      v49 = *v15;
      do
        v16 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v16, a3));
      goto LABEL_137;
    case 62:
      if ((*((_DWORD *)this + 46) & 0x800) == 0)
      {
        v17 = (unsigned int *)((char *)this + 184);
        atomic_load((unint64_t *)this + 12);
        v18 = (unsigned int *)((char *)this + 180);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19, v18));
        do
          v20 = __ldxr(v17);
        while (__stxr(v20 | 0x800, v17));
      }
      v21 = (id *)MEMORY[0x1E0C9AE40];
      if ((*((_DWORD *)this + 45) & 0x800) != 0)
        v21 = (id *)MEMORY[0x1E0C9AE50];
      v49 = *v21;
      do
        v22 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v22, a3));
      goto LABEL_137;
    case 63:
      TBaseFont::CopyWeightAxisValue(this, (unint64_t *)&v49);
      do
        v47 = __ldaxr((unint64_t *)&v49);
      while (__stlxr(0, (unint64_t *)&v49));
      do
        v6 = (void *)__ldaxr(a3);
      while (__stlxr(v47, a3));
LABEL_137:

      v29 = v49;
LABEL_138:

      break;
    default:
      do
        v7 = (void *)__ldaxr(a3);
      while (__stlxr(0, a3));

      break;
  }
}

const __CFDictionary *TComponentFont::GetDesignUITrait(TComponentFont *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("NSCTFontUIFontDesignTrait"));
  return result;
}

__CFString *TDescriptorSource::FindFontNameForNameAndTrait(TDescriptorSource *this, const __CFString *a2, uint64_t *a3, int a4)
{
  int v5;
  int v6;
  int v8;
  __CFString *result;
  void *isa;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  int v27;
  BOOL v28;
  int v29;
  __CFString v30;
  const __CFString *v31;
  uint64_t v32;

  v5 = (int)a3;
  v6 = (int)a2;
  v32 = *MEMORY[0x1E0C80C00];
  v30.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  v8 = TDescriptorSource::StashIndexForFontName(this, &v30, a3);
  result = 0;
  if (!v8)
    return result;
  isa = v30.isa;
  if ((uint64_t)v30.isa > 295)
    return result;
  if ((v5 & 0x40) != 0)
  {
    v11 = 0;
    while ((void *)kCondensedMapping[v11] != v30.isa)
    {
      v11 += 44;
      if (v11 == 220)
        goto LABEL_7;
    }
    v13 = &kCondensedMapping[v11];
LABEL_13:
    result = (__CFString *)v13[2];
    if (result)
      return result;
    goto LABEL_14;
  }
LABEL_7:
  if ((unint64_t)v30.isa - 151 >= 5)
    v12 = -1;
  else
    v12 = LODWORD(v30.isa) - 151;
  if ((v12 & 0x80000000) == 0)
  {
    v13 = &kCondensedMapping[44 * v12];
    goto LABEL_13;
  }
LABEL_14:
  if (v30.isa <= (void *)0x96)
  {
    v15 = (char *)&kTypeHierarchySpecPhonePad + 336 * (uint64_t)v30.isa;
    v16 = (v15[16] & 0xE0) != 0;
    v18 = *((_DWORD *)v15 + 2);
    v17 = *((_DWORD *)v15 + 3);
    v6 = v18 & 1 | (2 * v16);
    if (v17 == 1)
    {
      v6 |= 0x8000u;
    }
    else if (v17 == -1)
    {
      v6 |= 0x10000u;
    }
  }
  else
  {
    v14 = (unint64_t)v30.isa - 156;
    if (v30.isa >= (void *)0x9C)
    {
      if (v14 < 0x16 || (v14 = (unint64_t)v30.isa - 198, (unint64_t)v30.isa - 198 <= 0x13))
        v6 = kOtherSpec[10 * v14 + 2] & 1 | (2 * (kOtherSpec[10 * v14 + 1] > 5));
    }
  }
  v19 = v6 & ~a4;
  v20 = a4 & v5;
  v21 = v19 | a4 & v5;
  switch((unint64_t)v30.isa)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7CuLL:
    case 0x7DuLL:
    case 0x7EuLL:
      return (__CFString *)MapTightLooseTraits(v21, 0x37u, 0x64u, 0xEBu, 0xECu, 0x38u, 0x65u, 0xEDu, 0xEEu, 0xEFu, 0xEFu, 0xF0u, 0xF0u);
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      if ((v21 & 0x8000) != 0)
      {
        v25 = CFSTR(".AppleSystemUIFaceShortItalicHeadline2");
        v26 = CFSTR(".AppleSystemUIFaceShortHeadline2");
      }
      else
      {
        v25 = CFSTR(".AppleSystemUIFaceItalicHeadline2");
        v26 = CFSTR(".AppleSystemUIFaceHeadline2");
      }
      goto LABEL_100;
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
      return (__CFString *)MapTightLooseTraits(v21, 0x3Eu, 0x40u, 0x3Du, 0x3Fu, 0x42u, 0x44u, 0x41u, 0x43u, 0x61u, 0x63u, 0x60u, 0x62u);
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
      return (__CFString *)MapTightTrait(v21, (v30.isa < (void *)0x19) & (0x1B00000u >> SLOBYTE(v30.isa)), 70, 71, 69, 73, 74, 72);
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
      return (__CFString *)MapTightTrait(v21, (v30.isa < (void *)0x1F) & (0x6C000000u >> SLOBYTE(v30.isa)), 76, 77, 75, 79, 80, 78);
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
      return (__CFString *)MapTightTrait(v21, (v30.isa < (void *)0x25) & (0x1B00000000uLL >> SLOBYTE(v30.isa)), 82, 83, 81, 85, 86, 84);
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
    case 0x89uLL:
    case 0x8AuLL:
      return (__CFString *)MapTightLooseTraits(v21, 0x58u, 0x59u, 0x57u, 0x133u, 0x5Bu, 0x5Cu, 0x5Au, 0x134u, 0x135u, 0x136u, 0x137u, 0x138u);
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x43uLL:
    case 0x8CuLL:
    case 0x8DuLL:
    case 0x8EuLL:
    case 0x8FuLL:
    case 0x90uLL:
      return (__CFString *)MapTightLooseTraits(v21, 0x5Eu, 0x5Fu, 0x5Du, 0x139u, 0x81u, 0x82u, 0x80u, 0x13Au, 0x13Bu, 0x13Cu, 0x13Du, 0x13Eu);
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
      return (__CFString *)MapTightLooseTraits(v21, 0x6Eu, 0x6Fu, 0x70u, 0x71u, 0x72u, 0x73u, 0x74u, 0x75u, 0x76u, 0x77u, 0x78u, 0x79u);
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x40uLL:
      return (__CFString *)MapTightTrait(v21, (v30.isa < (void *)0x40) & (0xD800000000000000 >> SLOBYTE(v30.isa)), 123, 124, 122, 126, 127, 125);
    case 0x44uLL:
    case 0x45uLL:
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4AuLL:
    case 0x4BuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x4EuLL:
    case 0x4FuLL:
      return (__CFString *)MapTightLooseTraits(v21, 0xB6u, 0xB7u, 0xB8u, 0xB9u, 0xBAu, 0xBBu, 0xBCu, 0xBDu, 0xBEu, 0xBFu, 0xC0u, 0xC1u);
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x53uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
      return (__CFString *)MapTightLooseTraits(v21, 0xC2u, 0xC3u, 0xC4u, 0xC5u, 0xC6u, 0xC7u, 0xC8u, 0xC9u, 0xCAu, 0xCBu, 0xCCu, 0xCDu);
    case 0x5CuLL:
    case 0x5DuLL:
    case 0x5EuLL:
    case 0x5FuLL:
    case 0x60uLL:
    case 0x61uLL:
    case 0x62uLL:
    case 0x63uLL:
    case 0x64uLL:
    case 0x65uLL:
    case 0x66uLL:
    case 0x67uLL:
      return (__CFString *)MapTightLooseTraits(v21, 0xCEu, 0xCFu, 0xD0u, 0xD1u, 0xD2u, 0xD3u, 0xD4u, 0xD5u, 0xD6u, 0xD7u, 0xD8u, 0xD9u);
    case 0x6AuLL:
    case 0x70uLL:
    case 0x71uLL:
    case 0x72uLL:
      *(_OWORD *)&v30.info = xmmword_184931370;
      return (__CFString *)TDescriptorSource::UIFontNameForUIType((TDescriptorSource *)*(unsigned int *)((unint64_t)&v30.info | (4 * (v21 & 3))));
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x76uLL:
    case 0x77uLL:
    case 0x78uLL:
      return (__CFString *)MapTightLooseTraits(v21, 0xE5u, 0xE5u, 0xE6u, 0xE6u, 0xE7u, 0xE7u, 0xE8u, 0xE8u, 0xE9u, 0xE9u, 0xEAu, 0xEAu);
    case 0x7FuLL:
    case 0x80uLL:
      v25 = CFSTR(".AppleSystemUIFaceEmphasizedCaption3");
      v26 = CFSTR(".AppleSystemUIFaceCaption3");
      goto LABEL_121;
    case 0x81uLL:
    case 0x82uLL:
    case 0x91uLL:
    case 0x92uLL:
      if ((v21 & 2) != 0)
      {
        v25 = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle");
        v26 = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle");
      }
      else
      {
        v25 = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle");
        v26 = CFSTR(".AppleSystemUIFaceExtraLargeTitle");
      }
      goto LABEL_100;
    case 0x83uLL:
    case 0x84uLL:
    case 0x93uLL:
    case 0x94uLL:
      if ((v21 & 2) != 0)
      {
        v25 = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle2");
        v26 = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle2");
      }
      else
      {
        v25 = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle2");
        v26 = CFSTR(".AppleSystemUIFaceExtraLargeTitle2");
      }
      goto LABEL_100;
    case 0x95uLL:
    case 0x96uLL:
      v25 = CFSTR(".AppleSystemUIFacePreferredSize-Bold");
      v26 = CFSTR(".AppleSystemUIFacePreferredSize-Regular");
LABEL_121:
      v28 = (v21 & 2) == 0;
      goto LABEL_101;
    case 0x9CuLL:
    case 0x9DuLL:
    case 0x9EuLL:
    case 0x9FuLL:
    case 0xA5uLL:
    case 0xADuLL:
      if ((v21 & 0x40) == 0)
        __asm { BR              X10 }
      goto LABEL_44;
    case 0xA0uLL:
    case 0xA8uLL:
LABEL_44:
      if ((v21 & 0x40) != 0)
        goto LABEL_48;
      v25 = CFSTR(".AppleSystemUIFontThinItalic");
      v26 = CFSTR(".AppleSystemUIFontThin");
      goto LABEL_100;
    case 0xA1uLL:
    case 0xA9uLL:
LABEL_48:
      if ((v21 & 0x40) != 0)
        goto LABEL_52;
      v25 = CFSTR(".AppleSystemUIFontLightItalic");
      v26 = CFSTR(".AppleSystemUIFontLight");
      goto LABEL_100;
    case 0xA2uLL:
    case 0xAAuLL:
LABEL_52:
      if ((v21 & 0x40) != 0)
        goto LABEL_56;
      v25 = CFSTR(".AppleSystemUIFontUltraLightItalic");
      v26 = CFSTR(".AppleSystemUIFontUltraLight");
      goto LABEL_100;
    case 0xA3uLL:
    case 0xABuLL:
LABEL_56:
      if ((v21 & 0x40) != 0)
        goto LABEL_60;
      v25 = CFSTR(".AppleSystemUIFontMediumItalic");
      v26 = CFSTR(".AppleSystemUIFontMedium");
      goto LABEL_100;
    case 0xA4uLL:
    case 0xACuLL:
LABEL_60:
      if ((v21 & 0x40) != 0)
        goto LABEL_64;
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFont");
      v30.data = CFSTR(".AppleSystemUIFontItalic");
      v22 = CFSTR(".AppleSystemUIFontDemi");
      v23 = CFSTR(".AppleSystemUIFontDemiItalic");
      goto LABEL_82;
    case 0xA6uLL:
    case 0xAEuLL:
LABEL_64:
      if ((v21 & 0x40) != 0)
        goto LABEL_68;
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFont");
      v30.data = CFSTR(".AppleSystemUIFontItalic");
      v22 = CFSTR(".AppleSystemUIFontHeavy");
      v23 = CFSTR(".AppleSystemUIFontHeavyItalic");
      goto LABEL_82;
    case 0xA7uLL:
    case 0xAFuLL:
LABEL_68:
      if ((v21 & 0x40) == 0)
      {
        v30.info = (uint64_t)CFSTR(".AppleSystemUIFont");
        v30.data = CFSTR(".AppleSystemUIFontItalic");
        v22 = CFSTR(".AppleSystemUIFontBlack");
        v23 = CFSTR(".AppleSystemUIFontBlackItalic");
        goto LABEL_82;
      }
      result = CFSTR(".AppleSystemUIFontCondensed-Thin");
      switch((unint64_t)v30.isa)
      {
        case 0x9DuLL:
        case 0xA5uLL:
          v25 = CFSTR(".AppleSystemUIFontCondensed-Bold");
          v26 = CFSTR(".AppleSystemUIFontCondensed-Regular");
          goto LABEL_121;
        case 0xA0uLL:
          return result;
        case 0xA1uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-Light");
          break;
        case 0xA2uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-UltraLight");
          break;
        case 0xA3uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-Medium");
          break;
        case 0xA4uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-Semibold");
          break;
        case 0xA6uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-Heavy");
          break;
        case 0xA7uLL:
          result = CFSTR(".AppleSystemUIFontCondensed-Black");
          break;
        default:
          goto LABEL_81;
      }
      break;
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB4uLL:
    case 0xB5uLL:
    case 0xBBuLL:
    case 0xC3uLL:
LABEL_81:
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCompact-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCompact-Italic");
      v22 = CFSTR(".AppleSystemUIFontCompact-Bold");
      v23 = CFSTR(".AppleSystemUIFontCompact-BoldItalic");
      goto LABEL_82;
    case 0xB6uLL:
      v25 = CFSTR(".AppleSystemUIFontCompact-ThinItalic");
      v26 = CFSTR(".AppleSystemUIFontCompact-Thin");
      goto LABEL_100;
    case 0xB7uLL:
      v25 = CFSTR(".AppleSystemUIFontCompact-LightItalic");
      v26 = CFSTR(".AppleSystemUIFontCompact-Light");
      goto LABEL_100;
    case 0xB8uLL:
      v25 = CFSTR(".AppleSystemUIFontCompact-UltraLightItalic");
      v26 = CFSTR(".AppleSystemUIFontCompact-UltraLight");
      goto LABEL_100;
    case 0xB9uLL:
      v25 = CFSTR(".AppleSystemUIFontCompact-MediumItalic");
      v26 = CFSTR(".AppleSystemUIFontCompact-Medium");
      goto LABEL_100;
    case 0xBAuLL:
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCompact-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCompact-Italic");
      v22 = CFSTR(".AppleSystemUIFontCompact-Semibold");
      v23 = CFSTR(".AppleSystemUIFontCompact-SemiboldItalic");
      goto LABEL_82;
    case 0xBCuLL:
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCompact-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCompact-Italic");
      v22 = CFSTR(".AppleSystemUIFontCompact-Heavy");
      v23 = CFSTR(".AppleSystemUIFontCompact-HeavyItalic");
      goto LABEL_82;
    case 0xBDuLL:
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCompact-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCompact-Italic");
      v22 = CFSTR(".AppleSystemUIFontCompact-Black");
      v23 = CFSTR(".AppleSystemUIFontCompact-BlackItalic");
      goto LABEL_82;
    case 0xC6uLL:
    case 0xC7uLL:
    case 0xC8uLL:
    case 0xC9uLL:
    case 0xCFuLL:
    case 0xD7uLL:
      if ((v21 & 0x40) != 0)
        goto LABEL_46;
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCore-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCore-Italic");
      v22 = CFSTR(".AppleSystemUIFontCore-Bold");
      v23 = CFSTR(".AppleSystemUIFontCore-BoldItalic");
      goto LABEL_82;
    case 0xCAuLL:
    case 0xD2uLL:
LABEL_46:
      if ((v21 & 0x40) != 0)
        goto LABEL_50;
      v25 = CFSTR(".AppleSystemUIFontCore-ThinItalic");
      v26 = CFSTR(".AppleSystemUIFontCore-Thin");
      goto LABEL_100;
    case 0xCBuLL:
    case 0xD3uLL:
LABEL_50:
      if ((v21 & 0x40) != 0)
        goto LABEL_54;
      v25 = CFSTR(".AppleSystemUIFontCore-LightItalic");
      v26 = CFSTR(".AppleSystemUIFontCore-Light");
      goto LABEL_100;
    case 0xCCuLL:
    case 0xD4uLL:
LABEL_54:
      if ((v21 & 0x40) != 0)
        goto LABEL_58;
      v25 = CFSTR(".AppleSystemUIFontCore-UltraLightItalic");
      v26 = CFSTR(".AppleSystemUIFontCore-UltraLight");
      goto LABEL_100;
    case 0xCDuLL:
    case 0xD5uLL:
LABEL_58:
      if ((v21 & 0x40) != 0)
        goto LABEL_62;
      v25 = CFSTR(".AppleSystemUIFontCore-MediumItalic");
      v26 = CFSTR(".AppleSystemUIFontCore-Medium");
LABEL_100:
      v28 = (v21 & 1) == 0;
LABEL_101:
      if (v28)
        return (__CFString *)v26;
      else
        return (__CFString *)v25;
    case 0xCEuLL:
    case 0xD6uLL:
LABEL_62:
      if ((v21 & 0x40) != 0)
        goto LABEL_66;
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCore-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCore-Italic");
      v22 = CFSTR(".AppleSystemUIFontCore-Semibold");
      v23 = CFSTR(".AppleSystemUIFontCore-SemiboldItalic");
      goto LABEL_82;
    case 0xD0uLL:
    case 0xD8uLL:
LABEL_66:
      if ((v21 & 0x40) != 0)
        goto LABEL_70;
      v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCore-Regular");
      v30.data = CFSTR(".AppleSystemUIFontCore-Italic");
      v22 = CFSTR(".AppleSystemUIFontCore-Heavy");
      v23 = CFSTR(".AppleSystemUIFontCore-HeavyItalic");
      goto LABEL_82;
    case 0xD1uLL:
    case 0xD9uLL:
LABEL_70:
      if ((v21 & 0x40) != 0)
      {
        result = CFSTR(".AppleSystemUIFontCoreCondensed-Thin");
        switch((unint64_t)v30.isa)
        {
          case 0xC7uLL:
          case 0xCFuLL:
            v25 = CFSTR(".AppleSystemUIFontCoreCondensed-Bold");
            v26 = CFSTR(".AppleSystemUIFontCoreCondensed-Regular");
            goto LABEL_121;
          case 0xCAuLL:
            return result;
          case 0xCBuLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-Light");
            break;
          case 0xCCuLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-UltraLight");
            break;
          case 0xCDuLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-Medium");
            break;
          case 0xCEuLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-Semibold");
            break;
          case 0xD0uLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-Heavy");
            break;
          case 0xD1uLL:
            result = CFSTR(".AppleSystemUIFontCoreCondensed-Black");
            break;
          default:
            goto LABEL_90;
        }
      }
      else
      {
        v30.info = (uint64_t)CFSTR(".AppleSystemUIFontCore-Regular");
        v30.data = CFSTR(".AppleSystemUIFontCore-Italic");
        v22 = CFSTR(".AppleSystemUIFontCore-Black");
        v23 = CFSTR(".AppleSystemUIFontCore-BlackItalic");
LABEL_82:
        v30.length = (uint64_t)v22;
        v31 = v23;
        result = (__CFString *)*(&v30.info + (v21 & 3));
      }
      break;
    case 0xDAuLL:
    case 0xDBuLL:
    case 0xDCuLL:
    case 0xDDuLL:
    case 0xDEuLL:
      goto LABEL_122;
    case 0xE3uLL:
    case 0xE4uLL:
    case 0xE5uLL:
    case 0xE6uLL:
    case 0xE7uLL:
      v24 = CFSTR(".AppleSystemUIFontCompactRounded-Semibold");
      goto LABEL_123;
    case 0xECuLL:
LABEL_90:
      v27 = v21 & 0x42;
      if (v27 != 66)
        goto LABEL_108;
      return CFSTR(".AppleSystemUIFontCondensed-Bold");
    case 0xEDuLL:
      v27 = v21 & 0x42;
LABEL_108:
      if (v27 != 64)
        goto LABEL_110;
      return CFSTR(".AppleSystemUIFontCondensed-Regular");
    case 0xEEuLL:
    case 0xEFuLL:
    case 0xF0uLL:
    case 0xF1uLL:
    case 0xF2uLL:
    case 0xF3uLL:
    case 0xF4uLL:
LABEL_110:
      if ((v21 & 0x40) != 0)
        goto LABEL_113;
      result = CFSTR(".AppleSystemUIFontThin");
      switch((unint64_t)v30.isa)
      {
        case 0xECuLL:
        case 0xEDuLL:
          v25 = CFSTR(".AppleSystemUIFontBold");
          v26 = CFSTR(".AppleSystemUIFont");
          goto LABEL_121;
        case 0xEEuLL:
          return result;
        case 0xEFuLL:
          result = CFSTR(".AppleSystemUIFontLight");
          break;
        case 0xF0uLL:
          result = CFSTR(".AppleSystemUIFontUltraLight");
          break;
        case 0xF1uLL:
          result = CFSTR(".AppleSystemUIFontMedium");
          break;
        case 0xF2uLL:
          result = CFSTR(".AppleSystemUIFontDemi");
          break;
        case 0xF3uLL:
          result = CFSTR(".AppleSystemUIFontHeavy");
          break;
        case 0xF4uLL:
          result = CFSTR(".AppleSystemUIFontBlack");
          break;
        default:
          goto LABEL_113;
      }
      return result;
    case 0xF5uLL:
LABEL_113:
      v29 = v21 & 0x42;
      if (v29 != 66)
        goto LABEL_116;
      return CFSTR(".AppleSystemUIFontCoreCondensed-Bold");
    case 0xF6uLL:
      v29 = v21 & 0x42;
LABEL_116:
      if (v29 != 64)
        goto LABEL_118;
      return CFSTR(".AppleSystemUIFontCoreCondensed-Regular");
    case 0xF7uLL:
    case 0xF8uLL:
    case 0xF9uLL:
    case 0xFAuLL:
    case 0xFBuLL:
    case 0xFCuLL:
    case 0xFDuLL:
LABEL_118:
      if ((v21 & 0x40) != 0)
      {
LABEL_122:
        v24 = CFSTR(".AppleSystemUIFontRounded-Semibold");
LABEL_123:
        if ((v21 & 2) != 0)
          return (__CFString *)v24;
        else
          return (__CFString *)this;
      }
      else
      {
        result = CFSTR(".AppleSystemUIFontCore-Thin");
        switch((unint64_t)v30.isa)
        {
          case 0xF5uLL:
          case 0xF6uLL:
            v25 = CFSTR(".AppleSystemUIFontCore-Bold");
            v26 = CFSTR(".AppleSystemUIFontCore-Regular");
            goto LABEL_121;
          case 0xF7uLL:
            return result;
          case 0xF8uLL:
            result = CFSTR(".AppleSystemUIFontCore-Light");
            break;
          case 0xF9uLL:
            result = CFSTR(".AppleSystemUIFontCore-UltraLight");
            break;
          case 0xFAuLL:
            result = CFSTR(".AppleSystemUIFontCore-Medium");
            break;
          case 0xFBuLL:
            result = CFSTR(".AppleSystemUIFontCore-Semibold");
            break;
          case 0xFCuLL:
            result = CFSTR(".AppleSystemUIFontCore-Heavy");
            break;
          case 0xFDuLL:
            result = CFSTR(".AppleSystemUIFontCore-Black");
            break;
          default:
            goto LABEL_122;
        }
      }
      return result;
    default:
      result = FindSerifWithTraits((unint64_t)v30.isa, v19 | v20, a4);
      if (!result)
      {
        result = FindMonospacedWithTraits((unint64_t)isa, v21, a4);
        if (!result)
          return (__CFString *)this;
      }
      return result;
  }
  return result;
}

uint64_t MapTightLooseTraits(int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13)
{
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x18000) == 0x10000)
  {
    v14 = a10;
    v15 = a11;
    v16 = a12;
    v17 = a13;
  }
  else if ((a1 & 0x18000) == 0x8000)
  {
    v14 = a6;
    v15 = a7;
    v16 = a8;
    v17 = a9;
  }
  else
  {
    v14 = a2;
    v15 = a3;
    v16 = a4;
    v17 = a5;
  }
  return TDescriptorSource::UIFontNameForUIType((TDescriptorSource *)*(&v14 + (a1 & 3)));
}

uint64_t TDescriptorSource::TextStyleForUIFontName(TDescriptorSource *this, const __CFString *a2, uint64_t *a3)
{
  __CFString var18;

  var18.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  if (!TDescriptorSource::StashIndexForFontName(this, &var18, a3))
    return 0;
  if (qword_1EDD16F40 != -1)
    dispatch_once(&qword_1EDD16F40, &__block_literal_global_1707);
  return objc_msgSend((id)qword_1EDD16F38, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", var18.isa));
}

void TBaseFont::CopyFileURL(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFURL *v3;
  CFURLRef v4;
  void *v5;
  const __CFString *v6;
  __CFString *v7;
  CFIndex Length;
  unint64_t v9;
  id v10;
  id v11;

  if ((*((_DWORD *)this + 45) & 0x20000000) != 0)
    goto LABEL_15;
  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v10);
  v3 = (const __CFURL *)atomic_load((unint64_t *)&v10);
  if (v3)
  {
    v11 = 0;
    if (CFURLGetBaseURL(v3))
    {
      v4 = CFURLCopyAbsoluteURL(v3);
      do
        v5 = (void *)__ldaxr((unint64_t *)&v11);
      while (__stlxr((unint64_t)v4, (unint64_t *)&v11));

      v3 = (const __CFURL *)atomic_load((unint64_t *)&v11);
    }
    v3 = (const __CFURL *)CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);

  }
  v6 = v3;
  if (!v6)
  {

    goto LABEL_14;
  }
  v7 = (__CFString *)v6;
  Length = CFStringGetLength(v6);

  if (Length < 1)
  {
LABEL_14:

LABEL_15:
    *a2 = 0;
    return;
  }
  v11 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)v3, kCFURLPOSIXPathStyle, 0);
  do
    v9 = __ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));
  *a2 = v9;

}

uint64_t TCFBase<TRunDelegate>::ClassDestruct(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 16);
  if (v1)
    return v1();
  return result;
}

CFIndex CTTypesetterSuggestClusterBreak(CTTypesetterRef typesetter, CFIndex startIndex, double width)
{
  return TypesetterSuggestClusterBreak(typesetter, startIndex, width, 0.0);
}

uint64_t CTFontIsLastResort(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 40) + 400) + 688))(*(_QWORD *)(*(_QWORD *)(result + 40) + 400));
  return result;
}

_QWORD *CTFontGetLanguageAwareOutsetsForLanguage(_QWORD *result, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (result)
  {
    v5 = result[5];
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = *(_QWORD **)(v5 + 400);
      if (result)
      {
        v13 = NAN;
        v14 = NAN;
        v11 = NAN;
        v12 = NAN;
        v10 = *(double *)(v5 + 16);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, double *, double *, double *, double *, double))(*result + 888))(result, &v14, &v13, &v12, &v11, v10);
        if ((_DWORD)result)
        {
          if (a2)
            *a2 = v10 * v14;
          if (a3)
            *a3 = v10 * v13;
          if (a4)
            *a4 = v10 * v12;
          if (a5)
            *a5 = v10 * v11;
        }
      }
    }
  }
  return result;
}

unint64_t TComponentFont::GetLanguageAwareOutsets(TComponentFont *this, double a2, double *a3, double *a4, double *a5, double *a6, __CFString *a7)
{
  unint64_t LanguageAwareOutsets;
  double LanguageAwareAdjustRatio;
  const __CFNumber *ComponentAttribute;
  uint64_t valuePtr;

  LanguageAwareOutsets = TBaseFont::GetLanguageAwareOutsets(this, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)LanguageAwareOutsets
    && (*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 784))(this))
  {
    LanguageAwareAdjustRatio = GetLanguageAwareAdjustRatio();
    ComponentAttribute = (const __CFNumber *)TComponentFont::GetComponentAttribute(this, CFSTR("languageAwareLineHeightRatio"));
    if (ComponentAttribute)
    {
      valuePtr = -1;
      CFNumberGetValue(ComponentAttribute, kCFNumberDoubleType, &valuePtr);
      LanguageAwareAdjustRatio = *(double *)&valuePtr;
    }
    *a4 = *a4 - LanguageAwareAdjustRatio * *a4;
    *a6 = *a6 - LanguageAwareAdjustRatio * *a6;
  }
  return LanguageAwareOutsets;
}

unint64_t TBaseFont::GetLanguageAwareOutsets(TBaseFont *this, double a2, double *a3, double *a4, double *a5, double *a6, __CFString *a7)
{
  const __CFString *v12;
  unint64_t result;
  unsigned int v14;

  v12 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  if (v12 && (GetLanguageAwareOutsetIndexForFontName(v12, a3, a4, a5, a6, a7) & 1) != 0)
    return 1;
  result = atomic_load((unint64_t *)this + 30);
  if (result || (result = TBaseFont::CreateTraitsValues(this)) != 0)
  {
    v14 = __const__Z19LocalTraitForWeightdd_kWeightTraits[(unsigned __int16)IndexesBracketing<double const*,double>(kCTFontDefaultWeights, (double *)&kCTFontWeightRegular, *(double *)(result + 8), 0.001)];
    if (v14 >= 0x11)
      v14 = 17;
    return GetLanguageAwareOutsetIndexForFontName(kFont2X[5 * v14], a3, a4, a5, a6, 0);
  }
  return result;
}

uint64_t GetLanguageAwareOutsetIndexForFontName(const __CFString *a1, double *a2, double *a3, double *a4, double *a5, __CFString *a6)
{
  int v12;
  const void *Value;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  char *v17;
  void *v18;
  const __CFString *v19;
  __CFString *v20;
  int v21;
  double *v22;
  id v24;

  if (qword_1ECDE7420 != -1)
    dispatch_once_f(&qword_1ECDE7420, 0, (dispatch_function_t)GetLanguageAwareOutsetIndexForFontName(__CFString const*,double &,double &,double &,double &,__CFString const*)::$_0::__invoke);
  v12 = _ExuberatedGroupForPreferredLanguages(0, 0);
  Value = CFDictionaryGetValue((CFDictionaryRef)_MergedGlobals_3, a1);
  if (Value)
    v14 = (unint64_t)Value >= 0x257;
  else
    v14 = 1;
  v15 = !v14;
  if ((_DWORD)v15 == 1)
  {
    v16 = Value;
    if (v12 == 4)
      v17 = (char *)&kLanguageAwareOutsetsTableUrdu;
    else
      v17 = (char *)&kLanguageAwareOutsetsTable;
    if (!a6)
      goto LABEL_23;
    v24 = (id)0xAAAAAAAAAAAAAAAALL;
    LanguageIdentifierByNormalizing(a6, 0, (unint64_t *)&v24);
    v18 = (void *)atomic_load((unint64_t *)&v24);
    v19 = v18;
    v20 = (__CFString *)v19;
    if (v19 == CFSTR("ur"))
    {

    }
    else
    {
      if (!v19)
      {

LABEL_21:
        v17 = (char *)&kLanguageAwareOutsetsTable;
        goto LABEL_22;
      }
      v21 = CFEqual(v19, CFSTR("ur"));

      if (!v21)
        goto LABEL_21;
    }
    v17 = (char *)&kLanguageAwareOutsetsTableUrdu;
LABEL_22:

LABEL_23:
    v22 = (double *)&v17[32 * (_QWORD)v16];
    *a2 = *(v22 - 4);
    *a3 = *(v22 - 2);
    *a4 = *(v22 - 3);
    *a5 = *(v22 - 1);
  }
  return v15;
}

void TDescriptor::MergeVariationWithBase(TDescriptor *this, const TBaseFont *a2, const __CFDictionary *a3, TCFMutableDictionary *a4)
{
  int v9;
  const __CFNumber *Value;
  const __CFNumber *v11;
  CFTypeID v12;
  void *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFNumber *v16;
  double v17;
  double v18;
  BOOL v19;
  int v20;
  const __CFArray *v22;
  const void *v24;
  const void *v25;
  void *v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  const __CFArray *v30;
  const __CFDictionary *v31;
  CFTypeID v32;
  CFIndex Count;
  CFIndex v34;
  unint64_t v35;
  void *v36;
  const __CFDictionary *v37;
  __CFDictionary *v38;
  void *v39;
  unint64_t v40;
  void *v41;
  const __CFDictionary *v42;
  TTenuousComponentFont *v43;
  __CFDictionary *v44;
  unsigned int *v45;
  unint64_t *v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  __CFDictionary *v54;
  const void *v55;
  const __CFDictionary *v56;
  void *v57;
  const __CFArray *v58;
  const __CFDictionary *v59;
  const TTenuousComponentFont *v60;
  const __CFArray *v61;
  CGFont *v62;
  __CFDictionary *v63;
  uint64_t v64;
  uint64_t v65;
  const __CFDictionary *v66;
  CGFont *v67;
  int v68;
  __CFDictionary *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  double valuePtr;

  if (a2)
  {
    v71 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 120))(&v71, a2);
    if (!atomic_load((unint64_t *)&v71))
    {
LABEL_63:

      return;
    }
    v70 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 112))(&v70, a2);
    v9 = *((_DWORD *)this + 4);
    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 456))(a2))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a3, &unk_1E1614B60);
      v11 = Value;
      if (Value)
      {
        v12 = CFGetTypeID(Value);
        if (v12 != CFNumberGetTypeID())
          v11 = 0;
      }
      v13 = (void *)atomic_load((unint64_t *)&v70);
      v14 = v13;
      if (!v14)
      {

        v19 = v11 == 0;
        v20 = 1;
        if (!v11)
          goto LABEL_27;
LABEL_15:
        if ((v9 & 0x8000) != 0)
          goto LABEL_27;
        goto LABEL_16;
      }
      v15 = v14;
      v16 = (const __CFNumber *)CFDictionaryGetValue(v14, &unk_1E1614B60);

      if (!v11)
      {
        v20 = 1;
        v19 = 1;
        goto LABEL_27;
      }
      if (v16)
      {
        valuePtr = NAN;
        CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
        v17 = valuePtr;
        valuePtr = NAN;
        CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
        v18 = vabdd_f64(v17, valuePtr);
        v19 = v18 < 0.0001;
        v20 = 1;
        if (v18 < 0.0001)
          goto LABEL_27;
        goto LABEL_15;
      }
    }
    if ((v9 & 0x8000) != 0)
    {
      v19 = 0;
      v20 = 1;
      goto LABEL_27;
    }
LABEL_16:
    if (atomic_load((unint64_t *)&v70))
    {
      valuePtr = -3.72066208e-103;
      v22 = (const __CFArray *)atomic_load((unint64_t *)&v71);
      CreateValidVariation(v22, a3, &valuePtr);
      if (atomic_load((unint64_t *)&valuePtr))
      {
        v24 = (const void *)atomic_load((unint64_t *)&v70);
        v25 = (const void *)atomic_load((unint64_t *)&valuePtr);
        if (!CFEqual(v24, v25))
        {
          (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a2 + 56))(&v73, a2, CFSTR("NSCTFontFileURLAttribute"));
          do
            v26 = (void *)__ldaxr((unint64_t *)&v73);
          while (__stlxr(0, (unint64_t *)&v73));

          if (v26)
          {
            v27 = (__CFDictionary *)atomic_load((unint64_t *)a4);
            CFDictionaryRemoveValue(v27, CFSTR("NSFontNameAttribute"));
            v28 = (__CFDictionary *)atomic_load((unint64_t *)a4);
            CFDictionarySetValue(v28, CFSTR("NSCTFontFileURLAttribute"), v26);
          }

        }
      }

    }
    v20 = 0;
    v19 = 0;
LABEL_27:
    if (!atomic_load((unint64_t *)&v70))
      goto LABEL_67;
    v30 = (const __CFArray *)atomic_load((unint64_t *)&v71);
    v31 = (const __CFDictionary *)atomic_load((unint64_t *)&v70);
    if (a3)
    {
      if (v31)
      {
        if (!CFEqual(v31, a3))
        {
          v32 = CFGetTypeID(a3);
          if (v32 == CFDictionaryGetTypeID())
          {
            Count = CFDictionaryGetCount(v31);
            v34 = CFDictionaryGetCount(a3);
            valuePtr = 0.0;
            if (v34 || !Count)
            {
              if (Count || !v34)
              {
                v73 = (id)0xAAAAAAAAAAAAAAAALL;
                CreateMergedVariation(v30, v31, a3, (unint64_t *)&v73);
                v39 = (void *)atomic_load((unint64_t *)&v73);
                CreateValidVariation(v30, v39, &v72);
                do
                  v40 = __ldaxr((unint64_t *)&v72);
                while (__stlxr(0, (unint64_t *)&v72));
                do
                  v41 = (void *)__ldaxr((unint64_t *)&valuePtr);
                while (__stlxr(v40, (unint64_t *)&valuePtr));

                v42 = (const __CFDictionary *)atomic_load((unint64_t *)&valuePtr);
                if (v42 != v31 && (!v42 || !CFEqual(v31, v42)))
                {
                  v54 = (__CFDictionary *)atomic_load((unint64_t *)a4);
                  v55 = (const void *)atomic_load((unint64_t *)&v73);
                  CFDictionarySetValue(v54, CFSTR("NSCTFontVariationAttribute"), v55);

                  goto LABEL_66;
                }

              }
              else
              {
                CreateValidVariation(v30, a3, &v73);
                do
                  v35 = __ldaxr((unint64_t *)&v73);
                while (__stlxr(0, (unint64_t *)&v73));
                do
                  v36 = (void *)__ldaxr((unint64_t *)&valuePtr);
                while (__stlxr(v35, (unint64_t *)&valuePtr));

                v37 = (const __CFDictionary *)atomic_load((unint64_t *)&valuePtr);
                if (v37 != v31 && (!v37 || !CFEqual(v31, v37)))
                {
                  v38 = (__CFDictionary *)atomic_load((unint64_t *)a4);
                  CFDictionarySetValue(v38, CFSTR("NSCTFontVariationAttribute"), a3);
LABEL_66:

LABEL_67:
                  v56 = (const __CFDictionary *)atomic_load((unint64_t *)a4);
                  v57 = (void *)CFDictionaryGetValue(v56, CFSTR("NSCTFontVariationAttribute"));
                  if (v20)
                  {
                    valuePtr = -3.72066208e-103;
                    v58 = (const __CFArray *)atomic_load((unint64_t *)&v71);
                    CreateValidVariation(v58, v57, &valuePtr);
                    v59 = (const __CFDictionary *)atomic_load((unint64_t *)&valuePtr);
                    v60 = a2;
                    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2) == 1414809156)
                      goto LABEL_69;
                    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2) != 1414743620)
                      goto LABEL_77;
                    v64 = *(_QWORD *)(*((_QWORD *)a2 + 76) + 40);
                    if ((*(_DWORD *)(v64 + 16) & 0x80000000) == 0)
                      TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)a2 + 76) + 40), 0, 0.0);
                    v60 = (const TTenuousComponentFont *)atomic_load((unint64_t *)(v64 + 32));
                    if (v60
                      && (*(unsigned int (**)(const TTenuousComponentFont *))(*(_QWORD *)v60 + 16))(v60) == 1414809156)
                    {
LABEL_69:
                      v43 = (TTenuousComponentFont *)operator new();
                      TTenuousComponentFont::TTenuousComponentFont(v43, v60, v59);
                      if (v19)
                        goto LABEL_81;
                    }
                    else
                    {
LABEL_77:
                      v43 = (TTenuousComponentFont *)operator new();
                      TInstanceFont::TInstanceFont((uint64_t)v43, (uint64_t)a2, v65, v59);
                      if (v19)
                        goto LABEL_81;
                    }
                    v66 = (const __CFDictionary *)atomic_load((unint64_t *)a4);
                    if (CFDictionaryContainsKey(v66, CFSTR("NSCTFontUIUsageAttribute"))
                      || ((*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 496))(&v73, a2), v67 = (CGFont *)atomic_load((unint64_t *)&v73), v68 = IsNamedInstance(v67), v73, v68))
                    {
                      v69 = (__CFDictionary *)atomic_load((unint64_t *)a4);
                      CFDictionaryRemoveValue(v69, CFSTR("NSCTFontVariationAttribute"));
                      v57 = 0;
                    }
                  }
                  else
                  {
                    valuePtr = -3.72066208e-103;
                    (*(void (**)(double *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 496))(&valuePtr, a2);
                    v73 = (id)0xAAAAAAAAAAAAAAAALL;
                    v61 = (const __CFArray *)atomic_load((unint64_t *)&v71);
                    AddDefaultsToVariation(v61, (const __CFDictionary *)v57, (unint64_t *)&v73);
                    v72 = (id)0xAAAAAAAAAAAAAAAALL;
                    atomic_load((unint64_t *)&valuePtr);
                    atomic_load((unint64_t *)&v73);
                    VariationsForGraphicsFontByAddingVariation(&v72);
                    v43 = (TTenuousComponentFont *)operator new();
                    v62 = (CGFont *)atomic_load((unint64_t *)&valuePtr);
                    v63 = (__CFDictionary *)atomic_load((unint64_t *)&v72);
                    TInstanceFont::TInstanceFont((uint64_t)v43, v62, v63);

                  }
LABEL_81:

                  if (!v57 || CFDictionaryGetCount((CFDictionaryRef)v57))
                    goto LABEL_53;
                  goto LABEL_52;
                }
              }
            }

          }
        }
      }
    }
    v43 = a2;
LABEL_52:
    v44 = (__CFDictionary *)atomic_load((unint64_t *)a4);
    CFDictionaryRemoveValue(v44, CFSTR("NSCTFontVariationAttribute"));
LABEL_53:
    v45 = (unsigned int *)((char *)this + 16);
    v46 = (unint64_t *)((char *)this + 32);
    v47 = (unsigned int *)((char *)v43 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    do
      v49 = __ldxr(v46);
    while (__stxr((unint64_t)v43, v46));
    do
      v50 = __ldxr(v45);
    while (__stxr(v50 | 0x80000000, v45));
    if (v49)
    {
      v51 = (unsigned int *)(v49 + 8);
      do
      {
        v52 = __ldxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        __dmb(9u);
        (*(void (**)(unint64_t))(*(_QWORD *)v49 + 8))(v49);
      }
    }

    goto LABEL_63;
  }
}

id TInstanceFont::CopyVariation@<X0>(TInstanceFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 75);
  result = v3;
  *a2 = result;
  return result;
}

BOOL TTenuousComponentFont::HasDerivedOpticalSize(TTenuousComponentFont *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 96);
  return v1 != 0;
}

void CreateValidVariation(const __CFArray *a1@<X0>, void *cf@<X1>, _QWORD *a3@<X8>)
{
  CFTypeID v6;
  __int128 v7;
  CFIndex Count;
  CFIndex v9;
  int v10;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFArray *v17;
  CFTypeID v18;
  double DoubleValue;
  double v20;
  double v21;
  const __CFNumber *v22;
  char *v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v37;
  unint64_t v38;
  void **v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  void **v44;
  char *v45;
  unint64_t v46;
  void **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  void **v54;
  void **v55;
  void **v56;
  void **v57;
  int v59;
  id v60;
  double valuePtr;
  void **values;
  void **v63;
  unint64_t v64;
  _OWORD v65[15];
  unint64_t *v66;
  void *__p;
  char *v68;
  unint64_t v69;
  _OWORD v70[15];
  _QWORD v71[3];

  v71[1] = *MEMORY[0x1E0C80C00];
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
  {
    *a3 = 0;
    return;
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70[14] = v7;
  v70[13] = v7;
  v70[12] = v7;
  v70[11] = v7;
  v70[10] = v7;
  v70[9] = v7;
  v70[8] = v7;
  v70[7] = v7;
  v70[6] = v7;
  v70[5] = v7;
  v70[4] = v7;
  v70[3] = v7;
  v70[2] = v7;
  v70[1] = v7;
  v70[0] = v7;
  __p = 0;
  v68 = 0;
  v69 = 0;
  v71[0] = v70;
  v65[13] = v7;
  v65[14] = v7;
  v65[11] = v7;
  v65[12] = v7;
  v65[9] = v7;
  v65[10] = v7;
  v65[7] = v7;
  v65[8] = v7;
  v65[5] = v7;
  v65[6] = v7;
  v65[3] = v7;
  v65[4] = v7;
  v65[1] = v7;
  v65[2] = v7;
  v65[0] = v7;
  values = 0;
  v63 = 0;
  v64 = 0;
  v66 = (unint64_t *)v65;
  if (!a1)
    goto LABEL_77;
  Count = CFArrayGetCount(a1);
  if (!Count)
    goto LABEL_77;
  v9 = Count;
  v10 = 0;
  for (i = 0; i != v9; ++i)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
    if (!cf)
      continue;
    v14 = Value;
    v15 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, Value);
    if (v15)
    {
      v16 = v15;
LABEL_8:
      v59 = v10;
      v17 = a1;
      valuePtr = NAN;
      v18 = CFGetTypeID(v16);
      if (v18 == CFNumberGetTypeID() || v18 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v16, kCFNumberDoubleType, &valuePtr);
        DoubleValue = valuePtr;
      }
      else
      {
        if (v18 != CFStringGetTypeID())
        {
          a1 = v17;
LABEL_28:
          v10 = 1;
          continue;
        }
        DoubleValue = CFStringGetDoubleValue(v16);
        valuePtr = DoubleValue;
      }
      a1 = v17;
      ClampValueToRangeOfAxis(DoubleValue, ValueAtIndex);
      v21 = v20;
      v22 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisDefaultValue"));
      if (CFNumberCompare((CFNumberRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v21), v22, 0) == kCFCompareEqualTo)
        goto LABEL_28;
      v23 = v68;
      if ((unint64_t)v68 >= v69)
      {
        v26 = (v68 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_91;
        v27 = (uint64_t)(v69 - (_QWORD)__p) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if (v69 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v70, v28);
        else
          v29 = 0;
        v30 = &v29[8 * v26];
        *(_QWORD *)v30 = v14;
        v24 = v30 + 8;
        v32 = __p;
        v31 = v68;
        if (v68 != __p)
        {
          do
          {
            v33 = *--v31;
            *((_QWORD *)v30 - 1) = v33;
            v30 -= 8;
          }
          while (v31 != v32);
          v31 = __p;
        }
        v34 = &v29[8 * v28];
        __p = v30;
        v68 = v24;
        v35 = v69;
        v69 = (unint64_t)v34;
        if (v31)
        {
          if (v70 <= (_OWORD *)v31 && v71 > v31)
          {
            if (v35 == v71[0])
              v71[0] = v31;
          }
          else
          {
            operator delete(v31);
          }
        }
      }
      else
      {
        *(_QWORD *)v68 = v14;
        v24 = v23 + 8;
      }
      v68 = v24;
      TCFNumber::TCFNumber<double>((unint64_t *)&v60, v21);
      v37 = v63;
      if ((unint64_t)v63 < v64)
      {
        do
          v38 = __ldaxr((unint64_t *)&v60);
        while (__stlxr(0, (unint64_t *)&v60));
        *v37 = v38;
        v39 = (void **)(v37 + 1);
        goto LABEL_73;
      }
      v40 = v63 - values;
      if ((unint64_t)(v40 + 1) >> 61)
LABEL_91:
        abort();
      v41 = (uint64_t)(v64 - (_QWORD)values) >> 2;
      if (v41 <= v40 + 1)
        v41 = v40 + 1;
      if (v64 - (unint64_t)values >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
      {
        v43 = (char *)v66;
        if (&v66[v42] <= (unint64_t *)&v66)
        {
          v66 += v42;
        }
        else
        {
          if (v42 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v43 = (char *)operator new(8 * v42);
        }
      }
      else
      {
        v43 = 0;
      }
      v44 = (void **)&v43[8 * v40];
      v45 = &v43[8 * v42];
      do
        v46 = __ldaxr((unint64_t *)&v60);
      while (__stlxr(0, (unint64_t *)&v60));
      *v44 = (void *)v46;
      v39 = v44 + 1;
      v47 = values;
      v48 = (unint64_t *)v63;
      if (v63 == values)
      {
        values = v44;
        v63 = v44 + 1;
        v51 = (unint64_t *)v64;
        v64 = (unint64_t)v45;
        if (!v48)
        {
LABEL_72:
          a1 = v17;
LABEL_73:
          v63 = v39;

          v10 = (v21 != valuePtr) | v59;
          continue;
        }
      }
      else
      {
        do
        {
          --v44;
          --v48;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(0, v48));
          *v44 = (void *)v49;
        }
        while (v48 != (unint64_t *)v47);
        v48 = (unint64_t *)values;
        v50 = (unint64_t *)v63;
        values = v44;
        v63 = v39;
        v51 = (unint64_t *)v64;
        v64 = (unint64_t)v45;
        if (v50 != v48)
        {
          do
          {
            v52 = v50 - 1;

            v50 = v52;
          }
          while (v52 != v48);
        }
        if (!v48)
          goto LABEL_72;
      }
      if (v65 > (_OWORD *)v48 || &v66 <= (unint64_t **)v48)
      {
        operator delete(v48);
      }
      else if (v51 == v66)
      {
        v66 = v48;
      }
      goto LABEL_72;
    }
    v25 = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisName"));
    if (v25)
    {
      v16 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v25);
      v10 |= v16 != 0;
      if (v16)
        goto LABEL_8;
    }
  }
  if ((v10 & 1) != 0)
  {
    *a3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)__p, (const void **)values, (v68 - (_BYTE *)__p) >> 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    goto LABEL_80;
  }
LABEL_77:
  valuePtr = COERCE_DOUBLE(cf);
  do
    v53 = __ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));
  *a3 = v53;

LABEL_80:
  v54 = values;
  if (values)
  {
    v55 = v63;
    v56 = values;
    if (v63 != values)
    {
      do
      {
        v57 = v55 - 1;

        v55 = v57;
      }
      while (v57 != v54);
      v56 = values;
    }
    v63 = v54;
    if (v65 > (_OWORD *)v56 || &v66 <= (unint64_t **)v56)
      operator delete(v56);
  }
  values = &__p;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
}

void CreateMergedVariation(const __CFArray *a1@<X0>, const __CFDictionary *a2@<X1>, const __CFDictionary *a3@<X2>, unint64_t *a4@<X8>)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v11;
  const __CFString *v12;
  CFTypeID v13;
  double DoubleValue;
  double v15;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;
  __CFDictionary *v19;
  unint64_t v20;
  id v22;
  uint64_t valuePtr;
  id v24;

  v24 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v24, a2);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
        if (!a3)
          goto LABEL_10;
        v11 = Value;
        v12 = (const __CFString *)CFDictionaryGetValue(a3, Value);
        if (!v12)
        {
          v18 = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisName"));
          if (!v18)
            goto LABEL_10;
          v12 = (const __CFString *)CFDictionaryGetValue(a3, v18);
          if (!v12)
            goto LABEL_10;
        }
        valuePtr = -1;
        v13 = CFGetTypeID(v12);
        if (v13 == CFNumberGetTypeID() || v13 == CFBooleanGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v12, kCFNumberDoubleType, &valuePtr);
          DoubleValue = *(double *)&valuePtr;
        }
        else
        {
          if (v13 != CFStringGetTypeID())
          {
            v19 = (__CFDictionary *)atomic_load((unint64_t *)&v24);
            CFDictionarySetValue(v19, v11, v12);
            goto LABEL_10;
          }
          DoubleValue = CFStringGetDoubleValue(v12);
          valuePtr = *(_QWORD *)&DoubleValue;
        }
        ClampValueToRangeOfAxis(DoubleValue, ValueAtIndex);
        TCFNumber::TCFNumber<double>((unint64_t *)&v22, v15);
        v16 = (__CFDictionary *)atomic_load((unint64_t *)&v24);
        v17 = (const void *)atomic_load((unint64_t *)&v22);
        CFDictionarySetValue(v16, v11, v17);

LABEL_10:
        if (v7 == ++v8)
          goto LABEL_18;
      }
    }
  }
  do
LABEL_18:
    v20 = __ldaxr((unint64_t *)&v24);
  while (__stlxr(0, (unint64_t *)&v24));
  *a4 = v20;

}

uint64_t TBaseFont::CopyAttribute(TBaseFont *this, const __CFString *key)
{
  const void *FontAttributeID;

  FontAttributeID = GetFontAttributeID(key);
  return (*(uint64_t (**)(TBaseFont *, const void *))(*(_QWORD *)this + 40))(this, FontAttributeID);
}

void VariationsForGraphicsFontByAddingVariation(_QWORD *a1@<X8>)
{
  CGFontGetVariationAxes();
  *a1 = 0;
}

void AddDefaultsToVariation(const __CFArray *a1@<X0>, const __CFDictionary *a2@<X1>, unint64_t *a3@<X8>)
{
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  const void *v12;
  __CFDictionary *v13;
  unint64_t v14;
  id v16;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v16, a2);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
        if (a2)
        {
          v10 = CFDictionaryGetValue(a2, Value);
          if (v10)
          {
            v11 = CFGetTypeID(v10);
            if (v11 == CFNumberGetTypeID())
              continue;
          }
        }
        v12 = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisDefaultValue"));
        v13 = (__CFDictionary *)atomic_load((unint64_t *)&v16);
        CFDictionarySetValue(v13, Value, v12);
      }
    }
  }
  do
    v14 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));
  *a3 = v14;

}

void ConvertToMorxSync(const TBaseFont *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  const __CFData *CommonTable;
  const __CFData *v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  unint64_t v9;
  unsigned __int16 *LookupListTable;
  int v11;
  unsigned int v12;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  if (qword_1EDD17228 != -1)
    dispatch_once_f(&qword_1EDD17228, 0, (dispatch_function_t)ConvertToMorxSync(TBaseFont const*)::{lambda(void *)#1}::__invoke);
  if (!_MergedGlobals_168 && (*((_DWORD *)a1 + 44) & 0x4000000) == 0)
  {
    v2 = (unsigned int *)((char *)a1 + 176);
    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a1 + 704))(a1))
    {
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 | 0x4000000, v2));
    }
    else if ((*(unsigned int (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a1 + 472))(a1, 1836020344))
    {
      do
        v4 = __ldxr(v2);
      while (__stxr(v4 | 0x4000000, v2));
    }
    else
    {
      CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1, 0x47535542u, 0);
      if (CommonTable)
      {
        v6 = CommonTable;
        BytePtr = CFDataGetBytePtr(CommonTable);
        v8 = CFDataGetBytePtr(v6);
        if (!v8)
          goto LABEL_26;
        v9 = (unint64_t)&v8[CFDataGetLength(v6)];
        if ((unint64_t)(BytePtr + 10) > v9
          || bswap32(*(unsigned __int16 *)BytePtr) >> 16 > 1
          || *((_WORD *)BytePtr + 1) && (unint64_t)(BytePtr + 14) > v9)
        {
          goto LABEL_26;
        }
        LookupListTable = OTL::GCommon::GetLookupListTable((uint64_t)BytePtr, v9);
        if (!LookupListTable || *LookupListTable)
          goto LABEL_26;
      }
      v14 = 0;
      v15 = &v14;
      v16 = 0x2020000000;
      v17 = -86;
      if (GetMorxConversionQueue(void)::once != -1)
        dispatch_once(&GetMorxConversionQueue(void)::once, &__block_literal_global_5);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___Z17ConvertToMorxSyncPK9TBaseFont_block_invoke;
      v13[3] = &unk_1E15E8120;
      v13[4] = &v14;
      v13[5] = a1;
      dispatch_sync((dispatch_queue_t)GetMorxConversionQueue(void)::sQueue, v13);
      v11 = *((unsigned __int8 *)v15 + 24);
      _Block_object_dispose(&v14, 8);
      if (!v11)
      {
LABEL_26:
        do
          v12 = __ldxr(v2);
        while (__stxr(v12 | 0x6000000, v2));
        TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)a1, (const void *)*MEMORY[0x1E0C9AE40], CFSTR("CTFontMorxConversionResultAttribute"));
      }
    }
  }
}

_DWORD *TBaseFont::InitFontMetrics(TBaseFont *this, double a2)
{
  _DWORD *v2;
  __int128 v5;
  double v6;
  CGFloat MinY;
  CGFont *InitializedGraphicsFont;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGGlyph glyphs;
  __int16 v15;
  _BYTE bboxes[40];
  __int128 v17;
  CGRect v18;
  char v19;
  _DWORD v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[56];

  v2 = (_DWORD *)((char *)this + 248);
  if (*((_DWORD *)this + 62))
    return v2;
  v20[1] = DWORD1(__const__ZL17StrikeMetricsFromPK14CGFontHMetricsj6CGRectd_result);
  memset(v23, 255, 40);
  *(_OWORD *)&v23[40] = unk_18494F868;
  v20[0] = 0;
  v22 = 0u;
  v21 = 0u;
  *(_OWORD *)v23 = *MEMORY[0x1E0C9D538];
  v5 = *MEMORY[0x1E0C9D648];
  *(_OWORD *)&v23[32] = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)&v23[16] = v5;
  v23[48] = 0;
  if (!(*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this)
    || ((*(uint64_t (**)(TBaseFont *, _QWORD, _DWORD *, double))(*(_QWORD *)this + 792))(this, 0, v20, a2) & 1) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, TBaseFont *, _QWORD, double))(*(_QWORD *)this + 632))(bboxes, this, 0, a2);
    v20[0] = *(_DWORD *)bboxes;
    v21 = *(_OWORD *)&bboxes[8];
    v22 = *(_OWORD *)&bboxes[24];
    *(_OWORD *)v23 = v17;
    *(CGRect *)&v23[16] = v18;
    v23[48] = v19;
    if (CGRectGetMaxY(v18) > *(double *)&v21)
    {
      v6 = *(double *)&v22;
      goto LABEL_7;
    }
    MinY = CGRectGetMinY(*(CGRect *)&v23[16]);
    v6 = *(double *)&v22;
    if (MinY < -(*((double *)&v21 + 1) + *(double *)&v22))
    {
LABEL_7:
      if (v6 == 0.0
        && ((*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)this + 472))(this, 1398030676) & 1) == 0)
      {
        InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
        v15 = 192;
        glyphs = -21846;
        if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 24))(this))
          (*(void (**)(TBaseFont *, __int16 *, CGGlyph *, uint64_t))(*(_QWORD *)this + 664))(this, &v15, &glyphs, 1);
        else
          CGFontGetGlyphsForUnichars();
        if (glyphs)
        {
          *(_QWORD *)&v9 = -1;
          *((_QWORD *)&v9 + 1) = -1;
          *(_OWORD *)bboxes = v9;
          *(_OWORD *)&bboxes[16] = v9;
          if (CGFontGetGlyphBBoxes(InitializedGraphicsFont, &glyphs, 1uLL, (CGRect *)bboxes)
            && (CGRectGetMaxY(*(CGRect *)bboxes) > *(double *)&v21
             || CGRectGetMinY(*(CGRect *)bboxes) < -*((double *)&v21 + 1)))
          {
            v23[48] = 1;
          }
        }
      }
    }
  }
  if (!*v2 && v2 != v20)
  {
    v10 = v22;
    *((_OWORD *)this + 16) = v21;
    *((_OWORD *)this + 17) = v10;
    v11 = *(_OWORD *)&v23[16];
    v12 = *(_OWORD *)&v23[32];
    *((_OWORD *)this + 18) = *(_OWORD *)v23;
    *((_OWORD *)this + 19) = v11;
    *((_OWORD *)this + 20) = v12;
    *((_BYTE *)this + 336) = v23[48];
    __dmb(0xBu);
    *((_DWORD *)this + 62) = v20[0];
  }
  return v2;
}

uint64_t TTenuousComponentFont::IsAppleFont(TTenuousComponentFont *this)
{
  return 1;
}

BOOL TComponentFont::GetStrikeMetricsForSystemFont(TComponentFont *this, int a2, StrikeMetrics *a3, double a4)
{
  _BOOL8 StrikeMetricsForSystemFont;
  __n128 v9;

  StrikeMetricsForSystemFont = TBaseFont::GetStrikeMetricsForSystemFont(this, a2, a3, 0.0);
  if (StrikeMetricsForSystemFont)
  {
    v9.n128_f64[0] = a4;
    TComponentFont::AdjustLineMetrics(this, a2, a3, v9);
  }
  return StrikeMetricsForSystemFont;
}

void TComponentFont::AdjustLineMetrics(TComponentFont *this, int a2, StrikeMetrics *a3, __n128 a4)
{
  const __CFDictionary *v7;
  double v8;
  const __CFNumber *Value;
  double v10;
  const __CFDictionary *v11;
  __CFString *v12;
  double v13;
  const __CFDictionary *v14;
  const __CFNumber *v15;
  const __CFDictionary *v16;
  __CFString *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  double v22;
  const __CFNumber *v23;
  CFTypeID v24;
  SInt32 IntValue;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double LanguageAwareAdjustRatio;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  const __CFString *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  double *v50;
  CFTypeID v51;
  double DoubleValue;
  const __CFString *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  double *v56;
  CFTypeID v57;
  double v58;
  const __CFString *v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  double *v62;
  CFTypeID v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double valuePtr;

  if ((a2 & 1) == 0)
  {
    v7 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
    if (v7)
    {
      v8 = a4.n128_f64[0];
      Value = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("lineSpacingOverride"));
      if (v8 != 0.0)
      {
        if (Value)
        {
          valuePtr = NAN;
          CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
          v10 = valuePtr;
          if (valuePtr > 0.0)
          {
            v67 = NAN;
            valuePtr = NAN;
            v65 = NAN;
            v66 = NAN;
            v11 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
            v12 = v11 ? (__CFString *)CFDictionaryGetValue(v11, CFSTR("language")) : 0;
            if (TBaseFont::GetLanguageAwareOutsets(this, 0.0, &valuePtr, &v67, &v66, &v65, v12))
            {
              v35 = *((double *)this + 76);
              if (v35 != 0.0 && *((double *)this + 75) != 0.0)
              {
                *(float64x2_t *)((char *)a3 + 8) = vmulq_n_f64(vdivq_f64(*(float64x2_t *)((char *)a3 + 8), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(*(float64x2_t *)((char *)a3 + 8), (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)((char *)a3 + 8), 1)), 0)), vaddvq_f64(*(float64x2_t *)((char *)a3 + 8))+ *((double *)a3 + 3)- v35);
                *((double *)a3 + 3) = v35;
              }
              v36 = (double)*(unsigned int *)a3;
              LanguageAwareAdjustRatio = GetLanguageAwareAdjustRatio();
              v38 = *((double *)a3 + 1);
              v39 = *((double *)a3 + 2);
              v40 = v38 + LanguageAwareAdjustRatio * v67 * v36;
              v41 = v39 + LanguageAwareAdjustRatio * v65 * v36;
              v42 = *((double *)a3 + 3);
              v43 = (v38 + v39 + v42) * v8 / v36;
              v44 = v10 / v43;
              v45 = (v10 - v42 * v8 / v36 * (v10 / v43)) / (v43 - v42 * v8 / v36);
              v46 = v39 * v45 + v38 * v45;
              *((double *)a3 + 1) = v40 / (v40 + v41) * v46;
              *((double *)a3 + 2) = v41 / (v40 + v41) * v46;
              *((double *)a3 + 3) = v42 * v44;
            }
          }
          return;
        }
      }
    }
    if ((*(unsigned int (**)(TComponentFont *, __n128))(*(_QWORD *)this + 784))(this, a4))
    {
      v13 = *((double *)this + 77);
      v14 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
      if (v14)
      {
        v15 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("languageAwareLineHeightRatio"));
        if (v15)
        {
          valuePtr = NAN;
          CFNumberGetValue(v15, kCFNumberDoubleType, &valuePtr);
          v13 = valuePtr;
        }
      }
      if (v13 > 0.0)
      {
        v67 = NAN;
        valuePtr = NAN;
        v65 = NAN;
        v66 = NAN;
        v16 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
        v17 = v16 ? (__CFString *)CFDictionaryGetValue(v16, CFSTR("language")) : 0;
        if (TBaseFont::GetLanguageAwareOutsets(this, 0.0, &valuePtr, &v67, &v66, &v65, v17))
        {
          v26 = (double)*(unsigned int *)a3;
          v27 = v13;
          if (v13 > 1.0)
            v27 = GetLanguageAwareAdjustRatio();
          v28 = *((double *)a3 + 1);
          v29 = *((double *)a3 + 2);
          v30 = v28 + v27 * v67 * v26;
          v31 = v29 + v27 * v65 * v26;
          if (v13 > 1.0)
          {
            v32 = (v13 * ((v28 + v29 + *((double *)this + 76)) * *((double *)this + 75) / v26)
                 - *((double *)this + 76) * *((double *)this + 75) / v26)
                / ((v28 + v29 + *((double *)this + 76)) * *((double *)this + 75) / v26
                 - *((double *)this + 76) * *((double *)this + 75) / v26);
            v33 = v29 * v32 + v28 * v32;
            v34 = v30 + v31;
            v30 = v30 / (v30 + v31) * v33;
            v31 = v31 / v34 * v33;
          }
          *((double *)a3 + 1) = v30;
          *((double *)a3 + 2) = v31;
        }
      }
      return;
    }
  }
  if (((*(uint64_t (**)(TComponentFont *, __n128))(*(_QWORD *)this + 840))(this, a4) & 1) != 0)
    return;
  v18 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
  if (!v18)
    return;
  v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, CFSTR("FontMetrics"));
  if (!v19)
    return;
  v20 = v19;
  if (CFDictionaryGetCount(v19) < 1)
    return;
  LODWORD(valuePtr) = -1431655766;
  LODWORD(valuePtr) = *(_DWORD *)a3;
  v21 = (const __CFNumber *)CFDictionaryGetValue(v20, CFSTR("unitsPerEm"));
  v22 = 1.0;
  if (v21)
  {
    v23 = v21;
    v24 = CFGetTypeID(v21);
    if (v24 == CFNumberGetTypeID() || v24 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
      IntValue = LODWORD(valuePtr);
    }
    else
    {
      if (v24 != CFStringGetTypeID())
        goto LABEL_40;
      IntValue = CFStringGetIntValue((CFStringRef)v23);
      LODWORD(valuePtr) = IntValue;
    }
    if (IntValue != *(_DWORD *)a3)
      v22 = (double)*(unsigned int *)a3 / (double)IntValue;
  }
LABEL_40:
  if (a2)
    v47 = CFSTR("vertTypoAscender");
  else
    v47 = CFSTR("ascender");
  v48 = (const __CFNumber *)CFDictionaryGetValue(v20, v47);
  if (v48)
  {
    v49 = v48;
    v50 = (double *)((char *)a3 + 8);
    v51 = CFGetTypeID(v48);
    if (v51 == CFNumberGetTypeID() || v51 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v49, kCFNumberDoubleType, (char *)a3 + 8);
      DoubleValue = *v50;
LABEL_47:
      *v50 = v22 * DoubleValue;
      goto LABEL_48;
    }
    if (v51 == CFStringGetTypeID())
    {
      DoubleValue = CFStringGetDoubleValue((CFStringRef)v49);
      goto LABEL_47;
    }
  }
LABEL_48:
  if (a2)
    v53 = CFSTR("vertTypoDescender");
  else
    v53 = CFSTR("descender");
  v54 = (const __CFNumber *)CFDictionaryGetValue(v20, v53);
  if (v54)
  {
    v55 = v54;
    v56 = (double *)((char *)a3 + 16);
    v57 = CFGetTypeID(v54);
    if (v57 == CFNumberGetTypeID() || v57 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v55, kCFNumberDoubleType, (char *)a3 + 16);
      v58 = *v56;
LABEL_55:
      *v56 = v22 * v58;
      goto LABEL_56;
    }
    if (v57 == CFStringGetTypeID())
    {
      v58 = CFStringGetDoubleValue((CFStringRef)v55);
      goto LABEL_55;
    }
  }
LABEL_56:
  if (a2)
    v59 = CFSTR("vertTypoLineGap");
  else
    v59 = CFSTR("lineGap");
  v60 = (const __CFNumber *)CFDictionaryGetValue(v20, v59);
  if (v60)
  {
    v61 = v60;
    v62 = (double *)((char *)a3 + 24);
    v63 = CFGetTypeID(v60);
    if (v63 == CFNumberGetTypeID() || v63 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v61, kCFNumberDoubleType, v62);
      v64 = *v62;
    }
    else
    {
      if (v63 != CFStringGetTypeID())
        return;
      v64 = CFStringGetDoubleValue((CFStringRef)v61);
    }
    *v62 = v22 * v64;
  }
}

BOOL TTenuousComponentFont::HasExuberatedLineHeight(TTenuousComponentFont *this)
{
  return (*((_DWORD *)this + 178) & 0x80008) == 8 && CurrentLocaleIsExuberated()
      || TComponentFont::HasExuberatedLineHeight(this);
}

BOOL TComponentFont::HasExuberatedLineHeight(TComponentFont *this)
{
  int v2;
  const __CFDictionary *v4;
  const __CFString *Value;

  if ((*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 856))(this))
  {
    v2 = *((_DWORD *)this + 178);
    if ((v2 & 0x80000) == 0)
    {
      if ((v2 & 0x40000) != 0)
      {
        v4 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
        if (v4)
        {
          Value = (const __CFString *)CFDictionaryGetValue(v4, CFSTR("language"));
          if (Value)
            return GetExuberatedGroupForLanguage(Value, 0) != 0;
        }
      }
      else if (CurrentLocaleIsExuberated())
      {
        return 1;
      }
    }
  }
  return 0;
}

void TDescriptorSource::EnsureSplicedFontStash(TDescriptorSource *this)
{
  void *v1;
  unint64_t v2;
  id v3;
  id Mutable;

  if (TDescriptorSource::sSplicedFonts)
  {
    if (TDescriptorSource::EnsureSplicedFontStash(void)::sGeneration == TGenerationSeed::sGeneration)
      return;
    TDescriptorSource::EnsureSplicedFontStash(void)::sGeneration = TGenerationSeed::sGeneration;
    CFRelease((CFTypeRef)TDescriptorSource::sSplicedFonts);
  }
  else
  {
    TDescriptorSource::EnsureSplicedFontStash(void)::sGeneration = TGenerationSeed::sGeneration;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v1 = (void *)__ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  v3 = v1;

  do
    v2 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));
  TDescriptorSource::sSplicedFonts = v2;

}

BOOL CurrentLocaleIsExuberated(void)
{
  if (qword_1ECDE77F8 != -1)
    dispatch_once_f(&qword_1ECDE77F8, 0, (dispatch_function_t)ExuberatedGroupForTallPseudolanguageIfEnabled(void)::$_0::__invoke);
  return dword_1ECDE77D0 || _ExuberatedGroupForPreferredLanguages(0, 0) != 0;
}

void TBaseFont::CopyVariationAxes(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  void *v4;
  unint64_t v6;
  unint64_t v7;
  const __CFString *v8;
  unint64_t v9;
  void *v10;
  void *v13;
  unint64_t v14;
  const void *v15;
  CFTypeID v16;
  const __CFArray *v17;
  void *v18;
  id v19;
  id v20;
  id v21;

  if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 712))(this))
  {
    *a2 = 0;
    return;
  }
  v21 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontVariationAxesAttribute"), &v20);
  do
    v4 = (void *)__ldaxr((unint64_t *)&v20);
  while (__stlxr(0, (unint64_t *)&v20));
  v21 = v4;

  if (!atomic_load((unint64_t *)&v21))
  {
    if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    {
      v8 = (const __CFString *)atomic_load((unint64_t *)this + 12);
      CopyAttributeForSystemFont(v8, CFSTR("NSCTFontVariationAxesAttribute"), (const __CFString **)&v20);
      do
        v9 = __ldaxr((unint64_t *)&v20);
      while (__stlxr(0, (unint64_t *)&v20));
      do
        v10 = (void *)__ldaxr((unint64_t *)&v21);
      while (__stlxr(v9, (unint64_t *)&v21));

    }
    if (!atomic_load((unint64_t *)&v21))
    {
      TBaseFont::GetInitializedGraphicsFont(this);
      v20 = (id)0xAAAAAAAAAAAAAAAALL;
      CopyVariationAxes(&v20);
      if (atomic_load((unint64_t *)&v20))
      {
        v13 = (void *)atomic_load((unint64_t *)&v20);
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v21, v13);
      }

    }
    v14 = atomic_load((unint64_t *)&v21);
    if (!v14
      || (v15 = (const void *)atomic_load((unint64_t *)&v21), v16 = CFGetTypeID(v15), v16 != CFArrayGetTypeID())
      || (v17 = (const __CFArray *)atomic_load((unint64_t *)&v21), CFArrayGetCount(v17) < 1))
    {
      TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, (const void *)*MEMORY[0x1E0C9B0D0], CFSTR("NSCTFontVariationAxesAttribute"));
      goto LABEL_23;
    }
    v18 = (void *)atomic_load((unint64_t *)&v21);
    v19 = v18;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v19, CFSTR("NSCTFontVariationAxesAttribute"));

  }
  v6 = atomic_load((unint64_t *)&v21);
  if (*MEMORY[0x1E0C9B0D0] != v6)
  {
    do
      v7 = __ldaxr((unint64_t *)&v21);
    while (__stlxr(0, (unint64_t *)&v21));
    goto LABEL_24;
  }
LABEL_23:
  v7 = 0;
LABEL_24:
  *a2 = v7;

}

uint64_t TBaseFont::IsAppleFont(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x10) == 0)
    TBaseFont::DetermineFontFlags(this, 16);
  return (*((_DWORD *)this + 45) >> 4) & 1;
}

uint64_t TBaseFont::CalculateFontMetrics@<X0>(TBaseFont *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  CGFont *InitializedGraphicsFont;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int CapHeight;
  uint64_t VMetrics;
  int *v17;
  uint64_t result;
  int v19;
  int v20;
  CGRect FontBBox;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  FontBBox = CGFontGetFontBBox(InitializedGraphicsFont);
  v8 = (*(double (**)(TBaseFont *, CGPoint, __n128, CGSize, __n128))(*(_QWORD *)this + 544))(this, FontBBox.origin, *(__n128 *)&FontBBox.origin.y, FontBBox.size, *(__n128 *)&FontBBox.size.height);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  CapHeight = CGFontGetCapHeight(InitializedGraphicsFont);
  if (a2)
    VMetrics = CGFontGetVMetrics();
  else
    VMetrics = CGFontGetHMetrics();
  v17 = (int *)VMetrics;
  result = CGFontGetUnitsPerEm(InitializedGraphicsFont);
  *(_OWORD *)a3 = __const__ZL17StrikeMetricsFromPK14CGFontHMetricsj6CGRectd_result;
  *(_OWORD *)(a3 + 16) = unk_18494F828;
  *(_OWORD *)(a3 + 32) = xmmword_18494F838;
  *(_OWORD *)(a3 + 48) = unk_18494F848;
  *(_OWORD *)(a3 + 64) = xmmword_18494F858;
  *(_OWORD *)(a3 + 80) = unk_18494F868;
  *(_DWORD *)a3 = result;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 40) = *MEMORY[0x1E0C9D538];
  *(_BYTE *)(a3 + 88) = 0;
  *(double *)(a3 + 56) = v8;
  *(_QWORD *)(a3 + 64) = v10;
  *(_QWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 80) = v14;
  if (v17)
  {
    v19 = v17[1];
    if (v19 >= 0)
      v20 = v17[1];
    else
      v20 = -v19;
    *(double *)(a3 + 8) = (double)*v17;
    *(double *)(a3 + 16) = (double)v20;
    *(double *)(a3 + 24) = (double)v17[2];
    *(double *)(a3 + 32) = (double)CapHeight;
  }
  return result;
}

uint64_t TSplicedFont::HasTable(TSplicedFont *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v4 = atomic_load((unint64_t *)(v3 + 32));
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 472))(v4, a2);
}

void CopyVariationAxes(_QWORD *a1@<X8>)
{
  CFIndex capacity;

  capacity = 0;
  CGFontGetVariationAxes();
  *a1 = 0;

}

uint64_t TBaseFont::MayHaveOverrides(TBaseFont *this)
{
  return 0;
}

unsigned __int16 *OTL::GCommon::GetLookupListTable(uint64_t a1, unint64_t a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (!*(_WORD *)(a1 + 8))
    return 0;
  v2 = (unsigned __int16 *)(a1 + __rev16(*(unsigned __int16 *)(a1 + 8)));
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > a2)
    return 0;
  v5 = bswap32(*v2) >> 16;
  v6 = (unint64_t)&v3[v5];
  if ((unint64_t)(v2 + 2) <= a2)
    v7 = (a2 - (unint64_t)v3) >> 1;
  else
    v7 = 0;
  if (v6 >= (unint64_t)v3 && v6 <= a2 || v7 == v5)
    return v2;
  else
    return 0;
}

uint64_t TSplicedFont::IsAppleFont(TSplicedFont *this)
{
  return *((unsigned __int8 *)this + 632);
}

double TSplicedFontDict::ModifyRawBoundingBox(TSplicedFontDict *this, CGRect a2)
{
  double x;
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFString *v6;
  double DoubleValue;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;

  x = a2.origin.x;
  v3 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v3)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("FontMetrics"));
    if (Value)
    {
      v5 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v6 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("xMin"));
        if (v6)
        {
          DoubleValue = CFStringGetDoubleValue(v6);
          v8 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("yMin"));
          if (v8)
          {
            CFStringGetDoubleValue(v8);
            v9 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("xMax"));
            if (v9)
            {
              CFStringGetDoubleValue(v9);
              v10 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("yMax"));
              if (v10)
              {
                CFStringGetDoubleValue(v10);
                return DoubleValue;
              }
            }
          }
        }
      }
    }
  }
  return x;
}

double TSplicedFont::ModifyRawBoundingBox(TSplicedFont *this, CGRect a2)
{
  return TSplicedFontDict::ModifyRawBoundingBox((TSplicedFont *)((char *)this + 600), a2);
}

void TSplicedFont::CalculateFontMetrics(TSplicedFont *this@<X0>, double a2@<D0>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  TComponentFont *v12;
  int v13;
  __n128 v14;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  *(_OWORD *)a4 = xmmword_18494F8B8;
  *(_OWORD *)(a4 + 16) = unk_18494F8C8;
  *(_OWORD *)(a4 + 32) = xmmword_18494F8D8;
  *(_OWORD *)(a4 + 48) = unk_18494F8E8;
  *(_OWORD *)(a4 + 64) = xmmword_18494F8F8;
  *(_OWORD *)(a4 + 80) = unk_18494F908;
  *(_DWORD *)a4 = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  v8 = (__int128 *)MEMORY[0x1E0C9D648];
  *(_OWORD *)(a4 + 40) = *MEMORY[0x1E0C9D538];
  v9 = *v8;
  *(_OWORD *)(a4 + 72) = v8[1];
  *(_OWORD *)(a4 + 56) = v9;
  *(_BYTE *)(a4 + 88) = 0;
  if (!TBaseFont::GetStrikeMetricsForSystemFont(this, a3, (StrikeMetrics *)a4, a2))
  {
    TBaseFont::CalculateFontMetrics(this, a3, (uint64_t)&v16);
    *(_DWORD *)a4 = v16;
    *(_OWORD *)(a4 + 8) = v17;
    *(_OWORD *)(a4 + 24) = v18;
    *(_OWORD *)(a4 + 40) = v19;
    v10 = v21;
    *(_OWORD *)(a4 + 56) = v20;
    *(_OWORD *)(a4 + 72) = v10;
    *(_BYTE *)(a4 + 88) = v22;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v11, 0, 0.0);
  v12 = (TComponentFont *)atomic_load((unint64_t *)(v11 + 32));
  if (v12)
  {
    v13 = (*(uint64_t (**)(TComponentFont *))(*(_QWORD *)v12 + 16))(v12);
    if (v13 == 1414809156 || v13 == 1413695044)
    {
      v14.n128_f64[0] = a2;
      TComponentFont::AdjustLineMetrics(v12, a3, (StrikeMetrics *)a4, v14);
    }
  }
}

void TInstanceFont::TInstanceFont(TInstanceFont *this, CGFont *a2, const __CFDictionary *a3)
{
  void *v5;
  CGFont *v6;
  id v7;

  CreateCopyOfFontWithVariation(a2, a3, (CGFont **)&v7);
  v5 = (void *)atomic_load((unint64_t *)&v7);
  TBaseFont::TBaseFont(this, v5);

  *(_QWORD *)this = &off_1E15DCF58;
  *((_BYTE *)this + 624) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_BYTE *)this + 616) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  v6 = (CGFont *)atomic_load((unint64_t *)this + 13);
  TInstanceFont::InitWithVariation(this, v6, a3, 0);
}

uint64_t TInstanceFont::TInstanceFont(uint64_t a1, CGFont *a2, __CFDictionary *a3)
{
  void *v5;
  CGFont *v6;
  id v8;

  CreateCopyOfFontWithVariation(a2, a3, (CGFont **)&v8);
  v5 = (void *)atomic_load((unint64_t *)&v8);
  TBaseFont::TBaseFont(a1, v5);

  *(_QWORD *)a1 = &off_1E15DCF58;
  *(_BYTE *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  v6 = (CGFont *)atomic_load((unint64_t *)(a1 + 104));
  TInstanceFont::InitWithVariation((TInstanceFont *)a1, v6, a3, 0);
  return a1;
}

uint64_t TInstanceFont::TInstanceFont(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t v7;
  unint64_t *v8;
  CGFont *v9;
  const __CFDictionary *v10;
  CGFont *v11;
  void *v12;
  CGFont *v13;
  unint64_t *v14;
  CGFont *v15;
  CFStringRef v16;
  void *v17;
  uint64_t v18;
  id v20;

  TBaseFont::TBaseFont((TBaseFont *)a1, (const TBaseFont *)a2);
  *(_QWORD *)v7 = &off_1E15DCF58;
  *(_BYTE *)(v7 + 624) = 0;
  v8 = (unint64_t *)(v7 + 640);
  *(_OWORD *)(v7 + 600) = 0u;
  *(_BYTE *)(v7 + 616) = 0;
  *(_OWORD *)(v7 + 632) = 0u;
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  GetBaseCGFont((const TBaseFont *)a2, a4, (unint64_t *)&v20);
  v9 = (CGFont *)atomic_load((unint64_t *)&v20);
  v10 = CGFontCopyVariations(v9);
  v11 = (CGFont *)atomic_load((unint64_t *)&v20);
  TInstanceFont::InitWithVariation((TInstanceFont *)a1, v11, v10, a4);
  v12 = (void *)atomic_load((unint64_t *)&v20);
  TCFRef<__CTFont const*>::Retain(v8, v12);
  v13 = (CGFont *)atomic_load((unint64_t *)&v20);
  if (IsNamedInstance(v13))
  {
    v14 = (unint64_t *)(a1 + 96);
    v15 = (CGFont *)atomic_load((unint64_t *)&v20);
    v16 = CGFontCopyPostScriptName(v15);
    do
      v17 = (void *)__ldaxr(v14);
    while (__stlxr((unint64_t)v16, v14));

  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 1414088260)
  {
    v18 = *(_QWORD *)(a2 + 616);
    *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
    *(_QWORD *)(a1 + 616) = v18;
  }

  return a1;
}

void TInstanceFont::InitWithVariation(TInstanceFont *this, CGFont *a2, const __CFDictionary *a3, id a4)
{
  unint64_t *v8;
  const __CFURL *v9;
  CFURLRef v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  int v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;

  if (!a3)
    goto LABEL_33;
  v8 = (unint64_t *)((char *)this + 80);
  v9 = (const __CFURL *)atomic_load((unint64_t *)this + 10);
  v39 = 0;
  if ((*((_DWORD *)this + 45) & 0x20000000) != 0)
  {
    CopyPathFromInMemoryFontURL(v9, (CFStringRef *)&v40);
    do
      v12 = __ldaxr((unint64_t *)&v40);
    while (__stlxr(0, (unint64_t *)&v40));
    do
      v13 = (void *)__ldaxr((unint64_t *)&v39);
    while (__stlxr(v12, (unint64_t *)&v39));

    v14 = v40;
  }
  else
  {
    if (v9)
    {
      v40 = 0;
      if (CFURLGetBaseURL(v9))
      {
        v10 = CFURLCopyAbsoluteURL(v9);
        do
          v11 = (void *)__ldaxr((unint64_t *)&v40);
        while (__stlxr((unint64_t)v10, (unint64_t *)&v40));

        v9 = (const __CFURL *)atomic_load((unint64_t *)&v40);
      }
      v38 = (id)CFURLCopyFileSystemPath(v9, kCFURLPOSIXPathStyle);

    }
    else
    {
      v38 = 0;
    }
    do
      v15 = __ldaxr((unint64_t *)&v38);
    while (__stlxr(0, (unint64_t *)&v38));
    do
      v16 = (void *)__ldaxr((unint64_t *)&v39);
    while (__stlxr(v15, (unint64_t *)&v39));

    v14 = v38;
  }

  v40 = 0;
  if (IsNamedInstance(a2))
  {
    v17 = (void *)CGFontCopyPostScriptName(a2);
    atomic_load((unint64_t *)&v39);
    v38 = (id)CGFontURLCreate();
    do
      v18 = __ldaxr((unint64_t *)&v38);
    while (__stlxr(0, (unint64_t *)&v38));
    do
      v19 = (void *)__ldaxr((unint64_t *)&v40);
    while (__stlxr(v18, (unint64_t *)&v40));
  }
  else
  {
    v38 = (id)CGFontCopyPostScriptName(a2);
    v20 = (unint64_t *)((char *)this + 96);
    do
      v21 = __ldaxr((unint64_t *)&v38);
    while (__stlxr(0, (unint64_t *)&v38));
    do
      v22 = (void *)__ldaxr(v20);
    while (__stlxr(v21, v20));

    if (!CGFontGetParserFont())
      goto LABEL_53;
    FPFontGetDefaultInstance();
    v17 = (void *)FPFontCopyPostScriptName();
    atomic_load((unint64_t *)&v39);
    v38 = (id)CGFontURLCreate();
    do
      v23 = __ldaxr((unint64_t *)&v38);
    while (__stlxr(0, (unint64_t *)&v38));
    do
      v19 = (void *)__ldaxr((unint64_t *)&v40);
    while (__stlxr(v23, (unint64_t *)&v40));
  }

  if (!atomic_load((unint64_t *)&v40))
  {
LABEL_53:

    v36 = v39;
    goto LABEL_51;
  }
  do
    v25 = __ldaxr((unint64_t *)&v40);
  while (__stlxr(0, (unint64_t *)&v40));
  do
    v26 = (void *)__ldaxr(v8);
  while (__stlxr(v25, v8));

LABEL_33:
  if (a4)
  {
    TCFRef<__CTFont const*>::Retain((unint64_t *)this + 75, a4);
    v40 = (id)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    CreateVariationDictFromGraphicsFont(&v40);
    v27 = (unint64_t *)((char *)this + 600);
    do
      v28 = __ldaxr((unint64_t *)&v40);
    while (__stlxr(0, (unint64_t *)&v40));
    do
      v29 = (void *)__ldaxr(v27);
    while (__stlxr(v28, v27));

    v40 = (id)0xAAAAAAAAAAAAAAAALL;
    if (!a3)
    {
      v40 = a2;
      goto LABEL_40;
    }
  }
  CreateFontWithVariation(a2, (const __CFDictionary *)a4, (unint64_t *)&v40);
LABEL_40:
  v30 = (unint64_t *)((char *)this + 632);
  do
    v31 = __ldaxr((unint64_t *)&v40);
  while (__stlxr(0, (unint64_t *)&v40));
  do
  {
    if (__ldaxr(v30))
    {
      v33 = 0;
      __clrex();
      goto LABEL_47;
    }
  }
  while (__stlxr(v31, v30));
  v33 = 1;
LABEL_47:
  if (v33)
    v34 = 0;
  else
    v34 = (void *)v31;

  v35 = (void *)atomic_load((unint64_t *)this + 75);
  v37 = v35;
  TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v37, CFSTR("NSCTFontVariationAttribute"));

  v36 = v40;
LABEL_51:

}

uint64_t IsNamedInstance(CGFont *a1)
{
  if (a1 && CGFontGetParserFont())
    return FPFontIsNamedInstance();
  else
    return 1;
}

void TBaseFont::TBaseFont(TBaseFont *this, const TBaseFont *a2)
{
  unsigned int *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E15DE850;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v4 = (unsigned int *)((char *)a2 + 180);
  (*(void (**)(const TBaseFont *))(*(_QWORD *)a2 + 200))(a2);
  v5 = (void *)atomic_load((unint64_t *)a2 + 11);
  *((_QWORD *)this + 11) = v5;
  v6 = (void *)atomic_load((unint64_t *)a2 + 12);
  *((_QWORD *)this + 12) = v6;
  v7 = (void *)atomic_load((unint64_t *)a2 + 13);
  *((_QWORD *)this + 13) = v7;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  v8 = atomic_load(v4);
  v9 = *MEMORY[0x1E0C9D648];
  v10 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *((_OWORD *)this + 18) = *MEMORY[0x1E0C9D538];
  *((_OWORD *)this + 19) = v9;
  *((_DWORD *)this + 45) = v8 & 0xB0000000;
  *((_DWORD *)this + 46) = -1342177280;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 20) = v10;
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 98) = 1065353216;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 1065353216;
  *((_WORD *)this + 220) = -1;
  *(_QWORD *)((char *)this + 460) = 0;
  *((_DWORD *)this + 117) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *(_QWORD *)((char *)this + 452) = 0;
  *((_QWORD *)this + 60) = (char *)this + 472;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 68) = (char *)this + 512;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  TBaseFont::Init(this, 0);
}

void GetBaseCGFont(const TBaseFont *a1@<X0>, const __CFDictionary *a2@<X1>, unint64_t *a3@<X8>)
{
  CGFont *v6;
  int v7;
  CGFont *v8;
  __CFDictionary *MutableCopy;

  if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a1 + 16))(a1) != 1414088260
    || !(*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a1 + 456))(a1))
  {
    v8 = (CGFont *)(*(uint64_t (**)(const TBaseFont *))(*(_QWORD *)a1 + 568))(a1);
    goto LABEL_8;
  }
  v6 = (CGFont *)atomic_load((unint64_t *)a1 + 80);
  if (!a2)
    goto LABEL_11;
  v7 = CFDictionaryContainsKey(a2, &unk_1E1617140);
  if (CFDictionaryGetCount(a2) <= 1 && v7)
  {
    v8 = v6;
LABEL_8:
    *a3 = (unint64_t)v8;
    return;
  }
  if (v7)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    CFDictionaryRemoveValue(MutableCopy, &unk_1E1617140);
    CreateFontWithVariation(v6, MutableCopy, a3);

  }
  else
  {
LABEL_11:
    CreateFontWithVariation(v6, a2, a3);
  }
}

unint64_t TInstanceFont::GetGraphicsFont(TInstanceFont *this)
{
  return atomic_load((unint64_t *)this + 79);
}

uint64_t TInstanceFont::GetType(TInstanceFont *this)
{
  return 1414088260;
}

BOOL TInstanceFont::HasDerivedOpticalSize(TInstanceFont *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 80);
  return v1 != 0;
}

unint64_t *`anonymous namespace'::TSingleAttrDescriptor::operator=(unint64_t *a1, unint64_t *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = (void *)atomic_load(a2 + 2);
    TCFRef<__CTFont const*>::Retain(a1 + 2, v4);
    v5 = (void *)atomic_load(a2 + 3);
    TCFRef<__CTFont const*>::Retain(a1 + 3, v5);
    v6 = (void *)atomic_load(a2 + 4);
    TCFRef<__CTFont const*>::Retain(a1 + 4, v6);
    v7 = (void *)atomic_load(a2 + 5);
    TCFRef<__CTFont const*>::Retain(a1 + 5, v7);
  }
  return a1;
}

void TAttributes::CopyOfFontWithLigatureSetting(CTFontRef *a1, const __CTFont *a2, int a3)
{
  void *v6;
  const __CFDictionary *v7;
  const __CTFontDescriptor *v8;
  id v9;
  void *values;
  void *keys;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateFeatureSettingsForLigatureSetting((unint64_t *)&v9, *(_QWORD *)(*((_QWORD *)a2 + 5) + 400), a3);
  if (atomic_load((unint64_t *)&v9))
  {
    v6 = (void *)atomic_load((unint64_t *)&v9);
    values = v6;
    keys = CFSTR("NSCTFontFeatureSettingsAttribute");
    v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = CTFontDescriptorCreateWithAttributes(v7);
    *a1 = CTFontCreateCopyWithAttributes(a2, 0.0, 0, v8);

  }
  else
  {

    *a1 = a2;
  }
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  void *v1;
  const __CTFontDescriptor *v2;
  id v4;
  id v5;
  CFDictionaryRef v6;

  v6 = attributes;
  if (!attributes)
    return 0;
  v5 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&>((void **)&v6, (unint64_t *)&v4);
  do
    v1 = (void *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  v5 = v1;

  do
    v2 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));

  return v2;
}

void TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&>(void **a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  id v8;

  v4 = TCFBase<TDescriptor>::Allocate();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *a1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v4 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v4 + 48;
    *(_QWORD *)(v4 + 56) = 0;
    *(_DWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v4 + 56), v6);
    v8 = v5;
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

void CreateFontWithVariation(CGFont *a1@<X0>, const __CFDictionary *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t Count;
  int64_t v6;
  size_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  CFTypeID v18;
  uint64_t VariationAxes;
  char *v20;
  unint64_t v21;
  void *v22;
  char *v23;
  unint64_t v24;
  void ***p_values;
  void **values;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  void **keys;
  void *v46;
  uint64_t v47;
  _OWORD v48[15];
  _OWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *a3 = (unint64_t)a1;
  if (a2)
  {
    Count = CFDictionaryGetCount(a2);
    v6 = Count;
    v24 = Count;
    if (Count >> 60)
      v7 = -1;
    else
      v7 = 16 * Count;
    v8 = (char *)operator new[](v7, MEMORY[0x1E0DE4E10]);
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[14] = v9;
    v48[13] = v9;
    v48[12] = v9;
    v48[11] = v9;
    v48[10] = v9;
    v48[9] = v9;
    v48[8] = v9;
    v48[7] = v9;
    v48[6] = v9;
    v48[5] = v9;
    v48[4] = v9;
    v48[3] = v9;
    v48[2] = v9;
    v48[1] = v9;
    v48[0] = v9;
    keys = 0;
    v46 = 0;
    v47 = 0;
    v49 = v48;
    if (v6)
    {
      std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&keys, v6);
      v10 = (char *)v46;
      bzero(v46, 8 * v6);
      v46 = &v10[8 * v6];
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v43 = v11;
      v42 = v11;
      v41 = v11;
      v40 = v11;
      v39 = v11;
      v38 = v11;
      v37 = v11;
      v36 = v11;
      v35 = v11;
      v34 = v11;
      v33 = v11;
      v32 = v11;
      v31 = v11;
      v30 = v11;
      v29 = v11;
      v27 = 0;
      v28 = 0;
      values = 0;
      v44 = &v29;
      std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v6);
      v12 = (char *)v27;
      bzero(v27, 8 * v6);
      v27 = &v12[8 * v6];
      CFDictionaryGetKeysAndValues(a2, (const void **)keys, (const void **)values);
      if (v6 < 1)
        goto LABEL_16;
      v13 = 0;
      v14 = v8;
      while (1)
      {
        v15 = keys[v13];
        v16 = values[v13];
        v17 = CFGetTypeID(v15);
        if (v17 != CFNumberGetTypeID())
          break;
        v18 = CFGetTypeID(v16);
        if (v18 != CFNumberGetTypeID())
          break;
        CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, v14);
        CFNumberGetValue((CFNumberRef)v16, kCFNumberDoubleType, v14 + 8);
        ++v13;
        v14 += 16;
        if (v6 == v13)
          goto LABEL_16;
      }
      p_values = 0;
      VariationAxes = CGFontGetVariationAxes();
      CreateGraphicsVariationFromDict(a2, &v24, VariationAxes, 0, &v23);
      v20 = v23;
      if (v8)
        MEMORY[0x186DC0394](v8, 0x1000C80F7F8B94BLL);
      v8 = v20;
      if (v24)
      {
LABEL_16:
        v21 = CGFontCreateWithVariations();
        if (v21)
        {
          do
            v22 = (void *)__ldaxr(a3);
          while (__stlxr(v21, a3));

        }
      }
    }
    else
    {
      v43 = v9;
      v42 = v9;
      v41 = v9;
      v40 = v9;
      v39 = v9;
      v38 = v9;
      v37 = v9;
      v36 = v9;
      v35 = v9;
      v34 = v9;
      v33 = v9;
      v32 = v9;
      v31 = v9;
      v30 = v9;
      v29 = v9;
      v27 = 0;
      v28 = 0;
      values = 0;
      v44 = &v29;
      CFDictionaryGetKeysAndValues(a2, 0, 0);
    }
    p_values = &values;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_values);
    values = (void **)&keys;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
    if (v8)
      MEMORY[0x186DC0394](v8, 0x1000C80F7F8B94BLL);
  }
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  double *v8;
  TDescriptor *v11;
  const void *v13;
  CFTypeID v14;
  const __CFDictionary *v15;
  unint64_t v16;
  const __CFDictionary *v17;
  void *v18;
  const __CTFontDescriptor *v19;
  const __CTFont *v20;
  const __CFDictionary *v21;
  unint64_t v22;
  id v23;
  id v24;
  id v25;

  if (!font)
    return 0;
  v8 = (double *)*((_QWORD *)font + 5);
  if (!attributes && !matrix && v8[2] == size)
    return font;
  v25 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CopyDescriptor((TFont *)v8, 0, (unint64_t *)&v25);
  if (atomic_load((unint64_t *)&v25))
  {
    if (attributes)
    {
      v11 = (TDescriptor *)*((_QWORD *)attributes + 5);
      v24 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptor::CopyAttributes(v11, (unint64_t *)&v24);
      if (atomic_load((unint64_t *)&v24))
      {
        v13 = (const void *)atomic_load((unint64_t *)&v24);
        v14 = CFGetTypeID(v13);
        if (v14 == CFDictionaryGetTypeID())
        {
          v15 = (const __CFDictionary *)atomic_load((unint64_t *)&v24);
          if (CFDictionaryGetCount(v15))
          {
            v16 = atomic_load((unint64_t *)&v25);
            v17 = (const __CFDictionary *)atomic_load((unint64_t *)&v24);
            v21 = v17;
            v22 = v16;
            TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&v22, &v21, (unint64_t *)&v23);
            do
              v18 = (void *)__ldaxr((unint64_t *)&v23);
            while (__stlxr(0, (unint64_t *)&v23));

            if (v18)
              TCFRef<__CTFont const*>::Retain((unint64_t *)&v25, v18);

          }
        }
      }

    }
    v19 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v25);
    v20 = CTFontCreateWithFontDescriptor(v19, size, matrix);
  }
  else
  {
    v20 = 0;
  }

  return v20;
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  const __CTFontDescriptor *v1;
  id v3;

  if (!font)
    return 0;
  TFont::CopyDescriptor(*((TFont **)font + 5), 0, (unint64_t *)&v3);
  do
    v1 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

_anonymous_namespace_::TSingleAttrDescriptorCache *`anonymous namespace'::TSingleAttrDescriptorCache::TSingleAttrDescriptorCache(_anonymous_namespace_::TSingleAttrDescriptorCache *this)
{
  _QWORD *Table;
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t k;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15[2];
  id v16[2];
  id v17[2];

  *(_QWORD *)this = 0;
  Table = GetTable();
  if (Table && (v3 = Table[4]) != 0)
  {
    if (*(_DWORD *)v3 != TGenerationSeed::sGeneration)
    {
      *(_DWORD *)v3 = TGenerationSeed::sGeneration;
      v15[0] = (unint64_t)&off_1E15DEC08;
      v15[1] = 0;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)v17 = 0u;
      for (i = 24; i != 600; i += 48)
      v15[0] = (unint64_t)&off_1E15DEC08;

      *(_OWORD *)(v3 + 8) = xmmword_1849306B0;
      v5 = (uint64_t *)(v3 + 32);
      for (j = 1; j != 12; ++j)
      {
        *v5 = j;
        v5 += 6;
      }
      *(_QWORD *)(v3 + 560) = 0;
    }
  }
  else
  {
    v7 = operator new();
    v3 = v7;
    v8 = 0;
    *(_DWORD *)v7 = TGenerationSeed::sGeneration;
    do
    {
      v9 = v7 + v8;
      *(_QWORD *)(v9 + 24) = &off_1E15DEC08;
      *(_QWORD *)(v9 + 32) = 0;
      *(_OWORD *)(v9 + 40) = 0uLL;
      *(_OWORD *)(v9 + 56) = 0uLL;
      v8 += 48;
    }
    while (v8 != 576);
    *(_OWORD *)(v7 + 8) = xmmword_1849306B0;
    v10 = (uint64_t *)(v7 + 32);
    for (k = 1; k != 12; ++k)
    {
      *v10 = k;
      v10 += 6;
    }
    *(_QWORD *)(v7 + 560) = 0;
    v12 = GetTable();
    if (v12)
    {
      v13 = v12;
      v12 = (_QWORD *)v12[4];
      v13[4] = v3;
    }
  }
  *(_QWORD *)this = v3;
  return this;
}

_anonymous_namespace_::TSingleAttrDescriptor *`anonymous namespace'::TSingleAttrDescriptor::TSingleAttrDescriptor(_anonymous_namespace_::TSingleAttrDescriptor *this, id a2, void *a3, void *a4, const __CTFontDescriptor *a5)
{
  *(_QWORD *)this = &off_1E15DEC08;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a5;
  return this;
}

uint64_t TPerThreadLRUCache<`anonymous namespace'::TSingleAttrDescriptor,(ThreadSpecificKey)2,12ul>::DestroyCache(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  if (result)
  {
    v1 = result;
    for (i = 0; i != -576; i -= 48)
    {
      *(_QWORD *)(v1 + i + 552) = &off_1E15DEC08;

    }
    JUMPOUT(0x186DC03ACLL);
  }
  return result;
}

CGFont *CreateCopyOfFontWithVariation@<X0>(CGFont *a1@<X0>, const __CFDictionary *a2@<X1>, CGFont **a3@<X8>)
{
  CGFont *result;

  if (a1 && a2)
    result = CGFontCreateCopyWithVariations(a1, a2);
  else
    result = a1;
  *a3 = result;
  return result;
}

void CreateGraphicsVariationFromDict(const __CFDictionary *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t Count;
  size_t v11;
  unint64_t v12;
  void *v13;
  _QWORD context[3];
  unint64_t v15;
  void *v16;

  if (a1)
  {
    Count = CFDictionaryGetCount(a1);
    context[0] = a3;
    context[1] = a4;
    context[2] = 0;
    v15 = Count;
    if (Count >> 60)
      v11 = -1;
    else
      v11 = 16 * Count;
    v16 = operator new[](v11, MEMORY[0x1E0DE4E10]);
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)CGFontVariationFromDictCallback, context);
    v12 = v15;
    v13 = v16;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  *a2 = v12;
  *a5 = v13;
}

void TDelegateRun::~TDelegateRun(id *this)
{
  *this = &off_1E15DCB18;

  TRun::~TRun(this);
}

{
  *this = &off_1E15DCB18;

  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

void CTLineGetDefaultBounds(uint64_t a1, double *a2, double *a3, double *a4)
{
  _QWORD *v7;
  uint64_t RunWithCharIndex;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  id v13;
  double v14;
  double v15;
  double v16;

  v15 = 0.0;
  v16 = 0.0;
  v14 = 0.0;
  if (a1)
  {
    v7 = *(_QWORD **)(a1 + 40);
    if ((uint64_t)(v7[3] - v7[2]) >= 1)
    {
      RunWithCharIndex = TLine::FindRunWithCharIndex(*(TLine **)(a1 + 40), v7[9], 1);
      v9 = v7[2];
      if (RunWithCharIndex < (v7[3] - v9) >> 3)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * RunWithCharIndex) + 40);
        v13 = (id)0xAAAAAAAAAAAAAAAALL;
        TAttributes::OriginalFont((TAttributes *)(v10 + 40), (unint64_t *)&v13);
        if (atomic_load((unint64_t *)&v13))
        {
          v12 = atomic_load((unint64_t *)&v13);
          TFont::GetDefaultMetrics(*(TFont **)(v12 + 40), &v16, &v15, &v14);
        }

      }
    }
    if (a2)
      goto LABEL_8;
  }
  else if (a2)
  {
LABEL_8:
    *a2 = v16;
  }
  if (a3)
    *a3 = v15;
  if (a4)
    *a4 = v14;
}

void DrawGlyphsWithAdvancesAndTransform(TBaseFont **a1, const CGGlyph *a2, uint64_t a3, unint64_t a4, CGContext *a5, float64x2_t *a6, double *a7, uint64_t a8)
{
  __int128 v16;
  char *v17;
  uint64_t v18;
  const CGPoint *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  char **v28;
  const CGPoint *v29;
  void *v30;
  uint64_t v31;
  _OWORD v32[30];
  _OWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a8 + 104) && a6[1].f64[1] < 0.0)
    a7[3] = -a7[3];
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[28] = v16;
  v32[29] = v16;
  v32[26] = v16;
  v32[27] = v16;
  v32[24] = v16;
  v32[25] = v16;
  v32[22] = v16;
  v32[23] = v16;
  v32[20] = v16;
  v32[21] = v16;
  v32[18] = v16;
  v32[19] = v16;
  v32[16] = v16;
  v32[17] = v16;
  v32[15] = v16;
  v32[14] = v16;
  v32[13] = v16;
  v32[12] = v16;
  v32[11] = v16;
  v32[10] = v16;
  v32[9] = v16;
  v32[8] = v16;
  v32[7] = v16;
  v32[6] = v16;
  v32[4] = v16;
  v32[5] = v16;
  v32[2] = v16;
  v32[3] = v16;
  v32[0] = v16;
  v32[1] = v16;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v33 = v32;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&v29, a4);
  v17 = (char *)v30;
  bzero(v30, 16 * a4);
  v18 = 0;
  v30 = &v17[16 * a4];
  v19 = v29;
  v20 = (double *)(a3 + 8);
  v22 = v24;
  v21 = v26;
  do
  {
    v19[v18] = (const CGPoint)vaddq_f64(a6[2], vmlaq_n_f64(vmulq_n_f64(a6[1], v21), *a6, v22));
    v23 = *(v20 - 1);
    v22 = v22 + *v20 * a7[2] + *a7 * v23;
    v21 = v21 + *v20 * a7[3] + a7[1] * v23;
    ++v18;
    v20 += 2;
  }
  while (a4 != v18);
  v25 = v22;
  v27 = v21;
  DrawGlyphsAtPositions(a1, a2, v19, a4, a5, a8);
  CGContextSetTextPosition(a5, v25, v27);
  v28 = (char **)&v29;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  CFIndex *v3;
  double ImageBounds;
  double v5;
  CGFloat y;
  double v7;
  CGFloat width;
  double v9;
  CGFloat height;
  CGPoint TextPosition;
  double v12;
  double v13;
  double v14;
  double v15;
  CFRange v16;
  CGRect v17;
  CGRect v18;
  CGRect result;

  if (line)
  {
    v3 = (CFIndex *)*((_QWORD *)line + 5);
    v16.length = v3[18];
    v16.location = 0;
    ImageBounds = TLine::GetImageBounds((TLine *)v3, context, v16);
    y = v5;
    width = v7;
    height = v9;
    if (context)
    {
      TextPosition = CGContextGetTextPosition(context);
      v17.origin.x = ImageBounds;
      v17.origin.y = y;
      v17.size.width = width;
      v17.size.height = height;
      v18 = CGRectOffset(v17, TextPosition.x, TextPosition.y);
      ImageBounds = v18.origin.x;
      y = v18.origin.y;
      width = v18.size.width;
      height = v18.size.height;
    }
  }
  else
  {
    ImageBounds = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  v12 = ImageBounds;
  v13 = y;
  v14 = width;
  v15 = height;
  result.size.height = v15;
  result.size.width = v14;
  result.origin.y = v13;
  result.origin.x = v12;
  return result;
}

uint64_t TFramesetter::GetLineMetrics(uint64_t this, TLine *a2, const void *a3, int a4, int a5, int a6)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v13;
  uint64_t v14;
  id *v15;
  unint64_t LineBoundsOptions;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  TFont *v25;
  unint64_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;
  double Bounds;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  double rect;
  uint64_t rect_8;
  id v53;
  double v54;
  double v55;
  double v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v6 = *((_QWORD *)a2 + 15);
  if (*((double *)a2 + 16) == -1.79769313e308)
    v7 = 0.0;
  else
    v7 = *((double *)a2 + 16);
  *(_QWORD *)this = *((_QWORD *)a2 + 14);
  *(_QWORD *)(this + 8) = v6;
  *(double *)(this + 16) = v7;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = v6;
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v13 = (float64x2_t *)this;
    v14 = *(_QWORD *)(*(_QWORD *)v8 + 40);
    rect_8 = v14 + 40;
    v15 = *(id **)(v14 + 168);
    if (v15
      && (LineBoundsOptions = (unint64_t)TParagraphStyle::GetLineBoundsOptions(v15, a2),
          v17 = LineBoundsOptions,
          (LineBoundsOptions & 0x20) != 0))
    {
      Bounds = TLine::GetBounds(a2, LineBoundsOptions | 1);
      v34 = v33;
      v36 = v35;
      v38 = v37;
      rect = TLine::GetBounds(a2, v17 & 0xFFFFFFFFFFFFFFFELL);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      v57.origin.x = Bounds;
      v57.origin.y = v34;
      v57.size.width = v36;
      v57.size.height = v38;
      v13->f64[0] = CGRectGetMaxY(v57);
      v58.origin.x = Bounds;
      v58.origin.y = v34;
      v58.size.width = v36;
      v58.size.height = v38;
      v45 = fabs(CGRectGetMinX(v58));
      v13->f64[1] = v45;
      v13[2].f64[1] = v45;
      v59.origin.x = rect;
      v59.origin.y = v40;
      v59.size.width = v42;
      v59.size.height = v44;
      v46 = fabs(CGRectGetMinX(v59)) - v45;
      if (v46 < 0.0)
        v46 = 0.0;
      v47 = -0.0;
      if (v7 < 0.0)
        v47 = v7;
      v13[1].f64[0] = v47 + v46;
    }
    else if (v10 >= 1)
    {
      v18 = 0;
      v19 = v10 >> 3;
      if (v10 >> 3 <= 1)
        v19 = 1;
      v20 = 8 * v19;
      do
      {
        v21 = *(unint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + v18) + 40);
        v22 = v21[20];
        if (v22)
          v23 = *(double *)(v22 + 48);
        else
          v23 = 0.0;
        v24 = atomic_load(v21 + 7);
        v25 = *(TFont **)(v24 + 40);
        v55 = NAN;
        v56 = NAN;
        v54 = NAN;
        if (TFont::IsSystemUIFontAndForShaping(v25, (BOOL *)&v53))
        {
          v53 = (id)0xAAAAAAAAAAAAAAAALL;
          TAttributes::OriginalFont((TAttributes *)(v21 + 5), (unint64_t *)&v53);
          if (atomic_load((unint64_t *)&v53))
          {
            v27 = atomic_load((unint64_t *)&v53);
            TFont::GetDefaultMetrics(*(TFont **)(v27 + 40), &v56, &v55, &v54);
            v28.f64[0] = v23 + v56;
            v28.f64[1] = v55 - v23;
            *(int8x16_t *)v13 = vbslq_s8((int8x16_t)vcgtq_f64(v28, *v13), (int8x16_t)v28, *(int8x16_t *)v13);
            v29 = v13[1].f64[0];
            if (v29 < v54)
              v29 = v54;
            v13[1].f64[0] = v29;
          }

        }
        TFont::GetDefaultMetrics(v25, &v56, &v55, &v54);
        v30.f64[0] = v23 + v56;
        v30.f64[1] = v55 - v23;
        *(int8x16_t *)v13 = vbslq_s8((int8x16_t)vcgtq_f64(v30, *v13), (int8x16_t)v30, *(int8x16_t *)v13);
        v31 = v13[1].f64[0];
        if (v31 < v54)
          v31 = v54;
        v13[1].f64[0] = v31;
        v18 += 8;
      }
      while (v20 != v18);
    }
    return ApplyParagraphStyleSettings(rect_8, a3, a4, a5, a6, v13, (uint64_t)a2);
  }
  return this;
}

void TAttributes::OriginalFont(TAttributes *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFDictionary *v5;
  const void *Value;
  unint64_t v7;
  void *v8;
  const __CFDictionary *v9;
  const void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v14;
  void *v15;
  const __CTFont *v16;
  unint64_t v17;
  void *v18;
  id v19;

  *a2 = 0;
  if (atomic_load((unint64_t *)this))
  {
    v5 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    Value = CFDictionaryGetValue(v5, CFSTR("NSOriginalFont"));
    if (Value)
    {
      v19 = (id)_CTFontEnsureFontRef(Value);
      do
        v7 = __ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
      do
        v8 = (void *)__ldaxr(a2);
      while (__stlxr(v7, a2));
    }
    else
    {
      if (*((_BYTE *)this + 48))
      {
        v9 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        v10 = CFDictionaryGetValue(v9, CFSTR("NSFont"));
        v11 = (void *)_CTFontEnsureFontRef(v10);
      }
      else
      {
        v11 = (void *)atomic_load((unint64_t *)this + 2);
      }
      v19 = v11;
      do
        v12 = __ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
      do
        v8 = (void *)__ldaxr(a2);
      while (__stlxr(v12, a2));
    }

  }
  if (!atomic_load(a2))
  {
    if (qword_1ECDE7890 != -1)
      dispatch_once_f(&qword_1ECDE7890, 0, (dispatch_function_t)TAttributes::GetDefaultFont(void)::{lambda(void *)#1}::__invoke);
    v19 = (id)qword_1ECDE7860;
    do
      v14 = __ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    do
      v15 = (void *)__ldaxr(a2);
    while (__stlxr(v14, a2));

  }
  if (*((_BYTE *)this + 50))
  {
    v16 = (const __CTFont *)atomic_load(a2);
    VerticalCopyOf(v16, (CTFontRef *)&v19);
    do
      v17 = __ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    do
      v18 = (void *)__ldaxr(a2);
    while (__stlxr(v17, a2));

  }
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double Bounds;
  double v3;
  double v4;
  double v5;
  CGRect result;

  if (line)
  {
    Bounds = TLine::GetBounds(*((TLine **)line + 5), options);
  }
  else
  {
    Bounds = *MEMORY[0x1E0C9D628];
    v3 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v4 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v5 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = Bounds;
  return result;
}

double TLine::GetBounds(TLine *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id *v7;
  unint64_t v8;
  TLine *v9;
  CFRange v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  CGFloat x;
  CGFloat height;
  __int16 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  TFont *v26;
  double CrossStreamMinMax;
  double v28;
  _QWORD *v29;
  unint64_t v30;
  int *v31;
  int *v32;
  int *inited;
  double v34;
  unint64_t v35;
  CGFloat v36;
  const CGPath *v37;
  CGFloat y;
  CGFloat width;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CFIndex LeftHangersGlyphCountAndWidth;
  unint64_t v51;
  int *v52;
  double UnscaledTrackAmount;
  double v54;
  int *v55;
  uint64_t v56;
  double v57;
  CGFloat v58;
  CGFloat r1;
  CGFloat r1a;
  double v61;
  CGFloat v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68[2];
  double v69;
  id v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  id v77;
  double v78;
  double v79;
  unint64_t v80[2];
  CGRect BoundingBox;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v2 = a2;
  v80[0] = a2;
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3) - v4;
  if ((a2 & 0x40) != 0 && v5 >= 1)
  {
    v6 = a2 & 0xFFFFFFFFFFFFFFE3;
    v7 = *(id **)(*(_QWORD *)(*(_QWORD *)v4 + 40) + 168);
    if (v7)
      v8 = (unint64_t)TParagraphStyle::GetLineBoundsOptions(v7, (const void *)a2) & 0x1C;
    else
      v8 = 0;
    v2 = v8 | v6;
    v80[0] = v2;
  }
  if ((v2 & 0x18) == 8)
  {
    if ((v2 & 4) != 0)
    {
      v68[0] = 4;
      LeftHangersGlyphCountAndWidth = TLine::GetLeftHangersGlyphCountAndWidth(this, v68);
      v10.length = *((_QWORD *)this + 18)
                 - (TLine::GetRightHangersGlyphCountAndWidth(this, v68)
                  + LeftHangersGlyphCountAndWidth);
      v9 = this;
      v10.location = LeftHangersGlyphCountAndWidth;
    }
    else
    {
      v10.length = *((_QWORD *)this + 18);
      v9 = this;
      v10.location = 0;
    }
    return TLine::GetImageBounds(v9, 0, v10);
  }
  if ((v2 & 0x20) != 0)
  {
    v2 |= 2uLL;
    v80[0] = v2;
  }
  v11 = 0.0;
  if (v5 < 1 || (v12 = *((_QWORD *)this + 2), v13 = *((_QWORD *)this + 3), v12 == v13))
  {
    v14 = 0;
    v23 = 0.0;
    v62 = NAN;
    v63 = NAN;
    v58 = NAN;
    r1a = NAN;
    v61 = 0.0;
    v65 = 0.0;
    v67 = 0.0;
    v20 = 0.0;
    v19 = 0.0;
    v18 = 0.0;
  }
  else
  {
    v56 = v5;
    v14 = 0;
    x = NAN;
    height = NAN;
    v17 = *((_WORD *)this + 76);
    v18 = 0.0;
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v61 = 0.0;
    v62 = NAN;
    v63 = NAN;
    v23 = 0.0;
    do
    {
      v24 = *(unint64_t **)(*(_QWORD *)v12 + 40);
      v25 = atomic_load(v24 + 7);
      v26 = *(TFont **)(v25 + 40);
      v68[0] = -1;
      v78 = NAN;
      v79 = NAN;
      TFont::GetDefaultMetrics(v26, (double *)v68, &v79, &v78);
      if ((v80[0] & 2) != 0)
      {
        if ((v80[0] & 0x20) != 0)
        {
          v77 = (id)0xAAAAAAAAAAAAAAAALL;
          TAttributes::OriginalFont((TAttributes *)(v24 + 5), (unint64_t *)&v77);
          v75 = NAN;
          v76 = NAN;
          v73 = NAN;
          v74 = NAN;
          v29 = (_QWORD *)atomic_load((unint64_t *)&v77);
          if (CTFontGetLanguageAwareOutsetsForLanguage(v29, &v76, &v75, &v74, &v73))
          {
            v30 = atomic_load((unint64_t *)&v77);
            v31 = *(int **)(v30 + 40);
            v32 = v31 + 12;
            inited = v31 + 12;
            if (!v31[12])
              inited = TFont::InitStrikeMetrics((TFont *)v31);
            if (v21 < *((double *)inited + 1) + v75)
              v21 = *((double *)inited + 1) + v75;
            if (!*v32)
              v32 = TFont::InitStrikeMetrics((TFont *)v31);
            if (v22 < *((double *)v32 + 2) + v73)
              v22 = *((double *)v32 + 2) + v73;
            v34 = v61;
            if (v61 < v76)
              v34 = v76;
            v61 = v34;
            if (v23 < v74)
              v23 = v74;
          }
          v71 = NAN;
          v72 = NAN;
          if (TFont::GetWinMetrics((TBaseFont **)v26, &v72, &v71))
          {
            if (v21 < v72)
              v21 = v72;
            if (v22 < v71)
              v22 = v71;
          }
          v70 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, unint64_t *))(*v24 + 128))(&v70, v24);
          v35 = atomic_load((unint64_t *)&v70);
          v64 = v21;
          v66 = v22;
          if (v35)
          {
            v57 = v23;
            r1 = height;
            v36 = x;
            v37 = (const CGPath *)atomic_load((unint64_t *)&v70);
            BoundingBox = CGPathGetBoundingBox(v37);
            x = BoundingBox.origin.x;
            y = BoundingBox.origin.y;
            width = BoundingBox.size.width;
            height = BoundingBox.size.height;
            if (v14)
            {
              v82.origin.x = v36;
              v82.size.width = v62;
              v82.origin.y = v63;
              v82.size.height = r1;
              v86.origin.x = x;
              v86.origin.y = y;
              v86.size.width = width;
              v86.size.height = height;
              v83 = CGRectUnion(v82, v86);
              x = v83.origin.x;
              y = v83.origin.y;
              width = v83.size.width;
              height = v83.size.height;
            }
            v14 = 1;
            v23 = v57;
          }
          else
          {
            width = v62;
            y = v63;
          }

          v62 = width;
          v63 = y;
          v21 = v64;
          v22 = v66;
        }
      }
      else
      {
        CrossStreamMinMax = TRun::GetCrossStreamMinMax((TRun *)v24);
        *(double *)v68 = *(double *)v68 + v28;
        v79 = v79 - CrossStreamMinMax;
      }
      if ((v17 & 0x20) != 0)
        v40 = (*(double (**)(unint64_t *))(*v24 + 56))(v24);
      else
        v40 = *(double *)v68;
      if (v18 < v40)
        v18 = v40;
      if (v19 < v79)
        v19 = v79;
      if (v20 < v78)
        v20 = v78;
      v12 += 8;
    }
    while (v12 != v13);
    v65 = v21;
    v67 = v22;
    v58 = x;
    r1a = height;
    LOBYTE(v2) = v80[0];
    v5 = v56;
    v11 = 0.0;
  }
  if ((v2 & 1) != 0)
    v41 = -v19;
  else
    v41 = -(v20 + v19);
  if ((v2 & 1) != 0)
    v42 = v19 + v18;
  else
    v42 = v20 + v19 + v18;
  v43 = *((double *)this + 13);
  TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
  if (v44 != 0.0)
    v11 = 0.0 - v44;
  if ((v2 & 0x14) != 0)
  {
    TLine::GetLeftHangersGlyphCountAndWidth(this, v80);
    v11 = v11 + v45;
    v46 = v43 - v45;
    TLine::GetRightHangersGlyphCountAndWidth(this, v80);
    v43 = v46 - v47;
  }
  else if ((v2 & 0xA0) != 0)
  {
    TLine::GetTrailingWhitespace((uint64_t)this, (double *)v68);
    v43 = v43 - v69;
    if ((*((_WORD *)this + 76) & 8) != 0)
    {
      v11 = v11 + v69;
    }
    else if (v5 >= 1 && (v2 & 0x20) == 0)
    {
      v51 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) - 8) + 40) + 56));
      v52 = *(int **)(v51 + 40);
      UnscaledTrackAmount = TFont::GetUnscaledTrackAmount((TFont *)v52);
      if (UnscaledTrackAmount != 0.0)
      {
        v54 = UnscaledTrackAmount;
        if (v52[12])
          v55 = v52 + 12;
        else
          v55 = TFont::InitStrikeMetrics((TFont *)v52);
        v43 = v43 - v54 * *((double *)v55 + 5);
      }
    }
  }
  if ((v80[0] & 0x20) != 0)
  {
    v87.origin.x = v11 - v61;
    v87.origin.y = -v67;
    v87.size.width = v23 + v61 + v43;
    v87.size.height = v67 + v65;
    v84.origin.x = v11;
    v84.origin.y = v41;
    v84.size.width = v43;
    v84.size.height = v42;
    v85 = CGRectUnion(v84, v87);
    v11 = v85.origin.x;
    if (v14)
    {
      v88.origin.x = v58;
      v88.size.height = r1a;
      v88.size.width = v62;
      v88.origin.y = v63;
      *(_QWORD *)&v48 = (unint64_t)CGRectUnion(v85, v88);
      return v48;
    }
  }
  return v11;
}

double *TFont::GetDefaultMetrics(TFont *this, double *a2, double *a3, double *a4)
{
  double *result;
  double v9;
  double v10;
  uint64_t v11;
  double v12;

  if (*((_DWORD *)this + 12))
    result = (double *)((char *)this + 48);
  else
    result = (double *)TFont::InitStrikeMetrics(this);
  v10 = result[1];
  v9 = result[2];
  v11 = *((_QWORD *)result + 3);
  if (*((_BYTE *)result + 88) && (*(_BYTE *)this & 1) == 0)
  {
    result = (double *)GetTable();
    if (result)
      v12 = result[12];
    else
      v12 = 0.0;
    if (v12 == 0.0)
      v12 = 0.2;
    v10 = v10 + (v10 + v9) * v12;
  }
  *a2 = v10;
  *a3 = v9;
  *(_QWORD *)a4 = v11;
  return result;
}

double TRun::GetCrossStreamMinMax(TRun *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 39);
  if (v1)
    return *(double *)(v1 + 16);
  else
    return 0.0;
}

uint64_t CTFontGetUIFontType(const void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v1 = _CTFontEnsureFontRef(a1);
  if (!v1)
    return 0xFFFFFFFFLL;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1[5] + 400) + 776))(*(_QWORD *)(v1[5] + 400));
  if (!v2)
    return 0xFFFFFFFFLL;
  LODWORD(result) = MapTextStyleValue(v2);
  if (result >= 0x145)
    return 2;
  else
    return result;
}

uint64_t TComponentFont::GetTextStyle(TComponentFont *this)
{
  return *((_QWORD *)this + 94);
}

void TAttributes::HandleFontAttribute(const void *a1, _BYTE *a2)
{
  void *v3;

  v3 = (void *)_CTFontEnsureFontRef(a1);
  if (v3)
  {
    a2[8] = 1;
    TCFRef<__CTFont const*>::Retain((unint64_t *)(*(_QWORD *)a2 + 16), v3);
  }
}

_QWORD *CTFontGetTextStyle(const void *a1)
{
  _QWORD *result;

  result = _CTFontEnsureFontRef(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[5] + 400) + 776))(*(_QWORD *)(result[5] + 400));
  return result;
}

const void *_CTFontEnsureFontRef(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (TCFBase<TFont>::GetTypeID(void)::once != -1)
      dispatch_once_f(&TCFBase<TFont>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFont>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
    if (v2 == TCFBase<TFont>::fTypeID)
      return v1;
    else
      return 0;
  }
  return result;
}

double TLine::GetImageBounds(TLine *this, CGContext *a2, CFRange a3)
{
  CGFloat v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex length;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex location;
  BOOL v22;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v4 = *MEMORY[0x1E0C9D648];
  v3 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v6 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3) - v7;
  if (v8 >= 1)
  {
    length = a3.length;
    v12 = (unint64_t)v8 >> 3;
    v13 = *(_QWORD **)(*(_QWORD *)v7 + 40);
    v14 = (double *)v13[39];
    v15 = (double *)MEMORY[0x1E0C9D820];
    if (!v14)
      v14 = (double *)MEMORY[0x1E0C9D820];
    v16 = *v14;
    v32 = v14[1];
    v33 = v16;
    if (v12 <= 1)
      v17 = 1;
    else
      v17 = v12;
    v18 = 1;
    while (1)
    {
      v19 = v13[26];
      a3.length = v19 >= length + a3.location ? length + a3.location : v13[26];
      if (a3.location > 0 || length + a3.location < 1)
      {
        v20 = a3.length - a3.location;
        if (a3.location < v19)
          location = a3.location;
        else
          location = 0;
        if (a3.location >= v19)
          v20 = 0;
        v22 = a3.location >= 0;
        a3.location = a3.location >= 0 ? location : 0;
        a3.length = v22 ? v20 : 0;
      }
      else
      {
        a3.location = 0;
      }
      v34.origin.x = (*(double (**)(_QWORD *, CGContext *, CFIndex, CFIndex, double *, double *))(*v13 + 104))(v13, a2, a3.location, a3.length, &v33, &v32);
      x = v34.origin.x;
      y = v34.origin.y;
      width = v34.size.width;
      height = v34.size.height;
      if (CGRectIsNull(v34))
        break;
      v35.origin.x = v4;
      v35.origin.y = v3;
      v35.size.width = v6;
      v35.size.height = v5;
      if (!CGRectIsEmpty(v35))
      {
        v36.origin.x = x;
        v36.origin.y = y;
        v36.size.width = width;
        v36.size.height = height;
        if (CGRectIsEmpty(v36))
        {
          x = v4;
          y = v3;
          width = v6;
          height = v5;
        }
        else
        {
          v37.origin.x = v4;
          v37.origin.y = v3;
          v37.size.width = v6;
          v37.size.height = v5;
          v39.origin.x = x;
          v39.origin.y = y;
          v39.size.width = width;
          v39.size.height = height;
          v38 = CGRectUnion(v37, v39);
          x = v38.origin.x;
          y = v38.origin.y;
          width = v38.size.width;
          height = v38.size.height;
        }
      }
      if (v17 == v18)
        break;
      a3.location = 0;
      v13 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v18) + 40);
      v27 = (double *)v13[39];
      if (!v27)
        v27 = v15;
      v28 = *v27 + v33;
      length -= v19;
      ++v18;
      v32 = v27[1] + v32;
      v33 = v28;
      v5 = height;
      v6 = width;
      v3 = y;
      v4 = x;
    }
    TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
    v30 = v29;
    if (v29 == 0.0)
      v30 = 0.0;
    return x - v30;
  }
  return v4;
}

double TRun::GetImageBounds(TRun *this, CGContext *a2, CFRange a3, double *a4, double *a5)
{
  CFIndex length;
  CFIndex location;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  __int128 v21;
  CFIndex v22;
  char *v23;
  char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  __int128 v34;
  char *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  CGContext *v39;
  double *v40;
  double *v41;
  unint64_t v42;
  unint64_t v43;
  double ImageBounds;
  double *v46;
  double *v47;
  CGContext *v48;
  void **p_dst;
  void *__dst;
  void *v51;
  uint64_t v52;
  _OWORD v53[30];
  _OWORD *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  _OWORD v58[30];
  _OWORD *v59;
  uint64_t v60;
  CFRange v61;

  length = a3.length;
  v60 = *MEMORY[0x1E0C80C00];
  if (a3.length <= 0)
  {
    if (a3.length < 0)
      v13 = (_QWORD *)MEMORY[0x1E0C9D628];
    else
      v13 = (_QWORD *)MEMORY[0x1E0C9D648];
    return *(double *)v13;
  }
  else
  {
    location = a3.location;
    v11 = *((_QWORD *)this + 20);
    if (v11)
      v12 = *(double *)(v11 + 48);
    else
      v12 = 0.0;
    v14 = *((_QWORD *)this + 27);
    v15 = *(_QWORD *)(v14 + 32);
    if (v15 || (v18 = *(_QWORD *)(v14 + 24)) == 0)
    {
      v16 = 0;
      v17 = v15 + 16 * *((_QWORD *)this + 25);
    }
    else
    {
      v17 = v18 + 8 * *((_QWORD *)this + 25);
      v16 = 1;
    }
    v19 = *a4;
    v20 = *a5;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v58[28] = v21;
    v58[29] = v21;
    v58[26] = v21;
    v58[27] = v21;
    v58[24] = v21;
    v58[25] = v21;
    v58[22] = v21;
    v58[23] = v21;
    v58[20] = v21;
    v58[21] = v21;
    v58[18] = v21;
    v58[19] = v21;
    v58[16] = v21;
    v58[17] = v21;
    v58[15] = v21;
    v58[14] = v21;
    v58[13] = v21;
    v58[12] = v21;
    v58[11] = v21;
    v58[10] = v21;
    v58[9] = v21;
    v58[8] = v21;
    v58[7] = v21;
    v58[6] = v21;
    v58[5] = v21;
    v58[4] = v21;
    v58[3] = v21;
    v58[2] = v21;
    v58[1] = v21;
    v58[0] = v21;
    v56 = 0;
    v55 = 0;
    v57 = 0;
    v59 = v58;
    v22 = a3.location + a3.length;
    if (a3.location + a3.length
      && (std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100](&v55, a3.location + a3.length), v23 = (char *)v56, bzero(v56, 16 * v22), v56 = &v23[16 * v22], (v24 = v55) != 0))
    {
      v46 = a4;
      v47 = a5;
      v48 = a2;
      v25 = v20 + v12;
      if (v22 >= 1)
      {
        v26 = 0;
        v27 = 0;
        v28 = (double *)MEMORY[0x1E0C9D538];
        do
        {
          if ((*((_BYTE *)this + 225) & 0x10) != 0)
          {
            objc_msgSend(*((id *)this + 27), "originAtIndex:", v27 + *((_QWORD *)this + 25));
            v24 = v55;
          }
          else
          {
            v29 = *v28;
            v30 = v28[1];
          }
          v31 = (double *)&v24[v26];
          *v31 = v19 + v29;
          v31[1] = v25 + v30;
          if (v16)
          {
            v32 = (double *)(v17 + 8 * v27);
            v33 = 0.0;
          }
          else
          {
            v32 = (double *)(v17 + v26);
            v33 = *(double *)(v17 + v26 + 8);
          }
          v19 = v19 + *v32;
          v25 = v25 + v33;
          ++v27;
          v26 += 16;
        }
        while (v22 != v27);
      }
      *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v53[28] = v34;
      v53[29] = v34;
      v53[26] = v34;
      v53[27] = v34;
      v53[24] = v34;
      v53[25] = v34;
      v53[22] = v34;
      v53[23] = v34;
      v53[20] = v34;
      v53[21] = v34;
      v53[18] = v34;
      v53[19] = v34;
      v53[16] = v34;
      v53[17] = v34;
      v53[15] = v34;
      v53[14] = v34;
      v53[13] = v34;
      v53[12] = v34;
      v53[11] = v34;
      v53[10] = v34;
      v53[9] = v34;
      v53[8] = v34;
      v53[7] = v34;
      v53[6] = v34;
      v53[5] = v34;
      v53[4] = v34;
      v53[3] = v34;
      v53[2] = v34;
      v53[1] = v34;
      v53[0] = v34;
      __dst = 0;
      v51 = 0;
      v52 = 0;
      v54 = v53;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&__dst, length);
      v35 = (char *)v51;
      bzero(v51, 16 * length);
      v51 = &v35[16 * length];
      v36 = __dst;
      if (__dst)
      {
        v37 = *((_QWORD *)this + 39);
        if (!v37 || (v38 = *(_QWORD *)(v37 + 56), v38 == *(_QWORD *)(v37 + 64)))
        {
          v42 = length + 1;
          v40 = v47;
          v39 = v48;
          v41 = v46;
          do
          {
            *v36++ = kUnitSize;
            --v42;
          }
          while (v42 > 1);
        }
        else
        {
          memmove(__dst, (const void *)(v38 + 16 * location), 16 * length);
          v40 = v47;
          v39 = v48;
          v41 = v46;
        }
        *v41 = v19;
        *v40 = v25 - v12;
        v43 = atomic_load((unint64_t *)this + 7);
        v61.location = location;
        v61.length = length;
        ImageBounds = TStorageRange::GetImageBounds((TRun *)((char *)this + 192), *(const TFont **)(v43 + 40), v39, v61, (const CGPoint *)&v55[16 * location], (const CGSize *)__dst);
      }
      else
      {
        ImageBounds = *MEMORY[0x1E0C9D628];
      }
      p_dst = &__dst;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&p_dst);
    }
    else
    {
      ImageBounds = *MEMORY[0x1E0C9D628];
    }
    __dst = &v55;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__dst);
  }
  return ImageBounds;
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  double v5;
  __int128 v10;
  double v11;
  void **v13;
  _QWORD v14[3];
  _OWORD v15[30];
  _OWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 0.0;
  if (font && glyphs)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v15[28] = v10;
    v15[29] = v10;
    v15[26] = v10;
    v15[27] = v10;
    v15[24] = v10;
    v15[25] = v10;
    v15[22] = v10;
    v15[23] = v10;
    v15[20] = v10;
    v15[21] = v10;
    v15[18] = v10;
    v15[19] = v10;
    v15[16] = v10;
    v15[17] = v10;
    v15[15] = v10;
    v15[14] = v10;
    v15[13] = v10;
    v15[12] = v10;
    v15[11] = v10;
    v15[10] = v10;
    v15[9] = v10;
    v15[8] = v10;
    v15[7] = v10;
    v15[6] = v10;
    v15[4] = v10;
    v15[5] = v10;
    v15[2] = v10;
    v15[3] = v10;
    v15[0] = v10;
    v15[1] = v10;
    memset(v14, 0, sizeof(v14));
    v16 = v15;
    if (!advances)
    {
      std::vector<CGSize,TInlineBufferAllocator<CGSize,30ul>>::resize((uint64_t)v14, count);
      advances = (CGSize *)v14[0];
    }
    TFont::GetAdvancesForGlyphs(*((_QWORD *)font + 5), (uint64_t)glyphs, &advances->width, 2, count, orientation, 0, 0);
    v5 = v11;
    v13 = (void **)v14;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v13);
  }
  return v5;
}

char *TInlineBufferAllocator<CGPoint,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 480);
  result = *(char **)(a1 + 480);
  v4 = &result[16 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(16 * a2);
  }
  return result;
}

uint64_t ApplyParagraphStyleSettings(uint64_t a1, const void *a2, int a3, int a4, int a5, float64x2_t *a6, uint64_t a7)
{
  char v12;
  double v18;
  double v19;
  TParagraphStyle **v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const void *v25;
  double LineHeightMultiple;
  TParagraphStyle **v27;
  const void *v28;
  double MaximumLineHeight;
  TParagraphStyle **v30;
  const void *v31;
  double MinimumLineHeight;
  TParagraphStyle **v33;
  double ParagraphSpacingBefore;
  const void *v35;
  double LineSpacingAdjustment;
  uint64_t v37;
  double *f64;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  TParagraphStyle **v46;
  const void *v47;
  double ParagraphSpacing;
  TParagraphStyle **v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  double v54;
  double v56;
  uint64_t result;
  double v58;
  double v59;
  double v60;
  float64_t v61;
  double v62;
  double v63;

  v12 = (char)a2;
  if (a5)
  {
    __asm { FMOV            V1.2D, #0.5 }
    *a6 = vrndmq_f64(vaddq_f64(*a6, _Q1));
    v18 = a6[1].f64[0];
    v19 = floor(v18 + 0.5);
    if (v18 > 0.0)
      v18 = v19;
    a6[1].f64[0] = v18;
    if ((dyld_program_sdk_at_least() & 1) == 0)
      a6[2].f64[1] = a6->f64[1];
  }
  v20 = *(TParagraphStyle ***)(a1 + 128);
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  if (!v20)
    goto LABEL_38;
  LineHeightMultiple = TParagraphStyle::GetLineHeightMultiple(v20, a2);
  v27 = *(TParagraphStyle ***)(a1 + 128);
  v23 = LineHeightMultiple >= 0.0 ? LineHeightMultiple : 0.0;
  if (v27
    && ((MaximumLineHeight = TParagraphStyle::GetMaximumLineHeight(v27, v25),
         v30 = *(TParagraphStyle ***)(a1 + 128),
         MaximumLineHeight >= 0.0)
      ? (v24 = MaximumLineHeight)
      : (v24 = 0.0),
        v30
     && ((MinimumLineHeight = TParagraphStyle::GetMinimumLineHeight(v30, v28),
          v33 = *(TParagraphStyle ***)(a1 + 128),
          ParagraphSpacingBefore = 0.0,
          MinimumLineHeight >= 0.0)
       ? (v22 = MinimumLineHeight)
       : (v22 = 0.0),
         v33)))
  {
    LineSpacingAdjustment = TParagraphStyle::GetLineSpacingAdjustment(v33, v31);
    v37 = *(_QWORD *)(a1 + 128);
    f64 = a6[1].f64;
    v39 = LineSpacingAdjustment + a6[1].f64[0];
    a6[1].f64[0] = v39;
    v40 = 10000000.0;
    if (v37)
    {
      v41 = 0.0;
      if (*(_BYTE *)(v37 + 8))
      {
        v42 = TParagraphStyle::GetNative(*(TParagraphStyle **)v37, v35)[1];
        v41 = 0.0;
        if (v42)
          v41 = *(double *)(v42 + 40);
      }
      if (v41 >= v39 && v41 != 0.0)
        v39 = v41;
      v44 = *(_QWORD *)(a1 + 128);
      if (v44)
      {
        v40 = 10000000.0;
        if (*(_BYTE *)(v44 + 8))
        {
          v45 = TParagraphStyle::GetNative(*(TParagraphStyle **)v44, v35)[1];
          if (v45)
            v40 = *(double *)(v45 + 32);
        }
        v46 = *(TParagraphStyle ***)(a1 + 128);
        if (v46)
        {
          ParagraphSpacing = TParagraphStyle::GetParagraphSpacing(v46, v35);
          v49 = *(TParagraphStyle ***)(a1 + 128);
          v21 = ParagraphSpacing >= 0.0 ? ParagraphSpacing : 0.0;
          if (v49)
            ParagraphSpacingBefore = TParagraphStyle::GetParagraphSpacingBefore(v49, v47);
        }
      }
    }
  }
  else
  {
LABEL_38:
    f64 = a6[1].f64;
    v39 = a6[1].f64[0] + 0.0;
    a6[1].f64[0] = v39;
    v40 = 10000000.0;
    ParagraphSpacingBefore = 0.0;
  }
  if (ParagraphSpacingBefore < 0.0)
    ParagraphSpacingBefore = 0.0;
  v50 = a6->f64[0];
  v51 = a6->f64[1];
  if (v23 > 0.0)
  {
    v50 = v50 - (v50 + v51 - v23 * (v50 + v51));
    a6->f64[0] = v50;
  }
  v52 = v51 + v50;
  v53 = v52 <= v24 || v24 <= 0.0;
  v54 = v52 - v24;
  if (v53)
    v54 = 0.0;
  if (v52 >= v22 || v22 <= 0.0)
    v56 = v54;
  else
    v56 = v52 - v22;
  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
  {
    a6->f64[0] = a6->f64[0] - v56;
    goto LABEL_65;
  }
  if (v56 == 0.0)
  {
    if (a7)
    {
      v62 = a6[2].f64[1];
      if (v62 != a6->f64[1])
        goto LABEL_64;
    }
  }
  else
  {
    v58 = v56 * 0.5;
    v59 = floor(v56 * 0.5 + 0.5);
    if (a5)
      v58 = v59;
    v60 = a6->f64[0] - v58;
    v61 = a6->f64[1] - (v56 - v58);
    a6->f64[0] = v60;
    a6->f64[1] = v61;
    a6[2].f64[1] = v61;
    if (a7)
    {
      *(double *)(a7 + 112) = v60;
      v62 = a6->f64[1];
LABEL_64:
      *(double *)(a7 + 120) = v62;
    }
  }
LABEL_65:
  v63 = *f64;
  if (*f64 < v39)
    v63 = v39;
  if (v40 < v63)
    v63 = v40;
  *f64 = v63;
  if (a3 && (v12 & 1) == 0)
    a6[1].f64[1] = ParagraphSpacingBefore;
  if (a4)
    a6[2].f64[0] = v21;
  return result;
}

double TParagraphStyle::GetParagraphSpacingBefore(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)(v4 + 56);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle paragraphSpacingBefore](v3, sel_paragraphSpacingBefore);
  }
  return result;
}

double TParagraphStyle::GetLineSpacingAdjustment(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)(v4 + 24);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle lineSpacing](v3, sel_lineSpacing);
  }
  return result;
}

double TParagraphStyle::GetLineHeightMultiple(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)v4;
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle lineHeightMultiple](v3, sel_lineHeightMultiple);
  }
  return result;
}

double TParagraphStyle::GetMinimumLineHeight(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)(v4 + 16);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle minimumLineHeight](v3, sel_minimumLineHeight);
  }
  return result;
}

double TParagraphStyle::GetMaximumLineHeight(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)(v4 + 8);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle maximumLineHeight](v3, sel_maximumLineHeight);
  }
  return result;
}

double TParagraphStyle::GetParagraphSpacing(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;
  uint64_t v4;
  double result;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
  {
    v4 = TParagraphStyle::GetNative(v3, a2)[1];
    if (v4)
      return *(double *)(v4 + 48);
    else
      return 0.0;
  }
  else
  {
    -[TParagraphStyle paragraphSpacing](v3, sel_paragraphSpacing);
  }
  return result;
}

void TAATKerxEngine::~TAATKerxEngine(id **this)
{
  void **v2;
  id *v3;
  void **v4;

  std::unique_ptr<TAATAnkrTable>::reset[abi:nn180100](this + 50, 0);
  v2 = this[49];
  this[49] = 0;
  if (v2)
    std::default_delete<TAATControlPointAccess>::operator()[abi:nn180100]((uint64_t)(this + 49), v2);
  v4 = (void **)(this + 14);
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
  std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)(this + 6), this[7]);
  v3 = this[3];
  if (v3)
  {
    this[4] = v3;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

const CGPoint *__cdecl CTRunGetPositionsPtr(CTRunRef run)
{
  __n128 *v1;
  const CGPoint *result;

  if (!run)
    return 0;
  v1 = (__n128 *)*((_QWORD *)run + 5);
  if ((v1[14].n128_u8[1] & 8) != 0)
    return 0;
  TRun::GetPositions(v1, 0);
  return result;
}

void TAttributes::HandleShadowAttribute(void *a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  char v6;

  if (a1)
  {
    v4 = objc_msgSend(a1, sel_shadowColor);
    v5 = *a2;
    v6 = *(_BYTE *)(*a2 + 136);
    if (v4)
    {
      *(_BYTE *)(v5 + 136) = v6 | 8;
      TCFRef<__CTFont const*>::Retain((unint64_t *)(v5 + 40), a1);
    }
    else
    {
      *(_BYTE *)(v5 + 136) = v6 | 0x10;
    }
  }
}

void TLine::DrawGlyphs(TLine *this, CGContextRef c)
{
  CGPoint TextPosition;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*((_WORD *)this + 77) & 2) != 0)
  {
    TLine::DrawTransformedGlyphs(this, c);
  }
  else
  {
    TextPosition = CGContextGetTextPosition(c);
    TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
    v6 = v5;
    if (v5 == 0.0)
      v6 = 0.0;
    v7 = TextPosition.x - v6;
    CGContextSetTextPosition(c, TextPosition.x - v6, TextPosition.y);
    TLine::DrawBackground(this, c);
    v8 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = (unint64_t)v8 >> 3;
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v11) + 40);
        (*(void (**)(uint64_t, CGContextRef, _QWORD, _QWORD))(*(_QWORD *)v14 + 24))(v14, c, 0, *(_QWORD *)(v14 + 208));
        v9 |= (*(_BYTE *)(v14 + 177) & 4) >> 2;
        v10 |= (*(_BYTE *)(v14 + 177) & 0x10) >> 4;
        ++v11;
      }
      while (v13 != v11);
      if ((v9 & 1) != 0)
      {
        CGContextSetTextPosition(c, v7, TextPosition.y);
        TLine::DrawUnderlines(this, c);
      }
      if ((v10 & 1) != 0)
      {
        CGContextSetTextPosition(c, v7, TextPosition.y);
        TLine::DrawStrikethroughs(this, c);
      }
    }
  }
}

void TSplicedFont::CreateCascadeList(TSplicedFont *this@<X0>, const TSplicedFontDict *a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFDictionary *v5;
  int v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  int v11;
  const __CFDictionary *v12;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  void *v16;
  TDescriptor **v17;
  TDescriptor **v18;
  TDescriptor *v19;
  unint64_t v20;
  void *v21;
  id v22;
  __CFArray *v23;
  void *info;
  const __CFURL *Value;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  const void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const TBaseFont *v35;
  TComponentFont *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *ComponentAttribute;
  unint64_t *v45;
  int v46;
  unint64_t v47;
  void *v48;
  const __CFDictionary *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  id v53;
  void *v54;
  const __CFDictionary *v55;
  void *v56;
  const __CFNumber *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  void *v62;
  const __CFURL *v63;
  __CFArray *v64;
  const __CFArray *v65;
  unint64_t v66;
  unint64_t *v67;
  CFIndex Count;
  const __CFArray *theArray;
  CFMutableArrayRef Mutable;
  id v71;
  __CFString v72;

  v5 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (!v5)
    goto LABEL_123;
  v6 = (int)a2;
  theArray = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("Components"));
  if (!theArray)
    goto LABEL_123;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v7 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v7)
    v6 |= CFDictionaryGetValue(v7, CFSTR("FontMetrics")) != 0;
  if (TSplicedFontDict::IsInvisibleSplice(this))
    v6 |= 2u;
  if (TSplicedFontDict::ComponentHasVariations(this))
    v6 |= 4u;
  if (TSplicedFontDict::ComponentHasOpticalSizeAxis(this))
    v6 |= 0x4000u;
  v8 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v8 && CFDictionaryGetValue(v8, CFSTR("language")))
    v6 |= 0x40000u;
  v9 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  v67 = a3;
  if (v9 && CFDictionaryGetValue(v9, CFSTR("lineSpacingOverride")))
  {
    v6 |= 0x80000u;
  }
  else
  {
    v10 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    if (v10 && CFDictionaryGetValue(v10, CFSTR("languageAwareLineHeightRatio")))
      v6 |= 8u;
  }
  if (TSplicedFontDict::IsTextStyle(this))
    v11 = v6 | 0x800;
  else
    v11 = v6;
  if ((v11 & 0x800) != 0
    || (v12 = (const __CFDictionary *)atomic_load((unint64_t *)this)) != 0
    && CFDictionaryGetValue(v12, CFSTR("NSCTFontUIFontDesignTrait")))
  {
    v11 |= 0x8000u;
  }
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v13);
      if (!CFDictionaryGetValue(ValueAtIndex, CFSTR("Components")))
        goto LABEL_37;
      v72.info = 0xAAAAAAAAAAAAAAAALL;
      v72.isa = ValueAtIndex;
      CreateSplicedFontFromStash(&v72.info, &v72, 0, 0);

      if (!atomic_load((unint64_t *)&v72.info))
        break;
      v16 = (void *)atomic_load((unint64_t *)&v72.info);
      v17 = v16;
      v18 = v17;
      v19 = v17[5];
      if ((*((_DWORD *)v19 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(v17[5], 0, 0.0);
      v20 = atomic_load((unint64_t *)v19 + 4);

      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v20 + 16))(v20) != 1414743620
        || ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 840))(v20) & 1) == 0)
      {
        break;
      }
      v21 = (void *)atomic_load((unint64_t *)&v72.info);
      v22 = v21;
      v23 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v23, v22);

      info = (void *)v72.info;
LABEL_118:

      if (++v13 == Count)
        goto LABEL_119;
    }

LABEL_37:
    Value = (const __CFURL *)CFDictionaryGetValue(ValueAtIndex, CFSTR("name"));
    if (!Value)
    {
LABEL_117:
      info = Value;
      goto LABEL_118;
    }
    v26 = v11;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("opticalSize")))
    {
      if (TSplicedFontDict::IsSystemUISplice(this))
        v27 = 102416;
      else
        v27 = 16;
      v26 = v27 | v11;
    }
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("hmtxPerAltFont"))
      || CFDictionaryGetValue(ValueAtIndex, CFSTR("hmtxOverride")))
    {
      v26 |= 0x20u;
    }
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("UnicodeRange")))
      v26 |= 0x80u;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("UnicodeCharSet")))
      v26 |= 0x200u;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("UnicodeCharSetTrim")))
      v26 |= 0x400u;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("languagePropertiesCacheKey")))
      v26 |= 0x10000u;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("capHeight")))
      v28 = v26 | 0x2000;
    else
      v28 = v26;
    if ((v28 & 4) != 0 || !CFDictionaryGetValue(ValueAtIndex, CFSTR("hasVariations")))
    {
      v29 = v28;
      if ((v28 & 2) == 0)
      {
LABEL_63:
        if ((v29 & 0x20000) != 0)
          v30 = 1;
        else
          v30 = 5;
        v31 = CFDictionaryGetValue(ValueAtIndex, CFSTR("url"));
        v72.isa = (void *)0xAAAAAAAAAAAAAAAALL;
        CopyComponentFontDescriptorWithBaseSystemFallback(&v72, Value, (uint64_t)v31, v30);
        v32 = atomic_load((unint64_t *)&v72);
        if (v32 && ((v29 & 1) != 0 || ValueAtIndex && CFDictionaryGetCount(ValueAtIndex) >= 2))
        {
          v33 = atomic_load((unint64_t *)&v72);
          v34 = *(_QWORD *)(v33 + 40);
          if ((*(_DWORD *)(v34 + 16) & 0x80000000) == 0)
            TDescriptor::InitBaseFont((TDescriptor *)v34, 0, 0.0);
          v35 = (const TBaseFont *)atomic_load((unint64_t *)(v34 + 32));
          v36 = (TComponentFont *)operator new();
          TComponentFont::TComponentFont(v36, v35, ValueAtIndex, this);
          v37 = TCFBase<TDescriptor>::Allocate();
          if (v37)
          {
            *(_QWORD *)(v37 + 48) = &off_1E15DCAF0;
            *(_QWORD *)(v37 + 16) = 0;
            *(_QWORD *)(v37 + 24) = TDescriptor::Hash;
            *(_QWORD *)(v37 + 32) = 0;
            *(_QWORD *)(v37 + 40) = v37 + 48;
            *(_QWORD *)(v37 + 56) = 0;
            *(_DWORD *)(v37 + 64) = 0x80000000;
            v38 = (unsigned int *)((char *)v36 + 8);
            *(_QWORD *)(v37 + 72) = 0;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            *(_QWORD *)(v37 + 80) = v36;
            *(_QWORD *)(v37 + 88) = 0;
            v72.info = v37;
            do
              v40 = (void *)__ldaxr((unint64_t *)&v72.info);
            while (__stlxr(0, (unint64_t *)&v72.info));
            v71 = v40;

          }
          else
          {
            v71 = 0;
          }
          do
            Value = (const __CFURL *)__ldaxr((unint64_t *)&v71);
          while (__stlxr(0, (unint64_t *)&v71));

        }
        else
        {
          do
            Value = (const __CFURL *)__ldaxr((unint64_t *)&v72);
          while (__stlxr(0, (unint64_t *)&v72));
        }
        goto LABEL_115;
      }
    }
    else
    {
      v29 = v28 | 4;
      if ((v28 & 0x4000) == 0 && CFDictionaryGetValue(ValueAtIndex, CFSTR("hasOpticalSizeAxis")))
        v29 = v28 | 0x4004;
      if ((v29 & 2) == 0)
        goto LABEL_63;
    }
    v41 = operator new();
    TBaseFont::TBaseFont((TBaseFont *)v41, 0);
    *(_QWORD *)v42 = &off_1E15DD370;
    *(_DWORD *)(v42 + 712) = v29;
    v43 = (void *)atomic_load((unint64_t *)this);
    *(_QWORD *)(v41 + 720) = v43;
    *(_OWORD *)(v41 + 728) = 0u;
    *(_QWORD *)(v41 + 744) = ValueAtIndex;
    *(_QWORD *)(v41 + 752) = 0;
    ComponentAttribute = (void *)TComponentFont::GetComponentAttribute((TComponentFont *)v41, CFSTR("name"));
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v41 + 96), ComponentAttribute);
    *(_QWORD *)(v41 + 752) = TComponentFont::GetComponentAttribute((TComponentFont *)v41, CFSTR("NSCTFontUIUsageAttribute"));
    *(_QWORD *)v41 = &off_1E15DDF90;
    v45 = (unint64_t *)(v41 + 760);
    *(_DWORD *)(v41 + 796) = 0;
    *(_BYTE *)(v41 + 800) = 0;
    *(_OWORD *)(v41 + 760) = 0u;
    *(_OWORD *)(v41 + 776) = 0u;
    *(_WORD *)(v41 + 792) = 0;
    v46 = *(_DWORD *)(v41 + 712);
    if ((v46 & 0x80) != 0)
    {
      v72.info = (uint64_t)(id)TComponentFont::GetComponentAttribute((TComponentFont *)v41, CFSTR("UnicodeRange"));
      do
        v47 = __ldaxr((unint64_t *)&v72.info);
      while (__stlxr(0, (unint64_t *)&v72.info));
      do
        v48 = (void *)__ldaxr(v45);
      while (__stlxr(v47, v45));

      v46 = *(_DWORD *)(v41 + 712);
      if ((v46 & 4) == 0)
      {
LABEL_83:
        if ((v46 & 0x4000) == 0)
        {
LABEL_103:
          v59 = TCFBase<TDescriptor>::Allocate();
          if (v59)
          {
            *(_QWORD *)(v59 + 48) = &off_1E15DCAF0;
            *(_QWORD *)(v59 + 16) = 0;
            *(_QWORD *)(v59 + 24) = TDescriptor::Hash;
            *(_QWORD *)(v59 + 32) = 0;
            *(_QWORD *)(v59 + 40) = v59 + 48;
            *(_QWORD *)(v59 + 56) = 0;
            *(_DWORD *)(v59 + 64) = -2147482624;
            v60 = (unsigned int *)(v41 + 8);
            *(_QWORD *)(v59 + 72) = 0;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
            *(_QWORD *)(v59 + 80) = v41;
            *(_QWORD *)(v59 + 88) = 0;
            v72.info = v59;
            do
              v62 = (void *)__ldaxr((unint64_t *)&v72.info);
            while (__stlxr(0, (unint64_t *)&v72.info));
            v72.isa = v62;

          }
          else
          {
            v72.isa = 0;
          }
          do
            Value = (const __CFURL *)__ldaxr((unint64_t *)&v72);
          while (__stlxr(0, (unint64_t *)&v72));
LABEL_115:

          if (Value)
          {
            v63 = Value;
            v64 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArrayAppendValue(v64, v63);

          }
          goto LABEL_117;
        }
LABEL_99:
        v72.info = 0;
        v57 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("opticalSize"));
        if (v57)
        {
          CFNumberGetValue(v57, kCFNumberDoubleType, &v72.info);
          v58 = v72.info;
        }
        else
        {
          v72.info = 0;
          v58 = 0;
        }
        TTenuousComponentFont::InitWithOpticalSize((TTenuousComponentFont *)v41, *(double *)&v58);
        goto LABEL_103;
      }
    }
    else if ((v46 & 4) == 0)
    {
      goto LABEL_83;
    }
    v49 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    if (v49)
    {
      v50 = (void *)CFDictionaryGetValue(v49, CFSTR("fontURL"));
      if (v50)
      {
        v51 = (unint64_t *)(v41 + 80);
        v52 = atomic_load((unint64_t *)(v41 + 80));
        if (v50 != (void *)v52)
        {
          v53 = v50;
          do
            v54 = (void *)__ldaxr(v51);
          while (__stlxr((unint64_t)v53, v51));

        }
      }
    }
    v55 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    if (v55)
      v56 = (void *)CFDictionaryGetValue(v55, CFSTR("path"));
    else
      v56 = 0;
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v41 + 88), v56);
    if ((*(_DWORD *)(v41 + 712) & 0x4000) == 0)
      goto LABEL_103;
    goto LABEL_99;
  }
LABEL_119:
  v65 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
  if (!CFArrayGetCount(v65))
  {

    a3 = v67;
LABEL_123:
    *a3 = 0;
    return;
  }
  do
    v66 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *v67 = v66;

}

void TBaseFont::TBaseFont(TBaseFont *this, id a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E15DE850;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a2;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_QWORD *)((char *)this + 180) = 0x3000000010000000;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v4 = (_OWORD *)MEMORY[0x1E0C9D538];
  v5 = (_OWORD *)MEMORY[0x1E0C9D648];
  *((_DWORD *)this + 62) = 0;
  v6 = v5[1];
  *((_OWORD *)this + 19) = *v5;
  *((_OWORD *)this + 20) = v6;
  *((_OWORD *)this + 18) = *v4;
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 98) = 1065353216;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 1065353216;
  *((_WORD *)this + 220) = -1;
  *(_QWORD *)((char *)this + 460) = 0;
  *((_DWORD *)this + 117) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *(_QWORD *)((char *)this + 452) = 0;
  *((_QWORD *)this + 60) = (char *)this + 472;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 68) = (char *)this + 512;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  TBaseFont::Init(this, (CGFont *)a2);
}

void TBaseFont::Init(TBaseFont *this, CGFont *a2)
{
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  const __CFURL *v10;
  _BOOL4 v11;
  unint64_t *v12;
  const __CFURL *v14;
  CFURLRef v15;
  void *v16;
  unint64_t v17;
  void *v18;
  const __CFString *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t *v24;
  CFStringRef v26;
  id v27;
  const __CFURL *v28;
  unint64_t v29;
  void *v30;
  id v31;
  BOOL v32;
  id v33;

  v32 = -86;
  if (!a2)
  {
    if (!atomic_load((unint64_t *)this + 10))
      return;
    v10 = (const __CFURL *)atomic_load((unint64_t *)this + 10);
    v11 = IsInMemoryFontURL(v10);
    v32 = v11;
    if (v11)
      goto LABEL_6;
LABEL_11:
    v12 = (unint64_t *)((char *)this + 88);
    if (!atomic_load((unint64_t *)this + 11))
    {
      v14 = (const __CFURL *)atomic_load((unint64_t *)this + 10);
      if (v14)
      {
        v33 = 0;
        if (CFURLGetBaseURL(v14))
        {
          v15 = CFURLCopyAbsoluteURL(v14);
          do
            v16 = (void *)__ldaxr((unint64_t *)&v33);
          while (__stlxr((unint64_t)v15, (unint64_t *)&v33));

          v14 = (const __CFURL *)atomic_load((unint64_t *)&v33);
        }
        v31 = (id)CFURLCopyFileSystemPath(v14, kCFURLPOSIXPathStyle);

      }
      else
      {
        v31 = 0;
      }
      do
        v17 = __ldaxr((unint64_t *)&v31);
      while (__stlxr(0, (unint64_t *)&v31));
      do
        v18 = (void *)__ldaxr(v12);
      while (__stlxr(v17, v12));

    }
    v19 = (const __CFString *)atomic_load(v12);
    if (IsSystemFontPath(v19))
    {
      v20 = (unsigned int *)((char *)this + 180);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 | 0x10, v20));
      v22 = (unsigned int *)((char *)this + 184);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 | 0x10, v22));
    }
    goto LABEL_27;
  }
  CreateFontURLFromFont(a2, &v32, (unint64_t *)&v33);
  v4 = (unint64_t *)((char *)this + 80);
  do
    v5 = __ldaxr((unint64_t *)&v33);
  while (__stlxr(0, (unint64_t *)&v33));
  do
    v6 = (void *)__ldaxr(v4);
  while (__stlxr(v5, v4));

  if (!v32)
    goto LABEL_11;
LABEL_6:
  v7 = (unsigned int *)((char *)this + 180);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 | 0x20000000, v7));
LABEL_27:
  v24 = (unint64_t *)((char *)this + 96);
  if (!atomic_load((unint64_t *)this + 12))
  {
    if (a2)
    {
      v26 = CGFontCopyPostScriptName(a2);
      do
        v27 = (id)__ldaxr(v24);
      while (__stlxr((unint64_t)v26, v24));
    }
    else
    {
      v28 = (const __CFURL *)atomic_load((unint64_t *)this + 10);
      CopyPostScriptNameFromFontURL(v28, &v33);
      do
        v29 = __ldaxr((unint64_t *)&v33);
      while (__stlxr(0, (unint64_t *)&v33));
      do
        v30 = (void *)__ldaxr(v24);
      while (__stlxr(v29, v24));

      v27 = v33;
    }

  }
}

BOOL IsInMemoryFontURL(const __CFURL *a1)
{
  __int128 v1;
  CFIndex BytesForComponent;
  _BOOL8 v3;
  UInt8 **v5;
  UInt8 *v6[3];
  _OWORD v7[12];
  _OWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[11] = v1;
  v7[10] = v1;
  v7[9] = v1;
  v7[8] = v1;
  v7[7] = v1;
  v7[6] = v1;
  v7[4] = v1;
  v7[5] = v1;
  v7[2] = v1;
  v7[3] = v1;
  v7[0] = v1;
  v7[1] = v1;
  memset(v6, 0, sizeof(v6));
  v8 = v7;
  BytesForComponent = GetBytesForComponent(a1, v6);
  v3 = BytesForComponent != -1 && strncmp((const char *)&v6[0][BytesForComponent], "iNmEmOrYcGfOnT_", 0xFuLL) == 0;
  v5 = v6;
  std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v5);
  return v3;
}

CFIndex GetBytesForComponent(const __CFURL *a1, UInt8 **a2)
{
  CFIndex v4;
  CFIndex v5;
  unint64_t v6;
  UInt8 *v7;
  unint64_t v8;

  v4 = CFURLGetBytes(a1, 0, 0);
  if (v4 == -1)
    return -1;
  v5 = v4;
  if (v4 > 383)
    return -1;
  v6 = v4 + 1;
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (v8 <= v4)
  {
    std::vector<unsigned char,TInlineBufferAllocator<unsigned char,192ul>>::__append(a2, v6 - v8);
    v7 = *a2;
  }
  else if (v6 < v8)
  {
    a2[1] = &v7[v6];
  }
  (*a2)[CFURLGetBytes(a1, v7, v5)] = 0;
  return CFURLGetByteRangeForComponent(a1, kCFURLComponentNetLocation, 0).location;
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,192ul>>::__append(_QWORD *a1, size_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;

  v6 = a1 + 1;
  v4 = (char *)a1[1];
  v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v12 = &v4[a2];
      bzero(v4, a2);
      v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    v7 = &v4[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v5 - *a1;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (void *)a1[27];
      if ((char *)v11 + v10 <= (char *)(a1 + 27))
        a1[27] = (char *)v11 + v10;
      else
        v11 = operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[(_QWORD)v11];
    v14 = (char *)v11 + v10;
    v15 = &v13[a2];
    bzero(v13, a2);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      v20 = (char *)(a1 + 27);
      if (a1 + 3 <= (_QWORD *)v16 && v20 > v16)
      {
        if (v19 == *(_QWORD *)v20)
          *(_QWORD *)v20 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

void TTenuousComponentFont::InitWithOpticalSize(TTenuousComponentFont *this, double a2)
{
  const __CFDictionary *v5;
  const __CFNumber *Value;
  double v7;
  const __CFDictionary *v8;
  const __CFNumber *v9;
  const __CFDictionary *v10;
  const __CFNumber *v11;
  void *v12;
  const __CFDictionary *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  double v17;
  id v18;
  id v19;
  double valuePtr;

  if ((*((_BYTE *)this + 713) & 0x40) != 0)
  {
    v19 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 128))(&v19);
    if (atomic_load((unint64_t *)&v19))
    {
      v18 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TTenuousComponentFont *))(*(_QWORD *)this + 112))(&v18, this);
      v17 = NAN;
      v5 = (const __CFDictionary *)atomic_load((unint64_t *)&v19);
      Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("NSCTVariationAxisMinimumValue"));
      CFNumberGetValue(Value, kCFNumberDoubleType, &v17);
      v7 = v17;
      if (v17 <= a2)
      {
        valuePtr = NAN;
        v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v19);
        v9 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("NSCTVariationAxisMaximumValue"));
        CFNumberGetValue(v9, kCFNumberDoubleType, &valuePtr);
        if (valuePtr >= a2)
          v7 = a2;
        else
          v7 = valuePtr;
      }
      v10 = (const __CFDictionary *)atomic_load((unint64_t *)&v19);
      v11 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("NSCTVariationAxisDefaultValue"));
      if (v7 == 0.0 || v11 && (valuePtr = NAN, CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr), valuePtr == v7))
      {
        v12 = (void *)atomic_load((unint64_t *)&v18);
        TCFRef<__CTFont const*>::Retain((unint64_t *)this + 96, v12);
        *((_BYTE *)this + 792) = 1;
      }
      else
      {
        v13 = (const __CFDictionary *)atomic_load((unint64_t *)&v18);
        CopyVariationWithValue(v13, (const __CFNumber *)&unk_1E1617110, v7, (unint64_t *)&valuePtr);
        v14 = (unint64_t *)((char *)this + 768);
        do
          v15 = __ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        do
          v16 = (void *)__ldaxr(v14);
        while (__stlxr(v15, v14));

      }
    }

  }
}

void TTenuousComponentFont::CopyDefaultVariation(TTenuousComponentFont *this, uint64_t a2)
{
  const __CFDictionary *v4;
  void *Value;
  unint64_t v6;
  id v7;

  if ((*(_BYTE *)(a2 + 712) & 4) != 0)
  {
    v4 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 720));
    if (v4 && (Value = (void *)CFDictionaryGetValue(v4, CFSTR("variations"))) != 0)
    {
      v7 = Value;
      do
        v6 = __ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));
      *(_QWORD *)this = v6;

    }
    else
    {
      TBaseFont::CopyVariation((TBaseFont *)a2, (unint64_t *)this);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

BOOL TSplicedFontDict::IsSystemUISplice(TSplicedFontDict *this)
{
  const __CFDictionary *v2;
  const void *Value;
  int HasPrefix;
  uint64_t v5;
  __CFString *FontName;

  v2 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, CFSTR("NSCTFontUIFontDesignTrait"));
    if (Value)
    {
      HasPrefix = CFEqual(Value, CFSTR("NSCTFontUIFontDesignDefault"));
      return HasPrefix != 0;
    }
  }
  v5 = 1;
  FontName = (__CFString *)TSplicedFontDict::FindFontName(this, 1, 0);
  if (FontName != CFSTR(".AppleSystemUIFont"))
  {
    if (!FontName)
      return 0;
    HasPrefix = CFStringHasPrefix(FontName, CFSTR(".AppleSystemUIFont"));
    return HasPrefix != 0;
  }
  return v5;
}

void CopyVariationWithValue(const __CFDictionary *a1@<X0>, const __CFNumber *a2@<X1>, double a3@<D0>, unint64_t *a4@<X8>)
{
  const void *v8;
  __CFDictionary *v9;
  unint64_t v10;
  id MutableCopy;
  const __CFNumber *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (a1 && CFDictionaryGetCount(a1))
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    v8 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    v9 = (__CFDictionary *)atomic_load((unint64_t *)&MutableCopy);
    CFDictionarySetValue(v9, a2, v8);
    do
      v10 = __ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));
    *a4 = v10;

  }
  else
  {
    v12 = a2;
    v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    *a4 = (unint64_t)(id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  }
}

void TRun::DrawGlyphs(TRun *this, CGContextRef c, CFRange a3)
{
  unint64_t length;
  CFIndex location;
  CGPoint TextPosition;
  double x;
  double y;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  char *v42;
  double *v43;
  double v44;
  double *v45;
  double v46;
  uint64_t v47;
  _BOOL4 v48;
  CGPoint v49;
  uint64_t v50;
  uint64_t v51;
  void *__dst;
  void *v53;
  uint64_t v54;
  _BYTE v55[1024];
  _QWORD v56[3];
  CFRange v57;

  length = a3.length;
  location = a3.location;
  v56[1] = *MEMORY[0x1E0C80C00];
  TextPosition = CGContextGetTextPosition(c);
  x = TextPosition.x;
  y = TextPosition.y;
  if (!location)
  {
    v10 = (double *)*((_QWORD *)this + 39);
    if (!v10)
      v10 = (double *)MEMORY[0x1E0C9D820];
    x = TextPosition.x + *v10;
    y = TextPosition.y + v10[1];
    if (*((uint64_t *)this + 26) >= 1)
    {
      if ((*((_BYTE *)this + 225) & 0x10) != 0)
      {
        objc_msgSend(*((id *)this + 27), "originAtIndex:", *((_QWORD *)this + 25));
      }
      else
      {
        v11 = *MEMORY[0x1E0C9D538];
        v12 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      }
      x = x + v11;
      y = y + v12;
    }
  }
  v13 = *((_QWORD *)this + 20);
  if (v13)
  {
    v14 = *(double *)(v13 + 48);
    if (!location)
      goto LABEL_14;
LABEL_13:
    if (v14 == 0.0)
      goto LABEL_15;
    goto LABEL_14;
  }
  v14 = 0.0;
  if (location)
    goto LABEL_13;
LABEL_14:
  CGContextSetTextPosition(c, x, y + v14);
LABEL_15:
  v57.location = location;
  v57.length = length;
  TRun::DrawBackground(this, c, v57, 0, 0);
  v15 = (_QWORD *)*((_QWORD *)this + 27);
  v16 = v15[2];
  v50 = *((_QWORD *)this + 25);
  memset(v55, 170, sizeof(v55));
  __dst = 0;
  v53 = 0;
  v17 = 16 * length;
  v54 = 0;
  v56[0] = v55;
  v51 = v16;
  if (length)
  {
    std::vector<CGSize,TInlineBufferAllocator<CGSize,64ul>>::__vallocate[abi:nn180100](&__dst, length);
    v18 = (char *)v53;
    bzero(v53, 16 * length);
    v19 = &v18[16 * length];
    v53 = v19;
    v15 = (_QWORD *)*((_QWORD *)this + 27);
  }
  else
  {
    v19 = 0;
  }
  v20 = v15[4];
  if (v20)
  {
    v21 = *((_QWORD *)this + 25);
LABEL_20:
    v22 = (char *)(v20 + 16 * v21 + 16 * location);
    v23 = v54;
    v24 = (char *)__dst;
    v25 = (v54 - (uint64_t)__dst) >> 4;
    if (v25 >= length)
    {
      v26 = (v19 - (_BYTE *)__dst) >> 4;
      if (v26 >= length)
      {
        if (length)
          memmove(__dst, v22, 16 * length);
        else
          v17 = 0;
        v19 = v24;
      }
      else
      {
        if (v19 != __dst)
        {
          memmove(__dst, v22, v19 - (_BYTE *)__dst);
          v19 = (char *)v53;
        }
        v17 = 16 * length - 16 * v26;
        if (v26 != length)
          memmove(v19, &v22[16 * v26], 16 * length - 16 * v26);
      }
    }
    else
    {
      if (__dst)
      {
        v53 = __dst;
        if (v55 > __dst || v56 <= __dst)
        {
          operator delete(__dst);
        }
        else if ((char *)__dst + 16 * v25 == (void *)v56[0])
        {
          v56[0] = __dst;
        }
        v23 = 0;
        __dst = 0;
        v53 = 0;
        v54 = 0;
      }
      if (length >> 60)
        abort();
      v32 = v23 >> 3;
      if (v23 >> 3 <= length)
        v32 = length;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      std::vector<CGSize,TInlineBufferAllocator<CGSize,64ul>>::__vallocate[abi:nn180100](&__dst, v33);
      v19 = (char *)v53;
      memmove(v53, v22, 16 * length);
    }
    v53 = &v19[v17];
    goto LABEL_51;
  }
  v27 = v15[3];
  v21 = *((_QWORD *)this + 25);
  if (!v27)
    goto LABEL_20;
  if (!length)
    goto LABEL_65;
  v28 = (uint64_t *)(v27 + 8 * v21 + 8 * location);
  v29 = __dst;
  v30 = 8 * length;
  do
  {
    v31 = *v28++;
    *v29 = v31;
    v29[1] = 0;
    v29 += 2;
    v30 -= 8;
  }
  while (v30);
LABEL_51:
  if ((*((_BYTE *)this + 225) & 0x10) != 0 && (uint64_t)length >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = (double *)MEMORY[0x1E0C9D538];
    do
    {
      if ((*((_BYTE *)this + 225) & 0x10) != 0)
      {
        objc_msgSend(*((id *)this + 27), "originAtIndex:", location + v35 + *((_QWORD *)this + 25));
        v37 = *v36;
        v38 = v36[1];
      }
      else
      {
        v37 = *v36;
        v38 = v36[1];
        v39 = *v36;
        v40 = v38;
      }
      if (v39 != v37 || v40 != v38)
      {
        v42 = (char *)__dst;
        if (v35)
        {
          v43 = (double *)((char *)__dst + v34);
          v44 = v40 + *(double *)((char *)__dst + v34 - 8);
          *(v43 - 2) = v39 + *(double *)((char *)__dst + v34 - 16);
          *(v43 - 1) = v44;
        }
        v45 = (double *)&v42[v34];
        v46 = v45[1] - v40;
        *v45 = *v45 - v39;
        v45[1] = v46;
      }
      ++v35;
      v34 += 16;
    }
    while (length != v35);
  }
LABEL_65:
  v47 = atomic_load((unint64_t *)this + 7);
  if (v47)
  {
    v48 = TAttributes::SetContextAttributes((TRun *)((char *)this + 40), c, 0);
    CTFontDrawGlyphsWithAdvancesInternal(v47, (CGGlyph *)(v51 + 2 * v50 + 2 * location), (float64x2_t *)__dst, length, c, (uint64_t)this);
    if (v48)
      CGContextRestoreGState(c);
    if (v14 != 0.0)
    {
      v49 = CGContextGetTextPosition(c);
      CGContextSetTextPosition(c, v49.x, v49.y - v14);
    }
  }
  if (__dst)
  {
    v53 = __dst;
    if (v55 > __dst || v56 <= __dst)
      operator delete(__dst);
  }
}

void CTFontDrawGlyphsWithAdvancesInternal(uint64_t a1, CGGlyph *a2, float64x2_t *a3, unint64_t a4, CGContextRef c, uint64_t a6)
{
  CGGlyph *v6;
  float64x2_t *v7;
  unint64_t v8;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  BOOL v13;
  TBaseFont **v14;
  __int128 v15;
  __int128 v16;
  int Type;
  uint64_t v18;
  __int128 v19;
  double ColorBitmapFontTranslate;
  double v21;
  void *v23;
  TBaseFont *v24;
  uint64_t InitializedGraphicsFont;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  CGFloat a;
  CGFloat b;
  CGFloat v31;
  CGFloat d;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  double v37;
  CGFloat v38;
  _BOOL4 v39;
  CGFloat tx;
  CGFloat ty;
  __int128 v42;
  CGColor *FillColorAsColor;
  double Alpha;
  double ContentsScale;
  double v46;
  __int128 v47;
  uint64_t v48;
  float64x2_t *v49;
  unint64_t v50;
  float64x2_t v51;
  double v52;
  double v53;
  unsigned int v54;
  __int128 v55;
  CGPoint v57;
  CGFloat y;
  float64x2_t v59;
  CGPoint TextPosition;
  _BOOL4 v61;
  float64x2_t v62;
  float64x2_t v63;
  CGGlyph *v64;
  _BOOL4 v65;
  int v66;
  uint64_t v67;
  int v68;
  float64x2_t v69;
  float64x2_t v70;
  _QWORD v71[7];
  CGAffineTransform v72;
  CGAffineTransform v73;
  CGAffineTransform v74;
  CGAffineTransform v75;
  _BYTE t1[56];
  uint64_t v77;
  CGAffineTransform v78;
  CGAffineTransform v79;
  CGAffineTransform v80;
  CGAffineTransform v81;
  CGAffineTransform v82;
  id v83[3];
  id v84;
  _OWORD v85[3];
  float64x2_t v86[3];
  CGAffineTransform v87;
  CGAffineTransform v88;
  CGAffineTransform t2;
  __int128 v90;
  _BYTE v91[968];
  _BYTE *v92;
  uint64_t v93;
  CGPoint v94;
  CGPoint v95;
  CGPoint v96;

  v93 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = a2;
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        v8 = a4;
        if (a4)
        {
          if (c)
          {
            v10 = a6;
            if (a6)
            {
              v11 = *(_BYTE *)(a6 + 224) & 1;
              if (v11)
                v12 = -1;
              else
                v12 = 1;
            }
            else
            {
              v11 = 0;
              v12 = 1;
            }
            v68 = v12;
            v13 = a6 != 0;
            v14 = *(TBaseFont ***)(a1 + 40);
            *(_QWORD *)&v15 = -1;
            *((_QWORD *)&v15 + 1) = -1;
            *(_OWORD *)&v88.c = v15;
            *(_OWORD *)&v88.tx = v15;
            *(_OWORD *)&v88.a = v15;
            CGContextGetTextMatrix(&v88, c);
            *(_QWORD *)&v16 = -1;
            *((_QWORD *)&v16 + 1) = -1;
            *(_OWORD *)&v87.c = v16;
            *(_OWORD *)&v87.tx = v16;
            *(_OWORD *)&v87.a = v16;
            v90 = *(_OWORD *)&v88.a;
            *(_OWORD *)v91 = *(_OWORD *)&v88.c;
            *(_OWORD *)&v91[16] = *(_OWORD *)&v88.tx;
            CGAffineTransformInvert(&v87, (CGAffineTransform *)&v90);
            Type = CGContextGetType();
            if (Type == 1 || v10 && v87.d < 0.0)
              goto LABEL_19;
            v18 = TFont::ensureSVGTableObject((TFont *)v14);
            if (((v18 == 0) & v11) == 1)
            {
              if (((*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v14[50] + 472))(v14[50], 1935829368) & 1) != 0)goto LABEL_19;
            }
            else if (v18)
            {
LABEL_19:
              *(_OWORD *)&v91[80] = xmmword_184930060;
              v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
              v90 = *MEMORY[0x1E0C9BAA8];
              *(_OWORD *)v91 = v19;
              *(_OWORD *)&v91[16] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
              *(_OWORD *)&v91[32] = v90;
              *(_OWORD *)&v91[48] = v19;
              *(_OWORD *)&v91[64] = *(_OWORD *)&v91[16];
              *(_QWORD *)&v91[80] = v10;
              v91[88] = v13;
              *(_DWORD *)&v91[92] = Type;
              *(_QWORD *)&v91[96] = 0;
              v86[1] = *(float64x2_t *)&v87.c;
              v86[2] = *(float64x2_t *)&v87.tx;
              v85[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
              v86[0] = *(float64x2_t *)&v87.a;
              v85[0] = v90;
              v85[1] = v19;
              DrawGlyphsWithAdvancesAndTransform(v14, v6, (uint64_t)v7, v8, c, v86, (double *)v85, (uint64_t)&v90);
              return;
            }
            if ((*(unsigned int (**)(TBaseFont *, uint64_t))(*(_QWORD *)v14[50] + 472))(v14[50], 1129270354))
            {
              goto LABEL_19;
            }
            ColorBitmapFontTranslate = *MEMORY[0x1E0C9D538];
            v21 = *(double *)(MEMORY[0x1E0C9D538] + 8);
            v84 = (id)0xAAAAAAAAAAAAAAAALL;
            (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v14[50] + 480))(&v84, v14[50], 1935829368);
            if (!atomic_load((unint64_t *)&v84))
              goto LABEL_51;
            v67 = v10;
            memset(v83, 170, sizeof(v83));
            v23 = (void *)atomic_load((unint64_t *)&v84);
            v24 = v14[50];
            if (!*((_QWORD *)v24 + 25))
            {
              InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v14[50]);
              (*(void (**)(TBaseFont *, uint64_t))(*(_QWORD *)v24 + 872))(v24, InitializedGraphicsFont);
            }
            TsbixContext::TsbixContext((TsbixContext *)v83, v23);
            if (v83[1])
              v66 = (*((unsigned __int16 *)v83[1] + 1) >> 9) & 1;
            else
              v66 = 0;
            v10 = v67;
            memset(&v91[8], 170, 0x3C0uLL);
            v90 = 0uLL;
            *(_QWORD *)v91 = 0;
            v92 = &v91[8];
            std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100]((char **)&v90, v8);
            v26 = *((_QWORD *)&v90 + 1);
            bzero(*((void **)&v90 + 1), 32 * v8);
            *((_QWORD *)&v90 + 1) = v26 + 32 * v8;
            if (((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v14[50] + 712))(v14[50]) & 1) != 0
              || TFont::HasBBoxes(v14[50], v6, v8, (CGRect *)v90))
            {
              *(_QWORD *)&v27 = -1;
              *((_QWORD *)&v27 + 1) = -1;
              *(_OWORD *)&v82.c = v27;
              *(_OWORD *)&v82.tx = v27;
              *(_OWORD *)&v82.a = v27;
              GetFontScaleTransform(&v82, (CGContext *)v14);
              *(_QWORD *)&v28 = -1;
              *((_QWORD *)&v28 + 1) = -1;
              *(_OWORD *)&v81.c = v28;
              *(_OWORD *)&v81.tx = v28;
              *(_OWORD *)&v81.a = v28;
              CGContextGetCTM(&v81, c);
              a = v88.a;
              b = v88.b;
              v31 = v88.c;
              d = v88.d;
              v33 = v88.c + v88.a * 0.0;
              v34 = v88.d + v88.b * 0.0;
              v35 = fabs(v33);
              v36 = fabs(v34);
              v37 = hypot(v33, v34);
              v38 = 1.0;
              v39 = v37 <= 1.0;
              tx = v88.tx;
              ty = v88.ty;
              if (v35 <= v36)
                v39 = 0;
              v65 = v39;
              if (!v39)
              {
                v80.a = a;
                v80.b = b;
                v80.c = v31;
                v80.d = d;
                v80.tx = v88.tx;
                v80.ty = v88.ty;
                CGAffineTransformScale((CGAffineTransform *)t1, &v80, 1.0 / v37, 1.0 / v37);
                a = *(double *)t1;
                b = *(double *)&t1[8];
                v31 = *(double *)&t1[16];
                d = *(double *)&t1[24];
                v38 = v37;
                tx = *(double *)&t1[32];
                ty = *(double *)&t1[40];
              }
              *(_QWORD *)&v42 = -1;
              *((_QWORD *)&v42 + 1) = -1;
              *(_OWORD *)&v79.c = v42;
              *(_OWORD *)&v79.tx = v42;
              *(_OWORD *)&v79.a = v42;
              *(CGFloat *)t1 = a;
              *(CGFloat *)&t1[8] = b;
              *(CGFloat *)&t1[16] = v31;
              *(CGFloat *)&t1[24] = d;
              *(CGFloat *)&t1[32] = tx;
              *(CGFloat *)&t1[40] = ty;
              t2 = v81;
              CGAffineTransformConcat(&v79, (CGAffineTransform *)t1, &t2);
              v78 = v79;
              CGContextSetCTM();
              FillColorAsColor = (CGColor *)CGContextGetFillColorAsColor();
              Alpha = CGColorGetAlpha(FillColorAsColor);
              ContentsScale = GetContentsScale(c);
              ColorBitmapFontTranslate = TFont::GetColorBitmapFontTranslate((TFont *)v14);
              v21 = v46;
              *(_QWORD *)&v47 = -1;
              *((_QWORD *)&v47 + 1) = -1;
              *(_OWORD *)&t2.c = v47;
              *(_OWORD *)&t2.tx = v47;
              *(_OWORD *)&t2.a = v47;
              v69 = *(float64x2_t *)&v88.tx;
              if (v65)
                t2 = v87;
              else
                CGAffineTransformMakeScale(&t2, v38, v38);
              v48 = 0;
              v64 = v6;
              v49 = v7;
              v50 = v8;
              v51 = v69;
              do
              {
                v52 = v51.f64[1];
                v70 = v51;
                if (v65)
                {
                  v53 = v51.f64[0];
                }
                else
                {
                  v53 = v87.tx + v51.f64[1] * v87.c + v87.a * v51.f64[0];
                  v52 = v87.ty + v51.f64[1] * v87.d + v87.b * v51.f64[0];
                }
                v54 = *v6;
                *(_QWORD *)t1 = -1;
                *(_QWORD *)&t1[8] = -1;
                *(_QWORD *)&t1[16] = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v55 = -1;
                *((_QWORD *)&v55 + 1) = -1;
                *(_OWORD *)&t1[24] = v55;
                *(_OWORD *)&t1[40] = v55;
                v77 = -1;
                v96.x = ColorBitmapFontTranslate;
                v96.y = v21;
                if (atomic_load((unint64_t *)&t1[16]))
                {
                  if (Alpha != 0.0)
                  {
                    v57 = (CGPoint)vaddq_f64(*(float64x2_t *)&t2.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&t2.c, v52+ v82.ty+ *(double *)(v90 + v48 + 8) * v82.d+ v82.b * *(double *)(v90 + v48)), *(float64x2_t *)&t2.a, v53+ v82.tx+ *(double *)(v90 + v48 + 8) * v82.c+ v82.a * *(double *)(v90 + v48)));
                    y = v57.y;
                  }
                  if ((v66 & 1) == 0)
                  {
                    v94.x = v53;
                    v94.y = v52;
                    DrawInvisibleGlyph(c, v54, v94, MEMORY[0x1E0C9BAA8], MEMORY[0x1E0C9BAA8]);
                  }
                }
                else if ((v66 & 1) == 0)
                {
                  v75 = v81;
                  CGContextSetCTM();
                  v95.x = ColorBitmapFontTranslate + v53;
                  v95.y = v21 + v52;
                  DrawVisibleGlyph(c, v54, v95, MEMORY[0x1E0C9BAA8], MEMORY[0x1E0C9BAA8]);
                  v74 = v79;
                  CGContextSetCTM();
                }
                v59 = *v49++;

                v51 = vaddq_f64(v70, v59);
                v48 += 32;
                ++v6;
                --v50;
                v10 = v67;
              }
              while (v50);
              v73 = v81;
              CGContextSetCTM();
              v6 = v64;
            }
            *(_QWORD *)t1 = &v90;
            std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)t1);

            if (!v66)
            {
              v62 = *(float64x2_t *)&v88.tx;
              do
              {
                v63 = *v7++;
                v62 = vaddq_f64(v62, v63);
                --v8;
              }
              while (v8);
              CGContextSetTextPosition(c, v62.f64[0], v62.f64[1]);
            }
            else
            {
LABEL_51:
              if (ColorBitmapFontTranslate != 0.0 || v21 != 0.0)
              {
                TextPosition = CGContextGetTextPosition(c);
                CGContextSetTextPosition(c, ColorBitmapFontTranslate + TextPosition.x, v21 + TextPosition.y);
              }
              if (v10)
              {
                v72 = v88;
                v61 = HandleFlippedTextMatrix(c, &v72);
              }
              else
              {
                v61 = 0;
              }
              v71[0] = MEMORY[0x1E0C809B0];
              v71[1] = 3221225472;
              v71[2] = __CTFontDrawGlyphsWithAdvancesInternal_block_invoke;
              v71[3] = &__block_descriptor_56_e16_v28__0___qq_8B24l;
              v71[4] = c;
              v71[5] = v6;
              v71[6] = v7;
              EnumerateOverlappingGlyphs(v14[50], v6, v8, v68, (uint64_t)v71);
              if (v61)
                RestoreFlippedTextMatrix(c);
            }

          }
        }
      }
    }
  }
}

void TTenuousComponentFont::CopyTable(TTenuousComponentFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if ((int)a2 <= 1398163231)
  {
    if ((_DWORD)a2 == 1129270354
      || (_DWORD)a2 == 1398030676
      && ((*(uint64_t (**)(TTenuousComponentFont *, uint64_t))(*(_QWORD *)this + 472))(this, 1398030676) & 1) == 0)
    {
      goto LABEL_11;
    }
  }
  else if ((_DWORD)a2 == 1398163232 || (_DWORD)a2 == 1935829368 || (_DWORD)a2 == 1634561906)
  {
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this) & 1) != 0)
  {
    TBaseFont::CopyTable(this, a2, a3);
    return;
  }
LABEL_11:
  *a3 = 0;
}

uint64_t TFont::ensureSVGTableObject(TFont *this)
{
  os_unfair_lock_s *v2;
  BOOL v3;
  uint64_t v5;
  id v7;

  v2 = (os_unfair_lock_s *)((char *)this + 504);
  os_unfair_lock_lock_with_options();
  if (*((_BYTE *)this + 520))
    v3 = 1;
  else
    v3 = MEMORY[0x1E0D65060] == 0;
  if (!v3)
  {
    v7 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(&v7, *((_QWORD *)this + 50), 1398163232);
    if (atomic_load((unint64_t *)&v7))
    {
      atomic_load((unint64_t *)&v7);
      if (!*((_DWORD *)this + 12))
        TFont::InitStrikeMetrics(this);
      *((_QWORD *)this + 64) = OTSVGTableCreateFromData();
    }

  }
  *((_BYTE *)this + 520) = 1;
  v5 = *((_QWORD *)this + 64);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t TTenuousComponentFont::HasTable(TTenuousComponentFont *this, int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 1634561905)
  {
    if (a2 == 1129270354)
      return result;
    if (a2 != 1398030676)
    {
      if (a2 == 1398163232)
        return result;
      goto LABEL_11;
    }
    return (*((unsigned __int8 *)this + 712) >> 2) & 1;
  }
  if (a2 != 1634561906 && a2 != 1935829368)
  {
    if (a2 != 1953653099)
    {
LABEL_11:
      result = (*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this);
      if ((_DWORD)result)
        return TBaseFont::HasTable(this, a2);
      return result;
    }
    return (*((unsigned __int8 *)this + 712) >> 2) & 1;
  }
  return result;
}

void TTenuousComponentFont::CopyVariation(TTenuousComponentFont *this@<X0>, TTenuousComponentFont *a2@<X8>)
{
  void *v4;
  unint64_t v5;
  const void **v6;
  const __CFArray *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v12;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;

  if ((*((_BYTE *)this + 712) & 4) != 0)
  {
    if (*((_BYTE *)this + 793))
    {
      v20 = (id)0xAAAAAAAAAAAAAAAALL;
      TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontVariationAttribute"), &v19);
      do
        v4 = (void *)__ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
      v20 = v4;

      v5 = atomic_load((unint64_t *)&v20);
      v6 = (const void **)MEMORY[0x1E0C9B0D0];
      if (!v5)
      {
        v19 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, TTenuousComponentFont *))(*(_QWORD *)this + 120))(&v19, this);
        v7 = (const __CFArray *)atomic_load((unint64_t *)&v19);
        v8 = (void *)atomic_load((unint64_t *)this + 96);
        CreateValidVariation(v7, v8, &v18);
        do
          v9 = __ldaxr((unint64_t *)&v18);
        while (__stlxr(0, (unint64_t *)&v18));
        do
          v10 = (void *)__ldaxr((unint64_t *)&v20);
        while (__stlxr(v9, (unint64_t *)&v20));

        if (atomic_load((unint64_t *)&v20))
        {
          v12 = (void *)atomic_load((unint64_t *)&v20);
          v17 = v12;
          TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v17, CFSTR("NSCTFontVariationAttribute"));

        }
        else
        {
          TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, *v6, CFSTR("NSCTFontVariationAttribute"));
        }

      }
      v15 = atomic_load((unint64_t *)&v20);
      if (*v6 == (const void *)v15)
      {
        v16 = 0;
      }
      else
      {
        do
          v16 = __ldaxr((unint64_t *)&v20);
        while (__stlxr(0, (unint64_t *)&v20));
      }
      *(_QWORD *)a2 = v16;

    }
    else if (atomic_load((unint64_t *)this + 96))
    {
      v14 = (void *)atomic_load((unint64_t *)this + 96);
      *(_QWORD *)a2 = v14;
    }
    else
    {
      TTenuousComponentFont::CopyDefaultVariation(a2, (uint64_t)this);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
}

BOOL TAttributes::SetContextAttributes(TAttributes *this, CGContext *a2, char a3)
{
  unint64_t v5;
  const void *v6;
  char v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  const __CFDictionary *v11;
  const __CFNumber *Value;
  const __CFString **v13;
  unint64_t v14;
  double v15;
  double v16;
  TAttributes *v17;
  void *StrokeColor;
  const void *v19;
  double valuePtr;

  if ((a3 & 1) == 0)
    atomic_load((unint64_t *)this + 2);
  v5 = atomic_load((unint64_t *)this + 2);
  TFont::SetInContext(*(TFont **)(v5 + 40), a2);
  v7 = *((_BYTE *)this + 136);
  if (!v7)
  {
    CGContextSetFillColorWithColor(a2, 0);
    return 0;
  }
  v8 = (v7 & 0x1C) != 0;
  if ((*((_BYTE *)this + 136) & 0x1C) != 0)
  {
    CGContextSaveGState(a2);
    v7 = *((_BYTE *)this + 136);
  }
  if ((v7 & 1) != 0)
  {
    if ((v7 & 4) == 0)
      goto LABEL_8;
LABEL_16:
    v11 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    Value = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("NSStrokeWidth"));
    if (!Value)
      goto LABEL_23;
    valuePtr = NAN;
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    v14 = atomic_load((unint64_t *)this + 2);
    v15 = valuePtr * (*(double *)(*(_QWORD *)(v14 + 40) + 16) * 0.01);
    valuePtr = v15;
    if (v15 <= 0.0)
    {
      if (v15 >= 0.0)
      {
        CGContextSetTextDrawingMode(a2, kCGTextFill);
        goto LABEL_23;
      }
      CGContextSetTextDrawingMode(a2, kCGTextFillStroke);
      v16 = -valuePtr;
    }
    else
    {
      CGContextSetTextDrawingMode(a2, kCGTextStroke);
      v16 = valuePtr;
    }
    CGContextSetLineWidth(a2, v16);
LABEL_23:
    v17 = (TAttributes *)atomic_load((unint64_t *)this);
    StrokeColor = (void *)TAttributes::GetStrokeColor(v17, 0, v13);
    if (!StrokeColor)
    {
      if ((*((_BYTE *)this + 136) & 2) != 0)
        StrokeColor = (void *)atomic_load((unint64_t *)this + 4);
      else
        StrokeColor = 0;
    }
    TAttributes::SetStrokeColor(a2, StrokeColor, v19);
    v7 = *((_BYTE *)this + 136);
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
LABEL_28:
    CGContextSetStyle();
    return v8;
  }
  if ((v7 & 2) != 0)
    v10 = (void *)atomic_load((unint64_t *)this + 4);
  else
    v10 = 0;
  TAttributes::SetFillColor(a2, v10, v6);
  v7 = *((_BYTE *)this + 136);
  if ((v7 & 4) != 0)
    goto LABEL_16;
LABEL_8:
  if ((v7 & 0x10) != 0)
    goto LABEL_28;
LABEL_9:
  if ((v7 & 8) != 0)
  {
    v9 = (void *)atomic_load((unint64_t *)this + 5);
    SetNSShadow(a2, v9);
  }
  return v8;
}

void TFont::SetInContext(TFont *this, CGContext *a2)
{
  CGFont *InitializedGraphicsFont;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(*((TBaseFont **)this + 50));
  if (InitializedGraphicsFont)
  {
    CGContextSetFont(a2, InitializedGraphicsFont);
    CGContextSetFontSize(a2, *((CGFloat *)this + 2));
  }
}

void TAttributes::SetFillColor(CGContextRef c, void *cf, const void *a3)
{
  CFTypeID v5;
  CGContext *v6;
  CGColor *v7;

  if (!cf)
  {
    if (qword_1ECDE78A0 != -1)
      dispatch_once_f(&qword_1ECDE78A0, 0, (dispatch_function_t)GetBlackColor(void)::$_0::__invoke);
    v7 = (CGColor *)qword_1ECDE7898;
    v6 = c;
    goto LABEL_7;
  }
  v5 = CFGetTypeID(cf);
  if (v5 == CGColorGetTypeID())
  {
    v6 = c;
    v7 = (CGColor *)cf;
LABEL_7:
    CGContextSetFillColorWithColor(v6, v7);
    return;
  }
  SetNSColor(c, cf);
}

void TRun::DrawBackground(TRun *this, CGContextRef c, CFRange a3, const TAttributes *a4, int a5)
{
  CFIndex length;
  CFIndex location;
  uint64_t v10;
  CGPoint TextPosition;
  double x;
  double y;
  uint64_t v16;
  double v17;
  CGFloat v18;
  CGFloat height;
  double v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  double width;
  __int128 v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CFRange v36;
  CFRange v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  length = a3.length;
  location = a3.location;
  if (!a4)
  {
    v10 = *((_QWORD *)this + 34);
    if (v10)
    {
      if (atomic_load((unint64_t *)(v10 + 168)))
        return;
    }
    a4 = (TRun *)((char *)this + 40);
  }
  if (TAttributes::SetContextAttributesForBackground(a4, c))
  {
    TextPosition = CGContextGetTextPosition(c);
    x = TextPosition.x;
    y = TextPosition.y;
    if (a5)
    {
      while (!atomic_load((unint64_t *)this + 35))
      {
        v16 = *((_QWORD *)this + 34);
        if (!v16)
          break;
        TLine::CachePositions(v16);
      }
      x = TextPosition.x + *((double *)this + 36);
      y = TextPosition.y + *((double *)this + 37);
    }
    v38.origin.x = (*(double (**)(TRun *))(*(_QWORD *)this + 152))(this);
    v39 = CGRectOffset(v38, x, y);
    v17 = v39.origin.x;
    v18 = v39.origin.y;
    height = v39.size.height;
    if (length >= *((_QWORD *)this + 26))
    {
      width = v39.size.width;
    }
    else
    {
      v36.location = 0;
      v36.length = location;
      v20 = TStorageRange::GetWidth((TRun *)((char *)this + 192), v36);
      v21 = (double *)*((_QWORD *)this + 39);
      v22 = (double *)MEMORY[0x1E0C9D820];
      if (!v21)
        v21 = (double *)MEMORY[0x1E0C9D820];
      v23 = v20 + *v21;
      v37.location = location;
      v37.length = length;
      v24 = TStorageRange::GetWidth((TRun *)((char *)this + 192), v37);
      v25 = 0.0;
      if (!location)
      {
        v26 = (double *)*((_QWORD *)this + 39);
        if (!v26)
          v26 = v22;
        v25 = *v26;
      }
      v17 = v17 + v23;
      width = v24 + v25;
    }
    *(_QWORD *)&v28 = -1;
    *((_QWORD *)&v28 + 1) = -1;
    *(_OWORD *)&v34.c = v28;
    *(_OWORD *)&v34.tx = v28;
    *(_OWORD *)&v34.a = v28;
    CGContextGetUserSpaceToDeviceSpaceTransform(&v34, c);
    v35 = v34;
    v40.origin.x = v17;
    v40.origin.y = v18;
    v40.size.width = width;
    v40.size.height = height;
    v41 = CGRectApplyAffineTransform(v40, &v35);
    v29 = v41.origin.y;
    v30 = v41.size.height;
    v31 = floor(v41.origin.x);
    v32 = floor(CGRectGetMaxX(v41)) - v31;
    v35 = v34;
    CGAffineTransformInvert(&v33, &v35);
    v35 = v33;
    v42.origin.x = v31;
    v42.origin.y = v29;
    v42.size.width = v32;
    v42.size.height = v30;
    v43 = CGRectApplyAffineTransform(v42, &v35);
    CGContextFillRect(c, v43);
    CGContextRestoreGState(c);
  }
}

uint64_t TAttributes::SetContextAttributesForBackground(TAttributes *this, CGContextRef c)
{
  char v2;
  TAttributes *v5;
  const __CFString **v6;
  void *BackgroundColor;
  const void *v8;

  v2 = *((_BYTE *)this + 137);
  if ((v2 & 1) != 0)
  {
    CGContextSaveGState(c);
    v5 = (TAttributes *)atomic_load((unint64_t *)this);
    BackgroundColor = (void *)TAttributes::GetBackgroundColor(v5, 0, v6);
    TAttributes::SetFillColor(c, BackgroundColor, v8);
    CGContextSetShadowWithColor(c, *MEMORY[0x1E0C9D820], 0.0, 0);
  }
  return v2 & 1;
}

void SetNSColor(CGContext *a1, id a2)
{
  CGColor *v3;

  v3 = (CGColor *)objc_msgSend(a2, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v3);
  CGContextSetStrokeColorWithColor(a1, v3);
}

BOOL HandleFlippedTextMatrix(CGContext *a1, CGAffineTransform *a2)
{
  double d;
  __int128 v5;
  CGAffineTransform v7;

  d = a2->d;
  if (d < 0.0)
  {
    CGContextSaveGState(a1);
    CGContextTranslateCTM(a1, 0.0, a2->ty + a2->ty);
    CGContextScaleCTM(a1, 1.0, -1.0);
    a2->d = -a2->d;
    v5 = *(_OWORD *)&a2->tx;
    *(_OWORD *)&v7.c = *(_OWORD *)&a2->c;
    *(_OWORD *)&v7.tx = v5;
    *(_OWORD *)&v7.a = *(_OWORD *)&a2->a;
    CGContextSetTextMatrix(a1, &v7);
  }
  return d < 0.0;
}

const __CFDictionary *TSplicedFontDict::IsTextStyle(TSplicedFontDict *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("isTextStyle"));
    if (result)
      return (const __CFDictionary *)(CFBooleanGetValue(result) != 0);
  }
  return result;
}

const __CFDictionary *TSplicedFontDict::ComponentHasOpticalSizeAxis(TSplicedFontDict *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("hasOpticalSizeAxis"));
    if (result)
      return (const __CFDictionary *)(CFBooleanGetValue(result) != 0);
  }
  return result;
}

const __CFString *TSplicedFontDict::IsInvisibleSplice(TSplicedFontDict *this)
{
  const __CFString *result;

  result = (const __CFString *)TSplicedFontDict::FindFontName(this, 6, 0);
  if (result)
    return (const __CFString *)(CFStringGetCharacterAtIndex(result, 0) == 46);
  result = (const __CFString *)TSplicedFontDict::FindFontName(this, 4, 0);
  if (result)
    return (const __CFString *)(CFStringGetCharacterAtIndex(result, 0) == 46);
  result = (const __CFString *)TSplicedFontDict::FindFontName(this, 1, 0);
  if (result)
    return (const __CFString *)(CFStringGetCharacterAtIndex(result, 0) == 46);
  return result;
}

const __CFDictionary *TSplicedFontDict::FindFontName(TSplicedFontDict *this, int a2, const __CFString *a3)
{
  const __CFDictionary *v6;
  const __CFDictionary *result;
  const __CFString *v8;
  const __CFArray *v9;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  const __CFString *Value;
  const __CFString *v14;

  if (a2 > 5)
  {
    if (a2 != 255 && a2 != 6)
    {
LABEL_12:
      result = (const __CFDictionary *)atomic_load((unint64_t *)this);
      if (result)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontNames"));
        if (result)
        {
          v9 = result;
          result = (const __CFDictionary *)CFArrayGetCount(result);
          if (result)
          {
            v10 = (CFIndex)result - 1;
            while (1)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v10);
              if (ValueAtIndex)
              {
                v12 = ValueAtIndex;
                Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("type"));
                if (CFStringGetIntValue(Value) == a2)
                {
                  if (!a3)
                    break;
                  v14 = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("language"));
                  if (v14 == a3 || v14 && CFEqual(v14, a3))
                    break;
                }
              }
              if (--v10 == -1)
                return 0;
            }
            v8 = CFSTR("string");
            result = v12;
            return (const __CFDictionary *)CFDictionaryGetValue(result, v8);
          }
        }
      }
      return result;
    }
  }
  else if (a2 != -1)
  {
    if (a2 == 1)
    {
      v6 = (const __CFDictionary *)atomic_load((unint64_t *)this);
      if (v6)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("familyName"));
        if (result)
          return result;
      }
    }
    goto LABEL_12;
  }
  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    v8 = CFSTR("name");
    return (const __CFDictionary *)CFDictionaryGetValue(result, v8);
  }
  return result;
}

const __CFArray *TSplicedFont::EvalComponents(TSplicedFont *this, const __CFArray *a2)
{
  CFIndex v4;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  const void *ValueAtIndex;
  uint64_t v9;
  unint64_t v10;
  int v11;
  const __CFNumber *ComponentAttribute;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  size_t count;
  BOOL v30;
  BOOL v31[2];
  unsigned int v32;
  double v33;
  double v34;
  double v35;
  uint64_t valuePtr;

  v34 = 0.0;
  v35 = 0.0;
  v33 = 0.0;
  v32 = 0;
  *(_WORD *)v31 = 0;
  v30 = 0;
  TSplicedFontDict::GetTraitsValuesFromMetrics((TSplicedFont *)((char *)this + 600), &v31[1], v31, &v30, &v35, &v34, &v33, &v32);
  if (a2)
  {
    v4 = CFArrayGetCount(a2);
    if (v4 >= 1)
    {
      v5 = v4;
      v6 = 0;
      count = v4 + 1;
      v7 = -56;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
        v9 = *((_QWORD *)ValueAtIndex + 5);
        if ((*(_DWORD *)(v9 + 16) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(*((TDescriptor **)ValueAtIndex + 5), 0, 0.0);
        v10 = atomic_load((unint64_t *)(v9 + 32));
        if (v10)
        {
          v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 16))(v10);
          if (v11 == 1414809156 || v11 == 1413695044)
          {
            ComponentAttribute = (const __CFNumber *)TComponentFont::GetComponentAttribute((TComponentFont *)v10, CFSTR("opticalSize"));
            if (!ComponentAttribute)
              return a2;
            valuePtr = 0;
            CFNumberGetValue(ComponentAttribute, kCFNumberDoubleType, &valuePtr);
            v14 = valuePtr;
            v15 = (char *)*((_QWORD *)this + 77);
            if (!v15)
            {
              v15 = (char *)malloc_type_calloc(count, 0x38uLL, 0x100004021716A34uLL) + 56;
              *((_QWORD *)this + 77) = v15;
            }
            *(_QWORD *)&v15[v7 + 56] = v14;
            v16 = (uint64_t)&v15[v7 + 56];
            *(double *)(v16 + 32) = v35;
            *(double *)(v16 + 40) = v34;
            *(_DWORD *)(v16 + 52) = v32;
            v17 = (const __CFNumber *)TComponentFont::GetComponentAttribute((TComponentFont *)v10, CFSTR("leadingOverride"));
            if (v17)
              CFNumberGetValue(v17, kCFNumberDoubleType, &v15[v7 + 64]);
            v18 = (const __CFNumber *)TComponentFont::GetComponentAttribute((TComponentFont *)v10, CFSTR("lineSpacingOverrideRatio"));
            if (v18)
              CFNumberGetValue(v18, kCFNumberDoubleType, &v15[v7 + 72]);
            v19 = (const __CFNumber *)TComponentFont::GetComponentAttribute((TComponentFont *)v10, CFSTR("capHeight"));
            if (v19)
              CFNumberGetValue(v19, kCFNumberIntType, &v15[v7 + 104]);
            v20 = (const __CFNumber *)TComponentFont::GetComponentAttribute((TComponentFont *)v10, CFSTR("trackingAmount"));
            v21 = &v15[v7 + 80];
            if (v20)
              CFNumberGetValue(v20, kCFNumberDoubleType, v21);
            else
              *(_QWORD *)v21 = 0;
            v22 = *(_OWORD *)v16;
            v23 = *(_OWORD *)&v15[v7 + 72];
            v24 = *(_OWORD *)&v15[v7 + 88];
            *(_QWORD *)(v10 + 648) = *(_QWORD *)&v15[v7 + 104];
            *(_OWORD *)(v10 + 616) = v23;
            *(_OWORD *)(v10 + 632) = v24;
            *(_OWORD *)(v10 + 600) = v22;
            v25 = *(_OWORD *)&v15[v7];
            v26 = *(_OWORD *)&v15[v7 + 16];
            v27 = *(_OWORD *)&v15[v7 + 32];
            *(_QWORD *)(v10 + 704) = *(_QWORD *)&v15[v7 + 48];
            *(_OWORD *)(v10 + 672) = v26;
            *(_OWORD *)(v10 + 688) = v27;
            *(_OWORD *)(v10 + 656) = v25;
          }
        }
        ++v6;
        v7 += 56;
      }
      while (v5 != v6);
    }
  }
  return a2;
}

const void *TComponentFont::GetComponentAttribute(TComponentFont *this, const __CFString *a2)
{
  void *v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const void *Value;

  v3 = (void *)atomic_load((unint64_t *)this + 93);
  v4 = v3;
  v5 = v4;
  if (v4)
    Value = CFDictionaryGetValue(v4, a2);
  else
    Value = 0;

  return Value;
}

const __CFDictionary *TSplicedFontDict::GetTraitsValuesFromMetrics(TSplicedFontDict *this, BOOL *a2, BOOL *a3, BOOL *a4, double *a5, double *a6, double *a7, unsigned int *a8)
{
  const __CFDictionary *result;
  const __CFDictionary *v16;
  const __CFString *Value;
  const __CFString *v18;
  double v19;
  const __CFString *v20;
  const __CFString *v21;
  CFIndex Length;
  unint64_t v23;
  double v24;
  const __CFNumber *v25;
  double v26;
  unsigned int IntValue;
  unsigned int v28;
  const __CFString *v29;
  double v30;
  const __CFString *v31;
  SInt32 v32;
  uint64_t valuePtr;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (!result)
    return result;
  result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
  if (!result)
    return result;
  v16 = result;
  Value = (const __CFString *)CFDictionaryGetValue(result, CFSTR("isFixedPitch"));
  if (Value && CFStringGetIntValue(Value))
    *a8 |= 0x400u;
  if (!*a4)
  {
    v18 = (const __CFString *)CFDictionaryGetValue(v16, CFSTR("italicAngle"));
    if (v18)
    {
      v19 = CFStringGetDoubleValue(v18) * 0.00555555556;
      *a8 |= 1u;
    }
    else
    {
      v19 = 0.0;
    }
    *a7 = v19;
    *a4 = 1;
  }
  if (!*a2)
  {
    v20 = (const __CFString *)CFDictionaryGetValue(v16, CFSTR("weightClass"));
    if (v20)
    {
      v21 = v20;
      if ((unint64_t)CFStringGetCharacterAtIndex(v20, 1) - 54 <= 0xFFFFFFFFFFFFFFF9)
        *a8 |= 2u;
      Length = CFStringGetLength(v21);
      if (Length >= 2 && (v23 = Length, CFStringGetCharacterAtIndex(v21, 0) == 119))
      {
        v24 = kCTFontDefaultWeights[CFStringGetCharacterAtIndex(v21, 1) - 49];
        if (v23 >= 4)
          v24 = v24 + (double)((unint64_t)CFStringGetCharacterAtIndex(v21, 3) - 48) * 0.02;
        *a5 = v24;
        *a2 = 1;
      }
      else
      {
        *a2 = 0;
        *a5 = 2.0;
      }
    }
  }
  if (!*a3)
  {
    v25 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("width"));
    if (v25)
    {
      valuePtr = -1;
      CFNumberGetValue(v25, kCFNumberDoubleType, &valuePtr);
      v26 = *(double *)&valuePtr;
      *(_QWORD *)a6 = valuePtr;
      IntValue = ClassOfWidth(v26);
    }
    else
    {
      if (*a3)
        goto LABEL_34;
      v29 = (const __CFString *)CFDictionaryGetValue(v16, CFSTR("widthClass"));
      if (!v29)
      {
        *a6 = 0.0;
        *a3 = 1;
        goto LABEL_34;
      }
      IntValue = (unsigned __int16)CFStringGetIntValue(v29);
      if (IntValue > 0xA)
        v30 = 0.0;
      else
        v30 = kWidthScale[IntValue];
      *a6 = v30;
    }
    *a3 = 1;
    if (IntValue < 6)
    {
      if (IntValue == 5)
        goto LABEL_34;
      v28 = *a8 | 0x40;
    }
    else
    {
      v28 = *a8 | 0x20;
    }
    *a8 = v28;
  }
LABEL_34:
  v31 = (const __CFString *)CFDictionaryGetValue(v16, CFSTR("familyClass"));
  if (v31)
  {
    v32 = CFStringGetIntValue(v31);
    if (v32 >= 1)
      *a8 |= v32 >> 8 << 28;
  }
  if (CFDictionaryGetValue(v16, CFSTR("shortTrait")))
    *a8 |= 0x8000u;
  result = (const __CFDictionary *)CFDictionaryGetValue(v16, CFSTR("tallTrait"));
  if (result)
    *a8 |= 0x10000u;
  return result;
}

void TLine::DrawBackground(TLine *this, CGContext *a2)
{
  uint64_t v4;
  uint64_t v6;
  CGPoint TextPosition;
  double x;
  double v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16[2];
  double v17;
  CGRect v18;

  if (atomic_load((unint64_t *)this + 21))
  {
    v4 = *((_QWORD *)this + 2);
    if (*((_QWORD *)this + 3) != v4)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
      if (TAttributes::SetContextAttributesForBackground((TAttributes *)(v6 + 40), a2))
      {
        TextPosition = CGContextGetTextPosition(a2);
        x = TextPosition.x;
        v9 = *((double *)this + 15);
        v10 = atomic_load((unint64_t *)(v6 + 56));
        TFont::GetWindowsDescent(*(_QWORD *)(v10 + 40));
        if (v9 >= v11)
          v11 = v9;
        v12 = TextPosition.y - v11;
        v13 = *((double *)this + 13);
        v14 = *((double *)this + 14) + v11;
        if ((*(_BYTE *)(v6 + 177) & 8) != 0)
        {
          TLine::GetTrailingWhitespace((uint64_t)this, v16);
          v15 = v17;
          v13 = v13 - v17;
          if ((*((_WORD *)this + 76) & 8) == 0)
            v15 = -0.0;
          x = TextPosition.x + v15;
        }
        v18.origin.x = x;
        v18.origin.y = v12;
        v18.size.width = v13;
        v18.size.height = v14;
        CGContextFillRect(a2, v18);
        CGContextRestoreGState(a2);
      }
    }
  }
}

const TBaseFont *GetTenuousComponentFont(const TBaseFont *a1)
{
  const TBaseFont *v1;
  uint64_t v2;

  v1 = a1;
  if (!a1 || (*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a1 + 16))(a1) != 1414809156)
  {
    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v1 + 16))(v1) == 1414743620)
    {
      v2 = *(_QWORD *)(*((_QWORD *)v1 + 76) + 40);
      if ((*(_DWORD *)(v2 + 16) & 0x80000000) == 0)
        TDescriptor::InitBaseFont((TDescriptor *)v2, 0, 0.0);
      v1 = (const TBaseFont *)atomic_load((unint64_t *)(v2 + 32));
      if (v1 && (*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v1 + 16))(v1) != 1414809156)
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void TTenuousComponentFont::TTenuousComponentFont(TTenuousComponentFont *this, const TTenuousComponentFont *a2, double a3)
{
  _QWORD *v6;
  void *v7;

  TComponentFont::TComponentFont(this, a2);
  *v6 = &off_1E15DDF90;
  v7 = (void *)atomic_load((unint64_t *)a2 + 95);
  *((_QWORD *)this + 95) = v7;
  *((_DWORD *)this + 199) = 0;
  *((_BYTE *)this + 800) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_WORD *)this + 396) = 0;
  TTenuousComponentFont::InitWithOpticalSize(this, a3);
}

BOOL TFont::HasDerivedOpticalSize(TFont *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v1 = atomic_load((unint64_t *)this + 1);
  result = 1;
  if (!v1 || (v2 = atomic_load((unint64_t *)this + 1), (*(_DWORD *)(*(_QWORD *)(v2 + 40) + 16) & 0x8000) == 0))
  {
    v3 = *((_QWORD *)this + 50);
    if (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 456))(v3) & 1) == 0)
      return 0;
  }
  return result;
}

void TDelegateRun::DrawGlyphs(TRun *this, CGContextRef c, CFRange a3)
{
  if (*((double *)this + 49) != 0.0)
    TRun::DrawGlyphs(this, c, a3);
}

uint64_t TFont::GetWindowsDescent(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  *(double *)&v3 = NAN;
  v3 = *(unint64_t *)(this + 152);
  if (*(double *)&v3 == 0.0)
  {
    v1 = this;
    this = TFont::GetWinMetrics((TBaseFont **)this, 0, (double *)&v3);
    if ((_DWORD)this)
    {
      v2 = v3;
    }
    else
    {
      if (*(_DWORD *)(v1 + 48))
        this = v1 + 48;
      else
        this = (uint64_t)TFont::InitStrikeMetrics((TFont *)v1);
      v3 = *(unint64_t *)(this + 16);
      v2 = v3;
    }
    atomic_store(v2, (unint64_t *)(v1 + 152));
  }
  return this;
}

uint64_t TFont::GetWinMetrics(TBaseFont **this, double *a2, double *a3)
{
  uint64_t result;
  int *inited;
  double v8;

  result = TBaseFont::GetInitializedGraphicsFont(this[50]);
  if (result)
  {
    result = CGFontGetParserFont();
    if (result)
    {
      result = FPFontGetWinMetrics();
      if ((_DWORD)result)
      {
        if (*((_DWORD *)this + 12))
          inited = (int *)(this + 6);
        else
          inited = TFont::InitStrikeMetrics((TFont *)this);
        v8 = *((double *)inited + 6);
        if (a2)
          *a2 = v8 * *a2;
        if (a3)
          *a3 = v8 * *a3;
        return 1;
      }
    }
  }
  return result;
}

void CopyPostScriptNameFromFontURL(const __CFURL *a1@<X0>, _QWORD *a2@<X8>)
{
  __CFString *v3;
  const __CFAllocator *v4;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFString *ValueAtIndex;
  CFRange *v11;
  id v12;
  CFRange v13[3];

  if (!a1)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v3 = (__CFString *)CFURLCopyFragment(a1, &stru_1E15EDAC0);
  if (!v3)
  {
LABEL_11:

    *a2 = 0;
    return;
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, CFSTR(";"));
  v6 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings || (Count = CFArrayGetCount(ArrayBySeparatingStrings)) == 0)
  {
LABEL_9:

    goto LABEL_11;
  }
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v9);
    memset(v13, 170, 32);
    if (SplitStringAtSeparator(ValueAtIndex, (const __CFString *)&v13[1], v13, v11))
    {
      if (CFStringHasPrefix(ValueAtIndex, CFSTR("postscript-name")))
        break;
    }
    if (v8 == ++v9)
      goto LABEL_9;
  }
  v12 = (id)CFStringCreateWithSubstring(v4, ValueAtIndex, v13[0]);
  FindAndReplace(a2, (unint64_t *)&v12, CFSTR("/"), CFSTR(";"));

}

uint64_t CTRunDelegate::Destruct(uint64_t this, const void *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  v2 = *(_QWORD *)(this + 40);
  v3 = *(uint64_t (**)(_QWORD))(v2 + 8);
  if (v3)
    return v3(*(_QWORD *)(v2 + 40));
  return this;
}

uint64_t TAttributes::HandleBackgroundNSColorAttribute(uint64_t result, uint64_t a2)
{
  if (result)
  {
    result = dyld_program_sdk_at_least();
    if ((_DWORD)result)
      *(_BYTE *)(*(_QWORD *)a2 + 137) |= 1u;
  }
  return result;
}

CFArrayRef CTFrameGetLines(CFArrayRef frame)
{
  if (frame)
    return (CFArrayRef)atomic_load((unint64_t *)(*((_QWORD *)frame + 5) + 104));
  return frame;
}

uint64_t CTLineHasBidiLevels(uint64_t result)
{
  if (result)
    return *(_WORD *)(*(_QWORD *)(result + 40) + 152) & 1;
  return result;
}

uint64_t CTRunGetGlyphStorage(uint64_t result, _OWORD *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 40);
    if (a2)
      *a2 = *(_OWORD *)(v2 + 200);
    return *(_QWORD *)(v2 + 216);
  }
  return result;
}

void CTFontGetUnsummedAdvancesForGlyphsAndStyle(uint64_t a1, int a2, unsigned int a3, uint64_t a4, double *a5, uint64_t a6)
{
  if (a1 && a4 && a5 && a6 >= 1)
    TFont::GetUnsummedAdvancesForGlyphs(*(_QWORD *)(a1 + 40), a4, a5, 2, a6, a2, a3 | 0x100000000);
}

const __CFDictionary *TSplicedFont::GetDesignUITrait(TSplicedFont *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("NSCTFontUIFontDesignTrait"));
  return result;
}

unint64_t TAttributes::GetDictionary(TAttributes *this)
{
  unint64_t *v2;
  void *v3;
  const __CFDictionary *v4;
  const void *v5;
  __CFDictionary *v6;
  uint64_t v7;
  double v8;
  __CFDictionary *v9;
  const void *v10;
  uint64_t v11;
  __CFDictionary *v12;
  const void *v13;
  __CFDictionary *v14;
  id v17;
  id v18;

  if (!*((_BYTE *)this + 48) && !*((_BYTE *)this + 49) && (*((_WORD *)this + 69) & 0x3000) == 0)
    return atomic_load((unint64_t *)this);
  v2 = (unint64_t *)((char *)this + 8);
  v3 = (void *)atomic_load((unint64_t *)this + 1);
  if (!v3)
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v18, v4);
    if (*((_BYTE *)this + 48))
    {
      v5 = (const void *)atomic_load((unint64_t *)this + 2);
      v6 = (__CFDictionary *)atomic_load((unint64_t *)&v18);
      CFDictionarySetValue(v6, CFSTR("NSFont"), v5);
    }
    if (*((_BYTE *)this + 49))
    {
      v7 = *((_QWORD *)this + 15);
      if (v7)
        v8 = *(double *)(v7 + 48);
      else
        v8 = 0.0;
      TCFNumber::TCFNumber<double>((unint64_t *)&v17, v8);
      v9 = (__CFDictionary *)atomic_load((unint64_t *)&v18);
      v10 = (const void *)atomic_load((unint64_t *)&v17);
      CFDictionarySetValue(v9, CFSTR("CTBaselineOffset"), v10);

    }
    if ((*((_WORD *)this + 69) & 0x1000) != 0)
    {
      v14 = (__CFDictionary *)atomic_load((unint64_t *)&v18);
      CFDictionaryRemoveValue(v14, CFSTR("CTTracking"));
    }
    else if ((*((_WORD *)this + 69) & 0x2000) != 0)
    {
      v11 = *((_QWORD *)this + 15);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 24))
        {
          TCFNumber::TCFNumber<double>((unint64_t *)&v17, *(double *)(v11 + 16));
          v12 = (__CFDictionary *)atomic_load((unint64_t *)&v18);
          v13 = (const void *)atomic_load((unint64_t *)&v17);
          CFDictionarySetValue(v12, CFSTR("CTTracking"), v13);

        }
      }
    }
    do
      v3 = (void *)__ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    do
    {
      if (__ldaxr(v2))
      {
        __clrex();

        v3 = (void *)atomic_load(v2);
        goto LABEL_24;
      }
    }
    while (__stlxr((unint64_t)v3, v2));

LABEL_24:
  }
  return (unint64_t)v3;
}

__n128 CTFontShapeGlyphs(const __CTFont *a1, unsigned __int16 *a2, CGSize *a3, CGPoint *a4, uint64_t *a5, void **a6, void **a7, unsigned int a8, __CFString *a9, uint64_t a10)
{
  TFont *v17;
  int ShapingType;
  _BOOL8 HasAvailable;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  NSObject *v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  const unsigned __int16 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37[8200];
  void **v38;
  __int128 v39;
  char v40;
  char v41;
  void ***v42;
  void ***v43;
  void **v44[4];
  unsigned __int16 *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _OWORD v52[41];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v45 = a2;
  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a10 || (uint64_t)a7 <= 0)
    return *(__n128 *)MEMORY[0x1E0C9D820];
  v38 = a6;
  memcpy(v52, &unk_1849302A0, sizeof(v52));
  TRunGlue::TRunGlue((TRunGlue *)v52, a1, a2, a3, (uint64_t)a7, *a5, a4, a5);
  v17 = (TFont *)*((_QWORD *)&v52[38] + 1);
  ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(*((_QWORD *)&v52[38] + 1) + 400));
  HasAvailable = StackHasAvailable(0x8000uLL);
  if (HasAvailable)
  {
    MEMORY[0x1E0C80A78](HasAvailable, v20);
    memset(v37, 170, 0x2000uLL);
    LODWORD(v39) = ShapingType;
    if (ShapingType >= 2)
    {
      if (*(_QWORD *)&v52[39] <= 0x10000uLL)
        v21 = (unint64_t)(*(_QWORD *)&v52[39] + 7) >> 3;
      else
        v21 = 0x2000;
      bzero(v37, v21);
      TRunGlue::DetermineCoverage((uint64_t)v52, v37);
    }
    v22 = *((_QWORD *)v17 + 40);
    if (!v22)
    {
      if (qword_1ECDE7550 != -1)
        dispatch_once_f(&qword_1ECDE7550, 0, (dispatch_function_t)GetShapingGlyphsQueue(void)::$_0::__invoke);
      v23 = qword_1ECDE7548;
      CFRetain(a1);
      dispatch_async_f(v23, a1, (dispatch_function_t)InitShapingGlyphsOnQueue(__CTFont const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::__invoke);
    }
    v24 = (void **)*a5;
    v44[0] = (void **)&off_1E15DD900;
    v44[1] = v24;
    v44[2] = a7;
    v44[3] = v38;
    if ((a8 & 2) == 0)
    {
LABEL_26:
      if ((a8 & 4) != 0)
        TRunGlue::ReorderGlyphs((uint64_t)v52);
      v42 = (void ***)0xAAAAAAAAAAAAAA00;
      LODWORD(v43) = -1431655936;
      if (v22)
      {
        v28 = v45;
        v29 = TRunGlue::length((TRunGlue *)v52);
        if (TFont::NeedsShapingForGlyphs(v17, v28, v29, a9))
        {
          if ((a8 & 2) != 0)
            goto LABEL_51;
          v48[0] = &off_1E15DF008;
          v48[1] = a10;
          v48[2] = &v45;
          v49 = v48;
          std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(&v52[35], (uint64_t)v48);
          v30 = v49;
          if (v49 == v48)
          {
            v31 = 4;
            v30 = v48;
          }
          else
          {
            if (!v49)
              goto LABEL_51;
            v31 = 5;
          }
          (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_51:
          if (!TShapingEngine::ShapeGlyphs((uint64_t)v52, v39, a9, (uint64_t)&v42, (uint64_t)v44))
            goto LABEL_42;
        }
LABEL_41:
        TKerningEngine::PositionGlyphs((TRunGlue *)v52, v39, (const TFont *)v42, (char)v43, a9, (uint64_t)v44, a8);
        goto LABEL_42;
      }
      if ((a8 & 2) == 0)
      {
        v46[0] = &off_1E15DF008;
        v46[1] = a10;
        v46[2] = &v45;
        v47 = v46;
        std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(&v52[35], (uint64_t)v46);
        v32 = v47;
        if (v47 == v46)
        {
          v33 = 4;
          v32 = v46;
        }
        else
        {
          if (!v47)
            goto LABEL_40;
          v33 = 5;
        }
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
LABEL_40:
      if (!TShapingEngine::ShapeGlyphs((uint64_t)v52, v39, a9, (uint64_t)&v42, (uint64_t)v44))
      {
LABEL_42:
        v34 = v52[34];
        goto LABEL_43;
      }
      goto LABEL_41;
    }
    v50[0] = &off_1E15DF008;
    v50[1] = a10;
    v50[2] = &v45;
    v51 = v50;
    std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(&v52[35], (uint64_t)v50);
    v25 = v51;
    if (v51 == v50)
    {
      v26 = 4;
      v25 = v50;
    }
    else
    {
      if (!v51)
      {
LABEL_25:
        TRunGlue::InitPropertiesForCombining((TRunGlue *)v52, (const TCharStream *)v44);
        v42 = (void ***)v52;
        v43 = v44;
        v41 = -86;
        v40 = 0;
        TCombiningEngine::ResolveCombiningMarks(&v42, (a8 >> 2) & 1, &v41, &v40);
        goto LABEL_26;
      }
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
    goto LABEL_25;
  }
  v34 = *MEMORY[0x1E0C9D820];
LABEL_43:
  v39 = v34;
  v35 = (_QWORD *)*((_QWORD *)&v52[36] + 1);
  if (*((_OWORD **)&v52[36] + 1) == &v52[35])
  {
    v36 = 4;
    v35 = &v52[35];
    goto LABEL_47;
  }
  if (*((_QWORD *)&v52[36] + 1))
  {
    v36 = 5;
LABEL_47:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  v44[0] = (void **)&v52[23];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)&v52[13];
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)&v52[3] + 1;
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](v44);
  return (__n128)v39;
}

_QWORD *std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(CFRange,long)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t TRunGlue::GetNextUncombinedCharRange(TLine **this, uint64_t a2, BOOL *a3, int *a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  TLine *v8;
  TLine *v9;
  TLine *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (*this)
    return TLine::GetNextUncombinedCharRange(*this, a2, a3, a4);
  v5 = (uint64_t)this[4];
  v6 = (char *)this[5] + (_QWORD)this[6];
  if (v5 < 1)
  {
LABEL_7:
    v11 = (uint64_t)v6;
  }
  else
  {
    v7 = 0;
    v8 = this[66];
    v9 = this[20];
    v10 = this[65];
    while (1)
    {
      v11 = *((_QWORD *)v8 + (_QWORD)v9 + v7);
      if (v11 >= a2)
        break;
      if (v5 == ++v7)
        goto LABEL_7;
    }
    if (v11 < (uint64_t)v6)
    {
      v12 = 0;
      while (1)
      {
        v14 = *((_DWORD *)v10 + (_QWORD)v9 + v7);
        if ((v14 & 0x40) != 0)
          break;
        if ((v14 & 0x20) == 0)
        {
          if ((v14 & 0x380) != 0)
            v11 = a2;
          v12 |= (*((_DWORD *)v10 + (_QWORD)v9 + v7) & 0x380) == 0;
          if ((v14 & 2) != 0)
            v12 = 0;
          else
            a2 = v11;
        }
        if (v7 + 1 >= v5)
          goto LABEL_7;
        v13 = (uint64_t)v8 + 8 * (_QWORD)v9 + 8;
        v11 = *(_QWORD *)(v13 + 8 * v7);
        if ((v12 & 1) == 0)
          a2 = *(_QWORD *)(v13 + 8 * v7);
        ++v7;
        if (v11 >= (uint64_t)v6)
          goto LABEL_8;
      }
      if (v11 < (uint64_t)v6 && (v14 & 0x3C0) != 0)
      {
        v15 = (uint64_t)v10 + 4 * (_QWORD)v9 + 4;
        v16 = (uint64_t)v8 + 8 * (_QWORD)v9 + 8;
        do
        {
          if (v7 + 1 >= v5)
            break;
          if (*(_QWORD *)(v16 + 8 * v7) >= (uint64_t)v6)
            break;
          v17 = *(_DWORD *)(v15 + 4 * v7++);
        }
        while ((v17 & 0x3C0) != 0);
      }
      *a3 = v12 & 1;
      return a2;
    }
  }
LABEL_8:
  *a3 = 0;
  return v11;
}

void TRunGlue::InitPropertiesForCombining(TRunGlue *this, const TCharStream *a2)
{
  uint64_t Chars;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  const uint64_t *v10;
  const uint64_t *v11;
  uint64_t v12;
  _OWORD v13[15];
  _OWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 593) = 1;
  TRunGlue::InitPropertiesFromDeletedGlyphs(this);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  Chars = TCharStream::GetChars(a2, *((_QWORD *)this + 5), &v8);
  if (Chars)
  {
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v13[14] = v5;
    v13[13] = v5;
    v13[12] = v5;
    v13[11] = v5;
    v13[10] = v5;
    v13[9] = v5;
    v13[8] = v5;
    v13[7] = v5;
    v13[6] = v5;
    v13[5] = v5;
    v13[3] = v5;
    v13[4] = v5;
    v13[1] = v5;
    v13[2] = v5;
    v13[0] = v5;
    v11 = 0;
    v12 = 0;
    v9 = (void **)&v10;
    v10 = 0;
    v14 = v13;
    v6 = -1;
    v7 = -1;
    TUnicodeEncoder::EncodePortion((char ***)&v9, 0, Chars, v8, *(_QWORD *)(*((_QWORD *)this + 77) + 400), 0, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 2, *((_QWORD *)this + 65), (double *)&v7, 0);
    if (v10 != v11)
    {
      TRunGlue::FilterSurrogates(this, (uint64_t)a2, &v10);
      v6 = 1;
    }
    *((_QWORD *)this + 75) = v6;
    v9 = (void **)&v10;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v9);
  }
}

uint64_t TUnicodeEncoder::EncodePortion(char ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, double *a11, char a12)
{
  uint64_t v15;
  double *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v27;
  int v28;
  int v29;
  int v30;
  _BOOL4 v31;
  int v32;
  BOOL v33;
  int32_t IntPropertyValue;
  int v35;
  double *v36;
  uint64_t v37;
  char **v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  double v44;
  double v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  double *v57;
  uint64_t v58;
  char **v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v75;
  int v76;
  uint64_t v79;
  uint64_t v80;
  int v81;
  double *v83;
  uint64_t v84;
  __int16 v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char **v90;

  v15 = a2;
  v16 = (double *)(a8 + 8 * a9 * a2);
  v83 = v16;
  v84 = a2;
  v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 688))(a5);
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 712))(a5);
  if (a4 >= 1)
  {
    v75 = a5;
    v17 = 0;
    v18 = 1;
    v79 = a4;
    v80 = a3;
    while (1)
    {
      v19 = v17 + 1;
      v20 = *(unsigned __int16 *)(a3 + 2 * v17);
      if ((v20 & 0xFC00) != 0xD800 || v19 == a4)
      {
        ++v17;
      }
      else
      {
        v22 = *(unsigned __int16 *)(a3 + 2 * v19);
        v23 = (v22 & 0xFC00) == 56320;
        v24 = v22 + ((_DWORD)v20 << 10) - 56613888;
        if (v23)
          v17 += 2;
        else
          ++v17;
        if (v23)
          v20 = v24;
        else
          v20 = v20;
      }
      v25 = MEMORY[0x186DC0AE4](v20);
      if (v25 >= 1)
      {
        if (v25 > 0x15 || ((1 << v25) & 0x20E022) == 0)
        {
          v27 = 0;
        }
        else
        {
          *(_DWORD *)(a10 + 4 * v15) |= 0x8000u;
          v27 = 2;
        }
        v18 |= v27;
      }
      v28 = u_charType(v20);
      v29 = *(unsigned __int16 *)(a7 + 2 * v15);
      v30 = v81;
      if ((unsigned __int16)(v29 + 1) < 2u)
        v30 = 1;
      v31 = v30 == 1 && u_hasBinaryProperty(v20, UCHAR_DEFAULT_IGNORABLE_CODE_POINT) != 0;
      v32 = 1 << v28;
      v33 = ((1 << v28) & 0x5F001) == 0 && !v31;
      if (v33 || IsVisibleFormatter(v20))
      {
        *a11 = *v16 + *a11;
        a3 = v80;
        if ((v32 & 0x37F80E1E) == 0)
        {
          if (v20 >> 5 == 1987 || (v32 & 0x1C0) != 0)
          {
            v18 |= 4u;
            *(_DWORD *)(a10 + 4 * v15) |= 0x40u;
          }
          else if ((v32 & 0xF000000) == 0)
          {
            IntPropertyValue = u_getIntPropertyValue(v20, UCHAR_GRAPHEME_CLUSTER_BREAK);
            a4 = v79;
            if ((IntPropertyValue & 0xFFFFFFFE) == 8)
            {
              v18 |= 4u;
              *(_DWORD *)(a10 + 4 * v15) |= 0x10u;
            }
            else if (IntPropertyValue == 17)
            {
              v18 |= 4u;
            }
            goto LABEL_49;
          }
        }
        a4 = v79;
LABEL_49:
        if (v20 < 0x10000 || (a12 & 1) != 0)
        {
          if (!v29)
            v18 |= 8u;
        }
        else
        {
          v18 |= TUnicodeEncoder::HandleSurrogateChar(a1, a7, &v83, a9, &v84);
        }
        goto LABEL_119;
      }
      if (!v31)
      {
        v42 = *(unsigned __int16 *)(a7 + 2 * v15);
        if (*(_WORD *)(a7 + 2 * v15))
        {
          v43 = 0;
          if (u_hasBinaryProperty(v20, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))
            *v16 = 0.0;
        }
        else
        {
          v43 = 8;
        }
        if ((v32 & 0x7000) == 0 && ((v32 & 0x8000) == 0 || !u_isUWhiteSpace(v20)))
        {
          v44 = *v16 + *a11;
          *a11 = v44;
          if (v28 == 16)
          {
            a4 = v79;
            a3 = v80;
            if (IsVisibleFormatter(v20))
            {
              if (v42)
              {
                v43 |= 4u;
                *(_DWORD *)(a10 + 4 * v15) |= 0x40u;
              }
              if (v20 < 0x10000)
                goto LABEL_118;
LABEL_97:
              if ((a12 & 1) == 0)
                v43 |= TUnicodeEncoder::HandleSurrogateChar(a1, a7, &v83, a9, &v84);
LABEL_118:
              v18 |= v43;
              goto LABEL_119;
            }
            if (v20 >> 11 == 27)
              goto LABEL_118;
            v44 = *a11;
LABEL_110:
            *a11 = v44 - *v16;
            *(_WORD *)(a7 + 2 * v15) = -1;
            *v16 = 0.0;
            *(_DWORD *)(a10 + 4 * v15) |= 0x20u;
            v43 = 16;
            if (v20 >= 0x10000)
            {
              a3 = v80;
              if ((a12 & 1) == 0)
              {
                v57 = &v16[a9];
                v58 = v15 + 1;
                v83 = v57;
                v84 = v15 + 1;
                *(_WORD *)(a7 + 2 * (v15 + 1)) = -1;
                v59 = *a1;
                v60 = (*a1)[1];
                v61 = (*a1)[2];
                if (v60 >= v61)
                {
                  v63 = *v59;
                  v64 = (v60 - *v59) >> 3;
                  v65 = v64 + 1;
                  if ((unint64_t)(v64 + 1) >> 61)
LABEL_139:
                    abort();
                  v66 = v61 - v63;
                  if (v66 >> 2 > v65)
                    v65 = v66 >> 2;
                  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                    v67 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v67 = v65;
                  v90 = v59 + 3;
                  if (v67)
                  {
                    v68 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(v59 + 3), v67);
                    v63 = *v59;
                    v60 = v59[1];
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = &v68[8 * v64];
                  *(_QWORD *)v69 = v58;
                  if (v60 == v63)
                  {
                    v71 = &v68[8 * v64];
                    a4 = v79;
                  }
                  else
                  {
                    v70 = v60;
                    v71 = &v68[8 * v64];
                    a4 = v79;
                    do
                    {
                      v72 = *((_QWORD *)v70 - 1);
                      v70 -= 8;
                      *((_QWORD *)v71 - 1) = v72;
                      v71 -= 8;
                    }
                    while (v70 != v63);
                  }
                  v62 = v69 + 8;
                  *v59 = v71;
                  v86 = v63;
                  v87 = v63;
                  v59[1] = v69 + 8;
                  v88 = v60;
                  v73 = v59[2];
                  v59[2] = &v68[8 * v67];
                  v89 = v73;
                  std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v86);
                  a3 = v80;
                }
                else
                {
                  *(_QWORD *)v60 = v58;
                  v62 = v60 + 8;
                }
                v59[1] = v62;
                v43 = 16;
              }
              goto LABEL_118;
            }
          }
          else
          {
            a4 = v79;
            if (v20 >> 11 != 27)
            {
              if (v28)
                goto LABEL_110;
              if (v20 >= 0x10000)
              {
                a3 = v80;
                goto LABEL_97;
              }
            }
          }
          a3 = v80;
          goto LABEL_118;
        }
        if (v28 == 15)
        {
          a4 = v79;
          a3 = v80;
          if ((v20 - 10) < 4)
            goto LABEL_65;
          if ((_DWORD)v20 == 9)
          {
            *(_DWORD *)(a10 + 4 * v15) |= 4u;
          }
          else if ((_DWORD)v20 == 133)
          {
LABEL_65:
            *(_DWORD *)(a10 + 4 * v15) |= 2u;
            if (!v42)
            {
              LOWORD(v86) = 32;
              v85 = -21846;
              if ((*(uint64_t (**)(uint64_t, char **, __int16 *, uint64_t))(*(_QWORD *)v75 + 664))(v75, &v86, &v85, 1) == 1)
              {
                v43 = 0;
                *(_WORD *)(a7 + 2 * v15) = v85;
              }
            }
          }
          *v16 = 0.0;
          v45 = 0.0;
        }
        else
        {
          a3 = v80;
          if ((v32 & 0x6000) != 0)
          {
            *(_DWORD *)(a10 + 4 * v15) |= 2u;
            *v16 = 0.0;
            v45 = 0.0;
          }
          else
          {
            v45 = *v16;
          }
          a4 = v79;
        }
        *a11 = v45 + *a11;
        *(_DWORD *)(a10 + 4 * v15) |= 1u;
        goto LABEL_118;
      }
      if (!a6)
        break;
      v35 = v76 ^ ((_DWORD)v20 == 65039) ^ 1;
      if (v20 >> 1 != 32519)
        v35 = 1;
      if (((v35 | v81) & 1) != 0)
        break;
      a4 = v79;
      a3 = v80;
      if (v29 == 0xFFFF)
        goto LABEL_107;
      v18 |= 8u;
LABEL_119:
      v16 = &v83[a9];
      v15 = v84 + 1;
      v83 = v16;
      ++v84;
      if (v17 >= a4)
        return (char)v18;
    }
    *(_WORD *)(a7 + 2 * v15) = -1;
    *v16 = 0.0;
    *(_DWORD *)(a10 + 4 * v15) |= 0x20u;
    a4 = v79;
    a3 = v80;
    if (v20 >= 0x10000 && (a12 & 1) == 0)
    {
      v36 = &v16[a9];
      v37 = v15 + 1;
      v83 = v36;
      v84 = v15 + 1;
      *(_WORD *)(a7 + 2 * (v15 + 1)) = -1;
      *v36 = 0.0;
      *(_DWORD *)(a10 + 4 * (v15 + 1)) |= 0x20u;
      v38 = *a1;
      v39 = (*a1)[1];
      v40 = (*a1)[2];
      if (v39 >= v40)
      {
        v46 = *v38;
        v47 = (v39 - *v38) >> 3;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
          goto LABEL_139;
        v49 = v40 - v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v90 = v38 + 3;
        if (v50)
        {
          v51 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(v38 + 3), v50);
          v46 = *v38;
          v39 = v38[1];
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[8 * v47];
        *(_QWORD *)v52 = v37;
        if (v39 == v46)
        {
          v54 = &v51[8 * v47];
          a4 = v79;
        }
        else
        {
          v53 = v39;
          v54 = &v51[8 * v47];
          a4 = v79;
          do
          {
            v55 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v54 - 1) = v55;
            v54 -= 8;
          }
          while (v53 != v46);
        }
        v41 = v52 + 8;
        *v38 = v54;
        v86 = v46;
        v87 = v46;
        v38[1] = v52 + 8;
        v88 = v39;
        v56 = v38[2];
        v38[2] = &v51[8 * v50];
        v89 = v56;
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v86);
        a3 = v80;
      }
      else
      {
        *(_QWORD *)v39 = v37;
        v41 = v39 + 8;
      }
      v38[1] = v41;
    }
LABEL_107:
    v18 |= 0x10u;
    goto LABEL_119;
  }
  LOBYTE(v18) = 1;
  return (char)v18;
}

BOOL IsVisibleFormatter(unsigned int a1)
{
  uint64_t v3;

  if (a1 - 78896 < 0x10 || a1 - 6155 < 5 || a1 - 8204 < 2)
    return 1;
  if (a1 < 0xE0030)
    return u_hasBinaryProperty(a1, UCHAR_PREPENDED_CONCATENATION_MARK) != 0;
  if (a1 < 0xE003A)
    return 1;
  if (a1 < 0xE0061)
    return u_hasBinaryProperty(a1, UCHAR_PREPENDED_CONCATENATION_MARK) != 0;
  v3 = 1;
  if (a1 >= 0xE007B && a1 != 917631)
    return u_hasBinaryProperty(a1, UCHAR_PREPENDED_CONCATENATION_MARK) != 0;
  return v3;
}

uint64_t TBaseFont::IsLastResort(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 2) == 0)
    TBaseFont::DetermineFontFlags(this, 2);
  return (*((_DWORD *)this + 45) >> 1) & 1;
}

uint64_t TInstanceFont::IsLastResort(TInstanceFont *this)
{
  return 0;
}

void TRunGlue::InitPropertiesFromDeletedGlyphs(TRunGlue *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = (char *)this + 368;
  v3 = TRunGlue::length(this);
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::resize((uint64_t)v2, v3);
  v4 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 65) = v4;
  v5 = *((_QWORD *)this + 26);
  if (v5 != *((_QWORD *)this + 27))
  {
    v6 = *((_QWORD *)this + 47) - v4;
    if (v6)
    {
      v7 = v6 >> 2;
      v8 = *((_QWORD *)this + 20);
      if (v7 <= 1)
        v7 = 1;
      do
      {
        if (((*(unsigned __int8 *)(v5 + v8 / 8) >> (v8 & 7)) & 1) != 0)
          *(_DWORD *)(v4 + 4 * v8) = 32;
        ++v8;
        --v7;
      }
      while (v7);
    }
  }
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  _QWORD v20[5];

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (uint64_t)(a1 + 3);
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      abort();
    v10 = v8 >> 2;
    v11 = v4 - v7;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v20[4] = a1 + 3;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate(v6, v12);
      v7 = *a1;
      v5 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    if (v5 != v7)
    {
      v17 = v5;
      do
      {
        v18 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v17 != v7);
    }
    *a1 = v14;
    a1[1] = v16;
    v19 = a1[2];
    a1[2] = v15;
    v20[2] = v5;
    v20[3] = v19;
    v20[0] = v7;
    v20[1] = v7;
    std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)v20);
  }
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t TCharStream::GetChars(TCharStream *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v5 = v3 + v4;
  v9 = __OFSUB__(a2, v4);
  v6 = a2 - v4;
  if (v6 < 0 != v9)
  {
    v9 = 0;
    v7 = 1;
    v8 = 0;
  }
  else
  {
    v9 = __OFSUB__(v5, a2);
    v7 = v5 == a2;
    v8 = v5 - a2 < 0;
  }
  if (v8 ^ v9 | v7)
    return 0;
  v10 = *((_QWORD *)this + 3);
  if (!v10)
    return (*(uint64_t (**)(TCharStream *))(*(_QWORD *)this + 64))(this);
  *a3 = v3 - v6;
  return v10 + 2 * v6;
}

uint64_t TLine::GetNextUncombinedCharRange(TLine *this, uint64_t a2, BOOL *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t NextUncombinedCharRange;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  TRun *v20;
  uint64_t TrailingBaseChar;
  BOOL v22;
  uint64_t LeadingUncombinedCharCount;

  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
  {
    *a3 = 0;
    return *((_QWORD *)this + 10) + *((_QWORD *)this + 9);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * TLine::FindRunWithCharIndex(this, a2, 1)) + 40);
    v9 = a2;
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v12 = v9 <= v11 ? *(_QWORD *)(v8 + 8) : v9;
      NextUncombinedCharRange = TRun::GetNextUncombinedCharRange((TRun *)v8, v12, a3);
      v9 = NextUncombinedCharRange;
      v15 = v14;
      v16 = (*(_BYTE *)(v8 + 224) & 1) != 0 ? -1 : 1;
      *a4 = v16;
      v17 = v10 + v11;
      if (NextUncombinedCharRange != v17)
        break;
      v8 = *(_QWORD *)(v8 + 24);
      if (v8)
      {
        v18 = *((_QWORD *)this + 9);
        if (v18 <= NextUncombinedCharRange && *((_QWORD *)this + 10) + v18 > NextUncombinedCharRange)
          continue;
      }
      return v9;
    }
    if (NextUncombinedCharRange == v11)
    {
      if (v11 > *((_QWORD *)this + 9)
        && TRun::GetLeadingUncombinedCharCount((TRun *)v8) >= 1
        && v11 > a2
        && (v20 = *(TRun **)(v8 + 32)) != 0)
      {
        while (1)
        {
          v9 = v11 - 1;
          TrailingBaseChar = TRun::GetTrailingBaseChar(v20);
          if (TrailingBaseChar == v11 - 1)
            break;
          v9 = *((_QWORD *)v20 + 1);
          if (v11 > v9)
          {
            v9 = TrailingBaseChar;
            break;
          }
          v15 += *((_QWORD *)v20 + 2);
          v20 = (TRun *)*((_QWORD *)v20 + 4);
          v22 = v9 <= a2 || v20 == 0;
          v11 = v9;
          if (v22)
            goto LABEL_30;
        }
        v15 = v15 + v11 - v9;
        *a3 = 1;
      }
      else
      {
        v9 = v11;
      }
    }
LABEL_30:
    if (v9 + v15 == v17)
    {
      do
      {
        v8 = *(_QWORD *)(v8 + 24);
        if (!v8)
          break;
        LeadingUncombinedCharCount = TRun::GetLeadingUncombinedCharCount((TRun *)v8);
        v15 += LeadingUncombinedCharCount;
      }
      while (LeadingUncombinedCharCount == *(_QWORD *)(v8 + 16));
    }
  }
  return v9;
}

uint64_t TRun::GetNextUncombinedCharRange(TRun *this, uint64_t a2, BOOL *a3)
{
  uint64_t v4;
  uint64_t GlyphIndexForChar;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NextChar;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;

  v4 = a2;
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2);
  v23 = GlyphIndexForChar;
  v7 = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
  if (v7 <= v4)
  {
    NextChar = v4;
LABEL_40:
    *a3 = 0;
    return NextChar;
  }
  else
  {
    v8 = 0;
    v9 = (_QWORD *)*((_QWORD *)this + 27);
    v10 = *((_QWORD *)this + 25);
    v11 = v9[5] + 4 * v10;
    NextChar = v4;
    while (1)
    {
      v13 = *(_DWORD *)(v11 + 4 * GlyphIndexForChar);
      if ((v13 & 0x2040) == 0x40)
        break;
      if ((v13 & 0x20) == 0 && *(unsigned __int16 *)(v9[2] + 2 * v10 + 2 * GlyphIndexForChar) != 0xFFFF)
      {
        if ((v13 & 0x300) != 0)
          v14 = v4;
        else
          v14 = NextChar;
        if ((v13 & 2) != 0)
        {
          v8 = 0;
        }
        else
        {
          v4 = v14;
          v8 |= (v13 & 0x300) == 0;
        }
      }
      if (*((int *)this + 64) > 1)
      {
        if ((*((_BYTE *)this + 224) & 1) != 0)
          v16 = -1;
        else
          v16 = 1;
        if ((*((_BYTE *)this + 224) & 1) != 0)
          v17 = -1;
        else
          v17 = *((_QWORD *)this + 26);
        v15 = v16 + GlyphIndexForChar;
        v23 = v16 + GlyphIndexForChar;
        if (v16 + GlyphIndexForChar == v17)
        {
          v15 = v17;
        }
        else
        {
          v18 = v9[6] + 8 * v10;
          v19 = *(_QWORD *)(v18 + 8 * v15);
          if (v19 < NextChar)
          {
            v15 += v16;
            v23 = v15;
            if (v15 == v17)
            {
LABEL_31:
              v15 = v17;
            }
            else
            {
              v20 = GlyphIndexForChar + 3 * v16;
              while (1)
              {
                v19 = *(_QWORD *)(v18 + 8 * v15);
                if (v19 >= NextChar)
                  break;
                v15 += v16;
                v23 = v20;
                v20 += v16;
                if (v17 == v15)
                  goto LABEL_31;
              }
            }
          }
          NextChar = v19;
        }
        if (v15 == v17)
          NextChar = v7;
      }
      else
      {
        if ((*((_BYTE *)this + 224) & 1) != 0)
        {
          v15 = GlyphIndexForChar - 1;
          v23 = GlyphIndexForChar - 1;
          if (GlyphIndexForChar < 1)
          {
LABEL_49:
            NextChar = v7;
            goto LABEL_40;
          }
        }
        else
        {
          v15 = GlyphIndexForChar + 1;
          v23 = GlyphIndexForChar + 1;
          if (GlyphIndexForChar + 1 >= *((_QWORD *)this + 26))
            goto LABEL_49;
        }
        NextChar = *(_QWORD *)(v9[6] + 8 * v10 + 8 * v15);
      }
      if ((v8 & 1) == 0)
        v4 = NextChar;
      GlyphIndexForChar = v15;
      if (NextChar >= v7)
        goto LABEL_40;
    }
    for (; NextChar < v7; NextChar = TRun::GetNextChar(this, NextChar, &v23))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 40) + 4 * *((_QWORD *)this + 25) + 4 * v23) & 0x2040) != 0x40
        && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 40) + 4 * *((_QWORD *)this + 25) + 4 * v23) & 0x300) == 0)
      {
        break;
      }
    }
    *a3 = v8 & 1;
  }
  return v4;
}

uint64_t TUnicodeEncoder::HandleSurrogateChar(char ***a1, uint64_t a2, _QWORD *a3, int a4, uint64_t *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  char **v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;
  _QWORD *v44;

  v6 = (_QWORD *)(*a3 + 8 * a4);
  *a3 = v6;
  v7 = *a5;
  v8 = *a5 + 1;
  *a5 = v8;
  if (*(_WORD *)(a2 + 2 * v7))
  {
    *(_WORD *)(a2 + 2 * v8) = -1;
    *v6 = 0;
    v9 = *a1;
    v10 = (uint64_t *)(*a1)[1];
    v11 = (unint64_t)(*a1)[2];
    if ((unint64_t)v10 < v11)
    {
      *v10 = v8;
      v12 = (char *)(v10 + 1);
LABEL_29:
      result = 0;
      v9[1] = v12;
      return result;
    }
    v17 = (uint64_t *)*v9;
    v18 = ((char *)v10 - *v9) >> 3;
    v19 = v18 + 1;
    if (!((unint64_t)(v18 + 1) >> 61))
    {
      v20 = v11 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      v44 = v9 + 3;
      if (v21)
      {
        v22 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(v9 + 3), v21);
        v17 = (uint64_t *)*v9;
        v10 = (uint64_t *)v9[1];
        v8 = *a5;
      }
      else
      {
        v22 = 0;
      }
      v29 = (uint64_t *)&v22[8 * v18];
      *v29 = v8;
      if (v10 == v17)
      {
        v31 = &v22[8 * v18];
      }
      else
      {
        v30 = v10;
        v31 = &v22[8 * v18];
        do
        {
          v32 = *--v30;
          *((_QWORD *)v31 - 1) = v32;
          v31 -= 8;
        }
        while (v30 != v17);
      }
      v12 = (char *)(v29 + 1);
      *v9 = v31;
      v40 = v17;
      v41 = v17;
      v9[1] = (char *)(v29 + 1);
      v42 = v10;
      v33 = v9[2];
      v9[2] = &v22[8 * v21];
      v43 = v33;
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v40);
      goto LABEL_29;
    }
LABEL_39:
    abort();
  }
  v13 = *a1;
  v14 = (uint64_t *)(*a1)[1];
  v15 = (unint64_t)(*a1)[2];
  if ((unint64_t)v14 >= v15)
  {
    v23 = (uint64_t *)*v13;
    v24 = ((char *)v14 - *v13) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      goto LABEL_39;
    v26 = v15 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v44 = v13 + 3;
    if (v27)
    {
      v28 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(v13 + 3), v27);
      v23 = (uint64_t *)*v13;
      v14 = (uint64_t *)v13[1];
      v8 = *a5;
    }
    else
    {
      v28 = 0;
    }
    v35 = (uint64_t *)&v28[8 * v24];
    *v35 = v8;
    if (v14 == v23)
    {
      v37 = &v28[8 * v24];
    }
    else
    {
      v36 = v14;
      v37 = &v28[8 * v24];
      do
      {
        v38 = *--v36;
        *((_QWORD *)v37 - 1) = v38;
        v37 -= 8;
      }
      while (v36 != v23);
    }
    v16 = (char *)(v35 + 1);
    *v13 = v37;
    v40 = v23;
    v41 = v23;
    v13[1] = (char *)(v35 + 1);
    v42 = v14;
    v39 = v13[2];
    v13[2] = &v28[8 * v27];
    v43 = v39;
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    *v14 = v8;
    v16 = (char *)(v14 + 1);
  }
  v13[1] = v16;
  return 8;
}

char **std::vector<long,TInlineBufferAllocator<long,30ul>>::reserve(char **result, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD v12[5];

  if (a2 > (result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = result;
    v4 = result[1] - *result;
    v12[4] = result + 3;
    v5 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(result + 3), a2);
    v7 = *v3;
    v6 = v3[1];
    v8 = &v5[v4 & 0xFFFFFFFFFFFFFFF8];
    if (v6 != *v3)
    {
      v9 = v3[1];
      v8 = &v5[v4 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v10 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v8 - 1) = v10;
        v8 -= 8;
      }
      while (v9 != v7);
    }
    *v3 = v8;
    v3[1] = &v5[v4 & 0xFFFFFFFFFFFFFFF8];
    v11 = v3[2];
    v3[2] = &v5[8 * a2];
    v12[2] = v6;
    v12[3] = v11;
    v12[0] = v7;
    v12[1] = v7;
    return (char **)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v12);
  }
  return result;
}

char **STL::insert_sorted<TInlineVector<unsigned int,30ul>>(char **result, char *a2)
{
  void **v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _BOOL4 v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _QWORD *v43;

  v3 = (void **)result;
  v5 = *result;
  v4 = result[1];
  v6 = v4 - *result;
  if (v4 == *result)
  {
    v8 = result[1];
  }
  else
  {
    v7 = v6 >> 2;
    v8 = *result;
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[4 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 4;
      v7 += ~(v7 >> 1);
      if (v12 < *(_DWORD *)a2)
        v8 = v11;
      else
        v7 = v9;
    }
    while (v7);
  }
  v13 = (unint64_t)result[2];
  if ((unint64_t)v4 >= v13)
  {
    v18 = (v6 >> 2) + 1;
    v36 = 0xAAAAAAAAAAAAAAAALL;
    if (v18 >> 62)
      abort();
    v19 = v8 - v5;
    v20 = (v8 - v5) >> 2;
    v21 = v13 - (_QWORD)v5;
    v22 = (uint64_t)(v13 - (_QWORD)v5) >> 1;
    if (v22 > v18)
      v18 = v22;
    if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v18;
    v38 = result + 3;
    if (v23)
      v24 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(result + 3), v23);
    else
      v24 = 0;
    v27 = &v24[4 * v20];
    v34 = v24;
    v35 = v27;
    v28 = &v24[4 * v23];
    v37 = v28;
    if (v20 == v23)
    {
      if (v19 < 1)
      {
        if (v8 == v5)
          v30 = 1;
        else
          v30 = v19 >> 1;
        v43 = v3 + 3;
        v31 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(v3 + 3), v30);
        v32 = &v31[v30 & 0xFFFFFFFFFFFFFFFCLL];
        v34 = v31;
        v35 = v32;
        v39 = v24;
        v40 = &v24[4 * v20];
        v37 = &v31[4 * v30];
        v41 = v40;
        v42 = v28;
        std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v39);
        v27 = v32;
      }
      else
      {
        v29 = v20 + 2;
        if (v20 >= -1)
          v29 = v20 + 1;
        v27 -= 4 * (v29 >> 1);
        v35 = v27;
      }
    }
    *(_DWORD *)v27 = *(_DWORD *)a2;
    v36 = (unint64_t)(v27 + 4);
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__swap_out_circular_buffer(v3, (uint64_t)&v34, v8);
    return (char **)std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v34);
  }
  else if (v8 == v4)
  {
    *(_DWORD *)v4 = *(_DWORD *)a2;
    result[1] = v4 + 4;
  }
  else
  {
    v14 = v8 + 4;
    v15 = v4 - 4;
    v16 = result[1];
    while (v15 < v4)
    {
      v17 = *(_DWORD *)v15;
      v15 += 4;
      *(_DWORD *)v16 = v17;
      v16 += 4;
    }
    result[1] = v16;
    if (v4 != v14)
    {
      result = (char **)memmove(&v4[-4 * ((v4 - v14) >> 2)], v8, v4 - v14);
      v16 = (char *)v3[1];
    }
    v26 = v8 <= a2 && v16 > a2;
    *(_DWORD *)v8 = *(_DWORD *)&a2[4 * v26];
  }
  return result;
}

void LangSysTagsWithFallback(unsigned int a1@<W0>, char **a2@<X8>)
{
  char *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  if (HIWORD(a1) == 23112)
  {
    if (a1 == 1514686496)
    {
      v4 = (char *)operator new(4uLL);
      *a2 = v4;
      *(_DWORD *)v4 = 1514689613;
      v4 += 4;
      a2[1] = v4;
      a2[2] = v4;
      return;
    }
    goto LABEL_33;
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECDE79B8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE79B8))
  {
    *(_OWORD *)&qword_1ECDE7A70 = 0u;
    *(_OWORD *)&qword_1ECDE7A60 = 0u;
    dword_1ECDE7A80 = 1065353216;
    __cxa_guard_release(&qword_1ECDE79B8);
  }
  if (qword_1ECDE79C0 != -1)
    dispatch_once_f(&qword_1ECDE79C0, 0, (dispatch_function_t)LangSysTagsWithFallback::$_0::__invoke);
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    do
      v8 = (uint64_t *)*v8;
    while (v8 && *((_DWORD *)v8 + 4) == a1);
  }
  else
  {
    v8 = 0;
  }
  if (v8 == v6)
  {
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v9 = 0;
  a2[2] = 0;
  v10 = a2 + 2;
  *a2 = 0;
  a2[1] = 0;
  do
  {
    if ((unint64_t)v9 >= *v10)
    {
      v12 = *a2;
      v13 = (v9 - *a2) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        abort();
      v15 = *v10 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a2 + 2), v16);
        v12 = *a2;
        v9 = a2[1];
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = *((_DWORD *)v7 + 5);
      v11 = v18 + 4;
      while (v9 != v12)
      {
        v19 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *a2 = v18;
      a2[1] = v11;
      a2[2] = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v9 = *((_DWORD *)v7 + 5);
      v11 = v9 + 4;
    }
    a2[1] = v11;
    v7 = (uint64_t *)*v7;
    v9 = v11;
  }
  while (v7 != v8);
}

uint64_t std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 120);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

char *std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void TFontFeatures::TFontFeatures(TFontFeatures *this, const TBaseFont *a2, int a3)
{
  TBaseFont *v4;
  unint64_t *v5;
  unsigned __int16 *v6;
  int v7;
  const __CFData *CommonTable;
  const __CFData *v9;
  const UInt8 *v10;
  const UInt8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  int8x8_t v14;
  uint64_t *v15;
  uint8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  unint64_t v20;
  CFArrayRef v21;
  void *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint8x8_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  const __CFAllocator *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint64_t ***v44;
  uint64_t **j;
  unint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  const __CFData *v58;
  const __CFData *v59;
  const UInt8 *v60;
  void *v61;
  id v62;
  const __CFData *v63;
  const __CFData *v64;
  const UInt8 *v65;
  const UInt8 *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int16 *v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t ***v75;
  uint64_t **i;
  unint64_t v77;
  _QWORD *v78;
  float v79;
  _BOOL8 v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  id v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  CFIndex v91;
  void *v93;
  id v94;
  const __CFData *v95;
  const __CFData *v96;
  const UInt8 *v97;
  unint64_t v98;
  unsigned __int16 *v99;
  unint64_t v100;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  _BOOL4 v108;
  signed int v109;
  unsigned __int16 *v110;
  unsigned int v111;
  unsigned __int16 *v112;
  BOOL v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  __int16 v120;
  _BOOL4 v122;
  unsigned int v123;
  uint64_t **v124;
  _BOOL4 v125;
  BOOL v126;
  int v127;
  const void *v128;
  __CFDictionary *v129;
  const void *v130;
  __CFDictionary *v131;
  __CFDictionary *v132;
  unint64_t v133;
  void *v134;
  unint64_t v136;
  const void *v137;
  unint64_t v138;
  uint64_t v139;
  const void *v140;
  __CFDictionary *v141;
  __CFDictionary *v142;
  void *v143;
  id v144;
  __CFArray *v145;
  void *v146;
  const void *v147;
  __CFDictionary *v148;
  const void *v149;
  __CFDictionary *v150;
  __CFDictionary *v151;
  __CFDictionary *v152;
  unint64_t v153;
  void *v154;
  void *v155;
  id v156;
  __CFArray *v157;
  unint64_t v158;
  void *v159;
  unsigned int *v161;
  unsigned int v162;
  __CFString *v163;
  unsigned int v164;
  unsigned int v165;
  __CFArray *v166;
  const void *v167;
  int v168;
  const void *v169;
  __CFDictionary *ValueAtIndex;
  const void *v171;
  __CFDictionary *v172;
  const void *v173;
  CFIndex v174;
  __CFDictionary *v175;
  const void *v176;
  __CFDictionary *v177;
  const void *v178;
  __CFDictionary *v179;
  __CFDictionary *v180;
  __CFDictionary *v181;
  unint64_t v182;
  void *v183;
  unsigned __int16 v184;
  unsigned __int8 v185;
  const __CFString *v186;
  __CFDictionary *v187;
  const void *v188;
  __int128 v189;
  uint64_t v190;
  unsigned __int16 v191;
  __CFDictionary *v192;
  const void *v193;
  __CFDictionary *v194;
  const void *v195;
  __CFDictionary *v196;
  const void *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t k;
  __CFDictionary *v201;
  const void *v202;
  unsigned __int16 CharacterVariantOrStylisticSet;
  __CFDictionary *v205;
  const void *v206;
  unint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  __CFDictionary *FeatureSelector;
  __CFDictionary *v213;
  const void *v214;
  const void *v215;
  __CFDictionary *v216;
  CFStringRef v217;
  __CFDictionary *v218;
  __CFString *v219;
  unsigned __int8 v220;
  const __CFString *v221;
  __CFDictionary *v222;
  const void *v223;
  const __CFData *v224;
  __CFArray *v225;
  const void *v226;
  uint64_t v227;
  const __CFArray *v228;
  CFIndex m;
  void *v230;
  const __CFArray *v231;
  const __CFArray *v232;
  CFIndex v233;
  CFIndex v234;
  CFIndex n;
  void *v236;
  int v237;
  int v238;
  unint64_t v239;
  unsigned __int16 *v240;
  unint64_t *v241;
  unint64_t *v242;
  const TBaseFont *v243;
  unsigned __int16 *v244;
  uint64_t v245;
  unsigned __int16 *v246;
  void *value;
  void *valuea;
  int v249;
  unsigned int *v250;
  unsigned int v251;
  _BOOL4 v252;
  const UInt8 *BytePtr;
  __int16 v254;
  unsigned int *v255;
  CFIndex Count;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  const __CFAllocator *allocatorb;
  const __CFArray *allocatorc;
  id v261;
  id v262;
  id v263;
  id Mutable;
  id v265[2];
  __int128 v266;
  float v267;
  int v268;
  id v269[3];
  id v270;
  id v271;
  id v272;
  id v273;
  void *__p[2];
  _BYTE v275[24];
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  _BYTE *v283;
  uint64_t v284;

  v4 = a2;
  v5 = (unint64_t *)this;
  v284 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  memset(v269, 170, sizeof(v269));
  TFontFeatureTable::TFontFeatureTable((TFontFeatureTable *)v269, a2);
  v6 = (unsigned __int16 *)v269[2];
  v243 = v4;
  if (v269[2])
  {
    v7 = *(_DWORD *)v269[2];
    if ((*(_DWORD *)v269[2] & 0xFEFFFFFF) == 0x100)
    {
      v237 = a3;
      v238 = *(_DWORD *)v269[2];
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v275 = 0u;
      *(_QWORD *)&v275[16] = 0xAAAAAAAA3F800000;
      v240 = (unsigned __int16 *)v269[2];
      v241 = v5;
      if (v7 == 16777472)
        goto LABEL_175;
      *(_OWORD *)v265 = 0uLL;
      v266 = 0uLL;
      v267 = 1.0;
      v268 = -1431655766;
      CommonTable = (const __CFData *)TBaseFont::GetCommonTable(v4, 1836020344, 0);
      if (!CommonTable)
        goto LABEL_109;
      v9 = CommonTable;
      BytePtr = CFDataGetBytePtr(CommonTable);
      v10 = CFDataGetBytePtr(v9);
      if (v10)
        v10 += CFDataGetLength(v9);
      if (!BytePtr || (v11 = BytePtr + 8, BytePtr + 8 > v10))
      {
LABEL_109:
        v273 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, const TBaseFont *, uint64_t))(*(_QWORD *)v243 + 480))(&v273, v243, 1717920116);
        v57 = (void *)atomic_load((unint64_t *)&v273);
        v58 = v57;
        v59 = v58;
        if (v58)
          v60 = CFDataGetBytePtr(v58);
        else
          v60 = 0;
        v6 = v240;

        v61 = (void *)atomic_load((unint64_t *)&v273);
        v62 = v61;
        v63 = (const __CFData *)v62;
        if (v63)
        {
          v64 = v63;
          v65 = CFDataGetBytePtr(v63);

          if (v65)
            v65 += CFDataGetLength((CFDataRef)v62);
        }
        else
        {

          v65 = 0;
        }

        if (v60 && v60 + 6 <= v65)
        {
          v66 = v60 + 12;
          v67 = bswap32(*((unsigned __int16 *)v60 + 2)) >> 16;
          v68 = (unint64_t)&v60[12 * v67 + 12];
          if (v68 >= (unint64_t)(v60 + 12) && v68 <= (unint64_t)v65)
          {
            LOWORD(v69) = v67;
            goto LABEL_123;
          }
          if (v60 + 24 <= v65)
          {
            v69 = (v65 - v66) / 0xCuLL;
            v67 = (unsigned __int16)v69;
LABEL_123:
            if ((_WORD)v69)
            {
              v70 = (unsigned __int16 *)&v66[12 * v67];
              while ((*((_WORD *)v66 + 4) & 0x80) == 0)
              {
LABEL_165:
                v66 += 12;
                if (v66 == (const UInt8 *)v70)
                  goto LABEL_166;
              }
              v71 = bswap32(*(unsigned __int16 *)v66) >> 16;
              v72 = (unint64_t)v265[1];
              if (v265[1])
              {
                v73 = (uint8x8_t)vcnt_s8((int8x8_t)v265[1]);
                v73.i16[0] = vaddlv_u8(v73);
                if (v73.u32[0] > 1uLL)
                {
                  v74 = v71;
                  if (v265[1] <= (id)v71)
                    v74 = v71 % (unint64_t)v265[1];
                }
                else
                {
                  v74 = (LODWORD(v265[1]) - 1) & v71;
                }
                v75 = (uint64_t ***)*((_QWORD *)v265[0] + v74);
                if (v75)
                {
                  for (i = *v75; i; i = (uint64_t **)*i)
                  {
                    v77 = (unint64_t)i[1];
                    if (v77 == v71)
                    {
                      if (*((unsigned __int16 *)i + 8) == (_DWORD)v71)
                        goto LABEL_165;
                    }
                    else
                    {
                      if (v73.u32[0] > 1uLL)
                      {
                        if ((id)v77 >= v265[1])
                          v77 %= (unint64_t)v265[1];
                      }
                      else
                      {
                        v77 &= (unint64_t)v265[1] - 1;
                      }
                      if (v77 != v74)
                        break;
                    }
                  }
                }
              }
              else
              {
                v74 = 0xAAAAAAAAAAAAAAAALL;
              }
              v78 = operator new(0x18uLL);
              *v78 = 0;
              v78[1] = v71;
              *((_WORD *)v78 + 8) = v71;
              *((_WORD *)v78 + 9) = 0;
              v79 = (float)(unint64_t)(*((_QWORD *)&v266 + 1) + 1);
              if (!v72 || (float)(v267 * (float)v72) < v79)
              {
                v80 = (v72 & (v72 - 1)) != 0;
                if (v72 < 3)
                  v80 = 1;
                v81 = v80 | (2 * v72);
                v82 = vcvtps_u32_f32(v79 / v267);
                if (v81 <= v82)
                  v83 = v82;
                else
                  v83 = v81;
                std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)v265, v83);
                v72 = (unint64_t)v265[1];
                if (((unint64_t)v265[1] & ((unint64_t)v265[1] - 1)) != 0)
                {
                  if (v265[1] <= (id)v71)
                    v74 = v71 % (unint64_t)v265[1];
                  else
                    v74 = v71;
                }
                else
                {
                  v74 = (LODWORD(v265[1]) - 1) & v71;
                }
              }
              v84 = v265[0];
              v85 = (_QWORD *)*((_QWORD *)v265[0] + v74);
              if (v85)
              {
                *v78 = *v85;
              }
              else
              {
                *v78 = v266;
                *(_QWORD *)&v266 = v78;
                v84[v74] = &v266;
                if (!*v78)
                {
LABEL_164:
                  ++*((_QWORD *)&v266 + 1);
                  goto LABEL_165;
                }
                v86 = *(_QWORD *)(*v78 + 8);
                if ((v72 & (v72 - 1)) != 0)
                {
                  if (v86 >= v72)
                    v86 %= v72;
                }
                else
                {
                  v86 &= v72 - 1;
                }
                v85 = (char *)v265[0] + 8 * v86;
              }
              *v85 = v78;
              goto LABEL_164;
            }
          }
        }
LABEL_166:

        std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::clear(__p);
        v87 = v265[0];
        v265[0] = 0;
        v88 = __p[0];
        __p[0] = v87;
        if (v88)
          operator delete(v88);
        v89 = (unint64_t)v265[1];
        v265[1] = 0;
        *(_OWORD *)v275 = v266;
        *(float *)&v275[16] = v267;
        __p[1] = (void *)v89;
        v5 = v241;
        v4 = v243;
        if (*((_QWORD *)&v266 + 1))
        {
          v90 = *(_QWORD *)(v266 + 8);
          if ((v89 & (v89 - 1)) != 0)
          {
            if (v90 >= v89)
              v90 %= v89;
          }
          else
          {
            v90 &= v89 - 1;
          }
          *((_QWORD *)__p[0] + v90) = v275;
          v266 = 0uLL;
        }
        std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v265);
LABEL_175:
        v91 = bswap32(v6[2]) >> 16;
        allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v91, MEMORY[0x1E0C9B378]);
        if (!atomic_load((unint64_t *)&Mutable))
        {
LABEL_263:

          std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)__p);
          a3 = v237;
          goto LABEL_264;
        }
        v93 = (void *)atomic_load((unint64_t *)&v269[1]);
        v94 = v93;
        v95 = (const __CFData *)v94;
        if (v95)
        {
          v96 = v95;
          v97 = CFDataGetBytePtr(v95);

          if (v97)
          {
            v98 = (unint64_t)&v97[CFDataGetLength((CFDataRef)v94)];
            goto LABEL_181;
          }
        }
        else
        {

        }
        v98 = 0;
LABEL_181:

        v99 = v6 + 6;
        v100 = (unint64_t)&v6[6 * v91 + 6];
        if (v100 < (unint64_t)(v6 + 6) || v100 > v98)
        {
          if ((unint64_t)(v6 + 12) > v98)
          {
            do
LABEL_259:
              v158 = __ldaxr((unint64_t *)&Mutable);
            while (__stlxr(0, (unint64_t *)&Mutable));
            v5 = v241;
            do
              v159 = (void *)__ldaxr(v241);
            while (__stlxr(v158, v241));

            v4 = v243;
            goto LABEL_263;
          }
          v91 = (v98 - (unint64_t)v99) / 0xC;
        }
        if (v91)
        {
          v244 = &v99[6 * v91];
          value = (void *)*MEMORY[0x1E0C9AE50];
          v239 = v98;
          do
          {
            v102 = *v99;
            v103 = v99[1];
            v104 = *((_DWORD *)v99 + 1);
            v105 = v99[4];
            v246 = v99;
            v106 = v99[5];
            v263 = (id)0xAAAAAAAAAAAAAAAALL;
            TCFNumber::TCFNumber<short>((unint64_t *)&v263, bswap32(v106) >> 16);
            v107 = bswap32(v105);
            v108 = v238 != 16777472;
            if ((v107 & 0x40000000) == 0)
              v108 = 1;
            v249 = v107 >> 16;
            if (v107 >> 16 >= 0)
              v108 = 1;
            v109 = bswap32(v104);
            v110 = (unsigned __int16 *)((char *)v6 + v109);
            if (v109 < 0
              || ((v111 = bswap32(v103) >> 16, v112 = &v110[2 * v111], v112 >= v110)
                ? (v113 = (unint64_t)v112 > v98)
                : (v113 = 1),
                  v113))
            {
              v114 = (unint64_t)(v110 + 2) > v98 || v109 <= -1;
              v111 = (v98 - (_DWORD)v110) >> 2;
              if (v114)
                LOWORD(v111) = 0;
            }
            if ((unsigned __int16)v111 > ((unsigned __int16)(HIWORD(v107) & 0x8000) >> 15))
            {
              v115 = __rev16(v102);
              v116 = BYTE2(v107);
              v117 = (unsigned __int16)v111;
              if (v108)
                v116 = 0;
              v245 = v116;
              v272 = CFArrayCreateMutable(allocatora, (unsigned __int16)v111, MEMORY[0x1E0C9B378]);
              if (atomic_load((unint64_t *)&v272))
              {
                v119 = 0;
                if (v249 >= 0)
                  v120 = -2;
                else
                  v120 = -1;
                v122 = v238 == 16777472 && v102 != 0;
                v252 = v122;
                v254 = v120;
                do
                {
                  v123 = bswap32(*v110);
                  if (*(_QWORD *)&v275[8])
                  {
                    LOWORD(v265[0]) = v115;
                    v124 = std::__hash_table<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>>>::find<unsigned short>(__p, (unsigned __int16 *)v265);
                    v125 = v124 && *((unsigned __int16 *)v124 + 9) == HIWORD(v123);
                  }
                  else
                  {
                    if (v249 < 0)
                      v126 = v119 == v245;
                    else
                      v126 = (v123 & 0x10000) == 0;
                    v125 = v126;
                  }
                  v127 = *(_DWORD *)&v254 & HIWORD(v123);
                  v271 = (id)0xAAAAAAAAAAAAAAAALL;
                  TCFNumber::TCFNumber<short>((unint64_t *)&v271, bswap32(v110[1]) >> 16);
                  v270 = (id)0xAAAAAAAAAAAAAAAALL;
                  v128 = (const void *)atomic_load((unint64_t *)&v271);
                  v270 = 0;
                  v265[0] = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  TCFNumber::TCFNumber<int>((unint64_t *)&v273, v127);
                  v129 = (__CFDictionary *)atomic_load((unint64_t *)v265);
                  v130 = (const void *)atomic_load((unint64_t *)&v273);
                  CFDictionarySetValue(v129, CFSTR("CTFeatureSelectorIdentifier"), v130);

                  if (v128)
                  {
                    v131 = (__CFDictionary *)atomic_load((unint64_t *)v265);
                    CFDictionarySetValue(v131, CFSTR("CTFeatureSelectorNameID"), v128);
                  }
                  if (v125)
                  {
                    v132 = (__CFDictionary *)atomic_load((unint64_t *)v265);
                    CFDictionarySetValue(v132, CFSTR("CTFeatureSelectorDefault"), value);
                  }
                  do
                    v133 = __ldaxr((unint64_t *)v265);
                  while (__stlxr(0, (unint64_t *)v265));
                  do
                    v134 = (void *)__ldaxr((unint64_t *)&v270);
                  while (__stlxr(v133, (unint64_t *)&v270));

                  if (v252)
                  {
                    v265[0] = (id)0xAAAAAAAAAAAAAAAALL;
                    CopyOTFeatureSettingForTypeAndSelector(v115, v127, v265);
                    if (atomic_load((unint64_t *)v265))
                    {
                      v136 = atomic_load((unint64_t *)v265);
                      v137 = v136
                           ? (const void *)objc_msgSend(*(id *)(v136 + 8), "objectForKey:", CFSTR("CTFeatureOpenTypeTag")): 0;
                      v138 = atomic_load((unint64_t *)v265);
                      if (v138)
                      {
                        v139 = objc_msgSend(*(id *)(v138 + 8), "objectForKey:", CFSTR("CTFeatureOpenTypeValue"));
                        if (v137)
                        {
                          v140 = (const void *)v139;
                          if (v139)
                          {
                            v141 = (__CFDictionary *)atomic_load((unint64_t *)&v270);
                            CFDictionaryAddValue(v141, CFSTR("CTFeatureOpenTypeTag"), v137);
                            v142 = (__CFDictionary *)atomic_load((unint64_t *)&v270);
                            CFDictionaryAddValue(v142, CFSTR("CTFeatureOpenTypeValue"), v140);
                          }
                        }
                      }
                    }

                  }
                  v143 = (void *)atomic_load((unint64_t *)&v270);
                  v144 = v143;
                  v145 = (__CFArray *)atomic_load((unint64_t *)&v272);
                  CFArrayAppendValue(v145, v144);

                  ++v119;
                  v110 += 2;
                }
                while (v119 != v117);
              }
              do
                v146 = (void *)__ldaxr((unint64_t *)&v272);
              while (__stlxr(0, (unint64_t *)&v272));

              v272 = (id)0xAAAAAAAAAAAAAAAALL;
              v147 = (const void *)atomic_load((unint64_t *)&v263);
              v272 = 0;
              v265[0] = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              TCFNumber::TCFNumber<int>((unint64_t *)&v273, v115);
              v148 = (__CFDictionary *)atomic_load((unint64_t *)v265);
              v149 = (const void *)atomic_load((unint64_t *)&v273);
              CFDictionarySetValue(v148, CFSTR("CTFeatureTypeIdentifier"), v149);

              v150 = (__CFDictionary *)atomic_load((unint64_t *)v265);
              CFDictionarySetValue(v150, CFSTR("CTFeatureTypeSelectors"), v146);
              if (v147)
              {
                v151 = (__CFDictionary *)atomic_load((unint64_t *)v265);
                CFDictionarySetValue(v151, CFSTR("CTFeatureTypeNameID"), v147);
              }
              if (v249 < 0)
              {
                v152 = (__CFDictionary *)atomic_load((unint64_t *)v265);
                CFDictionarySetValue(v152, CFSTR("CTFeatureTypeExclusive"), value);
              }
              v98 = v239;
              do
                v153 = __ldaxr((unint64_t *)v265);
              while (__stlxr(0, (unint64_t *)v265));
              do
                v154 = (void *)__ldaxr((unint64_t *)&v272);
              while (__stlxr(v153, (unint64_t *)&v272));

              v155 = (void *)atomic_load((unint64_t *)&v272);
              v156 = v155;
              v157 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
              CFArrayAppendValue(v157, v156);

              v6 = v240;
            }

            v99 = v246 + 6;
          }
          while (v246 + 6 != v244);
        }
        goto LABEL_259;
      }
      v12 = operator new(0x18uLL);
      v13 = v12;
      *v12 = 0;
      v12[1] = 0;
      *((_DWORD *)v12 + 4) = 0;
      v14 = (int8x8_t)v265[1];
      if (v265[1])
      {
        if (*(_QWORD *)v265[0])
        {
          v15 = **(uint64_t ***)v265[0];
          if (v15)
          {
            v16 = (uint8x8_t)vcnt_s8((int8x8_t)v265[1]);
            v16.i16[0] = vaddlv_u8(v16);
            do
            {
              v17 = v15[1];
              if (v17)
              {
                if (v16.u32[0] > 1uLL)
                {
                  if ((id)v17 < v265[1])
                    break;
                  v18 = v17 % (unint64_t)v265[1];
                }
                else
                {
                  v18 = v17 & ((unint64_t)v265[1] - 1);
                }
                if (v18)
                  break;
              }
              else if (!*((_WORD *)v15 + 8))
              {
                operator delete(v12);
                goto LABEL_50;
              }
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
      v19 = (float)(unint64_t)(*((_QWORD *)&v266 + 1) + 1);
      if (v265[1] && (float)(v267 * (float)(unint64_t)v265[1]) >= v19)
      {
        v20 = 0;
      }
      else
      {
        v23 = v265[1] < (id)3 || ((unint64_t)v265[1] & ((unint64_t)v265[1] - 1)) != 0;
        v24 = v23 | (2 * (uint64_t)v265[1]);
        v25 = vcvtps_u32_f32(v19 / v267);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)v265, v26);
        v14 = (int8x8_t)v265[1];
        v20 = v13[1];
      }
      v27 = (uint8x8_t)vcnt_s8(v14);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v14)
          v20 %= *(_QWORD *)&v14;
      }
      else
      {
        v20 &= *(_QWORD *)&v14 - 1;
      }
      v28 = v265[0];
      v29 = (_QWORD *)*((_QWORD *)v265[0] + v20);
      if (v29)
      {
        *v13 = *v29;
      }
      else
      {
        *v13 = v266;
        *(_QWORD *)&v266 = v13;
        v28[v20] = &v266;
        if (!*v13)
        {
LABEL_49:
          ++*((_QWORD *)&v266 + 1);
LABEL_50:
          v31 = *((_DWORD *)BytePtr + 1);
          if (v31)
          {
            v32 = 0;
            v33 = bswap32(v31);
            if (v33 <= 1)
              v33 = 1;
            v251 = v33;
            allocator = (CFAllocatorRef)v10;
            while (1)
            {
              if (BytePtr > v11 + 8 || v11 + 12 > v10)
                goto LABEL_109;
              v35 = (const __CFAllocator *)(v11 + 16);
              LODWORD(v36) = bswap32(*((_DWORD *)v11 + 2));
              v37 = (unint64_t)&v11[12 * v36 + 16];
              if (v37 < (unint64_t)(v11 + 16) || v37 > (unint64_t)v10)
              {
                if (v11 + 28 > v10)
                  goto LABEL_108;
                v36 = (allocator - v35) / 0xCuLL;
              }
              if ((_WORD)v36)
              {
                v39 = (unsigned __int16 *)((char *)v35 + 12 * (unsigned __int16)v36);
                while ((*(_DWORD *)v11 & *((_DWORD *)v35 + 1)) == 0)
                {
LABEL_107:
                  v35 = (const __CFAllocator *)((char *)v35 + 12);
                  if (v35 == (const __CFAllocator *)v39)
                    goto LABEL_108;
                }
                v40 = bswap32(*(unsigned __int16 *)v35) >> 16;
                v41 = (unint64_t)v265[1];
                if (v265[1])
                {
                  v42 = (uint8x8_t)vcnt_s8((int8x8_t)v265[1]);
                  v42.i16[0] = vaddlv_u8(v42);
                  if (v42.u32[0] > 1uLL)
                  {
                    v43 = v40;
                    if (v265[1] <= (id)v40)
                      v43 = v40 % (unint64_t)v265[1];
                  }
                  else
                  {
                    v43 = (LODWORD(v265[1]) - 1) & v40;
                  }
                  v44 = (uint64_t ***)*((_QWORD *)v265[0] + v43);
                  if (v44)
                  {
                    for (j = *v44; j; j = (uint64_t **)*j)
                    {
                      v46 = (unint64_t)j[1];
                      if (v46 == v40)
                      {
                        if (*((unsigned __int16 *)j + 8) == (_DWORD)v40)
                          goto LABEL_107;
                      }
                      else
                      {
                        if (v42.u32[0] > 1uLL)
                        {
                          if ((id)v46 >= v265[1])
                            v46 %= (unint64_t)v265[1];
                        }
                        else
                        {
                          v46 &= (unint64_t)v265[1] - 1;
                        }
                        if (v46 != v43)
                          break;
                      }
                    }
                  }
                }
                else
                {
                  v43 = 0xAAAAAAAAAAAAAAAALL;
                }
                v47 = bswap32(*((unsigned __int16 *)v35 + 1)) >> 16;
                v48 = operator new(0x18uLL);
                *v48 = 0;
                v48[1] = v40;
                *((_WORD *)v48 + 8) = v40;
                *((_WORD *)v48 + 9) = v47;
                v49 = (float)(unint64_t)(*((_QWORD *)&v266 + 1) + 1);
                if (!v41 || (float)(v267 * (float)v41) < v49)
                {
                  v50 = (v41 & (v41 - 1)) != 0;
                  if (v41 < 3)
                    v50 = 1;
                  v51 = v50 | (2 * v41);
                  v52 = vcvtps_u32_f32(v49 / v267);
                  if (v51 <= v52)
                    v53 = v52;
                  else
                    v53 = v51;
                  std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)v265, v53);
                  v41 = (unint64_t)v265[1];
                  if (((unint64_t)v265[1] & ((unint64_t)v265[1] - 1)) != 0)
                  {
                    if (v265[1] <= (id)v40)
                      v43 = v40 % (unint64_t)v265[1];
                    else
                      v43 = v40;
                  }
                  else
                  {
                    v43 = (LODWORD(v265[1]) - 1) & v40;
                  }
                }
                v54 = v265[0];
                v55 = (_QWORD *)*((_QWORD *)v265[0] + v43);
                if (v55)
                {
                  *v48 = *v55;
                  goto LABEL_105;
                }
                *v48 = v266;
                *(_QWORD *)&v266 = v48;
                v54[v43] = &v266;
                if (*v48)
                {
                  v56 = *(_QWORD *)(*v48 + 8);
                  if ((v41 & (v41 - 1)) != 0)
                  {
                    if (v56 >= v41)
                      v56 %= v41;
                  }
                  else
                  {
                    v56 &= v41 - 1;
                  }
                  v55 = (char *)v265[0] + 8 * v56;
LABEL_105:
                  *v55 = v48;
                }
                ++*((_QWORD *)&v266 + 1);
                goto LABEL_107;
              }
LABEL_108:
              v11 += bswap32(*((_DWORD *)v11 + 1));
              ++v32;
              v10 = (const UInt8 *)allocator;
              if (v32 == v251)
                goto LABEL_109;
            }
          }
          goto LABEL_109;
        }
        v30 = *(_QWORD *)(*v13 + 8);
        if (v27.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&v14)
            v30 %= *(_QWORD *)&v14;
        }
        else
        {
          v30 &= *(_QWORD *)&v14 - 1;
        }
        v29 = (char *)v265[0] + 8 * v30;
      }
      *v29 = v13;
      goto LABEL_49;
    }
  }
  else if ((*(unsigned int (**)(TBaseFont *, uint64_t))(*(_QWORD *)v4 + 472))(v4, 1717920116))
  {
    v21 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    do
      v22 = (void *)__ldaxr(v5);
    while (__stlxr((unint64_t)v21, v5));

    goto LABEL_329;
  }
LABEL_264:
  if (a3)
  {
    if (atomic_load(v5))
    {
      v242 = v5;
      if (LOBYTE(v269[0]))
      {
        CustomOTFeatures(v4, 1, v265);
        v161 = (unsigned int *)v265[0];
        v250 = (unsigned int *)v265[1];
        if (v265[0] != v265[1])
        {
          allocatorb = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          valuea = (void *)*MEMORY[0x1E0C9AE50];
          while (1)
          {
            v162 = *v161;
            LODWORD(__p[0]) = bswap32(*v161);
            BYTE4(__p[0]) = 0;
            v163 = (__CFString *)CFStringCreateWithCString(allocatorb, (const char *)__p, 0);
            v164 = NumberOfGlyphVariants(v4, v162);
            if (v164)
              break;
LABEL_316:

            if (++v161 == v250)
            {
              v161 = (unsigned int *)v265[0];
              v5 = v242;
              goto LABEL_318;
            }
          }
          v165 = v164;
          v255 = v161;
          v166 = CFArrayCreateMutable(allocatorb, v164 + 1, MEMORY[0x1E0C9B378]);
          v167 = (const void *)atomic_load((unint64_t *)&v262);
          CFArrayAppendValue(v166, v167);

          v168 = 0;
          do
          {
            v169 = (const void *)atomic_load((unint64_t *)&v261);
            CFArrayAppendValue(v166, v169);

          }
          while (v165 != v168);
          ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v166, 0);
          __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
          CTCopyLocalizedString(CFSTR("Off"), CFSTR("OpenType"), (unint64_t *)__p);
          v171 = (const void *)atomic_load((unint64_t *)__p);
          CFDictionarySetValue(ValueAtIndex, CFSTR("CTFeatureSelectorName"), v171);
          if (v165 == 1)
          {
            v172 = (__CFDictionary *)CFArrayGetValueAtIndex(v166, 1);
            v273 = (id)0xAAAAAAAAAAAAAAAALL;
            CTCopyLocalizedString(CFSTR("On"), CFSTR("OpenType"), (unint64_t *)&v273);
            v173 = (const void *)atomic_load((unint64_t *)&v273);
            CFDictionarySetValue(v172, CFSTR("CTFeatureSelectorName"), v173);

          }
          else
          {
            v174 = 1;
            do
            {
              v175 = (__CFDictionary *)CFArrayGetValueAtIndex(v166, v174);
              v273 = (id)0xAAAAAAAAAAAAAAAALL;
              CreateLocalizedStringWithFormat(CFSTR("%d"), (unint64_t *)&v273, v174);
              v176 = (const void *)atomic_load((unint64_t *)&v273);
              CFDictionarySetValue(v175, CFSTR("CTFeatureSelectorName"), v176);

              ++v174;
            }
            while (v174 - v165 != 1);
          }

          v272 = 0;
          __p[0] = CFDictionaryCreateMutable(allocatorb, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if ((dyld_program_sdk_at_least() & 1) == 0)
          {
            TCFNumber::TCFNumber<int>((unint64_t *)&v273, 0);
            v177 = (__CFDictionary *)atomic_load((unint64_t *)__p);
            v178 = (const void *)atomic_load((unint64_t *)&v273);
            CFDictionarySetValue(v177, CFSTR("CTFeatureTypeIdentifier"), v178);

          }
          v179 = (__CFDictionary *)atomic_load((unint64_t *)__p);
          CFDictionarySetValue(v179, CFSTR("CTFeatureOpenTypeTag"), v163);
          v180 = (__CFDictionary *)atomic_load((unint64_t *)__p);
          CFDictionarySetValue(v180, CFSTR("CTFeatureTypeSelectors"), v166);
          v181 = (__CFDictionary *)atomic_load((unint64_t *)__p);
          CFDictionarySetValue(v181, CFSTR("CTFeatureTypeExclusive"), valuea);
          v4 = v243;
          do
            v182 = __ldaxr((unint64_t *)__p);
          while (__stlxr(0, (unint64_t *)__p));
          do
            v183 = (void *)__ldaxr((unint64_t *)&v272);
          while (__stlxr(v182, (unint64_t *)&v272));

          if ((v162 & 0xFFFF0000) == 0x73730000)
          {
            CharacterVariantOrStylisticSet = GetCharacterVariantOrStylisticSet(v162);
            if (CharacterVariantOrStylisticSet >= 0x100u)
            {
              v220 = CharacterVariantOrStylisticSet;
              __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
              CTCopyLocalizedString(CFSTR("Stylistic Set %d"), CFSTR("OpenType"), (unint64_t *)&v273);
              v221 = (const __CFString *)atomic_load((unint64_t *)&v273);
              CreateLocalizedStringWithFormat(v221, (unint64_t *)__p, v220);

              v222 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
              v223 = (const void *)atomic_load((unint64_t *)__p);
              CFDictionarySetValue(v222, CFSTR("CTFeatureTypeName"), v223);
              v224 = NameIDForStylisticSet(v243, v220);
              if ((v224 & 0xFF0000) == 0)
                goto LABEL_311;
              v273 = (id)0xAAAAAAAAAAAAAAAALL;
              TCFNumber::TCFNumber<int>((unint64_t *)&v273, (unsigned __int16)v224);
              v216 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
              v215 = (const void *)atomic_load((unint64_t *)&v273);
              goto LABEL_310;
            }
          }
          else if ((v162 & 0xFFFF0000) == 0x63760000)
          {
            v184 = GetCharacterVariantOrStylisticSet(v162);
            if (v184 >= 0x100u)
            {
              v185 = v184;
              v271 = (id)0xAAAAAAAAAAAAAAAALL;
              CTCopyLocalizedString(CFSTR("Character Variant %d"), CFSTR("OpenType"), (unint64_t *)__p);
              v186 = (const __CFString *)atomic_load((unint64_t *)__p);
              CreateLocalizedStringWithFormat(v186, (unint64_t *)&v271, v185);

              v187 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
              v188 = (const void *)atomic_load((unint64_t *)&v271);
              CFDictionarySetValue(v187, CFSTR("CTFeatureTypeName"), v188);
              LODWORD(v270) = -1442797056;
              LODWORD(Mutable) = -1442797056;
              v282 = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v189 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v189 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v280 = v189;
              v281 = v189;
              v278 = v189;
              v279 = v189;
              v276 = v189;
              v277 = v189;
              *(_OWORD *)&v275[8] = v189;
              __p[0] = 0;
              __p[1] = 0;
              *(_QWORD *)v275 = 0;
              v283 = &v275[8];
              v190 = NameIDForCharacterVariant(v243, v185, (uint64_t)&v270, (uint64_t)&Mutable, __p);
              if ((v190 & 0xFF0000) != 0)
              {
                v191 = v190;
                if (BYTE2(v270))
                {
                  v192 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
                  TCFNumber::TCFNumber<int>((unint64_t *)&v273, (unsigned __int16)v270);
                  v193 = (const void *)atomic_load((unint64_t *)&v273);
                  CFDictionarySetValue(v192, CFSTR("CTFontFeatureSampleTextNameID"), v193);

                }
                if (BYTE2(Mutable))
                {
                  v194 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
                  TCFNumber::TCFNumber<int>((unint64_t *)&v273, (unsigned __int16)Mutable);
                  v195 = (const void *)atomic_load((unint64_t *)&v273);
                  CFDictionarySetValue(v194, CFSTR("CTFontFeatureTooltipTextNameID"), v195);

                }
                v273 = (id)0xAAAAAAAAAAAAAAAALL;
                TCFNumber::TCFNumber<int>((unint64_t *)&v273, v191);
                v196 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
                v197 = (const void *)atomic_load((unint64_t *)&v273);
                CFDictionarySetValue(v196, CFSTR("CTFeatureTypeNameID"), v197);

              }
              v198 = (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2;
              if (v165 >= v198)
                v199 = v198;
              else
                v199 = v165;
              if ((_DWORD)v199)
              {
                for (k = 0; k != v199; ++k)
                {
                  v201 = (__CFDictionary *)CFArrayGetValueAtIndex(v166, k + 1);
                  v273 = (id)0xAAAAAAAAAAAAAAAALL;
                  TCFNumber::TCFNumber<int>((unint64_t *)&v273, *((_DWORD *)__p[0] + k));
                  v202 = (const void *)atomic_load((unint64_t *)&v273);
                  CFDictionarySetValue(v201, CFSTR("CTFeatureSelectorNameID"), v202);

                }
              }
              v273 = __p;
              std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v273);

              v4 = v243;
              goto LABEL_313;
            }
          }
          __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
          CopyLocalizedOTFeatureName(v163, (unint64_t *)__p);
          if (atomic_load((unint64_t *)__p))
          {
            v205 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
            v206 = (const void *)atomic_load((unint64_t *)__p);
            CFDictionarySetValue(v205, CFSTR("CTFeatureTypeName"), v206);
LABEL_311:
            v219 = (__CFString *)__p[0];
            goto LABEL_312;
          }
          v273 = (id)0xAAAAAAAAAAAAAAAALL;
          CopyFeatureSettingForTag(v163, 0, 0, 0, 1, &v273);
          if (!atomic_load((unint64_t *)&v273))
            goto LABEL_307;
          v208 = atomic_load((unint64_t *)&v273);
          if (!v208)
            goto LABEL_307;
          v209 = objc_msgSend(*(id *)(v208 + 8), "objectForKey:", CFSTR("CTFeatureTypeIdentifier"));
          if (!v209
            || (v210 = (void *)v209,
                (v211 = (void *)objc_msgSend(*(id *)(v208 + 8), "objectForKey:", CFSTR("CTFeatureSelectorIdentifier"))) == 0)
            || (FeatureSelector = (__CFDictionary *)TFontFeatures::GetFeatureSelector((TFontFeatures *)v242, objc_msgSend(v210, "unsignedShortValue"), objc_msgSend(v211, "unsignedShortValue"))) == 0|| (v213 = FeatureSelector, CFDictionaryAddValue(FeatureSelector, CFSTR("CTFeatureOpenTypeTag"), v163), CFDictionaryAddValue(v213, CFSTR("CTFeatureOpenTypeValue"), &unk_1E1614B78), (v214 = CFDictionaryGetValue(v213, CFSTR("CTFeatureSelectorNameID"))) == 0))
          {
LABEL_307:

            v217 = CFStringCreateWithFormat(allocatorb, 0, CFSTR("'%@'"), v163);
            v218 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
            CFDictionarySetValue(v218, CFSTR("CTFeatureTypeName"), v217);
            v219 = (__CFString *)v217;
LABEL_312:

LABEL_313:
            v225 = (__CFArray *)atomic_load(v242);
            if (v225)
            {
              v226 = (const void *)atomic_load((unint64_t *)&v272);
              CFArrayAppendValue(v225, v226);
            }

            v161 = v255;
            goto LABEL_316;
          }
          v215 = v214;
          v216 = (__CFDictionary *)atomic_load((unint64_t *)&v272);
LABEL_310:
          CFDictionarySetValue(v216, CFSTR("CTFeatureTypeNameID"), v215);

          goto LABEL_311;
        }
LABEL_318:
        if (v161)
        {
          v265[1] = v161;
          operator delete(v161);
        }
      }
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(void **__return_ptr, TBaseFont *))(*(_QWORD *)v4 + 496))(__p, v4);
      atomic_load((unint64_t *)__p);
      v227 = CGFontNameTableCreate();
      v228 = (const __CFArray *)atomic_load(v5);
      allocatorc = v228;
      if (v228)
      {
        Count = CFArrayGetCount(v228);
        if (Count)
        {
          for (m = 0; m != Count; ++m)
          {
            v230 = (id)CFArrayGetValueAtIndex(allocatorc, m);
            ReplaceNameIDKeyWithLocalizedName((const __CFDictionary *)v230, CFSTR("CTFeatureTypeNameID"), CFSTR("CTFeatureTypeName"), v227, CFSTR("FeatureTypeNames"));
            ReplaceNameIDKeyWithLocalizedName((const __CFDictionary *)v230, CFSTR("CTFontFeatureSampleTextNameID"), CFSTR("CTFeatureSampleText"), v227, 0);
            ReplaceNameIDKeyWithLocalizedName((const __CFDictionary *)v230, CFSTR("CTFontFeatureTooltipTextNameID"), CFSTR("CTFeatureTooltipText"), v227, 0);
            v231 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v230, CFSTR("CTFeatureTypeSelectors"));
            if (v231)
            {
              v232 = v231;
              v233 = CFArrayGetCount(v231);
              if (v233)
              {
                v234 = v233;
                for (n = 0; n != v234; ++n)
                {
                  v236 = (id)CFArrayGetValueAtIndex(v232, n);
                  ReplaceNameIDKeyWithLocalizedName((const __CFDictionary *)v236, CFSTR("CTFeatureSelectorNameID"), CFSTR("CTFeatureSelectorName"), v227, CFSTR("FeatureSelectorNames"));

                }
              }
            }

          }
        }
      }
      CGFontNameTableRelease();

    }
  }
LABEL_329:

}

unint64_t *TCFNumber::TCFNumber<short>(unint64_t *a1, __int16 a2)
{
  unint64_t v3;
  id v5;
  __int16 valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberShortType, &valuePtr);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  *a1 = v3;

  return a1;
}

void TFont::~TFont(TFont *this)
{
  TASCIIDataCache *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = (TASCIIDataCache *)*((_QWORD *)this + 48);
  if (v2)
  {
    TASCIIDataCache::~TASCIIDataCache(v2);
    MEMORY[0x186DC03AC]();
  }
  if ((unint64_t)(*((_QWORD *)this + 42) + 1) >= 2)
    MEMORY[0x186DC0394]();
  for (i = 344; i != 360; i += 8)
  {
    v4 = *(_QWORD *)((char *)this + i);
    if ((unint64_t)(v4 + 1) >= 2)
    {
      v5 = std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table(v4);
      MEMORY[0x186DC03AC](v5, 0x10A0C408EF24B1CLL);
    }
  }
  if (MEMORY[0x1E0D65078])
    OTSVGTableRelease();
  v6 = (unsigned int *)*((_QWORD *)this + 50);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }

  v10 = (_QWORD *)*((_QWORD *)this + 59);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v12)
    operator delete(v12);
  v13 = (void *)*((_QWORD *)this + 53);
  if (v13)
  {
    *((_QWORD *)this + 54) = v13;
    operator delete(v13);
  }

  std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)this + 208);
  std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));

  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    MEMORY[0x186DC03AC](v14, 0x1000C40EED21634);

}

void TASCIIDataCache::~TASCIIDataCache(TASCIIDataCache *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 241);
  if (v2)
    MEMORY[0x186DC03AC](v2, 0x1000C400F47AF14);
  v3 = *((_QWORD *)this + 242);
  if (v3)
    MEMORY[0x186DC0394](v3, 0x1000C80F7F8B94BLL);
}

unint64_t TFontFeatures::CopyNonDefault(TFontFeatures *this, const TBaseFont *a2, id a3)
{
  unint64_t v3;
  unint64_t v4;
  TFontFeatures *v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  const __CFArray *v11;
  id *ValueAtIndex;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  void *v18;
  const __CFString *v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFDictionary *v24;
  const __CFNumber *v25;
  void *v26;
  CFIndex v27;
  const __CFDictionary *Value;
  const __CFArray *v29;
  CFIndex v30;
  void *v31;
  id v32;
  __CFArray *v33;
  void *v34;
  id v35;
  __CFArray *v36;
  id v37;
  TFontFeatures *v38;
  void *v39;
  _BOOL4 v40;
  const __CFArray *v41;
  CFIndex v42;
  void *v43;
  id v44;
  __CFArray *v45;
  void *v47;
  char v48;
  id v49;
  __CFArray *v50;
  __CFArray *v51;
  const __CFArray *v52;
  const TBaseFont *v54;
  _OWORD v55[4];
  unint64_t v56;
  _OWORD v57[2];
  __int128 v58;
  CFIndex v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62[4];
  id *v63;
  uint64_t v64;
  _OWORD *v65;
  __int16 v66;
  id v67;
  BOOL v68;
  id v69[2];
  __int128 v70;
  _OWORD v71[3];
  _OWORD v72[2];
  unint64_t v73;
  id v74;
  id v75;
  id v76;
  CFMutableArrayRef v77;
  CFMutableArrayRef Mutable;
  id v79[8];
  __int128 v80;
  _BYTE v81[32];
  unint64_t v82;

  v3 = 0;
  v4 = atomic_load((unint64_t *)this);
  if (a3 && v4)
  {
    v6 = this;
    v58 = xmmword_184930A28;
    v80 = xmmword_184930A28;
    memset(v81, 170, sizeof(v81));
    memset(v57, 170, sizeof(v57));
    v56 = 0xAAAAAAAAFFFFFFFFLL;
    v82 = 0xAAAAAAAAFFFFFFFFLL;
    memset(v79, 170, sizeof(v79));
    memset(v55, 170, sizeof(v55));
    TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)v79, a3);
    v7 = (const __CFArray *)atomic_load((unint64_t *)v79);
    if (v7)
      Count = CFArrayGetCount(v7);
    else
      Count = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v77 = CFArrayCreateMutable(v9, 0, v10);
    if (Count >= 1)
    {
      v61 = 0;
      v64 = (uint64_t)v71 + 8;
      v65 = v72;
      v63 = &v69[1];
      v54 = a2;
      while (1)
      {
        v11 = (const __CFArray *)atomic_load((unint64_t *)v79);
        v59 = Count - 1;
        v60 = Count;
        ValueAtIndex = (id *)CFArrayGetValueAtIndex(v11, Count - 1);
        v75 = (id)0xAAAAAAAAAAAAAAAALL;
        v76 = 0;
        TFontFeatures::SettingsByNormalizing(v6, a2, (uint64_t)ValueAtIndex, (unint64_t *)&v76, &v75);
        if (atomic_load((unint64_t *)&v75))
        {
          *(_DWORD *)v62 = TBaseFont::HasOTFontFeatureTable(a2);
          v14 = (const __CFArray *)atomic_load((unint64_t *)&v75);
          if (v14)
          {
            v15 = CFArrayGetCount(v14);
            if (v15)
              break;
          }
        }
LABEL_50:

        Count = v59;
        a2 = v54;
        if (v60 <= 1)
          goto LABEL_51;
      }
      v16 = v15;
      v17 = 0;
      while (1)
      {
        v18 = (void *)CFArrayGetValueAtIndex(v14, v17);
        if (ValueAtIndex)
          v19 = (const __CFString *)objc_msgSend(ValueAtIndex[1], "objectForKey:", CFSTR("CTFeatureOpenTypeTag"));
        else
          v19 = 0;
        v74 = v18;
        v20 = (const __CFDictionary *)atomic_load((unint64_t *)&v74);
        if (!v20 || (v21 = (const __CFNumber *)CFDictionaryGetValue(v20, CFSTR("CTFeatureTypeIdentifier"))) == 0)
        {
          v26 = (void *)atomic_load((unint64_t *)&v77);
          TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)v69, v26);
          v27 = TFontFeatureSettingList::IndexOfOpenTypeSetting((TFontFeatureSettingList *)v69, v19);
          std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)v65);
          std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table(v64);
          std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)v63, (_QWORD *)v70);

          if (v27 != -1)
            goto LABEL_47;
          LODWORD(v69[0]) = -1431655766;
          Value = (const __CFDictionary *)atomic_load((unint64_t *)&v74);
          if (Value)
            Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("CTFeatureOpenTypeValue"));
          if (!GetValue<__CFNumber const*>((uint64_t)Value, v69))
            goto LABEL_47;
          if (LODWORD(v69[0]))
          {
            v29 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
            v30 = CFArrayGetCount(v29);
            v31 = (void *)atomic_load((unint64_t *)&v74);
            v32 = v31;
            v33 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArrayInsertValueAtIndex(v33, v30, v32);

            ++v61;
          }
          v34 = (void *)atomic_load((unint64_t *)&v74);
          v35 = v34;
          v36 = (__CFArray *)atomic_load((unint64_t *)&v77);
          CFArrayAppendValue(v36, v35);
          v37 = v35;
          goto LABEL_46;
        }
        v22 = v21;
        if ((TFontFeatures::HandleAlias(v6, (const TFeatureSetting *)&v74, *(int *)v62, (TCFMutableArray *)&Mutable, (TCFMutableArray *)&v77) & 1) == 0)break;
LABEL_47:

        if (v16 == ++v17)
          goto LABEL_50;
      }
      v68 = -86;
      v67 = TFontFeatures::GetFeatureSelector(v6, (const TFeatureSetting *)&v74, &v68);
      if (!atomic_load((unint64_t *)&v67))
        goto LABEL_45;
      v24 = (const __CFDictionary *)atomic_load((unint64_t *)&v74);
      v25 = v24 ? (const __CFNumber *)CFDictionaryGetValue(v24, CFSTR("CTFeatureSelectorIdentifier")) : 0;
      v66 = -21846;
      if (!GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)v25, &v66))
        goto LABEL_45;
      v38 = v6;
      v71[2] = v58;
      v72[0] = v57[1];
      v72[1] = v57[0];
      v73 = v56;
      *(_OWORD *)v69 = v55[3];
      v70 = v55[2];
      v71[0] = v55[1];
      v71[1] = v55[0];
      v39 = (void *)atomic_load((unint64_t *)&v77);
      TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)v69, v39);
      if (v19)
      {
        if (TFontFeatureSettingList::IndexOfOpenTypeSetting((TFontFeatureSettingList *)v69, v19) == -1)
        {
          v40 = v68;
          goto LABEL_33;
        }
LABEL_44:
        std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)v65);
        std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table(v64);
        std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)v63, (_QWORD *)v70);

        v6 = v38;
LABEL_45:
        v37 = v67;
LABEL_46:

        goto LABEL_47;
      }
      v40 = v68;
      if ((TFontFeatureSettingList::ContainsAATSetting((TFontFeatureSettingList *)v69, v22, v25, v68) & 1) != 0)
        goto LABEL_44;
LABEL_33:
      if (v40)
      {
          goto LABEL_36;
      }
      else
      {
        v48 = v66;
        {
LABEL_36:
          if (v19)
          {
            if (!atomic_load((unint64_t *)&v76))
            {
              v51 = (__CFArray *)atomic_load((unint64_t *)&v77);
              CFArrayAppendValue(v51, ValueAtIndex);
              goto LABEL_44;
            }
            v47 = (void *)atomic_load((unint64_t *)&v76);
          }
          else
          {
            v47 = (void *)atomic_load((unint64_t *)&v74);
          }
          v49 = v47;
          v50 = (__CFArray *)atomic_load((unint64_t *)&v77);
          CFArrayAppendValue(v50, v49);

          goto LABEL_44;
        }
      }
      v41 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
      v42 = CFArrayGetCount(v41) - v61;
      v43 = (void *)atomic_load((unint64_t *)&v74);
      v44 = v43;
      v45 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayInsertValueAtIndex(v45, v42, v44);

      goto LABEL_36;
    }
LABEL_51:
    v52 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
    if (CFArrayGetCount(v52) < 1)
    {
      v3 = 0;
    }
    else
    {
      do
        v3 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
    }

    std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)v81);
    std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v79[5]);
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)&v79[1], (_QWORD *)v79[2]);

  }
  return v3;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void TFontFeatureSettingList::TFontFeatureSettingList(TFontFeatureSettingList *this, id a2)
{
  id v3;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  v3 = a2;
  TFontFeatureSettingList::Emplace((uint64_t)this, (unint64_t *)&v3);

}

void TFontFeatures::SettingsByNormalizing(TFontFeatures *a1@<X0>, const TBaseFont *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  const __CFString *v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  CFTypeID v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  const void *v22;
  CFTypeID v23;
  unint64_t v24;
  const __CFNumber *v25;
  void *v26;
  void *v27;
  const __CFArray *Value;
  const __CFArray *v29;
  CFIndex Count;
  CFIndex v31;
  CFIndex v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  const void *v35;
  unint64_t v36;
  void *v37;
  char v38;
  unint64_t v39;
  void *v40;
  void *v42;
  _BOOL4 HasOTFontFeatureTable;
  void *v44;
  const __CFAllocator *v45;
  const CFArrayCallBacks *v46;
  const __CFArray *v47;
  __CFArray *v48;
  unint64_t v49;
  id v50;
  void *v51;
  unint64_t v52;
  void *v53;
  _QWORD *v54;
  BOOL v55;
  id v56;
  id Mutable;
  id v58;
  unsigned int v59;
  BOOL v60;
  id v61;
  id values;

  v61 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", a3);
  if (!atomic_load((unint64_t *)&v61))
    goto LABEL_48;
  v10 = atomic_load((unint64_t *)&v61);
  if (v10)
  {
    v11 = (const __CFString *)objc_msgSend(*(id *)(v10 + 8), "objectForKey:", CFSTR("CTFeatureOpenTypeTag"));
    v60 = 0;
    v59 = 0;
    if (v11)
    {
      v12 = atomic_load((unint64_t *)&v61);
      if (v12
        && (v13 = (const void *)objc_msgSend(*(id *)(v12 + 8), "objectForKey:", CFSTR("CTFeatureOpenTypeValue"))) != 0)
      {
        v14 = (uint64_t)v13;
        v15 = CFGetTypeID(v13);
        LODWORD(v58) = 0;
        if (v15 == CFNullGetTypeID())
        {
          v16 = 0;
          v17 = 1;
        }
        else
        {
          GetValue<__CFNumber const*>(v14, &v58);
          v17 = 0;
          v16 = v58;
        }
      }
      else
      {
        v16 = 0;
        v17 = 0;
        LODWORD(v58) = 0;
      }
      CopyFeatureSettingForTag(v11, a2, &v60, &v59, v16, &values);
      do
        v19 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v20 = (void *)__ldaxr((unint64_t *)&v61);
      while (__stlxr(v19, (unint64_t *)&v61));

      v18 = 1;
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
  }
  else
  {
    v18 = 0;
    v11 = 0;
    v17 = 0;
    v60 = 0;
    v59 = 0;
  }
  v21 = atomic_load((unint64_t *)&v61);
  if (v21)
  {
    v22 = (const void *)objc_msgSend(*(id *)(v21 + 8), "objectForKey:", CFSTR("CTFeatureSelectorIdentifier"));
    if ((v17 & 1) == 0)
    {
      if (!v22)
        goto LABEL_45;
      v23 = CFGetTypeID(v22);
      if (v23 != CFNullGetTypeID())
        goto LABEL_45;
    }
  }
  else if ((v17 & 1) == 0)
  {
    goto LABEL_45;
  }
  v24 = atomic_load((unint64_t *)&v61);
  if (v24)
    v25 = (const __CFNumber *)objc_msgSend(*(id *)(v24 + 8), "objectForKey:", CFSTR("CTFeatureTypeIdentifier"));
  else
    v25 = 0;
  v26 = TFontFeatures::GetFeatureType(a1, v25);
  v27 = v26;
  if (!v26)
  {
LABEL_28:
    v29 = 0;
    goto LABEL_31;
  }
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v26, CFSTR("CTFeatureTypeSelectors"));
  v29 = Value;
  if (Value)
  {
    Count = CFArrayGetCount(Value);
    if (Count)
    {
      v31 = Count;
      v54 = a5;
      v32 = 0;
      while (1)
      {
        values = (id)CFArrayGetValueAtIndex(v29, v32);
          break;

        if (v31 == ++v32)
        {
          v29 = 0;
          goto LABEL_30;
        }
      }
      v29 = (const __CFArray *)atomic_load((unint64_t *)&values);

LABEL_30:
      a5 = v54;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
LABEL_31:
  v33 = v29;
  v34 = v33;
  if (v33)
    v35 = CFDictionaryGetValue(v33, CFSTR("CTFeatureSelectorIdentifier"));
  else
    v35 = 0;
  values = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], (uint64_t)v25, (uint64_t)v35, 0, 0);
  do
    v36 = __ldaxr((unint64_t *)&values);
  while (__stlxr(0, (unint64_t *)&values));
  do
    v37 = (void *)__ldaxr((unint64_t *)&v61);
  while (__stlxr(v36, (unint64_t *)&v61));

  v38 = v18 ^ 1;
  if (!a4)
    v38 = 1;
  if ((v38 & 1) == 0)
  {
    values = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], 0, 0, (uint64_t)v11, (NSNumber *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v59));
    do
      v39 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    do
      v40 = (void *)__ldaxr(a4);
    while (__stlxr(v39, a4));

  }
LABEL_45:
  if (v60)
  {
    if (atomic_load((unint64_t *)&v61))
    {
      v42 = (void *)atomic_load((unint64_t *)&v61);
      values = v42;
      *a5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      goto LABEL_59;
    }
LABEL_48:
    *a5 = 0;
    goto LABEL_59;
  }
  HasOTFontFeatureTable = TBaseFont::HasOTFontFeatureTable(a2);
  v58 = (id)0xAAAAAAAAAAAAAAAALL;
  v44 = (void *)atomic_load((unint64_t *)&v61);
  v58 = v44;
  v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v46 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v56 = CFArrayCreateMutable(v45, 0, v46);
  if (TFontFeatures::HandleAlias(a1, (const TFeatureSetting *)&v58, HasOTFontFeatureTable, (TCFMutableArray *)&Mutable, (TCFMutableArray *)&v56))
  {
    values = (id)0xAAAAAAAAAAAAAAAALL;
    v47 = (const __CFArray *)atomic_load((unint64_t *)&v56);
    TCFMutableArray::TCFMutableArray((TCFMutableArray *)&values, v47);
    v48 = (__CFArray *)atomic_load((unint64_t *)&values);
    CFArrayRemoveValueAtIndex(v48, 0);
    do
      v49 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    *a5 = v49;
    v50 = values;
  }
  else
  {
    v55 = -86;
    v51 = TFontFeatures::GetFeatureSelector(a1, (const TFeatureSetting *)&v58, &v55);
    if (v51 && (v52 = atomic_load((unint64_t *)&v61)) != 0)
    {
      v53 = (void *)atomic_load((unint64_t *)&v61);
      values = v53;
      *a5 = CFArrayCreate(v45, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    }
    else
    {
      *a5 = 0;
    }
    v50 = v51;
  }

LABEL_59:
}

uint64_t GetSettingValue<__CFNumber const*,unsigned short>(uint64_t result, void *a2)
{
  const __CFNumber *v3;
  CFTypeID v4;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      if (a2)
        CFNumberGetValue(v3, kCFNumberShortType, a2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL TBaseFont::HasOTFontFeatureTable(TBaseFont *this)
{
  const __CFString *v3;
  unint64_t v4;
  void *v5;
  void *v7;
  const __CFBoolean *v8;
  _BOOL8 v9;
  id *v10;
  void *v12;
  id v14;
  id v15;
  id v16;
  id v17;

  v17 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontHasOTFeatures"), &v17);
  if (atomic_load((unint64_t *)&v17))
    goto LABEL_12;
  if (!(*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
    goto LABEL_9;
  v3 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  CopyAttributeForSystemFont(v3, CFSTR("CTFontHasOTFeatures"), (const __CFString **)&v16);
  do
    v4 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));
  do
    v5 = (void *)__ldaxr((unint64_t *)&v17);
  while (__stlxr(v4, (unint64_t *)&v17));

  if (!atomic_load((unint64_t *)&v17))
  {
LABEL_9:
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 144))(&v16, this);
    v10 = (id *)MEMORY[0x1E0C9AE50];
    if (!atomic_load((unint64_t *)&v16))
      v10 = (id *)MEMORY[0x1E0C9AE40];
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v17, *v10);

    v12 = (void *)atomic_load((unint64_t *)&v17);
    v14 = v12;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v14, CFSTR("CTFontHasOTFeatures"));

LABEL_12:
    v8 = (const __CFBoolean *)atomic_load((unint64_t *)&v17);
    if (!v8)
      goto LABEL_8;
LABEL_13:
    v9 = CFBooleanGetValue(v8) != 0;
    goto LABEL_14;
  }
  v7 = (void *)atomic_load((unint64_t *)&v17);
  v15 = v7;
  TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v15, CFSTR("CTFontHasOTFeatures"));

  v8 = (const __CFBoolean *)atomic_load((unint64_t *)&v17);
  if (v8)
    goto LABEL_13;
LABEL_8:
  v9 = 0;
LABEL_14:

  return v9;
}

void *TFontFeatures::GetFeatureSelector(TFontFeatures *this, const TFeatureSetting *a2, BOOL *a3)
{
  const __CFDictionary *v6;
  const __CFNumber *Value;
  const __CFDictionary *v8;
  const __CFNumber *v9;
  void *Selector;
  id v12;

  v6 = (const __CFDictionary *)atomic_load((unint64_t *)a2);
  if (v6)
    Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("CTFeatureTypeIdentifier"));
  else
    Value = 0;
  v8 = (const __CFDictionary *)atomic_load((unint64_t *)a2);
  if (v8)
    v9 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("CTFeatureSelectorIdentifier"));
  else
    v9 = 0;
  v12 = TFontFeatures::GetFeatureType(this, Value);

  return Selector;
}

void *`anonymous namespace'::TFeatureType::GetSelector(_anonymous_namespace_::TFeatureType *this, const __CFNumber *a2)
{
  const __CFDictionary *v3;
  const __CFArray *Value;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  void *v9;
  void *v10;
  __int16 v12;
  __int16 v13;

  v13 = -21846;
  if (!GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)a2, &v13))
    return 0;
    v13 &= ~1u;
  v3 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (!v3)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("CTFeatureTypeSelectors"));
  if (!Value)
    return 0;
  v5 = Value;
  Count = CFArrayGetCount(Value);
  if (!Count)
    return 0;
  v7 = Count;
  v8 = 0;
  while (1)
  {
    v9 = (id)CFArrayGetValueAtIndex(v5, v8);
    v10 = v9;
    v12 = -21846;
    if (v9)
      v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, CFSTR("CTFeatureSelectorIdentifier"));
    if (GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)v9, &v12) && v13 == v12)
      break;

    if (v7 == ++v8)
      return 0;
  }

  return v10;
}

const __CFDictionary *`anonymous namespace'::TFeatureType::IsExclusive(_anonymous_namespace_::TFeatureType *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("CTFeatureTypeExclusive"));
    if (result)
      return (const __CFDictionary *)(CFBooleanGetValue(result) != 0);
  }
  return result;
}

uint64_t TFontFeatures::HandleAlias(TFontFeatures *this, const TFeatureSetting *a2, int a3, TCFMutableArray *a4, TCFMutableArray *a5)
{
  const __CFDictionary *v10;
  const void *Value;
  const __CFDictionary *v12;
  const __CFNumber *v13;
  uint64_t v14;
  unsigned __int16 *v16;
  int v18;
  int v19;
  void *FeatureSelector;
  const void *v21;
  const __CFNumber *v22;
  void *v23;
  char v24;
  const void *v25;
  const __CFNumber *v26;
  _BOOL4 v27;
  unsigned int v28;
  unint64_t v29;
  CTFeatureSetting *v30;
  __CFArray *v31;
  unint64_t v32;
  CTFeatureSetting *v33;
  __CFArray *v34;
  unint64_t v35;
  void *v36;
  unsigned __int16 v37;
  unint64_t v38;
  void *v39;
  const void *v40;
  const __CFNumber *v41;
  _BOOL4 v42;
  unsigned int v43;
  unint64_t v44;
  CTFeatureSetting *v45;
  __CFArray *v46;
  uint64_t v47;
  char v49;
  id v50;
  id v51;
  id v52;
  _QWORD *v53[4];
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  id v57;
  id v58;
  unsigned __int16 v59;
  unsigned __int16 v60;
  _OWORD v61[10];
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v61[0] = xmmword_184930940;
  v61[1] = xmmword_184930950;
  v61[2] = xmmword_184930960;
  v61[3] = xmmword_184930970;
  v61[4] = xmmword_184930980;
  v61[5] = xmmword_184930990;
  v61[6] = xmmword_1849309A0;
  v61[7] = xmmword_1849309B0;
  v61[8] = xmmword_1849309C0;
  v61[9] = xmmword_1849309D0;
  v62 = 37;
  v10 = (const __CFDictionary *)atomic_load((unint64_t *)a2);
  if (v10)
    Value = CFDictionaryGetValue(v10, CFSTR("CTFeatureTypeIdentifier"));
  else
    Value = 0;
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)a2);
  if (v12)
    v13 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("CTFeatureSelectorIdentifier"));
  else
    v13 = 0;
  v60 = -21846;
  v59 = -21846;
  if (!GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)Value, &v60)
    || !GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)v13, &v59))
  {
    return 0;
  }
  v14 = 0;
  while (*(unsigned __int16 *)((char *)v61 + v14) != v60 || *(unsigned __int16 *)((char *)v61 + v14 + 2) != v59)
  {
    v14 += 12;
    if (v14 == 168)
      return 0;
  }
  v16 = (unsigned __int16 *)((char *)v61 + v14);
  if (*(_WORD *)((char *)v61 + v14 + 8) && a3 == 0)
    return 0;
  v18 = v16[2];
  v58 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFNumber::TCFNumber<int>((unint64_t *)&v58, v18);
  v19 = v16[3];
  v57 = (id)0xAAAAAAAAAAAAAAAALL;
  v49 = v19;
  TCFNumber::TCFNumber<int>((unint64_t *)&v57, v19);
  v56 = -86;
  TFeatureSetting::TFeatureSetting((TFeatureSetting *)&v52, Value, v13);
  FeatureSelector = TFontFeatures::GetFeatureSelector(this, (const TFeatureSetting *)&v52, &v56);

  if (!FeatureSelector)
  {
    v21 = (const void *)atomic_load((unint64_t *)&v58);
    v22 = (const __CFNumber *)atomic_load((unint64_t *)&v57);
    TFeatureSetting::TFeatureSetting((TFeatureSetting *)&v52, v21, v22);
    FeatureSelector = TFontFeatures::GetFeatureSelector(this, (const TFeatureSetting *)&v52, &v56);

    if (!FeatureSelector)
    {
      v47 = 0;
      goto LABEL_39;
    }
  }
  v23 = (void *)atomic_load((unint64_t *)a5);
  TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)&v52, v23);
  v24 = TFontFeatureSettingList::ContainsAATSetting((TFontFeatureSettingList *)&v52, (const __CFNumber *)Value, v13, v56);
  std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v55);
  std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v54);
  std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)v53, v53[1]);

  if ((v24 & 1) == 0)
  {
    v51 = (id)0xAAAAAAAAAAAAAAAALL;
    v52 = FeatureSelector;
    v25 = (const void *)atomic_load((unint64_t *)&v58);
    v26 = (const __CFNumber *)atomic_load((unint64_t *)&v57);
    TFeatureSetting::TFeatureSetting((TFeatureSetting *)&v51, v25, v26);
    v27 = v56;
    if (v27)
    {
      if ((v28 & 1) != 0)
        goto LABEL_26;
    }
    else if (((((v49 & 1) == 0) ^ v28) & 1) == 0)
    {
LABEL_26:
      v29 = atomic_load((unint64_t *)a2);
      v30 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v29);
      v31 = (__CFArray *)atomic_load((unint64_t *)a5);
      CFArrayAppendValue(v31, v30);

      v32 = atomic_load((unint64_t *)&v51);
      v33 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v32);
      v34 = (__CFArray *)atomic_load((unint64_t *)a5);
      CFArrayAppendValue(v34, v33);

      if (!v16[4])
      {
LABEL_37:

        goto LABEL_38;
      }
      TCFNumber::TCFNumber<int>((unint64_t *)&v50, v16[4]);
      do
        v35 = __ldaxr((unint64_t *)&v50);
      while (__stlxr(0, (unint64_t *)&v50));
      do
        v36 = (void *)__ldaxr((unint64_t *)&v58);
      while (__stlxr(v35, (unint64_t *)&v58));

      v37 = *(_WORD *)((char *)v61 + v14 + 10);
      TCFNumber::TCFNumber<int>((unint64_t *)&v50, v37);
      do
        v38 = __ldaxr((unint64_t *)&v50);
      while (__stlxr(0, (unint64_t *)&v50));
      do
        v39 = (void *)__ldaxr((unint64_t *)&v57);
      while (__stlxr(v38, (unint64_t *)&v57));

      v50 = (id)0xAAAAAAAAAAAAAAAALL;
      v40 = (const void *)atomic_load((unint64_t *)&v58);
      v41 = (const __CFNumber *)atomic_load((unint64_t *)&v57);
      TFeatureSetting::TFeatureSetting((TFeatureSetting *)&v50, v40, v41);
      v42 = v56;
      if (v42)
      {
        if ((v43 & 1) != 0)
        {
LABEL_36:
          v44 = atomic_load((unint64_t *)&v50);
          v45 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v44);
          v46 = (__CFArray *)atomic_load((unint64_t *)a5);
          CFArrayAppendValue(v46, v45);

          goto LABEL_37;
        }
      }
      else if (((((v37 & 1) == 0) ^ v43) & 1) == 0)
      {
        goto LABEL_36;
      }
      TFontFeatures::HandleAlias(TFeatureSetting const&,BOOL,TCFMutableArray &,TCFMutableArray &)const::$_1::operator()((unint64_t *)a4, (unint64_t *)&v50);
      goto LABEL_36;
    }
    TFontFeatures::HandleAlias(TFeatureSetting const&,BOOL,TCFMutableArray &,TCFMutableArray &)const::$_1::operator()((unint64_t *)a4, (unint64_t *)a2);
    TFontFeatures::HandleAlias(TFeatureSetting const&,BOOL,TCFMutableArray &,TCFMutableArray &)const::$_1::operator()((unint64_t *)a4, (unint64_t *)&v51);
    goto LABEL_26;
  }
LABEL_38:
  v47 = 1;
LABEL_39:

  return v47;
}

void TFontFeatureSettingList::Emplace(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  void *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *v9;
  const __CFArray *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t ***v24;
  unsigned __int16 v25;
  unsigned __int16 v26;

  do
    v3 = __ldaxr(a2);
  while (__stlxr(0, a2));
  do
    v4 = (void *)__ldaxr((unint64_t *)a1);
  while (__stlxr(v3, (unint64_t *)a1));

  v5 = (const __CFArray *)atomic_load((unint64_t *)a1);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      v9 = (const void *)*MEMORY[0x1E0C9B0D0];
      v24 = (uint64_t ***)(a1 + 16);
      do
      {
        v10 = (const __CFArray *)atomic_load((unint64_t *)a1);
        v11 = (id)CFArrayGetValueAtIndex(v10, v8);
        v12 = v11;
        if (v11)
        {
          Value = CFDictionaryGetValue(v11, CFSTR("CTFeatureTypeIdentifier"));
          if (Value)
          {
            v14 = (uint64_t)Value;
            if (CFDictionaryGetValue(v12, CFSTR("CTFeatureSelectorIdentifier")) != v9)
            {
              v26 = -21846;
              v25 = -21846;
              if (GetSettingValue<__CFNumber const*,unsigned short>(v14, &v26))
              {
                v15 = CFDictionaryGetValue(v12, CFSTR("CTFeatureSelectorIdentifier"));
                if (GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)v15, &v25))
                {
                  v16 = v25;
                  v17 = v26;
                  v18 = (uint64_t *)operator new(0x38uLL);
                  v19 = v18;
                  *((_WORD *)v18 + 16) = v17;
                  v18[5] = v16 | 0xAAAAAAAAAAAA0000;
                  v18[6] = v8;
                  v20 = (uint64_t **)(a1 + 16);
                  v21 = *v24;
                  v22 = (uint64_t **)(a1 + 16);
                  if (*v24)
                  {
                    do
                    {
                      while (1)
                      {
                        v22 = v21;
                        if (*((unsigned __int16 *)v21 + 16) <= v17)
                          break;
                        v21 = (uint64_t **)*v21;
                        v20 = v22;
                        if (!*v22)
                          goto LABEL_17;
                      }
                      v21 = (uint64_t **)v21[1];
                    }
                    while (v21);
                    v20 = v22 + 1;
                  }
LABEL_17:
                  *v18 = 0;
                  v18[1] = 0;
                  v18[2] = (uint64_t)v22;
                  *v20 = v18;
                  v23 = **(_QWORD **)(a1 + 8);
                  if (v23)
                  {
                    *(_QWORD *)(a1 + 8) = v23;
                    v19 = *v20;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v19);
                  ++*(_QWORD *)(a1 + 24);
                }
              }
            }
          }
        }

        ++v8;
      }
      while (v8 != v7);
    }
  }
}

void *TFontFeatures::GetFeatureType(TFontFeatures *this, const __CFNumber *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  void *Value;
  void *v8;
  __int16 v10;
  __int16 v11;

  v11 = -21846;
  if (!GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)a2, &v11))
    return 0;
  v3 = (const __CFArray *)atomic_load((unint64_t *)this);
  if (!v3)
    return 0;
  Count = CFArrayGetCount(v3);
  if (!Count)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    Value = (id)CFArrayGetValueAtIndex(v3, v6);
    v8 = Value;
    v10 = -21846;
    if (Value)
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("CTFeatureTypeIdentifier"));
    if (GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)Value, &v10) && v11 == v10)
      break;

    if (v5 == ++v6)
      return 0;
  }

  return v8;
}

uint64_t TFontFeatureSettingList::ContainsAATSetting(TFontFeatureSettingList *this, const __CFNumber *a2, const __CFNumber *a3, char a4)
{
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  const __CFArray *v12;
  id *ValueAtIndex;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  unsigned __int16 v17;
  unsigned __int16 v18;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      v18 = -21846;
      v17 = -21846;
      result = GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)a2, &v18);
      if ((_DWORD)result)
      {
        result = GetSettingValue<__CFNumber const*,unsigned short>((uint64_t)a3, &v17);
        if ((_DWORD)result)
        {
          v8 = std::__tree<std::__value_type<unsigned short,AATFeaturePair>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,AATFeaturePair>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,AATFeaturePair>>>::__equal_range_multi<unsigned short>((uint64_t)this + 8, &v18);
          if (v8 == v9)
            return 0;
          v10 = v8;
          v11 = v9;
          while (1)
          {
            if ((a4 & 1) != 0)
            {
              v12 = (const __CFArray *)atomic_load((unint64_t *)this);
              ValueAtIndex = (id *)CFArrayGetValueAtIndex(v12, v10[6]);
              if (!ValueAtIndex || !objc_msgSend(ValueAtIndex[1], "objectForKey:", CFSTR("CTFeatureOpenTypeTag")))
                return 1;
            }
            else if ((*((unsigned __int16 *)v10 + 20) ^ v17) < 2)
            {
              return 1;
            }
            v14 = (uint64_t *)v10[1];
            if (v14)
            {
              do
              {
                v15 = v14;
                v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v15 = (uint64_t *)v10[2];
                v16 = *v15 == (_QWORD)v10;
                v10 = v15;
              }
              while (!v16);
            }
            v10 = v15;
            if (v15 == v11)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

const __CFDictionary *`anonymous namespace'::TFeatureSelector::IsDefault(_anonymous_namespace_::TFeatureSelector *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("CTFeatureSelectorDefault"));
    if (result)
      return (const __CFDictionary *)(CFBooleanGetValue(result) != 0);
  }
  return result;
}

uint64_t GetValue<__CFNumber const*>(uint64_t result, void *a2)
{
  const __CFNumber *v3;
  CFTypeID v4;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      if (a2)
        CFNumberGetValue(v3, kCFNumberIntType, a2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFIndex TFontFeatureSettingList::IndexOfOpenTypeSetting(TFontFeatureSettingList *this, const __CFString *a2)
{
  void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  const __CFArray *v9;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;

  v4 = (void *)atomic_load((unint64_t *)this);
  v5 = v4;
  if (!v5)
  {

    return -1;
  }
  v6 = v5;
  Count = CFArrayGetCount(v5);

  if (Count < 1)
    return -1;
  v8 = 0;
  while (1)
  {
    v9 = (const __CFArray *)atomic_load((unint64_t *)this);
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v8);
    Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CTFeatureOpenTypeTag"));
    if (Value == a2 || a2 && Value && CFEqual(Value, a2))
      break;
    if (Count == ++v8)
      return -1;
  }
  return v8;
}

const __CFDictionary *TSplicedFont::IsTextStyleFont(TSplicedFont *this)
{
  return TSplicedFontDict::IsTextStyle((TSplicedFont *)((char *)this + 600));
}

void TCFBase<TTypesetter>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);
  TLine *v3;

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  v3 = *(TLine **)(a1 + 40);
  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)v3 + 240);
  TLine::~TLine(v3);
}

uint64_t OTL::GCommon::IterateFeatureTables(unint64_t a1, _WORD *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  _WORD *v15;
  _WORD *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v25;
  char v26;

  if (a2)
  {
    v5 = *(unsigned __int16 *)(a1 + 8);
    if (*(_WORD *)(a1 + 8))
    {
      v7 = (unsigned __int16 *)(a1 + __rev16(v5));
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) <= a3
        && ((v9 = bswap32(*v7) >> 16, v10 = (unint64_t)&v8[v9], (unint64_t)(v7 + 2) <= a3)
          ? (v11 = (a3 - (unint64_t)v8) >> 1)
          : (v11 = 0),
            v10 <= a3 ? (v12 = v10 >= (unint64_t)v8) : (v12 = 0),
            !v12 ? (v13 = v11 == v9) : (v13 = 1),
            v13))
      {
        v15 = a2 + 1;
        if (*a2)
        {
          v17 = &v15[3 * __rev16((unsigned __int16)*a2)];
          while (1)
          {
            v18 = (uint64_t)a2 + (bswap32((unsigned __int16)v15[2]) >> 16);
            v19 = (unsigned __int16 *)(v18 + 4);
            if (v18 + 2 < a1 || (unint64_t)v19 > a3)
              break;
            v11 = __rev16(*(unsigned __int16 *)(v18 + 2));
            v21 = &v19[v11];
            v22 = v18 + 6 <= a3 ? (a3 - (unint64_t)v19) >> 1 : 0;
            v23 = (unint64_t)v21 <= a3 && v21 >= v19;
            if (!v23 && v22 != v11)
              break;
            if (*(_WORD *)(v18 + 2))
            {
              v25 = 2 * v11;
              while (v9 > bswap32(*v19) >> 16)
              {
                ++v19;
                v25 -= 2;
                if (!v25)
                {
                  if ((std::function<BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(a4, bswap32(*(_DWORD *)v15), v18) & 1) == 0)goto LABEL_40;
                  goto LABEL_37;
                }
              }
              break;
            }
LABEL_37:
            v15 += 3;
            if (v15 == v17)
              goto LABEL_38;
          }
LABEL_40:
          v26 = 0;
          LOBYTE(v11) = 0;
        }
        else
        {
LABEL_38:
          v26 = 1;
        }
        LOBYTE(v5) = v26 | v11;
      }
      else
      {
        LOBYTE(v5) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  return v5 & 1;
}

uint64_t std::function<BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v5;
  uint64_t v6;
  int v7;

  v7 = a2;
  v6 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return IterateItemRanges(v5);
}

uint64_t IterateItemRanges(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v13, a3);
  v11[0] = &off_1E15DF098;
  v12 = v11;
  v5 = IterateItems(a1, a2, (uint64_t)v13, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v5;
}

_QWORD *std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15DF200;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

_QWORD *ForEachVisibleFormatter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const USet *BinaryPropertySet;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  UErrorCode pErrorCode;
  _QWORD v33[3];
  _QWORD *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  pErrorCode = U_TRUNCATED_CHAR_FOUND|0x1800;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v2 + 48))(v2, &pErrorCode);
  pErrorCode = 6156;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v3 + 48))(v3, &pErrorCode);
  pErrorCode = U_INVALID_TABLE_FORMAT|0x1800;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v4 + 48))(v4, &pErrorCode);
  pErrorCode = U_INVALID_TABLE_FILE|0x1800;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v5 + 48))(v5, &pErrorCode);
  pErrorCode = U_BUFFER_OVERFLOW_ERROR|0x1800;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v6 + 48))(v6, &pErrorCode);
  pErrorCode = U_ILLEGAL_CHAR_FOUND|0x2000;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v7 + 48))(v7, &pErrorCode);
  pErrorCode = U_INVALID_TABLE_FORMAT|0x2000;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v8 + 48))(v8, &pErrorCode);
  pErrorCode = U_STRINGPREP_PROHIBITED_ERROR|U_STANDARD_ERROR_LIMIT|U_UNSUPPORTED_ERROR|0x3000;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v9 + 48))(v9, &pErrorCode);
  pErrorCode = U_STRINGPREP_UNASSIGNED_ERROR|U_STANDARD_ERROR_LIMIT|U_UNSUPPORTED_ERROR|0x3000;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v10 + 48))(v10, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_UNSUPPORTED_ERROR|0x3000;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v11 + 48))(v11, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_RESOURCE_TYPE_MISMATCH|0x3000;
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v12 + 48))(v12, &pErrorCode);
  pErrorCode = U_STRINGPREP_PROHIBITED_ERROR|U_STANDARD_ERROR_LIMIT|U_NO_SPACE_AVAILABLE|0x3000;
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v13 + 48))(v13, &pErrorCode);
  pErrorCode = U_STRINGPREP_UNASSIGNED_ERROR|U_STANDARD_ERROR_LIMIT|U_NO_SPACE_AVAILABLE|0x3000;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v14 + 48))(v14, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_NO_SPACE_AVAILABLE|0x3000;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v15)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v15 + 48))(v15, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_CE_NOT_FOUND_ERROR|0x3000;
  v16 = *(_QWORD *)(a1 + 24);
  if (!v16)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v16 + 48))(v16, &pErrorCode);
  pErrorCode = U_STRINGPREP_PROHIBITED_ERROR|U_STANDARD_ERROR_LIMIT|U_TOO_MANY_ALIASES_ERROR|0x3000;
  v17 = *(_QWORD *)(a1 + 24);
  if (!v17)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v17 + 48))(v17, &pErrorCode);
  pErrorCode = U_STRINGPREP_UNASSIGNED_ERROR|U_STANDARD_ERROR_LIMIT|U_TOO_MANY_ALIASES_ERROR|0x3000;
  v18 = *(_QWORD *)(a1 + 24);
  if (!v18)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v18 + 48))(v18, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_TOO_MANY_ALIASES_ERROR|0x3000;
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v19 + 48))(v19, &pErrorCode);
  pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_ENUM_OUT_OF_SYNC_ERROR|0x3000;
  v20 = *(_QWORD *)(a1 + 24);
  if (!v20)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v20 + 48))(v20, &pErrorCode);
  pErrorCode = U_STRINGPREP_PROHIBITED_ERROR|U_STANDARD_ERROR_LIMIT|U_COLLATOR_VERSION_MISMATCH|0x3000;
  v21 = *(_QWORD *)(a1 + 24);
  if (!v21)
    goto LABEL_40;
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v21 + 48))(v21, &pErrorCode);
  pErrorCode = U_STRINGPREP_UNASSIGNED_ERROR|U_STANDARD_ERROR_LIMIT|U_COLLATOR_VERSION_MISMATCH|0x3000;
  v22 = *(_QWORD *)(a1 + 24);
  if (!v22
    || ((*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v22 + 48))(v22, &pErrorCode),
        pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_COLLATOR_VERSION_MISMATCH|0x3000,
        (v23 = *(_QWORD *)(a1 + 24)) == 0)
    || ((*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v23 + 48))(v23, &pErrorCode),
        pErrorCode = U_STRINGPREP_CHECK_BIDI_ERROR|U_STANDARD_ERROR_LIMIT|U_USELESS_COLLATOR_ERROR|0x3000,
        (v24 = *(_QWORD *)(a1 + 24)) == 0))
  {
LABEL_40:
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v24 + 48))(v24, &pErrorCode);
  pErrorCode = U_ZERO_ERROR;
  BinaryPropertySet = u_getBinaryPropertySet(UCHAR_PREPENDED_CONCATENATION_MARK, &pErrorCode);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v33, a1);
  v26 = operator new(0x28uLL);
  v27 = v26;
  *v26 = &off_1E15DF200;
  if (v34)
  {
    if (v34 == v33)
    {
      v26[4] = v26 + 1;
      (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
    }
    else
    {
      v26[4] = v34;
      v34 = 0;
    }
  }
  else
  {
    v26[4] = 0;
  }
  v36 = v27;
  IterateItemRanges((uint64_t)BinaryPropertySet, (int *)&pErrorCode, (uint64_t)v35);
  v28 = v36;
  if (v36 == v35)
  {
    v29 = 4;
    v28 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_34;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_34:
  result = v34;
  if (v34 == v33)
  {
    v31 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t IterateItems(uint64_t result, int *a2, uint64_t a3, uint64_t a4)
{
  UniChar *v7;
  int ItemCount;
  int v9;
  int v10;
  char v11;
  const __CFAllocator *v12;
  int Item;
  int v14;
  int v15;
  CFStringRef v16;
  CFStringRef v17;
  uint64_t v18;
  _BOOL8 v19;
  int v20;
  int v21;
  UniChar *chars;
  UniChar *v23;
  UniChar *v24;
  CFStringRef v25;

  if (result)
  {
    if (*a2 > 0)
      return 0;
    v7 = (UniChar *)operator new(4uLL);
    chars = v7;
    *(_DWORD *)v7 = 0;
    v23 = v7 + 2;
    v24 = v7 + 2;
    ItemCount = uset_getItemCount();
    if (ItemCount >= 1)
    {
      v9 = ItemCount;
      v10 = 0;
      v11 = 0;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        Item = uset_getItem();
        v14 = Item;
        v15 = *a2;
        if (*a2 == 15)
        {
          std::vector<unsigned short>::resize((uint64_t)&chars, Item + 1);
          *a2 = 0;
          uset_getItem();
          v15 = *a2;
        }
        if (v15 > 0)
          goto LABEL_18;
        if (v14 < 1)
          break;
        v16 = CFStringCreateWithCharacters(v12, chars, v14);
        if (v16)
        {
          v17 = v16;
          v25 = v16;
          v18 = *(_QWORD *)(a4 + 24);
          if (!v18)
          {
            v19 = std::__throw_bad_function_call[abi:nn180100]();
            return std::function<void ()(unsigned int,unsigned int)>::operator()(v19, v20, v21);
          }
          (*(void (**)(uint64_t, CFStringRef *))(*(_QWORD *)v18 + 48))(v18, &v25);
          CFRelease(v17);
          goto LABEL_14;
        }
LABEL_15:
        if (v9 == ++v10)
          goto LABEL_18;
      }
      std::function<void ()(unsigned int,unsigned int)>::operator()(a3, -1431655766, -1431655765);
LABEL_14:
      v11 = 1;
      goto LABEL_15;
    }
    v11 = 0;
LABEL_18:
    if (chars)
    {
      v23 = chars;
      operator delete(chars);
    }
    return v11 & 1;
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _BOOL8 v5;
  int v6;
  int v7;

  v7 = a2;
  v6 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<ForEachVisibleFormatter(std::function<void ()>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()>)::$_0>,void ()(unsigned int,unsigned int)>::operator()(v5);
}

void std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  int v3;
  int v4;
  uint64_t v6;
  _BOOL8 v7;
  int v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 != *a3)
  {
    while (1)
    {
      v8 = v3;
      v6 = *(_QWORD *)(a1 + 32);
      if (!v6)
        break;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v8);
      if (v4 == ++v3)
        return;
    }
    v7 = std::__throw_bad_function_call[abi:nn180100]();
    TFont::InitShapingGlyphs((TFont *)v7);
  }
}

void TFont::InitShapingGlyphs(TFont *this)
{
  unint64_t *v2;
  __CFString **v3;
  unint64_t *v4;
  __CFString *v6;
  int IsSystemUIFontAndForShaping;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const __CFAllocator *v14;
  UInt8 *v15;
  const UInt8 *v16;
  char *v17;
  __int128 v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  const __CFAllocator *v32;
  CFDataRef v33;
  void *v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  _QWORD *v38;
  const __CFData *v39;
  const UInt8 *BytePtr;
  unint64_t *v41;
  void *v42;
  const __CFData *v44;
  unint64_t *v46;
  unint64_t v47;
  int v49;
  void *v50;
  const UInt8 *v51;
  int *v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int *v58;
  CFDataRef v59;
  void *v60;
  unint64_t *v61;
  id v62;
  id v63;
  void **v64;
  char v65[24];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  BOOL v79[8];
  int *v80;
  uint64_t v81;
  _OWORD v82[7];
  unint64_t v83;
  _OWORD *v84;
  _BYTE v85[24];
  _BYTE *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)*((_QWORD *)this + 50);
  v63 = 0;
  if ((*(_DWORD *)this & 1) != 0)
    v3 = kCTFontVerticalShapingGlyphsAttribute;
  else
    v3 = kCTFontShapingGlyphsAttribute;
  v4 = (unint64_t *)((char *)this + 168);
  if (atomic_load((unint64_t *)this + 21))
  {
    v3 = kCTFontVerticalShapingGlyphsForFeatureSettingsAttribute;
    if ((*(_BYTE *)this & 1) == 0)
      v3 = kCTFontShapingGlyphsForFeatureSettingsAttribute;
  }
  v6 = *v3;
  IsSystemUIFontAndForShaping = TFont::IsSystemUIFontAndForShaping(this, v79);
  v62 = 0;
  v8 = atomic_load(v4);
  v9 = operator new(0x30uLL);
  *v9 = &off_1E15E0E68;
  v9[1] = v6;
  v9[2] = v8;
  v9[3] = &v63;
  *((_BYTE *)v9 + 32) = IsSystemUIFontAndForShaping;
  v9[5] = &v62;
  v86 = v9;
  TBaseFont::AccessAttributes(v2, (uint64_t)v85);
  v10 = v86;
  if (v86 == v85)
  {
    v11 = 4;
    v10 = v85;
    goto LABEL_11;
  }
  if (v86)
  {
    v11 = 5;
LABEL_11:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = atomic_load((unint64_t *)&v63);
  if (!v12 || IsSystemUIFontAndForShaping && (v13 = atomic_load((unint64_t *)&v62)) == 0)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
    v15 = (UInt8 *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0x4000, 0);
    if (!v15)
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)this + 40);
      atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)this + 39);
      goto LABEL_73;
    }
    v16 = v15;
    v61 = v2;
    v17 = (char *)(v15 + 0x2000);
    bzero(v15, 0x4000uLL);
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82[6] = v18;
    v82[5] = v18;
    v82[4] = v18;
    v82[3] = v18;
    v82[2] = v18;
    v82[1] = v18;
    v82[0] = v18;
    v83 = 0xAAAAAAAAAAAAAAAALL;
    v84 = v82;
    v80 = 0;
    v81 = 0;
    v77[0] = &off_1E15E0EB0;
    v77[1] = v16;
    v77[2] = v17;
    v78 = v77;
    *(_QWORD *)v79 = 0;
    v75[0] = &off_1E15E0EF8;
    v75[1] = v16;
    v76 = v75;
    v19 = TAATMorphTable::AddShapingGlyphs((TBaseFont **)this, (uint64_t)v77, (uint64_t)v75);
    v20 = v76;
    if (v76 == v75)
    {
      v21 = 4;
      v20 = v75;
    }
    else
    {
      if (!v76)
        goto LABEL_21;
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_21:
    v22 = v78;
    if (v78 == v77)
    {
      v23 = 4;
      v22 = v77;
    }
    else
    {
      if (!v78)
        goto LABEL_26;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_26:
    if ((v19 & 1) != 0)
      goto LABEL_47;
    v73[0] = &off_1E15E0EB0;
    v73[1] = v16;
    v73[2] = v17;
    v74 = v73;
    v71[0] = &off_1E15E0F40;
    v71[1] = v17;
    v72 = v71;
    v69[0] = &off_1E15E0F88;
    v69[1] = v79;
    v70 = v69;
    v67[0] = &off_1E15E0EF8;
    v67[1] = v16;
    v68 = v67;
    TOpenTypeMorph::AddShapingGlyphs((uint64_t)this, (uint64_t)v73, (uint64_t)v71, (uint64_t)v69, (uint64_t)v67);
    v24 = v68;
    if (v68 == v67)
    {
      v25 = 4;
      v24 = v67;
    }
    else
    {
      if (!v68)
        goto LABEL_32;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_32:
    v26 = v70;
    if (v70 == v69)
    {
      v27 = 4;
      v26 = v69;
    }
    else
    {
      if (!v70)
        goto LABEL_37;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_37:
    v28 = v72;
    if (v72 == v71)
    {
      v29 = 4;
      v28 = v71;
    }
    else
    {
      if (!v72)
        goto LABEL_42;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_42:
    v30 = v74;
    if (v74 == v73)
    {
      v31 = 4;
      v30 = v73;
    }
    else
    {
      if (!v74)
        goto LABEL_47;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_47:
    v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v33 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, 0x4000, v14);
    do
      v34 = (void *)__ldaxr((unint64_t *)&v63);
    while (__stlxr((unint64_t)v33, (unint64_t *)&v63));

    if (IsSystemUIFontAndForShaping && (v35 = atomic_load((unint64_t *)&v62)) == 0)
    {
      v51 = *(const UInt8 **)v79;
      v52 = v80;
      if (*(int **)v79 != v80)
      {
        v53 = (int *)(*(_QWORD *)v79 + 4);
        while (v53 != v80)
        {
          v54 = *(v53 - 1);
          v55 = *v53++;
          if (v54 == v55)
          {
            v56 = v53 - 2;
            while (v53 != v52)
            {
              v57 = v54;
              v54 = *v53;
              if (v57 != *v53)
              {
                v56[1] = v54;
                ++v56;
              }
              ++v53;
            }
            v58 = v56 + 1;
            goto LABEL_85;
          }
        }
      }
      v58 = v80;
LABEL_85:
      if (v52 != v58)
        v80 = v58;
      v59 = CFDataCreate(v32, v51, (char *)v58 - (char *)v51);
      do
        v60 = (void *)__ldaxr((unint64_t *)&v62);
      while (__stlxr((unint64_t)v59, (unint64_t *)&v62));

      v36 = 1;
    }
    else
    {
      v36 = 0;
    }
    v37 = atomic_load((unint64_t *)this + 21);
    v38 = operator new(0x30uLL);
    *v38 = &off_1E15E0FD0;
    v38[1] = v6;
    v38[2] = v37;
    v38[3] = &v63;
    *((_BYTE *)v38 + 32) = v36;
    v38[5] = &v62;
    v66 = v38;
    TBaseFont::AccessAttributes(v61, (uint64_t)v65);
    (*(void (**)(_QWORD *))(*v38 + 40))(v38);
    v64 = (void **)v79;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v64);
  }
  v39 = (const __CFData *)atomic_load((unint64_t *)&v63);
  BytePtr = CFDataGetBytePtr(v39);
  v41 = (unint64_t *)((char *)this + 296);
  do
    v42 = (void *)__ldaxr((unint64_t *)&v63);
  while (__stlxr(0, (unint64_t *)&v63));
  do
  {
    if (__ldxr(v41))
    {
      __clrex();

      v44 = (const __CFData *)atomic_load(v41);
      BytePtr = CFDataGetBytePtr(v44);
      goto LABEL_60;
    }
  }
  while (__stxr((unint64_t)v42, v41));

LABEL_60:
  if (atomic_load((unint64_t *)&v62))
  {
    v46 = (unint64_t *)((char *)this + 304);
    do
      v47 = __ldaxr((unint64_t *)&v62);
    while (__stlxr(0, (unint64_t *)&v62));
    do
    {
      if (__ldxr(v46))
      {
        v49 = 0;
        __clrex();
        goto LABEL_68;
      }
    }
    while (__stxr(v47, v46));
    v49 = 1;
LABEL_68:
    if (v49)
      v50 = 0;
    else
      v50 = (void *)v47;

  }
  *((_QWORD *)this + 39) = BytePtr + 0x2000;
  __dmb(0xBu);
  *((_QWORD *)this + 40) = BytePtr;
LABEL_73:

}

void TBaseFont::AccessAttributes(unint64_t *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;

  v4 = (os_unfair_lock_s *)(a1 + 14);
  os_unfair_lock_lock_with_options();
  if (!atomic_load(a1 + 15))
    TBaseFont::InitAttributesDict((TBaseFont *)a1);
  v6 = atomic_load(a1 + 15);
  v9 = v6;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v7 + 48))(v7, &v9);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v8 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<TFont::InitShapingGlyphs(void)::$_5,std::allocator<TFont::InitShapingGlyphs(void)::$_5>,void ()(__CFDictionary *)>::operator()(v8);
  }
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_5,std::allocator<TFont::InitShapingGlyphs(void)::$_5>,void ()(__CFDictionary *)>::operator()(uint64_t a1, const __CFDictionary **a2)
{
  const __CFDictionary *v3;
  void *v4;
  void *v6;
  unint64_t v7;
  void *v8;
  const void *v10;
  const void *v11;
  __CFDictionary *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  id v18;
  id v19;
  id Mutable;

  v3 = *a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v19 = (id)0xAAAAAAAAAAAAAAAALL;
    Mutable = (id)CFDictionaryGetValue(v3, *(const void **)(a1 + 8));
    do
      v4 = (void *)__ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    v19 = v4;

    if (!atomic_load((unint64_t *)&v19))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
        v6 = (void *)__ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      v18 = v6;

      do
        v7 = __ldaxr((unint64_t *)&v18);
      while (__stlxr(0, (unint64_t *)&v18));
      do
        v8 = (void *)__ldaxr((unint64_t *)&v19);
      while (__stlxr(v7, (unint64_t *)&v19));

      if (!atomic_load((unint64_t *)&v19))
      {

        return;
      }
      v10 = *(const void **)(a1 + 8);
      v11 = (const void *)atomic_load((unint64_t *)&v19);
      CFDictionarySetValue(v3, v10, v11);
    }
    v12 = (__CFDictionary *)atomic_load((unint64_t *)&v19);
    v13 = *(const void **)(a1 + 16);
    v14 = (const void *)atomic_load(*(unint64_t **)(a1 + 24));
    CFDictionarySetValue(v12, v13, v14);

  }
  else
  {
    v15 = *(const void **)(a1 + 8);
    v16 = (const void *)atomic_load(*(unint64_t **)(a1 + 24));
    CFDictionarySetValue(v3, v15, v16);
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v17 = (const void *)atomic_load(*(unint64_t **)(a1 + 40));
    CFDictionarySetValue(v3, CFSTR("CTFontScriptAndLangSysListAttribute"), v17);
  }
}

void TBaseFont::InitAttributesDict(TBaseFont *this)
{
  void *v2;
  unint64_t v3;
  unint64_t *v4;
  int v6;
  void *v7;
  id v8;
  id Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v2 = (void *)__ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  v8 = v2;

  do
    v3 = __ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));

  v4 = (unint64_t *)((char *)this + 120);
  while (!__ldaxr(v4))
  {
    if (!__stlxr(v3, v4))
    {
      v6 = 1;
      goto LABEL_10;
    }
  }
  v6 = 0;
  __clrex();
LABEL_10:
  if (v6)
    v7 = 0;
  else
    v7 = (void *)v3;

}

uint64_t TAATMorphTable::AddShapingGlyphs(TBaseFont **a1, uint64_t a2, uint64_t a3)
{
  const __CFData *CommonTable;
  const __CFData *v7;
  unsigned int *BytePtr;
  CFIndex Length;
  char *v10;
  char v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  TBaseFont *v25;
  uint64_t v26;
  uint64_t InitializedGraphicsFont;
  uint64_t i;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  __CFString *v40;
  unsigned int v41;
  void **v42;
  _BYTE v43[24];
  _BYTE *v44;
  _QWORD v45[3];
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48[140];
  unsigned int *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1[50], 1634561906, 0);
  if (!CommonTable)
    return 0;
  v7 = CommonTable;
  BytePtr = (unsigned int *)CFDataGetBytePtr(CommonTable);
  Length = CFDataGetLength(v7);
  v10 = (char *)BytePtr + Length;
  if (BytePtr + 2 > (unsigned int *)((char *)BytePtr + Length))
  {
    v33 = *(_QWORD *)(a3 + 24);
    if (!v33)
      goto LABEL_43;
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
    return 0;
  }
  memset(v48, 170, sizeof(v48));
  v11 = *(_BYTE *)a1;
  v12 = 1;
  LOBYTE(v48[6]) = 1;
  LOWORD(v48[26]) = -1;
  *(_QWORD *)&v48[14] = TAATLookupTable::BadTable;
  *(_QWORD *)&v48[16] = 0;
  *(_QWORD *)&v48[24] = 0;
  LOBYTE(v48[28]) = v11 & 1;
  *(_QWORD *)&v48[8] = &off_1E15DDED0;
  memset(&v48[38], 0, 24);
  v49 = &v48[44];
  v45[0] = off_1E15DDAE8;
  v45[1] = BytePtr;
  v45[2] = v10;
  v46 = BytePtr + 2;
  *(_QWORD *)&v48[4] = a1;
  v47 = BytePtr + 2;
  v13 = BytePtr[1];
  if (!v13)
    goto LABEL_36;
  v36 = a3;
  v12 = 0;
  v14 = 0;
  v15 = bswap32(*BytePtr);
  v16 = bswap32(v13);
  v40 = (__CFString *)*MEMORY[0x1E0C9B0D0];
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  v37 = v17;
  v38 = v16;
  v41 = HIWORD(v15);
  while (1)
  {
    if ((TAATMorphChainMorx::NextChain((TAATMorphChainMorx *)v45, v41) & 1) == 0)
    {
      v32 = *(_QWORD *)(v36 + 24);
      if (!v32)
        goto LABEL_43;
LABEL_35:
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
LABEL_36:
      v45[0] = off_1E15DDAE8;
      v42 = (void **)&v48[38];
      std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v42);
      return v12;
    }
    v39 = v12;
    v18 = TAATMorphChain::ResolveFlags((TAATMorphChain *)v45, v48[0], (const TFontFeatureSettingList *)(a1 + 21), 0, v40);
    v19 = v46[3];
    if (v19)
      break;
LABEL_32:
    v12 = ++v14 >= v38;
    if (v14 == v37)
    {
      v12 = 1;
      goto LABEL_36;
    }
  }
  v20 = v18;
  v21 = 0;
  v22 = bswap32(v19);
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  while (((*(uint64_t (**)(TAATMorphSubtableMorx *))(*(_QWORD *)&v48[8] + 16))((TAATMorphSubtableMorx *)&v48[8]) & 1) != 0)
  {
    if ((v48[10] & v20) == 0)
      goto LABEL_31;
    if (v21 < (uint64_t)(*(_QWORD *)&v48[40] - *(_QWORD *)&v48[38]) >> 3)
    {
      v24 = *(_QWORD *)(*(_QWORD *)&v48[38] + 8 * v21);
      if (v24)
      {
        v25 = a1[50];
        v26 = *((_QWORD *)v25 + 25);
        if (!v26)
        {
          InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(a1[50]);
          v26 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v25 + 872))(v25, InitializedGraphicsFont);
        }
        if (v26 >= 1)
        {
          for (i = 0; i != v26; ++i)
          {
            if (((*(unsigned __int8 *)(v24 + ((unsigned __int16)i >> 3)) >> (i & 7)) & 1) != 0)
              std::function<void ()(unsigned short,unsigned short)>::operator()(a2, i, i);
          }
        }
        goto LABEL_31;
      }
    }
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v43, a2);
    v29 = TAATMorphSubtableMorx::AddShapingGlyphs((uint64_t)&v48[8], (uint64_t)v43);
    v30 = v44;
    if (v44 == v43)
    {
      v30 = v43;
      v31 = 4;
    }
    else
    {
      if (!v44)
        goto LABEL_30;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_30:
    if ((v29 & 1) == 0)
      break;
LABEL_31:
    if (++v21 == v23)
      goto LABEL_32;
  }
  v32 = *(_QWORD *)(v36 + 24);
  v12 = v39;
  if (v32)
    goto LABEL_35;
LABEL_43:
  v35 = std::__throw_bad_function_call[abi:nn180100]();
  return TOpenTypeMorph::AddShapingGlyphs(v35);
}

uint64_t TOpenTypeMorph::AddShapingGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t CommonTable;
  const __CFData *v11;
  const __CFData *v12;
  __int128 v13;
  const UInt8 *BytePtr;
  const UInt8 *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  const UInt8 *v24;
  _OWORD v25[5];
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(a1 + 400), 1196643650, 0);
  v26 = CommonTable;
  if (!CommonTable)
    return 1;
  v11 = (const __CFData *)CommonTable;
  v12 = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(a1 + 400), 1195656518, 0);
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[3] = v13;
  v25[4] = v13;
  v25[1] = v13;
  v25[2] = v13;
  v25[0] = v13;
  OTL::GDEF::GDEF((OTL::GDEF *)v25, v12);
  BytePtr = CFDataGetBytePtr(v11);
  v24 = BytePtr;
  v15 = CFDataGetBytePtr(v11);
  if (v15)
    v16 = (unint64_t)&v15[CFDataGetLength(v11)];
  else
    v16 = 0;
  v23 = v16;
  v18 = operator new(0x50uLL);
  *v18 = &unk_1E15E0250;
  v18[1] = &v24;
  v18[2] = &v23;
  v18[3] = a1;
  v18[4] = &v26;
  v18[5] = v25;
  v18[6] = a4;
  v18[7] = a3;
  v18[8] = a2;
  v18[9] = a5;
  v28 = v18;
  v17 = OTL::GCommon::IterateScriptTables((uint64_t)BytePtr, v16, (uint64_t)v27);
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
    goto LABEL_10;
  }
  if (v28)
  {
    v21 = 5;
LABEL_10:
    (*(void (**)(_QWORD *, uint64_t))(*v20 + 8 * v21))(v20, v19);
  }
  return v17;
}

uint64_t OTL::GCommon::IterateScriptTables(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  _WORD *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;

  v3 = *(unsigned __int16 *)(a1 + 4);
  if (*(_WORD *)(a1 + 4))
  {
    v5 = __rev16(v3);
    v6 = (_WORD *)(a1 + v5);
    v7 = a1 + v5 + 2;
    if (v7 > a2)
      goto LABEL_21;
    v9 = __rev16((unsigned __int16)*v6);
    v10 = v7 + 6 * v9;
    if (v10 >= v7 && v10 <= a2)
      goto LABEL_26;
    v12 = (a2 - v7) / 6;
    if ((unint64_t)(v6 + 4) > a2)
      v12 = 0;
    if (v12 != v9)
    {
LABEL_21:
      LOBYTE(v3) = 0;
    }
    else
    {
LABEL_26:
      if (*v6)
      {
        v13 = 0;
        v14 = 0;
        if (v9 <= 1)
          v15 = 1;
        else
          v15 = v9;
        v16 = (unsigned __int16 *)(v5 + a1 + 6);
        do
        {
          v17 = (uint64_t)v6 + (bswap32(*v16) >> 16);
          if (v17 + 4 > a2)
            break;
          v18 = std::function<BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(a3, bswap32(*((_DWORD *)v16 - 1)), v17);
          if (!v18)
            goto LABEL_20;
          v14 = ++v13 >= v9;
          v16 += 3;
        }
        while (v15 != v13);
        LOBYTE(v18) = 0;
LABEL_20:
        LOBYTE(v3) = v14 | v18;
      }
      else
      {
        LOBYTE(v3) = 1;
      }
    }
  }
  return v3 & 1;
}

uint64_t TAATMorphSubtableMorx::AddShapingGlyphs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  SFNTLookupTable *v7;
  unint64_t v8;
  const SFNTLookupTable *v9;
  UInt8 *values;
  unsigned int v11;
  unsigned int nUnits;
  SFNTLookupTable *v13;
  unint64_t v14;
  const SFNTLookupTable *v15;
  UInt8 *v16;
  unsigned int v17;
  unsigned int v18;
  SFNTLookupTable *v19;
  unint64_t v20;
  const SFNTLookupTable *v21;
  UInt8 *v22;
  unsigned int v23;
  unsigned int searchRange;
  SFNTLookupTable *v25;
  const SFNTLookupTable *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  SFNTLookupTable *v30;
  unint64_t v31;
  const SFNTLookupTable *v32;
  UInt8 *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v42;
  _QWORD *v44;
  _BYTE *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  SFNTLookupValue *p_searchRange;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v56;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  BOOL v62;
  unsigned __int16 *v63;
  BOOL v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  SFNTLookupValue *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v78;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  BOOL v84;
  unsigned __int16 *v85;
  BOOL v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD *v90;
  uint64_t v91;
  SFNTLookupValue *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v98;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  BOOL v104;
  unsigned __int16 *v105;
  BOOL v106;
  char *v107;
  char *v108;
  __int128 v109;
  _QWORD *v110;
  uint64_t v111;
  SFNTLookupValue *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  unint64_t v118;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  BOOL v124;
  unsigned __int16 *v125;
  BOOL v126;
  char *v127;
  char *v128;
  __int128 v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v134)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  __int128 v138;
  __int128 v139;
  _QWORD v140[3];
  _QWORD *v141;
  __int16 v142;
  _BYTE v143[24];
  _BYTE *v144;
  _QWORD v145[3];
  _QWORD *v146;
  _BYTE v147[24];
  _BYTE *v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[3];
  _QWORD *v152;
  __int16 v153;
  _BYTE v154[24];
  _BYTE *v155;
  __int128 v156;
  __int128 v157;
  _QWORD v158[3];
  _QWORD *v159;
  __int16 v160;
  _BYTE v161[24];
  _BYTE *v162;
  __int128 v163;
  __int128 v164;
  _QWORD v165[3];
  _QWORD *v166;
  __int16 v167;
  _BYTE v168[24];
  _BYTE *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 104);
  v5 = bswap32(*(_DWORD *)(v4 + 4));
  if ((v5 & 0x20000000) == 0 && *(_BYTE *)(a1 + 80) != v5 >> 31)
    return 1;
  v6 = 0;
  switch((char)v5)
  {
    case 0:
      v7 = *(SFNTLookupTable **)(a1 + 112);
      if (v4 + 28 > (unint64_t)v7)
        goto LABEL_228;
      v8 = v4 + 12;
      v9 = (const SFNTLookupTable *)(v4 + 12 + bswap32(*(_DWORD *)(v4 + 16)));
      if (&v9->fsHeader > (SFNTLookupFormatSpecificHeader *)v7)
        goto LABEL_228;
      v6 = 0;
      switch(bswap32(v9->format) >> 16)
      {
        case 0u:
          goto LABEL_80;
        case 2u:
        case 4u:
        case 6u:
          if (v9->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v7)
            goto LABEL_228;
          values = (UInt8 *)&v9->fsHeader.vector + 10;
          v11 = bswap32(v9->fsHeader.theArray.lookupValues[0]) >> 16;
          nUnits = v9->fsHeader.segment.binSearch.nUnits;
          goto LABEL_76;
        case 8u:
          p_searchRange = &v9->fsHeader.segment.binSearch.searchRange;
          if (v9->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v7)
            goto LABEL_228;
          v51 = bswap32(v9->fsHeader.segment.binSearch.nUnits) >> 16;
          v52 = (unint64_t)&p_searchRange[v51];
          v53 = v9->fsHeader.vector.values <= (UInt8 *)v7
              ? (unint64_t)((char *)v7 - (char *)p_searchRange) >> 1
              : 0;
          v54 = v52 <= (unint64_t)v7 && v52 >= (unint64_t)p_searchRange;
          if (!v54 && v53 != v51)
            goto LABEL_228;
          goto LABEL_80;
        case 0xAu:
          values = v9->fsHeader.vector.values;
          if (v9->fsHeader.vector.values > (UInt8 *)v7)
            goto LABEL_228;
          v11 = bswap32(v9->fsHeader.theArray.lookupValues[0]) >> 16;
          nUnits = v9->fsHeader.segment.binSearch.searchRange;
LABEL_76:
          v56 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v11];
          if (v56 < (unint64_t)values || v56 > (unint64_t)v7)
            goto LABEL_228;
LABEL_80:
          v58 = bswap32(*(_DWORD *)(v4 + 12));
          v59 = v8 + bswap32(*(_DWORD *)(v4 + 20));
          v60 = v8 + bswap32(*(_DWORD *)(v4 + 24));
          if (v58 < 2
            || (v4 <= v59 + 2 ? (v62 = v59 + 4 > (unint64_t)v7) : (v62 = 1),
                v62
             || ((v63 = (unsigned __int16 *)(v60 + 4 * (bswap32(*(unsigned __int16 *)(v59 + 2)) >> 16)),
                  v4 <= (unint64_t)v63)
               ? (v64 = v63 + 2 > (unsigned __int16 *)v7)
               : (v64 = 1),
                 v64)))
          {
            LOWORD(v61) = 0;
          }
          else
          {
            v61 = bswap32(*v63) >> 16;
          }
          v134 = TAATLookupTable::BadTable;
          v135 = 0;
          v136 = 0;
          v137 = -1;
          TAATLookupTable::SetTable((uint64_t)&v134, v9, v7);
          *(_QWORD *)&v163 = a1;
          DWORD2(v163) = v58;
          *(_QWORD *)&v164 = v59;
          *((_QWORD *)&v164 + 1) = v60;
          v65 = v165;
          std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v165, a2);
          v167 = v61;
          v66 = (char *)operator new(0x50uLL);
          v67 = v66;
          *(_QWORD *)v66 = &off_1E15E0448;
          v68 = v164;
          *(_OWORD *)(v66 + 8) = v163;
          *(_OWORD *)(v66 + 24) = v68;
          if (v166)
          {
            if (v166 == v165)
            {
              *((_QWORD *)v66 + 8) = v66 + 40;
              (*(void (**)(_QWORD *))(v165[0] + 24))(v165);
              LOWORD(v61) = v167;
            }
            else
            {
              *((_QWORD *)v66 + 8) = v166;
              v166 = 0;
            }
          }
          else
          {
            *((_QWORD *)v66 + 8) = 0;
          }
          *((_WORD *)v67 + 36) = v61;
          v169 = v67;
          v6 = TAATLookupTable::Iterate((uint64_t)&v134, (uint64_t)v168);
          v69 = v169;
          if (v169 == v168)
          {
            v70 = 4;
            v69 = v168;
          }
          else
          {
            if (!v169)
              goto LABEL_101;
            v70 = 5;
          }
          (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_101:
          v71 = v166;
          break;
        default:
          return v6;
      }
      goto LABEL_222;
    case 1:
      v19 = *(SFNTLookupTable **)(a1 + 112);
      if (v4 + 32 > (unint64_t)v19)
        goto LABEL_228;
      v20 = v4 + 12;
      v21 = (const SFNTLookupTable *)(v4 + 12 + bswap32(*(_DWORD *)(v4 + 16)));
      if (&v21->fsHeader > (SFNTLookupFormatSpecificHeader *)v19)
        goto LABEL_228;
      v6 = 0;
      switch(bswap32(v21->format) >> 16)
      {
        case 0u:
          goto LABEL_160;
        case 2u:
        case 4u:
        case 6u:
          if (v21->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v19)
            goto LABEL_228;
          v22 = (UInt8 *)&v21->fsHeader.vector + 10;
          v23 = bswap32(v21->fsHeader.theArray.lookupValues[0]) >> 16;
          searchRange = v21->fsHeader.segment.binSearch.nUnits;
          goto LABEL_156;
        case 8u:
          v92 = &v21->fsHeader.segment.binSearch.searchRange;
          if (v21->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v19)
            goto LABEL_228;
          v93 = bswap32(v21->fsHeader.segment.binSearch.nUnits) >> 16;
          v94 = (unint64_t)&v92[v93];
          v95 = v21->fsHeader.vector.values <= (UInt8 *)v19 ? (unint64_t)((char *)v19 - (char *)v92) >> 1 : 0;
          v96 = v94 <= (unint64_t)v19 && v94 >= (unint64_t)v92;
          if (!v96 && v95 != v93)
            goto LABEL_228;
          goto LABEL_160;
        case 0xAu:
          v22 = v21->fsHeader.vector.values;
          if (v21->fsHeader.vector.values > (UInt8 *)v19)
            goto LABEL_228;
          v23 = bswap32(v21->fsHeader.theArray.lookupValues[0]) >> 16;
          searchRange = v21->fsHeader.segment.binSearch.searchRange;
LABEL_156:
          v98 = (unint64_t)&v22[(bswap32(searchRange) >> 16) * (unint64_t)v23];
          if (v98 < (unint64_t)v22 || v98 > (unint64_t)v19)
            goto LABEL_228;
LABEL_160:
          v100 = bswap32(*(_DWORD *)(v4 + 12));
          v101 = v20 + bswap32(*(_DWORD *)(v4 + 20));
          v102 = v20 + bswap32(*(_DWORD *)(v4 + 24));
          if (v100 < 2
            || (v4 <= v101 + 2 ? (v104 = v101 + 4 > (unint64_t)v19) : (v104 = 1),
                v104
             || ((v105 = (unsigned __int16 *)(v102 + 8 * (bswap32(*(unsigned __int16 *)(v101 + 2)) >> 16)),
                  v4 <= (unint64_t)v105)
               ? (v106 = v105 + 4 > (unsigned __int16 *)v19)
               : (v106 = 1),
                 v106)))
          {
            LOWORD(v103) = 0;
          }
          else
          {
            v103 = bswap32(*v105) >> 16;
          }
          v134 = TAATLookupTable::BadTable;
          v135 = 0;
          v136 = 0;
          v137 = -1;
          TAATLookupTable::SetTable((uint64_t)&v134, v21, v19);
          *(_QWORD *)&v156 = a1;
          DWORD2(v156) = v100;
          *(_QWORD *)&v157 = v101;
          *((_QWORD *)&v157 + 1) = v102;
          v65 = v158;
          std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v158, a2);
          v160 = v103;
          v107 = (char *)operator new(0x50uLL);
          v108 = v107;
          *(_QWORD *)v107 = &off_1E15E0490;
          v109 = v157;
          *(_OWORD *)(v107 + 8) = v156;
          *(_OWORD *)(v107 + 24) = v109;
          if (v159)
          {
            if (v159 == v158)
            {
              *((_QWORD *)v107 + 8) = v107 + 40;
              (*(void (**)(_QWORD *))(v158[0] + 24))(v158);
              LOWORD(v103) = v160;
            }
            else
            {
              *((_QWORD *)v107 + 8) = v159;
              v159 = 0;
            }
          }
          else
          {
            *((_QWORD *)v107 + 8) = 0;
          }
          *((_WORD *)v108 + 36) = v103;
          v162 = v108;
          v6 = TAATLookupTable::Iterate((uint64_t)&v134, (uint64_t)v161);
          v110 = v162;
          if (v162 == v161)
          {
            v111 = 4;
            v110 = v161;
          }
          else
          {
            if (!v162)
              goto LABEL_181;
            v111 = 5;
          }
          (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_181:
          v71 = v159;
          break;
        default:
          return v6;
      }
      goto LABEL_222;
    case 2:
      v13 = *(SFNTLookupTable **)(a1 + 112);
      if (v4 + 40 > (unint64_t)v13)
        goto LABEL_228;
      v14 = v4 + 12;
      v15 = (const SFNTLookupTable *)(v4 + 12 + bswap32(*(_DWORD *)(v4 + 16)));
      if (&v15->fsHeader > (SFNTLookupFormatSpecificHeader *)v13)
        goto LABEL_228;
      v6 = 0;
      switch(bswap32(v15->format) >> 16)
      {
        case 0u:
          goto LABEL_120;
        case 2u:
        case 4u:
        case 6u:
          if (v15->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v13)
            goto LABEL_228;
          v16 = (UInt8 *)&v15->fsHeader.vector + 10;
          v17 = bswap32(v15->fsHeader.theArray.lookupValues[0]) >> 16;
          v18 = v15->fsHeader.segment.binSearch.nUnits;
          goto LABEL_116;
        case 8u:
          v72 = &v15->fsHeader.segment.binSearch.searchRange;
          if (v15->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v13)
            goto LABEL_228;
          v73 = bswap32(v15->fsHeader.segment.binSearch.nUnits) >> 16;
          v74 = (unint64_t)&v72[v73];
          v75 = v15->fsHeader.vector.values <= (UInt8 *)v13 ? (unint64_t)((char *)v13 - (char *)v72) >> 1 : 0;
          v76 = v74 <= (unint64_t)v13 && v74 >= (unint64_t)v72;
          if (!v76 && v75 != v73)
            goto LABEL_228;
          goto LABEL_120;
        case 0xAu:
          v16 = v15->fsHeader.vector.values;
          if (v15->fsHeader.vector.values > (UInt8 *)v13)
            goto LABEL_228;
          v17 = bswap32(v15->fsHeader.theArray.lookupValues[0]) >> 16;
          v18 = v15->fsHeader.segment.binSearch.searchRange;
LABEL_116:
          v78 = (unint64_t)&v16[(bswap32(v18) >> 16) * (unint64_t)v17];
          if (v78 < (unint64_t)v16 || v78 > (unint64_t)v13)
            goto LABEL_228;
LABEL_120:
          v80 = bswap32(*(_DWORD *)(v4 + 12));
          v81 = v14 + bswap32(*(_DWORD *)(v4 + 20));
          v82 = v14 + bswap32(*(_DWORD *)(v4 + 24));
          if (v80 < 2
            || (v4 <= v81 + 2 ? (v84 = v81 + 4 > (unint64_t)v13) : (v84 = 1),
                v84
             || ((v85 = (unsigned __int16 *)(v82 + 6 * (bswap32(*(unsigned __int16 *)(v81 + 2)) >> 16)),
                  v4 <= (unint64_t)v85)
               ? (v86 = v85 + 3 > (unsigned __int16 *)v13)
               : (v86 = 1),
                 v86)))
          {
            LOWORD(v83) = 0;
          }
          else
          {
            v83 = bswap32(*v85) >> 16;
          }
          v134 = TAATLookupTable::BadTable;
          v135 = 0;
          v136 = 0;
          v137 = -1;
          TAATLookupTable::SetTable((uint64_t)&v134, v15, v13);
          *(_QWORD *)&v149 = a1;
          DWORD2(v149) = v80;
          *(_QWORD *)&v150 = v81;
          *((_QWORD *)&v150 + 1) = v82;
          v65 = v151;
          std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v151, a2);
          v153 = v83;
          v87 = (char *)operator new(0x50uLL);
          v88 = v87;
          *(_QWORD *)v87 = &off_1E15E04D8;
          v89 = v150;
          *(_OWORD *)(v87 + 8) = v149;
          *(_OWORD *)(v87 + 24) = v89;
          if (v152)
          {
            if (v152 == v151)
            {
              *((_QWORD *)v87 + 8) = v87 + 40;
              (*(void (**)(_QWORD *))(v151[0] + 24))(v151);
              LOWORD(v83) = v153;
            }
            else
            {
              *((_QWORD *)v87 + 8) = v152;
              v152 = 0;
            }
          }
          else
          {
            *((_QWORD *)v87 + 8) = 0;
          }
          *((_WORD *)v88 + 36) = v83;
          v155 = v88;
          v6 = TAATLookupTable::Iterate((uint64_t)&v134, (uint64_t)v154);
          v90 = v155;
          if (v155 == v154)
          {
            v91 = 4;
            v90 = v154;
          }
          else
          {
            if (!v155)
              goto LABEL_141;
            v91 = 5;
          }
          (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_141:
          v71 = v152;
          break;
        default:
          return v6;
      }
      goto LABEL_222;
    case 4:
      v25 = *(SFNTLookupTable **)(a1 + 112);
      if (v4 + 14 > (unint64_t)v25)
        goto LABEL_228;
      v6 = 0;
      v26 = (const SFNTLookupTable *)(v4 + 12);
      switch(bswap32(*(unsigned __int16 *)(v4 + 12)) >> 16)
      {
        case 0u:
          goto LABEL_47;
        case 2u:
        case 4u:
        case 6u:
          if (v4 + 18 > (unint64_t)v25)
            goto LABEL_228;
          v27 = v4 + 24;
          v28 = bswap32(*(unsigned __int16 *)(v4 + 14)) >> 16;
          v29 = *(unsigned __int16 *)(v4 + 16);
          goto LABEL_43;
        case 8u:
          v36 = v4 + 18;
          if (v4 + 18 > (unint64_t)v25)
            goto LABEL_228;
          v37 = bswap32(*(unsigned __int16 *)(v4 + 16)) >> 16;
          v38 = v36 + 2 * v37;
          v39 = v4 + 20 <= (unint64_t)v25 ? ((unint64_t)v25 - v36) >> 1 : 0;
          v40 = v38 <= (unint64_t)v25 && v38 >= v36;
          if (!v40 && v39 != v37)
            goto LABEL_228;
          goto LABEL_47;
        case 0xAu:
          v27 = v4 + 20;
          if (v4 + 20 > (unint64_t)v25)
            goto LABEL_228;
          v28 = bswap32(*(unsigned __int16 *)(v4 + 14)) >> 16;
          v29 = *(unsigned __int16 *)(v4 + 18);
LABEL_43:
          v42 = v27 + (bswap32(v29) >> 16) * (unint64_t)v28;
          if (v42 < v27 || v42 > (unint64_t)v25)
            goto LABEL_228;
LABEL_47:
          v134 = TAATLookupTable::BadTable;
          v135 = 0;
          v136 = 0;
          v137 = -1;
          TAATLookupTable::SetTable((uint64_t)&v134, v26, v25);
          std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v145, a2);
          v44 = operator new(0x28uLL);
          v45 = v44;
          *v44 = &off_1E15E0520;
          if (v146)
          {
            if (v146 == v145)
            {
              v44[4] = v44 + 1;
              (*(void (**)(_QWORD *))(v145[0] + 24))(v145);
            }
            else
            {
              v44[4] = v146;
              v146 = 0;
            }
          }
          else
          {
            v44[4] = 0;
          }
          v148 = v45;
          v6 = TAATLookupTable::Iterate((uint64_t)&v134, (uint64_t)v147);
          v46 = v148;
          if (v148 == v147)
          {
            v47 = 4;
            v46 = v147;
          }
          else
          {
            if (!v148)
              goto LABEL_57;
            v47 = 5;
          }
          (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_57:
          v48 = v146;
          if (v146 == v145)
          {
            v49 = 4;
            v48 = v145;
          }
          else
          {
            if (!v146)
              return v6;
            v49 = 5;
          }
          (*(void (**)(_QWORD *))(*v48 + 8 * v49))(v48);
          break;
        default:
          return v6;
      }
      return v6;
    case 5:
      v30 = *(SFNTLookupTable **)(a1 + 112);
      if (v4 + 32 > (unint64_t)v30
        || (v31 = v4 + 12,
            v32 = (const SFNTLookupTable *)(v4 + 12 + bswap32(*(_DWORD *)(v4 + 16))),
            &v32->fsHeader > (SFNTLookupFormatSpecificHeader *)v30))
      {
LABEL_228:
        v6 = 0;
      }
      else
      {
        v6 = 0;
        switch(bswap32(v32->format) >> 16)
        {
          case 0u:
            goto LABEL_200;
          case 2u:
          case 4u:
          case 6u:
            if (v32->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v30)
              goto LABEL_228;
            v33 = (UInt8 *)&v32->fsHeader.vector + 10;
            v34 = bswap32(v32->fsHeader.theArray.lookupValues[0]) >> 16;
            v35 = v32->fsHeader.segment.binSearch.nUnits;
            goto LABEL_196;
          case 8u:
            v112 = &v32->fsHeader.segment.binSearch.searchRange;
            if (v32->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v30)
              goto LABEL_228;
            v113 = bswap32(v32->fsHeader.segment.binSearch.nUnits) >> 16;
            v114 = (unint64_t)&v112[v113];
            v115 = v32->fsHeader.vector.values <= (UInt8 *)v30
                 ? (unint64_t)((char *)v30 - (char *)v112) >> 1
                 : 0;
            v116 = v114 <= (unint64_t)v30 && v114 >= (unint64_t)v112;
            if (!v116 && v115 != v113)
              goto LABEL_228;
            goto LABEL_200;
          case 0xAu:
            v33 = v32->fsHeader.vector.values;
            if (v32->fsHeader.vector.values > (UInt8 *)v30)
              goto LABEL_228;
            v34 = bswap32(v32->fsHeader.theArray.lookupValues[0]) >> 16;
            v35 = v32->fsHeader.segment.binSearch.searchRange;
LABEL_196:
            v118 = (unint64_t)&v33[(bswap32(v35) >> 16) * (unint64_t)v34];
            if (v118 < (unint64_t)v33 || v118 > (unint64_t)v30)
              goto LABEL_228;
LABEL_200:
            v120 = bswap32(*(_DWORD *)(v4 + 12));
            v121 = v31 + bswap32(*(_DWORD *)(v4 + 20));
            v122 = v31 + bswap32(*(_DWORD *)(v4 + 24));
            if (v120 < 2
              || (v4 <= v121 + 2 ? (v124 = v121 + 4 > (unint64_t)v30) : (v124 = 1),
                  v124
               || ((v125 = (unsigned __int16 *)(v122 + 8 * (bswap32(*(unsigned __int16 *)(v121 + 2)) >> 16)),
                    v4 <= (unint64_t)v125)
                 ? (v126 = v125 + 4 > (unsigned __int16 *)v30)
                 : (v126 = 1),
                   v126)))
            {
              LOWORD(v123) = 0;
            }
            else
            {
              v123 = bswap32(*v125) >> 16;
            }
            v134 = TAATLookupTable::BadTable;
            v135 = 0;
            v136 = 0;
            v137 = -1;
            TAATLookupTable::SetTable((uint64_t)&v134, v32, v30);
            *(_QWORD *)&v138 = a1;
            DWORD2(v138) = v120;
            *(_QWORD *)&v139 = v121;
            *((_QWORD *)&v139 + 1) = v122;
            v65 = v140;
            std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v140, a2);
            v142 = v123;
            v127 = (char *)operator new(0x50uLL);
            v128 = v127;
            *(_QWORD *)v127 = &off_1E15E0568;
            v129 = v139;
            *(_OWORD *)(v127 + 8) = v138;
            *(_OWORD *)(v127 + 24) = v129;
            if (v141)
            {
              if (v141 == v140)
              {
                *((_QWORD *)v127 + 8) = v127 + 40;
                (*(void (**)(_QWORD *))(v140[0] + 24))(v140);
                LOWORD(v123) = v142;
              }
              else
              {
                *((_QWORD *)v127 + 8) = v141;
                v141 = 0;
              }
            }
            else
            {
              *((_QWORD *)v127 + 8) = 0;
            }
            *((_WORD *)v128 + 36) = v123;
            v144 = v128;
            v6 = TAATLookupTable::Iterate((uint64_t)&v134, (uint64_t)v143);
            v130 = v144;
            if (v144 == v143)
            {
              v131 = 4;
              v130 = v143;
            }
            else
            {
              if (!v144)
                goto LABEL_221;
              v131 = 5;
            }
            (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_221:
            v71 = v141;
            break;
          default:
            return v6;
        }
LABEL_222:
        if (v71 == v65)
        {
          v132 = 4;
        }
        else
        {
          if (!v71)
            return v6;
          v132 = 5;
          v65 = v71;
        }
        (*(void (**)(_QWORD *))(*v65 + 8 * v132))(v65);
      }
      break;
    default:
      return v6;
  }
  return v6;
}

uint64_t TAATLookupTable::Iterate(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  _QWORD v24[3];
  _QWORD *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  result = 0;
  v48 = *MEMORY[0x1E0C80C00];
  switch(*(_WORD *)(a1 + 48))
  {
    case 0:
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v44, a2);
      std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>>((uint64_t)v46, v44);
      if (*(_QWORD *)(a1 + 24))
      {
        v4 = 0;
        v5 = 0;
        do
        {
          v6 = *(_QWORD *)(a1 + 16) + v4;
          v23 = v5;
          v22 = v6;
          if (!v47)
            std::__throw_bad_function_call[abi:nn180100]();
          (*(void (**)(_BYTE *, __int16 *, uint64_t *))(*(_QWORD *)v47 + 48))(v47, &v23, &v22);
          ++v5;
          v4 += 2;
        }
        while (v5 < *(_QWORD *)(a1 + 24));
      }
      v7 = v47;
      if (v47 == v46)
      {
        v8 = 4;
        v7 = v46;
      }
      else
      {
        if (!v47)
        {
LABEL_44:
          v18 = v45;
          if (v45 != v44)
            goto LABEL_45;
          v19 = 4;
          v18 = v44;
          goto LABEL_47;
        }
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
      goto LABEL_44;
    case 2:
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v40, a2);
      std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>>((uint64_t)v42, v40);
      TAATLookupTable::IterateSegmentSingle(a1, (uint64_t)v42);
      v9 = v43;
      if (v43 == v42)
      {
        v10 = 4;
        v9 = v42;
      }
      else
      {
        if (!v43)
          goto LABEL_23;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
      v18 = v41;
      if (v41 != v40)
        goto LABEL_45;
      v19 = 4;
      v18 = v40;
      goto LABEL_47;
    case 4:
      v39 = 0;
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v32, a2);
      v11 = *(_QWORD *)(a1 + 40);
      v34 = *(_QWORD *)(a1 + 16);
      v35 = v11;
      std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>>((uint64_t)v36, (uint64_t)v32);
      TAATLookupTable::IterateSegmentArray(a1, (uint64_t)v38, (uint64_t)v36);
      v12 = v37;
      if (v37 == v36)
      {
        v13 = 4;
        v12 = v36;
      }
      else
      {
        if (!v37)
          goto LABEL_27;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_27:
      v20 = v33;
      if (v33 == v32)
      {
        v21 = 4;
        v20 = v32;
      }
      else
      {
        if (!v33)
          goto LABEL_40;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_40:
      v18 = v39;
      if (v39 != v38)
        goto LABEL_45;
      v19 = 4;
      v18 = v38;
      goto LABEL_47;
    case 6:
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v28, a2);
      std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>>((uint64_t)v30, v28);
      TAATLookupTable::IterateSingleTable(a1, (uint64_t)v30);
      v14 = v31;
      if (v31 == v30)
      {
        v15 = 4;
        v14 = v30;
      }
      else
      {
        if (!v31)
          goto LABEL_32;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_32:
      v18 = v29;
      if (v29 != v28)
        goto LABEL_45;
      v19 = 4;
      v18 = v28;
      goto LABEL_47;
    case 8:
      std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v24, a2);
      std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>>((uint64_t)v26, v24);
      TAATLookupTable::IterateTrimmedArray(a1, (uint64_t)v26);
      v16 = v27;
      if (v27 == v26)
      {
        v17 = 4;
        v16 = v26;
      }
      else
      {
        if (!v27)
          goto LABEL_36;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_36:
      v18 = v25;
      if (v25 == v24)
      {
        v19 = 4;
        v18 = v24;
      }
      else
      {
LABEL_45:
        if (!v18)
          return 1;
        v19 = 5;
      }
LABEL_47:
      (*(void (**)(void))(*v18 + 8 * v19))();
      return 1;
    default:
      return result;
  }
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t TAATLookupTable::IterateSingleTable(uint64_t result, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;

  v2 = *(unsigned __int16 **)(result + 16);
  if (v2[2])
  {
    v4 = result;
    v5 = 0;
    v6 = (unint64_t)(v2 + 1);
    v7 = __rev16(v2[2]);
    v8 = bswap32(v2[1]) >> 16;
    v9 = v2 + 6;
    do
    {
      if (v6 > (unint64_t)v9)
        break;
      if ((unint64_t)(v9 + 2) > *(_QWORD *)(v4 + 40))
        break;
      result = std::function<void ()(unsigned short,unsigned short const*)>::operator()(a2, bswap32(*v9) >> 16, (uint64_t)(v9 + 1));
      v9 = (unsigned __int16 *)((char *)v9 + v8);
      ++v5;
    }
    while (v7 > (unsigned __int16)v5);
  }
  return result;
}

uint64_t std::function<void ()(unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v5;
  uint64_t v6;
  __int16 v7;

  v7 = a2;
  v6 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::operator()(v5);
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 *a2, unsigned __int16 **a3)
{
  return std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a2, bswap32(**a3) >> 16);
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  __n128 Positions;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v16;
  _QWORD *v18;
  uint64_t v19;
  CFIndex v20;
  CFIndex v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (run && buffer)
  {
    length = range.length;
    location = range.location;
    v6 = *((_QWORD *)run + 5);
    if ((*(_BYTE *)(v6 + 225) & 8) != 0)
    {
      Positions = TRun::GetPositions((__n128 *)*((_QWORD *)run + 5), 0);
      v10 = 0;
      v11 = *(_QWORD *)(v6 + 264);
      v23[0] = &off_1E15DF050;
      v23[1] = buffer;
      v23[2] = v12;
      v24 = v23;
      v13 = *(_QWORD *)(v6 + 208);
      v14 = *(_QWORD *)(*(_QWORD *)(v6 + 216) + 16) + 2 * *(_QWORD *)(v6 + 200);
      if (!length)
        length = v13;
      if (v13 >= 1 && location >= 1)
      {
        v10 = 0;
        v16 = 0;
        do
        {
          if (v11 == v10 || *(__int16 *)(v14 + 2 * v10) != -1)
            ++v16;
          ++v10;
        }
        while (v10 < v13 && v16 < location);
      }
      v18 = v23;
      v19 = 4;
      if (v10 < v13 && length >= 1)
      {
        v20 = 0;
        do
        {
          if (v11 == v10 || *(unsigned __int16 *)(v14 + 2 * v10) != 0xFFFF)
          {
            v21 = v20;
            v22 = v10;
            if (!v24)
              std::__throw_bad_function_call[abi:nn180100]();
            (*(void (**)(_QWORD *, uint64_t *, CFIndex *, __n128))(*v24 + 48))(v24, &v22, &v21, Positions);
            ++v20;
          }
          ++v10;
        }
        while (v10 < v13 && v20 < length);
        v18 = v24;
        if (v24 == v23)
        {
          v19 = 4;
          v18 = v23;
        }
        else
        {
          if (!v24)
            return;
          v19 = 5;
        }
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
    else if ((range.location & 0x8000000000000000) == 0)
    {
      v7 = *(_QWORD *)(v6 + 208);
      if (range.location + range.length <= v7)
      {
        v8 = v7 - range.location;
        if (!range.length)
          range.length = v8;
        TRun::CopyPositions(*((unint64_t **)run + 5), range, buffer);
      }
    }
  }
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  const __CTFontDescriptor *v2;
  id v4;

  if (!descriptor)
    return 0;
  TDescriptor::CreateMatchingDescriptor(*((TDescriptor **)descriptor + 5), mandatoryAttributes, 0.0, 0, (TDescriptor *)&v4);
  do
    v2 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

void TAttributes::HandleForegroundCGColorAttribute(id a1, uint64_t *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a2;
    *(_BYTE *)(v2 + 136) = *(_BYTE *)(*a2 + 136) | 2;
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v2 + 32), a1);
  }
}

CFCharacterSetRef CTFontCopyCharacterSet(CTFontRef font)
{
  const __CFCharacterSet *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 184))(&v3);
  do
    v1 = (const __CFCharacterSet *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

void TComponentFont::CopyCharacterSet(TComponentFont *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  const __CFString *v6;
  const __CFData *ComponentAttribute;
  const __CFData *v8;
  const __CFData *v9;
  const UInt8 *BytePtr;
  const __CFAllocator *v11;
  __CFCharacterSet *Mutable;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  void *v19;
  unint64_t v21;
  void *v22;
  const __CFString *v24;
  const __CFString *v25;
  CFTypeID v26;
  const __CFCharacterSet *v28;
  unint64_t v29;
  void *v30;
  unint64_t v32;
  const void *v34;
  void *v35;
  id v36;
  id Copy;
  id v38;
  CFRange v39;

  v3 = (unint64_t *)((char *)this + 192);
  if (!atomic_load((unint64_t *)this + 24))
  {
    v6 = CFSTR("UnicodeCharSet");
    v38 = 0;
    if ((*((_BYTE *)this + 713) & 1) != 0)
    {
      ComponentAttribute = (const __CFData *)TComponentFont::GetComponentAttribute(this, CFSTR("cmapOverride"));
      if (ComponentAttribute)
      {
        v8 = ComponentAttribute;
        v9 = ComponentAttribute;
        BytePtr = CFDataGetBytePtr(v8);
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        if (Mutable)
        {
          v13 = *(_QWORD *)BytePtr;
          if (*(_QWORD *)BytePtr)
          {
            v14 = (unsigned int *)(BytePtr + 8);
            do
            {
              --v13;
              v15 = *v14;
              v14 += 2;
              v39.location = v15;
              v39.length = 1;
              CFCharacterSetAddCharactersInRange(Mutable, v39);
            }
            while (v13);
          }
        }
        Copy = CFCharacterSetCreateCopy(v11, Mutable);

        do
          v16 = __ldaxr((unint64_t *)&Copy);
        while (__stlxr(0, (unint64_t *)&Copy));
        do
          v17 = (void *)__ldaxr((unint64_t *)&v38);
        while (__stlxr(v16, (unint64_t *)&v38));

      }
    }
    if (!atomic_load((unint64_t *)&v38) && (*((_BYTE *)this + 713) & 2) != 0)
    {
      v19 = (void *)TComponentFont::GetComponentAttribute(this, CFSTR("UnicodeCharSet"));
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v38, v19);
      if (!atomic_load((unint64_t *)&v38))
      {
        v6 = CFSTR("NSCTFontCharacterSetAttribute");
        TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontCharacterSetAttribute"), &Copy);
        do
          v21 = __ldaxr((unint64_t *)&Copy);
        while (__stlxr(0, (unint64_t *)&Copy));
        do
          v22 = (void *)__ldaxr((unint64_t *)&v38);
        while (__stlxr(v21, (unint64_t *)&v38));

      }
    }
    if (!atomic_load((unint64_t *)&v38) && (*((_BYTE *)this + 713) & 4) != 0)
    {
      v24 = (const __CFString *)TComponentFont::GetComponentAttribute(this, CFSTR("UnicodeCharSetTrim"));
      if (v24)
      {
        v25 = v24;
        v26 = CFGetTypeID(v24);
        if (v26 == CFStringGetTypeID())
        {
          Copy = (id)0xAAAAAAAAAAAAAAAALL;
          TBaseFont::CopyPrebuiltCharacterSet(this, (unint64_t *)&Copy);
          if (atomic_load((unint64_t *)&Copy))
          {
            v28 = (const __CFCharacterSet *)atomic_load((unint64_t *)&Copy);
            CreateTrimmedCharacterSetForKey(v28, v25, (CFCharacterSetRef *)&v36);
            do
              v29 = __ldaxr((unint64_t *)&v36);
            while (__stlxr(0, (unint64_t *)&v36));
            do
              v30 = (void *)__ldaxr((unint64_t *)&v38);
            while (__stlxr(v29, (unint64_t *)&v38));

          }
          v6 = CFSTR("NSCTFontCharacterSetAttribute");

        }
      }
    }
    if (!atomic_load((unint64_t *)&v38))
    {
      TBaseFont::CopyCharacterSet(this, a2);

      return;
    }
    v32 = atomic_load((unint64_t *)&v38);
    do
    {
      if (__ldaxr(v3))
      {
        __clrex();
        goto LABEL_37;
      }
    }
    while (__stlxr(v32, v3));
    do
      v34 = (const void *)__ldaxr((unint64_t *)&v38);
    while (__stlxr(0, (unint64_t *)&v38));
    TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v34, v6);
LABEL_37:

  }
  v35 = (void *)atomic_load(v3);
  *a2 = v35;
}

void TBaseFont::CopyCharacterSet(TBaseFont *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  void *v5;
  unint64_t v9;
  void *v10;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  unint64_t v18;
  int v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  CFRange v25;

  v3 = (unint64_t *)((char *)this + 192);
  if (atomic_load((unint64_t *)this + 24))
  {
    v5 = (void *)atomic_load(v3);
    *a2 = v5;
  }
  else
  {
    v24 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::CopyPrebuiltCharacterSet(this, (unint64_t *)&v24);
    if (atomic_load((unint64_t *)&v24))
      goto LABEL_30;
    if (!atomic_load((unint64_t *)&v24))
    {
      TBaseFont::GetInitializedGraphicsFont(this);
      v23 = (id)CGFontCopyCharacterSet();
      do
        v9 = __ldaxr((unint64_t *)&v23);
      while (__stlxr(0, (unint64_t *)&v23));
      do
        v10 = (void *)__ldaxr((unint64_t *)&v24);
      while (__stlxr(v9, (unint64_t *)&v24));

      if (!atomic_load((unint64_t *)&v24))
      {
        v25.location = 0;
        v25.length = 0;
        v23 = CFCharacterSetCreateWithCharactersInRange((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v25);
        do
          v12 = __ldaxr((unint64_t *)&v23);
        while (__stlxr(0, (unint64_t *)&v23));
        do
          v13 = (void *)__ldaxr((unint64_t *)&v24);
        while (__stlxr(v12, (unint64_t *)&v24));

      }
    }
    v14 = (void *)atomic_load((unint64_t *)&v24);
    CharacterSetByAddingSynthesizedCharacters(v14, (unint64_t *)&v23);
    do
      v15 = __ldaxr((unint64_t *)&v23);
    while (__stlxr(0, (unint64_t *)&v23));
    do
      v16 = (void *)__ldaxr((unint64_t *)&v24);
    while (__stlxr(v15, (unint64_t *)&v24));

    if (atomic_load((unint64_t *)&v24))
    {
LABEL_30:
      do
        v18 = __ldaxr((unint64_t *)&v24);
      while (__stlxr(0, (unint64_t *)&v24));
      do
      {
        if (__ldaxr(v3))
        {
          v20 = 0;
          __clrex();
          goto LABEL_23;
        }
      }
      while (__stlxr(v18, v3));
      v20 = 1;
LABEL_23:
      if (v20)
        v21 = 0;
      else
        v21 = (void *)v18;

    }
    v22 = (void *)atomic_load(v3);
    *a2 = v22;

  }
}

void TBaseFont::CopyPrebuiltCharacterSet(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFString *v4;
  CFCharacterSetRef CharacterSetForFont;
  void *v6;

  *a2 = 0;
  if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 704))(this))
  {
    v4 = (const __CFString *)atomic_load((unint64_t *)this + 12);
    CharacterSetForFont = CreateCharacterSetForFont(v4);
    do
      v6 = (void *)__ldaxr(a2);
    while (__stlxr((unint64_t)CharacterSetForFont, a2));

  }
}

CFCharacterSetRef CreateCharacterSetForFont(const __CFString *a1)
{
  const __CFData *v1;
  CFCharacterSetRef CharacterSetWithCompressedBitmapRepresentation;
  id v4;

  if (!a1)
    return 0;
  CopyAttributeForSystemFont(a1, CFSTR("NSCTFontCharacterSetAttribute"), (const __CFString **)&v4);
  do
    v1 = (const __CFData *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  if (v1)
    CharacterSetWithCompressedBitmapRepresentation = CreateCharacterSetWithCompressedBitmapRepresentation(v1);
  else
    CharacterSetWithCompressedBitmapRepresentation = 0;

  return CharacterSetWithCompressedBitmapRepresentation;
}

CFCharacterSetRef CreateCharacterSetWithCompressedBitmapRepresentation(const __CFData *a1)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *v4;
  CFIndex v5;
  CFCharacterSetRef v6;
  CFIndex v7;
  const __CFAllocator *v8;
  char *v9;
  char *v10;
  int v11;
  CFIndex v12;
  const UInt8 *v13;
  const UInt8 *v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  const __CFAllocator *v22;

  if (a1)
  {
    BytePtr = CFDataGetBytePtr(a1);
    Length = CFDataGetLength(a1);
    v4 = 0;
    if (BytePtr)
    {
      v5 = Length;
      v6 = 0;
      if (Length)
      {
        v7 = *((unsigned int *)BytePtr + 1);
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
        v9 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], v7, 0);
        v10 = v9;
        if (*(_DWORD *)BytePtr == 1)
        {
          v19 = (char *)BytePtr;
          v20 = v5;
          v21 = 255;
        }
        else
        {
          if (*(_DWORD *)BytePtr == 2)
          {
            v11 = *((_DWORD *)BytePtr + 1);
            v12 = v5 - (v11 & 1);
            v13 = BytePtr + 8;
            v14 = &BytePtr[v12];
            if (BytePtr + 8 >= &BytePtr[v12])
            {
              v15 = v9;
            }
            else
            {
              v15 = v9;
              do
              {
                v16 = *(unsigned __int16 *)v13;
                v13 += 2;
                v17 = v16 >> 14;
                v18 = v16 & 0x3FFF;
                if (v16 >> 14 == 2)
                {
                  memcpy(v15, v13, 2 * v18);
                  v13 += 2 * v18;
                }
                else if (v17 == 1)
                {
                  memset(v15, 255, 2 * v18);
                }
                else if (v17)
                {
                  CFLog();
                }
                else
                {
                  bzero(v15, 2 * v18);
                }
                v15 += 2 * v18;
              }
              while (v13 < v14);
            }
            if ((v11 & 1) != 0)
              *v15 = *v13;
            goto LABEL_25;
          }
          v19 = (char *)BytePtr;
          v20 = v5;
          v21 = 0;
        }
        GetUncompressedBitmapRepresentation(v19, v20, v21, v10);
LABEL_25:
        v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v4 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v10, v7, v8);
        if (v4)
          v6 = CFCharacterSetCreateWithBitmapRepresentation(v22, v4);
        else
          v6 = 0;
      }
    }
    else
    {
      v6 = 0;
    }

    return v6;
  }
  return 0;
}

void CreateTrimmedCharacterSetForKey(const __CFCharacterSet *a1@<X0>, const __CFString *a2@<X1>, CFCharacterSetRef *a3@<X8>)
{
  const __CFString *v5;
  __CFCharacterSet *v6;
  __CFCharacterSet *v7;
  __CFCharacterSet *v8;
  __CFCharacterSet *v9;
  __CFCharacterSet *v10;
  __CFCharacterSet *v11;
  __CFCharacterSet *v12;
  __CFCharacterSet *v13;
  __CFCharacterSet *v14;
  __CFCharacterSet *v15;
  CFRange v16;
  __CFCharacterSet *v17;
  const __CFString *TrimStringForNumberingSystem;
  uint64_t v19;
  int *v20;
  CFRange v21;
  __CFCharacterSet *v22;
  const __CFAllocator *v23;
  const __CFCharacterSet *v24;
  __CFCharacterSet *v25;
  __CFCharacterSet *v26;
  __CFCharacterSet *v27;
  __CFCharacterSet *v28;
  __CFCharacterSet *v29;
  __CFCharacterSet *v30;
  __CFCharacterSet *v31;
  __CFCharacterSet *v32;
  __CFCharacterSet *v33;
  __CFCharacterSet *v34;
  __CFCharacterSet *v35;
  __CFCharacterSet *v36;
  __CFCharacterSet *v37;
  __CFCharacterSet *v38;
  __CFCharacterSet *v39;
  __CFCharacterSet *v40;
  __CFCharacterSet *v41;
  __CFCharacterSet *v42;
  __CFCharacterSet *v43;
  __CFCharacterSet *v44;
  __CFCharacterSet *v45;
  __CFCharacterSet *v46;
  __CFCharacterSet *v47;
  __CFCharacterSet *v48;
  __CFCharacterSet *v49;
  __CFCharacterSet *v50;
  __CFCharacterSet *v51;
  __CFCharacterSet *v52;
  __CFCharacterSet *v53;
  __CFCharacterSet *v54;
  __CFCharacterSet *v55;
  __CFCharacterSet *v56;
  __CFCharacterSet *v57;
  __CFCharacterSet *v58;
  __CFCharacterSet *v59;
  __CFCharacterSet *v60;
  __CFCharacterSet *v61;
  __CFCharacterSet *v62;
  unsigned int v63;
  id v64;
  CFRange v65;
  CFRange v66;
  CFRange v67;
  CFRange v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;
  CFRange v75;
  CFRange v76;
  CFRange v77;
  CFRange v78;
  CFRange v79;
  CFRange v80;
  CFRange v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;
  CFRange v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;
  CFRange v99;
  CFRange v100;
  CFRange v101;
  CFRange v102;
  CFRange v103;
  CFRange v104;
  CFRange v105;
  CFRange v106;
  CFRange v107;
  CFRange v108;
  CFRange v109;
  CFRange v110;

  v64 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableCharacterSet::TCFMutableCharacterSet((TCFMutableCharacterSet *)&v64, a1);
  if (a2 != CFSTR("system-ui"))
  {
    if (!a2)
      goto LABEL_23;
    if (!CFEqual(a2, CFSTR("system-ui")))
    {
      if (a2 == CFSTR("zh") || CFEqual(a2, CFSTR("zh")))
      {
        v7 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v65.location = 8853;
        v65.length = 1;
        CFCharacterSetRemoveCharactersInRange(v7, v65);
        v8 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v66.location = 9792;
        v66.length = 1;
        CFCharacterSetRemoveCharactersInRange(v8, v66);
        v9 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v67.location = 9794;
        v67.length = 1;
        CFCharacterSetRemoveCharactersInRange(v9, v67);
        v10 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v68.location = 12951;
        v68.length = 1;
        CFCharacterSetRemoveCharactersInRange(v10, v68);
        v11 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v69.location = 12953;
        v69.length = 1;
        CFCharacterSetRemoveCharactersInRange(v11, v69);
        v12 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v70.location = 127514;
        v70.length = 1;
        CFCharacterSetRemoveCharactersInRange(v12, v70);
        v13 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v71.location = 127535;
        v71.length = 1;
        CFCharacterSetRemoveCharactersInRange(v13, v71);
        v14 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v72.location = 127538;
        v72.length = 9;
        CFCharacterSetRemoveCharactersInRange(v14, v72);
        v15 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v16.location = 127568;
        v16.length = 2;
      }
      else if (a2 == CFSTR("ja") || CFEqual(a2, CFSTR("ja")))
      {
        v25 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v73.location = 8252;
        v73.length = 1;
        CFCharacterSetRemoveCharactersInRange(v25, v73);
        v26 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v74.location = 8265;
        v74.length = 1;
        CFCharacterSetRemoveCharactersInRange(v26, v74);
        v27 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v75.location = 9642;
        v75.length = 2;
        CFCharacterSetRemoveCharactersInRange(v27, v75);
        v28 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v76.location = 9728;
        v76.length = 4;
        CFCharacterSetRemoveCharactersInRange(v28, v76);
        v29 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v77.location = 9742;
        v77.length = 1;
        CFCharacterSetRemoveCharactersInRange(v29, v77);
        v30 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v78.location = 9757;
        v78.length = 1;
        CFCharacterSetRemoveCharactersInRange(v30, v78);
        v31 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v79.location = 9792;
        v79.length = 1;
        CFCharacterSetRemoveCharactersInRange(v31, v79);
        v32 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v80.location = 9794;
        v80.length = 1;
        CFCharacterSetRemoveCharactersInRange(v32, v80);
        v33 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v81.location = 9824;
        v81.length = 1;
        CFCharacterSetRemoveCharactersInRange(v33, v81);
        v34 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v82.location = 9827;
        v82.length = 1;
        CFCharacterSetRemoveCharactersInRange(v34, v82);
        v35 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v83.location = 9829;
        v83.length = 2;
        CFCharacterSetRemoveCharactersInRange(v35, v83);
        v36 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v84.location = 9832;
        v84.length = 1;
        CFCharacterSetRemoveCharactersInRange(v36, v84);
        v37 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v85.location = 9851;
        v85.length = 1;
        CFCharacterSetRemoveCharactersInRange(v37, v85);
        v38 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v86.location = 9918;
        v86.length = 1;
        CFCharacterSetRemoveCharactersInRange(v38, v86);
        v39 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v87.location = 9986;
        v87.length = 1;
        CFCharacterSetRemoveCharactersInRange(v39, v87);
        v40 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v88.location = 10145;
        v88.length = 1;
        CFCharacterSetRemoveCharactersInRange(v40, v88);
        v41 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v89.location = 11013;
        v89.length = 3;
        CFCharacterSetRemoveCharactersInRange(v41, v89);
        v42 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v90.location = 12336;
        v90.length = 1;
        CFCharacterSetRemoveCharactersInRange(v42, v90);
        v43 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v91.location = 12349;
        v91.length = 1;
        CFCharacterSetRemoveCharactersInRange(v43, v91);
        v44 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v92.location = 12951;
        v92.length = 1;
        CFCharacterSetRemoveCharactersInRange(v44, v92);
        v45 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v93.location = 12953;
        v93.length = 1;
        CFCharacterSetRemoveCharactersInRange(v45, v93);
        v46 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v94.location = 127490;
        v94.length = 1;
        CFCharacterSetRemoveCharactersInRange(v46, v94);
        v15 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v16.location = 127543;
        v16.length = 1;
      }
      else
      {
        if (a2 != CFSTR("ko") && !CFEqual(a2, CFSTR("ko")))
          goto LABEL_23;
        v47 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v95.location = 8252;
        v95.length = 1;
        CFCharacterSetRemoveCharactersInRange(v47, v95);
        v48 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v96.location = 8265;
        v96.length = 1;
        CFCharacterSetRemoveCharactersInRange(v48, v96);
        v49 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v97.location = 8597;
        v97.length = 1;
        CFCharacterSetRemoveCharactersInRange(v49, v97);
        v50 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v98.location = 9723;
        v98.length = 2;
        CFCharacterSetRemoveCharactersInRange(v50, v98);
        v51 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v99.location = 9742;
        v99.length = 1;
        CFCharacterSetRemoveCharactersInRange(v51, v99);
        v52 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v100.location = 9757;
        v100.length = 1;
        CFCharacterSetRemoveCharactersInRange(v52, v100);
        v53 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v101.location = 9775;
        v101.length = 1;
        CFCharacterSetRemoveCharactersInRange(v53, v101);
        v54 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v102.location = 9792;
        v102.length = 1;
        CFCharacterSetRemoveCharactersInRange(v54, v102);
        v55 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v103.location = 9794;
        v103.length = 1;
        CFCharacterSetRemoveCharactersInRange(v55, v103);
        v56 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v104.location = 9824;
        v104.length = 1;
        CFCharacterSetRemoveCharactersInRange(v56, v104);
        v57 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v105.location = 9827;
        v105.length = 1;
        CFCharacterSetRemoveCharactersInRange(v57, v105);
        v58 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v106.location = 9829;
        v106.length = 2;
        CFCharacterSetRemoveCharactersInRange(v58, v106);
        v59 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v107.location = 9832;
        v107.length = 1;
        CFCharacterSetRemoveCharactersInRange(v59, v107);
        v60 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v108.location = 10006;
        v108.length = 1;
        CFCharacterSetRemoveCharactersInRange(v60, v108);
        v61 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v109.location = 10055;
        v109.length = 1;
        CFCharacterSetRemoveCharactersInRange(v61, v109);
        v62 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v110.location = 10145;
        v110.length = 1;
        CFCharacterSetRemoveCharactersInRange(v62, v110);
        v15 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        v16.location = 11013;
        v16.length = 3;
      }
      CFCharacterSetRemoveCharactersInRange(v15, v16);
      goto LABEL_23;
    }
  }
  v63 = 0;
  if (GetLocalizedTrimSetKey(0, &v63) && v63)
  {
    if (v63 == 32)
    {
      v17 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
      CFCharacterSetRemoveCharactersInString(v17, CFSTR("\"'()°‘’“”"));
      TrimStringForNumberingSystem = GetTrimStringForNumberingSystem();
      if (TrimStringForNumberingSystem)
      {
        v5 = TrimStringForNumberingSystem;
        v6 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
        goto LABEL_15;
      }
    }
    else
    {
      if (v63 == 64)
      {
        v5 = GetTrimStringForNumberingSystem();
        v6 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
LABEL_15:
        CFCharacterSetRemoveCharactersInString(v6, v5);
        goto LABEL_23;
      }
      v19 = 0;
      v20 = &dword_18493B4FC;
      do
      {
        if ((v63 & *(v20 - 1)) != 0)
        {
          if (((0x4FuLL >> v19) & 1) != 0)
          {
            v21.location = *v20;
            v22 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
            v21.length = 1;
          }
          else
          {
            v21.location = *v20;
            v21.length = v20[1] - v21.location + 1;
            v22 = (__CFCharacterSet *)atomic_load((unint64_t *)&v64);
          }
          CFCharacterSetRemoveCharactersInRange(v22, v21);
        }
        ++v19;
        v20 += 3;
      }
      while (v19 != 9);
    }
  }
LABEL_23:
  AddSynthesizedCharactersToCharacterSet((TCFMutableCharacterSet *)&v64, 0);
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v24 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v64);
  *a3 = CFCharacterSetCreateCopy(v23, v24);

}

void TCFMutableCharacterSet::TCFMutableCharacterSet(TCFMutableCharacterSet *this, const __CFCharacterSet *a2)
{
  const __CFAllocator *v3;
  CFMutableCharacterSetRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    MutableCopy = CFCharacterSetCreateMutableCopy(v3, a2);
  else
    MutableCopy = CFCharacterSetCreateMutable(v3);
  *(_QWORD *)this = MutableCopy;
}

void AddSynthesizedCharactersToCharacterSet(TCFMutableCharacterSet *a1, const TBaseFont *a2)
{
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unsigned int v7;
  __CFCharacterSet *v8;
  char **v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _OWORD v13[4];
  _OWORD *v14;
  uint64_t v15;
  CFRange v16;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[2] = v3;
  v13[3] = v3;
  v13[0] = v3;
  v13[1] = v3;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v14 = v13;
  v4 = atomic_load((unint64_t *)a1);
  AddSynthesizableCharacters(v4, &v10);
  v5 = v10;
  v6 = v11;
  while (v5 != v6)
  {
    v7 = *(unsigned __int16 *)v5;
    v5 += 2;
    v16.location = v7;
    v8 = (__CFCharacterSet *)atomic_load((unint64_t *)a1);
    v16.length = 1;
    CFCharacterSetAddCharactersInRange(v8, v16);
  }
  v9 = &v10;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v9);
}

uint64_t AddSynthesizableCharacters(uint64_t a1, char **a2)
{
  __int128 v3;
  uint64_t result;
  const __int16 *v5;
  int v6;
  unsigned int v7;
  BOOL v9;
  BOOL v10;
  char v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v21;
  char v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  char *v42;
  int v43;
  __int16 v44;
  CFCharacterSetRef theSet[2];
  __int128 v46;
  _QWORD v47[5];

  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)theSet = v3;
  v46 = v3;
  result = CFCharacterSetInitInlineBuffer();
  v5 = L"\t ";
  do
  {
    v44 = v5[2];
    v6 = *(_DWORD *)v5;
    v43 = v6;
    v7 = (uint64_t)theSet[1] & 4;
    if (HIDWORD(theSet[1]) > (unsigned __int16)v6 || v46 <= (unsigned __int16)v6)
    {
      if (((uint64_t)theSet[1] & 4) != 0)
        goto LABEL_87;
      goto LABEL_33;
    }
    if (((uint64_t)theSet[1] & 2) != 0)
    {
      result = CFCharacterSetIsLongCharacterMember(theSet[0], (unsigned __int16)v6);
      if ((_DWORD)result)
        goto LABEL_87;
LABEL_33:
      v17 = 2;
      while (1)
      {
        v18 = *(unsigned __int16 *)((char *)&v43 + v17);
        if (*(_WORD *)((char *)&v43 + v17))
        {
          v19 = (uint64_t)theSet[1] & 4;
          if (HIDWORD(theSet[1]) <= v18 && v46 > v18)
          {
            if (((uint64_t)theSet[1] & 2) != 0)
            {
              result = CFCharacterSetIsLongCharacterMember(theSet[0], v18);
              if ((_DWORD)result)
                goto LABEL_68;
            }
            else if (*((_QWORD *)&v46 + 1))
            {
              if (((uint64_t)theSet[1] & 1) != 0)
              {
                v25 = v19 >> 2;
                v26 = *(unsigned __int8 *)(*((_QWORD *)&v46 + 1) + (v18 >> 8));
                if (*(_BYTE *)(*((_QWORD *)&v46 + 1) + (v18 >> 8)))
                {
                  if ((_DWORD)v26 == 255)
                  {
                    v25 = v19 == 0;
                  }
                  else
                  {
                    v27 = v19 == 0;
                    if (((*(unsigned __int8 *)(*((_QWORD *)&v46 + 1) + 32 * v26 + (v18 >> 3) + 224) >> (v18 & 7)) & 1) != 0)
                      v25 = v27;
                  }
                }
                if (v25)
                  goto LABEL_68;
              }
              else
              {
                v9 = v19 == 0;
                v21 = v19 != 0;
                v22 = v9;
                if (((*(unsigned __int8 *)(*((_QWORD *)&v46 + 1) + (v18 >> 3)) >> (v18 & 7)) & 1) != 0)
                  v21 = v22;
                if (v21)
                  goto LABEL_68;
              }
            }
            else
            {
              v9 = v19 == 0;
              v23 = v19 != 0;
              v24 = v9;
              if (((uint64_t)theSet[1] & 1) == 0)
                v23 = v24;
              if (v23)
              {
LABEL_68:
                v28 = a2[1];
                v29 = (unint64_t)a2[2];
                if ((unint64_t)v28 >= v29)
                {
                  v31 = *a2;
                  v32 = v28 - *a2;
                  if (v32 <= -3)
                    abort();
                  v33 = v32 >> 1;
                  v34 = v29 - (_QWORD)v31;
                  if (v34 <= (v32 >> 1) + 1)
                    v35 = v33 + 1;
                  else
                    v35 = v34;
                  if (v34 >= 0x7FFFFFFFFFFFFFFELL)
                    v36 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v36 = v35;
                  v47[4] = a2 + 3;
                  if (v36)
                  {
                    v37 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a2 + 3), v36);
                    v31 = *a2;
                    v28 = a2[1];
                  }
                  else
                  {
                    v37 = 0;
                  }
                  v38 = &v37[2 * v33];
                  *(_WORD *)v38 = v43;
                  if (v28 == v31)
                  {
                    v40 = &v37[2 * v33];
                  }
                  else
                  {
                    v39 = v28;
                    v40 = &v37[2 * v33];
                    do
                    {
                      v41 = *((_WORD *)v39 - 1);
                      v39 -= 2;
                      *((_WORD *)v40 - 1) = v41;
                      v40 -= 2;
                    }
                    while (v39 != v31);
                  }
                  v30 = v38 + 2;
                  *a2 = v40;
                  a2[1] = v38 + 2;
                  v42 = a2[2];
                  a2[2] = &v37[2 * v36];
                  v47[2] = v28;
                  v47[3] = v42;
                  v47[0] = v31;
                  v47[1] = v31;
                  result = std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v47);
                }
                else
                {
                  *(_WORD *)v28 = v43;
                  v30 = v28 + 2;
                }
                a2[1] = v30;
                goto LABEL_87;
              }
            }
          }
          else if (((uint64_t)theSet[1] & 4) != 0)
          {
            goto LABEL_68;
          }
        }
        v17 += 2;
        if (v17 == 6)
          goto LABEL_87;
      }
    }
    if (*((_QWORD *)&v46 + 1))
    {
      if (((uint64_t)theSet[1] & 1) != 0)
      {
        v14 = v7 >> 2;
        v15 = *(unsigned __int8 *)(*((_QWORD *)&v46 + 1) + ((unint64_t)(unsigned __int16)v6 >> 8));
        if (*(_BYTE *)(*((_QWORD *)&v46 + 1) + ((unint64_t)(unsigned __int16)v6 >> 8)))
        {
          if ((_DWORD)v15 == 255)
          {
            v14 = v7 == 0;
          }
          else
          {
            v16 = v7 == 0;
            if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v46 + 1)
                                                        + 32 * v15
                                                        + (v6 >> 3)
                                                        + 224) >> (v6 & 7)) & 1) != 0)
              v14 = v16;
          }
        }
        if (!v14)
          goto LABEL_33;
      }
      else
      {
        v9 = v7 == 0;
        v10 = v7 != 0;
        v11 = v9;
        if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v46 + 1)
                                                    + ((unint64_t)(unsigned __int16)v6 >> 3)) >> (v6 & 7)) & 1) != 0)
          v10 = v11;
        if (!v10)
          goto LABEL_33;
      }
    }
    else
    {
      v9 = v7 == 0;
      v12 = v7 != 0;
      v13 = v9;
      if (((uint64_t)theSet[1] & 1) == 0)
        v12 = v13;
      if (!v12)
        goto LABEL_33;
    }
LABEL_87:
    v5 += 3;
  }
  while (v5 != (const __int16 *)&unk_18494F794);
  return result;
}

uint64_t TGlyphIterator::DoGlyphInsertion(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  const unsigned __int16 *v8;
  const unsigned __int16 *v9;
  const unsigned __int16 *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  const unsigned __int16 *v13;
  unsigned __int16 v14;
  _QWORD *v16;
  uint64_t v17;
  const unsigned __int16 **v19;
  const unsigned __int16 *v20;
  const unsigned __int16 *v21;
  uint64_t v22;
  _OWORD v23[4];
  _OWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)a1 + 152) && !*(_QWORD *)(*(_QWORD *)a1 + 584))
    return 0;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[2] = v5;
  v23[3] = v5;
  v23[0] = v5;
  v23[1] = v5;
  v6 = a2;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v24 = v23;
  if (a2)
  {
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v20, a2);
    v7 = 0;
    v8 = v21;
    do
    {
      v8[v7] = bswap32(*(unsigned __int16 *)(a3 + v7 * 2)) >> 16;
      ++v7;
    }
    while (v6 != v7);
    v9 = &v8[v7];
    v21 = v9;
    v10 = v20;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = a1[2];
  if ((v11 & 0x80000000) != 0 && v10 != v9)
  {
    v12 = (unsigned __int16 *)(v9 - 1);
    if (v9 - 1 > v10)
    {
      v13 = v10 + 1;
      do
      {
        v14 = *(v13 - 1);
        *((_WORD *)v13 - 1) = *v12;
        *v12-- = v14;
      }
      while (v13++ < v12);
    }
  }
  v16 = a1 + 12;
  v17 = TRunGlue::DoGlyphInsertion(*(TRunGlue **)a1, v10, (unsigned __int16)(((_DWORD)v9 - (_DWORD)v10) >> 1), v11 >> 31, 0, *((_QWORD *)a1 + 6), *((_QWORD *)a1 + 6), 0, 0);
  if ((_DWORD)v17)
  {
    if ((a1[2] & 0x80000000) != 0)
    {
      *((_QWORD *)a1 + 2) += v6;
      *((_QWORD *)a1 + 4) += v6;
    }
    else
    {
      *((_QWORD *)a1 + 3) += v6;
      v16 = a1 + 10;
    }
    *v16 += v6;
  }
  v19 = &v20;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
  return v17;
}

void TBMPDataCachePage::TBMPDataCachePage(TBMPDataCachePage *this, const TBaseFont *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  int16x8_t v7;
  __int128 v8;
  int16x8_t v9;
  __int128 v10;
  float64x2_t *v11;
  uint64_t i;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  _BYTE __b[2048];
  int v17[256];
  _OWORD v18[32];
  void **v19;
  _QWORD v20[3];
  _OWORD v21[15];
  _OWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 197) = 0;
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 198) = 0;
  *((_QWORD *)this + 207) = (char *)this + 1592;
  v5 = a3 & 0xFFFFFF00;
  (*(void (**)(const TBaseFont *, _QWORD, uint64_t, TBMPDataCachePage *))(*(_QWORD *)a2 + 672))(a2, a3 & 0xFFFFFF00, 256, this);
  v6 = 0;
  v7 = (int16x8_t)vorrq_s8((int8x16_t)vdupq_n_s16(v5), (int8x16_t)xmmword_1849506C0);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[30] = v8;
  v18[31] = v8;
  v18[28] = v8;
  v18[29] = v8;
  v18[26] = v8;
  v18[27] = v8;
  v18[24] = v8;
  v18[25] = v8;
  v18[22] = v8;
  v18[23] = v8;
  v18[20] = v8;
  v18[21] = v8;
  v18[18] = v8;
  v18[19] = v8;
  v18[16] = v8;
  v18[17] = v8;
  v18[14] = v8;
  v18[15] = v8;
  v18[12] = v8;
  v18[13] = v8;
  v18[10] = v8;
  v18[11] = v8;
  v18[8] = v8;
  v18[9] = v8;
  v18[6] = v8;
  v18[7] = v8;
  v18[4] = v8;
  v18[5] = v8;
  v18[2] = v8;
  v18[3] = v8;
  v18[0] = v8;
  v18[1] = v8;
  v9.i64[0] = 0x8000800080008;
  v9.i64[1] = 0x8000800080008;
  do
  {
    v18[v6] = v7;
    v7 = vaddq_s16(v7, v9);
    ++v6;
  }
  while (v6 != 32);
  bzero(v17, 0x400uLL);
  memset(__b, 255, sizeof(__b));
  if ((*(unsigned int (**)(const TBaseFont *, TBMPDataCachePage *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, this, __b, 1, 256))
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[14] = v10;
    v21[13] = v10;
    v21[12] = v10;
    v21[11] = v10;
    v21[10] = v10;
    v21[9] = v10;
    v21[8] = v10;
    v21[7] = v10;
    v21[6] = v10;
    v21[5] = v10;
    v21[4] = v10;
    v21[3] = v10;
    v21[2] = v10;
    v21[1] = v10;
    v21[0] = v10;
    memset(v20, 0, sizeof(v20));
    v22 = v21;
    v19 = (void **)v20;
    v15 = 0;
    v11 = (float64x2_t *)__b;
    TUnicodeEncoder::EncodePortion((char ***)&v19, 0, (uint64_t)v18, 256, (uint64_t)a2, 0, (uint64_t)this, (uint64_t)__b, 1, (uint64_t)v17, (double *)&v15, 1);
    for (i = 0; i != 1024; i += 16)
    {
      v14 = *v11;
      v13 = v11[1];
      v11 += 2;
      *(float32x4_t *)((char *)this + i + 512) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v13);
    }
    v19 = (void **)v20;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v19);
  }
  else
  {
    bzero((char *)this + 512, 0x400uLL);
  }
  TCompactArray<unsigned short,8ul,3ul,30ul>::assign<unsigned int *>((uint64_t)this + 1536, v17, (int *)v18);
}

void *TInlineBufferAllocator<unsigned short,30ul>::allocate(uint64_t a1, uint64_t a2)
{
  void *result;
  unint64_t v4;

  result = *(void **)(a1 + 64);
  v4 = (unint64_t)result + 2 * a2;
  if (v4 <= a1 + 60)
  {
    *(_QWORD *)(a1 + 64) = v4;
  }
  else
  {
    if (a2 < 0)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(2 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 <= (unint64_t)v4 && v5 + 60 > (unint64_t)v4)
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(v5 + 64))
        *(_QWORD *)(v5 + 64) = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t TBaseFont::GetUnscaledAdvances(TBaseFont *a1, uint64_t a2, _QWORD *a3, int a4, int64_t a5)
{
  uint64_t InitializedGraphicsFont;
  uint64_t v10;
  __int128 v12;
  char *v13;
  uint64_t GlyphAdvancesForStyle;
  char *v15;
  uint64_t v16;
  char **v17;
  char *v18;
  void *v19;
  uint64_t v20;
  _OWORD v21[30];
  _OWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(a1);
  if (a4 == 2)
    return CGFontGetGlyphAdvancesForStyle();
  if (a4 != 1)
    goto LABEL_8;
  if (!InitializedGraphicsFont || !CGFontGetParserFont())
  {
    TBaseFont::GetInitializedGraphicsFont(a1);
LABEL_8:
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[28] = v12;
    v21[29] = v12;
    v21[26] = v12;
    v21[27] = v12;
    v21[24] = v12;
    v21[25] = v12;
    v21[22] = v12;
    v21[23] = v12;
    v21[20] = v12;
    v21[21] = v12;
    v21[18] = v12;
    v21[19] = v12;
    v21[16] = v12;
    v21[17] = v12;
    v21[15] = v12;
    v21[14] = v12;
    v21[13] = v12;
    v21[12] = v12;
    v21[11] = v12;
    v21[10] = v12;
    v21[9] = v12;
    v21[8] = v12;
    v21[7] = v12;
    v21[6] = v12;
    v21[4] = v12;
    v21[5] = v12;
    v21[2] = v12;
    v21[3] = v12;
    v21[0] = v12;
    v21[1] = v12;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v22 = v21;
    if (a5)
    {
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100](&v18, a5);
      v13 = (char *)v19;
      bzero(v19, 16 * a5);
      v19 = &v13[16 * a5];
      GlyphAdvancesForStyle = CGFontGetGlyphAdvancesForStyle();
      v10 = GlyphAdvancesForStyle;
      if (a5 >= 1 && (_DWORD)GlyphAdvancesForStyle)
      {
        v15 = v18;
        do
        {
          v16 = *(_QWORD *)v15;
          v15 += 16;
          *a3 = v16;
          a3 += a4;
          --a5;
        }
        while (a5);
        v10 = 1;
      }
    }
    else
    {
      v10 = CGFontGetGlyphAdvancesForStyle();
    }
    v17 = &v18;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v17);
    return v10;
  }
  FPFontGetGlyphIdealAdvanceWidths();
  return 1;
}

uint64_t TTenuousComponentFont::GetUnscaledAdvances(TComponentFont *this, unsigned __int16 *a2, _QWORD *a3, uint64_t a4, int64_t a5)
{
  const __CFURL *ComponentAttribute;
  void *v13;
  TDescriptor **v14;
  TDescriptor **v15;
  TDescriptor *v16;
  unint64_t v17;
  uint64_t v18;
  __CFString v19;

  if ((*((_BYTE *)this + 712) & 0x20) == 0)
    return TBaseFont::GetUnscaledAdvances(this, (uint64_t)a2, a3, a4, a5);
  ComponentAttribute = (const __CFURL *)TComponentFont::GetComponentAttribute(this, CFSTR("hmtxPerAltFont"));
  if (!ComponentAttribute)
    return TComponentFont::GetUnscaledAdvances(this, a2, a3, a4, a5);
  v19.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  CopyComponentFontDescriptorWithBaseSystemFallback(&v19, ComponentAttribute, 0, 1024);
  if (!atomic_load((unint64_t *)&v19))
    goto LABEL_9;
  v13 = (void *)atomic_load((unint64_t *)&v19);
  v14 = v13;
  v15 = v14;
  v16 = v14[5];
  if ((*((_DWORD *)v16 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v14[5], 0, 0.0);
  v17 = atomic_load((unint64_t *)v16 + 4);

  if (!v17)
  {
LABEL_9:

    return TComponentFont::GetUnscaledAdvances(this, a2, a3, a4, a5);
  }
  v18 = (*(uint64_t (**)(unint64_t, unsigned __int16 *, _QWORD *, uint64_t, int64_t))(*(_QWORD *)v17 + 512))(v17, a2, a3, a4, a5);

  return v18;
}

void CharacterSetByAddingSynthesizedCharacters(id a1@<X0>, unint64_t *a2@<X8>)
{
  __int128 v5;
  char *v6;
  char *v7;
  unsigned int v8;
  __CFCharacterSet *v9;
  unint64_t v10;
  id MutableCopy;
  char *v12;
  char *v13;
  uint64_t v14;
  _OWORD v15[4];
  _OWORD *v16;
  uint64_t v17;
  CFRange v18;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_8;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[2] = v5;
  v15[3] = v5;
  v15[0] = v5;
  v15[1] = v5;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v16 = v15;
  AddSynthesizableCharacters((uint64_t)a1, &v12);
  if (v12 == v13)
  {
    MutableCopy = &v12;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&MutableCopy);
LABEL_8:
    *a2 = (unint64_t)a1;
    return;
  }
  MutableCopy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFCharacterSetRef)a1);
  v6 = v12;
  v7 = v13;
  while (v6 != v7)
  {
    v8 = *(unsigned __int16 *)v6;
    v6 += 2;
    v18.location = v8;
    v9 = (__CFCharacterSet *)atomic_load((unint64_t *)&MutableCopy);
    v18.length = 1;
    CFCharacterSetAddCharactersInRange(v9, v18);
  }
  do
    v10 = __ldaxr((unint64_t *)&MutableCopy);
  while (__stlxr(0, (unint64_t *)&MutableCopy));
  _CFCharacterSetCompact();
  *a2 = v10;

  MutableCopy = &v12;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&MutableCopy);
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  BOOL result;
  uint64_t v6;

  result = 0;
  if (font && characters && glyphs)
  {
    v6 = *(_QWORD *)(*((_QWORD *)font + 5) + 400);
    if (v6)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 664))(v6) == count;
    }
    else
    {
      if (count >= 1)
        bzero(glyphs, 2 * count);
      return 0;
    }
  }
  return result;
}

uint64_t TBaseFont::GetGlyphsForCharacters(TBaseFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  TBaseFont *v5;

  v5 = this;
  return TBaseFont::GetGlyphsForCharactersWithCMap(this, &v5, a2, a3, a4);
}

uint64_t TBaseFont::GetGlyphsForCharactersWithCMap(TBaseFont *this, TBaseFont **a2, const unsigned __int16 *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  const unsigned __int16 *v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t SynthesizedGlyphs;
  _QWORD *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t **v17;
  int v18;
  unsigned int v19;
  int v20;
  TBaseFont *v23;
  unsigned __int16 v24;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v10 = TcmapTable::Map(a2, a3, a4, a5, 0);
  v11 = v5 - v10;
  v23 = this;
  if (v5 > v10)
  {
    SynthesizedGlyphs = TBaseFont::GetSynthesizedGlyphs(this);
    if (SynthesizedGlyphs)
    {
      if (v5 >= 1)
      {
        v13 = (_QWORD *)SynthesizedGlyphs;
        if (*(_QWORD *)(SynthesizedGlyphs + 24))
        {
          v14 = v6;
          v15 = (unsigned __int16 *)v7;
          v16 = v5;
          do
          {
            if (!*v14)
            {
              v17 = std::__hash_table<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>>>::find<unsigned short>(v13, v15);
              if (v17)
              {
                *v14 = *((_WORD *)v17 + 9);
                ++v10;
              }
              if (!--v11)
                break;
            }
            ++v15;
            ++v14;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  v18 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v23 + 728))(v23);
  if (v5 >= 1 && v18)
  {
    do
    {
      v19 = *v7++;
      v20 = (1 << v19) & 0x2600;
      if (v19 <= 0xD && v20 != 0)
      {
        v24 = 32;
        TcmapTable::Map(a2, &v24, v6, 1, 1);
      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  return v10;
}

uint64_t TcmapTable::Map(TBaseFont **this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, char a5)
{
  __int128 v12;
  uint64_t v13;
  const unsigned __int16 *v14;
  const unsigned __int16 *v15;
  __int16 v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  int v37;
  BOOL v38;
  unsigned int v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void **v47;
  char *v48;
  __int16 v49;
  char *v50;
  char *v51;
  char *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void **v60;
  char *v61;
  __int16 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  uint64_t i;
  char v71;
  id v72;
  void **p_src;
  void **v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  void *__src;
  char *v79;
  char *v80;
  _OWORD v81[4];
  _OWORD *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (TBaseFont::GetInitializedGraphicsFont(*this) && CGFontGetParserFont())
    return FPFontGetGlyphsForCharacters();
  v72 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)*this + 496))(&v72);
  if (atomic_load((unint64_t *)&v72))
  {
    v71 = a5;
    atomic_load((unint64_t *)&v72);
    CGFontGetGlyphsForUnichars();
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v81[3] = v12;
    v81[2] = v12;
    v81[1] = v12;
    v81[0] = v12;
    v79 = 0;
    v80 = 0;
    __src = 0;
    v82 = v81;
    if (a4 < 1)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v13 = 0;
      v14 = a2;
      v15 = a2;
      while (1)
      {
        v16 = *v15++;
        v17 = (v16 & 0xFC00) != 0xD800 || a4 - 1 == v13;
        if (!v17 && (v14[1] & 0xFC00) == 0xDC00)
          break;
        ++v13;
        v14 = v15;
        if (a4 == v13)
          goto LABEL_92;
      }
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve((char **)&__src, ~v13 + a4);
      v22 = v79;
      if (v79 >= v80)
      {
        v23 = (void **)__src;
        v24 = v79 - (_BYTE *)__src;
        if (v79 - (_BYTE *)__src <= -3)
LABEL_120:
          abort();
        v25 = v24 >> 1;
        if (v80 - (_BYTE *)__src <= (unint64_t)((v24 >> 1) + 1))
          v26 = v25 + 1;
        else
          v26 = v80 - (_BYTE *)__src;
        if ((unint64_t)(v80 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFFELL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        v77 = v81;
        if (v27)
        {
          v28 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v81, v27);
          v23 = (void **)__src;
          v22 = v79;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[2 * v25];
        *(_WORD *)v29 = 0;
        if (v22 == (char *)v23)
        {
          v31 = &v28[2 * v25];
        }
        else
        {
          v30 = (void **)v22;
          v31 = &v28[2 * v25];
          do
          {
            v32 = *((_WORD *)v30 - 1);
            v30 = (void **)((char *)v30 - 2);
            *((_WORD *)v31 - 1) = v32;
            v31 -= 2;
          }
          while (v30 != v23);
        }
        v19 = v29 + 2;
        __src = v31;
        v79 = v29 + 2;
        v33 = v80;
        v80 = &v28[2 * v27];
        v75 = v22;
        v76 = v33;
        p_src = v23;
        v74 = v23;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&p_src);
      }
      else
      {
        *(_WORD *)v79 = 0;
        v19 = v22 + 2;
      }
      v20 = v13 + 2;
      v21 = v13 + 1;
      v79 = v19;
    }
    if (v21 < a4)
    {
      for (i = v21; v20 < a4; ++v21)
      {
        v34 = v20 + 1;
        v35 = a2[v20];
        if ((v35 & 0xFC00) != 0xD800 || v34 == a4)
        {
          ++v20;
        }
        else
        {
          v37 = a2[v34];
          v38 = (v37 & 0xFC00) == 56320;
          v39 = (v35 << 10) - 56613888 + v37;
          if (v38)
            v20 += 2;
          else
            ++v20;
          if (v38)
            v35 = v39;
        }
        if (v19 >= v80)
        {
          v40 = (void **)__src;
          v41 = v19 - (_BYTE *)__src;
          if (v19 - (_BYTE *)__src <= -3)
            goto LABEL_120;
          v42 = v41 >> 1;
          if (v80 - (_BYTE *)__src <= (unint64_t)((v41 >> 1) + 1))
            v43 = v42 + 1;
          else
            v43 = v80 - (_BYTE *)__src;
          if ((unint64_t)(v80 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFFELL)
            v44 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          v77 = v81;
          if (v44)
          {
            v45 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v81, v44);
            v40 = (void **)__src;
            v19 = v79;
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[2 * v42];
          *(_WORD *)v46 = a3[v21];
          if (v19 == (char *)v40)
          {
            v48 = &v45[2 * v42];
          }
          else
          {
            v47 = (void **)v19;
            v48 = &v45[2 * v42];
            do
            {
              v49 = *((_WORD *)v47 - 1);
              v47 = (void **)((char *)v47 - 2);
              *((_WORD *)v48 - 1) = v49;
              v48 -= 2;
            }
            while (v47 != v40);
          }
          v50 = v46 + 2;
          __src = v48;
          v79 = v46 + 2;
          v51 = v80;
          v80 = &v45[2 * v44];
          v75 = v19;
          v76 = v51;
          p_src = v40;
          v74 = v40;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&p_src);
          v19 = v50;
        }
        else
        {
          *(_WORD *)v19 = a3[v21];
          v19 += 2;
        }
        v79 = v19;
        if (v35 >= 0x10000)
        {
          if (v19 >= v80)
          {
            v53 = (void **)__src;
            v54 = v19 - (_BYTE *)__src;
            if (v19 - (_BYTE *)__src <= -3)
              goto LABEL_120;
            v55 = v54 >> 1;
            if (v80 - (_BYTE *)__src <= (unint64_t)((v54 >> 1) + 1))
              v56 = v55 + 1;
            else
              v56 = v80 - (_BYTE *)__src;
            if ((unint64_t)(v80 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFFELL)
              v57 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v57 = v56;
            v77 = v81;
            if (v57)
            {
              v58 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v81, v57);
              v53 = (void **)__src;
              v19 = v79;
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[2 * v55];
            *(_WORD *)v59 = 0;
            if (v19 == (char *)v53)
            {
              v61 = &v58[2 * v55];
            }
            else
            {
              v60 = (void **)v19;
              v61 = &v58[2 * v55];
              do
              {
                v62 = *((_WORD *)v60 - 1);
                v60 = (void **)((char *)v60 - 2);
                *((_WORD *)v61 - 1) = v62;
                v61 -= 2;
              }
              while (v60 != v53);
            }
            v52 = v59 + 2;
            __src = v61;
            v79 = v59 + 2;
            v63 = v80;
            v80 = &v58[2 * v57];
            v75 = v19;
            v76 = v63;
            p_src = v53;
            v74 = v53;
            std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&p_src);
            v19 = v52;
          }
          else
          {
            *(_WORD *)v19 = 0;
            v19 += 2;
            v52 = v19;
          }
          v79 = v52;
        }
      }
      if (v19 != __src)
        memmove(&a3[i], __src, v19 - (_BYTE *)__src);
    }
LABEL_92:
    p_src = &__src;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&p_src);
    if (a4 < 1 || (v71 & 1) != 0)
    {
      v18 = a4;
      goto LABEL_119;
    }
    v18 = a4;
LABEL_95:
    v64 = a4;
    while (1)
    {
      a4 = v64 - 1;
      if (v64 != 1 && (a2[a4] & 0xFC00) == 0xDC00)
      {
        v65 = v64 - 2;
        if ((a2[v65] & 0xFC00) == 0xD800)
          a4 = v65;
      }
      if (a3[a4])
      {
LABEL_116:
        if (a4 < 1)
          goto LABEL_119;
        goto LABEL_95;
      }
      v66 = a2[a4];
      if ((v66 & 0xF800) == 0xD800)
      {
        if ((v66 & 0x400) != 0)
        {
          if (a4)
          {
            v68 = a2[a4 - 1];
            v17 = (v68 & 0xFC00) == 55296;
            v69 = v66 - 56613888 + (v68 << 10);
            if (v17)
              v66 = v69;
          }
        }
        else if (a4 + 1 != v18)
        {
          v67 = a2[a4 + 1];
          if ((v67 & 0xFC00) == 0xDC00)
          {
            v66 = (v66 << 10) - 56613888 + v67;
LABEL_112:
            if (v66 - 917760 > 0xEF)
            {
LABEL_115:
              --v18;
              goto LABEL_116;
            }
            goto LABEL_113;
          }
        }
      }
      if (v66 >> 9 <= 0x7E)
        goto LABEL_115;
      if (v66 >> 4 >= 0xFE1)
        goto LABEL_112;
LABEL_113:
      v64 = a4;
      if (a4 <= 0)
        goto LABEL_119;
    }
  }
  if (a4 >= 1)
    bzero(a3, 2 * a4);
  v18 = 0;
LABEL_119:

  return v18;
}

uint64_t TBaseFont::IsMicrosoftKorean(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x80) == 0)
    TBaseFont::DetermineFontFlags(this, 128);
  return (*((_DWORD *)this + 45) >> 7) & 1;
}

unint64_t TBaseFont::GetSynthesizedGlyphs(TBaseFont *this)
{
  unint64_t *v1;
  unint64_t v2;
  char *v5;
  const __int16 *v6;
  int v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t ***v13;
  uint64_t **i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int16 v29;
  _BYTE v30[6];
  TBaseFont *v31;

  v1 = (unint64_t *)((char *)this + 216);
  v2 = atomic_load((unint64_t *)this + 27);
  if (v2)
    return v2;
  v5 = (char *)operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
  v2 = (unint64_t)v5;
  if (!v5)
    return v2;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v28 = v5 + 16;
  *((_DWORD *)v5 + 8) = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)v5, 0xCuLL);
  v31 = this;
  v6 = L"\t ";
  do
  {
    *(_DWORD *)v30 = *(_DWORD *)v6;
    *(_WORD *)&v30[4] = v6[2];
    v29 = 0;
    TcmapTable::Map(&v31, (const unsigned __int16 *)v30, &v29, 1, 1);
    if (!v29)
    {
      v7 = FirstMappedOf(&v31, (const unsigned __int16 (*)[2])&v30[2]);
      if (v7)
      {
        v8 = v7;
        v9 = *(unsigned __int16 *)v30;
        v10 = *(_QWORD *)(v2 + 8);
        if (v10)
        {
          v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            v12 = *(unsigned __int16 *)v30;
            if (v10 <= *(unsigned __int16 *)v30)
              v12 = *(unsigned __int16 *)v30 % v10;
          }
          else
          {
            v12 = (v10 - 1) & (unint64_t)*(unsigned __int16 *)v30;
          }
          v13 = *(uint64_t ****)(*(_QWORD *)v2 + 8 * v12);
          if (v13)
          {
            for (i = *v13; i; i = (uint64_t **)*i)
            {
              v15 = (unint64_t)i[1];
              if (v15 == *(unsigned __int16 *)v30)
              {
                if (*((unsigned __int16 *)i + 8) == *(unsigned __int16 *)v30)
                  goto LABEL_46;
              }
              else
              {
                if (v11.u32[0] > 1uLL)
                {
                  if (v15 >= v10)
                    v15 %= v10;
                }
                else
                {
                  v15 &= v10 - 1;
                }
                if (v15 != v12)
                  break;
              }
            }
          }
        }
        else
        {
          v12 = 0xAAAAAAAAAAAAAAAALL;
        }
        v16 = operator new(0x18uLL);
        *v16 = 0;
        v16[1] = v9;
        *((_WORD *)v16 + 8) = v9;
        *((_WORD *)v16 + 9) = v8;
        v17 = (float)(unint64_t)(*(_QWORD *)(v2 + 24) + 1);
        v18 = *(float *)(v2 + 32);
        if (!v10 || (float)(v18 * (float)v10) < v17)
        {
          v19 = (v10 & (v10 - 1)) != 0;
          if (v10 < 3)
            v19 = 1;
          v20 = v19 | (2 * v10);
          v21 = vcvtps_u32_f32(v17 / v18);
          if (v20 <= v21)
            v22 = v21;
          else
            v22 = v20;
          std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v2, v22);
          v10 = *(_QWORD *)(v2 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v10 <= v9)
              v12 = v9 % v10;
            else
              v12 = v9;
          }
          else
          {
            v12 = ((_DWORD)v10 - 1) & v9;
          }
        }
        v23 = *(_QWORD *)v2;
        v24 = *(_QWORD **)(*(_QWORD *)v2 + 8 * v12);
        if (v24)
        {
          *v16 = *v24;
        }
        else
        {
          *v16 = *v28;
          *v28 = v16;
          *(_QWORD *)(v23 + 8 * v12) = v28;
          if (!*v16)
          {
LABEL_45:
            ++*(_QWORD *)(v2 + 24);
            goto LABEL_46;
          }
          v25 = *(_QWORD *)(*v16 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v25 >= v10)
              v25 %= v10;
          }
          else
          {
            v25 &= v10 - 1;
          }
          v24 = (_QWORD *)(*(_QWORD *)v2 + 8 * v25);
        }
        *v24 = v16;
        goto LABEL_45;
      }
    }
LABEL_46:
    v6 += 3;
  }
  while (v6 != (const __int16 *)&unk_18494F794);
  while (1)
  {
    v26 = __ldaxr(v1);
    if (v26)
      break;
    if (!__stlxr(v2, v1))
      return v2;
  }
  __clrex();
  v27 = std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table(v2);
  MEMORY[0x186DC03AC](v27, 0x10A0C408EF24B1CLL);
  return v26;
}

uint64_t TComponentFont::GetGlyphsForCharacters(const __CFString **this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t GlyphsForCharactersWithCMap;
  const __CFData *v10;
  _anonymous_namespace_::TcmapOverrideContext *BytePtr;
  uint64_t v12;
  uint64_t v13;
  UTF32Char v14;
  int v16;
  BOOL v17;
  UTF32Char v18;
  const __CFCharacterSet *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned __int16 *v27;
  int MappedGlyph;
  id v30;
  __CFString *v31;
  const __CFString **v32;

  v30 = (id)0xAAAAAAAAAAAAAAAALL;
  v31 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
  TComponentFont::GetCharacterOverride((TComponentFont *)&v30, this, &v31);
  if (!atomic_load((unint64_t *)&v30))
    goto LABEL_4;
  if (v31 == CFSTR("cmapOverride"))
  {
    do
      v10 = (const __CFData *)__ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));
    if (v10)
      BytePtr = (_anonymous_namespace_::TcmapOverrideContext *)CFDataGetBytePtr(v10);
    else
      BytePtr = 0;
    if (a4 < 1)
    {
      GlyphsForCharactersWithCMap = a4;
LABEL_43:

      goto LABEL_44;
    }
    v21 = 0;
    GlyphsForCharactersWithCMap = a4;
    while (1)
    {
      v22 = v21 + 1;
      v23 = a2[v21];
      v24 = (v23 & 0xFC00) != 0xD800 || v22 == a4;
      if (v24 || (v25 = a2[v22], (v25 & 0xFC00) != 0xDC00))
      {
        *a3 = MappedGlyph;
        v27 = a3 + 1;
        if (!MappedGlyph)
LABEL_39:
          --GlyphsForCharactersWithCMap;
      }
      else
      {
        v22 = v21 + 2;
        *a3 = v26;
        v27 = a3 + 2;
        a3[1] = 0;
        if (!v26)
          goto LABEL_39;
      }
      v21 = v22;
      a3 = v27;
      if (v22 >= a4)
        goto LABEL_43;
    }
  }
  if (v31 != CFSTR("UnicodeCharSet"))
  {
LABEL_4:
    v32 = this;
    GlyphsForCharactersWithCMap = TBaseFont::GetGlyphsForCharactersWithCMap((TBaseFont *)this, (TBaseFont **)&v32, a2, a3, a4);
    goto LABEL_44;
  }
  v32 = this;
  GlyphsForCharactersWithCMap = TBaseFont::GetGlyphsForCharactersWithCMap((TBaseFont *)this, (TBaseFont **)&v32, a2, a3, a4);
  if (a4 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = v12++;
      v14 = a2[v13];
      if ((v14 & 0xFC00) == 0xD800 && v12 != a4)
      {
        v16 = a2[v12];
        v17 = (v16 & 0xFC00) == 56320;
        v18 = (v14 << 10) - 56613888 + v16;
        v12 = v17 ? v13 + 2 : v13 + 1;
        if (v17)
          v14 = v18;
      }
      if (a3[v13])
      {
        v19 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v30);
        if (CFCharacterSetIsLongCharacterMember(v19, v14))
          v20 = 1;
        else
          v20 = v12 <= v13;
        if (!v20)
        {
          bzero(&a3[v13], 2 * (v12 - v13));
          GlyphsForCharactersWithCMap = GlyphsForCharactersWithCMap + v13 - v12;
        }
      }
    }
    while (v12 < a4);
  }
LABEL_44:

  return GlyphsForCharactersWithCMap;
}

void CTFontGetLatin1GlyphsAndAdvanceWidths(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t *v5;
  unint64_t v6;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v5 = *(unint64_t **)(a1 + 40);
        v6 = atomic_load(v5 + 48);
        if (v6 || (TFont::InitASCIIDataCache((TFont *)v5), v6))
        {
          *a2 = v6 + 8;
          *a3 = v6 + 392;
        }
      }
    }
  }
}

void TFont::InitASCIIDataCache(TFont *this)
{
  TASCIIDataCache *v2;
  TASCIIDataCache *v3;
  unint64_t *v4;

  v2 = (TASCIIDataCache *)operator new();
  TASCIIDataCache::TASCIIDataCache(v2, this);
  v4 = (unint64_t *)((char *)this + 384);
  while (!__ldaxr(v4))
  {
    if (!__stlxr((unint64_t)v3, v4))
      return;
  }
  __clrex();
  TASCIIDataCache::~TASCIIDataCache(v3);
  MEMORY[0x186DC03AC]();
}

void TASCIIDataCache::TASCIIDataCache(TASCIIDataCache *this, const TFont *a2)
{
  char *v4;

  *(_QWORD *)this = a2;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 1928) = 0u;
  (*(void (**)(_QWORD, uint64_t, uint64_t, char *))(**((_QWORD **)a2 + 50) + 672))(*((_QWORD *)a2 + 50), 32, 96, (char *)this + 8);
  (*(void (**)(_QWORD, uint64_t, uint64_t, char *))(**((_QWORD **)a2 + 50) + 672))(*((_QWORD *)a2 + 50), 160, 96, (char *)this + 200);
  TFont::GetUnsummedAdvancesForGlyphs((uint64_t)a2, (uint64_t)v4, (double *)this + 49, 1, 192, 0, 0);
  *((_WORD *)this + 113) = -1;
  *((_QWORD *)this + 158) = 0;
}

void TComponentFont::GetGlyphsForCharacterRange(const __CFString **this, CFRange a2, unsigned __int16 *a3)
{
  uint64_t length;
  CFIndex location;
  __CFString *v7;
  const __CFCharacterSet *v9;
  const __CFData *v10;
  _anonymous_namespace_::TcmapOverrideContext *BytePtr;
  id v12;
  __CFString *v13;
  CFRange v14;

  length = a2.length;
  location = a2.location;
  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  v13 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
  TComponentFont::GetCharacterOverride((TComponentFont *)&v12, this, &v13);
  v7 = v13;
  if (v13 == CFSTR("cmapOverride"))
  {
    do
      v10 = (const __CFData *)__ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    if (v10)
      BytePtr = (_anonymous_namespace_::TcmapOverrideContext *)CFDataGetBytePtr(v10);
    else
      BytePtr = 0;
    if (length >= 1)
    {
      do
      {
        LODWORD(location) = location + 1;
        --length;
      }
      while (length);
    }

  }
  else
  {
    v14.location = location;
    v14.length = length;
    TBaseFont::GetGlyphsForCharacterRange((TBaseFont *)this, v14, a3);
    if (v7 == CFSTR("UnicodeCharSet") && length >= 1)
    {
      do
      {
        if (*a3)
        {
          v9 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v12);
          if (!CFCharacterSetIsLongCharacterMember(v9, location))
            *a3 = 0;
        }
        LODWORD(location) = location + 1;
        ++a3;
        --length;
      }
      while (length);
    }
  }

}

void TComponentFont::GetCharacterOverride(TComponentFont *this, const __CFString **a2, _QWORD *a3)
{
  int v5;
  void *ComponentAttribute;
  unint64_t v9;
  void *v10;
  unint64_t v12;
  id v13;
  id v14;
  id v15;

  v5 = *((_DWORD *)a2 + 178);
  if ((v5 & 0x700) == 0)
    goto LABEL_16;
  if ((v5 & 0x100) != 0)
  {
    ComponentAttribute = (void *)TComponentFont::GetComponentAttribute((TComponentFont *)a2, CFSTR("cmapOverride"));
    if (ComponentAttribute)
    {
      *a3 = CFSTR("cmapOverride");
      *(_QWORD *)this = ComponentAttribute;
      return;
    }
  }
  ((void (*)(id *__return_ptr, const __CFString **))(*a2)[5].length)(&v15, a2);

  if ((v5 & 0x600) == 0)
    goto LABEL_16;
  v14 = (id)TComponentFont::GetComponentAttribute((TComponentFont *)a2, CFSTR("UnicodeCharSet"));
  if (!atomic_load((unint64_t *)&v14))
  {
    TBaseFont::CopyAttributeInternal((TBaseFont *)a2, CFSTR("NSCTFontCharacterSetAttribute"), &v13);
    do
      v9 = __ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    do
      v10 = (void *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(v9, (unint64_t *)&v14));

  }
  if (!atomic_load((unint64_t *)&v14))
  {

LABEL_16:
    *a3 = 0;
    *(_QWORD *)this = 0;
    return;
  }
  *a3 = CFSTR("UnicodeCharSet");
  do
    v12 = __ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));
  *(_QWORD *)this = v12;

}

uint64_t TBaseFont::GetGlyphsForCharacterRange(TBaseFont *this, CFRange a2, unsigned __int16 *a3)
{
  CFIndex length;
  CFIndex location;
  TBaseFont *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void **v18;
  char *v19;
  __int16 v20;
  char *v21;
  char *v22;
  CFIndex v23;
  _BOOL4 v24;
  const unsigned __int16 *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  __int16 v29;
  unint64_t v30;
  char *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void **v39;
  char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void **v52;
  char *v53;
  __int16 v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  char *v58;
  unsigned __int16 *v59;
  void **v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unint64_t v63;
  unsigned __int16 v64;
  void **v65;
  unsigned __int16 *v66;
  uint64_t i;
  CFIndex v68;
  BOOL v69;
  uint64_t result;
  unsigned __int16 v71;
  unsigned __int16 *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  CFIndex v76;
  TBaseFont *v77;
  TBaseFont *v78;
  char ***v79;
  char **v80;
  void *v81;
  char *v82;
  _OWORD v83[4];
  _OWORD *v84;
  char *v85;
  char *v86;
  char *v87;
  _OWORD v88[4];
  _OWORD *v89;
  uint64_t v90;

  length = a2.length;
  location = a2.location;
  v6 = this;
  v90 = *MEMORY[0x1E0C80C00];
  v78 = this;
  if (!TcmapTable::MapRange(&v78, a2, a3))
  {
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v88[3] = v8;
    v88[2] = v8;
    v88[1] = v8;
    v88[0] = v8;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v89 = v88;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(&v85, 2 * length);
    v7 = location + length;
    v76 = length;
    v77 = v6;
    if (location >= 0x10000 || length < 1)
    {
      v23 = location;
      if (length > 0)
      {
LABEL_27:
        v25 = (const unsigned __int16 *)v85;
        v26 = v86;
        v27 = (v86 - v85) >> 1;
        v75 = v85;
        if (v23 >= v7)
        {
          v56 = (v86 - v85) >> 1;
          v28 = v86;
        }
        else
        {
          v73 = v86;
          v74 = (v86 - v85) >> 1;
          v28 = v86;
          do
          {
            v29 = ((unint64_t)v23 >> 10) - 10304;
            v30 = (unint64_t)v87;
            if (v28 >= v87)
            {
              v32 = (void **)v85;
              v33 = v28 - v85;
              if (v28 - v85 <= -3)
                goto LABEL_106;
              v34 = v33 >> 1;
              if (v87 - v85 <= (unint64_t)((v33 >> 1) + 1))
                v35 = v34 + 1;
              else
                v35 = v87 - v85;
              if ((unint64_t)(v87 - v85) >= 0x7FFFFFFFFFFFFFFELL)
                v36 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              *((_QWORD *)&v83[0] + 1) = v88;
              if (v36)
              {
                v37 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v88, v36);
                v32 = (void **)v85;
                v28 = v86;
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[2 * v34];
              *(_WORD *)v38 = v29;
              if (v28 == (char *)v32)
              {
                v40 = &v37[2 * v34];
              }
              else
              {
                v39 = (void **)v28;
                v40 = &v37[2 * v34];
                do
                {
                  v41 = *((_WORD *)v39 - 1);
                  v39 = (void **)((char *)v39 - 2);
                  *((_WORD *)v40 - 1) = v41;
                  v40 -= 2;
                }
                while (v39 != v32);
              }
              v31 = v38 + 2;
              v85 = v40;
              v86 = v38 + 2;
              v42 = v87;
              v87 = &v37[2 * v36];
              v82 = v28;
              *(_QWORD *)&v83[0] = v42;
              v80 = (char **)v32;
              v81 = v32;
              std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v80);
              v30 = (unint64_t)v87;
            }
            else
            {
              *(_WORD *)v28 = v29;
              v31 = v28 + 2;
            }
            v86 = v31;
            v43 = v23 & 0x3FF | 0xDC00;
            if ((unint64_t)v31 >= v30)
            {
              v44 = (void **)v85;
              v45 = v31 - v85;
              if (v31 - v85 <= -3)
                goto LABEL_106;
              v46 = v45 >> 1;
              v47 = v30 - (_QWORD)v85;
              if (v47 <= (v45 >> 1) + 1)
                v48 = v46 + 1;
              else
                v48 = v47;
              if (v47 >= 0x7FFFFFFFFFFFFFFELL)
                v49 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v49 = v48;
              *((_QWORD *)&v83[0] + 1) = v88;
              if (v49)
              {
                v50 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v88, v49);
                v44 = (void **)v85;
                v31 = v86;
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[2 * v46];
              *(_WORD *)v51 = v43;
              if (v31 == (char *)v44)
              {
                v53 = &v50[2 * v46];
              }
              else
              {
                v52 = (void **)v31;
                v53 = &v50[2 * v46];
                do
                {
                  v54 = *((_WORD *)v52 - 1);
                  v52 = (void **)((char *)v52 - 2);
                  *((_WORD *)v53 - 1) = v54;
                  v53 -= 2;
                }
                while (v52 != v44);
              }
              v28 = v51 + 2;
              v85 = v53;
              v86 = v51 + 2;
              v55 = v87;
              v87 = &v50[2 * v49];
              v82 = v31;
              *(_QWORD *)&v83[0] = v55;
              v80 = (char **)v44;
              v81 = v44;
              std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v80);
            }
            else
            {
              *(_WORD *)v31 = v43;
              v28 = v31 + 2;
            }
            v86 = v28;
            ++v23;
          }
          while (v23 != v7);
          v25 = (const unsigned __int16 *)v85;
          v56 = (v28 - v85) >> 1;
          v26 = v73;
          v27 = v74;
        }
        *(_QWORD *)&v57 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v83[3] = v57;
        v83[2] = v57;
        v83[1] = v57;
        v83[0] = v57;
        v81 = 0;
        v82 = 0;
        v80 = 0;
        v84 = v83;
        if (v28 == (char *)v25)
        {
          v59 = 0;
        }
        else
        {
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v80, v56);
          v58 = (char *)v81;
          bzero(v81, 2 * v56);
          v81 = &v58[2 * v56];
          v25 = (const unsigned __int16 *)v85;
          v59 = (unsigned __int16 *)v80;
        }
        length = v76;
        v6 = v77;
        TcmapTable::Map(&v78, v25, v59, v56, 1);
        if (v26 == v75)
        {
          v61 = 0;
        }
        else
        {
          v60 = (void **)v80;
          if (v27 <= 1)
            v61 = 1;
          else
            v61 = v27;
          v62 = a3;
          v63 = v61;
          do
          {
            v64 = *(_WORD *)v60;
            v60 = (void **)((char *)v60 + 2);
            *v62++ = v64;
            --v63;
          }
          while (v63);
        }
        if (v61 < v56)
        {
          v65 = (void **)v80;
          v66 = &a3[v61];
          do
          {
            *v66++ = *((_WORD *)v65 + v61);
            v61 += 2;
          }
          while (v61 < v56);
        }
        v79 = &v80;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v79);
        goto LABEL_85;
      }
    }
    else
    {
      v9 = v86;
      v10 = location;
      do
      {
        if (v9 >= v87)
        {
          v11 = (void **)v85;
          v12 = v9 - v85;
          if (v9 - v85 <= -3)
LABEL_106:
            abort();
          v13 = v12 >> 1;
          if (v87 - v85 <= (unint64_t)((v12 >> 1) + 1))
            v14 = v13 + 1;
          else
            v14 = v87 - v85;
          if ((unint64_t)(v87 - v85) >= 0x7FFFFFFFFFFFFFFELL)
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          *((_QWORD *)&v83[0] + 1) = v88;
          if (v15)
          {
            v16 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v88, v15);
            v11 = (void **)v85;
            v9 = v86;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[2 * v13];
          *(_WORD *)v17 = v10;
          if (v9 == (char *)v11)
          {
            v19 = &v16[2 * v13];
          }
          else
          {
            v18 = (void **)v9;
            v19 = &v16[2 * v13];
            do
            {
              v20 = *((_WORD *)v18 - 1);
              v18 = (void **)((char *)v18 - 2);
              *((_WORD *)v19 - 1) = v20;
              v19 -= 2;
            }
            while (v18 != v11);
          }
          v21 = v17 + 2;
          v85 = v19;
          v86 = v17 + 2;
          v22 = v87;
          v87 = &v16[2 * v15];
          v82 = v9;
          *(_QWORD *)&v83[0] = v22;
          v80 = (char **)v11;
          v81 = v11;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v80);
          v9 = v21;
        }
        else
        {
          *(_WORD *)v9 = v10;
          v9 += 2;
        }
        v86 = v9;
        v23 = v10 + 1;
        v24 = v10 + 1 < v7;
        if (v10 > 65534)
          break;
        ++v10;
      }
      while (v23 < v7);
      if (v24)
        goto LABEL_27;
    }
    TcmapTable::Map(&v78, (const unsigned __int16 *)v85, a3, (v86 - v85) >> 1, 1);
    v6 = v77;
LABEL_85:
    v80 = &v85;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v80);
    goto LABEL_86;
  }
  v7 = location + length;
LABEL_86:
  for (i = 0; i != 36; i += 3)
  {
    WORD2(v85) = kSynthesizedCharacters[i + 2];
    LODWORD(v85) = *(_DWORD *)&kSynthesizedCharacters[i];
    v68 = (unsigned __int16)v85 - location;
    v69 = (unsigned __int16)v85 < location || v7 <= (unsigned __int16)v85;
    if (!v69 && !a3[v68])
      a3[v68] = FirstMappedOf(&v78, (const unsigned __int16 (*)[2])((char *)&v85 + 2));
  }
  result = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v6 + 728))(v6);
  if ((result & 1) != 0)
  {
    if (location <= 9)
    {
      if (v7 <= 9)
        return result;
      goto LABEL_104;
    }
    if (location == 10)
    {
      if (length > 0 || v7 > 13)
      {
LABEL_104:
        result = TBaseFont::GetCachedSpaceAndJoinerGlyphs(v6, &v78);
        v71 = *(_WORD *)result;
        v72 = &a3[-location];
        v72[9] = *(_WORD *)result;
        v72[10] = v71;
        v72[13] = v71;
      }
    }
    else if ((unint64_t)location <= 0xD && v7 >= 14)
    {
      goto LABEL_104;
    }
  }
  return result;
}

uint64_t TTenuousComponentFont::IsMicrosoftKorean(TTenuousComponentFont *this)
{
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 848))(this) & 1) != 0)
    return 0;
  if ((*((_DWORD *)this + 46) & 0x80) == 0)
    TBaseFont::DetermineFontFlags(this, 128);
  return (*((_DWORD *)this + 45) >> 7) & 1;
}

uint64_t TcmapTable::MapRange(TBaseFont **this, CFRange a2, unsigned __int16 *a3)
{
  if (TBaseFont::GetInitializedGraphicsFont(*this) && CGFontGetParserFont())
    return FPFontGetGlyphsForCharacterRange();
  else
    return 0;
}

uint64_t FirstMappedOf(TBaseFont **this, const unsigned __int16 (*a2)[2])
{
  char v4;
  uint64_t i;
  char v6;
  uint64_t result;
  unsigned __int16 v8;
  unsigned __int16 v9;

  v4 = 0;
  for (i = 0; ; i = 1)
  {
    v6 = v4;
    v9 = (*a2)[i];
    if (v9)
    {
      v8 = 0;
      TcmapTable::Map(this, &v9, &v8, 1, 1);
      result = v8;
      if (v8)
        break;
    }
    v4 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  return result;
}

uint64_t TSplicedFont::GetGlyphsForCharacterRange(TSplicedFont *this, CFRange a2, unsigned __int16 *a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  unint64_t v7;

  length = a2.length;
  location = a2.location;
  v6 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v6 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v7 = atomic_load((unint64_t *)(v6 + 32));
  return (*(uint64_t (**)(unint64_t, CFIndex, CFIndex, unsigned __int16 *))(*(_QWORD *)v7 + 672))(v7, location, length, a3);
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
  TFont *v9;
  __int128 v10;
  CGAffineTransform v11;
  _BYTE v12[80];
  CGAffineTransform v13;
  CGAffineTransform v14;

  if (font && glyphs && positions && count)
  {
    if (context)
    {
      v9 = (TFont *)*((_QWORD *)font + 5);
      TFont::SetInContext(v9, context);
      *(_QWORD *)&v10 = -1;
      *((_QWORD *)&v10 + 1) = -1;
      *(_OWORD *)&v13.c = v10;
      *(_OWORD *)&v13.tx = v10;
      *(_OWORD *)&v13.a = v10;
      TFont::GetEffectiveMatrix(v9, (uint64_t)&v13);
      memset(v12, 255, 48);
      memset(&v12[48], 170, 24);
      v11 = v13;
      v14 = v13;
      CGAffineTransformInvert((CGAffineTransform *)v12, &v14);
      *(_QWORD *)&v12[48] = 0;
      v12[56] = 0;
      *(_DWORD *)&v12[60] = 13;
      *(_QWORD *)&v12[64] = 0;
      DrawGlyphsAtPositions((TBaseFont **)v9, glyphs, positions, count, context, (uint64_t)&v11);
    }
  }
}

CFDataRef CTFontCopyTable(CTFontRef font, CTFontTableTag table, CTFontTableOptions options)
{
  const __CFData *v3;
  id v5;

  v3 = 0;
  if (font && table)
  {
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 480))(&v5);
    do
      v3 = (const __CFData *)__ldaxr((unint64_t *)&v5);
    while (__stlxr(0, (unint64_t *)&v5));

  }
  return v3;
}

void TJustEngine::CreateJustifiedLine(const TCharStream **this@<X0>, const TLine *a2@<X1>, double a3@<D0>, double a4@<D1>, unint64_t *a5@<X8>)
{
  double HangingWidth;
  id v10;
  void *v11;
  double v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v19;
  double v20;
  void *Table;
  double v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  CFIndex v26;
  const TLine *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  const TCharStream *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  char v43;
  char v44;
  CFIndex v45;
  CFRange v46;
  CFIndex v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  TStorageRange *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  CFIndex v61;
  uint64_t v62;
  const TCharStream *v63;
  TJustEngine *UnanchoredGlyphRange;
  char v65;
  CFRange v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  id v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  _OWORD v75[30];
  _OWORD *v76;
  void **v77;
  void **v78;
  uint64_t v79;
  _BYTE v80[720];
  _BYTE *v81;
  id v82;
  void *v83;
  double v84;
  _BYTE v85[720];
  _BYTE *v86;
  uint64_t v87[3];
  _OWORD v88[15];
  _OWORD *v89;
  uint64_t v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;

  v65 = (char)a2;
  v90 = *MEMORY[0x1E0C80C00];
  v63 = *this;
  HangingWidth = TLine::GetHangingWidth((TLine *)this);
  TLine::GetVisibleGlyphRangeAndWidth((TLine *)this, (uint64_t)&v82);
  v10 = v82;
  v11 = v83;
  v12 = v84;
  if ((uint64_t)v83 < 1)
  {
    UnanchoredGlyphRange = 0;
    v66.location = 0;
  }
  else
  {
    v91.location = (CFIndex)v82;
    v91.length = (CFIndex)v83;
    UnanchoredGlyphRange = (TJustEngine *)TLine::GetUnanchoredGlyphRange((TLine *)this, v91);
    v66.location = v13;
  }
  v71 = (id)0xAAAAAAAAAAAAAAAALL;
  v14 = TCFBase<TLine>::Allocate();
  if (v14)
  {
    v15 = v14;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_OWORD *)(v14 + 48) = 0u;
    v16 = v14 + 48;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = v16;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 112) = v15 + 88;
    *(_QWORD *)(v15 + 184) = 0;
    *(_BYTE *)(v15 + 232) = 0;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    *(_QWORD *)(v15 + 208) = 0;
    *(_QWORD *)(v15 + 216) = 0;
    *(_BYTE *)(v15 + 224) = 0;
    *(_QWORD *)(v15 + 240) = 0;
    *(_QWORD *)(v15 + 248) = 0;
    *(_QWORD *)(v15 + 256) = 0;
    TLine::operator=(v16, (uint64_t)this);
    v82 = (id)v15;
    do
      v17 = (void *)__ldaxr((unint64_t *)&v82);
    while (__stlxr(0, (unint64_t *)&v82));
    v71 = v17;

  }
  else
  {
    v71 = 0;
  }
  if (!atomic_load((unint64_t *)&v71))
  {
    *a5 = 0;
    goto LABEL_59;
  }
  v19 = HangingWidth + a4;
  v20 = (HangingWidth + a4 - v12) * a3;
  Table = GetTable();
  v22 = 0.0002;
  if (Table)
  {
    v23 = (double *)*((_QWORD *)Table + 8);
    if (v23)
      v22 = *v23;
  }
  if (v20 >= 0.0 && v20 < v22)
  {
    do
      v24 = __ldaxr((unint64_t *)&v71);
    while (__stlxr(0, (unint64_t *)&v71));
LABEL_52:
    *a5 = v24;
    goto LABEL_59;
  }
  if (v66.location <= 0)
  {
    do
      v24 = __ldaxr((unint64_t *)&v71);
    while (__stlxr(0, (unint64_t *)&v71));
    goto LABEL_52;
  }
  v62 = (uint64_t)v10;
  v25 = atomic_load((unint64_t *)&v71);
  v26 = *(_QWORD *)(v25 + 40);
  TLine::DetachRuns((TLine *)v26);
  if ((*(_WORD *)(v26 + 154) & 2) != 0)
  {
    v28 = *(_QWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 24) - v28;
    if (v29 >= 1)
    {
      v30 = (unint64_t)v29 >> 3;
      if (v30 <= 1)
        v30 = 1;
      do
      {
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 48) + 312);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 56);
          if (v32 != *(_QWORD *)(v31 + 64))
            *(_QWORD *)(v31 + 64) = v32;
        }
        v28 += 8;
        --v30;
      }
      while (v30);
    }
  }
  v61 = (CFIndex)v11;
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v88[14] = v33;
  v88[13] = v33;
  v88[12] = v33;
  v88[11] = v33;
  v88[10] = v33;
  v88[9] = v33;
  v88[8] = v33;
  v88[7] = v33;
  v88[6] = v33;
  v88[5] = v33;
  v88[4] = v33;
  v88[3] = v33;
  v88[2] = v33;
  v88[1] = v33;
  v88[0] = v33;
  memset(v87, 0, sizeof(v87));
  v89 = v88;
  v69 = 0.0;
  v70 = 0;
  v34 = v63;
  do
  {
    v35 = *(_QWORD *)(v26 + 16);
    v36 = *(_QWORD *)(v26 + 24);
    v92.location = v66.location;
    v92.length = v26;
    v37 = TJustEngine::ReconciledRangeForLines((uint64_t)UnanchoredGlyphRange, v92, (const TLine *)this, v27);
    v39 = v38;
    memset(v85, 170, sizeof(v85));
    v82 = 0;
    v83 = 0;
    v84 = 0.0;
    v86 = v85;
    v40 = v37 + v39;
    if (v37 + v39)
    {
      std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__vallocate[abi:nn180100]((char **)&v82, v37 + v39);
      v41 = (char *)v83;
      bzero(v83, 24 * ((24 * v40 - 24) / 0x18uLL) + 24);
      v34 = v63;
      v83 = &v41[24 * v40];
    }
    memset(v80, 170, sizeof(v80));
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v81 = v80;
    TJustEngine::GenerateMaximaList((TLine *)v26, v34, v37, v39, 0, v65, (uint64_t *)&v82, (uint64_t *)&v77, v20);
    std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)v87, v37 + v39);
    TJustEngine::DistributeGap(v35, v36, v37, v39, 0, v65, (uint64_t)v82, v87[0], v20, &v69);
    if (v77 != v78)
    {
      v68 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v42 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v75[28] = v42;
      v75[29] = v42;
      v75[26] = v42;
      v75[27] = v42;
      v75[24] = v42;
      v75[25] = v42;
      v75[22] = v42;
      v75[23] = v42;
      v75[20] = v42;
      v75[21] = v42;
      v75[18] = v42;
      v75[19] = v42;
      v75[16] = v42;
      v75[17] = v42;
      v75[14] = v42;
      v75[15] = v42;
      v75[12] = v42;
      v75[13] = v42;
      v75[10] = v42;
      v75[11] = v42;
      v75[8] = v42;
      v75[9] = v42;
      v75[6] = v42;
      v75[7] = v42;
      v75[4] = v42;
      v75[5] = v42;
      v75[2] = v42;
      v75[3] = v42;
      v75[0] = v42;
      v75[1] = v42;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v76 = v75;
      v43 = TPostcompEngine::DoActions(v35, v36, v37, v39, (uint64_t)&v77, v87[0], (unint64_t *)&v68, (char **)&v72);
      if (v68 >= 1)
        *(_QWORD *)(v26 + 144) += v68;
      if ((v43 & 1) != 0)
      {
        TLine::ResetLine((TLine *)v26, v34);
        TLine::GetVisibleGlyphRangeAndWidth((TLine *)v26, (uint64_t)&v66.length);
        v20 = (v19 - v67) * a3;
        v69 = 0.0;
        v70 = 0;
        v66.length = (CFIndex)&v72;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v66.length);
        v44 = 1;
        goto LABEL_39;
      }
      if (v72 != v73)
      {
        v45 = TAATPostcompEngine::ApplyKashidas(v35, v36, &v72, v87[0]);
        v68 = v45;
        if (v45 >= 1)
        {
          *(_QWORD *)(v26 + 144) += v45;
          ApplyArabicLowConnections<std::__wrap_iter<CTRun **>>(v35, v36);
        }
      }
      v66.length = (CFIndex)&v72;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v66.length);
    }
    v44 = 0;
LABEL_39:
    v72 = (uint64_t *)&v77;
    std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    v77 = &v82;
    std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__destroy_vector::operator()[abi:nn180100](&v77);
  }
  while ((v44 & 1) != 0);
  v93.location = v61;
  v93.length = v26;
  v47 = TJustEngine::ReconciledRangeForLines(v62, v93, (const TLine *)this, v27);
  v49 = v48;
  if (v47 >= 1)
  {
    v46.location = v47;
    TJustEngine::ZeroRange(v26, 0, v46);
  }
  v46.location = *(_QWORD *)(v26 + 144) - (v47 + v49);
  if (v46.location >= 1)
    TJustEngine::ZeroRange(v26, (TLine *)(v47 + v49), v46);
  TLine::SyncWithRuns((TLine *)v26);
  if ((v65 & 2) != 0 || v20 >= 0.0)
  {
    do
LABEL_57:
      v58 = __ldaxr((unint64_t *)&v71);
    while (__stlxr(0, (unint64_t *)&v71));
  }
  else
  {
    if (v19 >= v12 + v69 - v22)
    {
      if (*(double *)(v26 + 104) - v19 > 0.0)
      {
        v50 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v26 + 24) - 8) + 48);
        v51 = v50[26];
        v52 = v51 - 1;
        if (v51 >= 1)
        {
          v53 = (TStorageRange *)(v50 + 24);
          v54 = v50[27];
          v55 = *(_QWORD *)(v54 + 32);
          if (v55 || (v59 = *(_QWORD *)(v54 + 24)) == 0)
          {
            v56 = v55 + 16 * v50[25] + 16 * v52;
            v57 = *(_QWORD *)(v56 + 8);
          }
          else
          {
            v56 = v59 + 8 * v50[25] + 8 * v52;
            v57 = 0;
          }
          v60 = *(double *)v56 - v22;
          TStorageRange::SetAdvance(v53, v52, *(CGSize *)(&v57 - 1));
          TLine::SyncWithRuns((TLine *)v26);
        }
      }
      goto LABEL_57;
    }
    v58 = 0;
  }
  *a5 = v58;
  v82 = v87;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
LABEL_59:

}

__n128 *TLine::EnumerateCaretOffsets(__n128 *this, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  double v8;
  double v9;
  unint64_t v10;
  __n128 *v11;
  size_t v12;
  double *v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double *v21;
  _QWORD *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  unint64_t v32;
  CFIndex ClusterRange;
  uint64_t v34;
  unint64_t v35;
  CFIndex v36;
  uint64_t v37;
  double v38;
  BOOL v39;
  double v40;
  __n128 *v41;
  uint64_t v42;
  CFIndex v43;
  CFIndex v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  int64x2_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  CFIndex v78;
  CFIndex v79;
  CFIndex v80;
  CFIndex v81;
  BOOL v82;
  CFIndex v83;
  CFIndex v84;
  BOOL v85;
  CFRange v86;
  unsigned int FullChar;
  uint64_t v88;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  BOOL v102;
  double v103;
  __n128 *v104;
  uint64_t v105;
  CFIndex v106;
  uint64_t v107;
  __n128 v108;
  unint64_t v109;
  BOOL v110;
  double v111;
  __n128 *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  unint64_t v120;
  uint64_t v121;
  __int128 v122;
  int64_t LigatureCaretPositionsForGlyph;
  uint64_t v124;
  uint64_t *v125;
  double v126;
  uint64_t v127;
  double *v128;
  double v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  _QWORD *v146;
  __int128 v147;
  _QWORD *v148;
  __int128 v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __n128 *v159;
  unint64_t v160;
  double v161;
  double v162;
  char v163;
  CFIndex *v164;
  double v165;
  double v166;
  char v167;
  uint64_t v168;
  __n128 v169;
  __n128 v170;
  int64_t v171;
  __n128 *v172;
  unsigned __int32 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int32 v179;
  double v180;
  uint64_t v181;
  __n128 *v182;
  double *n128_f64;
  int v185;
  double *v186;
  unint64_t v187;
  double v188;
  __n128 *v189;
  unint64_t v190;
  const std::nothrow_t *v191;
  __n128 *v192;
  __n128 v193;
  __n128 *v194;
  __n128 *v195;
  unint64_t v196;
  __n128 *v197;
  __n128 *v198;
  BOOL v199;
  int v201;
  unint64_t *n128_u64;
  uint64_t v203;
  uint64_t v204;
  double *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __n128 *v209;
  int v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  int v214[5];
  double v215;
  _QWORD v216[2];
  unint64_t v217;
  char *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  int64x2_t v232;
  char *v233;
  _BYTE v234[720];
  _BYTE *v235;
  _BYTE v236[24];
  _OWORD v237[15];
  _OWORD *v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  if (!this->n128_u64[0])
    return this;
  v3 = (unint64_t *)this;
  if (this[9].n128_u64[0])
  {
    v4 = atomic_load(this[13].n128_u64);
    if (v4)
    {
      v5 = atomic_load(&this[12].n128_u64[1]);
      if (v5)
      {
        v6 = v4 + 16 * v5;
        do
        {
          v232.i8[0] = 0;
          this = (__n128 *)std::function<void ()(double,long,BOOL,BOOL *)>::operator()(*(_QWORD *)(a2 + 24), *(unsigned int *)(v4 + 8), *(_BYTE *)(v4 + 12), (uint64_t)&v232, *(double *)v4);
          v4 += 16;
          if (v232.i8[0])
            v7 = 1;
          else
            v7 = v4 == v6;
        }
        while (!v7);
      }
      return this;
    }
    n128_u64 = this[13].n128_u64;
    this = (__n128 *)TLine::GetLeftHangersGlyphCountAndWidth((TLine *)this, 0);
    if (v8 == 0.0)
      v9 = 0.0;
    else
      v9 = 0.0 - v8;
    v10 = v3[18];
    if ((v10 >> 31))
      return this;
    this = (__n128 *)operator new[](32 * v10, MEMORY[0x1E0DE4E10]);
    if (!this)
      return this;
    v11 = this;
    v217 = 0;
    if (v10 >> 61)
      v12 = -1;
    else
      v12 = 8 * v10;
    v13 = (double *)operator new[](v12, MEMORY[0x1E0DE4E10]);
    if (v13)
    {
      v14 = v13;
      v15 = v3[2];
      v16 = v3[3] - v15;
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = (unint64_t)v16 >> 3;
        if (v19 <= 1)
          v19 = 1;
        v20 = 0.0;
        v21 = (double *)MEMORY[0x1E0C9D820];
        do
        {
          v22 = *(_QWORD **)(*(_QWORD *)(v15 + 8 * v18) + 40);
          v23 = (double *)v22[39];
          if (!v23)
            v23 = v21;
          v20 = v20 + *v23;
          v24 = v22[26];
          if (v24 >= 1)
          {
            if (v24 + v17 > (uint64_t)v10)
              goto LABEL_264;
            v25 = v22[27];
            v26 = *(_QWORD *)(v25 + 32);
            if (v26 || (v29 = *(_QWORD *)(v25 + 24)) == 0)
            {
              v27 = 0;
              v28 = (double *)(v26 + 16 * v22[25]);
            }
            else
            {
              v28 = (double *)(v29 + 8 * v22[25]);
              v27 = 1;
            }
            v30 = v28;
            do
            {
              v13[v17++] = v20;
              if (v27)
                v31 = v28;
              else
                v31 = v30;
              v20 = v20 + *v31;
              v30 += 2;
              ++v28;
              --v24;
            }
            while (v24);
          }
          ++v18;
        }
        while (v18 != v19);
      }
      v203 = a2;
      v32 = 2 * v10;
      v216[0] = v11;
      v216[1] = &v217;
      v215 = 0.0;
      memset(v214, 170, sizeof(v214));
      ClusterRange = TLine::GetClusterRange((TLine *)v3, (_QWORD *)*v3, v3[9], 3, &v214[1], &v215, v214);
      v212 = v34;
      v35 = v217;
      if (v217 < 2 * v10)
      {
        v36 = ClusterRange;
        v206 = 0;
        v37 = *(_QWORD *)&v214[1];
        v38 = v14[*(_QWORD *)&v214[1]];
        v210 = v214[0];
        v39 = v214[0] < 1;
        v40 = v215;
        if (v214[0] >= 1)
          v40 = -0.0;
        v41 = &v11[v217];
        v41->n128_u32[2] = ClusterRange;
        v41->n128_u8[12] = 1;
        v41->n128_u8[13] = v39;
        v207 = v3[10] + v3[9];
        v41->n128_f64[0] = v9 + v38 + v40;
        v217 = v35 + 1;
        v209 = v11;
        v205 = v14;
LABEL_45:
        memset(v234, 170, sizeof(v234));
        v233 = 0;
        v232 = 0uLL;
        v235 = v234;
        if (v212 < 2)
          goto LABEL_144;
        v208 = v37;
        v42 = *(_QWORD *)&v214[3];
        v43 = v36 + v212;
        v44 = v36;
        do
        {
          v45 = (*(uint64_t (**)(unint64_t, CFIndex, uint64_t))(*(_QWORD *)*v3 + 40))(*v3, v44, 3);
          v47 = v45;
          v48 = v3[9];
          v49 = v3[10];
          v50 = v49 + v48;
          if (v45 + v46 >= (uint64_t)(v49 + v48))
            v51 = v49 + v48;
          else
            v51 = v45 + v46;
          v52 = v48 <= v45 && v45 < v50;
          if (v52)
          {
            v54 = v51 - v45;
          }
          else if (v45 <= v48 && v48 < v45 + v46)
          {
            v54 = v51 - v48;
            v47 = v3[9];
          }
          else
          {
            v47 = 0;
            v54 = 0;
          }
          if (v54 <= 0)
          {
            v232.i64[1] = v232.i64[0];
            goto LABEL_195;
          }
          v55 = (_QWORD *)v232.i64[1];
          if (v232.i64[1] >= (unint64_t)v233)
          {
            v57 = 0xAAAAAAAAAAAAAAABLL * ((v232.i64[1] - v232.i64[0]) >> 3);
            v58 = v57 + 1;
            if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_267;
            if (0x5555555555555556 * ((uint64_t)&v233[-v232.i64[0]] >> 3) > v58)
              v58 = 0x5555555555555556 * ((uint64_t)&v233[-v232.i64[0]] >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v233[-v232.i64[0]] >> 3) >= 0x555555555555555)
              v59 = 0xAAAAAAAAAAAAAAALL;
            else
              v59 = v58;
            *((_QWORD *)&v237[0] + 1) = v234;
            v60 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v234, v59);
            v61 = &v60[24 * v57];
            *(_QWORD *)v61 = v47;
            *((_QWORD *)v61 + 1) = v54;
            *((_QWORD *)v61 + 2) = 0;
            v62 = v232.i64[1];
            v63 = v232.i64[0];
            if (v232.i64[1] == v232.i64[0])
            {
              v66 = vdupq_n_s64(v232.u64[1]);
              v64 = &v60[24 * v57];
            }
            else
            {
              v64 = &v60[24 * v57];
              do
              {
                v65 = *(_OWORD *)(v62 - 24);
                *((_QWORD *)v64 - 1) = *(_QWORD *)(v62 - 8);
                *(_OWORD *)(v64 - 24) = v65;
                v64 -= 24;
                v62 -= 24;
              }
              while (v62 != v63);
              v66 = v232;
            }
            v56 = v61 + 24;
            v232.i64[0] = (uint64_t)v64;
            v232.i64[1] = (uint64_t)(v61 + 24);
            *(int64x2_t *)&v236[8] = v66;
            v67 = v233;
            v233 = &v60[24 * v59];
            *(_QWORD *)&v237[0] = v67;
            *(_QWORD *)v236 = v66.i64[0];
            std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)v236);
          }
          else
          {
            *(_QWORD *)v232.i64[1] = v47;
            v55[1] = v54;
            v56 = v55 + 3;
            v55[2] = 0;
          }
          v232.i64[1] = (uint64_t)v56;
          v44 = v47 + v54;
        }
        while (v47 + v54 < v43);
        v68 = *v3;
        v69 = v208 - 1;
        v218 = (char *)*v3;
        v70 = v210;
        if (v210 >= 0)
          v69 = v42 + v208;
        v204 = v42 + v208 - 1;
        if (v210 >= 0)
          v71 = v208;
        else
          v71 = v42 + v208 - 1;
        v219 = 0u;
        v220 = 0u;
        v221 = 0u;
        v222 = 0u;
        v223 = 0u;
        v224 = 0u;
        v225 = 0u;
        v226 = 0u;
        v227 = 0u;
        v228 = 0u;
        v230 = 0;
        v229 = 0u;
        *(_QWORD *)&v229 = *(_QWORD *)(v68 + 16);
        v213 = v69;
        if (v71 == v69)
        {
          v211 = 1;
          v32 = 2 * v10;
          goto LABEL_132;
        }
        v211 = 1;
        while (1)
        {
          v72 = v3[2];
          v73 = v3[3];
          if (v72 == v73)
          {
            v76 = 0xAAAAAAAAAAAAAAAALL;
          }
          else
          {
            v74 = 0;
            while (1)
            {
              v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v72 + 40) + 208) + v74;
              if (v75 > v71)
                break;
              v72 += 8;
              v74 = v75;
              if (v72 == v73)
              {
                v76 = 0xAAAAAAAAAAAAAAAALL;
                v72 = v3[3];
                goto LABEL_92;
              }
            }
            v76 = v71 - v74;
          }
LABEL_92:
          v77 = *(_QWORD *)(*(_QWORD *)v72 + 40);
          v78 = *(_QWORD *)(v77 + 8);
          v79 = *(_QWORD *)(v77 + 16) + v78;
          if (v43 >= v79)
            v80 = *(_QWORD *)(v77 + 16) + v78;
          else
            v80 = v36 + v212;
          v81 = v80 - v78;
          v82 = v36 <= v78 && v78 < v43;
          if (v82)
            v83 = *(_QWORD *)(v77 + 8);
          else
            v83 = 0;
          if (!v82)
            v81 = 0;
          v84 = v80 - v36;
          v85 = v78 <= v36 && v36 < v79;
          if (v85)
            v86.location = v36;
          else
            v86.location = v83;
          if (v85)
            v86.length = v84;
          else
            v86.length = v81;
          if (!TRun::IsRangeMonotonic((TRun *)v77, v86))
          {
            v42 = 0;
LABEL_131:
            v56 = (_QWORD *)v232.i64[1];
            v70 = v210;
            v32 = 2 * v10;
LABEL_132:
            v90 = (uint64_t *)v232.i64[0];
            v14 = v205;
            if (v42 == 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v56 - v232.i64[0]) >> 3))
            {
              if (v70 < 0)
              {
                if ((_QWORD *)v232.i64[0] != v56)
                {
                  v91 = (unint64_t)(v56 - 3);
                  if ((unint64_t)(v56 - 3) > v232.i64[0])
                  {
                    do
                    {
                      v92 = *v90;
                      v93 = v90[1];
                      *(_OWORD *)v90 = *(_OWORD *)v91;
                      *(_QWORD *)v91 = v92;
                      *(_QWORD *)(v91 + 8) = v93;
                      v94 = v90[2];
                      v90[2] = *(_QWORD *)(v91 + 16);
                      *(_QWORD *)(v91 + 16) = v94;
                      v90 += 3;
                      v91 -= 24;
                    }
                    while ((unint64_t)v90 < v91);
                  }
                }
                v208 = v204;
              }
              v95 = v3[2];
              v96 = v3[3];
              if (v95 == v96)
              {
                v99 = 0xAAAAAAAAAAAAAAAALL;
              }
              else
              {
                v97 = 0;
                while (1)
                {
                  v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v95 + 40) + 208) + v97;
                  if (v98 > v208)
                    break;
                  v95 += 8;
                  v97 = v98;
                  if (v95 == v96)
                  {
                    v99 = 0xAAAAAAAAAAAAAAAALL;
                    v95 = v3[3];
                    goto LABEL_160;
                  }
                }
                v99 = v208 - v97;
              }
LABEL_160:
              v113 = *(unint64_t **)(*(_QWORD *)v95 + 40);
              v114 = v113[27];
              v115 = *(_QWORD *)(v114 + 32);
              if (v115 || (v117 = *(_QWORD *)(v114 + 24)) == 0)
                v116 = (double *)(v115 + 16 * v113[25] + 16 * v99);
              else
                v116 = (double *)(v117 + 8 * v113[25] + 8 * v99);
              v118 = v42 - 1;
              v119 = *v116;
              v120 = atomic_load(v113 + 7);
              v121 = *(unsigned __int16 *)(*(_QWORD *)(v113[27] + 16) + 2 * v113[25] + 2 * v99);
              *(_QWORD *)&v122 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v237[13] = v122;
              v237[14] = v122;
              v237[11] = v122;
              v237[12] = v122;
              v237[9] = v122;
              v237[10] = v122;
              v237[7] = v122;
              v237[8] = v122;
              v237[5] = v122;
              v237[6] = v122;
              v237[3] = v122;
              v237[4] = v122;
              v237[1] = v122;
              v237[2] = v122;
              v237[0] = v122;
              memset(v236, 0, sizeof(v236));
              v238 = v237;
              if (v120)
              {
                LigatureCaretPositionsForGlyph = (int64_t)TFont::GetLigatureCaretPositionsForGlyph(*(TFont **)(v120 + 40), v121, 0, 0);
                if (LigatureCaretPositionsForGlyph >= 1)
                {
                  v124 = LigatureCaretPositionsForGlyph;
                  std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)v236, LigatureCaretPositionsForGlyph);
                  if (*(_QWORD *)v236)
                    TFont::GetLigatureCaretPositionsForGlyph(*(TFont **)(v120 + 40), v121, *(double **)v236, v124);
LABEL_168:
                  v14 = v205;
                  if (v42 >= 2)
                  {
                    v125 = *(uint64_t **)v236;
                    goto LABEL_175;
                  }
                  goto LABEL_177;
                }
              }
              if (((v42 > 1) & v211) == 1)
              {
                std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)v236, v42 - 1);
                v126 = v119 / (double)v42;
                v125 = *(uint64_t **)v236;
                **(double **)v236 = v126;
                v14 = v205;
                if ((unint64_t)v42 >= 3)
                {
                  v127 = v42 - 2;
                  v128 = (double *)(v125 + 1);
                  v129 = v119 / (double)v42;
                  do
                  {
                    v129 = v126 + v129;
                    *v128++ = v129;
                    --v127;
                  }
                  while (v127);
                  goto LABEL_168;
                }
LABEL_175:
                v130 = (_QWORD *)(v232.i64[0] + 16);
                do
                {
                  v131 = *v125++;
                  *v130 = v131;
                  v130 += 3;
                  --v118;
                }
                while (v118);
LABEL_177:
                *(double *)(v232.i64[1] - 8) = v119;
                v231 = (uint64_t)v236;
                std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v231);
                v132 = v232.u64[1];
                v133 = (_QWORD *)v232.i64[0];
                if (v232.i64[1] < (unint64_t)v233)
                {
                  v134 = v232.i64[0] + 24;
                  v32 = 2 * v10;
                  if (v232.i64[0] == v232.i64[1])
                  {
                    *(_QWORD *)(v232.i64[0] + 8) = 0;
                    v133[2] = 0;
                    *v133 = -1;
                    v232.i64[1] = (uint64_t)(v133 + 3);
                  }
                  else
                  {
                    v135 = v232.i64[1] - 24;
                    v136 = v232.i64[1];
                    while (v135 < v132)
                    {
                      v137 = *(_OWORD *)v135;
                      *(_QWORD *)(v136 + 16) = *(_QWORD *)(v135 + 16);
                      *(_OWORD *)v136 = v137;
                      v136 += 24;
                      v135 += 24;
                    }
                    v232.i64[1] = v136;
                    if (v132 != v134)
                    {
                      v141 = (uint64_t)(v132 - v134) >> 3;
                      v142 = (_QWORD *)(v132 - 8);
                      v143 = v141;
                      do
                      {
                        *((_OWORD *)v142 - 1) = *(_OWORD *)&v133[v143 - 3];
                        *v142 = v133[v143 - 1];
                        v142 -= 3;
                        v143 -= 3;
                      }
                      while (v143 * 8);
                    }
                    v133[1] = 0;
                    v133[2] = 0;
                    *v133 = -1;
                  }
LABEL_206:
                  v152 = v232.i64[0];
                  v153 = -1 - 0x5555555555555555 * ((v232.i64[1] - v232.i64[0]) >> 3);
                  v154 = v214[0];
                  if (v214[0] >= 0)
                    v155 = 1;
                  else
                    v155 = -1 - 0x5555555555555555 * ((v232.i64[1] - v232.i64[0]) >> 3);
                  if (v214[0] < 0)
                    v153 = 1;
                  v100 = v217;
                  v156 = v155 - v153;
                  v11 = v209;
                  if (v156)
                  {
                    v157 = 24 * (v155 + v214[0]);
                    v158 = 24 * v155;
                    v159 = &v209[v217];
                    do
                    {
                      if (v100 >= v32)
                        goto LABEL_246;
                      v160 = v100;
                      v161 = *(double *)(v152 + v158 - 8);
                      v162 = v38 + v161;
                      if ((int)v154 < 1)
                      {
                        v163 = 0;
                      }
                      else
                      {
                        v162 = v162 + *(double *)(v152 + v158 + 16) - v161;
                        v163 = 1;
                      }
                      v159->n128_u32[2] = *(_QWORD *)(v152 + v158 + 8) + *(_QWORD *)(v152 + v158) - 1;
                      v159->n128_u8[12] = 0;
                      v159->n128_u8[13] = v163;
                      v159->n128_f64[0] = v9 + v162;
                      v217 = v100 + 1;
                      if (v100 + 1 >= v32)
                        goto LABEL_246;
                      v164 = (CFIndex *)(v152 + v157);
                      v165 = *(double *)(v152 + v157 - 8);
                      v166 = v38 + v165;
                      if ((int)v154 <= 0)
                      {
                        v166 = v166 + *(double *)(v152 + v157 + 16) - v165;
                        v167 = 1;
                      }
                      else
                      {
                        v167 = 0;
                      }
                      v36 = *v164;
                      v168 = v164[1];
                      v159[1].n128_u32[2] = v36;
                      v159[1].n128_u8[12] = 1;
                      v159[1].n128_u8[13] = v167;
                      v159[1].n128_f64[0] = v9 + v166;
                      v100 += 2;
                      v217 = v160 + 2;
                      v152 += 24 * v154;
                      v159 += 2;
                      v156 += v154;
                    }
                    while (v156);
                    v212 = v168;
                    v100 = v160 + 2;
                  }
LABEL_145:
                  if (v100 >= v32)
                    goto LABEL_246;
                  v101 = v214[0];
                  v102 = v214[0] > 0;
                  v103 = v215;
                  if (v214[0] <= 0)
                    v103 = -0.0;
                  v104 = &v11[v100];
                  v105 = v212 + v36;
                  v104->n128_u32[2] = v212 + v36 - 1;
                  v104->n128_u8[12] = 0;
                  v104->n128_u8[13] = v102;
                  v104->n128_f64[0] = v9 + v38 + v103;
                  v217 = v100 + 1;
                  if (v212 + v36 < v207)
                  {
                    v106 = TLine::GetClusterRange((TLine *)v3, (_QWORD *)*v3, v105, 3, &v214[1], &v215, v214);
                    if (v106 <= v105)
                    {
                      v36 = v106;
                      if (v106 + v107 > v105)
                      {
                        v212 = v107;
                        if (v214[0] == v101)
                        {
                          v109 = v217;
                        }
                        else
                        {
                          TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)const::$_0::operator()((uint64_t)v216, v206, v101, v108);
                          v109 = v217;
                          v206 = v217;
                        }
                        v32 = 2 * v10;
                        if (v109 < 2 * v10)
                        {
                          v38 = v14[*(_QWORD *)&v214[1]];
                          v110 = v214[0] < 1;
                          v111 = v215;
                          if (v214[0] >= 1)
                            v111 = -0.0;
                          v112 = &v11[v109];
                          v112->n128_u32[2] = v36;
                          v112->n128_u8[12] = 1;
                          v112->n128_u8[13] = v110;
                          v112->n128_f64[0] = v9 + v38 + v111;
                          v217 = v109 + 1;
                          std::vector<std::pair<CFRange,double>,TInlineBufferAllocator<std::pair<CFRange,double>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v232);
                          v37 = *(_QWORD *)&v214[1];
                          v210 = v214[0];
                          goto LABEL_45;
                        }
LABEL_246:
                        std::vector<std::pair<CFRange,double>,TInlineBufferAllocator<std::pair<CFRange,double>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v232);
                        goto LABEL_264;
                      }
                    }
                  }
                  std::vector<std::pair<CFRange,double>,TInlineBufferAllocator<std::pair<CFRange,double>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v232);
                  TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)const::$_0::operator()((uint64_t)v216, v206, v214[0], v169);
                  v171 = v217;
                  if (v217 < 3)
                  {
                    v189 = &v11[v217];
                    v194 = v11;
                    v177 = v203;
                  }
                  else
                  {
                    v172 = v11 + 1;
                    v173 = v11[1].n128_u32[2];
                    v174 = -1;
                    v175 = 1;
                    v176 = 2;
                    v177 = v203;
                    do
                    {
                      v178 = v175;
                      v175 = v176;
                      v179 = v173;
                      v173 = v209[v175].n128_u32[2];
                      if (v179 == v173)
                      {
                        v180 = v209[v178].n128_f64[0];
                        if (v180 == v209[v175].n128_f64[0])
                        {
                          v181 = v174;
                          v182 = v172;
                          while (!__CFADD__(v181++, 1))
                          {
                            n128_f64 = v182[-1].n128_f64;
                            v185 = v182[-1].n128_u8[13];
                            --v182;
                            if (v185)
                            {
                              *n128_f64 = v180;
                              break;
                            }
                          }
                        }
                      }
                      v176 = v175 + 1;
                      ++v172;
                      --v174;
                    }
                    while (v175 + 1 != v171);
                    v186 = v209[2].n128_f64;
                    v187 = 2;
                    v170.n128_u64[0] = 0.5;
                    do
                    {
                      v188 = (*(v186 - 2) + *v186) * 0.5;
                      *(v186 - 2) = v188;
                      *v186 = v188;
                      v186 += 4;
                      v187 += 2;
                    }
                    while (v187 < v171);
                    v189 = &v209[v171];
                    if (v171 > 128)
                    {
                      if (v171 >= 0x7FFFFFFFFFFFFFFLL)
                        v190 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v190 = v171;
                      v191 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                      while (1)
                      {
                        v192 = (__n128 *)operator new(16 * v190, v191);
                        if (v192)
                          break;
                        v52 = v190 > 1;
                        v190 >>= 1;
                        if (!v52)
                        {
                          std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v209, v189, v171, 0, 0, v193);
                          goto LABEL_248;
                        }
                      }
                      v195 = v192;
                      std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v209, v189, v171, v192, v190, v193);
                      operator delete(v195);
LABEL_248:
                      v177 = v203;
                      goto LABEL_249;
                    }
                    v194 = v209;
                  }
                  std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v194, v189, v171, 0, 0, v170);
LABEL_249:
                  v196 = v217;
                  v14 = v205;
                  if (v217)
                  {
                    v197 = v209;
                    v198 = &v209[v217];
                    do
                    {
                      v232.i8[0] = 0;
                      std::function<void ()(double,long,BOOL,BOOL *)>::operator()(*(_QWORD *)(v177 + 24), v197->n128_u32[2], v197->n128_i8[12], (uint64_t)&v232, v197->n128_f64[0]);
                      ++v197;
                      if (v232.i8[0])
                        v199 = 1;
                      else
                        v199 = v197 == v198;
                    }
                    while (!v199);
                    v196 = v217;
                  }
                  atomic_store(v196, v3 + 25);
                  v11 = v209;
                  while (!__ldaxr(n128_u64))
                  {
                    if (!__stlxr((unint64_t)v209, n128_u64))
                    {
                      v201 = 1;
                      goto LABEL_262;
                    }
                  }
                  v201 = 0;
                  __clrex();
LABEL_262:
                  if (v201)
                    v11 = 0;
                  goto LABEL_264;
                }
                v218 = 0;
                v219 = 0uLL;
                v138 = 1 - 0x5555555555555555 * ((v232.i64[1] - v232.i64[0]) >> 3);
                if (v138 <= 0xAAAAAAAAAAAAAAALL)
                {
                  if (0x5555555555555556 * ((uint64_t)&v233[-v232.i64[0]] >> 3) > v138)
                    v138 = 0x5555555555555556 * ((uint64_t)&v233[-v232.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v233[-v232.i64[0]] >> 3) >= 0x555555555555555)
                    v139 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v139 = v138;
                  *((_QWORD *)&v220 + 1) = v234;
                  if (v139)
                  {
                    v140 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v234, v139);
                    *(_QWORD *)&v220 = &v140[24 * v139];
                  }
                  else
                  {
                    *(_QWORD *)&v220 = 0;
                    *((_QWORD *)&v237[0] + 1) = v234;
                    v140 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v234, 1uLL);
                    memset(v236, 0, sizeof(v236));
                    *(_QWORD *)&v237[0] = 0;
                    v218 = v140;
                    *(_QWORD *)&v220 = v140 + 24;
                    std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)v236);
                  }
                  v144 = v140 + 24;
                  *((_QWORD *)v140 + 1) = 0;
                  *((_QWORD *)v140 + 2) = 0;
                  *(_QWORD *)v140 = -1;
                  *((_QWORD *)&v219 + 1) = v140 + 24;
                  v145 = (_QWORD *)v232.i64[0];
                  v14 = v205;
                  if ((_QWORD *)v232.i64[0] != v133)
                  {
                    v146 = v133;
                    do
                    {
                      v147 = *(_OWORD *)(v146 - 3);
                      *((_QWORD *)v140 - 1) = *(v146 - 1);
                      *(_OWORD *)(v140 - 24) = v147;
                      v140 -= 24;
                      v146 -= 3;
                    }
                    while (v146 != v145);
                    v144 = (char *)*((_QWORD *)&v219 + 1);
                  }
                  *(_QWORD *)&v219 = v140;
                  v148 = (_QWORD *)v232.i64[1];
                  if ((_QWORD *)v232.i64[1] != v133)
                  {
                    do
                    {
                      v149 = *(_OWORD *)v133;
                      *((_QWORD *)v144 + 2) = v133[2];
                      *(_OWORD *)v144 = v149;
                      v144 += 24;
                      v133 += 3;
                    }
                    while (v133 != v148);
                    v140 = (char *)v219;
                    v133 = (_QWORD *)v232.i64[1];
                  }
                  v150 = (char *)v232.i64[0];
                  v232.i64[0] = (uint64_t)v140;
                  v232.i64[1] = (uint64_t)v144;
                  v151 = v233;
                  v233 = (char *)v220;
                  *((_QWORD *)&v219 + 1) = v133;
                  *(_QWORD *)&v220 = v151;
                  v218 = v150;
                  *(_QWORD *)&v219 = v150;
                  std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v218);
                  v32 = 2 * v10;
                  goto LABEL_206;
                }
LABEL_267:
                abort();
              }
              v232.i64[1] = v232.i64[0];
              v231 = (uint64_t)v236;
              std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v231);
LABEL_195:
              v11 = v209;
              v14 = v205;
              v32 = 2 * v10;
            }
            else
            {
              v232.i64[1] = v232.i64[0];
              v11 = v209;
            }
LABEL_144:
            v100 = v217;
            goto LABEL_145;
          }
          v231 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 216) + 48) + 8 * *(_QWORD *)(v77 + 200) + 8 * v76);
          memset(v236, 170, 16);
          FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v218, &v231, (CFRange *)v236);
          if (CFUniCharIsMemberOf())
            goto LABEL_114;
          if (CFUniCharIsMemberOf())
            break;
LABEL_120:
          if ((FullChar - 1792) >> 9 < 0xB || FullChar >> 8 > 0x30 || FullChar - 11904 <= 0x17F)
            v211 = 0;
          v88 = v42 - (*(_QWORD *)&v236[8] > 1);
          v42 = v88 - objc_msgSend(*(id *)(v77 + 216), "attachmentCountAtIndex:", *(_QWORD *)(v77 + 200) + v76);
          v71 += v210;
          if (v42 < 1 || v71 == v213)
            goto LABEL_131;
        }
        if (v232.i64[0] != v232.i64[1]
          && *(_QWORD *)v236 == *(_QWORD *)(v232.i64[1] - 24)
          && *(_QWORD *)&v236[8] == *(_QWORD *)(v232.i64[1] - 16))
        {
          v232.i64[1] -= 24;
        }
LABEL_114:
        --v42;
        goto LABEL_120;
      }
LABEL_264:
      this = (__n128 *)MEMORY[0x186DC0394](v14, 0x1000C8000313F17);
      if (!v11)
        return this;
    }
    return (__n128 *)MEMORY[0x186DC0394](v11, 0x1000C8099076E91);
  }
  v232.i8[0] = 0;
  this = (__n128 *)std::function<void ()(double,long,BOOL,BOOL *)>::operator()(*(_QWORD *)(a2 + 24), this[4].n128_i64[1], 1, (uint64_t)&v232, 0.0);
  if (!v232.i8[0])
    return (__n128 *)std::function<void ()(double,long,BOOL,BOOL *)>::operator()(*(_QWORD *)(a2 + 24), v3[9] + v3[10] - 1, 0, (uint64_t)&v232, 0.0);
  return this;
}

CFIndex std::function<void ()(double,long,BOOL,BOOL *)>::operator()(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double *v11;
  int *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;

  v16 = a5;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  if (a1)
    return (*(uint64_t (**)(uint64_t, double *, uint64_t *, char *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v16, &v15, &v14, &v13);
  v6 = std::__throw_bad_function_call[abi:nn180100]();
  return TLine::GetClusterRange((TLine *)v6, v7, v8, v9, v10, v11, v12);
}

CFIndex TLine::GetClusterRange(TLine *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, double *a6, int *a7)
{
  uint64_t RunWithCharIndex;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  RunWithCharIndex = TLine::FindRunWithCharIndex(a1, a3, 1);
  if (RunWithCharIndex < 1)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = (uint64_t *)*((_QWORD *)a1 + 2);
    v17 = RunWithCharIndex;
    do
    {
      v18 = *v16++;
      v15 += *(_QWORD *)(*(_QWORD *)(v18 + 40) + 208);
      --v17;
    }
    while (v17);
  }
  return TLine::GetClusterRange(a1, a2, RunWithCharIndex, v15, a3, a4, a5, a6, a7);
}

CFIndex TTruncator::TruncateEndChars(TTruncator *this, uint64_t a2, double a3, TLine *a4, BOOL *a5)
{
  TTruncator *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFIndex v12;
  uint64_t RunWithCharIndex;
  TTruncator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t *v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  void *Table;
  double v27;
  double *v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  TLine *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  double v66[3];
  CFRange v67;

  v6 = this;
  v7 = *((_QWORD *)this + 3);
  v9 = *(_QWORD *)(v7 + 72);
  v8 = *(_QWORD *)(v7 + 80);
  *a5 = (*(_BYTE *)(v7 + 152) & 8) != 0;
  v10 = a2 - v9;
  v63 = v8;
  v64 = v9;
  if (a2 <= v9)
  {
    RunWithCharIndex = 0;
    v18 = v9;
    v12 = v9;
  }
  else
  {
    v12 = v9;
    while (1)
    {
      RunWithCharIndex = TLine::FindRunWithCharIndex(*((TLine **)v6 + 3), v9, 1);
      v14 = v6;
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 16) + 8 * RunWithCharIndex);
      v16 = *(_QWORD *)(v15 + 40);
      v17 = *(_QWORD *)(v16 + 16);
      v18 = v17 + *(_QWORD *)(v16 + 8);
      if (v18 > a2)
        break;
      v19 = *(double **)(v16 + 312);
      if (!v19)
        v19 = (double *)MEMORY[0x1E0C9D820];
      v20 = *(uint64_t **)(v16 + 232);
      v21 = 0.0;
      if (v20)
      {
        v22 = ~*(_QWORD *)(v16 + 248) + v18 + *(_QWORD *)(v16 + 200);
        v23 = *v20;
        if (v22 < (*(_QWORD *)(*(_QWORD *)(v16 + 232) + 8) - v23) >> 3)
          v21 = *(double *)(v23 + 8 * v22);
      }
      v24 = *(double *)(v16 + 192);
      v25 = *v19;
      Table = GetTable();
      v27 = 0.0002;
      if (Table)
      {
        v28 = (double *)*((_QWORD *)Table + 8);
        v27 = 0.0002;
        if (v28)
          v27 = *v28;
      }
      if (v24 + v25 - v21 - a3 > v27)
      {
        *a5 = *(_BYTE *)(v16 + 224);
        break;
      }
      TLine::InsertPartialRun(a4, (uint64_t)(*((_QWORD *)a4 + 3) - *((_QWORD *)a4 + 2)) >> 3, v15, *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8), *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16));
      v12 += v17;
      v10 -= v17;
      v29 = *(double **)(v16 + 312);
      if (!v29)
        v29 = (double *)MEMORY[0x1E0C9D820];
      a3 = a3 - (*(double *)(v16 + 192) + *v29);
      v9 = v18;
      v6 = v14;
      if (v18 >= a2)
        goto LABEL_20;
    }
    v18 = v9;
    v6 = v14;
  }
LABEL_20:
  v30 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 16) + 8 * RunWithCharIndex);
  v67.location = v12;
  v67.length = v10;
  v31 = TRun::CountCharsInWidth(*(TRun **)(v30 + 40), v67, a3, 1);
  if (v31 < 1)
  {
    v33 = a4;
  }
  else
  {
    v32 = v31;
    v33 = a4;
    if (TTruncator::AppendTruncatedRun((uint64_t)v6, (int64x2_t *)a4, v30, v18, v31, 1))
    {
      v12 += v32;
      v10 -= v32;
    }
  }
  v34 = *((_QWORD *)v33 + 2);
  v35 = *((_QWORD *)v33 + 3) - v34;
  if (v35 >= 1)
  {
    do
    {
      v36 = ((unint64_t)v35 >> 3) - 1;
      v37 = *(_QWORD **)(v34 + 8 * v36);
      v38 = v37[5];
      TRun::GetTrailingWhitespace(v38, v66);
      v39 = *(_QWORD *)&v66[0];
      if (*(uint64_t *)&v66[0] < 1)
        break;
      v12 -= *(_QWORD *)&v66[0];
      v10 += *(_QWORD *)&v66[0];
      v40 = *(_QWORD *)(v38 + 8);
      v41 = *(_QWORD *)(v38 + 16);
      v42 = v37;
      TLine::SimpleRunDelete(v33, v36);
      if (v41 - v39 >= 1)
      {
        if (TTruncator::AppendTruncatedRun((uint64_t)v6, (int64x2_t *)v33, (uint64_t)v37, v40, v41 - v39, 1))
        {
          *((_QWORD *)v33 + 10) -= v39;
          TLine::SyncWithRuns(v33);
        }

        break;
      }
      *((_QWORD *)v33 + 10) -= v39;
      TLine::SyncWithRuns(v33);

      v34 = *((_QWORD *)v33 + 2);
      v35 = *((_QWORD *)v33 + 3) - v34;
    }
    while (v35 > 0);
  }
  if (v10 >= 1 && (uint64_t)(*((_QWORD *)v33 + 3) - *((_QWORD *)v33 + 2)) >= 1)
  {
    v43 = (*(uint64_t (**)(_QWORD, CFIndex, uint64_t))(***((_QWORD ***)v6 + 3) + 40))(**((_QWORD **)v6 + 3), v12, 2);
    v45 = v43;
    v46 = v43 + v44 >= v63 + v64 ? v63 + v64 : v43 + v44;
    if (v64 <= v43 && v43 < v63 + v64)
    {
      v49 = v46 - v43;
    }
    else if (v43 <= v64 && v64 < v43 + v44)
    {
      v49 = v46 - v64;
      v45 = v64;
    }
    else
    {
      v45 = 0;
      v49 = 0;
    }
    if (v45 < v12)
    {
      v50 = v45 + v49;
      do
      {
        v51 = TLine::FindRunWithCharIndex(v33, v12 - 1, 1);
        v52 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 2) + 8 * v51) + 40);
        v53 = *(_QWORD *)(v52 + 8);
        v54 = *(_QWORD *)(v52 + 16);
        if (v50 >= v54 + v53)
          v55 = v54 + v53;
        else
          v55 = v50;
        v56 = v53 <= v45 && v45 < v54 + v53;
        v57 = v45;
        if (!v56 && (v45 <= v53 ? (v58 = v53 < v50) : (v58 = 0), v57 = v53, !v58) || (v59 = v55 - v57, v55 - v57 < 1))
        {
          TLine::SyncWithRuns(v33);
          return v45;
        }
        v12 -= v59;
        v10 += v59;
        TLine::DeleteRun(v33, v51);
      }
      while (*((_QWORD *)v33 + 3) != *((_QWORD *)v33 + 2) && v45 < v12);
      TLine::SyncWithRuns(v33);
      if (v54 - v59 >= 1)
      {
        v60 = TLine::FindRunWithCharIndex(*((TLine **)v6 + 3), v53, 1);
        TTruncator::AppendTruncatedRun((uint64_t)v6, (int64x2_t *)v33, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 16) + 8 * v60), v53, v54 - v59, 1);
      }
    }
  }
  return v12;
}

void TLine::SyncWithRuns(TLine *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const TRun *v6;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 18) = 0;
  *((_WORD *)this + 76) &= 8u;
  *((_WORD *)this + 77) &= 0x161u;
  v1 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v1 >= 1)
  {
    v3 = 0;
    v4 = (unint64_t)v1 >> 3;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    do
    {
      v6 = *(const TRun **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v3) + 48);
      (*(void (**)(const TRun *))(*(_QWORD *)v6 + 144))(v6);
      TLine::UpdateCachedMetricsForRun(this, v6);
      ++v3;
    }
    while (v5 != v3);
  }
}

void TRun::TruncateUnorderedEnd(TRun *this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NextChar;
  uint64_t v21;
  CFIndex location;
  uint64_t *v23;
  char v24;
  CFIndex v25;
  CFIndex v26;
  uint64_t *v27;
  CFRange v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t GlyphIndexForChar;
  CFRange v38;

  v10 = a2;
  if (a4)
  {
    v12 = *((_QWORD *)this + 1);
    do
    {
      v13 = a3;
      v14 = a3 + v10;
      if (a3 + v10 <= v12)
        break;
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, v14 - 1, a6);
      v12 = *((_QWORD *)this + 1);
      if (v15 < v12)
      {
        *((_QWORD *)this + 2) = 0;
        goto LABEL_30;
      }
      a3 = v15 - v10;
    }
    while (v15 + v16 > v14);
  }
  else
  {
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2);
    if (v10 >= *((_QWORD *)this + 2) + *((_QWORD *)this + 1))
    {
LABEL_14:
      NextChar = v10;
    }
    else
    {
      while (1)
      {
        v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, v10, a6);
        v19 = v17 + v18;
        NextChar = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
        if (v17 + v18 > NextChar)
          break;
        if (v17 >= v10)
          goto LABEL_14;
        v21 = v19 - 1;
        if (v19 - 1 != v10)
          GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, v19 - 1);
        NextChar = TRun::GetNextChar(this, v21, &GlyphIndexForChar);
        a3 = v10 + a3 - NextChar;
        v10 = NextChar;
        if (NextChar >= *((_QWORD *)this + 2) + *((_QWORD *)this + 1))
          goto LABEL_17;
      }
      a3 = 0;
    }
LABEL_17:
    v10 = NextChar;
    v13 = a3;
  }
  *((_QWORD *)this + 1) = v10;
  *((_QWORD *)this + 2) = v13;
  if (v13)
  {
    location = *((_QWORD *)this + 26);
    v23 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25));
    v24 = *((_BYTE *)this + 224);
    if (!a4)
      v24 = (v24 & 1) == 0;
    if ((v24 & 1) != 0)
    {
      v25 = location - 1;
      v26 = (location - 1) & ((location - 1) >> 63);
      v27 = v23 - 2;
      while (1)
      {
        v28.location = location - 1;
        if (location - 1 < 1)
          break;
        v29 = v27[location];
        v30 = v10 > v29 || v13 + v10 <= v29;
        location = v28.location;
        if (v30)
          goto LABEL_39;
      }
      v28.location = v26;
LABEL_39:
      v31 = v25 - v28.location;
    }
    else
    {
      v31 = location - 1;
      if (location < 1 || ((v32 = v13 + v10, v10 <= *v23) ? (v33 = v32 <= *v23) : (v33 = 1), v33))
      {
        v28.location = 0;
        v31 = 0;
      }
      else
      {
        v34 = 1;
        while (location != v34)
        {
          v35 = v23[v34++];
          if (v10 > v35 || v32 <= v35)
          {
            v28.location = 0;
            v31 = v34 - 2;
            goto LABEL_40;
          }
        }
        v28.location = 0;
      }
    }
LABEL_40:
    v28.length = v31 + 1;
    TRun::TruncateStorageRange(this, v28);
  }
  else
  {
LABEL_30:
    v38.location = 0;
    v38.length = 0;
    TStorageRange::SetStorageSubRange((TRun *)((char *)this + 192), v38);
  }
}

CFIndex TLine::GetClusterRange(TLine *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, double *a8, int *a9)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  CFIndex v25;
  uint64_t v26;
  BOOL v27;
  CFIndex v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t GlyphIndexForChar;
  uint64_t v32;
  CFIndex v33;
  uint64_t v34;
  CFIndex v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  CFIndex v60;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  CFIndex v64;
  CFIndex v65;
  CFIndex v66;
  BOOL v67;
  CFIndex v68;
  BOOL v69;
  uint64_t ClusterRangeForRange;
  uint64_t v71;
  CFIndex v72;
  CFIndex v73;
  uint64_t v74;
  unsigned int v77;
  int v78;
  CFIndex v79;
  double *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  CFIndex v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  const TStorageRange *v95;
  int v96;
  CFIndex v97;
  uint64_t v98;
  CFIndex v99;
  uint64_t v100;
  CFIndex v101;
  CFIndex v102;
  CFIndex v103;
  BOOL v104;
  CFIndex v105;
  CFIndex v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  CFIndex v110;
  CFIndex v111;
  uint64_t v112;
  CFIndex v113;
  CFIndex v114;
  CFIndex v115;
  double *v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  char v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  double v137;
  uint64_t *v138;
  double v139;
  unint64_t v140;
  uint64_t v141;
  double v142;
  unint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t RenderingStyle;
  int *v147;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  char v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  BOOL v172;
  CFIndex v173;
  uint64_t v174;
  id v175;
  TLine *v176;
  CFIndex v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  double v194;
  __int16 v195[5];

  v15 = (void *)objc_opt_new();
  v17 = *((_QWORD *)a1 + 2);
  v16 = *((_QWORD *)a1 + 3);
  v153 = a6;
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 40))(a2, a5, a6);
  v20 = *((_QWORD *)a1 + 9);
  v21 = *((_QWORD *)a1 + 10) + v20;
  if (v18 + v19 >= v21)
    v22 = *((_QWORD *)a1 + 10) + v20;
  else
    v22 = v18 + v19;
  v23 = v22 - v20;
  v24 = v18 <= v20 && v20 < v18 + v19;
  if (v24)
    v25 = *((_QWORD *)a1 + 9);
  else
    v25 = 0;
  if (!v24)
    v23 = 0;
  v26 = v22 - v18;
  v27 = v20 <= v18 && v18 < v21;
  if (v27)
    v28 = v18;
  else
    v28 = v25;
  if (v27)
    v29 = v26;
  else
    v29 = v23;
  v177 = v29;
  v162 = a3;
  v30 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * a3) + 40);
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<true>(v30, a5);
  v172 = (~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 216) + 40) + 4 * *(_QWORD *)(v30 + 200) + 4 * GlyphIndexForChar) & 0x1020) == 0;
  v155 = *(_DWORD *)(v30 + 304);
  v156 = *(unsigned __int8 *)(v30 + 224);
  v181 = a2;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v182 = 0u;
  v183 = 0u;
  v154 = (uint64_t)a2;
  v32 = a2[2];
  v193 = 0;
  *(_QWORD *)&v192 = v32;
  v176 = a1;
  v33 = CharRangeForGlyphIndex(a1, (TCharStreamIterator *)&v181, *(const TStorageRange **)(v30 + 200), *(_QWORD **)(v30 + 216), GlyphIndexForChar);
  v35 = v34;
  v175 = v15;
  objc_msgSend(v15, "addIndexesInRange:", v33, v34);
  v36 = *(_QWORD **)(v30 + 216);
  v37 = v36[4];
  if (v37 || (v41 = v36[3]) == 0)
  {
    v38 = *(_QWORD *)(v30 + 200);
    v163 = v37 + 16 * v38;
    v39 = (double *)(v163 + 16 * GlyphIndexForChar);
    v40 = 2;
  }
  else
  {
    v38 = *(_QWORD *)(v30 + 200);
    v163 = v41 + 8 * v38;
    v39 = (double *)(v163 + 8 * GlyphIndexForChar);
    v40 = 1;
  }
  v171 = v40;
  v147 = a9;
  v42 = v16 - v17;
  v178 = GlyphIndexForChar + a4;
  v43 = v30 + 192;
  v44 = *v39;
  v45 = v162;
  v173 = v35;
  if ((*(_DWORD *)(v36[5] + 4 * v38 + 4 * GlyphIndexForChar) & 0x404) != 0)
  {
    v46 = v163;
  }
  else
  {
    v47 = *(uint64_t **)(v30 + 232);
    v48 = 0.0;
    v46 = v163;
    if (v47)
    {
      v49 = v38 + GlyphIndexForChar - *(_QWORD *)(v30 + 248);
      v50 = *v47;
      if (v49 < (*(_QWORD *)(*(_QWORD *)(v30 + 232) + 8) - v50) >> 3)
        v48 = *(double *)(v50 + 8 * v49);
    }
    v44 = v44 - v48;
  }
  v157 = *(_BYTE *)(v30 + 224);
  if ((v157 & 1) != 0)
    v51 = -1;
  else
    v51 = 1;
  v150 = v51;
  v151 = GlyphIndexForChar;
  v160 = v42 >> 3;
  v161 = *(_QWORD *)(v30 + 208);
  v180 = 1;
  if ((*(_BYTE *)(v30 + 224) & 1) != 0)
    v52 = 1;
  else
    v52 = -1;
  v167 = v46;
  v169 = v52;
  if ((*(_BYTE *)(v30 + 224) & 1) != 0)
    v53 = 0;
  else
    v53 = -1;
  v152 = v53;
  v158 = (_QWORD *)v30;
  v165 = v171;
  v54 = GlyphIndexForChar;
  v174 = v30 + 192;
  while (1)
  {
    v54 += v169;
    if (v54 >= 0 && v161 > v54)
    {
      v55 = v30;
      goto LABEL_56;
    }
    v45 += v169;
    if (v45 < 0)
      break;
    if (v160 <= v45)
      break;
    v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v176 + 2) + 8 * v45) + 40);
    if (*(_QWORD *)(v55 + 24) != v30 || *(unsigned __int8 *)(v55 + 224) != v156 || *(_DWORD *)(v55 + 304) != v155)
      break;
    v56 = *(_QWORD *)(v55 + 216);
    v57 = *(_QWORD *)(v56 + 32);
    if (v57 || (v59 = *(_QWORD *)(v56 + 24)) == 0)
    {
      v167 = v57 + 16 * *(_QWORD *)(v55 + 200);
      v58 = 2;
    }
    else
    {
      v167 = v59 + 8 * *(_QWORD *)(v55 + 200);
      v58 = 1;
    }
    v165 = v58;
    v43 = v55 + 192;
    v161 = *(_QWORD *)(v55 + 208);
    if ((v157 & 1) != 0)
      v54 = 0;
    else
      v54 = v161 - 1;
LABEL_56:
    v60 = CharRangeForGlyphIndex(v176, (TCharStreamIterator *)&v181, *(const TStorageRange **)(v43 + 8), *(_QWORD **)(v43 + 24), v54);
    v62 = v60;
    v63 = v61;
    v64 = v60 + v61;
    v65 = v177 + v28;
    if (v60 + v61 >= v177 + v28)
      v66 = v177 + v28;
    else
      v66 = v60 + v61;
    v67 = v28 <= v60 && v60 < v65;
    v68 = v60;
    if ((v67 || (v60 <= v28 ? (v69 = v28 < v64) : (v69 = 0), v68 = v28, v69)) && v66 != v68)
    {
      v172 = 0;
    }
    else
    {
      if (!v172
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 40) + 4 * *(_QWORD *)(v43 + 8) + 4 * v54) & 0x20) != 0)
      {
        break;
      }
      ClusterRangeForRange = TCharStream::GetClusterRangeForRange(v154, v60, v61, v153);
      v72 = ClusterRangeForRange + v71;
      if (ClusterRangeForRange + v71 >= v65)
        v73 = v177 + v28;
      else
        v73 = ClusterRangeForRange + v71;
      if (v28 > ClusterRangeForRange || ClusterRangeForRange >= v65)
      {
        v74 = v73 - v28;
        if (v28 >= v72 || ClusterRangeForRange > v28)
          v74 = 0;
      }
      else
      {
        v74 = v73 - ClusterRangeForRange;
      }
      if (v74 > 0 || v65 == ClusterRangeForRange)
      {
        v172 = 0;
      }
      else
      {
        if (!v172 || v72 != v28)
          break;
        v77 = *(_DWORD *)(*(_QWORD *)(v158[27] + 40) + 4 * v158[25] + 4 * v54);
        if ((v77 & 0x20) != 0)
          v78 = (v77 >> 12) & 1;
        else
          LOBYTE(v78) = 0;
        v172 = v78;
      }
      if (ClusterRangeForRange < v28)
        v28 = ClusterRangeForRange;
      if (v65 > v72)
        v72 = v65;
      v177 = v72 - v28;
    }
    objc_msgSend(v175, "addIndexesInRange:", v62, v63, v147);
    v79 = v173 + v33;
    if (v62 < v33)
      v33 = v62;
    if (v79 <= v64)
      v79 = v64;
    v173 = v79 - v33;
    v178 += v152;
    ++v180;
    v80 = (double *)(v167 + 8 * v54);
    if (v165 != 1)
      v80 = (double *)(v167 + 16 * v54);
    v44 = v44 + *v80;
    v30 = v55;
  }
  v81 = v158;
  v82 = v151;
  if ((v157 & 1) != 0)
    v83 = -1;
  else
    v83 = 0;
  v168 = v83;
  v170 = v158[26];
  v166 = v158;
  v84 = v173;
  v85 = v178;
  v86 = v163;
  while (1)
  {
    v82 += v150;
    v87 = v174;
    if (v82 < 0 || v170 <= v82)
    {
      v179 = v85;
      v88 = v162 + v150;
      if (v88 < 0)
        goto LABEL_165;
      if (v160 <= v88)
        goto LABEL_165;
      v89 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v176 + 2) + 8 * v88) + 40);
      if (*(_QWORD **)(v89 + 32) != v81 || *(unsigned __int8 *)(v89 + 224) != v156 || *(_DWORD *)(v89 + 304) != v155)
        goto LABEL_165;
      v90 = *(_QWORD *)(v89 + 216);
      v91 = *(_QWORD *)(v90 + 32);
      v162 += v150;
      if (v91 || (v93 = *(_QWORD *)(v90 + 24)) == 0)
      {
        v86 = v91 + 16 * *(_QWORD *)(v89 + 200);
        v92 = 2;
      }
      else
      {
        v86 = v93 + 8 * *(_QWORD *)(v89 + 200);
        v92 = 1;
      }
      v171 = v92;
      v87 = v89 + 192;
      v170 = *(_QWORD *)(v89 + 208);
      if ((v157 & 1) != 0)
        v82 = v170 - 1;
      else
        v82 = 0;
      v81 = (_QWORD *)v89;
    }
    v94 = *(_QWORD **)(v87 + 24);
    v174 = v87;
    v95 = *(const TStorageRange **)(v87 + 8);
    v96 = *(_DWORD *)(v94[5] + 4 * (_QWORD)v95 + 4 * v82);
    v97 = CharRangeForGlyphIndex(v176, (TCharStreamIterator *)&v181, v95, v94, v82);
    v99 = v97;
    v100 = v98;
    if ((v96 & 0x20) == 0)
      break;
    v114 = v177 + v28;
    if (v97 < v28)
      v28 = v97;
    v101 = v97 + v98;
    if (v114 <= v97 + v98)
      v114 = v97 + v98;
    v177 = v114 - v28;
LABEL_158:
    objc_msgSend(v175, "addIndexesInRange:", v99, v100, v147);
    v115 = v84 + v33;
    if (v99 < v33)
      v33 = v99;
    if (v115 <= v101)
      v115 = v101;
    v84 = v115 - v33;
    ++v180;
    v85 += v168;
    v116 = (double *)(v86 + 8 * v82);
    if (v171 != 1)
      v116 = (double *)(v86 + 16 * v82);
    v44 = v44 + *v116;
  }
  v164 = v86;
  v101 = v97 + v98;
  v102 = v177 + v28;
  if (v97 + v98 >= v177 + v28)
    v103 = v177 + v28;
  else
    v103 = v97 + v98;
  v104 = v28 <= v97 && v97 < v102;
  v105 = v97;
  if (v104 || v97 <= v28 && (v105 = v28, v28 < v101))
  {
    if (v103 != v105)
    {
      v151 = v82;
      v166 = v81;
LABEL_157:
      v86 = v164;
      goto LABEL_158;
    }
  }
  v179 = v85;
  v159 = v81;
  v106 = v84;
  v107 = TCharStream::GetClusterRangeForRange(v154, v97, v98, v153);
  v109 = v107;
  v110 = v107 + v108;
  if (v107 + v108 >= v102)
    v111 = v177 + v28;
  else
    v111 = v107 + v108;
  if ((v28 <= v107 && (v112 = v107, v107 < v102) || v107 <= v28 && (v112 = v28, v28 < v110)) && v111 != v112
    || objc_msgSend(v175, "countOfIndexesInRange:", v28, v177, v147) != v177)
  {
    if (v109 < v28)
      v28 = v109;
    if (v102 <= v110)
      v113 = v110;
    else
      v113 = v102;
    v177 = v113 - v28;
    v151 = v82;
    v81 = v159;
    v166 = v159;
    v84 = v106;
    v85 = v179;
    goto LABEL_157;
  }
LABEL_165:
  if (a7)
  {
    *a7 = v179;
    a7[1] = v180;
  }
  if (v147)
    *v147 = v150;
  if (a8)
  {
    v117 = (_QWORD *)v166[27];
    v118 = v117[4];
    if (v118 || (v122 = v117[3]) == 0)
    {
      v119 = 0;
      v120 = v166[25];
      v121 = v118 + 16 * v120;
    }
    else
    {
      v120 = v166[25];
      v121 = v122 + 8 * v120;
      v119 = 1;
    }
    if ((*((_WORD *)v166 + 89) & 0x40) == 0 && (*(_DWORD *)(v117[5] + 4 * v120 + 4 * v151) & 0x1446) == 0)
    {
      v126 = *(_QWORD *)(v117[6] + 8 * v120 + 8 * v151);
      v127 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v154 + 40))(v154, v126, 2);
      v128 = *((_QWORD *)v176 + 9);
      if (v128 < v127 + v129 && v127 <= v128)
        v131 = *((_QWORD *)v176 + 9);
      else
        v131 = 0;
      if (v128 <= v127 && v127 < *((_QWORD *)v176 + 10) + v128)
        v133 = v127;
      else
        v133 = v131;
      if (v133 == v126
        && (v134 = atomic_load(v166 + 7), (v135 = atomic_load((unint64_t *)(*(_QWORD *)(v134 + 40) + 168))) == 0))
      {
        v136 = 3;
        if (!v119)
          v136 = 4;
        v137 = *(double *)(v121 + (v151 << v136));
        v138 = (uint64_t *)v166[29];
        v139 = 0.0;
        if (v138)
        {
          v140 = v166[25] + v151 - v166[31];
          v141 = *v138;
          if (v140 < (*(_QWORD *)(v166[29] + 8) - v141) >> 3)
            v139 = *(double *)(v141 + 8 * v140);
        }
        v142 = v44 - (v137 - v139);
        v143 = atomic_load(v166 + 7);
        v144 = *(_QWORD *)(v143 + 40);
        v145 = *(_WORD *)(*(_QWORD *)(v166[27] + 16) + 2 * v166[25] + 2 * v151);
        RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v166 + 5));
        v195[0] = v145;
        v194 = NAN;
        TFont::GetUnsummedAdvancesForGlyphs(v144, (uint64_t)v195, &v194, 1, 1, 0, RenderingStyle);
        v44 = v142 + v194;
      }
      else
      {
        v194 = NAN;
        if (TAttributes::GetKernSetting((TAttributes *)(v166 + 5), &v194, 0))
        {
          v44 = v44 - v194;
          if (v44 < 0.0)
            v44 = 0.0;
        }
      }
    }
    if (_os_feature_enabled_impl())
    {
      if (v151 == v166[26] - 1)
      {
        v123 = COERCE_DOUBLE(TStorageRange::GetOriginalFinalAdvanceWidth((TStorageRange *)(v166 + 24)));
        if (v124)
          v44 = v123;
      }
    }
    *a8 = v44;
  }

  return v33;
}

CFIndex CharRangeForGlyphIndex(const TLine *a1, TCharStreamIterator *a2, const TStorageRange *a3, _QWORD *a4, uint64_t a5)
{
  CFIndex location;
  uint64_t v8;
  CFIndex length;
  CFIndex v10;
  CFRange v14;
  uint64_t v15;

  location = *(_QWORD *)(a4[6] + 8 * (_QWORD)a3 + 8 * a5);
  v14.length = 0xAAAAAAAAAAAAAAAALL;
  v15 = location;
  v14.location = 0xAAAAAAAAAAAAAAAALL;
  v8 = objc_msgSend(a4, "attachmentCountAtIndex:", (char *)a3 + a5);
  if (v8)
  {
    length = v8 + 1;
  }
  else
  {
    TCharStreamIterator::GetFullChar(a2, &v15, &v14);
    location = v14.location;
    length = v14.length;
  }
  v10 = *((_QWORD *)a1 + 9);
  if (v10 > location || location >= *((_QWORD *)a1 + 10) + v10)
  {
    if (location <= v10 && v10 < location + length)
      return *((_QWORD *)a1 + 9);
    else
      return 0;
  }
  return location;
}

uint64_t TCharStream::GetClusterRangeForRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a4);
  if (v8 + v9 < a2 + a3)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2 + a3 - 1, a4);
    if (v10 < v8)
      return v10;
  }
  return v8;
}

uint64_t TCharStreamCFString::GetClusterRangeAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v3;

  v3 = (const __CFString *)atomic_load((unint64_t *)(a1 + 32));
  return TCharStream::GetRangeOfCharacterClusterAtIndex(v3, a2, a3);
}

uint64_t TCharStream::GetRangeOfCharacterClusterAtIndex(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  uint64_t RangeOfCharacterClusterAtIndex;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  CFIndex Length;
  __int128 v10;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  int64_t v13;
  CFIndex v14;
  const UniChar *v15;
  int64_t v16;
  int64_t v17;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  const UniChar *v26;
  int64_t v27;
  UniChar v28;
  int64_t v30;
  CFIndex v31;
  const UniChar *v32;
  int64_t v33;
  UniChar v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  _OWORD v41[8];
  CFStringRef theString;
  const UniChar *v43;
  const char *v44;
  uint64_t v45;
  CFIndex v46;
  int64_t v47;
  int64_t v48;
  CFRange v49;
  CFRange v50;
  CFRange v51;

  RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
  v6 = RangeOfCharacterClusterAtIndex;
  v8 = v7;
  if (a3 <= 2 && (RangeOfCharacterClusterAtIndex & 0x8000000000000000) == 0)
  {
    Length = CFStringGetLength(a1);
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v41[6] = v10;
    v41[7] = v10;
    v41[4] = v10;
    v41[5] = v10;
    v41[2] = v10;
    v41[3] = v10;
    v41[0] = v10;
    v41[1] = v10;
    theString = a1;
    v45 = 0;
    v46 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    v43 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    v47 = 0;
    v48 = 0;
    v44 = CStringPtr;
    v13 = v8 + v6;
    if (v8 + v6 >= 0 && v13 < Length)
    {
      while (1)
      {
        v14 = v46;
        if (v46 <= v13)
          return v6;
        v15 = v43;
        if (v43)
        {
          v16 = v45 + v13;
        }
        else
        {
          if (v44)
            return v6;
          v17 = v47;
          if (v48 <= v13 || v47 > v13)
          {
            v19 = v13 - 4;
            if ((unint64_t)v13 < 4)
              v19 = 0;
            if (v19 + 64 < v46)
              v14 = v19 + 64;
            v47 = v19;
            v48 = v14;
            v49.location = v45 + v19;
            v49.length = v14 - v19;
            CFStringGetCharacters(theString, v49, (UniChar *)v41);
            v17 = v47;
          }
          v16 = v13 - v17;
          v15 = (const UniChar *)v41;
        }
        if (v15[v16] != 8204)
          return v6;
        v20 = v8 + 1;
        v21 = v13 + 1;
        if (v13 + 1 >= Length)
          return v6;
        v22 = CFStringGetRangeOfCharacterClusterAtIndex();
        v24 = v23;
        v25 = v46;
        if (v46 <= v21)
          goto LABEL_41;
        v26 = v43;
        if (v43)
          break;
        if (!v44)
        {
          if (v48 <= v21 || (v36 = v47, v47 > v21))
          {
            v37 = v13 - 3;
            if ((unint64_t)v21 < 4)
              v37 = 0;
            if (v37 + 64 < v46)
              v25 = v37 + 64;
            v47 = v37;
            v48 = v25;
            v50.location = v45 + v37;
            v50.length = v25 - v37;
            CFStringGetCharacters(theString, v50, (UniChar *)v41);
            v36 = v47;
          }
          v27 = v21 - v36;
          v26 = (const UniChar *)v41;
          goto LABEL_26;
        }
        v28 = v44[v45 + v21];
LABEL_30:
        if ((v28 & 0xFC00) == 0xD800 && v24 >= 2)
        {
          v30 = v13 + 2;
          v31 = v46;
          if (v46 <= v30)
            return v6;
          v32 = v43;
          if (v43)
          {
            v33 = v45 + v30;
            goto LABEL_37;
          }
          if (v44)
          {
            v34 = v44[v45 + v30];
          }
          else
          {
            if (v48 <= v30 || (v38 = v47, v47 > v30))
            {
              v39 = v30 - 4;
              if ((unint64_t)v30 < 4)
                v39 = 0;
              if (v39 + 64 < v46)
                v31 = v39 + 64;
              v47 = v39;
              v48 = v31;
              v51.location = v45 + v39;
              v51.length = v31 - v39;
              CFStringGetCharacters(theString, v51, (UniChar *)v41);
              v38 = v47;
            }
            v33 = v30 - v38;
            v32 = (const UniChar *)v41;
LABEL_37:
            v34 = v32[v33];
          }
          if ((v34 & 0xFC00) != 0xDC00)
            return v6;
        }
LABEL_41:
        if (!CFUniCharIsMemberOf())
          return v6;
        if (v22 >= v6)
          v35 = v6;
        else
          v35 = v22;
        if (v20 + v6 <= v22 + v24)
          v13 = v22 + v24;
        else
          v13 = v20 + v6;
        v8 = v13 - v35;
        if (v13 < Length)
        {
          v6 = v35;
          if ((v13 & 0x8000000000000000) == 0)
            continue;
        }
        return v35;
      }
      v27 = v45 + v21;
LABEL_26:
      v28 = v26[v27];
      goto LABEL_30;
    }
    return v6;
  }
  return v6;
}

uint64_t TAttributes::GetRenderingStyle(TAttributes *this)
{
  const __CFDictionary *v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  unsigned int valuePtr;

  if ((*((_WORD *)this + 69) & 0x80) == 0)
    return 0;
  valuePtr = 5;
  v2 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  Value = (const __CFNumber *)CFDictionaryGetValue(v2, CFSTR("CTRenderingStyle"));
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID() || v5 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
    }
    else if (v5 == CFStringGetTypeID())
    {
      valuePtr = CFStringGetIntValue((CFStringRef)v4);
    }
  }
  return valuePtr | 0x100000000;
}

void TRun::TruncateStorageRange(TRun *this, CFRange a2)
{
  CFIndex location;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int64_t v11;

  location = a2.location;
  TStorageRange::SetStorageSubRange((TRun *)((char *)this + 192), a2);
  if (location)
  {
    v4 = (_OWORD *)*((_QWORD *)this + 39);
    if (v4)
      *v4 = *MEMORY[0x1E0C9D820];
  }
  v5 = *((_QWORD *)this + 39);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 56) != *(_QWORD *)(v5 + 64) && location >= 1)
    {
      TRun::InitStretchFactors(this);
      v7 = *((_QWORD *)this + 39);
      v9 = *(_QWORD *)(v7 + 56);
      v8 = *(_BYTE **)(v7 + 64);
      v10 = (_BYTE *)(v9 + 16 * location);
      v11 = v8 - v10;
      if (v8 != v10)
        memmove(*(void **)(v7 + 56), v10, v8 - v10);
      *(_QWORD *)(v7 + 64) = v9 + v11;
    }
  }
}

BOOL TTruncator::AppendTruncatedRun(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  TRun *v17;
  uint64_t v18;
  void *v19;
  id v21;
  id v22;

  v6 = *(_QWORD *)(a1 + 8);
  if (a4 > v6)
    return 0;
  v9 = a5;
  if (a6)
  {
    v13 = a5 + a4 - 1;
    v14 = v6 < v13;
    v15 = v6 - v13;
    if (v14)
    {
      v9 = v15 + a5;
      if (v15 + a5 < 1)
        return 0;
    }
  }
  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t))(a3 + 56))(&v22, a3);
  v16 = atomic_load((unint64_t *)&v22);
  v17 = *(TRun **)(v16 + 48);
  TRun::TruncateUnorderedEnd(v17, a4, v9, a6, **(_QWORD **)(a1 + 24), 2);
  v18 = *((_QWORD *)v17 + 26);
  v7 = v18 > 0;
  if (v18 >= 1)
  {
    do
      v19 = (void *)__ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
    v21 = v19;
    TLine::AppendRun(a2, (unint64_t *)&v21);

  }
  return v7;
}

void CTGlyphRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  TCFBase_NEW<CTGlyphRun,TRun const&>((const TRun *)(a1 + 72), (unint64_t *)&v4);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

uint64_t TRun::CountCharsInWidth(TRun *this, CFRange a2, double a3, int a4)
{
  CFIndex length;
  CFIndex location;
  void *Table;
  double v10;
  double *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  BOOL v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t NextGlyphIndex;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex v36;
  uint64_t PrevGlyphIndex;
  uint64_t v38;
  CFIndex i;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t GlyphIndexForChar;

  length = a2.length;
  location = a2.location;
  Table = GetTable();
  v10 = 0.0002;
  if (Table)
  {
    v11 = (double *)*((_QWORD *)Table + 8);
    if (v11)
      v10 = *v11;
  }
  v12 = *((_QWORD *)this + 1);
  v13 = *((_QWORD *)this + 2) + v12;
  if (location + length >= v13)
    v14 = *((_QWORD *)this + 2) + v12;
  else
    v14 = location + length;
  v15 = v14 - v12;
  v16 = location <= v12 && v12 < location + length;
  if (v16)
    v17 = *((_QWORD *)this + 1);
  else
    v17 = 0;
  if (!v16)
    v15 = 0;
  v18 = v14 - location;
  if (v12 <= location && location < v13)
  {
    v20 = v18;
  }
  else
  {
    location = v17;
    v20 = v15;
  }
  v21 = *((_QWORD *)this + 27);
  v22 = *(_QWORD *)(v21 + 32);
  if (v22 || (v35 = *(_QWORD *)(v21 + 24)) == 0)
  {
    v23 = 0;
    v24 = v22 + 16 * *((_QWORD *)this + 25);
    if (a4 < 0)
      goto LABEL_44;
    goto LABEL_23;
  }
  v24 = v35 + 8 * *((_QWORD *)this + 25);
  v23 = 1;
  if ((a4 & 0x80000000) == 0)
  {
LABEL_23:
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, location);
    if (v20 < 1)
      return v20;
    NextGlyphIndex = location;
    while (1)
    {
      v26 = GlyphIndexForChar;
      if (v23)
        v27 = 3;
      else
        v27 = 4;
      v28 = (uint64_t *)*((_QWORD *)this + 29);
      v29 = 0.0;
      if (v28)
      {
        v30 = *((_QWORD *)this + 25) + GlyphIndexForChar - *((_QWORD *)this + 31);
        v31 = *v28;
        if (v30 < (*(_QWORD *)(*((_QWORD *)this + 29) + 8) - v31) >> 3)
          v29 = *(double *)(v31 + 8 * v30);
      }
      v32 = *(double *)(v24 + (GlyphIndexForChar << v27)) - v29;
      if (v32 - a3 > v10)
        return NextGlyphIndex - location;
      if (*((int *)this + 64) > 1)
      {
        NextGlyphIndex = TRun::FindNextGlyphIndex(this, NextGlyphIndex, &GlyphIndexForChar);
      }
      else if ((*((_BYTE *)this + 224) & 1) != 0)
      {
        v34 = --GlyphIndexForChar;
        if (v26 <= 0)
        {
LABEL_39:
          NextGlyphIndex = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
          goto LABEL_40;
        }
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v34);
      }
      else
      {
        v33 = GlyphIndexForChar + 1;
        GlyphIndexForChar = v33;
        if (v33 >= *((_QWORD *)this + 26))
          goto LABEL_39;
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v33);
      }
LABEL_40:
      a3 = a3 - v32 - v29;
      if (NextGlyphIndex >= location + v20)
        return v20;
    }
  }
LABEL_44:
  v36 = location + v20;
  PrevGlyphIndex = TRun::ResolveCharIndex(this, location + v20 - 1);
  GlyphIndexForChar = v38;
  for (i = location + v20; PrevGlyphIndex >= location; i = v40)
  {
    v40 = PrevGlyphIndex;
    v41 = GlyphIndexForChar;
    v42 = v23 ? *(double *)(v24 + 8 * GlyphIndexForChar) : *(double *)(v24 + 16 * GlyphIndexForChar);
    if (v42 - a3 > v10)
      break;
    if (*((int *)this + 64) > 1 || (*((_BYTE *)this + 224) & 1) != 0)
    {
      PrevGlyphIndex = TRun::FindPrevGlyphIndex(this, PrevGlyphIndex, &GlyphIndexForChar);
    }
    else
    {
      v43 = --GlyphIndexForChar;
      if (v41 <= 0)
        PrevGlyphIndex = *((_QWORD *)this + 1) - 1;
      else
        PrevGlyphIndex = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v43);
    }
    a3 = a3 - v42;
  }
  return v36 - i;
}

_QWORD *std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__emplace_unique_key_args<TRun const*,std::piecewise_construct_t const&,std::tuple<TRun const* const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v10) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void TLine::SimpleRunDelete(TLine *this, uint64_t a2)
{
  id *v3;
  id *v4;
  int64_t v5;

  v3 = (id *)(*((_QWORD *)this + 2) + 8 * a2);

  v4 = (id *)*((_QWORD *)this + 3);
  v5 = (char *)v4 - (char *)(v3 + 1);
  if (v4 != v3 + 1)
    memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
  *((_QWORD *)this + 3) = (char *)v3 + v5;
}

void std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t TJustEngine::ReconciledRangeForLines(uint64_t this, CFRange a2, const TLine *a3, const TLine *a4)
{
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)a3 + 18);
  v5 = this + a2.location;
  v6 = *(_QWORD *)(a2.length + 144);
  v7 = a2.location - v4 + v6;
  if (v5 < v4)
  {
    v8 = *((_QWORD *)a3 + 2);
    v9 = *((_QWORD *)a3 + 3);
    v10 = *(_QWORD *)(a2.length + 16);
    v11 = *(_QWORD *)(a2.length + 24);
    do
    {
      if (v8 == v9)
      {
        v16 = 0xAAAAAAAAAAAAAAAALL;
        v13 = v8;
      }
      else
      {
        v12 = 0;
        v13 = v8;
        v14 = v8;
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 40) + 208) + v12;
          if (v15 > v5)
            break;
          v14 += 8;
          v13 += 8;
          v12 = v15;
          if (v14 == v9)
          {
            v16 = 0xAAAAAAAAAAAAAAAALL;
            v13 = v9;
            goto LABEL_10;
          }
        }
        v16 = v5 - v12;
      }
LABEL_10:
      v17 = (v13 - v8) >> 3;
      if (v17 >= (v9 - v8) >> 3)
        break;
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 8 * v17) + 40);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 216) + 40) + 4 * *(_QWORD *)(v18 + 200) + 4 * v16) & 0x20) == 0
        || v7 + this >= v6)
      {
        break;
      }
      if (v10 == v11)
      {
        v20 = v10;
      }
      else
      {
        v19 = 0;
        v20 = v10;
        v21 = v10;
        while (1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 208) + v19;
          if (v22 > v5)
            break;
          v21 += 8;
          v20 += 8;
          v19 = v22;
          if (v21 == v11)
          {
            v20 = v11;
            goto LABEL_20;
          }
        }
        v16 = v5 - v19;
      }
LABEL_20:
      v23 = (v20 - v10) >> 3;
      if (v23 >= (v11 - v10) >> 3)
        break;
      v24 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * v23) + 40);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 216) + 40) + 4 * *(_QWORD *)(v24 + 200) + 4 * v16) & 0x20) != 0)
        break;
      ++v7;
      ++v5;
    }
    while (v5 < v4);
  }
  return this;
}

void std::vector<double,TInlineBufferAllocator<double,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double,TInlineBufferAllocator<double,30ul>>::__append((char **)a1, a2 - v2);
  }
}

CFIndex TLine::GetUnanchoredGlyphRange(TLine *this, CFRange a2)
{
  __int16 v2;
  CFIndex location;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TabGlyph;
  uint64_t v20;
  CFIndex v21;
  uint64_t v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex v32;
  uint64_t v33;
  CFIndex v34;

  v2 = *((_WORD *)this + 76);
  if ((v2 & 2) != 0)
  {
    location = a2.length + a2.location - 1;
    v4 = *((_QWORD *)this + 2);
    v5 = *((_QWORD *)this + 3);
    if ((v2 & 8) != 0)
    {
      v7 = (v5 - v4) >> 3;
      v6 = -1;
      v8 = a2.length + a2.location - 1;
      location = a2.location;
    }
    else
    {
      v6 = 1;
      v7 = -1;
      v8 = a2.location;
    }
    v34 = a2.location;
    v32 = v8;
    if (v4 == v5)
    {
LABEL_9:
      v12 = 0;
      v10 = *((_QWORD *)this + 3);
    }
    else
    {
      v9 = 0;
      v10 = *((_QWORD *)this + 2);
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 40) + 208) + v9;
        if (v11 > location)
          break;
        v10 += 8;
        v9 = v11;
        if (v10 == v5)
          goto LABEL_9;
      }
      v12 = location - v9;
    }
    v13 = (v10 - v4) >> 3;
    v14 = *(_QWORD *)(*(_QWORD *)v10 + 40);
    v15 = -v6;
    v16 = v6;
    v17 = v4 - 8 * v6;
    v33 = v7;
    v18 = -(v7 + v6);
    while (1)
    {
      if ((*(_BYTE *)(v14 + 225) & 1) != 0)
      {
        TabGlyph = TStorageRange::FindTabGlyph((TStorageRange *)(v14 + 192), v12, v15, 0);
        if ((TabGlyph & 0x8000000000000000) == 0)
          break;
      }
      if (!(v18 + v13))
      {
        a2.location = v34;
        return a2.location;
      }
      v12 = 0;
      v20 = v13 - v16;
      v14 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v13) + 40);
      v13 -= v16;
      if ((v2 & 8) == 0)
      {
        v12 = *(_QWORD *)(v14 + 208) - 1;
        v13 = v20;
      }
    }
    a2.location = v34;
    if (v13 != v33)
    {
      if (v4 == v5)
      {
LABEL_23:
        v22 = v5;
      }
      else
      {
        v21 = 0;
        v22 = v4;
        while (1)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 40) + 208) + v21;
          if (v23 > v32)
            break;
          v22 += 8;
          v21 = v23;
          if (v22 == v5)
            goto LABEL_23;
        }
        v12 = v32 - v21;
      }
      v24 = v22 - v4;
      if (v13 == v24 >> 3)
      {
        v26 = 0;
      }
      else
      {
        v25 = v24 >> 3;
        if ((v2 & 8) != 0)
          v26 = v12 + 1;
        else
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8 * v25) + 40) + 208) - v12;
        for (i = v25 + v16; v13 != i; i += v16)
        {
          if (i < 0)
            break;
          if ((v5 - v4) >> 3 <= i)
            break;
          v26 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8 * i) + 40) + 208);
        }
      }
      if ((v2 & 8) != 0)
        v28 = *(_QWORD *)(v14 + 208) - TabGlyph;
      else
        v28 = TabGlyph + 1;
      v29 = v28 + v26;
      if ((v2 & 8) != 0)
        v30 = 0;
      else
        v30 = v29;
      a2.location = v30 + v34;
    }
  }
  return a2.location;
}

uint64_t TJustEngine::DistributeGap(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7, uint64_t a8, double a9, double *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  double *v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  __int16 v38;
  double v39;
  double v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  TStorageRange *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  double *v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v94[4];
  _OWORD v95[5];

  v10 = a7;
  v11 = a3;
  v12 = a2;
  v13 = result;
  memset(v94, 0, sizeof(v94));
  v14 = a3 + a4;
  memset(v95, 0, 64);
  if (a4 >= 1)
  {
    v15 = (double *)(a7 + 24 * a3 + 16);
    v16 = 0.0;
    v17 = a3;
    do
    {
      v18 = *(unsigned __int16 *)v15;
      if (v18 != 4)
      {
        v19 = *(v15 - 2) + *(v15 - 1);
        *((double *)v95 + v18) = *((double *)v95 + v18) + v19;
        v16 = v16 + v19;
        if (*((_BYTE *)v15 + 2))
          *((double *)&v95[2] + v18) = v19 + *((double *)&v95[2] + v18);
      }
      ++v17;
      v15 += 3;
    }
    while (v17 < v14);
    if (a5)
    {
      v20 = (double *)(a7 + 24 * a3 + 8);
      v21 = a3;
      do
      {
        *v20 = *(v20 - 1) + *v20;
        *(v20 - 1) = 0.0;
        ++v21;
        v20 += 3;
      }
      while (v21 < v14);
      goto LABEL_20;
    }
LABEL_12:
    v22 = v14 - 1;
    v23 = a7 + 24 * (v14 - 1);
    v25 = *(double *)(v23 + 8);
    v24 = (_QWORD *)(v23 + 8);
    v26 = v25;
    if (v25 != 0.0)
    {
      v27 = a7 + 24 * v22;
      v28 = *(unsigned __int8 *)(v27 + 18);
      v29 = *(unsigned __int16 *)(v27 + 16);
      if (v28)
        *((double *)&v95[2] + v29) = *((double *)&v95[2] + v29) - v26;
      v16 = v16 - v26;
      *((double *)v95 + v29) = *((double *)v95 + v29) - v26;
      *v24 = 0;
    }
    v30 = (double *)(a7 + 24 * a3);
    v31 = *v30;
    if (*v30 != 0.0)
    {
      v32 = a7 + 24 * a3;
      v33 = *(unsigned __int8 *)(v32 + 18);
      v34 = *(unsigned __int16 *)(v32 + 16);
      if (v33)
        *((double *)&v95[2] + v34) = *((double *)&v95[2] + v34) - v31;
      v16 = v16 - v31;
      *((double *)v95 + v34) = *((double *)v95 + v34) - v31;
      *v30 = 0.0;
    }
    goto LABEL_20;
  }
  v16 = 0.0;
  if (!a5)
    goto LABEL_12;
LABEL_20:
  v35 = 0;
  v36 = 0;
  v37 = a9;
  v38 = -1;
  do
  {
    v39 = *(double *)((char *)v95 + v35);
    if (v39 != 0.0)
    {
      if (fabs(v37) <= fabs(v39))
      {
        *(double *)((char *)v94 + v35) = v37 / v39;
        goto LABEL_35;
      }
      if (v38 == -1)
        v38 = v36;
      *(_QWORD *)((char *)v94 + v35) = 0x3FF0000000000000;
      v37 = v37 - v39;
      v40 = *(double *)((char *)&v95[2] + v35);
      if (v40 != 0.0)
      {
        *(double *)((char *)&v94[2] + v35) = v37 / v40;
        goto LABEL_35;
      }
    }
    ++v36;
    v35 += 8;
  }
  while (v36 != 4);
  if (((a6 & 1) != 0 && v37 > 0.0 || (a6 & 1) == 0 && v37 != 0.0) && v38 != -1)
    *((double *)v94 + v38) = (a9 - v16 + *((double *)v95 + v38)) / *((double *)v95 + v38);
LABEL_35:
  if (result != a2)
  {
    while (1)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 40) + 208);
      if (v11 < v41)
        break;
      v10 += 24 * v41;
      a8 += 8 * v41;
      v13 += 8;
      v11 -= v41;
      if (v13 == a2)
        return result;
    }
  }
  if (v13 != a2)
  {
    v42 = 0;
    do
    {
      v43 = *(_QWORD *)(*(_QWORD *)v13 + 48);
      v44 = *(_QWORD *)(v43 + 208);
      v45 = v11 & ~(v11 >> 63);
      v46 = v11 + a4;
      if (v11 + a4 >= v44)
        v46 = *(_QWORD *)(v43 + 208);
      v47 = v46 < v45;
      v48 = v46 - v45;
      if (v47)
      {
        v48 = 0;
        v49 = 0;
      }
      else
      {
        v49 = v11 & ~(v11 >> 63);
      }
      if (v48 >= 1)
      {
        v89 = v42;
        v90 = v11;
        v50 = *(_QWORD *)(v43 + 216);
        v51 = *(_QWORD *)(v50 + 32);
        v91 = v13;
        v87 = *(_QWORD *)(v43 + 208);
        if (v51 || (v54 = *(_QWORD *)(v50 + 24)) == 0)
        {
          v52 = 0;
          v53 = v51 + 16 * *(_QWORD *)(v43 + 200);
        }
        else
        {
          v53 = v54 + 8 * *(_QWORD *)(v43 + 200);
          v52 = 1;
        }
        v88 = *(_QWORD *)(*(_QWORD *)v13 + 48);
        v55 = (TStorageRange *)(v43 + 192);
        v56 = v49 + v48;
        v57 = v53 - 8 + 8 * (v49 + v48);
        v58 = v49 + v48 - 1;
        v59 = (uint64_t *)(v53 - 8 + 16 * (v49 + v48));
        v92 = v10;
        v60 = (double *)(v10 + 24 * (v49 + v48) - 8);
        v61 = 0.0;
        do
        {
          v62 = *(unsigned __int16 *)v60;
          v63 = *((double *)v94 + v62);
          v65 = *(v60 - 2);
          v64 = *(v60 - 1);
          v66 = v64 * v63;
          v67 = v63 * v65;
          if (*((_BYTE *)v60 + 2))
          {
            v68 = *((double *)&v94[2] + v62);
            v66 = v66 + v64 * v68;
            v67 = v67 + v65 * v68;
          }
          --v56;
          *(double *)(a8 + 8 * v58) = v66 + v67;
          v69 = 0;
          v70 = (double *)v57;
          if ((v52 & 1) == 0)
          {
            v70 = (double *)(v53 + 16 * v56);
            v69 = *v59;
          }
          v71 = v61 + v66;
          if (v61 + v66 != 0.0)
          {
            v72 = v71 + *v70;
            result = TStorageRange::SetAdvance(v55, v58, *(CGSize *)(&v69 - 1));
            v73 = v71 + *a10;
            v74 = a10[1] + *a10 - (v73 - v71) + v71 - (v73 - (v73 - v71));
            *a10 = v73;
            a10[1] = v74;
          }
          v60 -= 3;
          v57 -= 8;
          v59 -= 2;
          v61 = v67;
          v47 = v58-- <= v49;
        }
        while (!v47);
        v42 = v89;
        v11 = v90;
        v75 = v67 == 0.0 || v89 == 0;
        v13 = v91;
        v10 = v92;
        v12 = a2;
        v44 = v87;
        v43 = v88;
        if (!v75)
        {
          v76 = v89[27];
          v77 = v89[26] - 1;
          v78 = *(_QWORD *)(v76 + 32);
          if (v78 || (v81 = *(_QWORD *)(v76 + 24)) == 0)
          {
            v79 = v78 + 16 * v89[25] + 16 * v77;
            v80 = *(_QWORD *)(v79 + 8);
          }
          else
          {
            v79 = v81 + 8 * v89[25] + 8 * v77;
            v80 = 0;
          }
          v82 = v67 + *(double *)v79;
          result = TStorageRange::SetAdvance((TStorageRange *)(v89 + 24), v77, *(CGSize *)(&v80 - 1));
          v83 = v67 + *a10;
          v84 = a10[1] + *a10 - (v83 - v67) + v67 - (v83 - (v83 - v67));
          *a10 = v83;
          a10[1] = v84;
        }
      }
      v10 += 24 * v44;
      a8 += 8 * v44;
      if ((*(_WORD *)(v43 + 178) & 0x40) == 0)
        v42 = (_QWORD *)v43;
      v11 -= v44;
      v13 += 8;
    }
    while (v13 != v12);
  }
  return result;
}

void CTRunGetStringIndices(CTRunRef run, CFRange range, CFIndex *buffer)
{
  uint64_t v3;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex length;
  uint64_t v13;
  CFIndex v15;
  _QWORD *v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (run && buffer)
  {
    v3 = *((_QWORD *)run + 5);
    if ((*(_BYTE *)(v3 + 225) & 8) != 0)
    {
      v7 = *(_QWORD *)(v3 + 208);
      v6 = *(_QWORD *)(v3 + 216);
      v8 = *(_QWORD *)(v3 + 200);
      v9 = *(_QWORD *)(v6 + 48) + 8 * v8;
      v10 = *(_QWORD *)(v3 + 264);
      v22[0] = &off_1E15DF128;
      v22[1] = buffer;
      v22[2] = v9;
      v23 = v22;
      v11 = *(_QWORD *)(v6 + 16) + 2 * v8;
      if (range.length)
        length = range.length;
      else
        length = v7;
      v13 = 0;
      if (v7 >= 1 && range.location >= 1)
      {
        v15 = 0;
        do
        {
          if (v10 == v13 || *(__int16 *)(v11 + 2 * v13) != -1)
            ++v15;
          ++v13;
        }
        while (v13 < v7 && v15 < range.location);
      }
      v17 = v22;
      v18 = 4;
      if (v13 < v7 && length >= 1)
      {
        v19 = 0;
        do
        {
          if (v10 == v13 || *(unsigned __int16 *)(v11 + 2 * v13) != 0xFFFF)
          {
            v20 = v19;
            v21 = v13;
            if (!v23)
              std::__throw_bad_function_call[abi:nn180100]();
            (*(void (**)(_QWORD *, uint64_t *, CFIndex *))(*v23 + 48))(v23, &v21, &v20);
            ++v19;
          }
          ++v13;
        }
        while (v13 < v7 && v19 < length);
        v17 = v23;
        if (v23 == v22)
        {
          v18 = 4;
          v17 = v22;
        }
        else
        {
          if (!v23)
            return;
          v18 = 5;
        }
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
    else if ((range.location & 0x8000000000000000) == 0)
    {
      v4 = *(_QWORD *)(v3 + 208);
      if (range.location + range.length <= v4)
      {
        v5 = v4 - range.location;
        if (range.length)
          v5 = range.length;
        if (v5)
          memmove(buffer, (const void *)(*(_QWORD *)(*(_QWORD *)(v3 + 216) + 48) + 8 * *(_QWORD *)(v3 + 200) + 8 * range.location), 8 * v5);
      }
    }
  }
}

unsigned int CTFontGetUnitsPerEm(CTFontRef font)
{
  int *v1;
  int *inited;

  if (!font)
    return 1000;
  v1 = (int *)*((_QWORD *)font + 5);
  if (v1[12])
    inited = v1 + 12;
  else
    inited = TFont::InitStrikeMetrics((TFont *)v1);
  return *inited;
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  const __CTFontDescriptor *v3;
  const __CTFontDescriptor *v4;
  const __CTFont *v5;

  v3 = (const __CTFontDescriptor *)CTFontDescriptorCreateForUIType(*(TDescriptorSource **)&uiType, language, size);
  v4 = v3;
  if (v3)
    v5 = CTFontCreateWithFontDescriptor(v3, 0.0, 0);
  else
    v5 = 0;

  return v5;
}

unint64_t CTFontDescriptorCreateForUIType(TDescriptorSource *a1, const __CFString *a2, double a3)
{
  unint64_t v6;
  uint64_t v8;
  id v9;

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
  TDescriptorSource::CreateDescriptorForUIType(a1, a3, a2, (unint64_t *)&v9);
  do
    v6 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  return v6;
}

uint64_t TAttributes::HandleUnderlineAttribute(uint64_t result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  int v5;
  int valuePtr;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    valuePtr = -1431655766;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      result = CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      v5 = valuePtr;
    }
    else
    {
      result = CFStringGetTypeID();
      if (v4 != result)
        return result;
      result = CFStringGetIntValue((CFStringRef)v3);
      v5 = result;
      valuePtr = result;
    }
    if ((_BYTE)v5)
    {
      result = TAttributes::EnsureRareData(*a2);
      *(_DWORD *)(result + 56) = v5;
      *((_BYTE *)*a2 + 137) |= 4u;
    }
  }
  return result;
}

CFTypeID TAttributes::HandleTrackingAttribute(CFTypeID result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  double v5;
  double valuePtr;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    valuePtr = NAN;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
    }
    else
    {
      result = CFStringGetTypeID();
      if (v4 != result)
        return result;
      valuePtr = CFStringGetDoubleValue((CFStringRef)v3);
    }
    result = TAttributes::EnsureRareData(*a2);
    v5 = valuePtr;
    *(double *)(result + 16) = valuePtr;
    *(_BYTE *)(result + 24) = 1;
    if (v5 != 0.0)
      *((_WORD *)*a2 + 69) |= 0x100u;
  }
  return result;
}

const __CFNumber *TAttributes::HandleKernAttribute(const __CFNumber *result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  double DoubleValue;
  uint64_t valuePtr;

  if (result)
  {
    v3 = result;
    valuePtr = -1;
    v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
      DoubleValue = *(double *)&valuePtr;
LABEL_5:
      result = (const __CFNumber *)TAttributes::EnsureRareData(*a2);
      *(double *)result = DoubleValue;
      *((_BYTE *)result + 8) = 1;
      return result;
    }
    result = (const __CFNumber *)CFStringGetTypeID();
    if ((const __CFNumber *)v4 == result)
    {
      DoubleValue = CFStringGetDoubleValue((CFStringRef)v3);
      valuePtr = *(_QWORD *)&DoubleValue;
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t TAttributes::EnsureRareData(TAttributes *this)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 120;
  result = *((_QWORD *)this + 15);
  if (!result)
  {
    result = operator new();
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = result;
    if (v3)
    {
      std::default_delete<TAttributes::RareData>::operator()[abi:nn180100]((uint64_t)v2, v3);
      return *(_QWORD *)v2;
    }
  }
  return result;
}

uint64_t CTFontHasTable(uint64_t a1, int a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 472))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 400));
  else
    return 0;
}

CGFloat CTFontGetUnderlineThickness(CTFontRef font)
{
  double v1;

  if (!font)
    return 0.0;
  TFont::GetUnderlinePositionAndThickness(*((TFont **)font + 5));
  return v1;
}

CGFloat CTFontGetUnderlinePosition(CTFontRef font)
{
  if (font)
    return TFont::GetUnderlinePositionAndThickness(*((TFont **)font + 5));
  else
    return 0.0;
}

double TFont::GetUnderlinePositionAndThickness(TFont *this)
{
  uint64_t v2;
  __int128 v3;
  double v4;
  int *v5;
  int *inited;
  double v7;
  double v8;
  CGAffineTransform v10;

  v2 = *((_QWORD *)this + 50);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)&v10.c = v3;
  *(_OWORD *)&v10.tx = v3;
  *(_OWORD *)&v10.a = v3;
  TFont::GetScaledMatrix(this, &v10);
  v4 = (*(double (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v2 + 584))(v2, &v10);
  if ((*(double (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v2 + 592))(v2, &v10) <= 0.0)
  {
    v5 = (int *)((char *)this + 48);
    inited = (int *)((char *)this + 48);
    if (!*((_DWORD *)this + 12))
      inited = TFont::InitStrikeMetrics(this);
    v7 = *((double *)inited + 2);
    if (!*v5)
      v5 = TFont::InitStrikeMetrics(this);
    v8 = ceil(v7 + *((double *)v5 + 3)) * 5.3636991;
    if (v4 >= 0.0)
      return v8 * -0.0880554625;
  }
  return v4;
}

CGFloat TBaseFont::GetUnderlineThickness(TBaseFont *this, const CGAffineTransform *a2)
{
  double v3;

  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlineThickness();
  return a2->ty + v3 * a2->d + a2->b * 0.0;
}

CGFloat TBaseFont::GetUnderlinePosition(TBaseFont *this, const CGAffineTransform *a2)
{
  double v3;

  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlinePosition();
  return a2->ty + v3 * a2->d + a2->b * 0.0;
}

CFComparisonResult CompareLocalizedDescriptorsByTraitsAndPrecedence(_QWORD *a1, _QWORD *a2, void *a3, int a4, int a5, int a6)
{
  CFComparisonResult v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  BOOL v14;
  int v15;
  void *v16;
  unint64_t v18;
  void *v19;
  void *v20;
  unint64_t v22;
  void *v23;
  const __CFString *v24;
  const __CFString *v25;
  int v26;
  int v27;
  unint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unint64_t TraitsValues;
  unint64_t v39;
  double v40;
  double v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  double OpticalSize;
  double v47;
  BOOL v48;
  unint64_t v49;
  unsigned int v50;
  double v51;
  double v52;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;

  v6 = kCFCompareEqualTo;
  if (!a2 || !a1 || a1 == a2)
    return v6;
  v10 = a1[5];
  v11 = a2[5];
  if ((*(_DWORD *)(v10 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)a1[5], 0, 0.0);
  v12 = (unint64_t *)atomic_load((unint64_t *)(v10 + 32));
  if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v11, 0, 0.0);
  v13 = (unint64_t *)atomic_load((unint64_t *)(v11 + 32));
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v65 = (id)0xAAAAAAAAAAAAAAAALL;
    if (a4)
      TDescriptor::CopyAttribute((TDescriptor *)v10, 0, 2, &v64);
    else
      v64 = 0;
    do
      v16 = (void *)__ldaxr((unint64_t *)&v64);
    while (__stlxr(0, (unint64_t *)&v64));
    v65 = v16;

    if (!atomic_load((unint64_t *)&v65))
    {
      TDescriptor::CopyAttribute((TDescriptor *)v10, CFSTR("NSFontVisibleNameAttribute"), 2, &v64);
      do
        v18 = __ldaxr((unint64_t *)&v64);
      while (__stlxr(0, (unint64_t *)&v64));
      do
        v19 = (void *)__ldaxr((unint64_t *)&v65);
      while (__stlxr(v18, (unint64_t *)&v65));

    }
    v64 = (id)0xAAAAAAAAAAAAAAAALL;
    if (a4)
      TDescriptor::CopyAttribute((TDescriptor *)v11, 0, 2, &v61);
    else
      v61 = 0;
    do
      v20 = (void *)__ldaxr((unint64_t *)&v61);
    while (__stlxr(0, (unint64_t *)&v61));
    v64 = v20;

    if (!atomic_load((unint64_t *)&v64))
    {
      TDescriptor::CopyAttribute((TDescriptor *)v11, CFSTR("NSFontVisibleNameAttribute"), 2, &v61);
      do
        v22 = __ldaxr((unint64_t *)&v61);
      while (__stlxr(0, (unint64_t *)&v61));
      do
        v23 = (void *)__ldaxr((unint64_t *)&v64);
      while (__stlxr(v22, (unint64_t *)&v64));

    }
    v24 = (const __CFString *)atomic_load((unint64_t *)&v65);
    v25 = (const __CFString *)atomic_load((unint64_t *)&v64);
    if (v24 == v25)
    {
      v6 = kCFCompareEqualTo;
    }
    else if (v24 && v25)
    {
      v6 = CFStringCompare(v24, v25, 0x61uLL);
    }
    else if (v24 < v25)
    {
      v6 = kCFCompareLessThan;
    }
    else
    {
      v6 = kCFCompareGreaterThan;
    }
    goto LABEL_42;
  }
  if (a5)
  {
    if (((*(uint64_t (**)(unint64_t *))(*v12 + 848))(v12) & 1) != 0)
      v15 = -1;
    else
      v15 = (*(uint64_t (**)(unint64_t *))(*v12 + 696))(v12);
    if (((*(uint64_t (**)(unint64_t *))(*v13 + 848))(v13) & 1) != 0)
      v26 = 1;
    else
      v26 = (int)((*(unsigned int (**)(unint64_t *))(*v13 + 696))(v13) << 31) >> 31;
    v27 = v26 + v15;
    if (v27 >= 1)
      v27 = 1;
    if (v27 < 0)
      v27 = -1;
    if (v27)
      return (uint64_t)v27;
    v65 = (id)0xAAAAAAAAAAAAAAAALL;
    v28 = *v12;
    if (a4)
    {
      (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *, _QWORD, _QWORD))(v28 + 88))(&v65, v12, CFSTR("CTFontFamilyName"), 0, 0);
      v64 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *, _QWORD, _QWORD))(*v13 + 88))(&v64, v13, CFSTR("CTFontFamilyName"), 0, 0);
    }
    else
    {
      (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *))(v28 + 72))(&v65, v12, CFSTR("CTFontFamilyName"));
      v64 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *))(*v13 + 72))(&v64, v13, CFSTR("CTFontFamilyName"));
    }
    v29 = (const __CFString *)atomic_load((unint64_t *)&v65);
    v30 = (const __CFString *)atomic_load((unint64_t *)&v64);
    if (v29 == v30)
    {
      v6 = kCFCompareEqualTo;
    }
    else if (v29 && v30)
    {
      v6 = CFStringCompare(v29, v30, 0x61uLL);
    }
    else
    {
      v6 = v29 < v30 ? kCFCompareLessThan : kCFCompareGreaterThan;
    }

    if (v6)
      return v6;
  }
  v31 = (*(uint64_t (**)(unint64_t *))(*v12 + 16))(v12);
  v32 = (*(uint64_t (**)(unint64_t *))(*v13 + 16))(v13);
  v33 = *v12;
  if (v31 != v32)
  {
    v50 = (*(uint64_t (**)(unint64_t *))(v33 + 16))(v12);
    v36 = v50 > (*(unsigned int (**)(unint64_t *))(*v13 + 16))(v13);
LABEL_83:
    if (v36)
      return 1;
    else
      return -1;
  }
  v34 = (*(uint64_t (**)(unint64_t *))(v33 + 160))(v12);
  v35 = (*(uint64_t (**)(unint64_t *))(*v13 + 160))(v13);
  v36 = (v34 & 0xFFFFF9C) > (v35 & 0xFFFFF9C);
  if ((v34 & 0xFFFFF9C) != (v35 & 0xFFFFF9C))
    goto LABEL_83;
  v37 = v35;
  TraitsValues = atomic_load(v12 + 30);
  if (!TraitsValues)
    TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v12);
  v39 = atomic_load(v13 + 30);
  if (!v39)
    v39 = TBaseFont::CreateTraitsValues((TBaseFont *)v13);
  v40 = *(double *)(TraitsValues + 16);
  v41 = *(double *)(v39 + 16);
  if (vabdd_f64(v40, v41) >= 0.001)
    goto LABEL_86;
  if (vabdd_f64(*(double *)(TraitsValues + 8), *(double *)(v39 + 8)) >= 0.001)
  {
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
    if (Predefined
      && (v55 = Predefined, NameHasCharacterFromSet((const TBaseFont *)v12, CFSTR("CTFontSubFamilyName"), a4, Predefined))&& NameHasCharacterFromSet((const TBaseFont *)v13, CFSTR("CTFontSubFamilyName"), a4, v55))
    {
      v51 = *(double *)(TraitsValues + 8);
      v52 = *(double *)(v39 + 8);
    }
    else
    {
      v51 = *(double *)(TraitsValues + 8);
      v52 = *(double *)(v39 + 8);
      if (a6)
      {
        if (fabs(v51) >= 0.001)
          v51 = v51 + 10.0;
        if (fabs(v52) >= 0.001)
          v52 = v52 + 10.0;
      }
    }
    goto LABEL_87;
  }
  v40 = *(double *)(TraitsValues + 24);
  v41 = *(double *)(v39 + 24);
  if (vabdd_f64(v40, v41) >= 0.001)
  {
LABEL_86:
    v51 = fabs(v40);
    v52 = fabs(v41);
LABEL_87:
    v48 = v51 <= v52;
LABEL_88:
    if (v48)
      return -1;
    else
      return 1;
  }
  v42 = v34 >> 28;
  if (v34 >> 28 > 0xC)
    v42 = 0;
  v43 = ClassifyReduceTraitsClass::order[v42];
  v44 = v37 >> 28;
  if (v37 >> 28 > 0xC)
    v44 = 0;
  v45 = ClassifyReduceTraitsClass::order[v44];
  if (v43 == v45)
  {
    OpticalSize = GetOpticalSize((const TBaseFont *)v12);
    v47 = GetOpticalSize((const TBaseFont *)v13);
    v48 = OpticalSize <= v47;
    if (OpticalSize == v47)
    {
      v65 = (id)0xAAAAAAAAAAAAAAAALL;
      v49 = *v12;
      if (a4)
      {
        (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *, _QWORD, _QWORD))(v49 + 88))(&v65, v12, CFSTR("CTFontFullName"), 0, 0);
        v64 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *, _QWORD, _QWORD))(*v13 + 88))(&v64, v13, CFSTR("CTFontFullName"), 0, 0);
      }
      else
      {
        (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *))(v49 + 72))(&v65, v12, CFSTR("CTFontFullName"));
        v64 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, unint64_t *, const __CFString *))(*v12 + 72))(&v64, v12, CFSTR("CTFontFullName"));
      }
      v56 = (void *)atomic_load((unint64_t *)&v65);
      v63 = v56;
      v57 = (void *)atomic_load((unint64_t *)&v64);
      v62 = v57;
      v6 = StringCompare<TCFRef<__CFString const*>,TCFRef<__CFString const*>>((unint64_t *)&v63, (unint64_t *)&v62);

      if (v6 == kCFCompareEqualTo)
      {
        v58 = (*(uint64_t (**)(unint64_t *))(*v12 + 256))(v12);
        v59 = (*(uint64_t (**)(unint64_t *))(*v13 + 256))(v13);
        v60 = -1;
        if (v58 <= v59)
          v60 = 1;
        if (v58 == v59)
          v6 = kCFCompareEqualTo;
        else
          v6 = v60;
      }
LABEL_42:

      return v6;
    }
    goto LABEL_88;
  }
  if (v43 > v45)
    return 1;
  else
    return -1;
}

void TBaseFont::CreateTraitsValuesPerFontInfo(unint64_t *a1@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFString *v6;
  unint64_t v7;
  void *v8;
  CFMutableDictionaryRef Mutable;
  int v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  void *v15;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  void *Value;
  int v20;
  __CFString *v21;
  const void *v22;
  const __CFNumber *v23;
  __CFString *v24;
  int v25;
  void *v26;
  const __CFNumber *v27;
  CFTypeID v28;
  double DoubleValue;
  char v30;
  const void *v31;
  double v32;
  CFTypeID v33;
  void *v34;
  float v35;
  double v36;
  __CFString *v37;
  CFTypeID v38;
  unint64_t v39;
  __CFString *v40;
  char v41;
  CFTypeID v42;
  char v43;
  int v44;
  char v45;
  _BOOL4 v46;
  _BOOL4 v47;
  int v48;
  unint64_t v49;
  __CFString *v50;
  double v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  double v56;
  uint64_t TraitsFromSubfamilyName;
  int IsFixedPitch;
  CGFont *InitializedGraphicsFont;
  int v60;
  double v61;
  int v62;
  __CFDictionary *v63;
  const void *v64;
  double v65;
  __CFDictionary *v66;
  const void *v67;
  double v68;
  __CFDictionary *v69;
  const void *v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  __CFDictionary *v75;
  const void *v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  id v83;
  id valuePtr[3];
  id v85;
  double v86;
  double v87;
  double v88;
  id v89;

  if ((TBaseFont::SkipMetadata((TBaseFont *)a1) & 1) == 0)
  {
    *a3 = 0;
    v6 = (const __CFString *)atomic_load(a1 + 12);
    CopyAttributeForSystemFont(v6, CFSTR("NSCTFontTraitsAttribute"), (const __CFString **)valuePtr);
    do
      v7 = __ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));
    do
      v8 = (void *)__ldaxr(a3);
    while (__stlxr(v7, a3));

    if (atomic_load(a3))
    {
      *a2 = 1;
      return;
    }

  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v88 = 2.0;
  v89 = Mutable;
  v86 = 2.0;
  v87 = 2.0;
  v85 = 0;
  if (a1
    && ((v11 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1), v11 != 1414809156)
      ? (v12 = v11 == 1413695044)
      : (v12 = 1),
        v12))
  {
    TBaseFont::CopyNativeFont((TBaseFont *)a1, valuePtr);
    do
      v13 = __ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));
    do
      v14 = (void *)__ldaxr((unint64_t *)&v85);
    while (__stlxr(v13, (unint64_t *)&v85));

  }
  else if ((*(unsigned int (**)(unint64_t *))(*a1 + 16))(a1) == 1414088260)
  {
    v15 = (void *)atomic_load(a1 + 80);
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v85, v15);
  }
  if (atomic_load((unint64_t *)&v85))
  {
    atomic_load((unint64_t *)&v85);
  }
  else if (!TBaseFont::GetInitializedGraphicsFont((TBaseFont *)a1))
  {
LABEL_29:
    LODWORD(v21) = 0;
    LODWORD(v22) = 0;
    LODWORD(v23) = 0;
    LODWORD(v24) = 0;
    v81 = -1;
    v82 = 0;
    v25 = -1;
    goto LABEL_92;
  }
  if (!CGFontGetParserFont() || !FPFontIsNamedInstance())
    goto LABEL_29;
  v17 = (const __CFDictionary *)FPFontCopyMetadata();
  v18 = v17;
  if (v17)
  {
    valuePtr[0] = (id)0x4000000000000000;
    Value = (void *)CFDictionaryGetValue(v17, CFSTR("MTD_Typeface_Metrics_IsMonoDesign"));
    if ((objc_opt_respondsToSelector() & 1) != 0
      || (Value = (void *)CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Metrics_IsFixedPitchFlag")),
          (objc_opt_respondsToSelector() & 1) != 0))
    {
      v20 = objc_msgSend(Value, "BOOLValue");
    }
    else
    {
      v20 = -1;
    }
    v26 = (void *)CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Style_IsItalicDesign"));
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v80 = objc_msgSend(v26, "BOOLValue");
    else
      v80 = -1;
    v27 = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Style_ItalicAngle"));
    v23 = v27;
    if (v27)
    {
      v28 = CFGetTypeID(v27);
      if (v28 == CFNumberGetTypeID() || v28 == CFBooleanGetTypeID())
      {
        CFNumberGetValue(v23, kCFNumberDoubleType, valuePtr);
        DoubleValue = *(double *)valuePtr;
LABEL_39:
        v30 = 0;
        *(double *)valuePtr = DoubleValue / 180.0;
        LODWORD(v23) = 1;
        goto LABEL_44;
      }
      if (v28 == CFStringGetTypeID())
      {
        DoubleValue = CFStringGetDoubleValue((CFStringRef)v23);
        goto LABEL_39;
      }
      LODWORD(v23) = 0;
    }
    v30 = 1;
LABEL_44:
    v81 = v20;
    v31 = CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Width_VisualDescriptor"));
    v22 = v31;
    v32 = 2.0;
    if (v31)
    {
      v33 = CFGetTypeID(v31);
      if (v33 == CFStringGetTypeID())
      {
        v34 = (void *)objc_msgSend(&unk_1E1605450, "objectForKeyedSubscript:", v22);
        if (v34)
        {
          objc_msgSend(v34, "floatValue");
          v36 = v35;
          LODWORD(v22) = 1;
LABEL_50:
          v37 = (__CFString *)CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Weight_VisualDescriptor"));
          v21 = v37;
          if (!v37)
            goto LABEL_76;
          v38 = CFGetTypeID(v37);
          if (v38 != CFStringGetTypeID())
            goto LABEL_75;
          if (v21 == CFSTR("reg") || CFEqual(v21, CFSTR("reg")))
          {
            LODWORD(v21) = 1;
            v32 = 0.0;
            goto LABEL_76;
          }
          v39 = 0x3FD3333333333333;
          if (v21 == CFSTR("semi")
            || CFEqual(v21, CFSTR("semi"))
            || (v39 = 0x3FD999999999999ALL, v21 == CFSTR("bold"))
            || CFEqual(v21, CFSTR("bold"))
            || (v39 = 0xBFD999999999999ALL, v21 == CFSTR("light"))
            || CFEqual(v21, CFSTR("light"))
            || (v39 = 0x3FCD70A3D70A3D71, v21 == CFSTR("med"))
            || CFEqual(v21, CFSTR("med"))
            || (v39 = 0x3FE1EB851EB851ECLL, v21 == CFSTR("heavy"))
            || CFEqual(v21, CFSTR("heavy"))
            || (v39 = 0x3FE3D70A3D70A3D7, v21 == CFSTR("black"))
            || CFEqual(v21, CFSTR("black"))
            || (v39 = 0xBFE3333333333333, v21 == CFSTR("thin"))
            || CFEqual(v21, CFSTR("thin"))
            || (v39 = 0xBFE999999999999ALL, v21 == CFSTR("ulight"))
            || CFEqual(v21, CFSTR("ulight")))
          {
            LODWORD(v21) = 1;
            v32 = *(double *)&v39;
            goto LABEL_76;
          }
          if (v21 == CFSTR("uthin") || CFEqual(v21, CFSTR("uthin")))
          {
            LODWORD(v21) = 1;
            v32 = -0.9;
          }
          else
          {
LABEL_75:
            LODWORD(v21) = 0;
          }
LABEL_76:
          v40 = (__CFString *)CFDictionaryGetValue(v18, CFSTR("MTD_Typeface_Style_ATS_Class"));
          v24 = v40;
          if (!v40)
          {
            v82 = 0;
            v43 = 1;
            goto LABEL_85;
          }
          v41 = v30;
          v42 = CFGetTypeID(v40);
          if (v42 != CFStringGetTypeID())
          {
            LODWORD(v24) = 0;
            v82 = 0;
            v43 = 1;
LABEL_84:
            v30 = v41;
            goto LABEL_85;
          }
          v30 = v41;
          if (v24 == CFSTR("old-style-serifs") || CFEqual(v24, CFSTR("old-style-serifs")))
          {
            v43 = 0;
            v44 = 0x10000000;
LABEL_81:
            v82 = v44;
            LODWORD(v24) = 1;
LABEL_85:
            v87 = v36;
            v88 = v32;
            v86 = *(double *)valuePtr;
            v45 = v30 ^ 1;
            if (v21 | v22)
              v45 = 1;
            if ((v45 & 1) != 0 || (v43 & 1) == 0)
            {
              *a2 = 1;
            }
            else
            {
              LODWORD(v23) = 0;
              LODWORD(v24) = 0;
            }
            goto LABEL_91;
          }
          if (v24 == CFSTR("transitional-serifs") || CFEqual(v24, CFSTR("transitional-serifs")))
          {
            v43 = 0;
            v44 = 0x20000000;
            goto LABEL_81;
          }
          if (v24 == CFSTR("modern-serifs") || CFEqual(v24, CFSTR("modern-serifs")))
          {
            v43 = 0;
            v44 = 805306368;
            goto LABEL_81;
          }
          if (v24 == CFSTR("clarendon-serifs") || CFEqual(v24, CFSTR("clarendon-serifs")))
          {
            v43 = 0;
            v44 = 0x40000000;
            goto LABEL_81;
          }
          if (v24 == CFSTR("slab-serifs") || CFEqual(v24, CFSTR("slab-serifs")))
          {
            v43 = 0;
            v44 = 1342177280;
            goto LABEL_81;
          }
          if (v24 == CFSTR("freeform-serifs") || CFEqual(v24, CFSTR("freeform-serifs")))
          {
            v43 = 0;
            v78 = 1879048192;
          }
          else if (v24 == CFSTR("sans-serif") || CFEqual(v24, CFSTR("sans-serif")))
          {
            v43 = 0;
            v78 = 0x80000000;
          }
          else
          {
            v82 = -1879048192;
            if (v24 == CFSTR("ornamentals")
              || CFEqual(v24, CFSTR("ornamentals"))
              || (v82 = -1610612736, v24 == CFSTR("scripts"))
              || CFEqual(v24, CFSTR("scripts"))
              || (v82 = -1073741824, v24 == CFSTR("symbolic")))
            {
              v43 = 0;
              goto LABEL_203;
            }
            v79 = CFEqual(v24, CFSTR("symbolic"));
            v43 = 0;
            if (v79)
              v78 = -1073741824;
            else
              v78 = 0;
          }
          v82 = v78;
LABEL_203:
          LODWORD(v24) = 1;
          goto LABEL_84;
        }
      }
      LODWORD(v22) = 0;
    }
    v36 = 2.0;
    goto LABEL_50;
  }
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  LODWORD(v23) = 0;
  LODWORD(v24) = 0;
  v81 = -1;
  v82 = 0;
  v80 = -1;
LABEL_91:

  v25 = v80;
LABEL_92:
  if ((*(unsigned int (**)(unint64_t *))(*a1 + 16))(a1) == 1414088260)
  {
    v46 = (_DWORD)v21 == 0;
    v47 = (_DWORD)v22 == 0;
    v48 = 1;
    if ((_DWORD)v21 && (_DWORD)v22 && (_DWORD)v24)
    {
      LODWORD(v24) = 1;
      LODWORD(v22) = 1;
      goto LABEL_158;
    }
    goto LABEL_135;
  }
  (*(void (**)(id *__return_ptr, unint64_t *))(*a1 + 120))(valuePtr, a1);
  v49 = atomic_load((unint64_t *)valuePtr);
  LOBYTE(v48) = v49 != 0;

  if ((_DWORD)v21 || v49)
    goto LABEL_104;
  v50 = (__CFString *)atomic_load(a1 + 12);
  if (!v50)
    goto LABEL_134;
  if (v50 != CFSTR("LucidaGrande")
    && !CFEqual(v50, CFSTR("LucidaGrande"))
    && v50 != CFSTR(".LucidaGrandeUI")
    && !CFEqual(v50, CFSTR(".LucidaGrandeUI")))
  {
    if (v50 == CFSTR("STHeiti") || CFEqual(v50, CFSTR("STHeiti")))
    {
      LOBYTE(v48) = 0;
      v51 = 0.24;
LABEL_114:
      v88 = v51;
      goto LABEL_103;
    }
    if (v50 == CFSTR("STXihei") || CFEqual(v50, CFSTR("STXihei")))
    {
      LOBYTE(v48) = 0;
      v51 = -0.1;
      goto LABEL_114;
    }
    if (v50 != CFSTR("TimesNewRomanPSMT") && !CFEqual(v50, CFSTR("TimesNewRomanPSMT")))
    {
      if (!(_DWORD)v24)
      {
        if (v50 != CFSTR("Times-Roman") && !CFEqual(v50, CFSTR("Times-Roman")))
        {
          LODWORD(v24) = 0;
          goto LABEL_134;
        }
        v82 = 0x10000000;
      }
      LODWORD(v24) = 1;
LABEL_134:
      LOBYTE(v48) = 0;
      LODWORD(v21) = 0;
      v47 = (_DWORD)v22 == 0;
      v46 = 1;
      goto LABEL_135;
    }
  }
  LOBYTE(v48) = 0;
  v88 = 0.0;
LABEL_103:
  LODWORD(v21) = 1;
LABEL_104:
  v46 = (_DWORD)v21 == 0;
  v47 = (_DWORD)v22 == 0;
  if ((_DWORD)v22 && (_DWORD)v24 && (_DWORD)v21)
  {
    LODWORD(v24) = 1;
    LODWORD(v22) = 1;
    LODWORD(v21) = 1;
    if ((v48 & 1) != 0)
    {
      v48 = 1;
      goto LABEL_158;
    }
    goto LABEL_153;
  }
LABEL_135:
  memset(valuePtr, 170, sizeof(valuePtr));
  (*(void (**)(id *__return_ptr, unint64_t *, uint64_t))(*a1 + 480))(&v83, a1, 1330851634);
  OS2::OS2((unint64_t *)valuePtr, (unint64_t *)&v83);

  if ((uint64_t)valuePtr[2] >= 78)
  {
    if (v46)
    {
      v52 = bswap32(*((unsigned __int16 *)valuePtr[1] + 2)) >> 16;
      if (v52 < 0xB)
        LOWORD(v52) = 100 * v52;
      v53 = (unsigned __int16)v52;
      if ((unsigned __int16)v52 >= 0x3E8u)
        v53 = 1000;
      if ((_WORD)v52)
        v54 = v53;
      else
        v54 = 1;
      v88 = WeightOfClass(v54);
      LODWORD(v21) = 1;
    }
    if (v47)
    {
      v55 = bswap32(*((unsigned __int16 *)valuePtr[1] + 3)) >> 16;
      if (v55 > 0xA)
      {
        LODWORD(v22) = 0;
        v56 = 0.0;
      }
      else
      {
        v56 = kWidthScale[v55];
        LODWORD(v22) = 1;
      }
      v87 = v56;
    }
    if (*((_WORD *)valuePtr[1] + 15))
    {
      v82 = *((unsigned __int16 *)valuePtr[1] + 15) << 28;
      LODWORD(v24) = 1;
    }
  }

  if ((v48 & 1) != 0)
  {
    v48 = (int)v21;
    goto LABEL_158;
  }
LABEL_153:
  if ((_DWORD)v23 && (_DWORD)v22 && (_DWORD)v21)
  {
    v48 = 1;
    LODWORD(v22) = 1;
    LODWORD(v23) = 1;
  }
  else
  {
    TraitsFromSubfamilyName = GetTraitsFromSubfamilyName((const TBaseFont *)a1, (int)v21, (int)v22, (int)v23, &v88, &v87, &v86);
    v48 = TraitsFromSubfamilyName;
    LODWORD(v22) = BYTE1(TraitsFromSubfamilyName);
    LODWORD(v23) = BYTE2(TraitsFromSubfamilyName);
  }
LABEL_158:
  IsFixedPitch = v81;
  if ((_DWORD)v23 && (v81 & 0x80000000) == 0)
    goto LABEL_163;
  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont((TBaseFont *)a1);
  if (InitializedGraphicsFont)
  {
    if ((_DWORD)v23)
    {
      if ((v81 & 0x80000000) == 0)
      {
LABEL_163:
        LODWORD(v23) = 1;
        goto LABEL_164;
      }
    }
    else
    {
      v86 = CGFontGetItalicAngle(InitializedGraphicsFont) * -0.00555555556;
      if ((v81 & 0x80000000) == 0)
        goto LABEL_163;
    }
    IsFixedPitch = CGFontIsFixedPitch();
    goto LABEL_163;
  }
LABEL_164:
  if (((*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 472))(a1, 1935829368) & 1) != 0
    || ((*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 472))(a1, 1129270354) & 1) != 0)
  {
    v60 = 1;
    if (v48)
      goto LABEL_167;
  }
  else
  {
    v60 = (*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 472))(a1, 1398163232);
    if (v48)
    {
LABEL_167:
      v61 = v88;
      if (v88 > 0.239)
        v62 = 2;
      else
        v62 = 0;
      goto LABEL_172;
    }
  }
  v62 = 0;
  v88 = 0.0;
  v61 = 0.0;
LABEL_172:
  TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v61);
  v63 = (__CFDictionary *)atomic_load((unint64_t *)&v89);
  v64 = (const void *)atomic_load((unint64_t *)valuePtr);
  CFDictionarySetValue(v63, CFSTR("NSCTFontWeightTrait"), v64);

  if ((_DWORD)v22)
  {
    v65 = v87;
    if (v87 <= 0.15)
    {
      if (v87 < -0.15)
        v62 |= 0x40u;
    }
    else
    {
      v62 |= 0x20u;
    }
  }
  else
  {
    v87 = 0.0;
    v65 = 0.0;
  }
  TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v65);
  v66 = (__CFDictionary *)atomic_load((unint64_t *)&v89);
  v67 = (const void *)atomic_load((unint64_t *)valuePtr);
  CFDictionarySetValue(v66, CFSTR("NSCTFontProportionTrait"), v67);

  if ((_DWORD)v23 && (v68 = v86, fabs(v86) > 0.000001))
  {
    if (v25 < 0)
      v25 = 1;
  }
  else
  {
    v86 = 0.0;
    v68 = 0.0;
  }
  TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v68);
  v69 = (__CFDictionary *)atomic_load((unint64_t *)&v89);
  v70 = (const void *)atomic_load((unint64_t *)valuePtr);
  CFDictionarySetValue(v69, CFSTR("NSCTFontSlantTrait"), v70);

  v71 = v62 | 0x400;
  if (IsFixedPitch <= 0)
    v71 = v62;
  v72 = v82;
  if (!(_DWORD)v24)
    v72 = 0;
  v73 = v71 | v72 | (v25 > 0);
  if (v60)
    v74 = v73 | 0x2000;
  else
    v74 = v73;
  TCFNumber::TCFNumber<unsigned int>((unint64_t *)valuePtr, v74);
  v75 = (__CFDictionary *)atomic_load((unint64_t *)&v89);
  v76 = (const void *)atomic_load((unint64_t *)valuePtr);
  CFDictionarySetValue(v75, CFSTR("NSCTFontSymbolicTrait"), v76);

  do
    v77 = __ldaxr((unint64_t *)&v89);
  while (__stlxr(0, (unint64_t *)&v89));
  *a3 = v77;

}

uint64_t TBaseFont::SkipMetadata(TBaseFont *this)
{
  CGFont *v3;

  if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 16))(this) != 1414088260)
    return 0;
  if (!atomic_load((unint64_t *)this + 13))
    return 0;
  v3 = (CGFont *)atomic_load((unint64_t *)this + 13);
  return IsNamedInstance(v3) ^ 1;
}

void TFontCascade::CreateFallback(CFStringRef theString@<X2>, uint64_t a2@<X0>, const __CTFont *a3@<X1>, int a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  int64x2_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFIndex Count;
  __CFString *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *DefaultFallbacks;
  void *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  char *v34;
  void *v35;
  const __CFArray *v36;
  const __CFArray *v37;
  char *v38;
  int v39;
  _DWORD *Table;
  CFIndex Length;
  uint64_t v42;
  CFIndex v43;
  unsigned int CharacterAtIndex;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t inited;
  CFIndex v51;
  _BOOL4 v53;
  BOOL v57;
  int v58;
  CFIndex v59;
  CFIndex v61;
  uint64_t v62;
  const __CFArray *v63;
  CFIndex v64;
  TDescriptor **ValueAtIndex;
  TDescriptor **v66;
  TDescriptor *v67;
  unint64_t v68;
  TDescriptor *v69;
  unint64_t v70;
  BOOL v71;
  _QWORD *FallbackFont;
  const TBaseFont *v74;
  TDescriptor *v75;
  double AccessibilityBoldWeightOfWeight;
  void *v77;
  const __CFNumber *v78;
  int v79;
  const __CFArray *v80;
  CFIndex v81;
  CFIndex v82;
  TDescriptor **v83;
  TDescriptor **v84;
  TDescriptor *v85;
  unint64_t v86;
  int v87;
  const TBaseFont *v88;
  id v89;
  unsigned int *v90;
  __int128 v91;
  const UniChar *CharactersPtr;
  unint64_t *v94;
  const __CTFontDescriptor *v95;
  void *v97;
  double Weight;
  int v99;
  CFIndex v100;
  const __CFString *v101;
  int v102;
  CFIndex v104;
  unsigned int v105;
  unsigned int v106;
  int v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  BOOL v112;
  TPurgeableCache *v113;
  id v114;
  id valuePtr[2];
  _BYTE v116[40];
  __int128 v117;
  __int128 v118;
  _BYTE *v119;
  uint64_t v120;
  CFRange v121;

  v120 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 <= 0)
  {
    if (!atomic_load((unint64_t *)a2))
    {
LABEL_170:
      *a5 = 0;
      return;
    }
    v10 = atomic_load((unint64_t *)a2);
    v11 = *(_QWORD *)(v10 + 40);
    TFont::CopyDescriptor((TFont *)v11, 1, (unint64_t *)valuePtr);
    v12 = (unint64_t *)(a2 + 8);
    do
      v13 = __ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));
    do
      v14 = (void *)__ldaxr(v12);
    while (__stlxr(v13, v12));

    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v11 + 16);
    TFont::GetEffectiveMatrix((TFont *)v11, (uint64_t)valuePtr);
    v15 = a2 + 120;
    v16 = *(_OWORD *)v116;
    *(_OWORD *)(a2 + 120) = *(_OWORD *)valuePtr;
    *(_OWORD *)(a2 + 136) = v16;
    *(_OWORD *)(a2 + 152) = *(_OWORD *)&v116[16];
    v17 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)(a2 + 120), (float64x2_t)xmmword_18492FA90), (int8x16_t)vceqq_f64(*(float64x2_t *)(a2 + 136), (float64x2_t)xmmword_18492E300)), (int8x16_t)vceqzq_f64(*(float64x2_t *)(a2 + 152)));
    if (vandq_s8((int8x16_t)v17, (int8x16_t)vdupq_laneq_s64(v17, 1)).i64[0] < 0)
      v15 = 0;
    *(_QWORD *)(a2 + 184) = v15;
    *(_DWORD *)(a2 + 176) = *(_DWORD *)v11;
    *(_DWORD *)(a2 + 180) = TFont::IsSystemUIFontAndForShaping((TFont *)v11, (BOOL *)valuePtr);
    v18 = *(_DWORD *)v11;
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(v11 + 400) + 504))(valuePtr);
    v19 = (unint64_t *)(a2 + 72);
    do
      v20 = __ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));
    do
      v21 = (void *)__ldaxr(v19);
    while (__stlxr(v20, v19));

    v22 = (void *)atomic_load(v19);
    v23 = v22;
    v24 = v23;
    if (v23)
      Count = CFArrayGetCount(v23);
    else
      Count = 0;
    *(_QWORD *)(a2 + 80) = Count;

    if ((v18 & 0x1C0) != 0)
    {
      v26 = (__CFString *)atomic_load((unint64_t *)(a2 + 16));
      TFont::UserFallbacksForLanguage((unint64_t *)valuePtr, v11, v26, (int *)(a2 + 48));
      v27 = (unint64_t *)(a2 + 88);
      do
        v28 = __ldaxr((unint64_t *)valuePtr);
      while (__stlxr(0, (unint64_t *)valuePtr));
      do
        v29 = (void *)__ldaxr(v27);
      while (__stlxr(v28, v27));

      DefaultFallbacks = (void *)TFont::GetDefaultFallbacks((TFont *)v11);
      TCFRef<__CTFont const*>::Retain((unint64_t *)(a2 + 104), DefaultFallbacks);
    }
    v31 = (void *)atomic_load((unint64_t *)(a2 + 88));
    v32 = v31;
    v33 = v32;
    if (v32)
      v32 = (const __CFArray *)CFArrayGetCount(v32);
    *(_QWORD *)(a2 + 96) = v32;
    v34 = (char *)v32 + Count;

    v35 = (void *)atomic_load((unint64_t *)(a2 + 104));
    v36 = v35;
    v37 = v36;
    if (v36)
      v36 = (const __CFArray *)CFArrayGetCount(v36);
    *(_QWORD *)(a2 + 112) = v36;
    v38 = (char *)v36 + (_QWORD)v34;

    *(_QWORD *)(a2 + 24) = v38;
    *(_QWORD *)(a2 + 192) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 514, 0, *(_QWORD *)(a2 + 24));
    v8 = *(_QWORD *)(a2 + 24);
  }
  v109 = v8;
  v39 = a4;
  if (!a4)
  {
    Table = GetTable();
    if (!Table || (v39 = Table[28]) == 0)
      v39 = *(_DWORD *)(a2 + 48);
  }
  v99 = v39;
  Length = CFStringGetLength(theString);
  v42 = Length;
  if (Length < 1)
  {
LABEL_157:
    v90 = (unsigned int *)*((_QWORD *)a3 + 5);
    if (v90 && v42 >= 1 && *((_QWORD *)v90 + 50))
    {
      *(_QWORD *)&v91 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v118 = v91;
      v117 = v91;
      *(_OWORD *)&v116[24] = v91;
      *(_OWORD *)&v116[8] = v91;
      valuePtr[1] = 0;
      *(_QWORD *)v116 = 0;
      valuePtr[0] = 0;
      v119 = &v116[8];
      CharactersPtr = CFStringGetCharactersPtr(theString);
      if (!CharactersPtr)
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize((uint64_t)valuePtr, v42);
        v121.location = 0;
        v121.length = v42;
        CFStringGetCharacters(theString, v121, (UniChar *)valuePtr[0]);
        CharactersPtr = (const UniChar *)valuePtr[0];
      }
      v114 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v113);
      TDescriptorSource::CopySystemWideFallbackDescriptorForCharacters(&v113, *((_QWORD *)v90 + 50), (uint64_t)CharactersPtr, v42, *(_DWORD *)(a2 + 180), ((unint64_t)*v90 >> 6) & 7, (unint64_t *)&v114);
      if (atomic_load((unint64_t *)&v114))
      {
        v94 = a5;
        *a5 = 0xAAAAAAAAAAAAAAAALL;
        v95 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v114);
        TFontCascade::CreateFallbackFromDescriptor((TFontCascade *)a2, v95, 8, v94);
        if (atomic_load(v94))
        {
          v97 = (void *)atomic_load(a5);
          TCFRef<__CTFont const*>::Retain((unint64_t *)(a2 + 64), v97);

          v114 = valuePtr;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v114);
          return;
        }

      }
      v114 = valuePtr;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v114);
    }
    goto LABEL_170;
  }
  v43 = 0;
  v100 = Length;
  v101 = theString;
  v102 = a4;
  while (1)
  {
    LODWORD(v114) = 0;
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v43);
    LOWORD(v114) = CharacterAtIndex;
    if ((CharacterAtIndex & 0xFC00) == 0xD800 && v43 + 1 < v42)
    {
      v45 = CFStringGetCharacterAtIndex(theString, v43 + 1);
      WORD1(v114) = v45;
      v46 = v45 + ((unsigned __int16)v114 << 10) - 56613888;
      if (((unsigned __int16)v114 & 0xFC00) != 0xD800)
        v46 = (unsigned __int16)v114;
      v47 = 1;
      if ((v45 & 0xFC00) == 0xDC00)
        v47 = 2;
      v111 = v47;
      if ((v45 & 0xFC00) == 0xDC00)
        ++v43;
      v104 = v43;
      CharacterAtIndex = (v45 & 0xFC00) == 0xDC00 ? v46 : (unsigned __int16)v114;
    }
    else
    {
      v104 = v43;
      v111 = 1;
    }
    v48 = v109;
    if (!ShouldUseLastResort(CharacterAtIndex))
      break;
LABEL_43:
    v43 = v104 + 1;
    v42 = v100;
    theString = v101;
    if (v104 + 1 >= v100)
      goto LABEL_157;
  }
  v49 = v99;
  if (!a4)
  {
    v49 = v99;
    if (!*(_QWORD *)(a2 + 96))
    {
      if (u_hasBinaryProperty(CharacterAtIndex, UCHAR_EMOJI_PRESENTATION))
        v49 = 2;
      else
        v49 = v99;
    }
  }
  inited = 0;
  v51 = 0;
  v106 = CharacterAtIndex - 57345;
  v53 = CharacterAtIndex == 1051575 || CharacterAtIndex - 57345 < 0x537;
  v110 = v53;
  v57 = (HIWORD(CharacterAtIndex) > 0xEu && CharacterAtIndex - 1114110 < 0xFFFFFC02 || CharacterAtIndex >> 11 < 0x1F)
     && CharacterAtIndex >> 13 > 6;
  v112 = v57;
  v108 = v49;
  do
  {
    if (v51 >= v48)
    {
      v58 = 0;
LABEL_101:
      v66 = 0;
      v71 = 1;
      if (a4 || inited)
      {
        FallbackFont = 0;
      }
      else
      {
        if (atomic_load((unint64_t *)(a2 + 40)))
          inited = atomic_load((unint64_t *)(a2 + 40));
        else
          inited = TFontCascade::InitEmojiFont((TFontCascade *)a2);
        v66 = 0;
        if ((const __CTFont *)inited == a3)
          FallbackFont = 0;
        else
          FallbackFont = (_QWORD *)inited;
        v71 = 1;
      }
      goto LABEL_115;
    }
    v58 = 0;
    while (1)
    {
      v59 = v51;
      if (!v51 && v49 == 2 && !inited)
      {
        if (atomic_load((unint64_t *)(a2 + 40)))
        {
          inited = atomic_load((unint64_t *)(a2 + 40));
          if (inited)
            goto LABEL_111;
        }
        else
        {
          inited = TFontCascade::InitEmojiFont((TFontCascade *)a2);
          if (inited)
          {
LABEL_111:
            v51 = 0;
            v66 = 0;
            FallbackFont = (_QWORD *)inited;
            goto LABEL_114;
          }
        }
        inited = -1;
      }
      ++v51;
      v61 = *(_QWORD *)(a2 + 80);
      v62 = *(_QWORD *)(a2 + 96);
      if (*(_QWORD *)(a2 + 112) + v62 + v61 <= v59)
        goto LABEL_98;
      if (v62 + v61 <= v59)
      {
        v58 |= 8u;
        v63 = (const __CFArray *)atomic_load((unint64_t *)(a2 + 104));
        v64 = v59 - v62 - v61;
      }
      else if (v61 <= v59)
      {
        v63 = (const __CFArray *)atomic_load((unint64_t *)(a2 + 88));
        v64 = v59 - v61;
      }
      else
      {
        v58 |= 8u;
        v63 = (const __CFArray *)atomic_load((unint64_t *)(a2 + 72));
        v64 = v59;
      }
      ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(v63, v64);
      v66 = ValueAtIndex;
      if (!ValueAtIndex)
        goto LABEL_98;
      if ((*(_DWORD *)&v112 & ((v58 & 8) >> 3)) == 1)
      {
        if (!v110)
          goto LABEL_98;
        if (v106 <= 0x536)
        {
          v67 = ValueAtIndex[5];
          if ((*((_DWORD *)v67 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(ValueAtIndex[5], 0x8000, 0.0);
          v68 = atomic_load((unint64_t *)v67 + 4);
          if (v68)
          {
            if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v68 + 712))(v68))
              goto LABEL_98;
          }
        }
      }
      if (v49 != 1)
        goto LABEL_112;
      v69 = v66[5];
      if ((*((_DWORD *)v69 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(v66[5], 0x8000, 0.0);
      v70 = atomic_load((unint64_t *)v69 + 4);
      if (!v70)
        break;
      if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v70 + 712))(v70))
      {
LABEL_112:
        FallbackFont = 0;
        goto LABEL_114;
      }
LABEL_98:
      if (v48 == v51)
      {
        v51 = v48;
        goto LABEL_101;
      }
    }
    FallbackFont = 0;
    v51 = v59 + 1;
LABEL_114:
    v71 = v66 == 0;
    if (!v66)
    {
LABEL_115:
      if (!FallbackFont)
      {
        if (v51 == v48)
          FallbackFont = (_QWORD *)atomic_load((unint64_t *)(a2 + 64));
        else
          FallbackFont = 0;
        ++v51;
      }
    }
    if (FallbackFont)
      v71 = 0;
    if (v71)
      goto LABEL_43;
    if (!FallbackFont)
    {
      v75 = v66[5];
      if ((*((_DWORD *)v75 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(v66[5], 0x8000, 0.0);
      v74 = (const TBaseFont *)atomic_load((unint64_t *)v75 + 4);
      if (v74)
        goto LABEL_129;
LABEL_154:
      LODWORD(v81) = 0;
      goto LABEL_155;
    }
    v74 = *(const TBaseFont **)(FallbackFont[5] + 400);
    if (!v74)
      goto LABEL_154;
LABEL_129:
    if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v74 + 16))(v74) != 1414743620)
    {
      if ((*(uint64_t (**)(const TBaseFont *, id *, uint64_t, _QWORD))(*(_QWORD *)v74 + 808))(v74, &v114, v111, 0) < 1)goto LABEL_154;
      if (!FallbackFont)
      {
        Weight = CTFontGetWeight((uint64_t)a3);
        FallbackFont = TFontCascade::GetFallbackFont((TFontCascade *)a2, v74, v66, v58, Weight);
      }
      *a5 = (unint64_t)FallbackFont;
      return;
    }
    v105 = v58;
    AccessibilityBoldWeightOfWeight = CTFontGetWeight((uint64_t)a3);
    valuePtr[0] = (id)CTFontCopyAttribute(a3, CFSTR("CTFontLegibilityWeightAttribute"));
    do
      v77 = (void *)__ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));

    if (v77)
    {
      v78 = v77;
      LODWORD(valuePtr[0]) = -1431655766;
      CFNumberGetValue(v78, kCFNumberIntType, valuePtr);
      v79 = (int)valuePtr[0];

      if (v79 == 1)
        AccessibilityBoldWeightOfWeight = CTFontGetAccessibilityBoldWeightOfWeight(AccessibilityBoldWeightOfWeight);
    }
    valuePtr[0] = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)v74 + 504))(valuePtr, v74);
    v80 = (const __CFArray *)atomic_load((unint64_t *)valuePtr);
    if (v80)
    {
      v81 = CFArrayGetCount(v80);
      if (v81)
      {
        v82 = 0;
        while (1)
        {
          v83 = (TDescriptor **)CFArrayGetValueAtIndex(v80, v82);
          v84 = v83;
          v85 = v83[5];
          if ((*((_DWORD *)v85 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(v83[5], 0, 0.0);
          v86 = atomic_load((unint64_t *)v85 + 4);
          if (v86)
          {
            if ((*(uint64_t (**)(unint64_t, id *, uint64_t, _QWORD))(*(_QWORD *)v86 + 808))(v86, &v114, v111, 0) >= 1)break;
          }
          if (v81 == ++v82)
          {
            LODWORD(v81) = 0;
            v87 = 1;
            goto LABEL_152;
          }
        }
        if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v74 + 840))(v74))
          v88 = v74;
        else
          v88 = (const TBaseFont *)v86;
        v89 = TFontCascade::GetFallbackFont((TFontCascade *)a2, v88, v84, v105, AccessibilityBoldWeightOfWeight);
        v87 = 0;
        *a5 = (unint64_t)v89;
        LODWORD(v81) = 1;
LABEL_152:
        a4 = v102;
        goto LABEL_153;
      }
    }
    else
    {
      LODWORD(v81) = 0;
    }
    v87 = 1;
LABEL_153:

    if (v87)
      goto LABEL_154;
LABEL_155:
    v48 = v109;
    v49 = v108;
  }
  while (!(_DWORD)v81);
}

uint64_t TBaseFont::CharactersCovered(TBaseFont *this, const unsigned __int16 *a2, uint64_t a3, BOOL *a4)
{
  unint64_t *CharacterSetInternal;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  BOOL v17;
  int v18;
  const __CFCharacterSet *v19;
  int IsStandaloneEmojiModifier;

  if (a3 >= 1)
  {
    CharacterSetInternal = (unint64_t *)TBaseFont::GetCharacterSetInternal(this);
    if (atomic_load(CharacterSetInternal))
    {
      v10 = CharacterSetInternal;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v12++;
        v14 = a2[v13];
        if ((v14 & 0xFC00) == 0xD800 && v12 != a3)
        {
          v16 = a2[v12];
          if ((v16 & 0xFC00) == 0xDC00)
            break;
        }
        if (v14 >= 0xFE0E)
        {
          if (v14 >> 4 <= 0xFE0)
          {
            if (v14 == 65038)
              v18 = 1;
            else
              v18 = 2;
LABEL_20:
            IsStandaloneEmojiModifier = TBaseFont::IsStandaloneEmojiModifier((uint64_t)this, v11, v14, v18);
            goto LABEL_21;
          }
          goto LABEL_16;
        }
        v17 = 0;
LABEL_17:
        v18 = 2;
        if (v14 == 8205 || v17)
          goto LABEL_20;
        v19 = (const __CFCharacterSet *)atomic_load(v10);
        IsStandaloneEmojiModifier = CFCharacterSetIsLongCharacterMember(v19, v14);
LABEL_21:
        if (IsStandaloneEmojiModifier)
          v11 = v11 - v13 + v12;
        if (a4 && !v13)
          *a4 = v11 > 0;
        if (v12 >= a3)
          return v11;
      }
      v12 = v13 + 2;
      v14 = v16 + (v14 << 10) - 56613888;
LABEL_16:
      v17 = v14 - 127995 < 5;
      goto LABEL_17;
    }
  }
  return 0;
}

char *TBaseFont::GetCharacterSetInternal(TBaseFont *this)
{
  char *v1;
  id v4;

  v1 = (char *)this + 192;
  if (!atomic_load((unint64_t *)this + 24))
  {
    (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 184))(&v4);

  }
  return v1;
}

uint64_t TBaseFont::GetType(TBaseFont *this)
{
  return 1413629508;
}

uint64_t TTenuousComponentFont::CharactersCovered(TTenuousComponentFont *this, const unsigned __int16 *a2, uint64_t a3, BOOL *a4)
{
  const __CFCharacterSet *v8;

  v8 = (const __CFCharacterSet *)atomic_load((unint64_t *)this + 95);
  if (v8 && !TBaseFont::CharacterSetCoversCharacters(this, v8, a2, a3))
    return 0;
  else
    return TComponentFont::CharactersCovered(this, a2, a3, a4);
}

uint64_t TComponentFont::CharactersCovered(TComponentFont *this, const unsigned __int16 *a2, uint64_t a3, BOOL *a4)
{
  void *ComponentAttribute;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  BOOL v15;
  int v16;
  int MappedGlyph;
  uint64_t v18;
  id v19;

  if ((*((_BYTE *)this + 713) & 1) == 0)
    return TBaseFont::CharactersCovered(this, a2, a3, a4);
  ComponentAttribute = (void *)TComponentFont::GetComponentAttribute(this, CFSTR("cmapOverride"));
  v19 = ComponentAttribute;
  if (ComponentAttribute)
    ComponentAttribute = (void *)CFDataGetBytePtr((CFDataRef)ComponentAttribute);
  if (a3 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v9++;
      v12 = a2[v11];
      if ((v12 & 0xFC00) == 0xD800 && v9 != a3)
      {
        v14 = a2[v9];
        v15 = (v14 & 0xFC00) == 56320;
        v16 = v14 + (v12 << 10) - 56613888;
        v9 = v15 ? v11 + 2 : v11 + 1;
        if (v15)
          v12 = v16;
      }
      v18 = v9 - v11;
      if (!MappedGlyph)
        v18 = 0;
      v10 += v18;
      if (a4)
      {
        if (!v11)
          *a4 = v10 > 0;
      }
    }
    while (v9 < a3);
  }

  return v10;
}

id TSplicedFont::CopyCascadeList@<X0>(TSplicedFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 78);
  result = v3;
  *a2 = result;
  return result;
}

double CTFontGetWeight(uint64_t a1)
{
  double v1;
  unint64_t *v2;
  unint64_t TraitsValues;

  v1 = 0.0;
  if (a1)
  {
    v2 = *(unint64_t **)(*(_QWORD *)(a1 + 40) + 400);
    if (v2)
    {
      TraitsValues = atomic_load(v2 + 30);
      if (TraitsValues)
        return *(double *)(TraitsValues + 8);
      TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v2);
      if (TraitsValues)
        return *(double *)(TraitsValues + 8);
    }
  }
  return v1;
}

unint64_t TBaseFont::CreateTraitsValues(TBaseFont *this)
{
  TBaseFont *v2;
  const __CFDictionary *v3;
  unint64_t TraitsValuesFromTraitsDictionary;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 152))(&v9);
  do
    v2 = (TBaseFont *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  if (v2)
  {
    TraitsValuesFromTraitsDictionary = TBaseFont::CreateTraitsValuesFromTraitsDictionary(v2, v3);
    v5 = TraitsValuesFromTraitsDictionary;
    v6 = (unint64_t *)((char *)this + 240);
    while (1)
    {
      v7 = __ldaxr(v6);
      if (v7)
        break;
      if (!__stlxr(TraitsValuesFromTraitsDictionary, v6))
        goto LABEL_10;
    }
    __clrex();
    MEMORY[0x186DC03AC](TraitsValuesFromTraitsDictionary, 0x1000C4089CA3EB1);
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
LABEL_10:

  return v5;
}

uint64_t TBaseFont::CreateTraitsValuesFromTraitsDictionary(TBaseFont *this, const __CFDictionary *a2)
{
  uint64_t v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;

  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)v3 = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("NSCTFontSymbolicTrait"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberIntType, (void *)v3);
  v5 = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("NSCTFontWeightTrait"));
  if (v5)
    CFNumberGetValue(v5, kCFNumberDoubleType, (void *)(v3 + 8));
  v6 = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("NSCTFontProportionTrait"));
  if (v6)
    CFNumberGetValue(v6, kCFNumberDoubleType, (void *)(v3 + 16));
  v7 = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("NSCTFontSlantTrait"));
  if (v7)
    CFNumberGetValue(v7, kCFNumberDoubleType, (void *)(v3 + 24));
  return v3;
}

void TBaseFont::CopyTraitsInternal(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFArray *v10;
  void *v11;
  void *v13;
  void *v15;
  unint64_t v17;
  void *v18;
  unint64_t v20;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  int v32;
  id v33;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontTraitsAttribute"), &v33);
  do
    v4 = __ldaxr((unint64_t *)&v33);
  while (__stlxr(0, (unint64_t *)&v33));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    v32 = 0;
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *, int *))(*(_QWORD *)this + 656))(&v33, this, &v32);
    if (atomic_load((unint64_t *)&v33))
    {
      v31 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 120))(&v31, this);
      if (atomic_load((unint64_t *)&v31))
      {
        v30 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v30, this);
        v28 = 0;
        v29 = 0;
        v27 = (id)0xAAAAAAAAAAAAAAAALL;
        v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v33);
        v9 = (const __CFDictionary *)atomic_load((unint64_t *)&v30);
        v10 = (const __CFArray *)atomic_load((unint64_t *)&v31);
        CreateTraitsWithVariation(v8, v9, v10, this, (unint64_t *)&v29, (unint64_t *)&v28, (unint64_t *)&v27);
        if (!v32)
        {
          v11 = (void *)atomic_load((unint64_t *)&v27);
          TCFRef<__CTFont const*>::Retain(a2, v11);
        }
        if (atomic_load((unint64_t *)&v29))
        {
          v13 = (void *)atomic_load((unint64_t *)&v29);
          v26 = v13;
          TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v26, CFSTR("CTFontCSSWeightAttribute"));

        }
        if (atomic_load((unint64_t *)&v28))
        {
          v15 = (void *)atomic_load((unint64_t *)&v28);
          v25 = v15;
          TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v25, CFSTR("CTFontCSSWidthAttribute"));

        }
      }

      if (!atomic_load(a2))
      {
        do
          v17 = __ldaxr((unint64_t *)&v33);
        while (__stlxr(0, (unint64_t *)&v33));
        do
          v18 = (void *)__ldaxr(a2);
        while (__stlxr(v17, a2));

      }
      if (atomic_load(a2))
      {
        v31 = (id)0xAAAAAAAAAAAAAAAALL;
        v20 = atomic_load(a2);
        (*(void (**)(id *__return_ptr, TBaseFont *, unint64_t))(*(_QWORD *)this + 824))(&v31, this, v20);
        if (atomic_load((unint64_t *)&v31))
        {
          v22 = (void *)atomic_load((unint64_t *)&v31);
          TCFRef<__CTFont const*>::Retain(a2, v22);
        }

        v23 = (void *)atomic_load(a2);
        v24 = v23;
        TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v24, CFSTR("NSCTFontTraitsAttribute"));

      }
    }

  }
}

void TBaseFont::CopyVariation(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  void *v4;
  unint64_t v5;
  const void **v6;
  const __CFString *v7;
  const __CFDictionary *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v14;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontVariationAttribute"), &v21);
  do
    v4 = (void *)__ldaxr((unint64_t *)&v21);
  while (__stlxr(0, (unint64_t *)&v21));
  v22 = v4;

  v5 = atomic_load((unint64_t *)&v22);
  v6 = (const void **)MEMORY[0x1E0C9B0D0];
  if (v5)
    goto LABEL_17;
  v21 = (id)0xAAAAAAAAAAAAAAAALL;
  v7 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  CopyVariationAttributeForSystemFont(v7, &v21);
  if (atomic_load((unint64_t *)&v21))
  {
    v9 = (const __CFDictionary *)atomic_load((unint64_t *)&v21);
    if (CFDictionaryGetCount(v9))
    {
      v10 = (void *)atomic_load((unint64_t *)&v21);
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v22, v10);
      goto LABEL_14;
    }
    v20 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 120))(&v20, this);
    if (atomic_load((unint64_t *)&v20))
    {
      v14 = (void *)atomic_load((unint64_t *)&v21);
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v22, v14);
    }
  }
  else
  {
    TBaseFont::GetInitializedGraphicsFont(this);
    CreateVariationDictFromGraphicsFont(&v20);
    do
      v11 = __ldaxr((unint64_t *)&v20);
    while (__stlxr(0, (unint64_t *)&v20));
    do
      v12 = (void *)__ldaxr((unint64_t *)&v22);
    while (__stlxr(v11, (unint64_t *)&v22));

  }
LABEL_14:

  if (atomic_load((unint64_t *)&v22))
  {
    v16 = (void *)atomic_load((unint64_t *)&v22);
    v19 = v16;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v19, CFSTR("NSCTFontVariationAttribute"));

  }
  else
  {
    TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, *v6, CFSTR("NSCTFontVariationAttribute"));
  }
LABEL_17:
  v17 = atomic_load((unint64_t *)&v22);
  if (*v6 == (const void *)v17)
  {
    v18 = 0;
  }
  else
  {
    do
      v18 = __ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
  }
  *a2 = v18;

}

BOOL ShouldUseLastResort(UTF32Char a1)
{
  const __CFCharacterSet *Mutable;
  _BOOL8 v3;

  os_unfair_lock_lock_with_options();
  Mutable = (const __CFCharacterSet *)sLastResortSet;
  if (TGenerationSeed::sGeneration != sLastResortSetGeneration)
  {
    if (sLastResortSet)
      CFRelease((CFTypeRef)sLastResortSet);
    Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    sLastResortSet = (uint64_t)Mutable;
    sLastResortSetGeneration = TGenerationSeed::sGeneration;
  }
  v3 = CFCharacterSetIsLongCharacterMember(Mutable, a1) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&sLastResortSetLock);
  return v3;
}

void *TFontCascade::GetFallbackFont(TFontCascade *this, const TBaseFont *a2, TDescriptor **a3, int a4, double a5)
{
  void *v10;
  TDescriptor *v11;
  unint64_t v13;
  void *v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  const __CTFont *v25;
  CGFloat v26;
  const __CTFontDescriptor *v27;
  unint64_t v28;
  const __CTFontDescriptor *v29;
  unint64_t v30;
  void *v31;
  NSMapTable *v32;
  void *v33;
  const void *v34;
  id v36;
  id CopyWithVariation;
  id v38;
  id v39;
  id v40;
  void *key;

  key = a2;
  v10 = NSMapGet(*((NSMapTable **)this + 24), a2);
  if (!v10)
  {
    v40 = 0;
    if (*((_DWORD *)this + 45))
    {
      v39 = (id)0xAAAAAAAAAAAAAAAALL;
      DerivedOpticalFontDescriptor((const __CTFontDescriptor *)&v39, a3, *((double *)this + 21), a2);
      if (atomic_load((unint64_t *)&v39))
      {
        do
          v13 = __ldaxr((unint64_t *)&v39);
        while (__stlxr(0, (unint64_t *)&v39));
        do
          v14 = (void *)__ldaxr((unint64_t *)&v40);
        while (__stlxr(v13, (unint64_t *)&v40));

        a3 = (TDescriptor **)atomic_load((unint64_t *)&v40);
        a4 |= 8u;
      }
      else
      {
        v15 = *((_DWORD *)a3[5] + 4);
        if ((TDescriptor::GetSystemUIFontOptions(v11) & v15) == 0)
        {
          LODWORD(CopyWithVariation) = 1024;
          TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,$_24>((unint64_t *)&v38, (uint64_t *)&key, (int *)&CopyWithVariation);
          do
            v16 = __ldaxr((unint64_t *)&v38);
          while (__stlxr(0, (unint64_t *)&v38));
          do
            v17 = (void *)__ldaxr((unint64_t *)&v40);
          while (__stlxr(v16, (unint64_t *)&v40));

          a3 = (TDescriptor **)atomic_load((unint64_t *)&v40);
        }
      }

    }
    v39 = (id)0xAAAAAAAAAAAAAAAALL;
    TFontCascade::CreateFallbackFromDescriptor(this, (const __CTFontDescriptor *)a3, a4, (unint64_t *)&v39);
    if (atomic_load((unint64_t *)&v39))
    {
      if (*((_DWORD *)this + 45))
      {
        v19 = atomic_load((unint64_t *)&v39);
        if (vabdd_f64(CTFontGetWeight(v19), a5) >= 0.001)
        {
          v20 = atomic_load((unint64_t *)&v39);
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 400);
          if (v21)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21))
            {
              v22 = atomic_load((unint64_t *)&v39);
              v23 = CTFontCopyPhysicalFont(v22);
              if (v23)
              {
                do
                  v24 = (void *)__ldaxr((unint64_t *)&v39);
                while (__stlxr(v23, (unint64_t *)&v39));

              }
              v38 = (id)0xAAAAAAAAAAAAAAAALL;
              v25 = (const __CTFont *)atomic_load((unint64_t *)&v39);
              v38 = CTFontCopyFontDescriptor(v25);
              v26 = (double)ClassOfWeight(a5);
              CopyWithVariation = (id)0xAAAAAAAAAAAAAAAALL;
              v27 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v38);
              CopyWithVariation = CTFontDescriptorCreateCopyWithVariation(v27, (CFNumberRef)&unk_1E1614B48, v26);
              v28 = atomic_load((unint64_t *)&CopyWithVariation);
              if (v28 && operator!=((unint64_t *)&CopyWithVariation, (unint64_t *)&v38))
              {
                v29 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&CopyWithVariation);
                v36 = CTFontCreateWithFontDescriptorAndOptions(v29, 0.0, 0, 0x400uLL);
                do
                  v30 = __ldaxr((unint64_t *)&v36);
                while (__stlxr(0, (unint64_t *)&v36));
                do
                  v31 = (void *)__ldaxr((unint64_t *)&v39);
                while (__stlxr(v30, (unint64_t *)&v39));

              }
            }
          }
        }
      }
      v32 = (NSMapTable *)*((_QWORD *)this + 24);
      v33 = key;
      v34 = (const void *)atomic_load((unint64_t *)&v39);
      NSMapInsert(v32, v33, v34);
    }
    v10 = (void *)atomic_load((unint64_t *)&v39);

  }
  return v10;
}

uint64_t TBaseFont::HasVariations(TBaseFont *this)
{
  return 0;
}

void TTenuousComponentFont::CopyTraitsInternal(TTenuousComponentFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v8;
  void *v9;
  void *v11;
  id v12;
  int v13;
  id v14;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontTraitsAttribute"), &v14);
  do
    v4 = __ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    v13 = 0;
    v14 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TTenuousComponentFont *, int *))(*(_QWORD *)this + 656))(&v14, this, &v13);
    if (atomic_load((unint64_t *)&v14))
    {
      if (!atomic_load(a2))
      {
        do
          v8 = __ldaxr((unint64_t *)&v14);
        while (__stlxr(0, (unint64_t *)&v14));
        do
          v9 = (void *)__ldaxr(a2);
        while (__stlxr(v8, a2));

      }
      if (atomic_load(a2))
      {
        v11 = (void *)atomic_load(a2);
        v12 = v11;
        TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v12, CFSTR("NSCTFontTraitsAttribute"));

      }
    }

  }
}

void CreateTraitValues(double a1@<D0>, double a2@<D1>, double a3@<D2>, const __CFString *a4@<X4>, int a5@<W0>, int a6@<W1>, int a7@<W2>, int a8@<W3>, unint64_t *a9@<X8>)
{
  double v18;
  BOOL v19;
  _BOOL4 v20;
  double v21;
  __CFDictionary *v22;
  const void *v23;
  __CFDictionary *v24;
  const void *v25;
  __CFDictionary *v26;
  unint64_t v27;
  __CFDictionary *v28;
  const void *v29;
  __CFDictionary *v30;
  const void *v31;
  id v32;
  id Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a5)
  {
    if (a1 > 0.239)
      a8 |= 2u;
    TCFNumber::TCFNumber<double>((unint64_t *)&v32, a1);
    v28 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v29 = (const void *)atomic_load((unint64_t *)&v32);
    CFDictionarySetValue(v28, CFSTR("NSCTFontWeightTrait"), v29);

    if (!a6)
    {
LABEL_3:
      if (!a7)
        goto LABEL_7;
      goto LABEL_4;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  if (a2 <= 0.15)
  {
    if (a2 < -0.15)
      a8 |= 0x40u;
  }
  else
  {
    a8 |= 0x20u;
  }
  TCFNumber::TCFNumber<double>((unint64_t *)&v32, a2);
  v30 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v31 = (const void *)atomic_load((unint64_t *)&v32);
  CFDictionarySetValue(v30, CFSTR("NSCTFontProportionTrait"), v31);

  if (a7)
  {
LABEL_4:
    v18 = fabs(a3);
    v19 = v18 <= 0.000001;
    v20 = v18 > 0.000001;
    v21 = 0.0;
    if (!v19)
      v21 = a3;
    a8 |= v20;
    TCFNumber::TCFNumber<double>((unint64_t *)&v32, v21);
    v22 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v23 = (const void *)atomic_load((unint64_t *)&v32);
    CFDictionarySetValue(v22, CFSTR("NSCTFontSlantTrait"), v23);

  }
LABEL_7:
  TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v32, a8 | 0x4000);
  v24 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v25 = (const void *)atomic_load((unint64_t *)&v32);
  CFDictionarySetValue(v24, CFSTR("NSCTFontSymbolicTrait"), v25);

  if (a4)
  {
    v26 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionarySetValue(v26, CFSTR("NSCTFontUIFontDesignTrait"), a4);
  }
  do
    v27 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a9 = v27;

}

unint64_t *TCFNumber::TCFNumber<double>(unint64_t *a1, double a2)
{
  unint64_t v3;
  id v5;
  double valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  *a1 = v3;

  return a1;
}

unint64_t *TCFNumber::TCFNumber<unsigned int>(unint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  id v5;
  uint64_t valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  *a1 = v3;

  return a1;
}

void TComponentFont::CreateTraitsValuesPerFontInfo(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  int v9;
  const __CFString *v10;
  const __CFDictionary *v11;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1) || (v6 = *(double *)(a1 + 632), v6 == 2.0))
  {
    v11 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 720));
    if (v11 && CFDictionaryGetValue(v11, CFSTR("FontMetrics")))
      TSplicedFontDict::CreateTraitsValuesPerFontInfo((TSplicedFontDict *)(a1 + 720), 2.0, COERCE__INT64(2.0), COERCE_CHAR_(2.0), 0, 0, 0, a3);
    else
      TBaseFont::CreateTraitsValuesPerFontInfo((unint64_t *)a1, a2, a3);
  }
  else
  {
    if ((*(_DWORD *)(a1 + 652) & 1) != 0)
      v7 = 0.0694444444;
    else
      v7 = 0.0;
    v8 = *(double *)(a1 + 640);
    *a2 = 1;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v10 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
    CreateTraitValues(v6, v8, v7, v10, 1, 1, 1, v9, a3);
  }
}

unint64_t TBaseFont::GetDefaultFallbacks(TBaseFont *a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  const __CFCharacterSet *v9;
  void *v10;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  void *v16;
  unint64_t v17;
  int v19;
  void *v20;
  const __CFCharacterSet *v22;
  id v23;
  id v24;

  if ((a3 & 1) == 0)
    return 0;
  v5 = 1;
  if ((a3 & 4) != 0)
    v5 = 2;
  if (a2 == 1)
    v6 = v5;
  else
    v6 = 0;
  v7 = (unint64_t *)((char *)a1 + 8 * v6 + 128);
  if (atomic_load(v7))
    return atomic_load(v7);
  v23 = (id)0xAAAAAAAAAAAAAAAALL;
  v24 = 0;
  v22 = 0;
  TBaseFont::CreateFallbacks(a1, a2, a3, &v22, 0, (unint64_t *)&v23);
  v9 = v22;
  do
    v10 = (void *)__ldaxr((unint64_t *)&v24);
  while (__stlxr((unint64_t)v9, (unint64_t *)&v24));

  if (atomic_load((unint64_t *)&v24))
  {
    v12 = (unint64_t *)((char *)a1 + 8 * v6 + 152);
    do
      v13 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
    do
    {
      if (__ldaxr(v12))
      {
        v15 = 0;
        __clrex();
        goto LABEL_20;
      }
    }
    while (__stlxr(v13, v12));
    v15 = 1;
LABEL_20:
    if (v15)
      v16 = 0;
    else
      v16 = (void *)v13;

  }
  do
    v17 = __ldaxr((unint64_t *)&v23);
  while (__stlxr(0, (unint64_t *)&v23));
  do
  {
    if (__ldaxr(v7))
    {
      v19 = 0;
      __clrex();
      goto LABEL_30;
    }
  }
  while (__stlxr(v17, v7));
  v19 = 1;
LABEL_30:
  if (v19)
    v20 = 0;
  else
    v20 = (void *)v17;

  v3 = atomic_load(v7);
  return v3;
}

void TBaseFont::CopyCascadeList(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TBaseFont::ModifyTraitsDictionary(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unint64_t TFont::GetDefaultFallbacks(TFont *this)
{
  TBaseFont *v2;
  int IsSystemUIFontAndForShaping;
  BOOL v5;

  v2 = (TBaseFont *)*((_QWORD *)this + 50);
  IsSystemUIFontAndForShaping = TFont::IsSystemUIFontAndForShaping(this, &v5);
  return TBaseFont::GetDefaultFallbacks(v2, IsSystemUIFontAndForShaping, ((unint64_t)*(unsigned int *)this >> 6) & 7);
}

void TFontCascade::CreateFallbackFromDescriptor(TFontCascade *this@<X0>, const __CTFontDescriptor *a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  const __CTFontDescriptor *v6;
  unint64_t v8;
  const __CTFontDescriptor *v9;
  id v10;
  int v11;
  const __CTFontDescriptor *v12;

  v12 = a2;
  v5 = atomic_load((unint64_t *)this);
  v6 = (const __CTFontDescriptor *)atomic_load((unint64_t *)(*(_QWORD *)(v5 + 40) + 160));
  if (v6)
    a3 = 0;
  v11 = *((_DWORD *)this + 44) | a3;
  if (v6)
    v6 = (const __CTFontDescriptor *)atomic_load((unint64_t *)this + 1);
  v9 = v6;
  TCFBase_NEW<CTFont,__CTFontDescriptor const*&,double const&,CGAffineTransform * const&,unsigned int &,__CTFontDescriptor const*>(&v12, (double *)this + 21, (CGAffineTransform **)this + 23, &v11, &v9, (unint64_t *)&v10);
  do
    v8 = __ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));
  *a4 = v8;

}

void TCFBase_NEW<CTFont,__CTFontDescriptor const*&,double const&,CGAffineTransform * const&,unsigned int &,__CTFontDescriptor const*>(const __CTFontDescriptor **a1@<X0>, double *a2@<X1>, CGAffineTransform **a3@<X2>, int *a4@<X3>, const __CTFontDescriptor **a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  const __CTFontDescriptor *v14;
  double v15;
  CGAffineTransform *v16;
  int v17;
  const __CTFontDescriptor *v18;
  TFont *v19;
  unint64_t v20;
  id v21;

  v12 = TCFBase<TFont>::Allocate();
  if (v12)
  {
    v13 = (_QWORD *)v12;
    v14 = *a1;
    v15 = *a2;
    v16 = *a3;
    v17 = *a4;
    v18 = *a5;
    v19 = (TFont *)(v12 + 48);
    v13[2] = 0;
    v13[3] = TFont::Hash;
    v13[4] = 0;
    v13[5] = v19;
    TFont::TFont(v19, v14, v15, v16, v17, v18);
    v21 = v13;
    do
      v20 = __ldaxr((unint64_t *)&v21);
    while (__stlxr(0, (unint64_t *)&v21));
    *a6 = v20;

  }
  else
  {
    *a6 = 0;
  }
}

void TFont::TFont(TFont *this, const __CTFontDescriptor *a2, double a3, CGAffineTransform *a4, int a5, const __CTFontDescriptor *a6)
{
  unint64_t *v11;
  const __CTFontDescriptor *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  const __CTFontDescriptor *v16;
  unint64_t *v17;
  const __CFDictionary *v18;
  const __CFArray *Value;

  *(_DWORD *)this = 0;
  v11 = (unint64_t *)((char *)this + 8);
  TFont::InitDescriptor(a2, (unint64_t *)this + 1);
  *((double *)this + 2) = TFont::InitSize(a6, a3, v12);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0x80000000;
  TFont::InitMatrix((TFont *)a4, (const CGAffineTransform *)a6, (_QWORD *)this + 5);
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 12) = 0;
  v13 = *MEMORY[0x1E0C9D648];
  v14 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  *(_OWORD *)((char *)this + 104) = v13;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 120) = v14;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = TFont::InitBaseFont(v15, v11);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 122) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 66) = 0;
  if ((a5 & 8) == 0)
  {
    v16 = (const __CTFontDescriptor *)atomic_load(v11);
    if (a6
      && (v17 = (unint64_t *)(*((_QWORD *)a6 + 5) + 8),
          atomic_load(v17),
          (v18 = (const __CFDictionary *)atomic_load(v17)) != 0))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("CTFontOriginalFeatureSettingsAttribute"));
    }
    else
    {
      Value = 0;
    }
    TFont::SetExtras(this, v16, Value);
  }
  TFont::SetFlags(this, a5, a6);
  TFont::SetOpticalSize(this, a6);
  TFont::AddFontSpecificFeatureSettings(this);
}

BOOL NameHasCharacterFromSet(const TBaseFont *a1, const __CFString *a2, int a3, const __CFCharacterSet *a4)
{
  uint64_t v5;
  const __CFString *v7;
  const __CFString *v8;
  _BOOL8 v9;
  id v11;
  CFRange v12;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  v5 = *(_QWORD *)a1;
  if (a3)
    (*(void (**)(id *__return_ptr))(v5 + 88))(&v11);
  else
    (*(void (**)(id *__return_ptr))(v5 + 72))(&v11);
  if (atomic_load((unint64_t *)&v11))
  {
    v7 = (const __CFString *)atomic_load((unint64_t *)&v11);
    v8 = (const __CFString *)atomic_load((unint64_t *)&v11);
    v12.length = CFStringGetLength(v8);
    v12.location = 0;
    v9 = CFStringFindCharacterFromSet(v7, a4, v12, 0, 0) != 0;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void DerivedOpticalFontDescriptor(const __CTFontDescriptor *a1, TDescriptor **a2, double a3, TSplicedFont *a4)
{
  unint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  double v12;
  id v13;
  unint64_t OpticalSizeComponent;

  if (!a4 || !(*(unsigned int (**)(TSplicedFont *))(*(_QWORD *)a4 + 840))(a4))
  {
LABEL_20:
    *(_QWORD *)a1 = 0;
    return;
  }
  if ((*(unsigned int (**)(TSplicedFont *))(*(_QWORD *)a4 + 16))(a4) != 1414743620
    || (OpticalSizeComponent = TSplicedFont::GetOpticalSizeComponent(a4, a3)) == 0)
  {
    v9 = (*(uint64_t (**)(TSplicedFont *))(*(_QWORD *)a4 + 16))(a4);
    v10 = v9 == 1414809156 || v9 == 1413695044;
    if (!v10
      || ((v12 = NAN,
           *(double *)&v13 = NAN,
           (*(unsigned int (**)(TSplicedFont *, id *, double *))(*(_QWORD *)a4 + 424))(a4, &v13, &v12))
        ? (v11 = *(double *)&v13 > a3)
        : (v11 = 1),
          v11 || v12 != 0.0 && v12 < a3))
    {
      TDescriptor::CreateMatchingDescriptor(a2[5], 0, a3, 1024, a1);
      return;
    }
    goto LABEL_20;
  }
  LODWORD(v12) = 1024;
  TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,$_24>((unint64_t *)&v13, (uint64_t *)&OpticalSizeComponent, (int *)&v12);
  do
    v8 = __ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));
  *(_QWORD *)a1 = v8;

}

unint64_t TSplicedFont::GetOpticalSizeComponent(TSplicedFont *this, double a2)
{
  void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex v7;
  unint64_t v9;
  CFIndex v10;
  double *v11;
  void *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  void *v16;
  const void *ValueAtIndex;
  uint64_t v18;

  if (!*((_QWORD *)this + 77))
    return 0;
  v4 = (void *)atomic_load((unint64_t *)this + 78);
  v5 = v4;
  v6 = v5;
  v7 = v5 ? CFArrayGetCount(v5) : 0;

  if (a2 + 0.01 <= 0.0 || v7 < 1)
    return 0;
  v10 = 0;
  v11 = (double *)*((_QWORD *)this + 77);
  while (a2 + 0.01 < *v11)
  {
    ++v10;
    v11 += 7;
    if (v7 == v10)
    {
      v12 = (void *)atomic_load((unint64_t *)this + 78);
      v13 = v12;
      v14 = v13;
      v15 = v7 - 1;
      goto LABEL_15;
    }
  }
  v16 = (void *)atomic_load((unint64_t *)this + 78);
  v13 = v16;
  v14 = v13;
  v15 = v10;
LABEL_15:
  ValueAtIndex = CFArrayGetValueAtIndex(v13, v15);
  v18 = *((_QWORD *)ValueAtIndex + 5);
  if ((*(_DWORD *)(v18 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)ValueAtIndex + 5), 0, 0.0);
  v9 = atomic_load((unint64_t *)(v18 + 32));

  return v9;
}

unint64_t *OS2::OS2(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  const UInt8 *BytePtr;
  const __CFData *Length;

  do
    v3 = __ldaxr(a2);
  while (__stlxr(0, a2));
  *a1 = v3;
  BytePtr = (const UInt8 *)atomic_load(a1);
  if (BytePtr)
    BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
  a1[1] = (unint64_t)BytePtr;
  Length = (const __CFData *)atomic_load(a1);
  if (Length)
    Length = (const __CFData *)CFDataGetLength(Length);
  a1[2] = (unint64_t)Length;
  return a1;
}

double WeightOfClass(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  double v3;
  unsigned int v4;
  double v5;
  float v6;

  v1 = (5243 * (a1 >> 2)) >> 17;
  if (v1 >= 9)
    v2 = 9;
  else
    v2 = (5243 * (a1 >> 2)) >> 17;
  v3 = (double)(int)(100 * v1);
  v4 = v2 + 1;
  v5 = (double)(int)(100 * v4);
  v6 = 0.0;
  if (v3 != v5)
    v6 = ((double)a1 - v3) / (v5 - v3);
  return std::__lerp[abi:nn180100]<float>(kWeightScale[v1], kWeightScale[v4], v6);
}

void TInstanceFont::ModifyTraitsDictionary(TInstanceFont *this@<X0>, const __CFDictionary *a2@<X1>, unint64_t *a3@<X8>)
{
  __CFDictionary *v5;
  const void *v6;
  unint64_t v7;
  id v8;
  id v9;

  if (*((_BYTE *)this + 624))
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v9, a2);
    TCFNumber::TCFNumber<double>((unint64_t *)&v8, *((double *)this + 77));
    v5 = (__CFDictionary *)atomic_load((unint64_t *)&v9);
    v6 = (const void *)atomic_load((unint64_t *)&v8);
    CFDictionarySetValue(v5, CFSTR("NSCTFontWeightTrait"), v6);

    do
      v7 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a3 = v7;

  }
  else
  {
    *a3 = 0;
  }
}

