CGFloat TFont::GetStrikethroughPositionAndThickness(TFont *this)
{
  TBaseFont *v2;
  __int128 v3;
  double v4;
  double v5;
  int v6;
  id v8;
  id v9[3];
  double v10;
  double v11;
  CGAffineTransform v12;

  v2 = (TBaseFont *)*((_QWORD *)this + 50);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)&v12.c = v3;
  *(_OWORD *)&v12.tx = v3;
  *(_OWORD *)&v12.a = v3;
  TFont::GetScaledMatrix(this, &v12);
  v4 = (*(double (**)(TBaseFont *, CGAffineTransform *))(*(_QWORD *)v2 + 608))(v2, &v12) * 0.5;
  v11 = v4;
  TFont::GetUnderlinePositionAndThickness(this);
  v10 = v5;
  if (v4 <= 0.0)
  {
    if (!TBaseFont::GetInitializedGraphicsFont(v2) || !CGFontGetParserFont() || (FPFontGetStrikeout() & 1) == 0)
    {
      memset(v9, 170, sizeof(v9));
      (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v2 + 480))(&v8, v2, 1330851634);
      OS2::OS2((unint64_t *)v9, (unint64_t *)&v8);

      if ((uint64_t)v9[2] < 78)
      {

        return v11;
      }
      v6 = bswap32(*((unsigned __int16 *)v9[1] + 14));
      v10 = (double)((int)bswap32(*((unsigned __int16 *)v9[1] + 13)) >> 16);
      v11 = (double)(v6 >> 16);

    }
    return v12.ty + v12.d * v11 + v12.b * 0.0 + fabs(v12.ty + v10 * v12.d + v12.b * 0.0) * -0.5;
  }
  return v4;
}

unint64_t TFont::GetSecondaryScaleData(TFont *this)
{
  unint64_t v1;
  unint64_t v2;
  TBaseFont *v4;
  void *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *Value;
  const void *v9;
  id v11;
  BOOL v12;

  v1 = atomic_load((unint64_t *)this + 45);
  if (v1 == -1)
    v2 = 0;
  else
    v2 = v1;
  if (!v1)
  {
    v4 = (TBaseFont *)*((_QWORD *)this + 50);
    if (v4 && TFont::IsSystemUIFontAndForShaping(this, &v12))
    {
      v11 = (id)0xAAAAAAAAAAAAAAAALL;
      TBaseFont::CopyMetadata(v4, 1, &v11);
      v5 = (void *)atomic_load((unint64_t *)&v11);
      v6 = v5;
      if (v6)
      {
        v7 = v6;
        Value = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("textscale.secondary"));

        if (Value)
        {
          v9 = CFDictionaryGetValue(Value, CFSTR("v2"));
          if (v9)
          {
            v2 = (unint64_t)v9;
            atomic_store((unint64_t)v9, (unint64_t *)this + 45);

            return v2;
          }
        }
      }
      else
      {

      }
    }
    v2 = 0;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)this + 45);
  }
  return v2;
}

void TFont::SetOpticalSize(TFont *this, const __CTFontDescriptor *a2)
{
  unint64_t *v2;
  const __CFDictionary *v5;
  const __CFString *Value;
  int v7;
  uint64_t v8;
  char v9;
  _BOOL4 v10;
  CFTypeID v11;
  unint64_t v12;
  void *v13;
  int v14;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  int v21;
  double v22;
  int v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  void *v27;
  void *v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  const __CFNumber *v32;
  double v33;
  unint64_t TraitsValues;
  const __CFString *v35;
  const __CFArray *v36;
  CFIndex Count;
  CFIndex v38;
  CFIndex v39;
  TDescriptor **ValueAtIndex;
  TDescriptor **v41;
  TDescriptor *v42;
  unint64_t *v43;
  unint64_t v44;
  double v45;
  id v46;
  unint64_t v47;
  const __CFDictionary *v48;
  unint64_t *v49;
  const __CFDictionary *v50;
  const __CFDictionary *v51;
  CFTypeID v52;
  const __CFDictionary *v53;
  CFTypeID v54;
  const __CFDictionary *v55;
  const __CFNumber *v56;
  id v57;
  double v58;
  const __CFDictionary *v59;
  double v60;
  double v61;
  uint64_t v62;
  void *v63;
  TDescriptor **v64;
  TDescriptor **v65;
  TDescriptor *v66;
  const TBaseFont *v67;
  const TBaseFont *TenuousComponentFont;
  const TTenuousComponentFont *v69;
  TTenuousComponentFont *v70;
  uint64_t v71;
  const __CFDictionary *v72;
  uint64_t v73;
  const __CFDictionary *v74;
  uint64_t v75;
  unint64_t *v76;
  void *v77;
  _QWORD *v78;
  int v79;
  int v80;
  unint64_t v81;
  void *v82;
  unsigned int *v83;
  void *v84;
  TDescriptor **v85;
  TDescriptor **v86;
  TDescriptor *v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  const __CTFontDescriptor *v103;
  id v104;
  double v105;
  double v106;
  id v107;
  void *v108;
  id v109;
  id v110;
  double valuePtr;
  id v112;

  v2 = (unint64_t *)*((_QWORD *)this + 50);
  if (v2)
  {
    valuePtr = 0.0;
    v5 = (const __CFDictionary *)atomic_load((unint64_t *)this + 20);
    if (v5)
      Value = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("NSCTFontOpticalSizeAttribute"));
    else
      Value = 0;
    v7 = (*(uint64_t (**)(unint64_t *, uint64_t))(*v2 + 472))(v2, 1398030676);
    v110 = 0;
    v103 = a2;
    if (!v7)
      goto LABEL_12;
    v8 = *((_QWORD *)this + 50);
    if ((*(_DWORD *)(v8 + 184) & 0x100) == 0)
      TBaseFont::DetermineFontFlags(*((TBaseFont **)this + 50), 256);
    if ((*(_DWORD *)(v8 + 180) & 0x100) != 0)
    {
LABEL_12:
      v9 = 0;
      v10 = 0;
      if (!Value)
        goto LABEL_36;
    }
    else if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 50) + 472))(*((_QWORD *)this + 50), 1953653099) & 1) != 0)
    {
      v9 = 0;
      v10 = 1;
      if (!Value)
        goto LABEL_36;
    }
    else
    {
      (*(void (**)(id *__return_ptr, unint64_t *))(*v2 + 128))(&v112, v2);
      do
        v18 = __ldaxr((unint64_t *)&v112);
      while (__stlxr(0, (unint64_t *)&v112));
      do
        v19 = (void *)__ldaxr((unint64_t *)&v110);
      while (__stlxr(v18, (unint64_t *)&v110));

      v20 = atomic_load((unint64_t *)&v110);
      v10 = v20 != 0;
      v9 = 1;
      if (!Value)
        goto LABEL_36;
    }
    v11 = CFGetTypeID(Value);
    if (v11 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)Value, kCFNumberDoubleType, &valuePtr);
      if (valuePtr <= 0.0)
        goto LABEL_139;
      goto LABEL_36;
    }
    if (v11 == CFStringGetTypeID())
    {
      if ((v9 & 1) == 0)
      {
        (*(void (**)(id *__return_ptr, unint64_t *))(*v2 + 128))(&v112, v2);
        do
          v12 = __ldaxr((unint64_t *)&v112);
        while (__stlxr(0, (unint64_t *)&v112));
        do
          v13 = (void *)__ldaxr((unint64_t *)&v110);
        while (__stlxr(v12, (unint64_t *)&v110));

      }
      if (Value == CFSTR("auto") || CFStringCompare(Value, CFSTR("auto"), 1uLL) == kCFCompareEqualTo)
      {
        v16 = 0;
        valuePtr = *((double *)this + 2);
        v47 = atomic_load((unint64_t *)&v110);
        v17 = v47 != 0;
        v14 = 1;
      }
      else
      {
        if (Value != CFSTR("none") && CFStringCompare(Value, CFSTR("none"), 1uLL))
          goto LABEL_36;
        v14 = 0;
        v15 = atomic_load((unint64_t *)&v110);
        v16 = v15 != 0;
        if (v15)
          v17 = 1;
        else
          v17 = v10;
        if (!v15 && v10)
        {
          v17 = 0;
          v16 = 0;
          v14 = 0;
          valuePtr = 0.0;
        }
      }
LABEL_37:
      *((double *)this + 3) = valuePtr;
      if ((TFont::IsSystemUIFontAndForShaping(this, (BOOL *)&v112) & 1) != 0)
        v21 = 1;
      else
        v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 50) + 712))(*((_QWORD *)this + 50));
      v22 = *((double *)this + 3);
      if (v22 == 0.0)
        v23 = v16;
      else
        v23 = 1;
      v24 = v23 == 1 || (v17 | v21) == 0;
      v25 = v14;
      if (!v24)
      {
        if (((v14 | v21) & 1) == 0
          && TBaseFont::GetInitializedGraphicsFont((TBaseFont *)v2)
          && CGFontGetParserFont()
          && (FPFontHasNamedInstanceWithOpticalSize() & 1) != 0)
        {
          goto LABEL_139;
        }
        v22 = *((double *)this + 2);
        *((double *)this + 3) = v22;
        v25 = 1;
      }
      if (((v22 == 0.0) & ~v16) != 0)
      {
LABEL_139:

        return;
      }
      if (!v17)
        goto LABEL_66;
      if ((v9 & 1) == 0)
      {
        (*(void (**)(id *__return_ptr, unint64_t *))(*v2 + 128))(&v112, v2);
        do
          v26 = __ldaxr((unint64_t *)&v112);
        while (__stlxr(0, (unint64_t *)&v112));
        do
          v27 = (void *)__ldaxr((unint64_t *)&v110);
        while (__stlxr(v26, (unint64_t *)&v110));

      }
      if (!atomic_load((unint64_t *)&v110))
      {
LABEL_66:
        if (((v7 | v21) & 1) != 0)
          goto LABEL_139;
        *(double *)&v112 = NAN;
        *(double *)&v109 = NAN;
        if (!(*(unsigned int (**)(unint64_t *, id *, id *))(*v2 + 424))(v2, &v112, &v109))
          goto LABEL_139;
        v33 = *((double *)this + 3);
        if (*(double *)&v112 <= v33 && (v33 < *(double *)&v109 || *(double *)&v109 == 0.0))
          goto LABEL_139;
        TraitsValues = atomic_load(v2 + 30);
        if (!TraitsValues)
          TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v2);
        v108 = (void *)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(void **__return_ptr, _QWORD, const __CFString *))(**((_QWORD **)this + 50) + 72))(&v108, *((_QWORD *)this + 50), CFSTR("CTFontFamilyName"));
        v107 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v106);
        v35 = (const __CFString *)atomic_load((unint64_t *)&v108);
        TDescriptorSource::CopyMatchingDescriptorsForFamily((TPurgeableCache **)&v106, v35, (CFComparisonResult (*)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily, 0x50uLL, (unint64_t *)&v107);
        v36 = (const __CFArray *)atomic_load((unint64_t *)&v107);
        if (v36)
        {
          Count = CFArrayGetCount(v36);
          if (Count)
          {
            v38 = Count;
            v39 = 0;
            while (1)
            {
              ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(v36, v39);
              v41 = ValueAtIndex;
              v42 = ValueAtIndex[5];
              if ((*((_DWORD *)v42 + 4) & 0x80000000) == 0)
                TDescriptor::InitBaseFont(ValueAtIndex[5], 0, 0.0);
              v43 = (unint64_t *)atomic_load((unint64_t *)v42 + 4);
              if (v43)
              {
                v44 = atomic_load(v43 + 30);
                if (!v44)
                  v44 = TBaseFont::CreateTraitsValues((TBaseFont *)v43);
                if (*(_DWORD *)v44 == *(_DWORD *)TraitsValues
                  && *(double *)(v44 + 8) == *(double *)(TraitsValues + 8)
                  && *(double *)(v44 + 16) == *(double *)(TraitsValues + 16)
                  && *(double *)(v44 + 24) == *(double *)(TraitsValues + 24))
                {
                  v105 = NAN;
                  v106 = NAN;
                  if ((*(unsigned int (**)(unint64_t *, double *, double *))(*v43 + 424))(v43, &v106, &v105))
                  {
                    v45 = *((double *)this + 3);
                    if (v106 <= v45 && v45 < v105)
                      break;
                  }
                }
              }
              if (v38 == ++v39)
                goto LABEL_85;
            }
            v104 = v41;
            v94 = (unint64_t *)((char *)this + 8);
            do
              v95 = __ldaxr((unint64_t *)&v104);
            while (__stlxr(0, (unint64_t *)&v104));
            do
              v96 = (void *)__ldaxr(v94);
            while (__stlxr(v95, v94));

            v97 = (unsigned int *)*((_QWORD *)this + 50);
            v98 = (unsigned int *)(v43 + 1);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
            *((_QWORD *)this + 50) = v43;
            if (v97)
            {
              v100 = v97 + 2;
              do
              {
                v101 = __ldxr(v100);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, v100));
              if (!v102)
              {
                __dmb(9u);
                (*(void (**)(unsigned int *))(*(_QWORD *)v97 + 8))(v97);
              }
            }
          }
        }
LABEL_85:

        v46 = v108;
        goto LABEL_138;
      }
      *(double *)&v109 = -3.72066208e-103;
      (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 112))(&v109);
      v29 = (void *)atomic_load((unint64_t *)&v109);
      v30 = v29;
      v31 = v30;
      if (v30)
        v32 = (const __CFNumber *)CFDictionaryGetValue(v30, &unk_1E1614B30);
      else
        v32 = 0;
      v48 = v103;

      if (v103)
      {
        v49 = (unint64_t *)(*((_QWORD *)v103 + 5) + 8);
        atomic_load(v49);
        v50 = (const __CFDictionary *)atomic_load(v49);
        if (!v50)
          goto LABEL_96;
        v51 = (const __CFDictionary *)CFDictionaryGetValue(v50, CFSTR("NSCTFontVariationAttribute"));
        v48 = v51;
        if (!v51)
          goto LABEL_97;
        v52 = CFGetTypeID(v51);
        if (v52 == CFDictionaryGetTypeID())
        {
          v53 = (const __CFDictionary *)CFDictionaryGetValue(v48, &unk_1E1614B30);
          v48 = v53;
          if (v53)
          {
            v54 = CFGetTypeID(v53);
            if (v54 == CFNumberGetTypeID())
              v32 = v48;
            else
              v48 = 0;
          }
        }
        else
        {
LABEL_96:
          v48 = 0;
        }
      }
LABEL_97:
      v55 = (const __CFDictionary *)atomic_load((unint64_t *)&v110);
      v56 = (const __CFNumber *)CFDictionaryGetValue(v55, CFSTR("NSCTVariationAxisDefaultValue"));
      *(double *)&v112 = NAN;
      CFNumberGetValue(v56, kCFNumberDoubleType, &v112);
      v57 = v112;
      if ((v16 & 1) != 0)
      {
        *((double *)this + 3) = *(double *)&v112;
        v58 = *(double *)&v57;
      }
      else
      {
        v58 = *((double *)this + 3);
      }
      v59 = (const __CFDictionary *)atomic_load((unint64_t *)&v110);
      ClampValueToRangeOfAxis(v58, v59);
      v61 = v60;
      v108 = 0;
      if (v32)
      {
        *(double *)&v112 = NAN;
        CFNumberGetValue(v32, kCFNumberDoubleType, &v112);
        if ((v14 & (v48 != 0)) != 0)
          v61 = *(double *)&v112;
        if (vabdd_f64(*(double *)&v112, v61) < 0.0001
          || (v14 & 1) == 0 && !TFont::HasDerivedOpticalSize(this) && (v32 == v48 || v48 && CFEqual(v32, v48)))
        {
          goto LABEL_137;
        }
        v62 = (uint64_t)v108;
      }
      else
      {
        if ((v16 & 1) != 0)
        {
LABEL_137:
          v46 = v109;
LABEL_138:

          goto LABEL_139;
        }
        if (*(double *)&v57 != v60)
          goto LABEL_111;
        v62 = *((_QWORD *)this + 50);
        v108 = (void *)v62;
      }
      if (v62)
      {
LABEL_121:
        v76 = (unint64_t *)((char *)this + 8);
        v77 = (void *)atomic_load((unint64_t *)this + 1);
        v78 = v77;
        v79 = *(_DWORD *)(v78[5] + 16);

        if (v25)
          v80 = 0x8000;
        else
          v80 = 0;
        LODWORD(v107) = v79 & 0xFFFF7FFF | v80;
        TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>((uint64_t *)&v108, (int *)&v107, (unint64_t *)&v112);
        do
          v81 = __ldaxr((unint64_t *)&v112);
        while (__stlxr(0, (unint64_t *)&v112));
        do
          v82 = (void *)__ldaxr(v76);
        while (__stlxr(v81, v76));

        v83 = (unsigned int *)*((_QWORD *)this + 50);
        v84 = (void *)atomic_load((unint64_t *)this + 1);
        v85 = v84;
        v86 = v85;
        v87 = v85[5];
        if ((*((_DWORD *)v87 + 4) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(v85[5], 0, 0.0);
        v88 = atomic_load((unint64_t *)v87 + 4);
        if (v88)
        {
          v89 = (unsigned int *)(v88 + 8);
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        *((_QWORD *)this + 50) = v88;

        if (v83)
        {
          v91 = v83 + 2;
          do
          {
            v92 = __ldxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            __dmb(9u);
            (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
          }
        }
        goto LABEL_137;
      }
LABEL_111:
      v63 = (void *)atomic_load((unint64_t *)this + 1);
      v64 = v63;
      v65 = v64;
      v66 = v64[5];
      if ((*((_DWORD *)v66 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(v64[5], 0, 0.0);
      v67 = (const TBaseFont *)atomic_load((unint64_t *)v66 + 4);

      if (!v67)
        goto LABEL_137;
      TenuousComponentFont = GetTenuousComponentFont(v67);
      if (TenuousComponentFont)
      {
        v69 = TenuousComponentFont;
        v70 = (TTenuousComponentFont *)operator new();
        TTenuousComponentFont::TTenuousComponentFont(v70, v69, v61);
        v108 = (void *)v71;
      }
      else
      {
        *(double *)&v112 = -3.72066208e-103;
        v72 = (const __CFDictionary *)atomic_load((unint64_t *)&v109);
        CopyVariationWithValue(v72, (const __CFNumber *)&unk_1E1614B30, v61, (unint64_t *)&v112);
        v73 = operator new();
        v74 = (const __CFDictionary *)atomic_load((unint64_t *)&v112);
        v108 = (void *)TInstanceFont::TInstanceFont(v73, (uint64_t)v67, v75, v74);

      }
      goto LABEL_121;
    }
LABEL_36:
    v16 = 0;
    v14 = 0;
    v17 = v10;
    goto LABEL_37;
  }
}

void TsbixContext::TsbixContext(TsbixContext *this, id a2)
{
  void *v3;
  const __CFData *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  void *v7;
  id v8;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;

  *(_QWORD *)this = a2;
  v3 = (void *)atomic_load((unint64_t *)this);
  v4 = v3;
  v5 = v4;
  if (v4)
    BytePtr = CFDataGetBytePtr(v4);
  else
    BytePtr = 0;

  *((_QWORD *)this + 1) = BytePtr;
  v7 = (void *)atomic_load((unint64_t *)this);
  v8 = v7;
  v9 = (const __CFData *)v8;
  if (v9)
  {
    v10 = v9;
    v11 = CFDataGetBytePtr(v9);

    if (v11)
      v11 += CFDataGetLength((CFDataRef)v8);
  }
  else
  {

    v11 = 0;
  }

  *((_QWORD *)this + 2) = v11;
  v12 = *((_QWORD *)this + 1);
  if (!v12
    || !*(_WORD *)v12
    || (v13 = *(_DWORD *)(v12 + 4)) == 0
    || ((v14 = v12 + 4 * bswap32(v13), v12 <= v14 + 4) ? (v15 = v14 + 8 > (unint64_t)v11) : (v15 = 1), v15))
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void TFont::CopyVariantsOfGlyph(TFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFAllocator *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  void *v11;
  TBaseFont *v12;
  uint64_t v13;
  uint64_t InitializedGraphicsFont;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const CFArrayCallBacks *v19;
  const __CFNumber *ValueAtIndex;
  const __CFDictionary *v21;
  CFArrayRef v22;
  __CFDictionary *v23;
  unint64_t v24;
  unint64_t *v25;
  id v26;
  id v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  id Mutable;
  unsigned __int16 valuePtr;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v36[0] = &off_1E15E1018;
  v36[1] = &Mutable;
  v37 = v36;
  TOpenTypeMorph::AddVariantsOfGlyph((uint64_t)this, a2, (uint64_t)v36);
  v7 = v37;
  if (v37 == v36)
  {
    v8 = 4;
    v7 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v33 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(&v33, *((_QWORD *)this + 50), 1516335206);
  if (atomic_load((unint64_t *)&v33))
  {
    v25 = a3;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31 = v10;
    v32 = v10;
    v29 = v10;
    v30 = v10;
    *(_OWORD *)v27 = v10;
    v28 = v10;
    v11 = (void *)atomic_load((unint64_t *)&v33);
    v12 = (TBaseFont *)*((_QWORD *)this + 50);
    v13 = *((_QWORD *)v12 + 25);
    if (!v13)
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v12);
      v13 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v12 + 872))(v12, InitializedGraphicsFont);
    }
    ZapfTable::ZapfTable((ZapfTable *)v27, v11, v13);
    v26 = (id)0xAAAAAAAAAAAAAAAALL;
    ZapfTable::VariantsForGlyph((ZapfTable *)v27, a2, (unint64_t *)&v26);
    v15 = (const __CFArray *)atomic_load((unint64_t *)&v26);
    if (v15)
    {
      Count = CFArrayGetCount(v15);
      if (Count)
      {
        v17 = Count;
        v18 = 0;
        v19 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v15, v18);
          valuePtr = -21846;
          CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
          if (valuePtr != (_DWORD)a2)
          {
            v21 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
            if (!CFDictionaryContainsKey(v21, ValueAtIndex))
            {
              v22 = CFArrayCreate(v6, 0, 0, v19);
              v23 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
              CFDictionarySetValue(v23, ValueAtIndex, v22);

            }
          }
          ++v18;
        }
        while (v17 != v18);
      }
    }

    a3 = v25;
  }
  do
    v24 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a3 = v24;

}

__CFString *TFont::DebugDescription(TFont *this)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  void *v5;
  __CFString *Mutable;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v12;
  __CFString *v13;

  v13 = &stru_1E15EDAC0;
  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    v3 = (void *)atomic_load((unint64_t *)(v2 + 96));
    v12 = v3;
    do
      v4 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    do
      v5 = (void *)__ldaxr((unint64_t *)&v13);
    while (__stlxr(v4, (unint64_t *)&v13));

  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v7 = atomic_load((unint64_t *)&v13);
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 5);
  v10 = atomic_load((unint64_t *)this + 1);
  CFStringAppendFormat(Mutable, 0, CFSTR("name = %@, size = %f, matrix = %p, descriptor = %@"), v7, v8, v9, v10);

  return Mutable;
}

unint64_t TFontCascade::InitLastResort(TFontCascade *this)
{
  const __CTFontDescriptor *v2;
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  id v8;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
  TDescriptorSource::CopyLastResort((unint64_t *)&v9);
  v2 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v9);
  TFontCascade::CreateFallbackFromDescriptor(this, v2, 8, (unint64_t *)&v8);
  v3 = (unint64_t *)((char *)this + 32);
  do
    v4 = __ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));
  do
    v5 = (void *)__ldaxr(v3);
  while (__stlxr(v4, v3));

  v6 = atomic_load(v3);
  return v6;
}

void TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,$_24>(unint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    v7 = *a2;
    v8 = *a3;
    *(_QWORD *)(v6 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    *(_QWORD *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 64) = v8 | 0x80000000;
    *(_QWORD *)(v6 + 72) = 0;
    if (v7)
    {
      v9 = (unsigned int *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_QWORD *)(v6 + 80) = v7;
    *(_QWORD *)(v6 + 88) = 0;
    v12 = (id)v6;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a1 = v11;

  }
  else
  {
    *a1 = 0;
  }
}

void AddToUseLastResort(unsigned int a1)
{
  CFRange v2;

  os_unfair_lock_lock_with_options();
  v2.location = a1;
  v2.length = 1;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)sLastResortSet, v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&sLastResortSetLock);
}

uint64_t GetGlyphsForLongCharacters(const TFont *a1, const unsigned int *a2, unsigned __int16 *a3, int64_t a4)
{
  __int128 v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  char *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  __int16 v22;
  char *v23;
  int v24;
  char *v25;
  unint64_t v26;
  char *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void **v35;
  char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void **v48;
  char *v49;
  __int16 v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  char ***v62;
  char **v63;
  void *v64;
  char *v65;
  _OWORD v66[4];
  _OWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  _OWORD v71[4];
  _OWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71[3] = v7;
  v71[2] = v7;
  v71[1] = v7;
  v71[0] = v7;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v72 = v71;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(&v68, a4);
  if (a4 < 1)
  {
LABEL_65:
    v57 = (*(uint64_t (**)(_QWORD, char *, unsigned __int16 *, int64_t))(**((_QWORD **)a1 + 50) + 664))(*((_QWORD *)a1 + 50), v68, a3, a4);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      while (1)
      {
        v10 = a2[v8];
        if (!HIWORD(v10))
          break;
        v24 = (v10 >> 10) - 10304;
        v25 = v69;
        v26 = (unint64_t)v70;
        if (v69 >= v70)
        {
          v28 = (void **)v68;
          v29 = v69 - v68;
          if (v69 - v68 <= -3)
            goto LABEL_78;
          v30 = v29 >> 1;
          if (v70 - v68 <= (unint64_t)((v29 >> 1) + 1))
            v31 = v30 + 1;
          else
            v31 = v70 - v68;
          if ((unint64_t)(v70 - v68) >= 0x7FFFFFFFFFFFFFFELL)
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          *((_QWORD *)&v66[0] + 1) = v71;
          if (v32)
          {
            v33 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v71, v32);
            v28 = (void **)v68;
            v25 = v69;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[2 * v30];
          *(_WORD *)v34 = v24;
          if (v25 == (char *)v28)
          {
            v36 = &v33[2 * v30];
          }
          else
          {
            v35 = (void **)v25;
            v36 = &v33[2 * v30];
            do
            {
              v37 = *((_WORD *)v35 - 1);
              v35 = (void **)((char *)v35 - 2);
              *((_WORD *)v36 - 1) = v37;
              v36 -= 2;
            }
            while (v35 != v28);
          }
          v27 = v34 + 2;
          v68 = v36;
          v69 = v34 + 2;
          v38 = v70;
          v70 = &v33[2 * v32];
          v65 = v25;
          *(_QWORD *)&v66[0] = v38;
          v63 = (char **)v28;
          v64 = v28;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v63);
          v26 = (unint64_t)v70;
        }
        else
        {
          *(_WORD *)v69 = v24;
          v27 = v25 + 2;
        }
        v69 = v27;
        v39 = v10 & 0x3FF | 0xDC00;
        if ((unint64_t)v27 >= v26)
        {
          v40 = (void **)v68;
          v41 = v27 - v68;
          if (v27 - v68 <= -3)
LABEL_78:
            abort();
          v42 = v41 >> 1;
          v43 = v26 - (_QWORD)v68;
          if (v43 <= (v41 >> 1) + 1)
            v44 = v42 + 1;
          else
            v44 = v43;
          if (v43 >= 0x7FFFFFFFFFFFFFFELL)
            v45 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          *((_QWORD *)&v66[0] + 1) = v71;
          if (v45)
          {
            v46 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v71, v45);
            v40 = (void **)v68;
            v27 = v69;
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[2 * v42];
          *(_WORD *)v47 = v39;
          if (v27 == (char *)v40)
          {
            v49 = &v46[2 * v42];
          }
          else
          {
            v48 = (void **)v27;
            v49 = &v46[2 * v42];
            do
            {
              v50 = *((_WORD *)v48 - 1);
              v48 = (void **)((char *)v48 - 2);
              *((_WORD *)v49 - 1) = v50;
              v49 -= 2;
            }
            while (v48 != v40);
          }
          v12 = v47 + 2;
          v68 = v49;
          v69 = v47 + 2;
          v51 = v70;
          v70 = &v46[2 * v45];
          v65 = v27;
          *(_QWORD *)&v66[0] = v51;
          v63 = (char **)v40;
          v64 = v40;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v63);
        }
        else
        {
          *(_WORD *)v27 = v39;
          v12 = v27 + 2;
        }
        v69 = v12;
        ++v8;
        v9 = 1;
        if (v8 == a4)
          goto LABEL_63;
      }
      v11 = v69;
      if (v69 >= v70)
      {
        v13 = (void **)v68;
        v14 = v69 - v68;
        if (v69 - v68 <= -3)
          goto LABEL_78;
        v15 = v14 >> 1;
        if (v70 - v68 <= (unint64_t)((v14 >> 1) + 1))
          v16 = v15 + 1;
        else
          v16 = v70 - v68;
        if ((unint64_t)(v70 - v68) >= 0x7FFFFFFFFFFFFFFELL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        *((_QWORD *)&v66[0] + 1) = v71;
        if (v17)
        {
          v18 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v71, v17);
          v13 = (void **)v68;
          v11 = v69;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[2 * v15];
        *(_WORD *)v19 = v10;
        if (v11 == (char *)v13)
        {
          v21 = &v18[2 * v15];
        }
        else
        {
          v20 = (void **)v11;
          v21 = &v18[2 * v15];
          do
          {
            v22 = *((_WORD *)v20 - 1);
            v20 = (void **)((char *)v20 - 2);
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          while (v20 != v13);
        }
        v12 = v19 + 2;
        v68 = v21;
        v69 = v19 + 2;
        v23 = v70;
        v70 = &v18[2 * v17];
        v65 = v11;
        *(_QWORD *)&v66[0] = v23;
        v63 = (char **)v13;
        v64 = v13;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v63);
      }
      else
      {
        *(_WORD *)v69 = v10;
        v12 = v11 + 2;
      }
      v69 = v12;
      ++v8;
    }
    while (v8 != a4);
    if ((v9 & 1) == 0)
      goto LABEL_65;
LABEL_63:
    *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v66[3] = v52;
    v66[2] = v52;
    v66[1] = v52;
    v66[0] = v52;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v67 = v66;
    v53 = v12 - v68;
    v54 = (v12 - v68) >> 1;
    if (v12 == v68)
    {
      v56 = 0;
    }
    else
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v63, (v12 - v68) >> 1);
      v55 = (char *)v64;
      bzero(v64, v53 & 0xFFFFFFFFFFFFFFFELL);
      v64 = &v55[2 * v54];
      v12 = v68;
      v56 = (void **)v63;
    }
    (*(void (**)(_QWORD, char *, void **, uint64_t))(**((_QWORD **)a1 + 50) + 664))(*((_QWORD *)a1 + 50), v12, v56, v54);
    if (v53 < 1)
    {
      v57 = 0;
    }
    else
    {
      v58 = 0;
      v57 = 0;
      v59 = (void **)v63;
      do
      {
        if (*((_WORD *)v59 + v58))
          ++v57;
        *a3++ = *((_WORD *)v59 + v58);
        if (*((_WORD *)a2 + 1))
          ++v58;
        ++v58;
        ++a2;
      }
      while (v58 < v54);
    }
    v62 = &v63;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v62);
  }
  v63 = &v68;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v63);
  return v57;
}

char **std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(char **result, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  _QWORD v12[5];

  if (a2 > (result[2] - *result) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v3 = result;
    v4 = result[1] - *result;
    v12[4] = result + 3;
    v5 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(result + 3), a2);
    v7 = *v3;
    v6 = v3[1];
    v8 = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
    if (v6 != *v3)
    {
      v9 = v3[1];
      v8 = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
      do
      {
        v10 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v8 - 1) = v10;
        v8 -= 2;
      }
      while (v9 != v7);
    }
    *v3 = v8;
    v3[1] = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
    v11 = v3[2];
    v3[2] = &v5[2 * a2];
    v12[2] = v6;
    v12[3] = v11;
    v12[0] = v7;
    v12[1] = v7;
    return (char **)std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v12);
  }
  return result;
}

CTFontRef VerticalCopyOf@<X0>(CTFontRef font@<X0>, CTFontRef *a2@<X8>)
{
  CTFontRef result;

  if (qword_1ECDE7608 != -1)
    dispatch_once_f(&qword_1ECDE7608, 0, (dispatch_function_t)VerticalCopyOf(__CTFont const*)::$_0::__invoke);
  result = CTFontCreateCopyWithAttributes(font, 0.0, 0, (CTFontDescriptorRef)qword_1ECDE7600);
  *a2 = result;
  return result;
}

uint64_t CTFontLogSuboptimalRequest::$_0::__invoke(CTFontLogSuboptimalRequest::$_0 *this, void *a2)
{
  return CFLog();
}

void TCFMutableArray::TCFMutableArray(TCFMutableArray *this, CFArrayRef theArray)
{
  const __CFAllocator *v3;
  CFMutableArrayRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theArray)
    MutableCopy = CFArrayCreateMutableCopy(v3, 0, theArray);
  else
    MutableCopy = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)this = MutableCopy;
}

double TFont::GetFeatureTableSubstitutions(OTL::GCommon::Table)const::$_0::__invoke()
{
  double result;

  result = 0.0;
  xmmword_1ECDE7610 = 0u;
  unk_1ECDE7620 = 0u;
  dword_1ECDE7630 = 1065353216;
  return result;
}

uint64_t OTL::Coverage::SearchUnknown(OTL::Coverage *this)
{
  return 0;
}

CGFloat std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<TFont::GetLigatureCaretPositionsForGlyph(unsigned short,double *,long)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,double,unsigned short> &&>(TFont ***a1, double *a2)
{
  TFont **v2;
  double v3;
  CGFloat result;
  CGAffineTransform v5;

  v2 = *a1;
  v3 = *a2;
  TFont::GetScaledMatrix(**a1, &v5);
  result = v5.tx + v5.c * 0.0 + v5.a * v3;
  *(CGFloat *)v2[2] = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<TFont::GetLigatureCaretPositionsForGlyph(unsigned short,double *,long)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,double,unsigned short> &&>(TBaseFont ****a1, __int16 *a2)
{
  TBaseFont ***v2;
  TBaseFont **v3;
  __int16 v4;

  if ((*a2 & 0x80000000) == 0)
  {
    v2 = *a1;
    v3 = **a1;
    v4 = *a2;
    TFont::GetControlPointPositions(v3, *((_WORD *)v2 + 4), &v4, (double *)v2[2], 1uLL);
  }
}

char *std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>,std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vallocate[abi:nn180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void std::vector<long,TInlineBufferAllocator<long,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[5];

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (uint64_t)(a1 + 3);
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v4 - v7;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v20[4] = a1 + 3;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v6, v12);
      v7 = *a1;
      v5 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    if (v5 != v7)
    {
      v17 = v5;
      do
      {
        v18 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v17 != v7);
    }
    *a1 = v14;
    a1[1] = v16;
    v19 = a1[2];
    a1[2] = v15;
    v20[2] = v5;
    v20[3] = v19;
    v20[0] = v7;
    v20[1] = v7;
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v20);
  }
}

void `anonymous namespace'::TSingleAttrDescriptor::~TSingleAttrDescriptor(id *this)
{
  id *v2;

  *this = &off_1E15DEC08;
  v2 = this + 2;

}

{
  id *v2;

  *this = &off_1E15DEC08;
  v2 = this + 2;

  JUMPOUT(0x186DC03ACLL);
}

char **std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<void const**>,std::__wrap_iter<void const**>>(char **result, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char **v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;

  if (a5 < 1)
    return result;
  v6 = __src;
  v7 = result;
  v8 = *result;
  v9 = (unint64_t)result[1];
  v10 = a2 - (_QWORD)*result;
  v11 = &(*result)[v10 & 0xFFFFFFFFFFFFFFF8];
  v12 = result[2];
  if (a5 > (uint64_t)&v12[-v9] >> 3)
  {
    v40 = 0;
    v41 = 0;
    v13 = a5 + ((uint64_t)(v9 - (_QWORD)v8) >> 3);
    if (v13 >> 61)
      abort();
    v14 = v10 >> 3;
    v15 = (uint64_t)(result + 3);
    v16 = v12 - v8;
    v17 = v16 >> 2;
    if (v16 >> 2 <= v13)
      v17 = v13;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    v44 = v7 + 3;
    if (v18)
      v19 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v15, v18);
    else
      v19 = 0;
    v28 = &v19[8 * v14];
    v43 = &v19[8 * v18];
    v29 = 8 * a5;
    v30 = v28;
    v31 = &v28[8 * a5];
    do
    {
      v32 = *(_QWORD *)v6;
      v6 += 8;
      *(_QWORD *)v30 = v32;
      v30 += 8;
      v29 -= 8;
    }
    while (v29);
    v42 = v31;
    v33 = *v7;
    if (*v7 != v11)
    {
      v34 = v11;
      do
      {
        v35 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *((_QWORD *)v28 - 1) = v35;
        v28 -= 8;
      }
      while (v34 != v33);
      v31 = v42;
    }
    v36 = v7[1];
    v37 = v36 - v11;
    if (v36 != v11)
    {
      memmove(v31, v11, v36 - v11);
      v11 = v7[1];
    }
    v38 = *v7;
    *v7 = v28;
    v7[1] = &v31[v37];
    v39 = v7[2];
    v7[2] = v43;
    v42 = v11;
    v43 = v39;
    v40 = v38;
    v41 = v38;
    return (char **)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v40);
  }
  v20 = (uint64_t)(v9 - (_QWORD)v11) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = result[1];
LABEL_17:
    v24 = &v11[8 * a5];
    v25 = (uint64_t *)&v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v9)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v9);
    }
    v7[1] = v26;
    if (v23 != v24)
      result = (char **)memmove(&v23[-8 * ((v23 - v24) >> 3)], v11, v23 - v24);
    if (v21 != v6)
      return (char **)memmove(v11, v6, v21 - v6);
    return result;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    result = (char **)memmove(result[1], &__src[8 * v20], a4 - v21);
  v23 = (char *)(v9 + v22);
  v7[1] = (char *)(v9 + v22);
  if ((uint64_t)(v9 - (_QWORD)v11) >= 1)
    goto LABEL_17;
  return result;
}

void VerticalCopyOf(__CTFont const*)::$_0::__invoke()
{
  const __CFAllocator *v0;
  CFNumberRef v1;
  const __CFDictionary *v2;
  CFNumberRef v3;
  const __CFString *valuePtr;

  LODWORD(valuePtr) = 2;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v3 = v1;
  valuePtr = CFSTR("NSCTFontOrientationAttribute");
  v2 = CFDictionaryCreate(v0, (const void **)&valuePtr, (const void **)&v3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1ECDE7600 = (uint64_t)CTFontDescriptorCreateWithAttributes(v2);

}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_0,std::allocator<TFont::InitShapingGlyphs(void)::$_0>,void ()(__CFDictionary *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_0,std::allocator<TFont::InitShapingGlyphs(void)::$_0>,void ()(__CFDictionary *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15E0E68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_0,std::allocator<TFont::InitShapingGlyphs(void)::$_0>,void ()(__CFDictionary *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15E0E68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_0,std::allocator<TFont::InitShapingGlyphs(void)::$_0>,void ()(__CFDictionary *)>::operator()(uint64_t a1, const __CFDictionary **a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const void *v5;
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  void *v9;

  v3 = *a2;
  if (*(_QWORD *)(a1 + 16))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v3, *(const void **)(a1 + 8));
    if (!Value)
      goto LABEL_6;
    v5 = *(const void **)(a1 + 16);
    v6 = *(unint64_t **)(a1 + 24);
  }
  else
  {
    v6 = *(unint64_t **)(a1 + 24);
    v5 = *(const void **)(a1 + 8);
    Value = v3;
  }
  v7 = (void *)CFDictionaryGetValue(Value, v5);
  TCFRef<__CTFont const*>::Retain(v6, v7);
LABEL_6:
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = *(unint64_t **)(a1 + 40);
    v9 = (void *)CFDictionaryGetValue(v3, CFSTR("CTFontScriptAndLangSysListAttribute"));
    TCFRef<__CTFont const*>::Retain(v8, v9);
  }
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_1,std::allocator<TFont::InitShapingGlyphs(void)::$_1>,void ()(unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_1,std::allocator<TFont::InitShapingGlyphs(void)::$_1>,void ()(unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15E0EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_1,std::allocator<TFont::InitShapingGlyphs(void)::$_1>,void ()(unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E0EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TFont::InitShapingGlyphs(void)::$_1,std::allocator<TFont::InitShapingGlyphs(void)::$_1>,void ()(unsigned short,unsigned short)>::operator()(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a3;
  if (v3 <= v4 && v3 != (unsigned __int16)(v4 + 1))
  {
    do
    {
      v5 = 1 << (v3 & 7);
      v6 = (unsigned __int16)v3 >> 3;
      *(_BYTE *)(*(_QWORD *)(result + 8) + v6) |= v5;
      *(_BYTE *)(*(_QWORD *)(result + 16) + v6) |= v5;
    }
    while (v4 != (unsigned __int16)v3++);
  }
  return result;
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_2,std::allocator<TFont::InitShapingGlyphs(void)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::InitShapingGlyphs(void)::$_2,std::allocator<TFont::InitShapingGlyphs(void)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0EF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFont::InitShapingGlyphs(void)::$_2,std::allocator<TFont::InitShapingGlyphs(void)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0EF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_2,std::allocator<TFont::InitShapingGlyphs(void)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  bzero(*(void **)(a1 + 8), 0x4000uLL);
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_3,std::allocator<TFont::InitShapingGlyphs(void)::$_3>,void ()(unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::InitShapingGlyphs(void)::$_3,std::allocator<TFont::InitShapingGlyphs(void)::$_3>,void ()(unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0F40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFont::InitShapingGlyphs(void)::$_3,std::allocator<TFont::InitShapingGlyphs(void)::$_3>,void ()(unsigned short,unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0F40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TFont::InitShapingGlyphs(void)::$_3,std::allocator<TFont::InitShapingGlyphs(void)::$_3>,void ()(unsigned short,unsigned short)>::operator()(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = *a2;
  v4 = *a3;
  if (v3 <= v4 && v3 != (unsigned __int16)(v4 + 1))
  {
    do
      *(_BYTE *)(*(_QWORD *)(result + 8) + ((unsigned __int16)v3 >> 3)) |= 1 << (v3 & 7);
    while (v4 != (unsigned __int16)v3++);
  }
  return result;
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_4,std::allocator<TFont::InitShapingGlyphs(void)::$_4>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::InitShapingGlyphs(void)::$_4,std::allocator<TFont::InitShapingGlyphs(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0F88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFont::InitShapingGlyphs(void)::$_4,std::allocator<TFont::InitShapingGlyphs(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0F88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_4,std::allocator<TFont::InitShapingGlyphs(void)::$_4>,void ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  char *v3;
  char *v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  unsigned int v9;

  v9 = *a2;
  STL::insert_sorted<TInlineVector<unsigned int,30ul>>(*(char ***)(a1 + 8), (char *)&v9);
  LangSysTagsWithFallback(v9, &v7);
  v3 = v7;
  v4 = v8;
  if (v7 != v8)
  {
    do
    {
      v5 = *(_DWORD *)v3;
      v3 += 4;
      v6 = v5;
      STL::insert_sorted<TInlineVector<unsigned int,30ul>>(*(char ***)(a1 + 8), (char *)&v6);
    }
    while (v3 != v4);
    v3 = v7;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void std::__function::__func<TFont::InitShapingGlyphs(void)::$_5,std::allocator<TFont::InitShapingGlyphs(void)::$_5>,void ()(__CFDictionary *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_5,std::allocator<TFont::InitShapingGlyphs(void)::$_5>,void ()(__CFDictionary *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15E0FD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<TFont::InitShapingGlyphs(void)::$_5,std::allocator<TFont::InitShapingGlyphs(void)::$_5>,void ()(__CFDictionary *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15E0FD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E15E1060;

  return a1;
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E15E1060;

  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E15E1060;
  v2[1] = v3;
  v4 = (void *)atomic_load((unint64_t *)(a1 + 16));
  v2[2] = v4;
  return v2;
}

id std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E15E1060;
  a2[1] = v3;
  v4 = (void *)atomic_load((unint64_t *)(a1 + 16));
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::destroy(uint64_t a1)
{

}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_0>,void ()(unsigned short,unsigned short)>::operator()(uint64_t a1, CFRange a2)
{
  uint64_t v2;
  __CFBitVector *v3;

  a2.location = *(unsigned __int16 *)a2.location;
  v2 = *(unsigned __int16 *)a2.length;
  if (LODWORD(a2.location) <= v2 && *(_QWORD *)(a1 + 8) > v2)
  {
    v3 = (__CFBitVector *)atomic_load((unint64_t *)(a1 + 16));
    a2.length = v2 - a2.location + 1;
    CFBitVectorSetBits(v3, a2, 1u);
  }
}

uint64_t std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E15E10A8;

  return a1;
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E15E10A8;

  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t *v1;
  _QWORD *v2;
  void *v3;

  v1 = (unint64_t *)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E15E10A8;
  v3 = (void *)atomic_load(v1);
  v2[1] = v3;
  return v2;
}

id std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v3;
  id result;

  *a2 = &off_1E15E10A8;
  v3 = (void *)atomic_load((unint64_t *)(a1 + 8));
  result = v3;
  a2[1] = result;
  return result;
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1,std::allocator<TFont::CoverageForFeatureSetting(CTFeatureSetting *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  __CFBitVector *v1;

  v1 = (__CFBitVector *)atomic_load((unint64_t *)(a1 + 8));
  CFBitVectorSetAllBits(v1, 0);
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15E1180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E1180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float64x2_t std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::operator()(uint64_t a1, _QWORD *a2)
{
  double *v2;
  float64x2_t *v3;
  float64x2_t result;

  v2 = *(double **)(a1 + 16);
  v3 = (float64x2_t *)(**(_QWORD **)(a1 + 8) + 32 * *a2);
  result = vmulq_n_f64(v3[1], *v2);
  *v3 = vmulq_n_f64(*v3, *v2);
  v3[1] = result;
  return result;
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15E11C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E11C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  CGRect *v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform v8;
  CGRect v9;
  CGRect v10;

  v3 = *a2;
  v4 = *(__int128 **)(a1 + 16);
  v5 = (CGRect *)(**(_QWORD **)(a1 + 8) + 32 * *a2);
  v9 = *v5;
  v6 = *v4;
  v7 = v4[2];
  *(_OWORD *)&v8.c = v4[1];
  *(_OWORD *)&v8.tx = v7;
  *(_OWORD *)&v8.a = v6;
  v10 = CGRectApplyAffineTransform(v9, &v8);
  *v5 = v10;
  *(CGRect *)(**(_QWORD **)(a1 + 8) + 32 * v3) = CGRectOffset(v10, **(CGFloat **)(a1 + 24), *(CGFloat *)(*(_QWORD *)(a1 + 24) + 8));
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E15E10F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E10F0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_0>,void ()(long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  CGRect *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat *v17;
  CGAffineTransform v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v3 = *a2;
  v19.origin.x = (**(double (***)(_QWORD, _QWORD))(a1 + 16))(**(_QWORD **)(a1 + 24), *(unsigned __int16 *)(**(_QWORD **)(a1 + 32) + 2 * *a2));
  v4 = (CGRect *)(**(_QWORD **)(a1 + 8) + 32 * v3);
  *v4 = v19;
  v5 = *(__int128 **)(a1 + 40);
  v6 = *v5;
  v7 = v5[2];
  *(_OWORD *)&v18.c = v5[1];
  *(_OWORD *)&v18.tx = v7;
  *(_OWORD *)&v18.a = v6;
  v20 = CGRectApplyAffineTransform(v19, &v18);
  *v4 = v20;
  v21 = CGRectOffset(v20, **(CGFloat **)(a1 + 48), *(CGFloat *)(*(_QWORD *)(a1 + 48) + 8));
  x = v21.origin.x;
  y = v21.origin.y;
  width = v21.size.width;
  height = v21.size.height;
  *(CGRect *)(**(_QWORD **)(a1 + 8) + 32 * v3) = v21;
  v12 = *(CGFloat **)(a1 + 56);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v21.origin.x = *v12;
  v21.origin.y = v14;
  v21.size.width = v15;
  v21.size.height = v16;
  if (CGRectIsEmpty(v21))
  {
    v13 = x;
    v14 = y;
    v15 = width;
    v16 = height;
  }
  else
  {
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = width;
    v22.size.height = height;
    if (!CGRectIsEmpty(v22))
    {
      v23.origin.x = v13;
      v23.origin.y = v14;
      v23.size.width = v15;
      v23.size.height = v16;
      v25.origin.x = x;
      v25.origin.y = y;
      v25.size.width = width;
      v25.size.height = height;
      v24 = CGRectUnion(v23, v25);
      v13 = v24.origin.x;
      v14 = v24.origin.y;
      v15 = v24.size.width;
      v16 = v24.size.height;
    }
  }
  v17 = *(CGFloat **)(a1 + 56);
  *v17 = v13;
  v17[1] = v14;
  v17[2] = v15;
  v17[3] = v16;
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E15E1138;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E1138;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1,std::allocator<TFont::GetBoundingBoxesForGlyphs(CGAffineTransform const*,unsigned int,unsigned short const*,CGRect *,long,CTFontOrientation)::$_1>,void ()(long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat *v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  v3 = *a2;
  v14.origin.x = (**(double (***)(_QWORD, _QWORD, _QWORD))(a1 + 16))(**(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(**(_QWORD **)(a1 + 40) + 2 * *a2));
  *(CGRect *)(**(_QWORD **)(a1 + 8) + 32 * v3) = v14;
  v15 = CGRectOffset(v14, **(CGFloat **)(a1 + 48), *(CGFloat *)(*(_QWORD *)(a1 + 48) + 8));
  x = v15.origin.x;
  y = v15.origin.y;
  width = v15.size.width;
  height = v15.size.height;
  *(CGRect *)(**(_QWORD **)(a1 + 8) + 32 * v3) = v15;
  v8 = *(CGFloat **)(a1 + 56);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v15.origin.x = *v8;
  v15.origin.y = v10;
  v15.size.width = v11;
  v15.size.height = v12;
  if (CGRectIsEmpty(v15))
  {
    v9 = x;
    v10 = y;
    v11 = width;
    v12 = height;
  }
  else
  {
    v16.origin.x = x;
    v16.origin.y = y;
    v16.size.width = width;
    v16.size.height = height;
    if (!CGRectIsEmpty(v16))
    {
      v17.origin.x = v9;
      v17.origin.y = v10;
      v17.size.width = v11;
      v17.size.height = v12;
      v19.origin.x = x;
      v19.origin.y = y;
      v19.size.width = width;
      v19.size.height = height;
      v18 = CGRectUnion(v17, v19);
      v9 = v18.origin.x;
      v10 = v18.origin.y;
      v11 = v18.size.width;
      v12 = v18.size.height;
    }
  }
  v13 = *(CGFloat **)(a1 + 56);
  *v13 = v9;
  v13[1] = v10;
  v13[2] = v11;
  v13[3] = v12;
}

void std::__function::__func<TFont::CopyVariantsOfGlyph(unsigned short)::$_0,std::allocator<TFont::CopyVariantsOfGlyph(unsigned short)::$_0>,void ()(unsigned short,__CFDictionary const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TFont::CopyVariantsOfGlyph(unsigned short)::$_0,std::allocator<TFont::CopyVariantsOfGlyph(unsigned short)::$_0>,void ()(unsigned short,__CFDictionary const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E1018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFont::CopyVariantsOfGlyph(unsigned short)::$_0,std::allocator<TFont::CopyVariantsOfGlyph(unsigned short)::$_0>,void ()(unsigned short,__CFDictionary const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E1018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TFont::CopyVariantsOfGlyph(unsigned short)::$_0,std::allocator<TFont::CopyVariantsOfGlyph(unsigned short)::$_0>,void ()(unsigned short,__CFDictionary const*)>::operator()(uint64_t a1, unsigned __int16 *a2, const void **a3)
{
  int v4;
  const void *v5;
  unint64_t *v6;
  void *v7;
  id v8;
  const __CFDictionary *v9;
  void *Value;
  CFMutableArrayRef Mutable;
  unint64_t *v12;
  void *v13;
  id v14;
  __CFDictionary *v15;
  id v16;
  CFRange v17;

  v4 = *a2;
  v5 = *a3;
  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFNumber::TCFNumber<int>((unint64_t *)&v16, v4);
  v6 = *(unint64_t **)(a1 + 8);
  v7 = (void *)atomic_load((unint64_t *)&v16);
  v8 = v7;
  v9 = (const __CFDictionary *)atomic_load(v6);
  Value = (void *)CFDictionaryGetValue(v9, v8);

  if (Value)
  {
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      goto LABEL_7;
    Value = Mutable;
    v12 = *(unint64_t **)(a1 + 8);
    v13 = (void *)atomic_load((unint64_t *)&v16);
    v14 = v13;
    v15 = (__CFDictionary *)atomic_load(v12);
    CFDictionarySetValue(v15, v14, Value);

    CFRelease(Value);
    if (!v5)
      goto LABEL_7;
  }
  v17.length = CFArrayGetCount((CFArrayRef)Value);
  v17.location = 0;
  if (!CFArrayContainsValue((CFArrayRef)Value, v17, v5))
    CFArrayAppendValue((CFMutableArrayRef)Value, v5);
LABEL_7:

}

double std::__lerp[abi:nn180100]<double>(double a1, double a2, double a3)
{
  BOOL v4;
  double v5;
  int v6;
  int v7;
  double v8;

  if (a1 <= 0.0 && a2 >= 0.0 || a1 >= 0.0 && a2 <= 0.0)
    return (1.0 - a3) * a1 + a3 * a2;
  v4 = a3 <= 1.0;
  if (a3 != 1.0)
  {
    v5 = a1 + a3 * (a2 - a1);
    v6 = v4;
    v7 = (a2 > a1) ^ v6;
    if (v5 <= a2)
      v8 = a2;
    else
      v8 = v5;
    if (v5 < a2)
      a2 = v5;
    if (v7)
      return v8;
  }
  return a2;
}

uint64_t HangulShapingEngine::SetFeatures(HangulShapingEngine *this, OTL::GSUB *a2, OTL::GlyphLookups *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t i;
  __int128 v10;
  int *v11;
  int *v12;
  char **v13;
  char *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  int v26;
  int64x2_t v27;
  char *v28;
  TRunGlue *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t StringIndex;
  unsigned int Char;
  uint64_t v41;
  double Advance;
  double v43;
  UChar32 v44;
  unsigned int *j;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *k;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *m;
  unsigned int *v52;
  unsigned int v53;
  unint64_t IntPropertyValue;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  void **v60;
  _QWORD *v61;
  void **v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  void **v68;
  _QWORD *v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  void **v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  void **v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  UChar32 v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  UChar32 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  UChar32 v96;
  int32_t v97;
  __int16 v98;
  uint64_t v99;
  void **v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  _QWORD *v107;
  void **v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  void **v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t *v126;
  void **v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int *n;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *ii;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *jj;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  TRunGlue *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  TRunGlue *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t kk;
  uint64_t v152;
  char v153;
  uint64_t v154;
  HangulShapingEngine *v155;
  TRunGlue *v156;
  OTL::GlyphLookups *v157;
  uint64_t v158;
  uint64_t v160;
  int v161;
  int v162;
  unsigned __int16 v163;
  unsigned __int16 v164;
  _OWORD v165[3];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  void **v172;
  void **v173;
  void **v174;
  uint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  char *v190;
  int64x2_t v191;
  _OWORD v192[15];
  _OWORD *v193;
  uint64_t v194;
  CFRange v195;
  CFRange v196;

  v194 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v5 + 40) == -1)
    TRunGlue::ComputeEndIndex(*((_QWORD **)this + 1));
  if (*(uint64_t *)(v5 + 48) < 1)
    return 0;
  v157 = a3;
  v155 = this;
  v6 = 0;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v171 = v7;
  v169 = v7;
  v170 = v7;
  v167 = v7;
  v168 = v7;
  v165[2] = v7;
  v166 = v7;
  v165[0] = v7;
  v165[1] = v7;
  do
  {
    v8 = &v165[v6];
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v8[5] = (char *)&v165[v6 + 1] + 8;
    v6 += 3;
  }
  while (v6 != 9);
  for (i = 0; i != 3; ++i)
  {
    *(_QWORD *)&v186 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v184 = v10;
    v185 = v10;
    v182 = v10;
    v183 = v10;
    v180 = v10;
    v181 = v10;
    v179 = v10;
    v178 = 0uLL;
    v177 = 0;
    *((_QWORD *)&v186 + 1) = &v179;
    v161 = *(_DWORD *)&HangulShapingEngine::SetFeatures(OTL::GSUB &,OTL::GlyphLookups &)::tagArray[4 * i];
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(&v190, &v161, &v162);
    OTL::GCommon::GetLookups((uint64_t)a2, (uint64_t)&v190, (uint64_t)&v177, 0);
    v172 = (void **)&v190;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v172);
    v12 = (int *)v177;
    v11 = (int *)v178;
    if (v177 != (_QWORD)v178)
    {
      v13 = (char **)&v165[3 * i];
      v14 = v13[1];
      do
      {
        v15 = *v12;
        v16 = (unint64_t)v13[2];
        if ((unint64_t)v14 >= v16)
        {
          v17 = (v14 - *v13) >> 2;
          if ((unint64_t)(v17 + 1) >> 62)
LABEL_205:
            abort();
          v18 = v16 - (_QWORD)*v13;
          v19 = v18 >> 1;
          if (v18 >> 1 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          *((_QWORD *)&v192[0] + 1) = v13 + 3;
          if (v20)
            v21 = (char *)TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul>::allocate((uint64_t)(v13 + 3), v20);
          else
            v21 = 0;
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_QWORD *)&v192[0] = v23;
          *(_DWORD *)v22 = v15;
          v14 = v22 + 4;
          v191.i64[1] = (uint64_t)(v22 + 4);
          v25 = *v13;
          v24 = (unint64_t)v13[1];
          if ((char *)v24 == *v13)
          {
            v27 = vdupq_n_s64(v24);
          }
          else
          {
            do
            {
              v26 = *(_DWORD *)(v24 - 4);
              v24 -= 4;
              *((_DWORD *)v22 - 1) = v26;
              v22 -= 4;
            }
            while ((char *)v24 != v25);
            v27 = *(int64x2_t *)v13;
            v14 = (char *)v191.i64[1];
            v23 = *(char **)&v192[0];
          }
          *v13 = v22;
          v13[1] = v14;
          v191 = v27;
          v28 = v13[2];
          v13[2] = v23;
          *(_QWORD *)&v192[0] = v28;
          v190 = (char *)v27.i64[0];
          std::__split_buffer<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&v190);
        }
        else
        {
          *(_DWORD *)v14 = v15;
          v14 += 4;
        }
        v13[1] = v14;
        ++v12;
      }
      while (v12 != v11);
    }
    v190 = (char *)&v177;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v190);
  }
  v29 = (TRunGlue *)*((_QWORD *)this + 1);
  v30 = TRunGlue::length(v29);
  v177 = *(_QWORD *)this;
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v185 = 0u;
  v186 = 0u;
  v187 = 0u;
  v189 = 0;
  v188 = 0u;
  *(_QWORD *)&v188 = *(_QWORD *)(v177 + 16);
  v164 = -1;
  *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v192[14] = v31;
  v192[13] = v31;
  v192[12] = v31;
  v192[11] = v31;
  v192[10] = v31;
  v192[9] = v31;
  v192[8] = v31;
  v192[7] = v31;
  v192[6] = v31;
  v192[5] = v31;
  v192[4] = v31;
  v192[3] = v31;
  v192[2] = v31;
  v192[1] = v31;
  v192[0] = v31;
  v191 = 0uLL;
  v190 = 0;
  v193 = v192;
  if (!v30)
  {
    v141 = 0;
    goto LABEL_202;
  }
  v32 = v30;
  v156 = v29;
  v33 = 0;
  v153 = 0;
  v154 = 0;
  v34 = 0;
  v35 = 0;
  v36 = -1;
  v37 = -1;
  v38 = -1;
  do
  {
    StringIndex = TRunGlue::GetStringIndex(v29, v34);
    Char = TCharStreamIterator::GetChar((TCharStreamIterator *)&v177, StringIndex);
    v41 = v34 + 1;
    if (Char >> 1 == 6167)
    {
      Advance = TRunGlue::GetAdvance(v29, v34);
      v43 = Advance;
      if ((_DWORD)v33)
      {
        if (Advance != 0.0)
        {
          TRunGlue::Rotate(*((TRunGlue **)v155 + 1), v35, v34, v34 + 1, 0);
          if (v190 != (char *)v191.i64[0])
            v191.i64[0] -= 8;
          ++v36;
          ++v37;
          if (v38 == -1)
            v38 = -1;
          else
            ++v38;
          v153 = 1;
        }
      }
      else
      {
        v56 = v164;
        if (v164 == 0xFFFF)
        {
          LOWORD(v172) = 9676;
          v57 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v155 + 1) + 616) + 400);
          (*(void (**)(uint64_t, void ***, unsigned __int16 *, uint64_t))(*(_QWORD *)v57 + 664))(v57, &v172, &v164, 1);
          v56 = v164;
        }
        if (v56
          && (v58 = (int *)*((_QWORD *)v155 + 1),
              LOWORD(v172) = v56,
              v154 = 1,
              TRunGlue::DoGlyphInsertion((TRunGlue *)v58, (const unsigned __int16 *)&v172, 1u, (v43 == 0.0) ^ (v58[6] < 0), 0, v34, v34, 1, 0)))
        {
          v154 = 1;
          v195.location = v34;
          v195.length = 1;
          OTL::GlyphLookups::Substituted((uint64_t *)v157, v195, 2);
          v41 = v34 + 2;
          ++v32;
        }
        else
        {
          v41 = v34 + 1;
        }
      }
      v35 = v41;
      v59 = v41 - 1;
      v60 = (void **)v191.i64[0];
      if (v191.i64[0] >= (unint64_t)v191.i64[1])
      {
        v62 = (void **)v190;
        v63 = (v191.i64[0] - (uint64_t)v190) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_205;
        v65 = v191.i64[1] - (_QWORD)v190;
        if ((v191.i64[1] - (uint64_t)v190) >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        v176 = v192;
        if (v66)
        {
          v67 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v192, v66);
          v62 = (void **)v190;
          v60 = (void **)v191.i64[0];
        }
        else
        {
          v67 = 0;
        }
        v76 = &v67[8 * v63];
        *(_QWORD *)v76 = v59;
        if (v60 == v62)
        {
          v78 = &v67[8 * v63];
        }
        else
        {
          v77 = v60;
          v78 = &v67[8 * v63];
          do
          {
            v79 = (uint64_t)*--v77;
            *((_QWORD *)v78 - 1) = v79;
            v78 -= 8;
          }
          while (v77 != v62);
        }
        v61 = v76 + 8;
        v190 = v78;
        v191.i64[0] = (uint64_t)(v76 + 8);
        v80 = v191.i64[1];
        v191.i64[1] = (uint64_t)&v67[8 * v66];
        v174 = v60;
        v175 = v80;
        v172 = v62;
        v173 = v62;
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v172);
      }
      else
      {
        *(_QWORD *)v191.i64[0] = v59;
        v61 = v60 + 1;
      }
      v33 = 0;
      v191.i64[0] = (uint64_t)v61;
      v55 = v35;
      goto LABEL_97;
    }
    v44 = Char;
    v158 = v32;
    v160 = v34 + 1;
    if (v36 != -1)
    {
      v46 = (unsigned int *)*((_QWORD *)&v165[0] + 1);
      for (j = *(unsigned int **)&v165[0]; j != v46; ++j)
      {
        v47 = *j;
        v33 = v33 & 0xFFFFFFFF00000000 | v47;
        OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v33, v36, 1);
      }
      v49 = (unsigned int *)*((_QWORD *)&v166 + 1);
      for (k = (unsigned int *)v166; k != v49; ++k)
      {
        v50 = *k;
        v36 = v36 & 0xFFFFFFFF00000000 | v50;
        OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v36, v37, 1);
      }
      if (v38 != -1)
      {
        v52 = (unsigned int *)*((_QWORD *)&v169 + 1);
        for (m = (unsigned int *)v169; m != v52; ++m)
        {
          v53 = *m;
          v37 = v37 & 0xFFFFFFFF00000000 | v53;
          OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v37, v38, 1);
        }
      }
    }
    IntPropertyValue = u_getIntPropertyValue(v44, UCHAR_HANGUL_SYLLABLE_TYPE);
    if ((_DWORD)IntPropertyValue == 1)
    {
      v32 = v158;
      v55 = v34 + 1;
      if (v160 == v158)
      {
        v33 = 1;
LABEL_70:
        v29 = v156;
LABEL_71:
        v68 = (void **)v191.i64[0];
        if (v191.i64[0] >= (unint64_t)v191.i64[1])
        {
          v70 = (void **)v190;
          v71 = (v191.i64[0] - (uint64_t)v190) >> 3;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61)
            goto LABEL_205;
          v73 = v191.i64[1] - (_QWORD)v190;
          if ((v191.i64[1] - (uint64_t)v190) >> 2 > v72)
            v72 = v73 >> 2;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          v176 = v192;
          if (v74)
          {
            v75 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v192, v74);
            v70 = (void **)v190;
            v68 = (void **)v191.i64[0];
          }
          else
          {
            v75 = 0;
          }
          v81 = (unint64_t *)&v75[8 * v71];
          *v81 = v34;
          if (v68 == v70)
          {
            v83 = &v75[8 * v71];
            v55 = v34 + 1;
          }
          else
          {
            v82 = v68;
            v83 = &v75[8 * v71];
            v55 = v34 + 1;
            do
            {
              v84 = (uint64_t)*--v82;
              *((_QWORD *)v83 - 1) = v84;
              v83 -= 8;
            }
            while (v82 != v70);
          }
          v69 = v81 + 1;
          v190 = v83;
          v191.i64[0] = (uint64_t)(v81 + 1);
          v85 = v191.i64[1];
          v191.i64[1] = (uint64_t)&v75[8 * v74];
          v174 = v68;
          v175 = v85;
          v172 = v70;
          v173 = v70;
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v172);
        }
        else
        {
          *(_QWORD *)v191.i64[0] = v34;
          v69 = v68 + 1;
        }
        v191.i64[0] = (uint64_t)v69;
        v38 = -1;
        v37 = -1;
        v36 = -1;
LABEL_97:
        v34 = v35;
        goto LABEL_98;
      }
      v29 = v156;
      v86 = TRunGlue::GetStringIndex(v156, v160);
      v87 = TCharStreamIterator::GetChar((TCharStreamIterator *)&v177, v86);
      v88 = 0;
      v89 = v34 + 2;
      v90 = 1;
      v91 = v44;
      v33 = 1;
    }
    else
    {
      v33 = IntPropertyValue;
      v32 = v158;
      v55 = v34 + 1;
      if ((_DWORD)IntPropertyValue == 2)
        goto LABEL_70;
      v29 = v156;
      if ((_DWORD)IntPropertyValue == 3)
        goto LABEL_71;
      if ((unsigned __int16)(v44 + 10332) < 0xD45Cu)
      {
        v33 = 0;
        goto LABEL_71;
      }
      if ((unsigned __int16)((-16384 * (v44 + 21504)) | ((unsigned __int16)(28087 * (v44 + 21504)) >> 2)) >= 0x925u)
      {
        v33 = 5;
        v35 = v34;
        goto LABEL_71;
      }
      v90 = 0;
      v91 = ((28533 * (unsigned __int16)(v44 + 21504)) >> 24) | 0x1100;
      v87 = (unsigned __int16)(v44 + 21504) % 0x24Cu / 0x1C + 4449;
      v89 = v34 + 1;
      v88 = 1;
      v33 = 4;
    }
    if (u_getIntPropertyValue(v87, UCHAR_HANGUL_SYLLABLE_TYPE) != 2)
    {
      v35 = v34;
      v55 = v34 + 1;
      goto LABEL_71;
    }
    if (v89 == v32)
    {
      v92 = 0;
      v93 = v32;
    }
    else
    {
      v94 = TRunGlue::GetStringIndex(v29, v89);
      v95 = v90;
      v96 = TCharStreamIterator::GetChar((TCharStreamIterator *)&v177, v94);
      v97 = u_getIntPropertyValue(v96, UCHAR_HANGUL_SYLLABLE_TYPE);
      if (v97 == 3)
        v93 = v89 + 1;
      else
        v93 = v89;
      if (v97 == 3)
        v92 = v96;
      else
        v92 = 0;
      v90 = v95;
    }
    if (v91 - 4352 > 0x12)
      goto LABEL_125;
    if ((unsigned __int16)(v87 - 4449) > 0x14u)
      goto LABEL_125;
    v98 = v92 - 4519;
    if (v92)
    {
      if ((unsigned __int16)(v92 - 4519) > 0x1Bu)
        goto LABEL_125;
    }
    v152 = v93;
    if (!v92)
      v98 = 0;
    LOWORD(v161) = 28 * v87 + 588 * v91 + v98 - 18076;
    v163 = -21846;
    v99 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v155 + 1) + 616) + 400);
    if (!(*(uint64_t (**)(uint64_t, int *, unsigned __int16 *, uint64_t))(*(_QWORD *)v99 + 664))(v99, &v161, &v163, 1))
    {
      v93 = v152;
LABEL_125:
      if (v92)
        v102 = v88;
      else
        v102 = 0;
      if (v102 == 1)
      {
        v103 = v93;
        if ((unsigned __int16)(v44 + 10332) >= 0xD45Cu)
        {
          LOWORD(v91) = ((unsigned __int16)(v44 + 21504) / 0x24Cu) | 0x1100;
          v87 = (unsigned __int16)(v44 + 21504) % 0x24Cu / 0x1C + 4449;
        }
        LOWORD(v172) = v91;
        WORD1(v172) = v87;
        WORD2(v172) = v92;
        v161 = -1431655766;
        LOWORD(v162) = -21846;
        v104 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v155 + 1) + 616) + 400);
        if ((*(uint64_t (**)(uint64_t, void ***, int *, uint64_t))(*(_QWORD *)v104 + 664))(v104, &v172, &v161, 3) == 3)
        {
          TRunGlue::SetGlyphID<true>(*((TRunGlue **)v155 + 1), v34, (unsigned __int16)v161);
          if (TRunGlue::DoGlyphInsertion(*((TRunGlue **)v155 + 1), (const unsigned __int16 *)&v161 + 1, 1u, 0, 0, v34, v34, 0, 0))
          {
            v196.location = v34;
            v196.length = 1;
            OTL::GlyphLookups::Substituted((uint64_t *)v157, v196, 2);
            ++v103;
            ++v158;
          }
          TRunGlue::SetGlyphID<true>(*((TRunGlue **)v155 + 1), v34 + 2, (unsigned __int16)v162);
          v154 = 1;
        }
        v32 = v158;
        v93 = v103;
      }
      else
      {
        if (!v92)
        {
          v38 = -1;
          v32 = v158;
          goto LABEL_139;
        }
        v32 = v158;
      }
      v38 = v34 + 2;
LABEL_139:
      v105 = v93 - 1;
      v106 = (void **)v191.i64[0];
      if (v191.i64[0] >= (unint64_t)v191.i64[1])
      {
        v108 = (void **)v190;
        v109 = (v191.i64[0] - (uint64_t)v190) >> 3;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_205;
        v111 = v93;
        v112 = v191.i64[1] - (_QWORD)v190;
        if ((v191.i64[1] - (uint64_t)v190) >> 2 > v110)
          v110 = v112 >> 2;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v110;
        v176 = v192;
        if (v113)
        {
          v114 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v192, v113);
          v108 = (void **)v190;
          v106 = (void **)v191.i64[0];
        }
        else
        {
          v114 = 0;
        }
        v115 = &v114[8 * v109];
        *(_QWORD *)v115 = v105;
        if (v106 == v108)
        {
          v117 = &v114[8 * v109];
        }
        else
        {
          v116 = v106;
          v117 = &v114[8 * v109];
          do
          {
            v118 = (uint64_t)*--v116;
            *((_QWORD *)v117 - 1) = v118;
            v117 -= 8;
          }
          while (v116 != v108);
        }
        v107 = v115 + 8;
        v190 = v117;
        v191.i64[0] = (uint64_t)(v115 + 8);
        v119 = v191.i64[1];
        v191.i64[1] = (uint64_t)&v114[8 * v113];
        v174 = v106;
        v175 = v119;
        v172 = v108;
        v173 = v108;
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v172);
        v93 = v111;
      }
      else
      {
        *(_QWORD *)v191.i64[0] = v105;
        v107 = v106 + 1;
      }
      v191.i64[0] = (uint64_t)v107;
      v37 = v34 + 1;
      v36 = v34;
      v55 = v93;
      goto LABEL_98;
    }
    TRunGlue::SetGlyphID<true>(*((TRunGlue **)v155 + 1), v34, v163);
    v100 = (void **)v191.i64[0];
    if (v191.i64[0] >= (unint64_t)v191.i64[1])
    {
      v120 = (void **)v190;
      v121 = (v191.i64[0] - (uint64_t)v190) >> 3;
      v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 61)
        goto LABEL_205;
      v123 = v191.i64[1] - (_QWORD)v190;
      if ((v191.i64[1] - (uint64_t)v190) >> 2 > v122)
        v122 = v123 >> 2;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
        v124 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      v176 = v192;
      if (v124)
      {
        v125 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v192, v124);
        v120 = (void **)v190;
        v100 = (void **)v191.i64[0];
      }
      else
      {
        v125 = 0;
      }
      v126 = (unint64_t *)&v125[8 * v121];
      *v126 = v34;
      if (v100 == v120)
      {
        v128 = &v125[8 * v121];
      }
      else
      {
        v127 = v100;
        v128 = &v125[8 * v121];
        do
        {
          v129 = (uint64_t)*--v127;
          *((_QWORD *)v128 - 1) = v129;
          v128 -= 8;
        }
        while (v127 != v120);
      }
      v101 = v126 + 1;
      v190 = v128;
      v191.i64[0] = (uint64_t)(v126 + 1);
      v130 = v191.i64[1];
      v191.i64[1] = (uint64_t)&v125[8 * v124];
      v174 = v100;
      v175 = v130;
      v172 = v120;
      v173 = v120;
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v172);
    }
    else
    {
      *(_QWORD *)v191.i64[0] = v34;
      v101 = v100 + 1;
    }
    v191.i64[0] = (uint64_t)v101;
    v131 = v34;
    if (v90)
    {
      v131 = v34 + 1;
      TRunGlue::Delete(*((_QWORD **)v155 + 1), v160, 0);
    }
    if (v92)
      TRunGlue::Delete(*((_QWORD **)v155 + 1), v131 + 1, 0);
    v154 = 1;
    v38 = -1;
    v37 = -1;
    v36 = -1;
    v55 = v152;
    v32 = v158;
LABEL_98:
    v35 = v34;
    v34 = v55;
  }
  while (v55 != v32);
  if (v36 != -1)
  {
    v133 = (unsigned int *)*((_QWORD *)&v165[0] + 1);
    for (n = *(unsigned int **)&v165[0]; n != v133; ++n)
    {
      v134 = *n;
      v34 = v34 & 0xFFFFFFFF00000000 | v134;
      OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v34, v36, 1);
    }
    v136 = (unsigned int *)*((_QWORD *)&v166 + 1);
    for (ii = (unsigned int *)v166; ii != v136; ++ii)
    {
      v137 = *ii;
      v34 = v34 & 0xFFFFFFFF00000000 | v137;
      OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v34, v37, 1);
    }
    if (v38 != -1)
    {
      v139 = (unsigned int *)*((_QWORD *)&v169 + 1);
      for (jj = (unsigned int *)v169; jj != v139; ++jj)
      {
        v140 = *jj;
        v34 = v34 & 0xFFFFFFFF00000000 | v140;
        OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v157, v34, v38, 1);
      }
    }
  }
  if ((v153 & 1) != 0)
  {
    v141 = v154;
    v142 = (TRunGlue *)*((_QWORD *)v155 + 1);
    if (*((_QWORD *)v142 + 19))
    {
      v143 = v190;
      v144 = (char *)v191.i64[0];
      if (v190 == (char *)v191.i64[0])
      {
        v145 = 0;
        v147 = (TRunGlue *)*((_QWORD *)v155 + 1);
      }
      else
      {
        v145 = 0;
        do
        {
          v146 = *(_QWORD *)v143;
          if (v145 != *(_QWORD *)v143)
          {
            do
              TRunGlue::OrGlyphProps(v142, v145++, 8u);
            while (v146 != v145);
            v145 = v146;
          }
          ++v145;
          v143 += 8;
        }
        while (v143 != v144);
        v147 = (TRunGlue *)*((_QWORD *)v155 + 1);
      }
      v148 = TRunGlue::length(v147);
      if (v145 != v148)
      {
        v149 = v148;
        do
          TRunGlue::OrGlyphProps(v142, v145++, 8u);
        while (v149 != v145);
      }
    }
  }
  else
  {
    v141 = v154;
  }
LABEL_202:
  v172 = (void **)&v190;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v172);
  for (kk = 6; kk != -3; kk -= 3)
  {
    v190 = (char *)&v165[kk];
    std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v190);
  }
  return v141;
}

void HangulShapingEngine::AddShapingGlyphs(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int16 *i;
  void **v5;
  _QWORD v6[3];
  _OWORD v7[4];
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v3;
  v7[1] = v3;
  v7[2] = v3;
  v7[3] = v3;
  v8 = (char *)v7 + 4;
  v6[1] = (char *)v7 + 4;
  v6[2] = (char *)v7 + 4;
  LODWORD(v7[0]) = 0;
  v6[0] = v7;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 400) + 672))(*(_QWORD *)(a1 + 400), 12334, 2);
  for (i = (__int16 *)v7; i != (__int16 *)((char *)v7 + 4); ++i)
  {
    if (*i)
      std::function<void ()(unsigned short,unsigned short)>::operator()(a2, *i, *i);
  }
  v5 = (void **)v6;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v5);
}

void TRunGlue::OrGlyphProps(TRunGlue *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2);
    objc_msgSend(*(id *)(*((_QWORD *)this + 19) + 216), "setProps:atIndex:", *(_DWORD *)(*((_QWORD *)this + 65) + 4 * (a2 - *((_QWORD *)this + 20))) | a3, *(_QWORD *)(*((_QWORD *)this + 19) + 200) + a2 - *((_QWORD *)this + 20));
    return;
  }
  v6 = *((_QWORD *)this + 20) + a2;
  v7 = *((_QWORD *)this + 65);
  if (v7)
    goto LABEL_6;
  if ((a3 & 0xFFFFFFDF) != 0)
  {
    TRunGlue::InitPropertiesFromDeletedGlyphs(this);
    v7 = *((_QWORD *)this + 65);
LABEL_6:
    *(_DWORD *)(v7 + 4 * v6) |= a3;
    return;
  }
  v8 = 1 << (v6 & 7);
  v9 = v6 / 8;
  v10 = *((_QWORD *)this + 26);
  if ((a3 & 0x20) != 0)
    v11 = *(_BYTE *)(v10 + v9) | v8;
  else
    v11 = *(_BYTE *)(v10 + v9) & ~(_BYTE)v8;
  *(_BYTE *)(v10 + v9) = v11;
}

void TDescriptor::CreateBaseFont(TDescriptor *this, CGFont *a2)
{
  int v2;
  TBaseFont *v4;

  if (this)
  {
    v2 = (int)a2;
    v4 = (TBaseFont *)operator new();
    if (v2)
      TBaseFont::TBaseFont((uint64_t)v4, this);
    else
      TBaseFont::TBaseFont(v4, this);
  }
}

void TDescriptor::TDescriptor(TDescriptor *this, const TDescriptor *a2, const TBaseFont *a3, id a4)
{
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;

  *(_QWORD *)this = &off_1E15DCAF0;
  *((_QWORD *)this + 1) = a4;
  v7 = atomic_load((unsigned int *)a2 + 4);
  *((_DWORD *)this + 4) = v7 | 0x80000000;
  *((_QWORD *)this + 3) = 0;
  if (a3)
  {
    v8 = (unsigned int *)((char *)a3 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 4) = a3;
  v10 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v10;
}

void TDescriptor::TDescriptor(TDescriptor *this, const TDescriptor *a2, const __CFNumber *a3, double a4, int a5)
{
  unint64_t *v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  const __CFDictionary *v16;
  __CFDictionary *v18;
  const void *v19;
  const TBaseFont *v20;
  const __CFDictionary *v21;
  unint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;

  *(_QWORD *)this = &off_1E15DCAF0;
  *((_QWORD *)this + 1) = 0;
  v9 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4) & 0x7FFFFFFF | a5;
  v10 = (unsigned int *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v11 = atomic_load((unint64_t *)a2 + 4);
  if (v11)
  {
    if ((*(_DWORD *)(v11 + 180) & 0x10000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      do
        v12 = __ldxr(v10);
      while (__stxr(v12 | 0x80000000, v10));
      v13 = (unsigned int *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  *((_QWORD *)this + 4) = v11;
  v15 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v15;
  v26 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttributes(a2, (unint64_t *)&v26);
  v25 = (id)0xAAAAAAAAAAAAAAAALL;
  v16 = (const __CFDictionary *)atomic_load((unint64_t *)&v26);
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v25, v16);
  v24 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyVariationWithValue(0, a3, a4, (unint64_t *)&v24);
  if (atomic_load((unint64_t *)&v24))
  {
    v18 = (__CFDictionary *)atomic_load((unint64_t *)&v25);
    v19 = (const void *)atomic_load((unint64_t *)&v24);
    CFDictionarySetValue(v18, CFSTR("NSCTFontVariationAttribute"), v19);
    if ((*((_DWORD *)a2 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(a2, 0, 0.0);
    v20 = (const TBaseFont *)atomic_load((unint64_t *)a2 + 4);
    v21 = (const __CFDictionary *)atomic_load((unint64_t *)&v24);
    TDescriptor::MergeVariationWithBase(this, v20, v21, (TCFMutableDictionary *)&v25);
  }
  do
    v22 = __ldaxr((unint64_t *)&v25);
  while (__stlxr(0, (unint64_t *)&v25));
  do
    v23 = (void *)__ldaxr(v9);
  while (__stlxr(v22, v9));

}

void TDescriptor::TDescriptor(TDescriptor *this, const TDescriptor *a2, int a3)
{
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)this = &off_1E15DCAF0;
  TDescriptor::CopyAttributes(a2, (unint64_t *)this + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4) | a3;
  *((_QWORD *)this + 3) = 0;
  v6 = atomic_load((unint64_t *)a2 + 4);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 4) = v6;
  v9 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v9;
}

uint64_t TDescriptor::CopyAttribute@<X0>(TDescriptor *this@<X0>, const __CFString **a2@<X3>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t result;

  if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(this, 0, 0.0);
  result = atomic_load((unint64_t *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, const __CFString **))(*(_QWORD *)result + 48))(result, a3, a2);
  *a4 = 0;
  return result;
}

void TDescriptor::CopyLocalizedAttribute(TDescriptor *this@<X0>, const __CFString *key@<X1>, const __CFString **a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v8;
  const void *FontAttributeID;

  if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(this, 0, 0.0);
  v8 = atomic_load((unint64_t *)this + 4);
  FontAttributeID = GetFontAttributeID(key);
  if (v8)
    (*(void (**)(unint64_t, const void *, const __CFString **))(*(_QWORD *)v8 + 48))(v8, FontAttributeID, a3);
  else
    TDescriptor::CopyAttributeForNonNormalized(this, a3, (uint64_t)FontAttributeID, a4);
}

CFStringRef TDescriptor::DebugDescription(TDescriptor *this)
{
  const __CFAllocator *v1;
  unint64_t Attributes;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Attributes = TDescriptor::GetAttributes(this, 1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("attributes = %@>"), Attributes);
}

void CTFontDescriptor::CTFontDescriptor(CTFontDescriptor *this, const CTFontDescriptor *a2, const __CFDictionary *a3, int a4)
{
  TComponentFont *v8;
  uint64_t v9;
  const TBaseFont *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = TDescriptor::Hash;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  if (a3)
  {
    v8 = (TComponentFont *)operator new();
    v9 = *((_QWORD *)a2 + 5);
    if ((*(_DWORD *)(v9 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont((TDescriptor *)v9, 0, 0.0);
    v10 = (const TBaseFont *)atomic_load((unint64_t *)(v9 + 32));
    TComponentFont::TComponentFont(v8, v10, a3, 0);
    *((_QWORD *)this + 6) = &off_1E15DCAF0;
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = a4 | 0x80000000;
    *((_QWORD *)this + 9) = 0;
LABEL_8:
    v12 = (unsigned int *)((char *)v8 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    goto LABEL_10;
  }
  v11 = *((_QWORD *)a2 + 5);
  if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)a2 + 5), 0, 0.0);
  v8 = (TComponentFont *)atomic_load((unint64_t *)(v11 + 32));
  *((_QWORD *)this + 6) = &off_1E15DCAF0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = a4 | 0x80000000;
  *((_QWORD *)this + 9) = 0;
  if (v8)
    goto LABEL_8;
LABEL_10:
  *((_QWORD *)this + 10) = v8;
  *((_QWORD *)this + 11) = 0;
}

CFSetRef TDescriptor::TDescriptor(TDescriptor const&,__CFDictionary const*)::$_0::__invoke()
{
  CFSetRef result;
  const void *v1[4];

  v1[3] = *(const void **)MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("NSCTFontFeatureSettingsAttribute");
  v1[1] = CFSTR("NSFontSizeAttribute");
  v1[2] = CFSTR("NSCTFontOpticalSizeAttribute");
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, 3, MEMORY[0x1E0C9B3B0]);
  qword_1ECDE7648 = (uint64_t)result;
  return result;
}

CFTypeID CTFontCollectionGetTypeID(void)
{
  if (_MergedGlobals_14 != -1)
    dispatch_once_f(&_MergedGlobals_14, 0, (dispatch_function_t)TCFBase<TCollection>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return qword_1ECDE7660;
}

CTFontCollectionRef CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef options)
{
  const __CFAllocator *v1;
  const __CFDictionary *v2;
  CTFontDescriptorRef v3;
  CFArrayRef v4;
  void *v5;
  const __CTFontCollection *v6;
  CFArrayRef v8;
  id v9;
  CFDictionaryRef v10;
  void *values;

  v10 = options;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = CTFontDescriptorCreateWithAttributes(v2);
  values = v3;
  v4 = CFArrayCreate(v1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  values = (void *)0xAAAAAAAAAAAAAAAALL;
  v8 = v4;
  TCFBase_NEW<CTCollection,__CFArray const*,__CFDictionary const*&>((unint64_t *)&v9, (void **)&v8, &v10);
  do
    v5 = (void *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  values = v5;

  do
    v6 = (const __CTFontCollection *)__ldaxr((unint64_t *)&values);
  while (__stlxr(0, (unint64_t *)&values));

  return v6;
}

void TCFBase_NEW<CTCollection,__CFArray const*,__CFDictionary const*&>(unint64_t *a1, void **a2, const __CFDictionary **a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFDictionary *v9;
  unint64_t v10;
  id v11;

  v6 = TCFBase<TCollection>::Allocate();
  if (v6)
  {
    v7 = v6;
    v8 = *a2;
    v9 = *a3;
    *(_QWORD *)(v7 + 16) = CTCollection::Destruct;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v7 + 48;
    *(_DWORD *)(v7 + 48) = MakeFlags(v9);
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 104) = 0;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_DWORD *)(v7 + 96) = 0;
    v11 = (id)v7;
    do
      v10 = __ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
    *a1 = v10;

  }
  else
  {
    *a1 = 0;
  }
}

CTFontCollectionRef CTFontCollectionCreateWithFontDescriptors(CFArrayRef queryDescriptors, CFDictionaryRef options)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const __CTFontCollection *v8;
  id v10;
  id v11;
  id v12;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = TCFBase<TCollection>::Allocate();
  if (v4)
  {
    v5 = v4;
    *(_QWORD *)(v4 + 16) = CTCollection::Destruct;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v4 + 48;
    *(_DWORD *)(v4 + 48) = MakeFlags(options);
    *(_QWORD *)(v5 + 56) = queryDescriptors;
    *(_QWORD *)(v5 + 104) = 0;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_DWORD *)(v5 + 96) = 0;
    v12 = (id)v5;
    do
      v6 = (void *)__ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    v10 = v6;

  }
  else
  {
    v10 = 0;
  }
  do
    v7 = (void *)__ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));
  v11 = v7;

  do
    v8 = (const __CTFontCollection *)__ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));

  return v8;
}

CTFontCollectionRef CTFontCollectionCreateCopyWithFontDescriptors(CTFontCollectionRef original, CFArrayRef queryDescriptors, CFDictionaryRef options)
{
  uint64_t v6;
  _QWORD *v7;
  TCollection *v8;
  void *v9;
  void *v10;
  const __CTFontCollection *v11;
  id v13;
  id v14;
  id v15;

  if (!original)
    return 0;
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  v6 = TCFBase<TCollection>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = (TCollection *)(v6 + 48);
    v7[2] = CTCollection::Destruct;
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = v8;
    TCollection::TCollection(v8, original, queryDescriptors, options);
    v15 = v7;
    do
      v9 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    v13 = v9;

  }
  else
  {
    v13 = 0;
  }
  do
    v10 = (void *)__ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));
  v14 = v10;

  do
    v11 = (const __CTFontCollection *)__ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));

  return v11;
}

unint64_t CTFontCollectionCreateForLocale(uint64_t a1, const __CFDictionary *a2)
{
  __CFString *v2;
  void *v3;
  const __CFAllocator *v4;
  const __CFDictionary *v5;
  CTFontDescriptorRef v6;
  CTFontDescriptorRef v7;
  CFArrayRef v8;
  void *v9;
  unint64_t v10;
  CFArrayRef v12;
  id v13;
  const __CFDictionary *v14;
  void *values;
  void *keys;

  v14 = a2;
  if (!a1)
    return 0;
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  v2 = (__CFString *)MEMORY[0x186DBF2C0]();
  LanguageIdentifierByNormalizing(v2, 2u, (unint64_t *)&v13);
  v3 = (void *)atomic_load((unint64_t *)&v13);
  values = v3;
  keys = CFSTR("NSCTFontDesignLanguagesAttribute");
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = CTFontDescriptorCreateWithAttributes(v5);
  v7 = v6;
  if (v6)
  {
    keys = v6;
    v8 = CFArrayCreate(v4, (const void **)&keys, 1, MEMORY[0x1E0C9B378]);
    keys = (void *)0xAAAAAAAAAAAAAAAALL;
    v12 = v8;
    TCFBase_NEW<CTCollection,__CFArray const*,__CFDictionary const*&>((unint64_t *)&values, (void **)&v12, &v14);
    do
      v9 = (void *)__ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    keys = v9;

    do
      v10 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

CFArrayRef CTFontCollectionCreateMatchingFontDescriptors(CFArrayRef collection)
{
  unint64_t *v1;
  const __CFArray *v2;
  const __CFArray *v3;

  if (collection)
  {
    v1 = (unint64_t *)*((_QWORD *)collection + 5);
    v2 = (const __CFArray *)*(unsigned int *)v1;
    v3 = (const __CFArray *)atomic_load(v1 + 1);
    return (CFArrayRef)TCollection::CopyMatchingFontDescriptorsUnlocked((TCollection *)v1, v2, v3);
  }
  return collection;
}

CFArrayRef CTFontCollectionCreateMatchingFontDescriptorsWithOptions(CFArrayRef collection, CFDictionaryRef options)
{
  if (collection)
    return (CFArrayRef)TCollection::CopyMatchingFontDescriptors(*((TCollection **)collection + 5), options);
  return collection;
}

CFArrayRef CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(CFArrayRef collection, CTFontCollectionSortDescriptorsCallback sortCallback, void *refCon)
{
  if (collection)
    return TCollection::CopyMatchingFontDescriptors(*((TCollection **)collection + 5), (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sortCallback, refCon);
  return collection;
}

CFArrayRef CTFontCollectionCopyFontAttribute(CFArrayRef collection, CFStringRef attributeName, CTFontCollectionCopyOptions options)
{
  if (collection)
    return (CFArrayRef)TCollection::CopyFontAttribute(*((TCollection **)collection + 5), (__CFString *)attributeName);
  return collection;
}

CFArrayRef CTFontCollectionCopyFontAttributes(CFArrayRef collection, CFSetRef attributeNames, CTFontCollectionCopyOptions options)
{
  if (collection)
    return (CFArrayRef)TCollection::CopyFontAttributes(*((TCollection **)collection + 5), attributeNames);
  return collection;
}

Class TCFBase<TCollection>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1ECDE7668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7668))
  {
    qword_1ECDE7670 = 0;
    unk_1ECDE7678 = "CTFontCollection";
    qword_1ECDE7680 = 0;
    unk_1ECDE7688 = 0;
    qword_1ECDE7690 = (uint64_t)TCFBase<TCollection>::ClassDestruct;
    unk_1ECDE7698 = TCFBase<TCollection>::ClassEqual;
    qword_1ECDE76A0 = (uint64_t)TCFBase<TCollection>::ClassHash;
    unk_1ECDE76A8 = 0;
    qword_1ECDE76B0 = (uint64_t)TCFBase<TCollection>::ClassDebug;
    unk_1ECDE76B8 = 0;
    qword_1ECDE76C0 = 0;
    unk_1ECDE76C8 = 0;
    __cxa_guard_release(&qword_1ECDE7668);
  }
  qword_1ECDE7660 = _CFRuntimeRegisterClass();
  return _CTFontCollectionEnableBridging();
}

void TCFBase<TCollection>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);
  id *v3;

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  v3 = *(id **)(a1 + 40);

}

uint64_t TCFBase<TCollection>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TCollection::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

_QWORD *TCFBase<TCollection>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TCFBase<TCollection>::ClassDebug()
{
  return 0;
}

uint64_t TCFBase<TCollection>::Allocate()
{
  if (_MergedGlobals_14 != -1)
    dispatch_once_f(&_MergedGlobals_14, 0, (dispatch_function_t)TCFBase<TCollection>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

uint64_t MakeFlags(CFDictionaryRef theDict)
{
  uint64_t v2;
  int *v3;
  int v4;
  const __CFNumber *Value;
  int valuePtr;

  if (!theDict)
    return 0;
  LODWORD(v2) = 0;
  v3 = &kCollectionFlagsMapping;
  do
  {
    v4 = *v3;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, *((const void **)v3 + 2));
    valuePtr = -1431655766;
    if (!Value || (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), !valuePtr))
      v4 = 0;
    v2 = v4 | v2;
    v3 += 6;
  }
  while (v3 != (int *)&kCTFontCopyrightNameKey);
  return v2;
}

void TCollection::InitWithCopy(TCollection *this, const __CTFontCollection *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  const __CFArray *v9;
  uint64_t Count;
  __CFArray *v11;
  void *v12;
  void *v13;
  id v14;
  CFRange v15;

  v6 = *((_QWORD *)a2 + 5);
  *(_DWORD *)this |= *(_DWORD *)v6;
  *((_QWORD *)this + 4) = *(_QWORD *)(v6 + 32);
  v7 = (void *)atomic_load((unint64_t *)(v6 + 40));
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 5, v7);
  v8 = (void *)atomic_load((unint64_t *)(v6 + 24));
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 3, v8);
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  v9 = (const __CFArray *)atomic_load((unint64_t *)(v6 + 8));
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v14, v9);
  if (a3)
  {
    Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      v15.length = Count;
      v11 = (__CFArray *)atomic_load((unint64_t *)&v14);
      v15.location = 0;
      CFArrayAppendArray(v11, a3, v15);
    }
  }
  v12 = (void *)atomic_load((unint64_t *)&v14);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 1, v12);
  v13 = (void *)atomic_load((unint64_t *)(v6 + 16));
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 2, v13);

}

void TCollection::TCollection(TCollection *this, const __CTFontCollection *a2, const __CFArray *a3, CFDictionaryRef theDict)
{
  const __CFDictionary *v7;

  *(_DWORD *)this = MakeFlags(theDict);
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  if (a2)
  {
    TCollection::InitWithCopy(this, a2, a3, v7);
    *(_DWORD *)this &= ~0x80000000;
  }
}

uint64_t TCollection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  BOOL v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (a1 == a2)
    return 1;
  if (((*(_DWORD *)a2 ^ *(_DWORD *)a1) & 0x7FFFFFFF) != 0)
    return 0;
  v5 = (const void *)atomic_load((unint64_t *)(a1 + 8));
  v6 = (const void *)atomic_load((unint64_t *)(a2 + 8));
  if (v5 == v6)
    goto LABEL_24;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  result = CFEqual(v5, v6);
  if ((_DWORD)result)
  {
LABEL_24:
    v8 = (const void *)atomic_load((unint64_t *)(a1 + 16));
    v9 = (const void *)atomic_load((unint64_t *)(a2 + 16));
    if (v8 == v9 || (result = 0, v8) && v9 && (result = CFEqual(v8, v9), (_DWORD)result))
    {
      v10 = (const void *)atomic_load((unint64_t *)(a1 + 24));
      v11 = (const void *)atomic_load((unint64_t *)(a2 + 24));
      if (v10 == v11 || (result = 0, v10) && v11 && (result = CFEqual(v10, v11), (_DWORD)result))
      {
        if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
          return 0;
        return StringEqual<TCFRef<__CFString const*>,TCFRef<__CFString const*>>((unint64_t *)(a1 + 40), (unint64_t *)(a2 + 40));
      }
    }
  }
  return result;
}

unint64_t TCollection::CopyMatchesForDescriptors(TCollection *this, const __CFArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  TDescriptor **ValueAtIndex;
  void *v11;
  const __CFArray *v12;
  unint64_t v13;
  id v15;
  id v16;
  id Mutable;

  v3 = 0;
  v4 = 288;
  do
  {
    if ((kCollectionFlagsMapping[v3] & a2) != 0)
      v4 |= *(_QWORD *)&kCollectionFlagsMapping[v3 + 2];
    v3 += 6;
  }
  while (v3 != 30);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (this)
  {
    Count = CFArrayGetCount(this);
    if (Count)
    {
      v6 = Count;
      v7 = 0;
      v8 = v4 | 1;
      do
      {
        ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(this, v7);
        v16 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptor::CreateMatchingDescriptors(ValueAtIndex[5], 0, v8, (unint64_t *)&v16);
        if (atomic_load((unint64_t *)&v16))
        {
          v11 = (void *)atomic_load((unint64_t *)&v16);
          v15 = v11;
          TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>((unint64_t *)&Mutable, (unint64_t *)&v15);

        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
  v12 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
  if (CFArrayGetCount(v12) < 1)
  {
    v13 = 0;
  }
  else
  {
    do
      v13 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
  }

  return v13;
}

unint64_t TCollection::CopyMatchingFontDescriptorsUnlocked(TCollection *this, const __CFArray *a2, const __CFArray *a3)
{
  const __CFArray *v3;
  const __CFArray *v4;
  TCollection *v5;
  const __CFArray *v6;
  void *v7;
  unint64_t v9;
  TDescriptor *v10;
  void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFIndex Count;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  TCollection *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  CFIndex v26;
  const __CTFontDescriptor *ValueAtIndex;
  CFDictionaryRef v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  int64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  const __CFArray *v36;
  CFIndex v37;
  const __CFArray *v38;
  const __CTFontDescriptor *v39;
  CFDictionaryRef v40;
  uint64_t v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  const void *Value;
  __CFArray *v45;
  void *v47;
  const __CFArray *v48;
  unsigned int (*v49)(const void *, const UInt8 *);
  const UInt8 *BytePtr;
  CFIndex v51;
  __CFSet *v52;
  int v53;
  void **v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex i;
  const void *v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  const __CFArray *v65;
  const __CFArray *v66;
  _BOOL4 v67;
  unint64_t v68;
  CFMutableSetRef Mutable;
  const __CFSet *v70;
  __int128 v71;
  const __CFSet *v72;
  const __CFSet *v73;
  unint64_t v74;
  void *v75;
  void *v76;
  unint64_t v77;
  int v79;
  TCollection *v80;
  const __CFArray *v81;
  const __CFArray *v82;
  CFIndex v83;
  CFDictionaryRef v84;
  CFIndex v85;
  id v86;
  id v87;
  void ***p_values;
  void **values;
  void *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 *v107;
  __int128 v108;
  _QWORD v109[36];

  v3 = a3;
  v4 = a2;
  v5 = this;
  v109[33] = *MEMORY[0x1E0C80C00];
  v6 = (const __CFArray *)atomic_load((unint64_t *)this + 1);
  v87 = (id)0xAAAAAAAAAAAAAAAALL;
  if (v6 == a3 && *((_DWORD *)this + 16) == (_DWORD)a2 && *((_DWORD *)this + 12) == TGenerationSeed::sGeneration)
    v7 = (void *)atomic_load((unint64_t *)this + 7);
  else
    v7 = 0;
  v87 = v7;
  if (!atomic_load((unint64_t *)&v87))
  {
    if (!v3)
      goto LABEL_94;
    if (CFArrayGetCount(v3) != 1)
      goto LABEL_13;
    v10 = (TDescriptor *)*((_QWORD *)CFArrayGetValueAtIndex(v3, 0) + 5);
    *(_QWORD *)&v108 = 0xAAAAAAAAAAAAAAAALL;
    TDescriptor::CopyAttributes(v10, (unint64_t *)&v108);
    v11 = (void *)atomic_load((unint64_t *)&v108);
    v12 = v11;
    if (v12)
    {
      v13 = v12;
      Count = CFDictionaryGetCount(v12);

      if (Count)
      {
LABEL_13:
        v15 = TCollection::CopyMatchesForDescriptors(v3, v4);
        if (!v15)
          goto LABEL_94;
        do
          v16 = __ldaxr((unint64_t *)&v87);
        while (__stlxr(v15, (unint64_t *)&v87));
        v17 = (void *)v16;
        goto LABEL_25;
      }
    }
    else
    {

    }
    v18 = 0;
    v19 = 288;
    do
    {
      if ((kCollectionFlagsMapping[v18] & v4) != 0)
        v19 |= *(_QWORD *)&kCollectionFlagsMapping[v18 + 2];
      v18 += 6;
    }
    while (v18 != 30);
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&values);
    TDescriptorSource::CopyAllDescriptorsInternal((TPurgeableCache **)&values, 0, v19 | 1, (unint64_t *)&v108);
    do
      v20 = __ldaxr((unint64_t *)&v108);
    while (__stlxr(0, (unint64_t *)&v108));
    do
      v21 = (void *)__ldaxr((unint64_t *)&v87);
    while (__stlxr(v20, (unint64_t *)&v87));

    v17 = (void *)v108;
LABEL_25:

    if (atomic_load((unint64_t *)v5 + 2))
    {
      v23 = (TCollection *)atomic_load((unint64_t *)v5 + 2);
      v24 = (const __CFArray *)TCollection::CopyMatchesForDescriptors(v23, v4);
      if (v24)
      {
        v80 = v5;
        v79 = (int)v4;
        v86 = (id)0xAAAAAAAAAAAAAAAALL;
        v25 = (const __CFArray *)atomic_load((unint64_t *)&v87);
        TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v86, v25);
        v83 = CFArrayGetCount(v24);
        if (v83)
        {
          v26 = 0;
          v82 = v24;
          while (1)
          {
            ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v24, v26);
            v28 = CTFontDescriptorCopyAttributes(ValueAtIndex);
            v29 = v28;
            v30 = v29;
            v31 = v29 ? CFDictionaryGetCount(v29) : 0;

            *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v109[27] = v32;
            *(_OWORD *)&v109[29] = v32;
            *(_OWORD *)&v109[23] = v32;
            *(_OWORD *)&v109[25] = v32;
            *(_OWORD *)&v109[19] = v32;
            *(_OWORD *)&v109[21] = v32;
            *(_OWORD *)&v109[15] = v32;
            *(_OWORD *)&v109[17] = v32;
            *(_OWORD *)&v109[11] = v32;
            *(_OWORD *)&v109[13] = v32;
            *(_OWORD *)&v109[7] = v32;
            *(_OWORD *)&v109[9] = v32;
            *(_OWORD *)&v109[3] = v32;
            *(_OWORD *)&v109[5] = v32;
            *(_OWORD *)&v109[1] = v32;
            v108 = 0uLL;
            v109[0] = 0;
            v109[31] = &v109[1];
            v85 = v26;
            if (!v31)
              break;
            std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v108, v31);
            v33 = *((_QWORD *)&v108 + 1);
            bzero(*((void **)&v108 + 1), 8 * v31);
            *((_QWORD *)&v108 + 1) = v33 + 8 * v31;
            *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v105 = v34;
            v106 = v34;
            v103 = v34;
            v104 = v34;
            v101 = v34;
            v102 = v34;
            v99 = v34;
            v100 = v34;
            v97 = v34;
            v98 = v34;
            v95 = v34;
            v96 = v34;
            v93 = v34;
            v94 = v34;
            v92 = v34;
            values = 0;
            v90 = 0;
            v91 = 0;
            v107 = &v92;
            std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v31);
            v35 = (char *)v90;
            bzero(v90, 8 * v31);
            v90 = &v35[8 * v31];
            if (v28)
              goto LABEL_34;
LABEL_35:
            v84 = v28;
            v36 = (const __CFArray *)atomic_load((unint64_t *)&v86);
            v37 = CFArrayGetCount(v36);
            if (v37 >= 1)
            {
              do
              {
                v38 = (const __CFArray *)atomic_load((unint64_t *)&v86);
                v39 = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v38, v37 - 1);
                v40 = CTFontDescriptorCopyAttributes(v39);
                if (v31 < 1)
                {
                  v41 = 0;
                }
                else
                {
                  v41 = 0;
                  while (1)
                  {
                    v42 = v40;
                    if (!v42)
                      break;
                    v43 = v42;
                    Value = CFDictionaryGetValue(v42, *(const void **)(v108 + 8 * v41));

                    if (!Value || !CFEqual(Value, values[v41]))
                      goto LABEL_45;
                    if (v31 == ++v41)
                      goto LABEL_46;
                  }

                }
LABEL_45:
                if (v41 == v31)
                {
LABEL_46:
                  v45 = (__CFArray *)atomic_load((unint64_t *)&v86);
                  CFArrayRemoveValueAtIndex(v45, v37 - 1);
                }

              }
              while (v37-- > 1);
            }
            p_values = &values;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_values);
            values = (void **)&v108;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);

            v26 = v85 + 1;
            v24 = v82;
            if (v85 + 1 == v83)
              goto LABEL_53;
          }
          v105 = v32;
          v106 = v32;
          v103 = v32;
          v104 = v32;
          v101 = v32;
          v102 = v32;
          v99 = v32;
          v100 = v32;
          v97 = v32;
          v98 = v32;
          v95 = v32;
          v96 = v32;
          v93 = v32;
          v94 = v32;
          v92 = v32;
          values = 0;
          v90 = 0;
          v91 = 0;
          v107 = &v92;
          if (!v28)
            goto LABEL_35;
LABEL_34:
          CFDictionaryGetKeysAndValues(v28, (const void **)v108, (const void **)values);
          goto LABEL_35;
        }
LABEL_53:
        v47 = (void *)atomic_load((unint64_t *)&v86);
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v87, v47);

        v5 = v80;
        LODWORD(v4) = v79;
      }

    }
    if (!*((_QWORD *)v5 + 4))
    {
LABEL_74:
      v64 = (void *)atomic_load((unint64_t *)&v87);
      v65 = v64;
      v66 = v65;
      if (v65)
        v67 = CFArrayGetCount(v65) > 0;
      else
        v67 = 0;

      if ((v4 & 1) != 0 && v67)
      {
        v68 = atomic_load((unint64_t *)&v87);
        Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
        v70 = Mutable;
        if (v68)
          -[__CFSet addObjectsFromArray:](Mutable, "addObjectsFromArray:", v68);
        *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v108 = v71;
        *(_OWORD *)v109 = v71;
        TFontDescriptorDuplicateFilter::TFontDescriptorDuplicateFilter((TFontDescriptorDuplicateFilter *)&v108, v70, &TFontDescriptorDuplicateFilter::kCTFontDescriptorDuplicateFilterSetCallBacks);
        TFontDescriptorDuplicateFilter::PerformFilter((unint64_t *)&v108);
        v72 = (const __CFSet *)atomic_load(v109);
        if (CFSetGetCount(v72) >= 1)
        {
          v73 = (const __CFSet *)atomic_load(v109);
          CreateSortedArrayWithSet(v73, 0, 0, &values);
          do
            v74 = __ldaxr((unint64_t *)&values);
          while (__stlxr(0, (unint64_t *)&values));

          do
            v75 = (void *)__ldaxr((unint64_t *)&v87);
          while (__stlxr(v74, (unint64_t *)&v87));

        }
        TFontDescriptorDuplicateFilter::~TFontDescriptorDuplicateFilter((id *)&v108);

      }
      if (v6 == v3)
      {
        v76 = (void *)atomic_load((unint64_t *)&v87);
        v77 = atomic_load((unint64_t *)v5 + 7);
        if ((void *)v77 != v76 || *((_DWORD *)v5 + 16) != (_DWORD)v4)
        {
          TCFRef<__CTFont const*>::Retain((unint64_t *)v5 + 7, v76);
          *((_DWORD *)v5 + 16) = (_DWORD)v4;
        }
        *((_DWORD *)v5 + 12) = TGenerationSeed::sGeneration;
      }
      goto LABEL_7;
    }
    values = (void **)0xAAAAAAAAAAAAAAAALL;
    v48 = (const __CFArray *)atomic_load((unint64_t *)&v87);
    v49 = (unsigned int (*)(const void *, const UInt8 *))*((_QWORD *)v5 + 4);
    BytePtr = (const UInt8 *)atomic_load((unint64_t *)v5 + 5);
    if (v48)
    {
      v51 = CFArrayGetCount(v48);
      v52 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v51, MEMORY[0x1E0C9B3B0]);
      v81 = v3;
      v53 = (int)v4;
      if (BytePtr)
        BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
      v55 = CFArrayGetCount(v48);
      if (v55)
      {
        v56 = v55;
        for (i = 0; i != v56; ++i)
        {
          v58 = CFArrayGetValueAtIndex(v48, i);
          if (v49(v58, BytePtr))
            CFSetAddValue(v52, v58);
        }
      }
      CreateSortedArrayWithSet(v52, 0, 0, &v108);
      do
        v54 = (void **)__ldaxr((unint64_t *)&v108);
      while (__stlxr(0, (unint64_t *)&v108));

      LODWORD(v4) = v53;
      v3 = v81;
    }
    else
    {
      v54 = 0;
    }
    values = v54;
    if (atomic_load((unint64_t *)&values))
    {
      v60 = atomic_load((unint64_t *)&v87);
      v61 = atomic_load((unint64_t *)&values);
      if (v60 != v61)
      {
        do
          v62 = __ldaxr((unint64_t *)&values);
        while (__stlxr(0, (unint64_t *)&values));
        do
          v63 = (void *)__ldaxr((unint64_t *)&v87);
        while (__stlxr(v62, (unint64_t *)&v87));

      }
      goto LABEL_74;
    }

LABEL_94:
    v9 = 0;
    goto LABEL_95;
  }
  do
LABEL_7:
    v9 = __ldaxr((unint64_t *)&v87);
  while (__stlxr(0, (unint64_t *)&v87));
LABEL_95:

  return v9;
}

void TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>(unint64_t *a1, unint64_t *a2)
{
  __CFArray *v2;
  const __CFArray *v3;
  void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFRange v7;

  v2 = (__CFArray *)atomic_load(a1);
  v3 = (const __CFArray *)atomic_load(a2);
  v4 = (void *)atomic_load(a2);
  v5 = v4;
  v6 = v5;
  if (v5)
    v7.length = CFArrayGetCount(v5);
  else
    v7.length = 0;
  v7.location = 0;
  CFArrayAppendArray(v2, v3, v7);

}

unint64_t TCollection::CopyMatchingFontDescriptors(TCollection *this, CFDictionaryRef theDict)
{
  const __CFArray *Flags;
  const __CFArray *v4;

  if (theDict)
    Flags = (const __CFArray *)MakeFlags(theDict);
  else
    Flags = (const __CFArray *)*(unsigned int *)this;
  v4 = (const __CFArray *)atomic_load((unint64_t *)this + 1);
  return TCollection::CopyMatchingFontDescriptorsUnlocked(this, Flags, v4);
}

void TFontDescriptorDuplicateFilter::PerformFilter(unint64_t *a1)
{
  void *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  uint64_t Count;
  const __CFArray *v6;
  CFRange v7;

  v2 = (void *)atomic_load(a1 + 3);
  v3 = v2;
  if (v3)
  {
    v4 = v3;
    Count = CFArrayGetCount(v3);

    if (Count >= 1)
    {
      v6 = (const __CFArray *)atomic_load(a1 + 3);
      v7.location = 0;
      v7.length = Count;
      CFArrayApplyFunction(v6, v7, (CFArrayApplierFunction)TFontDescriptorFilter::FilterFunctionToAdd, a1);
    }
  }
  else
  {

  }
}

const __CFArray *TCollection::CopyMatchingFontDescriptors(TCollection *this, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), void *a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  __CFArray *v9;
  const __CFArray *v10;
  id MutableCopy;
  CFRange v13;

  v5 = (const __CFArray *)*(unsigned int *)this;
  v6 = (const __CFArray *)atomic_load((unint64_t *)this + 1);
  v7 = (const __CFArray *)TCollection::CopyMatchingFontDescriptorsUnlocked(this, v5, v6);
  v8 = v7;
  if (a2 && v7)
  {
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v7);
    CFRelease(v8);
    v9 = (__CFArray *)atomic_load((unint64_t *)&MutableCopy);
    v10 = (const __CFArray *)atomic_load((unint64_t *)&MutableCopy);
    v13.length = CFArrayGetCount(v10);
    v13.location = 0;
    CFArraySortValues(v9, v13, a2, a3);
    do
      v8 = (const __CFArray *)__ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));

  }
  return v8;
}

unint64_t TCollection::CopyFontAttribute(TCollection *this, __CFString *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  unint64_t v6;

  v3 = (const __CFArray *)*(unsigned int *)this;
  v4 = (const __CFArray *)atomic_load((unint64_t *)this + 1);
  v5 = (const __CFArray *)TCollection::CopyMatchingFontDescriptorsUnlocked(this, v3, v4);
  v6 = CTFontDescriptorsCopyAttribute(v5, a2);

  return v6;
}

unint64_t TCollection::CopyFontAttributes(TCollection *this, const __CFSet *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  unint64_t v6;

  v3 = (const __CFArray *)*(unsigned int *)this;
  v4 = (const __CFArray *)atomic_load((unint64_t *)this + 1);
  v5 = (const __CFArray *)TCollection::CopyMatchingFontDescriptorsUnlocked(this, v3, v4);
  v6 = CTFontDescriptorsCopyAttributesInternal(v5, a2);

  return v6;
}

void TFontDescriptorFilter::FilterFunctionToAdd(TFontDescriptorFilter *this, unint64_t *a2, void *a3)
{
  __CFSet *v5;

  if ((*(unsigned int (**)(unint64_t *, TFontDescriptorFilter *, void *))(*a2 + 56))(a2, this, a3))
  {
    v5 = (__CFSet *)atomic_load(a2 + 2);
    CFSetAddValue(v5, this);
  }
}

void CopyLocalizedFontNameFromResources(__CFString *a1@<X0>, id a2@<X2>, const __CFString **a3@<X3>, int a4@<W1>, __CFString *a5@<X8>)
{
  const __CFString *v9;
  const __CFArray *v11;
  unint64_t v12;
  void *v13;
  unint64_t v15;
  id v16;
  id v17;

  if (a4 == 4)
  {
LABEL_4:
    v9 = CFSTR("FontNames");
    goto LABEL_6;
  }
  if (a4 != 2)
  {
    if (a4 != 1)
      goto LABEL_13;
    goto LABEL_4;
  }
  v9 = CFSTR("StyleNames");
LABEL_6:
  v17 = a2;
  if (!atomic_load((unint64_t *)&v17))
  {
    v11 = CFLocaleCopyPreferredLanguages();
    CreateNormalizedLanguages(v11, (unint64_t *)&v16);

    do
      v12 = __ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    do
      v13 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(v12, (unint64_t *)&v17));

  }
  a5->isa = (void *)0xAAAAAAAAAAAAAAAALL;
  CopyDefaultLocalizedName(a5, a1, v9, (const __CFString **)a2, (unint64_t *)a3);
  if (!atomic_load((unint64_t *)a5))
  {

LABEL_13:
    v17 = a1;
    do
      v15 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    a5->isa = (void *)v15;
  }

}

void CopyDefaultLocalizedName(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString **a4, unint64_t *a5)
{
  const __CFString *v8;
  const __CFCharacterSet *Predefined;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFAllocator *v14;
  unint64_t v15;
  void *v16;
  unint64_t v18;
  void *v19;
  __CFString *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFIndex Count;
  CFIndex v24;
  CFIndex v25;
  __CFString *ValueAtIndex;
  unint64_t v27;
  void *v28;
  void *v29;
  __CFString *v30;
  void *v31;
  __CFString *v32;
  __CFString *v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  void *v37;
  void *v38;
  __CFString *v39;
  int v40;
  const __CFString *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  const __CFArray *v47;
  const __CFArray *v48;
  BOOL v49;
  int v50;
  unint64_t v51;
  void *v52;
  void *v53;
  __CFString *v54;
  __CFString *v55;
  int v56;
  unint64_t v57;
  void *v58;
  const __CFString *v60;
  const __CFString *v61;
  uint64_t IntValue;
  unint64_t v63;
  void *v64;
  __CFBundle *context;
  id v67;
  id v68;
  id MutableCopy;
  id v70;
  id v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;

  if (!a2 || (v8 = a2, (context = _CTGetFrameworkBundleForLocalization()) == 0))
  {
    a1->isa = 0;
    return;
  }
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  v73.length = CFStringGetLength(v8);
  v73.location = 0;
  v10 = RangeOfCharactersFromSet(v8, Predefined, v73, 0);
  v70 = 0;
  v71 = 0;
  if (v10 != -1)
  {
    v12 = v10;
    v13 = v11;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v74.location = v10;
    v74.length = v11;
    MutableCopy = (id)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, v74);
    do
      v15 = __ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));
    do
      v16 = (void *)__ldaxr((unint64_t *)&v71);
    while (__stlxr(v15, (unint64_t *)&v71));

    if (atomic_load((unint64_t *)&v71))
    {
      MutableCopy = CFStringCreateMutableCopy(v14, 0, v8);
      do
        v18 = __ldaxr((unint64_t *)&MutableCopy);
      while (__stlxr(0, (unint64_t *)&MutableCopy));
      do
        v19 = (void *)__ldaxr((unint64_t *)&v70);
      while (__stlxr(v18, (unint64_t *)&v70));

      v20 = (__CFString *)atomic_load((unint64_t *)&v70);
      v72.location = v12;
      v72.length = v13;
      CFStringReplace(v20, v72, CFSTR("%d"));
      v8 = (const __CFString *)atomic_load((unint64_t *)&v70);
    }
  }
  MutableCopy = (id)0xAAAAAAAAAAAAAAAALL;
  CopyLowercasedString(v8, (unint64_t *)&MutableCopy);
  v68 = 0;
  if (!((unint64_t)a4 | (unint64_t)a5))
  {
    v42 = (const __CFString *)atomic_load((unint64_t *)&MutableCopy);
    v67 = (id)CFBundleCopyLocalizedString(context, v42, 0, a3);
    do
      v43 = __ldaxr((unint64_t *)&v67);
    while (__stlxr(0, (unint64_t *)&v67));
    do
      v44 = (void *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(v43, (unint64_t *)&v68));

    v45 = (void *)atomic_load((unint64_t *)&v68);
    v22 = v45;
    v46 = (void *)atomic_load((unint64_t *)&MutableCopy);
    v47 = v46;
    if (v22 == v47)
    {

    }
    else
    {
      v48 = v47;
      if (v22)
        v49 = v47 == 0;
      else
        v49 = 1;
      if (v49)
      {
LABEL_71:

        goto LABEL_74;
      }
      v50 = CFEqual(v22, v47);

      if (!v50)
        goto LABEL_75;
    }
    v67 = (id)CFBundleCopyLocalizedString(context, v8, CFSTR("LocalizedFontNameNotFound"), a3);
    do
      v51 = __ldaxr((unint64_t *)&v67);
    while (__stlxr(0, (unint64_t *)&v67));
    do
      v52 = (void *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(v51, (unint64_t *)&v68));

    v53 = (void *)atomic_load((unint64_t *)&v68);
    v54 = v53;
    if (v54 == CFSTR("LocalizedFontNameNotFound"))
    {

    }
    else
    {
      v55 = v54;
      if (!v54)
      {
        v22 = 0;
        goto LABEL_74;
      }
      v56 = CFEqual(v54, CFSTR("LocalizedFontNameNotFound"));

      if (!v56)
        goto LABEL_75;
    }
    do
      v22 = (const __CFArray *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(0, (unint64_t *)&v68));
    goto LABEL_74;
  }
  if (qword_1ECDE76D8 != -1)
    dispatch_once_f(&qword_1ECDE76D8, context, (dispatch_function_t)CopyDefaultLocalizedName(__CFString const*,__CFString const*,__CFArray const*,__CFString const**)::$_0::__invoke);
  if (!_MergedGlobals_15)
  {
    v58 = 0;
    goto LABEL_82;
  }
  v21 = CFBundleCopyLocalizationsForPreferences((CFArrayRef)_MergedGlobals_15, (CFArrayRef)a4);
  v22 = v21;
  if (!v21)
    goto LABEL_74;
  Count = CFArrayGetCount(v21);
  if (!Count)
    goto LABEL_74;
  v24 = Count;
  v25 = 0;
  while (1)
  {
    ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v22, v25);
    atomic_load((unint64_t *)&MutableCopy);
    v67 = (id)CFBundleCopyLocalizedStringForLocalization();
    do
      v27 = __ldaxr((unint64_t *)&v67);
    while (__stlxr(0, (unint64_t *)&v67));
    do
      v28 = (void *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(v27, (unint64_t *)&v68));

    v29 = (void *)atomic_load((unint64_t *)&v68);
    v30 = v29;
    v31 = (void *)atomic_load((unint64_t *)&MutableCopy);
    v32 = v31;
    if (v30 == v32)
    {

LABEL_31:
      v67 = (id)CFBundleCopyLocalizedStringForLocalization();
      do
        v36 = __ldaxr((unint64_t *)&v67);
      while (__stlxr(0, (unint64_t *)&v67));
      do
        v37 = (void *)__ldaxr((unint64_t *)&v68);
      while (__stlxr(v36, (unint64_t *)&v68));

      v38 = (void *)atomic_load((unint64_t *)&v68);
      v39 = v38;
      if (v39 == CFSTR("LocalizedFontNameNotFound"))
      {

        do
LABEL_39:
          v30 = (__CFString *)__ldaxr((unint64_t *)&v68);
        while (__stlxr(0, (unint64_t *)&v68));
LABEL_40:

        goto LABEL_41;
      }
      v30 = v39;
      if (!v39)
        goto LABEL_40;
      v40 = CFEqual(v39, CFSTR("LocalizedFontNameNotFound"));

      if (v40)
        goto LABEL_39;
      goto LABEL_41;
    }
    v33 = v32;
    if (v30)
      v34 = v32 == 0;
    else
      v34 = 1;
    if (v34)
    {

      goto LABEL_40;
    }
    v35 = CFEqual(v30, v32);

    if (v35)
      goto LABEL_31;
LABEL_41:
    if (atomic_load((unint64_t *)&v68))
      break;
    if (++v25 == v24)
      goto LABEL_74;
  }
  if (a5)
  {
    LanguageIdentifierByNormalizing(ValueAtIndex, 1u, (unint64_t *)&v67);
    do
      v57 = __ldaxr((unint64_t *)&v67);
    while (__stlxr(0, (unint64_t *)&v67));
    *a5 = v57;
    v47 = (const __CFArray *)v67;
    goto LABEL_71;
  }
LABEL_74:

LABEL_75:
  v58 = (void *)atomic_load((unint64_t *)&v68);
  if (v58)
  {
    if (atomic_load((unint64_t *)&v70))
    {
      v60 = (const __CFString *)atomic_load((unint64_t *)&v68);
      v61 = (const __CFString *)atomic_load((unint64_t *)&v71);
      IntValue = CFStringGetIntValue(v61);
      CreateLocalizedStringWithFormat(v60, (unint64_t *)&v67, IntValue);
      do
        v63 = __ldaxr((unint64_t *)&v67);
      while (__stlxr(0, (unint64_t *)&v67));
      do
        v64 = (void *)__ldaxr((unint64_t *)&v68);
      while (__stlxr(v63, (unint64_t *)&v68));

    }
    do
      v58 = (void *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(0, (unint64_t *)&v68));
  }
LABEL_82:
  a1->isa = v58;

}

void FontNameCodeForKey(__CFString const*)::$_0::__invoke()
{
  unint64_t v0;
  id v1;

  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)FontNameCodeForKey(__CFString const*)::keys, (const void **)&FontNameCodeForKey(__CFString const*)::values, 20, MEMORY[0x1E0C9B390], 0);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));
  FontNameCodeForKey(__CFString const*)::sCodeLookupDict = v0;

}

CFArrayRef CopyDefaultLocalizedName(__CFString const*,__CFString const*,__CFArray const*,__CFString const**)::$_0::__invoke(__CFBundle *a1)
{
  CFArrayRef result;

  result = CFBundleCopyBundleLocalizations(a1);
  _MergedGlobals_15 = (uint64_t)result;
  return result;
}

_anonymous_namespace_::TFeatureSelector *`anonymous namespace'::TFeatureSelector::TFeatureSelector(_anonymous_namespace_::TFeatureSelector *this, const __CFString *a2, unsigned int a3, int a4)
{
  __CFDictionary *v8;
  __CFDictionary *v9;
  const void *v10;
  __CFDictionary *v11;
  unint64_t v12;
  void *v13;
  id v15;
  id Mutable;

  *(_QWORD *)this = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionarySetValue(v8, CFSTR("CTFeatureOpenTypeTag"), a2);
  TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v15, a3);
  v9 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v10 = (const void *)atomic_load((unint64_t *)&v15);
  CFDictionarySetValue(v9, CFSTR("CTFeatureOpenTypeValue"), v10);

  if (a4)
  {
    v11 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionarySetValue(v11, CFSTR("CTFeatureSelectorDefault"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  do
    v12 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  do
    v13 = (void *)__ldaxr((unint64_t *)this);
  while (__stlxr(v12, (unint64_t *)this));

  return this;
}

void *TFontFeatures::GetFeatureSelector(TFontFeatures *this, int a2, int a3)
{
  const __CFNumber *v5;
  const __CFNumber *v6;
  void *Selector;
  id v9;
  id v10;

  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFNumber::TCFNumber<int>((unint64_t *)&v9, a2);
  v5 = (const __CFNumber *)atomic_load((unint64_t *)&v9);
  v10 = TFontFeatures::GetFeatureType(this, v5);

  TCFNumber::TCFNumber<int>((unint64_t *)&v9, a3);
  v6 = (const __CFNumber *)atomic_load((unint64_t *)&v9);

  return Selector;
}

void TFontFeatures::HandleAlias(TFeatureSetting const&,BOOL,TCFMutableArray &,TCFMutableArray &)const::$_1::operator()(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  CTFeatureSetting *v4;
  __CFArray *v5;

  v3 = atomic_load(a2);
  v4 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v3);
  v5 = (__CFArray *)atomic_load(a1);
  CFArrayAppendValue(v5, v4);

}

void TFeatureSetting::TFeatureSetting(TFeatureSetting *this, CFTypeRef cf, const __CFNumber *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  const __CFString *v8;
  const __CFString *v9;
  CFDictionaryRef v10;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v6 = CFGetTypeID(cf);
  TypeID = CFNumberGetTypeID();
  if (!a3)
  {
    if (v6 == TypeID)
      return;
    a3 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
  }
  v8 = CFSTR("CTFeatureOpenTypeTag");
  if (v6 == TypeID)
    v8 = CFSTR("CTFeatureTypeIdentifier");
  v9 = CFSTR("CTFeatureOpenTypeValue");
  if (v6 == TypeID)
    v9 = CFSTR("CTFeatureSelectorIdentifier");
  keys[0] = (void *)v8;
  keys[1] = (void *)v9;
  values[0] = (void *)cf;
  values[1] = a3;
  v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this, v10);

}

void TFontFeatureSettingList::IndexesOfAATSetting(TFontFeatureSettingList *this@<X0>, unsigned __int16 a2@<W1>, int a3@<W2>, char **a4@<X8>)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  unsigned __int16 v24;

  v24 = a2;
  a4[2] = 0;
  v6 = a4 + 2;
  *a4 = 0;
  a4[1] = 0;
  v7 = std::__tree<std::__value_type<unsigned short,AATFeaturePair>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,AATFeaturePair>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,AATFeaturePair>>>::__equal_range_multi<unsigned short>((uint64_t)this + 8, &v24);
  if (v7 != v8)
  {
    v9 = v7;
    v10 = v8;
    v11 = 0;
    do
    {
      if (*((unsigned __int16 *)v9 + 20) == a3)
      {
        if ((unint64_t)v11 >= *v6)
        {
          v13 = *a4;
          v14 = (v11 - *a4) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          v16 = *v6 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<long>>((uint64_t)v6, v17);
            v13 = *a4;
            v11 = a4[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[8 * v14];
          *(_QWORD *)v19 = v9[6];
          v12 = v19 + 8;
          while (v11 != v13)
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v19 - 1) = v20;
            v19 -= 8;
          }
          *a4 = v19;
          a4[1] = v12;
          a4[2] = &v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v11 = v9[6];
          v12 = v11 + 8;
        }
        a4[1] = v12;
        v11 = v12;
      }
      v21 = (uint64_t *)v9[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v9[2];
          v23 = *v22 == (_QWORD)v9;
          v9 = v22;
        }
        while (!v23);
      }
      v9 = v22;
    }
    while (v22 != v10);
  }
}

void ReplaceNameIDKeyWithLocalizedName(const __CFDictionary *a1, const void *a2, const void *a3, uint64_t a4, const __CFString *a5)
{
  const __CFNumber *Value;
  const void *v12;
  id v13;
  int valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    valuePtr = -1431655766;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v13 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyLocalizedFontNameInternal(0, 0, a4, valuePtr, 0, a5, (unint64_t *)&v13);
    if (atomic_load((unint64_t *)&v13))
    {
      v12 = (const void *)atomic_load((unint64_t *)&v13);
      CFDictionarySetValue(a1, a3, v12);
    }

    CFDictionaryRemoveValue(a1, a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

__CFData *LKTAddRange(__CFData *result, unsigned int a2, unsigned int a3, __int16 a4)
{
  __CFData *v7;
  uint64_t v8;

  if (result)
  {
    v7 = result;
    if (*((_DWORD *)CFDataGetMutableBytePtr(result) + 2) <= a2 || *((_DWORD *)CFDataGetMutableBytePtr(v7) + 2) <= a3)
    {
      return 0;
    }
    else
    {
      if (a2 <= a3)
      {
        v8 = a2;
        do
        {
          *(_WORD *)&CFDataGetMutableBytePtr(v7)[2 * v8 + 18] = a4;
          *(_BYTE *)(*(_QWORD *)CFDataGetMutableBytePtr(v7) + v8++) = 1;
        }
        while (a3 + 1 != v8);
      }
      if (*((unsigned __int16 *)CFDataGetMutableBytePtr(v7) + 7) > a2)
        *((_WORD *)CFDataGetMutableBytePtr(v7) + 7) = a2;
      if (*((unsigned __int16 *)CFDataGetMutableBytePtr(v7) + 8) < a3)
        *((_WORD *)CFDataGetMutableBytePtr(v7) + 8) = a3;
      return (__CFData *)1;
    }
  }
  return result;
}

void LKTCreateLookupTable(__CFData *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  void **v13;
  void **v14;
  unint64_t v15;
  unsigned int v16;
  __int16 v17;
  unsigned __int16 v18;
  int v19;
  int v20;
  __int128 v21;
  void **v22;
  UInt8 *v23;
  int v24;
  UInt8 *v25;
  unint64_t v26;
  void *v27;
  void **v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  UInt8 *v33;
  int v34;
  UInt8 *v35;
  UInt8 *v36;
  unint64_t v37;
  void *v38;
  void **v39;
  void **v40;
  unint64_t v41;
  unsigned int v42;
  __int16 v43;
  unsigned __int16 v44;
  int v45;
  int v46;
  __int128 v47;
  unsigned int v48;
  __int128 v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned int v52;
  UInt8 *v53;
  UInt8 *v54;
  uint64_t v55;
  unsigned int v56;
  UInt8 *v57;
  unint64_t v58;
  void *v59;
  __int128 v60;
  UInt8 *MutableBytePtr;
  id v62;
  void **v63[3];
  void **v64;
  void **v65[3];
  _OWORD v66[4];
  _OWORD *v67;
  char *v68[3];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
LABEL_56:
    *a2 = 0;
    return;
  }
  if (*((__int16 *)CFDataGetMutableBytePtr(a1) + 7) == -1 && !*((_WORD *)CFDataGetMutableBytePtr(a1) + 8))
  {
    if (CFDataGetMutableBytePtr(a1) && *(_QWORD *)CFDataGetMutableBytePtr(a1))
    {
      *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v72 = v60;
      v71 = v60;
      v70 = v60;
      v69 = v60;
      memset(v68, 0, sizeof(v68));
      v73 = &v69;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(v68, 3uLL);
      Append2_BE((uint64_t)v68, 8u);
      MutableBytePtr = CFDataGetMutableBytePtr(a1);
      Append2_BE((uint64_t)v68, *((unsigned __int16 *)MutableBytePtr + 7));
      Append2_BE((uint64_t)v68, 0);
      *a2 = (unint64_t)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v68[0], v68[1] - v68[0]);
      v65[0] = (void **)v68;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](v65);
      return;
    }
    goto LABEL_56;
  }
  if (CFDataGetMutableBytePtr(a1))
  {
    memset(v68, 170, sizeof(v68));
    FindTightRanges(v68, a1, 1);
    v4 = 6 * ((v68[1] - v68[0]) >> 2) + 18;
    if (v68[0])
      operator delete(v68[0]);
  }
  else
  {
    v4 = 0;
  }
  if (CFDataGetMutableBytePtr(a1))
  {
    memset(v68, 170, sizeof(v68));
    FindTightRanges(v68, a1, 0);
    v5 = 6 * ((v68[1] - v68[0]) >> 2) + 18;
    if (v68[1] != v68[0])
    {
      v6 = v68[0];
      do
      {
        v7 = *((unsigned __int16 *)v6 + 1);
        v8 = *(unsigned __int16 *)v6;
        v6 += 4;
        v5 += (2 * (v7 - v8) + 2);
      }
      while (v6 != v68[1]);
    }
    if (v68[0])
      operator delete(v68[0]);
    if (v5 < v4)
    {
      v9 = 4;
    }
    else
    {
      v5 = v4;
      v9 = 2;
    }
  }
  else
  {
    v5 = 0;
    if (v4)
      v9 = 4;
    else
      v9 = 2;
  }
  if (CFDataGetMutableBytePtr(a1))
  {
    v10 = *((unsigned __int16 *)CFDataGetMutableBytePtr(a1) + 8);
    v11 = ((2 * (v10 - *((unsigned __int16 *)CFDataGetMutableBytePtr(a1) + 7)) + 2) & 0x1FFFFFFFELL) + 6;
  }
  else
  {
    v11 = 0;
  }
  if (v11 >= v5)
    v12 = v9;
  else
    v12 = 8;
  *a2 = 0;
  if (v12 == 8)
  {
    if (CFDataGetMutableBytePtr(a1))
    {
      v29 = *((unsigned __int16 *)CFDataGetMutableBytePtr(a1) + 8);
      v30 = v29 - *((unsigned __int16 *)CFDataGetMutableBytePtr(a1) + 7);
      *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v72 = v31;
      v32 = v30 + 1;
      LOBYTE(v29) = v30 == -1;
      v71 = v31;
      v70 = v31;
      v69 = v31;
      memset(v68, 0, sizeof(v68));
      v73 = &v69;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(v68, (v30 + 4) & 0x7FFFFFFF);
      Append2_BE((uint64_t)v68, 8u);
      v33 = CFDataGetMutableBytePtr(a1);
      Append2_BE((uint64_t)v68, *((unsigned __int16 *)v33 + 7));
      Append2_BE((uint64_t)v68, (unsigned __int16)v32);
      if ((v29 & 1) == 0)
      {
        v34 = 0;
        do
        {
          v35 = CFDataGetMutableBytePtr(a1);
          v36 = CFDataGetMutableBytePtr(a1);
          Append2_BE((uint64_t)v68, *(unsigned __int16 *)&v35[2 * v34++ + 18 + 2 * *((unsigned __int16 *)v36 + 7)]);
        }
        while (v32 != v34);
      }
      v63[0] = (void **)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v68[0], v68[1] - v68[0]);
      v65[0] = (void **)v68;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](v65);
    }
    else
    {
      v63[0] = 0;
    }
    do
      v37 = __ldaxr((unint64_t *)v63);
    while (__stlxr(0, (unint64_t *)v63));
    do
      v38 = (void *)__ldaxr(a2);
    while (__stlxr(v37, a2));

    v28 = v63[0];
  }
  else if (v12 == 4)
  {
    if (CFDataGetMutableBytePtr(a1))
    {
      memset(v63, 170, sizeof(v63));
      FindTightRanges((char **)v63, a1, 0);
      v39 = v63[0];
      v40 = v63[1];
      v41 = (unint64_t)((char *)v63[1] - (char *)v63[0]) >> 2;
      v42 = (unsigned __int16)v41;
      v43 = __clz((unsigned __int16)v41);
      v44 = 31 - v43;
      LOBYTE(v43) = ~(_BYTE)v43;
      v45 = 6 << v43;
      v46 = 3 * ((-1 << v43) + v41);
      *(_QWORD *)&v47 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v72 = v47;
      v71 = v47;
      v48 = 6 * v41 + 18;
      v70 = v47;
      v69 = v47;
      memset(v68, 0, sizeof(v68));
      v73 = &v69;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(v68, v48 >> 1);
      *(_QWORD *)&v49 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v49 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v66[3] = v49;
      v66[2] = v49;
      v66[1] = v49;
      v66[0] = v49;
      memset(v65, 0, sizeof(v65));
      v67 = v66;
      Append2_BE((uint64_t)v68, 4u);
      Append2_BE((uint64_t)v68, 6u);
      Append2_BE((uint64_t)v68, v42);
      Append2_BE((uint64_t)v68, v45 & 0xFFFE);
      Append2_BE((uint64_t)v68, v44);
      Append2_BE((uint64_t)v68, 2 * (v46 & 0x7FFF));
      if (v40 != v39)
      {
        v50 = (unsigned __int16 *)v39;
        do
        {
          v51 = v50[1];
          v52 = v51 - *v50 + 1;
          Append2_BE((uint64_t)v68, v51);
          Append2_BE((uint64_t)v68, *v50);
          Append2_BE((uint64_t)v68, (unsigned __int16)v48);
          v53 = CFDataGetMutableBytePtr(a1);
          if (v52)
          {
            v54 = &v53[2 * *v50 + 18];
            v55 = 2 * v52;
            do
            {
              v56 = *(unsigned __int16 *)v54;
              v54 += 2;
              Append2_BE((uint64_t)v65, v56);
              v55 -= 2;
            }
            while (v55);
          }
          LOWORD(v48) = v48 + 2 * v52;
          v50 += 2;
        }
        while (v50 != (unsigned __int16 *)v40);
      }
      Append2_BE((uint64_t)v68, 0xFFFFu);
      Append2_BE((uint64_t)v68, 0xFFFFu);
      v57 = CFDataGetMutableBytePtr(a1);
      Append2_BE((uint64_t)v68, *((unsigned __int16 *)v57 + 6));
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v68, (uint64_t)v68[1], (char *)v65[0], (char *)v65[1], ((char *)v65[1] - (char *)v65[0]) >> 1);
      v62 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v68[0], v68[1] - v68[0]);
      v64 = (void **)v65;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v64);
      v65[0] = (void **)v68;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](v65);
      if (v39)
      {
        v63[1] = v39;
        operator delete(v39);
      }
    }
    else
    {
      v62 = 0;
    }
    do
      v58 = __ldaxr((unint64_t *)&v62);
    while (__stlxr(0, (unint64_t *)&v62));
    do
      v59 = (void *)__ldaxr(a2);
    while (__stlxr(v58, a2));

    v28 = (void **)v62;
  }
  else
  {
    if (CFDataGetMutableBytePtr(a1))
    {
      memset(v65, 170, sizeof(v65));
      FindTightRanges((char **)v65, a1, 1);
      v13 = v65[0];
      v14 = v65[1];
      v15 = (unint64_t)((char *)v65[1] - (char *)v65[0]) >> 2;
      v16 = (unsigned __int16)v15;
      v17 = __clz((unsigned __int16)v15);
      v18 = 31 - v17;
      LOBYTE(v17) = ~(_BYTE)v17;
      v19 = 6 << v17;
      v20 = 3 * ((-1 << v17) + v15);
      *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v72 = v21;
      v71 = v21;
      v70 = v21;
      v69 = v21;
      memset(v68, 0, sizeof(v68));
      v73 = &v69;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(v68, (6 * v15 + 18) >> 1);
      Append2_BE((uint64_t)v68, 2u);
      Append2_BE((uint64_t)v68, 6u);
      Append2_BE((uint64_t)v68, v16);
      Append2_BE((uint64_t)v68, v19 & 0xFFFE);
      Append2_BE((uint64_t)v68, v18);
      Append2_BE((uint64_t)v68, 2 * (v20 & 0x7FFF));
      if (v14 != v13)
      {
        v22 = v13;
        do
        {
          Append2_BE((uint64_t)v68, *((unsigned __int16 *)v22 + 1));
          Append2_BE((uint64_t)v68, *(unsigned __int16 *)v22);
          v23 = CFDataGetMutableBytePtr(a1);
          v24 = *(unsigned __int16 *)v22;
          v22 = (void **)((char *)v22 + 4);
          Append2_BE((uint64_t)v68, *(unsigned __int16 *)&v23[2 * v24 + 18]);
        }
        while (v22 != v14);
      }
      Append2_BE((uint64_t)v68, 0xFFFFu);
      Append2_BE((uint64_t)v68, 0xFFFFu);
      v25 = CFDataGetMutableBytePtr(a1);
      Append2_BE((uint64_t)v68, *((unsigned __int16 *)v25 + 6));
      v64 = (void **)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v68[0], v68[1] - v68[0]);
      v63[0] = (void **)v68;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](v63);
      if (v13)
        operator delete(v13);
    }
    else
    {
      v64 = 0;
    }
    do
      v26 = __ldaxr((unint64_t *)&v64);
    while (__stlxr(0, (unint64_t *)&v64));
    do
      v27 = (void *)__ldaxr(a2);
    while (__stlxr(v26, a2));

    v28 = v64;
  }

}

uint64_t LKTGetValue(__CFData *a1, unsigned int a2)
{
  UInt8 *MutableBytePtr;
  unsigned int v5;
  int v6;

  if (!a1)
  {
    v5 = 0;
    v6 = 0;
    return v6 | v5;
  }
  if (*((_DWORD *)CFDataGetMutableBytePtr(a1) + 2) <= a2)
  {
    v5 = 0;
    goto LABEL_7;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  v5 = *(unsigned __int8 *)(*(_QWORD *)MutableBytePtr + a2);
  if (!*(_BYTE *)(*(_QWORD *)MutableBytePtr + a2))
  {
LABEL_7:
    v6 = 0;
    return v6 | v5;
  }
  v5 = *(unsigned __int16 *)&CFDataGetMutableBytePtr(a1)[2 * a2 + 18];
  v6 = 0x10000;
  return v6 | v5;
}

__CFData *NewLKTHandle(int64_t a1, __int16 a2)
{
  CFIndex v4;
  __CFData *Mutable;
  __CFData *v6;
  void *v7;
  UInt8 *MutableBytePtr;
  _WORD *v9;
  unint64_t v10;

  v4 = 2 * a1 + 18;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
  v6 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v4);
    v7 = malloc_type_calloc(a1, 1uLL, 0xEDF80FDDuLL);
    if (v7)
    {
      *(_QWORD *)CFDataGetMutableBytePtr(v6) = v7;
      *((_DWORD *)CFDataGetMutableBytePtr(v6) + 2) = a1;
      *((_WORD *)CFDataGetMutableBytePtr(v6) + 6) = a2;
      *((_WORD *)CFDataGetMutableBytePtr(v6) + 7) = -1;
      *((_WORD *)CFDataGetMutableBytePtr(v6) + 8) = 0;
      MutableBytePtr = CFDataGetMutableBytePtr(v6);
      if (a1 >= 1)
      {
        v9 = MutableBytePtr + 18;
        v10 = a1 + 1;
        do
        {
          *v9++ = a2;
          --v10;
        }
        while (v10 > 1);
      }
    }
    else
    {
      CFRelease(v6);
      return 0;
    }
  }
  return v6;
}

void DisposeLKTHandle(__CFData *a1)
{
  void **MutableBytePtr;

  if (a1)
  {
    MutableBytePtr = (void **)CFDataGetMutableBytePtr(a1);
    free(*MutableBytePtr);
    CFRelease(a1);
  }
}

uint64_t Append2_BE(uint64_t result, unsigned int a2)
{
  _QWORD *v2;
  __int16 v3;
  _WORD *v4;
  unint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _WORD *v16;
  char *v17;
  __int16 v18;
  uint64_t v19;
  _QWORD v20[5];

  v2 = (_QWORD *)result;
  v3 = __rev16(a2);
  v4 = *(_WORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = result + 24;
    v8 = (_WORD *)*v2;
    v9 = (uint64_t)v4 - *v2;
    if (v9 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20[4] = v2 + 3;
    if (v13)
    {
      v14 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v7, v13);
      v8 = (_WORD *)*v2;
      v4 = (_WORD *)v2[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    *(_WORD *)v15 = v3;
    if (v4 == v8)
    {
      v17 = &v14[2 * v10];
    }
    else
    {
      v16 = v4;
      v17 = &v14[2 * v10];
      do
      {
        v18 = *--v16;
        *((_WORD *)v17 - 1) = v18;
        v17 -= 2;
      }
      while (v16 != v8);
    }
    v6 = v15 + 2;
    *v2 = v17;
    v2[1] = v15 + 2;
    v19 = v2[2];
    v2[2] = &v14[2 * v13];
    v20[2] = v4;
    v20[3] = v19;
    v20[0] = v8;
    v20[1] = v8;
    result = std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    *v4 = v3;
    v6 = v4 + 1;
  }
  v2[1] = v6;
  return result;
}

void FindTightRanges(char **a1, CFMutableDataRef theData, uint64_t a3)
{
  char **v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;

  v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *((unsigned __int16 *)CFDataGetMutableBytePtr(theData) + 7);
  v7 = *((unsigned __int16 *)CFDataGetMutableBytePtr(theData) + 8);
  if (v6 <= v7)
  {
    v8 = 0;
    v32 = v7 + 1;
    v9 = v7 + 1;
    v35 = v5;
    v33 = -(uint64_t)v7;
    v34 = v7 + 1;
    do
    {
      MutableBytePtr = CFDataGetMutableBytePtr(theData);
      v11 = v6;
      LODWORD(v12) = v6 + 1;
      if ((a3 & 1) != 0)
      {
        if (v6 < v7)
        {
          v13 = v5;
          v14 = *(unsigned __int16 *)&MutableBytePtr[2 * v6 + 18];
          v15 = v11;
          v16 = v11;
          while (*(_BYTE *)(*(_QWORD *)CFDataGetMutableBytePtr(theData) + v16 + 1)
               && *(unsigned __int16 *)&CFDataGetMutableBytePtr(theData)[2 * v16 + 20] == v14)
          {
            if (v7 == ++v16)
            {
              LODWORD(v12) = v32;
              goto LABEL_17;
            }
          }
          LODWORD(v12) = v16 + 1;
LABEL_17:
          v5 = v13;
          LOWORD(v11) = v15;
        }
      }
      else if (v6 < v7)
      {
        v12 = v6 + 1;
        while (*(_BYTE *)(*(_QWORD *)CFDataGetMutableBytePtr(theData) + v12))
        {
          ++v12;
          if (v33 + v12 == 1)
          {
            LODWORD(v12) = v32;
            break;
          }
        }
        LOWORD(v11) = v6;
      }
      v17 = v12 - 1;
      v18 = (unint64_t)v5[2];
      if ((unint64_t)v8 >= v18)
      {
        v19 = a3;
        v20 = *v5;
        v21 = (v8 - *v5) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          abort();
        v23 = v18 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = v7;
        v26 = v11;
        v27 = (char *)operator new(4 * v24);
        v28 = &v27[4 * v21];
        *(_WORD *)v28 = v26;
        *((_WORD *)v28 + 1) = v17;
        if (v8 == v20)
        {
          v20 = v8;
          v29 = &v27[4 * v21];
          a3 = v19;
          v7 = v25;
        }
        else
        {
          v29 = &v27[4 * v21];
          a3 = v19;
          v7 = v25;
          do
          {
            v30 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          while (v8 != v20);
        }
        v31 = &v27[4 * v24];
        v8 = v28 + 4;
        v9 = v34;
        v5 = v35;
        *v35 = v29;
        v35[1] = v28 + 4;
        v35[2] = v31;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_WORD *)v8 = v11;
        *((_WORD *)v8 + 1) = v17;
        v8 += 4;
      }
      v5[1] = v8;
      if (v12 <= v7)
      {
        v12 = v12;
        while (!*(_BYTE *)(*(_QWORD *)CFDataGetMutableBytePtr(theData) + v12))
        {
          if (v9 == ++v12)
            return;
        }
      }
      v6 = v12;
    }
    while (v12 <= v7);
  }
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  _QWORD v33[5];

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (a5 > (uint64_t)(v9 - v10) >> 1)
  {
    v11 = *(void **)a1;
    v12 = a5 + ((uint64_t)(v10 - *(_QWORD *)a1) >> 1);
    if (v12 < 0)
      abort();
    v13 = (__dst - (uint64_t)v11) >> 1;
    v14 = a1 + 24;
    v15 = v9 - (_QWORD)v11;
    if (v15 <= v12)
      v16 = v12;
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v33[4] = a1 + 24;
    if (v17)
      v18 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v14, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v13];
    v33[0] = v18;
    v33[1] = v28;
    v33[3] = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v33[2] = v30;
    v5 = std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)v33, v5);
    std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = v10 - __dst;
  v20 = (uint64_t)(v10 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(a1 + 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v10)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v10);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(a1 + 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v10 + v22);
  *(_QWORD *)(a1 + 8) = v10 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

const void *TRunEncoder::EncodeWithLineOptions(uint64_t *a1, unint64_t *a2, unsigned int a3)
{
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(void *, void *, uint64_t);
  uint64_t v14;
  const void *RunCFArray;
  _QWORD v17[2];
  id v18[4];
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  unint64_t v25;
  int64x2_t v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD v36[6];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v36[5] = unk_184930AFC;
  v39 = unk_184930B10;
  memset(v29, 170, sizeof(v29));
  v27 = 0u;
  v26 = 0u;
  v28 = 0;
  v30 = v29;
  BYTE8(v39) = 0;
  v34 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v36, 0, 20);
  v37 = 0;
  v38 = 0;
  LOBYTE(v39) = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v35 = 0xFFEFFFFFFFFFFFFFLL;
  v6 = (void *)atomic_load(a2);
  v18[0] = v6;
  TLine::AppendRun(&v26, (unint64_t *)v18);

  if ((a3 & 4) != 0)
  {
    v7 = atomic_load(a2);
    TAttributes::SetRareAttributes((TAttributes *)(*(_QWORD *)(v7 + 48) + 40), 4);
  }
  v8 = atomic_load(a2);
  v9 = *(_QWORD *)(v8 + 40);
  v11 = *(void **)(v9 + 8);
  v10 = *(void **)(v9 + 16);
  *(_QWORD *)&v31 = v11;
  *((_QWORD *)&v31 + 1) = v10;
  if ((a3 & 1) != 0 && TTypesetter::CanLayout((TTypesetter *)((a3 >> 6) & 1), (uint64_t)v10))
  {
    v25 = 0xAAAAAAAAAAAAAAAALL;
    v13 = (uint64_t (*)(void *, void *, uint64_t))a1[1];
    v12 = a1[2];
    v24[0] = &off_1E15DE640;
    v24[1] = v11;
    LOWORD(v25) = 0;
    v24[2] = v13(v11, v10, v12);
    v14 = a1[2];
    v21 = *a1;
    v22 = 0;
    v23 = v14;
    v18[0] = &off_1E15DE520;
    v18[1] = v11;
    v19 = 0;
    v20 = 0;
    v18[2] = v10;
    v18[3] = 0;
    v17[0] = v24;
    v17[1] = v18;
    TBidiEngine::ReorderGlyphs((uint64_t)v17, (TLine *)&v26);
    v18[0] = &off_1E15DDC70;

  }
  if ((uint64_t)(*((_QWORD *)&v27 + 1) - v27) < 9)
    RunCFArray = *(const void **)v27;
  else
    RunCFArray = (const void *)TLine::GetRunCFArray((const void ***)&v26);
  CFRetain(RunCFArray);
  TLine::~TLine((TLine *)&v26);
  return RunCFArray;
}

uint64_t TTypesetter::DoAttachments(uint64_t a1, void ***a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  NSMutableIndexSet *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  TRun *v17;
  uint64_t v18;
  void ***v19;
  int v20;
  uint64_t v21;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  void ***v26[2];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v9 = (NSMutableIndexSet *)objc_opt_new();
  v10 = *a2;
  v11 = (_BYTE *)(*a2)[3] - (_BYTE *)(*a2)[2];
  if (v11 >= 8)
  {
    v23 = a3;
    v24 = a4;
    v13 = 0;
    v14 = 0;
    v15 = v11 >> 3;
    if (v11 >> 3 <= 1)
      v16 = 1;
    else
      v16 = v11 >> 3;
    while (1)
    {
      v17 = *(TRun **)(*((_QWORD *)v10[2] + v13) + 48);
      if (FixRunIfBroken(v17, v8, v9))
        break;
      v18 = *((_QWORD *)v17 + 20);
      if (v18)
        LODWORD(v18) = (*(unsigned __int16 *)(v18 + 66) >> 3) & 1;
      v14 |= v18;
      if (v16 == ++v13)
      {
        if ((v14 & 1) != 0)
        {
          v19 = *(void ****)(a1 + 8);
          v26[0] = a2;
          v26[1] = v19;
          v25 = -86;
          v20 = TCombiningEngine::ResolveCombiningMarks(v26, 0, &v25, 0);
          if (!v25)
            *v23 |= 4u;
          if (v20)
            *v24 = 1;
        }
        goto LABEL_2;
      }
    }
    v21 = v13 + 1;
    if (v13 + 1 < v15)
    {
      do
        FixRunIfBroken(*(TRun **)(*((_QWORD *)v10[2] + v21++) + 48), v8, v9);
      while (v15 != v21);
    }
    v12 = 0;
  }
  else
  {
LABEL_2:
    v12 = 1;
  }

  return v12;
}

void TTypesetter::RelayoutRunUsingCallback(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const __CFString *v8;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  const __CFArray *v14;
  void *v15;
  const TCharStream *v16;
  char v17;
  char v18;
  id *v19;
  uint64_t v20;
  char v21;
  id v22;
  void **v23;
  id __dst[82];
  _BYTE v25[128];
  _OWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = (const __CFString *)atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 32));
  v22 = (id)(*(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(a1 + 16))(a2, v8, *(_QWORD *)(a1 + 24));
  if (atomic_load((unint64_t *)&v22))
  {
    v26[0] = xmmword_184930BB8;
    memset(&v26[1], 170, 32);
    v27 = unk_184930BE8;
    *(_OWORD *)&v25[96] = xmmword_184930B98;
    *(_OWORD *)&v25[112] = unk_184930BA8;
    memset(v25, 170, 96);
    v10 = operator new(0x48uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E15E15F0;
    TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)(v10 + 3), v8, 0);
    *(_QWORD *)v25 = v11;
    *(_QWORD *)&v25[8] = v10;
    memset(&v25[16], 0, 24);
    *(_QWORD *)&v25[64] = &v25[40];
    BYTE8(v27) = 0;
    memset(&v25[72], 0, 56);
    *(_OWORD *)((char *)v26 + 8) = 0u;
    *(_QWORD *)((char *)&v26[1] + 5) = 0;
    v26[2] = 0uLL;
    LOBYTE(v27) = 0;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    *(_QWORD *)&v26[0] = 0xFFEFFFFFFFFFFFFFLL;
    v12 = (const void *)atomic_load((unint64_t *)&v22);
    v13 = CFGetTypeID(v12);
    if (v13 == CFArrayGetTypeID())
    {
      v14 = (const __CFArray *)atomic_load((unint64_t *)&v22);
      TLine::SetRunArray((int64x2_t *)v25, v14);
    }
    else
    {
      do
        v15 = (void *)__ldaxr((unint64_t *)&v22);
      while (__stlxr(0, (unint64_t *)&v22));
      __dst[0] = v15;
      TLine::AppendRun((int64x2_t *)v25, (unint64_t *)__dst);

      *(_OWORD *)&v25[72] = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 8);
    }
    memcpy(__dst, &unk_184930C10, sizeof(__dst));
    TRunGlue::TRunGlue((TRunGlue *)__dst, (TLine *)v25);
    LOBYTE(v23) = 0;
    v21 = 0;
    if ((TTypesetter::DoAttachments(a1, (void ***)__dst, &v23, &v21) & 1) != 0)
    {
      v17 = TShapingEngine::ShapeGlyphs((TShapingEngine *)__dst, *(TRunGlue **)(a1 + 8), v16);
      v18 = v21 | v17;
    }
    else
    {
      v18 = v21;
    }
    TTypesetter::FinishLayout(a1, (TCompositionEngine **)__dst, (const TCharStream *)(char)v23, v18);
    DoGlyphFixupsCheck(v25);
    if (*(_QWORD *)&v25[24] != *(_QWORD *)&v25[16])
      TLine::ReplaceRun(a3, a4, (uint64_t)v25);
    v19 = (id *)__dst[73];
    if (__dst[73] == &__dst[70])
    {
      v20 = 4;
      v19 = &__dst[70];
    }
    else
    {
      if (!__dst[73])
      {
LABEL_16:
        v23 = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v23);
        v23 = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v23);
        v23 = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v23);
        TLine::~TLine((TLine *)v25);
        goto LABEL_17;
      }
      v20 = 5;
    }
    (*((void (**)(void))*v19 + v20))();
    goto LABEL_16;
  }
LABEL_17:

}

void TTraitsValues::TTraitsValues(TTraitsValues *this, CFDictionaryRef theDict)
{
  double *p_var1;
  const __CFNumber *Value;
  const __CFNumber *v6;
  const __CFNumber *v7;

  this->var0 = 0;
  this->var1 = 0.0;
  p_var1 = &this->var1;
  this->var2 = 0.0;
  this->var3 = 0.0;
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontWeightTrait"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberDoubleType, p_var1);
    v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontProportionTrait"));
    if (v6)
      CFNumberGetValue(v6, kCFNumberDoubleType, &this->var2);
    v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontSlantTrait"));
    if (v7)
      CFNumberGetValue(v7, kCFNumberDoubleType, &this->var3);
  }
}

unsigned int ClassOfWeight(double a1)
{
  unsigned int v2;
  float v3;
  float v4;
  double v5;
  float v6;

  v2 = IndexesBracketing<float const*,double>(kWeightScale, kWidthScale, a1, 0.001);
  v3 = kWeightScale[(unsigned __int16)v2];
  v4 = kWeightScale[HIWORD(v2)];
  v5 = 0.0;
  if (v3 != v4)
  {
    v6 = (a1 - v3) / (v4 - v3);
    v5 = v6;
  }
  return llround(std::__lerp[abi:nn180100]<double>((double)(100 * (unsigned __int16)v2), (double)(int)(100 * HIWORD(v2)), v5));
}

double WidthPercentOfClass(unsigned int a1)
{
  int v1;
  unsigned int v2;
  float v3;

  if (a1 >= 9)
    v1 = 9;
  else
    v1 = a1;
  v2 = v1 + 1;
  v3 = 0.0;
  if ((double)a1 != (double)v2)
    v3 = ((double)a1 - (double)a1) / ((double)v2 - (double)a1);
  return std::__lerp[abi:nn180100]<float>(kWidthPercentScale[a1], kWidthPercentScale[(unsigned __int16)v2], v3);
}

uint64_t CompareTraits(const __CFDictionary *a1, const TBaseFont *a2)
{
  void *v3;
  CFIndex Count;
  unint64_t v5;
  __int128 v6;
  char *v7;
  __int128 v8;
  char *v9;
  __CFString **v10;
  void **v11;
  __CFString *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFNumber *Value;
  uint64_t v16;
  double v18;
  double valuePtr;
  void **values;
  void *v21;
  uint64_t v22;
  _OWORD v23[15];
  _OWORD *v24;
  id v25;
  void *v26;
  uint64_t v27;
  _OWORD v28[15];
  _OWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 152))(&v25, a2);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v25);
  while (__stlxr(0, (unint64_t *)&v25));

  if (!a1 || (Count = CFDictionaryGetCount(a1)) == 0)
  {
LABEL_37:
    v16 = 1;
    goto LABEL_38;
  }
  v5 = Count;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[14] = v6;
  v28[13] = v6;
  v28[12] = v6;
  v28[11] = v6;
  v28[10] = v6;
  v28[9] = v6;
  v28[8] = v6;
  v28[7] = v6;
  v28[6] = v6;
  v28[5] = v6;
  v28[4] = v6;
  v28[3] = v6;
  v28[2] = v6;
  v28[1] = v6;
  v28[0] = v6;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v29 = v28;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v25, Count);
  v7 = (char *)v26;
  bzero(v26, 8 * v5);
  v26 = &v7[8 * v5];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[14] = v8;
  v23[13] = v8;
  v23[12] = v8;
  v23[11] = v8;
  v23[10] = v8;
  v23[9] = v8;
  v23[8] = v8;
  v23[7] = v8;
  v23[6] = v8;
  v23[5] = v8;
  v23[4] = v8;
  v23[3] = v8;
  v23[2] = v8;
  v23[1] = v8;
  v23[0] = v8;
  v21 = 0;
  v22 = 0;
  values = 0;
  v24 = v23;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v5);
  v9 = (char *)v21;
  bzero(v21, 8 * v5);
  v21 = &v9[8 * v5];
  CFDictionaryGetKeysAndValues(a1, (const void **)v25, (const void **)values);
  v10 = (__CFString **)v25;
  v11 = values;
  while (1)
  {
    v12 = *v10;
    v13 = v3;
    if (!v13)
      break;
    v14 = v13;
    Value = (const __CFNumber *)CFDictionaryGetValue(v13, v12);

    if (!Value)
      goto LABEL_15;
    if (v12 == CFSTR("NSCTFontSymbolicTrait")
      || CFSTR("NSCTFontSymbolicTrait") && v12 && CFEqual(v12, CFSTR("NSCTFontSymbolicTrait")))
    {
      LODWORD(valuePtr) = -1431655766;
      LODWORD(v18) = -1431655766;
      CFNumberGetValue((CFNumberRef)*v11, kCFNumberIntType, &valuePtr);
      CFNumberGetValue(Value, kCFNumberIntType, &v18);
      if ((LODWORD(valuePtr) & ~LODWORD(v18)) != 0)
        goto LABEL_36;
    }
    else if (v12 == CFSTR("NSCTFontWeightTrait")
           || CFSTR("NSCTFontWeightTrait") && v12 && CFEqual(v12, CFSTR("NSCTFontWeightTrait"))
           || v12 == CFSTR("NSCTFontProportionTrait")
           || CFSTR("NSCTFontProportionTrait") && v12 && CFEqual(v12, CFSTR("NSCTFontProportionTrait"))
           || v12 == CFSTR("NSCTFontSlantTrait")
           || CFSTR("NSCTFontSlantTrait") && v12 && CFEqual(v12, CFSTR("NSCTFontSlantTrait")))
    {
      v18 = NAN;
      valuePtr = NAN;
      CFNumberGetValue((CFNumberRef)*v11, kCFNumberDoubleType, &valuePtr);
      CFNumberGetValue(Value, kCFNumberDoubleType, &v18);
      if (vabdd_f64(valuePtr, v18) >= 0.001)
        goto LABEL_36;
    }
    else if (!CFEqual(*v11, Value))
    {
      goto LABEL_36;
    }
LABEL_33:
    ++v10;
    ++v11;
    if (!--v5)
    {
      valuePtr = COERCE_DOUBLE(&values);
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
      values = &v25;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
      goto LABEL_37;
    }
  }

LABEL_15:
  if (v12 != CFSTR("NSCTFontSymbolicTrait")
    && (!CFSTR("NSCTFontSymbolicTrait") || !v12 || !CFEqual(v12, CFSTR("NSCTFontSymbolicTrait"))))
  {
    goto LABEL_33;
  }
LABEL_36:
  valuePtr = COERCE_DOUBLE(&values);
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
  values = &v25;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
  v16 = 0;
LABEL_38:

  return v16;
}

BOOL CompareCharSet(const __CFCharacterSet *a1, const TBaseFont *this)
{
  unint64_t *CharacterSetInternal;
  const __CFCharacterSet *v5;

  CharacterSetInternal = (unint64_t *)TBaseFont::GetCharacterSetInternal(this);
  if (!atomic_load(CharacterSetInternal))
    return 0;
  v5 = (const __CFCharacterSet *)atomic_load(CharacterSetInternal);
  return CFCharacterSetIsSupersetOfSet(v5, a1) != 0;
}

uint64_t CompareDesignLanguages(const __CFArray *a1, const TBaseFont *a2)
{
  unint64_t v3;
  uint64_t v4;
  id v6;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateCanonicalLanguages(a1, (unint64_t *)&v6);
  v3 = atomic_load((unint64_t *)&v6);
  v4 = (*(uint64_t (**)(const TBaseFont *, unint64_t))(*(_QWORD *)a2 + 352))(a2, v3);

  return v4;
}

uint64_t CompareSupportedLanguages(const __CFArray *a1, const TBaseFont *a2)
{
  unint64_t v3;
  uint64_t v4;
  id v6;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateCanonicalLanguages(a1, (unint64_t *)&v6);
  v3 = atomic_load((unint64_t *)&v6);
  v4 = (*(uint64_t (**)(const TBaseFont *, unint64_t))(*(_QWORD *)a2 + 344))(a2, v3);

  return v4;
}

BOOL CompareOtherNamesExclusive(const __CFString *a1, const __CFString *a2, const __CFString *a3, const TBaseFont *a4, char a5)
{
  void *v10;
  const __CFString *v11;
  __CFString *v12;
  _BOOL8 v13;
  void *v14;
  const __CFString *v15;
  __CFString *v16;
  void *v17;
  const __CFString *v18;
  __CFString *v19;
  void *v20;
  id v21;
  const __CFString *v22;
  __CFString *v23;
  void *v24;
  id v25;
  const __CFString *v26;
  __CFString *v27;
  void *v28;
  id v29;
  const __CFString *v30;
  __CFString *v31;
  id v33;

  if (a2)
  {
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v33, a4, CFSTR("CTFontFamilyName"));
    v10 = (void *)atomic_load((unint64_t *)&v33);
    v11 = v10;
    v12 = (__CFString *)v11;
    if (v11 == a2)
    {
      v13 = 1;
    }
    else if (v11)
    {
      v13 = CFEqual(a2, v11) != 0;
    }
    else
    {
      v13 = 0;
    }

    if (!a1)
      goto LABEL_17;
  }
  else
  {
    v13 = 0;
    if (!a1)
      goto LABEL_17;
  }
  if (!v13)
  {
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v33, a4, CFSTR("CTFontFullName"));
    v14 = (void *)atomic_load((unint64_t *)&v33);
    v15 = v14;
    v16 = (__CFString *)v15;
    if (v15 == a1)
    {
      v13 = 1;
    }
    else if (v15)
    {
      v13 = CFEqual(a1, v15) != 0;
    }
    else
    {
      v13 = 0;
    }

  }
LABEL_17:
  if (a3 && !v13)
  {
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v33, a4, CFSTR("CTFontSubFamilyName"));
    v17 = (void *)atomic_load((unint64_t *)&v33);
    v18 = v17;
    v19 = (__CFString *)v18;
    if (v18 == a3)
    {
      v13 = 1;
    }
    else if (v18)
    {
      v13 = CFEqual(a3, v18) != 0;
    }
    else
    {
      v13 = 0;
    }

  }
  if (!v13 && (a5 & 1) == 0)
  {
    if (a2)
    {
      v33 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v33, a4, CFSTR("CTFontFamilyName"), 0, 0);
      v20 = (void *)atomic_load((unint64_t *)&v33);
      v21 = v20;
      v22 = (const __CFString *)v21;
      v23 = (__CFString *)v22;
      if (v22 == a2)
      {
        v13 = 1;
      }
      else if (v22)
      {
        v13 = CFStringCompare(a2, v22, 0x20uLL) == kCFCompareEqualTo;
      }
      else
      {
        v13 = 0;
      }

      if (a1)
      {
LABEL_36:
        if (!v13)
        {
          v33 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v33, a4, CFSTR("CTFontFullName"), 0, 0);
          v24 = (void *)atomic_load((unint64_t *)&v33);
          v25 = v24;
          v26 = (const __CFString *)v25;
          v27 = (__CFString *)v26;
          if (v26 == a1)
          {
            v13 = 1;
          }
          else if (v26)
          {
            v13 = CFStringCompare(a1, v26, 0x20uLL) == kCFCompareEqualTo;
          }
          else
          {
            v13 = 0;
          }

        }
      }
    }
    else
    {
      v13 = 0;
      if (a1)
        goto LABEL_36;
    }
    if (a3 && !v13)
    {
      v33 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v33, a4, CFSTR("CTFontSubFamilyName"), 0, 0);
      v28 = (void *)atomic_load((unint64_t *)&v33);
      v29 = v28;
      v30 = (const __CFString *)v29;
      v31 = (__CFString *)v30;
      if (v30 == a3)
      {
        v13 = 1;
      }
      else if (v30)
      {
        v13 = CFStringCompare(a3, v30, 0x20uLL) == kCFCompareEqualTo;
      }
      else
      {
        v13 = 0;
      }

    }
  }
  return v13;
}

BOOL ComparePostScriptName(const __CFString *a1, const TBaseFont *a2)
{
  void *v3;
  id v4;
  id v5;
  const __CFString *v6;
  __CFString *v7;
  _BOOL8 v8;

  v3 = (void *)atomic_load((unint64_t *)a2 + 12);
  v4 = v3;
  v5 = v4;
  v6 = (const __CFString *)v5;
  v7 = (__CFString *)v6;
  if (v6 == a1)
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    if (a1 && v6)
      v8 = CFStringCompare(a1, v6, 1uLL) == kCFCompareEqualTo;
  }

  return v8;
}

BOOL CompareOtherNamesInclusive(const __CFString *a1, const __CFString *a2, const __CFString *a3, const TBaseFont *a4, char a5)
{
  void *v10;
  const __CFString *v11;
  __CFString *v12;
  _BOOL8 v13;
  void *v14;
  const __CFString *v15;
  __CFString *v16;
  void *v17;
  const __CFString *v18;
  __CFString *v19;
  id v21;

  if (a2)
  {
    v21 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v21, a4, CFSTR("CTFontFamilyName"));
    v10 = (void *)atomic_load((unint64_t *)&v21);
    v11 = v10;
    v12 = (__CFString *)v11;
    if (v11 == a2)
    {
      v13 = 1;
    }
    else if (v11)
    {
      v13 = CFEqual(a2, v11) != 0;
    }
    else
    {
      v13 = 0;
    }

    if (!a1)
      goto LABEL_17;
  }
  else
  {
    v13 = 1;
    if (!a1)
      goto LABEL_17;
  }
  if (v13)
  {
    v21 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v21, a4, CFSTR("CTFontFullName"));
    v14 = (void *)atomic_load((unint64_t *)&v21);
    v15 = v14;
    v16 = (__CFString *)v15;
    if (v15 == a1)
    {
      v13 = 1;
    }
    else if (v15)
    {
      v13 = CFEqual(a1, v15) != 0;
    }
    else
    {
      v13 = 0;
    }

  }
LABEL_17:
  if (a3 && v13)
  {
    v21 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a4 + 72))(&v21, a4, CFSTR("CTFontSubFamilyName"));
    v17 = (void *)atomic_load((unint64_t *)&v21);
    v18 = v17;
    v19 = (__CFString *)v18;
    if (v18 == a3)
    {
      v13 = 1;
    }
    else if (v18)
    {
      v13 = CFEqual(a3, v18) != 0;
    }
    else
    {
      v13 = 0;
    }

  }
  if (!v13 && (a5 & 1) == 0)
    return CompareOtherNamesLocalizedInclusive(a1, a2, a3, a4);
  return v13;
}

BOOL CompareOtherNamesLocalizedInclusive(const __CFString *a1, const __CFString *a2, const __CFString *a3, const TBaseFont *a4)
{
  void *v8;
  id v9;
  const __CFString *v10;
  __CFString *v11;
  _BOOL8 v12;
  void *v13;
  id v14;
  const __CFString *v15;
  __CFString *v16;
  void *v17;
  id v18;
  const __CFString *v19;
  __CFString *v20;
  id v22;

  if (a2)
  {
    v22 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v22, a4, CFSTR("CTFontFamilyName"), 0, 0);
    v8 = (void *)atomic_load((unint64_t *)&v22);
    v9 = v8;
    v10 = (const __CFString *)v9;
    v11 = (__CFString *)v10;
    if (v10 == a2)
    {
      v12 = 1;
    }
    else if (v10)
    {
      v12 = CFStringCompare(a2, v10, 0x20uLL) == kCFCompareEqualTo;
    }
    else
    {
      v12 = 0;
    }

    if (!a1)
      goto LABEL_17;
  }
  else
  {
    v12 = 1;
    if (!a1)
      goto LABEL_17;
  }
  if (v12)
  {
    v22 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v22, a4, CFSTR("CTFontFullName"), 0, 0);
    v13 = (void *)atomic_load((unint64_t *)&v22);
    v14 = v13;
    v15 = (const __CFString *)v14;
    v16 = (__CFString *)v15;
    if (v15 == a1)
    {
      v12 = 1;
    }
    else if (v15)
    {
      v12 = CFStringCompare(a1, v15, 0x20uLL) == kCFCompareEqualTo;
    }
    else
    {
      v12 = 0;
    }

  }
LABEL_17:
  if (a3 && v12)
  {
    v22 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)a4 + 88))(&v22, a4, CFSTR("CTFontSubFamilyName"), 0, 0);
    v17 = (void *)atomic_load((unint64_t *)&v22);
    v18 = v17;
    v19 = (const __CFString *)v18;
    v20 = (__CFString *)v19;
    if (v19 == a3)
    {
      v12 = 1;
    }
    else if (v19)
    {
      v12 = CFStringCompare(a3, v19, 0x20uLL) == kCFCompareEqualTo;
    }
    else
    {
      v12 = 0;
    }

  }
  return v12;
}

BOOL CompareFileURL(const __CFURL *a1, const TBaseFont *a2)
{
  void *v3;
  _BOOL8 v4;
  id v6;

  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 192))(&v6, a2);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  if (v3)
    v4 = CFEqual(a1, v3) != 0;
  else
    v4 = 0;

  return v4;
}

BOOL CompareFormat(const __CFNumber *a1, const TBaseFont *a2)
{
  void *v3;
  _BOOL8 v4;
  id v6;

  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 216))(&v6, a2);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  if (v3)
    v4 = CFEqual(a1, v3) != 0;
  else
    v4 = 0;

  return v4;
}

BOOL CompareScope(const __CFNumber *a1, const TBaseFont *a2)
{
  void *v3;
  _BOOL8 v4;
  id v6;

  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 248))(&v6, a2);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  if (v3)
    v4 = CFEqual(a1, v3) != 0;
  else
    v4 = 0;

  return v4;
}

void CreateTraitsWithSymbolicTraits(CFDictionaryRef theDict@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  const void *v9;
  __CFDictionary *v10;
  void *v11;
  void *v12;
  __CFDictionary *v13;
  unint64_t v14;
  void *v15;
  id values;
  void *keys;

  if (theDict)
  {
    keys = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    v8 = GetSymbolicTraitsFromTraits(theDict) & ~a3 | a3 & a2;
    if (v8)
    {
      TCFNumber::TCFNumber<unsigned int>((unint64_t *)&values, v8);
      v9 = (const void *)atomic_load((unint64_t *)&values);
      v10 = (__CFDictionary *)atomic_load((unint64_t *)&keys);
      CFDictionarySetValue(v10, CFSTR("NSCTFontSymbolicTrait"), v9);

    }
    else
    {
      v13 = (__CFDictionary *)atomic_load((unint64_t *)&keys);
      CFDictionaryRemoveValue(v13, CFSTR("NSCTFontSymbolicTrait"));
    }
    do
      v14 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    *a4 = v14;
    v12 = keys;
  }
  else
  {
    TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v15, a2);
    v11 = (void *)atomic_load((unint64_t *)&v15);
    values = v11;
    keys = CFSTR("NSCTFontSymbolicTrait");
    *a4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = v15;
  }

}

float std::__lerp[abi:nn180100]<float>(float a1, float a2, float a3)
{
  BOOL v4;
  float v5;
  int v6;
  int v7;
  float v8;

  if (a1 <= 0.0 && a2 >= 0.0 || a1 >= 0.0 && a2 <= 0.0)
    return (float)((float)(1.0 - a3) * a1) + (float)(a3 * a2);
  v4 = a3 <= 1.0;
  if (a3 != 1.0)
  {
    v5 = a1 + (float)(a3 * (float)(a2 - a1));
    v6 = v4;
    v7 = (a2 > a1) ^ v6;
    if (v5 <= a2)
      v8 = a2;
    else
      v8 = v5;
    if (v5 < a2)
      a2 = v5;
    if (v7)
      return v8;
  }
  return a2;
}

__CFString *TStorageRange::DebugDescriptionWithInfoFromRun(TStorageRange *this, TFont **a2, CGSize a3, uint64_t a4)
{
  double width;
  const __CFAllocator *v7;
  __CFString *Mutable;
  const __CFString *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  __int128 v18;
  int v19;
  const char *CStringPtr;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  unint64_t v23;
  char *v24;
  int64_t v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  char *v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *v44;
  char *v46;
  size_t v47;
  CFIndex bufferSize;
  uint64_t v49;
  __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v55;
  id __p;
  char *v57;
  char *v58;
  _OWORD v59[16];
  _QWORD v60[3];

  width = a3.width;
  v60[1] = *MEMORY[0x1E0C80C00];
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v9 = CFStringCreateWithFormat(v7, 0, CFSTR("width = %lg, glyphs = (\n"), width + *(double *)this);
  CFStringAppend(Mutable, v9);
  CFRelease(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 3);
  v11 = v10[4];
  if (v11 || (v13 = v10[3]) == 0)
  {
    v53 = 0;
    v12 = *((_QWORD *)this + 1);
    v52 = v11 + 16 * v12;
  }
  else
  {
    v12 = *((_QWORD *)this + 1);
    v52 = v13 + 8 * v12;
    v53 = 1;
  }
  if (*((uint64_t *)this + 2) >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = v10[2] + 2 * v12;
    v50 = Mutable;
    v51 = v10[6] + 8 * v12;
    v49 = a4;
    do
    {
      v55 = (char *)0xAAAAAAAAAAAAAAAALL;
      if (!a2)
        goto LABEL_22;
      TFont::CopyNameForGlyph(a2[5], *(_WORD *)(v16 + 2 * v15), (CFStringRef *)&__p);
      do
        v17 = (__CFString *)__ldaxr((unint64_t *)&__p);
      while (__stlxr(0, (unint64_t *)&__p));

      if (v17)
      {
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v59[14] = v18;
        v59[15] = v18;
        v59[12] = v18;
        v59[13] = v18;
        v59[10] = v18;
        v59[11] = v18;
        v59[8] = v18;
        v59[9] = v18;
        v59[6] = v18;
        v59[7] = v18;
        v59[4] = v18;
        v59[5] = v18;
        v59[2] = v18;
        v59[3] = v18;
        v59[0] = v18;
        v59[1] = v18;
        __p = 0;
        v57 = 0;
        v58 = 0;
        v60[0] = v59;
        v19 = *(unsigned __int16 *)(v16 + 2 * v15);
        CStringPtr = CFStringGetCStringPtr(v17, 0x8000100u);
        if (!CStringPtr)
        {
          Length = CFStringGetLength(v17);
          MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
          v23 = MaximumSizeForEncoding + 1;
          v24 = (char *)__p;
          v25 = v57 - (_BYTE *)__p;
          v26 = MaximumSizeForEncoding + 1 - (v57 - (_BYTE *)__p);
          if (MaximumSizeForEncoding + 1 <= (unint64_t)(v57 - (_BYTE *)__p))
          {
            if (v23 < v57 - (_BYTE *)__p)
              v57 = (char *)__p + v23;
            a4 = v49;
          }
          else
          {
            if (v58 - v57 >= v26)
            {
              v30 = (char *)__p + v23;
              v31 = MaximumSizeForEncoding + 1;
              bzero(v57, v23 - (v57 - (_BYTE *)__p));
              v23 = v31;
              v57 = v30;
              a4 = v49;
            }
            else
            {
              if (MaximumSizeForEncoding <= -2)
                abort();
              v27 = 2 * (v58 - (_BYTE *)__p);
              if (v27 <= v23)
                v27 = MaximumSizeForEncoding + 1;
              if ((unint64_t)(v58 - (_BYTE *)__p) >= 0x3FFFFFFFFFFFFFFFLL)
                v28 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v28 = v27;
              v29 = (char *)v60[0];
              v47 = v28;
              bufferSize = MaximumSizeForEncoding + 1;
              if (v60[0] + v28 <= (unint64_t)v60)
                v60[0] += v28;
              else
                v29 = (char *)operator new(v28);
              v46 = v29;
              v32 = &v29[v25];
              bzero(v32, v26);
              v34 = (char *)__p;
              v33 = v57;
              if (v57 == __p)
              {
                v23 = bufferSize;
              }
              else
              {
                v23 = bufferSize;
                do
                {
                  v35 = *--v33;
                  *--v32 = v35;
                }
                while (v33 != v34);
                v33 = (char *)__p;
              }
              __p = v32;
              v57 = &v46[v23];
              v36 = v58;
              v58 = &v46[v47];
              a4 = v49;
              if (v33)
              {
                if (v59 <= (_OWORD *)v33 && v60 > (_QWORD *)v33)
                {
                  if (v36 == (char *)v60[0])
                    v60[0] = v33;
                }
                else
                {
                  v38 = v23;
                  operator delete(v33);
                  v23 = v38;
                }
              }
            }
            v24 = (char *)__p;
          }
          if (CFStringGetCString(v17, v24, v23, 0x8000100u))
            CStringPtr = (const char *)__p;
          else
            CStringPtr = 0;
        }
        asprintf(&v55, "%d [%s]", v19, CStringPtr);
        if (__p)
        {
          v57 = (char *)__p;
          if (v59 > __p || v60 <= __p)
            operator delete(__p);
        }
        Mutable = v50;
      }
      else
      {
LABEL_22:
        asprintf(&v55, "%d", *(unsigned __int16 *)(v16 + 2 * v15));
        v17 = 0;
      }
      if ((*((_BYTE *)this + 33) & 0x10) != 0)
      {
        objc_msgSend(*((id *)this + 3), "originAtIndex:", *((_QWORD *)this + 1) + v15);
      }
      else
      {
        v39 = *MEMORY[0x1E0C9D538];
        v40 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
      }
      if (v15 == a4 || *(unsigned __int16 *)(v16 + 2 * v15) != 0xFFFF || (*((_BYTE *)this + 33) & 2) == 0)
      {
        if (v53)
        {
          v41 = (_QWORD *)(v52 + 8 * v15);
          v42 = 0;
        }
        else
        {
          v41 = (_QWORD *)(v52 + 16 * v15);
          v42 = v41[1];
        }
        v43 = v14 + 1;
        v44 = CFStringCreateWithFormat(v7, 0, CFSTR("\t{ %ld: glyph = %s, string index = %ld, origin = { %g, %g }, base advance = { %g, %g } },\n"), v14, v55, *(_QWORD *)(v51 + 8 * v15), v39, v40, *v41, v42);
        CFStringAppend(Mutable, v44);
        CFRelease(v44);
        v14 = v43;
      }
      free(v55);

      ++v15;
    }
    while (v15 < *((_QWORD *)this + 2));
  }
  CFStringAppend(Mutable, CFSTR(")"));
  return Mutable;
}

uint64_t TStorageRange::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  result = CFEqual(*(CFTypeRef *)(a1 + 24), *(CFTypeRef *)(a2 + 24));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    return 0;
  }
  return result;
}

uint64_t TStorageRange::FindTabGlyph(TStorageRange *this, uint64_t a2, int a3, double *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;

  v4 = *((_QWORD *)this + 2);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (a3 < 0)
    v4 = -1;
  v6 = v5[4];
  if (v6 || (v10 = v5[3]) == 0)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 1);
    v9 = v6 + 16 * v8;
  }
  else
  {
    v8 = *((_QWORD *)this + 1);
    v9 = v10 + 8 * v8;
    v7 = 1;
  }
  if (v4 != a2)
  {
    v11 = v5[5] + 4 * v8;
    v12 = (double *)(v9 + 16 * a2);
    v13 = (double *)(v9 + 8 * a2);
    while ((*(_DWORD *)(v11 + 4 * a2) & 4) == 0)
    {
      if (a4)
      {
        if (v7)
          v14 = v13;
        else
          v14 = v12;
        *a4 = *v14 + *a4;
      }
      a2 += a3;
      v12 += 2 * a3;
      v13 += a3;
      if (v4 == a2)
        return v4;
    }
  }
  return a2;
}

void TStorageRange::DetachStorage(id *this)
{
  uint64_t v2;

  v2 = objc_msgSend(this[3], "copyWithRange:", this[1], this[2]);

  this[3] = (id)v2;
  this[1] = 0;
}

void TStorageRange::SetInterGlyphsExtraSpace(TStorageRange *this, uint64_t a2, double a3)
{
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v7 = (_QWORD **)((char *)this + 40);
  v6 = *((_QWORD *)this + 5);
  if (a3 == 0.0)
  {
    if (!v6)
      return;
  }
  else if (!v6)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = operator new(0x30uLL);
    v13 = v12;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = 0;
    v14 = v12 + 3;
    *v12 = &off_1E15DCA58;
    v12[4] = 0;
    v12[5] = 0;
    if (v11)
    {
      std::vector<double>::__vallocate[abi:nn180100](v12 + 3, v11);
      v15 = (char *)v13[4];
      bzero(v15, 8 * v11);
      v13[4] = &v15[8 * v11];
    }
    *(_QWORD *)&v19 = v14;
    *((_QWORD *)&v19 + 1) = v13;
    std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)v7, &v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v9 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 7) = v9;
    v8 = v9;
    goto LABEL_6;
  }
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 7);
LABEL_6:
  v10 = a2 - v9 + v8;
  if (v10 < *((_QWORD *)this + 2))
    *(double *)(**v7 + 8 * v10) = a3;
}

void TStorageRange::SetOriginalFinalAdvanceWidth(TStorageRange *this, double a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v5 = (char *)this + 40;
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v4)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = v10 + 1;
    v12 = v10 == -1;
    v13 = operator new(0x30uLL);
    v14 = v13;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = 0;
    v15 = v13 + 3;
    *v13 = &off_1E15DCA58;
    v13[4] = 0;
    v13[5] = 0;
    if (!v12)
    {
      std::vector<double>::__vallocate[abi:nn180100](v13 + 3, v11);
      v16 = (char *)v14[4];
      bzero(v16, 8 * v11);
      v14[4] = &v16[8 * v11];
    }
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v14;
    std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)v5, &v20);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *((_QWORD *)this + 7) = *((_QWORD *)this + 1);
    goto LABEL_14;
  }
  v6 = (uint64_t)(v4[1] - *v4) >> 3;
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 7);
  if (v8 + v7 - v9 == v6)
  {
    std::vector<double>::resize((uint64_t)v4, v6 + 1);
    v7 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    v9 = *((_QWORD *)this + 7);
  }
  if (v8 - v9 + v7 + 1 == v6)
LABEL_14:
    *(double *)(*(_QWORD *)(*(_QWORD *)v5 + 8) - 8) = a2;
}

uint64_t TStorageRange::GetOriginalFinalAdvanceWidth(TStorageRange *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  if (v1
    && (v2 = v1[1], *((_QWORD *)this + 1) + *((_QWORD *)this + 2) - *((_QWORD *)this + 7) + 1 == (v2 - *v1) >> 3))
  {
    return *(_QWORD *)(v2 - 8);
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15DCA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15DCA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

char *std::vector<double>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t TBidiEngine::ReplaceCharAtIndex(TBidiEngine *this, TRun *a2, const __CTFont *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t GlyphIndexForChar;
  char *v9;
  char v10;
  TAttributes *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t RenderingStyle;
  unsigned __int16 v16;
  unsigned int v17;

  v17 = a3;
  v16 = 0;
  result = GetGlyphsForLongCharacters(a2, &v17, &v16, 1);
  v7 = v16;
  if (v16)
  {
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a4);
    v9 = (char *)this + 192;
    objc_msgSend(*((id *)this + 27), "setGlyph:atIndex:", v7, *((_QWORD *)this + 25) + GlyphIndexForChar);
    v10 = *((_BYTE *)this + 225);
    if ((_DWORD)v7 == 0xFFFF && (v10 & 2) != 0)
      *((_BYTE *)this + 225) = v10 | 8;
    v12 = (TBidiEngine *)((char *)this + 40);
    v13 = atomic_load((unint64_t *)this + 7);
    v14 = *(_QWORD *)(v13 + 40);
    RenderingStyle = TAttributes::GetRenderingStyle(v12);
    return TStorageRange::ResetAdvance((uint64_t)v9, GlyphIndexForChar, v14, RenderingStyle);
  }
  return result;
}

void TDescriptorSource::PurgeFontFallbacksCache(TDescriptorSource *this)
{
  uint64_t v1;

  os_unfair_lock_lock_with_options();
  v1 = TDescriptorSource::sFontFallbacksCache;
  if (TDescriptorSource::sFontFallbacksCache)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::~__hash_table(TDescriptorSource::sFontFallbacksCache + 24);

    MEMORY[0x186DC03AC](v1, 0x10E0C400A71E039);
    TDescriptorSource::sFontFallbacksCache = 0;
  }
  os_unfair_lock_unlock(&TDescriptorSource::sFontFallbacksLock);
}

void TDescriptorSource::PurgeSplicedFontStash(TDescriptorSource *this)
{
  void *v1;

  os_unfair_lock_lock_with_options();
  v1 = (void *)TDescriptorSource::sSplicedFonts;
  if (TDescriptorSource::sSplicedFonts)
  {
    TDescriptorSource::sSplicedFonts = (uint64_t)0;

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&TDescriptorSource::sSplicedFontsLock);
}

__CFString *CTFontDescriptorGetContentSizeCategoryFromIndex(unsigned int a1)
{
  __CFString **v1;

  if (a1 > 0xB)
    v1 = kCTFontContentSizeCategoryL;
  else
    v1 = off_1E15E34B0[a1];
  return *v1;
}

void TDescriptorSource::CreateVariantWithTraitsMatchingDescriptors(TDescriptorSource *this@<X0>, const __CFArray *a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFNumber *Value;
  const __CFNumber *v8;
  _BOOL4 v9;
  int v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  TTraitsValues v15;
  int valuePtr;

  v15 = *(TTraitsValues *)__const__ZN17TDescriptorSource42CreateVariantWithTraitsMatchingDescriptorsEPK9__CFArrayPK14__CFDictionary_traitsValues;
  TTraitsValues::TTraitsValues(&v15, a2);
  if (a2)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("NSCTFontSymbolicTrait"));
    if (Value)
    {
      v8 = Value;
      v9 = CFDictionaryContainsKey(a2, CFSTR("NSCTFontWeightTrait")) == 0;
      v10 = (CFDictionaryContainsKey(a2, CFSTR("NSCTFontSlantTrait")) == 0) | (2 * v9);
      v11 = CFDictionaryContainsKey(a2, CFSTR("NSCTFontProportionTrait")) ? v10 : v10 | 0x40;
      if (v11)
      {
        valuePtr = -1431655766;
        CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
        v12 = 0.06944444;
        v13 = 0.0;
        if ((valuePtr & 1) == 0)
          v12 = 0.0;
        v14 = -0.2;
        if ((valuePtr & 0x40) == 0)
          v14 = 0.0;
        if ((valuePtr & 0x20) != 0)
          v14 = 0.2;
        if ((v11 & 2) != 0)
        {
          if ((valuePtr & 2) != 0)
            v13 = 0.400000006;
          v15.var1 = v13;
        }
        if ((v11 & 1) != 0)
          v15.var3 = v12;
        if (v11 >= 0x40)
          v15.var2 = v14;
      }
    }
  }
  TBaseFont::CreateVariantWithTraitsMatchingDescriptors(&v15, this, a3);
}

void TDescriptorSource::CopySplicedDescriptorForName(void *a1@<X1>, __CFString *a2@<X3>, const __CFNumber *a3@<X4>, const __CFNumber *a4@<X5>, uint64_t a5@<X6>, const void *a6@<X7>, unint64_t *a7@<X8>, const __CFNumber *a8, __CFString *a9, const __CFNumber *a10, const __CFNumber *a11, const __CFNumber *a12, const __CFNumber *a13, unsigned int a14, void *a15)
{
  TDescriptorSource *v19;
  unint64_t v20;
  id v24;

  v19 = (TDescriptorSource *)os_unfair_lock_lock_with_options();
  TDescriptorSource::EnsureSplicedFontStash(v19);
  v24 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopySpliceFontForName(a1, a2, a3, a4, a5, a6, a8, a9, (unint64_t *)&v24, a10, a11, a12, a13, a14, a15);
  v20 = atomic_load((unint64_t *)&v24);
  if (v20)
  {
    do
      v20 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
  }
  *a7 = v20;

  os_unfair_lock_unlock((os_unfair_lock_t)&TDescriptorSource::sSplicedFontsLock);
}

void TDescriptorSource::CreateDefaultDescriptor(int a1@<W1>, unint64_t *a2@<X8>)
{
  void *v4;
  TDescriptor **v5;
  TDescriptor **v6;
  TDescriptor *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CreateDescriptorForUIType((TDescriptorSource *)(2 * (a1 != 0)), 0.0, 0, (unint64_t *)&v10);
  v4 = (void *)atomic_load((unint64_t *)&v10);
  v5 = v4;
  v6 = v5;
  v7 = v5[5];
  if ((*((_DWORD *)v7 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v5[5], 16 * (a1 == 0), 0.0);
  v8 = atomic_load((unint64_t *)v7 + 4);

  if (v8)
  {
    do
      v9 = __ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    *a2 = v9;
  }
  else
  {
    CFLog();
    TDescriptorSource::CopyLastResort(a2);
  }

}

void TDescriptorSource::CopyLastResort(unint64_t *a1@<X8>)
{
  unint64_t v3;
  id v4;

  if (qword_1ECDE7718 != -1)
    dispatch_once_f(&qword_1ECDE7718, 0, (dispatch_function_t)TDescriptorSource::CopyLastResort(void)const::$_0::__invoke);
  v4 = (id)qword_1ECDE7710;
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a1 = v3;

}

void TCFBase_NEW<CTFontDescriptor,CGFont *&,__CFDictionary const*>(CGFont **a1@<X0>, const __CFDictionary **a2@<X1>, unint64_t *a3@<X8>)
{
  CTFontDescriptor *v6;
  void *v7;
  unint64_t v8;
  id v9;

  v6 = (CTFontDescriptor *)TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    CTFontDescriptor::CTFontDescriptor(v6, *a1, *a2);
    v9 = v7;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a3 = v8;

  }
  else
  {
    *a3 = 0;
  }
}

void TDescriptorSource::CopyAllDescriptorsInternal(TPurgeableCache **this@<X0>, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *)@<X2>, char a3@<W1>, unint64_t *a4@<X8>)
{
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  void *v14;
  TDescriptor **v15;
  TDescriptor **v16;
  TDescriptor *v17;
  unint64_t v18;
  void *v19;
  id v20;
  __CFArray *v21;
  const __CFArray *v22;
  BOOL v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex j;
  const __CFURL *v27;
  void *v29;
  id v30;
  __CFArray *v31;
  __CFArray *v32;
  const __CFArray *v33;
  unint64_t v34;
  id v35;
  id Mutable;
  CFRange v37;

  v8 = (const __CFArray *)XTCopyAvailableFontURLs();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if ((a3 & 2) != 0)
  {
    if (!v8)
      goto LABEL_23;
    goto LABEL_18;
  }
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v8, i);
        v35 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopyDescriptorUncached(this, ValueAtIndex, 0, 0, 0, (unint64_t *)&v35);
        if (atomic_load((unint64_t *)&v35))
        {
          v14 = (void *)atomic_load((unint64_t *)&v35);
          v15 = v14;
          v16 = v15;
          v17 = v15[5];
          if ((*((_DWORD *)v17 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(v15[5], 0, 0.0);
          v18 = atomic_load((unint64_t *)v17 + 4);

          if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 696))(v18) & 1) == 0)
          {
            v19 = (void *)atomic_load((unint64_t *)&v35);
            v20 = v19;
            v21 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArrayAppendValue(v21, v20);

          }
        }

      }
    }
  }
  v22 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
  if (CFArrayGetCount(v22))
    v23 = 1;
  else
    v23 = v8 == 0;
  if (!v23)
  {
LABEL_18:
    v24 = CFArrayGetCount(v8);
    if (v24)
    {
      v25 = v24;
      for (j = 0; j != v25; ++j)
      {
        v27 = (const __CFURL *)CFArrayGetValueAtIndex(v8, j);
        v35 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopyDescriptorUncached(this, v27, 0, 0, 0, (unint64_t *)&v35);
        if (atomic_load((unint64_t *)&v35))
        {
          v29 = (void *)atomic_load((unint64_t *)&v35);
          v30 = v29;
          v31 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v31, v30);

        }
      }
    }
  }
LABEL_23:
  if (a2)
  {
    v32 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
    v33 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
    v37.length = CFArrayGetCount(v33);
    v37.location = 0;
    CFArraySortValues(v32, v37, a2, 0);
  }
  do
    v34 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a4 = v34;

}

id TDescriptorSource::CopyAllDescriptorsSorted@<X0>(TPurgeableCache **this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  unint64_t *v5;
  void *v6;
  BOOL v7;
  unint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  id result;
  id v14;

  v4 = TGenerationSeed::sGeneration;
  if ((a2 & 2) != 0)
    v5 = &TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllDescriptorsSorted;
  else
    v5 = &TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllVisibleDescriptorsSorted;
  v6 = (void *)atomic_load(v5);
  if (v6)
    v7 = TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gGeneration == TGenerationSeed::sGeneration;
  else
    v7 = 0;
  if (!v7)
  {
    TDescriptorSource::CopyAllDescriptorsInternal(this, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedence, a2, (unint64_t *)&v14);
    do
      v9 = __ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));

    if ((a2 & 2) != 0)
    {
      while (1)
      {
        v10 = __ldaxr(&TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllDescriptorsSorted);
        if ((void *)v10 != v6)
          break;
        if (!__stlxr(v9, &TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllDescriptorsSorted))
        {
LABEL_16:
          v11 = 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
      while (1)
      {
        v10 = __ldaxr(&TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllVisibleDescriptorsSorted);
        if ((void *)v10 != v6)
          break;
        if (!__stlxr(v9, &TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gAllVisibleDescriptorsSorted))goto LABEL_16;
      }
    }
    v11 = 0;
    __clrex();
LABEL_18:
    if ((v11 & 1) != 0)
      v12 = v6;
    else
      v12 = (void *)v9;
    if ((v11 & 1) != 0)
      v6 = (void *)v9;
    else
      v6 = (void *)v10;

    TDescriptorSource::CopyAllDescriptorsSorted(unsigned long)const::gGeneration = v4;
  }
  result = v6;
  *a3 = result;
  return result;
}

CFComparisonResult CompareDescriptorsByTraitsAndPrecedence(_QWORD *a1, _QWORD *a2, void *a3)
{
  return CompareLocalizedDescriptorsByTraitsAndPrecedence(a1, a2, a3, 0, 1, 1);
}

void TDescriptorSource::CopyAvailablePostScriptNames(TPurgeableCache **this@<X0>, _QWORD *a2@<X8>)
{
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFSet *v6;
  const __CFSet *v7;
  id Mutable;
  id v9;
  CFRange v10;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyAllDescriptorsInternal(this, 0, 0, (unint64_t *)&v9);
  if (!atomic_load((unint64_t *)&v9))
    goto LABEL_5;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v4 = (const __CFArray *)atomic_load((unint64_t *)&v9);
  v5 = (const __CFArray *)atomic_load((unint64_t *)&v9);
  v10.length = CFArrayGetCount(v5);
  v10.location = 0;
  CFArrayApplyFunction(v4, v10, (CFArrayApplierFunction)AddPostScriptNameToSetForDescriptor, &Mutable);
  v6 = (const __CFSet *)atomic_load((unint64_t *)&Mutable);
  if (CFSetGetCount(v6) < 1)
  {

LABEL_5:
    *a2 = 0;
    goto LABEL_6;
  }
  v7 = (const __CFSet *)atomic_load((unint64_t *)&Mutable);
  CreateSortedArrayWithSet(v7, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))TDescriptorSource::ComparePostScriptNames, 0, a2);

LABEL_6:
}

void AddPostScriptNameToSetForDescriptor(const void *a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  __CFSet *v7;

  v3 = *((_QWORD *)a1 + 5);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)a1 + 5), 0, 0.0);
  v4 = atomic_load((unint64_t *)(v3 + 32));
  if (v4)
  {
    v5 = (void *)atomic_load((unint64_t *)(v4 + 96));
    v6 = v5;
    if (v6)
    {
      v7 = (__CFSet *)atomic_load(a2);
      CFSetAddValue(v7, v6);
    }

  }
}

CFComparisonResult TDescriptorSource::ComparePostScriptNames(const __CFString *this, const __CFString *a2, const void *a3, void *a4)
{
  return CFStringCompare(this, a2, 0x40uLL);
}

void TDescriptorSource::CopyAvailableFamilyNames(unint64_t *a1@<X8>)
{
  const __CFArray *v4;
  const __CFArray *v5;
  __CFArray *v6;
  const __CFArray *v7;
  unint64_t v8;
  id MutableCopy;
  CFRange v10;

  v4 = (const __CFArray *)GSFontCopyFamilyNames();
  if (v4)
  {
    v5 = v4;
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v4);
    CFRelease(v5);
    v6 = (__CFArray *)atomic_load((unint64_t *)&MutableCopy);
    v7 = (const __CFArray *)atomic_load((unint64_t *)&MutableCopy);
    v10.length = CFArrayGetCount(v7);
    v10.location = 0;
    CFArraySortValues(v6, v10, (CFComparatorFunction)TDescriptorSource::CompareFamilyNames, 0);
    do
      v8 = __ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));
    *a1 = v8;

  }
  else
  {
    *a1 = 0;
  }
}

CFComparisonResult TDescriptorSource::CompareFamilyNames(const __CFString *this, const __CFString *a2, const void *a3, void *a4)
{
  if (this == a2)
    return 0;
  if (this && a2)
    return CFStringCompare(this, a2, 0x61uLL);
  if (this < a2)
    return -1;
  return 1;
}

void TDescriptorSource::CopyEmojiFontDescriptor(TDescriptorSource *this@<X0>, const __CFArray *a2@<X1>, const __CTFontDescriptor *a3@<X2>, unint64_t *a4@<X8>)
{
  TDescriptor *v7;
  int v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  const __CFDictionary *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  const __CFDictionary *v17;
  id v18;
  void *values;
  id keys;

  v7 = (TDescriptor *)*((_QWORD *)a3 + 5);
  v8 = *((_DWORD *)v7 + 4);
  v9 = (TDescriptor::GetSystemUIFontOptions(this) & v8) != 0;
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyEmojiFontDescriptor(a2, (TPurgeableCache **)this, v9, (unint64_t *)&keys);
  do
    v10 = (void *)__ldaxr((unint64_t *)&keys);
  while (__stlxr(0, (unint64_t *)&keys));
  v18 = v10;

  TDescriptor::CopyAttribute(v7, CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute"), 64, &keys);
  do
    v11 = (void *)__ldaxr((unint64_t *)&keys);
  while (__stlxr(0, (unint64_t *)&keys));

  if (v11)
  {
    values = v11;
    keys = CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute");
    v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = (void *)atomic_load((unint64_t *)&v18);
    values = v13;
    v17 = v12;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&values, &v17, (unint64_t *)&keys);
    do
      v14 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v15 = (void *)__ldaxr((unint64_t *)&v18);
    while (__stlxr(v14, (unint64_t *)&v18));

  }
  do
    v16 = __ldaxr((unint64_t *)&v18);
  while (__stlxr(0, (unint64_t *)&v18));
  *a4 = v16;

}

void TDescriptorSource::CopySystemWideFallbackDescriptorForCharacters(TPurgeableCache **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  UTF32Char v12;
  BOOL v13;
  int v14;
  UTF32Char v15;
  unint64_t v16;
  __CFString **v17;
  unint64_t v18;
  __CFString **v19;
  signed int v20;
  __CFString **v21;
  const __CFString *v22;
  unint64_t v23;
  void *v24;
  void *v26;
  TDescriptor **v27;
  TDescriptor **v28;
  TDescriptor *v29;
  unint64_t v30;
  void *v31;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  __CFString *v40;
  UTF32Char v41;
  UTF32Char v42;
  void *v45;
  TDescriptor **v46;
  TDescriptor **v47;
  TDescriptor *v48;
  unint64_t v49;
  CFIndex Count;
  CFIndex v51;
  CFIndex v52;
  TDescriptor **ValueAtIndex;
  TDescriptor **v54;
  TDescriptor *v55;
  unint64_t v56;
  const __CFCharacterSet *v57;
  unint64_t v58;
  void *v59;
  _QWORD *Table;
  const __CFArray *v62;
  CFIndex v63;
  CFIndex v64;
  CFIndex v65;
  uint64_t v66;
  TDescriptor **v67;
  TDescriptor **v68;
  TDescriptor *v69;
  TBaseFont *v70;
  void *v73;
  TDescriptor **v74;
  TDescriptor **v75;
  TDescriptor *v76;
  unint64_t v77;
  const __CFArray *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  const __CFString *v85;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  id v96;
  id v97;
  id v98;
  id v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  id v103[18];
  CFRange v104;

  v7 = a7;
  v103[16] = *(id *)MEMORY[0x1E0C80C00];
  if (!a3 || !a6 || (v8 = a4, a4 < 1))
  {
LABEL_129:
    *v7 = 0;
    return;
  }
  v9 = a3;
  v10 = 0;
  v94 = (const void *)*MEMORY[0x1E0C9AE40];
  while (1)
  {
    v11 = v10 + 1;
    v12 = *(unsigned __int16 *)(v9 + 2 * v10);
    v13 = (v12 & 0xFC00) != 0xD800 || v11 == v8;
    if (v13 || (v14 = *(unsigned __int16 *)(v9 + 2 * v11), (v14 & 0xFC00) != 0xDC00))
    {
      if (v12 < 0xE000)
        goto LABEL_20;
      if (v12 >> 11 >= 0x1F)
        goto LABEL_17;
    }
    else
    {
      v11 = v10 + 2;
      v15 = v14 + (v12 << 10);
      v12 = v15 - 56613888;
      if (v15 - 56613888 < 0xF0000 || v15 - 57727998 > 0xFFFFFC01)
        break;
    }
    if (v12 != 1051575 && v12 - 57345 > 0x536)
      goto LABEL_122;
LABEL_17:
    if (v12 < 0xFE0E)
      goto LABEL_20;
    if (v12 >> 4 >= 0xFE1)
      break;
LABEL_122:
    v10 = v11;
    if (v11 >= v8)
      goto LABEL_129;
  }
  if (v12 - 127995 < 5)
    goto LABEL_122;
LABEL_20:
  v92 = v9 + 2 * v10;
  if (v12 - 57345 < 0x537)
    goto LABEL_21;
  if (qword_1ECDE7778 != -1)
    dispatch_once_f(&qword_1ECDE7778, 0, (dispatch_function_t)GetSystemFontsComboCharacterSet(void)::$_0::__invoke);
  if (qword_1ECDE7770 && !CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1ECDE7770, v12))
  {
LABEL_21:
    if (qword_1ECDE7728 != -1)
      dispatch_once_f(&qword_1ECDE7728, 0, (dispatch_function_t)TDescriptorSource::GetAppleColorEmojiCharacterSet(void)const::$_0::__invoke);
    if (qword_1ECDE7720 && CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1ECDE7720, v12))
    {
      TDescriptorSource::CopyEmojiFontDescriptor(0, a1, a5, v7);
      return;
    }
    goto LABEL_122;
  }
  v97 = 0;
  v16 = 112;
  v17 = &TDescriptorSource::CopySystemWideFallbackDescriptorForCharacters(TBaseFont const&,unsigned short const*,long,UIFontFlag,unsigned long,CTEmojiPolicy,TCFRef<__CFArray const*> *)const::kNotoRanges;
  do
  {
    v18 = v16 >> 1;
    v19 = &v17[2 * (v16 >> 1)];
    v20 = *((_DWORD *)v19 + 3);
    v21 = v19 + 2;
    v16 += ~(v16 >> 1);
    if (v20 >= (int)v12)
      v16 = v18;
    else
      v17 = v21;
  }
  while (v16);
  if (v17 != sPingFangFacesMap && *((_DWORD *)v17 + 2) <= (signed int)v12 && *((_DWORD *)v17 + 3) >= (signed int)v12)
  {
    v22 = *v17;
    TDescriptorSource::CopyFontDescriptorPerPostScriptName(a1, *v17, 0x10012uLL, 9, 0, 0, 0, -1, (unint64_t *)v103, v94);
    do
      v23 = __ldaxr((unint64_t *)v103);
    while (__stlxr(0, (unint64_t *)v103));
    do
      v24 = (void *)__ldaxr((unint64_t *)&v97);
    while (__stlxr(v23, (unint64_t *)&v97));

    if (!atomic_load((unint64_t *)&v97))
      goto LABEL_47;
    v26 = (void *)atomic_load((unint64_t *)&v97);
    v27 = v26;
    v28 = v27;
    v29 = v27[5];
    if ((*((_DWORD *)v29 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v27[5], 0, 0.0);
    v30 = atomic_load((unint64_t *)v29 + 4);

    v9 = a3;
    if (!v30)
    {
LABEL_47:
      v85 = v22;
      CFLog();
      goto LABEL_48;
    }
    if (!(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 808))(v30, a3, v8, 0))
    {
      do
LABEL_48:
        v31 = (void *)__ldaxr((unint64_t *)&v97);
      while (__stlxr(0, (unint64_t *)&v97));

    }
  }
  if (atomic_load((unint64_t *)&v97))
    goto LABEL_116;
  if (ShouldUseLastResort(v12))
    goto LABEL_130;
  if (qword_1ECDE7700 != -1)
    dispatch_once_f(&qword_1ECDE7700, 0, (dispatch_function_t)TDescriptorSource::CopySystemWideFallbackDescriptorconst::$_0::__invoke);
  v33 = (void *)qword_1ECDE76F8;
  if (qword_1ECDE76F8)
  {
    WORD1(v98) = -21846;
    if (v12 - 1114112 >= 0xFFF00000)
    {
      v34 = ((v12 + 67043328) >> 10) - 10240;
      WORD1(v98) = v12 & 0x3FF | 0xDC00;
    }
    else
    {
      LOWORD(v34) = v12;
    }
    LOWORD(v98) = v34;
    *(_OWORD *)v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v35 = objc_msgSend((id)qword_1ECDE76F8, "countByEnumeratingWithState:objects:count:", v99, v103, 16, v85);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v100;
      v38 = 1;
      if (v12 - 1114112 >= 0xFFF00000)
        v38 = 2;
      v93 = v38;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v100 != v37)
            objc_enumerationMutation(v33);
          v40 = (__CFString *)*((_QWORD *)v99[1] + i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v41 = objc_msgSend((id)-[__CFString objectAtIndexedSubscript:](v40, "objectAtIndexedSubscript:", 0), "unsignedIntValue");
            v42 = objc_msgSend((id)-[__CFString objectAtIndexedSubscript:](v40, "objectAtIndexedSubscript:", 1), "unsignedIntValue");
            if (v41 > v12 || v42 < v12)
              continue;
            v40 = (__CFString *)-[__CFString objectAtIndexedSubscript:](v40, "objectAtIndexedSubscript:", 2);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              continue;
          }
          if (v40)
          {
            v96 = (id)0xAAAAAAAAAAAAAAAALL;
            TDescriptorSource::CopyFontDescriptorPerPostScriptName(a1, v40, 0x10000uLL, 8, 0, 0, 0, -1, (unint64_t *)&v96, v94);
            if (atomic_load((unint64_t *)&v96))
            {
              v45 = (void *)atomic_load((unint64_t *)&v96);
              v46 = v45;
              v47 = v46;
              v48 = v46[5];
              if ((*((_DWORD *)v48 + 4) & 0x80000000) == 0)
                TDescriptor::InitBaseFont(v46[5], 0, 0.0);
              v49 = atomic_load((unint64_t *)v48 + 4);

              if ((*(uint64_t (**)(unint64_t, id *, uint64_t, _QWORD))(*(_QWORD *)v49 + 808))(v49, &v98, v93, 0))
              {
                v7 = a7;
                v8 = a4;
                v9 = a3;
                goto LABEL_94;
              }
            }

          }
        }
        v36 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", v99, v103, 16);
      }
      while (v36);
    }
    v7 = a7;
  }
  os_unfair_lock_lock_with_options();
  v8 = a4;
  if (!qword_1ECDE7708 || (Count = CFArrayGetCount((CFArrayRef)qword_1ECDE7708), Count < 1))
  {
LABEL_91:
    v96 = 0;
    goto LABEL_92;
  }
  v51 = Count;
  v52 = 0;
  while (2)
  {
    ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex((CFArrayRef)qword_1ECDE7708, v52);
    v54 = ValueAtIndex;
    v55 = ValueAtIndex[5];
    if ((*((_DWORD *)v55 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(ValueAtIndex[5], 0, 0.0);
    v56 = atomic_load((unint64_t *)v55 + 4);
    if (!v56)
    {
LABEL_90:
      if (v51 == ++v52)
        goto LABEL_91;
      continue;
    }
    break;
  }
  v98 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v56 + 184))(&v98);
  v57 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v98);
  if (!CFCharacterSetIsLongCharacterMember(v57, v12))
  {

    goto LABEL_90;
  }
  v96 = v54;

LABEL_92:
  os_unfair_lock_unlock(&stru_1ECDE76E4);
  v9 = a3;
  do
LABEL_94:
    v58 = __ldaxr((unint64_t *)&v96);
  while (__stlxr(0, (unint64_t *)&v96));
  do
    v59 = (void *)__ldaxr((unint64_t *)&v97);
  while (__stlxr(v58, (unint64_t *)&v97));

  if (atomic_load((unint64_t *)&v97))
  {
LABEL_116:
    if (atomic_load((unint64_t *)&v97))
    {
      v73 = (void *)atomic_load((unint64_t *)&v97);
      v74 = v73;
      v75 = v74;
      v76 = v74[5];
      if ((*((_DWORD *)v76 + 4) & 0x80000000) == 0)
        TDescriptor::InitBaseFont(v74[5], 0, 0.0);
      v77 = atomic_load((unint64_t *)v76 + 4);

      v9 = a3;
      if (v77)
      {
        if (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v77 + 32))(v77, a2) & 1) == 0)
        {
          if (a5)
          {
            v79 = TCFBase<TDescriptor>::Allocate();
            if (v79)
            {
              *(_QWORD *)(v79 + 48) = &off_1E15DCAF0;
              *(_QWORD *)(v79 + 16) = 0;
              *(_QWORD *)(v79 + 24) = TDescriptor::Hash;
              *(_QWORD *)(v79 + 32) = 0;
              *(_QWORD *)(v79 + 40) = v79 + 48;
              *(_QWORD *)(v79 + 56) = 0;
              *(_DWORD *)(v79 + 64) = -2147482624;
              *(_QWORD *)(v79 + 72) = 0;
              v80 = (unsigned int *)(v77 + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
              *(_QWORD *)(v79 + 80) = v77;
              *(_QWORD *)(v79 + 88) = 0;
              v103[0] = (id)v79;
              do
                v82 = (void *)__ldaxr((unint64_t *)v103);
              while (__stlxr(0, (unint64_t *)v103));
              v99[0] = v82;

            }
            else
            {
              v99[0] = 0;
            }
            do
              v84 = __ldaxr((unint64_t *)v99);
            while (__stlxr(0, (unint64_t *)v99));
            *v7 = v84;

          }
          else
          {
            do
              v83 = __ldaxr((unint64_t *)&v97);
            while (__stlxr(0, (unint64_t *)&v97));
            *v7 = v83;
          }
          goto LABEL_143;
        }
      }
    }

    goto LABEL_122;
  }
  Table = GetTable();
  if (!Table || !Table[16])
  {
    v103[0] = (id)0xAAAAAAAAAAAAAAAALL;
    if (getenv("CT_PRESET_FALLBACKS_AND_COMBO_CHARSETS_GENERATION"))
      TDescriptorSource::CopyAllDescriptorsSorted(a1, 2, v103);
    else
      TDescriptorSource::CopyAllDescriptorsInternal(a1, 0, 2, (unint64_t *)v103);
    v62 = (const __CFArray *)atomic_load((unint64_t *)v103);
    if (v62)
    {
      v63 = CFArrayGetCount(v62);
      if (v63)
      {
        v64 = v63;
        v65 = 0;
        v66 = v11 - v10;
        while (1)
        {
          v67 = (TDescriptor **)CFArrayGetValueAtIndex(v62, v65);
          v68 = v67;
          v69 = v67[5];
          if ((*((_DWORD *)v69 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(v67[5], 0, 0.0);
          v70 = (TBaseFont *)atomic_load((unint64_t *)v69 + 4);
          if (v70
            && ((*(uint64_t (**)(TBaseFont *))(*(_QWORD *)v70 + 688))(v70) & 1) == 0
            && (a6 == 3 || !TBaseFont::IsUserInstalled(v70)))
          {
            if ((*(uint64_t (**)(TBaseFont *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 808))(v70, v92, v66, 0))
            {
              break;
            }
          }
          if (v64 == ++v65)
            goto LABEL_113;
        }
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v97, v68);
        os_unfair_lock_lock_with_options();
        v78 = (const __CFArray *)qword_1ECDE7708;
        if (qword_1ECDE7708)
        {
          v104.length = CFArrayGetCount((CFArrayRef)qword_1ECDE7708);
          v104.location = 0;
          if (!CFArrayContainsValue(v78, v104, v68))
            CFArrayAppendValue((CFMutableArrayRef)qword_1ECDE7708, v68);
        }
        os_unfair_lock_unlock(&stru_1ECDE76E4);
      }
    }
LABEL_113:
    if (!atomic_load((unint64_t *)&v97))
      AddToUseLastResort(v12);

    v8 = a4;
    v9 = a3;
    goto LABEL_116;
  }
LABEL_130:
  *v7 = 0;
LABEL_143:

}

_QWORD *std::unordered_set<`anonymous namespace'::TMissedRequest,`anonymous namespace'::TMissedRequestHasher,std::equal_to<`anonymous namespace'::TMissedRequest>,std::allocator<`anonymous namespace'::TMissedRequest>>::find[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  const void *v4;
  CFHashCode v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;

  v4 = (const void *)atomic_load((unint64_t *)a2);
  v5 = CFHash(v4);
  v6 = STL::hash_val<unsigned long,unsigned long,CFComparisonResult (*)(void const*,void const*,void *)>(v5, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(_QWORD **)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = (_QWORD *)*v12;
  if (*v12)
  {
    do
    {
      v14 = v13[1];
      if (v14 == v8)
      {
        {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v11)
          return 0;
      }
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t TDescriptorSource::GetMatchableAttributes(TDescriptorSource *this)
{
  if (qword_1ECDE7738 != -1)
    dispatch_once_f(&qword_1ECDE7738, 0, (dispatch_function_t)TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke);
  return qword_1ECDE7730;
}

uint64_t TDescriptorSource::GetMatchableNameAttributes(TDescriptorSource *this)
{
  if (qword_1ECDE7748 != -1)
    dispatch_once_f(&qword_1ECDE7748, 0, (dispatch_function_t)TDescriptorSource::GetMatchableNameAttributes(void)::$_0::__invoke);
  return qword_1ECDE7740;
}

void CreateDescriptorArrayFilteringDuplicates(const __CFArray *a1, CFComparisonResult (*a2)(const void *, const void *, void *), CFComparisonResult (__cdecl *a3)(const void *, const void *, void *))
{
  void *v6;
  void *v7;
  __int128 v8;
  const __CFSet *v9;
  const __CFSet *v10;
  void *v11;
  id v12;
  void *v13;
  const __CFSet *v14;
  __int128 v15;
  __int128 v16;
  id v17;
  id Mutable;

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (a2)
  {
    v6 = (void *)atomic_load((unint64_t *)&Mutable);
    objc_msgSend(v6, "addObjectsFromArray:", a2);
  }
  v17 = (id)0xAAAAAAAAAAAAAAAALL;
  do
    v7 = (void *)__ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  v17 = v7;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = v8;
  v16 = v8;
  v9 = (const __CFSet *)atomic_load((unint64_t *)&v17);
  TFontDescriptorDuplicateFilter::TFontDescriptorDuplicateFilter((TFontDescriptorDuplicateFilter *)&v15, v9, &TFontDescriptorDuplicateFilter::kCTFontDescriptorDuplicateFilterSetCallBacks);
  TFontDescriptorDuplicateFilter::PerformFilter((unint64_t *)&v15);
  v10 = (const __CFSet *)atomic_load((unint64_t *)&v16);
  if (CFSetGetCount(v10) >= 1)
  {
    v11 = (void *)atomic_load((unint64_t *)&v16);
    v12 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr((unint64_t)v12, (unint64_t *)&v17));

  }
  v14 = (const __CFSet *)atomic_load((unint64_t *)&v17);
  CreateSortedArrayWithSet(v14, a3, 0, a1);
  TFontDescriptorDuplicateFilter::~TFontDescriptorDuplicateFilter((id *)&v15);

}

void TCFBase_NEW<CTFontDescriptor,CGFont *,__CFDictionary const*>(unint64_t *a1, CGFont **a2, const __CFDictionary **a3)
{
  CTFontDescriptor *v6;
  void *v7;
  unint64_t v8;
  id v9;

  v6 = (CTFontDescriptor *)TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    CTFontDescriptor::CTFontDescriptor(v6, *a2, *a3);
    v9 = v7;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a1 = v8;

  }
  else
  {
    *a1 = 0;
  }
}

void CTFontLogSystemFontNameRequest()
{
  CFLog();
  if (CTFontLogSystemFontNameRequest::once != -1)
    dispatch_once_f(&CTFontLogSystemFontNameRequest::once, "CTFontLogSystemFontNameRequest", (dispatch_function_t)CTFontLogSystemFontNameRequest::$_0::__invoke);
}

uint64_t ___ZN17TDescriptorSource20SubstituteForHVFFontEP6TCFRefIPK10__CFStringES3__block_invoke()
{
  uint64_t result;

  result = GSFontCopyFontFilePath();
  qword_1ECDE7750 = result;
  return result;
}

void TFontDescriptorFilter::TFontDescriptorFilter(TFontDescriptorFilter *this, id a2, const CFSetCallBacks *a3)
{
  CFIndex Count;

  *(_QWORD *)this = off_1E15DDF40;
  *((_QWORD *)this + 1) = a2;
  if (!a3)
    a3 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
  Count = CFSetGetCount((CFSetRef)a2);
  *((_QWORD *)this + 2) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, a3);
}

void TFontDescriptorDuplicateFilter::TFontDescriptorDuplicateFilter(TFontDescriptorDuplicateFilter *this, const __CFSet *a2, const CFSetCallBacks *a3)
{
  _QWORD *v4;
  const __CFSet *v5;
  unint64_t v6;
  id v7;

  TFontDescriptorFilter::TFontDescriptorFilter(this, a2, a3);
  *v4 = &off_1E15DE6A0;
  v5 = (const __CFSet *)atomic_load(v4 + 1);
  CreateSortedArrayWithSet(v5, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedence, 0, &v7);
  do
    v6 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));

  *((_QWORD *)this + 3) = v6;
}

void TFontDescriptorDuplicateFilter::~TFontDescriptorDuplicateFilter(id *this)
{
  id *v2;

  *this = &off_1E15DE6A0;
  v2 = this + 2;

  *this = off_1E15DDF40;
}

{
  TFontDescriptorDuplicateFilter::~TFontDescriptorDuplicateFilter(this);
  JUMPOUT(0x186DC03ACLL);
}

CFTypeRef TFontDescriptorDuplicateFilter::CTFontDescriptorRetain(TFontDescriptorDuplicateFilter *this, CFTypeRef cf, const void *a3)
{
  return CFRetain(cf);
}

void TFontDescriptorDuplicateFilter::CTFontDescriptorRelease(TFontDescriptorDuplicateFilter *this, CFTypeRef cf, const void *a3)
{
  CFRelease(cf);
}

CFHashCode TFontDescriptorDuplicateFilter::CTFontDescriptorDuplicateFilterHash(TFontDescriptorDuplicateFilter *this, const void *a2)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  void *v6;
  CFHashCode v7;

  v2 = *((_QWORD *)this + 5);
  if ((*(_DWORD *)(v2 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)this + 5), 0, 0.0);
  v3 = atomic_load((unint64_t *)(v2 + 32));
  if (v3)
  {
    v4 = (void *)atomic_load((unint64_t *)(v3 + 96));
    v5 = v4;
    if (v5)
    {
      v6 = v5;
      v7 = CFHash(v5);

      return v7;
    }

  }
  return 0;
}

BOOL TFontDescriptorDuplicateFilter::CTFontDescriptorDuplicateFilterEqual(TFontDescriptorDuplicateFilter *this, _QWORD *a2, const void *a3)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  BOOL v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  BOOL v14;
  int v15;
  const void *v16;
  const void *v17;
  _BOOL8 v18;
  id v20;
  id v21;

  v4 = *((_QWORD *)this + 5);
  if ((*(_DWORD *)(v4 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)this + 5), 0, 0.0);
  v5 = (unint64_t *)atomic_load((unint64_t *)(v4 + 32));
  v6 = a2[5];
  if ((*(_DWORD *)(v6 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v6, 0, 0.0);
  v7 = (unint64_t *)atomic_load((unint64_t *)(v6 + 32));
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v9 = (void *)atomic_load(v5 + 12);
  v10 = v9;
  v11 = (void *)atomic_load(v7 + 12);
  v12 = v11;
  if (v10 != v12)
  {
    v13 = v12;
    if (v10)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (v14)
    {

    }
    else
    {
      v15 = CFEqual(v10, v12);

      if (v15)
        goto LABEL_18;
    }
    return 0;
  }

LABEL_18:
  v21 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, unint64_t *))(*v5 + 112))(&v21, v5);
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, unint64_t *))(*v7 + 112))(&v20, v7);
  v16 = (const void *)atomic_load((unint64_t *)&v21);
  v17 = (const void *)atomic_load((unint64_t *)&v20);
  if (v16 == v17)
  {
    v18 = 1;
  }
  else
  {
    v18 = 0;
    if (v16 && v17)
      v18 = CFEqual(v16, v17) != 0;
  }

  return v18;
}

double GetOpticalSize(const TBaseFont *a1)
{
  void *v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  const __CFDictionary *v8;
  double v9;
  id v11;
  id v12;
  uint64_t valuePtr;

  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)a1 + 128))(&v12);
  if (!atomic_load((unint64_t *)&v12))
    goto LABEL_10;
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a1 + 112))(&v11, a1);
  v3 = (void *)atomic_load((unint64_t *)&v11);
  v4 = v3;
  if (!v4)
  {

    goto LABEL_6;
  }
  v5 = v4;
  Value = (const __CFNumber *)CFDictionaryGetValue(v4, &unk_1E1614CE0);

  if (!Value)
  {
LABEL_6:
    v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v12);
    v7 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("NSCTVariationAxisDefaultValue"));
    if (v7)
    {
      valuePtr = -1;
      goto LABEL_8;
    }

LABEL_10:
    return 0.0;
  }
  valuePtr = -1;
  v7 = Value;
LABEL_8:
  CFNumberGetValue(v7, kCFNumberDoubleType, &valuePtr);
  v9 = *(double *)&valuePtr;

  return v9;
}

CFComparisonResult StringCompare<TCFRef<__CFString const*>,TCFRef<__CFString const*>>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  unint64_t v9;
  unint64_t v10;

  v2 = atomic_load(a1);
  v3 = atomic_load(a2);
  if (v2 == v3)
    return 0;
  v4 = atomic_load(a1);
  if (v4 && (v5 = atomic_load(a2)) != 0)
  {
    v6 = (const __CFString *)atomic_load(a1);
    v7 = (const __CFString *)atomic_load(a2);
    return CFStringCompare(v6, v7, 0x20uLL);
  }
  else
  {
    v9 = atomic_load(a1);
    v10 = atomic_load(a2);
    if (v9 < v10)
      return -1;
    else
      return 1;
  }
}

CFComparisonResult CTFontManagerCompareFontFamilyNames(const void *family1, const void *family2, void *context)
{
  if (family1 == family2)
    return 0;
  if (family1 && family2)
    return CFStringCompare((CFStringRef)family1, (CFStringRef)family2, 0x61uLL);
  if (family1 < family2)
    return -1;
  return 1;
}

CFComparisonResult CTFontManagerCompareFontDescriptors(_QWORD *a1, _QWORD *a2, void *a3)
{
  return CompareLocalizedDescriptorsByTraitsAndPrecedence(a1, a2, a3, 1, 1, 1);
}

CFComparisonResult CTFontManagerCompareFontDescriptors2(_QWORD *a1, _QWORD *a2, void *a3)
{
  return CompareLocalizedDescriptorsByTraitsAndPrecedence(a1, a2, a3, 1, 1, 0);
}

unint64_t _CTCopyDefaultFontFallbacksDictionary()
{
  unint64_t v0;
  id v2;

  CopyDefaultFontFallbacks(&v2);
  do
    v0 = __ldaxr((unint64_t *)&v2);
  while (__stlxr(0, (unint64_t *)&v2));

  return v0;
}

void TDescriptorSource::CopyPreferredFontDescriptor(unint64_t *a1, TPurgeableCache **a2, const __CFString *a3, const void *a4, const __CFString *a5, int a6)
{
  unint64_t v11;
  uint64_t v12;
  int SymbolicTraits;
  unint64_t v14;
  void *v15;
  id v16;
  id v17;

  v17 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopySystemFontDescriptorByName(a2, a3, a6, 8, (unint64_t *)&v17);
  v11 = atomic_load((unint64_t *)&v17);
  if (v11)
  {
    v12 = atomic_load((unint64_t *)&v17);
    SymbolicTraits = CTFontDescriptorGetSymbolicTraits(v12);
    if (HasRequiredSymbolicTraits(a4, SymbolicTraits))
      goto LABEL_11;
    TDescriptorSource::CopySystemFontDescriptorByName(a2, a5, a6, 8, (unint64_t *)&v16);
    do
      v14 = __ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    do
      v15 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(v14, (unint64_t *)&v17));

    v11 = atomic_load((unint64_t *)&v17);
    if (v11)
    {
LABEL_11:
      do
        v11 = __ldaxr((unint64_t *)&v17);
      while (__stlxr(0, (unint64_t *)&v17));
    }
  }
  *a1 = v11;

}

BOOL HasRequiredSymbolicTraits(CFTypeRef cf1, int a2)
{
  uint64_t v4;

  v4 = 0;
  while (!CFEqual(cf1, *(__CFString **)((char *)&HasRequiredSymbolicTraits(__CFString const*,unsigned int)::sRequiredTraits + v4)))
  {
    v4 += 16;
    if (v4 == 48)
      return 1;
  }
  return (*(_DWORD *)((_BYTE *)&HasRequiredSymbolicTraits(__CFString const*,unsigned int)::sRequiredTraits + v4 + 8) & a2) != 0;
}

void TDescriptorSource::CreateDescriptorForCSSFamily(TPurgeableCache **this@<X0>, const __CFString *cf1@<X1>, __CFString *a3@<X2>, unint64_t *a4@<X8>)
{
  const __CFString *v6;
  const __CFString *v8;
  int v9;
  int v10;
  void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFArray *Value;
  const __CFString *v15;
  CFIndex v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  const __CFString *v20;
  const __CFString *v21;
  CFTypeID v22;
  CFTypeID TypeID;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  const __CFArray *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  int v33;
  CFIndex v34;
  CFIndex v35;
  CFIndex v36;
  const __CFString *v37;
  CTFontRef UIFontForLanguage;
  const __CFArray *v40;
  const __CFString *v41;
  const __CFString *ValueAtIndex;
  const __CTFont *v43;
  void *v45;
  TSampleManager *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CTFont *v51;
  const __CTFont *v52;
  unint64_t v53;
  void *v54;
  int *v55;
  int v56;
  int v57;
  void *v58;
  unint64_t v60;
  void *v61;
  const __CFString *v62;
  CFIndex v63;
  CFIndex v64;
  CFIndex v65;
  const __CFString *v66;
  CTFontUIFontType uiType;
  char v69;
  const __CFArray *v70;
  CFIndex Count;
  const __CFString *v72;
  int v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  CFRange v80;

  if (!cf1)
  {
    *a4 = 0;
    return;
  }
  v6 = cf1;
  if (CFEqual(cf1, CFSTR("emoji")))
  {
    v8 = _CTGetEmojiFontName(0);
LABEL_8:
    TDescriptorSource::CopySystemFontDescriptorByName(this, v8, 0, 0, a4);
    return;
  }
  if (CFEqual(v6, CFSTR("fangsong")))
  {
    v8 = CFSTR("STFangsong");
    goto LABEL_8;
  }
  v79 = (id)0xAAAAAAAAAAAAAAAALL;
  LanguageIdentifierByNormalizing(a3, 0, (unint64_t *)&v79);
  if (v6 == CFSTR("system-ui") || CFEqual(v6, CFSTR("system-ui")))
  {
    v9 = 0;
    v6 = CFSTR("default");
    v10 = 2;
  }
  else if (v6 == CFSTR("ui-monospace"))
  {
    v9 = 0;
    v10 = 254;
    v6 = CFSTR("ui-monospace");
  }
  else if (CFEqual(v6, CFSTR("ui-monospace")))
  {
    v9 = 0;
    v10 = 254;
  }
  else if (v6 == CFSTR("ui-serif") || CFEqual(v6, CFSTR("ui-serif")))
  {
    v9 = 0;
    v10 = 241;
  }
  else
  {
    v10 = -1;
    v9 = 1;
  }
  v78 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyDefaultFontFallbacks(&v78);
  v11 = (void *)atomic_load((unint64_t *)&v78);
  v12 = v11;
  if (!v12)
  {

    goto LABEL_45;
  }
  v13 = v12;
  Value = (const __CFArray *)CFDictionaryGetValue(v12, v6);

  if (!Value || !CFArrayGetCount(Value))
    goto LABEL_45;
  uiType = v10;
  v69 = v9;
  v73 = v9 ^ 1;
  if (!TDescriptorSource::CanLanguageAffectCascadeList(a3, v15)
    || (v72 = (const __CFString *)CFArrayGetValueAtIndex(Value, 0), (Count = CFArrayGetCount(Value)) == 0))
  {
LABEL_41:
    if ((v69 & 1) != 0)
    {
      if (CFEqual(v6, CFSTR("sans-serif")))
      {
        UIFontForLanguage = CTFontCreateWithName(CFSTR("Helvetica"), 12.0, 0);
      }
      else
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, 0);
        UIFontForLanguage = CTFontCreateWithNameAndOptions(ValueAtIndex, 0.0, 0, 0x20000uLL);
      }
    }
    else
    {
      v41 = (const __CFString *)atomic_load((unint64_t *)&v79);
      UIFontForLanguage = CTFontCreateUIFontForLanguage(uiType, 0.0, v41);
    }
    v43 = UIFontForLanguage;
    if (UIFontForLanguage)
    {
      v76 = (id)0xAAAAAAAAAAAAAAAALL;
      v77 = 0;
      if (atomic_load((unint64_t *)&v79))
      {
        TSampleManager::TSampleManager((TSampleManager *)&v75);
        v45 = (void *)atomic_load((unint64_t *)&v79);
        TSampleManagerImp::CopySampleLettersForLanguage(v45, (unint64_t *)v75, 2u, (unint64_t *)&v76);
      }
      else
      {
        v76 = 0;
      }
      if (atomic_load((unint64_t *)&v76))
      {
        v75 = (id)0xAAAAAAAAAAAAAAAALL;
        v47 = (TSampleManager *)atomic_load((unint64_t *)&v76);
        TSampleManager::CreateStringWithLetters(v47, v40, (unint64_t *)&v75);
        v48 = (const __CFString *)atomic_load((unint64_t *)&v75);
        v49 = (const __CFString *)atomic_load((unint64_t *)&v75);
        v80.length = CFStringGetLength(v49);
        v50 = (const __CFString *)atomic_load((unint64_t *)&v79);
        v80.location = 0;
        v51 = CTFontCreateForStringWithLanguage(v43, v48, v80, v50);
        v52 = v51;
        if (v51)
        {
          v74 = (id)CTFontCopyPostScriptName(v51);
          do
            v53 = __ldaxr((unint64_t *)&v74);
          while (__stlxr(0, (unint64_t *)&v74));
          do
            v54 = (void *)__ldaxr((unint64_t *)&v77);
          while (__stlxr(v53, (unint64_t *)&v77));

          v55 = (int *)*((_QWORD *)v52 + 5);
          v56 = *v55;
          v57 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v55 + 50) + 160))(*((_QWORD *)v55 + 50));
          if (!HasRequiredSymbolicTraits(v6, v57 | ((v56 & 1) << 11)))
          {
            do
              v58 = (void *)__ldaxr((unint64_t *)&v77);
            while (__stlxr(0, (unint64_t *)&v77));

          }
        }

      }
      if (!atomic_load((unint64_t *)&v77))
      {
        v76 = (id)CTFontCopyPostScriptName(v43);
        do
          v60 = __ldaxr((unint64_t *)&v76);
        while (__stlxr(0, (unint64_t *)&v76));
        do
          v61 = (void *)__ldaxr((unint64_t *)&v77);
        while (__stlxr(v60, (unint64_t *)&v77));

      }
      CFRelease(v43);
      v62 = (const __CFString *)atomic_load((unint64_t *)&v77);
      TDescriptorSource::CopySystemFontDescriptorByName(this, v62, v73, 8, a4);

      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v16 = 0;
  v70 = Value;
  while (1)
  {
    v17 = CFArrayGetValueAtIndex(Value, v16);
    v18 = CFGetTypeID(v17);
    if (v18 != CFDictionaryGetTypeID())
      break;
    v19 = (const void *)atomic_load((unint64_t *)&v79);
    v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, v19);
    if (v20)
    {
      v21 = v20;
      v22 = CFGetTypeID(v20);
      if (v22 == CFStringGetTypeID())
      {
        *a4 = 0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopyPreferredFontDescriptor(a4, this, v21, v6, v72, v73);
        if (atomic_load(a4))
          goto LABEL_46;

      }
      else if (v22 == CFArrayGetTypeID())
      {
        v34 = CFArrayGetCount((CFArrayRef)v21);
        if (v34)
        {
          v35 = v34;
          v36 = 0;
          do
          {
            v37 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v21, v36);
            *a4 = 0xAAAAAAAAAAAAAAAALL;
            TDescriptorSource::CopyPreferredFontDescriptor(a4, this, v37, v6, v72, v73);
            if (atomic_load(a4))
              goto LABEL_46;

          }
          while (v35 != ++v36);
        }
      }
    }
LABEL_40:
    ++v16;
    Value = v70;
    if (v16 == Count)
      goto LABEL_41;
  }
  TypeID = CFArrayGetTypeID();
  if (!v17)
    goto LABEL_40;
  if (v18 != TypeID)
    goto LABEL_40;
  v25 = CFArrayGetCount((CFArrayRef)v17);
  if (!v25)
    goto LABEL_40;
  v26 = v25;
  v27 = 0;
  while (1)
  {
    v28 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v17, v27);
    v29 = (id)CFArrayGetValueAtIndex(v28, 0);
    v30 = (void *)atomic_load((unint64_t *)&v79);
    v31 = v30;
    if (v31 == v29)
      break;
    v32 = v31;
    if (v29 && v31)
    {
      v33 = CFEqual(v29, v31);

      if (v33)
        goto LABEL_76;
    }
    else
    {

    }
    if (v26 == ++v27)
      goto LABEL_40;
  }

LABEL_76:
  v63 = CFArrayGetCount(v28);
  if (v63 < 2)
  {
LABEL_45:
    *a4 = 0;
    goto LABEL_46;
  }
  v64 = v63;
  v65 = 1;
  while (1)
  {
    *a4 = 0xAAAAAAAAAAAAAAAALL;
    v66 = (const __CFString *)CFArrayGetValueAtIndex(v28, v65);
    TDescriptorSource::CopyPreferredFontDescriptor(a4, this, v66, v6, v72, v73);
    if (atomic_load(a4))
      break;

    if (v64 == ++v65)
      goto LABEL_45;
  }
LABEL_46:

}

void _CTClearFontFallbacksCache()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;

  TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(&v3);
  TLRUCacheImp<TRequestCacheNode,16ul>::RemoveAll(v3);
  do
    v0 = __ldxr((unsigned int *)&gLocaleChangedCount);
  while (__stxr(v0 + 1, (unsigned int *)&gLocaleChangedCount));
  do
    v1 = __ldxr((unsigned int *)&TGenerationSeed::sGeneration);
  while (__stxr(v1 + 1, (unsigned int *)&TGenerationSeed::sGeneration));
  do
    v2 = __ldxr((unsigned int *)&TGenerationSeed::sGeneration);
  while (__stxr(v2 + 1, (unsigned int *)&TGenerationSeed::sGeneration));
}

void _CTForceLocaleChange()
{
  unsigned int v0;
  unsigned int v1;

  do
    v0 = __ldxr((unsigned int *)&gLocaleChangedCount);
  while (__stxr(v0 + 1, (unsigned int *)&gLocaleChangedCount));
  do
    v1 = __ldxr((unsigned int *)&TGenerationSeed::sGeneration);
  while (__stxr(v1 + 1, (unsigned int *)&TGenerationSeed::sGeneration));
}

void TDescriptorSource::CopySpliceFontForName(id a1@<X0>, __CFString *a2@<X1>, const __CFNumber *a3@<X2>, const __CFNumber *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, const __CFNumber *a7@<X6>, __CFString *a8@<X7>, unint64_t *a9@<X8>, const __CFNumber *a10, const __CFNumber *a11, const __CFNumber *a12, const __CFNumber *a13, unsigned int a14, void *a15)
{
  id v16;
  const void *v21;
  const __CFString *LocalizedTrimSetKey;
  const __CFString *v23;
  void *v24;
  unint64_t *receiver;
  Class super_class;
  unint64_t v27;
  int v28;
  uint64_t receiver_low;
  unint64_t v30;
  _CTSplicedFontKey *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  const __CFDictionary *v60;
  const void *v61;
  void *v63;
  unint64_t v64;
  void *v65;
  __CFDictionary *v67;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t *v73;
  unsigned int v74;
  const void *v75;
  __CFString *v79;
  id v80;
  objc_super valuePtr;
  unsigned int v82[4];

  if (!TDescriptorSource::sSplicedFonts || (v16 = a1) == 0)
  {
    *a9 = 0;
    return;
  }
  v80 = a1;
  v21 = (const void *)*MEMORY[0x1E0C9AE50];
  if ((const void *)*MEMORY[0x1E0C9AE50] == a6)
  {
    a5 = 0;
  }
  else if (a5 == -1)
  {
    a5 = _AXSEnhanceTextLegibilityEnabled() != 0;
  }
  v79 = a2;
  if (a2)
  {
    LODWORD(valuePtr.receiver) = 0;
    LocalizedTrimSetKey = GetLocalizedTrimSetKey(a2, (unsigned int *)&valuePtr);
    v82[0] = 0;
    v23 = GetLocalizedTrimSetKey(0, v82);
    if (LocalizedTrimSetKey != v23 && (!LocalizedTrimSetKey || !v23 || !CFEqual(LocalizedTrimSetKey, v23))
      || LODWORD(valuePtr.receiver) != v82[0]
      || GetExuberatedGroupForLanguage(a2, 0))
    {
      goto LABEL_20;
    }
    do
      v24 = (void *)__ldaxr((unint64_t *)&v79);
    while (__stlxr(0, (unint64_t *)&v79));
    goto LABEL_19;
  }
  if (CurrentLocaleIsExuberated())
  {
    valuePtr.receiver = &v79;
    valuePtr.super_class = 0;
    _ExuberatedGroupForPreferredLanguages(0, (const __CFString **)&valuePtr.super_class);
    receiver = (unint64_t *)valuePtr.receiver;
    super_class = valuePtr.super_class;
    do
      v24 = (void *)__ldaxr(receiver);
    while (__stlxr((unint64_t)super_class, receiver));
LABEL_19:

  }
LABEL_20:
  v73 = (uint64_t *)a2;
  if (a7)
  {
    valuePtr.receiver = (id)0xAAAAAAAAAAAAAAAALL;
    CFNumberGetValue(a7, kCFNumberLongType, &valuePtr);
    v27 = (unint64_t)valuePtr.receiver;
  }
  else
  {
    v27 = 3;
  }
  if (a13)
  {
    LODWORD(valuePtr.receiver) = -1431655766;
    CFNumberGetValue(a13, kCFNumberIntType, &valuePtr);
    v28 = (int)valuePtr.receiver;
  }
  else
  {
    v28 = -1;
  }
  v74 = v28;
  if (a12)
  {
    LODWORD(valuePtr.receiver) = -1431655766;
    CFNumberGetValue(a12, kCFNumberIntType, &valuePtr);
    receiver_low = LODWORD(valuePtr.receiver);
  }
  else
  {
    receiver_low = 0;
  }
  if (v21 == a6
    || a5
    || v27 != 3
    || (v30 = atomic_load((unint64_t *)&v79), a13)
    || a15
    || a14
    || a4
    || a3
    || a11
    || a10
    || a8
    || v30
    || (_DWORD)receiver_low)
  {
    v31 = [_CTSplicedFontKey alloc];
    v32 = (void *)atomic_load((unint64_t *)&v79);
    v75 = a6;
    if (v31)
    {
      valuePtr.receiver = v31;
      valuePtr.super_class = (Class)_CTSplicedFontKey;
      v33 = objc_msgSendSuper2(&valuePtr, sel_init);
      if (v33)
      {
        *((_QWORD *)v33 + 4) = objc_msgSend(v16, "copy");
        *((_QWORD *)v33 + 5) = v32;
        if (a3)
        {
          *(_QWORD *)v82 = -1;
          CFNumberGetValue(a3, kCFNumberDoubleType, v82);
          v34 = *(_QWORD *)v82;
        }
        else
        {
          v34 = 0x7FEFFFFFFFFFFFFFLL;
        }
        *((_QWORD *)v33 + 6) = v34;
        v72 = v21;
        if (a4)
        {
          *(_QWORD *)v82 = -1;
          CFNumberGetValue(a4, kCFNumberDoubleType, v82);
          v38 = *(_QWORD *)v82;
        }
        else
        {
          v38 = 0x7FEFFFFFFFFFFFFFLL;
        }
        *((_QWORD *)v33 + 7) = v38;
        *((_BYTE *)v33 + 16) = v21 == a6;
        *((_QWORD *)v33 + 8) = a5;
        *((_QWORD *)v33 + 9) = v27;
        *((_QWORD *)v33 + 10) = a8;
        v35 = a5;
        if (a10)
        {
          *(_QWORD *)v82 = -1;
          CFNumberGetValue(a10, kCFNumberDoubleType, v82);
          v39 = *(_QWORD *)v82;
        }
        else
        {
          v39 = 0x7FEFFFFFFFFFFFFFLL;
        }
        v36 = v16;
        *((_QWORD *)v33 + 11) = v39;
        v37 = v27;
        if (a11)
        {
          *(_QWORD *)v82 = -1;
          CFNumberGetValue(a11, kCFNumberDoubleType, v82);
          v40 = *(_QWORD *)v82;
        }
        else
        {
          v40 = 0x7FEFFFFFFFFFFFFFLL;
        }
        *((_QWORD *)v33 + 12) = v40;
        *((_DWORD *)v33 + 5) = receiver_low;
        *((_DWORD *)v33 + 6) = v74;
        *((_DWORD *)v33 + 7) = a14;
        *((_QWORD *)v33 + 13) = a15;
        v71 = objc_msgSend(v36, "hash");
        v70 = objc_msgSend(v32, "hash");
        v41 = -[__CFString hash](a8, "hash");
        v42 = objc_msgSend(*((id *)v33 + 13), "hash");
        v43 = *((double *)v33 + 7);
        v44 = *((double *)v33 + 11);
        v45 = *((double *)v33 + 12);
        v46 = *((_QWORD *)v33 + 6) + 2654435769;
        if (*((double *)v33 + 6) == 0.0)
          v46 = 2654435769;
        v47 = *(_QWORD *)&v43 + 2654435769;
        if (v43 == 0.0)
          v47 = 2654435769;
        v48 = ((v46 >> 2) + (v46 << 6) + v47) ^ v46;
        v49 = (v35 + (v48 << 6) + (v48 >> 2) + 2654435769u) ^ v48;
        if (v72 == v75)
          v50 = 2654435770;
        else
          v50 = 2654435769;
        v51 = (v50 + (v49 << 6) + (v49 >> 2)) ^ v49;
        v52 = (v27 + (v51 << 6) + (v51 >> 2) + 2654435769u) ^ v51;
        v53 = *(_QWORD *)&v44 + 2654435769;
        if (v44 == 0.0)
          v53 = 2654435769;
        v54 = (v53 + (v52 << 6) + (v52 >> 2)) ^ v52;
        v55 = *(_QWORD *)&v45 + 2654435769;
        if (v45 == 0.0)
          v55 = 2654435769;
        v56 = (v55 + (v54 << 6) + (v54 >> 2)) ^ v54;
        v57 = ((v56 << 6) + receiver_low + (v56 >> 2) + 2654435769u) ^ v56;
        v58 = ((v57 << 6) + v74 + (v57 >> 2) + 2654435769u) ^ v57;
        *((_QWORD *)v33 + 1) = v70 ^ v71 ^ v41 ^ v42 ^ v58 ^ ((v58 << 6) + a14 + (v58 >> 2) + 2654435769u);
      }
      else
      {
        v35 = a5;
        v36 = v16;
        v37 = v27;
      }
    }
    else
    {
      v35 = a5;
      v36 = v16;
      v37 = v27;
      v33 = 0;
    }
    do
      v59 = (void *)__ldaxr((unint64_t *)&v80);
    while (__stlxr((unint64_t)v33, (unint64_t *)&v80));

    v27 = v37;
    v16 = v36;
    a5 = v35;
    a6 = v75;
  }
  *a9 = 0xAAAAAAAAAAAAAAAALL;
  v60 = (const __CFDictionary *)TDescriptorSource::sSplicedFonts;
  v61 = (const void *)atomic_load((unint64_t *)&v80);
  *a9 = (unint64_t)(id)CFDictionaryGetValue(v60, v61);
  if (!atomic_load(a9))
  {
    v63 = (void *)atomic_load((unint64_t *)&v80);
    MakeSpliceDescriptor((TDescriptorSource *)v16, v27, v73, a8, a10, a11, receiver_low, v74, (unint64_t *)&valuePtr, a14, a3, a4, a5, a6, v63, (uint64_t)a15);
    do
      v64 = __ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));
    do
      v65 = (void *)__ldaxr(a9);
    while (__stlxr(v64, a9));

    if (atomic_load(a9))
    {
      v67 = (__CFDictionary *)TDescriptorSource::sSplicedFonts;
      v68 = (const void *)atomic_load((unint64_t *)&v80);
      v69 = (const void *)atomic_load(a9);
      CFDictionarySetValue(v67, v68, v69);
    }
  }

}

void TRequestCacheNode::~TRequestCacheNode(id *this)
{
  id *v1;

  *this = &off_1E15DDA18;
  v1 = this + 2;

}

{
  id *v1;

  *this = &off_1E15DDA18;
  v1 = this + 2;

  JUMPOUT(0x186DC03ACLL);
}

uint64_t CharRangeToDescriptorMap::GetDescriptorIndexForChar(CharRangeToDescriptorMap *this, unsigned int a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 64);
  if (*v2 <= a2 && v2[1] > a2)
    return *((_QWORD *)v2 + 1);
  v2 = *(unsigned __int16 **)this;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 1);
  if (v3 == *(unsigned __int16 **)this)
    return -1;
  v4 = ((uint64_t)v3 - *(_QWORD *)this) >> 4;
  while (1)
  {
    v5 = v4 >> 1;
    v6 = &v2[8 * (v4 >> 1)];
    if (v6[1] <= a2)
    {
      v2 = v6 + 8;
      v5 = v4 + ~v5;
      goto LABEL_9;
    }
    if (*v6 <= a2)
      break;
    v3 = &v2[8 * (v4 >> 1)];
LABEL_9:
    v4 = v5;
    if (!v5)
      return -1;
  }
  if (v4 >= 2)
  {
    do
    {
      v8 = v5 >> 1;
      v9 = &v2[8 * (v5 >> 1)];
      v10 = v9[1];
      v11 = v9 + 8;
      v5 += ~(v5 >> 1);
      if (v10 <= a2)
        v2 = v11;
      else
        v5 = v8;
    }
    while (v5);
  }
  v12 = v6 + 8;
  if (v3 != v6 + 8)
  {
    v13 = ((char *)v3 - (char *)(v6 + 8)) >> 4;
    v3 = v12;
    do
    {
      v14 = v13 >> 1;
      v15 = &v3[8 * (v13 >> 1)];
      v17 = *v15;
      v16 = v15 + 8;
      v13 += ~(v13 >> 1);
      if (v17 > a2)
        v13 = v14;
      else
        v3 = v16;
    }
    while (v13);
  }
  if (v2 != v3)
  {
    *((_QWORD *)this + 64) = v2;
    return *((_QWORD *)v2 + 1);
  }
  return -1;
}

CFIndex TFontDescriptorFilter::GetResultCount(TFontDescriptorFilter *this)
{
  const __CFSet *v1;

  v1 = (const __CFSet *)atomic_load((unint64_t *)this + 2);
  return CFSetGetCount(v1);
}

id TFontDescriptorFilter::CopyFilteredSet(TFontDescriptorFilter *this)
{
  void *v1;

  v1 = (void *)atomic_load((unint64_t *)this + 2);
  return v1;
}

unint64_t TFontDescriptorFilter::CreateSortedArray(TFontDescriptorFilter *this, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), void *a3)
{
  const __CFSet *v3;
  unint64_t v4;
  id v6;

  v3 = (const __CFSet *)atomic_load((unint64_t *)this + 1);
  CreateSortedArrayWithSet(v3, a2, a3, &v6);
  do
    v4 = __ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  return v4;
}

unint64_t TFontDescriptorFilter::CreateFilteredArray(TFontDescriptorFilter *this, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), void *a3)
{
  const __CFSet *v3;
  unint64_t v4;
  id v6;

  v3 = (const __CFSet *)atomic_load((unint64_t *)this + 2);
  CreateSortedArrayWithSet(v3, a2, a3, &v6);
  do
    v4 = __ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  return v4;
}

void TFontDescriptorFilter::PerformFilter(unint64_t *context, int a2)
{
  void (__cdecl *v4)(const void *, void *);
  unint64_t *v5;
  const __CFAllocator *v6;
  const __CFSet *v7;
  CFMutableSetRef MutableCopy;
  void *v9;
  const __CFSet *v10;

  if (atomic_load(context + 1))
  {
    if (a2 == 1)
    {
      v4 = (void (__cdecl *)(const void *, void *))TFontDescriptorFilter::FilterFunctionToAdd;
    }
    else
    {
      v5 = context + 2;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v7 = (const __CFSet *)atomic_load(context + 1);
      MutableCopy = CFSetCreateMutableCopy(v6, 0, v7);
      do
        v9 = (void *)__ldaxr(v5);
      while (__stlxr((unint64_t)MutableCopy, v5));

      v4 = (void (__cdecl *)(const void *, void *))TFontDescriptorFilter::FilterFunctionToRemove;
    }
    v10 = (const __CFSet *)atomic_load(context + 1);
    CFSetApplyFunction(v10, v4, context);
  }
}

const __CFSet *TFontDescriptorDuplicateFilter::FilterShouldIncludeDescriptor(uint64_t a1, const void *a2)
{
  const __CFSet *result;

  result = (const __CFSet *)atomic_load((unint64_t *)(a1 + 8));
  if (result)
    return (const __CFSet *)(CFSetContainsValue(result, a2) != 0);
  return result;
}

const __CFDictionary *TDescriptorSource::CopySystemWideFallbackDescriptor(unsigned int)const::$_0::__invoke()
{
  const __CFDictionary *result;

  qword_1ECDE7708 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  result = (const __CFDictionary *)GetCTPresetFallbacksDictionary();
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("SystemWideFallbacks"));
    qword_1ECDE76F8 = (uint64_t)result;
  }
  return result;
}

CFCharacterSetRef GetSystemFontsComboCharacterSet(void)::$_0::__invoke()
{
  CFCharacterSetRef result;

  result = TDescriptorSource::CopyPredefinedCharacterSet((TDescriptorSource *)CFSTR("CTFontSystemComboCharacterSet"), 0);
  qword_1ECDE7770 = (uint64_t)result;
  return result;
}

void TDescriptorSource::CopyLastResort(void)const::$_0::__invoke()
{
  uint64_t v0;
  void *v2;
  TDescriptor **v3;
  TDescriptor **v4;
  TDescriptor *v5;
  unint64_t v6;
  TCGFontCache *v7;
  unint64_t v9;
  id v10;
  uint8_t *v11;
  CFDataRef v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char v22[8];

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)v22);
  v21 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v21, v0, CFSTR("LastResort"), 22, 3, 0, 0, 0, -1, *MEMORY[0x1E0C9AE40]);
  if (atomic_load((unint64_t *)&v21))
  {
    v2 = (void *)atomic_load((unint64_t *)&v21);
    v3 = v2;
    v4 = v3;
    v5 = v3[5];
    if ((*((_DWORD *)v5 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v3[5], 0, 0.0);
    v6 = atomic_load((unint64_t *)v5 + 4);

    if (v6)
    {
      v20 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v6 + 200))(&v19, v6);
      v7 = (TCGFontCache *)atomic_load((unint64_t *)&v19);
      TCGFontCache::CopyFont(v7, 0, 0, (unint64_t *)&v20);

      if (atomic_load((unint64_t *)&v20))
      {
        do
          v9 = __ldaxr((unint64_t *)&v21);
        while (__stlxr(0, (unint64_t *)&v21));
        qword_1ECDE7710 = v9;
        v10 = v20;
LABEL_19:

        goto LABEL_20;
      }

    }
  }
  CFLog();
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  v11 = getsectiondata((const mach_header_64 *)&dword_1847CA000, "__FONT_DATA", "__LastResort", (unint64_t *)&v20);
  if (v11)
  {
    v12 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, (CFIndex)v20, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (FPFontCreateWithData())
    {
      v13 = (void *)CGFontCreateWithParserFont();
      v14 = v13;
      if (v13)
      {
        v19 = (id)0xAAAAAAAAAAAAAAAALL;
        v17 = v13;
        TCFBase_NEW<CTFontDescriptor,CGFont *&,is_inmemory_t const&>(&v17, (unint64_t *)&v18);
        do
          v15 = (void *)__ldaxr((unint64_t *)&v18);
        while (__stlxr(0, (unint64_t *)&v18));
        v19 = v15;

        do
          v16 = __ldaxr((unint64_t *)&v19);
        while (__stlxr(0, (unint64_t *)&v19));
        qword_1ECDE7710 = v16;

      }
      FPFontRelease();
    }
    v10 = v12;
    goto LABEL_19;
  }
LABEL_20:

}

CFCharacterSetRef TDescriptorSource::GetAppleColorEmojiCharacterSet(void)const::$_0::__invoke()
{
  const __CFString *v0;
  CFCharacterSetRef result;

  v0 = _CTGetEmojiFontName(0);
  result = CreateCharacterSetForFont(v0);
  qword_1ECDE7720 = (uint64_t)result;
  return result;
}

CFSetRef TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke()
{
  CFSetRef result;
  void *values[19];

  values[18] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("NSCTFontPostScriptNameAttribute");
  values[1] = CFSTR("NSFontNameAttribute");
  values[2] = CFSTR("NSFontVisibleNameAttribute");
  values[3] = CFSTR("NSFontFamilyAttribute");
  values[4] = CFSTR("NSFontFaceAttribute");
  values[5] = CFSTR("NSCTFontUIUsageAttribute");
  values[6] = CFSTR("NSCTFontFileURLAttribute");
  values[7] = CFSTR("NSCTFontTraitsAttribute");
  values[8] = CFSTR("NSCTFontCharacterSetAttribute");
  values[9] = CFSTR("NSCTFontLanguagesAttribute");
  values[10] = CFSTR("NSCTFontDesignLanguagesAttribute");
  values[11] = CFSTR("NSCTFontFormatAttribute");
  values[12] = CFSTR("NSCTFontRegistrationScopeAttribute");
  values[13] = CFSTR("NSCTFontPriorityAttribute");
  values[14] = CFSTR("NSCTFontDomainAttribute");
  values[15] = CFSTR("NSCTFontDownloadedAttribute");
  values[16] = CFSTR("NSCTFontUserInstalledAttribute");
  values[17] = CFSTR("CTFontDownloadableStubAttribute");
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 18, MEMORY[0x1E0C9B3B0]);
  qword_1ECDE7730 = (uint64_t)result;
  return result;
}

CFSetRef TDescriptorSource::GetMatchableNameAttributes(void)::$_0::__invoke()
{
  CFSetRef result;
  const void *v1[8];

  v1[7] = *(const void **)MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("NSCTFontPostScriptNameAttribute");
  v1[1] = CFSTR("NSFontNameAttribute");
  v1[2] = CFSTR("NSFontVisibleNameAttribute");
  v1[3] = CFSTR("NSFontFamilyAttribute");
  v1[4] = CFSTR("NSFontFaceAttribute");
  v1[5] = CFSTR("NSCTFontUIUsageAttribute");
  v1[6] = CFSTR("NSCTFontFileURLAttribute");
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, 7, MEMORY[0x1E0C9B3B0]);
  qword_1ECDE7740 = (uint64_t)result;
  return result;
}

void TCFMutableSet::TCFMutableSet(TCFMutableSet *this, CFSetRef theSet)
{
  const __CFAllocator *v3;
  CFMutableSetRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theSet)
    MutableCopy = CFSetCreateMutableCopy(v3, 0, theSet);
  else
    MutableCopy = CFSetCreateMutable(v3, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)this = MutableCopy;
}

void TDescriptorSource::CopyDescriptorForRequest(__CFDictionary const*,__CFSet const*,__CFDictionary const*,unsigned long)const::$_0::__invoke(void *key, unint64_t *a2)
{
  __CFDictionary *v3;

  v3 = (__CFDictionary *)atomic_load(a2);
  CFDictionaryRemoveValue(v3, key);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a1);
}

uint64_t CTFontLogSystemFontNameRequest::$_0::__invoke(CTFontLogSystemFontNameRequest::$_0 *this, void *a2)
{
  return CFLog();
}

uint64_t ___ZL18IsHVFCompatibleAppv_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
  {
    v1 = 0;
    while (1)
    {
      result = _CFAppVersionCheckLessThan();
      if ((_DWORD)result)
        break;
      v1 += 8;
      if (v1 == 16)
        return result;
    }
    _MergedGlobals_16 = 1;
  }
  return result;
}

CFArrayRef GetOrderedLanguages(void)::$_0::__invoke()
{
  CFArrayRef result;
  void *values[11];

  values[10] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("zh-Hans");
  values[1] = CFSTR("zh-Hant");
  values[2] = CFSTR("zh-HK");
  values[3] = CFSTR("zh-MO");
  values[4] = CFSTR("ja");
  values[5] = CFSTR("ko");
  values[6] = CFSTR("ar");
  values[7] = CFSTR("ur");
  values[8] = CFSTR("my");
  values[9] = CFSTR("my-Qaag");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 10, MEMORY[0x1E0C9B378]);
  qword_1ECDE7790 = (uint64_t)result;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void **)v2[3];
      v2[3] = 0;
      if (v4)
        std::default_delete<CharRangeToDescriptorMap>::operator()[abi:nn180100]((uint64_t)(v2 + 3), v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t CopyDefaultFontFallbacks(void)::$_0::__invoke()
{
  uint64_t result;

  result = CTFontGetPlistFromGSFontCache(CFSTR("DefaultFontFallbacks.plist"), 0);
  qword_1ECDE77B0 = result;
  return result;
}

void TFontDescriptorFilter::FilterFunctionToRemove(TFontDescriptorFilter *this, unint64_t *a2, void *a3)
{
  __CFSet *v5;

  if (((*(uint64_t (**)(unint64_t *, TFontDescriptorFilter *, void *))(*a2 + 56))(a2, this, a3) & 1) == 0)
  {
    v5 = (__CFSet *)atomic_load(a2 + 2);
    CFSetRemoveValue(v5, this);
  }
}

BOOL std::equal_to<`anonymous namespace'::TMissedRequest>::operator()[abi:nn180100](unint64_t *a1, unint64_t *a2)
{
  _BOOL8 result;
  const void *v3;
  const void *v4;

  if (a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v3 = (const void *)atomic_load(a1);
  v4 = (const void *)atomic_load(a2);
  if (v3 == v4)
    return 1;
  result = 0;
  if (v3)
  {
    if (v4)
      return CFEqual(v3, v4) != 0;
  }
  return result;
}

uint64_t std::default_delete<CharRangeToDescriptorMap>::operator()[abi:nn180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)(a2 + 65));
    v4 = a2;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
    return MEMORY[0x186DC03AC](a2, 0x10E0C404E22EBADLL);
  }
  return result;
}

void TLocaleManager::TLocaleManager(TLocaleManager *this)
{
  if (qword_1ECDE7808 != -1)
    dispatch_once_f(&qword_1ECDE7808, 0, (dispatch_function_t)GetTheLocaleManager(void)::$_0::__invoke);
  *(_QWORD *)this = qword_1ECDE7800;
  os_unfair_lock_lock_with_options();
}

void TLocaleManagerImp::CopyLanguagesFromCharacterSet(TLocaleManagerImp *this@<X0>, const __CFCharacterSet *a2@<X1>, const __CFArray *a3@<X2>, id a4@<X3>, unint64_t *a5@<X8>)
{
  double v8;
  const __CFArray *SupportedLanguages;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const __CFString *ValueAtIndex;
  __CFString *CanonicalLanguageIdentifierFromString;
  const __CFSet *v17;
  const __CFCharacterSet *v19;
  const __CFCharacterSet *v20;
  __CFString *v21;
  __CFArray *v22;
  __CFString *v23;
  __CFSet *v24;
  unint64_t v25;
  id v27;
  id v28;
  id v29;

  v29 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableSet::TCFMutableSet((TCFMutableSet *)&v29, a4);
  v28 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v28, a3);
  SupportedLanguages = (const __CFArray *)TLocaleManagerImp::GetSupportedLanguages(this, v8);
  if (SupportedLanguages)
  {
    v10 = SupportedLanguages;
    Count = CFArrayGetCount(SupportedLanguages);
    if (Count)
    {
      v12 = Count;
      v13 = 0;
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v13);
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v14, ValueAtIndex);
        if (CanonicalLanguageIdentifierFromString)
        {
          v17 = (const __CFSet *)atomic_load((unint64_t *)&v29);
          if (!CFSetContainsValue(v17, CanonicalLanguageIdentifierFromString))
          {
            v27 = (id)0xAAAAAAAAAAAAAAAALL;
            TLocaleManagerImp::CopyExamplarSetForLanguage(this, CanonicalLanguageIdentifierFromString, (unint64_t *)&v27);
            if (atomic_load((unint64_t *)&v27))
            {
              v19 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v27);
              if (CFCharacterSetIsSupersetOfSet(a2, v19))
              {
                v20 = a2;
                v21 = CanonicalLanguageIdentifierFromString;
                v22 = (__CFArray *)atomic_load((unint64_t *)&v28);
                CFArrayAppendValue(v22, v21);
                v23 = v21;
                a2 = v20;

              }
            }
            v24 = (__CFSet *)atomic_load((unint64_t *)&v29);
            CFSetAddValue(v24, CanonicalLanguageIdentifierFromString);

          }
        }

        ++v13;
      }
      while (v12 != v13);
    }
  }
  do
    v25 = __ldaxr((unint64_t *)&v28);
  while (__stlxr(0, (unint64_t *)&v28));
  *a5 = v25;

}

BOOL TLocaleManagerImp::CharacterSetCoversLanguage(TLocaleManagerImp *this, const __CFCharacterSet *a2, const __CFString *a3)
{
  const __CFCharacterSet *v5;
  _BOOL8 v6;
  id v8;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  TLocaleManagerImp::CopyExamplarSetForLanguage(this, a3, (unint64_t *)&v8);
  if (atomic_load((unint64_t *)&v8))
  {
    v5 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v8);
    v6 = CFCharacterSetIsSupersetOfSet(a2, v5) != 0;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void TLocaleManagerImp::CopyExamplarSetForLanguage(TLocaleManagerImp *this@<X0>, const __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  const __CFAllocator *v7;
  __CFString *CanonicalLanguageIdentifierFromString;
  const __CFSet *v9;
  const __CFDictionary *v10;
  const __CFLocale *v12;
  const __CFLocale *v13;
  void *Value;
  const void *v16;
  __CFDictionary *v17;
  __CFSet *v19;

  if (!atomic_load((unint64_t *)this + 1))
    goto LABEL_6;
  v6 = atomic_load((unint64_t *)this + 2);
  if (!a2 || !v6)
    goto LABEL_6;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  v9 = (const __CFSet *)atomic_load((unint64_t *)this + 2);
  if (CFSetContainsValue(v9, CanonicalLanguageIdentifierFromString))
  {

LABEL_6:
    *a3 = 0;
    return;
  }
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (const __CFDictionary *)atomic_load((unint64_t *)this + 1);
  *a3 = (unint64_t)(id)CFDictionaryGetValue(v10, CanonicalLanguageIdentifierFromString);
  if (!atomic_load(a3))
  {
    v12 = CFLocaleCreate(v7, CanonicalLanguageIdentifierFromString);
    if (v12)
    {
      v13 = v12;
      Value = (void *)CFLocaleGetValue(v12, (CFLocaleKey)*MEMORY[0x1E0C9B078]);
      TCFRef<__CTFont const*>::Retain(a3, Value);
      if (atomic_load(a3))
      {
        v16 = (const void *)atomic_load(a3);
        v17 = (__CFDictionary *)atomic_load((unint64_t *)this + 1);
        CFDictionarySetValue(v17, CanonicalLanguageIdentifierFromString, v16);
      }
      CFRelease(v13);
    }
    if (!atomic_load(a3))
    {
      v19 = (__CFSet *)atomic_load((unint64_t *)this + 2);
      CFSetAddValue(v19, CanonicalLanguageIdentifierFromString);
    }
  }

}

unint64_t TLocaleManagerImp::GetSupportedLanguages(TLocaleManagerImp *this, double a2)
{
  double Helper_x8__InternationalSupportVersionNumber;
  uint64_t v5;
  void *v6;
  CFArrayRef v8;
  CFArrayRef v9;
  const __CFSet *v10;
  const __CFSet *v11;
  void *v13;
  __CFSet *v14;
  __CFSet *v15;
  const __CFSet *v16;
  unint64_t v17;
  void *v18;
  unint64_t v20;
  void *v21;
  id v23;
  id v24;
  id v25;

  if (!atomic_load((unint64_t *)this))
  {
    Helper_x8__InternationalSupportVersionNumber = gotLoadHelper_x8__InternationalSupportVersionNumber(a2);
    if (*(_QWORD *)(v5 + 3944))
    {
      v6 = (void *)MEMORY[0x186DC070C](Helper_x8__InternationalSupportVersionNumber);
      TCFRef<__CTFont const*>::Retain((unint64_t *)this, (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "supportedLanguages"), "allObjects"));
      objc_autoreleasePoolPop(v6);
    }
    if (!atomic_load((unint64_t *)this))
    {
      v8 = CFLocaleCopyAvailableLocaleIdentifiers();
      v9 = CFLocaleCopyISOLanguageCodes();
      v25 = (id)0xAAAAAAAAAAAAAAAALL;
      v10 = v8;
      TCFMutableSet::TCFMutableSet((TCFMutableSet *)&v25, v10);

      v24 = (id)0xAAAAAAAAAAAAAAAALL;
      v11 = v9;
      TCFMutableSet::TCFMutableSet((TCFMutableSet *)&v24, v11);

      if (atomic_load((unint64_t *)&v24))
      {
        v13 = (void *)atomic_load((unint64_t *)&v25);
        objc_msgSend(v13, "intersectSet:");
      }
      v14 = (__CFSet *)atomic_load((unint64_t *)&v25);
      CFSetAddValue(v14, CFSTR("zh-Hans"));
      v15 = (__CFSet *)atomic_load((unint64_t *)&v25);
      CFSetAddValue(v15, CFSTR("zh-Hant"));
      v16 = (const __CFSet *)atomic_load((unint64_t *)&v25);
      CreateSortedArrayWithSet(v16, 0, 0, &v23);
      do
        v17 = __ldaxr((unint64_t *)&v23);
      while (__stlxr(0, (unint64_t *)&v23));
      do
        v18 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v17, (unint64_t *)this));

      if (!atomic_load((unint64_t *)this))
      {
        v23 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
        do
          v20 = __ldaxr((unint64_t *)&v23);
        while (__stlxr(0, (unint64_t *)&v23));
        do
          v21 = (void *)__ldaxr((unint64_t *)this);
        while (__stlxr(v20, (unint64_t *)this));

        CFLog();
      }

    }
  }
  return atomic_load((unint64_t *)this);
}

_QWORD *CreateNormalizedLanguages@<X0>(const __CFArray *a1@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E15DF320;
  v5 = v4;
  CreateCopyOfArrayByApplyingFunction(a1, (uint64_t)v4, a2);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *CreateCanonicalLanguages@<X0>(const __CFArray *a1@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E15DF248;
  v6[1] = CFStringGetTypeID();
  v7 = v6;
  CreateCopyOfArrayByApplyingFunction(a1, (uint64_t)v6, a2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

BOOL CanonicalLocaleIdentifiersMatch(CFStringRef theString, CFStringRef prefix)
{
  int HasPrefix;
  int v5;
  BOOL v6;
  const __CFAllocator *v8;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const __CFArray *v11;
  CFIndex v12;
  uint64_t v13;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v16;

  if (theString == prefix)
    return 1;
  if ((theString != 0) == (prefix == 0))
    return 0;
  HasPrefix = CFStringHasPrefix(theString, prefix);
  v5 = CFStringHasPrefix(prefix, theString);
  if (HasPrefix && v5)
    return 1;
  if (!(HasPrefix | v5))
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("-"));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  v11 = CFStringCreateArrayBySeparatingStrings(v8, prefix, CFSTR("-"));
  v12 = CFArrayGetCount(v11);
  if (v12 >= Count)
    v13 = Count;
  else
    v13 = v12;
  if (v13 < 1)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    for (i = 0; i != v13; v6 = i >= v13)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, i);
      v16 = CFArrayGetValueAtIndex(v11, i);
      if (ValueAtIndex != v16 && (!ValueAtIndex || !v16 || !CFEqual(ValueAtIndex, v16)))
        break;
      ++i;
    }
  }

  return v6;
}

_QWORD *CreateArrayOfNormalizedLanguagesWithOrder@<X0>(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6[0] = &off_1E15E35B8;
    v7 = v6;
    CreateOrderedArray(a2, a1, (uint64_t)v6, a4);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  else
  {
    v8[0] = &off_1E15DF488;
    v9 = v8;
    CreateOrderedArray(a2, a1, (uint64_t)v8, a4);
    result = v9;
    if (v9 == v8)
    {
      v5 = 4;
      result = v8;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  if (!result)
    return result;
  v5 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t CurrentLocaleIsChina(void)
{
  if (qword_1ECDE77E0 != -1)
    dispatch_once(&qword_1ECDE77E0, &__block_literal_global_1);
  return _MergedGlobals_17[0];
}

uint64_t ___Z20CurrentLocaleIsChinav_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  result = objc_msgSend((id)objc_msgSend(v0, "objectForKey:", *MEMORY[0x1E0C997B0]), "isEqualToString:", CFSTR("CN"));
  _MergedGlobals_17[0] = result;
  return result;
}

void CopyPreferredNumberingSystem(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = _CFLocaleCopyPreferred();
  v3 = (void *)v2;
  if (v2)
  {
    MEMORY[0x186DBF2C0](v2);
    v2 = _CFLocaleCopyNumberingSystemForLocaleIdentifier();
  }
  *a1 = v2;

}

void HandleLocaleChanged(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v5;
  unsigned int v6;

  do
    v5 = __ldxr((unsigned int *)&gLocaleChangedCount);
  while (__stxr(v5 + 1, (unsigned int *)&gLocaleChangedCount));
  do
    v6 = __ldxr((unsigned int *)&TGenerationSeed::sGeneration);
  while (__stxr(v6 + 1, (unsigned int *)&TGenerationSeed::sGeneration));
}

uint64_t ShouldCheckForKnownUrduSequences(void)
{
  uint64_t result;
  int v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFAllocator *v7;
  const __CFString *v8;
  __CFString *v9;
  __CFString *ValueAtIndex;
  const __CFDictionary *v11;
  __CFString *Value;
  __CFString *v13;
  void *v14;
  __CFString *v15;
  __CFString *v16;
  int v17;
  const __CFString *v18;
  unint64_t v19;
  void *v20;
  const __CFDictionary *v21;
  char v22;
  int v23;
  char v24;
  void *key;
  id v26;
  id v27;
  id ComponentsFromLocaleIdentifier;

  result = _os_feature_enabled_impl();
  if (!(_DWORD)result)
    return result;
  if (qword_1ECDE77F0 != -1)
    dispatch_once_f(&qword_1ECDE77F0, 0, (dispatch_function_t)GetLocaleChangedCount(void)::$_0::__invoke);
  v1 = gLocaleChangedCount;
  if (dword_1ECDE77D4 == gLocaleChangedCount)
    return byte_1ECDE77C1 != 0;
  v2 = CFLocaleCopyPreferredLanguages();
  v3 = v2;
  v23 = v1;
  if (!v2 || (Count = CFArrayGetCount(v2)) == 0)
  {
    v24 = 0;
    goto LABEL_41;
  }
  v5 = Count;
  v24 = 0;
  v6 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (void *)*MEMORY[0x1E0C9B088];
  v8 = CFSTR("ar");
  while (1)
  {
    v9 = (__CFString *)v8;
    ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v3, v6);
    ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v7, ValueAtIndex);
    v11 = (const __CFDictionary *)atomic_load((unint64_t *)&ComponentsFromLocaleIdentifier);
    if (!v11)
    {
      v13 = 0;
      goto LABEL_14;
    }
    Value = (__CFString *)CFDictionaryGetValue(v11, key);
    if (Value == CFSTR("ks"))
      break;
    v13 = Value;
    if (Value)
    {
      if (CFEqual(Value, CFSTR("ks")))
        break;
    }
LABEL_14:
    v27 = (id)0xAAAAAAAAAAAAAAAALL;
    LanguageIdentifierByNormalizing(ValueAtIndex, 0, (unint64_t *)&v27);
    v14 = (void *)atomic_load((unint64_t *)&v27);
    v15 = v14;
    if (v15 == ValueAtIndex)
    {

      goto LABEL_27;
    }
    v16 = v15;
    if (ValueAtIndex && v15)
    {
      v17 = CFEqual(v15, ValueAtIndex);

      if (v17)
        goto LABEL_27;
    }
    else
    {

    }
    v18 = (const __CFString *)atomic_load((unint64_t *)&v27);
    v26 = CFLocaleCreateComponentsFromLocaleIdentifier(v7, v18);
    do
      v19 = __ldaxr((unint64_t *)&v26);
    while (__stlxr(0, (unint64_t *)&v26));
    v8 = v9;
    do
      v20 = (void *)__ldaxr((unint64_t *)&ComponentsFromLocaleIdentifier);
    while (__stlxr(v19, (unint64_t *)&ComponentsFromLocaleIdentifier));

    v21 = (const __CFDictionary *)atomic_load((unint64_t *)&ComponentsFromLocaleIdentifier);
    if (!v21)
      goto LABEL_35;
    v13 = (__CFString *)CFDictionaryGetValue(v21, key);
LABEL_27:
    if (v13 == CFSTR("ur"))
    {
      v24 = 1;
      v22 = 1;
      v8 = v9;
      goto LABEL_36;
    }
    v8 = v9;
    if (v13)
    {
      if (CFEqual(v13, CFSTR("ur")))
      {
        v24 = 1;
LABEL_31:
        v22 = 1;
        goto LABEL_36;
      }
      if (v13 == v9 || CFEqual(v13, v9))
        goto LABEL_31;
    }
LABEL_35:
    v22 = 0;
LABEL_36:

    if ((v22 & 1) == 0 && ++v6 != v5)
      continue;
    goto LABEL_41;
  }

LABEL_41:
  byte_1ECDE77C1 = v24;
  dword_1ECDE77D4 = v23;

  return byte_1ECDE77C1 != 0;
}

uint64_t EnumerateKnownUrduSequencesInString(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*ISEnumerateKnownUrduSequencesInStringSymbolLoc)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v9;

  v7 = result;
  if (!qword_1ECDE7818)
  {
    result = _sl_dlopen();
    qword_1ECDE7818 = result;
  }
  if (qword_1ECDE7818)
  {
    result = getISEnumerateKnownUrduSequencesInStringSymbolLoc();
    if (result)
    {
      ISEnumerateKnownUrduSequencesInStringSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))getISEnumerateKnownUrduSequencesInStringSymbolLoc();
      if (!ISEnumerateKnownUrduSequencesInStringSymbolLoc)
      {
        v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void SoftLinked__ISEnumerateKnownUrduSequencesInString(CFStringRef, CFRange, void (^)(CFRange, BOOL *))"), CFSTR("LocaleSupport.cpp"), 1102, CFSTR("%s"), dlerror());
        __break(1u);
      }
      return ISEnumerateKnownUrduSequencesInStringSymbolLoc(v7, a2, a3, a4);
    }
  }
  return result;
}

uint64_t StringContainsKnownUrduSequences(const __CFString *a1, CFRange a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___Z32StringContainsKnownUrduSequencesPK10__CFString7CFRange_block_invoke;
  v4[3] = &unk_1E15E3570;
  v4[4] = &v5;
  EnumerateKnownUrduSequencesInString((uint64_t)a1, a2.location, a2.length, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___Z32StringContainsKnownUrduSequencesPK10__CFString7CFRange_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

CFMutableSetRef GetTheLocaleManager(void)::$_0::__invoke()
{
  uint64_t v0;
  const __CFAllocator *v1;
  CFMutableSetRef result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v0 + 8) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = CFSetCreateMutable(v1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(v0 + 16) = result;
  *(_DWORD *)(v0 + 24) = 0;
  qword_1ECDE7800 = v0;
  return result;
}

void TCFMutableSet::TCFMutableSet(TCFMutableSet *this, id a2)
{
  CFMutableSetRef Mutable;

  if (a2)
    Mutable = (CFMutableSetRef)a2;
  else
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)this = Mutable;
}

void GetLocaleChangedCount(void)::$_0::__invoke()
{
  __CFNotificationCenter *LocalCenter;
  __CFNotificationCenter *DarwinNotifyCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)HandleLocaleChanged, (CFStringRef)*MEMORY[0x1E0C9B070], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)HandleLocaleChanged, CFSTR("com.apple.language.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

const __CFString *ExuberatedGroupForTallPseudolanguageIfEnabled(void)::$_0::__invoke()
{
  const __CFString *result;

  result = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("NSTallLocalizedStrings"));
  if (result)
  {
    result = (const __CFString *)GetExuberatedGroupForLanguage(result, 0);
    dword_1ECDE77D0 = (int)result;
  }
  return result;
}

uint64_t getISEnumerateKnownUrduSequencesInStringSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = qword_1ECDE7820;
  v6 = qword_1ECDE7820;
  if (!qword_1ECDE7820)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL49getISEnumerateKnownUrduSequencesInStringSymbolLocv_block_invoke;
    v2[3] = &unk_1E15E20C0;
    v2[4] = &v3;
    ___ZL49getISEnumerateKnownUrduSequencesInStringSymbolLocv_block_invoke(v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void std::__function::__func<CreateNormalizedLanguages(__CFArray const*)::$_0,std::allocator<CreateNormalizedLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<CreateNormalizedLanguages(__CFArray const*)::$_0,std::allocator<CreateNormalizedLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF320;
  return result;
}

void std::__function::__func<CreateNormalizedLanguages(__CFArray const*)::$_0,std::allocator<CreateNormalizedLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF320;
}

void std::__function::__func<CreateCanonicalLanguages(__CFArray const*)::$_0,std::allocator<CreateCanonicalLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<CreateCanonicalLanguages(__CFArray const*)::$_0,std::allocator<CreateCanonicalLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF248;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CreateCanonicalLanguages(__CFArray const*)::$_0,std::allocator<CreateCanonicalLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF248;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CreateCanonicalLanguages(__CFArray const*)::$_0,std::allocator<CreateCanonicalLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::operator()(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFString *v4;
  unint64_t v5;
  id CanonicalLanguageIdentifierFromString;

  v4 = (const __CFString *)*a2;
  if (CFGetTypeID(*a2) == *(_QWORD *)(a1 + 8))
  {
    CanonicalLanguageIdentifierFromString = (id)CFLocaleCreateCanonicalLanguageIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    do
      v5 = __ldaxr((unint64_t *)&CanonicalLanguageIdentifierFromString);
    while (__stlxr(0, (unint64_t *)&CanonicalLanguageIdentifierFromString));
    *a3 = v5;

  }
  else
  {
    *a3 = 0;
  }
}

void std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0>,objc_object * ()(objc_object *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0>,objc_object * ()(objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF488;
  return result;
}

void std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0>,objc_object * ()(objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF488;
}

id std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_0>,objc_object * ()(objc_object *)>::operator()(uint64_t a1, __CFString **a2)
{
  return NormalizeLanguage(*a2, 0);
}

void std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1>,objc_object * ()(objc_object *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1>,objc_object * ()(objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15E35B8;
  return result;
}

void std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1>,objc_object * ()(objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E35B8;
}

id std::__function::__func<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1,std::allocator<CreateArrayOfNormalizedLanguagesWithOrder(__CFArray const*,__CFArray const*,LanguageIdentifierNormalizationUsage)::$_1>,objc_object * ()(objc_object *)>::operator()(uint64_t a1, __CFString **a2)
{
  return NormalizeLanguage(*a2, 1u);
}

CGColorRef CopyCGColor(void *a1)
{
  void *v2;
  CGColorRef v3;

  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  v2 = (void *)MEMORY[0x186DC070C]();
  v3 = CGColorRetain((CGColorRef)objc_msgSend(a1, sel_CGColor));
  objc_autoreleasePoolPop(v2);
  return v3;
}

void SetNSShadow(CGContext *a1, id a2)
{
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  CGColor *v10;
  CGSize v11;

  objc_msgSend(a2, sel_shadowOffset);
  v5 = v4;
  v7 = v6;
  objc_msgSend(a2, sel_shadowBlurRadius);
  v9 = v8;
  v10 = (CGColor *)objc_msgSend(objc_msgSend(a2, sel_shadowColor), sel_CGColor);
  v11.width = v5;
  v11.height = v7;
  CGContextSetShadowWithColor(a1, v11, v9, v10);
}

id DrawGlyphsWithTextEffects(void *a1, const unsigned __int16 *a2, const CGPoint *a3, uint64_t a4, CGContext *a5)
{
  return objc_msgSend(a1, sel_drawGlyphs_positions_count_context_, a2, a3, a4, a5);
}

CFTypeID CTRubyAnnotationGetTypeID(void)
{
  if (TCFBase<TRubyAnnotation>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRubyAnnotation>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRubyAnnotation>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TRubyAnnotation>::fTypeID;
}

CTRubyAnnotationRef CTRubyAnnotationCreate(CTRubyAlignment alignment, CTRubyOverhang overhang, CGFloat sizeFactor, CFStringRef *text)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const __CTRubyAnnotation *v13;
  id v15;
  id v16;
  id v17;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TRubyAnnotation>::Allocate();
  if (v8)
  {
    v9 = (char *)v8;
    v10 = 0;
    *(_BYTE *)(v8 + 48) = alignment;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = TRubyAnnotation::Hash;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = v8 + 48;
    *(_BYTE *)(v8 + 49) = overhang;
    *(CGFloat *)(v8 + 56) = sizeFactor;
    *(_BYTE *)(v8 + 96) = 0;
    *(_QWORD *)(v8 + 104) = 0;
    *(_QWORD *)(v8 + 112) = 0;
    *(_WORD *)(v8 + 120) = 256;
    do
    {
      *(_QWORD *)&v9[v10 * 8 + 64] = (id)text[v10];
      ++v10;
    }
    while (v10 != 4);
    v17 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  v16 = v12;

  do
    v13 = (const __CTRubyAnnotation *)__ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));

  return v13;
}

CTRubyAnnotationRef CTRubyAnnotationCreateWithAttributes(CTRubyAlignment alignment, CTRubyOverhang overhang, CTRubyPosition position, CFStringRef string, CFDictionaryRef attributes)
{
  uint64_t v10;
  _QWORD *v11;
  TRubyAnnotation *v12;
  void *v13;
  void *v14;
  const __CTRubyAnnotation *v15;
  id v17;
  id v18;
  id v19;

  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  v10 = TCFBase<TRubyAnnotation>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = (TRubyAnnotation *)(v10 + 48);
    v11[2] = 0;
    v11[3] = TRubyAnnotation::Hash;
    v11[4] = 0;
    v11[5] = v12;
    TRubyAnnotation::TRubyAnnotation(v12, alignment, overhang, position, (__CFString *)string, attributes);
    v19 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    v17 = v13;

  }
  else
  {
    v17 = 0;
  }
  do
    v14 = (void *)__ldaxr((unint64_t *)&v17);
  while (__stlxr(0, (unint64_t *)&v17));
  v18 = v14;

  do
    v15 = (const __CTRubyAnnotation *)__ldaxr((unint64_t *)&v18);
  while (__stlxr(0, (unint64_t *)&v18));

  return v15;
}

unint64_t CTRubyAnnotationCreateWithAttributedString(CTRubyAlignment a1, CTRubyOverhang a2, CTRubyPosition a3, void *a4)
{
  uint64_t v8;
  _QWORD *v9;
  TRubyAnnotation *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  id v15;
  id v16;
  id v17;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TRubyAnnotation>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (TRubyAnnotation *)(v8 + 48);
    v9[2] = 0;
    v9[3] = TRubyAnnotation::Hash;
    v9[4] = 0;
    v9[5] = v10;
    TRubyAnnotation::TRubyAnnotation(v10, a1, a2, a3, a4);
    v17 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  v16 = v12;

  do
    v13 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));

  return v13;
}

CTRubyAnnotationRef CTRubyAnnotationCreateCopy(CTRubyAnnotationRef rubyAnnotation)
{
  void *v1;
  const __CTRubyAnnotation *v2;
  id v4;
  id v5;

  if (!rubyAnnotation)
    return 0;
  v5 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTRubyAnnotation,CTRubyAnnotation const&>((uint64_t)rubyAnnotation, (unint64_t *)&v4);
  do
    v1 = (void *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  v5 = v1;

  do
    v2 = (const __CTRubyAnnotation *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));

  return v2;
}

void TCFBase_NEW<CTRubyAnnotation,CTRubyAnnotation const&>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TRubyAnnotation *v6;
  unint64_t v7;
  id v8;

  v4 = TCFBase<TRubyAnnotation>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TRubyAnnotation *)(v4 + 48);
    v5[2] = 0;
    v5[3] = TRubyAnnotation::Hash;
    v5[4] = 0;
    v5[5] = v6;
    TRubyAnnotation::TRubyAnnotation(v6, *(const TRubyAnnotation **)(a1 + 40));
    v8 = v5;
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

CTRubyAlignment CTRubyAnnotationGetAlignment(CTRubyAnnotationRef rubyAnnotation)
{
  if (rubyAnnotation)
    return **((_BYTE **)rubyAnnotation + 5);
  else
    return -1;
}

CTRubyOverhang CTRubyAnnotationGetOverhang(CTRubyAnnotationRef rubyAnnotation)
{
  if (rubyAnnotation)
    return *(_BYTE *)(*((_QWORD *)rubyAnnotation + 5) + 1);
  else
    return -1;
}

CGFloat CTRubyAnnotationGetSizeFactor(CTRubyAnnotationRef rubyAnnotation)
{
  if (rubyAnnotation)
    return *(double *)(*((_QWORD *)rubyAnnotation + 5) + 8);
  else
    return 0.0;
}

CFStringRef CTRubyAnnotationGetTextForPosition(CTRubyAnnotationRef rubyAnnotation, CTRubyPosition position)
{
  CFStringRef result;

  result = 0;
  if (rubyAnnotation)
  {
    if (position <= kCTRubyPositionInline)
      return *(CFStringRef *)(*((_QWORD *)rubyAnnotation + 5) + 8 * position + 16);
  }
  return result;
}

uint64_t TCFBase<TRubyAnnotation>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  TCFBase<TRubyAnnotation>::CreateTypeID();
  return _CFRuntimeBridgeClasses();
}

uint64_t TCFBase<TRubyAnnotation>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  if ((v0 & 1) == 0
  {
    TCFBase<TRubyAnnotation>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE6FF8 = "CTRubyAnnotation";
    qword_1ECDE7000 = 0;
    unk_1ECDE7008 = 0;
    qword_1ECDE7010 = (uint64_t)TCFBase<TRubyAnnotation>::ClassDestruct;
    unk_1ECDE7018 = TCFBase<TRubyAnnotation>::ClassEqual;
    qword_1ECDE7020 = (uint64_t)TCFBase<TRubyAnnotation>::ClassHash;
    unk_1ECDE7028 = 0;
    qword_1ECDE7030 = (uint64_t)TCFBase<TRubyAnnotation>::ClassDebug;
    unk_1ECDE7038 = 0;
    qword_1ECDE7040 = 0;
    unk_1ECDE7048 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TRubyAnnotation>::fTypeID = result;
  return result;
}

void TCFBase<TRubyAnnotation>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  TRubyAnnotation::~TRubyAnnotation(*(id **)(a1 + 40));
}

uint64_t TCFBase<TRubyAnnotation>::ClassEqual()
{
  return 0;
}

_QWORD *TCFBase<TRubyAnnotation>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TCFBase<TRubyAnnotation>::ClassDebug()
{
  return 0;
}

uint64_t TCFBase<TRubyAnnotation>::Allocate()
{
  if (TCFBase<TRubyAnnotation>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRubyAnnotation>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRubyAnnotation>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

Class _CTFontCollectionEnableBridging()
{
  Class result;

  result = objc_lookUpClass("NSCTFontCollection");
  if (result)
    return (Class)_CFRuntimeBridgeClasses();
  return result;
}

Class _CTGlyphInfoEnableBridging()
{
  Class result;

  result = objc_lookUpClass("NSCTGlyphInfo");
  if (result)
    return (Class)_CFRuntimeBridgeClasses();
  return result;
}

const __CFDictionary *TSplicedFontDict::FindLocalizedName(TSplicedFontDict *this, int a2, const __CFString **a3)
{
  void *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFString *ValueAtIndex;
  const __CFDictionary *FontName;
  const __CFDictionary *v16;
  id v18;

  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyPreferredAndSystemLanguages((unint64_t *)&v18);
  v6 = (void *)atomic_load((unint64_t *)&v18);
  v7 = v6;
  if (!v7)
  {

    goto LABEL_10;
  }
  v8 = v7;
  Count = CFArrayGetCount(v7);

  if (!Count)
  {
LABEL_10:
    v16 = 0;
    goto LABEL_11;
  }
  v10 = (const __CFArray *)atomic_load((unint64_t *)&v18);
  if (v10 && (v11 = CFArrayGetCount(v10)) != 0)
  {
    v12 = v11;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v13);
      FontName = TSplicedFontDict::FindFontName(this, a2, ValueAtIndex);
      if (FontName)
        break;
      if (v12 == ++v13)
        goto LABEL_8;
    }
    v16 = FontName;
    if (a3)
      *a3 = ValueAtIndex;
  }
  else
  {
LABEL_8:
    v16 = TSplicedFontDict::FindFontName(this, a2, 0);
  }
LABEL_11:

  return v16;
}

const __CFDictionary *TSplicedFontDict::CopyName@<X0>(TSplicedFontDict *this@<X0>, const __CFString *key@<X1>, const __CFDictionary **a3@<X8>)
{
  int v5;
  const __CFDictionary *result;

  v5 = FontNameCodeForKey(key);
  result = TSplicedFontDict::FindFontName(this, v5, 0);
  *a3 = result;
  return result;
}

double TSplicedFontDict::GetSlantAngle(TSplicedFontDict *this, double a2, const CGAffineTransform *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  const __CFString *v7;

  v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v4
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FontMetrics"))) != 0
    && (v6 = Value, CFDictionaryGetCount(Value) >= 1)
    && (v7 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("italicAngle"))) != 0)
  {
    return CFStringGetDoubleValue(v7);
  }
  else
  {
    return a2;
  }
}

uint64_t CTFontDescriptorGetDefaultTextStylePlatform()
{
  return 0;
}

uint64_t TDescriptorSource::IsVariableSizeTextStyleInstance(TDescriptorSource *this, const __CFString *a2, const __CFString **a3, const __CFString **a4)
{
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (this)
  {
    v7 = CFGetTypeID(this);
    if (v7 == CFStringGetTypeID())
    {
      v8 = -[TDescriptorSource length](this, "length");
      if (qword_1EDD16F50 != -1)
        dispatch_once(&qword_1EDD16F50, &__block_literal_global_1708);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___ZN17TDescriptorSource31IsVariableSizeTextStyleInstanceEPK10__CFStringPS2_S3__block_invoke;
      v11[3] = &unk_1E15E3640;
      v11[6] = v8;
      v11[7] = a3;
      v11[8] = a2;
      v11[4] = this;
      v11[5] = &v12;
      objc_msgSend((id)qword_1EDD16F48, "enumerateObjectsUsingBlock:", v11);
    }
  }
  v9 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v9;
}

__CFString *FindSerifWithTraits(unint64_t a1, char a2, char a3)
{
  unint64_t v5;
  unint64_t IndexWithTraits;

  v5 = a1 - 254;
  if (a1 < 0xFE || v5 > 0xB)
    return 0;
  IndexWithTraits = FindIndexWithTraits((uint64_t)&kOtherSerifSpec, v5, a2, a3);
  if (IndexWithTraits <= 0xB)
    return kSystemUIFontSerifNames[IndexWithTraits];
  else
    return 0;
}

__CFString *FindMonospacedWithTraits(unint64_t a1, char a2, char a3)
{
  unint64_t v5;
  unint64_t IndexWithTraits;

  v5 = a1 - 266;
  if (a1 < 0x10A || v5 > 0xB)
    return 0;
  IndexWithTraits = FindIndexWithTraits((uint64_t)&kOtherMonospacedSpec, v5, a2, a3);
  if (IndexWithTraits <= 0xB)
    return kSystemUIFontMonospacedNames[IndexWithTraits];
  else
    return 0;
}

uint64_t TDescriptorSource::IsVariableSizeTextStyleName(TDescriptorSource *this, const __CFString *a2)
{
  if (qword_1EDD16F50 != -1)
    dispatch_once(&qword_1EDD16F50, &__block_literal_global_1708);
  return objc_msgSend((id)qword_1EDD16F48, "containsObject:", this);
}

uint64_t ___ZN17TDescriptorSource31IsVariableSizeTextStyleInstanceEPK10__CFStringPS2_S3__block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = objc_msgSend(a2, "length");
  v7 = v6 + 1;
  if (*(_QWORD *)(a1 + 48) > (unint64_t)(v6 + 1)
    && (v8 = v6, objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", a2))
    && objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", v8) == 45)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "substringFromIndex:", v7);
    if (!result)
      return result;
  }
  else
  {
    result = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", a2);
    if ((result & 1) == 0)
      return result;
    result = (uint64_t)CFSTR("12");
  }
  if (*(_QWORD *)(a1 + 56))
  {
    result = (uint64_t)CFRetain((CFTypeRef)result);
    **(_QWORD **)(a1 + 56) = result;
  }
  if (*(_QWORD *)(a1 + 64))
  {
    result = (uint64_t)CFRetain(a2);
    **(_QWORD **)(a1 + 64) = result;
  }
  *a3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

TDescriptorSource *TDescriptorSource::CreateVariableSizeTextStyle@<X0>(TDescriptorSource *this@<X0>, CFDictionaryRef theDict@<X1>, TDescriptorSource **a3@<X8>)
{
  void *Value;
  double v7;
  TDescriptorSource *result;

  if (theDict)
    Value = (void *)CFDictionaryGetValue(theDict, CFSTR("NSFontSizeAttribute"));
  else
    Value = 0;
  objc_msgSend(Value, "doubleValue");
  if (v7 <= 0.0)
    result = this;
  else
    result = (TDescriptorSource *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%@"), this, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:"), "stringValue"));
  *a3 = result;
  return result;
}

__CFString *TDescriptorSource::FindFontNameForTextStyle(TDescriptorSource *this, const __CFString *a2, const __CFDictionary *a3, BOOL *a4, const __CFString **a5, const __CFString **a6)
{
  TDescriptorSource *v11;
  const __CFString **v12;
  char v13;
  int IsVariableSizeTextStyleInstance;
  void *isa;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __CFString *FontNameForNameAndTrait;
  uint64_t *SymbolicTraitsFromTraits;
  __CFString v23;

  v11 = (TDescriptorSource *)MapTextStyleValue((uint64_t)this);
  v23.info = 0;
  if ((_DWORD)v11)
  {
    v13 = 0;
    if (!a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  v23.isa = 0;
  IsVariableSizeTextStyleInstance = TDescriptorSource::IsVariableSizeTextStyleInstance(this, &v23, a5, v12);
  isa = v23.isa;
  do
    v16 = (void *)__ldaxr((unint64_t *)&v23.info);
  while (__stlxr((unint64_t)isa, (unint64_t *)&v23.info));

  if (!IsVariableSizeTextStyleInstance)
  {
    v13 = 0;
    v11 = 0;
    if (!a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  v17 = atomic_load((unint64_t *)&v23.info);
  v11 = (TDescriptorSource *)MapTextStyleValue(v17);
  if (a4)
  {
    do
      v18 = __ldaxr((unint64_t *)&v23.info);
    while (__stlxr(0, (unint64_t *)&v23.info));
    *(_QWORD *)a4 = v18;
  }
  v13 = 1;
  if (a3)
LABEL_13:
    *(_BYTE *)a3 = v13;
LABEL_14:
  if (v11 > 0x144)
  {
    FontNameForNameAndTrait = 0;
  }
  else
  {
    v19 = TDescriptorSource::UIFontNameForUIType(v11);
    FontNameForNameAndTrait = (__CFString *)v19;
    if (a2)
    {
      if (v19)
      {
        SymbolicTraitsFromTraits = (uint64_t *)GetSymbolicTraitsFromTraits((const __CFDictionary *)a2);
        if ((_DWORD)SymbolicTraitsFromTraits)
          FontNameForNameAndTrait = TDescriptorSource::FindFontNameForNameAndTrait((TDescriptorSource *)FontNameForNameAndTrait, 0, SymbolicTraitsFromTraits, (int)SymbolicTraitsFromTraits);
      }
    }
  }

  return FontNameForNameAndTrait;
}

__CFString *CTFontDescriptorCopyNameForSystemFontOfWeight(__CFString *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString **a6)
{
  return TDescriptorSource::GetNameForSystemFontOfWeight(CFSTR("NSCTFontUIFontDesignDefault"), a1, a2, 0, 0, a6);
}

uint64_t TDescriptorSource::UIFontNameForFullName(uint64_t this, const __CFString *a2)
{
  if (this)
    return objc_msgSend(&unk_1E1605518, "objectForKeyedSubscript:", this);
  return this;
}

void CTFontSetAltTextStyleSpec()
{
  kFont2X = &kFont2XCompact;
  _MergedGlobals_88 = 1;
  _MergedGlobals_2 = &kTypeHierarchySpecWatch;
  qword_1ECDE6F68 = (uint64_t)kFontSoftCompact;
  off_1ECDE6F70[0] = &kFontJapaneseWatch;
  qword_1ECDE6F78 = (uint64_t)&kFontKoreanWatch;
  off_1ECDE6F80[0] = kFontCompactRounded;
  qword_1ECDE6F88 = (uint64_t)kFallbacksCompact;
  gDisableLooseFontNameMatchingOverride = 1;
}

double CTFontGetExuberatedLineHeightForLineHeight(double a1)
{
  const __CFString *v2;
  double v3;
  double v4;
  double v5;
  double LanguageAwareAdjustRatio;
  double v8;
  double v9;
  double v10;
  double v11;

  if (CurrentLocaleIsExuberated())
  {
    v2 = kFont2X[15];
    v10 = NAN;
    v11 = NAN;
    v8 = NAN;
    v9 = NAN;
    if (GetLanguageAwareOutsetIndexForFontName(v2, &v11, &v10, &v9, &v8, 0))
    {
      v3 = (double)*((int *)kFont2X + 6);
      v4 = (double)-*((_DWORD *)kFont2X + 7);
      v5 = *((double *)kFont2X + 1);
      LanguageAwareAdjustRatio = GetLanguageAwareAdjustRatio();
      return (v3 + LanguageAwareAdjustRatio * v10 * v5 + v4 + LanguageAwareAdjustRatio * v8 * v5) / (v3 + v4) * a1;
    }
  }
  return a1;
}

const __CFString *GetTrimStringForNumberingSystem(void)
{
  void *v0;
  __CFString *v1;
  __CFString *v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  int v6;
  const __CFString *v7;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyPreferredNumberingSystem((uint64_t *)&v9);
  v0 = (void *)atomic_load((unint64_t *)&v9);
  v1 = v0;
  v2 = v1;
  if (v1 == CFSTR("arab") || v1 && CFEqual(v1, CFSTR("arab")))
    goto LABEL_9;
  v3 = (void *)atomic_load((unint64_t *)&v9);
  v4 = v3;
  if (v4 == CFSTR("deva"))
  {

LABEL_9:
    goto LABEL_10;
  }
  v5 = v4;
  if (!v4)
  {

LABEL_13:
    v7 = 0;
    goto LABEL_11;
  }
  v6 = CFEqual(v4, CFSTR("deva"));

  if (!v6)
    goto LABEL_13;
LABEL_10:
  v7 = CFSTR(":");
LABEL_11:

  return v7;
}

double CTFontGetAccessibilityBoldWeightOfWeight(double a1)
{
  unsigned int v1;

  v1 = __const__Z19LocalTraitForWeightdd_kWeightTraits[(unsigned __int16)IndexesBracketing<double const*,double>(kCTFontDefaultWeights, (double *)&kCTFontWeightRegular, a1, 0.001)];
  if (((0x1FEFFu >> v1) & 1) != 0)
    v1 = dword_184948124[v1];
  return GetWeightForLocalTrait(v1);
}

const __CFString *TDescriptorSource::GetUIFontFamilyNameForDesign(CFTypeRef cf2, const __CFString *a2)
{
  uint64_t v3;
  const __CFString *v4;
  CFTypeRef v5;
  _QWORD v7[19];

  v3 = 0;
  v7[18] = *MEMORY[0x1E0C80C00];
  v4 = CFSTR(".AppleSystemUIFont");
  v7[2] = CFSTR("NSCTFontUIFontDesignCompact");
  v7[3] = CFSTR(".AppleSystemUIFontCompact");
  v7[4] = CFSTR("NSCTFontUIFontDesignCore");
  v7[5] = CFSTR(".AppleSystemUIFontCore");
  v7[6] = CFSTR("NSCTFontUIFontDesignRounded");
  v7[7] = CFSTR(".AppleSystemUIFontRounded");
  v7[8] = CFSTR("NSCTFontUIFontDesignCompactRounded");
  v7[9] = CFSTR(".AppleSystemUIFontCompactRounded");
  v7[10] = CFSTR("NSCTFontUIFontDesignMonospaced");
  v7[11] = CFSTR(".AppleSystemUIFontMonospaced");
  v7[12] = CFSTR("NSCTFontUIFontDesignSerif");
  v7[13] = CFSTR(".AppleSystemUIFontSerif");
  v7[14] = CFSTR("NSCTFontUIFontDesignSoft");
  v7[15] = CFSTR(".AppleSystemUIFontSoft");
  v7[16] = CFSTR("NSCTFontUIFontDesignCompactSoft");
  v7[17] = CFSTR(".AppleSystemUIFontCompactSoft");
  v7[0] = CFSTR("NSCTFontUIFontDesignDefault");
  v7[1] = CFSTR(".AppleSystemUIFont");
  while (1)
  {
    v5 = (CFTypeRef)v7[v3];
    if (v5 == cf2 || cf2 && v5 && CFEqual(v5, cf2))
      break;
    v3 += 2;
    if (v3 == 18)
      return v4;
  }
  return (const __CFString *)v7[v3 + 1];
}

const __CFString *FullNameForSynthetic(const __CFString *cf1)
{
  const __CFString *v1;

  if (cf1 == CFSTR(".AppleSystemUIFont"))
    return CFSTR(".AppleSystemUIFontRegular");
  v1 = cf1;
  if (cf1)
  {
    if (CFEqual(cf1, CFSTR(".AppleSystemUIFont")))
      return CFSTR(".AppleSystemUIFontRegular");
  }
  return v1;
}

uint64_t GetAltUrduUIFontNameForSymbolicTraits(unsigned int a1)
{
  if (RegisterAltUrduUIFont(void)::onceToken != -1)
    dispatch_once(&RegisterAltUrduUIFont(void)::onceToken, &__block_literal_global_1918);
  return (uint64_t)*(&kFontUrduDecoNastaleeq + 5 * ((a1 >> 1) & 1));
}

void MakeSpliceDescriptor(TDescriptorSource *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, const __CFString *a4@<X3>, const __CFNumber *a5@<X4>, const __CFNumber *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, int a10, const __CFNumber *a11, const __CFNumber *a12, uint64_t a13, const void *a14, void *a15, uint64_t a16)
{
  uint64_t v24;
  const __CFAllocator *v25;
  const __CFNumber *v26;
  double v27;
  const void *v28;
  __CFDictionary *v29;
  unint64_t isa;
  unsigned int *TextStyle;
  uint64_t v32;
  TDescriptorSource *v33;
  __CFString **v34;
  _BOOL4 v35;
  unint64_t v36;
  int v37;
  const __CFString *v38;
  _BOOL4 v39;
  int v40;
  unsigned int v41;
  __CFString **v42;
  uint64_t v43;
  unsigned int *v44;
  TDescriptorSource *v45;
  __CFDictionary *v46;
  const __CFString *v47;
  int v48;
  int v49;
  const __CFString *v50;
  const __CFString *LocalizedTrimSetKey;
  const void *v52;
  __CFDictionary *v53;
  const void *v54;
  __CFDictionary *v55;
  __CFDictionary *v56;
  __CFDictionary *v57;
  __CFDictionary *v58;
  unsigned int v59;
  unint64_t *v60;
  uint64_t v61;
  int *v62;
  char v64;
  const __CFString *v65;
  __CFString **Value;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  __CFDictionary *v70;
  int v71;
  int v72;
  unsigned int v73;
  const __CFString *v74;
  __CFDictionary *v75;
  const void *v76;
  const void *v77;
  __CFDictionary *v78;
  __CFDictionary *v79;
  const void *v80;
  __CFDictionary *v81;
  __CFString **v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  __CFDictionary *v86;
  double v87;
  double *v88;
  double v89;
  int v90;
  void **v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  double v97;
  uint64_t v98;
  int v99;
  const void *v100;
  __CFDictionary *v101;
  unint64_t v102;
  TDescriptorSource *v103;
  _DWORD *v104;
  __int128 v105;
  const void *v106;
  __CFDictionary *v107;
  const void *v108;
  __CFDictionary *v109;
  __CFDictionary *v110;
  __CFDictionary *v111;
  __CFDictionary *v112;
  __CFString **v113;
  unsigned int *p_valuePtr;
  int v115;
  const __CFString *v116;
  uint64_t v117;
  const __CFNumber *v118;
  const void *v119;
  __CFDictionary *v120;
  const void *v121;
  CFMutableArrayRef v122;
  __CFDictionary *v123;
  __CFDictionary *v124;
  __CFDictionary *v125;
  void *v126;
  unint64_t v127;
  TDescriptorSource *v128;
  _DWORD *v129;
  __int128 v130;
  const void *v131;
  __CFDictionary *v132;
  const void *v133;
  __CFDictionary *v134;
  __CFDictionary *v135;
  __CFDictionary *v136;
  __CFDictionary *v137;
  const __CFDictionary *v139;
  __CFDictionary *v140;
  __CFDictionary *v141;
  const __CFString *v142;
  const void *v143;
  __CFDictionary *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  __CFDictionary *v149;
  TDescriptorSource *v150;
  const __CFString *v151;
  uint64_t *v152;
  const void *v153;
  __CFDictionary *v154;
  unsigned int v155;
  __CFDictionary *v156;
  uint64_t v157;
  const void *v158;
  __CFDictionary *v159;
  __CFDictionary *v160;
  unint64_t v161;
  __CFDictionary *v162;
  TDescriptorSource *v163;
  const __CFString *v164;
  uint64_t *v165;
  const void *v166;
  __CFDictionary *v167;
  unsigned int v168;
  const __CFString *v169;
  unsigned int v170;
  __CFString *v171;
  __CFArray *v172;
  unsigned int *v173;
  uint64_t i;
  double v175;
  const void *v176;
  __CFDictionary *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  const void *v181;
  __CFDictionary *v182;
  const void *v183;
  __CFDictionary *v184;
  __CFDictionary *v185;
  __CFDictionary *v186;
  const __CFString *v187;
  __CFString **v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  char *v192;
  TDescriptorSource *v193;
  int v194;
  const __CFString *v195;
  const __CFString *v196;
  const void *v197;
  __CFDictionary *v198;
  const void *v199;
  __CFDictionary *v200;
  const void *v201;
  __CFDictionary *v202;
  __CFDictionary *v203;
  __CFDictionary *v204;
  __CFDictionary *v205;
  unsigned int v206;
  unsigned int v207;
  const void *v208;
  __CFDictionary *v209;
  const void *v210;
  __CFDictionary *v211;
  __CFDictionary *v212;
  __CFDictionary *v213;
  const __CFString *v214;
  const __CFString *v216;
  unint64_t v217;
  TDescriptorSource *v218;
  int v219;
  const __CFString *v220;
  const __CFString *v221;
  const void *v222;
  __CFDictionary *v223;
  const void *v224;
  __CFDictionary *v225;
  const void *v226;
  __CFDictionary *v227;
  __CFDictionary *v228;
  __CFDictionary *v229;
  __CFDictionary *v230;
  unint64_t v231;
  __CFDictionary *v232;
  int *v233;
  const __CFString *v234;
  int v235;
  int v236;
  const __CFString *v237;
  unsigned int v238;
  unint64_t v239;
  unint64_t v240;
  __CFDictionary *v241;
  int *v242;
  const __CFString *v243;
  int v244;
  int v245;
  const __CFString *v246;
  unsigned int v247;
  unsigned int v248;
  const void *v249;
  __CFDictionary *v250;
  const void *v251;
  __CFDictionary *v252;
  __CFDictionary *v253;
  __CFDictionary *v254;
  unint64_t v255;
  __CFDictionary *v256;
  const void *v257;
  __CFDictionary *v258;
  const void *v259;
  __CFDictionary *v260;
  __CFDictionary *v261;
  __CFDictionary *v262;
  __CFDictionary *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  const __CFString **v268;
  __CFDictionary *v269;
  const void *v270;
  unint64_t v271;
  __CFDictionary *v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  const void *v276;
  __CFDictionary *v277;
  __CFDictionary *v278;
  __CFDictionary *v279;
  const __CFString *v280;
  __CFDictionary *v281;
  char *v282;
  unint64_t v283;
  const __CFString *v284;
  __CFString **v285;
  const __CFString *v286;
  CFIndex Length;
  const __CFString *v288;
  int v289;
  __CFDictionary *v290;
  __CFDictionary *v291;
  const __CFString *v292;
  unsigned int v293;
  unsigned int v294;
  uint64_t v295;
  const void *v296;
  __CFDictionary *v297;
  __CFDictionary *v298;
  __CFDictionary *v299;
  const __CFString *v300;
  __CFDictionary *v301;
  uint64_t v302;
  const void *v303;
  __CFDictionary *v304;
  void *v305;
  unint64_t v306;
  __CFString **v307;
  __CFDictionary *v308;
  unint64_t v309;
  const __CFString *v310;
  const __CFString *v311;
  __CFDictionary *v312;
  __CFDictionary *v313;
  int v314;
  const __CFString *v315;
  __CFString **v316;
  __CFDictionary *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  const void **v323;
  const __CFString *v324;
  unint64_t v325;
  const __CFString *v326;
  const __CFString *v327;
  __CFString **v328;
  int v329;
  __CFDictionary *v330;
  const void *v331;
  __CFDictionary *v332;
  __CFDictionary *v333;
  unint64_t v334;
  const __CFString *v335;
  const __CFString *v336;
  const __CFString *v337;
  uint64_t v338;
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  uint64_t v345;
  unint64_t SyntheticAppleSymbolsSplicedFont;
  unint64_t v347;
  unint64_t v348;
  unint64_t SyntheticAppleTimesSplicedFont;
  void *v350;
  unint64_t v351;
  int v352;
  int v353;
  __int128 v354;
  const void *v355;
  uint64_t info;
  char *data;
  __CFDictionary *v358;
  const void *v359;
  __CFDictionary *v360;
  unint64_t v361;
  __CFString *v362;
  const void *v363;
  const __CFString *v364;
  const __CFString *v365;
  __CFDictionary *v366;
  __CFDictionary *v367;
  const void *v368;
  __CFDictionary *v369;
  __CFDictionary *v370;
  _BOOL4 v371;
  const __CFString *v372;
  unsigned int v373;
  __CFArray *theArray;
  const __CFAllocator *allocator;
  const __CFAllocator *allocatora;
  __CFString **v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  int v381;
  const void *v382;
  unint64_t *v383;
  CFNumberRef number;
  _BOOL4 v385;
  __CFString *v386;
  unint64_t v387;
  void *v388;
  unsigned int v389;
  id v390;
  __CFString valuePtr;
  unint64_t v392;
  unsigned int v393;
  unsigned int v394[2];
  _DWORD __dst[84];
  CFMutableDictionaryRef Mutable;
  __CFString v397;
  uint64_t v398;
  CFRange v399;

  v398 = *MEMORY[0x1E0C80C00];
  v397.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  if ((TDescriptorSource::StashIndexForFontName(a1, &v397, a3) & 1) == 0)
  {
    *a9 = 0;
    return;
  }
  v387 = a2;
  number = a6;
  v24 = (uint64_t)a12;
  v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  memcpy(__dst, &__const__ZN17TDescriptorSource16IsValidTextStyleEPK10__CFString_overrideSpec, sizeof(__dst));
  __dst[5] = 3;
  if (a12)
  {
    valuePtr.isa = (void *)-1;
    v26 = a12;
LABEL_7:
    CFNumberGetValue(v26, kCFNumberDoubleType, &valuePtr);
    v381 = 0;
    v27 = *(double *)&valuePtr.isa;
    goto LABEL_8;
  }
  if (a11)
  {
    valuePtr.isa = (void *)-1;
    v26 = a11;
    goto LABEL_7;
  }
  v381 = 1;
  v27 = NAN;
LABEL_8:
  v383 = a9;
  if ((_DWORD)a7)
  {
    v28 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a7);
    v29 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryAddValue(v29, CFSTR("grade"), v28);
  }
  isa = (unint64_t)v397.isa;
  TextStyle = FindTextStyle((unint64_t)v397.isa, (uint64_t)__dst, a8);
  v386 = (__CFString *)a3;
  if (!TextStyle)
  {
    v36 = isa - 156;
    if (isa < 0x9C)
    {
      v37 = 0;
      v38 = v386;
LABEL_153:
      v60 = v383;
      goto LABEL_154;
    }
    if (v36 <= 0x15)
    {
      v379 = a7;
      v44 = &kOtherSpec[10 * v36];
      v45 = (TDescriptorSource *)*v44;
      valuePtr.isa = 0;
      v46 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v46, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignDefault"));
      v389 = v45;
      v47 = (const __CFString *)TDescriptorSource::UIFontNameForUIType(v45);
      *(_QWORD *)v394 = 0xAAAAAAAAAAAAAAAALL;
      v48 = v44[1];
      v49 = v44[2];
      makeStyleName((unint64_t *)v394, v48, v49, (uint64_t)valuePtr.isa);
      v50 = (const __CFString *)atomic_load((unint64_t *)v394);
      addNames(CFSTR(".AppleSystemUIFont"), v50, v47, (TCFMutableDictionary *)&Mutable);
      addMetrics(v48, v49, 0, CFSTR("width"), number, (unint64_t *)&Mutable);
      v393 = 0;
      LocalizedTrimSetKey = GetLocalizedTrimSetKey(v386, &v393);
      v52 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v53 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v53, CFSTR("legibilityWeight"), v52);
      v54 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v55 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v55, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v56 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v56, CFSTR("hasVariations"), v54);
      v57 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v57, CFSTR("hasOpticalSizeAxis"), v54);
      v58 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v58, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFont"));
      if (CFSTR("NSCTFontUIFontDesignSoft") == a4
        || a4 && CFSTR("NSCTFontUIFontDesignSoft") && CFEqual(a4, CFSTR("NSCTFontUIFontDesignSoft")))
      {
        v390 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v59 = kOtherSpec[10 * v36 + 4];
        if (a13 == 1)
        {
          v60 = v383;
          v38 = v386;
          if (v59 <= 0x10 && ((0x1FEFFu >> v59) & 1) != 0)
            v59 = dword_184948124[v59];
        }
        else
        {
          v60 = v383;
          v38 = v386;
        }
        if (v389 <= 0x8A)
        {
          v155 = v59 % 9;
          if (v59 % 9 <= 2)
          {
            DetermineLanguageSpecificParameters();
            if (v155 < dword_1EDD16EC0)
              v59 = v59 - v155 + dword_1EDD16EC0;
          }
        }
        setNameWithGrade(*(void **)(qword_1ECDE6F68 + 8 * (v59 % 9)), v379, (unint64_t *)&v390);
        if (v393 == 64 || v393 == 32)
        {
          v156 = (__CFDictionary *)atomic_load((unint64_t *)&v390);
          CFDictionaryAddValue(v156, CFSTR("UnicodeCharSetTrim"), LocalizedTrimSetKey);
        }
        v157 = atomic_load((unint64_t *)&v390);
        v397.length = v157;
        v158 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v397.length, 1);
        v159 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v159, CFSTR("Components"), v158);
        v160 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionarySetValue(v160, CFSTR("NSCTFontUIFontDesignTrait"), a4);

      }
      else
      {
        v145 = kOtherSpec[10 * v36 + 4];
        if (a13 == 1)
        {
          v146 = v379;
          v147 = v389;
          if (v145 <= 0x10 && ((0x1FEFFu >> v145) & 1) != 0)
            v145 = dword_184948124[v145];
        }
        else
        {
          v146 = v379;
          v147 = v389;
        }
        if (v147 <= 0x8A)
        {
          v168 = v145 % 9;
          if (v145 % 9 <= 2)
          {
            DetermineLanguageSpecificParameters();
            if (v168 < dword_1EDD16EC0)
              v145 = v145 - v168 + dword_1EDD16EC0;
          }
        }
        if ((_DWORD)v146)
        {
          v169 = LocalizedTrimSetKey;
          if (v145 == 17 || v145 == 8)
            v146 = 0;
        }
        else
        {
          v169 = LocalizedTrimSetKey;
        }
        v170 = v145;
        v171 = SFFontNameForWidth(v145, number, &valuePtr);
        AddVariationInfoWithGrade((TCFMutableDictionary *)&Mutable, v171, v146);
        v172 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
        v173 = &kOtherSpec[10 * v36 + 6];
        if (v173 != v44 + 10)
        {
          for (i = 0; i != 4; i += 2)
          {
            v175 = *(double *)&v173[i];
            v390 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            setOpticalSizeComponent(v171, (uint64_t)&kFont2X[5 * v170], v389, 0, v146, v169, (unint64_t *)&v390, 0, v175 * 0.5, 0.0, 0.0, 0.0, 0);
            v176 = (const void *)atomic_load((unint64_t *)&v390);
            CFArrayInsertValueAtIndex(v172, 0, v176);

          }
        }
        v177 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v177, CFSTR("Components"), v172);

        v60 = v383;
        v24 = (uint64_t)a12;
        v38 = v386;
      }
      v126 = *(void **)v394;
      goto LABEL_145;
    }
    v102 = isa - 178;
    if (isa - 178 <= 0x13)
    {
      v103 = (TDescriptorSource *)kOtherSpecCompact[v102];
      v104 = &kOtherSpec[10 * v102];
      v105 = *((_OWORD *)v104 + 1);
      *(_OWORD *)&valuePtr.isa = *(_OWORD *)v104;
      *(_OWORD *)&valuePtr.data = v105;
      v392 = *((_QWORD *)v104 + 4);
      LODWORD(valuePtr.isa) = (_DWORD)v103;
      addPosingWithWeightAndSlant(v103, SHIDWORD(valuePtr.isa), valuePtr.info, SHIDWORD(valuePtr.info), CFSTR(".AppleSystemUIFontCompact"), CFSTR("NSCTFontUIFontDesignCompact"), (TCFMutableDictionary *)&Mutable, 0, 0);
      v106 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v107 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v107, CFSTR("legibilityWeight"), v106);
      v108 = (const void *)*MEMORY[0x1E0C9AE50];
      v38 = v386;
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v109 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v109, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v110 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v110, CFSTR("hasVariations"), v108);
      v111 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v111, CFSTR("hasOpticalSizeAxis"), v108);
      v112 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v112, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontCompact"));
      v113 = &kFont2XCompact;
      p_valuePtr = (unsigned int *)&valuePtr;
      v115 = a7;
      v116 = 0;
      v117 = a13;
      goto LABEL_137;
    }
    v127 = isa - 198;
    v38 = v386;
    if (isa - 198 <= 0x13)
    {
      v128 = (TDescriptorSource *)kOtherSpecCore[v127];
      v129 = &kOtherSpec[10 * v127];
      v130 = *((_OWORD *)v129 + 1);
      *(_OWORD *)&valuePtr.isa = *(_OWORD *)v129;
      *(_OWORD *)&valuePtr.data = v130;
      v392 = *((_QWORD *)v129 + 4);
      LODWORD(valuePtr.isa) = (_DWORD)v128;
      addPosingWithWeightAndSlant(v128, SHIDWORD(valuePtr.isa), valuePtr.info, SHIDWORD(valuePtr.info), CFSTR(".AppleSystemUIFontCore"), CFSTR("NSCTFontUIFontDesignCore"), (TCFMutableDictionary *)&Mutable, CFSTR("width"), a6);
      v131 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v132 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v132, CFSTR("legibilityWeight"), v131);
      v133 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v134 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v134, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v135 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v135, CFSTR("hasVariations"), v133);
      v136 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v136, CFSTR("hasOpticalSizeAxis"), v133);
      v137 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v137, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontCore"));
      v116 = GetLocalizedTrimSetKey(v386, v394);
      v113 = &kFont2XPro;
      p_valuePtr = (unsigned int *)&valuePtr;
      v115 = a7;
      v117 = a13;
      v118 = number;
      goto LABEL_152;
    }
    allocatora = v25;
    v148 = isa - 218;
    if (isa - 218 <= 8)
    {
      v149 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v149, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignRounded"));
      v150 = (TDescriptorSource *)kSystemUIFontRoundNames[v148];
      v153 = (const void *)TDescriptorSource::TextStyleForUIFontName(v150, v151, v152);
      v154 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v154, CFSTR("NSCTFontUIUsageAttribute"), v153);
      v60 = v383;
      v178 = isa - 217;
      addNames(CFSTR(".AppleSystemUIFontRounded"), off_1E15E73A0[v148], (const __CFString *)v150, (TCFMutableDictionary *)&Mutable);
      addMetrics(isa - 217, 0, 0, 0, 0, (unint64_t *)&Mutable);
      if (a13 == 1 && v148 <= 7)
      {
        if (((1 << (isa + 38)) & 0x78) != 0)
          v178 = isa - 216;
      }
      else
      {
        v178 = isa - 218;
      }
      if (v178 >= 9)
        v179 = v178 - 9;
      else
        v179 = v178;
      if (v179 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v179 < dword_1EDD16EC0)
          v178 = v178 - v179 + dword_1EDD16EC0;
      }
      v180 = v178;
      v181 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v182 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v182, CFSTR("legibilityWeight"), v181);
      v183 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v184 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v184, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v185 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v185, CFSTR("hasVariations"), v183);
      v186 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v186, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontRounded"));
      LODWORD(valuePtr.isa) = 0;
      v187 = GetLocalizedTrimSetKey(v386, (unsigned int *)&valuePtr);
      v188 = off_1ECDE6F80[0];
LABEL_232:
      v214 = v188[v180];
      if (LODWORD(valuePtr.isa) == 64 || LODWORD(valuePtr.isa) == 32)
        v216 = v187;
      else
        v216 = 0;
      addComponentsWithNameAndTrimCharacterSet(v214, v216, (TCFMutableDictionary *)&Mutable);
      goto LABEL_146;
    }
    v161 = isa - 227;
    if (isa - 227 <= 8)
    {
      v162 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v162, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignCompactRounded"));
      v163 = (TDescriptorSource *)kSystemUIFontCompactRoundNames[v161];
      v166 = (const void *)TDescriptorSource::TextStyleForUIFontName(v163, v164, v165);
      v167 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v167, CFSTR("NSCTFontUIUsageAttribute"), v166);
      v60 = v383;
      v206 = isa - 226;
      addNames(CFSTR(".AppleSystemUIFontCompactRounded"), off_1E15E73A0[v161], (const __CFString *)v163, (TCFMutableDictionary *)&Mutable);
      addMetrics(isa - 226, 0, 0, 0, 0, (unint64_t *)&Mutable);
      if (a13 == 1 && v161 <= 7)
      {
        if (((1 << (isa + 29)) & 0x78) != 0)
          v206 = isa - 225;
      }
      else
      {
        v206 = isa - 227;
      }
      if (v206 >= 9)
        v207 = v206 - 9;
      else
        v207 = v206;
      if (v207 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v207 < dword_1EDD16EC0)
          v206 = v206 - v207 + dword_1EDD16EC0;
      }
      v180 = v206;
      v208 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v209 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v209, CFSTR("legibilityWeight"), v208);
      v210 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v211 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v211, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v212 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v212, CFSTR("hasVariations"), v210);
      v213 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v213, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontCompactRounded"));
      LODWORD(valuePtr.isa) = 0;
      v187 = GetLocalizedTrimSetKey(v386, (unsigned int *)&valuePtr);
      v188 = kFontCompactRounded;
      goto LABEL_232;
    }
    v189 = isa - 236;
    if (isa - 236 <= 8)
    {
      v190 = a13;
      v191 = a7;
      v192 = (char *)&kOtherCondensedSpec + 40 * v189;
      v193 = (TDescriptorSource *)*(unsigned int *)v192;
      v194 = *((_DWORD *)v192 + 1);
      makeStyleName((unint64_t *)&valuePtr, v194, 0, (uint64_t)CFSTR("Condensed"));
      v195 = (const __CFString *)atomic_load((unint64_t *)&valuePtr);
      v196 = (const __CFString *)TDescriptorSource::UIFontNameForUIType(v193);
      addNames(CFSTR(".AppleSystemUIFont"), v195, v196, (TCFMutableDictionary *)&Mutable);

      v197 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", -0.2);
      addMetrics(v194, 0, 0, CFSTR("width"), v197, (unint64_t *)&Mutable);
      v198 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v198, CFSTR("NSCTFontProportionTrait"), v197);
      v199 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v190);
      v200 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v200, CFSTR("legibilityWeight"), v199);
      v201 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v202 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v202, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v203 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v203, CFSTR("hasVariations"), v201);
      v204 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v204, CFSTR("hasOpticalSizeAxis"), v201);
      v205 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v205, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFont"));
      v113 = &kFontInfoSemiCondensed;
LABEL_243:
      p_valuePtr = (unsigned int *)v192;
      v115 = v191;
      v116 = 0;
      v117 = v190;
LABEL_137:
      v118 = 0;
LABEL_152:
      addOpticalSizeComponents(p_valuePtr, (uint64_t)v113, v115, v116, v117, v118, (TCFMutableDictionary *)&Mutable);
      v37 = 0;
      goto LABEL_153;
    }
    v217 = isa - 245;
    if (isa - 245 <= 8)
    {
      v190 = a13;
      v191 = a7;
      v192 = (char *)&kOtherCoreCondensedSpec + 40 * v217;
      v218 = (TDescriptorSource *)*(unsigned int *)v192;
      v219 = *((_DWORD *)v192 + 1);
      makeStyleName((unint64_t *)&valuePtr, v219, 0, (uint64_t)CFSTR("Condensed"));
      v220 = (const __CFString *)atomic_load((unint64_t *)&valuePtr);
      v221 = (const __CFString *)TDescriptorSource::UIFontNameForUIType(v218);
      addNames(CFSTR(".AppleSystemUIFontCore"), v220, v221, (TCFMutableDictionary *)&Mutable);

      v222 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", -0.2);
      addMetrics(v219, 0, 0, CFSTR("width"), v222, (unint64_t *)&Mutable);
      v223 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v223, CFSTR("NSCTFontProportionTrait"), v222);
      v224 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v190);
      v225 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v225, CFSTR("legibilityWeight"), v224);
      v226 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v227 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v227, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v228 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v228, CFSTR("hasVariations"), v226);
      v229 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v229, CFSTR("hasOpticalSizeAxis"), v226);
      v230 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v230, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontCore"));
      v113 = &kFontInfoCoreSemiCondensed;
      goto LABEL_243;
    }
    v231 = isa - 254;
    if (isa - 254 <= 0xB)
    {
      v232 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v232, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignSerif"));
      v233 = (int *)((char *)&kOtherSerifSpec + 16 * v231);
      v234 = kSystemUIFontSerifNames[v231];
      v235 = *v233;
      v236 = v233[1];
      makeStyleName((unint64_t *)&valuePtr, *v233, v236, 0);
      v237 = (const __CFString *)atomic_load((unint64_t *)&valuePtr);
      addNames(CFSTR(".AppleSystemUIFontSerif"), v237, v234, (TCFMutableDictionary *)&Mutable);
      addMetrics(v235, v236, 0, 0, 0, (unint64_t *)&Mutable);

      v238 = v233[3];
      if (a13 == 1)
      {
        v239 = 0x1E0CB3000;
        v60 = v383;
        if (isa != 265 && ((0x1FEFFu >> v238) & 1) != 0)
          v238 = dword_184948124[v238];
      }
      else
      {
        v239 = 0x1E0CB3000uLL;
        v60 = v383;
      }
      v257 = (const void *)objc_msgSend(*(id *)(v239 + 2024), "numberWithLong:");
      v258 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v258, CFSTR("legibilityWeight"), v257);
      v259 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v260 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v260, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v261 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v261, CFSTR("hasVariations"), v259);
      v262 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v262, CFSTR("hasOpticalSizeAxis"), v259);
      v263 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v263, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontSerif"));
      v264 = v238 % 9;
      if (v238 % 9 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v264 < dword_1EDD16EC0)
          v238 = v238 - v264 + dword_1EDD16EC0;
      }
      if (((0x361Bu >> (v238 - 4)) & 1) != 0)
        v265 = 0;
      else
        v265 = a7;
      if (v238 - 4 <= 0xD)
        v266 = v265;
      else
        v266 = a7;
      if ((_DWORD)a7)
        v267 = v266;
      else
        v267 = 0;
      v268 = (const __CFString **)(&kFontSerif + 5 * v238);
      AddVariationInfoWithGrade((TCFMutableDictionary *)&Mutable, *v268, v267);
      valuePtr.isa = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
      insertOpticalSizeComponent((void **)v268, 0, (isa - 13), 0, v267, (unint64_t *)&valuePtr, 0, 0, 12.0);
      v269 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      v270 = (const void *)atomic_load((unint64_t *)&valuePtr);
LABEL_296:
      CFDictionaryAddValue(v269, CFSTR("Components"), v270);
      v126 = valuePtr.isa;
      goto LABEL_145;
    }
    v240 = isa - 266;
    if (isa - 266 <= 0xB)
    {
      v241 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v241, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignMonospaced"));
      v242 = (int *)((char *)&kOtherMonospacedSpec + 16 * v240);
      v243 = kSystemUIFontMonospacedNames[v240];
      v244 = *v242;
      v245 = v242[1];
      makeStyleName((unint64_t *)&valuePtr, *v242, v245, 0);
      v246 = (const __CFString *)atomic_load((unint64_t *)&valuePtr);
      addNames(CFSTR(".AppleSystemUIFontMonospaced"), v246, v243, (TCFMutableDictionary *)&Mutable);

      addMetrics(v244, v245, 0, CFSTR("isFixedPitch"), CFSTR("1"), (unint64_t *)&Mutable);
      v122 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
      v247 = v242[3];
      if (a13 == 1 && ((0x1FEFFu >> v247) & 1) != 0)
        v247 = dword_184948124[v247];
      v248 = v247 % 9;
      if (v247 % 9 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v248 < dword_1EDD16EC0)
          v247 = v247 - v248 + dword_1EDD16EC0;
      }
      v60 = v383;
      v249 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v250 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v250, CFSTR("legibilityWeight"), v249);
      v251 = (const void *)*MEMORY[0x1E0C9AE50];
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v252 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v252, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v253 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v253, CFSTR("hasVariations"), v251);
      v254 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v254, CFSTR("languagePropertiesCacheKey"), v243);
      AddVariationInfo((TCFMutableDictionary *)&Mutable, *(&kFontMono + 5 * v247));
      addComponentsWithTrimCharacterSet((const void **)&kFontMono + 5 * v247, 0, (unint64_t *)&Mutable, 0);
      goto LABEL_144;
    }
    v255 = isa - 278;
    if (isa - 278 <= 8)
    {
      v60 = v383;
      v256 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v256, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignSoft"));
      v273 = isa - 277;
      addNames(CFSTR(".AppleSystemUIFontSoft"), off_1E15E73A0[v255], kSystemUIFontSoftNames[v255], (TCFMutableDictionary *)&Mutable);
      addMetrics(isa - 277, 0, 0, 0, 0, (unint64_t *)&Mutable);
      if (a13 == 1 && v255 <= 7)
      {
        if (((1 << v255) & 0x78) != 0)
          v273 = isa - 276;
      }
      else
      {
        v273 = isa - 278;
      }
      if (v273 >= 9)
        v274 = v273 - 9;
      else
        v274 = v273;
      if (v274 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v274 < dword_1EDD16EC0)
          v273 = v273 - v274 + dword_1EDD16EC0;
      }
      v275 = v273;
      v276 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v277 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v277, CFSTR("legibilityWeight"), v276);
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v278 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v278, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v279 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v279, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontSoft"));
      v394[0] = 0;
      v38 = v386;
      v280 = GetLocalizedTrimSetKey(v386, v394);
      valuePtr.isa = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      setNameWithGrade(*(void **)(qword_1ECDE6F68 + 8 * v275), a7, (unint64_t *)&valuePtr);
      if (v394[0] == 64 || v394[0] == 32)
      {
        v281 = (__CFDictionary *)atomic_load((unint64_t *)&valuePtr);
        CFDictionaryAddValue(v281, CFSTR("UnicodeCharSetTrim"), v280);
      }
      v282 = (char *)atomic_load((unint64_t *)&valuePtr);
      v397.data = v282;
      v270 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v397.data, 1);
      v269 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      goto LABEL_296;
    }
    v60 = v383;
    v271 = isa - 287;
    if (isa - 287 <= 8)
    {
      v272 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v272, CFSTR("NSCTFontUIFontDesignTrait"), CFSTR("NSCTFontUIFontDesignCompactSoft"));
      v293 = isa - 286;
      addNames(CFSTR(".AppleSystemUIFontCompactSoft"), off_1E15E73A0[v271], kSystemUIFontCompactSoftNames[v271], (TCFMutableDictionary *)&Mutable);
      addMetrics(isa - 286, 0, 0, 0, 0, (unint64_t *)&Mutable);
      if (a13 == 1 && v271 <= 7)
      {
        if (((1 << v271) & 0x78) != 0)
          v293 = isa - 285;
      }
      else
      {
        v293 = isa - 287;
      }
      if (v293 >= 9)
        v294 = v293 - 9;
      else
        v294 = v293;
      if (v294 <= 2)
      {
        DetermineLanguageSpecificParameters();
        if (v294 < dword_1EDD16EC0)
          v293 = v293 - v294 + dword_1EDD16EC0;
      }
      v295 = v293;
      v296 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
      v297 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v297, CFSTR("legibilityWeight"), v296);
      if ((const void *)*MEMORY[0x1E0C9AE50] == a14)
      {
        v298 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v298, CFSTR("ignoreLegibilityWeight"), a14);
      }
      v299 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v299, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFontCompactSoft"));
      v394[0] = 0;
      v300 = GetLocalizedTrimSetKey(v386, v394);
      valuePtr.isa = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      setNameWithGrade(kFontSoftCompact[v295], a7, (unint64_t *)&valuePtr);
      if (v394[0] == 64 || v394[0] == 32)
      {
        v301 = (__CFDictionary *)atomic_load((unint64_t *)&valuePtr);
        CFDictionaryAddValue(v301, CFSTR("UnicodeCharSetTrim"), v300);
      }
      v302 = atomic_load((unint64_t *)&valuePtr);
      v397.info = v302;
      v303 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v397.info, 1);
      v304 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      goto LABEL_319;
    }
    v283 = isa - 296;
    if (isa - 296 <= 0x1F)
    {
      if (qword_1EDD16F68 != -1)
        dispatch_once(&qword_1EDD16F68, &__block_literal_global_2245);
      v284 = kChineseNames[v283];
      v285 = (__CFString **)qword_1ECDE6FA0;
      v286 = off_1E15E7348[isa & 7];
      Length = CFStringGetLength(v284);
      v399.length = Length + ~CFStringGetLength(v286);
      v399.location = 0;
      v288 = CFStringCreateWithSubstring(allocatora, v284, v399);
      v289 = (int)v285[5 * v283 + 2];
      addNames(v288, v286, v284, (TCFMutableDictionary *)&Mutable);
      v290 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v291 = v290;
      if ((v289 - 2) > 7)
        v292 = CFSTR("w1");
      else
        v292 = off_1E15E73E8[v289 - 2];
      CFDictionaryAddValue(v290, CFSTR("weightClass"), v292);
      if (HIDWORD(v285[5 * v283 + 2]) == 1)
        CFDictionaryAddValue(v291, CFSTR("italicAngle"), CFSTR("12.5"));
      v307 = &kFont2X[5 * (v289 - 1)];
      CFDictionaryAddValue(v291, CFSTR("ascender"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v307 + 6)));
      CFDictionaryAddValue(v291, CFSTR("descender"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -*((_DWORD *)v307 + 7)));
      CFDictionaryAddValue(v291, CFSTR("unitsPerEm"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)v307 + 1)));
      v308 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v308, CFSTR("FontMetrics"), v291);
      addComponentsForChinese((unint64_t *)&Mutable, v285, v283, v288);

      v305 = (void *)v288;
      goto LABEL_336;
    }
    v306 = isa - 328;
    if (isa - 328 <= 8)
    {
      addNames(CFSTR(".AppleJapaneseFont"), off_1E15E73A0[v306], kJapaneseNames[v306], (TCFMutableDictionary *)&Mutable);
      v312 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v313 = v312;
      v314 = (int)off_1ECDE6F70[0][5 * v306 + 2];
      if ((v314 - 2) > 7)
        v315 = CFSTR("w1");
      else
        v315 = off_1E15E73E8[v314 - 2];
      CFDictionaryAddValue(v312, CFSTR("weightClass"), v315);
      if (HIDWORD(off_1ECDE6F70[0][5 * v306 + 2]) == 1)
        CFDictionaryAddValue(v313, CFSTR("italicAngle"), CFSTR("12.5"));
      v316 = &kFont2X[5 * (v314 - 1)];
      CFDictionaryAddValue(v313, CFSTR("ascender"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v316 + 6)));
      CFDictionaryAddValue(v313, CFSTR("descender"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -*((_DWORD *)v316 + 7)));
      CFDictionaryAddValue(v313, CFSTR("unitsPerEm"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)v316 + 1)));
      CFDictionaryAddValue(v313, CFSTR("lineGap"), &unk_1E1614D58);
      v317 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v317, CFSTR("FontMetrics"), v313);
      addComponentsWithTrimCharacterSet((const void **)&off_1ECDE6F70[0][5 * v306], CFSTR("ja"), (unint64_t *)&Mutable, (uint64_t)&__block_literal_global_423);
LABEL_335:
      v305 = v313;
      goto LABEL_336;
    }
    v309 = isa - 338;
    if (isa >= 0x152)
    {
      if (v309 <= 7)
      {
        v310 = kKoreanNames[v309];
        v311 = off_1E15E7348[v309];
        v319 = 5 * v309;
        v320 = qword_1ECDE6F78 + 40 * v309;
        v321 = *(_DWORD *)(v320 + 16);
        v322 = *(_DWORD *)(v320 + 20);
        addNames(CFSTR(".AppleKoreanFont"), v311, v310, (TCFMutableDictionary *)&Mutable);
        addMetrics(v321, v322, 0, 0, 0, (unint64_t *)&Mutable);
        v323 = (const void **)(qword_1ECDE6F78 + 8 * v319);
        v324 = CFSTR("ko");
LABEL_342:
        addComponentsWithTrimCharacterSet(v323, v324, (unint64_t *)&Mutable, 0);
        goto LABEL_337;
      }
      v318 = isa - 347;
      if (isa < 0x15B)
        goto LABEL_337;
      if (v318 <= 8)
      {
        v328 = &kFontSFArabic + 5 * v318;
        v329 = *((_DWORD *)v328 + 4);
        addNames(CFSTR(".AppleArabicFont"), off_1E15E73A0[v318], kArabicNames[v318], (TCFMutableDictionary *)&Mutable);
        addMetrics(v329, 0, 0, 0, 0, (unint64_t *)&Mutable);
        valuePtr.isa = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
        AddVariationInfo((TCFMutableDictionary *)&Mutable, *v328);
        insertOpticalSizeComponent((void **)v328, 0, 0xFFFFFFFFLL, 0, 0, (unint64_t *)&valuePtr, 0, 0, 17.0);
        v330 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v331 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionaryAddValue(v330, CFSTR("hasVariations"), (const void *)*MEMORY[0x1E0C9AE50]);
        v332 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v332, CFSTR("hasOpticalSizeAxis"), v331);
        v333 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v333, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleArabicFont"));
        v304 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v303 = (const void *)atomic_load((unint64_t *)&valuePtr);
LABEL_319:
        CFDictionaryAddValue(v304, CFSTR("Components"), v303);
        v305 = valuePtr.isa;
LABEL_336:

        goto LABEL_337;
      }
      v325 = isa - 357;
      if (isa < 0x165)
        goto LABEL_337;
      if (v325 <= 2)
      {
        if (qword_1EDD16EE8 != -1)
          dispatch_once(&qword_1EDD16EE8, &__block_literal_global_424);
        v326 = kThaiNames[v325];
        v327 = off_1E15E7388[v325];
        v341 = 5 * v325;
        v342 = qword_1ECDE6F90 + 40 * v325;
        v343 = *(_DWORD *)(v342 + 16);
        v344 = *(_DWORD *)(v342 + 20);
        addNames(CFSTR(".AppleThaiFont"), v327, v326, (TCFMutableDictionary *)&Mutable);
        addMetrics(v343, v344, 0, 0, 0, (unint64_t *)&Mutable);
        v345 = qword_1ECDE6F90;
LABEL_359:
        v323 = (const void **)(v345 + 8 * v341);
        v324 = 0;
        goto LABEL_342;
      }
      v334 = isa - 361;
      if (isa < 0x169)
        goto LABEL_337;
      if (v334 <= 1)
      {
        if (_os_feature_enabled_impl() && qword_1EDD16EF0 != -1)
          dispatch_once(&qword_1EDD16EF0, &__block_literal_global_429);
        v335 = kUrduNames[v334];
        v336 = CFSTR("Bold");
        if (isa != 362)
          v336 = 0;
        if (isa == 361)
          v337 = CFSTR("Regular");
        else
          v337 = v336;
        v341 = 5 * v334;
        v338 = qword_1ECDE6F98 + 40 * v334;
        v339 = *(_DWORD *)(v338 + 16);
        v340 = *(_DWORD *)(v338 + 20);
        addNames(CFSTR(".AppleUrduFont"), v337, v335, (TCFMutableDictionary *)&Mutable);
        addMetrics(v339, v340, 0, 0, 0, (unint64_t *)&Mutable);
        v345 = qword_1ECDE6F98;
        goto LABEL_359;
      }
      if (isa == 364)
      {
        SyntheticAppleSymbolsSplicedFont = CreateSyntheticAppleSymbolsSplicedFont();
        do
          v347 = __ldaxr((unint64_t *)&Mutable);
        while (__stlxr(SyntheticAppleSymbolsSplicedFont, (unint64_t *)&Mutable));
        v305 = (void *)v347;
        goto LABEL_336;
      }
      v348 = isa - 365;
      if (isa < 0x16D)
        goto LABEL_337;
      if (v348 > 3)
      {
        v351 = isa - 369;
        if (isa - 369 > 8)
          goto LABEL_337;
        v352 = (int)kFont2X[5 * v351 + 2];
        v353 = HIDWORD(kFont2X[5 * v351 + 2]);
        addNames(CFSTR(".AppleSystemFallback"), off_1E15E73A0[v351], kSystemFallbackFontNames[v351], (TCFMutableDictionary *)&Mutable);
        addMetrics(v352, v353, 0, 0, 0, (unint64_t *)&Mutable);
        v313 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)&v354 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v354 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&valuePtr.isa = v354;
        *(_OWORD *)&valuePtr.data = v354;
        GetLocalizedTrimCharacterSet(&valuePtr, v386);
        v355 = (const void *)atomic_load((unint64_t *)&valuePtr);
        info = valuePtr.info;
        data = valuePtr.data;
        AddVariationInfo((TCFMutableDictionary *)&Mutable, *(const __CFString **)(qword_1ECDE6F88 + 8 * v351));
        if (v355 && data)
        {
          v358 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
          v359 = (const void *)atomic_load((unint64_t *)&valuePtr.length);
          CFDictionaryAddValue(v358, CFSTR("language"), v359);
          v360 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryAddValue(v360, CFSTR("UnicodeCharSet"), v355);
          if (v351 >= (unint64_t)data)
            v361 = (unint64_t)(data - 1);
          else
            v361 = v351;
          v362 = *(__CFString **)(info + 40 * v361);
          if (HasPingFangUIPrefix(v362))
          {
            v363 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".CJKSymbolsFallback%@-%@"), RegionCodeFromPingFangUI(v362), off_1E15E7138[v361 & 7]);
            CFDictionaryAddValue(v360, CFSTR("name"), v363);
            v364 = CFSTR("languagePropertiesCacheKey");
            v365 = CFSTR(".CJKSymbolsFallback");
            v366 = v360;
          }
          else
          {
            v364 = CFSTR("name");
            v366 = v360;
            v365 = v362;
          }
          CFDictionaryAddValue(v366, v364, v365);
          CFArrayAppendValue(v313, v360);

          v386 = 0;
        }
        v367 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionaryAddValue(v367, CFSTR("name"), *(const void **)(qword_1ECDE6F88 + 8 * v351));
        v368 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionaryAddValue(v367, CFSTR("hasVariations"), (const void *)*MEMORY[0x1E0C9AE50]);
        CFDictionaryAddValue(v367, CFSTR("hasOpticalSizeAxis"), v368);
        CFDictionaryAddValue(v367, CFSTR("languagePropertiesCacheKey"), CFSTR(".AppleSystemUIFont"));
        CFArrayAppendValue(v313, v367);

        if (v351 <= 1)
        {
          v369 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryAddValue(v369, CFSTR("name"), kFallbacksAux[v351]);
          CFArrayAppendValue(v313, v369);

        }
        v370 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v370, CFSTR("Components"), v313);
        goto LABEL_335;
      }
      SyntheticAppleTimesSplicedFont = CreateSyntheticAppleTimesSplicedFont(v348);
      if (SyntheticAppleTimesSplicedFont)
      {
        do
          v350 = (void *)__ldaxr((unint64_t *)&Mutable);
        while (__stlxr(SyntheticAppleTimesSplicedFont, (unint64_t *)&Mutable));

        v37 = 1;
        goto LABEL_338;
      }
    }
LABEL_337:
    v37 = 0;
LABEL_338:
    v38 = v386;
    goto LABEL_154;
  }
  v32 = (uint64_t)TextStyle;
  v378 = a7;
  v33 = (TDescriptorSource *)*(unsigned __int16 *)TextStyle;
  theArray = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
  v380 = *(_DWORD *)(v32 + 4);
  v34 = kFont2X;
  if (CFSTR("NSCTFontUIFontDesignRounded") == a4)
  {
    v35 = 1;
    goto LABEL_18;
  }
  v385 = 0;
  if (a4 && CFSTR("NSCTFontUIFontDesignRounded"))
  {
    v35 = CFEqual(a4, CFSTR("NSCTFontUIFontDesignRounded")) != 0;
LABEL_18:
    v385 = v35;
  }
  if (CFSTR("NSCTFontUIFontDesignCompactRounded") == a4)
  {
    v39 = 1;
  }
  else
  {
    v39 = 0;
    if (a4 && CFSTR("NSCTFontUIFontDesignCompactRounded"))
      v39 = CFEqual(a4, CFSTR("NSCTFontUIFontDesignCompactRounded")) != 0;
  }
  v371 = v39;
  *(_QWORD *)v394 = -1;
  if (a5)
    CFNumberGetValue(a5, kCFNumberDoubleType, v394);
  else
    *(_QWORD *)v394 = 0;
  v388 = (void *)*MEMORY[0x1E0C9AE50];
  if (isa - 151 > 4)
  {
    v41 = v33;
    v42 = v34;
    v24 = (uint64_t)a12;
  }
  else
  {
    v40 = isa - 151;
    v41 = v33;
    v42 = v34;
    v24 = (uint64_t)a12;
    if ((v40 & 0x80000000) == 0)
    {
      v43 = 0;
      while (LODWORD(kCondensedMapping[v43 + 1]) != (_DWORD)v33)
      {
        v43 += 44;
        if (v43 == 220)
        {
          v380 = *(_DWORD *)(v32 + 4);
          goto LABEL_45;
        }
      }
      v380 = HIDWORD(kCondensedMapping[v43 + 1]);
LABEL_45:
      v61 = -5;
      v62 = &dword_1E15E5740;
      v42 = &kFontInfoSemiCondensed;
      while (*v62 != (_DWORD)v33)
      {
        v62 += 88;
        if (__CFADD__(v61++, 1))
        {
          v41 = v33;
          goto LABEL_52;
        }
      }
      v41 = v61 + 182;
      v42 = &kFontInfoSemiCondensed;
    }
  }
LABEL_52:
  v64 = v385;
  if (!a4)
    v64 = 1;
  v373 = v41;
  if ((v64 & 1) != 0)
  {
    if ((_DWORD)a8 == 4)
    {
      a4 = CFSTR("NSCTFontUIFontDesignCompact");
      v42 = &kFont2XCompact;
      v65 = CFSTR(".AppleSystemUIFontCompact");
LABEL_66:
      v382 = v388;
      goto LABEL_67;
    }
LABEL_65:
    v65 = CFSTR(".AppleSystemUIFont");
    goto LABEL_66;
  }
  if (qword_1EDD16ED8 != -1)
    dispatch_once(&qword_1EDD16ED8, &__block_literal_global_2);
  Value = (__CFString **)CFDictionaryGetValue((CFDictionaryRef)qword_1EDD16EE0, a4);
  if (!Value)
    goto LABEL_65;
  if (Value == &kFontMono)
  {
    v382 = (const void *)*MEMORY[0x1E0C9AE40];
    v42 = &kFontMono;
    v65 = CFSTR(".AppleSystemUIFontMonospaced");
  }
  else
  {
    if (Value == &kFontSerif)
      v65 = CFSTR(".AppleSystemUIFontSerif");
    else
      v65 = CFSTR(".AppleSystemUIFontCompact");
    v382 = v388;
    v42 = Value;
  }
LABEL_67:
  v393 = 0;
  allocator = v25;
  v377 = v42;
  if (v42 == kFont2X)
    v372 = GetLocalizedTrimSetKey((__CFString *)a3, &v393);
  else
    v372 = 0;
  if (v387 >= 0xC)
    v67 = 3;
  else
    v67 = v387;
  v68 = *(_DWORD *)(v32 + 20);
  if (a13 == 1 && v68 <= 0x10 && ((0x1FEFFu >> v68) & 1) != 0)
    v68 = dword_184948124[v68];
  v69 = v68 % 9;
  if (v68 % 9 <= 2)
  {
    DetermineLanguageSpecificParameters();
    if (v69 < dword_1EDD16EC0)
    {
      v68 = dword_1EDD16EC0 + v68 - v69;
      v69 = v68 % 9;
    }
  }
  if (a5)
  {
    v68 = __const__Z19LocalTraitForWeightdd_kWeightTraits[(unsigned __int16)IndexesBracketing<double const*,double>(kCTFontDefaultWeights, (double *)&kCTFontWeightRegular, *(double *)v394, 0.001)]+ v68- v69;
    if (a13 == 1 && v68 <= 0x10 && ((0x1FEFFu >> v68) & 1) != 0)
      v68 = dword_184948124[v68];
    v69 = v68 % 9;
    v70 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryAddValue(v70, CFSTR("weight"), a5);
  }
  if (a5)
    v71 = v69 + 1;
  else
    v71 = v380;
  if ((a10 & (v68 < 9)) != 0)
    v72 = 1;
  else
    v72 = *(_DWORD *)(v32 + 8);
  if ((a10 & (v68 < 9)) != 0)
    v73 = v68 + 9;
  else
    v73 = v68;
  if (a4)
    v74 = a4;
  else
    v74 = CFSTR("NSCTFontUIFontDesignDefault");
  addPosingWithWeightAndSlant(v33, v71, v72, *(_DWORD *)(v32 + 12), v65, v74, (TCFMutableDictionary *)&Mutable, CFSTR("width"), number);
  v75 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v76 = v388;
  CFDictionaryAddValue(v75, CFSTR("isTextStyle"), v388);
  v77 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a13);
  v78 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v78, CFSTR("legibilityWeight"), v77);
  if (v76 == a14)
  {
    v79 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryAddValue(v79, CFSTR("ignoreLegibilityWeight"), a14);
  }
  if ((_DWORD)a8 != -1)
  {
    v80 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a8);
    v81 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryAddValue(v81, CFSTR("platform"), v80);
  }
  v392 = 0xAAAAAAAAAAAAAAAALL;
  valuePtr = *(__CFString *)ymmword_18493B568;
  v82 = &v377[5 * v73];
  v83 = (unint64_t)v82[4];
  v84 = *((_OWORD *)v82 + 1);
  *(_OWORD *)&valuePtr.isa = *(_OWORD *)v82;
  *(_OWORD *)&valuePtr.data = v84;
  v392 = v83;
  if (v385)
  {
    valuePtr.isa = off_1ECDE6F80[0][v69];
    v382 = (const void *)*MEMORY[0x1E0C9AE40];
    v65 = CFSTR(".AppleSystemUIFontRounded");
  }
  else if (v371)
  {
    valuePtr.isa = kFontCompactRounded[v69];
    valuePtr.length = 0xFFFFFE120000079ELL;
    v382 = (const void *)*MEMORY[0x1E0C9AE40];
    v65 = CFSTR(".AppleSystemUIFontCompactRounded");
  }
  else if (number)
  {
    v38 = v386;
    if (v377 == kFont2X)
      valuePtr.isa = SFFontNameForWidth(v73, number, 0);
    goto LABEL_107;
  }
  v38 = v386;
LABEL_107:
  v85 = v32 + 24;
  v86 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v86, CFSTR("languagePropertiesCacheKey"), v65);
  v87 = 0.0;
  if ((*(_BYTE *)(v32 + 16) & 0x10) != 0)
    v87 = *(double *)(v85 + 24 * v67 + 16);
  v88 = (double *)(v85 + 24 * v67);
  v390 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v89 = v88[1] * 0.5;
  v90 = *(_DWORD *)(v32 + 12);
  v91 = (void **)(&off_1E15E7330 + (int)a8 + 1);
  if ((a8 + 1) >= 3)
    v91 = (void **)&_MergedGlobals_2;
  v92 = 2.0;
  if (*v91 == &kTypeHierarchySpecWatch)
    v92 = 1.0;
  if ((a10 & 0x10000) != 0)
    v90 = -1;
  v93 = -0.0;
  if ((a10 & 0x10000) != 0)
    v93 = v92;
  v94 = v89 + v93;
  v95 = v89 - v92;
  if ((a10 & 0x8000) != 0)
    v96 = 1;
  else
    v96 = v90;
  if ((a10 & 0x8000) != 0)
    v97 = v95;
  else
    v97 = v94;
  v60 = v383;
  v98 = v378;
  if (!v378)
  {
    v99 = *(_DWORD *)(v32 + 16);
    if ((v99 & 0xF) != 0)
    {
      if ((v99 & 8) != 0)
        v98 = 4;
      else
        v98 = ((*(_DWORD *)(v32 + 16) & 0xFu) >> 1) + 1;
      v100 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v98, v95);
      v101 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionaryAddValue(v101, CFSTR("grade"), v100);
    }
    else
    {
      v98 = 0;
    }
  }
  if (v381)
    v27 = LanguageAwareLineSpacingOverrideRatio(v32, v38);
  setOpticalSizeComponent(valuePtr.isa, (uint64_t)&valuePtr, v373, v96, v98, v372, (unint64_t *)&v390, a16, *v88 * 0.5, v97, v27, v87, 0);
  v119 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v387);
  v120 = (__CFDictionary *)atomic_load((unint64_t *)&v390);
  CFDictionaryAddValue(v120, CFSTR("sizeCategory"), v119);
  if (v382 == v388)
    AddVariationInfoWithGrade((TCFMutableDictionary *)&Mutable, (const __CFString *)valuePtr.isa, v98);
  v121 = (const void *)atomic_load((unint64_t *)&v390);
  v122 = theArray;
  CFArrayInsertValueAtIndex(theArray, 0, v121);
  v123 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v123, CFSTR("hasVariations"), v388);
  v124 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v124, CFSTR("hasOpticalSizeAxis"), v382);
  v125 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v125, CFSTR("Components"), v122);

LABEL_144:
  v126 = v122;
LABEL_145:

LABEL_146:
  v37 = 0;
LABEL_154:
  if (atomic_load((unint64_t *)&Mutable))
  {
    v139 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
    if (CFDictionaryGetCount(v139))
    {
      if (v38)
      {
        v140 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryAddValue(v140, CFSTR("language"), v38);
      }
      if (v24)
      {
        v141 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v142 = CFSTR("lineSpacingOverride");
        v143 = (const void *)v24;
      }
      else
      {
        v143 = a11;
        if (!a11)
        {
LABEL_164:
          if (a15)
          {
            v144 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
            CFDictionaryAddValue(v144, CFSTR("cacheKey"), a15);
          }
          CreateSplicedFontFromStash((unint64_t *)&Mutable, 0, v37, v60);
          goto LABEL_167;
        }
        v141 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v142 = CFSTR("languageAwareLineHeightRatio");
      }
      CFDictionaryAddValue(v141, v142, v143);
      goto LABEL_164;
    }
  }
  *v60 = 0;
LABEL_167:

}

void ___Z20MakeSpliceDescriptorPK10__CFStringmS1_S1_PK10__CFNumberS4_j23CTFontTextStylePlatformjS4_S4_22CTFontLegibilityWeightPK11__CFBooleanPKvS1__block_invoke()
{
  unint64_t v0;
  id v1;
  void *values[2];
  __int128 v3;
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("NSCTFontUIFontDesignSerif");
  keys[1] = CFSTR("NSCTFontUIFontDesignMonospaced");
  keys[2] = CFSTR("NSCTFontUIFontDesignCompact");
  keys[3] = CFSTR("NSCTFontUIFontDesignCore");
  *(_OWORD *)values = xmmword_1E15E5018;
  v3 = *(_OWORD *)off_1E15E5028;
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], 0);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));
  qword_1EDD16EE0 = v0;

}

void setOpticalSizeComponent(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, const void *a6, unint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, const void *a13)
{
  const void *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  CFAllocatorRef *v26;
  double v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  const void *v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  uint64_t v36;
  const void *v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  double valuePtr;

  setNameWithGrade(a1, a5, a7);
  if (a9 >= 0.0)
  {
    v23 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a9);
    v24 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v24, CFSTR("opticalSize"), v23);
  }
  if (a13)
  {
    v25 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v25, CFSTR("familyName"), a13);
  }
  v26 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a10 > 0.0)
  {
    v27 = *(double *)(a2 + 8) * a10 / a9 - (double)(*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 28));
    if (a4 == 1 || (a3 - 61) <= 3)
    {
      DetermineLanguageSpecificParameters();
      if (byte_1EDD16EB9)
        v27 = v27 + 1.0;
    }
    valuePtr = v27;
    v28 = CFNumberCreate(*v26, kCFNumberDoubleType, &valuePtr);
    v29 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v29, CFSTR("leadingOverride"), v28);

  }
  if (a11 != 0.0)
  {
    valuePtr = a11;
    v30 = CFNumberCreate(*v26, kCFNumberDoubleType, &valuePtr);
    v31 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v31, CFSTR("lineSpacingOverrideRatio"), v30);

  }
  if (*(_DWORD *)(a2 + 32))
  {
    v32 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v33 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v33, CFSTR("capHeight"), v32);
  }
  if (a12 != 0.0)
  {
    valuePtr = a12;
    v34 = CFNumberCreate(*v26, kCFNumberDoubleType, &valuePtr);
    v35 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v35, CFSTR("trackingAmount"), v34);

  }
  if (a3 <= 0x144)
  {
    if (qword_1EDD16F10 != -1)
      dispatch_once(&qword_1EDD16F10, &__block_literal_global_1043);
    v36 = objc_msgSend((id)qword_1EDD16F08, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3));
    if (v36)
    {
      v37 = (const void *)v36;
      if (a8)
        v37 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v36, a8);
      v38 = (__CFDictionary *)atomic_load(a7);
      CFDictionaryAddValue(v38, CFSTR("NSCTFontUIUsageAttribute"), v37);
    }
  }
  if (a6)
  {
    v39 = (__CFDictionary *)atomic_load(a7);
    CFDictionaryAddValue(v39, CFSTR("UnicodeCharSetTrim"), a6);
  }
}

void addComponentsWithNameAndTrimCharacterSet(const __CFString *a1, const __CFString *a2, TCFMutableDictionary *a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  __CFDictionary *v8;
  __CFDictionary *v9;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v8, CFSTR("name"), a1);
  if (a2)
    CFDictionaryAddValue(v8, CFSTR("UnicodeCharSetTrim"), a2);
  CFArrayAppendValue(Mutable, v8);
  v9 = (__CFDictionary *)atomic_load((unint64_t *)a3);
  CFDictionaryAddValue(v9, CFSTR("Components"), Mutable);

}

void insertOpticalSizeComponent(void **a1, void *a2, uint64_t a3, int a4, uint64_t a5, unint64_t *a6, const void *a7, const void *a8, double a9)
{
  void *v18;
  const void *v19;
  __CFArray *v20;
  id Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
    v18 = a2;
  else
    v18 = *a1;
  setOpticalSizeComponent(v18, (uint64_t)a1, a3, a4, a5, a7, (unint64_t *)&Mutable, 0, a9, 0.0, 0.0, 0.0, a8);
  v19 = (const void *)atomic_load((unint64_t *)&Mutable);
  v20 = (__CFArray *)atomic_load(a6);
  CFArrayInsertValueAtIndex(v20, 0, v19);

}

void addComponentsForChinese(unint64_t *a1, __CFString **a2, unint64_t a3, const void *a4)
{
  const __CFAllocator *v8;
  __CFArray *Mutable;
  uint64_t v10;
  __CFDictionary *v11;
  id v12;
  void *v13;
  id v14;
  __CFDictionary *v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  const __CFString *v18;
  unint64_t v19;
  id v20;
  __CFString **v21;
  void *v22;
  id v23;
  __CFDictionary *v24;
  id v25;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v10 = *(uint64_t *)((char *)kChineseRegionCodes + (a3 & 0xFFFFFFFFFFFFFFF8));
  if (a2 == &kFontChineseUI)
  {
    v25 = (id)0xAAAAAAAAAAAAAAAALL;
    CreateSyntheticPingFangOpticalSplicedFont((unint64_t *)&v25, (uint64_t)(&kFontChineseUI + 5 * a3));
    v13 = (void *)atomic_load((unint64_t *)&v25);
    v14 = v13;
    CFArrayAppendValue(Mutable, v14);

    v12 = v25;
  }
  else
  {
    v11 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(v11, CFSTR("name"), a2[5 * a3]);
    CFDictionaryAddValue(v11, CFSTR("UnicodeCharSetTrim"), CFSTR("zh"));
    CFDictionaryAddValue(v11, CFSTR("languagePropertiesCacheKey"), a4);
    CFArrayAppendValue(Mutable, v11);
    v12 = v11;
  }

  v15 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v15, CFSTR("languagePropertiesCacheKey"), CFSTR(".CJKSymbolsFallback"));
  CFDictionaryAddValue(v15, CFSTR("name"), (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".CJKSymbolsFallback%@-%@"), v10, off_1E15E7138[a3 & 7]));
  CFArrayAppendValue(Mutable, v15);
  if (a2 == &kFontChineseUI)
  {
    v25 = (id)0xAAAAAAAAAAAAAAAALL;
    if (a3 < 8)
      v21 = &kFontChineseUI + 5 * a3 + 40;
    else
      v21 = &kFontChineseUI + 5 * (a3 & 7);
    CreateSyntheticPingFangOpticalSplicedFont((unint64_t *)&v25, (uint64_t)v21);
    v22 = (void *)atomic_load((unint64_t *)&v25);
    v23 = v22;
    CFArrayAppendValue(Mutable, v23);

    v20 = v25;
  }
  else
  {
    v16 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v17 = v16;
    if (a3 <= 7)
      v18 = CFSTR(".AppleTraditionalChineseFont");
    else
      v18 = CFSTR(".AppleSimplifiedChineseFont");
    if (a3 <= 7)
      v19 = a3 + 8;
    else
      v19 = a3 & 7;
    CFDictionaryAddValue(v16, CFSTR("languagePropertiesCacheKey"), v18);
    CFDictionaryAddValue(v17, CFSTR("name"), a2[5 * v19]);
    CFDictionaryAddValue(v17, CFSTR("UnicodeCharSetTrim"), CFSTR("zh"));
    CFArrayAppendValue(Mutable, v17);
    v20 = v17;
  }

  v24 = (__CFDictionary *)atomic_load(a1);
  CFDictionaryAddValue(v24, CFSTR("Components"), Mutable);

}

void ___Z20MakeSpliceDescriptorPK10__CFStringmS1_S1_PK10__CFNumberS4_j23CTFontTextStylePlatformjS4_S4_22CTFontLegibilityWeightPK11__CFBooleanPKvS1__block_invoke_2()
{
  __CFBundle *MainBundle;
  const __CFDictionary *InfoDictionary;
  const __CFBoolean *v2;
  void *v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  int Value;

  MainBundle = CFBundleGetMainBundle();
  InfoDictionary = CFBundleGetInfoDictionary(MainBundle);
  if (InfoDictionary
    && (v2 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, CFSTR("CTUseSukhumvitSetAsCompactThaiFallback"))) != 0
    && CFBooleanGetValue(v2))
  {
    qword_1ECDE6F90 = (uint64_t)&kFontThaiSukhumvit;
  }
  else
  {
    v3 = (void *)CFPreferencesCopyAppValue(CFSTR("CTUseSukhumvitSetAsCompactThaiFallback"), (CFStringRef)*MEMORY[0x1E0C9B248]);
    v4 = v3;
    if (v4)
    {
      v5 = v4;
      Value = CFBooleanGetValue(v4);

      if (Value)
        qword_1ECDE6F90 = (uint64_t)&kFontThaiSukhumvit;
    }
    else
    {

    }
  }
}

void ___Z20MakeSpliceDescriptorPK10__CFStringmS1_S1_PK10__CFNumberS4_j23CTFontTextStylePlatformjS4_S4_22CTFontLegibilityWeightPK11__CFBooleanPKvS1__block_invoke_3()
{
  if (RegisterAltUrduUIFont(void)::onceToken != -1)
    dispatch_once(&RegisterAltUrduUIFont(void)::onceToken, &__block_literal_global_1918);
  qword_1ECDE6F98 = (uint64_t)&kFontUrduDecoNastaleeq;
}

unint64_t CreateSyntheticAppleTimesSplicedFont(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *v3;
  __CFDictionary *v4;
  const CFArrayCallBacks *v5;
  __CFArray *v6;
  __CFString **v7;
  const __CFString *v8;
  uint64_t v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  __CFArray *v12;
  __CFDictionary *v13;
  const __CFString *v14;
  const __CFCharacterSet *CharacterSetForFont;
  const __CFCharacterSet *v16;
  __CFCharacterSet *MutableCopy;
  CFCharacterSetRef Copy;
  __CFDictionary *v19;
  unint64_t v20;
  id Mutable;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v3, CFSTR("name"), kTimesFBNames[a1]);
  v4 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v4, CFSTR("version"), CFSTR("1.0"));
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v6 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("1");
  v26 = CFSTR(".Times Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("16");
  v26 = CFSTR(".Times Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v7 = &kTimesFBSpliceFontInfo[2 * a1];
  v8 = v7[1];
  v9 = objc_msgSend(CFSTR(".Times Fallback"), "stringByAppendingFormat:", CFSTR(" %@"), v8);
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("4");
  v26 = (const __CFString *)v9;
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("18");
  v26 = CFSTR(".Times Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("2");
  v26 = v8;
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v23 = CFSTR("type");
  v24 = CFSTR("string");
  v25 = CFSTR("7");
  v26 = CFSTR("Apple Inc.");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v23, 2));
  v10 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v10, CFSTR("familyName"), CFSTR(".Times Fallback"));
  v11 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v11, CFSTR("FontNames"), v6);

  v12 = CFArrayCreateMutable(v2, 0, v5);
  v13 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = *v7;
  CFDictionaryAddValue(v13, CFSTR("name"), *v7);
  CharacterSetForFont = CreateCharacterSetForFont(v14);
  if (CharacterSetForFont)
  {
    v16 = CharacterSetForFont;
    MutableCopy = CFCharacterSetCreateMutableCopy(v2, CharacterSetForFont);
    v28.location = 1536;
    v28.length = 256;
    CFCharacterSetRemoveCharactersInRange(MutableCopy, v28);
    v29.location = 1872;
    v29.length = 48;
    CFCharacterSetRemoveCharactersInRange(MutableCopy, v29);
    v30.location = 8204;
    v30.length = 2;
    CFCharacterSetRemoveCharactersInRange(MutableCopy, v30);
    v31.location = 64336;
    v31.length = 688;
    CFCharacterSetRemoveCharactersInRange(MutableCopy, v31);
    v32.location = 65136;
    v32.length = 144;
    CFCharacterSetRemoveCharactersInRange(MutableCopy, v32);
    Copy = CFCharacterSetCreateCopy(v2, MutableCopy);
    CFDictionaryAddValue(v13, CFSTR("UnicodeCharSet"), Copy);

    CFArrayAppendValue(v12, v13);
    v19 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryAddValue(v19, CFSTR("Components"), v12);

    do
      v20 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
  }
  else
  {

    v20 = 0;
  }

  return v20;
}

BOOL HasPingFangUIPrefix(CFStringRef theString)
{
  const __CFString *v2;

  if (qword_1EDD16F68 != -1)
    dispatch_once(&qword_1EDD16F68, &__block_literal_global_2245);
  if ((__CFString **)qword_1ECDE6FA0 == &kFontChineseUI)
    v2 = CFSTR(".PingFangUI");
  else
    v2 = CFSTR(".PingFang");
  return CFStringHasPrefix(theString, v2) != 0;
}

const __CFString *RegionCodeFromPingFangUI(__CFString *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (HasPingFangUIPrefix(a1) && (v2 = -[__CFString rangeOfString:](a1, "rangeOfString:", CFSTR("-")), v3))
    return (const __CFString *)-[__CFString substringWithRange:](a1, "substringWithRange:", v2 - 2, 2);
  else
    return &stru_1E15EDAC0;
}

void CreateSplicedFontFromStash(unint64_t *a1@<X0>, void *a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  void *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int v13;

  do
    v7 = (void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  v8 = TSplicedFont::Create(a2, (uint64_t)&kAdopted, v7);
  if (v8)
  {
    if (a3)
      v9 = 4;
    else
      v9 = 1028;
    if (a2)
      v9 = 0;
    v13 = v9;
    v11 = v8;
    TCFBase_NEW<CTFontDescriptor,TBaseFont const*&,unsigned int &>(&v11, &v13, (unint64_t *)&v12);
    do
      v10 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a4 = v10;

  }
  else
  {
    *a4 = 0;
  }
}

uint64_t TSplicedFont::Create(void *a1, uint64_t a2, void *a3)
{
  const __CFArray *v5;
  const void *ValueAtIndex;
  const void *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  void *Value;
  const __CFDictionary *v11;
  const __CFArray *v12;
  void *v13;
  void *v14;
  id v16;
  id v17;
  id v18;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v17 = a3;
  TSplicedFont::CreateCascadeList((TSplicedFont *)&v17, (const TSplicedFontDict *)((a1 != 0) << 17), (unint64_t *)&v16);
  if (atomic_load((unint64_t *)&v16))
  {
    v5 = (const __CFArray *)atomic_load((unint64_t *)&v16);
    if (v5 && (ValueAtIndex = CFArrayGetValueAtIndex(v5, 0)) != 0)
    {
      v7 = ValueAtIndex;
      v8 = operator new();
      v9 = (const __CFDictionary *)atomic_load((unint64_t *)&v17);
      if (v9)
        Value = (void *)CFDictionaryGetValue(v9, CFSTR("name"));
      else
        Value = 0;
      v12 = (const __CFArray *)atomic_load((unint64_t *)&v16);
      if (a1)
      {
        TBaseFont::TBaseFont(v8, a1, Value);
      }
      else
      {
        TSplicedFont::SynthesiseURL((TSplicedFont *)Value, (CFURLRef *)&v18);
        v13 = (void *)atomic_load((unint64_t *)&v18);
        TBaseFont::TBaseFont(v8, v13, Value);

      }
      *(_QWORD *)v8 = &off_1E15DCBC8;
      v14 = (void *)atomic_load((unint64_t *)&v17);
      *(_QWORD *)(v8 + 600) = v14;
      *(_QWORD *)(v8 + 608) = v7;
      *(_QWORD *)(v8 + 616) = 0;
      *(_QWORD *)(v8 + 624) = TSplicedFont::EvalComponents((TSplicedFont *)v8, v12);
      *(_BYTE *)(v8 + 632) = a1 == 0;
    }
    else
    {
      v8 = 0;
      atomic_load((unint64_t *)&v16);
    }
  }
  else
  {
    v11 = (const __CFDictionary *)atomic_load((unint64_t *)&v17);
    if (v11)
      CFDictionaryGetValue(v11, CFSTR("Components"));
    v8 = 0;
  }

  return v8;
}

id ___Z28UITypeForTextStyleDictionaryv_block_invoke()
{
  id result;
  _QWORD v1[282];
  _QWORD v2[283];

  v2[282] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("CTFontRegularUsage");
  v1[1] = CFSTR("CTFontEmphasizedUsage");
  v2[0] = &unk_1E1614D70;
  v2[1] = &unk_1E1614D88;
  v1[2] = CFSTR("UICTFontTextStyleHeadline1");
  v1[3] = CFSTR("UICTFontTextStyleShortHeadline1");
  v2[2] = &unk_1E1614DA0;
  v2[3] = &unk_1E1614DB8;
  v1[4] = CFSTR("UICTFontTextStyleEmphasizedSubhead1");
  v1[5] = CFSTR("UICTFontTextStyleSubhead1");
  v2[4] = &unk_1E1614DD0;
  v2[5] = &unk_1E1614DE8;
  v1[6] = CFSTR("UICTFontTextStyleItalicSubhead1");
  v1[7] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead1");
  v2[6] = &unk_1E1614E00;
  v2[7] = &unk_1E1614E18;
  v1[8] = CFSTR("UICTFontTextStyleShortSubhead1");
  v1[9] = CFSTR("UICTFontTextStyleShortItalicSubhead1");
  v2[8] = &unk_1E1614E30;
  v2[9] = &unk_1E1614E48;
  v1[10] = CFSTR("CTFontObliqueUsage");
  v1[11] = CFSTR("CTFontEmphasizedObliqueUsage");
  v2[10] = &unk_1E1614E60;
  v2[11] = &unk_1E1614E78;
  v1[12] = CFSTR("UICTFontTextStyleHeadline");
  v1[13] = CFSTR("UICTFontTextStyleShortHeadline");
  v2[12] = &unk_1E1614DA0;
  v2[13] = &unk_1E1614DB8;
  v1[14] = CFSTR("UICTFontTextStyleHeadline2");
  v1[15] = CFSTR("UICTFontTextStyleItalicHeadline2");
  v2[14] = &unk_1E1614E90;
  v2[15] = &unk_1E1614EA8;
  v1[16] = CFSTR("UICTFontTextStyleShortHeadline2");
  v1[17] = CFSTR("UICTFontTextStyleShortItalicHeadline2");
  v2[16] = &unk_1E1614EC0;
  v2[17] = &unk_1E1614ED8;
  v1[18] = CFSTR("UICTFontTextStyleEmphasizedBody");
  v1[19] = CFSTR("UICTFontTextStyleBody");
  v2[18] = &unk_1E1614EF0;
  v2[19] = &unk_1E1614F08;
  v1[20] = CFSTR("UICTFontTextStyleEmphasizedItalicBody");
  v1[21] = CFSTR("UICTFontTextStyleItalicBody");
  v2[20] = &unk_1E1614F20;
  v2[21] = &unk_1E1614F38;
  v1[22] = CFSTR("UICTFontTextStyleShortEmphasizedBody");
  v1[23] = CFSTR("UICTFontTextStyleShortBody");
  v2[22] = &unk_1E1614F50;
  v2[23] = &unk_1E1614F68;
  v1[24] = CFSTR("UICTFontTextStyleShortEmphasizedItalicBody");
  v1[25] = CFSTR("UICTFontTextStyleShortItalicBody");
  v2[24] = &unk_1E1614F80;
  v2[25] = &unk_1E1614F98;
  v1[26] = CFSTR("UICTFontTextStyleEmphasizedSubhead");
  v1[27] = CFSTR("UICTFontTextStyleSubhead");
  v2[26] = &unk_1E1614DD0;
  v2[27] = &unk_1E1614DE8;
  v1[28] = CFSTR("UICTFontTextStyleItalicSubhead");
  v1[29] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead");
  v2[28] = &unk_1E1614E00;
  v2[29] = &unk_1E1614E18;
  v1[30] = CFSTR("UICTFontTextStyleShortSubhead");
  v1[31] = CFSTR("UICTFontTextStyleShortItalicSubhead");
  v2[30] = &unk_1E1614E30;
  v2[31] = &unk_1E1614E48;
  v1[32] = CFSTR("UICTFontTextStyleEmphasizedSubhead2");
  v1[33] = CFSTR("UICTFontTextStyleSubhead2");
  v2[32] = &unk_1E1614FB0;
  v2[33] = &unk_1E1614FC8;
  v1[34] = CFSTR("UICTFontTextStyleItalicSubhead2");
  v1[35] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead2");
  v2[34] = &unk_1E1614FE0;
  v2[35] = &unk_1E1614FF8;
  v1[36] = CFSTR("UICTFontTextStyleShortSubhead2");
  v1[37] = CFSTR("UICTFontTextStyleShortItalicSubhead2");
  v2[36] = &unk_1E1615010;
  v2[37] = &unk_1E1615028;
  v1[38] = CFSTR("UICTFontTextStyleEmphasizedFootnote");
  v1[39] = CFSTR("UICTFontTextStyleFootnote");
  v2[38] = &unk_1E1615040;
  v2[39] = &unk_1E1615058;
  v1[40] = CFSTR("UICTFontTextStyleItalicFootnote");
  v1[41] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote");
  v2[40] = &unk_1E1615070;
  v2[41] = &unk_1E1615088;
  v1[42] = CFSTR("UICTFontTextStyleShortFootnote");
  v1[43] = CFSTR("UICTFontTextStyleShortItalicFootnote");
  v2[42] = &unk_1E16150A0;
  v2[43] = &unk_1E16150B8;
  v1[44] = CFSTR("UICTFontTextStyleEmphasizedCaption1");
  v1[45] = CFSTR("UICTFontTextStyleCaption1");
  v2[44] = &unk_1E16150D0;
  v2[45] = &unk_1E16150E8;
  v1[46] = CFSTR("UICTFontTextStyleItalicCaption1");
  v1[47] = CFSTR("UICTFontTextStyleShortEmphasizedCaption1");
  v2[46] = &unk_1E1615100;
  v2[47] = &unk_1E1615118;
  v1[48] = CFSTR("UICTFontTextStyleShortCaption1");
  v1[49] = CFSTR("UICTFontTextStyleShortItalicCaption1");
  v2[48] = &unk_1E1615130;
  v2[49] = &unk_1E1615148;
  v1[50] = CFSTR("UICTFontTextStyleEmphasizedCaption2");
  v1[51] = CFSTR("UICTFontTextStyleCaption2");
  v2[50] = &unk_1E1615160;
  v2[51] = &unk_1E1615178;
  v1[52] = CFSTR("UICTFontTextStyleItalicCaption2");
  v1[53] = CFSTR("UICTFontTextStyleTallEmphasizedBody");
  v2[52] = &unk_1E1615190;
  v2[53] = &unk_1E16151A8;
  v1[54] = CFSTR("UICTFontTextStyleTallBody");
  v1[55] = CFSTR("UICTFontTextStyleTallEmphasizedItalicBody");
  v2[54] = &unk_1E16151C0;
  v2[55] = &unk_1E16151D8;
  v1[56] = CFSTR("UICTFontTextStyleTallItalicBody");
  v1[57] = CFSTR("UICTFontTextStyleItalicHeadline");
  v2[56] = &unk_1E16151F0;
  v2[57] = &unk_1E1615208;
  v1[58] = CFSTR("UICTFontTextStyleShortItalicHeadline");
  v1[59] = CFSTR("CTFontThinUsage");
  v2[58] = &unk_1E1615220;
  v2[59] = &unk_1E1615238;
  v1[60] = CFSTR("CTFontLightUsage");
  v1[61] = CFSTR("CTFontUltraLightUsage");
  v2[60] = &unk_1E1615250;
  v2[61] = &unk_1E1615268;
  v1[62] = CFSTR("CTFontMediumUsage");
  v1[63] = CFSTR("CTFontDemiUsage");
  v2[62] = &unk_1E1615280;
  v2[63] = &unk_1E1615298;
  v1[64] = CFSTR("CTFontBoldUsage");
  v2[64] = &unk_1E16152B0;
  v1[65] = CFSTR("CTFontHeavyUsage");
  v2[65] = &unk_1E16152C8;
  v1[66] = CFSTR("CTFontBlackUsage");
  v2[66] = &unk_1E16152E0;
  v1[67] = CFSTR("UICTFontTextStyleCallout");
  v2[67] = &unk_1E16152F8;
  v1[68] = CFSTR("UICTFontTextStyleItalicCallout");
  v2[68] = &unk_1E1615310;
  v1[69] = CFSTR("UICTFontTextStyleEmphasizedCallout");
  v2[69] = &unk_1E1615328;
  v1[70] = CFSTR("UICTFontTextStyleEmphasizedItalicCallout");
  v2[70] = &unk_1E1615340;
  v1[71] = CFSTR("UICTFontTextStyleShortCallout");
  v2[71] = &unk_1E1615358;
  v1[72] = CFSTR("UICTFontTextStyleShortItalicCallout");
  v2[72] = &unk_1E1615370;
  v1[73] = CFSTR("UICTFontTextStyleShortEmphasizedCallout");
  v2[73] = &unk_1E1615388;
  v1[74] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCallout");
  v2[74] = &unk_1E16153A0;
  v1[75] = CFSTR("UICTFontTextStyleTallCallout");
  v2[75] = &unk_1E16153B8;
  v1[76] = CFSTR("UICTFontTextStyleTallItalicCallout");
  v2[76] = &unk_1E16153D0;
  v1[77] = CFSTR("UICTFontTextStyleTallEmphasizedCallout");
  v2[77] = &unk_1E16153E8;
  v1[78] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCallout");
  v2[78] = &unk_1E1615400;
  v1[79] = CFSTR("UICTFontTextStyleEmphasizedFootnote2");
  v2[79] = &unk_1E1615418;
  v1[80] = CFSTR("UICTFontTextStyleFootnote2");
  v2[80] = &unk_1E1615430;
  v1[81] = CFSTR("UICTFontTextStyleItalicFootnote2");
  v2[81] = &unk_1E1615448;
  v1[82] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote2");
  v2[82] = &unk_1E1615460;
  v1[83] = CFSTR("UICTFontTextStyleShortFootnote2");
  v2[83] = &unk_1E1615478;
  v1[84] = CFSTR("UICTFontTextStyleShortItalicFootnote2");
  v2[84] = &unk_1E1615490;
  v1[85] = CFSTR("UICTFontTextStyleShortEmphasizedCaption2");
  v2[85] = &unk_1E16154A8;
  v1[86] = CFSTR("UICTFontTextStyleShortCaption2");
  v2[86] = &unk_1E16154C0;
  v1[87] = CFSTR("UICTFontTextStyleShortItalicCaption2");
  v2[87] = &unk_1E16154D8;
  v1[88] = CFSTR("CTFontThinItalicUsage");
  v2[88] = &unk_1E16154F0;
  v1[89] = CFSTR("CTFontLightItalicUsage");
  v2[89] = &unk_1E1615508;
  v1[90] = CFSTR("CTFontUltraLightItalicUsage");
  v2[90] = &unk_1E1615520;
  v1[91] = CFSTR("CTFontMediumItalicUsage");
  v2[91] = &unk_1E1615538;
  v1[92] = CFSTR("CTFontDemiItalicUsage");
  v2[92] = &unk_1E1615550;
  v1[93] = CFSTR("CTFontBoldItalicUsage");
  v2[93] = &unk_1E1615568;
  v1[94] = CFSTR("CTFontHeavyItalicUsage");
  v2[94] = &unk_1E1615580;
  v1[95] = CFSTR("CTFontBlackItalicUsage");
  v2[95] = &unk_1E1615598;
  v1[96] = CFSTR("CTFontTextStyleUltraLight");
  v2[96] = &unk_1E16155B0;
  v1[97] = CFSTR("CTFontTextStyleThin");
  v2[97] = &unk_1E16155C8;
  v1[98] = CFSTR("CTFontSystemUIAlternateRegular");
  v2[98] = &unk_1E16155E0;
  v1[99] = CFSTR("CTFontSystemUIAlternateBold");
  v2[99] = &unk_1E16155F8;
  v1[100] = CFSTR("CTFontSystemUIAlternateThin");
  v2[100] = &unk_1E1615610;
  v1[101] = CFSTR("CTFontSystemUIAlternateLight");
  v2[101] = &unk_1E1615628;
  v1[102] = CFSTR("CTFontSystemUIAlternateUltraLight");
  v2[102] = &unk_1E1615640;
  v1[103] = CFSTR("CTFontSystemUIAlternateMedium");
  v2[103] = &unk_1E1615658;
  v1[104] = CFSTR("CTFontSystemUIAlternateSemiBold");
  v2[104] = &unk_1E1615670;
  v1[105] = CFSTR("CTFontSystemUIAlternateHeavy");
  v2[105] = &unk_1E1615688;
  v1[106] = CFSTR("CTFontSystemUIAlternateBlack");
  v2[106] = &unk_1E16156A0;
  v1[107] = CFSTR("CTFontSystemUIAlternateItalic");
  v2[107] = &unk_1E16156B8;
  v1[108] = CFSTR("CTFontSystemUIAlternateBoldItalic");
  v2[108] = &unk_1E16156D0;
  v1[109] = CFSTR("CTFontSystemUIAlternateThinItalic");
  v2[109] = &unk_1E16156E8;
  v1[110] = CFSTR("CTFontSystemUIAlternateLightItalic");
  v2[110] = &unk_1E1615700;
  v1[111] = CFSTR("CTFontSystemUIAlternateUltraLightItalic");
  v2[111] = &unk_1E1615718;
  v1[112] = CFSTR("CTFontSystemUIAlternateMediumItalic");
  v2[112] = &unk_1E1615730;
  v1[113] = CFSTR("CTFontSystemUIAlternateSemiBoldItalic");
  v2[113] = &unk_1E1615748;
  v1[114] = CFSTR("CTFontSystemUIAlternateHeavyItalic");
  v2[114] = &unk_1E1615760;
  v1[115] = CFSTR("CTFontSystemUIAlternateBlackItalic");
  v2[115] = &unk_1E1615778;
  v1[116] = CFSTR("CTFontSystemUIRoundedUltralight");
  v2[116] = &unk_1E1615790;
  v1[117] = CFSTR("CTFontSystemUIRoundedThin");
  v2[117] = &unk_1E16157A8;
  v1[118] = CFSTR("CTFontSystemUIRoundedLight");
  v2[118] = &unk_1E16157C0;
  v1[119] = CFSTR("CTFontSystemUIRoundedRegular");
  v2[119] = &unk_1E16157D8;
  v1[120] = CFSTR("CTFontSystemUIRoundedMedium");
  v2[120] = &unk_1E16157F0;
  v1[121] = CFSTR("CTFontSystemUIRoundedSemibold");
  v2[121] = &unk_1E1615808;
  v1[122] = CFSTR("CTFontSystemUIRoundedBold");
  v2[122] = &unk_1E1615820;
  v1[123] = CFSTR("CTFontSystemUIRoundedHeavy");
  v2[123] = &unk_1E1615838;
  v1[124] = CFSTR("CTFontSystemUIRoundedBlack");
  v2[124] = &unk_1E1615850;
  v2[152] = &unk_1E1615AF0;
  v1[153] = CFSTR("UICTFontTextStyleShortTitle3");
  v2[151] = &unk_1E1615AD8;
  v1[152] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle3");
  v2[150] = &unk_1E1615AC0;
  v1[151] = CFSTR("UICTFontTextStyleEmphasizedTitle3");
  v1[125] = CFSTR("UICTFontTextStyleTitle1");
  v1[150] = CFSTR("UICTFontTextStyleItalicTitle3");
  v2[125] = &unk_1E1615868;
  v1[149] = CFSTR("UICTFontTextStyleTitle3");
  v2[149] = &unk_1E1615AA8;
  v1[148] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle2");
  v2[148] = &unk_1E1615A90;
  v1[147] = CFSTR("UICTFontTextStyleTallEmphasizedTitle2");
  v2[147] = &unk_1E1615A78;
  v1[146] = CFSTR("UICTFontTextStyleTallItalicTitle2");
  v2[146] = &unk_1E1615A60;
  v1[145] = CFSTR("UICTFontTextStyleTallTitle2");
  v2[145] = &unk_1E1615A48;
  v1[144] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle2");
  v2[144] = &unk_1E1615A30;
  v1[143] = CFSTR("UICTFontTextStyleShortEmphasizedTitle2");
  v2[143] = &unk_1E1615A18;
  v1[142] = CFSTR("UICTFontTextStyleShortItalicTitle2");
  v2[142] = &unk_1E1615A00;
  v1[141] = CFSTR("UICTFontTextStyleShortTitle2");
  v2[141] = &unk_1E16159E8;
  v1[140] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle2");
  v2[140] = &unk_1E16159D0;
  v1[139] = CFSTR("UICTFontTextStyleEmphasizedTitle2");
  v2[139] = &unk_1E16159B8;
  v1[138] = CFSTR("UICTFontTextStyleItalicTitle2");
  v2[138] = &unk_1E16159A0;
  v1[126] = CFSTR("UICTFontTextStyleItalicTitle1");
  v2[137] = &unk_1E1615988;
  v2[126] = &unk_1E1615880;
  v2[136] = &unk_1E1615970;
  v1[137] = CFSTR("UICTFontTextStyleTitle2");
  v2[135] = &unk_1E1615958;
  v1[136] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle1");
  v2[134] = &unk_1E1615940;
  v1[135] = CFSTR("UICTFontTextStyleTallEmphasizedTitle1");
  v2[133] = &unk_1E1615928;
  v1[134] = CFSTR("UICTFontTextStyleTallItalicTitle1");
  v2[132] = &unk_1E1615910;
  v1[133] = CFSTR("UICTFontTextStyleTallTitle1");
  v2[131] = &unk_1E16158F8;
  v1[132] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle1");
  v2[130] = &unk_1E16158E0;
  v1[131] = CFSTR("UICTFontTextStyleShortEmphasizedTitle1");
  v2[129] = &unk_1E16158C8;
  v1[130] = CFSTR("UICTFontTextStyleShortItalicTitle1");
  v2[128] = &unk_1E16158B0;
  v1[129] = CFSTR("UICTFontTextStyleShortTitle1");
  v2[127] = &unk_1E1615898;
  v1[128] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle1");
  v1[127] = CFSTR("UICTFontTextStyleEmphasizedTitle1");
  v2[153] = &unk_1E1615B08;
  v1[154] = CFSTR("UICTFontTextStyleShortItalicTitle3");
  v2[154] = &unk_1E1615B20;
  v1[155] = CFSTR("UICTFontTextStyleShortEmphasizedTitle3");
  v2[155] = &unk_1E1615B38;
  v1[156] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle3");
  v2[156] = &unk_1E1615B50;
  v1[157] = CFSTR("UICTFontTextStyleTallTitle3");
  v2[157] = &unk_1E1615B68;
  v1[158] = CFSTR("UICTFontTextStyleTallItalicTitle3");
  v2[158] = &unk_1E1615B80;
  v1[159] = CFSTR("UICTFontTextStyleTallEmphasizedTitle3");
  v2[159] = &unk_1E1615B98;
  v1[160] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle3");
  v2[160] = &unk_1E1615BB0;
  v1[161] = CFSTR("UICTFontTextStyleSubtitle3");
  v2[161] = &unk_1E1615BC8;
  v1[162] = CFSTR("UICTFontTextStyleSubtitle2");
  v2[162] = &unk_1E1615BE0;
  v1[163] = CFSTR("UICTFontTextStyleSubtitle1");
  v2[163] = &unk_1E1615BF8;
  v1[164] = CFSTR("UICTFontTextStyleSection1");
  v2[164] = &unk_1E1615C10;
  v1[165] = CFSTR("UICTFontTextStyleSection2");
  v2[165] = &unk_1E1615C28;
  v1[166] = CFSTR("UICTFontTextStyleSection3");
  v2[166] = &unk_1E1615C40;
  v1[167] = CFSTR("UICTFontTextStyleTitle4");
  v2[167] = &unk_1E1615C58;
  v1[168] = CFSTR("UICTFontTextStyleHeadline3");
  v2[168] = &unk_1E1615C70;
  v1[169] = CFSTR("UICTFontTextStyleItalicSubtitle1");
  v2[169] = &unk_1E1615C88;
  v1[170] = CFSTR("UICTFontTextStyleEmphasizedSubtitle1");
  v2[170] = &unk_1E1615CA0;
  v1[171] = CFSTR("UICTFontTextStyleEmphasizedItalicSubtitle1");
  v2[171] = &unk_1E1615CB8;
  v1[172] = CFSTR("UICTFontTextStyleTitle0");
  v2[172] = &unk_1E1615CD0;
  v1[173] = CFSTR("UICTFontTextStyleEmphasizedTitle0");
  v2[173] = &unk_1E1615CE8;
  v1[174] = CFSTR("UICTFontTextStyleShortTitle0");
  v2[174] = &unk_1E1615D00;
  v1[175] = CFSTR("UICTFontTextStyleShortEmphasizedTitle0");
  v2[175] = &unk_1E1615D18;
  v1[176] = CFSTR("UICTFontTextStyleTallTitle0");
  v2[176] = &unk_1E1615D30;
  v1[177] = CFSTR("UICTFontTextStyleTallEmphasizedTitle0");
  v2[177] = &unk_1E1615D48;
  v1[178] = CFSTR("UICTFontTextStyleEmphasizedHeadline");
  v2[178] = &unk_1E1615D60;
  v1[179] = CFSTR("UICTFontTextStyleEmphasizedItalicHeadline");
  v2[179] = &unk_1E1615D78;
  v1[180] = CFSTR("UICTFontTextStyleShortEmphasizedHeadline");
  v2[180] = &unk_1E1615D90;
  v1[181] = CFSTR("UICTFontTextStyleShortEmphasizedItalicHeadline");
  v2[181] = &unk_1E1615DA8;
  v1[182] = CFSTR("UICTFontTextStyleTallHeadline");
  v2[182] = &unk_1E1615DC0;
  v1[183] = CFSTR("UICTFontTextStyleTallEmphasizedHeadline");
  v2[183] = &unk_1E1615DD8;
  v1[184] = CFSTR("UICTFontTextStyleCaption3");
  v2[184] = &unk_1E1615DF0;
  v1[185] = CFSTR("UICTFontTextStyleEmphasizedCaption3");
  v2[185] = &unk_1E1615E08;
  v1[186] = CFSTR("CTFontSystemUICondensedRegular");
  v2[186] = &unk_1E1615E20;
  v1[187] = CFSTR("CTFontSystemUICondensedBold");
  v2[187] = &unk_1E1615E38;
  v1[188] = CFSTR("CTFontSystemUICondensedThin");
  v2[188] = &unk_1E1615E50;
  v1[189] = CFSTR("CTFontSystemUICondensedLight");
  v2[189] = &unk_1E1615E68;
  v1[190] = CFSTR("CTFontSystemUICondensedUltraLight");
  v2[190] = &unk_1E1615E80;
  v1[191] = CFSTR("CTFontSystemUICondensedMedium");
  v2[191] = &unk_1E1615E98;
  v1[192] = CFSTR("CTFontSystemUICondensedSemiBold");
  v2[192] = &unk_1E1615EB0;
  v1[193] = CFSTR("CTFontSystemUICondensedHeavy");
  v2[193] = &unk_1E1615EC8;
  v1[194] = CFSTR("CTFontSystemUICondensedBlack");
  v2[194] = &unk_1E1615EE0;
  v1[195] = CFSTR("CTFontSystemUISerifRegular");
  v2[195] = &unk_1E1615EF8;
  v1[196] = CFSTR("CTFontSystemUISerifMedium");
  v2[196] = &unk_1E1615F10;
  v1[197] = CFSTR("CTFontSystemUISerifSemibold");
  v2[197] = &unk_1E1615F28;
  v1[198] = CFSTR("CTFontSystemUISerifBold");
  v2[198] = &unk_1E1615F40;
  v1[199] = CFSTR("CTFontSystemUISerifHeavy");
  v2[199] = &unk_1E1615F58;
  v1[200] = CFSTR("CTFontSystemUISerifBlack");
  v2[200] = &unk_1E1615F70;
  v1[201] = CFSTR("CTFontSystemUISerifItalic");
  v2[201] = &unk_1E1615F88;
  v1[202] = CFSTR("CTFontSystemUISerifMediumItalic");
  v2[202] = &unk_1E1615FA0;
  v1[203] = CFSTR("CTFontSystemUISerifSemiboldItalic");
  v2[203] = &unk_1E1615FB8;
  v1[204] = CFSTR("CTFontSystemUISerifBoldItalic");
  v2[204] = &unk_1E1615FD0;
  v1[205] = CFSTR("CTFontSystemUISerifHeavyItalic");
  v2[205] = &unk_1E1615FE8;
  v1[206] = CFSTR("CTFontSystemUISerifBlackItalic");
  v2[206] = &unk_1E1616000;
  v1[207] = CFSTR("CTFontSystemUIMonospacedLight");
  v2[207] = &unk_1E1616018;
  v1[208] = CFSTR("CTFontSystemUIMonospacedRegular");
  v2[208] = &unk_1E1616030;
  v1[209] = CFSTR("CTFontSystemUIMonospacedMedium");
  v2[209] = &unk_1E1616048;
  v1[210] = CFSTR("CTFontSystemUIMonospacedSemibold");
  v2[210] = &unk_1E1616060;
  v1[211] = CFSTR("CTFontSystemUIMonospacedBold");
  v2[211] = &unk_1E1616078;
  v1[212] = CFSTR("CTFontSystemUIMonospacedHeavy");
  v2[212] = &unk_1E1616090;
  v1[213] = CFSTR("CTFontSystemUIMonospacedLightItalic");
  v2[213] = &unk_1E16160A8;
  v1[214] = CFSTR("CTFontSystemUIMonospacedRegularItalic");
  v2[214] = &unk_1E16160C0;
  v1[215] = CFSTR("CTFontSystemUIMonospacedMediumItalic");
  v2[215] = &unk_1E16160D8;
  v1[216] = CFSTR("CTFontSystemUIMonospacedSemiboldItalic");
  v2[216] = &unk_1E16160F0;
  v1[217] = CFSTR("CTFontSystemUIMonospacedBoldItalic");
  v2[217] = &unk_1E1616108;
  v1[218] = CFSTR("CTFontSystemUIMonospacedHeavyItalic");
  v2[218] = &unk_1E1616120;
  v1[219] = CFSTR("UICTFontTextStyleExtraLargeTitle");
  v2[219] = &unk_1E1616138;
  v1[220] = CFSTR("UICTFontTextStyleEmphasizedExtraLargeTitle");
  v2[220] = &unk_1E1616150;
  v1[221] = CFSTR("UICTFontTextStyleExtraLargeTitle2");
  v2[221] = &unk_1E1616168;
  v1[222] = CFSTR("UICTFontTextStyleEmphasizedExtraLargeTitle2");
  v2[222] = &unk_1E1616180;
  v1[223] = CFSTR("CTFontSystemUICompactRoundedUltralight");
  v2[223] = &unk_1E1616198;
  v1[224] = CFSTR("CTFontSystemUICompactRoundedThin");
  v2[224] = &unk_1E16161B0;
  v1[225] = CFSTR("CTFontSystemUICompactRoundedLight");
  v2[225] = &unk_1E16161C8;
  v1[226] = CFSTR("CTFontSystemUICompactRoundedRegular");
  v2[226] = &unk_1E16161E0;
  v1[227] = CFSTR("CTFontSystemUICompactRoundedMedium");
  v2[227] = &unk_1E16161F8;
  v1[228] = CFSTR("CTFontSystemUICompactRoundedSemibold");
  v2[228] = &unk_1E1616210;
  v1[229] = CFSTR("CTFontSystemUICompactRoundedBold");
  v2[229] = &unk_1E1616228;
  v1[230] = CFSTR("CTFontSystemUICompactRoundedHeavy");
  v2[230] = &unk_1E1616240;
  v1[231] = CFSTR("CTFontSystemUICompactRoundedBlack");
  v2[231] = &unk_1E1616258;
  v1[232] = CFSTR("CTFontSystemUICoreRegular");
  v2[232] = &unk_1E1616270;
  v1[233] = CFSTR("CTFontSystemUICoreBold");
  v2[233] = &unk_1E1616288;
  v1[234] = CFSTR("CTFontSystemUICoreThin");
  v2[234] = &unk_1E16162A0;
  v1[235] = CFSTR("CTFontSystemUICoreLight");
  v2[235] = &unk_1E16162B8;
  v1[236] = CFSTR("CTFontSystemUICoreUltraLight");
  v2[236] = &unk_1E16162D0;
  v1[237] = CFSTR("CTFontSystemUICoreMedium");
  v2[237] = &unk_1E16162E8;
  v1[238] = CFSTR("CTFontSystemUICoreSemiBold");
  v2[238] = &unk_1E1616300;
  v1[239] = CFSTR("CTFontSystemUICoreHeavy");
  v2[239] = &unk_1E1616318;
  v1[240] = CFSTR("CTFontSystemUICoreBlack");
  v2[240] = &unk_1E1616330;
  v1[241] = CFSTR("CTFontSystemUICoreItalic");
  v2[241] = &unk_1E1616348;
  v1[242] = CFSTR("CTFontSystemUICoreBoldItalic");
  v2[242] = &unk_1E1616360;
  v1[243] = CFSTR("CTFontSystemUICoreThinItalic");
  v2[243] = &unk_1E1616378;
  v1[244] = CFSTR("CTFontSystemUICoreLightItalic");
  v2[244] = &unk_1E1616390;
  v1[245] = CFSTR("CTFontSystemUICoreUltraLightItalic");
  v2[245] = &unk_1E16163A8;
  v1[246] = CFSTR("CTFontSystemUICoreMediumItalic");
  v2[246] = &unk_1E16163C0;
  v1[247] = CFSTR("CTFontSystemUICoreSemiBoldItalic");
  v2[247] = &unk_1E16163D8;
  v1[248] = CFSTR("CTFontSystemUICoreHeavyItalic");
  v2[248] = &unk_1E16163F0;
  v1[249] = CFSTR("CTFontSystemUICoreBlackItalic");
  v2[249] = &unk_1E1616408;
  v1[250] = CFSTR("CTFontSystemUICoreCondensedRegular");
  v2[250] = &unk_1E1616420;
  v1[251] = CFSTR("CTFontSystemUICoreCondensedBold");
  v2[251] = &unk_1E1616438;
  v1[252] = CFSTR("CTFontSystemUICoreCondensedThin");
  v2[252] = &unk_1E1616450;
  v1[253] = CFSTR("CTFontSystemUICoreCondensedLight");
  v2[253] = &unk_1E1616468;
  v1[254] = CFSTR("CTFontSystemUICoreCondensedUltraLight");
  v2[254] = &unk_1E1616480;
  v1[255] = CFSTR("CTFontSystemUICoreCondensedMedium");
  v2[255] = &unk_1E1616498;
  v1[256] = CFSTR("CTFontSystemUICoreCondensedSemiBold");
  v2[256] = &unk_1E16164B0;
  v1[257] = CFSTR("CTFontSystemUICoreCondensedHeavy");
  v2[257] = &unk_1E16164C8;
  v1[258] = CFSTR("CTFontSystemUICoreCondensedBlack");
  v2[258] = &unk_1E16164E0;
  v1[259] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption1");
  v2[259] = &unk_1E16164F8;
  v1[260] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption1");
  v2[260] = &unk_1E1616510;
  v1[261] = CFSTR("UICTFontTextStyleTallCaption1");
  v2[261] = &unk_1E1616528;
  v1[262] = CFSTR("UICTFontTextStyleTallItalicCaption1");
  v2[262] = &unk_1E1616540;
  v1[263] = CFSTR("UICTFontTextStyleTallEmphasizedCaption1");
  v2[263] = &unk_1E1616558;
  v1[264] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption1");
  v2[264] = &unk_1E1616570;
  v1[265] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption2");
  v2[265] = &unk_1E1616588;
  v1[266] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption2");
  v2[266] = &unk_1E16165A0;
  v1[267] = CFSTR("UICTFontTextStyleTallCaption2");
  v2[267] = &unk_1E16165B8;
  v1[268] = CFSTR("UICTFontTextStyleTallItalicCaption2");
  v2[268] = &unk_1E16165D0;
  v1[269] = CFSTR("UICTFontTextStyleTallEmphasizedCaption2");
  v2[269] = &unk_1E16165E8;
  v1[270] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption2");
  v2[270] = &unk_1E1616600;
  v1[271] = CFSTR("UICTFontTextStyleItalicExtraLargeTitle");
  v2[271] = &unk_1E1616618;
  v1[272] = CFSTR("UICTFontTextStyleEmphasizedItalicExtraLargeTitle");
  v2[272] = &unk_1E1616630;
  v1[273] = CFSTR("UICTFontTextStyleItalicExtraLargeTitle2");
  v2[273] = &unk_1E1616648;
  v1[274] = CFSTR("UICTFontTextStyleEmphasizedItalicExtraLargeTitle2");
  v2[274] = &unk_1E1616660;
  v1[275] = CFSTR("UICTFontTextStyleCondensedHeadline");
  v2[275] = &unk_1E1616678;
  v1[276] = CFSTR("UICTFontTextStyleCondensedTitle1");
  v2[276] = &unk_1E1616690;
  v1[277] = CFSTR("UICTFontTextStyleCondensedTitle2");
  v2[277] = &unk_1E16166A8;
  v1[278] = CFSTR("UICTFontTextStyleCondensedTitle3");
  v2[278] = &unk_1E16166C0;
  v1[279] = CFSTR("UICTFontTextStyleCondensedBody");
  v2[279] = &unk_1E16166D8;
  v1[280] = CFSTR("UICTFontTextStylePreferredSizeRegular");
  v2[280] = &unk_1E16166F0;
  v1[281] = CFSTR("UICTFontTextStylePreferredSizeBold");
  v2[281] = &unk_1E1616708;
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 282);
  qword_1EDD16EF8 = (uint64_t)result;
  return result;
}

id ___Z28TextStyleForUITypeDictionaryv_block_invoke()
{
  id result;
  _QWORD v1[274];
  _QWORD v2[275];

  v2[274] = *MEMORY[0x1E0C80C00];
  v1[0] = &unk_1E1614D70;
  v1[1] = &unk_1E1614D88;
  v2[0] = CFSTR("CTFontRegularUsage");
  v2[1] = CFSTR("CTFontEmphasizedUsage");
  v1[2] = &unk_1E1614E60;
  v1[3] = &unk_1E1614E78;
  v2[2] = CFSTR("CTFontObliqueUsage");
  v2[3] = CFSTR("CTFontEmphasizedObliqueUsage");
  v1[4] = &unk_1E1615DF0;
  v1[5] = &unk_1E1615E08;
  v2[4] = CFSTR("UICTFontTextStyleCaption3");
  v2[5] = CFSTR("UICTFontTextStyleEmphasizedCaption3");
  v1[6] = &unk_1E1614DA0;
  v1[7] = &unk_1E1614DB8;
  v2[6] = CFSTR("UICTFontTextStyleHeadline");
  v2[7] = CFSTR("UICTFontTextStyleShortHeadline");
  v1[8] = &unk_1E1614E90;
  v1[9] = &unk_1E1614EA8;
  v2[8] = CFSTR("UICTFontTextStyleHeadline2");
  v2[9] = CFSTR("UICTFontTextStyleItalicHeadline2");
  v1[10] = &unk_1E1614EC0;
  v1[11] = &unk_1E1614ED8;
  v2[10] = CFSTR("UICTFontTextStyleShortHeadline2");
  v2[11] = CFSTR("UICTFontTextStyleShortItalicHeadline2");
  v1[12] = &unk_1E1614EF0;
  v1[13] = &unk_1E1614F08;
  v2[12] = CFSTR("UICTFontTextStyleEmphasizedBody");
  v2[13] = CFSTR("UICTFontTextStyleBody");
  v1[14] = &unk_1E1614F20;
  v1[15] = &unk_1E1614F38;
  v2[14] = CFSTR("UICTFontTextStyleEmphasizedItalicBody");
  v2[15] = CFSTR("UICTFontTextStyleItalicBody");
  v1[16] = &unk_1E1614F50;
  v1[17] = &unk_1E1614F68;
  v2[16] = CFSTR("UICTFontTextStyleShortEmphasizedBody");
  v2[17] = CFSTR("UICTFontTextStyleShortBody");
  v1[18] = &unk_1E1614F80;
  v1[19] = &unk_1E1614F98;
  v2[18] = CFSTR("UICTFontTextStyleShortEmphasizedItalicBody");
  v2[19] = CFSTR("UICTFontTextStyleShortItalicBody");
  v1[20] = &unk_1E1614DD0;
  v1[21] = &unk_1E1614DE8;
  v2[20] = CFSTR("UICTFontTextStyleEmphasizedSubhead");
  v2[21] = CFSTR("UICTFontTextStyleSubhead");
  v1[22] = &unk_1E1614E00;
  v1[23] = &unk_1E1614E18;
  v2[22] = CFSTR("UICTFontTextStyleItalicSubhead");
  v2[23] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead");
  v1[24] = &unk_1E1614E30;
  v1[25] = &unk_1E1614E48;
  v2[24] = CFSTR("UICTFontTextStyleShortSubhead");
  v2[25] = CFSTR("UICTFontTextStyleShortItalicSubhead");
  v1[26] = &unk_1E1614FB0;
  v1[27] = &unk_1E1614FC8;
  v2[26] = CFSTR("UICTFontTextStyleEmphasizedSubhead2");
  v2[27] = CFSTR("UICTFontTextStyleSubhead2");
  v1[28] = &unk_1E1614FE0;
  v1[29] = &unk_1E1614FF8;
  v2[28] = CFSTR("UICTFontTextStyleItalicSubhead2");
  v2[29] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead2");
  v1[30] = &unk_1E1615010;
  v1[31] = &unk_1E1615028;
  v2[30] = CFSTR("UICTFontTextStyleShortSubhead2");
  v2[31] = CFSTR("UICTFontTextStyleShortItalicSubhead2");
  v1[32] = &unk_1E1615040;
  v1[33] = &unk_1E1615058;
  v2[32] = CFSTR("UICTFontTextStyleEmphasizedFootnote");
  v2[33] = CFSTR("UICTFontTextStyleFootnote");
  v1[34] = &unk_1E1615070;
  v1[35] = &unk_1E1615088;
  v2[34] = CFSTR("UICTFontTextStyleItalicFootnote");
  v2[35] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote");
  v1[36] = &unk_1E16150A0;
  v1[37] = &unk_1E16150B8;
  v2[36] = CFSTR("UICTFontTextStyleShortFootnote");
  v2[37] = CFSTR("UICTFontTextStyleShortItalicFootnote");
  v1[38] = &unk_1E16150D0;
  v1[39] = &unk_1E16150E8;
  v2[38] = CFSTR("UICTFontTextStyleEmphasizedCaption1");
  v2[39] = CFSTR("UICTFontTextStyleCaption1");
  v1[40] = &unk_1E1615100;
  v1[41] = &unk_1E1615118;
  v2[40] = CFSTR("UICTFontTextStyleItalicCaption1");
  v2[41] = CFSTR("UICTFontTextStyleShortEmphasizedCaption1");
  v1[42] = &unk_1E1615130;
  v1[43] = &unk_1E1615148;
  v2[42] = CFSTR("UICTFontTextStyleShortCaption1");
  v2[43] = CFSTR("UICTFontTextStyleShortItalicCaption1");
  v1[44] = &unk_1E1615160;
  v1[45] = &unk_1E1615178;
  v2[44] = CFSTR("UICTFontTextStyleEmphasizedCaption2");
  v2[45] = CFSTR("UICTFontTextStyleCaption2");
  v1[46] = &unk_1E1615190;
  v1[47] = &unk_1E16151A8;
  v2[46] = CFSTR("UICTFontTextStyleItalicCaption2");
  v2[47] = CFSTR("UICTFontTextStyleTallEmphasizedBody");
  v1[48] = &unk_1E16151C0;
  v1[49] = &unk_1E16151D8;
  v2[48] = CFSTR("UICTFontTextStyleTallBody");
  v2[49] = CFSTR("UICTFontTextStyleTallEmphasizedItalicBody");
  v1[50] = &unk_1E16151F0;
  v1[51] = &unk_1E1615208;
  v2[50] = CFSTR("UICTFontTextStyleTallItalicBody");
  v2[51] = CFSTR("UICTFontTextStyleItalicHeadline");
  v1[52] = &unk_1E1615220;
  v1[53] = &unk_1E1615238;
  v2[52] = CFSTR("UICTFontTextStyleShortItalicHeadline");
  v2[53] = CFSTR("CTFontThinUsage");
  v1[54] = &unk_1E1615250;
  v1[55] = &unk_1E1615268;
  v2[54] = CFSTR("CTFontLightUsage");
  v2[55] = CFSTR("CTFontUltraLightUsage");
  v1[56] = &unk_1E1615280;
  v1[57] = &unk_1E1615298;
  v2[56] = CFSTR("CTFontMediumUsage");
  v2[57] = CFSTR("CTFontDemiUsage");
  v1[58] = &unk_1E16152B0;
  v1[59] = &unk_1E16152C8;
  v2[58] = CFSTR("CTFontBoldUsage");
  v2[59] = CFSTR("CTFontHeavyUsage");
  v1[60] = &unk_1E16152E0;
  v1[61] = &unk_1E16152F8;
  v2[60] = CFSTR("CTFontBlackUsage");
  v2[61] = CFSTR("UICTFontTextStyleCallout");
  v1[62] = &unk_1E1615310;
  v1[63] = &unk_1E1615328;
  v2[62] = CFSTR("UICTFontTextStyleItalicCallout");
  v2[63] = CFSTR("UICTFontTextStyleEmphasizedCallout");
  v1[64] = &unk_1E1615340;
  v2[64] = CFSTR("UICTFontTextStyleEmphasizedItalicCallout");
  v1[65] = &unk_1E1615358;
  v2[65] = CFSTR("UICTFontTextStyleShortCallout");
  v1[66] = &unk_1E1615370;
  v2[66] = CFSTR("UICTFontTextStyleShortItalicCallout");
  v1[67] = &unk_1E1615388;
  v2[67] = CFSTR("UICTFontTextStyleShortEmphasizedCallout");
  v1[68] = &unk_1E16153A0;
  v2[68] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCallout");
  v1[69] = &unk_1E16153B8;
  v2[69] = CFSTR("UICTFontTextStyleTallCallout");
  v1[70] = &unk_1E16153D0;
  v2[70] = CFSTR("UICTFontTextStyleTallItalicCallout");
  v1[71] = &unk_1E16153E8;
  v2[71] = CFSTR("UICTFontTextStyleTallEmphasizedCallout");
  v1[72] = &unk_1E1615400;
  v2[72] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCallout");
  v1[73] = &unk_1E1615418;
  v2[73] = CFSTR("UICTFontTextStyleEmphasizedFootnote2");
  v1[74] = &unk_1E1615430;
  v2[74] = CFSTR("UICTFontTextStyleFootnote2");
  v1[75] = &unk_1E1615448;
  v2[75] = CFSTR("UICTFontTextStyleItalicFootnote2");
  v1[76] = &unk_1E1615460;
  v2[76] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote2");
  v1[77] = &unk_1E1615478;
  v2[77] = CFSTR("UICTFontTextStyleShortFootnote2");
  v1[78] = &unk_1E1615490;
  v2[78] = CFSTR("UICTFontTextStyleShortItalicFootnote2");
  v1[79] = &unk_1E16154A8;
  v2[79] = CFSTR("UICTFontTextStyleShortEmphasizedCaption2");
  v1[80] = &unk_1E16154C0;
  v2[80] = CFSTR("UICTFontTextStyleShortCaption2");
  v1[81] = &unk_1E16154D8;
  v2[81] = CFSTR("UICTFontTextStyleShortItalicCaption2");
  v1[82] = &unk_1E16154F0;
  v2[82] = CFSTR("CTFontThinItalicUsage");
  v1[83] = &unk_1E1615508;
  v2[83] = CFSTR("CTFontLightItalicUsage");
  v1[84] = &unk_1E1615520;
  v2[84] = CFSTR("CTFontUltraLightItalicUsage");
  v1[85] = &unk_1E1615538;
  v2[85] = CFSTR("CTFontMediumItalicUsage");
  v1[86] = &unk_1E1615550;
  v2[86] = CFSTR("CTFontDemiItalicUsage");
  v1[87] = &unk_1E1615568;
  v2[87] = CFSTR("CTFontBoldItalicUsage");
  v1[88] = &unk_1E1615580;
  v2[88] = CFSTR("CTFontHeavyItalicUsage");
  v1[89] = &unk_1E1615598;
  v2[89] = CFSTR("CTFontBlackItalicUsage");
  v1[90] = &unk_1E16155B0;
  v2[90] = CFSTR("CTFontTextStyleUltraLight");
  v1[91] = &unk_1E16155C8;
  v2[91] = CFSTR("CTFontTextStyleThin");
  v1[92] = &unk_1E16155E0;
  v2[92] = CFSTR("CTFontSystemUIAlternateRegular");
  v1[93] = &unk_1E16155F8;
  v2[93] = CFSTR("CTFontSystemUIAlternateBold");
  v1[94] = &unk_1E1615610;
  v2[94] = CFSTR("CTFontSystemUIAlternateThin");
  v1[95] = &unk_1E1615628;
  v2[95] = CFSTR("CTFontSystemUIAlternateLight");
  v1[96] = &unk_1E1615640;
  v2[96] = CFSTR("CTFontSystemUIAlternateUltraLight");
  v1[97] = &unk_1E1615658;
  v2[97] = CFSTR("CTFontSystemUIAlternateMedium");
  v1[98] = &unk_1E1615670;
  v2[98] = CFSTR("CTFontSystemUIAlternateSemiBold");
  v1[99] = &unk_1E1615688;
  v2[99] = CFSTR("CTFontSystemUIAlternateHeavy");
  v1[100] = &unk_1E16156A0;
  v2[100] = CFSTR("CTFontSystemUIAlternateBlack");
  v1[101] = &unk_1E16156B8;
  v2[101] = CFSTR("CTFontSystemUIAlternateItalic");
  v1[102] = &unk_1E16156D0;
  v2[102] = CFSTR("CTFontSystemUIAlternateBoldItalic");
  v1[103] = &unk_1E16156E8;
  v2[103] = CFSTR("CTFontSystemUIAlternateThinItalic");
  v1[104] = &unk_1E1615700;
  v2[104] = CFSTR("CTFontSystemUIAlternateLightItalic");
  v1[105] = &unk_1E1615718;
  v2[105] = CFSTR("CTFontSystemUIAlternateUltraLightItalic");
  v1[106] = &unk_1E1615730;
  v2[106] = CFSTR("CTFontSystemUIAlternateMediumItalic");
  v1[107] = &unk_1E1615748;
  v2[107] = CFSTR("CTFontSystemUIAlternateSemiBoldItalic");
  v1[108] = &unk_1E1615760;
  v2[108] = CFSTR("CTFontSystemUIAlternateHeavyItalic");
  v1[109] = &unk_1E1615778;
  v2[109] = CFSTR("CTFontSystemUIAlternateBlackItalic");
  v1[110] = &unk_1E1615790;
  v2[110] = CFSTR("CTFontSystemUIRoundedUltralight");
  v1[111] = &unk_1E16157A8;
  v2[111] = CFSTR("CTFontSystemUIRoundedThin");
  v1[112] = &unk_1E16157C0;
  v2[112] = CFSTR("CTFontSystemUIRoundedLight");
  v1[113] = &unk_1E16157D8;
  v2[113] = CFSTR("CTFontSystemUIRoundedRegular");
  v1[114] = &unk_1E16157F0;
  v2[114] = CFSTR("CTFontSystemUIRoundedMedium");
  v1[115] = &unk_1E1615808;
  v2[115] = CFSTR("CTFontSystemUIRoundedSemibold");
  v1[116] = &unk_1E1615820;
  v2[116] = CFSTR("CTFontSystemUIRoundedBold");
  v1[117] = &unk_1E1615838;
  v2[117] = CFSTR("CTFontSystemUIRoundedHeavy");
  v1[118] = &unk_1E1615850;
  v2[118] = CFSTR("CTFontSystemUIRoundedBlack");
  v1[119] = &unk_1E1615868;
  v2[119] = CFSTR("UICTFontTextStyleTitle1");
  v1[120] = &unk_1E1615880;
  v2[120] = CFSTR("UICTFontTextStyleItalicTitle1");
  v1[121] = &unk_1E1615898;
  v2[121] = CFSTR("UICTFontTextStyleEmphasizedTitle1");
  v1[122] = &unk_1E16158B0;
  v2[122] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle1");
  v1[123] = &unk_1E16158C8;
  v2[123] = CFSTR("UICTFontTextStyleShortTitle1");
  v1[124] = &unk_1E16158E0;
  v2[124] = CFSTR("UICTFontTextStyleShortItalicTitle1");
  v1[125] = &unk_1E16158F8;
  v1[143] = &unk_1E1615AA8;
  v1[145] = &unk_1E1615AD8;
  v1[144] = &unk_1E1615AC0;
  v2[144] = CFSTR("UICTFontTextStyleItalicTitle3");
  v2[143] = CFSTR("UICTFontTextStyleTitle3");
  v1[142] = &unk_1E1615A90;
  v2[142] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle2");
  v1[141] = &unk_1E1615A78;
  v2[141] = CFSTR("UICTFontTextStyleTallEmphasizedTitle2");
  v1[140] = &unk_1E1615A60;
  v2[140] = CFSTR("UICTFontTextStyleTallItalicTitle2");
  v1[139] = &unk_1E1615A48;
  v2[139] = CFSTR("UICTFontTextStyleTallTitle2");
  v1[138] = &unk_1E1615A30;
  v2[138] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle2");
  v1[137] = &unk_1E1615A18;
  v2[137] = CFSTR("UICTFontTextStyleShortEmphasizedTitle2");
  v1[136] = &unk_1E1615A00;
  v2[136] = CFSTR("UICTFontTextStyleShortItalicTitle2");
  v1[135] = &unk_1E16159E8;
  v2[135] = CFSTR("UICTFontTextStyleShortTitle2");
  v1[134] = &unk_1E16159D0;
  v2[134] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle2");
  v1[133] = &unk_1E16159B8;
  v2[133] = CFSTR("UICTFontTextStyleEmphasizedTitle2");
  v2[125] = CFSTR("UICTFontTextStyleShortEmphasizedTitle1");
  v2[132] = CFSTR("UICTFontTextStyleItalicTitle2");
  v1[126] = &unk_1E1615910;
  v2[131] = CFSTR("UICTFontTextStyleTitle2");
  v1[132] = &unk_1E16159A0;
  v2[130] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle1");
  v1[131] = &unk_1E1615988;
  v2[129] = CFSTR("UICTFontTextStyleTallEmphasizedTitle1");
  v1[130] = &unk_1E1615970;
  v2[128] = CFSTR("UICTFontTextStyleTallItalicTitle1");
  v1[129] = &unk_1E1615958;
  v2[127] = CFSTR("UICTFontTextStyleTallTitle1");
  v1[128] = &unk_1E1615940;
  v2[126] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle1");
  v1[127] = &unk_1E1615928;
  v2[145] = CFSTR("UICTFontTextStyleEmphasizedTitle3");
  v1[146] = &unk_1E1615AF0;
  v2[146] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle3");
  v1[147] = &unk_1E1615B08;
  v2[147] = CFSTR("UICTFontTextStyleShortTitle3");
  v1[148] = &unk_1E1615B20;
  v2[148] = CFSTR("UICTFontTextStyleShortItalicTitle3");
  v1[149] = &unk_1E1615B38;
  v2[149] = CFSTR("UICTFontTextStyleShortEmphasizedTitle3");
  v1[150] = &unk_1E1615B50;
  v2[150] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle3");
  v1[151] = &unk_1E1615B68;
  v2[151] = CFSTR("UICTFontTextStyleTallTitle3");
  v1[152] = &unk_1E1615B80;
  v2[152] = CFSTR("UICTFontTextStyleTallItalicTitle3");
  v1[153] = &unk_1E1615B98;
  v2[153] = CFSTR("UICTFontTextStyleTallEmphasizedTitle3");
  v1[154] = &unk_1E1615BB0;
  v2[154] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle3");
  v1[155] = &unk_1E1615BC8;
  v2[155] = CFSTR("UICTFontTextStyleSubtitle3");
  v1[156] = &unk_1E1615BE0;
  v2[156] = CFSTR("UICTFontTextStyleSubtitle2");
  v1[157] = &unk_1E1615BF8;
  v2[157] = CFSTR("UICTFontTextStyleSubtitle1");
  v1[158] = &unk_1E1615C10;
  v2[158] = CFSTR("UICTFontTextStyleSection1");
  v1[159] = &unk_1E1615C28;
  v2[159] = CFSTR("UICTFontTextStyleSection2");
  v1[160] = &unk_1E1615C40;
  v2[160] = CFSTR("UICTFontTextStyleSection3");
  v1[161] = &unk_1E1615C58;
  v2[161] = CFSTR("UICTFontTextStyleTitle4");
  v1[162] = &unk_1E1615C70;
  v2[162] = CFSTR("UICTFontTextStyleHeadline3");
  v1[163] = &unk_1E1615C88;
  v2[163] = CFSTR("UICTFontTextStyleItalicSubtitle1");
  v1[164] = &unk_1E1615CA0;
  v2[164] = CFSTR("UICTFontTextStyleEmphasizedSubtitle1");
  v1[165] = &unk_1E1615CB8;
  v2[165] = CFSTR("UICTFontTextStyleEmphasizedItalicSubtitle1");
  v1[166] = &unk_1E1615CD0;
  v2[166] = CFSTR("UICTFontTextStyleTitle0");
  v1[167] = &unk_1E1615CE8;
  v2[167] = CFSTR("UICTFontTextStyleEmphasizedTitle0");
  v1[168] = &unk_1E1615D00;
  v2[168] = CFSTR("UICTFontTextStyleShortTitle0");
  v1[169] = &unk_1E1615D18;
  v2[169] = CFSTR("UICTFontTextStyleShortEmphasizedTitle0");
  v1[170] = &unk_1E1615D30;
  v2[170] = CFSTR("UICTFontTextStyleTallTitle0");
  v1[171] = &unk_1E1615D48;
  v2[171] = CFSTR("UICTFontTextStyleTallEmphasizedTitle0");
  v1[172] = &unk_1E1615D60;
  v2[172] = CFSTR("UICTFontTextStyleEmphasizedHeadline");
  v1[173] = &unk_1E1615D78;
  v2[173] = CFSTR("UICTFontTextStyleEmphasizedItalicHeadline");
  v1[174] = &unk_1E1615D90;
  v2[174] = CFSTR("UICTFontTextStyleShortEmphasizedHeadline");
  v1[175] = &unk_1E1615DA8;
  v2[175] = CFSTR("UICTFontTextStyleShortEmphasizedItalicHeadline");
  v1[176] = &unk_1E1615DC0;
  v2[176] = CFSTR("UICTFontTextStyleTallHeadline");
  v1[177] = &unk_1E1615DD8;
  v2[177] = CFSTR("UICTFontTextStyleTallEmphasizedHeadline");
  v1[178] = &unk_1E1615EF8;
  v2[178] = CFSTR("CTFontSystemUISerifRegular");
  v1[179] = &unk_1E1615F10;
  v2[179] = CFSTR("CTFontSystemUISerifMedium");
  v1[180] = &unk_1E1615F28;
  v2[180] = CFSTR("CTFontSystemUISerifSemibold");
  v1[181] = &unk_1E1615F40;
  v2[181] = CFSTR("CTFontSystemUISerifBold");
  v1[182] = &unk_1E1615F58;
  v2[182] = CFSTR("CTFontSystemUISerifHeavy");
  v1[183] = &unk_1E1615F70;
  v2[183] = CFSTR("CTFontSystemUISerifBlack");
  v1[184] = &unk_1E1615F88;
  v2[184] = CFSTR("CTFontSystemUISerifItalic");
  v1[185] = &unk_1E1615FA0;
  v2[185] = CFSTR("CTFontSystemUISerifMediumItalic");
  v1[186] = &unk_1E1615FB8;
  v2[186] = CFSTR("CTFontSystemUISerifSemiboldItalic");
  v1[187] = &unk_1E1615FD0;
  v2[187] = CFSTR("CTFontSystemUISerifBoldItalic");
  v1[188] = &unk_1E1615FE8;
  v2[188] = CFSTR("CTFontSystemUISerifHeavyItalic");
  v1[189] = &unk_1E1616000;
  v2[189] = CFSTR("CTFontSystemUISerifBlackItalic");
  v1[190] = &unk_1E1616018;
  v2[190] = CFSTR("CTFontSystemUIMonospacedLight");
  v1[191] = &unk_1E1616030;
  v2[191] = CFSTR("CTFontSystemUIMonospacedRegular");
  v1[192] = &unk_1E1616048;
  v2[192] = CFSTR("CTFontSystemUIMonospacedMedium");
  v1[193] = &unk_1E1616060;
  v2[193] = CFSTR("CTFontSystemUIMonospacedSemibold");
  v1[194] = &unk_1E1616078;
  v2[194] = CFSTR("CTFontSystemUIMonospacedBold");
  v1[195] = &unk_1E1616090;
  v2[195] = CFSTR("CTFontSystemUIMonospacedHeavy");
  v1[196] = &unk_1E16160A8;
  v2[196] = CFSTR("CTFontSystemUIMonospacedLightItalic");
  v1[197] = &unk_1E16160C0;
  v2[197] = CFSTR("CTFontSystemUIMonospacedRegularItalic");
  v1[198] = &unk_1E16160D8;
  v2[198] = CFSTR("CTFontSystemUIMonospacedMediumItalic");
  v1[199] = &unk_1E16160F0;
  v2[199] = CFSTR("CTFontSystemUIMonospacedSemiboldItalic");
  v1[200] = &unk_1E1616108;
  v2[200] = CFSTR("CTFontSystemUIMonospacedBoldItalic");
  v1[201] = &unk_1E1616120;
  v2[201] = CFSTR("CTFontSystemUIMonospacedHeavyItalic");
  v1[202] = &unk_1E1615E20;
  v2[202] = CFSTR("CTFontSystemUICondensedRegular");
  v1[203] = &unk_1E1615E38;
  v2[203] = CFSTR("CTFontSystemUICondensedBold");
  v1[204] = &unk_1E1615E50;
  v2[204] = CFSTR("CTFontSystemUICondensedThin");
  v1[205] = &unk_1E1615E68;
  v2[205] = CFSTR("CTFontSystemUICondensedLight");
  v1[206] = &unk_1E1615E80;
  v2[206] = CFSTR("CTFontSystemUICondensedUltraLight");
  v1[207] = &unk_1E1615E98;
  v2[207] = CFSTR("CTFontSystemUICondensedMedium");
  v1[208] = &unk_1E1615EB0;
  v2[208] = CFSTR("CTFontSystemUICondensedSemiBold");
  v1[209] = &unk_1E1615EC8;
  v2[209] = CFSTR("CTFontSystemUICondensedHeavy");
  v1[210] = &unk_1E1615EE0;
  v2[210] = CFSTR("CTFontSystemUICondensedBlack");
  v1[211] = &unk_1E1616138;
  v2[211] = CFSTR("UICTFontTextStyleExtraLargeTitle");
  v1[212] = &unk_1E1616150;
  v2[212] = CFSTR("UICTFontTextStyleEmphasizedExtraLargeTitle");
  v1[213] = &unk_1E1616168;
  v2[213] = CFSTR("UICTFontTextStyleExtraLargeTitle2");
  v1[214] = &unk_1E1616180;
  v2[214] = CFSTR("UICTFontTextStyleEmphasizedExtraLargeTitle2");
  v1[215] = &unk_1E1616198;
  v2[215] = CFSTR("CTFontSystemUICompactRoundedUltralight");
  v1[216] = &unk_1E16161B0;
  v2[216] = CFSTR("CTFontSystemUICompactRoundedThin");
  v1[217] = &unk_1E16161C8;
  v2[217] = CFSTR("CTFontSystemUICompactRoundedLight");
  v1[218] = &unk_1E16161E0;
  v2[218] = CFSTR("CTFontSystemUICompactRoundedRegular");
  v1[219] = &unk_1E16161F8;
  v2[219] = CFSTR("CTFontSystemUICompactRoundedMedium");
  v1[220] = &unk_1E1616210;
  v2[220] = CFSTR("CTFontSystemUICompactRoundedSemibold");
  v1[221] = &unk_1E1616228;
  v2[221] = CFSTR("CTFontSystemUICompactRoundedBold");
  v1[222] = &unk_1E1616240;
  v2[222] = CFSTR("CTFontSystemUICompactRoundedHeavy");
  v1[223] = &unk_1E1616258;
  v2[223] = CFSTR("CTFontSystemUICompactRoundedBlack");
  v1[224] = &unk_1E1616270;
  v2[224] = CFSTR("CTFontSystemUICoreRegular");
  v1[225] = &unk_1E1616288;
  v2[225] = CFSTR("CTFontSystemUICoreBold");
  v1[226] = &unk_1E16162A0;
  v2[226] = CFSTR("CTFontSystemUICoreThin");
  v1[227] = &unk_1E16162B8;
  v2[227] = CFSTR("CTFontSystemUICoreLight");
  v1[228] = &unk_1E16162D0;
  v2[228] = CFSTR("CTFontSystemUICoreUltraLight");
  v1[229] = &unk_1E16162E8;
  v2[229] = CFSTR("CTFontSystemUICoreMedium");
  v1[230] = &unk_1E1616300;
  v2[230] = CFSTR("CTFontSystemUICoreSemiBold");
  v1[231] = &unk_1E1616318;
  v2[231] = CFSTR("CTFontSystemUICoreHeavy");
  v1[232] = &unk_1E1616330;
  v2[232] = CFSTR("CTFontSystemUICoreBlack");
  v1[233] = &unk_1E1616348;
  v2[233] = CFSTR("CTFontSystemUICoreItalic");
  v1[234] = &unk_1E1616360;
  v2[234] = CFSTR("CTFontSystemUICoreBoldItalic");
  v1[235] = &unk_1E1616378;
  v2[235] = CFSTR("CTFontSystemUICoreThinItalic");
  v1[236] = &unk_1E1616390;
  v2[236] = CFSTR("CTFontSystemUICoreLightItalic");
  v1[237] = &unk_1E16163A8;
  v2[237] = CFSTR("CTFontSystemUICoreUltraLightItalic");
  v1[238] = &unk_1E16163C0;
  v2[238] = CFSTR("CTFontSystemUICoreMediumItalic");
  v1[239] = &unk_1E16163D8;
  v2[239] = CFSTR("CTFontSystemUICoreSemiBoldItalic");
  v1[240] = &unk_1E16163F0;
  v2[240] = CFSTR("CTFontSystemUICoreHeavyItalic");
  v1[241] = &unk_1E1616408;
  v2[241] = CFSTR("CTFontSystemUICoreBlackItalic");
  v1[242] = &unk_1E1616420;
  v2[242] = CFSTR("CTFontSystemUICoreCondensedRegular");
  v1[243] = &unk_1E1616438;
  v2[243] = CFSTR("CTFontSystemUICoreCondensedBold");
  v1[244] = &unk_1E1616450;
  v2[244] = CFSTR("CTFontSystemUICoreCondensedThin");
  v1[245] = &unk_1E1616468;
  v2[245] = CFSTR("CTFontSystemUICoreCondensedLight");
  v1[246] = &unk_1E1616480;
  v2[246] = CFSTR("CTFontSystemUICoreCondensedUltraLight");
  v1[247] = &unk_1E1616498;
  v2[247] = CFSTR("CTFontSystemUICoreCondensedMedium");
  v1[248] = &unk_1E16164B0;
  v2[248] = CFSTR("CTFontSystemUICoreCondensedSemiBold");
  v1[249] = &unk_1E16164C8;
  v2[249] = CFSTR("CTFontSystemUICoreCondensedHeavy");
  v1[250] = &unk_1E16164E0;
  v2[250] = CFSTR("CTFontSystemUICoreCondensedBlack");
  v1[251] = &unk_1E16164F8;
  v2[251] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption1");
  v1[252] = &unk_1E1616510;
  v2[252] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption1");
  v1[253] = &unk_1E1616528;
  v2[253] = CFSTR("UICTFontTextStyleTallCaption1");
  v1[254] = &unk_1E1616540;
  v2[254] = CFSTR("UICTFontTextStyleTallItalicCaption1");
  v1[255] = &unk_1E1616558;
  v2[255] = CFSTR("UICTFontTextStyleTallEmphasizedCaption1");
  v1[256] = &unk_1E1616570;
  v2[256] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption1");
  v1[257] = &unk_1E1616588;
  v2[257] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption2");
  v1[258] = &unk_1E16165A0;
  v2[258] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption2");
  v1[259] = &unk_1E16165B8;
  v2[259] = CFSTR("UICTFontTextStyleTallCaption2");
  v1[260] = &unk_1E16165D0;
  v2[260] = CFSTR("UICTFontTextStyleTallItalicCaption2");
  v1[261] = &unk_1E16165E8;
  v2[261] = CFSTR("UICTFontTextStyleTallEmphasizedCaption2");
  v1[262] = &unk_1E1616600;
  v2[262] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption2");
  v1[263] = &unk_1E1616618;
  v2[263] = CFSTR("UICTFontTextStyleItalicExtraLargeTitle");
  v1[264] = &unk_1E1616630;
  v2[264] = CFSTR("UICTFontTextStyleEmphasizedItalicExtraLargeTitle");
  v1[265] = &unk_1E1616648;
  v2[265] = CFSTR("UICTFontTextStyleItalicExtraLargeTitle2");
  v1[266] = &unk_1E1616660;
  v2[266] = CFSTR("UICTFontTextStyleEmphasizedItalicExtraLargeTitle2");
  v1[267] = &unk_1E1616678;
  v2[267] = CFSTR("UICTFontTextStyleCondensedHeadline");
  v1[268] = &unk_1E1616690;
  v2[268] = CFSTR("UICTFontTextStyleCondensedTitle1");
  v1[269] = &unk_1E16166A8;
  v2[269] = CFSTR("UICTFontTextStyleCondensedTitle2");
  v1[270] = &unk_1E16166C0;
  v2[270] = CFSTR("UICTFontTextStyleCondensedTitle3");
  v1[271] = &unk_1E16166D8;
  v2[271] = CFSTR("UICTFontTextStyleCondensedBody");
  v1[272] = &unk_1E16166F0;
  v2[272] = CFSTR("UICTFontTextStylePreferredSizeRegular");
  v1[273] = &unk_1E1616708;
  v2[273] = CFSTR("UICTFontTextStylePreferredSizeBold");
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 274);
  qword_1EDD16F08 = (uint64_t)result;
  return result;
}

id ___Z29UIFontNameForUITypeDictionaryv_block_invoke()
{
  id result;
  _QWORD v1[274];
  _QWORD v2[275];

  v2[274] = *MEMORY[0x1E0C80C00];
  v1[0] = &unk_1E1614D70;
  v1[1] = &unk_1E1614D88;
  v2[0] = CFSTR(".AppleSystemUIFont");
  v2[1] = CFSTR(".AppleSystemUIFontEmphasized");
  v1[2] = &unk_1E1614E60;
  v1[3] = &unk_1E1614E78;
  v2[2] = CFSTR(".AppleSystemUIFontItalic");
  v2[3] = CFSTR(".AppleSystemUIFontEmphasizedItalic");
  v1[4] = &unk_1E1615DF0;
  v1[5] = &unk_1E1615E08;
  v2[4] = CFSTR(".AppleSystemUIFaceCaption3");
  v2[5] = CFSTR(".AppleSystemUIFaceEmphasizedCaption3");
  v1[6] = &unk_1E1614DA0;
  v1[7] = &unk_1E1614DB8;
  v2[6] = CFSTR(".AppleSystemUIFaceHeadline");
  v2[7] = CFSTR(".AppleSystemUIFaceShortHeadline");
  v1[8] = &unk_1E1614E90;
  v1[9] = &unk_1E1614EA8;
  v2[8] = CFSTR(".AppleSystemUIFaceHeadline2");
  v2[9] = CFSTR(".AppleSystemUIFaceItalicHeadline2");
  v1[10] = &unk_1E1614EC0;
  v1[11] = &unk_1E1614ED8;
  v2[10] = CFSTR(".AppleSystemUIFaceShortHeadline2");
  v2[11] = CFSTR(".AppleSystemUIFaceShortItalicHeadline2");
  v1[12] = &unk_1E1614EF0;
  v1[13] = &unk_1E1614F08;
  v2[12] = CFSTR(".AppleSystemUIFaceEmphasizedBody");
  v2[13] = CFSTR(".AppleSystemUIFaceBody");
  v1[14] = &unk_1E1614F20;
  v1[15] = &unk_1E1614F38;
  v2[14] = CFSTR(".AppleSystemUIFaceEmphasizedItalicBody");
  v2[15] = CFSTR(".AppleSystemUIFaceItalicBody");
  v1[16] = &unk_1E1614F50;
  v1[17] = &unk_1E1614F68;
  v2[16] = CFSTR(".AppleSystemUIFaceShortEmphasizedBody");
  v2[17] = CFSTR(".AppleSystemUIFaceShortBody");
  v1[18] = &unk_1E1614F80;
  v1[19] = &unk_1E1614F98;
  v2[18] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicBody");
  v2[19] = CFSTR(".AppleSystemUIFaceShortItalicBody");
  v1[20] = &unk_1E1614DD0;
  v1[21] = &unk_1E1614DE8;
  v2[20] = CFSTR(".AppleSystemUIFaceEmphasizedSubhead");
  v2[21] = CFSTR(".AppleSystemUIFaceSubhead");
  v1[22] = &unk_1E1614E00;
  v1[23] = &unk_1E1614E18;
  v2[22] = CFSTR(".AppleSystemUIFaceItalicSubhead");
  v2[23] = CFSTR(".AppleSystemUIFaceShortEmphasizedSubhead");
  v1[24] = &unk_1E1614E30;
  v1[25] = &unk_1E1614E48;
  v2[24] = CFSTR(".AppleSystemUIFaceShortSubhead");
  v2[25] = CFSTR(".AppleSystemUIFaceShortItalicSubhead");
  v1[26] = &unk_1E1614FB0;
  v1[27] = &unk_1E1614FC8;
  v2[26] = CFSTR(".AppleSystemUIFaceEmphasizedSubhead2");
  v2[27] = CFSTR(".AppleSystemUIFaceSubhead2");
  v1[28] = &unk_1E1614FE0;
  v1[29] = &unk_1E1614FF8;
  v2[28] = CFSTR(".AppleSystemUIFaceItalicSubhead2");
  v2[29] = CFSTR(".AppleSystemUIFaceShortEmphasizedSubhead2");
  v1[30] = &unk_1E1615010;
  v1[31] = &unk_1E1615028;
  v2[30] = CFSTR(".AppleSystemUIFaceShortSubhead2");
  v2[31] = CFSTR(".AppleSystemUIFaceShortItalicSubhead2");
  v1[32] = &unk_1E1615040;
  v1[33] = &unk_1E1615058;
  v2[32] = CFSTR(".AppleSystemUIFaceEmphasizedFootnote");
  v2[33] = CFSTR(".AppleSystemUIFaceFootnote");
  v1[34] = &unk_1E1615070;
  v1[35] = &unk_1E1615088;
  v2[34] = CFSTR(".AppleSystemUIFaceItalicFootnote");
  v2[35] = CFSTR(".AppleSystemUIFaceShortEmphasizedFootnote");
  v1[36] = &unk_1E16150A0;
  v1[37] = &unk_1E16150B8;
  v2[36] = CFSTR(".AppleSystemUIFaceShortFootnote");
  v2[37] = CFSTR(".AppleSystemUIFaceShortItalicFootnote");
  v1[38] = &unk_1E16150D0;
  v1[39] = &unk_1E16150E8;
  v2[38] = CFSTR(".AppleSystemUIFaceEmphasizedCaption1");
  v2[39] = CFSTR(".AppleSystemUIFaceCaption1");
  v1[40] = &unk_1E1615100;
  v1[41] = &unk_1E1615118;
  v2[40] = CFSTR(".AppleSystemUIFaceItalicCaption1");
  v2[41] = CFSTR(".AppleSystemUIFaceShortEmphasizedCaption1");
  v1[42] = &unk_1E1615130;
  v1[43] = &unk_1E1615148;
  v2[42] = CFSTR(".AppleSystemUIFaceShortCaption1");
  v2[43] = CFSTR(".AppleSystemUIFaceShortItalicCaption1");
  v1[44] = &unk_1E1615160;
  v1[45] = &unk_1E1615178;
  v2[44] = CFSTR(".AppleSystemUIFaceEmphasizedCaption2");
  v2[45] = CFSTR(".AppleSystemUIFaceCaption2");
  v1[46] = &unk_1E1615190;
  v1[47] = &unk_1E16151A8;
  v2[46] = CFSTR(".AppleSystemUIFaceItalicCaption2");
  v2[47] = CFSTR(".AppleSystemUIFaceTallEmphasizedBody");
  v1[48] = &unk_1E16151C0;
  v1[49] = &unk_1E16151D8;
  v2[48] = CFSTR(".AppleSystemUIFaceTallBody");
  v2[49] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicBody");
  v1[50] = &unk_1E16151F0;
  v1[51] = &unk_1E1615208;
  v2[50] = CFSTR(".AppleSystemUIFaceTallItalicBody");
  v2[51] = CFSTR(".AppleSystemUIFaceItalicHeadline");
  v1[52] = &unk_1E1615220;
  v1[53] = &unk_1E1615238;
  v2[52] = CFSTR(".AppleSystemUIFaceShortItalicHeadline");
  v2[53] = CFSTR(".AppleSystemUIFontThin");
  v1[54] = &unk_1E1615250;
  v1[55] = &unk_1E1615268;
  v2[54] = CFSTR(".AppleSystemUIFontLight");
  v2[55] = CFSTR(".AppleSystemUIFontUltraLight");
  v1[56] = &unk_1E1615280;
  v1[57] = &unk_1E1615298;
  v2[56] = CFSTR(".AppleSystemUIFontMedium");
  v2[57] = CFSTR(".AppleSystemUIFontDemi");
  v1[58] = &unk_1E16152B0;
  v1[59] = &unk_1E16152C8;
  v2[58] = CFSTR(".AppleSystemUIFontBold");
  v2[59] = CFSTR(".AppleSystemUIFontHeavy");
  v1[60] = &unk_1E16152E0;
  v1[61] = &unk_1E16152F8;
  v2[60] = CFSTR(".AppleSystemUIFontBlack");
  v2[61] = CFSTR(".AppleSystemUIFaceCallout");
  v1[62] = &unk_1E1615310;
  v1[63] = &unk_1E1615328;
  v2[62] = CFSTR(".AppleSystemUIFaceItalicCallout");
  v2[63] = CFSTR(".AppleSystemUIFaceEmphasizedCallout");
  v1[64] = &unk_1E1615340;
  v2[64] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCallout");
  v1[65] = &unk_1E1615358;
  v2[65] = CFSTR(".AppleSystemUIFaceShortCallout");
  v1[66] = &unk_1E1615370;
  v2[66] = CFSTR(".AppleSystemUIFaceShortItalicCallout");
  v1[67] = &unk_1E1615388;
  v2[67] = CFSTR(".AppleSystemUIFaceShortEmphasizedCallout");
  v1[68] = &unk_1E16153A0;
  v2[68] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCallout");
  v1[69] = &unk_1E16153B8;
  v2[69] = CFSTR(".AppleSystemUIFaceTallCallout");
  v1[70] = &unk_1E16153D0;
  v2[70] = CFSTR(".AppleSystemUIFaceTallItalicCallout");
  v1[71] = &unk_1E16153E8;
  v2[71] = CFSTR(".AppleSystemUIFaceTallEmphasizedCallout");
  v1[72] = &unk_1E1615400;
  v2[72] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCallout");
  v1[73] = &unk_1E1615418;
  v2[73] = CFSTR(".AppleSystemUIFaceEmphasizedFootnote2");
  v1[74] = &unk_1E1615430;
  v2[74] = CFSTR(".AppleSystemUIFaceFootnote2");
  v1[75] = &unk_1E1615448;
  v2[75] = CFSTR(".AppleSystemUIFaceItalicFootnote2");
  v1[76] = &unk_1E1615460;
  v2[76] = CFSTR(".AppleSystemUIFaceShortEmphasizedFootnote2");
  v1[77] = &unk_1E1615478;
  v2[77] = CFSTR(".AppleSystemUIFaceShortFootnote2");
  v1[78] = &unk_1E1615490;
  v2[78] = CFSTR(".AppleSystemUIFaceShortItalicFootnote2");
  v1[79] = &unk_1E16154A8;
  v2[79] = CFSTR(".AppleSystemUIFaceShortEmphasizedCaption2");
  v1[80] = &unk_1E16154C0;
  v2[80] = CFSTR(".AppleSystemUIFaceShortCaption2");
  v1[81] = &unk_1E16154D8;
  v2[81] = CFSTR(".AppleSystemUIFaceShortItalicCaption2");
  v1[82] = &unk_1E16154F0;
  v2[82] = CFSTR(".AppleSystemUIFontThinItalic");
  v1[83] = &unk_1E1615508;
  v2[83] = CFSTR(".AppleSystemUIFontLightItalic");
  v1[84] = &unk_1E1615520;
  v2[84] = CFSTR(".AppleSystemUIFontUltraLightItalic");
  v1[85] = &unk_1E1615538;
  v2[85] = CFSTR(".AppleSystemUIFontMediumItalic");
  v1[86] = &unk_1E1615550;
  v2[86] = CFSTR(".AppleSystemUIFontDemiItalic");
  v1[87] = &unk_1E1615568;
  v2[87] = CFSTR(".AppleSystemUIFontBoldItalic");
  v1[88] = &unk_1E1615580;
  v2[88] = CFSTR(".AppleSystemUIFontHeavyItalic");
  v1[89] = &unk_1E1615598;
  v2[89] = CFSTR(".AppleSystemUIFontBlackItalic");
  v1[90] = &unk_1E16155B0;
  v2[90] = CFSTR(".AppleSystemUIFontUltraLightAlways");
  v1[91] = &unk_1E16155C8;
  v2[91] = CFSTR(".AppleSystemUIFontThinAlways");
  v1[92] = &unk_1E16155E0;
  v2[92] = CFSTR(".AppleSystemUIFontCompact-Regular");
  v1[93] = &unk_1E16155F8;
  v2[93] = CFSTR(".AppleSystemUIFontCompact-Bold");
  v1[94] = &unk_1E1615610;
  v2[94] = CFSTR(".AppleSystemUIFontCompact-Thin");
  v1[95] = &unk_1E1615628;
  v2[95] = CFSTR(".AppleSystemUIFontCompact-Light");
  v1[96] = &unk_1E1615640;
  v2[96] = CFSTR(".AppleSystemUIFontCompact-UltraLight");
  v1[97] = &unk_1E1615658;
  v2[97] = CFSTR(".AppleSystemUIFontCompact-Medium");
  v1[98] = &unk_1E1615670;
  v2[98] = CFSTR(".AppleSystemUIFontCompact-Semibold");
  v1[99] = &unk_1E1615688;
  v2[99] = CFSTR(".AppleSystemUIFontCompact-Heavy");
  v1[100] = &unk_1E16156A0;
  v2[100] = CFSTR(".AppleSystemUIFontCompact-Black");
  v1[101] = &unk_1E16156B8;
  v2[101] = CFSTR(".AppleSystemUIFontCompact-Italic");
  v1[102] = &unk_1E16156D0;
  v2[102] = CFSTR(".AppleSystemUIFontCompact-BoldItalic");
  v1[103] = &unk_1E16156E8;
  v2[103] = CFSTR(".AppleSystemUIFontCompact-ThinItalic");
  v1[104] = &unk_1E1615700;
  v2[104] = CFSTR(".AppleSystemUIFontCompact-LightItalic");
  v1[105] = &unk_1E1615718;
  v2[105] = CFSTR(".AppleSystemUIFontCompact-UltraLightItalic");
  v1[106] = &unk_1E1615730;
  v2[106] = CFSTR(".AppleSystemUIFontCompact-MediumItalic");
  v1[107] = &unk_1E1615748;
  v2[107] = CFSTR(".AppleSystemUIFontCompact-SemiboldItalic");
  v1[108] = &unk_1E1615760;
  v2[108] = CFSTR(".AppleSystemUIFontCompact-HeavyItalic");
  v1[109] = &unk_1E1615778;
  v2[109] = CFSTR(".AppleSystemUIFontCompact-BlackItalic");
  v1[110] = &unk_1E1615790;
  v2[110] = CFSTR(".AppleSystemUIFontRounded-Ultralight");
  v1[111] = &unk_1E16157A8;
  v2[111] = CFSTR(".AppleSystemUIFontRounded-Thin");
  v1[112] = &unk_1E16157C0;
  v2[112] = CFSTR(".AppleSystemUIFontRounded-Light");
  v1[113] = &unk_1E16157D8;
  v2[113] = CFSTR(".AppleSystemUIFontRounded-Regular");
  v1[114] = &unk_1E16157F0;
  v2[114] = CFSTR(".AppleSystemUIFontRounded-Medium");
  v1[115] = &unk_1E1615808;
  v2[115] = CFSTR(".AppleSystemUIFontRounded-Semibold");
  v1[116] = &unk_1E1615820;
  v2[116] = CFSTR(".AppleSystemUIFontRounded-Bold");
  v1[117] = &unk_1E1615838;
  v2[117] = CFSTR(".AppleSystemUIFontRounded-Heavy");
  v1[118] = &unk_1E1615850;
  v2[118] = CFSTR(".AppleSystemUIFontRounded-Black");
  v1[119] = &unk_1E1615868;
  v2[119] = CFSTR(".AppleSystemUIFaceTitle1");
  v1[120] = &unk_1E1615880;
  v2[120] = CFSTR(".AppleSystemUIFaceItalicTitle1");
  v1[121] = &unk_1E1615898;
  v2[121] = CFSTR(".AppleSystemUIFaceEmphasizedTitle1");
  v1[122] = &unk_1E16158B0;
  v2[122] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle1");
  v1[123] = &unk_1E16158C8;
  v2[123] = CFSTR(".AppleSystemUIFaceShortTitle1");
  v1[124] = &unk_1E16158E0;
  v2[124] = CFSTR(".AppleSystemUIFaceShortItalicTitle1");
  v1[125] = &unk_1E16158F8;
  v2[125] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle1");
  v1[126] = &unk_1E1615910;
  v1[145] = &unk_1E1615AD8;
  v1[144] = &unk_1E1615AC0;
  v2[144] = CFSTR(".AppleSystemUIFaceItalicTitle3");
  v1[143] = &unk_1E1615AA8;
  v2[143] = CFSTR(".AppleSystemUIFaceTitle3");
  v1[142] = &unk_1E1615A90;
  v2[142] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle2");
  v1[141] = &unk_1E1615A78;
  v2[141] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle2");
  v1[140] = &unk_1E1615A60;
  v2[140] = CFSTR(".AppleSystemUIFaceTallItalicTitle2");
  v1[139] = &unk_1E1615A48;
  v2[139] = CFSTR(".AppleSystemUIFaceTallTitle2");
  v1[138] = &unk_1E1615A30;
  v2[138] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle2");
  v1[137] = &unk_1E1615A18;
  v2[137] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle2");
  v1[136] = &unk_1E1615A00;
  v2[136] = CFSTR(".AppleSystemUIFaceShortItalicTitle2");
  v1[135] = &unk_1E16159E8;
  v2[135] = CFSTR(".AppleSystemUIFaceShortTitle2");
  v1[134] = &unk_1E16159D0;
  v2[134] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle2");
  v1[133] = &unk_1E16159B8;
  v2[133] = CFSTR(".AppleSystemUIFaceEmphasizedTitle2");
  v1[132] = &unk_1E16159A0;
  v2[132] = CFSTR(".AppleSystemUIFaceItalicTitle2");
  v1[131] = &unk_1E1615988;
  v2[131] = CFSTR(".AppleSystemUIFaceTitle2");
  v1[130] = &unk_1E1615970;
  v2[130] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle1");
  v1[129] = &unk_1E1615958;
  v2[129] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle1");
  v1[128] = &unk_1E1615940;
  v2[128] = CFSTR(".AppleSystemUIFaceTallItalicTitle1");
  v1[127] = &unk_1E1615928;
  v2[127] = CFSTR(".AppleSystemUIFaceTallTitle1");
  v2[126] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle1");
  v2[145] = CFSTR(".AppleSystemUIFaceEmphasizedTitle3");
  v1[146] = &unk_1E1615AF0;
  v2[146] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle3");
  v1[147] = &unk_1E1615B08;
  v2[147] = CFSTR(".AppleSystemUIFaceShortTitle3");
  v1[148] = &unk_1E1615B20;
  v2[148] = CFSTR(".AppleSystemUIFaceShortItalicTitle3");
  v1[149] = &unk_1E1615B38;
  v2[149] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle3");
  v1[150] = &unk_1E1615B50;
  v2[150] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle3");
  v1[151] = &unk_1E1615B68;
  v2[151] = CFSTR(".AppleSystemUIFaceTallTitle3");
  v1[152] = &unk_1E1615B80;
  v2[152] = CFSTR(".AppleSystemUIFaceTallItalicTitle3");
  v1[153] = &unk_1E1615B98;
  v2[153] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle3");
  v1[154] = &unk_1E1615BB0;
  v2[154] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle3");
  v1[155] = &unk_1E1615BC8;
  v2[155] = CFSTR(".AppleSystemUIFaceSubtitle3");
  v1[156] = &unk_1E1615BE0;
  v2[156] = CFSTR(".AppleSystemUIFaceSubtitle2");
  v1[157] = &unk_1E1615BF8;
  v2[157] = CFSTR(".AppleSystemUIFaceSubtitle1");
  v1[158] = &unk_1E1615C10;
  v2[158] = CFSTR(".AppleSystemUIFaceSection1");
  v1[159] = &unk_1E1615C28;
  v2[159] = CFSTR(".AppleSystemUIFaceSection2");
  v1[160] = &unk_1E1615C40;
  v2[160] = CFSTR(".AppleSystemUIFaceSection3");
  v1[161] = &unk_1E1615C58;
  v2[161] = CFSTR(".AppleSystemUIFaceTitle4");
  v1[162] = &unk_1E1615C70;
  v2[162] = CFSTR(".AppleSystemUIFaceHeadline3");
  v1[163] = &unk_1E1615C88;
  v2[163] = CFSTR(".AppleSystemUIFaceItalicSubtitle1");
  v1[164] = &unk_1E1615CA0;
  v2[164] = CFSTR(".AppleSystemUIFaceEmphasizedSubtitle1");
  v1[165] = &unk_1E1615CB8;
  v2[165] = CFSTR(".AppleSystemUIFaceEmphasizedItalicSubtitle1");
  v1[166] = &unk_1E1615CD0;
  v2[166] = CFSTR(".AppleSystemUIFaceTitle0");
  v1[167] = &unk_1E1615CE8;
  v2[167] = CFSTR(".AppleSystemUIFaceEmphasizedTitle0");
  v1[168] = &unk_1E1615D00;
  v2[168] = CFSTR(".AppleSystemUIFaceShortTitle0");
  v1[169] = &unk_1E1615D18;
  v2[169] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle0");
  v1[170] = &unk_1E1615D30;
  v2[170] = CFSTR(".AppleSystemUIFaceTallTitle0");
  v1[171] = &unk_1E1615D48;
  v2[171] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle0");
  v1[172] = &unk_1E1615D60;
  v2[172] = CFSTR(".AppleSystemUIFaceEmphasizedHeadline");
  v1[173] = &unk_1E1615D78;
  v2[173] = CFSTR(".AppleSystemUIFaceEmphasizedItalicHeadline");
  v1[174] = &unk_1E1615D90;
  v2[174] = CFSTR(".AppleSystemUIFaceShortEmphasizedHeadline");
  v1[175] = &unk_1E1615DA8;
  v2[175] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicHeadline");
  v1[176] = &unk_1E1615DC0;
  v2[176] = CFSTR(".AppleSystemUIFaceTallHeadline");
  v1[177] = &unk_1E1615DD8;
  v2[177] = CFSTR(".AppleSystemUIFaceTallEmphasizedHeadline");
  v1[178] = &unk_1E1615EF8;
  v2[178] = CFSTR(".AppleSystemUIFontSerif-Regular");
  v1[179] = &unk_1E1615F10;
  v2[179] = CFSTR(".AppleSystemUIFontSerif-Medium");
  v1[180] = &unk_1E1615F28;
  v2[180] = CFSTR(".AppleSystemUIFontSerif-Semibold");
  v1[181] = &unk_1E1615F40;
  v2[181] = CFSTR(".AppleSystemUIFontSerif-Bold");
  v1[182] = &unk_1E1615F58;
  v2[182] = CFSTR(".AppleSystemUIFontSerif-Heavy");
  v1[183] = &unk_1E1615F70;
  v2[183] = CFSTR(".AppleSystemUIFontSerif-Black");
  v1[184] = &unk_1E1615F88;
  v2[184] = CFSTR(".AppleSystemUIFontSerif-Italic");
  v1[185] = &unk_1E1615FA0;
  v2[185] = CFSTR(".AppleSystemUIFontSerif-MediumItalic");
  v1[186] = &unk_1E1615FB8;
  v2[186] = CFSTR(".AppleSystemUIFontSerif-SemiboldItalic");
  v1[187] = &unk_1E1615FD0;
  v2[187] = CFSTR(".AppleSystemUIFontSerif-BoldItalic");
  v1[188] = &unk_1E1615FE8;
  v2[188] = CFSTR(".AppleSystemUIFontSerif-HeavyItalic");
  v1[189] = &unk_1E1616000;
  v2[189] = CFSTR(".AppleSystemUIFontSerif-BlackItalc");
  v1[190] = &unk_1E1616018;
  v2[190] = CFSTR(".AppleSystemUIFontMonospaced-Light");
  v1[191] = &unk_1E1616030;
  v2[191] = CFSTR(".AppleSystemUIFontMonospaced-Regular");
  v1[192] = &unk_1E1616048;
  v2[192] = CFSTR(".AppleSystemUIFontMonospaced-Medium");
  v1[193] = &unk_1E1616060;
  v2[193] = CFSTR(".AppleSystemUIFontMonospaced-Semibold");
  v1[194] = &unk_1E1616078;
  v2[194] = CFSTR(".AppleSystemUIFontMonospaced-Bold");
  v1[195] = &unk_1E1616090;
  v2[195] = CFSTR(".AppleSystemUIFontMonospaced-Heavy");
  v1[196] = &unk_1E16160A8;
  v2[196] = CFSTR(".AppleSystemUIFontMonospaced-LightItalic");
  v1[197] = &unk_1E16160C0;
  v2[197] = CFSTR(".AppleSystemUIFontMonospaced-RegularItalic");
  v1[198] = &unk_1E16160D8;
  v2[198] = CFSTR(".AppleSystemUIFontMonospaced-MediumItalic");
  v1[199] = &unk_1E16160F0;
  v2[199] = CFSTR(".AppleSystemUIFontMonospaced-SemiboldItalic");
  v1[200] = &unk_1E1616108;
  v2[200] = CFSTR(".AppleSystemUIFontMonospaced-BoldItalic");
  v1[201] = &unk_1E1616120;
  v2[201] = CFSTR(".AppleSystemUIFontMonospaced-HeavyItalic");
  v1[202] = &unk_1E1615E20;
  v2[202] = CFSTR(".AppleSystemUIFontCondensed-Regular");
  v1[203] = &unk_1E1615E38;
  v2[203] = CFSTR(".AppleSystemUIFontCondensed-Bold");
  v1[204] = &unk_1E1615E50;
  v2[204] = CFSTR(".AppleSystemUIFontCondensed-Thin");
  v1[205] = &unk_1E1615E68;
  v2[205] = CFSTR(".AppleSystemUIFontCondensed-Light");
  v1[206] = &unk_1E1615E80;
  v2[206] = CFSTR(".AppleSystemUIFontCondensed-UltraLight");
  v1[207] = &unk_1E1615E98;
  v2[207] = CFSTR(".AppleSystemUIFontCondensed-Medium");
  v1[208] = &unk_1E1615EB0;
  v2[208] = CFSTR(".AppleSystemUIFontCondensed-Semibold");
  v1[209] = &unk_1E1615EC8;
  v2[209] = CFSTR(".AppleSystemUIFontCondensed-Heavy");
  v1[210] = &unk_1E1615EE0;
  v2[210] = CFSTR(".AppleSystemUIFontCondensed-Black");
  v1[211] = &unk_1E1616138;
  v2[211] = CFSTR(".AppleSystemUIFaceExtraLargeTitle");
  v1[212] = &unk_1E1616150;
  v2[212] = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle");
  v1[213] = &unk_1E1616168;
  v2[213] = CFSTR(".AppleSystemUIFaceExtraLargeTitle2");
  v1[214] = &unk_1E1616180;
  v2[214] = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle2");
  v1[215] = &unk_1E1616198;
  v2[215] = CFSTR(".AppleSystemUIFontCompactRounded-Ultralight");
  v1[216] = &unk_1E16161B0;
  v2[216] = CFSTR(".AppleSystemUIFontCompactRounded-Thin");
  v1[217] = &unk_1E16161C8;
  v2[217] = CFSTR(".AppleSystemUIFontCompactRounded-Light");
  v1[218] = &unk_1E16161E0;
  v2[218] = CFSTR(".AppleSystemUIFontCompactRounded-Regular");
  v1[219] = &unk_1E16161F8;
  v2[219] = CFSTR(".AppleSystemUIFontCompactRounded-Medium");
  v1[220] = &unk_1E1616210;
  v2[220] = CFSTR(".AppleSystemUIFontCompactRounded-Semibold");
  v1[221] = &unk_1E1616228;
  v2[221] = CFSTR(".AppleSystemUIFontCompactRounded-Bold");
  v1[222] = &unk_1E1616240;
  v2[222] = CFSTR(".AppleSystemUIFontCompactRounded-Heavy");
  v1[223] = &unk_1E1616258;
  v2[223] = CFSTR(".AppleSystemUIFontCompactRounded-Black");
  v1[224] = &unk_1E1616270;
  v2[224] = CFSTR(".AppleSystemUIFontCore-Regular");
  v1[225] = &unk_1E1616288;
  v2[225] = CFSTR(".AppleSystemUIFontCore-Bold");
  v1[226] = &unk_1E16162A0;
  v2[226] = CFSTR(".AppleSystemUIFontCore-Thin");
  v1[227] = &unk_1E16162B8;
  v2[227] = CFSTR(".AppleSystemUIFontCore-Light");
  v1[228] = &unk_1E16162D0;
  v2[228] = CFSTR(".AppleSystemUIFontCore-UltraLight");
  v1[229] = &unk_1E16162E8;
  v2[229] = CFSTR(".AppleSystemUIFontCore-Medium");
  v1[230] = &unk_1E1616300;
  v2[230] = CFSTR(".AppleSystemUIFontCore-Semibold");
  v1[231] = &unk_1E1616318;
  v2[231] = CFSTR(".AppleSystemUIFontCore-Heavy");
  v1[232] = &unk_1E1616330;
  v2[232] = CFSTR(".AppleSystemUIFontCore-Black");
  v1[233] = &unk_1E1616348;
  v2[233] = CFSTR(".AppleSystemUIFontCore-Italic");
  v1[234] = &unk_1E1616360;
  v2[234] = CFSTR(".AppleSystemUIFontCore-BoldItalic");
  v1[235] = &unk_1E1616378;
  v2[235] = CFSTR(".AppleSystemUIFontCore-ThinItalic");
  v1[236] = &unk_1E1616390;
  v2[236] = CFSTR(".AppleSystemUIFontCore-LightItalic");
  v1[237] = &unk_1E16163A8;
  v2[237] = CFSTR(".AppleSystemUIFontCore-UltraLightItalic");
  v1[238] = &unk_1E16163C0;
  v2[238] = CFSTR(".AppleSystemUIFontCore-MediumItalic");
  v1[239] = &unk_1E16163D8;
  v2[239] = CFSTR(".AppleSystemUIFontCore-SemiboldItalic");
  v1[240] = &unk_1E16163F0;
  v2[240] = CFSTR(".AppleSystemUIFontCore-HeavyItalic");
  v1[241] = &unk_1E1616408;
  v2[241] = CFSTR(".AppleSystemUIFontCore-BlackItalic");
  v1[242] = &unk_1E1616420;
  v2[242] = CFSTR(".AppleSystemUIFontCoreCondensed-Regular");
  v1[243] = &unk_1E1616438;
  v2[243] = CFSTR(".AppleSystemUIFontCoreCondensed-Bold");
  v1[244] = &unk_1E1616450;
  v2[244] = CFSTR(".AppleSystemUIFontCoreCondensed-Thin");
  v1[245] = &unk_1E1616468;
  v2[245] = CFSTR(".AppleSystemUIFontCoreCondensed-Light");
  v1[246] = &unk_1E1616480;
  v2[246] = CFSTR(".AppleSystemUIFontCoreCondensed-UltraLight");
  v1[247] = &unk_1E1616498;
  v2[247] = CFSTR(".AppleSystemUIFontCoreCondensed-Medium");
  v1[248] = &unk_1E16164B0;
  v2[248] = CFSTR(".AppleSystemUIFontCoreCondensed-Semibold");
  v1[249] = &unk_1E16164C8;
  v2[249] = CFSTR(".AppleSystemUIFontCoreCondensed-Heavy");
  v1[250] = &unk_1E16164E0;
  v2[250] = CFSTR(".AppleSystemUIFontCoreCondensed-Black");
  v1[251] = &unk_1E16164F8;
  v2[251] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCaption1");
  v1[252] = &unk_1E1616510;
  v2[252] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCaption1");
  v1[253] = &unk_1E1616528;
  v2[253] = CFSTR(".AppleSystemUIFaceTallCaption1");
  v1[254] = &unk_1E1616540;
  v2[254] = CFSTR(".AppleSystemUIFaceTallItalicCaption1");
  v1[255] = &unk_1E1616558;
  v2[255] = CFSTR(".AppleSystemUIFaceTallEmphasizedCaption1");
  v1[256] = &unk_1E1616570;
  v2[256] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCaption1");
  v1[257] = &unk_1E1616588;
  v2[257] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCaption2");
  v1[258] = &unk_1E16165A0;
  v2[258] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCaption2");
  v1[259] = &unk_1E16165B8;
  v2[259] = CFSTR(".AppleSystemUIFaceTallCaption2");
  v1[260] = &unk_1E16165D0;
  v2[260] = CFSTR(".AppleSystemUIFaceTallItalicCaption2");
  v1[261] = &unk_1E16165E8;
  v2[261] = CFSTR(".AppleSystemUIFaceTallEmphasizedCaption2");
  v1[262] = &unk_1E1616600;
  v2[262] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCaption2");
  v1[263] = &unk_1E1616618;
  v2[263] = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle");
  v1[264] = &unk_1E1616630;
  v2[264] = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle");
  v1[265] = &unk_1E1616648;
  v2[265] = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle2");
  v1[266] = &unk_1E1616660;
  v2[266] = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle2");
  v1[267] = &unk_1E1616678;
  v2[267] = CFSTR(".AppleSystemUIFaceCondensedHeadline");
  v1[268] = &unk_1E1616690;
  v2[268] = CFSTR(".AppleSystemUIFaceCondensedTitle1");
  v1[269] = &unk_1E16166A8;
  v2[269] = CFSTR(".AppleSystemUIFaceCondensedTitle2");
  v1[270] = &unk_1E16166C0;
  v2[270] = CFSTR(".AppleSystemUIFaceCondensedTitle3");
  v1[271] = &unk_1E16166D8;
  v2[271] = CFSTR(".AppleSystemUIFaceCondensedBody");
  v1[272] = &unk_1E16166F0;
  v2[272] = CFSTR(".AppleSystemUIFacePreferredSize-Regular");
  v1[273] = &unk_1E1616708;
  v2[273] = CFSTR(".AppleSystemUIFacePreferredSize-Bold");
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 274);
  qword_1EDD16F18 = (uint64_t)result;
  return result;
}

id ___Z31StashIndexForFontNameDictionaryv_block_invoke()
{
  id result;
  _QWORD v1[377];
  _QWORD v2[378];

  v2[377] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR(".AppleSystemUIFontEmphasized");
  v1[1] = CFSTR(".AppleSystemUIFont");
  v2[0] = &unk_1E1615748;
  v2[1] = &unk_1E1615760;
  v1[2] = CFSTR(".AppleSystemUIFontItalic");
  v1[3] = CFSTR(".AppleSystemUIFontEmphasizedItalic");
  v2[2] = &unk_1E1615778;
  v2[3] = &unk_1E1615790;
  v1[4] = CFSTR(".AppleSystemUIFontThin");
  v1[5] = CFSTR(".AppleSystemUIFontLight");
  v2[4] = &unk_1E16157A8;
  v2[5] = &unk_1E16157C0;
  v1[6] = CFSTR(".AppleSystemUIFontUltraLight");
  v1[7] = CFSTR(".AppleSystemUIFontMedium");
  v2[6] = &unk_1E16157D8;
  v2[7] = &unk_1E16157F0;
  v1[8] = CFSTR(".AppleSystemUIFontDemi");
  v1[9] = CFSTR(".AppleSystemUIFontBold");
  v2[8] = &unk_1E1615808;
  v2[9] = &unk_1E1615820;
  v1[10] = CFSTR(".AppleSystemUIFontHeavy");
  v1[11] = CFSTR(".AppleSystemUIFontBlack");
  v2[10] = &unk_1E1615838;
  v2[11] = &unk_1E1615850;
  v1[12] = CFSTR(".AppleSymbolsFB");
  v1[13] = CFSTR(".TimesFB");
  v2[12] = &unk_1E1616720;
  v2[13] = &unk_1E1616738;
  v1[14] = CFSTR(".TimesFB-Bold");
  v1[15] = CFSTR(".TimesFB-BoldItalic");
  v2[14] = &unk_1E1616750;
  v2[15] = &unk_1E1616768;
  v1[16] = CFSTR(".TimesFB-Italic");
  v1[17] = CFSTR(".AppleSimplifiedChineseFont-UltraLight");
  v2[16] = &unk_1E1616780;
  v2[17] = &unk_1E16163F0;
  v1[18] = CFSTR(".AppleSimplifiedChineseFont-Thin");
  v1[19] = CFSTR(".AppleSimplifiedChineseFont-Light");
  v2[18] = &unk_1E1616408;
  v2[19] = &unk_1E1616420;
  v1[20] = CFSTR(".AppleSimplifiedChineseFont-Regular");
  v1[21] = CFSTR(".AppleSimplifiedChineseFont-Medium");
  v2[20] = &unk_1E1616438;
  v2[21] = &unk_1E1616450;
  v1[22] = CFSTR(".AppleSimplifiedChineseFont-Semibold");
  v1[23] = CFSTR(".AppleSimplifiedChineseFont-Bold");
  v2[22] = &unk_1E1616468;
  v2[23] = &unk_1E1616480;
  v1[24] = CFSTR(".AppleSimplifiedChineseFont-Heavy");
  v1[25] = CFSTR(".AppleTraditionalChineseFont-UltraLight");
  v2[24] = &unk_1E1616498;
  v2[25] = &unk_1E16164B0;
  v1[26] = CFSTR(".AppleTraditionalChineseFont-Thin");
  v1[27] = CFSTR(".AppleTraditionalChineseFont-Light");
  v2[26] = &unk_1E16164C8;
  v2[27] = &unk_1E16164E0;
  v1[28] = CFSTR(".AppleTraditionalChineseFont-Regular");
  v1[29] = CFSTR(".AppleTraditionalChineseFont-Medium");
  v2[28] = &unk_1E16164F8;
  v2[29] = &unk_1E1616510;
  v1[30] = CFSTR(".AppleTraditionalChineseFont-Semibold");
  v1[31] = CFSTR(".AppleTraditionalChineseFont-Bold");
  v2[30] = &unk_1E1616528;
  v2[31] = &unk_1E1616540;
  v1[32] = CFSTR(".AppleTraditionalChineseFont-Heavy");
  v1[33] = CFSTR(".AppleHongKongChineseFont-UltraLight");
  v2[32] = &unk_1E1616558;
  v2[33] = &unk_1E1616570;
  v1[34] = CFSTR(".AppleHongKongChineseFont-Thin");
  v1[35] = CFSTR(".AppleHongKongChineseFont-Light");
  v2[34] = &unk_1E1616588;
  v2[35] = &unk_1E16165A0;
  v1[36] = CFSTR(".AppleHongKongChineseFont-Regular");
  v1[37] = CFSTR(".AppleHongKongChineseFont-Medium");
  v2[36] = &unk_1E16165B8;
  v2[37] = &unk_1E16165D0;
  v1[38] = CFSTR(".AppleHongKongChineseFont-Semibold");
  v1[39] = CFSTR(".AppleHongKongChineseFont-Bold");
  v2[38] = &unk_1E16165E8;
  v2[39] = &unk_1E1616600;
  v1[40] = CFSTR(".AppleHongKongChineseFont-Heavy");
  v1[41] = CFSTR(".AppleMacaoChineseFont-UltraLight");
  v2[40] = &unk_1E1616618;
  v2[41] = &unk_1E1616630;
  v1[42] = CFSTR(".AppleMacaoChineseFont-Thin");
  v1[43] = CFSTR(".AppleMacaoChineseFont-Light");
  v2[42] = &unk_1E1616648;
  v2[43] = &unk_1E1616660;
  v1[44] = CFSTR(".AppleMacaoChineseFont-Regular");
  v1[45] = CFSTR(".AppleMacaoChineseFont-Medium");
  v2[44] = &unk_1E16166F0;
  v2[45] = &unk_1E1616708;
  v1[46] = CFSTR(".AppleMacaoChineseFont-Semibold");
  v1[47] = CFSTR(".AppleMacaoChineseFont-Bold");
  v2[46] = &unk_1E1616798;
  v2[47] = &unk_1E16167B0;
  v1[48] = CFSTR(".AppleMacaoChineseFont-Heavy");
  v1[49] = CFSTR(".AppleJapaneseFont-Ultralight");
  v2[48] = &unk_1E16167C8;
  v2[49] = &unk_1E16167E0;
  v1[50] = CFSTR(".AppleJapaneseFont-Thin");
  v1[51] = CFSTR(".AppleJapaneseFont-Light");
  v2[50] = &unk_1E16167F8;
  v2[51] = &unk_1E1616810;
  v1[52] = CFSTR(".AppleJapaneseFont-Regular");
  v1[53] = CFSTR(".AppleJapaneseFont-Medium");
  v2[52] = &unk_1E1616828;
  v2[53] = &unk_1E1616840;
  v1[54] = CFSTR(".AppleJapaneseFont-Semibold");
  v1[55] = CFSTR(".AppleJapaneseFont-Bold");
  v2[54] = &unk_1E1616858;
  v2[55] = &unk_1E1616870;
  v1[56] = CFSTR(".AppleJapaneseFont-Heavy");
  v1[57] = CFSTR(".AppleJapaneseFont-Black");
  v2[56] = &unk_1E1616888;
  v2[57] = &unk_1E16168A0;
  v1[58] = CFSTR(".AppleKoreanFont-UltraLight");
  v1[59] = CFSTR(".AppleKoreanFont-Thin");
  v2[58] = &unk_1E16168B8;
  v2[59] = &unk_1E16168D0;
  v1[60] = CFSTR(".AppleKoreanFont-Light");
  v1[61] = CFSTR(".AppleKoreanFont-Regular");
  v2[60] = &unk_1E16168E8;
  v2[61] = &unk_1E1616900;
  v1[62] = CFSTR(".AppleKoreanFont-Medium");
  v1[63] = CFSTR(".AppleKoreanFont-Semibold");
  v2[62] = &unk_1E1616918;
  v2[63] = &unk_1E1616930;
  v1[64] = CFSTR(".AppleKoreanFont-Bold");
  v2[64] = &unk_1E1616948;
  v1[65] = CFSTR(".AppleKoreanFont-Heavy");
  v2[65] = &unk_1E1616960;
  v1[66] = CFSTR(".AppleArabicFont-Ultralight");
  v2[66] = &unk_1E1616978;
  v1[67] = CFSTR(".AppleArabicFont-Thin");
  v2[67] = &unk_1E1616990;
  v1[68] = CFSTR(".AppleArabicFont-Light");
  v2[68] = &unk_1E16169A8;
  v1[69] = CFSTR(".AppleArabicFont-Regular");
  v2[69] = &unk_1E16169C0;
  v1[70] = CFSTR(".AppleArabicFont-Medium");
  v2[70] = &unk_1E16169D8;
  v1[71] = CFSTR(".AppleArabicFont-Semibold");
  v2[71] = &unk_1E16169F0;
  v1[72] = CFSTR(".AppleArabicFont-Bold");
  v2[72] = &unk_1E1616A08;
  v1[73] = CFSTR(".AppleArabicFont-Heavy");
  v2[73] = &unk_1E1616A20;
  v1[74] = CFSTR(".AppleArabicFont-Black");
  v2[74] = &unk_1E1616A38;
  v1[75] = CFSTR(".AppleThaiFont-Light");
  v2[75] = &unk_1E1616A50;
  v1[76] = CFSTR(".AppleThaiFont-Regular");
  v2[76] = &unk_1E1616A68;
  v1[77] = CFSTR(".AppleThaiFont-Bold");
  v2[77] = &unk_1E1616A80;
  v1[78] = CFSTR(".AppleUrduFont-Regular");
  v2[78] = &unk_1E1616A98;
  v1[79] = CFSTR(".AppleUrduFont-Bold");
  v2[79] = &unk_1E1616AB0;
  v1[80] = CFSTR(".AppleSystemUIFaceHeadline");
  v2[80] = &unk_1E1616AC8;
  v1[81] = CFSTR(".AppleSystemUIFaceItalicHeadline");
  v2[81] = &unk_1E1616AE0;
  v1[82] = CFSTR(".AppleSystemUIFaceShortHeadline");
  v2[82] = &unk_1E1614D70;
  v1[83] = CFSTR(".AppleSystemUIFaceShortItalicHeadline");
  v2[83] = &unk_1E1614D88;
  v1[84] = CFSTR(".AppleSystemUIFaceHeadline2");
  v2[84] = &unk_1E1616AF8;
  v1[85] = CFSTR(".AppleSystemUIFaceItalicHeadline2");
  v2[85] = &unk_1E1616B10;
  v1[86] = CFSTR(".AppleSystemUIFaceShortHeadline2");
  v2[86] = &unk_1E1616B28;
  v1[87] = CFSTR(".AppleSystemUIFaceShortItalicHeadline2");
  v2[87] = &unk_1E1616B40;
  v1[88] = CFSTR(".AppleSystemUIFaceEmphasizedBody");
  v2[88] = &unk_1E1616B58;
  v1[89] = CFSTR(".AppleSystemUIFaceBody");
  v2[89] = &unk_1E1616B70;
  v1[90] = CFSTR(".AppleSystemUIFaceEmphasizedItalicBody");
  v2[90] = &unk_1E1616B88;
  v1[91] = CFSTR(".AppleSystemUIFaceItalicBody");
  v2[91] = &unk_1E1616BA0;
  v1[92] = CFSTR(".AppleSystemUIFaceShortEmphasizedBody");
  v2[92] = &unk_1E1616BB8;
  v1[93] = CFSTR(".AppleSystemUIFaceShortBody");
  v2[93] = &unk_1E1616BD0;
  v1[94] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicBody");
  v2[94] = &unk_1E1616BE8;
  v1[95] = CFSTR(".AppleSystemUIFaceShortItalicBody");
  v2[95] = &unk_1E1616C00;
  v1[96] = CFSTR(".AppleSystemUIFaceTallEmphasizedBody");
  v2[96] = &unk_1E1616C18;
  v1[97] = CFSTR(".AppleSystemUIFaceTallBody");
  v2[97] = &unk_1E1616C30;
  v1[98] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicBody");
  v2[98] = &unk_1E1616C48;
  v1[99] = CFSTR(".AppleSystemUIFaceTallItalicBody");
  v2[99] = &unk_1E1616C60;
  v1[100] = CFSTR(".AppleSystemUIFaceEmphasizedSubhead");
  v2[100] = &unk_1E1616C78;
  v1[101] = CFSTR(".AppleSystemUIFaceSubhead");
  v2[101] = &unk_1E1616C90;
  v1[102] = CFSTR(".AppleSystemUIFaceItalicSubhead");
  v2[102] = &unk_1E1616CA8;
  v1[103] = CFSTR(".AppleSystemUIFaceShortEmphasizedSubhead");
  v1[104] = CFSTR(".AppleSystemUIFaceShortSubhead");
  v2[104] = &unk_1E1616CD8;
  v1[105] = CFSTR(".AppleSystemUIFaceShortItalicSubhead");
  v2[105] = &unk_1E1616CF0;
  v1[106] = CFSTR(".AppleSystemUIFaceEmphasizedSubhead2");
  v2[106] = &unk_1E1616D08;
  v1[107] = CFSTR(".AppleSystemUIFaceSubhead2");
  v2[107] = &unk_1E1614E60;
  v1[108] = CFSTR(".AppleSystemUIFaceItalicSubhead2");
  v2[108] = &unk_1E1616D20;
  v1[109] = CFSTR(".AppleSystemUIFaceShortEmphasizedSubhead2");
  v2[109] = &unk_1E1616D38;
  v1[110] = CFSTR(".AppleSystemUIFaceShortSubhead2");
  v2[110] = &unk_1E1616D50;
  v1[111] = CFSTR(".AppleSystemUIFaceShortItalicSubhead2");
  v2[111] = &unk_1E1616D68;
  v1[112] = CFSTR(".AppleSystemUIFaceEmphasizedFootnote");
  v2[112] = &unk_1E1616D80;
  v1[113] = CFSTR(".AppleSystemUIFaceFootnote");
  v2[113] = &unk_1E1616D98;
  v1[114] = CFSTR(".AppleSystemUIFaceItalicFootnote");
  v2[114] = &unk_1E1616DB0;
  v1[115] = CFSTR(".AppleSystemUIFaceShortEmphasizedFootnote");
  v2[115] = &unk_1E1616DC8;
  v1[116] = CFSTR(".AppleSystemUIFaceShortFootnote");
  v2[116] = &unk_1E1616DE0;
  v1[117] = CFSTR(".AppleSystemUIFaceShortItalicFootnote");
  v2[117] = &unk_1E1616DF8;
  v1[118] = CFSTR(".AppleSystemUIFaceEmphasizedCaption1");
  v2[118] = &unk_1E1616E10;
  v1[119] = CFSTR(".AppleSystemUIFaceCaption1");
  v2[119] = &unk_1E1616E28;
  v1[120] = CFSTR(".AppleSystemUIFaceItalicCaption1");
  v2[120] = &unk_1E1616E40;
  v1[121] = CFSTR(".AppleSystemUIFaceShortEmphasizedCaption1");
  v2[121] = &unk_1E1616E58;
  v1[122] = CFSTR(".AppleSystemUIFaceShortCaption1");
  v2[122] = &unk_1E1616E70;
  v1[123] = CFSTR(".AppleSystemUIFaceShortItalicCaption1");
  v2[123] = &unk_1E1616E88;
  v1[124] = CFSTR(".AppleSystemUIFaceEmphasizedCaption2");
  v2[124] = &unk_1E1616EA0;
  v1[125] = CFSTR(".AppleSystemUIFaceCaption2");
  v2[201] = &unk_1E1616CF0;
  v1[248] = CFSTR(".AppleSystemUIFaceEmphasizedItalicSubtitle1");
  v1[247] = CFSTR(".AppleSystemUIFaceEmphasizedSubtitle1");
  v2[247] = &unk_1E1615340;
  v1[246] = CFSTR(".AppleSystemUIFaceItalicSubtitle1");
  v2[246] = &unk_1E1615328;
  v1[245] = CFSTR(".AppleSystemUIFaceHeadline3");
  v2[245] = &unk_1E1615310;
  v1[244] = CFSTR(".AppleSystemUIFaceTitle4");
  v2[244] = &unk_1E16152F8;
  v1[243] = CFSTR(".AppleSystemUIFaceSection3");
  v2[243] = &unk_1E16152E0;
  v1[242] = CFSTR(".AppleSystemUIFaceSection2");
  v2[242] = &unk_1E16152C8;
  v1[241] = CFSTR(".AppleSystemUIFaceSection1");
  v2[241] = &unk_1E16152B0;
  v1[240] = CFSTR(".AppleSystemUIFaceSubtitle1");
  v2[240] = &unk_1E1615298;
  v1[239] = CFSTR(".AppleSystemUIFaceSubtitle2");
  v2[239] = &unk_1E1615280;
  v1[238] = CFSTR(".AppleSystemUIFaceSubtitle3");
  v2[238] = &unk_1E1615268;
  v1[237] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle3");
  v2[237] = &unk_1E1615250;
  v1[236] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle3");
  v2[236] = &unk_1E1615238;
  v1[235] = CFSTR(".AppleSystemUIFaceTallItalicTitle3");
  v2[235] = &unk_1E1615220;
  v1[234] = CFSTR(".AppleSystemUIFaceTallTitle3");
  v2[234] = &unk_1E1615208;
  v1[233] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle3");
  v2[233] = &unk_1E16151F0;
  v1[232] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle3");
  v2[232] = &unk_1E16151D8;
  v1[231] = CFSTR(".AppleSystemUIFaceShortItalicTitle3");
  v2[231] = &unk_1E16151C0;
  v1[230] = CFSTR(".AppleSystemUIFaceShortTitle3");
  v2[230] = &unk_1E16151A8;
  v1[229] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle3");
  v2[229] = &unk_1E1615190;
  v1[228] = CFSTR(".AppleSystemUIFaceEmphasizedTitle3");
  v2[228] = &unk_1E1615178;
  v1[227] = CFSTR(".AppleSystemUIFaceItalicTitle3");
  v2[227] = &unk_1E1615160;
  v1[226] = CFSTR(".AppleSystemUIFaceTitle3");
  v2[226] = &unk_1E1615148;
  v1[225] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle2");
  v2[225] = &unk_1E1615130;
  v1[224] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle2");
  v2[224] = &unk_1E1615118;
  v1[223] = CFSTR(".AppleSystemUIFaceTallItalicTitle2");
  v2[223] = &unk_1E1615100;
  v1[222] = CFSTR(".AppleSystemUIFaceTallTitle2");
  v2[222] = &unk_1E16150E8;
  v1[221] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle2");
  v2[221] = &unk_1E16150D0;
  v1[220] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle2");
  v2[220] = &unk_1E16150B8;
  v1[219] = CFSTR(".AppleSystemUIFaceShortItalicTitle2");
  v2[219] = &unk_1E16150A0;
  v1[218] = CFSTR(".AppleSystemUIFaceShortTitle2");
  v2[218] = &unk_1E1615088;
  v1[217] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle2");
  v2[217] = &unk_1E1615070;
  v1[216] = CFSTR(".AppleSystemUIFaceEmphasizedTitle2");
  v2[216] = &unk_1E1615058;
  v1[215] = CFSTR(".AppleSystemUIFaceItalicTitle2");
  v2[215] = &unk_1E1615040;
  v1[214] = CFSTR(".AppleSystemUIFaceTitle2");
  v2[214] = &unk_1E1615028;
  v1[213] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicTitle1");
  v2[213] = &unk_1E1615010;
  v1[212] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle1");
  v2[212] = &unk_1E1614FF8;
  v1[211] = CFSTR(".AppleSystemUIFaceTallItalicTitle1");
  v2[211] = &unk_1E1614FE0;
  v1[210] = CFSTR(".AppleSystemUIFaceTallTitle1");
  v2[210] = &unk_1E1614FC8;
  v1[209] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicTitle1");
  v2[209] = &unk_1E1614FB0;
  v1[208] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle1");
  v2[208] = &unk_1E1614E48;
  v1[207] = CFSTR(".AppleSystemUIFaceShortItalicTitle1");
  v2[207] = &unk_1E1614E30;
  v1[206] = CFSTR(".AppleSystemUIFaceShortTitle1");
  v2[206] = &unk_1E1614E18;
  v1[205] = CFSTR(".AppleSystemUIFaceEmphasizedItalicTitle1");
  v2[205] = &unk_1E1614E00;
  v1[204] = CFSTR(".AppleSystemUIFaceEmphasizedTitle1");
  v2[204] = &unk_1E1614DE8;
  v1[203] = CFSTR(".AppleSystemUIFaceItalicTitle1");
  v2[203] = &unk_1E1614DD0;
  v1[202] = CFSTR(".AppleSystemUIFaceTitle1");
  v2[202] = &unk_1E1614F98;
  v2[200] = &unk_1E1616CD8;
  v1[201] = CFSTR(".AppleSystemUIFaceShortItalicSubhead1");
  v2[103] = &unk_1E1616CC0;
  v1[199] = CFSTR(".AppleSystemUIFaceShortEmphasizedSubhead1");
  v2[199] = &unk_1E1616CC0;
  v1[200] = CFSTR(".AppleSystemUIFaceShortSubhead1");
  v2[125] = &unk_1E1616EB8;
  v2[197] = &unk_1E1616C90;
  v1[198] = CFSTR(".AppleSystemUIFaceItalicSubhead1");
  v2[198] = &unk_1E1616CA8;
  v2[196] = &unk_1E1616C78;
  v1[197] = CFSTR(".AppleSystemUIFaceSubhead1");
  v1[126] = CFSTR(".AppleSystemUIFaceItalicCaption2");
  v1[195] = CFSTR(".AppleSystemUIFaceShortHeadline1");
  v2[195] = &unk_1E1614D70;
  v1[196] = CFSTR(".AppleSystemUIFaceEmphasizedSubhead1");
  v1[194] = CFSTR(".AppleSystemUIFaceHeadline1");
  v2[194] = &unk_1E1616AC8;
  v1[193] = CFSTR(".AppleSystemUIFontCompactRounded-Black");
  v2[193] = &unk_1E1615D60;
  v1[192] = CFSTR(".AppleSystemUIFontCompactRounded-Heavy");
  v2[192] = &unk_1E1615D48;
  v1[191] = CFSTR(".AppleSystemUIFontCompactRounded-Bold");
  v2[191] = &unk_1E1615D30;
  v1[190] = CFSTR(".AppleSystemUIFontCompactRounded-Semibold");
  v2[190] = &unk_1E1615D18;
  v1[189] = CFSTR(".AppleSystemUIFontCompactRounded-Medium");
  v2[189] = &unk_1E1615D00;
  v1[188] = CFSTR(".AppleSystemUIFontCompactRounded-Regular");
  v2[188] = &unk_1E1615CE8;
  v1[187] = CFSTR(".AppleSystemUIFontCompactRounded-Light");
  v2[187] = &unk_1E1615CD0;
  v1[186] = CFSTR(".AppleSystemUIFontCompactRounded-Thin");
  v2[186] = &unk_1E1615CB8;
  v1[185] = CFSTR(".AppleSystemUIFontCompactRounded-Ultralight");
  v2[185] = &unk_1E1615CA0;
  v1[184] = CFSTR(".AppleSystemUIFontRounded-Black");
  v2[184] = &unk_1E1615C88;
  v1[183] = CFSTR(".AppleSystemUIFontRounded-Heavy");
  v2[183] = &unk_1E1615C70;
  v1[182] = CFSTR(".AppleSystemUIFontRounded-Bold");
  v2[182] = &unk_1E1615C58;
  v1[181] = CFSTR(".AppleSystemUIFontRounded-Semibold");
  v2[181] = &unk_1E1615C40;
  v1[180] = CFSTR(".AppleSystemUIFontRounded-Medium");
  v2[180] = &unk_1E1615C28;
  v1[179] = CFSTR(".AppleSystemUIFontRounded-Regular");
  v2[179] = &unk_1E1615C10;
  v1[178] = CFSTR(".AppleSystemUIFontRounded-Light");
  v2[178] = &unk_1E1615BF8;
  v1[177] = CFSTR(".AppleSystemUIFontRounded-Thin");
  v2[177] = &unk_1E1615BE0;
  v1[176] = CFSTR(".AppleSystemUIFontRounded-Ultralight");
  v2[176] = &unk_1E1615BC8;
  v1[175] = CFSTR(".AppleSystemUIFontCompact-BlackItalic");
  v2[175] = &unk_1E16159D0;
  v1[174] = CFSTR(".AppleSystemUIFontCompact-HeavyItalic");
  v2[174] = &unk_1E16159B8;
  v1[173] = CFSTR(".AppleSystemUIFontCompact-SemiboldItalic");
  v2[173] = &unk_1E1615988;
  v1[172] = CFSTR(".AppleSystemUIFontCompact-MediumItalic");
  v2[172] = &unk_1E1615970;
  v1[171] = CFSTR(".AppleSystemUIFontCompact-UltraLightItalic");
  v2[171] = &unk_1E1615958;
  v1[170] = CFSTR(".AppleSystemUIFontCompact-LightItalic");
  v2[170] = &unk_1E1615940;
  v1[169] = CFSTR(".AppleSystemUIFontCompact-ThinItalic");
  v2[169] = &unk_1E1615928;
  v1[168] = CFSTR(".AppleSystemUIFontCompact-BoldItalic");
  v2[168] = &unk_1E16159A0;
  v1[167] = CFSTR(".AppleSystemUIFontCompact-Italic");
  v2[167] = &unk_1E16166C0;
  v1[166] = CFSTR(".AppleSystemUIFontCompact-Black");
  v2[166] = &unk_1E1615910;
  v1[165] = CFSTR(".AppleSystemUIFontCompact-Heavy");
  v2[165] = &unk_1E16158F8;
  v1[164] = CFSTR(".AppleSystemUIFontCompact-Semibold");
  v2[164] = &unk_1E16158C8;
  v1[163] = CFSTR(".AppleSystemUIFontCompact-Medium");
  v2[163] = &unk_1E16158B0;
  v1[162] = CFSTR(".AppleSystemUIFontCompact-UltraLight");
  v2[162] = &unk_1E1615898;
  v1[161] = CFSTR(".AppleSystemUIFontCompact-Light");
  v2[161] = &unk_1E1615880;
  v1[160] = CFSTR(".AppleSystemUIFontCompact-Thin");
  v2[160] = &unk_1E1615868;
  v1[159] = CFSTR(".AppleSystemUIFontCompact-Bold");
  v2[159] = &unk_1E16158E0;
  v1[158] = CFSTR(".AppleSystemUIFontCompact-Regular");
  v2[158] = &unk_1E16166A8;
  v1[157] = CFSTR(".AppleSystemUIFontThinAlways");
  v2[157] = &unk_1E1616678;
  v1[156] = CFSTR(".AppleSystemUIFontUltraLightAlways");
  v2[156] = &unk_1E1615EE0;
  v1[155] = CFSTR(".AppleSystemUIFontBlackItalic");
  v2[155] = &unk_1E1615EC8;
  v1[154] = CFSTR(".AppleSystemUIFontHeavyItalic");
  v2[154] = &unk_1E1615EB0;
  v1[153] = CFSTR(".AppleSystemUIFontBoldItalic");
  v2[153] = &unk_1E1615E98;
  v1[152] = CFSTR(".AppleSystemUIFontDemiItalic");
  v2[152] = &unk_1E1615E80;
  v1[151] = CFSTR(".AppleSystemUIFontMediumItalic");
  v2[151] = &unk_1E1615E68;
  v1[150] = CFSTR(".AppleSystemUIFontUltraLightItalic");
  v2[150] = &unk_1E1615E50;
  v1[149] = CFSTR(".AppleSystemUIFontLightItalic");
  v2[149] = &unk_1E1615E38;
  v1[148] = CFSTR(".AppleSystemUIFontThinItalic");
  v2[148] = &unk_1E1615E20;
  v1[147] = CFSTR(".AppleSystemUIFaceShortItalicCaption2");
  v2[147] = &unk_1E1614F80;
  v1[146] = CFSTR(".AppleSystemUIFaceShortCaption2");
  v2[146] = &unk_1E1614F68;
  v1[145] = CFSTR(".AppleSystemUIFaceShortEmphasizedCaption2");
  v2[145] = &unk_1E1614F50;
  v1[144] = CFSTR(".AppleSystemUIFaceShortItalicFootnote2");
  v2[144] = &unk_1E1614F38;
  v1[143] = CFSTR(".AppleSystemUIFaceShortFootnote2");
  v2[143] = &unk_1E1614F20;
  v1[142] = CFSTR(".AppleSystemUIFaceShortEmphasizedFootnote2");
  v2[142] = &unk_1E1614F08;
  v1[141] = CFSTR(".AppleSystemUIFaceItalicFootnote2");
  v2[141] = &unk_1E1614EF0;
  v1[140] = CFSTR(".AppleSystemUIFaceFootnote2");
  v2[140] = &unk_1E1614ED8;
  v1[139] = CFSTR(".AppleSystemUIFaceEmphasizedFootnote2");
  v2[139] = &unk_1E1614EC0;
  v1[138] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCallout");
  v2[138] = &unk_1E1614EA8;
  v1[137] = CFSTR(".AppleSystemUIFaceTallEmphasizedCallout");
  v2[137] = &unk_1E1614E90;
  v1[136] = CFSTR(".AppleSystemUIFaceTallItalicCallout");
  v2[136] = &unk_1E1614DB8;
  v1[135] = CFSTR(".AppleSystemUIFaceTallCallout");
  v2[135] = &unk_1E1614DA0;
  v1[134] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCallout");
  v2[134] = &unk_1E1616F78;
  v1[133] = CFSTR(".AppleSystemUIFaceShortEmphasizedCallout");
  v2[133] = &unk_1E1616F60;
  v1[132] = CFSTR(".AppleSystemUIFaceShortItalicCallout");
  v2[132] = &unk_1E1614E78;
  v1[131] = CFSTR(".AppleSystemUIFaceShortCallout");
  v2[131] = &unk_1E1616F48;
  v1[130] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCallout");
  v2[130] = &unk_1E1616F30;
  v1[129] = CFSTR(".AppleSystemUIFaceEmphasizedCallout");
  v2[129] = &unk_1E1616F18;
  v1[128] = CFSTR(".AppleSystemUIFaceItalicCallout");
  v2[128] = &unk_1E1616F00;
  v1[127] = CFSTR(".AppleSystemUIFaceCallout");
  v2[127] = &unk_1E1616EE8;
  v2[126] = &unk_1E1616ED0;
  v2[248] = &unk_1E1615358;
  v1[249] = CFSTR(".AppleSystemUIFaceTitle0");
  v2[249] = &unk_1E1615370;
  v1[250] = CFSTR(".AppleSystemUIFaceEmphasizedTitle0");
  v2[250] = &unk_1E1615388;
  v1[251] = CFSTR(".AppleSystemUIFaceShortTitle0");
  v2[251] = &unk_1E16153A0;
  v1[252] = CFSTR(".AppleSystemUIFaceShortEmphasizedTitle0");
  v2[252] = &unk_1E16153B8;
  v1[253] = CFSTR(".AppleSystemUIFaceTallTitle0");
  v2[253] = &unk_1E16153D0;
  v1[254] = CFSTR(".AppleSystemUIFaceTallEmphasizedTitle0");
  v2[254] = &unk_1E16153E8;
  v1[255] = CFSTR(".AppleSystemUIFaceEmphasizedHeadline");
  v2[255] = &unk_1E1615400;
  v1[256] = CFSTR(".AppleSystemUIFaceEmphasizedItalicHeadline");
  v2[256] = &unk_1E1615418;
  v1[257] = CFSTR(".AppleSystemUIFaceShortEmphasizedHeadline");
  v2[257] = &unk_1E1615430;
  v1[258] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicHeadline");
  v2[258] = &unk_1E1615448;
  v1[259] = CFSTR(".AppleSystemUIFaceTallHeadline");
  v2[259] = &unk_1E1615460;
  v1[260] = CFSTR(".AppleSystemUIFaceTallEmphasizedHeadline");
  v2[260] = &unk_1E1615478;
  v1[261] = CFSTR(".AppleSystemUIFaceCaption3");
  v2[261] = &unk_1E1615490;
  v1[262] = CFSTR(".AppleSystemUIFaceEmphasizedCaption3");
  v2[262] = &unk_1E16154A8;
  v1[263] = CFSTR(".AppleSystemUIFontCondensed-Regular");
  v2[263] = &unk_1E1615D78;
  v1[264] = CFSTR(".AppleSystemUIFontCondensed-Bold");
  v2[264] = &unk_1E1615D90;
  v1[265] = CFSTR(".AppleSystemUIFontCondensed-Thin");
  v2[265] = &unk_1E1615DA8;
  v1[266] = CFSTR(".AppleSystemUIFontCondensed-Light");
  v2[266] = &unk_1E1615DC0;
  v1[267] = CFSTR(".AppleSystemUIFontCondensed-UltraLight");
  v2[267] = &unk_1E1615DD8;
  v1[268] = CFSTR(".AppleSystemUIFontCondensed-Medium");
  v2[268] = &unk_1E1615EF8;
  v1[269] = CFSTR(".AppleSystemUIFontCondensed-Semibold");
  v2[269] = &unk_1E1615F10;
  v1[270] = CFSTR(".AppleSystemUIFontCondensed-Heavy");
  v2[270] = &unk_1E1615F28;
  v1[271] = CFSTR(".AppleSystemUIFontCondensed-Black");
  v2[271] = &unk_1E1615F40;
  v1[272] = CFSTR(".AppleSystemUIFontSerif-Regular");
  v2[272] = &unk_1E1616030;
  v1[273] = CFSTR(".AppleSystemUIFontSerif-Medium");
  v2[273] = &unk_1E1616048;
  v1[274] = CFSTR(".AppleSystemUIFontSerif-Semibold");
  v2[274] = &unk_1E1616060;
  v1[275] = CFSTR(".AppleSystemUIFontSerif-Bold");
  v2[275] = &unk_1E1616078;
  v1[276] = CFSTR(".AppleSystemUIFontSerif-Heavy");
  v2[276] = &unk_1E1616090;
  v1[277] = CFSTR(".AppleSystemUIFontSerif-Black");
  v2[277] = &unk_1E16160A8;
  v1[278] = CFSTR(".AppleSystemUIFontSerif-Italic");
  v2[278] = &unk_1E16160C0;
  v1[279] = CFSTR(".AppleSystemUIFontSerif-MediumItalic");
  v2[279] = &unk_1E16160D8;
  v1[280] = CFSTR(".AppleSystemUIFontSerif-SemiboldItalic");
  v2[280] = &unk_1E16160F0;
  v1[281] = CFSTR(".AppleSystemUIFontSerif-BoldItalic");
  v2[281] = &unk_1E1616108;
  v1[282] = CFSTR(".AppleSystemUIFontSerif-HeavyItalic");
  v2[282] = &unk_1E1616120;
  v1[283] = CFSTR(".AppleSystemUIFontSerif-BlackItalc");
  v2[283] = &unk_1E1615DF0;
  v1[284] = CFSTR(".AppleSystemUIFontMonospaced-Light");
  v2[284] = &unk_1E1615E08;
  v1[285] = CFSTR(".AppleSystemUIFontMonospaced-Regular");
  v2[285] = &unk_1E1616138;
  v1[286] = CFSTR(".AppleSystemUIFontMonospaced-Medium");
  v2[286] = &unk_1E1616150;
  v1[287] = CFSTR(".AppleSystemUIFontMonospaced-Semibold");
  v2[287] = &unk_1E1616168;
  v1[288] = CFSTR(".AppleSystemUIFontMonospaced-Bold");
  v2[288] = &unk_1E1616180;
  v1[289] = CFSTR(".AppleSystemUIFontMonospaced-Heavy");
  v2[289] = &unk_1E1616198;
  v1[290] = CFSTR(".AppleSystemUIFontMonospaced-LightItalic");
  v2[290] = &unk_1E16161B0;
  v1[291] = CFSTR(".AppleSystemUIFontMonospaced-RegularItalic");
  v2[291] = &unk_1E16161C8;
  v1[292] = CFSTR(".AppleSystemUIFontMonospaced-MediumItalic");
  v2[292] = &unk_1E16161E0;
  v1[293] = CFSTR(".AppleSystemUIFontMonospaced-SemiboldItalic");
  v2[293] = &unk_1E16161F8;
  v1[294] = CFSTR(".AppleSystemUIFontMonospaced-BoldItalic");
  v2[294] = &unk_1E1616210;
  v1[295] = CFSTR(".AppleSystemUIFontMonospaced-HeavyItalic");
  v2[295] = &unk_1E1616228;
  v1[296] = CFSTR(".AppleSystemUIFontSoft-Ultralight");
  v2[296] = &unk_1E1616240;
  v1[297] = CFSTR(".AppleSystemUIFontSoft-Thin");
  v2[297] = &unk_1E1616258;
  v1[298] = CFSTR(".AppleSystemUIFontSoft-Light");
  v2[298] = &unk_1E1616270;
  v1[299] = CFSTR(".AppleSystemUIFontSoft-Regular");
  v2[299] = &unk_1E1616288;
  v1[300] = CFSTR(".AppleSystemUIFontSoft-Medium");
  v2[300] = &unk_1E16162A0;
  v1[301] = CFSTR(".AppleSystemUIFontSoft-Semibold");
  v2[301] = &unk_1E16162B8;
  v1[302] = CFSTR(".AppleSystemUIFontSoft-Bold");
  v2[302] = &unk_1E16162D0;
  v1[303] = CFSTR(".AppleSystemUIFontSoft-Heavy");
  v2[303] = &unk_1E16162E8;
  v1[304] = CFSTR(".AppleSystemUIFontSoft-Black");
  v2[304] = &unk_1E1616300;
  v1[305] = CFSTR(".AppleSystemUIFontCompactSoft-Ultralight");
  v2[305] = &unk_1E1616318;
  v1[306] = CFSTR(".AppleSystemUIFontCompactSoft-Thin");
  v2[306] = &unk_1E1616330;
  v1[307] = CFSTR(".AppleSystemUIFontCompactSoft-Light");
  v2[307] = &unk_1E1616348;
  v1[308] = CFSTR(".AppleSystemUIFontCompactSoft-Regular");
  v2[308] = &unk_1E1616360;
  v1[309] = CFSTR(".AppleSystemUIFontCompactSoft-Medium");
  v2[309] = &unk_1E1616378;
  v1[310] = CFSTR(".AppleSystemUIFontCompactSoft-Semibold");
  v2[310] = &unk_1E1616390;
  v1[311] = CFSTR(".AppleSystemUIFontCompactSoft-Bold");
  v2[311] = &unk_1E16163A8;
  v1[312] = CFSTR(".AppleSystemUIFontCompactSoft-Heavy");
  v2[312] = &unk_1E16163C0;
  v1[313] = CFSTR(".AppleSystemUIFontCompactSoft-Black");
  v2[313] = &unk_1E16163D8;
  v1[314] = CFSTR(".AppleSystemFallback-Ultralight");
  v2[314] = &unk_1E1616F90;
  v1[315] = CFSTR(".AppleSystemFallback-Thin");
  v2[315] = &unk_1E1616FA8;
  v1[316] = CFSTR(".AppleSystemFallback-Light");
  v2[316] = &unk_1E1616FC0;
  v1[317] = CFSTR(".AppleSystemFallback-Regular");
  v2[317] = &unk_1E1616FD8;
  v1[318] = CFSTR(".AppleSystemFallback-Medium");
  v2[318] = &unk_1E1616FF0;
  v1[319] = CFSTR(".AppleSystemFallback-Semibold");
  v2[319] = &unk_1E1617008;
  v1[320] = CFSTR(".AppleSystemFallback-Bold");
  v2[320] = &unk_1E1617020;
  v1[321] = CFSTR(".AppleSystemFallback-Heavy");
  v2[321] = &unk_1E1617038;
  v1[322] = CFSTR(".AppleSystemFallback-Black");
  v2[322] = &unk_1E1617050;
  v1[323] = CFSTR(".AppleSystemUIFaceExtraLargeTitle");
  v2[323] = &unk_1E16154C0;
  v1[324] = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle");
  v2[324] = &unk_1E16154D8;
  v1[325] = CFSTR(".AppleSystemUIFaceExtraLargeTitle2");
  v2[325] = &unk_1E16154F0;
  v1[326] = CFSTR(".AppleSystemUIFaceEmphasizedExtraLargeTitle2");
  v2[326] = &unk_1E1615508;
  v1[327] = CFSTR(".AppleSystemUIFontCore-Regular");
  v2[327] = &unk_1E1615A00;
  v1[328] = CFSTR(".AppleSystemUIFontCore-Bold");
  v2[328] = &unk_1E1615AC0;
  v1[329] = CFSTR(".AppleSystemUIFontCore-Thin");
  v2[329] = &unk_1E1615A48;
  v1[330] = CFSTR(".AppleSystemUIFontCore-Light");
  v2[330] = &unk_1E1615A60;
  v1[331] = CFSTR(".AppleSystemUIFontCore-UltraLight");
  v2[331] = &unk_1E1615A78;
  v1[332] = CFSTR(".AppleSystemUIFontCore-Medium");
  v2[332] = &unk_1E1615A90;
  v1[333] = CFSTR(".AppleSystemUIFontCore-Semibold");
  v2[333] = &unk_1E1615AA8;
  v1[334] = CFSTR(".AppleSystemUIFontCore-Heavy");
  v2[334] = &unk_1E1615AD8;
  v1[335] = CFSTR(".AppleSystemUIFontCore-Black");
  v2[335] = &unk_1E1615AF0;
  v1[336] = CFSTR(".AppleSystemUIFontCore-Italic");
  v2[336] = &unk_1E1615A18;
  v1[337] = CFSTR(".AppleSystemUIFontCore-BoldItalic");
  v2[337] = &unk_1E1615B80;
  v1[338] = CFSTR(".AppleSystemUIFontCore-ThinItalic");
  v2[338] = &unk_1E1615B08;
  v1[339] = CFSTR(".AppleSystemUIFontCore-LightItalic");
  v2[339] = &unk_1E1615B20;
  v1[340] = CFSTR(".AppleSystemUIFontCore-UltraLightItalic");
  v2[340] = &unk_1E1615B38;
  v1[341] = CFSTR(".AppleSystemUIFontCore-MediumItalic");
  v2[341] = &unk_1E1615B50;
  v1[342] = CFSTR(".AppleSystemUIFontCore-SemiboldItalic");
  v2[342] = &unk_1E1615B68;
  v1[343] = CFSTR(".AppleSystemUIFontCore-HeavyItalic");
  v2[343] = &unk_1E1615B98;
  v1[344] = CFSTR(".AppleSystemUIFontCore-BlackItalic");
  v2[344] = &unk_1E1615BB0;
  v1[345] = CFSTR(".AppleSystemUIFontCoreCondensed-Regular");
  v2[345] = &unk_1E1615F58;
  v1[346] = CFSTR(".AppleSystemUIFontCoreCondensed-Bold");
  v2[346] = &unk_1E1615F70;
  v1[347] = CFSTR(".AppleSystemUIFontCoreCondensed-Thin");
  v2[347] = &unk_1E1615F88;
  v1[348] = CFSTR(".AppleSystemUIFontCoreCondensed-Light");
  v2[348] = &unk_1E1615FA0;
  v1[349] = CFSTR(".AppleSystemUIFontCoreCondensed-UltraLight");
  v2[349] = &unk_1E1615FB8;
  v1[350] = CFSTR(".AppleSystemUIFontCoreCondensed-Medium");
  v2[350] = &unk_1E1615FD0;
  v1[351] = CFSTR(".AppleSystemUIFontCoreCondensed-Semibold");
  v2[351] = &unk_1E1615FE8;
  v1[352] = CFSTR(".AppleSystemUIFontCoreCondensed-Heavy");
  v2[352] = &unk_1E1616000;
  v1[353] = CFSTR(".AppleSystemUIFontCoreCondensed-Black");
  v2[353] = &unk_1E1616018;
  v1[354] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCaption1");
  v2[354] = &unk_1E1615520;
  v1[355] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCaption1");
  v2[355] = &unk_1E1615538;
  v1[356] = CFSTR(".AppleSystemUIFaceTallCaption1");
  v2[356] = &unk_1E1615550;
  v1[357] = CFSTR(".AppleSystemUIFaceTallItalicCaption1");
  v2[357] = &unk_1E1615568;
  v1[358] = CFSTR(".AppleSystemUIFaceTallEmphasizedCaption1");
  v2[358] = &unk_1E1615580;
  v1[359] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCaption1");
  v2[359] = &unk_1E1615598;
  v1[360] = CFSTR(".AppleSystemUIFaceEmphasizedItalicCaption2");
  v2[360] = &unk_1E16155B0;
  v1[361] = CFSTR(".AppleSystemUIFaceShortEmphasizedItalicCaption2");
  v2[361] = &unk_1E16155C8;
  v1[362] = CFSTR(".AppleSystemUIFaceTallCaption2");
  v2[362] = &unk_1E16155E0;
  v1[363] = CFSTR(".AppleSystemUIFaceTallItalicCaption2");
  v2[363] = &unk_1E16155F8;
  v1[364] = CFSTR(".AppleSystemUIFaceTallEmphasizedCaption2");
  v2[364] = &unk_1E1615610;
  v1[365] = CFSTR(".AppleSystemUIFaceTallEmphasizedItalicCaption2");
  v2[365] = &unk_1E1615628;
  v1[366] = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle");
  v2[366] = &unk_1E1615640;
  v1[367] = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle");
  v2[367] = &unk_1E1615658;
  v1[368] = CFSTR(".AppleSystemUIFaceItalicExtraLargeTitle2");
  v2[368] = &unk_1E1615670;
  v1[369] = CFSTR(".AppleSystemUIFaceEmphasizedItalicExtraLargeTitle2");
  v2[369] = &unk_1E1615688;
  v1[370] = CFSTR(".AppleSystemUIFaceCondensedHeadline");
  v2[370] = &unk_1E16156D0;
  v1[371] = CFSTR(".AppleSystemUIFaceCondensedTitle1");
  v2[371] = &unk_1E16156E8;
  v1[372] = CFSTR(".AppleSystemUIFaceCondensedTitle2");
  v2[372] = &unk_1E1615700;
  v1[373] = CFSTR(".AppleSystemUIFaceCondensedTitle3");
  v2[373] = &unk_1E1615718;
  v1[374] = CFSTR(".AppleSystemUIFaceCondensedBody");
  v2[374] = &unk_1E1615730;
  v1[375] = CFSTR(".AppleSystemUIFacePreferredSize-Regular");
  v2[375] = &unk_1E16156A0;
  v1[376] = CFSTR(".AppleSystemUIFacePreferredSize-Bold");
  v2[376] = &unk_1E16156B8;
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 377);
  qword_1EDD16F28 = (uint64_t)result;
  return result;
}

id ___Z31FontNameForStashIndexDictionaryv_block_invoke()
{
  id result;
  _QWORD v1[267];
  _QWORD v2[268];

  v2[267] = *MEMORY[0x1E0C80C00];
  v1[0] = &unk_1E1616AC8;
  v1[1] = &unk_1E1616AE0;
  v2[0] = CFSTR("UICTFontTextStyleHeadline");
  v2[1] = CFSTR("UICTFontTextStyleItalicHeadline");
  v1[2] = &unk_1E1614D70;
  v1[3] = &unk_1E1614D88;
  v2[2] = CFSTR("UICTFontTextStyleShortHeadline");
  v2[3] = CFSTR("UICTFontTextStyleShortItalicHeadline");
  v1[4] = &unk_1E1616AF8;
  v1[5] = &unk_1E1616B10;
  v2[4] = CFSTR("UICTFontTextStyleHeadline2");
  v2[5] = CFSTR("UICTFontTextStyleItalicHeadline2");
  v1[6] = &unk_1E1616B28;
  v1[7] = &unk_1E1616B40;
  v2[6] = CFSTR("UICTFontTextStyleShortHeadline2");
  v2[7] = CFSTR("UICTFontTextStyleShortItalicHeadline2");
  v1[8] = &unk_1E1616B58;
  v1[9] = &unk_1E1616B70;
  v2[8] = CFSTR("UICTFontTextStyleEmphasizedBody");
  v2[9] = CFSTR("UICTFontTextStyleBody");
  v1[10] = &unk_1E1616B88;
  v1[11] = &unk_1E1616BA0;
  v2[10] = CFSTR("UICTFontTextStyleEmphasizedItalicBody");
  v2[11] = CFSTR("UICTFontTextStyleItalicBody");
  v1[12] = &unk_1E1616BB8;
  v1[13] = &unk_1E1616BD0;
  v2[12] = CFSTR("UICTFontTextStyleShortEmphasizedBody");
  v2[13] = CFSTR("UICTFontTextStyleShortBody");
  v1[14] = &unk_1E1616BE8;
  v1[15] = &unk_1E1616C00;
  v2[14] = CFSTR("UICTFontTextStyleShortEmphasizedItalicBody");
  v2[15] = CFSTR("UICTFontTextStyleShortItalicBody");
  v1[16] = &unk_1E1616C18;
  v1[17] = &unk_1E1616C30;
  v2[16] = CFSTR("UICTFontTextStyleTallEmphasizedBody");
  v2[17] = CFSTR("UICTFontTextStyleTallBody");
  v1[18] = &unk_1E1616C48;
  v1[19] = &unk_1E1616C60;
  v2[18] = CFSTR("UICTFontTextStyleTallEmphasizedItalicBody");
  v2[19] = CFSTR("UICTFontTextStyleTallItalicBody");
  v1[20] = &unk_1E1616C78;
  v1[21] = &unk_1E1616C90;
  v2[20] = CFSTR("UICTFontTextStyleEmphasizedSubhead");
  v2[21] = CFSTR("UICTFontTextStyleSubhead");
  v1[22] = &unk_1E1616CA8;
  v1[23] = &unk_1E1616CC0;
  v2[22] = CFSTR("UICTFontTextStyleItalicSubhead");
  v2[23] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead");
  v1[24] = &unk_1E1616CD8;
  v1[25] = &unk_1E1616CF0;
  v2[24] = CFSTR("UICTFontTextStyleShortSubhead");
  v2[25] = CFSTR("UICTFontTextStyleShortItalicSubhead");
  v1[26] = &unk_1E1616D08;
  v1[27] = &unk_1E1614E60;
  v2[26] = CFSTR("UICTFontTextStyleEmphasizedSubhead2");
  v2[27] = CFSTR("UICTFontTextStyleSubhead2");
  v1[28] = &unk_1E1616D20;
  v1[29] = &unk_1E1616D38;
  v2[28] = CFSTR("UICTFontTextStyleItalicSubhead2");
  v2[29] = CFSTR("UICTFontTextStyleShortEmphasizedSubhead2");
  v1[30] = &unk_1E1616D50;
  v1[31] = &unk_1E1616D68;
  v2[30] = CFSTR("UICTFontTextStyleShortSubhead2");
  v2[31] = CFSTR("UICTFontTextStyleShortItalicSubhead2");
  v1[32] = &unk_1E1616D80;
  v1[33] = &unk_1E1616D98;
  v2[32] = CFSTR("UICTFontTextStyleEmphasizedFootnote");
  v2[33] = CFSTR("UICTFontTextStyleFootnote");
  v1[34] = &unk_1E1616DB0;
  v1[35] = &unk_1E1616DC8;
  v2[34] = CFSTR("UICTFontTextStyleItalicFootnote");
  v2[35] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote");
  v1[36] = &unk_1E1616DE0;
  v1[37] = &unk_1E1616DF8;
  v2[36] = CFSTR("UICTFontTextStyleShortFootnote");
  v2[37] = CFSTR("UICTFontTextStyleShortItalicFootnote");
  v1[38] = &unk_1E1616E10;
  v1[39] = &unk_1E1616E28;
  v2[38] = CFSTR("UICTFontTextStyleEmphasizedCaption1");
  v2[39] = CFSTR("UICTFontTextStyleCaption1");
  v1[40] = &unk_1E1616E40;
  v1[41] = &unk_1E1616E58;
  v2[40] = CFSTR("UICTFontTextStyleItalicCaption1");
  v2[41] = CFSTR("UICTFontTextStyleShortEmphasizedCaption1");
  v1[42] = &unk_1E1616E70;
  v1[43] = &unk_1E1616E88;
  v2[42] = CFSTR("UICTFontTextStyleShortCaption1");
  v2[43] = CFSTR("UICTFontTextStyleShortItalicCaption1");
  v1[44] = &unk_1E1616EA0;
  v1[45] = &unk_1E1616EB8;
  v2[44] = CFSTR("UICTFontTextStyleEmphasizedCaption2");
  v2[45] = CFSTR("UICTFontTextStyleCaption2");
  v1[46] = &unk_1E1616ED0;
  v1[47] = &unk_1E1616EE8;
  v2[46] = CFSTR("UICTFontTextStyleItalicCaption2");
  v2[47] = CFSTR("UICTFontTextStyleCallout");
  v1[48] = &unk_1E1616F00;
  v1[49] = &unk_1E1616F18;
  v2[48] = CFSTR("UICTFontTextStyleItalicCallout");
  v2[49] = CFSTR("UICTFontTextStyleEmphasizedCallout");
  v1[50] = &unk_1E1616F30;
  v1[51] = &unk_1E1616F48;
  v2[50] = CFSTR("UICTFontTextStyleEmphasizedItalicCallout");
  v2[51] = CFSTR("UICTFontTextStyleShortCallout");
  v1[52] = &unk_1E1614E78;
  v1[53] = &unk_1E1616F60;
  v2[52] = CFSTR("UICTFontTextStyleShortItalicCallout");
  v2[53] = CFSTR("UICTFontTextStyleShortEmphasizedCallout");
  v1[54] = &unk_1E1616F78;
  v1[55] = &unk_1E1614DA0;
  v2[54] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCallout");
  v2[55] = CFSTR("UICTFontTextStyleTallCallout");
  v1[56] = &unk_1E1614DB8;
  v1[57] = &unk_1E1614E90;
  v2[56] = CFSTR("UICTFontTextStyleTallItalicCallout");
  v2[57] = CFSTR("UICTFontTextStyleTallEmphasizedCallout");
  v1[58] = &unk_1E1614EA8;
  v1[59] = &unk_1E1614EC0;
  v2[58] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCallout");
  v2[59] = CFSTR("UICTFontTextStyleEmphasizedFootnote2");
  v1[60] = &unk_1E1614ED8;
  v1[61] = &unk_1E1614EF0;
  v2[60] = CFSTR("UICTFontTextStyleFootnote2");
  v2[61] = CFSTR("UICTFontTextStyleItalicFootnote2");
  v1[62] = &unk_1E1614F08;
  v1[63] = &unk_1E1614F20;
  v2[62] = CFSTR("UICTFontTextStyleShortEmphasizedFootnote2");
  v2[63] = CFSTR("UICTFontTextStyleShortFootnote2");
  v1[64] = &unk_1E1614F38;
  v2[64] = CFSTR("UICTFontTextStyleShortItalicFootnote2");
  v1[65] = &unk_1E1614F50;
  v2[65] = CFSTR("UICTFontTextStyleShortEmphasizedCaption2");
  v1[66] = &unk_1E1614F68;
  v2[66] = CFSTR("UICTFontTextStyleShortCaption2");
  v1[67] = &unk_1E1614F80;
  v2[67] = CFSTR("UICTFontTextStyleShortItalicCaption2");
  v1[68] = &unk_1E1615748;
  v2[68] = CFSTR("CTFontEmphasizedUsage");
  v1[69] = &unk_1E1615760;
  v2[69] = CFSTR("CTFontRegularUsage");
  v1[70] = &unk_1E1615778;
  v2[70] = CFSTR("CTFontObliqueUsage");
  v1[71] = &unk_1E1615790;
  v2[71] = CFSTR("CTFontEmphasizedObliqueUsage");
  v1[72] = &unk_1E16157A8;
  v2[72] = CFSTR("CTFontThinUsage");
  v1[73] = &unk_1E16157C0;
  v2[73] = CFSTR("CTFontLightUsage");
  v1[74] = &unk_1E16157D8;
  v2[74] = CFSTR("CTFontUltraLightUsage");
  v1[75] = &unk_1E16157F0;
  v2[75] = CFSTR("CTFontMediumUsage");
  v1[76] = &unk_1E1615808;
  v2[76] = CFSTR("CTFontDemiUsage");
  v1[77] = &unk_1E1615820;
  v2[77] = CFSTR("CTFontBoldUsage");
  v1[78] = &unk_1E1615838;
  v2[78] = CFSTR("CTFontHeavyUsage");
  v1[79] = &unk_1E1615850;
  v2[79] = CFSTR("CTFontBlackUsage");
  v1[80] = &unk_1E1615A00;
  v2[80] = CFSTR("CTFontSystemUICoreRegular");
  v1[81] = &unk_1E16159E8;
  v2[81] = CFSTR("CTFontSystemUICoreBold");
  v1[82] = &unk_1E1615AC0;
  v2[82] = CFSTR("CTFontSystemUICoreBold");
  v1[83] = &unk_1E1615A48;
  v2[83] = CFSTR("CTFontSystemUICoreThin");
  v1[84] = &unk_1E1615A60;
  v2[84] = CFSTR("CTFontSystemUICoreLight");
  v1[85] = &unk_1E1615A78;
  v2[85] = CFSTR("CTFontSystemUICoreUltraLight");
  v1[86] = &unk_1E1615A90;
  v2[86] = CFSTR("CTFontSystemUICoreMedium");
  v1[87] = &unk_1E1615AA8;
  v2[87] = CFSTR("CTFontSystemUICoreSemiBold");
  v1[88] = &unk_1E1615AD8;
  v2[88] = CFSTR("CTFontSystemUICoreHeavy");
  v1[89] = &unk_1E1615AF0;
  v2[89] = CFSTR("CTFontSystemUICoreBlack");
  v1[90] = &unk_1E1615A18;
  v2[90] = CFSTR("CTFontSystemUICoreItalic");
  v1[91] = &unk_1E1615A30;
  v2[91] = CFSTR("CTFontSystemUICoreBoldItalic");
  v1[92] = &unk_1E1615B08;
  v2[92] = CFSTR("CTFontSystemUICoreThinItalic");
  v1[93] = &unk_1E1615B20;
  v2[93] = CFSTR("CTFontSystemUICoreLightItalic");
  v1[94] = &unk_1E1615B38;
  v2[94] = CFSTR("CTFontSystemUICoreUltraLightItalic");
  v1[95] = &unk_1E1615B50;
  v2[95] = CFSTR("CTFontSystemUICoreMediumItalic");
  v1[96] = &unk_1E1615B68;
  v2[96] = CFSTR("CTFontSystemUICoreSemiBoldItalic");
  v1[97] = &unk_1E1615B98;
  v2[97] = CFSTR("CTFontSystemUICoreHeavyItalic");
  v1[98] = &unk_1E1615BB0;
  v2[98] = CFSTR("CTFontSystemUICoreBlackItalic");
  v1[99] = &unk_1E16166A8;
  v2[99] = CFSTR("CTFontSystemUIAlternateRegular");
  v1[100] = &unk_1E1616690;
  v2[100] = CFSTR("CTFontSystemUIAlternateBold");
  v1[101] = &unk_1E1615868;
  v2[101] = CFSTR("CTFontSystemUIAlternateThin");
  v1[102] = &unk_1E1615880;
  v2[102] = CFSTR("CTFontSystemUIAlternateLight");
  v1[103] = &unk_1E1615898;
  v2[103] = CFSTR("CTFontSystemUIAlternateUltraLight");
  v1[104] = &unk_1E16158B0;
  v2[104] = CFSTR("CTFontSystemUIAlternateMedium");
  v1[105] = &unk_1E16158C8;
  v2[105] = CFSTR("CTFontSystemUIAlternateSemiBold");
  v1[106] = &unk_1E16158F8;
  v2[106] = CFSTR("CTFontSystemUIAlternateHeavy");
  v1[107] = &unk_1E1615910;
  v2[107] = CFSTR("CTFontSystemUIAlternateBlack");
  v1[108] = &unk_1E16166C0;
  v2[108] = CFSTR("CTFontSystemUIAlternateItalic");
  v1[109] = &unk_1E16166D8;
  v2[109] = CFSTR("CTFontSystemUIAlternateBoldItalic");
  v1[110] = &unk_1E1615928;
  v2[110] = CFSTR("CTFontSystemUIAlternateThinItalic");
  v1[111] = &unk_1E1615940;
  v2[111] = CFSTR("CTFontSystemUIAlternateLightItalic");
  v1[112] = &unk_1E1615958;
  v2[112] = CFSTR("CTFontSystemUIAlternateUltraLightItalic");
  v1[113] = &unk_1E1615970;
  v2[113] = CFSTR("CTFontSystemUIAlternateMediumItalic");
  v1[114] = &unk_1E1615988;
  v2[114] = CFSTR("CTFontSystemUIAlternateSemiBoldItalic");
  v1[115] = &unk_1E16159B8;
  v2[115] = CFSTR("CTFontSystemUIAlternateHeavyItalic");
  v1[116] = &unk_1E16159D0;
  v2[116] = CFSTR("CTFontSystemUIAlternateBlackItalic");
  v1[117] = &unk_1E1615490;
  v2[117] = CFSTR("UICTFontTextStyleCaption3");
  v1[118] = &unk_1E16154A8;
  v2[118] = CFSTR("UICTFontTextStyleEmphasizedCaption3");
  v1[119] = &unk_1E1615E20;
  v2[119] = CFSTR("CTFontThinItalicUsage");
  v1[120] = &unk_1E1615E38;
  v2[120] = CFSTR("CTFontLightItalicUsage");
  v1[121] = &unk_1E1615E50;
  v2[121] = CFSTR("CTFontUltraLightItalicUsage");
  v1[122] = &unk_1E1615E68;
  v2[122] = CFSTR("CTFontMediumItalicUsage");
  v1[123] = &unk_1E1615E80;
  v2[123] = CFSTR("CTFontDemiItalicUsage");
  v1[124] = &unk_1E1615E98;
  v2[124] = CFSTR("CTFontBoldItalicUsage");
  v1[125] = &unk_1E1615EB0;
  v2[125] = CFSTR("CTFontHeavyItalicUsage");
  v1[138] = &unk_1E1615CA0;
  v1[137] = &unk_1E1615C88;
  v2[137] = CFSTR("CTFontSystemUIRoundedBlack");
  v1[136] = &unk_1E1615C70;
  v2[136] = CFSTR("CTFontSystemUIRoundedHeavy");
  v1[135] = &unk_1E1615C58;
  v2[135] = CFSTR("CTFontSystemUIRoundedBold");
  v1[134] = &unk_1E1615C40;
  v2[134] = CFSTR("CTFontSystemUIRoundedSemibold");
  v1[133] = &unk_1E1615C28;
  v2[133] = CFSTR("CTFontSystemUIRoundedMedium");
  v1[132] = &unk_1E1615C10;
  v2[132] = CFSTR("CTFontSystemUIRoundedRegular");
  v1[131] = &unk_1E1615BF8;
  v2[131] = CFSTR("CTFontSystemUIRoundedLight");
  v1[130] = &unk_1E1615BE0;
  v2[130] = CFSTR("CTFontSystemUIRoundedThin");
  v1[129] = &unk_1E1615BC8;
  v2[129] = CFSTR("CTFontSystemUIRoundedUltralight");
  v2[128] = CFSTR("CTFontTextStyleThin");
  v2[127] = CFSTR("CTFontTextStyleUltraLight");
  v1[128] = &unk_1E1616678;
  v2[126] = CFSTR("CTFontBlackItalicUsage");
  v1[127] = &unk_1E1615EE0;
  v1[126] = &unk_1E1615EC8;
  v2[138] = CFSTR("CTFontSystemUICompactRoundedUltralight");
  v1[139] = &unk_1E1615CB8;
  v2[139] = CFSTR("CTFontSystemUICompactRoundedThin");
  v1[140] = &unk_1E1615CD0;
  v2[140] = CFSTR("CTFontSystemUICompactRoundedLight");
  v1[141] = &unk_1E1615CE8;
  v2[141] = CFSTR("CTFontSystemUICompactRoundedRegular");
  v1[142] = &unk_1E1615D00;
  v2[142] = CFSTR("CTFontSystemUICompactRoundedMedium");
  v1[143] = &unk_1E1615D18;
  v2[143] = CFSTR("CTFontSystemUICompactRoundedSemibold");
  v1[144] = &unk_1E1615D30;
  v2[144] = CFSTR("CTFontSystemUICompactRoundedBold");
  v1[145] = &unk_1E1615D48;
  v2[145] = CFSTR("CTFontSystemUICompactRoundedHeavy");
  v1[146] = &unk_1E1615D60;
  v2[146] = CFSTR("CTFontSystemUICompactRoundedBlack");
  v1[147] = &unk_1E1614F98;
  v2[147] = CFSTR("UICTFontTextStyleTitle1");
  v1[148] = &unk_1E1614DD0;
  v2[148] = CFSTR("UICTFontTextStyleItalicTitle1");
  v1[149] = &unk_1E1614DE8;
  v2[149] = CFSTR("UICTFontTextStyleEmphasizedTitle1");
  v1[150] = &unk_1E1614E00;
  v2[150] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle1");
  v1[151] = &unk_1E1614E18;
  v2[151] = CFSTR("UICTFontTextStyleShortTitle1");
  v1[152] = &unk_1E1614E30;
  v2[152] = CFSTR("UICTFontTextStyleShortItalicTitle1");
  v1[153] = &unk_1E1614E48;
  v2[153] = CFSTR("UICTFontTextStyleShortEmphasizedTitle1");
  v1[154] = &unk_1E1614FB0;
  v2[154] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle1");
  v1[155] = &unk_1E1614FC8;
  v2[155] = CFSTR("UICTFontTextStyleTallTitle1");
  v1[156] = &unk_1E1614FE0;
  v2[156] = CFSTR("UICTFontTextStyleTallItalicTitle1");
  v1[157] = &unk_1E1614FF8;
  v2[157] = CFSTR("UICTFontTextStyleTallEmphasizedTitle1");
  v1[158] = &unk_1E1615010;
  v2[158] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle1");
  v1[159] = &unk_1E1615028;
  v2[159] = CFSTR("UICTFontTextStyleTitle2");
  v1[160] = &unk_1E1615040;
  v2[160] = CFSTR("UICTFontTextStyleItalicTitle2");
  v1[161] = &unk_1E1615058;
  v2[161] = CFSTR("UICTFontTextStyleEmphasizedTitle2");
  v1[162] = &unk_1E1615070;
  v2[162] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle2");
  v1[163] = &unk_1E1615088;
  v2[163] = CFSTR("UICTFontTextStyleShortTitle2");
  v1[164] = &unk_1E16150A0;
  v2[164] = CFSTR("UICTFontTextStyleShortItalicTitle2");
  v1[165] = &unk_1E16150B8;
  v2[165] = CFSTR("UICTFontTextStyleShortEmphasizedTitle2");
  v1[166] = &unk_1E16150D0;
  v2[166] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle2");
  v1[167] = &unk_1E16150E8;
  v2[167] = CFSTR("UICTFontTextStyleTallTitle2");
  v1[168] = &unk_1E1615100;
  v2[168] = CFSTR("UICTFontTextStyleTallItalicTitle2");
  v1[169] = &unk_1E1615118;
  v2[169] = CFSTR("UICTFontTextStyleTallEmphasizedTitle2");
  v1[170] = &unk_1E1615130;
  v2[170] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle2");
  v1[171] = &unk_1E1615148;
  v2[171] = CFSTR("UICTFontTextStyleTitle3");
  v1[172] = &unk_1E1615160;
  v2[172] = CFSTR("UICTFontTextStyleItalicTitle3");
  v1[173] = &unk_1E1615178;
  v2[173] = CFSTR("UICTFontTextStyleEmphasizedTitle3");
  v1[174] = &unk_1E1615190;
  v2[174] = CFSTR("UICTFontTextStyleEmphasizedItalicTitle3");
  v1[175] = &unk_1E16151A8;
  v2[175] = CFSTR("UICTFontTextStyleShortTitle3");
  v1[176] = &unk_1E16151C0;
  v2[176] = CFSTR("UICTFontTextStyleShortItalicTitle3");
  v1[177] = &unk_1E16151D8;
  v2[177] = CFSTR("UICTFontTextStyleShortEmphasizedTitle3");
  v1[178] = &unk_1E16151F0;
  v2[178] = CFSTR("UICTFontTextStyleShortEmphasizedItalicTitle3");
  v1[179] = &unk_1E1615208;
  v2[179] = CFSTR("UICTFontTextStyleTallTitle3");
  v1[180] = &unk_1E1615220;
  v2[180] = CFSTR("UICTFontTextStyleTallItalicTitle3");
  v1[181] = &unk_1E1615238;
  v2[181] = CFSTR("UICTFontTextStyleTallEmphasizedTitle3");
  v1[182] = &unk_1E1615250;
  v2[182] = CFSTR("UICTFontTextStyleTallEmphasizedItalicTitle3");
  v1[183] = &unk_1E1615268;
  v2[183] = CFSTR("UICTFontTextStyleSubtitle3");
  v1[184] = &unk_1E1615280;
  v2[184] = CFSTR("UICTFontTextStyleSubtitle2");
  v1[185] = &unk_1E1615298;
  v2[185] = CFSTR("UICTFontTextStyleSubtitle1");
  v1[186] = &unk_1E16152B0;
  v2[186] = CFSTR("UICTFontTextStyleSection1");
  v1[187] = &unk_1E16152C8;
  v2[187] = CFSTR("UICTFontTextStyleSection2");
  v1[188] = &unk_1E16152E0;
  v2[188] = CFSTR("UICTFontTextStyleSection3");
  v1[189] = &unk_1E16152F8;
  v2[189] = CFSTR("UICTFontTextStyleTitle4");
  v1[190] = &unk_1E1615310;
  v2[190] = CFSTR("UICTFontTextStyleHeadline3");
  v1[191] = &unk_1E1615328;
  v2[191] = CFSTR("UICTFontTextStyleItalicSubtitle1");
  v1[192] = &unk_1E1615340;
  v2[192] = CFSTR("UICTFontTextStyleEmphasizedSubtitle1");
  v1[193] = &unk_1E1615358;
  v2[193] = CFSTR("UICTFontTextStyleEmphasizedItalicSubtitle1");
  v1[194] = &unk_1E1615370;
  v2[194] = CFSTR("UICTFontTextStyleTitle0");
  v1[195] = &unk_1E1615388;
  v2[195] = CFSTR("UICTFontTextStyleEmphasizedTitle0");
  v1[196] = &unk_1E16153A0;
  v2[196] = CFSTR("UICTFontTextStyleShortTitle0");
  v1[197] = &unk_1E16153B8;
  v2[197] = CFSTR("UICTFontTextStyleShortEmphasizedTitle0");
  v1[198] = &unk_1E16153D0;
  v2[198] = CFSTR("UICTFontTextStyleTallTitle0");
  v1[199] = &unk_1E16153E8;
  v2[199] = CFSTR("UICTFontTextStyleTallEmphasizedTitle0");
  v1[200] = &unk_1E1615400;
  v2[200] = CFSTR("UICTFontTextStyleEmphasizedHeadline");
  v1[201] = &unk_1E1615418;
  v2[201] = CFSTR("UICTFontTextStyleEmphasizedItalicHeadline");
  v1[202] = &unk_1E1615430;
  v2[202] = CFSTR("UICTFontTextStyleShortEmphasizedHeadline");
  v1[203] = &unk_1E1615448;
  v2[203] = CFSTR("UICTFontTextStyleShortEmphasizedItalicHeadline");
  v1[204] = &unk_1E1615460;
  v2[204] = CFSTR("UICTFontTextStyleTallHeadline");
  v1[205] = &unk_1E1615478;
  v2[205] = CFSTR("UICTFontTextStyleTallEmphasizedHeadline");
  v1[206] = &unk_1E1616030;
  v2[206] = CFSTR("CTFontSystemUISerifRegular");
  v1[207] = &unk_1E1616048;
  v2[207] = CFSTR("CTFontSystemUISerifMedium");
  v1[208] = &unk_1E1616060;
  v2[208] = CFSTR("CTFontSystemUISerifSemibold");
  v1[209] = &unk_1E1616078;
  v2[209] = CFSTR("CTFontSystemUISerifBold");
  v1[210] = &unk_1E1616090;
  v2[210] = CFSTR("CTFontSystemUISerifHeavy");
  v1[211] = &unk_1E16160A8;
  v2[211] = CFSTR("CTFontSystemUISerifBlack");
  v1[212] = &unk_1E16160C0;
  v2[212] = CFSTR("CTFontSystemUISerifItalic");
  v1[213] = &unk_1E16160D8;
  v2[213] = CFSTR("CTFontSystemUISerifMediumItalic");
  v1[214] = &unk_1E16160F0;
  v2[214] = CFSTR("CTFontSystemUISerifSemiboldItalic");
  v1[215] = &unk_1E1616108;
  v2[215] = CFSTR("CTFontSystemUISerifBoldItalic");
  v1[216] = &unk_1E1616120;
  v2[216] = CFSTR("CTFontSystemUISerifHeavyItalic");
  v1[217] = &unk_1E1615DF0;
  v2[217] = CFSTR("CTFontSystemUISerifBlackItalic");
  v1[218] = &unk_1E1615E08;
  v2[218] = CFSTR("CTFontSystemUIMonospacedLight");
  v1[219] = &unk_1E1616138;
  v2[219] = CFSTR("CTFontSystemUIMonospacedRegular");
  v1[220] = &unk_1E1616150;
  v2[220] = CFSTR("CTFontSystemUIMonospacedMedium");
  v1[221] = &unk_1E1616168;
  v2[221] = CFSTR("CTFontSystemUIMonospacedSemibold");
  v1[222] = &unk_1E1616180;
  v2[222] = CFSTR("CTFontSystemUIMonospacedBold");
  v1[223] = &unk_1E1616198;
  v2[223] = CFSTR("CTFontSystemUIMonospacedHeavy");
  v1[224] = &unk_1E16161B0;
  v2[224] = CFSTR("CTFontSystemUIMonospacedLightItalic");
  v1[225] = &unk_1E16161C8;
  v2[225] = CFSTR("CTFontSystemUIMonospacedRegularItalic");
  v1[226] = &unk_1E16161E0;
  v2[226] = CFSTR("CTFontSystemUIMonospacedMediumItalic");
  v1[227] = &unk_1E16161F8;
  v2[227] = CFSTR("CTFontSystemUIMonospacedSemiboldItalic");
  v1[228] = &unk_1E1616210;
  v2[228] = CFSTR("CTFontSystemUIMonospacedBoldItalic");
  v1[229] = &unk_1E1616228;
  v2[229] = CFSTR("CTFontSystemUIMonospacedHeavyItalic");
  v1[230] = &unk_1E1615D78;
  v2[230] = CFSTR("CTFontSystemUICondensedRegular");
  v1[231] = &unk_1E1615D90;
  v2[231] = CFSTR("CTFontSystemUICondensedBold");
  v1[232] = &unk_1E1615DA8;
  v2[232] = CFSTR("CTFontSystemUICondensedThin");
  v1[233] = &unk_1E1615DC0;
  v2[233] = CFSTR("CTFontSystemUICondensedLight");
  v1[234] = &unk_1E1615DD8;
  v2[234] = CFSTR("CTFontSystemUICondensedUltraLight");
  v1[235] = &unk_1E1615EF8;
  v2[235] = CFSTR("CTFontSystemUICondensedMedium");
  v1[236] = &unk_1E1615F10;
  v2[236] = CFSTR("CTFontSystemUICondensedSemiBold");
  v1[237] = &unk_1E1615F28;
  v2[237] = CFSTR("CTFontSystemUICondensedHeavy");
  v1[238] = &unk_1E1615F40;
  v2[238] = CFSTR("CTFontSystemUICondensedBlack");
  v1[239] = &unk_1E1615F58;
  v2[239] = CFSTR("CTFontSystemUICoreCondensedRegular");
  v1[240] = &unk_1E1615F70;
  v2[240] = CFSTR("CTFontSystemUICoreCondensedBold");
  v1[241] = &unk_1E1615F88;
  v2[241] = CFSTR("CTFontSystemUICoreCondensedThin");
  v1[242] = &unk_1E1615FA0;
  v2[242] = CFSTR("CTFontSystemUICoreCondensedLight");
  v1[243] = &unk_1E1615FB8;
  v2[243] = CFSTR("CTFontSystemUICoreCondensedUltraLight");
  v1[244] = &unk_1E1615FD0;
  v2[244] = CFSTR("CTFontSystemUICoreCondensedMedium");
  v1[245] = &unk_1E1615FE8;
  v2[245] = CFSTR("CTFontSystemUICoreCondensedSemiBold");
  v1[246] = &unk_1E1616000;
  v2[246] = CFSTR("CTFontSystemUICoreCondensedHeavy");
  v1[247] = &unk_1E1616018;
  v2[247] = CFSTR("CTFontSystemUICoreCondensedBlack");
  v1[248] = &unk_1E1615520;
  v2[248] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption1");
  v1[249] = &unk_1E1615538;
  v2[249] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption1");
  v1[250] = &unk_1E1615550;
  v2[250] = CFSTR("UICTFontTextStyleTallCaption1");
  v1[251] = &unk_1E1615568;
  v2[251] = CFSTR("UICTFontTextStyleTallItalicCaption1");
  v1[252] = &unk_1E1615580;
  v2[252] = CFSTR("UICTFontTextStyleTallEmphasizedCaption1");
  v1[253] = &unk_1E1615598;
  v2[253] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption1");
  v1[254] = &unk_1E16155B0;
  v2[254] = CFSTR("UICTFontTextStyleEmphasizedItalicCaption2");
  v1[255] = &unk_1E16155C8;
  v2[255] = CFSTR("UICTFontTextStyleShortEmphasizedItalicCaption2");
  v1[256] = &unk_1E16155E0;
  v2[256] = CFSTR("UICTFontTextStyleTallCaption2");
  v1[257] = &unk_1E16155F8;
  v2[257] = CFSTR("UICTFontTextStyleTallItalicCaption2");
  v1[258] = &unk_1E1615610;
  v2[258] = CFSTR("UICTFontTextStyleTallEmphasizedCaption2");
  v1[259] = &unk_1E1615628;
  v2[259] = CFSTR("UICTFontTextStyleTallEmphasizedItalicCaption2");
  v1[260] = &unk_1E16156D0;
  v2[260] = CFSTR("UICTFontTextStyleCondensedHeadline");
  v1[261] = &unk_1E16156E8;
  v2[261] = CFSTR("UICTFontTextStyleCondensedTitle1");
  v1[262] = &unk_1E1615700;
  v2[262] = CFSTR("UICTFontTextStyleCondensedTitle2");
  v1[263] = &unk_1E1615718;
  v2[263] = CFSTR("UICTFontTextStyleCondensedTitle3");
  v1[264] = &unk_1E1615730;
  v2[264] = CFSTR("UICTFontTextStyleCondensedBody");
  v1[265] = &unk_1E16156A0;
  v2[265] = CFSTR("UICTFontTextStylePreferredSizeRegular");
  v1[266] = &unk_1E16156B8;
  v2[266] = CFSTR("UICTFontTextStylePreferredSizeBold");
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 267);
  qword_1EDD16F38 = (uint64_t)result;
  return result;
}

id ___Z25VariableSizeTextStylesSetv_block_invoke()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("UICTFontTextStylePreferredSizeRegular"), CFSTR("UICTFontTextStylePreferredSizeBold"), 0);
  qword_1EDD16F48 = (uint64_t)result;
  return result;
}

void *LanguageAwareLineSpacingOverrideRatio(`anonymous namespace'::THIUsageSpec const*,__CFString const*)::$_0::__invoke()
{
  void *result;

  result = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("NSLanguageAwareLineSpacingAdjustmentsON"));
  if (result)
  {
    result = (void *)objc_msgSend(result, "integerValue");
    dword_1EDD16EBC = result == 0;
  }
  return result;
}

uint64_t FindIndexWithTraits(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t result;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *i;

  result = 0;
  v6 = (int *)(a1 + 16 * a2);
  v7 = *v6;
  if ((a4 & 1) != 0)
    v8 = a3 & 1;
  else
    v8 = v6[1];
  if (v7 >= 4)
    v9 = 4;
  else
    v9 = v7;
  if (v7 <= 6)
    v10 = 6;
  else
    v10 = v7;
  if ((a3 & 2) != 0)
    v9 = v10;
  if ((a4 & 2) == 0)
    v9 = v7;
  for (i = (_DWORD *)(a1 + 4); *(i - 1) != v9 || *i != v8; i += 4)
  {
    if (++result == 12)
      return -1;
  }
  return result;
}

void ___ZL21RegisterAltUrduUIFontv_block_invoke()
{
  const __CFAllocator *v0;
  __CFString *v1;
  CFURLRef v2;
  CFURLRef v3;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (GetAppleInternalFontsPath(void)::once != -1)
    dispatch_once_f(&GetAppleInternalFontsPath(void)::once, 0, (dispatch_function_t)GetAppleInternalFontsPath(void)::$_0::__invoke);
  v1 = (__CFString *)CFStringCreateWithFormat(v0, 0, CFSTR("%@DecoTypeNastaleeqUrdu.ttc"), GetAppleInternalFontsPath(void)::_aiSysFontsPath);
  v2 = CFURLCreateWithFileSystemPath(v0, v1, kCFURLPOSIXPathStyle, 0);
  v3 = v2;
  if (v2)
    _CTFontManagerRegisterActionFontsForURL(v2, 1, 1, 0);

}

uint64_t ___ZL20FontInfoForChineseUIv_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if (!(_DWORD)result
    || (result = dyld_program_sdk_at_least(), (result & 1) == 0)
    && ((result = _CFAppVersionCheckLessThan(), (_DWORD)result)
     || (result = _CFAppVersionCheckLessThan(), (_DWORD)result)))
  {
    qword_1ECDE6FA0 = (uint64_t)&kFontChineseUIOld;
  }
  return result;
}

void CreateSyntheticPingFangOpticalSplicedFont(unint64_t *a1, uint64_t a2)
{
  const __CFAllocator *v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  CFIndex Length;
  CFIndex location;
  const __CFString *v8;
  __CFString *v9;
  const __CFString *v10;
  __CFString *v11;
  __CFArray *v12;
  unint64_t v13;
  unint64_t v14;
  __CFString *v15;
  unint64_t v16;
  __CFString *v17;
  const void *v18;
  __CFDictionary *v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  __CFString *v22;
  __CFDictionary *v23;
  const __CFString *v24;
  __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  __CFString *v28;
  void *v29;
  const void *v30;
  const __CFArray *v31;
  __CFDictionary *ValueAtIndex;
  const void *v33;
  const __CFString *v34;
  __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  __CFString *v38;
  void *v39;
  const void *v40;
  const __CFArray *v41;
  __CFDictionary *v42;
  const void *v43;
  __CFDictionary *v44;
  const void *v45;
  __CFDictionary *v46;
  unint64_t v47;
  id v49;
  id v50;
  id v51;
  id v52;
  id Mutable;
  id v54;
  const __CFString *v55;
  id v56;
  const __CFString *v57;
  uint64_t v58;
  CFRange v59;
  CFRange v60;
  CFRange v61;
  CFRange v62;
  CFRange v63;
  CFRange v64;
  CFRange v65;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v4, CFSTR("name"), *(const void **)a2);
  v5 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v5, CFSTR("version"), CFSTR("1.0"));
  Length = CFStringGetLength(*(CFStringRef *)a2);
  location = CFStringFind((CFStringRef)*(_QWORD *)a2, CFSTR("-"), 0).location;
  v52 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableString::TCFMutableString((TCFMutableString *)&v52, *(CFStringRef *)a2);
  v8 = (const __CFString *)atomic_load((unint64_t *)&v52);
  v59.length = CFStringGetLength(v8) - location;
  v9 = (__CFString *)atomic_load((unint64_t *)&v52);
  v59.location = location;
  CFStringReplace(v9, v59, &stru_1E15EDAC0);
  v10 = (const __CFString *)atomic_load((unint64_t *)&v52);
  v61.length = CFStringGetLength(v10);
  v11 = (__CFString *)atomic_load((unint64_t *)&v52);
  v61.location = 0;
  CFStringFindAndReplace(v11, CFSTR("UIOptical"), CFSTR(" UI Optical "), v61, 0);
  v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  v13 = atomic_load((unint64_t *)&v52);
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("1");
  v57 = (const __CFString *)v13;
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v14 = atomic_load((unint64_t *)&v52);
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("16");
  v57 = (const __CFString *)v14;
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v60.location = location + 1;
  v60.length = Length - (location + 1);
  v15 = (__CFString *)CFStringCreateWithSubstring(v3, *(CFStringRef *)a2, v60);
  v16 = atomic_load((unint64_t *)&v52);
  v17 = (__CFString *)CFStringCreateWithFormat(v3, 0, CFSTR("%@ %@"), v16, v15);
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("4");
  v57 = v17;
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("18");
  v57 = v17;
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("2");
  v57 = v15;
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v54 = CFSTR("type");
  v55 = CFSTR("string");
  v56 = CFSTR("7");
  v57 = CFSTR("Apple Inc.");
  CFArrayAppendValue(v12, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v54, 2));
  v18 = (const void *)atomic_load((unint64_t *)&v52);
  v19 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v19, CFSTR("familyName"), v18);
  v20 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v20, CFSTR("FontNames"), v12);

  v21 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = (__CFString *)CFStringCreateWithFormat(v3, 0, CFSTR("W%d"), *(unsigned int *)(a2 + 16));
  CFDictionaryAddValue(v21, CFSTR("weightClass"), v22);
  v23 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v23, CFSTR("FontMetrics"), v21);

  v56 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  v54 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableString::TCFMutableString((TCFMutableString *)&v54, *(CFStringRef *)a2);
  v24 = (const __CFString *)atomic_load((unint64_t *)&v54);
  v62.length = CFStringGetLength(v24);
  v25 = (__CFString *)atomic_load((unint64_t *)&v54);
  v62.location = 0;
  CFStringFindAndReplace(v25, CFSTR("Optical"), CFSTR("Text"), v62, 0);
  v51 = (id)0xAAAAAAAAAAAAAAAALL;
  v26 = (const __CFString *)atomic_load((unint64_t *)&v52);
  TCFMutableString::TCFMutableString((TCFMutableString *)&v51, v26);
  v27 = (const __CFString *)atomic_load((unint64_t *)&v51);
  v63.length = CFStringGetLength(v27);
  v28 = (__CFString *)atomic_load((unint64_t *)&v51);
  v63.location = 0;
  CFStringFindAndReplace(v28, CFSTR("Optical"), CFSTR("Text"), v63, 0);
  v29 = (void *)atomic_load((unint64_t *)&v54);
  v30 = (const void *)atomic_load((unint64_t *)&v51);
  insertOpticalSizeComponent((void **)a2, v29, 0xFFFFFFFFLL, 0, 0, (unint64_t *)&v56, CFSTR("zh"), v30, 0.0);
  v31 = (const __CFArray *)atomic_load((unint64_t *)&v56);
  ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v31, 0);
  v33 = (const void *)atomic_load((unint64_t *)&v52);
  CFDictionaryAddValue(ValueAtIndex, CFSTR("languagePropertiesCacheKey"), v33);
  v50 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableString::TCFMutableString((TCFMutableString *)&v50, *(CFStringRef *)a2);
  v34 = (const __CFString *)atomic_load((unint64_t *)&v50);
  v64.length = CFStringGetLength(v34);
  v35 = (__CFString *)atomic_load((unint64_t *)&v50);
  v64.location = 0;
  CFStringFindAndReplace(v35, CFSTR("Optical"), CFSTR("Display"), v64, 0);
  v49 = (id)0xAAAAAAAAAAAAAAAALL;
  v36 = (const __CFString *)atomic_load((unint64_t *)&v52);
  TCFMutableString::TCFMutableString((TCFMutableString *)&v49, v36);
  v37 = (const __CFString *)atomic_load((unint64_t *)&v49);
  v65.length = CFStringGetLength(v37);
  v38 = (__CFString *)atomic_load((unint64_t *)&v49);
  v65.location = 0;
  CFStringFindAndReplace(v38, CFSTR("Optical"), CFSTR("Display"), v65, 0);
  v39 = (void *)atomic_load((unint64_t *)&v50);
  v40 = (const void *)atomic_load((unint64_t *)&v49);
  insertOpticalSizeComponent((void **)a2, v39, 0xFFFFFFFFLL, 0, 0, (unint64_t *)&v56, CFSTR("zh"), v40, 20.0);
  v41 = (const __CFArray *)atomic_load((unint64_t *)&v56);
  v42 = (__CFDictionary *)CFArrayGetValueAtIndex(v41, 0);
  v43 = (const void *)atomic_load((unint64_t *)&v52);
  CFDictionaryAddValue(v42, CFSTR("languagePropertiesCacheKey"), v43);
  v44 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v45 = (const void *)atomic_load((unint64_t *)&v56);
  CFDictionaryAddValue(v44, CFSTR("Components"), v45);

  v46 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v46, CFSTR("hasVariations"), (const void *)*MEMORY[0x1E0C9AE50]);
  do
    v47 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a1 = v47;

}

void TCFMutableString::TCFMutableString(TCFMutableString *this, CFStringRef theString)
{
  const __CFAllocator *v3;
  CFMutableStringRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theString)
    MutableCopy = CFStringCreateMutableCopy(v3, 0, theString);
  else
    MutableCopy = CFStringCreateMutable(v3, 0);
  *(_QWORD *)this = MutableCopy;
}

unint64_t CreateSFTrimCharacterSetForChineseOrJapanese(const __CFString *a1, int a2)
{
  uint64_t v4;
  int *v5;
  CFRange v6;
  __CFCharacterSet *v7;
  CFCharacterSetRef CharacterSetForFont;
  const __CFCharacterSet *v9;
  __CFCharacterSet *v10;
  unint64_t v11;
  id Mutable;

  v4 = 0;
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v5 = &dword_18493B4FC;
  do
  {
    if ((*(v5 - 1) & a2) != 0)
    {
      if (((0x4FuLL >> v4) & 1) != 0)
      {
        v6.location = *v5;
        v7 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
        v6.length = 1;
      }
      else
      {
        v6.location = *v5;
        v6.length = v5[1] - v6.location + 1;
        v7 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
      }
      CFCharacterSetAddCharactersInRange(v7, v6);
    }
    ++v4;
    v5 += 3;
  }
  while (v4 != 9);
  CharacterSetForFont = CreateCharacterSetForFont(a1);
  if (CharacterSetForFont)
  {
    v9 = CharacterSetForFont;
    v10 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
    CFCharacterSetIntersect(v10, v9);
    CFRelease(v9);
  }
  do
    v11 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  _CFCharacterSetCompact();

  return v11;
}

uint64_t TJustEngine::ApplyTrackingToRun(TJustEngine *this, TLine *a2, const TCharStream *a3, uint64_t a4, double a5)
{
  const TCharStream *v6;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  CFIndex v23;
  int64_t v24;
  int v25;
  double Width;
  uint64_t v27;
  CFIndex v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  __int128 v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  size_t v41;
  char *v42;
  char *v43;
  char *v44;
  const TCharStream *v45;
  __int128 v46;
  int64x2_t v47;
  size_t v48;
  char *v49;
  double v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  int v54;
  CFIndex v55;
  void *v57;
  uint64_t v59;
  TLine *v60;
  const TCharStream *v61;
  TStorageRange *v62;
  char v63;
  TLine *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  double v71[2];
  void **v72;
  id v73;
  id v74;
  uint64_t v75;
  _OWORD v76[30];
  _OWORD *v77;
  id v78;
  int64x2_t v79;
  _QWORD v80[91];
  uint64_t v81[3];
  _OWORD v82[15];
  _OWORD *v83;
  id v84[2];
  char *v85;
  _BYTE v86[720];
  _BYTE *v87;
  int64x2_t v88;
  __int128 v89;
  _BYTE v90[32];
  _BYTE *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE v97[20];
  int v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  CFRange v105;

  v6 = a3;
  v104 = *MEMORY[0x1E0C80C00];
  v98 = unk_18494820C;
  v100 = unk_184948220;
  memset(&v90[8], 170, 24);
  *(_QWORD *)v90 = 0;
  v89 = 0u;
  v88 = 0u;
  v91 = &v90[8];
  BYTE8(v100) = 0;
  v95 = 0;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  memset(v97, 0, sizeof(v97));
  LOBYTE(v100) = 0;
  v103 = 0;
  v101 = 0;
  v102 = 0;
  v99 = 0uLL;
  v96 = 0xFFEFFFFFFFFFFFFFLL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * (_QWORD)a3) + 56))(&v78);
  do
    v10 = (void *)__ldaxr((unint64_t *)&v78);
  while (__stlxr(0, (unint64_t *)&v78));
  v84[0] = v10;
  TLine::AppendRun(&v88, (unint64_t *)v84);

  v92 = *(_OWORD *)((char *)this + 72);
  if (*((_QWORD *)&v89 + 1) - (_QWORD)v89 == 8 && (v11 = *(_QWORD *)&v97[8], *(uint64_t *)&v97[8] >= 1))
  {
    memset(v86, 170, sizeof(v86));
    v84[0] = 0;
    v84[1] = 0;
    v85 = 0;
    v87 = v86;
    if (*(_QWORD *)&v97[8] > 0xAAAAAAAAAAAAAAAuLL)
LABEL_58:
      abort();
    v80[1] = v86;
    v12 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v86, *(unint64_t *)&v97[8]);
    v13 = (char *)v84[1];
    v14 = (char *)v84[0];
    v59 = a4;
    v60 = this;
    if (v84[1] == v84[0])
    {
      v17 = vdupq_n_s64((unint64_t)v84[1]);
      v15 = v12;
    }
    else
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)(v13 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v13 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v13 -= 24;
      }
      while (v13 != v14);
      v17 = *(int64x2_t *)v84;
    }
    v84[0] = v15;
    v84[1] = v12;
    v79 = v17;
    v19 = v85;
    v85 = &v12[24 * v11];
    v80[0] = v19;
    v78 = (id)v17.i64[0];
    std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v78);
    v61 = v6;
    v64 = a2;
    while (1)
    {
      v20 = *(_QWORD *)(*(_QWORD *)v89 + 48);
      v21 = objc_msgSend(*(id *)(v20 + 216), "copyWithRange:", *(_QWORD *)(v20 + 200), *(_QWORD *)(v20 + 208));

      *(_QWORD *)(v20 + 216) = v21;
      *(_QWORD *)(v20 + 200) = 0;
      v22 = *(_QWORD *)(v20 + 208);
      if (v22 < 0)
        break;
      v63 = 0;
      v23 = 0;
      v65 = v20;
      v66 = 0;
      v24 = 0;
      v62 = (TStorageRange *)(v20 + 192);
      v25 = **(_BYTE **)(v21 + 40) & 1;
      do
      {
        if (v24 >= v22
          || (v25 & 1) != (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 216) + 40)
                                     + 4 * *(_QWORD *)(v20 + 200)
                                     + 4 * v24) & 1))
        {
          v68 = v25;
          v105.length = v24 - v23;
          v105.location = v23;
          Width = TStorageRange::GetWidth(v62, v105);
          v67 = v24 - v23;
          v27 = 0;
          if (v24 <= v23)
          {
            v29 = v23;
          }
          else
          {
            v69 = v66 - v59;
            v28 = v23;
            v29 = v23;
            do
            {
              v79.i64[0] = 0xAAAAAAAAAAAAAAAALL;
              v78 = (id)0xAAAAAAAAAAAAAAAALL;
              TLine::GetClusterRange(v60, v64, (uint64_t)v6, v59, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 216) + 48) + 8 * *(_QWORD *)(v65 + 200) + 8 * v28), 2, &v78, 0, 0);
              v30 = (char *)v78 + v69 + v79.i64[0];
              v27 += (v23 < (uint64_t)v30) & (v24 >= (uint64_t)v30);
              if ((uint64_t)v30 <= v28 + 1)
                ++v28;
              else
                v28 = (CFIndex)v78 + v69 + v79.i64[0];
            }
            while (v28 < v24);
          }
          *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v82[13] = v31;
          v82[14] = v31;
          v82[11] = v31;
          v82[12] = v31;
          v82[9] = v31;
          v82[10] = v31;
          v82[7] = v31;
          v82[8] = v31;
          v82[5] = v31;
          v82[6] = v31;
          v82[3] = v31;
          v82[4] = v31;
          v82[1] = v31;
          v82[2] = v31;
          v82[0] = v31;
          memset(v81, 0, sizeof(v81));
          v83 = v82;
          v71[0] = 0.0;
          v71[1] = 0.0;
          v32 = (char *)v84[1];
          v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84[1] - (char *)v84[0]) >> 3);
          v34 = v89;
          v35 = v24 >= v33;
          v36 = v24 - v33;
          if (v24 <= v33)
          {
            v6 = v61;
            a2 = v64;
            if (!v35)
              v84[1] = (char *)v84[0] + 24 * v24;
          }
          else if (0xAAAAAAAAAAAAAAABLL * ((v85 - (char *)v84[1]) >> 3) >= v36)
          {
            v48 = 24 * ((24 * v36 - 24) / 0x18) + 24;
            bzero(v84[1], v48);
            v84[1] = &v32[v48];
            v6 = v61;
            a2 = v64;
          }
          else
          {
            if ((unint64_t)v24 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_58;
            v37 = 0x5555555555555556 * ((v85 - (char *)v84[0]) >> 3);
            if (v37 <= v24)
              v37 = v24;
            if (0xAAAAAAAAAAAAAAABLL * ((v85 - (char *)v84[0]) >> 3) >= 0x555555555555555)
              v38 = 0xAAAAAAAAAAAAAAALL;
            else
              v38 = v37;
            v80[1] = v86;
            v39 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v86, v38);
            v40 = &v39[24 * v33];
            v41 = 24 * ((24 * v36 - 24) / 0x18) + 24;
            bzero(v40, v41);
            v42 = (char *)v84[1];
            v43 = (char *)v84[0];
            if (v84[1] == v84[0])
            {
              v47 = vdupq_n_s64((unint64_t)v84[1]);
              v44 = &v39[24 * v33];
              v45 = v61;
              a2 = v64;
            }
            else
            {
              v44 = &v39[24 * v33];
              v45 = v61;
              a2 = v64;
              do
              {
                v46 = *(_OWORD *)(v42 - 24);
                *((_QWORD *)v44 - 1) = *((_QWORD *)v42 - 1);
                *(_OWORD *)(v44 - 24) = v46;
                v44 -= 24;
                v42 -= 24;
              }
              while (v42 != v43);
              v47 = *(int64x2_t *)v84;
            }
            v84[0] = v44;
            v84[1] = &v40[v41];
            v79 = v47;
            v49 = v85;
            v85 = &v39[24 * v38];
            v80[0] = v49;
            v78 = (id)v47.i64[0];
            std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)&v78);
            v6 = v45;
          }
          v50 = Width + a5 * (double)v27 - Width;
          memset(v80, 170, 0x2D0uLL);
          v78 = 0;
          v79 = 0uLL;
          v80[90] = v80;
          v51 = v67;
          TJustEngine::GenerateMaximaList((TLine *)&v88, a2, v29, v67, 1, 0, (uint64_t *)v84, (uint64_t *)&v78, v50);
          std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)v81, v24);
          TJustEngine::DistributeGap(v34, *((uint64_t *)&v34 + 1), v29, v67, 1, 0, (uint64_t)v84[0], v81[0], v50, v71);
          if (v78 == (id)v79.i64[0])
          {
            v20 = v65;
            v54 = v68;
          }
          else
          {
            v70 = 0xAAAAAAAAAAAAAAAALL;
            *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v76[28] = v52;
            v76[29] = v52;
            v76[26] = v52;
            v76[27] = v52;
            v76[24] = v52;
            v76[25] = v52;
            v76[22] = v52;
            v76[23] = v52;
            v76[20] = v52;
            v76[21] = v52;
            v76[18] = v52;
            v76[19] = v52;
            v76[16] = v52;
            v76[17] = v52;
            v76[14] = v52;
            v76[15] = v52;
            v76[12] = v52;
            v76[13] = v52;
            v76[10] = v52;
            v76[11] = v52;
            v76[8] = v52;
            v76[9] = v52;
            v76[6] = v52;
            v76[7] = v52;
            v76[4] = v52;
            v76[5] = v52;
            v76[2] = v52;
            v76[3] = v52;
            v76[0] = v52;
            v76[1] = v52;
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v77 = v76;
            v53 = TPostcompEngine::DoActions(v34, *((uint64_t *)&v34 + 1), v29, v67, (uint64_t)&v78, v81[0], (unint64_t *)&v70, (char **)&v73);
            v20 = v65;
            v54 = v68;
            if (v70 >= 1)
            {
              *(_QWORD *)&v97[8] += v70;
              v51 = v70 + v67;
              v66 += v70;
              v24 += v70;
            }
            if (v73 != v74)
            {
              v55 = TAATPostcompEngine::ApplyKashidas(v34, *((uint64_t *)&v34 + 1), (uint64_t **)&v73, v81[0]);
              v70 = v55;
              if (v55 >= 1)
              {
                *(_QWORD *)&v97[8] += v55;
                v51 += v55;
                v66 += v55;
                v24 += v55;
                ApplyArabicLowConnections<std::__wrap_iter<CTRun **>>(v34, *((uint64_t *)&v34 + 1));
              }
            }
            v63 |= v53;
            v72 = &v73;
            std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v72);
          }
          v73 = &v78;
          std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v73);
          v23 = v51 + v29;
          v25 = v54 ^ 1;
          v78 = v81;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v78);
          v22 = *(_QWORD *)(v20 + 208);
        }
      }
      while (v24++ < v22);
      if ((v63 & 1) == 0)
        break;
      TLine::ResetLine((TLine *)&v88, a2);
    }
    v73 = *(id *)v89;
    do
      v57 = (void *)__ldaxr((unint64_t *)&v73);
    while (__stlxr(0, (unint64_t *)&v73));
    v78 = v57;
    TLine::ReplaceRun(v60, (uint64_t)v6, (unint64_t *)&v78);

    v78 = v84;
    std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v78);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  TLine::~TLine((TLine *)&v88);
  return v18;
}

void ApplyArabicLowConnections<std::__wrap_iter<CTRun **>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const __CFData *CommonTable;
  __int128 v11;
  __int128 v12;
  _BOOL4 SingleSubstLookups;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  const __CTFont *v21;
  int v22;
  void ***v23;
  uint64_t v24;
  _OWORD v25[5];
  unint64_t v26;
  void ***v27;
  void **__dst[82];
  CGSize *v29;
  void *v30;
  uint64_t v31;
  _OWORD v32[30];
  _OWORD *v33;
  unsigned int **v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[3120];
  _BYTE *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  _OWORD v42[7];
  unint64_t v43;
  _OWORD *v44;
  uint64_t v45;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v45 = *MEMORY[0x1E0C80C00];
  if (v2 != v3)
  {
    v4 = v3;
    v5 = v2;
    v6 = (unint64_t)&v29 + 4;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v5 + 48);
      if (*(_DWORD *)(v7 + 304) != 2)
        goto LABEL_20;
      v8 = atomic_load((unint64_t *)(v7 + 56));
      v9 = *(_QWORD *)(v8 + 40);
      CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(v9 + 400), 1196643650, 0);
      if (!CommonTable)
        goto LABEL_20;
      v26 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v25[3] = v11;
      v25[4] = v11;
      v25[1] = v11;
      v25[2] = v11;
      v25[0] = v11;
      memset(&v37[8], 0, 48);
      v36 = 0;
      v34 = 0;
      v35 = 0;
      v37[0] = 0;
      OTL::GCommon::GCommon((uint64_t)v25, 0, (_BYTE *)v9, CommonTable, (uint64_t)&v34, 1634885986, 0);
      *(_QWORD *)&v25[0] = &unk_1E15DEE98;
      v43 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v42[5] = v12;
      v42[6] = v12;
      v42[3] = v12;
      v42[4] = v12;
      v42[1] = v12;
      v42[2] = v12;
      v42[0] = v12;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v44 = v42;
      LODWORD(v29) = 1280268099;
      OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)&v34, &v29, (_DWORD *)&v29 + 1);
      SingleSubstLookups = OTL::GSUB::GetSingleSubstLookups(v25, (uint64_t)&v34, (uint64_t)&v39);
      __dst[0] = (void **)&v34;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](__dst);
      if (SingleSubstLookups)
        break;
LABEL_19:
      v34 = &v39;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
LABEL_20:
      v5 += 8;
      if (v5 == v4)
        return;
    }
    v14 = *(_QWORD *)(v7 + 208);
    memset(v37, 170, sizeof(v37));
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v38 = v37;
    v15 = v39;
    v16 = v40;
    while (v15 != v16)
    {
      v17 = *v15++;
      v6 = v6 & 0xFFFFFFFF00000000 | v17;
      OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)&v34, v6, 0, v14);
    }
    v18 = *(_QWORD *)(v7 + 216);
    *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v32[28] = v19;
    v32[29] = v19;
    v32[26] = v19;
    v32[27] = v19;
    v32[24] = v19;
    v32[25] = v19;
    v32[22] = v19;
    v32[23] = v19;
    v32[20] = v19;
    v32[21] = v19;
    v32[18] = v19;
    v32[19] = v19;
    v32[16] = v19;
    v32[17] = v19;
    v32[14] = v19;
    v32[15] = v19;
    v32[12] = v19;
    v32[13] = v19;
    v32[10] = v19;
    v32[11] = v19;
    v32[8] = v19;
    v32[9] = v19;
    v32[6] = v19;
    v32[7] = v19;
    v32[4] = v19;
    v32[5] = v19;
    v32[2] = v19;
    v32[3] = v19;
    v32[0] = v19;
    v32[1] = v19;
    v30 = 0;
    v29 = 0;
    v31 = 0;
    v33 = v32;
    if (v14)
    {
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&v29, v14);
      v20 = (char *)v30;
      bzero(v30, 16 * v14);
      v30 = &v20[16 * v14];
    }
    memcpy(__dst, &unk_184948290, sizeof(__dst));
    v21 = (const __CTFont *)atomic_load((unint64_t *)(v7 + 56));
    TRunGlue::TRunGlue((TRunGlue *)__dst, v21, *(unsigned __int16 **)(v18 + 16), v29, v14, 0, 0, 0);
    LOBYTE(v27) = 0;
    if ((*(_BYTE *)(v7 + 224) & 1) != 0)
      v22 = -1;
    else
      v22 = 1;
    OTL::GSUB::ApplyLookups(v25, (TRunGlue *)__dst, v22, (unsigned __int16 **)&v34, &v27, 0, 0);
    v23 = (void ***)__dst[73];
    if ((void ***)__dst[73] == &__dst[70])
    {
      v23 = &__dst[70];
      v24 = 4;
      v6 = (unint64_t)&v29 + 4;
    }
    else
    {
      v6 = (unint64_t)&v29 + 4;
      if (!__dst[73])
      {
LABEL_18:
        v27 = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
        v27 = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
        v27 = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
        __dst[0] = (void **)&v29;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](__dst);
        __dst[0] = (void **)&v34;
        std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100](__dst);
        goto LABEL_19;
      }
      v24 = 5;
    }
    ((void (*)(void))(*v23)[v24])();
    goto LABEL_18;
  }
}

uint64_t TJustEngine::ZeroRange(uint64_t this, TLine *a2, CFRange a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v12;
  TStorageRange *v13;
  char *v14;
  CFIndex v15;
  CGSize *v16;
  uint64_t v17;
  CGSize *v18;

  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  v5 = *(_QWORD *)(this + 24);
  if (v4 == v5)
  {
    v9 = 0;
    v7 = *(_QWORD *)(this + 16);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(this + 16);
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 40) + 208) + v6;
      if (v8 > (uint64_t)a2)
        break;
      v7 += 8;
      v6 = v8;
      if (v7 == v5)
      {
        v9 = 0;
        v7 = *(_QWORD *)(this + 24);
        goto LABEL_8;
      }
    }
    v9 = (char *)a2 - v6;
  }
LABEL_8:
  v10 = (v7 - v4) >> 3;
  if (v10 < (v5 - v4) >> 3 && a3.location >= 1)
  {
    v12 = *(_QWORD **)(*(_QWORD *)(v4 + 8 * v10) + 48);
    v13 = (TStorageRange *)(v12 + 24);
    v14 = (char *)v12[26];
    v15 = a3.location + 1;
    v16 = (CGSize *)MEMORY[0x1E0C9D820];
    while (v9 != v14)
    {
      if (!v9)
        goto LABEL_17;
LABEL_19:
      this = TStorageRange::SetAdvance(v13, (uint64_t)v9++, *v16);
      if (--v15 <= 1)
        return this;
    }
    ++v10;
    v17 = *(_QWORD *)(v3 + 16);
    if (v10 >= (*(_QWORD *)(v3 + 24) - v17) >> 3)
      return this;
    v12 = *(_QWORD **)(*(_QWORD *)(v17 + 8 * v10) + 48);
    v13 = (TStorageRange *)(v12 + 24);
    v14 = (char *)v12[26];
LABEL_17:
    v18 = (CGSize *)v12[39];
    v9 = 0;
    if (v18)
      *v18 = *v16;
    goto LABEL_19;
  }
  return this;
}

uint64_t TJustEngineImplementation::HasPostcompensation(TJustEngineImplementation *this)
{
  return 0;
}

void std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = (void **)**a1;
    v6 = v1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        std::__destroy_at[abi:nn180100]<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,0>(v4);
      }
      while ((void *)v4 != v2);
      v6 = *a1;
      v5 = (void **)**a1;
    }
    v1[1] = v2;
    v7 = v6 + 93;
    if (v6 + 3 <= v5 && v7 > v5)
    {
      if (v6[2] == v6[93])
        *v7 = v5;
    }
    else
    {
      operator delete(v5);
    }
  }
}

void std::__destroy_at[abi:nn180100]<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v2 = v4;
  *v3 = 0;
  if (v4)
    std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)v3, v2);
}

void std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x186DC03ACLL);
  }
}

void std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 93;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[93])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t *std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    v5 = a2[1];
    do
    {
      v6 = *(_QWORD *)(v2 - 24);
      v2 -= 24;
      *(_QWORD *)(v5 - 24) = v6;
      v5 -= 24;
      v7 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v5 + 8) = v7;
      v8 = (unint64_t *)(v2 + 16);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(0, v8));
      *(_QWORD *)(v4 - 8) = v9;
      v4 = v5;
    }
    while (v2 != v3);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__destroy_at[abi:nn180100]<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,0>(i - 24);
  }
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 720);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

char *std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__vallocate[abi:nn180100](char **a1, unint64_t a2)
{
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * a2];
  return result;
}

void TAATJustEngine::PostcompTable(TAATJustEngine *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  const __CFData *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  id v10;

  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 4) - v3;
  v5 = (unint64_t *)((char *)this + 16);
  v6 = (const __CFData *)atomic_load((unint64_t *)this + 2);
  v7 = v3 - (_QWORD)CFDataGetBytePtr(v6);
  v8 = (void *)atomic_load(v5);
  v10 = (id)objc_msgSend(v8, "subdataWithRange:", v7, v4);
  do
    v9 = __ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));
  *a2 = v9;

}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((void **)a1, a2 - v3, a3);
  }
}

BOOL TAATJustEngine::HasPostcompensation(TAATJustEngine *this)
{
  return *((_QWORD *)this + 6) != 0;
}

void std::vector<unsigned short>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      abort();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a2);
}

void TGenericJustEngine::~TGenericJustEngine(TGenericJustEngine *this)
{
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TPostcompEngine::DoActions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, char **a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  const __CFData *v25;
  SFNTLookupTable *BytePtr;
  const UInt8 *v27;
  SFNTLookupTable *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  int64x2_t v42;
  char *v43;
  _QWORD *v45;
  uint64_t v49;
  _QWORD *v50;
  void **v51;
  int64x2_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _OWORD v58[30];
  _OWORD *v59;
  unint64_t *v60[3];
  _QWORD v61[131];

  v61[129] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)a5;
  v45 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v45)
    return 0;
  v12 = 0;
  v13 = 0;
  v14 = (uint64_t)(a8 + 3);
  while (1)
  {
    v15 = *v8 - v12;
    if (*v8 > v12)
    {
      v16 = (uint64_t *)(a1 + 8 * v12);
      do
      {
        v17 = *v16++;
        v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 208);
        a3 -= v18;
        v13 += v18;
        a6 += 8 * v18;
        --v15;
      }
      while (v15);
      v12 = *v8;
    }
    v50 = v8;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v12) + 48);
    v20 = *(_QWORD *)(v19 + 208);
    v21 = v20 >= a3 + a4 ? a3 + a4 : *(_QWORD *)(v19 + 208);
    v49 = v12;
    if (a3 > 0 || a3 + a4 < 1)
    {
      v22 = 0;
      v23 = 0;
      if ((a3 & 0x8000000000000000) == 0 && a3 < v20)
      {
        v23 = v21 - a3;
        v22 = a3;
      }
    }
    else
    {
      v22 = 0;
      v23 = v21;
    }
    memset(v61, 170, 0x3E8uLL);
    memset(v60, 0, sizeof(v60));
    v61[60] = v61;
    LOWORD(v61[61]) = -1;
    memset(&v61[62], 0, 24);
    v61[125] = &v61[65];
    v61[126] = v19;
    v61[127] = v22;
    v61[128] = v23;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v58[28] = v24;
    v58[29] = v24;
    v58[26] = v24;
    v58[27] = v24;
    v58[24] = v24;
    v58[25] = v24;
    v58[22] = v24;
    v58[23] = v24;
    v58[20] = v24;
    v58[21] = v24;
    v58[18] = v24;
    v58[19] = v24;
    v58[16] = v24;
    v58[17] = v24;
    v58[14] = v24;
    v58[15] = v24;
    v58[12] = v24;
    v58[13] = v24;
    v58[10] = v24;
    v58[11] = v24;
    v58[8] = v24;
    v58[9] = v24;
    v58[6] = v24;
    v58[7] = v24;
    v58[4] = v24;
    v58[5] = v24;
    v58[2] = v24;
    v58[3] = v24;
    v58[0] = v24;
    v58[1] = v24;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v59 = v58;
    v25 = (const __CFData *)atomic_load(v50 + 2);
    if (v25)
    {
      BytePtr = (SFNTLookupTable *)CFDataGetBytePtr(v25);
      v27 = CFDataGetBytePtr(v25);
      if (v27)
      {
        v28 = (SFNTLookupTable *)&v27[CFDataGetLength(v25)];
        goto LABEL_21;
      }
    }
    else
    {
      BytePtr = 0;
    }
    v28 = 0;
LABEL_21:
    if ((TAATPostcompEngine::DoActions(v60, (_QWORD *)v50[1], BytePtr, v28, a6, a7, (void **)&v55) & 1) != 0)
      break;
    v29 = v55;
    v30 = v56;
    if (v55 != v56)
    {
      v31 = a8[1];
      do
      {
        *v29 += v13;
        v32 = (unint64_t)a8[2];
        if ((unint64_t)v31 >= v32)
        {
          v33 = (v31 - *a8) >> 4;
          if ((unint64_t)(v33 + 1) >> 60)
            abort();
          v34 = v32 - (_QWORD)*a8;
          v35 = v34 >> 3;
          if (v34 >> 3 <= (unint64_t)(v33 + 1))
            v35 = v33 + 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
            v36 = 0xFFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          v54 = v14;
          if (v36)
            v37 = TInlineBufferAllocator<CGPoint,30ul>::allocate(v14, v36);
          else
            v37 = 0;
          v38 = &v37[16 * v33];
          *(_OWORD *)v38 = *(_OWORD *)v29;
          v39 = *a8;
          v40 = (unint64_t)a8[1];
          if ((char *)v40 == *a8)
          {
            v42 = vdupq_n_s64(v40);
            v41 = &v37[16 * v33];
          }
          else
          {
            v41 = &v37[16 * v33];
            do
            {
              *((_OWORD *)v41 - 1) = *(_OWORD *)(v40 - 16);
              v41 -= 16;
              v40 -= 16;
            }
            while ((char *)v40 != v39);
            v42 = *(int64x2_t *)a8;
          }
          v31 = v38 + 16;
          *a8 = v41;
          a8[1] = v38 + 16;
          v52 = v42;
          v43 = a8[2];
          a8[2] = &v37[16 * v36];
          v53 = v43;
          v51 = (void **)v42.i64[0];
          std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v51);
        }
        else
        {
          *(_OWORD *)v31 = *(_OWORD *)v29;
          v31 += 16;
        }
        a8[1] = v31;
        v29 += 2;
      }
      while (v29 != v30);
    }
    v51 = (void **)&v55;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v51);
    v55 = &v61[62];
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v55);
    std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v60);
    v8 = v50 + 3;
    v12 = v49;
    if (v50 + 3 == v45)
      return 0;
  }
  v51 = (void **)&v55;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v51);
  v55 = &v61[62];
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v55);
  std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v60);
  return 1;
}

uint64_t TAATPostcompEngine::DoActions(unint64_t **a1, _QWORD *a2, SFNTLookupTable *a3, SFNTLookupTable *a4, uint64_t a5, unint64_t *a6, void **a7)
{
  unint64_t **v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(TAATLookupTable *, unsigned __int16, unint64_t *);
  TAATLookupTable *v20;
  unsigned __int16 *v21;
  unsigned int v23;
  unsigned int *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int *v27;
  int v29;
  unsigned int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  TRun *v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  double v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  double *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int16 v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int64x2_t v83;
  uint64_t v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  TRun *v88;
  double v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  int64x2_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  unint64_t *v103;
  char *v104;
  char *v105;
  unint64_t *v106;
  char *v107;
  BOOL v108;
  uint64_t v109;
  char *v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  TRun *v118;
  uint64_t NextChar;
  unsigned int v120;
  unint64_t v121;
  unsigned __int16 v122;
  unsigned __int16 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t GlyphIndexForChar;
  uint64_t v130;
  char *v131;
  char *v132;
  size_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  unsigned int v145;
  char v146;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned __int16 *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char v157;
  char *v159;
  void **v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v168;
  unint64_t *v171;
  uint64_t v172;
  int64x2_t *v173;
  SFNTLookupTable *v174;
  int64_t v175;
  TStorageRange *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t **v179;
  uint64_t (*v180)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  __int16 v185;
  uint64_t v186;
  int64x2_t v187;
  char *v188;
  uint64_t v189;
  CFRange v190;

  *a6 = 0;
  if (!a3)
    return 0;
  v11 = a1;
  v12 = a1[129];
  v13 = *(_QWORD *)(v12[27] + 16);
  v14 = v12[25];
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v182 = v15;
  v183 = 0xAAAAAAAAAAAAAAAALL;
  v180 = TAATLookupTable::BadTable;
  v181 = 0;
  v184 = 0xAAAAAAAAAAAAFFFFLL;
  TAATLookupTable::SetTable((uint64_t)&v180, a3, a4);
  v16 = (uint64_t)v11[131];
  v179 = v11;
  if (v16 < 1)
  {
LABEL_125:
    v109 = 0;
    goto LABEL_126;
  }
  v176 = (TStorageRange *)(v13 + 2 * v14);
  v177 = a5;
  v17 = (unint64_t)v11[130];
  v174 = a3;
  v175 = v16 + v17;
  v172 = (uint64_t)(v11 + 68);
  v173 = (int64x2_t *)(v11 + 65);
  v168 = (unint64_t)(v11 + 3);
  v171 = (unint64_t *)(v11 + 63);
  while (1)
  {
    v18 = *((unsigned __int16 *)v176 + v17);
    *(double *)&v186 = -3.72066208e-103;
    v19 = v180;
    v20 = (TAATLookupTable *)((char *)&v180 + (v181 >> 1));
    if ((v181 & 1) != 0)
      v19 = *(uint64_t (**)(TAATLookupTable *, unsigned __int16, unint64_t *))(*(_QWORD *)v20
                                                                                              + v180);
    v21 = (unsigned __int16 *)v19(v20, v18, (unint64_t *)&v186);
    if (v21)
    {
      if (v21 < (unsigned __int16 *)v174 || v21 + 1 > (unsigned __int16 *)a4)
        goto LABEL_125;
      v23 = bswap32(*v21) >> 16;
      if ((unsigned __int16)(v23 + 1) >= 2u)
      {
        v24 = (unsigned int *)((char *)&v174->format + v23);
        v25 = (unsigned __int16 *)(v24 + 1);
        if (v24 + 1 > (unsigned int *)a4)
          goto LABEL_125;
        if (*v24)
          break;
      }
    }
LABEL_124:
    if ((uint64_t)++v17 >= v175)
      goto LABEL_125;
  }
  v26 = bswap32(*v24);
  while (2)
  {
    v27 = (unsigned int *)(v25 + 4);
    if (v25 + 2 < (unsigned __int16 *)v24 || v27 > (unsigned int *)a4)
      goto LABEL_124;
    if (v17 >= (uint64_t)(a2[1] - *a2) >> 1)
      v29 = 0;
    else
      v29 = *(unsigned __int16 *)(*a2 + 2 * v17);
    v30 = *((_DWORD *)v25 + 1);
    if (v29 != bswap32(*v25) >> 16)
      goto LABEL_123;
    v31 = *(double *)(a5 + 8 * v17);
    switch(bswap32(v25[1]) >> 16)
    {
      case 0u:
        v32 = (uint64_t)v11[129];
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 216) + 48) + 8 * *(_QWORD *)(v32 + 200) + 8 * v17);
        *(double *)&v186 = COERCE_DOUBLE(TRun::GetGlyphIndexForCharIndex<false>(v32, v33));
        v34 = (TRun *)v32;
        a5 = v177;
        v35 = TRun::GetNextChar(v34, v33, &v186) - v33;
        v11 = v179;
        if (v35 < 2)
          goto LABEL_123;
        v36 = atomic_load(v179[129] + 7);
        if (v25 + 11 > (unsigned __int16 *)a4)
          goto LABEL_123;
        v37 = *(double *)(*(_QWORD *)(v36 + 40) + 16);
        if (v37 * (float)((float)(int)bswap32(*v27) * 0.000015259) <= v31
          && v37 * (float)((float)(int)bswap32(*((_DWORD *)v25 + 3)) * 0.000015259) >= v31)
        {
          goto LABEL_123;
        }
        v38 = bswap32(v25[8]) >> 16;
        v39 = *((unsigned __int16 *)v179 + 256);
        if (v38 > v39)
          goto LABEL_123;
        if (v38 < v39)
          *((_WORD *)v179 + 256) = v38;
        v41 = v179[1];
        v40 = (unint64_t)v179[2];
        if ((unint64_t)v41 >= v40)
        {
          v96 = ((char *)v41 - (char *)*v179) >> 4;
          v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 60)
            goto LABEL_205;
          v98 = v40 - (_QWORD)*v179;
          if (v98 >> 3 > v97)
            v97 = v98 >> 3;
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
            v99 = 0xFFFFFFFFFFFFFFFLL;
          else
            v99 = v97;
          v100 = (char *)*v171;
          v101 = *v171 + 16 * v99;
          if (v101 <= (unint64_t)v171)
          {
            *v171 = v101;
          }
          else
          {
            if (v99 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v100 = (char *)operator new(16 * v99);
          }
          v103 = (unint64_t *)&v100[16 * v96];
          *v103 = v17;
          v103[1] = (unint64_t)v27;
          v11 = v179;
          v105 = (char *)*v179;
          v104 = (char *)v179[1];
          v106 = v103;
          if (v104 != (char *)*v179)
          {
            do
            {
              *((_OWORD *)v106 - 1) = *((_OWORD *)v104 - 1);
              v106 -= 2;
              v104 -= 16;
            }
            while (v104 != v105);
            v104 = (char *)*v179;
          }
          v42 = v103 + 2;
          *v179 = v106;
          v179[1] = v103 + 2;
          v107 = (char *)v179[2];
          v179[2] = (unint64_t *)&v100[16 * v99];
          if (v104)
          {
            v108 = v168 <= (unint64_t)v104 && v171 > (unint64_t *)v104;
            a5 = v177;
            if (v108)
            {
              if (v107 == (char *)*v171)
                *v171 = (unint64_t)v104;
            }
            else
            {
              operator delete(v104);
            }
          }
          else
          {
            a5 = v177;
          }
        }
        else
        {
          *v41 = v17;
          v41[1] = (unint64_t)v27;
          v42 = v41 + 2;
        }
        v11[1] = v42;
        goto LABEL_123;
      case 1u:
        if (v31 <= 0.0 || v25 + 5 > (unsigned __int16 *)a4)
          goto LABEL_123;
        v44 = bswap32(*(unsigned __int16 *)v27) >> 16;
        v45 = (unint64_t)v11[66];
        v46 = (unint64_t)v11[67];
        if (v45 < v46)
        {
          *(_QWORD *)v45 = v17;
          *(_WORD *)(v45 + 8) = v44;
          v47 = (char *)(v45 + 16);
          *(_DWORD *)(v45 + 12) = 1;
          goto LABEL_95;
        }
        v61 = (uint64_t)(v45 - v173->i64[0]) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          goto LABEL_205;
        v63 = v46 - v173->i64[0];
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        v189 = v172;
        v65 = TInlineBufferAllocator<CGPoint,30ul>::allocate(v172, v64);
        v66 = &v65[16 * v61];
        *(_QWORD *)v66 = v17;
        *((_WORD *)v66 + 4) = v44;
        *((_DWORD *)v66 + 3) = 1;
        v11 = v179;
        v67 = (unint64_t)v179[66];
        v68 = (char *)v179[65];
        if ((char *)v67 == v68)
          goto LABEL_93;
        v69 = v66;
        do
        {
          *((_OWORD *)v69 - 1) = *(_OWORD *)(v67 - 16);
          v69 -= 16;
          v67 -= 16;
        }
        while ((char *)v67 != v68);
        goto LABEL_92;
      case 2u:
        if (v31 <= 0.0 || v25 + 8 > (unsigned __int16 *)a4)
          goto LABEL_123;
        v49 = v25[6];
        v50 = v25[7];
        v51 = atomic_load(v11[129] + 7);
        v52 = *(double *)(*(_QWORD *)(v51 + 40) + 16)
            * (float)((float)(int)bswap32(*((_DWORD *)v25 + 2)) * 0.000015259);
        if (v52 > v31)
        {
          a5 = v177;
          if (v49 != 0xFFFF)
            goto LABEL_68;
LABEL_123:
          v25 = (unsigned __int16 *)((char *)v25 + bswap32(v30));
          if (!--v26)
            goto LABEL_124;
          continue;
        }
        v53 = v11[129];
        objc_msgSend((id)v53[27], "setGlyph:atIndex:", __rev16(v50), v53[25] + v17);
        if (v50 == 0xFFFF && (*((_BYTE *)v53 + 225) & 2) != 0)
          *((_BYTE *)v53 + 225) |= 8u;
        a5 = v177;
        v11 = v179;
        if (v49 == 0xFFFF)
          goto LABEL_182;
LABEL_68:
        v70 = __rev16(v49);
        v71 = (unint64_t)v11[66];
        v72 = (unint64_t)v11[67];
        if (v71 >= v72)
        {
          v74 = (uint64_t)(v71 - v173->i64[0]) >> 4;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 60)
            goto LABEL_205;
          v76 = v72 - v173->i64[0];
          if (v76 >> 3 > v75)
            v75 = v76 >> 3;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
            v77 = 0xFFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          v189 = v172;
          v78 = TInlineBufferAllocator<CGPoint,30ul>::allocate(v172, v77);
          v79 = &v78[16 * v74];
          *(_QWORD *)v79 = v17;
          *((_WORD *)v79 + 4) = v70;
          *((_DWORD *)v79 + 3) = 1;
          v11 = v179;
          v80 = (unint64_t)v179[66];
          v81 = (char *)v179[65];
          if ((char *)v80 == v81)
          {
            v83 = vdupq_n_s64(v80);
            v82 = v79;
          }
          else
          {
            v82 = v79;
            do
            {
              *((_OWORD *)v82 - 1) = *(_OWORD *)(v80 - 16);
              v82 -= 16;
              v80 -= 16;
            }
            while ((char *)v80 != v81);
            v83 = *v173;
          }
          v73 = v79 + 16;
          v179[65] = (unint64_t *)v82;
          v179[66] = (unint64_t *)(v79 + 16);
          v187 = v83;
          v102 = (char *)v179[67];
          v179[67] = (unint64_t *)&v78[16 * v77];
          v188 = v102;
          v186 = v83.i64[0];
          std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v186);
          a5 = v177;
        }
        else
        {
          *(_QWORD *)v71 = v17;
          *(_WORD *)(v71 + 8) = v70;
          v73 = (char *)(v71 + 16);
          *(_DWORD *)(v71 + 12) = 1;
        }
        v11[66] = (unint64_t *)v73;
        if (v52 > v31)
          goto LABEL_123;
LABEL_182:
        v109 = 1;
LABEL_126:
        v110 = (char *)*v11;
        v111 = v11[1];
        if (*v11 == v111)
        {
          v131 = (char *)v11[65];
          v132 = (char *)v11[66];
          if (v131 == v132)
            return v109;
          v133 = v132 - v131;
          v134 = (v132 - v131) >> 4;
          v135 = (uint64_t)a7[2];
          v136 = (char *)*a7;
          v137 = (v135 - (uint64_t)*a7) >> 4;
          if (v137 >= v134)
          {
            v160 = a7 + 1;
            v159 = (char *)a7[1];
            v161 = (v159 - v136) >> 4;
            if (v161 >= v134)
            {
              v163 = (char *)*a7;
              v164 = (char *)v11[65];
            }
            else
            {
              v162 = &v131[16 * v161];
              if (v159 != v136)
              {
                memmove(*a7, v11[65], v159 - v136);
                v136 = (char *)*v160;
              }
              v133 = v132 - v162;
              if (v132 == v162)
                goto LABEL_202;
              v163 = v136;
              v164 = v162;
            }
            memmove(v163, v164, v133);
          }
          else
          {
            if (v136)
            {
              v138 = a7;
              a7[1] = v136;
              if (a7 + 3 > (void **)v136 || (v139 = a7 + 63, a7 + 63 <= (void **)v136))
              {
                operator delete(v136);
              }
              else if (&v136[16 * v137] == *v139)
              {
                *v139 = v136;
              }
              v135 = 0;
              *a7 = 0;
              a7[1] = 0;
              a7[2] = 0;
            }
            else
            {
              v138 = a7;
            }
            if ((v133 & 0x8000000000000000) != 0)
              goto LABEL_205;
            v165 = v135 >> 3;
            if (v135 >> 3 <= v134)
              v165 = v134;
            v166 = (unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v165;
            if (v166 >> 60)
LABEL_205:
              abort();
            v136 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(v138 + 3), v166);
            *v138 = v136;
            v138[1] = v136;
            v138[2] = &v136[16 * v166];
            memmove(v136, v131, v133);
            v160 = v138 + 1;
          }
LABEL_202:
          *v160 = &v136[v133];
          return v109;
        }
        v112 = v11[129];
        v113 = ((char *)v111 - v110) >> 4;
        v178 = v112[26] % v113;
        v114 = &v110[16 * v178];
        while (1)
        {
          v115 = *(_QWORD *)v114;
          v116 = *((_QWORD *)v114 + 1);
          v117 = *(_QWORD *)(*(_QWORD *)(v112[27] + 48) + 8 * v112[25] + 8 * *(_QWORD *)v114);
          v118 = (TRun *)v179[129];
          *(double *)&v186 = COERCE_DOUBLE(TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v118, v117));
          NextChar = TRun::GetNextChar(v118, v117, &v186);
          v120 = bswap32(*(unsigned __int16 *)(v116 + 10)) >> 16;
          v121 = v116 + 12 + 2 * v120;
          if (v116 + 14 <= (unint64_t)a4)
            v122 = ((_DWORD)a4 - (v116 + 12)) >> 1;
          else
            v122 = 0;
          if (v121 <= (unint64_t)a4 && v121 >= v116 + 12)
            v124 = v120;
          else
            v124 = v122;
          if (NextChar - v117 < v124)
          {
            v178 = (v178 + 1) % (((char *)v179[1] - (char *)*v179) >> 4);
            v114 = (char *)&(*v179)[2 * v178];
            goto LABEL_143;
          }
          v125 = NextChar;
          v126 = v124;
          v127 = objc_msgSend((id)v112[27], "attachmentCountAtIndex:", v112[25] + v115);
          v128 = (uint64_t)v179[129];
          if (v127 >= 1)
          {
            v140 = *(_BYTE *)(v128 + 224);
            v113 = v126 - 1;
            if (v126 >= 2)
            {
              v141 = 2 - v126;
              if ((*(_BYTE *)(v128 + 224) & 1) == 0)
                v141 = 1;
              v190.location = *(_QWORD *)v114 + v141;
              v190.length = v126 - 1;
              TStorageRange::InsertGlyphs((id *)v112 + 24, v190);
              v115 += v113;
            }
            objc_msgSend((id)v112[27], "setAttachmentCount:atIndex:", v127 - v113, v112[25] + v115);
            if ((_DWORD)v126)
            {
              v142 = *(_QWORD *)(*(_QWORD *)(v112[27] + 48) + 8 * v112[25] + 8 * v115);
              if ((v140 & 1) != 0)
                v143 = -1;
              else
                v143 = 1;
              v144 = (unsigned __int16 *)(v116 + 12);
              do
              {
                v145 = *v144++;
                objc_msgSend((id)v112[27], "setGlyph:atIndex:", __rev16(v145), v115 + v112[25]);
                v146 = *((_BYTE *)v112 + 225);
                if (v145 == 0xFFFF && (v146 & 2) != 0)
                  *((_BYTE *)v112 + 225) = v146 | 8;
                objc_msgSend((id)v112[27], "setStringIndex:atIndex:", v142, v115 + v112[25]);
                v115 += v143;
                ++v142;
                --v126;
              }
              while (v126);
            }
            goto LABEL_180;
          }
          GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v128, v125);
          v130 = GlyphIndexForChar - v115;
          if (GlyphIndexForChar - v115 < 0)
            v130 = v115 - GlyphIndexForChar;
          if (v130 == v126)
            break;
LABEL_143:
          if (!--v113)
          {
            v109 = 0;
            goto LABEL_181;
          }
        }
        v109 = 1;
        if ((v179[129][28] & 1) != 0)
          v148 = -1;
        else
          v148 = 1;
        if ((_DWORD)v126)
        {
          v149 = 0;
          v150 = v112[27];
          v151 = v112[25];
          v152 = *(_QWORD *)(*(_QWORD *)(v150 + 48) + 8 * v151 + 8 * v115);
          v153 = (unsigned __int16 *)(v116 + 12);
          v154 = *(_QWORD *)(v150 + 40) + 4 * v151 + 4 * v115;
          do
          {
            v155 = *v153++;
            v156 = v115 + v149;
            objc_msgSend((id)v112[27], "setGlyph:atIndex:", __rev16(v155), v115 + v149 + v112[25]);
            v157 = *((_BYTE *)v112 + 225);
            if (v155 == 0xFFFF && (v157 & 2) != 0)
              *((_BYTE *)v112 + 225) = v157 | 8;
            objc_msgSend((id)v112[27], "setProps:atIndex:", *(_DWORD *)(v154 + 4 * v149) & 0xFFFFFFDF, v156 + v112[25]);
            objc_msgSend((id)v112[27], "setStringIndex:atIndex:", v152 + v149, v156 + v112[25]);
            v149 += v148;
            --v126;
          }
          while (v126);
          v113 = 0;
LABEL_180:
          v109 = 1;
          goto LABEL_181;
        }
        v113 = 0;
LABEL_181:
        *a6 = v113;
        return v109;
      case 3u:
        if (v31 > 0.0)
        {
          v54 = v11[129];
          v55 = v54[27];
          v56 = *(_QWORD *)(v55 + 32);
          if (v56 || (v84 = *(_QWORD *)(v55 + 24)) == 0)
            v57 = (double *)(v56 + 16 * v54[25] + 16 * v17);
          else
            v57 = (double *)(v84 + 8 * v54[25] + 8 * v17);
          v85 = *v57;
          v86 = atomic_load(v54 + 7);
          v87 = *(_QWORD *)(v86 + 40);
          v185 = *(_WORD *)(*(_QWORD *)(v54[27] + 16) + 2 * v54[25] + 2 * v17);
          *(double *)&v186 = NAN;
          TFont::GetUnsummedAdvancesForGlyphs(v87, (uint64_t)&v185, (double *)&v186, 1, 1, 0, 0);
          v88 = (TRun *)v11[129];
          v89 = v85 / *(double *)&v186;
          TRun::InitStretchFactors(v88);
          *(double *)(*(_QWORD *)(*((_QWORD *)v88 + 39) + 56) + 16 * v17) = v89;
          a5 = v177;
        }
        goto LABEL_123;
      case 5u:
        if (v31 <= 0.0 || *((_BYTE *)v11[129] + 90) || v25 + 6 > (unsigned __int16 *)a4)
          goto LABEL_123;
        v58 = bswap32(v25[5]) >> 16;
        v59 = (unint64_t)v11[66];
        v60 = (unint64_t)v11[67];
        if (v59 >= v60)
        {
          v90 = (uint64_t)(v59 - v173->i64[0]) >> 4;
          v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 60)
            goto LABEL_205;
          v92 = v60 - v173->i64[0];
          if (v92 >> 3 > v91)
            v91 = v92 >> 3;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0)
            v64 = 0xFFFFFFFFFFFFFFFLL;
          else
            v64 = v91;
          v189 = v172;
          v65 = TInlineBufferAllocator<CGPoint,30ul>::allocate(v172, v64);
          v66 = &v65[16 * v90];
          *(_QWORD *)v66 = v17;
          *((_WORD *)v66 + 4) = v58;
          *((_DWORD *)v66 + 3) = 0;
          v11 = v179;
          v67 = (unint64_t)v179[66];
          v93 = (char *)v179[65];
          if ((char *)v67 == v93)
          {
LABEL_93:
            v94 = vdupq_n_s64(v67);
            v69 = v66;
          }
          else
          {
            v69 = v66;
            do
            {
              *((_OWORD *)v69 - 1) = *(_OWORD *)(v67 - 16);
              v69 -= 16;
              v67 -= 16;
            }
            while ((char *)v67 != v93);
LABEL_92:
            v94 = *v173;
          }
          v47 = v66 + 16;
          v11[65] = (unint64_t *)v69;
          v11[66] = (unint64_t *)(v66 + 16);
          v187 = v94;
          v95 = (char *)v11[67];
          v11[67] = (unint64_t *)&v65[16 * v64];
          v188 = v95;
          v186 = v94.i64[0];
          std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v186);
          a5 = v177;
        }
        else
        {
          *(_QWORD *)v59 = v17;
          *(_WORD *)(v59 + 8) = v58;
          v47 = (char *)(v59 + 16);
          *(_DWORD *)(v59 + 12) = 0;
        }
LABEL_95:
        v11[66] = (unint64_t *)v47;
        goto LABEL_123;
      default:
        goto LABEL_123;
    }
  }
}

CFIndex TAATPostcompEngine::ApplyKashidas(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  CFIndex v31;
  double *v32;
  double v33;
  double v34;
  _DWORD *v35;
  double v36;
  double v37;
  uint64_t v38;
  CFIndex v39;
  CFIndex v40;
  uint64_t v41;
  CFIndex v42;
  uint64_t v43;
  double v44;
  CFIndex v45;
  double v46;
  double *v47;
  double v48;
  double v49;
  uint64_t v52;
  uint64_t v53;
  CFIndex v54;
  CFIndex v55;
  uint64_t *v56;
  CFIndex v57;
  uint64_t v58;
  TStorageRange *v59;
  double v60;
  __int16 v61;
  CFRange v62;
  CFRange v63;
  CGSize v64;
  CGSize v65;
  CGSize v66;
  CGSize v67;

  v5 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v6 = a4;
    v8 = a1;
    v9 = 0;
    v56 = a3[1];
    v52 = a1;
    v53 = a4;
    while (1)
    {
      if (v8 == a2)
        goto LABEL_50;
      v10 = 0;
      v11 = *v5;
      v12 = *((unsigned __int16 *)v5 + 4);
      v13 = *v5 + v9;
      v14 = v8;
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 40) + 208) + v10;
        if (v15 > v13)
          break;
        v14 += 8;
        v10 = v15;
        if (v14 == a2)
          goto LABEL_50;
      }
      if (v14 == a2)
        goto LABEL_50;
      v16 = v13 - v10;
      v17 = *(_QWORD *)(*(_QWORD *)v14 + 48);
      v18 = *(_QWORD **)(v17 + 216);
      v19 = *(_QWORD *)(v17 + 200);
      v20 = v18[4];
      if (v20 || (v23 = v18[3]) == 0)
      {
        v21 = (double *)(v20 + 16 * v19 + 16 * v16);
        v22 = v21[1];
      }
      else
      {
        v21 = (double *)(v23 + 8 * v19 + 8 * v16);
        v22 = 0.0;
      }
      v24 = v18[5] + 4 * v19;
      v58 = *(_QWORD *)(v18[6] + 8 * v19 + 8 * v16);
      v59 = (TStorageRange *)(v17 + 192);
      v25 = *v21;
      v26 = atomic_load((unint64_t *)(v17 + 56));
      v27 = *(_QWORD *)(v26 + 40);
      v28 = *(double *)(v6 + 8 * v11);
      if (*((_DWORD *)v5 + 3))
      {
        v61 = *((_WORD *)v5 + 4);
        v60 = NAN;
        TFont::GetUnsummedAdvancesForGlyphs(v27, (uint64_t)&v61, &v60, 1, 1, 0, 0);
        if (v28 <= 0.0)
          goto LABEL_49;
        v29 = v60;
        if (v60 <= 0.0)
          goto LABEL_49;
        v64.width = v25 - *(double *)(v6 + 8 * v11);
        v30 = v28 / v60;
        v64.height = 0.0;
        TStorageRange::SetAdvance(v59, v16, v64);
        objc_msgSend(*(id *)(v17 + 216), "setProps:atIndex:", *(_DWORD *)(v24 + 4 * v16) | 0x80u, *(_QWORD *)(v17 + 200) + v16);
        v31 = v16 + 1;
        v62.location = v31;
        v62.length = 1;
        TStorageRange::InsertGlyphs((id *)v59, v62);
        TRun::InitStretchFactors((TRun *)v17);
        *(double *)(*(_QWORD *)(*(_QWORD *)(v17 + 312) + 56) + 16 * v31) = v30;
        objc_msgSend(*(id *)(v17 + 216), "setGlyph:atIndex:", v12, *(_QWORD *)(v17 + 200) + v31);
        if ((_DWORD)v12 == 0xFFFF && (*(_BYTE *)(v17 + 225) & 2) != 0)
          *(_BYTE *)(v17 + 225) |= 8u;
        v65.width = v29 * v30;
        v65.height = v22;
        TStorageRange::SetAdvance(v59, v31, v65);
        objc_msgSend(*(id *)(v17 + 216), "setStringIndex:atIndex:", v58, *(_QWORD *)(v17 + 200) + v31);
        objc_msgSend(*(id *)(v17 + 216), "setProps:atIndex:", 256, *(_QWORD *)(v17 + 200) + v31);
        objc_msgSend(*(id *)(v17 + 216), "setAttachmentCount:atIndex:", 0, *(_QWORD *)(v17 + 200) + v31);
        v32 = (double *)MEMORY[0x1E0C9D538];
        v34 = *MEMORY[0x1E0C9D538];
        v33 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        objc_msgSend(*(id *)(v17 + 216), "setOrigin:atIndex:", *(_QWORD *)(v17 + 200) + v31, *MEMORY[0x1E0C9D538], v33);
        if (v34 != *v32 || v33 != *(double *)(MEMORY[0x1E0C9D538] + 8))
          *(_BYTE *)(v17 + 225) |= 0x10u;
        ++v9;
        v4 = v56;
        if (*(int *)(v17 + 256) > 1)
          goto LABEL_50;
        v35 = (_DWORD *)(v17 + 256);
      }
      else
      {
        v61 = *((_WORD *)v5 + 4);
        v60 = NAN;
        TFont::GetUnsummedAdvancesForGlyphs(v27, (uint64_t)&v61, &v60, 1, 1, 0, 0);
        if (v28 < 0.0 || v60 <= 0.0)
          goto LABEL_49;
        v36 = v28 / v60;
        if (v28 / v60 <= 1.0)
        {
          v54 = v9;
          if (v60 < v28)
            v28 = v60;
          v39 = 1;
        }
        else
        {
          v37 = ceil(v36);
          v38 = llround(v37);
          if (v38 > 32766)
            goto LABEL_49;
          v54 = v9;
          v28 = v28 / v37;
          v36 = v28 / v60;
          v39 = v38;
        }
        v66.width = v25 - *(double *)(v6 + 8 * v11);
        v66.height = 0.0;
        TStorageRange::SetAdvance(v59, v16, v66);
        objc_msgSend(*(id *)(v17 + 216), "setProps:atIndex:", *(_DWORD *)(v24 + 4 * v16) | 0x80u, *(_QWORD *)(v17 + 200) + v16);
        v40 = v16 + 1;
        v63.location = v40;
        v63.length = v39;
        TStorageRange::InsertGlyphs((id *)v59, v63);
        v55 = v39;
        v57 = v39 - 1;
        if (v39 >= 1)
        {
          v41 = 0;
          v42 = v39 + v40;
          v43 = 16 * v40;
          v44 = 0.0;
          do
          {
            v45 = v40 + v41;
            v46 = -0.0;
            if (v57 == v41)
              v46 = v22;
            v44 = v44 + v46;
            TRun::InitStretchFactors((TRun *)v17);
            *(double *)(*(_QWORD *)(*(_QWORD *)(v17 + 312) + 56) + v43) = v36;
            v67.width = v28;
            v67.height = v44;
            TStorageRange::SetAdvance(v59, v40 + v41, v67);
            objc_msgSend(*(id *)(v17 + 216), "setGlyph:atIndex:", v12, v45 + *(_QWORD *)(v17 + 200));
            if ((_DWORD)v12 == 0xFFFF && (*(_BYTE *)(v17 + 225) & 2) != 0)
              *(_BYTE *)(v17 + 225) |= 8u;
            objc_msgSend(*(id *)(v17 + 216), "setStringIndex:atIndex:", v58, v45 + *(_QWORD *)(v17 + 200), v52, v53);
            objc_msgSend(*(id *)(v17 + 216), "setProps:atIndex:", 256, v45 + *(_QWORD *)(v17 + 200));
            objc_msgSend(*(id *)(v17 + 216), "setAttachmentCount:atIndex:", 0, v45 + *(_QWORD *)(v17 + 200));
            v47 = (double *)MEMORY[0x1E0C9D538];
            v48 = *MEMORY[0x1E0C9D538];
            v49 = *(double *)(MEMORY[0x1E0C9D538] + 8);
            objc_msgSend(*(id *)(v17 + 216), "setOrigin:atIndex:", v45 + *(_QWORD *)(v17 + 200), *MEMORY[0x1E0C9D538], v49);
            if (v48 != *v47 || v49 != v47[1])
              *(_BYTE *)(v17 + 225) |= 0x10u;
            ++v41;
            v43 += 16;
          }
          while (v40 + v41 < v42);
        }
        v9 = v55 + v54;
        if (*(int *)(v17 + 256) >= 2)
        {
          v8 = v52;
          v6 = v53;
LABEL_49:
          v4 = v56;
          goto LABEL_50;
        }
        v35 = (_DWORD *)(v17 + 256);
        v8 = v52;
        v6 = v53;
        v4 = v56;
      }
      *v35 = 1;
LABEL_50:
      v5 += 2;
      if (v5 == v4)
        return v9;
    }
  }
  return 0;
}

uint64_t TCombiningEngine::ResolveCombiningMarks(void ****a1, int a2, _BYTE *a3, char *a4)
{
  void ****v5;
  void ***v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t NextUncombinedCharRange;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  TLine **v17;
  void **v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void **v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  void **v56;
  unint64_t v57;
  void **v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  unint64_t v74;
  TFont *v75;
  __int128 v76;
  double MinX;
  uint64_t GlyphIndexForChar;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t FontForCharIndex;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  _BYTE *v97;
  uint64_t v98;
  double v99;
  int v100;
  BOOL v101;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  char *v112;
  unsigned int v113;
  _BOOL4 v114;
  char **v116;
  _BOOL4 v117;
  char **v118;
  int v119;
  int v120;
  char CanPositionHebrewMarks;
  char **v122;
  _QWORD *v123;
  char *v124;
  int v125;
  _BOOL4 v126;
  char **v127;
  uint64_t v128;
  _BOOL4 v129;
  _BOOL4 v130;
  uint64_t v131;
  int v132;
  char *v133;
  char *v134;
  char *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _WORD *v141;
  uint64_t v142;
  _WORD *v143;
  char *v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  __int128 v148;
  _QWORD *i;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  CFIndex v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  void **v161;
  void **v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void **v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  void **v172;
  void **v173;
  void *v174;
  unint64_t v175;
  char *v176;
  int64_t v177;
  int64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t j;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  int ShapingType;
  int v206;
  _BOOL4 v207;
  BOOL v208;
  int64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  void ****v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  TLine **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v247;
  char v248;
  CFIndex v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  CFIndex v255;
  uint64_t v256;
  int v257;
  uint64_t RenderingStyle;
  void **v259;
  void **v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  char v265;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  char v272;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  void **v281;
  UChar32 v282;
  int v283;
  BOOL v284;
  UChar32 v285;
  unint64_t v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  _BOOL8 v295;
  unsigned int v296;
  _BOOL4 v297;
  TBaseFont **v298;
  char v299;
  uint64_t v300;
  int v301;
  CFIndex v302;
  uint64_t *v303;
  int v306;
  uint64_t *v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  CFIndex v312;
  TStorageRange *v313;
  TStorageRange *v314;
  BOOL v315;
  char v316;
  int v317;
  uint64_t RunWithCharIndex;
  void **v319;
  char *v320;
  void *v321;
  uint64_t v322;
  _OWORD v323[15];
  _OWORD *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  _OWORD v328[4];
  _OWORD *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  _OWORD v333[4];
  _OWORD *v334;
  char *v335;
  char *v336;
  unint64_t v337;
  _OWORD v338[15];
  _OWORD *v339;
  _BYTE v340[24];
  _OWORD v341[4];
  _OWORD *v342;
  _BYTE v343[40];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  _OWORD v354[4];
  _BYTE *v355;
  _BYTE v356[192];
  _BYTE v357[24];
  _BYTE *v358;
  void **v359;
  void **v360;
  unint64_t v361;
  _OWORD v362[15];
  _OWORD *v363;
  _WORD *v364;
  char *v365;
  uint64_t v366;
  _OWORD v367[4];
  _OWORD *v368;
  uint64_t v369;
  CFRange v370;
  CFRange v371;
  CGRect v372;

  v5 = a1;
  v369 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = (uint64_t)(*a1)[5];
  if (v7 == -1)
  {
    TRunGlue::ComputeEndIndex(*a1);
    v7 = (uint64_t)v6[5];
  }
  v8 = (uint64_t)v6[6];
  if (v8 >= 1)
  {
    if (a2 == 1)
      v9 = -1;
    else
      v9 = 1;
    if (a2 == 1)
      v10 = 0;
    else
      v10 = a2;
    v317 = v9;
    v316 = -86;
    if (!v10)
    {
      if (a3)
        *a3 = 1;
      v11 = a4;
      if (!a4)
        v11 = &v316;
      a4 = v11;
    }
    v306 = 0;
    v12 = v8 + v7;
    v307 = (uint64_t *)v5;
    v308 = v10;
    v309 = v8 + v7;
    while (1)
    {
      v315 = -86;
      NextUncombinedCharRange = TRunGlue::GetNextUncombinedCharRange((TLine **)*v5, v7, &v315, &v317);
      if (NextUncombinedCharRange >= v12)
        goto LABEL_559;
      v15 = NextUncombinedCharRange;
      v16 = v14;
      if (v14 <= 1 && (v315 || v14 != 1))
      {
        v7 = v14 + NextUncombinedCharRange + 1;
        goto LABEL_144;
      }
      v17 = (TLine **)*v5;
      v18 = (*v5)[5];
      if (v18 == (void **)-1)
      {
        TRunGlue::ComputeEndIndex(*v5);
        v18 = (void **)v17[5];
      }
      v7 = v15 + v16;
      v19 = (char *)v18 + (_QWORD)v17[6];
      if (v15 + v16 >= (uint64_t)v19)
        v20 = (char *)v18 + (_QWORD)v17[6];
      else
        v20 = (char *)(v15 + v16);
      v21 = (char *)(v20 - (char *)v18);
      v22 = v15 <= (uint64_t)v18 && (uint64_t)v18 < v7;
      if (v22)
        v23 = (uint64_t)v18;
      else
        v23 = 0;
      if (!v22)
        v21 = 0;
      v24 = &v20[-v15];
      v25 = (uint64_t)v18 <= v15 && v15 < (uint64_t)v19;
      v26 = v25 ? v15 : v23;
      v27 = v25 ? v24 : v21;
      if (v26 != v15 || v27 != (char *)v16)
        goto LABEL_559;
      if (v10 == 2
        && v315
        && (TCharStream::GetClusterRangeForRange((uint64_t)v5[1], v15, v16, 2) != v15 || v28 != v16))
      {
        goto LABEL_144;
      }
      v310 = v15 + v16;
      *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v341[2] = v29;
      v341[3] = v29;
      v341[0] = v29;
      v341[1] = v29;
      memset(v340, 0, sizeof(v340));
      v342 = v341;
      v30 = TCharStream::LazyCopyChars(v5[1], v15, v16);
      if (!v30)
      {
        *(_QWORD *)v343 = v340;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
        goto LABEL_559;
      }
      v31 = v30;
      *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v338[13] = v32;
      v338[14] = v32;
      v338[11] = v32;
      v338[12] = v32;
      v338[9] = v32;
      v338[10] = v32;
      v338[7] = v32;
      v338[8] = v32;
      v338[5] = v32;
      v338[6] = v32;
      v338[3] = v32;
      v338[4] = v32;
      v338[1] = v32;
      v338[2] = v32;
      v338[0] = v32;
      v336 = 0;
      v337 = 0;
      v335 = 0;
      v339 = v338;
      TRunGlue::GetMappedCharsInRange((uint64_t)*v5, v15, v16, &v335);
      v33 = v335;
      v311 = v15;
      v312 = v16;
      if (v10)
        goto LABEL_103;
      v34 = 0;
      do
      {
        if (*(_WORD *)(v31 + 2 * v34) == 847)
        {
          v35 = (void *)(v34 + v15);
          v36 = v336;
          if (v33 != v336)
          {
            do
            {
              if (*(void **)v33 == v35)
                goto LABEL_57;
              v33 += 8;
            }
            while (v33 != v336);
            v33 = v336;
          }
LABEL_57:
          if (v33 == v336)
          {
            v37 = v335;
            v38 = v336 - v335;
            if (v336 == v335)
            {
              v40 = v336;
            }
            else
            {
              v39 = v38 >> 3;
              v40 = v335;
              do
              {
                v41 = v39 >> 1;
                v42 = &v40[8 * (v39 >> 1)];
                v44 = *(_QWORD *)v42;
                v43 = v42 + 8;
                v39 += ~(v39 >> 1);
                if (v44 < (uint64_t)v35)
                  v40 = v43;
                else
                  v39 = v41;
              }
              while (v39);
            }
            v45 = v40 - v335;
            v46 = &v335[(v40 - v335) & 0xFFFFFFFFFFFFFFF8];
            if ((unint64_t)v336 < v337)
            {
              v15 = v311;
              if (v46 == v336)
              {
                *(_QWORD *)v336 = v35;
                v336 = v36 + 8;
              }
              else
              {
                v47 = v336 - 8;
                v48 = v336;
                if ((unint64_t)v336 >= 8)
                {
                  do
                  {
                    v49 = *(_QWORD *)v47;
                    v47 += 8;
                    *(_QWORD *)v48 = v49;
                    v48 += 8;
                  }
                  while (v47 < v36);
                }
                v336 = v48;
                if (v36 != v46 + 8)
                  memmove(&v36[-8 * ((v36 - (v46 + 8)) >> 3)], v46, v36 - (v46 + 8));
                *(_QWORD *)v46 = v35;
              }
LABEL_96:
              v33 = v336;
              v16 = v312;
              goto LABEL_97;
            }
            v50 = (v38 >> 3) + 1;
            v361 = 0xAAAAAAAAAAAAAAAALL;
            if (v50 >> 61)
LABEL_561:
              abort();
            if ((uint64_t)(v337 - (_QWORD)v335) >> 2 > v50)
              v50 = (uint64_t)(v337 - (_QWORD)v335) >> 2;
            if (v337 - (unint64_t)v335 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            *((_QWORD *)&v362[0] + 1) = v338;
            if (v51)
              v52 = (void **)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v338, v51);
            else
              v52 = 0;
            v53 = v45 >> 3;
            v359 = v52;
            v54 = (char *)&v52[v45 >> 3];
            v360 = (void **)v54;
            *(_QWORD *)&v362[0] = &v52[v51];
            if (v45 >> 3 == v51)
            {
              if (v45 >= 1)
              {
                if (v53 >= -1)
                  v55 = v53 + 1;
                else
                  v55 = v53 + 2;
                v54 -= 8 * (v55 >> 1);
                goto LABEL_89;
              }
              if (v40 == v37)
                v63 = 1;
              else
                v63 = v45 >> 2;
              *(_QWORD *)&v343[32] = v338;
              v64 = &v52[v51];
              v359 = (void **)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v338, v63);
              v56 = &v359[v63 >> 2];
              *(_QWORD *)v343 = v52;
              v360 = v56;
              *(_QWORD *)&v343[8] = v54;
              *(_QWORD *)&v343[16] = v54;
              *(_QWORD *)&v362[0] = &v359[v63];
              *(_QWORD *)&v343[24] = v64;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v343);
              v54 = (char *)v360;
            }
            else
            {
LABEL_89:
              v56 = (void **)v54;
            }
            *v56 = v35;
            v57 = (unint64_t)(v56 + 1);
            v361 = v57;
            v58 = (void **)v335;
            v15 = v311;
            if (v335 != v46)
            {
              v59 = v46;
              do
              {
                v60 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v54 - 1) = v60;
                v54 -= 8;
              }
              while (v59 != (char *)v58);
            }
            v360 = (void **)v54;
            v61 = (char *)(v336 - v46);
            if (v336 != v46)
            {
              memmove((void *)v57, v46, v336 - v46);
              v54 = (char *)v360;
              v46 = v336;
            }
            v360 = v58;
            v335 = v54;
            v336 = &v61[v57];
            v361 = (unint64_t)v46;
            v62 = v337;
            v337 = *(_QWORD *)&v362[0];
            *(_QWORD *)&v362[0] = v62;
            v359 = v58;
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v359);
            goto LABEL_96;
          }
        }
LABEL_97:
        ++v34;
      }
      while (v34 != v16);
      v33 = v335;
      v5 = (void ****)v307;
      v10 = v308;
LABEL_103:
      v65 = v336;
      if (v33 == v336)
        goto LABEL_142;
      do
      {
        v66 = *(_QWORD *)v33;
        v67 = *(_QWORD *)v33 - v15;
        if ((*(_WORD *)(v31 + 2 * v67) & 0xFC00) == 0xD800)
        {
          v68 = v67 + 1;
          if (v68 == v16)
            break;
          if ((*(_WORD *)(v31 + 2 * v68) & 0xFC00) == 0xDC00)
          {
            v33 += 8;
            if (v33 == v65 || *(_QWORD *)v33 != v68)
            {
              *(_QWORD *)v343 = v66 + 1;
              v33 = std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)&v335, v33, v343);
              v65 = v336;
            }
          }
        }
        v33 += 8;
      }
      while (v33 != v65);
      v69 = v335;
      if (v335 == v65)
      {
LABEL_142:
        v12 = v309;
        v7 = v310;
        goto LABEL_143;
      }
      if (v10)
      {
        if (v10 == 2)
        {
          *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (!v315)
          {
            v71 = *(_QWORD *)v335;
            v72 = **v5;
            v73 = *(_QWORD *)(*((_QWORD *)v72[2] + TLine::FindRunWithCharIndex((TLine *)v72, *(_QWORD *)v335, 1)) + 48);
            v74 = atomic_load((unint64_t *)(v73 + 56));
            v75 = *(TFont **)(v74 + 40);
            LOWORD(v359) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 216) + 16)
                                    + 2 * *(_QWORD *)(v73 + 200)
                                    + 2 * TRun::GetGlyphIndexForCharIndex<false>(v73, v71));
            *(_QWORD *)&v76 = -1;
            *((_QWORD *)&v76 + 1) = -1;
            *(_OWORD *)v343 = v76;
            *(_OWORD *)&v343[16] = v76;
            v372.origin.x = TFont::GetBoundingBoxesForGlyphs(v75, (const unsigned __int16 *)&v359, (CGRect *)v343, 1, kCTFontOrientationDefault);
            MinX = CGRectGetMinX(v372);
            if (MinX < 0.0)
            {
              GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v73, v71);
              v79 = GlyphIndexForChar;
              v80 = *(_QWORD *)(v73 + 216);
              v81 = *(_QWORD *)(v80 + 32);
              if (v81 || (v98 = *(_QWORD *)(v80 + 24)) == 0)
              {
                v82 = v81 + 16 * *(_QWORD *)(v73 + 200) + 16 * GlyphIndexForChar;
                v83 = *(_QWORD *)(v82 + 8);
              }
              else
              {
                v82 = v98 + 8 * *(_QWORD *)(v73 + 200) + 8 * GlyphIndexForChar;
                v83 = 0;
              }
              v99 = *(double *)v82 - MinX;
              TStorageRange::SetAdvance((TStorageRange *)(v73 + 192), GlyphIndexForChar, *(CGSize *)(&v83 - 1));
              objc_msgSend(*(id *)(v73 + 216), "setOrigin:atIndex:", *(_QWORD *)(v73 + 200) + v79, -MinX, 0.0);
              if (*MEMORY[0x1E0C9D538] != -MinX || *(double *)(MEMORY[0x1E0C9D538] + 8) != 0.0)
                *(_BYTE *)(v73 + 225) |= 0x10u;
            }
            v306 |= MinX < 0.0;
            v69 = v335;
            v65 = v336;
            *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v16 = v312;
          }
          if ((unint64_t)(v65 - v69) >= 9)
          {
            v345 = v70;
            v346 = v70;
            *(_OWORD *)&v343[24] = v70;
            v344 = v70;
            memset(v343, 0, 24);
            *(_QWORD *)&v347 = &v343[24];
            CollectChars(v15, v16, v31, v69, v65, (char **)v343);
            v359 = (void **)0xAAAAAAAAAAAAAAAALL;
            v359 = **v5;
            v306 |= TGlyphComposer::ComposeGlyphs((TLine **)&v359, v15, (uint64_t)v343, &v335);
            v359 = (void **)v343;
            std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v359);
          }
        }
        goto LABEL_142;
      }
      if (!v315 || v16 != (v65 - v335) >> 3)
      {
        LOBYTE(v96) = 0;
        v97 = a3;
        v12 = v309;
        v7 = v310;
        if (a3)
          goto LABEL_553;
        goto LABEL_143;
      }
      FontForCharIndex = TRunGlue::GetFontForCharIndex((TLine **)*v5, v15);
      if (!FontForCharIndex)
      {
        LOBYTE(v96) = 0;
        v12 = v309;
        v7 = v310;
        goto LABEL_552;
      }
      v85 = FontForCharIndex;
      *(_QWORD *)&v86 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v333[2] = v86;
      v333[3] = v86;
      v333[0] = v86;
      v333[1] = v86;
      v331 = 0;
      v332 = 0;
      v330 = 0;
      v334 = v333;
      CollectChars(v15, v16, v31, v335, v336, &v330);
      *(_QWORD *)&v87 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v87 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v328[2] = v87;
      v328[3] = v87;
      v328[0] = v87;
      v328[1] = v87;
      v326 = 0;
      v327 = 0;
      v329 = v328;
      v323[13] = v87;
      v323[14] = v87;
      v323[11] = v87;
      v323[12] = v87;
      v323[9] = v87;
      v323[10] = v87;
      v323[7] = v87;
      v323[8] = v87;
      v323[5] = v87;
      v323[6] = v87;
      v323[3] = v87;
      v323[4] = v87;
      v323[1] = v87;
      v323[2] = v87;
      v323[0] = v87;
      v321 = 0;
      v322 = 0;
      v320 = 0;
      v324 = v323;
      v325 = 0;
      v88 = v331 - v330;
      if (v331 != v330)
      {
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v320, v88 >> 1);
        v89 = (char *)v321;
        bzero(v321, (4 * v88) & 0xFFFFFFFFFFFFFFF8);
        v90 = &v89[4 * v88];
        v321 = v90;
        v91 = v320;
        if (v320 != v90)
        {
          v92 = 0;
          do
          {
            *(_QWORD *)v91 = v92;
            v91 += 8;
            ++v92;
          }
          while (v91 != v90);
        }
      }
      v93 = *(unsigned __int16 *)v330;
      v12 = v309;
      v7 = v310;
      if ((v93 & 0xFC00) == 0xD800)
      {
        if (v331 - v330 == 2)
          goto LABEL_127;
        v100 = *((unsigned __int16 *)v330 + 1);
        v101 = (v100 & 0xFC00) == 56320;
        v94 = v100 + (v93 << 10) - 56613888;
        if (!v101)
          v94 = *(unsigned __int16 *)v330;
        v95 = 2;
        if (!v101)
          v95 = 1;
LABEL_150:
        if (v94 >= 0x900 && (v94 & 0xFFFFFFC0) != 69312)
          goto LABEL_182;
      }
      else
      {
        if (v93 < 0x600)
          goto LABEL_182;
        if (v93 >= 0x700)
        {
          if (v93 < 0x750)
            goto LABEL_182;
          if (v93 >= 0x780)
          {
            if (v93 >= 0x8A0)
            {
LABEL_127:
              v94 = *(unsigned __int16 *)v330;
              v95 = 1;
              goto LABEL_150;
            }
LABEL_182:
            v111 = v317 >> 31;
            goto LABEL_183;
          }
        }
        v95 = 1;
      }
      v103 = (v331 - v330) >> 1;
      while (2)
      {
        if (v95 != v103)
        {
          v104 = v95 + 1;
          v105 = *(unsigned __int16 *)&v330[2 * v95];
          if ((v105 & 0xFC00) == 0xD800)
          {
            v106 = (v331 - v330) >> 1;
            if (v104 != v103)
            {
              v107 = *(unsigned __int16 *)&v330[2 * v104];
              v108 = (v107 & 0xFC00) == 56320;
              v109 = (v105 << 10) - 56613888 + v107;
              v106 = v108 ? v95 + 2 : v95 + 1;
              if (v108)
                v105 = v109;
            }
LABEL_165:
            v110 = (v105 & 0xFFFFFFC0) == 69312;
            v95 = v106;
LABEL_175:
            if (v105 != 847 && !v110)
              goto LABEL_182;
            continue;
          }
          if (v105 < 0x600)
          {
LABEL_171:
            v110 = 0;
          }
          else
          {
            if (v105 >= 0x700)
            {
              if (v105 < 0x750)
                goto LABEL_171;
              if (v105 >= 0x780)
              {
                if (v105 < 0x8A0)
                  goto LABEL_171;
                if (v105 >= 0x900)
                {
                  v106 = v95 + 1;
                  goto LABEL_165;
                }
              }
            }
            v110 = 1;
          }
          ++v95;
          goto LABEL_175;
        }
        break;
      }
      if (v317 < 0)
      {
        v118 = &v330;
        if (DecomposeInitialChar(&v330, (uint64_t *)&v320, &v325))
        {
          v119 = 1;
          *a4 = 1;
          v118 = &v325;
        }
        else
        {
          v119 = 0;
        }
        if (ApplyModifiedCombiningClasses(v118, 1, &v320, (char *)&v325))
        {
          if (ComposeArabicDecompositions((uint64_t)&v325, &v320, (uint64_t)&v325))
            v96 = 1;
          else
            v96 = v119;
          if (v321 != v320)
          {
            v128 = 0;
            do
            {
              if (v128 != *(_QWORD *)&v320[8 * v128])
                goto LABEL_251;
              ++v128;
            }
            while (((_BYTE *)v321 - v320) >> 3 != v128);
          }
        }
        else if (ComposeArabicDecompositions((uint64_t)v118, &v320, (uint64_t)&v325))
        {
          v129 = v326 - v325 == v331 - v330 && memcmp(v325, v330, v326 - v325) == 0;
          v96 = !v129;
        }
        else
        {
          v96 = 0;
        }
LABEL_257:
        if (v96)
        {
          v303 = 0;
          goto LABEL_259;
        }
        goto LABEL_551;
      }
      v111 = 0;
LABEL_183:
      if (v93 < 0x590 || v93 >= 0x600 && (unsigned __int16)(v93 + 1251) > 0x32u)
      {
LABEL_200:
        if (u_getIntPropertyValue(v93, UCHAR_HANGUL_SYLLABLE_TYPE))
        {
          LOBYTE(v96) = 0;
          goto LABEL_551;
        }
        v96 = 0;
        if (TCharComposer::ComposeChars((uint64_t)v330, (v331 - v330) >> 1, (uint64_t)&v325, 0))
          v96 = v326 - v325 < (unint64_t)(v331 - v330);
        goto LABEL_257;
      }
      v112 = v330 + 2;
      while (2)
      {
        if (v112 != v331)
        {
          v113 = *(unsigned __int16 *)v112;
          if (v113 >= 0x590)
          {
            if (v113 >= 0x600)
            {
              v114 = (unsigned __int16)(v113 + 1251) < 0x33u;
              goto LABEL_192;
            }
          }
          else
          {
            v114 = 0;
LABEL_192:
            if (v113 != 847 && !v114)
              goto LABEL_200;
          }
          v112 += 2;
          continue;
        }
        break;
      }
      if (!v111)
        goto LABEL_200;
      v116 = &v330;
      v117 = DecomposeInitialChar(&v330, (uint64_t *)&v320, &v325);
      if (v117)
      {
        v96 = 1;
        *a4 = 1;
        v116 = &v325;
      }
      else
      {
        v96 = 0;
      }
      v120 = ApplyModifiedCombiningClasses(v116, 0, &v320, (char *)&v325);
      CanPositionHebrewMarks = FontCanPositionHebrewMarks((TBaseFont **)v85);
      if (!v120)
      {
        if ((CanPositionHebrewMarks & 1) == 0)
        {
          v122 = v117 ? &v325 : &v330;
          if (TCombiningEngine::ComposeHebrewPresentationForms((uint64_t)v122, (uint64_t)&v325, *(_QWORD *)(v85 + 400)))
          {
            do
            {
              v123 = v320 + 8;
              v124 = (char *)((_BYTE *)v321 - (v320 + 16));
              if (v321 != v320 + 16)
                memmove(v320 + 8, v320 + 16, (_BYTE *)v321 - (v320 + 16));
              v321 = &v124[(_QWORD)v123];
              if (v326 - v325 == v331 - v330)
              {
                v125 = memcmp(v325, v330, v326 - v325);
                v126 = v125 == 0;
                if (v125)
                  v127 = &v325;
                else
                  v127 = &v330;
              }
              else
              {
                v126 = 0;
                v127 = &v325;
              }
            }
            while ((TCombiningEngine::ComposeHebrewPresentationForms((uint64_t)v127, (uint64_t)&v325, *(_QWORD *)(v85 + 400)) & 1) != 0);
            v96 = !v126;
          }
        }
        goto LABEL_257;
      }
      if ((CanPositionHebrewMarks & 1) == 0
        && TCombiningEngine::ComposeHebrewPresentationForms((uint64_t)&v325, (uint64_t)&v325, *(_QWORD *)(v85 + 400)))
      {
        do
        {
          AdjustIndexesForPairwiseComposition(&v320);
          v130 = v326 - v325 == v331 - v330 && memcmp(v325, v330, v326 - v325) == 0;
        }
        while ((TCombiningEngine::ComposeHebrewPresentationForms((uint64_t)&v325, (uint64_t)&v325, *(_QWORD *)(v85 + 400)) & 1) != 0);
        v96 = !v130;
      }
      if (v321 == v320)
        goto LABEL_257;
      v131 = 0;
      while (v131 == *(_QWORD *)&v320[8 * v131])
      {
        if (((_BYTE *)v321 - v320) >> 3 == ++v131)
          goto LABEL_257;
      }
LABEL_251:
      v303 = (uint64_t *)&v320;
LABEL_259:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v85 + 400) + 688))(*(_QWORD *)(v85 + 400)) & 1) != 0)
      {
        v132 = 0;
        goto LABEL_550;
      }
      v134 = v330;
      v133 = v331;
      v135 = v326;
      *(_QWORD *)&v136 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v136 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v367[2] = v136;
      v367[3] = v136;
      v367[0] = v136;
      v367[1] = v136;
      v364 = 0;
      v366 = 0;
      v365 = 0;
      v368 = v367;
      v137 = v326 - v325;
      v138 = (v326 - v325) >> 1;
      v300 = v138;
      if (v326 == v325)
      {
        v141 = 0;
      }
      else
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v364, (v326 - v325) >> 1);
        v139 = v365;
        bzero(v365, v137 & 0xFFFFFFFFFFFFFFFELL);
        v140 = &v139[2 * v300];
        v138 = v300;
        v365 = v140;
        v135 = v325;
        v141 = v364;
      }
      v142 = (*(uint64_t (**)(_QWORD, char *, _WORD *, uint64_t))(**(_QWORD **)(v85 + 400) + 664))(*(_QWORD *)(v85 + 400), v135, v141, v138);
      v297 = v303 != 0;
      v22 = v137 < 1;
      v12 = v309;
      v7 = v310;
      if (v22 || !v303 || v142 == v138)
      {
LABEL_274:
        if (v142 == v138)
          goto LABEL_275;
        *(_QWORD *)v343 = &v364;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
        v132 = 0;
        v10 = v308;
        goto LABEL_550;
      }
      v143 = v364;
      v144 = v325;
      if (v138 <= 1)
        v145 = 1;
      else
        v145 = v138;
      while (1)
      {
        if (!*v143 && *(_WORD *)v144 == 847)
        {
          *v143 = -1;
          if (++v142 == v138)
            break;
        }
        v144 += 2;
        ++v143;
        if (!--v145)
          goto LABEL_274;
      }
LABEL_275:
      v299 = v96;
      RunWithCharIndex = -1;
      v146 = **v5;
      if (v146)
      {
        RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)**v5, v15, 1);
        v147 = *(_QWORD *)(*((_QWORD *)v146[2] + RunWithCharIndex) + 48);
      }
      else
      {
        v147 = 0;
      }
      *(_QWORD *)&v148 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v148 + 1) = 0xAAAAAAAAAAAAAAAALL;
      if (v303)
      {
        for (i = (_QWORD *)*v303; i != (_QWORD *)v303[1]; ++i)
        {
          if (*i >= (unint64_t)v312)
          {
            *(_QWORD *)v343 = &v364;
            std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
            v132 = 0;
            v10 = v308;
            v12 = v309;
            v7 = v310;
            LOBYTE(v96) = v299;
            goto LABEL_550;
          }
        }
      }
      v298 = (TBaseFont **)v85;
      v362[13] = v148;
      v362[14] = v148;
      v150 = (v133 - v134) >> 1;
      v362[11] = v148;
      v362[12] = v148;
      v362[9] = v148;
      v362[10] = v148;
      v362[7] = v148;
      v362[8] = v148;
      v362[5] = v148;
      v362[6] = v148;
      v362[3] = v148;
      v362[4] = v148;
      v362[1] = v148;
      v362[2] = v148;
      v362[0] = v148;
      v359 = 0;
      v361 = 0;
      v360 = 0;
      v363 = v362;
      if (!v303)
      {
        v10 = v308;
        goto LABEL_368;
      }
      v10 = v308;
      if (!v147)
        goto LABEL_368;
      v151 = *(_QWORD *)(v147 + 8);
      if (v151 >= v310 || *(_QWORD *)(v147 + 16) + v151 < v310)
      {
        v152 = v15;
        if (v312 >= 1)
        {
          do
          {
            v153 = *(_QWORD *)(v147 + 8);
            if (v153 > v152 || *(_QWORD *)(v147 + 16) + v153 <= v152)
            {
              ++RunWithCharIndex;
              v147 = *(_QWORD *)(*((_QWORD *)v146[2] + RunWithCharIndex) + 48);
            }
            v155 = TRun::GetGlyphIndexForCharIndex<false>(v147, v152);
            TLine::SeparateCharWithGlyphIndex((TLine *)v146, &RunWithCharIndex, v155);
            ++v152;
          }
          while (v152 < v310);
        }
        v156 = (char *)*v303;
        if (v150 < v300)
        {
          v157 = v156 + 8;
          v158 = (char *)v303[1];
          *(_QWORD *)&v159 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v159 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (v156 + 8 != v158)
          {
            while (*(_QWORD *)v157)
            {
              v157 += 8;
              if (v157 == v158)
              {
                v157 = (char *)v303[1];
                break;
              }
            }
          }
          if (v157 != v158)
          {
            do
            {
              v160 = (v157 - v156) >> 3;
              v161 = v360;
              v162 = v359;
              v163 = v360 - v359;
              v164 = (void *)(v163 + v160);
              if ((unint64_t)v360 >= v361)
              {
                v167 = v163 + 1;
                if ((unint64_t)(v163 + 1) >> 61)
                  goto LABEL_561;
                v168 = v361 - (_QWORD)v359;
                if ((uint64_t)(v361 - (_QWORD)v359) >> 2 > v167)
                  v167 = v168 >> 2;
                if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
                  v169 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v169 = v167;
                *(_QWORD *)&v343[32] = v362;
                if (v169)
                {
                  v170 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v362, v169);
                  v161 = v360;
                  v162 = v359;
                }
                else
                {
                  v170 = 0;
                }
                v171 = &v170[8 * v163];
                *(_QWORD *)v171 = v164;
                if (v161 == v162)
                {
                  v173 = (void **)&v170[8 * v163];
                }
                else
                {
                  v172 = v161;
                  v173 = (void **)&v170[8 * v163];
                  do
                  {
                    v174 = *--v172;
                    *--v173 = v174;
                  }
                  while (v172 != v162);
                }
                v166 = (void **)(v171 + 8);
                v359 = v173;
                *(_QWORD *)&v343[8] = v162;
                v360 = (void **)(v171 + 8);
                *(_QWORD *)&v343[16] = v161;
                v175 = v361;
                v361 = (unint64_t)&v170[8 * v169];
                *(_QWORD *)&v343[24] = v175;
                *(_QWORD *)v343 = v162;
                std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v343);
                v156 = (char *)*v303;
                v158 = (char *)v303[1];
                v165 = (uint64_t)&v157[-*v303] >> 3;
                *(_QWORD *)&v159 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v159 + 1) = 0xAAAAAAAAAAAAAAAALL;
              }
              else
              {
                *v360 = v164;
                v165 = (v157 - v156) >> 3;
                v166 = v161 + 1;
              }
              v360 = v166;
              v176 = &v156[8 * v165];
              v177 = v158 - (v176 + 8);
              if (v158 != v176 + 8)
              {
                memmove(&v156[8 * v165], v176 + 8, v158 - (v176 + 8));
                *(_QWORD *)&v159 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v159 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v156 = (char *)*v303;
              }
              v158 = &v176[v177];
              v303[1] = (uint64_t)&v176[v177];
              v157 = v158;
              if (&v156[8 * v160] != v158)
              {
                v157 = &v156[8 * v160];
                while (*(_QWORD *)v157)
                {
                  v157 += 8;
                  if (v157 == v158)
                  {
                    v157 = v158;
                    break;
                  }
                }
              }
            }
            while (v157 != v158);
            v354[2] = v159;
            v354[3] = v159;
            v354[0] = v159;
            v354[1] = v159;
            v352 = v159;
            v353 = v159;
            v350 = v159;
            v351 = v159;
            v348 = v159;
            v349 = v159;
            v346 = v159;
            v347 = v159;
            v344 = v159;
            v345 = v159;
            *(_OWORD *)&v343[24] = v159;
            memset(v343, 0, 24);
            v355 = &v343[24];
            v178 = v158 - v156;
            if (v158 != v156)
            {
              std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](v343, v178 >> 3);
              v179 = *(_QWORD *)&v343[8];
              memmove(*(void **)&v343[8], v156, v178);
              *(_QWORD *)&v343[8] = v179 + v178;
            }
            LOBYTE(v319) = -86;
            std::__sort<std::__less<long,long> &,long *>();
            v183 = *(uint64_t **)&v343[8];
            v182 = *(_QWORD *)v343;
            if (*(_QWORD *)v343 != *(_QWORD *)&v343[8])
            {
              v184 = (uint64_t *)(*(_QWORD *)v343 + 8);
              while (v184 != *(uint64_t **)&v343[8])
              {
                v185 = *(v184 - 1);
                v186 = *v184++;
                if (v185 == v186)
                {
                  v187 = v184 - 2;
                  while (v184 != v183)
                  {
                    v188 = v185;
                    v185 = *v184;
                    if (v188 != *v184)
                    {
                      v187[1] = v185;
                      ++v187;
                    }
                    ++v184;
                  }
                  v189 = v187 + 1;
                  goto LABEL_350;
                }
              }
            }
            v189 = *(uint64_t **)&v343[8];
LABEL_350:
            if (v183 != v189)
            {
              v183 = v189;
              *(_QWORD *)&v343[8] = v189;
            }
            v190 = (char *)v183 - v182;
            v191 = v303[1] - *v303;
            v319 = (void **)v343;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
            if (v190 == (char *)v191)
            {
              v156 = (char *)*v303;
              goto LABEL_354;
            }
            v132 = 0;
            v5 = (void ****)v307;
            v10 = v308;
LABEL_375:
            v12 = v309;
            v7 = v310;
LABEL_417:
            LOBYTE(v96) = v299;
            goto LABEL_548;
          }
          v132 = 0;
LABEL_497:
          v5 = (void ****)v307;
          goto LABEL_375;
        }
LABEL_354:
        v192 = v303[1] - (_QWORD)v156;
        if (v192 >= 1)
        {
          v193 = 0;
          v194 = (unint64_t)v192 >> 3;
          if (v194 <= 1)
            v195 = 1;
          else
            v195 = v194;
          do
          {
            v196 = *(_QWORD *)&v156[8 * v193];
            for (j = v193; v193 != v196; v196 = *(_QWORD *)&v156[8 * j])
            {
              v198 = j;
              j = v196;
              v199 = TLine::FindRunWithCharIndex((TLine *)v146, v198 + v311, 1);
              v200 = TLine::FindRunWithCharIndex((TLine *)v146, j + v311, 1);
              v201 = v146[2];
              v202 = v201[v199];
              v201[v199] = v201[v200];
              v201[v200] = v202;
              *((_WORD *)v146 + 77) |= 0x40u;
              v156 = (char *)*v303;
              *(_QWORD *)(*v303 + 8 * v198) = v198;
            }
            *(_QWORD *)&v156[8 * j] = j;
            ++v193;
          }
          while (v193 != v195);
        }
        TRunGlue::TRunGlue((TRunGlue *)v343, (TLine *)v146);
        v5 = (void ****)v307;
        TRunGlue::operator=(*v307, (__int128 *)v343);
        v203 = v358;
        if (v358 == v357)
        {
          v203 = v357;
          v204 = 4;
          v10 = v308;
          v15 = v311;
          v138 = v300;
LABEL_365:
          (*(void (**)(void))(*v203 + 8 * v204))();
        }
        else
        {
          v10 = v308;
          v15 = v311;
          v138 = v300;
          if (v358)
          {
            v204 = 5;
            goto LABEL_365;
          }
        }
        v319 = (void **)v356;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
        v319 = (void **)v354 + 1;
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
        v319 = (void **)&v345;
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
        v297 = 0;
        v303 = 0;
        goto LABEL_367;
      }
      if ((*(_BYTE *)(v147 + 225) & 2) == 0)
      {
        v297 = 0;
        goto LABEL_367;
      }
      v370.location = v15;
      v370.length = v312;
      TLine::SetLevelRange(v146, v370, *(_BYTE *)(v147 + 224), 0);
      TRunGlue::TRunGlue((TRunGlue *)v343, (TLine *)v146);
      TRunGlue::operator=((uint64_t)*v5, (__int128 *)v343);
      v180 = v358;
      if (v358 == v357)
      {
        v180 = v357;
        v181 = 4;
LABEL_337:
        (*(void (**)(void))(*v180 + 8 * v181))();
      }
      else if (v358)
      {
        v181 = 5;
        goto LABEL_337;
      }
      v319 = (void **)v356;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
      v319 = (void **)v354 + 1;
      std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
      v319 = (void **)&v345;
      std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v319);
      v297 = 1;
LABEL_367:
      RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v146, v15, 1);
      v147 = *(_QWORD *)(*((_QWORD *)v146[2] + RunWithCharIndex) + 48);
LABEL_368:
      if (v150 != v138)
      {
        ShapingType = TBaseFont::GetShapingType(v298[50]);
        if (v303 || ShapingType != 2)
          goto LABEL_376;
LABEL_373:
        v206 = (unsigned __int16)*v364;
        if (v206 == TRunGlue::GetGlyphIDForCharIndex((TRunGlue *)*v5, v15))
        {
          v132 = 0;
          goto LABEL_375;
        }
        v216 = v300;
        if (!v147)
        {
          v234 = 0;
          v233 = (TLine **)*v5;
          goto LABEL_435;
        }
        v207 = 0;
LABEL_388:
        if ((*(_WORD *)v325 & 0xF800) == 0xD800)
          v217 = v15 + 1;
        else
          v217 = v15;
        v302 = v312 - v216;
        if (v312 - v216 >= 1)
        {
          v218 = v5;
          LODWORD(v295) = v207;
          HIDWORD(v295) = v297 && v207;
          v219 = v312 - v216;
          do
          {
            v220 = (char *)v146[2];
            v221 = (_BYTE *)v146[3] - v220;
            if (v221 >= 1)
            {
              v222 = v217 + v219;
              v223 = (unint64_t)v221 >> 3;
              if (v223 <= 1)
                v223 = 1;
              while (1)
              {
                v224 = *(_QWORD *)(*(_QWORD *)v220 + 48);
                v225 = *(_QWORD *)(v224 + 8);
                if (v225 <= v222 && *(_QWORD *)(v224 + 16) + v225 > v222)
                  break;
                v220 += 8;
                if (!--v223)
                  goto LABEL_413;
              }
              v227 = TRun::GetGlyphIndexForCharIndex<false>(*(_QWORD *)(*(_QWORD *)v220 + 48), v217 + v219);
              v228 = *(_QWORD **)(v224 + 216);
              v229 = *(_QWORD *)(v224 + 200);
              if (*(_QWORD *)(v228[6] + 8 * v229 + 8 * v227) == v222)
              {
                objc_msgSend(v228, "setGlyph:atIndex:", 0xFFFFLL, v229 + v227);
                if ((*(_BYTE *)(v224 + 225) & 2) != 0)
                  *(_BYTE *)(v224 + 225) |= 8u;
                objc_msgSend(*(id *)(v224 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 216) + 40) + 4 * *(_QWORD *)(v224 + 200) + 4 * v227) | 0x20u, *(_QWORD *)(v224 + 200) + v227, v295);
                TStorageRange::SetAdvance((TStorageRange *)(v224 + 192), v227, *MEMORY[0x1E0C9D820]);
                if (HIDWORD(v295))
                {
                  v230 = *(_QWORD *)(*v303 + 8 * (v222 - v15)) + v15;
                  if (v230 != v222)
                  {
                    v231 = *(_QWORD *)(v224 + 8);
                    if (v231 <= v230 && *(_QWORD *)(v224 + 16) + v231 > v230)
                    {
                      objc_msgSend(*(id *)(v224 + 216), "setStringIndex:atIndex:");
                      *(_DWORD *)(v224 + 256) = 2;
                    }
                  }
                }
              }
            }
LABEL_413:
            v22 = v219-- <= 1;
          }
          while (!v22);
          if (v312 < v300)
          {
            v132 = 0;
            v5 = v218;
            v10 = v308;
            v12 = v309;
            v7 = v310;
            goto LABEL_417;
          }
          v241 = 0;
          v5 = v218;
          v10 = v308;
          LOBYTE(v96) = v299;
          v207 = v295;
          goto LABEL_505;
        }
        v10 = v308;
        LOBYTE(v96) = v299;
        if (v312 >= v216)
        {
          v241 = 0;
          goto LABEL_505;
        }
        LODWORD(v295) = v207;
        if (v326 == v325)
        {
          v236 = 0;
        }
        else
        {
          v235 = 0;
          v236 = 0;
          v237 = (v326 - v325) >> 1;
          do
          {
            v238 = v235 + 1;
            if ((*(_WORD *)&v325[2 * v235] & 0xFC00) == 0xD800 && v238 != v237)
            {
              v240 = v235 + 2;
              if ((*(_WORD *)&v325[2 * v238] & 0xFC00) == 0xDC00)
                v238 = v240;
            }
            ++v236;
            v235 = v238;
          }
          while (v238 != v237);
        }
        if (v331 == v330)
        {
          v243 = 0;
        }
        else
        {
          v242 = 0;
          v243 = 0;
          v244 = (v331 - v330) >> 1;
          do
          {
            v245 = v242 + 1;
            if ((*(_WORD *)&v330[2 * v242] & 0xFC00) == 0xD800 && v245 != v244)
            {
              v247 = v242 + 2;
              if ((*(_WORD *)&v330[2 * v245] & 0xFC00) == 0xDC00)
                v245 = v247;
            }
            ++v243;
            v242 = v245;
          }
          while (v245 != v244);
        }
        v248 = *(_BYTE *)(v147 + 224);
        v249 = v236 - v243;
        TStorageRange::DetachStorage((id *)(v147 + 192));
        v250 = TRun::GetGlyphIndexForCharIndex<false>(v147, v311);
        v251 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 216) + 40) + 4 * *(_QWORD *)(v147 + 200) + 4 * v250);
        v371.location = v250 + 1;
        v313 = (TStorageRange *)(v147 + 192);
        v371.length = v249;
        TStorageRange::InsertGlyphs((id *)(v147 + 192), v371);
        TRunGlue::InsertedGlyphsAtCharIndex((TRunGlue *)*v5, v249, v311);
        if (*(int *)(v147 + 256) <= 1)
          *(_DWORD *)(v147 + 256) = 1;
        v252 = *(unsigned __int16 *)v325;
        if ((v252 & 0xFC00) == 0xD800
          && v326 - v325 != 2
          && (v253 = *((unsigned __int16 *)v325 + 1), (v253 & 0xFC00) == 0xDC00))
        {
          v296 = v253 + (v252 << 10) - 56613888;
          v254 = 2;
        }
        else
        {
          v296 = *(unsigned __int16 *)v325;
          v254 = 1;
        }
        if ((v248 & 1) != 0)
          v255 = v249;
        else
          v255 = 0;
        v256 = v250 + v255;
        v257 = (unsigned __int16)*v364;
        objc_msgSend(*(id *)(v147 + 216), "setGlyph:atIndex:", (unsigned __int16)*v364, *(_QWORD *)(v147 + 200) + v256, v295);
        if (v257 == 0xFFFF && (*(_BYTE *)(v147 + 225) & 2) != 0)
          *(_BYTE *)(v147 + 225) |= 8u;
        RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v147 + 40));
        TStorageRange::ResetAdvance((uint64_t)v313, v256, (uint64_t)v298, RenderingStyle);
        objc_msgSend(*(id *)(v147 + 216), "setProps:atIndex:", v251 | 0x80u, *(_QWORD *)(v147 + 200) + v256);
        objc_msgSend(*(id *)(v147 + 216), "setStringIndex:atIndex:", v311, *(_QWORD *)(v147 + 200) + v256);
        objc_msgSend(*(id *)(v147 + 216), "setAttachmentCount:atIndex:", v254 - 1, *(_QWORD *)(v147 + 200) + v256);
        v259 = v359;
        v260 = v360;
        if (v359 != v360)
          v254 = (uint64_t)*v359;
        if ((v248 & 1) != 0)
          v261 = -1;
        else
          v261 = 1;
        v262 = v256 + v261;
        if (v297)
        {
          v10 = v308;
          if (v254 >= v300)
          {
            v132 = 1;
            goto LABEL_497;
          }
          do
          {
            v241 = v254 + 1;
            if ((*(_WORD *)&v325[2 * v254] & 0xFC00) == 0xD800)
            {
              v263 = v311;
              if (v241 != (v326 - v325) >> 1 && (*(_WORD *)&v325[2 * v241] & 0xFC00) == 0xDC00)
                v241 = v254 + 2;
            }
            else
            {
              v263 = v311;
            }
            v264 = (unsigned __int16)v364[v254];
            objc_msgSend(*(id *)(v147 + 216), "setGlyph:atIndex:", (unsigned __int16)v364[v254], v262 + *(_QWORD *)(v147 + 200));
            v265 = *(_BYTE *)(v147 + 225);
            if (v264 == 0xFFFF && (v265 & 2) != 0)
              *(_BYTE *)(v147 + 225) = v265 | 8;
            v267 = TAttributes::GetRenderingStyle((TAttributes *)(v147 + 40));
            TStorageRange::ResetAdvance((uint64_t)v313, v262, (uint64_t)v298, v267);
            v268 = *(_QWORD *)(*v303 + 8 * v254);
            v15 = v268 + v263;
            if (v268)
              v269 = 64;
            else
              v269 = 576;
            objc_msgSend(*(id *)(v147 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 216) + 40) + 4 * *(_QWORD *)(v147 + 200) + 4 * v262) | v269, v262 + *(_QWORD *)(v147 + 200));
            objc_msgSend(*(id *)(v147 + 216), "setStringIndex:atIndex:", v15, v262 + *(_QWORD *)(v147 + 200));
            objc_msgSend(*(id *)(v147 + 216), "setAttachmentCount:atIndex:", v241 + ~v254, v262 + *(_QWORD *)(v147 + 200));
            v262 += v261;
            v254 = v241;
          }
          while (v241 < v300);
        }
        else
        {
          if (v249 < 1)
          {
            v10 = v308;
          }
          else
          {
            do
            {
              v270 = v254 + 1;
              if ((*(_WORD *)&v325[2 * v254] & 0xFC00) == 0xD800
                && v270 != (v326 - v325) >> 1
                && (*(_WORD *)&v325[2 * v270] & 0xFC00) == 0xDC00)
              {
                v270 = v254 + 2;
              }
              v271 = (unsigned __int16)v364[v254];
              objc_msgSend(*(id *)(v147 + 216), "setGlyph:atIndex:", (unsigned __int16)v364[v254], v262 + *(_QWORD *)(v147 + 200));
              v272 = *(_BYTE *)(v147 + 225);
              if (v271 == 0xFFFF && (v272 & 2) != 0)
                *(_BYTE *)(v147 + 225) = v272 | 8;
              v274 = TAttributes::GetRenderingStyle((TAttributes *)(v147 + 40));
              TStorageRange::ResetAdvance((uint64_t)v313, v262, (uint64_t)v298, v274);
              objc_msgSend(*(id *)(v147 + 216), "setProps:atIndex:", v251 | 0x240u, v262 + *(_QWORD *)(v147 + 200));
              objc_msgSend(*(id *)(v147 + 216), "setStringIndex:atIndex:", v311, v262 + *(_QWORD *)(v147 + 200));
              objc_msgSend(*(id *)(v147 + 216), "setAttachmentCount:atIndex:", 0, v262 + *(_QWORD *)(v147 + 200));
              v262 += v261;
              v254 = v270;
              --v249;
            }
            while (v249);
            v259 = v359;
            v260 = v360;
            v254 = v270;
            v10 = v308;
          }
          v302 = 0;
          v275 = 1;
          if (v296 >= 0x10000)
            v275 = 2;
          v15 = v275 + v311;
          if (v259 == v260)
            v241 = v254;
          else
            v241 = v275;
        }
        LOBYTE(v96) = v299;
        v5 = (void ****)v307;
        v207 = v295;
        if (!v297)
        {
LABEL_505:
          if (v15 < v310)
          {
            v276 = *(_QWORD *)(v147 + 8);
            v277 = *(_QWORD *)(v147 + 16);
            v301 = v297 && v207;
            while (v276 <= v15 && v277 + v276 > v15)
            {
LABEL_514:
              v279 = TRun::GetGlyphIndexForCharIndex<false>(v147, v15);
              do
              {
                v280 = v241;
                v281 = v359;
                if (v359 != v360)
                {
                  while (*v281 != (void *)v241)
                  {
                    if (++v281 == v360)
                    {
                      v281 = v360;
                      break;
                    }
                  }
                }
                ++v241;
              }
              while (v281 != v360);
              v282 = *(unsigned __int16 *)&v325[2 * v280];
              if ((v282 & 0xFC00) == 0xD800 && v241 != (v326 - v325) >> 1)
              {
                v283 = *(unsigned __int16 *)&v325[2 * v241];
                v284 = (v283 & 0xFC00) == 56320;
                v285 = (v282 << 10) - 56613888 + v283;
                v241 = v284 ? v280 + 2 : v280 + 1;
                if (v284)
                  v282 = v285;
              }
              v314 = (TStorageRange *)(v147 + 192);
              objc_msgSend(*(id *)(v147 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 216) + 40) + 4 * *(_QWORD *)(v147 + 200) + 4 * v279) & 0xFFFFFFBF | ((u_isbase(v282) == 0) << 6), *(_QWORD *)(v147 + 200) + v279);
              v286 = atomic_load((unint64_t *)(v147 + 56));
              if (TFont::operator==(*(TFont **)(v286 + 40), (TFont *)v298))
              {
                v287 = (unsigned __int16)v364[v280];
                objc_msgSend(*(id *)(v147 + 216), "setGlyph:atIndex:", (unsigned __int16)v364[v280], *(_QWORD *)(v147 + 200) + v279);
                if (v287 == 0xFFFF && (*(_BYTE *)(v147 + 225) & 2) != 0)
                  *(_BYTE *)(v147 + 225) |= 8u;
                v288 = atomic_load((unint64_t *)(v147 + 56));
                v289 = *(_QWORD *)(v288 + 40);
                v290 = TAttributes::GetRenderingStyle((TAttributes *)(v147 + 40));
                TStorageRange::ResetAdvance((uint64_t)v314, v279, v289, v290);
              }
              else
              {
                objc_msgSend(*(id *)(v147 + 216), "setGlyph:atIndex:", 0xFFFFLL, *(_QWORD *)(v147 + 200) + v279);
                if ((*(_BYTE *)(v147 + 225) & 2) != 0)
                  *(_BYTE *)(v147 + 225) |= 8u;
                TStorageRange::SetAdvance(v314, v279, *MEMORY[0x1E0C9D820]);
              }
              if (v301)
              {
                v291 = *(_QWORD *)(*v303 + 8 * (v15 - v311)) + v311;
                if (v291 != v15 && v276 <= v291 && v276 + v277 > v291)
                {
                  objc_msgSend(*(id *)(v147 + 216), "setStringIndex:atIndex:");
                  *(_DWORD *)(v147 + 256) = 2;
                }
              }
              v292 = v15 + v302;
              v302 = 0;
              v15 = v292 - v280 + v241;
              v10 = v308;
              LOBYTE(v96) = v299;
              if (v15 >= v310)
              {
                v132 = 1;
                goto LABEL_546;
              }
            }
            while (1)
            {
              v147 = *(_QWORD *)(v147 + 24);
              if (!v147)
                break;
              v276 = *(_QWORD *)(v147 + 8);
              v277 = *(_QWORD *)(v147 + 16);
              if (v276 <= v15 && v277 + v276 > v15)
                goto LABEL_514;
            }
            v132 = 0;
LABEL_546:
            v5 = (void ****)v307;
            goto LABEL_547;
          }
        }
        v132 = 1;
LABEL_547:
        v12 = v309;
        v7 = v310;
        goto LABEL_548;
      }
      if (!v303)
        goto LABEL_373;
LABEL_376:
      v207 = v303 != 0;
      if (v303)
      {
        v208 = __OFSUB__(v150, v138);
        v209 = v150 - v138;
        if (!((v209 < 0) ^ v208 | (v209 == 0)))
        {
          v210 = (char *)(*v303 + 8);
          *(_QWORD *)v343 = 0;
          v211 = std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)v303, v210, v209, v343);
          v212 = 0;
          v213 = &v211[8 * v209];
          v214 = 8 * v150 - 8 * v300;
          do
          {
            *(_QWORD *)&v211[8 * v212] = v212 + 1;
            ++v212;
            v214 -= 8;
          }
          while (v214);
          v215 = (char *)v303[1];
          while (v213 != v215)
          {
            *(_QWORD *)v213 += v209;
            v213 += 8;
          }
          v207 = 1;
        }
      }
      if (v147)
      {
        v216 = v300;
        goto LABEL_388;
      }
      v233 = (TLine **)*v5;
      if (v207)
        v234 = *v303;
      else
        v234 = 0;
LABEL_435:
      v12 = v309;
      v7 = v310;
      LOBYTE(v96) = v299;
      v132 = TRunGlue::ReplaceCharRangeWithGlyphs((TRunGlue *)v233, v15, v312, &v325, &v364, v234);
LABEL_548:
      *(_QWORD *)v343 = &v359;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
      *(_QWORD *)v343 = &v364;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
      if (v132)
        LOBYTE(v96) = 1;
LABEL_550:
      v306 |= v132;
LABEL_551:
      *(_QWORD *)v343 = &v320;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
      *(_QWORD *)v343 = &v325;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
      *(_QWORD *)v343 = &v330;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
LABEL_552:
      v97 = a3;
      if (a3)
      {
LABEL_553:
        if ((v96 & 1) == 0)
          *v97 = 0;
      }
LABEL_143:
      *(_QWORD *)v343 = &v335;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
      *(_QWORD *)v343 = v340;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v343);
LABEL_144:
      if (v7 >= v12)
      {
LABEL_559:
        v293 = v306;
        return v293 & 1;
      }
    }
  }
  v293 = 0;
  return v293 & 1;
}

uint64_t CollectChars(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, char **a6)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  _QWORD v28[5];

  if (a4 != a5)
  {
    v8 = a4;
    v10 = result;
    v11 = (uint64_t)(a6 + 3);
    v12 = a6[1];
    do
    {
      v13 = *v8 - v10;
      v14 = (unint64_t)a6[2];
      if ((unint64_t)v12 >= v14)
      {
        v15 = *a6;
        v16 = v12 - *a6;
        if (v16 <= -3)
          abort();
        v17 = v16 >> 1;
        v18 = v14 - (_QWORD)v15;
        if (v18 <= (v16 >> 1) + 1)
          v19 = v17 + 1;
        else
          v19 = v18;
        if (v18 >= 0x7FFFFFFFFFFFFFFELL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v28[4] = v11;
        if (v20)
        {
          v21 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v11, v20);
          v15 = *a6;
          v12 = a6[1];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[2 * v17];
        *(_WORD *)v22 = *(_WORD *)(a3 + 2 * v13);
        if (v12 == v15)
        {
          v24 = &v21[2 * v17];
        }
        else
        {
          v23 = v12;
          v24 = &v21[2 * v17];
          do
          {
            v25 = *((_WORD *)v23 - 1);
            v23 -= 2;
            *((_WORD *)v24 - 1) = v25;
            v24 -= 2;
          }
          while (v23 != v15);
        }
        v26 = v22 + 2;
        *a6 = v24;
        a6[1] = v22 + 2;
        v27 = a6[2];
        a6[2] = &v21[2 * v20];
        v28[2] = v12;
        v28[3] = v27;
        v28[0] = v15;
        v28[1] = v15;
        result = std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v28);
        v12 = v26;
      }
      else
      {
        *(_WORD *)v12 = *(_WORD *)(a3 + 2 * v13);
        v12 += 2;
      }
      a6[1] = v12;
      ++v8;
    }
    while (v8 != a5);
  }
  return result;
}

BOOL DecomposeInitialChar(_QWORD *a1, uint64_t *a2, char **a3)
{
  _BOOL8 v6;
  _WORD *v7;
  uint64_t v8;
  int Decomposition;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _WORD *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  char *v36;
  char **v38;
  char *v39;
  void *v40;
  char *v41;
  _OWORD v42[4];
  _OWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  unorm2_getNFDInstance();
  if (unorm2_isNormalized())
    return 0;
  v7 = (_WORD *)*a1;
  if ((*(_WORD *)*a1 & 0xFC00) == 0xD800 && a1[1] - (_QWORD)v7 != 2)
  {
    if ((v7[1] & 0xFC00) == 0xDC00)
      v8 = 2;
    else
      v8 = 1;
  }
  else
  {
    v8 = 1;
  }
  Decomposition = unorm2_getDecomposition();
  v10 = 0;
  v6 = Decomposition >= (int)v8;
  if (Decomposition >= (int)v8)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v42[2] = v11;
    v42[3] = v11;
    v42[0] = v11;
    v42[1] = v11;
    v12 = Decomposition;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v43 = v42;
    if (Decomposition)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v39, Decomposition);
      v13 = (char *)v40;
      bzero(v40, 2 * v12);
      v40 = &v13[2 * v12];
    }
    unorm2_getDecomposition();
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)a3, (uint64_t)a3[1], v39, (char *)v40, ((_BYTE *)v40 - v39) >> 1);
    v14 = *a2;
    v15 = a2[1];
    v16 = ((v15 - *a2) >> 3) - ((uint64_t)(a1[1] - *a1) >> 1);
    v17 = *a2 + 8 * v16;
    v18 = v15 - (v17 + 8);
    if (v15 != v17 + 8)
    {
      memmove((void *)(*a2 + 8 * v16), (const void *)(v17 + 8), v15 - (v17 + 8));
      v14 = *a2;
    }
    a2[1] = v17 + v18;
    v38 = 0;
    std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)a2, (char *)(v14 + 8 * v16), v12, (char *)&v38);
    v38 = &v39;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v38);
    v10 = v8;
  }
  v19 = a1[1] - *a1;
  if (v10 != v19 >> 1)
  {
    v20 = v19 >> 1;
    v21 = a3[1];
    do
    {
      v22 = (_WORD *)*a1;
      v23 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v23)
      {
        v24 = *a3;
        v25 = v21 - *a3;
        if (v25 <= -3)
          abort();
        v26 = v25 >> 1;
        v27 = v23 - (_QWORD)v24;
        if (v27 <= (v25 >> 1) + 1)
          v28 = v26 + 1;
        else
          v28 = v27;
        if (v27 >= 0x7FFFFFFFFFFFFFFELL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        *((_QWORD *)&v42[0] + 1) = a3 + 3;
        if (v29)
        {
          v30 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a3 + 3), v29);
          v24 = *a3;
          v21 = a3[1];
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[2 * v26];
        *(_WORD *)v31 = v22[v10];
        if (v21 == v24)
        {
          v33 = &v30[2 * v26];
        }
        else
        {
          v32 = v21;
          v33 = &v30[2 * v26];
          do
          {
            v34 = *((_WORD *)v32 - 1);
            v32 -= 2;
            *((_WORD *)v33 - 1) = v34;
            v33 -= 2;
          }
          while (v32 != v24);
        }
        v35 = v31 + 2;
        *a3 = v33;
        a3[1] = v31 + 2;
        v36 = a3[2];
        a3[2] = &v30[2 * v29];
        v41 = v21;
        *(_QWORD *)&v42[0] = v36;
        v39 = v24;
        v40 = v24;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v39);
        v21 = v35;
      }
      else
      {
        *(_WORD *)v21 = v22[v10];
        v21 += 2;
      }
      a3[1] = v21;
      ++v10;
    }
    while (v10 != v20);
  }
  return v6;
}

uint64_t ComposeArabicDecompositions(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  __int16 v7;
  _WORD *v8;
  _BYTE *v9;
  char *v10;
  _BYTE *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  unorm2_getNFDInstance();
  v6 = unorm2_composePair();
  if (HIWORD(v6))
    return 0;
  v7 = v6;
  if (a1 != a3)
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)a3, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1);
  v8 = *(_WORD **)a3;
  v9 = *(_BYTE **)(a3 + 8);
  v10 = (char *)(*(_QWORD *)a3 + 2);
  *v8 = v7;
  v11 = v8 + 2;
  v12 = v9 - v11;
  if (v9 != v11)
    memmove(v10, v11, v9 - v11);
  *(_QWORD *)(a3 + 8) = &v10[v12];
  v13 = a2[1];
  v14 = v13 - *a2;
  if (v13 != *a2)
  {
    v15 = 0;
    v16 = v14 >> 3;
    while (v15 == *(_QWORD *)(*a2 + 8 * v15))
    {
      if (v16 == ++v15)
        return 1;
    }
    AdjustIndexesForPairwiseComposition(a2);
  }
  return 1;
}

uint64_t FontCanPositionHebrewMarks(TBaseFont **a1)
{
  uint64_t result;
  const __CFData *v3;
  __int128 v4;
  const __CFData *CommonTable;
  __int128 v6;
  _OWORD v7[5];
  unint64_t v8;
  _OWORD v9[5];

  if (TBaseFont::GetCommonTable(a1[50], 1801810552, 0))
    return 1;
  result = TBaseFont::GetCommonTable(a1[50], 1196445523, 0);
  if (result)
  {
    v3 = (const __CFData *)result;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[3] = v4;
    v9[4] = v4;
    v9[1] = v4;
    v9[2] = v4;
    v9[0] = v4;
    CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1[50], 1195656518, 0);
    OTL::GDEF::GDEF((OTL::GDEF *)v9, CommonTable);
    v8 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v7[3] = v6;
    v7[4] = v6;
    v7[1] = v6;
    v7[2] = v6;
    v7[0] = v6;
    OTL::GCommon::GCommon((uint64_t)v7, 1, a1, v3, (uint64_t)v9, 1751474802, 0);
    *(_QWORD *)&v7[0] = &off_1E15DEE70;
    return OTL::GCommon::HasFeature((OTL::GCommon *)v7, 0x6D61726Bu);
  }
  return result;
}

uint64_t TCombiningEngine::ComposeHebrewPresentationForms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  UniChar v12;
  unint64_t v13;
  const __CFCharacterSet *v14;
  UniChar *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  id v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v3 = *(char **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 4uLL)
    return 0;
  v6 = 0;
  v21 = 95684057;
  v22 = -1251;
  v23 = 95880690;
  v24 = -1249;
  v25 = 96536041;
  v26 = -1238;
  v27 = 96601577;
  v28 = -1237;
  v29 = 96598857;
  v30 = -1236;
  v32 = -1236;
  v31 = 96271146;
  v33 = 96664393;
  v34 = -1235;
  v35 = 96271147;
  v36 = -1235;
  v37 = 95880656;
  v38 = -1234;
  v39 = 95946192;
  v40 = -1233;
  v41 = 96208336;
  v42 = -1232;
  v43 = 96208337;
  v44 = -1231;
  v45 = 96208338;
  v46 = -1230;
  v47 = 96208339;
  v48 = -1229;
  v49 = 96208340;
  v50 = -1228;
  v51 = 96208341;
  v52 = -1227;
  v53 = 96208342;
  v54 = -1226;
  v55 = 96208344;
  v56 = -1224;
  v57 = 96208345;
  v58 = -1223;
  v59 = 96208346;
  v60 = -1222;
  v61 = 96208347;
  v62 = -1221;
  v63 = 96208348;
  v64 = -1220;
  v65 = 96208350;
  v66 = -1218;
  v67 = 96208352;
  v68 = -1216;
  v69 = 96208353;
  v70 = -1215;
  v71 = 96208355;
  v72 = -1213;
  v73 = 96208356;
  v74 = -1212;
  v75 = 96208358;
  v76 = -1210;
  v77 = 96208359;
  v78 = -1209;
  v79 = 96208360;
  v80 = -1208;
  v81 = 96208361;
  v82 = -1207;
  v83 = 96208362;
  v84 = -1206;
  v85 = 96011733;
  v86 = -1205;
  v87 = 96404945;
  v88 = -1204;
  v89 = 96404955;
  v90 = -1203;
  v91 = 96404964;
  v92 = -1202;
  v7 = *(unsigned __int16 *)v3;
  v8 = *((unsigned __int16 *)v3 + 1);
  while (*(unsigned __int16 *)((char *)&v21 + v6) != v7 || *(unsigned __int16 *)((char *)&v21 + v6 + 2) != v8)
  {
    v6 += 6;
    if (v6 == 216)
      return 0;
  }
  v12 = *(_WORD *)((char *)&v21 + v6 + 4);
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t))(*(_QWORD *)a3 + 184))(&v20, a3);
  v13 = atomic_load((unint64_t *)&v20);
  if (v13
    && (v14 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v20), CFCharacterSetIsCharacterMember(v14, v12)))
  {
    if (a1 != a2)
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)a2, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1);
    v15 = *(UniChar **)a2;
    v16 = (char *)(*(_QWORD *)a2 + 2);
    *v15 = v12;
    v17 = v15 + 2;
    v18 = *(_BYTE **)(a2 + 8);
    v19 = v18 - v17;
    if (v18 != v17)
      memmove(v16, v17, v18 - v17);
    *(_QWORD *)(a2 + 8) = &v16[v19];
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

_QWORD *AdjustIndexesForPairwiseComposition(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = result;
  v3 = *result;
  v2 = (uint64_t *)result[1];
  v4 = (uint64_t *)(*result + 8);
  v5 = *v4;
  v6 = v4 == v2 || v5 == 0;
  v7 = *result + 8;
  if (!v6)
  {
    v8 = (uint64_t *)(v3 + 16);
    while (v8 != v2)
    {
      if (!*v8++)
      {
        v7 = (uint64_t)(v8 - 1);
        goto LABEL_10;
      }
    }
    v7 = result[1];
  }
LABEL_10:
  if ((uint64_t *)v7 == v2)
  {
    v11 = (unint64_t)v2 - v3 - 16;
    if (v2 == (uint64_t *)(v3 + 16))
    {
      v13 = (unint64_t)(v2 - 1);
      result[1] = v13;
    }
    else
    {
      result = memmove((void *)(*result + 8), (const void *)(v3 + 16), (size_t)v2 - v3 - 16);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + v3 + 8;
      v1[1] = v13;
      while (*v4 != v5)
      {
        ++v4;
        v12 -= 8;
        if (!v12)
        {
          v4 = (uint64_t *)((v11 & 0xFFFFFFFFFFFFFFF8) + v3 + 8);
          break;
        }
      }
    }
    if (v4 == (uint64_t *)v13)
    {
      v14 = (_QWORD *)*v1;
      while (++v14 != (_QWORD *)v13)
      {
        if (*v14 > v5)
          --*v14;
      }
    }
  }
  else
  {
    v10 = (char *)v2 - v7 - 8;
    if (v2 != (uint64_t *)(v7 + 8))
      result = memmove((void *)v7, (const void *)(v7 + 8), (size_t)v2 - v7 - 8);
    v1[1] = &v10[v7];
  }
  return result;
}

char *std::vector<long,TInlineBufferAllocator<long,30ul>>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[5];

  v4 = __src;
  if (a3)
  {
    v5 = a4;
    v8 = *(char **)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    if (a3 <= (v9 - (uint64_t)v8) >> 3)
    {
      v17 = v8 - __src;
      if (a3 <= (v8 - __src) >> 3)
      {
        v20 = *(char **)(a1 + 8);
        v19 = a3;
      }
      else
      {
        v18 = 0;
        v19 = v17 >> 3;
        v20 = &v8[8 * (a3 - (v17 >> 3))];
        do
        {
          *(_QWORD *)&v8[v18] = *(_QWORD *)a4;
          v18 += 8;
        }
        while (8 * a3 - 8 * v19 != v18);
        *(_QWORD *)(a1 + 8) = v20;
        if (v8 == __src)
          return v4;
      }
      v21 = &__src[8 * a3];
      v22 = &v20[-8 * a3];
      v23 = v20;
      if (v22 < v8)
      {
        v23 = v20;
        do
        {
          v24 = *(_QWORD *)v22;
          v22 += 8;
          *(_QWORD *)v23 = v24;
          v23 += 8;
        }
        while (v22 < v8);
      }
      *(_QWORD *)(a1 + 8) = v23;
      if (v20 != v21)
        memmove(&v20[-8 * ((v20 - v21) >> 3)], __src, v20 - v21);
      if (v4 <= v5)
      {
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)v5)
          v25 = 0;
        else
          v25 = a3;
        v5 += 8 * v25;
      }
      v26 = v4;
      do
      {
        *(_QWORD *)v26 = *(_QWORD *)v5;
        v26 += 8;
        --v19;
      }
      while (v19);
    }
    else
    {
      v10 = *(_BYTE **)a1;
      v11 = a3 + ((uint64_t)&v8[-*(_QWORD *)a1] >> 3);
      if (v11 >> 61)
        abort();
      v12 = (__src - v10) >> 3;
      v13 = a1 + 24;
      v14 = v9 - (_QWORD)v10;
      if (v14 >> 2 > v11)
        v11 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v11;
      v31[4] = a1 + 24;
      if (v15)
        v16 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v13, v15);
      else
        v16 = 0;
      v27 = &v16[8 * v12];
      v31[0] = v16;
      v31[1] = v27;
      v31[3] = &v16[8 * v15];
      v28 = 8 * a3;
      v29 = &v27[8 * a3];
      do
      {
        *(_QWORD *)v27 = *(_QWORD *)v5;
        v27 += 8;
        v28 -= 8;
      }
      while (v28);
      v31[2] = v29;
      v4 = std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)v31, v4);
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v31);
    }
  }
  return v4;
}

TRunGlue *TRunGlue::InsertedGlyphsAtCharIndex(TRunGlue *this, uint64_t a2, uint64_t a3)
{
  TRunGlue *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = this;
  *(_QWORD *)(*(_QWORD *)this + 144) += a2;
  v4 = *((_QWORD *)this + 19);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 <= a3)
  {
    if (*(_QWORD *)(v4 + 16) + v5 > a3)
    {
      this = (TRunGlue *)TRunGlue::UpdateForCurrentRealRun(this);
      *((_QWORD *)v3 + 21) += a2;
      v9 = *((_QWORD *)v3 + 4);
      if (v9 != -1)
        *((_QWORD *)v3 + 4) = v9 + a2;
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16)
                               + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, 0))
                   + 48);
    *((_QWORD *)v3 + 19) = v7;
    *((_QWORD *)v3 + 20) = 0;
    *((_QWORD *)v3 + 21) = *(_QWORD *)(v7 + 208);
    return (TRunGlue *)TRunGlue::SelectRun(v3, v6);
  }
  return this;
}

uint64_t ApplyModifiedCombiningClasses(char **a1, int a2, _QWORD *a3, char *a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  _OWORD *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  UChar32 v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int CombiningClass;
  int v27;
  BOOL v28;
  _OWORD *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *i;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  void **v55[5];
  uint64_t v56;
  char v57;
  char v58;
  _OWORD *v59;
  _BYTE *v60;
  char *v61;
  _OWORD v62[2];
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  v10 = v9 - *a1;
  if ((*(_WORD *)*a1 & 0xFC00) == 0xD800 && v10 != 2)
  {
    if ((*((_WORD *)v8 + 1) & 0xFC00) == 0xDC00)
      v11 = 2;
    else
      v11 = 1;
  }
  else
  {
    v11 = 1;
  }
  v12 = v10 >> 1;
  if (v10 >> 1 >= (unint64_t)(v11 + 2))
  {
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v62[0] = v14;
    v62[1] = v14;
    v15 = v62;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v63 = (char *)v62;
    if (v9 != v8)
    {
      if (v10 < 0)
        abort();
      if ((unint64_t)v10 <= 0x3C)
        v63 = (char *)&v59 + v12 + 24;
      else
        v15 = operator new(v10 >> 1);
      v16 = (char *)v15 + v12;
      v59 = v15;
      v61 = (char *)v15 + v12;
      bzero(v15, v10 >> 1);
      v60 = v16;
    }
    if (v11 == v12)
    {
      v17 = v10 >> 1;
      if ((a2 & 1) == 0)
        goto LABEL_78;
    }
    else
    {
      v18 = 0;
      v19 = v11;
      do
      {
        v20 = *a1;
        v21 = v19 + 1;
        v22 = *(unsigned __int16 *)&(*a1)[2 * v19];
        if ((v22 & 0xFC00) == 0xD800 && v21 != (a1[1] - v20) >> 1)
        {
          v23 = *(unsigned __int16 *)&v20[2 * v21];
          v24 = (v23 & 0xFC00) == 56320;
          v25 = v23 + (v22 << 10) - 56613888;
          v21 = v24 ? v19 + 2 : v19 + 1;
          if (v24)
            v22 = v25;
        }
        CombiningClass = u_getCombiningClass(v22);
        if (CombiningClass > 0x21)
          v27 = 0;
        else
          v27 = byte_184948534[CombiningClass];
        v28 = v27 != 0;
        if (!v27)
          LOBYTE(v27) = CombiningClass;
        if (v19 != v21)
        {
          do
            *((_BYTE *)v59 + v19++) = v27;
          while (v21 != v19);
          v19 = v21;
        }
        v18 |= v28;
      }
      while (v19 != v12);
      if (!a2)
      {
        if ((v18 & 1) == 0)
        {
LABEL_78:
          v13 = 0;
LABEL_79:
          v55[0] = (void **)&v59;
          std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](v55);
          return v13 & 1;
        }
LABEL_39:
        if (a1 != (char **)a4)
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(a4, *a1, (uint64_t)a1[1], (a1[1] - *a1) >> 1);
        v29 = v59;
        v30 = v60;
        v31 = (char *)v59 + v11;
        if ((char *)v59 + v11 == v60)
          goto LABEL_64;
        while (!*v31)
        {
          if (++v31 == v60)
          {
            v31 = v60;
            break;
          }
        }
        if (v31 == v60)
        {
LABEL_64:
          v13 = 0;
        }
        else
        {
          v13 = 0;
          do
          {
            for (i = v31 + 1; i != v30; ++i)
            {
              if (!*i)
                goto LABEL_52;
            }
            i = v30;
LABEL_52:
            v33 = (_BYTE *)(v31 - (_BYTE *)v29);
            v34 = (_BYTE *)(i - (_BYTE *)v29);
            if ((uint64_t)v33 < i - (_BYTE *)v29)
            {
              do
              {
                v35 = 8 * (_QWORD)&i[-2 - (_QWORD)v29];
                v36 = (_BYTE *)(i - (_BYTE *)v29);
                if ((uint64_t)(v34 - 1) > (uint64_t)v33)
                {
                  do
                  {
                    v37 = &v36[(_QWORD)v59];
                    v38 = v36[(_QWORD)v59 - 1];
                    v39 = v36[(_QWORD)v59 - 2];
                    if (v38 < v39)
                    {
                      *(v37 - 1) = v39;
                      *(v37 - 2) = v38;
                      v40 = (uint64_t *)(*a3 + v35);
                      v41 = *v40;
                      *v40 = v40[1];
                      v40[1] = v41;
                      v42 = *(_QWORD *)a4 + 2 * (_QWORD)v36;
                      HIDWORD(v43) = *(_DWORD *)(v42 - 4);
                      LODWORD(v43) = HIDWORD(v43);
                      *(_DWORD *)(v42 - 4) = v43 >> 16;
                      v13 = 1;
                    }
                    v44 = v36 - 2;
                    --v36;
                    v35 -= 8;
                  }
                  while ((uint64_t)v44 > (uint64_t)v33);
                }
                ++v33;
              }
              while (v33 != v34);
            }
            if (i == v30)
              break;
            while (!*i)
            {
              if (++i == v30)
              {
                i = v30;
                break;
              }
            }
            v31 = i;
          }
          while (i != v30);
        }
        if ((unint64_t)v10 >= 7 && (a2 & 1) == 0)
        {
          v45 = 0;
          v46 = *a1;
          v47 = 4;
          if (v12 > 4)
            v47 = v10 >> 1;
          v48 = v47 - 3;
          v49 = (char *)v59 + 3;
          v50 = 16;
          do
          {
            v51 = &v46[2 * v45];
            if (*((unsigned __int16 *)v51 + 1) - 1463 <= 1
              && (*((_WORD *)v51 + 2) & 0xFFFB) == 0x5B0
              && (*(_WORD *)&v46[2 * v45 + 6] == 1469 || v49[v45] == 220))
            {
              *(int8x16_t *)(*a3 + v50) = vextq_s8(*(int8x16_t *)(*a3 + v50), *(int8x16_t *)(*a3 + v50), 8uLL);
              v52 = *(_QWORD *)a4 + 2 * v45;
              HIDWORD(v53) = *(_DWORD *)(v52 + 4);
              LODWORD(v53) = HIDWORD(v53);
              *(_DWORD *)(v52 + 4) = v53 >> 16;
              v13 = 1;
            }
            ++v45;
            v50 += 8;
          }
          while (v48 != v45);
        }
        goto LABEL_79;
      }
      v17 = (a1[1] - *a1) >> 1;
    }
    v58 = -86;
    v57 = 0;
    v56 = v17;
    v55[0] = (void **)&v56;
    v55[1] = (void **)&v59;
    v55[2] = (void **)&v58;
    v55[3] = (void **)a1;
    v55[4] = (void **)&v57;
    ModifyArabicCombiningClasses(TInlineVector<unsigned short,30ul> const&,TInlineVector&<unsigned char,30ul>)::$_0::operator()((uint64_t)v55, 230, 26);
    ModifyArabicCombiningClasses(TInlineVector<unsigned short,30ul> const&,TInlineVector&<unsigned char,30ul>)::$_0::operator()((uint64_t)v55, 220, 25);
    goto LABEL_39;
  }
  v13 = 0;
  return v13 & 1;
}

uint64_t ModifyArabicCombiningClasses(TInlineVector<unsigned short,30ul> const&,TInlineVector&<unsigned char,30ul>)::$_0::operator()(uint64_t result, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  unint64_t i;
  uint64_t v14;
  int v15;
  unsigned int v18;
  int v19;

  v3 = **(_QWORD **)result;
  if (v3 >= 2)
  {
    v4 = **(_QWORD **)(result + 8);
    v5 = 1;
    while (*(unsigned __int8 *)(v4 + v5) != a2)
    {
      if (v3 == ++v5)
        return result;
    }
    v6 = *(unsigned __int16 *)(**(_QWORD **)(result + 24) + 2 * v5);
    v7 = (v6 - 2250) > 0x29 || ((1 << (v6 + 54)) & 0x2000000023BLL) == 0;
    if (!v7
      || ((v6 - 1756) <= 0xC ? (v8 = ((1 << (v6 + 36)) & 0x1881) == 0) : (v8 = 1),
          !v8 || ((v9 = v6 - 1620, v10 = v9 > 4, v11 = (1 << v9) & 0x13, !v10) ? (v12 = v11 == 0) : (v12 = 1), !v12)))
    {
      *(_BYTE *)(v4 + v5) = a3;
      **(_BYTE **)(result + 32) = 1;
      for (i = v5 + 1; i < **(_QWORD **)result; *(_BYTE *)(v14 + i++) = a3)
      {
        v14 = **(_QWORD **)(result + 8);
        if (*(unsigned __int8 *)(v14 + i) != a2)
          break;
        v15 = *(unsigned __int16 *)(**(_QWORD **)(result + 24) + 2 * i);
        if (((v15 - 2250) > 0x29 || ((1 << (v15 + 54)) & 0x2000000023BLL) == 0)
          && ((v15 - 1756) > 0xC || ((1 << (v15 + 36)) & 0x1881) == 0))
        {
          v18 = v15 - 1620;
          v10 = v18 > 4;
          v19 = (1 << v18) & 0x13;
          if (v10 || v19 == 0)
            break;
        }
      }
    }
  }
  return result;
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 21;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[21])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _BYTE *v12;
  void **v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  v10 = (uint64_t)(v8 - *(_QWORD *)result) >> 1;
  if (v10 < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      if (result + 24 <= v9 && result + 84 > v9)
      {
        if (&v9[2 * v10] == *((char **)result + 11))
          *((_QWORD *)result + 11) = v9;
      }
      else
      {
        operator delete(v9);
      }
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      abort();
    if (v8 <= a4)
      v19 = a4;
    else
      v19 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    result = std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](v7, v20);
    v21 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v21;
LABEL_24:
    v16 = a3 - (_QWORD)__src;
    if (v16)
    {
      v17 = v9;
      v18 = __src;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  v13 = (void **)(result + 8);
  v12 = (_BYTE *)*((_QWORD *)result + 1);
  v14 = (v12 - v9) >> 1;
  if (v14 >= a4)
    goto LABEL_24;
  v15 = &__src[2 * v14];
  if (v12 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 2 * v14);
    v9 = (char *)*v13;
  }
  v16 = a3 - (_QWORD)v15;
  if (v16)
  {
    v17 = v9;
    v18 = v15;
LABEL_26:
    result = (char *)memmove(v17, v18, v16);
  }
LABEL_27:
  *v13 = &v9[v16];
  return result;
}

uint64_t TCharComposer::ComposeChars(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v7;

  if (a4)
    unorm2_getNFDInstance();
  else
    unorm2_getNFCInstance();
  if (unorm2_isNormalized())
    return 0;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize(a3, a2);
  v7 = unorm2_normalize();
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize(a3, v7);
  return 1;
}

uint64_t TGlyphComposer::ComposeGlyphs(TLine **a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t GlyphIndexForChar;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t InitializedGraphicsFont;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  size_t v29;
  size_t v30;
  unsigned int v31;
  size_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  __int128 *v38;
  unsigned int v39;
  uint64_t v40;
  double v41;
  CGSize *v42;
  double *v43;
  uint64_t NextChar;
  char *v45;
  UChar32 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  UChar32 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  double v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  double BoundingBoxesForGlyphs;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double width;
  uint64_t v77;
  double BoundingBoxForGlyph;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  __int128 v89;
  double v90;
  uint64_t v91;
  UChar32 v92;
  int v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  unsigned int CombiningClass;
  uint64_t v113;
  CGPoint v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double *v119;
  double v120;
  int v121;
  double v122;
  double MaxY;
  double v124;
  CGFloat v125;
  double v126;
  uint64_t v127;
  double v128;
  double v129;
  int *inited;
  double v131;
  double v132;
  double v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double v138;
  unsigned __int8 v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double *v147;
  double v148;
  double v149;
  double MaxX;
  double v151;
  double v152;
  double v153;
  _QWORD *v154;
  void *v155;
  int64_t v156;
  unint64_t v157;
  int64_t v158;
  unint64_t v159;
  char *v160;
  TStorageRange **v161;
  char *v162;
  char *v163;
  char *v164;
  int64x2_t v165;
  CGFloat v166;
  double v167;
  double v168;
  uint64_t v169;
  double v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  TLine **v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  double v184;
  double *v185;
  double v187;
  double *v188;
  uint64_t v189;
  double v190;
  double v191;
  TLine *v192;
  uint64_t v193;
  _QWORD *v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  unint64_t v199;
  TFont *v200;
  int v201;
  double v203;
  double v204;
  char v205;
  double v206;
  double v207;
  CGFloat v208;
  CGFloat v209;
  CGFloat v210;
  double v211;
  double v212;
  double v213;
  CGFloat r1;
  TStorageRange *v215;
  CGFloat v216;
  CGFloat v217;
  unint64_t v218;
  unint64_t v219;
  double rect;
  double v221;
  double x;
  uint64_t v223;
  double y;
  int v225;
  uint64_t v226;
  uint64_t v228;
  _WORD *v229;
  uint64_t v230;
  void *v231[2];
  void *v232[2];
  unint64_t v233;
  unsigned __int16 v234;
  CGAffineTransform v235;
  void *__p[2];
  _QWORD v237[61];
  _QWORD v238[5];
  CGSize v239;
  CGRect v240;
  CGRect v241;
  CGRect v242;
  CGRect v243;
  CGRect v244;
  CGRect v245;
  CGRect v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;
  CGRect v250;
  CGRect v251;

  v6 = a2;
  v238[2] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 2) + 8 * TLine::FindRunWithCharIndex(*a1, a2, 1)) + 48);
  v225 = *(unsigned __int8 *)(v7 + 224);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v7, v6);
  objc_msgSend(*(id *)(v7 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 40) + 4 * *(_QWORD *)(v7 + 200) + 4 * GlyphIndexForChar) & 0xFFFFFFF6 | 8, *(_QWORD *)(v7 + 200) + GlyphIndexForChar);
  v11 = atomic_load((unint64_t *)(v7 + 56));
  v12 = *(_QWORD *)(v11 + 40);
  v13 = *(_QWORD **)(v12 + 400);
  if (v13[25])
  {
    v226 = v13[25];
  }
  else
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v12 + 400));
    v226 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v13 + 872))(v13, InitializedGraphicsFont);
    v13 = *(_QWORD **)(v12 + 400);
  }
  v15 = *(_QWORD *)(a3 + 8);
  v229 = *(_WORD **)a3;
  if (((*(uint64_t (**)(_QWORD *))(*v13 + 712))(v13) & 1) != 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 400) + 688))(*(_QWORD *)(v12 + 400)) & 1) != 0)
  {
LABEL_6:
    v16 = 0;
    return v16 & 1;
  }
  v18 = v9 + v8;
  v19 = v15 - (_QWORD)v229;
  v20 = 1;
  if ((*v229 & 0xFC00) == 0xD800 && v19 != 2)
  {
    if ((v229[1] & 0xFC00) == 0xDC00)
      v20 = 2;
    else
      v20 = 1;
  }
  v21 = v19 >> 1;
  if (*(_BYTE *)(v7 + 90))
  {
    v228 = v19 >> 1;
    v22 = *a4;
    v23 = a4[1];
    v24 = *a4;
    if (*a4 != v23)
    {
      while (*(_QWORD *)v24 != v6)
      {
        v24 += 8;
        if (v24 == v23)
        {
          v24 = a4[1];
          break;
        }
      }
    }
    if (v24 == v23)
      goto LABEL_6;
    v25 = TRun::GetGlyphIndexForCharIndex<false>(v7, v6);
    v26 = *(_QWORD *)(v7 + 216);
    v27 = *(_QWORD *)(v26 + 32);
    if (v27 || (v40 = *(_QWORD *)(v26 + 24)) == 0)
      v28 = (double *)(v27 + 16 * *(_QWORD *)(v7 + 200) + 16 * v25);
    else
      v28 = (double *)(v40 + 8 * *(_QWORD *)(v7 + 200) + 8 * v25);
    v16 = 0;
    v41 = -*v28;
    v42 = (CGSize *)MEMORY[0x1E0C9D820];
    v43 = (double *)MEMORY[0x1E0C9D538];
    while (1)
    {
      __p[0] = (void *)TRun::GetGlyphIndexForCharIndex<false>(v7, v6);
      NextChar = TRun::GetNextChar((TRun *)v7, v6, (uint64_t *)__p);
      v6 = NextChar;
      v45 = v23;
      if (v24 != v23)
      {
        while (*(_QWORD *)v24 != NextChar)
        {
          v24 += 8;
          if (v24 == v23)
          {
            v45 = v23;
            goto LABEL_52;
          }
        }
        v45 = v24;
      }
LABEL_52:
      if (v45 == v23)
        return v16 & 1;
      v46 = *(unsigned __int16 *)((char *)v229 + ((v45 - v22) >> 2));
      if ((v46 & 0xF800) == 0xD800)
      {
        v47 = (v45 - v22) >> 3;
        if ((v46 & 0x400) != 0)
        {
          if (v45 == v22)
            goto LABEL_62;
          v52 = (unsigned __int16)v229[v47 - 1];
          v50 = (v52 & 0xFC00) == 55296;
          v51 = v46 + (v52 << 10);
        }
        else
        {
          v48 = v47 + 1;
          if (v48 == v228)
            goto LABEL_62;
          v49 = (unsigned __int16)v229[v48];
          v50 = (v49 & 0xFC00) == 56320;
          v51 = v49 + (v46 << 10);
        }
        v53 = v51 - 56613888;
        if (v50)
          v46 = v53;
      }
LABEL_62:
      if (u_charType(v46) != 7)
        return v16 & 1;
      if (v18 <= v6)
      {
        while (1)
        {
          v7 = *(_QWORD *)(v7 + 24);
          if (!v7)
            return v16 & 1;
          v18 = *(_QWORD *)(v7 + 16) + *(_QWORD *)(v7 + 8);
          if (v18 > v6)
          {
            if (!*(_BYTE *)(v7 + 90))
              return v16 & 1;
            break;
          }
        }
      }
      v54 = TRun::GetGlyphIndexForCharIndex<false>(v7, v6);
      TStorageRange::SetAdvance((TStorageRange *)(v7 + 192), v54, *v42);
      objc_msgSend(*(id *)(v7 + 216), "setOrigin:atIndex:", *(_QWORD *)(v7 + 200) + v54, v41, 0.0);
      if (*v43 == v41)
      {
        v16 = 1;
        v24 = v45;
        if (v43[1] == 0.0)
          continue;
      }
      *(_BYTE *)(v7 + 225) |= 0x10u;
      v16 = 1;
      v24 = v45;
    }
  }
  *(_OWORD *)v231 = 0u;
  *(_OWORD *)v232 = 0u;
  v233 = 0xAAAAAAAA3F800000;
  std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>((uint64_t)v231, v21);
  if (v20 < v21)
  {
    v223 = GlyphIndexForChar;
    v29 = v21;
    while (1)
    {
      v30 = v20++;
      v31 = (unsigned __int16)v229[v30];
      v32 = v29;
      if (v20 != v29 && (v31 & 0xFC00) == 0xD800)
      {
        v33 = (unsigned __int16)v229[v20];
        v34 = (v33 & 0xFC00) == 56320;
        v35 = (v31 << 10) - 56613888 + v33;
        v20 = v34 ? v30 + 2 : v30 + 1;
        if (v34)
          v31 = v35;
      }
      if (u_hasBinaryProperty(v31, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))
        break;
      if (v31 >= 0x590)
      {
        if (v31 < 0x700)
          break;
        v36 = ScriptCodeForLongCharacter(v31);
        if (v36)
        {
          v37 = 0;
          while (IsPossiblyAcceptable(UScriptCode)::kExcludedScripts[v37] != v36)
          {
            if (++v37 == 8)
            {
              v38 = &xmmword_184948600;
              goto LABEL_40;
            }
          }
          v38 = (__int128 *)&IsPossiblyAcceptable(UScriptCode)::kExcludedScripts[v37];
LABEL_40:
          if ((char *)v38 - (char *)IsPossiblyAcceptable(UScriptCode)::kExcludedScripts != 32)
            break;
          v39 = ScriptTagForScriptCode(v36);
          FirstBlockForScript(0, v39, (uint64_t)__p);
          if (__p[0])
            break;
        }
      }
      __p[0] = *(void **)&(*a4)[8 * v30];
      *(_OWORD *)(std::__hash_table<std::__hash_value_type<long,CGPoint>,std::__unordered_map_hasher<long,std::__hash_value_type<long,CGPoint>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,CGPoint>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,CGPoint>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)v231, (unint64_t)__p[0], (uint64_t *)__p)+ 3) = *MEMORY[0x1E0C9D538];
      v29 = v32;
      if (v20 >= v32)
      {
        v21 = v32;
        goto LABEL_71;
      }
    }
    v21 = v30;
LABEL_71:
    GlyphIndexForChar = v223;
  }
  if (!v232[1]
    || (v55 = TRun::GetGlyphIndexForCharIndex<false>(v7, v6),
        v56 = *(_QWORD **)(v7 + 216),
        v57 = *(_QWORD *)(v7 + 200),
        (*(_DWORD *)(v56[5] + 4 * v57 + 4 * v55) & 0x380) != 0))
  {
    v16 = 0;
    goto LABEL_271;
  }
  v58 = *(unsigned __int16 *)(v56[2] + 2 * v57 + 2 * v55);
  if ((*(_BYTE *)(v7 + 225) & 0x10) != 0)
  {
    objc_msgSend(v56, "originAtIndex:", v57 + v55);
    v60 = v61;
    v59 = v62;
  }
  else
  {
    v60 = *MEMORY[0x1E0C9D538];
    v59 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  LOWORD(v235.a) = v58;
  *(_QWORD *)&v63 = -1;
  *((_QWORD *)&v63 + 1) = -1;
  *(_OWORD *)__p = v63;
  *(_OWORD *)v237 = v63;
  BoundingBoxesForGlyphs = TFont::GetBoundingBoxesForGlyphs((TFont *)v12, (const unsigned __int16 *)&v235, (CGRect *)__p, 1, kCTFontOrientationDefault);
  v68 = v67;
  v69 = *(_QWORD *)(v7 + 216);
  v70 = *(_QWORD *)(v69 + 32);
  if (v70 || (v73 = *(_QWORD *)(v69 + 24)) == 0)
  {
    v71 = (double *)(v70 + 16 * *(_QWORD *)(v7 + 200) + 16 * v55);
    v72 = v71[1];
  }
  else
  {
    v71 = (double *)(v73 + 8 * *(_QWORD *)(v7 + 200) + 8 * v55);
    v72 = 0.0;
  }
  x = v60 + BoundingBoxesForGlyphs;
  y = v59 + v65;
  v75 = *MEMORY[0x1E0C9D538];
  v74 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v221 = *v71;
  if (v66 == 0.0)
    width = *v71;
  else
    width = v66;
  __p[0] = (void *)TRun::GetGlyphIndexForCharIndex<false>(v7, v6);
  v230 = TRun::GetNextChar((TRun *)v7, v6, (uint64_t *)__p);
  v77 = v20 + v6;
  BoundingBoxForGlyph = NAN;
  *(double *)&v79 = NAN;
  if ((int64_t)(v20 + v6) >= *((_QWORD *)*a1 + 10) + *((_QWORD *)*a1 + 9))
    goto LABEL_102;
  v80 = v7;
  while (1)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if (v81 <= v77 && *(_QWORD *)(v80 + 16) + v81 > v77)
      break;
    v80 = *(_QWORD *)(v80 + 24);
    if (!v80)
      goto LABEL_102;
  }
  if (v7 == v80)
    goto LABEL_275;
  if (*(unsigned __int8 *)(v7 + 224) != *(unsigned __int8 *)(v80 + 224)
    || (*(_BYTE *)(v7 + 90) != 0) != (*(_BYTE *)(v80 + 90) != 0))
  {
    goto LABEL_102;
  }
  v83 = *(_QWORD *)(v7 + 160);
  v84 = 0.0;
  v85 = 0.0;
  if (v83)
    v85 = *(double *)(v83 + 48);
  v86 = *(_QWORD *)(v80 + 160);
  if (v86)
    v84 = *(double *)(v86 + 48);
  if (v85 == v84)
  {
LABEL_275:
    v198 = TRun::GetGlyphIndexForCharIndex<false>(v80, v77);
    v199 = atomic_load((unint64_t *)(v80 + 56));
    v200 = *(TFont **)(v199 + 40);
    v201 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v80 + 216) + 16) + 2 * *(_QWORD *)(v80 + 200) + 2 * v198);
    if (v200 == (TFont *)v12 && v201 == v58)
    {
      v87 = 0;
      *(double *)&v79 = v68;
      v207 = y;
      v208 = width;
      BoundingBoxForGlyph = x;
    }
    else
    {
      BoundingBoxForGlyph = TFont::GetBoundingBoxForGlyph(v200, v201);
      v207 = v203;
      v208 = v204;
      v87 = 0;
    }
  }
  else
  {
LABEL_102:
    v87 = 1;
    v207 = NAN;
    v208 = NAN;
  }
  v88 = 1;
  v209 = *(double *)&v79;
  v210 = BoundingBoxForGlyph;
  rect = v68;
  if (v21 != 1 && (*v229 & 0xFC00) == 0xD800)
  {
    if ((v229[1] & 0xFC00) == 0xDC00)
      v88 = 2;
    else
      v88 = 1;
  }
  *(_QWORD *)&v89 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v89 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v237[57] = v89;
  *(_OWORD *)&v237[59] = v89;
  *(_OWORD *)&v237[53] = v89;
  *(_OWORD *)&v237[55] = v89;
  *(_OWORD *)&v237[49] = v89;
  *(_OWORD *)&v237[51] = v89;
  *(_OWORD *)&v237[45] = v89;
  *(_OWORD *)&v237[47] = v89;
  *(_OWORD *)&v237[41] = v89;
  *(_OWORD *)&v237[43] = v89;
  *(_OWORD *)&v237[37] = v89;
  *(_OWORD *)&v237[39] = v89;
  *(_OWORD *)&v237[33] = v89;
  *(_OWORD *)&v237[35] = v89;
  *(_OWORD *)&v237[31] = v89;
  *(_OWORD *)&v237[29] = v89;
  *(_OWORD *)&v237[27] = v89;
  *(_OWORD *)&v237[25] = v89;
  *(_OWORD *)&v237[23] = v89;
  *(_OWORD *)&v237[21] = v89;
  *(_OWORD *)&v237[19] = v89;
  *(_OWORD *)&v237[17] = v89;
  *(_OWORD *)&v237[15] = v89;
  *(_OWORD *)&v237[13] = v89;
  *(_OWORD *)&v237[11] = v89;
  *(_OWORD *)&v237[9] = v89;
  *(_OWORD *)&v237[7] = v89;
  *(_OWORD *)&v237[5] = v89;
  *(_OWORD *)&v237[3] = v89;
  *(_OWORD *)&v237[1] = v89;
  __p[0] = 0;
  __p[1] = 0;
  v90 = 0.0;
  v237[0] = 0;
  v238[0] = &v237[1];
  if (v88 >= v21)
    goto LABEL_231;
  v205 = v87;
  v91 = v7;
  v206 = v60;
  v211 = v59;
  while (1)
  {
    v92 = (unsigned __int16)v229[v88];
    if (v88 + 1 == v21 || (v92 & 0xFC00) != 0xD800)
    {
      ++v88;
    }
    else
    {
      v93 = (unsigned __int16)v229[v88 + 1];
      v94 = (v93 & 0xFC00) == 56320;
      v95 = v93 + (v92 << 10) - 56613888;
      if (v94)
        v88 += 2;
      else
        ++v88;
      if (v94)
        v92 = v95;
    }
    v96 = v230;
    if (v18 <= v230)
      break;
LABEL_130:
    v104 = TRun::GetGlyphIndexForCharIndex<false>(v91, v96);
    if (v226 > *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v91 + 216) + 16)
                                    + 2 * *(_QWORD *)(v91 + 200)
                                    + 2 * v104))
    {
      v105 = v104;
      v215 = (TStorageRange *)(v91 + 192);
      v234 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 216) + 16) + 2 * *(_QWORD *)(v91 + 200) + 2 * v104);
      *(_QWORD *)&v106 = -1;
      *((_QWORD *)&v106 + 1) = -1;
      *(_OWORD *)&v235.a = v106;
      *(_OWORD *)&v235.c = v106;
      v107 = TFont::GetBoundingBoxesForGlyphs((TFont *)v12, &v234, (CGRect *)&v235, 1, kCTFontOrientationDefault);
      v213 = v108;
      v110 = v109;
      v217 = v111;
      CombiningClass = u_getCombiningClass(v92);
      v212 = v72;
      r1 = v110;
      v216 = width;
      v219 = v88;
      if (CombiningClass)
      {
        if (CombiningClass >= 0x85)
        {
          if (CombiningClass == 240)
            v115 = -36;
          else
            v115 = CombiningClass;
        }
        else
        {
          v115 = TGlyphComposer::GetResolvedCombiningClass::kCombiningClassResolveTable[CombiningClass];
          if (!v115)
            goto LABEL_134;
        }
        if ((v115 + 23) <= 1u)
        {
          if ((v205 & 1) == 0)
          {
            v240.size.width = width;
            v240.origin.x = x;
            v122 = y;
            v240.origin.y = y;
            v240.size.height = rect;
            MaxY = CGRectGetMaxY(v240);
            v241.size.height = v209;
            v241.origin.x = v210;
            v241.size.width = v208;
            v241.origin.y = v207;
            v124 = CGRectGetMaxY(v241);
            if (MaxY >= v124)
              v124 = MaxY;
            if (v207 < y)
              v122 = v207;
            y = v122;
            rect = v124 - v122;
          }
          v125 = v107;
          v235.a = NAN;
          TAttributes::GetKernSetting((TAttributes *)(v7 + 40), &v235.a, 0);
          v126 = v221 + v235.a * 0.5;
          v121 = 1;
LABEL_155:
          if (v115 >= 0xDAu)
          {
            if (v115 == 224 || v115 == 226)
              goto LABEL_163;
            v127 = *(_QWORD *)(v12 + 400);
            TFont::GetScaledMatrix((TFont *)v12, &v235);
            v128 = (*(double (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v127 + 608))(v127, &v235);
            v129 = v128;
            inited = (int *)(v12 + 48);
            if (!*(_DWORD *)(v12 + 48))
            {
              v131 = v126;
              v132 = v128;
              inited = TFont::InitStrikeMetrics((TFont *)v12);
              v129 = v132;
              v126 = v131;
            }
            v133 = *((double *)inited + 4);
            if (v129 == 0.0
              || (v242.origin.x = x,
                  v242.origin.y = y,
                  v242.size.width = v216,
                  v242.size.height = rect,
                  CGRectGetMaxY(v242) >= v133))
            {
              if (v133 == 0.0 && !*(_DWORD *)(v12 + 48))
                TFont::InitStrikeMetrics((TFont *)v12);
            }
            v125 = v107;
            if (v121)
            {
              if (v126 >= 0.0)
                v167 = v126;
              else
                v167 = 0.0;
              v168 = v167 - v126;
              if (v115 == 234)
                v169 = 1;
              else
                v169 = 2;
              v170 = y;
              v171 = rect;
              v251.origin.x = v107;
              v142 = v213;
              v251.origin.y = v213;
              v251.size.height = v217;
              v251.size.width = v110 * 0.5;
              TGlyphComposer::PositionBaseOtherTopCenteringGap((TGlyphComposer *)4, *(CGRect *)(&v167 - 2), v251, v169, v113, v114);
              v144 = v172;
              v146 = v173;
              v134 = 2;
              v118 = v105;
LABEL_183:
              if (v90 < v144)
                v90 = v144;
              v147 = (double *)std::__hash_table<std::__hash_value_type<long,CGPoint>,std::__unordered_map_hasher<long,std::__hash_value_type<long,CGPoint>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,CGPoint>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,CGPoint>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)v231, v230, &v230);
              v147[3] = v144;
              v147[4] = v146;
              TStorageRange::SetAdvance(v215, v118, *MEMORY[0x1E0C9D820]);
              TRun::NoteCrossStreamPosition((TRun *)v91, v146);
              v148 = v107 + v144;
              v149 = v142 + v146;
              if (v134 == 1)
              {
                v243.origin.x = v107 + v144;
                v243.origin.y = v149;
                v243.size.width = r1;
                v243.size.height = v217;
                MaxX = CGRectGetMaxX(v243);
                v244.origin.x = x;
                v244.origin.y = y;
                v244.size.width = v216;
                v244.size.height = rect;
                v151 = MaxX - CGRectGetMaxX(v244);
                if (v151 < 0.0)
                  v151 = 0.0;
                v152 = v221 + v151;
                v245.origin.x = v148;
                v245.origin.y = v149;
                v245.size.width = r1;
                v245.size.height = v217;
                v153 = v75 + CGRectGetMinX(v245);
                v60 = v206;
                v88 = v219;
                if (v153 >= 0.0)
                {
                  v72 = v212;
                  v221 = v152;
                }
                else
                {
                  v221 = v152 - v153;
                  v75 = v75 - v153;
                  v72 = v212;
                }
              }
              else
              {
                v60 = v206;
                v72 = v212;
                v88 = v219;
              }
              goto LABEL_192;
            }
            if (v115 > 0xDFu)
LABEL_163:
              v115 -= 16;
            else
              v115 -= 18;
          }
          v134 = v115;
          if (v115 == 1)
          {
            v136 = 2;
            v135 = 3;
            v137 = x;
            v138 = v216;
            v118 = v105;
          }
          else
          {
            v118 = v105;
            if (v134 == 210)
            {
              v135 = 0;
              v136 = 4;
            }
            else
            {
              if (v134 == 208)
              {
                v135 = 0;
                v136 = 0;
                goto LABEL_181;
              }
              v139 = v134 - 12;
              if (v134 >= 0xD0)
                v135 = 1;
              else
                v135 = 2;
              if (v134 < 0xD0)
                v139 = v134;
              v136 = v139 - 200;
              if (v139 == 202)
              {
                v134 = 2;
                v136 = 2;
                v137 = x;
                if (v126 > 0.0)
                  v137 = 0.0;
                v138 = v216;
                if (v126 > 0.0)
                  v138 = v126;
                goto LABEL_182;
              }
            }
LABEL_181:
            v134 = 1;
            v137 = x;
            v138 = v216;
          }
LABEL_182:
          v140 = y;
          v141 = rect;
          v249.origin.x = v125;
          v142 = v213;
          v249.origin.y = v213;
          v249.size.width = v110;
          v249.size.height = v217;
          TGlyphComposer::PositionBaseOtherTopCenteringGap((TGlyphComposer *)v136, *(CGRect *)&v137, v249, v135, v113, v114);
          v107 = v125;
          v144 = v143;
          v146 = v145;
          goto LABEL_183;
        }
        v121 = 0;
      }
      else
      {
        if ((v92 - 8413) > 7 || v92 == 8417)
        {
LABEL_134:
          if (u_getIntPropertyValue(v92, UCHAR_GRAPHEME_CLUSTER_BREAK) != 10)
          {
            v118 = v105;
            if ((CFUniCharIsMemberOf() & 1) != 0)
            {
              v134 = 1;
              v144 = x;
              v146 = y;
            }
            else
            {
              v248.origin.x = x;
              v248.origin.y = y;
              v248.size.width = width;
              v248.size.height = rect;
              v144 = CGRectGetMaxX(v248);
              v146 = 0.0;
              v134 = 1;
            }
            v142 = v213;
            goto LABEL_183;
          }
          if (v90 < v221 + *MEMORY[0x1E0C9D538])
            v90 = v221 + *MEMORY[0x1E0C9D538];
          v116 = *(_QWORD *)(v91 + 216);
          v117 = *(_QWORD *)(v116 + 32);
          v118 = v105;
          if (v117 || (v174 = *(_QWORD *)(v116 + 24)) == 0)
          {
            v119 = (double *)(v117 + 16 * *(_QWORD *)(v91 + 200) + 16 * v105);
            v120 = v119[1];
          }
          else
          {
            v119 = (double *)(v174 + 8 * *(_QWORD *)(v91 + 200) + 8 * v105);
            v120 = 0.0;
          }
          v148 = v221 + v107;
          v149 = v72 + v213;
          v221 = v221 + *v119;
          v72 = v72 + v120;
LABEL_192:
          v246.origin.x = v148;
          v246.origin.y = v149;
          v246.size.width = r1;
          v250.size.width = v216;
          v246.size.height = v217;
          v250.origin.x = x;
          v250.origin.y = y;
          v250.size.height = rect;
          v247 = CGRectUnion(v246, v250);
          x = v247.origin.x;
          y = v247.origin.y;
          width = v247.size.width;
          rect = v247.size.height;
          v154 = __p[1];
          if (__p[1] >= (void *)v237[0])
          {
            v156 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            v157 = v156 + 1;
            v59 = v211;
            if ((unint64_t)(v156 + 1) >> 60)
              abort();
            v158 = v237[0] - (unint64_t)__p[0];
            if ((uint64_t)(v237[0] - (unint64_t)__p[0]) >> 3 > v157)
              v157 = v158 >> 3;
            if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF0)
              v159 = 0xFFFFFFFFFFFFFFFLL;
            else
              v159 = v157;
            *(_QWORD *)&v235.tx = &v237[1];
            v160 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)&v237[1], v159);
            v161 = (TStorageRange **)&v160[16 * v156];
            *v161 = v215;
            v161[1] = (TStorageRange *)v118;
            v163 = (char *)__p[0];
            v162 = (char *)__p[1];
            if (__p[1] == __p[0])
            {
              v165 = vdupq_n_s64((unint64_t)__p[1]);
              v164 = &v160[16 * v156];
            }
            else
            {
              v164 = &v160[16 * v156];
              do
              {
                *((_OWORD *)v164 - 1) = *((_OWORD *)v162 - 1);
                v164 -= 16;
                v162 -= 16;
              }
              while (v162 != v163);
              v165 = *(int64x2_t *)__p;
            }
            v155 = v161 + 2;
            __p[0] = v164;
            __p[1] = v161 + 2;
            *(int64x2_t *)&v235.b = v165;
            v166 = *(double *)v237;
            v237[0] = &v160[16 * v159];
            v235.d = v166;
            *(_QWORD *)&v235.a = v165.i64[0];
            std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v235);
          }
          else
          {
            *(_QWORD *)__p[1] = v215;
            v154[1] = v118;
            v155 = v154 + 2;
            v59 = v211;
          }
          __p[1] = v155;
          goto LABEL_207;
        }
        v121 = 0;
        v115 = 1;
      }
      v126 = v221;
      v125 = v107;
      goto LABEL_155;
    }
LABEL_207:
    v6 = v230;
    *(_QWORD *)&v235.a = TRun::GetGlyphIndexForCharIndex<false>(v91, v230);
    v230 = TRun::GetNextChar((TRun *)v91, v6, (uint64_t *)&v235);
    if (v88 >= v21)
      goto LABEL_231;
  }
  v218 = v88;
  while (1)
  {
    v91 = *(_QWORD *)(v91 + 24);
    if (!v91)
      break;
    v97 = *(_QWORD *)(v91 + 8);
    v98 = *(_QWORD *)(v91 + 16);
    v99 = atomic_load((unint64_t *)(v91 + 56));
    v12 = *(_QWORD *)(v99 + 40);
    v100 = *(_QWORD **)(v12 + 400);
    v101 = v100[25];
    if (!v101)
    {
      v102 = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v12 + 400));
      v101 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v100 + 872))(v100, v102);
    }
    v18 = v98 + v97;
    v103 = v230;
    if (v18 > v230)
    {
      v226 = v101;
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 400) + 712))(*(_QWORD *)(v12 + 400)) & 1) == 0
        && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 400) + 688))(*(_QWORD *)(v12 + 400)) & 1) == 0
        && *(unsigned __int8 *)(v91 + 224) == v225
        && !*(_BYTE *)(v91 + 90))
      {
        v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 216) + 48)
                        + 8 * *(_QWORD *)(v91 + 200)
                        + 8 * TRun::GetGlyphIndexForCharIndex<false>(v91, v103));
        v230 = v96;
        v88 = v218;
        goto LABEL_130;
      }
      break;
    }
  }
LABEL_231:
  v175 = __p[0];
  v176 = __p[1];
  v177 = (char *)__p[1] - 16;
  if (__p[0] != __p[1] && v177 > __p[0])
  {
    v179 = a1;
    do
    {
      v180 = *v175;
      *v175 = *v177;
      *v177 = v180;
      v181 = v175[1];
      v175[1] = v177[1];
      v177[1] = v181;
      v175 += 2;
      v177 -= 2;
    }
    while (v175 < v177);
    v175 = __p[0];
    v176 = __p[1];
  }
  else
  {
    v179 = a1;
  }
  if (v175 != v176)
  {
    v182 = 1;
    do
    {
      if ((v182 & 1) == 0)
        objc_msgSend(*(id *)(*v175 + 24), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v175 + 24) + 40) + 4 * *(_QWORD *)(*v175 + 8) + 4 * v175[1]) | 8u, *(_QWORD *)(*v175 + 8) + v175[1]);
      v182 = 0;
      v175 += 2;
    }
    while (v175 != v176);
  }
  if (v221 >= v90 || v6 != *((_QWORD *)*v179 + 9) + *((_QWORD *)*v179 + 10) - 1)
    v90 = v221;
  v239.width = v90;
  v239.height = v72;
  TStorageRange::SetAdvance((TStorageRange *)(v7 + 192), GlyphIndexForChar, v239);
  v184 = v59 + v74;
  objc_msgSend(*(id *)(v7 + 216), "setOrigin:atIndex:", *(_QWORD *)(v7 + 200) + GlyphIndexForChar, v60 + v75, v184);
  v185 = (double *)MEMORY[0x1E0C9D538];
  if (v60 + v75 != *MEMORY[0x1E0C9D538] || v184 != *(double *)(MEMORY[0x1E0C9D538] + 8))
    *(_BYTE *)(v7 + 225) |= 0x10u;
  if ((v225 & 1) != 0)
    v187 = *MEMORY[0x1E0C9D820];
  else
    v187 = v90;
  if ((v225 & 1) != 0)
    v72 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v188 = (double *)v232[0];
  if (v232[0])
  {
    do
    {
      v189 = *((_QWORD *)v188 + 2);
      v190 = v75 + v188[3] - v187;
      v191 = v74 + v188[4] - v72;
      v192 = *v179;
      v193 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v192 + 2) + 8 * TLine::FindRunWithCharIndex(*v179, v189, 1)) + 48);
      objc_msgSend(*(id *)(v193 + 216), "setOrigin:atIndex:", *(_QWORD *)(v193 + 200) + TRun::GetGlyphIndexForCharIndex<false>(v193, v189), v190, v191);
      if (v190 != *v185 || v191 != v185[1])
        *(_BYTE *)(v193 + 225) |= 0x10u;
      v188 = *(double **)v188;
    }
    while (v188);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    if (&v237[1] > __p[0] || v238 <= __p[0])
      operator delete(__p[0]);
  }
  v16 = 1;
LABEL_271:
  v195 = v232[0];
  if (v232[0])
  {
    do
    {
      v196 = (_QWORD *)*v195;
      operator delete(v195);
      v195 = v196;
    }
    while (v196);
  }
  v197 = v231[0];
  v231[0] = 0;
  if (v197)
    operator delete(v197);
  return v16 & 1;
}

double TFont::GetBoundingBoxForGlyph(TFont *this, unsigned __int16 a2)
{
  CGSize v2;
  CGRect v4;
  unsigned __int16 v5;

  v5 = a2;
  v2.width = NAN;
  v2.height = NAN;
  v4.origin = (CGPoint)v2;
  v4.size = v2;
  return TFont::GetBoundingBoxesForGlyphs(this, &v5, &v4, 1, kCTFontOrientationDefault);
}

void TGlyphComposer::PositionBaseOtherTopCenteringGap(TGlyphComposer *this, CGRect a2, CGRect a3, uint64_t a4, uint64_t a5, CGPoint a6)
{
  ;
}

_QWORD *std::__hash_table<std::__hash_value_type<long,CGPoint>,std::__unordered_map_hasher<long,std::__hash_value_type<long,CGPoint>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,CGPoint>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,CGPoint>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = a2;
  v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2)
        v8 = a2 % v6;
      else
        v8 = a2;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v8) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v21 >= v6)
        v21 %= v6;
    }
    else
    {
      v21 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void ZapfTable::ZapfTable(ZapfTable *this, id a2, uint64_t a3)
{
  id v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  SFNTLookupTable *v9;
  const SFNTLookupTable *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;

  v6 = a2;
  *((_QWORD *)this + 5) = TAATLookupTable::BadTable;
  *(_QWORD *)this = v6;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_WORD *)this + 44) = -1;
  if (a2)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    v8 = CFDataGetBytePtr((CFDataRef)a2);
    if (v8)
    {
      v9 = (SFNTLookupTable *)&v8[CFDataGetLength((CFDataRef)a2)];
      v10 = (const SFNTLookupTable *)(BytePtr + 8);
      if (BytePtr + 8 <= (const UInt8 *)v9)
      {
        v11 = bswap32(*(unsigned __int16 *)BytePtr) >> 16;
        *((_QWORD *)this + 3) = v11;
        if ((_DWORD)v11 == 2)
        {
          TAATLookupTable::SetTable((uint64_t)this + 40, v10, v9);
        }
        else
        {
          if ((_DWORD)v11 != 1
            || ((v12 = (char *)v10 + 4 * a3, v12 < (char *)v10) || v12 > (char *)v9)
            && (BytePtr + 12 <= (const UInt8 *)v9
              ? (v13 = (unint64_t)((char *)v9 - (char *)v10) >> 2)
              : (v13 = 0),
                v13 != a3))
          {
            *((_QWORD *)this + 3) = 0;
            return;
          }
          *((_QWORD *)this + 4) = v10;
        }
        *((_QWORD *)this + 1) = BytePtr;
        *((_QWORD *)this + 2) = v9;
      }
    }
  }
}

unsigned __int8 *ZapfTable::GlyphInfoForGlyph(ZapfTable *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, uint64_t, unint64_t *);
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *result;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v3 = *((_QWORD *)this + 3);
  if (v3 == 1)
  {
    v9 = bswap32(*(_DWORD *)(*((_QWORD *)this + 4) + 4 * a2));
    goto LABEL_13;
  }
  if (v3 != 2)
    return 0;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (uint64_t (*)(_QWORD *, uint64_t, unint64_t *))*((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  v6 = (_QWORD *)((char *)this + (v5 >> 1) + 40);
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, unint64_t *))(*v6 + v4);
  result = (unsigned __int8 *)v4(v6, a2, &v14);
  if (result)
  {
    v8 = v14;
    if (v14)
    {
      v9 = 0;
      do
      {
        v10 = *result++;
        v9 = v10 | (v9 << 8);
        --v8;
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
LABEL_13:
    v11 = *((_QWORD *)this + 1);
    v12 = v11 + v9;
    if (v12 + 10 > *((_QWORD *)this + 2) || v11 > v12 + 9)
      return 0;
    else
      return (unsigned __int8 *)v12;
  }
  return result;
}

void ZapfTable::AppendVariants(uint64_t a1, unsigned __int16 *a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  BOOL v16;
  int v18;
  unsigned int v19;
  __CFArray *v20;
  const void *v21;
  int v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  BOOL v29;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int16 *v34;
  BOOL v35;
  BOOL v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  __CFArray *v41;
  const void *v42;
  id v43;
  id v44;

  v5 = bswap32(*a2);
  v6 = HIWORD(v5) & 0x3FFF;
  if ((v5 & 0x80000000) != 0)
  {
    if (v6)
    {
      v22 = 0;
      v23 = a2 + 1;
      do
      {
        v24 = *(_QWORD *)(a1 + 8);
        v25 = *(_QWORD *)(a1 + 16);
        v26 = v23 + 3;
        if (v24 > (unint64_t)v23 || (unint64_t)v23 > 0xFFFFFFFFFFFFFFF9 || (unint64_t)v26 > v25)
        {
          v29 = v24 > (unint64_t)v23 || (unint64_t)(v23 + 1) > v25;
          if (v29 || ((v25 - (_QWORD)v23) & 0xFFFFFFFFFFFFFFFELL) != 6)
            break;
        }
        v31 = *v23;
        v32 = (unsigned __int16)v23[2];
        v33 = __rev16(v32);
        v34 = &v26[v33];
        v35 = v24 <= (unint64_t)v26 && v34 >= v26;
        if (!v35 || (unint64_t)v34 > v25)
        {
          v37 = (unint64_t)(v23 + 4) > v25 || v24 > (unint64_t)v26;
          v38 = (v25 - (unint64_t)v26) >> 1;
          if (v37)
            v38 = 0;
          if (v38 != v33)
            break;
        }
        if (v32)
        {
          v39 = 0;
          do
          {
            v40 = *v26;
            if (v40 != 0xFFFF)
            {
              TCFNumber::TCFNumber<int>((unint64_t *)&v44, __rev16(v40));
              v41 = (__CFArray *)atomic_load(a3);
              v42 = (const void *)atomic_load((unint64_t *)&v44);
              CFArrayAppendValue(v41, v42);

            }
            ++v39;
            ++v26;
          }
          while (v33 > (unsigned __int16)v39);
        }
        v23 = (_WORD *)(((unint64_t)v26 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((v26 & 3) == 0)
          v23 = v26;
        if ((v31 & 0x80) == 0)
          v23 = v26;
        ++v22;
      }
      while (v6 > (unsigned __int16)v22);
    }
  }
  else if (v6)
  {
    v7 = 0;
    v8 = a2 + 2;
    do
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = v8 + 1;
      if (*(_QWORD *)(a1 + 8) > (unint64_t)v8 || (unint64_t)v10 > v9)
        break;
      v12 = *v8;
      v13 = __rev16(v12);
      v14 = &v10[v13];
      v15 = (unint64_t)(v8 + 2) <= v9 ? (v9 - (unint64_t)v10) >> 1 : 0;
      v16 = (unint64_t)v14 <= v9 && v14 >= v10;
      if (!v16 && v15 != v13)
        break;
      if (v12)
      {
        v18 = 0;
        do
        {
          v19 = *v10;
          if (v19 != 0xFFFF)
          {
            TCFNumber::TCFNumber<int>((unint64_t *)&v43, __rev16(v19));
            v20 = (__CFArray *)atomic_load(a3);
            v21 = (const void *)atomic_load((unint64_t *)&v43);
            CFArrayAppendValue(v20, v21);

          }
          ++v18;
          ++v10;
        }
        while (v13 > (unsigned __int16)v18);
      }
      ++v7;
      v8 = v10;
    }
    while (v6 > (unsigned __int16)v7);
  }
}

void ZapfTable::VariantsForGlyph(ZapfTable *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unint64_t v24;
  id Mutable;

  v5 = (unsigned int *)ZapfTable::GlyphInfoForGlyph(this, a2);
  if (!v5
    || *v5 == -1
    || (v6 = *((_QWORD *)this + 1),
        v7 = bswap32(*(_DWORD *)(v6 + 4)),
        v8 = v7 + bswap32(*v5),
        v9 = (unsigned __int16 *)(v6 + v8),
        (unint64_t)(v6 + v8 + 2) > *((_QWORD *)this + 2)))
  {
    *a3 = 0;
    return;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v10 = bswap32(*v9) >> 16;
  if ((v10 & 0x4000) == 0)
  {
    ZapfTable::AppendVariants((uint64_t)this, (unsigned __int16 *)(v6 + v8), (unint64_t *)&Mutable);
    do
LABEL_28:
      v24 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    goto LABEL_29;
  }
  v11 = v9 + 2;
  v12 = v10 & 0x3FFF;
  v13 = *((_QWORD *)this + 1);
  v14 = *((_QWORD *)this + 2);
  v15 = (unint64_t)&v9[2 * v12 + 2];
  if (v13 <= (unint64_t)(v9 + 2) && v15 >= (unint64_t)v11 && v15 <= v14)
    goto LABEL_22;
  v18 = (unint64_t)(v9 + 4) > v14 || v13 > (unint64_t)v11;
  v19 = (v14 - (unint64_t)v11) >> 2;
  if (v18)
    v19 = 0;
  if (v19 == v12)
  {
LABEL_22:
    if ((_DWORD)v12)
    {
      v20 = (unsigned int *)(v8 + v6 + 4);
      do
      {
        v22 = *v20++;
        v21 = v22;
        if (v22 != -1)
        {
          v23 = (unsigned __int16 *)(*((_QWORD *)this + 1) + bswap32(v21) + v7);
          if ((unint64_t)(v23 + 1) > *((_QWORD *)this + 2))
            goto LABEL_30;
          ZapfTable::AppendVariants((uint64_t)this, v23, (unint64_t *)&Mutable);
        }
        --v12;
      }
      while (v12);
    }
    goto LABEL_28;
  }
LABEL_30:
  v24 = 0;
LABEL_29:
  *a3 = v24;

}

CFTypeID CTTextTabGetTypeID(void)
{
  if (TCFBase<TNativeTextTab>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeTextTab>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeTextTab>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TNativeTextTab>::fTypeID;
}

CTTextTabRef CTTextTabCreate(CTTextAlignment alignment, double location, CFDictionaryRef options)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  const __CTTextTab *v10;
  id v12;
  id v13;
  id v14;

  if (alignment > kCTTextAlignmentNatural)
    return 0;
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  v6 = TCFBase<TNativeTextTab>::Allocate();
  if (v6)
  {
    v7 = (void *)v6;
    *(double *)(v6 + 48) = location;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    *(_BYTE *)(v6 + 56) = alignment;
    *(_QWORD *)(v6 + 64) = options;
    if (options)
      CFRetain(options);
    v14 = v7;
    do
      v8 = (void *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    v12 = v8;

  }
  else
  {
    v12 = 0;
  }
  do
    v9 = (void *)__ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));
  v13 = v9;

  do
    v10 = (const __CTTextTab *)__ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));

  return v10;
}

CTTextAlignment CTTextTabGetAlignment(CTTextTabRef tab)
{
  __int128 v2;
  unint64_t v3;

  if (tab)
  {
    v3 = 0xAAAAAAAAAAAAAAAALL;
    v2 = xmmword_184948600;
    TTextTab::SetTabRef((TTextTab *)&v2, tab);
    LOBYTE(tab) = BYTE8(v2);
  }
  return tab;
}

double CTTextTabGetLocation(CTTextTabRef tab)
{
  __int128 v2;
  unint64_t v3;

  if (!tab)
    return 0.0;
  v3 = 0xAAAAAAAAAAAAAAAALL;
  v2 = xmmword_184948600;
  TTextTab::SetTabRef((TTextTab *)&v2, tab);
  return *(double *)&v2;
}

CFDictionaryRef CTTextTabGetOptions(CFDictionaryRef tab)
{
  __int128 v1;
  const __CFDictionary *v2;

  if (tab)
  {
    v2 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
    v1 = xmmword_184948600;
    TTextTab::SetTabRef((TTextTab *)&v1, tab);
    return v2;
  }
  return tab;
}

BOOL TCFBase<TNativeTextTab>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TNativeTextTab::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

_QWORD *TCFBase<TNativeTextTab>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

CFStringRef TCFBase<TNativeTextTab>::ClassDebug(uint64_t a1)
{
  CFStringRef result;
  CFStringRef v3;
  CFStringRef v4;

  result = TNativeTextTab::DebugDescription(*(TNativeTextTab **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTTextTab", a1, result);
    CFRelease(v3);
    return v4;
  }
  return result;
}

uint64_t TCallbackBidiLevelsProvider::GetLevels(TCallbackBidiLevelsProvider *this, CFRange a2, CTWritingDirection a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    return v3 + a2.location - *((_QWORD *)this + 1);
  else
    return 0;
}

uint64_t TCallbackBidiLevelsProvider::GetDefaultParagraphDirection(TCallbackBidiLevelsProvider *this)
{
  char v1;

  v1 = *((_BYTE *)this + 25);
  if (v1)
    return (char)*((_BYTE *)this + 24);
  return v1;
}

void TCallbackBidiLevelsProvider::~TCallbackBidiLevelsProvider(TCallbackBidiLevelsProvider *this)
{
  JUMPOUT(0x186DC03ACLL);
}

void TICUBidiLevelsProvider::~TICUBidiLevelsProvider(TICUBidiLevelsProvider *this)
{
  unint64_t v2;
  void **v4;

  *(_QWORD *)this = &off_1E15DE460;
  v2 = *((_QWORD *)this + 2);
  while (!__ldaxr(&gBidiEngineRetired))
  {
    if (!__stlxr(v2, &gBidiEngineRetired))
      goto LABEL_6;
  }
  __clrex();
  ubidi_close();
LABEL_6:
  v4 = (void **)((char *)this + 40);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
}

{
  TICUBidiLevelsProvider::~TICUBidiLevelsProvider(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TICUBidiLevelsProvider::GetLevels(TICUBidiLevelsProvider *this, CFRange a2, CTWritingDirection a3)
{
  uint64_t result;
  int v4;

  v4 = TICUBidiLevelsProvider::ConfigureBidiEngine(this, a2, a3);
  if (v4 > 0)
    return 0;
  result = ubidi_getLevels();
  if (v4 >= 1)
    return 0;
  return result;
}

uint64_t TICUBidiLevelsProvider::ConfigureBidiEngine(TICUBidiLevelsProvider *this, CFRange a2, CTWritingDirection a3)
{
  CFIndex length;
  CFIndex location;

  if (a2.location != *((_QWORD *)this + 3) || a2.length != *((_QWORD *)this + 4))
  {
    length = a2.length;
    location = a2.location;
    TCharStream::LazyCopyChars(*((_QWORD **)this + 1), a2.location, a2.length);
    ubidi_setPara();
    *((_QWORD *)this + 3) = location;
    *((_QWORD *)this + 4) = length;
  }
  return 0;
}

uint64_t TICUBidiLevelsProvider::GetDefaultParagraphDirection(TICUBidiLevelsProvider *this)
{
  CFRange v2;

  v2.length = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v2.location = 0;
  TICUBidiLevelsProvider::ConfigureBidiEngine(this, v2, kCTWritingDirectionNatural);
  ubidi_getParagraph();
  return 0;
}

CFStringRef TAttributes::DebugDescription(TAttributes *this)
{
  const void *Dictionary;

  Dictionary = (const void *)TAttributes::GetDictionary(this);
  if (Dictionary)
    return CFCopyDescription(Dictionary);
  else
    return CFSTR("NULL");
}

void TAttributes::SetVerticalFont(TAttributes *this, const __CTFont *a2)
{
  TFont *v4;
  __int128 v5;
  float64x2_t v6;
  int64x2_t v7;
  __int128 v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  __int128 v19;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  CGAffineTransform v24;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v4 = (TFont *)*((_QWORD *)a2 + 5);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)&t1.c = v5;
  *(_OWORD *)&t1.tx = v5;
  *(_OWORD *)&t1.a = v5;
  TFont::GetEffectiveMatrix(v4, (uint64_t)&t1);
  v6 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  v7 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v6, (float64x2_t)vandq_s8(*(int8x16_t *)&t1.tx, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL))), (int8x16_t)vcgeq_f64(v6, vabsq_f64(vaddq_f64(*(float64x2_t *)&t1.a, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v6, vabsq_f64(vaddq_f64(*(float64x2_t *)&t1.c, (float64x2_t)xmmword_18492F290))));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
  {
    if (*((_BYTE *)this + 104))
      v9 = (float64x2_t *)((char *)this + 56);
    else
      v9 = (float64x2_t *)MEMORY[0x1E0C9BAA8];
  }
  else
  {
    v8 = *(_OWORD *)&t1.c;
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)&t1.a;
    *(_OWORD *)((char *)this + 72) = v8;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)&t1.tx;
    *((_BYTE *)this + 104) = 1;
    v9 = (float64x2_t *)((char *)this + 56);
  }
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  v14 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v13, vabsq_f64(vaddq_f64(v11, (float64x2_t)xmmword_18492F290))), (int8x16_t)vcgeq_f64(v13, vabsq_f64(vaddq_f64(*v9, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v13, vabsq_f64(v12)));
  v15 = vandq_s8((int8x16_t)vdupq_laneq_s64(v14, 1), (int8x16_t)v14).u64[0];
  v16 = v10.f64[1];
  if ((v15 & 0x8000000000000000) != 0)
  {
    v18 = v10.f64[0];
    v10.f64[0] = v11.f64[1];
  }
  else
  {
    v17 = -v11.f64[0];
    v11.f64[0] = -v10.f64[1];
    v18 = v11.f64[1];
    v16 = v17;
  }
  t1.a = v18;
  t1.b = v16;
  t1.c = v11.f64[0];
  t1.d = v10.f64[0];
  *(float64x2_t *)&t1.tx = v12;
  t2 = *(CGAffineTransform *)kRotateLeftTransform;
  CGAffineTransformConcat(&v24, &t1, &t2);
  v19 = *(_OWORD *)&v24.c;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)&v24.a;
  *(_OWORD *)((char *)this + 72) = v19;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)&v24.tx;
  *((_BYTE *)this + 104) = 1;
  *(_QWORD *)&t1.a = a2;
  if (atomic_load((unint64_t *)&t1))
  {
    v21 = (unint64_t *)((char *)this + 16);
    do
      v22 = __ldaxr((unint64_t *)&t1);
    while (__stlxr(0, (unint64_t *)&t1));
    do
      v23 = (void *)__ldaxr(v21);
    while (__stlxr(v22, v21));

    *((_BYTE *)this + 48) = 1;
  }

  *((_BYTE *)this + 50) = 1;
  TAttributes::ApplyTateChuYoko(this);
}

void TAttributes::ApplyTateChuYoko(TAttributes *this)
{
  uint64_t v1;
  int v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(v1 + 64);
    if (*(_WORD *)(v1 + 64))
    {
      v4 = (unint64_t *)((char *)this + 16);
      v5 = atomic_load((unint64_t *)this + 2);
      v11 = (id)CTFontCopyFeaturesInternal(v5);
      if (TFontFeatures::GetFeatureSelector((TFontFeatures *)&v11, 22, v2))
      {
        if (v2 != 1)
          *((_WORD *)this + 69) |= 0x1000u;
        CreateCopyOfFontWithFeature((const __CTFont *)&v10, v5, 22, v2);
        if (atomic_load((unint64_t *)&v10))
        {
          do
            v7 = __ldaxr((unint64_t *)&v10);
          while (__stlxr(0, (unint64_t *)&v10));
          do
            v8 = (void *)__ldaxr(v4);
          while (__stlxr(v7, v4));

          *((_BYTE *)this + 48) = 1;
        }

        v9 = *((_QWORD *)this + 15);
        if (*(_BYTE *)(v9 + 24))
          *(_BYTE *)(v9 + 24) = 0;
      }

    }
  }
}

uint64_t TAttributes::HandleBackgroundCGColorAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_BYTE *)(*(_QWORD *)a2 + 137) |= 1u;
  return result;
}

const __CFNumber *TAttributes::HandleNSBaselineOffsetAttribute(const __CFNumber *result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  double valuePtr;

  if (result)
  {
    v3 = result;
    valuePtr = NAN;
    v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
    }
    else
    {
      result = (const __CFNumber *)CFStringGetTypeID();
      if ((const __CFNumber *)v4 != result)
        return result;
      valuePtr = CFStringGetDoubleValue((CFStringRef)v3);
    }
    result = (const __CFNumber *)TAttributes::EnsureRareData(*a2);
    if (!*((_QWORD *)result + 5))
    {
      *((_QWORD *)result + 5) = CFSTR("NSBaselineOffset");
      *((double *)result + 6) = valuePtr;
    }
  }
  return result;
}

uint64_t TAttributes::HandleStrikethroughAttribute(uint64_t result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  int v5;
  int valuePtr;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    valuePtr = -1431655766;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      result = CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      v5 = valuePtr;
    }
    else
    {
      result = CFStringGetTypeID();
      if (v4 != result)
        return result;
      result = CFStringGetIntValue((CFStringRef)v3);
      v5 = result;
      valuePtr = result;
    }
    if ((_BYTE)v5)
    {
      result = TAttributes::EnsureRareData(*a2);
      *(_DWORD *)(result + 60) = v5;
      *((_BYTE *)*a2 + 137) |= 0x10u;
    }
  }
  return result;
}

CFTypeID TAttributes::HandleLigatureAttribute(CFTypeID result, uint64_t a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  unsigned __int8 v5;
  unsigned int valuePtr;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      valuePtr = -1431655766;
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      result = valuePtr;
    }
    else
    {
      result = CFStringGetTypeID();
      if (v4 != result)
        return result;
      result = CFStringGetIntValue((CFStringRef)v3);
    }
    if ((int)result >= 2)
      v5 = 2;
    else
      v5 = result;
    *(_WORD *)(a2 + 56) = v5 | 0x100;
  }
  return result;
}

const __CFNumber *TAttributes::HandleCTBaselineOffsetAttribute(const __CFNumber *result, TAttributes **a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  double valuePtr;

  if (result)
  {
    v3 = result;
    valuePtr = NAN;
    v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
LABEL_5:
      result = (const __CFNumber *)TAttributes::EnsureRareData(*a2);
      *((_QWORD *)result + 5) = CFSTR("CTBaselineOffset");
      *((double *)result + 6) = valuePtr;
      return result;
    }
    result = (const __CFNumber *)CFStringGetTypeID();
    if ((const __CFNumber *)v4 == result)
    {
      valuePtr = CFStringGetDoubleValue((CFStringRef)v3);
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t (***TAttributes::HandleSuperscriptAttribute(uint64_t (***result)(), uint64_t a2))()
{
  const __CFNumber *v3;
  CFTypeID v4;
  SInt32 IntValue;
  __int16 v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int valuePtr;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t (**v24)();
  unint64_t v25;
  unint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (const __CFNumber *)result;
  valuePtr = -1431655766;
  v4 = CFGetTypeID(result);
  if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
  {
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    IntValue = valuePtr;
  }
  else
  {
    result = (uint64_t (***)())CFStringGetTypeID();
    if ((uint64_t (***)())v4 != result)
      return result;
    IntValue = CFStringGetIntValue((CFStringRef)v3);
    valuePtr = IntValue;
  }
  v6 = IntValue != 0;
  if (IntValue < 0)
    v6 = 2;
  v24 = &off_1E15DFC20;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v25) = v6;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v27 = &v24;
  v7 = *(uint64_t **)(a2 + 48);
  v9 = v7[1];
  v8 = v7[2];
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *v7) >> 5;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v12 = v8 - *v7;
    v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v23 = v7 + 3;
    if (v14)
    {
      v15 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v7 + 3), v14);
      v16 = (uint64_t)&v15[32 * v11];
      v19 = v15;
      v20 = v16;
      v22 = &v15[32 * v14];
      if (!v27)
      {
        *(_QWORD *)(v16 + 24) = 0;
        goto LABEL_24;
      }
      if (v27 != &v24)
      {
        *(_QWORD *)(v16 + 24) = (*v27)[2]();
LABEL_24:
        v21 = v16 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v7, &v19);
        v10 = v7[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v19);
        goto LABEL_25;
      }
    }
    else
    {
      v16 = 32 * v11;
      v19 = 0;
      v20 = v16;
      v22 = 0;
    }
    *(_QWORD *)(v16 + 24) = v16;
    ((void (*)(uint64_t (***)(), uint64_t))(*v27)[3])(v27, v16);
    goto LABEL_24;
  }
  *(_QWORD *)(v9 + 24) = v9;
  ((void (*)(uint64_t (***)(), unint64_t))(*v27)[3])(v27, v9);
  v10 = v9 + 32;
LABEL_25:
  v7[1] = v10;
  result = v27;
  if (v27 == &v24)
  {
    v17 = 4;
    result = &v24;
  }
  else
  {
    if (!v27)
      return result;
    v17 = 5;
  }
  return (uint64_t (***)())(*result)[v17]();
}

uint64_t (***TAttributes::HandleCharacterShapeAttribute(uint64_t (***result)(), uint64_t a2))()
{
  const __CFNumber *v3;
  CFTypeID v4;
  SInt32 IntValue;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int valuePtr;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t (**v23)();
  unint64_t v24;
  unint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (const __CFNumber *)result;
  valuePtr = -1431655766;
  v4 = CFGetTypeID(result);
  if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
  {
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    LOWORD(IntValue) = valuePtr;
  }
  else
  {
    result = (uint64_t (***)())CFStringGetTypeID();
    if ((uint64_t (***)())v4 != result)
      return result;
    IntValue = CFStringGetIntValue((CFStringRef)v3);
    valuePtr = IntValue;
  }
  v23 = &off_1E15DFC68;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v24) = IntValue - 1;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v26 = &v23;
  v6 = *(uint64_t **)(a2 + 48);
  v8 = v6[1];
  v7 = v6[2];
  if (v8 >= v7)
  {
    v10 = (uint64_t)(v8 - *v6) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      abort();
    v11 = v7 - *v6;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v22 = v6 + 3;
    if (v13)
    {
      v14 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v6 + 3), v13);
      v15 = (uint64_t)&v14[32 * v10];
      v18 = v14;
      v19 = v15;
      v21 = &v14[32 * v13];
      if (!v26)
      {
        *(_QWORD *)(v15 + 24) = 0;
        goto LABEL_22;
      }
      if (v26 != &v23)
      {
        *(_QWORD *)(v15 + 24) = (*v26)[2]();
LABEL_22:
        v20 = v15 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v6, &v18);
        v9 = v6[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v18);
        goto LABEL_23;
      }
    }
    else
    {
      v15 = 32 * v10;
      v18 = 0;
      v19 = v15;
      v21 = 0;
    }
    *(_QWORD *)(v15 + 24) = v15;
    ((void (*)(uint64_t (***)(), uint64_t))(*v26)[3])(v26, v15);
    goto LABEL_22;
  }
  *(_QWORD *)(v8 + 24) = v8;
  ((void (*)(uint64_t (***)(), unint64_t))(*v26)[3])(v26, v8);
  v9 = v8 + 32;
LABEL_23:
  v6[1] = v9;
  result = v26;
  if (v26 == &v23)
  {
    v16 = 4;
    result = &v23;
  }
  else
  {
    if (!v26)
      return result;
    v16 = 5;
  }
  return (uint64_t (***)())(*result)[v16]();
}

const __CFBoolean *TAttributes::HandleVerticalFormsAttribute(const __CFBoolean *result, uint64_t a2)
{
  BOOL v3;

  if (result)
  {
    result = (const __CFBoolean *)CFBooleanGetValue(result);
    v3 = (_DWORD)result != 0;
  }
  else
  {
    v3 = 0;
  }
  *(_BYTE *)(*(_QWORD *)a2 + 50) = v3;
  return result;
}

void CreateCopyOfFontWithFeature(const __CTFont *a1, uint64_t a2, int a3, int a4)
{
  void *v7;
  const __CTFontDescriptor *v8;
  const __CFAllocator *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  unint64_t v12;
  void *v13;
  const __CTFontDescriptor *v14;
  id CopyWithFeature;
  id v16;

  if (a2)
  {
    TFont::CopyDescriptor(*(TFont **)(a2 + 40), 0, (unint64_t *)&v16);
    do
      v7 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));

    v16 = v7;
    v8 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v16);
    LODWORD(CopyWithFeature) = a3;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &CopyWithFeature);
    LODWORD(CopyWithFeature) = a4;
    v11 = CFNumberCreate(v9, kCFNumberIntType, &CopyWithFeature);
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v8, v10, v11);
    do
      v12 = __ldaxr((unint64_t *)&CopyWithFeature);
    while (__stlxr(0, (unint64_t *)&CopyWithFeature));
    do
      v13 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(v12, (unint64_t *)&v16));

    v14 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v16);
    *(_QWORD *)a1 = CTFontCreateWithFontDescriptor(v14, 0.0, 0);

  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
}

uint64_t TAttributes::HandleHorizontalInVerticalFormsAttribute(uint64_t result, uint64_t a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  uint64_t v5;
  CFCharacterSetRef Predefined;
  uint64_t v7;
  int v8;
  const __CFCharacterSet *v9;
  uint64_t v10;
  UTF32Char FullChar;
  __int16 v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int valuePtr;
  uint64_t v45[3];
  uint64_t *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (const __CFNumber *)result;
  valuePtr = -1431655766;
  v4 = CFGetTypeID((CFTypeRef)result);
  if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
  {
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    result = valuePtr;
  }
  else
  {
    result = CFStringGetTypeID();
    if (v4 != result)
      return result;
    result = CFStringGetIntValue((CFStringRef)v3);
    valuePtr = result;
  }
  if ((result - 5) < 0xFFFFFFFC)
    return result;
  if (*(_QWORD *)(a2 + 32) < (uint64_t)result)
    valuePtr = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v31 = *(char **)(a2 + 16);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v43 = 0;
    v42 = 0u;
    *(_QWORD *)&v42 = *(_QWORD *)(v5 + 16);
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
    v7 = *(_QWORD *)(a2 + 24);
    v45[0] = v7;
    v8 = valuePtr;
    if (valuePtr >= 1)
    {
      v9 = Predefined;
      v10 = v7 + valuePtr;
      while (1)
      {
        FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v31, v45, 0);
        if (!CFCharacterSetIsLongCharacterMember(v9, FullChar))
          break;
        if (++v45[0] >= v10)
        {
          v8 = valuePtr;
          goto LABEL_17;
        }
      }
      v8 = 1;
      valuePtr = 1;
    }
LABEL_17:
    v12 = word_184948620[v8 - 1];
    *(_WORD *)(TAttributes::EnsureRareData(*(TAttributes **)a2) + 64) = v12;
  }
  v45[0] = (uint64_t)&off_1E15DFD40;
  v45[1] = 0xAAAAAAAAAAAAAAAALL;
  v45[2] = 0xAAAAAAAAAAAAAAAALL;
  v46 = v45;
  v13 = *(uint64_t **)(a2 + 48);
  v15 = v13[1];
  v14 = v13[2];
  if (v15 >= v14)
  {
    v17 = (uint64_t)(v15 - *v13) >> 5;
    if ((unint64_t)(v17 + 1) >> 59)
      abort();
    v18 = v14 - *v13;
    v19 = v18 >> 4;
    if (v18 >> 4 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v20 = 0x7FFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    *((_QWORD *)&v33 + 1) = v13 + 3;
    if (v20)
    {
      v28 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v13 + 3), v20);
      v29 = (uint64_t)&v28[32 * v17];
      v31 = v28;
      *(_QWORD *)&v32 = v29;
      *(_QWORD *)&v33 = &v28[32 * v20];
      if (!v46)
      {
        *(_QWORD *)(v29 + 24) = 0;
        goto LABEL_33;
      }
      if (v46 != v45)
      {
        *(_QWORD *)(v29 + 24) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v46 + 16))(v46, v21, v22, v23, v24, v25, v26, v27, v31, v32, *((_QWORD *)&v32 + 1), v33, *((_QWORD *)&v33 + 1), v34, *((_QWORD *)&v34 + 1), v35, *((_QWORD *)&v35 + 1), v36, *((_QWORD *)&v36 + 1),
                                  v37,
                                  *((_QWORD *)&v37 + 1),
                                  v38,
                                  *((_QWORD *)&v38 + 1),
                                  v39);
LABEL_33:
        *((_QWORD *)&v32 + 1) = v29 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v13, &v31);
        v16 = v13[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v31);
        goto LABEL_34;
      }
    }
    else
    {
      v29 = 32 * v17;
      v31 = 0;
      *(_QWORD *)&v32 = v29;
      *(_QWORD *)&v33 = 0;
    }
    *(_QWORD *)(v29 + 24) = v29;
    (*(void (**)(uint64_t *, uint64_t))(*v46 + 24))(v46, v29);
    goto LABEL_33;
  }
  *(_QWORD *)(v15 + 24) = v15;
  (*(void (**)(uint64_t *, unint64_t))(*v46 + 24))(v46, v15);
  v16 = v15 + 32;
LABEL_34:
  v13[1] = v16;
  result = (uint64_t)v46;
  if (v46 == v45)
  {
    v30 = 4;
    result = (uint64_t)v45;
  }
  else
  {
    if (!v46)
      return result;
    v30 = 5;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v30))();
}

uint64_t TAttributes::HandleGlyphInfoAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x20u;
  return result;
}

void TAttributes::ApplyBaselineInfoValue(TAttributes *this, const __CFString *cf1, const void *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned __int16 v8;
  unsigned __int8 v9;
  CFTypeID v10;
  double DoubleValue;
  uint64_t v12;
  uint64_t valuePtr;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 144);
  if (!*(_BYTE *)(v5 + 128))
  {
    v6 = 0;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    do
    {
      v7 = (_BYTE *)(v5 + v6);
      *v7 = 0;
      v7[8] = 0;
      v6 += 16;
    }
    while (v6 != 128);
    *(_BYTE *)(v5 + 128) = 1;
  }
  v8 = TBaselineAttributes::BaselineClassFromName(cf1, cf1);
  if (v8 >= 0x100u)
  {
    valuePtr = -1;
    if (cf1)
    {
      v9 = v8;
      v10 = CFGetTypeID(cf1);
      if (v10 == CFNumberGetTypeID() || v10 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)cf1, kCFNumberDoubleType, &valuePtr);
        DoubleValue = *(double *)&valuePtr;
LABEL_10:
        v12 = v5 + 16 * v9;
        *(double *)v12 = DoubleValue;
        *(_BYTE *)(v12 + 8) = 1;
        return;
      }
      if (v10 == CFStringGetTypeID())
      {
        DoubleValue = CFStringGetDoubleValue(cf1);
        goto LABEL_10;
      }
    }
  }
}

void TAttributes::HandleBaselineInfoAttribute(const __CFDictionary *a1, void *context)
{
  if (a1)
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)TAttributes::ApplyBaselineInfoValue, context);
}

void TAttributes::ApplyBaselineReferenceInfoValue(TAttributes *this, __CFString *a2, TAttributes **a3, void *a4)
{
  uint64_t v6;
  TBaselineAttributes *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  unsigned __int16 v12;
  unsigned __int8 v13;
  CFTypeID v14;
  double DoubleValue;
  _OWORD *v16;
  uint64_t valuePtr;

  v6 = TAttributes::EnsureBaselineAttributes(*a3);
  v7 = (TBaselineAttributes *)v6;
  v8 = (_OWORD *)(v6 + 136);
  if (!*(_BYTE *)(v6 + 264))
  {
    v9 = 0;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_OWORD *)(v6 + 248) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *v8 = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    do
    {
      v10 = v6 + v9;
      *(_BYTE *)(v10 + 136) = 0;
      *(_BYTE *)(v10 + 144) = 0;
      v9 += 16;
    }
    while (v9 != 128);
    *(_BYTE *)(v6 + 264) = 1;
  }
  if (CFEqual(this, CFSTR("CTBaselineReferenceFont")))
  {
    TBaselineAttributes::SetReferenceFont(v7, a2);
    return;
  }
  v12 = TBaselineAttributes::BaselineClassFromName(this, v11);
  if (v12 >= 0x100u)
  {
    valuePtr = -1;
    if (a2)
    {
      v13 = v12;
      v14 = CFGetTypeID(a2);
      if (v14 == CFNumberGetTypeID() || v14 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, &valuePtr);
        DoubleValue = *(double *)&valuePtr;
LABEL_12:
        v16 = &v8[v13];
        *(double *)v16 = DoubleValue;
        *((_BYTE *)v16 + 8) = 1;
        return;
      }
      if (v14 == CFStringGetTypeID())
      {
        DoubleValue = CFStringGetDoubleValue(a2);
        goto LABEL_12;
      }
    }
  }
}

uint64_t TAttributes::EnsureBaselineAttributes(TAttributes *this)
{
  uint64_t result;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)((char *)this + 144);
  result = *((_QWORD *)this + 18);
  if (!result)
  {
    v3 = operator new();
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 136) = 0;
    *(_BYTE *)(v3 + 264) = 0;
    *(_QWORD *)(v3 + 272) = 0;
    *(_BYTE *)(v3 + 280) = -1;
    std::unique_ptr<TBaselineAttributes>::reset[abi:nn180100](v2, v3);
    return *v2;
  }
  return result;
}

void TBaselineAttributes::SetReferenceFont(TBaselineAttributes *this, void *a2)
{
  uint64_t v2;
  char *v3;

  if (!*((_BYTE *)this + 264))
  {
    v2 = 0;
    *(_OWORD *)((char *)this + 232) = 0u;
    *(_OWORD *)((char *)this + 248) = 0u;
    *(_OWORD *)((char *)this + 200) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
    *(_OWORD *)((char *)this + 168) = 0u;
    *(_OWORD *)((char *)this + 184) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 152) = 0u;
    do
    {
      v3 = (char *)this + v2;
      v3[136] = 0;
      v3[144] = 0;
      v2 += 16;
    }
    while (v2 != 128);
    *((_BYTE *)this + 264) = 1;
  }
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 34, a2);
}

void TAttributes::HandleBaselineReferenceInfoAttribute(const __CFDictionary *a1, void *context)
{
  if (a1)
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)TAttributes::ApplyBaselineReferenceInfoValue, context);
}

_BYTE *TAttributes::HandleBaselineClassAttribute(_BYTE *result, const __CFString *a2)
{
  char v3;

  if (result)
  {
    result = (_BYTE *)TBaselineAttributes::BaselineClassFromName(result, a2);
    if ((unsigned __int16)result >= 0x100u)
    {
      v3 = (char)result;
      result = (_BYTE *)TAttributes::EnsureBaselineAttributes((TAttributes *)a2->isa);
      result[280] = v3;
    }
  }
  return result;
}

uint64_t TAttributes::HandleRenderingStyleAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x80u;
  return result;
}

uint64_t TAttributes::HandleRubyAnnotationAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x800u;
  return result;
}

uint64_t (***TAttributes::HandleTextEncapsulationAttribute(uint64_t (***result)(), TAttributes **a2))()
{
  const __CFDictionary *v3;
  CFTypeID v4;
  TAttributes *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t (**v31)();
  unint64_t v32;
  unint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (const __CFDictionary *)result;
  v4 = CFGetTypeID(result);
  result = (uint64_t (***)())CFDictionaryGetTypeID();
  if ((uint64_t (***)())v4 != result)
    return result;
  v5 = *a2;
  *((_WORD *)v5 + 69) = *((_WORD *)*a2 + 69) | 0x8000;
  v6 = TAttributes::EnsureRareData(v5);
  v8 = (unsigned __int8 **)(v6 + 80);
  v7 = *(unsigned __int8 **)(v6 + 80);
  *(_QWORD *)(v6 + 72) = v3;
  if (!v7)
  {
    v9 = operator new(0x50uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E15E1628;
    TextEncapsulationData::TextEncapsulationData((TextEncapsulationData *)(v9 + 3), v3);
    *(_QWORD *)&v27 = v10;
    *((_QWORD *)&v27 + 1) = v9;
    std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)v8, &v27);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 = *v8;
  }
  v14 = *v7 | (v7[3] << 8);
  v31 = &off_1E15DFCB0;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v32) = v14;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v34 = &v31;
  v15 = (uint64_t *)a2[6];
  v17 = v15[1];
  v16 = v15[2];
  if (v17 >= v16)
  {
    v19 = (uint64_t)(v17 - *v15) >> 5;
    if ((unint64_t)(v19 + 1) >> 59)
      abort();
    v20 = v16 - *v15;
    v21 = v20 >> 4;
    if (v20 >> 4 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v30 = v15 + 3;
    if (v22)
    {
      v24 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v15 + 3), v22);
      v25 = (uint64_t)&v24[32 * v19];
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = v25;
      v29 = &v24[32 * v22];
      if (!v34)
      {
        *(_QWORD *)(v25 + 24) = 0;
        goto LABEL_25;
      }
      if (v34 != &v31)
      {
        *(_QWORD *)(v25 + 24) = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v34)[2])(v34, v23);
LABEL_25:
        v28 = v25 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v15, &v27);
        v18 = v15[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v27);
        goto LABEL_26;
      }
    }
    else
    {
      v25 = 32 * v19;
      *(_QWORD *)&v27 = 0;
      *((_QWORD *)&v27 + 1) = v25;
      v29 = 0;
    }
    *(_QWORD *)(v25 + 24) = v25;
    ((void (*)(uint64_t (***)(), uint64_t))(*v34)[3])(v34, v25);
    goto LABEL_25;
  }
  *(_QWORD *)(v17 + 24) = v17;
  ((void (*)(uint64_t (***)(), unint64_t))(*v34)[3])(v34, v17);
  v18 = v17 + 32;
LABEL_26:
  v15[1] = v18;
  result = v34;
  if (v34 == &v31)
  {
    v26 = 4;
    result = &v31;
  }
  else
  {
    if (!v34)
      return result;
    v26 = 5;
  }
  return (uint64_t (***)())(*result)[v26]();
}

uint64_t TAttributes::HandleTextEncapsulationAttributeNeue(NSTextEncapsulation *a1, TAttributes **a2)
{
  uint64_t result;
  TAttributes *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t (**v31)();
  unint64_t v32;
  unint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
    return result;
  v5 = *a2;
  *((_WORD *)v5 + 69) = *((_WORD *)*a2 + 69) | 0x8000;
  v6 = TAttributes::EnsureRareData(v5);
  v8 = (unsigned __int8 **)(v6 + 80);
  v7 = *(unsigned __int8 **)(v6 + 80);
  *(_QWORD *)(v6 + 72) = a1;
  if (!v7)
  {
    v9 = operator new(0x50uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E15E1628;
    TextEncapsulationData::TextEncapsulationData((TextEncapsulationData *)(v9 + 3), a1);
    *(_QWORD *)&v27 = v10;
    *((_QWORD *)&v27 + 1) = v9;
    std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)v8, &v27);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 = *v8;
  }
  v14 = *v7 | (v7[3] << 8);
  v31 = &off_1E15DFCF8;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v32) = v14;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v34 = &v31;
  v15 = (uint64_t *)a2[6];
  v17 = v15[1];
  v16 = v15[2];
  if (v17 >= v16)
  {
    v19 = (uint64_t)(v17 - *v15) >> 5;
    if ((unint64_t)(v19 + 1) >> 59)
      abort();
    v20 = v16 - *v15;
    v21 = v20 >> 4;
    if (v20 >> 4 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v30 = v15 + 3;
    if (v22)
    {
      v24 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v15 + 3), v22);
      v25 = (uint64_t)&v24[32 * v19];
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = v25;
      v29 = &v24[32 * v22];
      if (!v34)
      {
        *(_QWORD *)(v25 + 24) = 0;
        goto LABEL_24;
      }
      if (v34 != &v31)
      {
        *(_QWORD *)(v25 + 24) = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v34)[2])(v34, v23);
LABEL_24:
        v28 = v25 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v15, &v27);
        v18 = v15[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v27);
        goto LABEL_25;
      }
    }
    else
    {
      v25 = 32 * v19;
      *(_QWORD *)&v27 = 0;
      *((_QWORD *)&v27 + 1) = v25;
      v29 = 0;
    }
    *(_QWORD *)(v25 + 24) = v25;
    ((void (*)(uint64_t (***)(), uint64_t))(*v34)[3])(v34, v25);
    goto LABEL_24;
  }
  *(_QWORD *)(v17 + 24) = v17;
  ((void (*)(uint64_t (***)(), unint64_t))(*v34)[3])(v34, v17);
  v18 = v17 + 32;
LABEL_25:
  v15[1] = v18;
  result = (uint64_t)v34;
  if (v34 == &v31)
  {
    v26 = 4;
    result = (uint64_t)&v31;
  }
  else
  {
    if (!v34)
      return result;
    v26 = 5;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v26))();
}

uint64_t TAttributes::HandleTrimWhitespaceBackgroundAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_BYTE *)(*(_QWORD *)a2 + 137) |= 8u;
  return result;
}

const void *TAttributes::HandleImposedGlyphAttribute(const void *result, uint64_t a2)
{
  CFTypeID v3;

  if (result)
  {
    v3 = CFGetTypeID(result);
    result = (const void *)CFNumberGetTypeID();
    if ((const void *)v3 == result)
      *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x10u;
  }
  return result;
}

_QWORD *TAttributes::HandlePaletteAttribute(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v20[0] = &off_1E15DFBD8;
  v20[1] = result;
  v20[2] = 0xAAAAAAAAAAAAAAAALL;
  v21 = v20;
  v2 = *(uint64_t **)(a2 + 48);
  v4 = v2[1];
  v3 = v2[2];
  if (v4 >= v3)
  {
    v7 = (uint64_t)(v4 - *v2) >> 5;
    if ((unint64_t)(v7 + 1) >> 59)
      abort();
    v8 = v3 - *v2;
    v9 = v8 >> 4;
    if (v8 >> 4 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v19 = v2 + 3;
    if (v10)
    {
      v12 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(v2 + 3), v10);
      v13 = (uint64_t)&v12[32 * v7];
      v15 = v12;
      v16 = v13;
      v18 = &v12[32 * v10];
      if (!v21)
      {
        *(_QWORD *)(v13 + 24) = 0;
        goto LABEL_17;
      }
      if (v21 != v20)
      {
        *(_QWORD *)(v13 + 24) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v21 + 16))(v21, v11);
LABEL_17:
        v17 = v13 + 32;
        std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(v2, &v15);
        v6 = v2[1];
        std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer((uint64_t)&v15);
        goto LABEL_18;
      }
    }
    else
    {
      v13 = 32 * v7;
      v15 = 0;
      v16 = v13;
      v18 = 0;
    }
    *(_QWORD *)(v13 + 24) = v13;
    (*(void (**)(_QWORD *, uint64_t))(*v21 + 24))(v21, v13);
    goto LABEL_17;
  }
  *(_QWORD *)(v4 + 24) = v4;
  (*(void (**)(_QWORD *, unint64_t))(*v21 + 24))(v21, v4);
  v6 = v4 + 32;
LABEL_18:
  v2[1] = v6;
  result = v21;
  if (v21 == v20)
  {
    v14 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v14))(result, v5);
}

uint64_t TAttributes::HandleEmojiImageProviderAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 4u;
  return result;
}

uint64_t TAttributes::HandleRunMetricsDelegateAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 2u;
  return result;
}

unint64_t CTFontCopyTextScaleRecipeForStringAttributes(TBaseFont ***a1, CFDictionaryRef theDict)
{
  __CFString *Value;
  TFont **v5;
  TFont **v6;
  _QWORD *v7;
  const __CFNumber *v8;
  unsigned __int8 v9;
  unint64_t v10;
  id v12;

  Value = (__CFString *)CFDictionaryGetValue(theDict, CFSTR("NSTextScale"));
  if (Value != CFSTR("NSTextScaleSecondary") && (!Value || !CFEqual(Value, CFSTR("NSTextScaleSecondary"))))
    return 0;
  v5 = (TFont **)CFDictionaryGetValue(theDict, CFSTR("NSFont"));
  if (!v5)
    return 0;
  v6 = v5;
  v7 = _CTFontEnsureFontRef(v5);
  if (!v7 || !(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[5] + 400) + 776))(*(_QWORD *)(v7[5] + 400)))
    return 0;
  v8 = CustomRatioFromAttributes(theDict);
  CopySecondaryScaleRecipeInternal((unint64_t *)&v12, a1, v6, (uint64_t)v8, v9);
  do
    v10 = __ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));

  return v10;
}

void TAttributes::PrimaryFont(TAttributes *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v7;

  *(_QWORD *)this = 0;
  v4 = *(_QWORD *)(a2 + 120);
  if (v4)
  {
    v5 = (void *)atomic_load((unint64_t *)(v4 + 96));
    TCFRef<__CTFont const*>::Retain((unint64_t *)this, v5);
  }
  if (!atomic_load((unint64_t *)this))
  {
    v7 = (void *)atomic_load((unint64_t *)(a2 + 16));
    TCFRef<__CTFont const*>::Retain((unint64_t *)this, v7);
  }
}

uint64_t (*TAttributes::ApplyFontAttributeHandlers(TAttributes *this, const void *a2, const void *a3, void *a4))(const void *, const void *)
{
  uint64_t (*result)(const void *, const void *);

  if (qword_1ECDE7880 != -1)
    dispatch_once_f(&qword_1ECDE7880, 0, (dispatch_function_t)TAttributes::ApplyFontAttributeHandlers(void const*,void const*,void *)::$_0::__invoke);
  result = (uint64_t (*)(const void *, const void *))CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7878, this);
  if (result)
    return (uint64_t (*)(const void *, const void *))result(a2, a3);
  return result;
}

const void *TAttributes::GetForegroundColor(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  const void *result;

  result = CFDictionaryGetValue(this, CFSTR("CTForegroundColor"));
  if (!result)
    return CFDictionaryGetValue(this, CFSTR("NSColor"));
  return result;
}

BOOL TAttributes::GetTabStopsPresent(TAttributes *this, const void *a2)
{
  uint64_t v3;
  TParagraphStyle **v4;
  const void *v5;
  double v7;

  v3 = *((_QWORD *)this + 15);
  if (v3 && (*(_WORD *)(v3 + 66) & 2) != 0)
    return 0;
  v4 = (TParagraphStyle **)*((_QWORD *)this + 16);
  if (!v4 || TParagraphStyle::GetTabStops(v4, a2))
    return 1;
  TParagraphStyle::GetDefaultTabInterval(*((TParagraphStyle ***)this + 16), v5);
  return v7 != 0.0;
}

uint64_t TAttributes::GetTabStopForLocation(TAttributes *this, long double a2, TTextTab *a3)
{
  uint64_t v6;
  TParagraphStyle **v7;
  const __CFArray *TabStops;
  const void *v9;
  double v10;
  const __CFArray *v11;
  void *Table;
  double v13;
  double *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  void *ValueAtIndex;
  double v19;
  double v20;
  char v21;
  long double v22;
  uint64_t result;

  v6 = *((_QWORD *)this + 15);
  if (v6 && (*(_WORD *)(v6 + 66) & 2) != 0)
    return 0;
  v7 = (TParagraphStyle **)*((_QWORD *)this + 16);
  if (!v7)
  {
    if (a2 < 336.0)
    {
      v22 = fmod(a2, 28.0);
      v21 = 0;
      v20 = a2 + 28.0 - v22;
      goto LABEL_16;
    }
    return 0;
  }
  TabStops = (const __CFArray *)TParagraphStyle::GetTabStops(v7, a3);
  v10 = 0.0;
  if (!TabStops)
    goto LABEL_12;
  v11 = TabStops;
  Table = GetTable();
  v13 = 0.0002;
  if (Table)
  {
    v14 = (double *)*((_QWORD *)Table + 8);
    if (v14)
      v13 = *v14;
  }
  Count = CFArrayGetCount(v11);
  if (!Count)
  {
LABEL_12:
    TParagraphStyle::GetDefaultTabInterval(*((TParagraphStyle ***)this + 16), v9);
    if (v19 != 0.0)
    {
      v20 = v10 + v19 * (floor((a2 + 0.00000011920929 - v10) / v19) + 1.0);
      v21 = 4;
LABEL_16:
      *(double *)a3 = v20;
      *((_BYTE *)a3 + 8) = v21;
      result = 1;
      *((_QWORD *)a3 + 2) = 0;
      return result;
    }
    return 0;
  }
  v16 = Count;
  v17 = 0;
  while (1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, v17);
    TTextTab::SetTabRef(a3, ValueAtIndex);
    v10 = *(double *)a3;
    if (*(double *)a3 - a2 > v13)
      return 1;
    if (v16 == ++v17)
      goto LABEL_12;
  }
}

void TAttributes::CopyForegroundColorForContext(TAttributes *this@<X0>, CGContext *a2@<X1>, const __CFString **a3@<X2>, _QWORD *a4@<X8>)
{
  TAttributes *v6;
  void *ForegroundColor;
  CFTypeID v8;
  unint64_t v9;
  void *FillColorAsColor;
  CGColorRef v11;
  id v12;

  if ((*((_BYTE *)this + 136) & 1) != 0)
  {
    FillColorAsColor = (void *)CGContextGetFillColorAsColor();
LABEL_13:
    v11 = FillColorAsColor;
LABEL_15:
    *a4 = v11;
    return;
  }
  v6 = (TAttributes *)atomic_load((unint64_t *)this);
  ForegroundColor = (void *)TAttributes::GetForegroundColor(v6, a2, a3);
  if (!ForegroundColor
    && ((*((_BYTE *)this + 136) & 2) == 0 || (ForegroundColor = (void *)atomic_load((unint64_t *)this + 4)) == 0))
  {
    if (qword_1ECDE78A0 != -1)
      dispatch_once_f(&qword_1ECDE78A0, 0, (dispatch_function_t)GetBlackColor(void)::$_0::__invoke);
    FillColorAsColor = (void *)qword_1ECDE7898;
    goto LABEL_13;
  }
  v8 = CFGetTypeID(ForegroundColor);
  if (v8 != CGColorGetTypeID())
  {
    v11 = CopyCGColor(ForegroundColor);
    goto LABEL_15;
  }
  v12 = ForegroundColor;
  do
    v9 = __ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));
  *a4 = v9;

}

const void *TAttributes::GetStrikethroughColor(TAttributes *this, uint64_t a2, const __CFString **a3)
{
  TAttributes *v4;
  const void *result;

  if ((*((_BYTE *)this + 136) & 1) != 0)
    return (const void *)*MEMORY[0x1E0C9B0D0];
  v4 = (TAttributes *)atomic_load((unint64_t *)this);
  result = TAttributes::GetStrikethroughColor(v4, 0, a3);
  if (!result)
  {
    if ((*((_BYTE *)this + 136) & 2) != 0)
      return (const void *)atomic_load((unint64_t *)this + 4);
    else
      return 0;
  }
  return result;
}

uint64_t *std::vector<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 == *result)
  {
    v7 = a2[1];
  }
  else
  {
    do
    {
      v7 = v6 - 32;
      v8 = v4 - 32;
      v9 = *(_QWORD *)(v4 - 8);
      if (v9)
      {
        if (v8 == v9)
        {
          *(_QWORD *)(v6 - 8) = v7;
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 - 8) + 24))(*(_QWORD *)(v4 - 8), v6 - 32);
        }
        else
        {
          *(_QWORD *)(v6 - 8) = v9;
          *(_QWORD *)(v4 - 8) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v6 - 8) = 0;
      }
      v4 = v8;
      v6 = v7;
    }
    while (v8 != v5);
  }
  a2[1] = v7;
  v10 = *v3;
  *v3 = v7;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(TAttributes &)>,TInlineBufferAllocator<std::function<void ()(TAttributes &)>,30ul> &>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v5 = (_QWORD *)*(v2 - 1);
      if (v5 == v4)
        break;
      if (v5)
      {
        v4 = v5;
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v6))();
        v4 = *(_QWORD **)(a1 + 16);
      }
      v2 = v4;
      if (v4 == v3)
        goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (_QWORD *)(v8 + 960);
    if (v8 <= (unint64_t)v7 && v9 > v7)
    {
      if (*(_QWORD *)(a1 + 24) == *v9)
        *v9 = v7;
    }
    else
    {
      operator delete(v7);
    }
  }
  return a1;
}

void SecondaryScaleRecipeForFont(uint64_t a1, uint64_t a2, __CFString *theString, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v16;
  const __CFString *v17;
  CFMutableStringRef MutableCopy;
  void *v19;
  __CFString *v20;
  const void *SecondaryScaleData;
  uint64_t v22;
  const __CFString *v23;
  const __CFArray *v24;
  const __CFDictionary *v25;
  const __CFDictionary *Value;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const __CFDictionary *v35;
  const __CFDictionary *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char v49;
  CFTypeID TypeID;
  CFTypeID v51;
  const void *ValueAtIndex;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  const __CFString *v55;
  const __CFDictionary *v56;
  id v57;
  CFArrayRef theArray;
  double v59;
  CFRange v60;

  v16 = 0;
  v57 = 0;
  while (1)
  {
    v17 = SecondaryScaleArrayForFamilyName(__CFString const*)::kNameAliases[v16];
    if (v17 == theString)
      break;
    if (theString
      && v17
      && CFStringHasPrefix(theString, SecondaryScaleArrayForFamilyName(__CFString const*)::kNameAliases[v16]))
    {
      goto LABEL_9;
    }
    v16 += 3;
    if (v16 == 9)
      goto LABEL_14;
  }
  v17 = theString;
LABEL_9:
  if (LOBYTE(SecondaryScaleArrayForFamilyName(__CFString const*)::kNameAliases[v16 + 2]))
  {
    theString = SecondaryScaleArrayForFamilyName(__CFString const*)::kNameAliases[v16 + 1];
  }
  else
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
    do
      v19 = (void *)__ldaxr((unint64_t *)&v57);
    while (__stlxr((unint64_t)MutableCopy, (unint64_t *)&v57));

    v20 = (__CFString *)atomic_load((unint64_t *)&v57);
    v60.length = CFStringGetLength(v17);
    v60.location = 0;
    CFStringReplace(v20, v60, SecondaryScaleArrayForFamilyName(__CFString const*)::kNameAliases[v16 + 1]);
    theString = (__CFString *)atomic_load((unint64_t *)&v57);
  }
LABEL_14:
  SecondaryScaleData = (const void *)objc_msgSend(&unk_1E1605630, "objectForKeyedSubscript:", theString);

  if (!SecondaryScaleData)
  {
    SecondaryScaleData = (const void *)TFont::GetSecondaryScaleData(*(TFont **)(a2 + 40));
    TypeID = CFArrayGetTypeID();
    if (!SecondaryScaleData
      || (v51 = TypeID, CFGetTypeID(SecondaryScaleData) != TypeID)
      || !CFArrayGetCount((CFArrayRef)SecondaryScaleData)
      || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)SecondaryScaleData, 0), CFGetTypeID(ValueAtIndex) != v51))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      return;
    }
  }
  v22 = objc_msgSend(&unk_1E1605608, "objectForKeyedSubscript:", a4);
  if (v22)
    v23 = (const __CFString *)v22;
  else
    v23 = CFSTR("sfpro");
  v57 = (id)0xAAAAAAAAAAAAAAAALL;
  theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  v59 = NAN;
  tuplesBracketingValue((const __CFArray *)&v57, (CFArrayRef)SecondaryScaleData, a7, 0);
  v24 = (const __CFArray *)v57;
  v25 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v57, 1);
  Value = (const __CFDictionary *)CFDictionaryGetValue(v25, v23);
  if (!Value)
  {
    v53 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16055E0, v23);
    if (v53)
    {
      v54 = v53;
      while (1)
      {
        v55 = (const __CFString *)CFDictionaryGetValue(v54, v23);
        if (!v55)
          break;
        v23 = v55;
        v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, 1);
        Value = (const __CFDictionary *)CFDictionaryGetValue(v56, v23);
        if (Value)
          goto LABEL_19;
      }
    }
LABEL_32:
    v49 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_34;
  }
LABEL_19:
  v27 = TextScaleRecipeForSize(Value, a5, a6, a8);
  v31 = v27;
  v32 = v28;
  v33 = v29;
  v34 = v30;
  if (v24 == theArray)
  {
    *(double *)a1 = v27;
    *(double *)(a1 + 8) = v28;
    v49 = 1;
    *(double *)(a1 + 16) = v29;
    *(double *)(a1 + 24) = v30;
    goto LABEL_34;
  }
  v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 1);
  v36 = (const __CFDictionary *)CFDictionaryGetValue(v35, v23);
  if (!v36)
    goto LABEL_32;
  v37 = TextScaleRecipeForSize(v36, a5, a6, a8);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = v59;
  v45 = std::__lerp[abi:nn180100]<double>(v31, v37, v59);
  v46 = std::__lerp[abi:nn180100]<double>(v32, v39, v44);
  v47 = std::__lerp[abi:nn180100]<double>(v33, v41, v44);
  v48 = std::__lerp[abi:nn180100]<double>(v34, v43, v44);
  *(double *)a1 = v45;
  *(double *)(a1 + 8) = v46;
  *(double *)(a1 + 16) = v47;
  *(double *)(a1 + 24) = v48;
  v49 = 1;
LABEL_34:
  *(_BYTE *)(a1 + 32) = v49;
}

double GetRoundedWeight(TBaseFont **a1)
{
  void *v3;
  const __CFNumber *v4;
  double v5;
  id v6;
  const __CFNumber *v7;
  id v9;
  double valuePtr;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyWeightAxisValue(a1[50], (unint64_t *)&v9);
  if (atomic_load((unint64_t *)&v9))
  {
    v3 = (void *)atomic_load((unint64_t *)&v9);
    v4 = v3;
    valuePtr = NAN;
    CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    v5 = round(valuePtr);

    v6 = v9;
  }
  else
  {

    TFont::CopyAttribute((TFont *)a1, CFSTR("CTFontCSSWeightAttribute"), 45, (unint64_t *)&valuePtr);
    do
      v7 = (const __CFNumber *)__ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));

    valuePtr = NAN;
    CFNumberGetValue(v7, kCFNumberDoubleType, &valuePtr);
    v5 = valuePtr;
    v6 = v7;
  }

  return v5;
}

void CreateCopyOfFontWithSizeAndWeightClass(const __CTFont *a1, CGFloat a2, double a3, _QWORD *a4, int a5)
{
  _QWORD *v7;
  unint64_t v9;
  void *v10;
  TFont *v11;
  unint64_t v12;
  const __CFDictionary *v13;
  unint64_t v14;
  __CFDictionary *v15;
  const void *v16;
  const void *v17;
  __CFDictionary *v18;
  __CFDictionary *v19;
  const void *v20;
  const void *v22;
  const __CTFontDescriptor *v23;
  const __CTFontDescriptor *v24;
  id v25;
  void *v26;
  const __CFAllocator *v27;
  const __CFDictionary *v28;
  CTFontDescriptorRef v29;
  const __CFArray *MatchingFontDescriptorsWithOptions;
  __int128 v31;
  __CFDictionary *Mutable;
  CFIndex Count;
  CFIndex v34;
  const __CFArray *v35;
  CFIndex i;
  const __CTFontDescriptor *ValueAtIndex;
  void *v38;
  const __CFNumber *v39;
  id v40;
  double *v41;
  double *v42;
  double *v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  double *v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  const void *v60;
  const __CTFontDescriptor *Value;
  void *v63;
  const __CFDictionary *v64;
  const __CTFontDescriptor *CopyWithAttributes;
  CTFontRef v66;
  _QWORD *v67;
  const __CFAllocator *allocator;
  const __CTFontDescriptor *v69;
  const __CFDictionary *v70;
  const __CTFont *v71;
  const __CFArray *v72;
  id v73;
  id v74;
  id values[5];
  void *v76;
  id keys;
  double *v78;
  unint64_t v79;
  _OWORD v80[15];
  _OWORD *v81;
  uint64_t v82;

  v7 = a4;
  v82 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  if (a5)
  {
    CreateFeatureSettingsForLigatureSetting((unint64_t *)&keys, *(_QWORD *)(a4[5] + 400), 0);
    do
      v9 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v10 = (void *)__ldaxr((unint64_t *)&v74);
    while (__stlxr(v9, (unint64_t *)&v74));

  }
  v11 = (TFont *)v7[5];
  (*(void (**)(id *__return_ptr))(**((_QWORD **)v11 + 50) + 120))(&keys);
  v12 = atomic_load((unint64_t *)&keys);

  if (!v12)
  {
    v73 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, _QWORD *, const __CFString *))(**((_QWORD **)v11 + 50) + 72))(&v73, *((_QWORD **)v11 + 50), CFSTR("CTFontFamilyName"));
    v26 = (void *)atomic_load((unint64_t *)&v73);
    keys = CFSTR("NSFontFamilyAttribute");
    values[0] = v26;
    v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v28 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v29 = CTFontDescriptorCreateWithAttributes(v28);
    MatchingFontDescriptorsWithOptions = (const __CFArray *)CTFontDescriptorCreateMatchingFontDescriptorsWithOptions((uint64_t)v29, 0, 1024);
    if (MatchingFontDescriptorsWithOptions)
    {
      v69 = v29;
      v70 = v28;
      v67 = v7;
      v71 = a1;
      *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v80[14] = v31;
      v80[13] = v31;
      v80[12] = v31;
      v80[11] = v31;
      v80[10] = v31;
      v80[9] = v31;
      v80[8] = v31;
      v80[7] = v31;
      v80[6] = v31;
      v80[5] = v31;
      v80[4] = v31;
      v80[3] = v31;
      v80[2] = v31;
      v80[1] = v31;
      v80[0] = v31;
      v78 = 0;
      v79 = 0;
      keys = 0;
      v81 = v80;
      allocator = v27;
      Mutable = CFDictionaryCreateMutable(v27, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Count = CFArrayGetCount(MatchingFontDescriptorsWithOptions);
      v72 = MatchingFontDescriptorsWithOptions;
      if (Count)
      {
        v34 = Count;
        v35 = MatchingFontDescriptorsWithOptions;
        for (i = 0; i != v34; ++i)
        {
          ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v35, i);
          v38 = (void *)MEMORY[0x186DC070C]();
          v39 = (const __CFNumber *)CTFontDescriptorCopyAttribute(ValueAtIndex, CFSTR("CTFontCSSWeightAttribute"));
          values[0] = (id)-1;
          CFNumberGetValue(v39, kCFNumberDoubleType, values);
          v40 = values[0];
          v41 = v78;
          if ((unint64_t)v78 >= v79)
          {
            v43 = (double *)keys;
            v44 = ((char *)v78 - (_BYTE *)keys) >> 3;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61)
              abort();
            v46 = v79 - (_QWORD)keys;
            if ((uint64_t)(v79 - (_QWORD)keys) >> 2 > v45)
              v45 = v46 >> 2;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            values[4] = v80;
            if (v47)
            {
              v48 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v80, v47);
              v43 = (double *)keys;
              v41 = v78;
            }
            else
            {
              v48 = 0;
            }
            v49 = &v48[8 * v44];
            *(_QWORD *)v49 = v40;
            if (v41 == v43)
            {
              v51 = &v48[8 * v44];
            }
            else
            {
              v50 = v41;
              v51 = &v48[8 * v44];
              do
              {
                v52 = *((_QWORD *)v50-- - 1);
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              while (v50 != v43);
            }
            v42 = (double *)(v49 + 8);
            keys = v51;
            v78 = (double *)(v49 + 8);
            v53 = (void *)v79;
            v79 = (unint64_t)&v48[8 * v47];
            values[2] = v41;
            values[3] = v53;
            values[0] = v43;
            values[1] = v43;
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)values);
            v35 = v72;
          }
          else
          {
            *v78 = *(double *)values;
            v42 = v41 + 1;
          }
          v78 = v42;
          CFDictionaryAddValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v40, v67, allocator), ValueAtIndex);

          objc_autoreleasePoolPop(v38);
        }
      }
      LOBYTE(values[0]) = -86;
      std::__sort<std::__less<double,double> &,double *>();
      v54 = (double *)keys;
      v55 = IndexesBracketing<std::__wrap_iter<double *>,double>((double *)keys, v78, a3);
      v56 = v54[(unsigned __int16)v55];
      v57 = v54[HIWORD(v55)];
      v58 = 0.0;
      if (v56 != v57)
        v58 = (a3 - v56) / (v57 - v56);
      v59 = std::__lerp[abi:nn180100]<double>(v56, v57, round(v58));
      TCFNumber::TCFNumber<double>((unint64_t *)values, v59);
      v60 = (const void *)atomic_load((unint64_t *)values);
      Value = (const __CTFontDescriptor *)CFDictionaryGetValue(Mutable, v60);

      v28 = v70;
      a1 = v71;
      if (Value)
      {
        if (atomic_load((unint64_t *)&v74))
        {
          v63 = (void *)atomic_load((unint64_t *)&v74);
          values[0] = CFSTR("NSCTFontFeatureSettingsAttribute");
          v76 = v63;
          v64 = CFDictionaryCreate(allocator, (const void **)values, (const void **)&v76, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(Value, v64);
          v66 = CTFontCreateWithFontDescriptor(CopyWithAttributes, a2, 0);

        }
        else
        {
          v66 = CTFontCreateWithFontDescriptor(Value, a2, 0);
        }
        *(_QWORD *)v71 = v66;

        values[0] = &keys;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)values);

        v29 = v69;
        goto LABEL_42;
      }

      values[0] = &keys;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)values);
      v7 = v67;
      MatchingFontDescriptorsWithOptions = v72;
    }

    *(_QWORD *)a1 = v7;
LABEL_42:

    v25 = v73;
    goto LABEL_43;
  }
  keys = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CopyAttribute(v11, CFSTR("NSCTFontVariationAttribute"), 7, (unint64_t *)values);
  v13 = (const __CFDictionary *)atomic_load((unint64_t *)values);
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&keys, v13);

  (*(void (**)(id *__return_ptr))(**((_QWORD **)v11 + 50) + 128))(values);
  v14 = atomic_load((unint64_t *)values);

  if (v14)
  {
    TCFNumber::TCFNumber<double>((unint64_t *)values, a2);
    v15 = (__CFDictionary *)atomic_load((unint64_t *)&keys);
    v16 = (const void *)atomic_load((unint64_t *)values);
    CFDictionarySetValue(v15, &unk_1E1617068, v16);

  }
  TCFNumber::TCFNumber<double>((unint64_t *)values, a3);
  v17 = (const void *)atomic_load((unint64_t *)values);
  v18 = (__CFDictionary *)atomic_load((unint64_t *)&keys);
  CFDictionarySetValue(v18, &unk_1E1617080, v17);

  v19 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = (const void *)atomic_load((unint64_t *)&keys);
  CFDictionarySetValue(v19, CFSTR("NSCTFontVariationAttribute"), v20);
  if (atomic_load((unint64_t *)&v74))
  {
    v22 = (const void *)atomic_load((unint64_t *)&v74);
    CFDictionarySetValue(v19, CFSTR("NSCTFontFeatureSettingsAttribute"), v22);
  }
  values[0] = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CopyDescriptor(v11, 0, (unint64_t *)values);
  v23 = (const __CTFontDescriptor *)atomic_load((unint64_t *)values);
  v24 = CTFontDescriptorCreateCopyWithAttributes(v23, v19);
  *(_QWORD *)a1 = CTFontCreateWithFontDescriptor(v24, a2, 0);

  v25 = keys;
LABEL_43:

}

double TextScaleRecipeForSize(__CFDictionary const*,double,std::optional<double>)::$_0::operator()(CFArrayRef theArray, double a2)
{
  const __CFArray *v2;
  const __CFNumber *ValueAtIndex;
  double v4;
  const __CFArray *v5;
  const __CFNumber *v6;
  double v7;
  double v8;
  const __CFNumber *v9;
  double v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  double v13;
  const __CFNumber *v14;
  CFArrayRef theArraya;
  CFArrayRef v17;
  double v18;
  double valuePtr;

  theArraya = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  v17 = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  v18 = NAN;
  tuplesBracketingValue((const __CFArray *)&theArraya, theArray, a2, 1);
  v2 = theArraya;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArraya, 1);
  valuePtr = NAN;
  CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
  v4 = valuePtr;
  v5 = v17;
  v6 = (const __CFNumber *)CFArrayGetValueAtIndex(v17, 1);
  valuePtr = NAN;
  CFNumberGetValue(v6, kCFNumberDoubleType, &valuePtr);
  v7 = v18;
  v8 = std::__lerp[abi:nn180100]<double>(v4, valuePtr, v18);
  v9 = (const __CFNumber *)CFArrayGetValueAtIndex(v2, 2);
  valuePtr = NAN;
  CFNumberGetValue(v9, kCFNumberDoubleType, &valuePtr);
  v10 = valuePtr;
  v11 = (const __CFNumber *)CFArrayGetValueAtIndex(v5, 2);
  valuePtr = NAN;
  CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
  std::__lerp[abi:nn180100]<double>(v10, valuePtr, v7);
  v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v2, 3);
  valuePtr = NAN;
  CFNumberGetValue(v12, kCFNumberDoubleType, &valuePtr);
  v13 = valuePtr;
  v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v5, 3);
  valuePtr = NAN;
  CFNumberGetValue(v14, kCFNumberDoubleType, &valuePtr);
  std::__lerp[abi:nn180100]<double>(v13, valuePtr, v7);
  return v8;
}

void TCFMutableDictionary::TCFMutableDictionary(TCFMutableDictionary *this, id a2)
{
  CFMutableDictionaryRef Mutable;

  if (a2)
    Mutable = (CFMutableDictionaryRef)a2;
  else
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)this = Mutable;
}

void TAttributes::ApplyAttributeHandlers(void const*,void const*,void *)::$_0::__invoke()
{
  unint64_t v0;
  id v1;
  const void *__dst[38];
  void *keys[39];

  keys[38] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("NSFont");
  keys[1] = CFSTR("NSParagraphStyle");
  keys[2] = CFSTR("CTForegroundColor");
  keys[3] = CFSTR("CTBackgroundColor");
  keys[4] = CFSTR("NSColor");
  keys[5] = CFSTR("NSBackgroundColor");
  keys[6] = CFSTR("NSShadow");
  keys[7] = CFSTR("NSBaselineOffset");
  keys[8] = CFSTR("NSStrokeWidth");
  keys[9] = CFSTR("NSUnderline");
  keys[10] = CFSTR("NSStrikethrough");
  keys[11] = CFSTR("NSKern");
  keys[12] = CFSTR("CTTracking");
  keys[13] = CFSTR("NSLigature");
  keys[14] = CFSTR("CTBaselineOffset");
  keys[15] = CFSTR("CTSuperscript");
  keys[16] = CFSTR("NSCharacterShape");
  keys[17] = CFSTR("CTVerticalForms");
  keys[18] = CFSTR("CTHorizontalInVerticalForms");
  keys[19] = CFSTR("NSGlyphInfo");
  keys[20] = CFSTR("CTRunDelegate");
  keys[21] = CFSTR("CTForegroundColorFromContext");
  keys[22] = CFSTR("CTRenderingStyle");
  keys[23] = CFSTR("CTBaselineClass");
  keys[24] = CFSTR("CTBaselineInfo");
  keys[25] = CFSTR("CTBaselineReferenceInfo");
  keys[26] = CFSTR("NSWritingDirection");
  keys[27] = CFSTR("NSLanguage");
  keys[28] = CFSTR("CTRubyAnnotation");
  keys[29] = CFSTR("CTTextEncapsulation");
  keys[30] = CFSTR("NSTextEncapsulation");
  keys[31] = CFSTR("CTTrimWhitespaceBackground");
  keys[32] = CFSTR("CTImposedGlyph");
  keys[33] = CFSTR("CTPalette");
  keys[34] = CFSTR("NSTextScale");
  keys[35] = CFSTR("CTAdaptiveImageProvider");
  keys[36] = CFSTR("CTEmojiImageProvider");
  keys[37] = CFSTR("CTRunMetricsDelegate");
  memcpy(__dst, off_1E15E7580, sizeof(__dst));
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, __dst, 38, MEMORY[0x1E0C9B390], 0);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));
  qword_1ECDE7868 = v0;

}

void TAttributes::ApplyFontAttributeHandlers(void const*,void const*,void *)::$_0::__invoke()
{
  unint64_t v0;
  id v1;
  void *values[2];
  __int128 v3;
  __int128 v4;
  uint64_t (*v5)(NSTextEncapsulation *, TAttributes **);
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("NSLigature");
  keys[1] = CFSTR("CTSuperscript");
  keys[2] = CFSTR("NSCharacterShape");
  keys[3] = CFSTR("CTHorizontalInVerticalForms");
  keys[4] = CFSTR("CTPalette");
  keys[5] = CFSTR("CTTextEncapsulation");
  keys[6] = CFSTR("NSTextEncapsulation");
  *(_OWORD *)values = xmmword_1E15E76B0;
  v3 = *(_OWORD *)&off_1E15E76C0;
  v4 = xmmword_1E15E76D0;
  v5 = TAttributes::HandleTextEncapsulationAttributeNeue;
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], 0);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));
  qword_1ECDE7878 = v0;

}

CGColorRef GetBlackColor(void)::$_0::__invoke()
{
  CGColorRef result;

  result = CGColorGetConstantColor((CFStringRef)*MEMORY[0x1E0C9D8E0]);
  qword_1ECDE7898 = (uint64_t)result;
  return result;
}

void std::__function::__func<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_WORD *std::__function::__func<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E15DFC20;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15DFC20;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleSuperscriptAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  void *v7;
  id v8;

  v3 = (unint64_t *)(a2 + 16);
  v4 = atomic_load((unint64_t *)(a2 + 16));
  CreateCopyOfFontWithFeature((const __CTFont *)&v8, v4, 10, *(unsigned __int16 *)(a1 + 8));
  if (atomic_load((unint64_t *)&v8))
  {
    do
      v6 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    do
      v7 = (void *)__ldaxr(v3);
    while (__stlxr(v6, v3));

    *(_BYTE *)(a2 + 48) = 1;
  }

}

void std::__function::__func<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_WORD *std::__function::__func<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E15DFC68;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15DFC68;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleCharacterShapeAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  void *v7;
  id v8;

  v3 = (unint64_t *)(a2 + 16);
  v4 = atomic_load((unint64_t *)(a2 + 16));
  CreateCopyOfFontWithFeature((const __CTFont *)&v8, v4, 20, *(unsigned __int16 *)(a1 + 8));
  if (atomic_load((unint64_t *)&v8))
  {
    do
      v6 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    do
      v7 = (void *)__ldaxr(v3);
    while (__stlxr(v6, v3));

    *(_BYTE *)(a2 + 48) = 1;
  }

}

void std::__function::__func<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DFD40;
  return result;
}

void std::__function::__func<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DFD40;
}

void std::__function::__func<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleHorizontalInVerticalFormsAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(int a1, TAttributes *this)
{
  if (*((_BYTE *)this + 50))
    TAttributes::ApplyTateChuYoko(this);
}

void std::__shared_ptr_emplace<TextEncapsulationData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TextEncapsulationData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

void std::__function::__func<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_WORD *std::__function::__func<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E15DFCB0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15DFCB0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(uint64_t a1, uint64_t a2)
{
  const __CTFont *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *inited;
  uint64_t v9;
  double Weight;
  TTextEncapsulationRun *v11;
  unsigned int ClassOfWeight;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;

  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  TAttributes::PrimaryFont((TAttributes *)&v18, a2);
  v4 = (const __CTFont *)atomic_load((unint64_t *)&v18);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 5);
    v6 = a2 + 120;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 80);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + 16);
    if (*(_DWORD *)(v5 + 48))
    {
      inited = (int *)(v5 + 48);
    }
    else
    {
      inited = TFont::InitStrikeMetrics((TFont *)v5);
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 80);
    }
    v9 = *((_QWORD *)inited + 4);
  }
  else
  {
    v6 = a2 + 120;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 80);
    *(_QWORD *)(v7 + 32) = 0;
    v9 = 0;
  }
  *(_QWORD *)(v7 + 48) = v9;
  Weight = CTFontGetWeight((uint64_t)v4);
  ClassOfWeight = TTextEncapsulationRun::GetClassOfWeight(v11, Weight);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)v6 + 80) + 40) = ClassOfWeight;
  TTextEncapsulationRun::CreateEncapsulationFont(v4, ClassOfWeight, *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 8), (CTFontRef *)&v17);
  if (atomic_load((unint64_t *)&v17))
  {
    v14 = (unint64_t *)(a2 + 16);
    do
      v15 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    do
      v16 = (void *)__ldaxr(v14);
    while (__stlxr(v15, v14));

    *(_BYTE *)(a2 + 48) = 1;
  }

}

void std::__function::__func<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_WORD *std::__function::__func<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E15DFCF8;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15DFCF8;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void std::__function::__func<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandleTextEncapsulationAttributeNeue(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(uint64_t a1, uint64_t a2)
{
  const __CTFont *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *inited;
  uint64_t v9;
  double Weight;
  TTextEncapsulationRun *v11;
  unsigned int ClassOfWeight;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;

  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  TAttributes::PrimaryFont((TAttributes *)&v18, a2);
  v4 = (const __CTFont *)atomic_load((unint64_t *)&v18);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 5);
    v6 = a2 + 120;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 80);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + 16);
    if (*(_DWORD *)(v5 + 48))
    {
      inited = (int *)(v5 + 48);
    }
    else
    {
      inited = TFont::InitStrikeMetrics((TFont *)v5);
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 80);
    }
    v9 = *((_QWORD *)inited + 4);
  }
  else
  {
    v6 = a2 + 120;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 80);
    *(_QWORD *)(v7 + 32) = 0;
    v9 = 0;
  }
  *(_QWORD *)(v7 + 48) = v9;
  Weight = CTFontGetWeight((uint64_t)v4);
  ClassOfWeight = TTextEncapsulationRun::GetClassOfWeight(v11, Weight);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)v6 + 80) + 40) = ClassOfWeight;
  TTextEncapsulationRun::CreateEncapsulationFont(v4, ClassOfWeight, *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 8), (CTFontRef *)&v17);
  if (atomic_load((unint64_t *)&v17))
  {
    v14 = (unint64_t *)(a2 + 16);
    do
      v15 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    do
      v16 = (void *)__ldaxr(v14);
    while (__stlxr(v15, v14));

    *(_BYTE *)(a2 + 48) = 1;
  }

}

void std::__function::__func<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DFBD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DFBD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0,std::allocator<TAttributes::HandlePaletteAttribute(void const*,TAttributes::AttributeHandlerContext *)::$_0>,void ()(TAttributes&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  void *v6;
  const __CTFontDescriptor *v7;
  const __CFDictionary *v8;
  unint64_t v9;
  void *v10;
  const __CTFontDescriptor *v11;
  unint64_t v13;
  void *v14;
  id v15;
  void *values;
  id keys;

  v3 = (unint64_t *)(a2 + 16);
  v4 = atomic_load((unint64_t *)(a2 + 16));
  if (v4)
  {
    v5 = *(void **)(a1 + 8);
    TFont::CopyDescriptor(*(TFont **)(v4 + 40), 0, (unint64_t *)&keys);
    do
      v6 = (void *)__ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));

    v15 = v6;
    v7 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v15);
    values = v5;
    keys = CFSTR("CTFontPaletteAttribute");
    v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    keys = CTFontDescriptorCreateCopyWithAttributes(v7, v8);
    do
      v9 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v10 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(v9, (unint64_t *)&v15));

    v11 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v15);
    keys = CTFontCreateWithFontDescriptor(v11, 0.0, 0);

  }
  else
  {
    keys = 0;
  }
  if (atomic_load((unint64_t *)&keys))
  {
    do
      v13 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v14 = (void *)__ldaxr(v3);
    while (__stlxr(v13, v3));

    *(_BYTE *)(a2 + 48) = 1;
  }

}

uint64_t OTL::GPOS::ApplySinglePos(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  unsigned __int16 *v8;
  char v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint8x8_t v12;
  unsigned __int16 *v13;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = ValueForSinglePos(a2, v7, a4);
  v10 = v8;
  if (v8)
  {
    v11 = a2[2];
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)a2[2]);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = &v8[v12.u32[0]];
    if (v8 >= a2 && v13 >= v8 && (unint64_t)v13 <= v7)
      goto LABEL_16;
    v16 = (unint64_t)(v8 + 1) <= v7 && v8 >= a2;
    v17 = (v7 - (unint64_t)v8) >> 1;
    if (!v16)
      v17 = 0;
    if (v17 != v12.u32[0])
    {
      v9 = 0;
    }
    else
    {
LABEL_16:
      v18 = *(_QWORD *)(a1 + 16);
      v20 = v8;
      v21 = __rev16(v11);
      v22 = a2;
      v23 = v18;
      v24 = a1;
      ValueRecord::operator()(&v20, *(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
      v9 = 1;
    }
  }
  return (v10 != 0) & v9;
}

unsigned __int16 *ValueForSinglePos(unsigned __int16 *a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint8x8_t v11;

  v3 = bswap32(*a1) >> 16;
  if (v3 != 2)
  {
    if (v3 == 1 && (unint64_t)(a1 + 4) <= a2)
      return a1 + 3;
    return 0;
  }
  v5 = a1 + 4;
  if ((unint64_t)(a1 + 4) > a2)
    return 0;
  v6 = bswap32(a1[3]) >> 16;
  v7 = (unint64_t)&v5[v6];
  v8 = (unint64_t)(a1 + 5) <= a2 ? (a2 - (unint64_t)v5) >> 1 : 0;
  v9 = v7 <= a2 && v7 >= (unint64_t)v5;
  v10 = v9 || v8 == v6;
  if (!v10 || v6 < a3)
    return 0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)a1[2]);
  v11.i16[0] = vaddlv_u8(v11);
  return &v5[v11.u32[0] * (unint64_t)(a3 - 1)];
}

uint64_t OTL::GPOS::GetSinglePosAdjustmentsForLookup(OTL::GPOS *this, const OTL::Lookup *a2, uint64_t a3, double *a4, double *a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  TFont *v25;
  unsigned int v26;
  const __int16 *VariationValues;
  const __int16 *v28;
  int v29;
  unsigned __int16 *v30;
  int i;
  unint64_t v33;

  if (*((_WORD *)a2 + 8) == 1)
  {
    *a4 = 0.0;
    *a5 = 0.0;
    if (-21845 * (unsigned __int16)((*((_DWORD *)a2 + 24) - *((_DWORD *)a2 + 22)) >> 4))
    {
      v9 = 0;
      v10 = 0;
      v11 = 48 * (unsigned __int16)(-21845 * ((*((_DWORD *)a2 + 24) - *((_DWORD *)a2 + 22)) >> 4));
      do
      {
        v12 = *((_QWORD *)a2 + 11);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 12) - v12) >> 4) <= v10)
          break;
        v13 = v12 + v9;
        v14 = *(uint64_t (**)(_QWORD *, uint64_t))(v12 + v9 + 24);
        v15 = *(_QWORD *)(v13 + 32);
        v16 = (_QWORD *)(v13 + (v15 >> 1) + 8);
        if ((v15 & 1) != 0)
          v14 = *(uint64_t (**)(_QWORD *, uint64_t))(*v16 + v14);
        v17 = v14(v16, a3);
        if (v17)
        {
          v18 = *((_QWORD *)a2 + 11);
          v19 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 12) - v18) >> 4) <= v10
              ? 0
              : *(unsigned __int16 **)(v18 + v9);
          v20 = ValueForSinglePos(v19, *((_QWORD *)this + 5), v17);
          if (v20)
          {
            v22 = v20;
            v23 = bswap32(v19[2]);
            v24 = HIWORD(v23);
            v25 = (TFont *)*((_QWORD *)this + 2);
            if ((v23 & 0x10000) != 0 && *v22)
              *a4 = *a4 + (double)((int)bswap32(*v22) >> 16);
            if ((v23 & 0x40000) != 0)
            {
              v26 = v22[(HIWORD(v23) & 1) + ((v23 >> 17) & 1)];
              if (v26)
                *a5 = *a5 + (double)((int)bswap32(v26) >> 16);
            }
            if ((v24 & 0xF0) != 0)
            {
              v33 = 0xAAAAAAAAAAAAAAAALL;
              VariationValues = (const __int16 *)TFont::GetVariationValues(v25, (id *)&v33);
              if (VariationValues)
              {
                v28 = VariationValues;
                if ((v24 & 0x10) != 0)
                {
                  v29 = 1;
                  v30 = v22;
                  do
                  {
                    v30 += (v29 & v24) != 0;
                    v29 *= 2;
                  }
                  while (v29 != 16);
                  if (*v30)
                    *a4 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)this + 3), (char *)v19, *((_QWORD *)this + 5), __rev16(*v30), v33, VariationValues)+ *a4;
                }
                if ((v24 & 0x40) != 0)
                {
                  for (i = 1; i != 64; i *= 2)
                    v22 += (i & v24) != 0;
                  if (*v22)
                    *a5 = OTL::GDEF::DeltaValue(*((OTL::GDEF **)this + 3), (char *)v19, *((_QWORD *)this + 5), __rev16(*v22), v33, v28)+ *a5;
                }
              }
            }
            return 1;
          }
        }
        ++v10;
        v9 += 48;
      }
      while (v11 != v9);
    }
  }
  return 0;
}

uint64_t OTL::GPOS::ApplyCursivePos(_QWORD *a1, uint64_t a2, TGlyphIterator *this, uint64_t a4, int a5, int a6)
{
  unint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v21;
  uint64_t v22;
  uint64_t GlyphID;
  uint64_t (*v24)(_QWORD *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  TFont *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _QWORD *v51;
  int v52;
  double Advance;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;

  v6 = a1[5];
  v7 = (unsigned __int16 *)(a2 + 4);
  v8 = a2 + 6;
  if ((unint64_t)(a2 + 4) < a1[4] || v8 > v6)
    return 0;
  v11 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v12 = v8 + 4 * v11;
  v13 = a2 + 10 <= v6 ? (v6 - v8) >> 2 : 0;
  v14 = v12 <= v6 && v12 >= v8;
  if (!v14 && v13 != v11)
    return 0;
  v21 = *((_QWORD *)this + 6);
  if ((TGlyphIterator::Prev(this) & 1) != 0)
  {
    v22 = *((_QWORD *)this + 6);
    GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, v22);
    v24 = *(uint64_t (**)(_QWORD *, uint64_t))(a4 + 16);
    v25 = *(_QWORD *)(a4 + 24);
    v26 = (_QWORD *)(a4 + (v25 >> 1));
    if ((v25 & 1) != 0)
      v24 = *(uint64_t (**)(_QWORD *, uint64_t))(*v26 + v24);
    result = v24(v26, GlyphID);
    *((_QWORD *)this + 6) = v21;
    if ((_DWORD)result)
    {
      if (a6)
        v28 = -*((_DWORD *)this + 2);
      else
        v28 = *((_DWORD *)this + 2);
      if (a6)
        v29 = v22;
      else
        v29 = v21;
      if (a6)
        v30 = v21;
      else
        v30 = v22;
      if (a6)
        v31 = a5;
      else
        v31 = result;
      if (a6)
        v32 = result;
      else
        v32 = a5;
      v33 = v31 - 1;
      v34 = bswap32(*v7);
      if (v33 >= HIWORD(v34))
        return 0;
      v35 = *(unsigned __int16 *)(a2 + 4 * v33 + 8);
      if (!v35)
        return 0;
      v36 = a2 + __rev16(v35);
      if (v36 + 6 > v6)
        return 0;
      v37 = v32 - 1;
      if (v37 >= HIWORD(v34))
        return 0;
      v38 = *(unsigned __int16 *)(a2 + 4 * v37 + 6);
      if (!v38)
        return 0;
      v39 = a2 + __rev16(v38);
      if (v39 + 6 > v6)
        return 0;
      v68 = NAN;
      v69 = NAN;
      v66 = NAN;
      v67 = NAN;
      v40 = (TFont *)a1[2];
      v41 = (uint64_t)a1;
      v42 = v30;
      v43 = v29;
      GetAnchors(v36, v39, v40, v41, &v68, &v66);
      v44 = v28 < 0;
      if (v28 >= 0)
        v45 = v68 - v66;
      else
        v45 = v66 - v68;
      v46 = v42;
      if (v44)
        v42 = v43;
      TRunGlue::GetUnscaledPosition(*(TRunGlue **)this, v42);
      v48 = v45 + v47;
      TRunGlue::GetUnscaledAdvance(*(TRunGlue **)this, v42);
      v50 = v48 - v49;
      v51 = *(_QWORD **)this;
      v52 = *(unsigned __int8 *)(*(_QWORD *)this + 634);
      Advance = TRunGlue::GetAdvance(*(TRunGlue **)this, v42);
      v55 = 81;
      if (!v52)
        v55 = 80;
      v56 = Advance + *(double *)&v51[v55] * v50;
      TRunGlue::SetAdvance(v51, v42, *(CGSize *)(&v54 - 1));
      if (a6)
        v57 = v67 - v69;
      else
        v57 = v69 - v67;
      TRunGlue::GetUnscaledPosition(*(TRunGlue **)this, v22);
      v59 = v57 + v58;
      TRunGlue::GetUnscaledPosition(*(TRunGlue **)this, v21);
      v61 = v59 - v60;
      v62 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v21;
      do
      {
        v63 = *((_QWORD *)this + 6);
        v64 = *(_QWORD *)this;
        v65 = v63;
        TRunGlue::TGlyph::AdjustYPositionBy((TRunGlue::TGlyph *)&v64, v61);
        TRunGlue::OrGlyphProps(*(TRunGlue **)this, *((_QWORD *)this + 6), 0x2000u);
      }
      while (TGlyphIterator::Next(this, 1)
           && (TRunGlue::GetGlyphProps(*(TRunGlue **)this, *((_QWORD *)this + 6)) & 0x2000) != 0);
      *((_QWORD *)this + 6) = v62;
      v64 = *(_QWORD *)this;
      v65 = v46;
      TRunGlue::TGlyph::clearSafeToBreakAfter((uint64_t)&v64);
      return 1;
    }
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 6) = v21;
  }
  return result;
}

uint64_t **TRunGlue::TGlyph::AdjustYPositionBy(TRunGlue::TGlyph *this, double a2)
{
  uint64_t v4;
  uint64_t **result;
  double v6;
  double v7;
  double v8;
  double v9;
  CGPoint v10;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)(v4 + 152) || *(_QWORD *)(v4 + 192)) && !*(_BYTE *)(v4 + 634))
  {
    v10.x = TRunGlue::GetOrigin((TRunGlue *)v4, *((_QWORD *)this + 1));
    v10.y = v9 + *(double *)(*(_QWORD *)this + 648) * a2;
    return (uint64_t **)TRunGlue::SetOrigin(*(_QWORD **)this, *((_QWORD *)this + 1), v10);
  }
  else
  {
    result = std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(*(uint64_t ***)(v4 + 112), *((_QWORD *)this + 1), (uint64_t **)this + 1);
    v6 = -0.0;
    if (*(_BYTE *)(*(_QWORD *)this + 634))
      v7 = a2;
    else
      v7 = -0.0;
    if (!*(_BYTE *)(*(_QWORD *)this + 634))
      v6 = a2;
    v8 = *((double *)result + 6) + v6;
    *((double *)result + 5) = *((double *)result + 5) + v7;
    *((double *)result + 6) = v8;
  }
  return result;
}

uint64_t OTL::GPOS::ApplyPosLookupRecords(_QWORD *a1, unint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t GlyphID;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(_QWORD *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  int v42;

  v35 = *(_QWORD *)(a5 + 72);
  if (a4)
  {
    v9 = a8;
    v10 = a7;
    v11 = a6;
    v12 = a4;
    v13 = a3;
    v14 = a2;
    v36 = 0;
    v15 = a3;
    do
    {
      if ((unint64_t)v13 < v14)
        break;
      v16 = v15 + 2;
      if ((unint64_t)(v15 + 2) > a1[5])
        break;
      v17 = bswap32(*v15) >> 16;
      if (v17 < v10)
      {
        *(_QWORD *)(a5 + 48) = *(_QWORD *)(v11 + 8 * v17);
        v18 = TBaseFont::NthLookup<OTL::GPOS>(*(_QWORD *)(a1[2] + 400), a1, bswap32(v15[1]) >> 16);
        if (v18)
        {
          v19 = v18;
          *(_QWORD *)(a5 + 72) = v18[3];
          if (v9 <= 0x3E)
          {
            v42 = *((unsigned __int16 *)v18 + 8);
            v20 = -1431655765 * ((*((_DWORD *)v18 + 24) - *((_DWORD *)v18 + 22)) >> 4);
            v21 = *(_QWORD *)(a5 + 48);
            GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a5, v21);
            if ((_WORD)v20)
            {
              v23 = GlyphID;
              v24 = 0;
              v25 = 0;
              v26 = 48 * (unsigned __int16)v20;
              do
              {
                *(_QWORD *)(a5 + 48) = v21;
                v27 = v19[11];
                if (0xAAAAAAAAAAAAAAABLL * ((v19[12] - v27) >> 4) <= v25)
                  break;
                v28 = v27 + v24;
                v29 = *(unsigned int (**)(_QWORD *, uint64_t))(v27 + v24 + 24);
                v30 = *(_QWORD *)(v28 + 32);
                v31 = (_QWORD *)(v28 + (v30 >> 1) + 8);
                if ((v30 & 1) != 0)
                  v29 = *(unsigned int (**)(_QWORD *, uint64_t))(*v31 + v29);
                if (v29(v31, v23))
                {
                  v32 = v19[11];
                  if (0xAAAAAAAAAAAAAAABLL * ((v19[12] - v32) >> 4) <= v25)
                    LODWORD(v33) = 0;
                  else
                    v33 = *(_QWORD *)(v32 + v24);
                  if ((OTL::GPOS::ApplyLookupSubtable((int)a1, (int)v19, v42, v33, (TGlyphIterator *)a5) & 1) != 0)
                  {
                    v36 = 1;
                    break;
                  }
                }
                ++v25;
                v24 += 48;
              }
              while (v26 != v24);
              v10 = a7;
              v9 = a8;
              v11 = a6;
            }
            v14 = a2;
            v13 = a3;
          }
        }
      }
      v15 = v16;
      --v12;
    }
    while (v12);
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)(a5 + 72) = v35;
  return v36 & 1;
}

uint64_t OTL::GPOS::ApplyContextPosFormat1(_QWORD *a1, unint64_t a2, TGlyphIterator *this, int a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  _WORD *v33;
  unsigned __int16 *v34;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v49;
  _WORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[31];
  unint64_t v55;

  v5 = a1[5];
  v6 = a2 + 6;
  if (a2 + 4 < a1[4] || v6 > v5)
    return 0;
  v9 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v10 = v6 + 2 * v9;
  v11 = a2 + 8 <= v5 ? (v5 - v6) >> 1 : 0;
  v12 = v10 <= v5 && v10 >= v6;
  if (!v12 && v11 != v9)
    return 0;
  v15 = *((_QWORD *)this + 6);
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54[29] = v16;
  v54[30] = v16;
  v54[27] = v16;
  v54[28] = v16;
  v54[25] = v16;
  v54[26] = v16;
  v54[23] = v16;
  v54[24] = v16;
  v54[21] = v16;
  v54[22] = v16;
  v54[19] = v16;
  v54[20] = v16;
  v54[17] = v16;
  v54[18] = v16;
  v54[16] = v16;
  v55 = 0xAAAAAAAAAAAAAAAALL;
  v54[15] = v16;
  v54[14] = v16;
  v54[13] = v16;
  v54[12] = v16;
  v54[11] = v16;
  v54[10] = v16;
  v54[9] = v16;
  v54[8] = v16;
  v54[6] = v16;
  v54[7] = v16;
  v54[4] = v16;
  v54[5] = v16;
  v54[2] = v16;
  v54[3] = v16;
  v54[0] = v16;
  v54[1] = v16;
  v17 = a4 - 1;
  v53 = v15;
  if (a4 - 1 >= v9)
    return 0;
  if (!*(_WORD *)(a2 + 2 * v17 + 6))
    return 0;
  v18 = (unsigned __int16 *)(a2 + __rev16(*(unsigned __int16 *)(a2 + 2 * v17 + 6)));
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) > v5)
    return 0;
  v21 = v18 + 2;
  v20 = *v18;
  v22 = __rev16(v20);
  v23 = (unint64_t)&v19[v22];
  v24 = v23 < (unint64_t)v19 || v23 > v5;
  v25 = !v24;
  v26 = (v5 - (unint64_t)v19) >> 1;
  v27 = (unint64_t)v21 <= v5 ? v26 : 0;
  v28 = v27 == v22 || v25;
  if (v28 != 1)
    return 0;
  if ((unint64_t)v21 <= v5)
    v29 = v26;
  else
    v29 = 0;
  v30 = bswap32(v29) >> 16;
  if (!v25)
    v20 = v30;
  if (!v20)
    return 0;
  v31 = 0;
  if (!v25)
    LOWORD(v22) = v29;
  if ((v22 & 0xFFFE) != 0)
    v32 = (unsigned __int16)v22;
  else
    v32 = 1;
  v49 = v32;
  while (1)
  {
    if (v31 < bswap32(*v18) >> 16)
    {
      v33 = (unsigned __int16 *)((char *)v18 + __rev16(v18[v31 + 1]));
      v34 = v33 + 2;
      if (v18[v31 + 1] && (unint64_t)v34 <= v5)
      {
        if (*v33)
        {
          v36 = __rev16((unsigned __int16)*v33);
          if (v36 <= 0x40)
            break;
        }
      }
    }
LABEL_72:
    result = 0;
    if (++v31 == v32)
      return result;
  }
  v37 = (v36 - 1);
  v38 = &v34[v37];
  if ((unint64_t)v34 < a2 || v38 < v34 || (unint64_t)v38 > v5)
  {
    v41 = (unint64_t)(v33 + 3) <= v5 && (unint64_t)v34 >= a2;
    v42 = (v5 - (unint64_t)v34) >> 1;
    if (!v41)
      v42 = 0;
    if (v42 != v37)
      return 0;
  }
  v50 = v33;
  v51 = v36;
  v52 = (v36 - 1);
  if (v36 >= 2)
  {
    v43 = v36 - 1;
    v44 = (uint64_t *)v54;
    while (TGlyphIterator::Next(this, 1))
    {
      v45 = *((_QWORD *)this + 6);
      if (TRunGlue::GetGlyphID(*(TRunGlue **)this, v45) != bswap32(*v34) >> 16)
        break;
      ++v34;
      *v44++ = v45;
      if (!--v43)
        goto LABEL_75;
    }
    *((_QWORD *)this + 6) = v15;
    v32 = v49;
    goto LABEL_72;
  }
LABEL_75:
  *((_QWORD *)this + 6) = v15;
  if (OTL::GPOS::ApplyPosLookupRecords(a1, a2, v34, bswap32((unsigned __int16)v50[1]) >> 16, (uint64_t)this, (uint64_t)&v53, v51, a5))TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)this, &v53, v51);
  *((_QWORD *)this + 6) = v15;
  TGlyphIterator::Next(this, v52);
  return 1;
}

CFIndex *TGlyphIterator::ClearSafeToBreakAfter(CFIndex *this, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  CFIndex *v4;
  CFRange v5;

  if (*(_QWORD *)(*this + 152))
  {
    v3 = this;
    this = std::__minmax_element_impl[abi:nn180100]<long const*,long const*,std::__identity,std::__less<void,void>>(a2, &a2[a3]);
    if (this != v4)
    {
      v5.length = *v4 - *this + 1;
      v5.location = *this;
      return (CFIndex *)TRunGlue::ClearSafeToBreakAfter(*v3, v5);
    }
  }
  return this;
}

uint64_t OTL::GPOS::ApplyContextPosFormat2(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unsigned int GlyphID;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  __int128 v23;
  unsigned int v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  char *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  unsigned __int16 *v55;
  unsigned int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;

  v7 = *(_QWORD *)(a3 + 48);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v7);
  v9 = a1[5];
  v53 = a1;
  v10 = a2 + 8;
  if (a2 + 6 < a1[4] || v10 > v9)
    return 0;
  v12 = bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16;
  v13 = v10 + 2 * v12;
  v14 = a2 + 10 <= v9 ? (v9 - v10) >> 1 : 0;
  v15 = v13 <= v9 && v13 >= v10;
  v16 = v15 || v14 == v12;
  if (!v16)
    return 0;
  v17 = (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16));
  if ((unint64_t)(v17 + 1) > v9)
    return 0;
  v18 = GlyphID;
  v19 = bswap32(*v17) >> 16;
  if (v19 == 2)
  {
    v20 = 6 * (bswap32(v17[1]) >> 16) + 4;
  }
  else if (v19 == 1)
  {
    v20 = 2 * (bswap32(v17[2]) >> 16) + 6;
  }
  else
  {
    v20 = 0;
  }
  result = 0;
  v22 = (char *)v17 + v20;
  if (v22 < (char *)v17 || (unint64_t)v22 > v9)
    return result;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v87 = v23;
  v88 = v23;
  v85 = v23;
  v86 = v23;
  v83 = v23;
  v84 = v23;
  v81 = v23;
  v82 = v23;
  v79 = v23;
  v80 = v23;
  v77 = v23;
  v78 = v23;
  v75 = v23;
  v76 = v23;
  v74 = v23;
  v89 = 0xAAAAAAAAAAAAAAAALL;
  v73 = v23;
  v72 = v23;
  v71 = v23;
  v70 = v23;
  v69 = v23;
  v68 = v23;
  v67 = v23;
  v66 = v23;
  v64 = v23;
  v65 = v23;
  v62 = v23;
  v63 = v23;
  v60 = v23;
  v61 = v23;
  v58 = v23;
  v59 = v23;
  v57 = v7;
  v24 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v17, v18);
  if (v12 <= v24)
    return 0;
  if (!*(_WORD *)(a2 + 2 * v24 + 8))
    return 0;
  v25 = (unsigned __int16 *)(a2 + __rev16(*(unsigned __int16 *)(a2 + 2 * v24 + 8)));
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) > v9)
    return 0;
  v28 = v25 + 2;
  v27 = *v25;
  v29 = __rev16(v27);
  v30 = (unint64_t)&v26[v29];
  v31 = v30 < (unint64_t)v26 || v30 > v9;
  v32 = !v31;
  v33 = (v9 - (unint64_t)v26) >> 1;
  v34 = (unint64_t)v28 <= v9 ? v33 : 0;
  v35 = v34 == v29 || v32;
  if (v35 != 1)
    return 0;
  if ((unint64_t)v28 <= v9)
    v36 = v33;
  else
    v36 = 0;
  v37 = bswap32(v36) >> 16;
  if (!v32)
  {
    LOWORD(v29) = v36;
    v27 = v37;
  }
  if (!v27)
    return 0;
  v38 = 0;
  v52 = 0;
  v56 = (unsigned __int16)v29;
  v55 = v25;
  v51 = v7;
  while (1)
  {
    if (v38 < bswap32(*v25) >> 16 && v25[v38 + 1])
    {
      v39 = (char *)v25 + __rev16(v25[v38 + 1]);
      v40 = (unint64_t)(v39 + 4) <= v9 ? v39 : 0;
    }
    else
    {
      v40 = 0;
    }
    if ((unint64_t)v40 >= a2)
    {
      v41 = (unsigned __int16 *)(v40 + 4);
      if ((unint64_t)(v40 + 4) <= v9)
      {
        v12 = __rev16(*(unsigned __int16 *)v40);
        if (*(_WORD *)v40)
        {
          if (v12 <= 0x40)
            break;
        }
      }
    }
LABEL_82:
    if (++v38 >= v56)
      goto LABEL_83;
  }
  v42 = (v12 - 1);
  v43 = &v41[v42];
  v44 = (v9 - (unint64_t)v41) >> 1;
  if ((unint64_t)(v40 + 6) > v9)
    v44 = 0;
  if ((unint64_t)v43 <= v9 && v43 >= v41 || v44 == v42)
  {
    v47 = a2;
    if (v12 < 2)
    {
      LODWORD(v48) = 1;
    }
    else
    {
      v48 = 1;
      while (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
      {
        v49 = *(_QWORD *)(a3 + 48);
        v50 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v49);
        if (OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v17, v50) != bswap32(*v41) >> 16)
        {
          ++v41;
          break;
        }
        *(&v57 + v48++) = v49;
        ++v41;
        if (v12 == v48)
        {
          v41 = (unsigned __int16 *)&v40[2 * (v12 - 2) + 6];
          a2 = v47;
          v7 = v51;
          goto LABEL_78;
        }
      }
      v7 = v51;
      v25 = v55;
    }
    v16 = (_DWORD)v48 == (_DWORD)v12;
    a2 = v47;
    if (v16)
    {
LABEL_78:
      if (OTL::GPOS::ApplyPosLookupRecords(v53, a2, v41, bswap32(*((unsigned __int16 *)v40 + 1)) >> 16, a3, (uint64_t)&v57, v12, a4))TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)a3, &v57, v12);
      v52 = 1;
      v38 = v56;
      v25 = v55;
    }
    *(_QWORD *)(a3 + 48) = v7;
    goto LABEL_82;
  }
LABEL_83:
  if ((v52 & 1) == 0)
    return 0;
  TGlyphIterator::Next((TGlyphIterator *)a3, (v12 - 1));
  return 1;
}

uint64_t OTL::GPOS::ApplyContextPosFormat3(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[31];
  unint64_t v20;

  v4 = a1[5];
  v5 = a2 + 6;
  v6 = a1[4] > a2 || v5 > v4;
  if (v6 || !*(_WORD *)(a2 + 2))
    return 0;
  v11 = *(_QWORD *)(a3 + 48);
  v12 = __rev16(*(unsigned __int16 *)(a2 + 2));
  v13 = v12 - 1;
  if (v12 != 1)
  {
    v14 = *(_QWORD *)(a3 + 24);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v11 - v13 <= v14)
        return 0;
    }
    else if (v11 + v13 >= v14)
    {
      return 0;
    }
  }
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[29] = v15;
  v19[30] = v15;
  v19[27] = v15;
  v19[28] = v15;
  v19[25] = v15;
  v19[26] = v15;
  v19[23] = v15;
  v19[24] = v15;
  v19[21] = v15;
  v19[22] = v15;
  v19[19] = v15;
  v19[20] = v15;
  v19[17] = v15;
  v19[18] = v15;
  v19[16] = v15;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v19[15] = v15;
  v19[14] = v15;
  v19[13] = v15;
  v19[12] = v15;
  v19[11] = v15;
  v19[10] = v15;
  v19[9] = v15;
  v19[8] = v15;
  v19[7] = v15;
  v19[6] = v15;
  v19[5] = v15;
  v19[4] = v15;
  v19[3] = v15;
  v19[2] = v15;
  v19[1] = v15;
  v19[0] = v15;
  v18 = v11;
  if (v12 >= 2)
  {
    if (v12 <= 0x40)
    {
      result = TGlyphIterator::MatchCoverSequenceAndNote(a3, v13, a2 + 8, (uint64_t)v19, a2, v4);
      if (!(_DWORD)result)
        return result;
      v17 = result + 1;
      goto LABEL_16;
    }
    return 0;
  }
  v17 = 1;
LABEL_16:
  if (OTL::GPOS::ApplyPosLookupRecords(a1, a2, (unsigned __int16 *)(v5 + 2 * v12), bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, a3, (uint64_t)&v18, v17, a4))TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)a3, &v18, v17);
  *(_QWORD *)(a3 + 48) = v11;
  TGlyphIterator::Next((TGlyphIterator *)a3, v17 - 1);
  return 1;
}

uint64_t TGlyphIterator::MatchCoverSequenceAndNote(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t GlyphID;
  __int128 v16;
  unsigned int (*v17)(_QWORD *, uint64_t);
  _QWORD *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;

  v12 = *(_QWORD *)(a1 + 48);
  if (TGlyphIterator::Next((TGlyphIterator *)a1, 1))
  {
    v20 = v12;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 48);
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a1, v14);
      v23 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v21 = v16;
      v22 = v16;
      OTL::Coverage::Coverage((OTL::Coverage *)&v21, (unsigned __int16 *)(a5 + (bswap32(*(unsigned __int16 *)(a3 + 2 * v13)) >> 16)), a6, 1);
      v17 = (unsigned int (*)(_QWORD *, uint64_t))v22;
      v18 = (_QWORD *)((char *)&v21 + (*((uint64_t *)&v22 + 1) >> 1));
      if ((BYTE8(v22) & 1) != 0)
        v17 = *(unsigned int (**)(_QWORD *, uint64_t))(*v18 + v22);
      if (!v17(v18, GlyphID))
      {
        a2 -= v13;
        v12 = v20;
        goto LABEL_11;
      }
      *(_QWORD *)(a4 + 8 * v13) = v14;
      if (a2 - 1 == (_DWORD)v13)
        break;
      ++v13;
      if ((TGlyphIterator::Next((TGlyphIterator *)a1, 1) & 1) == 0)
      {
        v13 = 0;
        *(_QWORD *)(a1 + 48) = v20;
        return v13;
      }
    }
    *(_QWORD *)(a1 + 48) = v20;
    return a2;
  }
  else
  {
    v13 = 0;
LABEL_11:
    *(_QWORD *)(a1 + 48) = v12;
    if (a2)
      return 0;
  }
  return v13;
}

uint64_t OTL::GPOS::ApplyChainContextPosFormat1(_QWORD *a1, unint64_t a2, TGlyphIterator *this, int a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  char v15;
  CFIndex v17;
  __int128 v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _BOOL4 v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  unsigned __int16 *v42;
  CFIndex v43;
  _WORD *v44;
  unint64_t v46;
  CFIndex v47;
  _WORD *v48;
  _WORD *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  int v56;
  _WORD *v57;
  _WORD *v58;
  int v59;
  int GlyphID;
  CFIndex v61;
  CFRange v62;
  _QWORD *v63;
  uint64_t v65;
  CFIndex v66;
  unint64_t v67;
  uint64_t v68;
  CFIndex v69;
  CFIndex v70;
  _OWORD v71[31];
  unint64_t v72;

  v5 = a1[5];
  v6 = a2 + 6;
  if (a2 + 4 < a1[4] || v6 > v5)
    return 0;
  result = 0;
  v11 = __rev16(*(unsigned __int16 *)(a2 + 4));
  v12 = __CFADD__(v6, 2 * v11);
  v13 = v6 + 2 * v11 > v5 || v12;
  v14 = (v5 - v6) >> 1;
  if (a2 + 8 > v5)
    v14 = 0;
  if (v14 == v11)
    v15 = 0;
  else
    v15 = v13;
  if ((v15 & 1) == 0 && *(_WORD *)(a2 + 4))
  {
    v17 = *((_QWORD *)this + 6);
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v71[29] = v18;
    v71[30] = v18;
    v71[27] = v18;
    v71[28] = v18;
    v71[25] = v18;
    v71[26] = v18;
    v71[23] = v18;
    v71[24] = v18;
    v71[21] = v18;
    v71[22] = v18;
    v71[19] = v18;
    v71[20] = v18;
    v71[17] = v18;
    v71[18] = v18;
    v71[16] = v18;
    v72 = 0xAAAAAAAAAAAAAAAALL;
    v71[15] = v18;
    v71[14] = v18;
    v71[13] = v18;
    v71[12] = v18;
    v71[11] = v18;
    v71[10] = v18;
    v71[9] = v18;
    v71[8] = v18;
    v71[6] = v18;
    v71[7] = v18;
    v71[4] = v18;
    v71[5] = v18;
    v71[2] = v18;
    v71[3] = v18;
    v71[0] = v18;
    v71[1] = v18;
    v19 = a4 - 1;
    v70 = v17;
    if (a4 - 1 < v11)
    {
      if (*(_WORD *)(a2 + 2 * v19 + 6))
      {
        v20 = (unsigned __int16 *)(a2 + __rev16(*(unsigned __int16 *)(a2 + 2 * v19 + 6)));
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) <= v5)
        {
          v23 = v20 + 2;
          v22 = *v20;
          v24 = __rev16(v22);
          v25 = (unint64_t)&v21[v24];
          v26 = v25 < (unint64_t)v21 || v25 > v5;
          v27 = !v26;
          v28 = (v5 - (unint64_t)v21) >> 1;
          v29 = (unint64_t)v23 <= v5 ? v28 : 0;
          v30 = v29 == v24 || v27;
          if (v30 == 1)
          {
            if ((unint64_t)v23 <= v5)
              v31 = v28;
            else
              v31 = 0;
            v32 = bswap32(v31) >> 16;
            if (!v27)
              v22 = v32;
            if (v22)
            {
              v63 = a1;
              v33 = 0;
              if (!v27)
                LOWORD(v24) = v31;
              if ((v24 & 0xFFFE) != 0)
                v24 = (unsigned __int16)v24;
              else
                v24 = 1;
              v68 = v24;
              v69 = v17;
              while (1)
              {
                if (v33 >= bswap32(*v20) >> 16)
                  return 0;
                if (!v20[v33 + 1])
                  return 0;
                v34 = (unsigned __int16 *)((char *)v20 + __rev16(v20[v33 + 1]));
                if ((unint64_t)v34 > v5)
                  return 0;
                v35 = v34 + 1;
                if ((unint64_t)v34 < a2 || (unint64_t)v35 > v5)
                  return 0;
                v37 = *v34;
                if (v37)
                  break;
                v42 = v35;
                v43 = v17;
LABEL_65:
                v44 = v42 + 1;
                if ((unint64_t)v42 < a2 || (unint64_t)v44 > v5)
                  return 0;
                if (*v42)
                {
                  v46 = __rev16(*v42);
                  if (v46 <= 0x40)
                  {
                    v66 = v43;
                    v67 = v46;
                    v47 = v17;
                    v48 = v42 + 1;
                    if (v46 < 2)
                    {
LABEL_79:
                      result = 0;
                      *((_QWORD *)this + 6) = v17;
                      if ((unint64_t)v48 < a2)
                        return result;
                      v54 = v48 + 1;
                      if ((unint64_t)(v48 + 1) > v5)
                        return result;
                      if (!*v48)
                      {
LABEL_97:
                        result = 0;
                        if ((unint64_t)v54 >= a2 && (unint64_t)(v54 + 1) <= v5)
                        {
                          if (OTL::GPOS::ApplyPosLookupRecords(v63, a2, v54 + 1, bswap32(*v54) >> 16, (uint64_t)this, (uint64_t)&v70, v46, a5)&& *(_QWORD *)(*(_QWORD *)this + 152))
                          {
                            v61 = v66 - v47;
                            if (v66 >= v47)
                              v62.location = v47;
                            else
                              v62.location = v66;
                            if (v66 - v47 < 0)
                              v61 = v47 - v66;
                            v62.length = v61 + 1;
                            TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)this, v62);
                          }
                          *((_QWORD *)this + 6) = v17;
                          TGlyphIterator::Next(this, (v46 - 1));
                          return 1;
                        }
                        return result;
                      }
                      v55 = __rev16((unsigned __int16)*v48);
                      *((_QWORD *)this + 6) = *(&v70 + (v46 - 1));
                      if (v55 <= 1)
                        v56 = 1;
                      else
                        v56 = v55;
                      v57 = v48;
                      v58 = v48 + 2;
                      v59 = v56;
                      while (TGlyphIterator::NextContext(this, 1))
                      {
                        GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)this, *((_QWORD *)this + 6));
                        if ((unint64_t)v54 < a2
                          || (unint64_t)v58 > v5
                          || GlyphID != bswap32((unsigned __int16)*(v58 - 1)) >> 16)
                        {
                          break;
                        }
                        ++v58;
                        if (!--v59)
                        {
                          v54 = &v57[v56 - 1 + 2];
                          v47 = *((_QWORD *)this + 6);
                          v17 = v69;
                          *((_QWORD *)this + 6) = v69;
                          v46 = v67;
                          goto LABEL_97;
                        }
                      }
                    }
                    else
                    {
                      v49 = v42 + 2;
                      v65 = (uint64_t)&v42[(v46 - 2) + 2];
                      v50 = v46 - 1;
                      v51 = (uint64_t *)v71;
                      while (TGlyphIterator::Next(this, 1))
                      {
                        v52 = *((_QWORD *)this + 6);
                        v53 = TRunGlue::GetGlyphID(*(TRunGlue **)this, v52);
                        if ((unint64_t)v44 < a2
                          || (unint64_t)v49 > v5
                          || v53 != bswap32((unsigned __int16)*(v49 - 1)) >> 16)
                        {
                          break;
                        }
                        *v51++ = v52;
                        ++v49;
                        if (!--v50)
                        {
                          v47 = *((_QWORD *)this + 6);
                          v17 = v69;
                          v46 = v67;
                          v48 = (_WORD *)v65;
                          goto LABEL_79;
                        }
                      }
                    }
                    goto LABEL_92;
                  }
                }
LABEL_93:
                result = 0;
                if (++v33 == v68)
                  return result;
              }
              v38 = __rev16(v37);
              if (v38 <= 1)
                v39 = 1;
              else
                v39 = v38;
              v40 = v35;
              while (TGlyphIterator::PrevContext(this, 1))
              {
                v41 = TRunGlue::GetGlyphID(*(TRunGlue **)this, *((_QWORD *)this + 6));
                if ((unint64_t)v35 < a2)
                  break;
                v42 = v40 + 1;
                if ((unint64_t)(v40 + 1) > v5 || v41 != bswap32(*v40) >> 16)
                  break;
                ++v40;
                if (!--v39)
                {
                  v43 = *((_QWORD *)this + 6);
                  v17 = v69;
                  *((_QWORD *)this + 6) = v69;
                  goto LABEL_65;
                }
              }
LABEL_92:
              v17 = v69;
              *((_QWORD *)this + 6) = v69;
              goto LABEL_93;
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t OTL::GPOS::ApplyChainContextPosFormat2(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned int GlyphID;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int16 *v51;
  CFIndex v52;
  char *v53;
  unsigned int v54;
  int v55;
  unsigned __int16 *v56;
  unsigned int v57;
  unsigned __int16 *v58;
  unint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  CFIndex v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  unsigned int v72;
  int v73;
  unsigned __int16 *v74;
  _WORD *v75;
  int v76;
  unsigned int v77;
  CFIndex v78;
  CFRange v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned __int16 *v82;
  CFIndex v83;
  unsigned __int16 *v84;
  unint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int16 *v91;
  uint64_t v92;
  _OWORD v93[31];
  unint64_t v94;

  v8 = *(_QWORD *)(a3 + 48);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v8);
  v10 = a1[5];
  v11 = a2 + 6;
  if ((unint64_t)(a2 + 5) < a1[4] || (unint64_t)v11 > v10)
    return 0;
  v13 = __rev16(a2[5]);
  v14 = (unint64_t)&v11[v13];
  v15 = (unint64_t)(a2 + 7) <= v10 ? (v10 - (unint64_t)v11) >> 1 : 0;
  v16 = v14 <= v10 && v14 >= (unint64_t)v11;
  if (!v16 && v15 != v13)
    return 0;
  v18 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[3]) >> 16));
  if ((unint64_t)(v18 + 1) > v10)
    return 0;
  v19 = GlyphID;
  v20 = bswap32(*v18) >> 16;
  if (v20 == 2)
  {
    v21 = 6 * (bswap32(v18[1]) >> 16) + 4;
  }
  else if (v20 == 1)
  {
    v21 = 2 * (bswap32(v18[2]) >> 16) + 6;
  }
  else
  {
    v21 = 0;
  }
  result = 0;
  v23 = (char *)v18 + v21;
  if (v23 >= (char *)v18 && (unint64_t)v23 <= v10)
  {
    if (a2[5])
    {
      v24 = a2[2];
      v25 = a2[4];
      *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v93[29] = v26;
      v93[30] = v26;
      v93[27] = v26;
      v93[28] = v26;
      v93[25] = v26;
      v93[26] = v26;
      v93[23] = v26;
      v93[24] = v26;
      v93[21] = v26;
      v93[22] = v26;
      v93[19] = v26;
      v93[20] = v26;
      v93[17] = v26;
      v93[18] = v26;
      v93[16] = v26;
      v94 = 0xAAAAAAAAAAAAAAAALL;
      v93[15] = v26;
      v93[14] = v26;
      v93[13] = v26;
      v93[12] = v26;
      v93[11] = v26;
      v93[10] = v26;
      v93[9] = v26;
      v93[8] = v26;
      v93[6] = v26;
      v93[7] = v26;
      v93[4] = v26;
      v93[5] = v26;
      v93[2] = v26;
      v93[3] = v26;
      v93[0] = v26;
      v93[1] = v26;
      v92 = v8;
      v27 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v18, v19);
      if (v13 > v27)
      {
        if (a2[v27 + 6])
        {
          v28 = (unsigned __int16 *)((char *)a2 + __rev16(a2[v27 + 6]));
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) <= v10)
          {
            v31 = v28 + 2;
            v30 = *v28;
            v32 = __rev16(v30);
            v33 = (unint64_t)&v29[v32];
            v34 = v33 < (unint64_t)v29 || v33 > v10;
            v35 = !v34;
            v36 = (v10 - (unint64_t)v29) >> 1;
            v37 = (unint64_t)v31 <= v10 ? v36 : 0;
            v38 = v37 == v32 || v35;
            if (v38 == 1)
            {
              if ((unint64_t)v31 <= v10)
                v39 = v36;
              else
                v39 = 0;
              v40 = bswap32(v39) >> 16;
              v41 = !v35;
              if (!v35)
                v30 = v40;
              if (v30)
              {
                v80 = a1;
                v81 = a4;
                v42 = 0;
                v43 = (unsigned __int16 *)((char *)a2 + (bswap32(v24) >> 16));
                v44 = (unsigned __int16 *)((char *)a2 + (bswap32(v25) >> 16));
                if (v41)
                  LOWORD(v32) = v39;
                v86 = v43 + 1;
                v91 = v44;
                v84 = v44 + 1;
                if ((v32 & 0xFFFE) != 0)
                  v32 = (unsigned __int16)v32;
                else
                  v32 = 1;
                v87 = v32;
                v88 = v28;
                v89 = v8;
                while (1)
                {
                  if (v42 >= bswap32(*v28) >> 16)
                    return 0;
                  if (!v28[v42 + 1])
                    return 0;
                  v45 = (unsigned __int16 *)((char *)v28 + __rev16(v28[v42 + 1]));
                  if ((unint64_t)v45 > v10)
                    return 0;
                  v46 = v45 + 1;
                  if (v45 < a2 || (unint64_t)v46 > v10)
                    return 0;
                  v48 = *v45;
                  v90 = v42;
                  if (v48)
                    break;
                  v51 = v46;
                  v52 = v8;
LABEL_81:
                  v58 = v51 + 1;
                  if (v51 < a2 || (unint64_t)v58 > v10)
                    return 0;
                  if (*v51)
                  {
                    v60 = __rev16(*v51);
                    if (v60 <= 0x40)
                    {
                      v83 = v52;
                      v61 = v51 + 1;
                      v85 = v60;
                      if (v60 < 2)
                      {
LABEL_95:
                        result = 0;
                        v67 = *(_QWORD *)(a3 + 48);
                        *(_QWORD *)(a3 + 48) = v8;
                        if (v61 < a2)
                          return result;
                        v68 = v61 + 1;
                        if ((unint64_t)(v61 + 1) > v10)
                          return result;
                        if (!*v61)
                        {
LABEL_121:
                          result = 0;
                          if (v68 >= a2 && (unint64_t)(v68 + 1) <= v10)
                          {
                            if (OTL::GPOS::ApplyPosLookupRecords(v80, (unint64_t)a2, v68 + 1, bswap32(*v68) >> 16, a3, (uint64_t)&v92, v60, v81)&& *(_QWORD *)(*(_QWORD *)a3 + 152))
                            {
                              v78 = v83 - v67;
                              if (v83 >= v67)
                                v79.location = v67;
                              else
                                v79.location = v83;
                              if (v83 - v67 < 0)
                                v78 = v67 - v83;
                              v79.length = v78 + 1;
                              TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)a3, v79);
                            }
                            *(_QWORD *)(a3 + 48) = v8;
                            TGlyphIterator::Next((TGlyphIterator *)a3, (v60 - 1));
                            return 1;
                          }
                          return result;
                        }
                        if ((unint64_t)v84 > v10)
                          return 0;
                        v69 = bswap32(*v91) >> 16;
                        if (v69 == 2)
                        {
                          v70 = 6 * (bswap32(*v84) >> 16) + 4;
                        }
                        else if (v69 == 1)
                        {
                          v70 = 2 * (bswap32(v91[2]) >> 16) + 6;
                        }
                        else
                        {
                          v70 = 0;
                        }
                        result = 0;
                        v71 = (char *)v91 + v70;
                        if (v71 < (char *)v91 || (unint64_t)v71 > v10)
                          return result;
                        v72 = __rev16(*v61);
                        *(_QWORD *)(a3 + 48) = *(&v92 + (v60 - 1));
                        if (v72 <= 1)
                          v73 = 1;
                        else
                          v73 = v72;
                        v74 = v61;
                        v75 = v61 + 2;
                        v76 = v73;
                        while (TGlyphIterator::NextContext((TGlyphIterator *)a3, 1))
                        {
                          v77 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
                          if (v68 < a2
                            || (unint64_t)v75 > v10
                            || OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v91, v77) != bswap32((unsigned __int16)*(v75 - 1)) >> 16)
                          {
                            break;
                          }
                          ++v75;
                          if (!--v76)
                          {
                            v68 = &v74[v73 - 1 + 2];
                            v67 = *(_QWORD *)(a3 + 48);
                            v8 = v89;
                            *(_QWORD *)(a3 + 48) = v89;
                            v60 = v85;
                            goto LABEL_121;
                          }
                        }
                      }
                      else
                      {
                        v62 = v51 + 2;
                        v82 = &v62[(v60 - 2)];
                        v63 = v60 - 1;
                        v64 = (uint64_t *)v93;
                        while (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
                        {
                          v65 = *(_QWORD *)(a3 + 48);
                          v66 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v65);
                          if (v58 < a2
                            || (unint64_t)v62 > v10
                            || OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v18, v66) != bswap32((unsigned __int16)*(v62 - 1)) >> 16)
                          {
                            break;
                          }
                          *v64++ = v65;
                          ++v62;
                          if (!--v63)
                          {
                            v8 = v89;
                            v60 = v85;
                            v61 = v82;
                            goto LABEL_95;
                          }
                        }
                      }
                      goto LABEL_116;
                    }
                  }
LABEL_117:
                  result = 0;
                  if (++v42 == v87)
                    return result;
                }
                if ((unint64_t)v86 > v10)
                  return 0;
                v49 = bswap32(*v43) >> 16;
                if (v49 == 2)
                {
                  v50 = 6 * (bswap32(*v86) >> 16) + 4;
                }
                else if (v49 == 1)
                {
                  v50 = 2 * (bswap32(v43[2]) >> 16) + 6;
                }
                else
                {
                  v50 = 0;
                }
                result = 0;
                v53 = (char *)v43 + v50;
                if (v53 < (char *)v43 || (unint64_t)v53 > v10)
                  return result;
                v54 = __rev16(v48);
                if (v54 <= 1)
                  v55 = 1;
                else
                  v55 = v54;
                v56 = v46;
                while (TGlyphIterator::PrevContext((TGlyphIterator *)a3, 1))
                {
                  v57 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48));
                  if (v46 < a2)
                    break;
                  v51 = v56 + 1;
                  if ((unint64_t)(v56 + 1) > v10
                    || OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v43, v57) != bswap32(*v56) >> 16)
                  {
                    break;
                  }
                  ++v56;
                  if (!--v55)
                  {
                    v52 = *(_QWORD *)(a3 + 48);
                    v28 = v88;
                    v8 = v89;
                    *(_QWORD *)(a3 + 48) = v89;
                    v42 = v90;
                    goto LABEL_81;
                  }
                }
LABEL_116:
                v28 = v88;
                v8 = v89;
                *(_QWORD *)(a3 + 48) = v89;
                v42 = v90;
                goto LABEL_117;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t OTL::GPOS::ApplyChainContextPosFormat3(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _WORD *v5;
  unsigned __int16 *v6;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unsigned int matched;
  uint64_t v27;
  unsigned int v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v32;
  int v36;
  unsigned int v37;
  unsigned __int16 *v38;
  void **v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  _OWORD v43[15];
  _OWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  v5 = (_WORD *)(a2 + 2);
  v6 = (unsigned __int16 *)(a2 + 4);
  if (a1[4] > a2 || (unint64_t)v5 > v4 || (unint64_t)v6 > v4)
    return 0;
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (unsigned __int16)*v5;
  v13 = __rev16(v12);
  if (*v5)
  {
    v14 = *(_QWORD *)(a3 + 16);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v11 + v13 >= v14)
        return 0;
    }
    else if (v11 - v13 <= v14)
    {
      return 0;
    }
  }
  v15 = &v6[v13];
  if ((unint64_t)(v15 + 1) > v4 || !*v15)
    return 0;
  v16 = __rev16(*v15);
  v17 = &v15[v16 + 1];
  v18 = v17 + 1;
  if ((unint64_t)v17 < a2 || (unint64_t)v18 > v4)
    return 0;
  v20 = *v17;
  v21 = (_DWORD)v16 - 1 + (bswap32(v20) >> 16);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a3 + 24);
    if (*(int *)(a3 + 8) >= 1)
    {
      if (v11 + v21 < v22)
        goto LABEL_22;
      return 0;
    }
    if (v11 - v21 <= v22)
      return 0;
  }
LABEL_22:
  v37 = v20;
  v36 = v13;
  v38 = v18;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[14] = v23;
  v43[13] = v23;
  v43[12] = v23;
  v43[11] = v23;
  v43[10] = v23;
  v43[9] = v23;
  v43[8] = v23;
  v43[7] = v23;
  v43[6] = v23;
  v43[5] = v23;
  v43[4] = v23;
  v43[3] = v23;
  v43[2] = v23;
  v43[1] = v23;
  v43[0] = v23;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v44 = v43;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v40, v16);
  v24 = (char *)v41;
  bzero(v41, 8 * v16);
  v41 = &v24[8 * v16];
  v25 = v40;
  *v40 = v11;
  if (v16 < 2)
  {
    v27 = 1;
  }
  else
  {
    matched = TGlyphIterator::MatchCoverSequenceAndNote(a3, (int)v16 - 1, (uint64_t)(v15 + 2), (uint64_t)(v25 + 1), a2, v4);
    if (!matched)
      goto LABEL_37;
    v27 = matched + 1;
  }
  if (!v12 || TGlyphIterator::MatchCoverSequence<(MatchDirection)1>(a3, v11, v36, v6, a2, v4, 0))
  {
    v28 = __rev16(v37);
    if (!v37 || TGlyphIterator::MatchCoverSequence<(MatchDirection)0>(a3, v40[v27 - 1], v28, v38, a2, v4, 0))
    {
      v29 = &v38[v28];
      v30 = v29 + 1;
      if ((unint64_t)v29 >= a2 && (unint64_t)v30 <= v4)
      {
        if (OTL::GPOS::ApplyPosLookupRecords(a1, a2, v30, bswap32(*v29) >> 16, a3, (uint64_t)v40, v27, a4))
          TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)a3, v40, v27);
        *(_QWORD *)(a3 + 48) = v11;
        TGlyphIterator::Next((TGlyphIterator *)a3, v27 - 1);
        v32 = 1;
        goto LABEL_38;
      }
    }
  }
LABEL_37:
  v32 = 0;
LABEL_38:
  v39 = (void **)&v40;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v39);
  return v32;
}

void OTL::GPOS::~GPOS(OTL::GPOS *this)
{
  JUMPOUT(0x186DC03ACLL);
}

uint64_t **std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v10 = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = v10;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0C28;
  result[1] = v3;
  return result;
}

void std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0C70;
  result[1] = v3;
  return result;
}

void std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0CB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3,std::allocator<OTL::GPOS::ApplyPairPosAccelerated(OTL::Lookup const&,TGlyphIterator &)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0D00;
  result[1] = v3;
  return result;
}

uint64_t TRubyRun::TRubyRun(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  unint64_t *v6;
  const __CFDictionary *v7;
  const void *v8;
  uint64_t i;
  uint64_t v10;

  TRun::TRun((TRun *)a1, *(const TRun **)(a2 + 40));
  *v5 = &off_1E15DE7A0;
  v6 = v5 + 40;
  v7 = (const __CFDictionary *)atomic_load(v5 + 5);
  *(_QWORD *)(a1 + 320) = (id)CFDictionaryGetValue(v7, CFSTR("CTRubyAnnotation"));
  v8 = (const void *)atomic_load(v6);
  TRubyAnnotation::TRubyAnnotation((TRubyAnnotation *)(a1 + 328), v8);
  for (i = 408; i != 696; i += 72)
  {
    v10 = a1 + i;
    *(_WORD *)(v10 + 64) = 0;
    *(_OWORD *)(v10 + 32) = 0uLL;
    *(_OWORD *)(v10 + 48) = 0uLL;
    *(_OWORD *)v10 = 0uLL;
    *(_OWORD *)(v10 + 16) = 0uLL;
  }
  *(double *)(a1 + 696) = TRun::GetAscent((TRun *)a1);
  *(double *)(a1 + 704) = TRun::GetDescent((TRun *)a1);
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 744) = *MEMORY[0x1E0C9D820];
  *(_BYTE *)(a1 + 760) = a3;
  *(_BYTE *)(a1 + 761) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  TRubyRun::InitializeAnnotation((TRubyRun *)a1);
  return a1;
}

void TRubyRun::InitializeAnnotation(TRubyRun *this)
{
  unint64_t v2;
  double v3;
  double v4;
  const __CFDictionary *Dictionary;
  const __CTFont *v6;
  const __CTFont *Value;
  uint64_t v8;
  int v10;
  CTFontRef RubyFont;
  const __CFDictionary *v12;
  _BOOL4 v13;
  __CFDictionary *v14;
  const __CFDictionary *v15;
  void *v16;
  __CFDictionary *v17;
  TAttributes *v18;
  const void *BackgroundColor;
  unsigned int v21;
  TRubyAnnotationLine *v22;
  const __CFDictionary *v23;
  int8x16_t v24;
  uint64_t v25;
  TRubyAnnotationLine *v26;
  const __CFDictionary *v27;
  int8x16_t v28;
  id v29;
  id v30;

  v2 = atomic_load((unint64_t *)this + 7);
  v3 = *(double *)(*(_QWORD *)(v2 + 40) + 16);
  v4 = v3 * *((double *)this + 42);
  Dictionary = (const __CFDictionary *)atomic_load((unint64_t *)this + 49);
  v6 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
  if (Dictionary)
  {
    Value = (const __CTFont *)CFDictionaryGetValue(Dictionary, CFSTR("NSFont"));
    if (Value)
    {
      v4 = *(double *)(*((_QWORD *)Value + 5) + 16);
      v6 = Value;
    }
  }
  else
  {
    Dictionary = (const __CFDictionary *)TAttributes::GetDictionary((TRubyRun *)((char *)this + 40));
  }
  v8 = *((_QWORD *)this + 2);
  if (atomic_load((unint64_t *)this + 49))
    v10 = *((unsigned __int8 *)this + 376);
  else
    v10 = 1;
  RubyFont = CreateRubyFont(v6, v4, v10);
  v30 = (id)0xAAAAAAAAAAAAAAAALL;
  if (qword_1ECDE78B0 != -1)
    dispatch_once_f(&qword_1ECDE78B0, 0, (dispatch_function_t)GetValidRubyAttributes(void)::$_0::__invoke);
  CreateCopyOfDictionaryFilteredByKeys(Dictionary, (CFSetRef)_MergedGlobals_19, (unint64_t *)&v30);
  v29 = (id)0xAAAAAAAAAAAAAAAALL;
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)&v30);
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v29, v12);
  if (*((_BYTE *)this + 760))
    v13 = 1;
  else
    v13 = *((_BYTE *)this + 90) != 0;
  v14 = (__CFDictionary *)atomic_load((unint64_t *)&v29);
  CFDictionarySetValue(v14, CFSTR("NSFont"), RubyFont);
  v15 = (const __CFDictionary *)atomic_load((unint64_t *)&v29);
  if (!CFDictionaryGetValue(v15, CFSTR("CTForegroundColor")))
  {
    v16 = (void *)atomic_load((unint64_t *)this + 9);
    if (v16)
    {
      v17 = (__CFDictionary *)atomic_load((unint64_t *)&v29);
      CFDictionarySetValue(v17, CFSTR("CTForegroundColor"), v16);
    }
  }
  v18 = (TAttributes *)atomic_load((unint64_t *)this + 5);
  BackgroundColor = TAttributes::GetBackgroundColor(v18, 0, (const __CFString **)v16);
  RemoveIfValueEqual((TCFMutableDictionary *)&v29, BackgroundColor, CFSTR("CTBackgroundColor"));
  RemoveIfValueEqual((TCFMutableDictionary *)&v29, BackgroundColor, CFSTR("NSBackgroundColor"));
  if (atomic_load((unint64_t *)this + 48))
  {
    v21 = *((unsigned __int8 *)this + 376);
    v22 = (TRubyRun *)((char *)this + 72 * *((unsigned __int8 *)this + 376) + 408);
    v23 = (const __CFDictionary *)atomic_load((unint64_t *)&v29);
    TRubyAnnotationLine::InitWithAnnotation(v22, (TRubyRun *)((char *)this + 328), v21, v23, v3 * (double)v8, v13);
    TRubyRun::UpdateMetricsWithAnnotationLine(this, v21, v24);
  }
  else
  {
    v25 = 0;
    v26 = (TRubyRun *)((char *)this + 408);
    do
    {
      v27 = (const __CFDictionary *)atomic_load((unint64_t *)&v29);
      TRubyAnnotationLine::InitWithAnnotation(v26, (TRubyRun *)((char *)this + 328), v25, v27, v3 * (double)v8, v13);
      TRubyRun::UpdateMetricsWithAnnotationLine(this, v25++, v28);
      v26 = (TRubyAnnotationLine *)((char *)v26 + 72);
    }
    while (v25 != 4);
  }
  *((_BYTE *)this + 761) = (*((_WORD *)this + 89) & 0x1000) != 0;

}

void TRubyRun::TRubyRun(TRubyRun *this, const TRubyRun *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t i;
  char *v7;

  TRun::TRun(this, a2);
  *v4 = &off_1E15DE7A0;
  v5 = (void *)atomic_load((unint64_t *)a2 + 40);
  *((_QWORD *)this + 40) = v5;
  TRubyAnnotation::TRubyAnnotation((TRubyRun *)((char *)this + 328), (const TRubyRun *)((char *)a2 + 328));
  for (i = 408; i != 696; i += 72)
  {
    v7 = (char *)this + i;
    *((_WORD *)v7 + 32) = 0;
    *((_OWORD *)v7 + 2) = 0uLL;
    *((_OWORD *)v7 + 3) = 0uLL;
    *(_OWORD *)v7 = 0uLL;
    *((_OWORD *)v7 + 1) = 0uLL;
  }
  *((double *)this + 87) = TRun::GetAscent(this);
  *((double *)this + 88) = TRun::GetDescent(this);
  *((_QWORD *)this + 89) = *((_QWORD *)a2 + 89);
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  *(_OWORD *)((char *)this + 728) = *(_OWORD *)((char *)a2 + 728);
  *(_OWORD *)((char *)this + 744) = *MEMORY[0x1E0C9D820];
  *((_WORD *)this + 380) = *((_WORD *)a2 + 380);
  *((_QWORD *)this + 96) = 0;
  TRubyRun::InitializeAnnotationFrom(this, a2);
}

void TRubyRun::InitializeAnnotationFrom(TRubyRun *this, const TRubyRun *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  void *v8;
  int8x16_t v9;
  __int128 v10;
  __int128 v11;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (char *)this + v4;
    v7 = (void *)atomic_load((unint64_t *)((char *)a2 + v4 + 408));
    TCFRef<__CTFont const*>::Retain((unint64_t *)((char *)this + v4 + 408), v7);
    v8 = (void *)atomic_load((unint64_t *)((char *)a2 + v4 + 416));
    TCFRef<__CTFont const*>::Retain((unint64_t *)((char *)this + v4 + 416), v8);
    v9 = *(int8x16_t *)((char *)a2 + v4 + 424);
    v10 = *(_OWORD *)((char *)a2 + v4 + 440);
    v11 = *(_OWORD *)((char *)a2 + v4 + 456);
    *((_WORD *)v6 + 236) = *(_WORD *)((char *)a2 + v4 + 472);
    *(_OWORD *)(v6 + 440) = v10;
    *(_OWORD *)(v6 + 456) = v11;
    *(int8x16_t *)(v6 + 424) = v9;
    TRubyRun::UpdateMetricsWithAnnotationLine(this, v5++, v9);
    v4 += 72;
  }
  while (v4 != 288);
}

uint64_t TRubyRun::TRubyRun(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  void *v9;
  uint64_t i;
  uint64_t v11;

  *(_QWORD *)TRun::TRun(a1, a2, a3, a4, a5) = &off_1E15DE7A0;
  v9 = (void *)atomic_load((unint64_t *)(a2 + 320));
  *(_QWORD *)(a1 + 320) = v9;
  TRubyAnnotation::TRubyAnnotation((TRubyAnnotation *)(a1 + 328), (const TRubyAnnotation *)(a2 + 328));
  for (i = 408; i != 696; i += 72)
  {
    v11 = a1 + i;
    *(_WORD *)(v11 + 64) = 0;
    *(_OWORD *)(v11 + 32) = 0uLL;
    *(_OWORD *)(v11 + 48) = 0uLL;
    *(_OWORD *)v11 = 0uLL;
    *(_OWORD *)(v11 + 16) = 0uLL;
  }
  *(double *)(a1 + 696) = TRun::GetAscent((TRun *)a1);
  *(double *)(a1 + 704) = TRun::GetDescent((TRun *)a1);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = *MEMORY[0x1E0C9D820];
  *(_WORD *)(a1 + 760) = *(_WORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  if (a3 == *(_QWORD *)(a1 + 728) && a4 == *(_QWORD *)(a1 + 736))
    TRubyRun::InitializeAnnotationFrom((TRubyRun *)a1, (const TRubyRun *)a2);
  return a1;
}

int8x16_t TRubyRun::UpdateMetricsWithAnnotationLine(TRubyRun *this, unsigned int a2, int8x16_t result)
{
  float64x2_t v4;

  if (atomic_load((unint64_t *)this + 9 * a2 + 51))
  {
    v4 = *(float64x2_t *)((char *)this + 72 * a2 + 424);
    *(double *)result.i64 = vaddvq_f64(v4);
    switch(a2)
    {
      case 0u:
        goto LABEL_6;
      case 1u:
        *(double *)result.i64 = *(double *)result.i64 + *((double *)this + 88);
        *((_QWORD *)this + 88) = result.i64[0];
        break;
      case 2u:
        if (*((_BYTE *)this + 72 * a2 + 472))
        {
          *((double *)this + 87) = *(double *)result.i64 + *((double *)this + 87);
          if (atomic_load((unint64_t *)this + 9 * a2 + 52))
          {
LABEL_6:
            *(double *)result.i64 = *(double *)result.i64 + *((double *)this + 87);
            *((_QWORD *)this + 87) = result.i64[0];
          }
        }
        break;
      case 3u:
        result = vbslq_s8((int8x16_t)vcgtq_f64(v4, *(float64x2_t *)((char *)this + 696)), (int8x16_t)v4, *(int8x16_t *)((char *)this + 696));
        *(int8x16_t *)((char *)this + 696) = result;
        break;
      default:
        return result;
    }
  }
  return result;
}

void TRubyRun::DrawAnnotationLine(TRubyRun *this, CGContextRef c, unsigned int a3)
{
  int v6;
  __int128 v7;
  CGPoint TextPosition;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  CGAffineTransform transform;
  CGAffineTransform v14;
  CGAffineTransform v15;

  if (a3 == 2 && !*((_BYTE *)this + 90))
  {
    CGContextSaveGState(c);
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *(_OWORD *)&v14.c = v7;
    *(_OWORD *)&v14.tx = v7;
    *(_OWORD *)&v14.a = v7;
    *(_OWORD *)&v15.a = xmmword_18492F2C0;
    v15.c = 1.0;
    memset(&v15.d, 0, 24);
    CGAffineTransformInvert(&v14, &v15);
    *(_OWORD *)&transform.a = xmmword_18492F2C0;
    transform.c = 1.0;
    memset(&transform.d, 0, 24);
    CGContextConcatCTM(c, &transform);
    TextPosition = CGContextGetTextPosition(c);
    CGContextSetTextPosition(c, v14.tx + TextPosition.y * v14.c + v14.a * TextPosition.x, v14.ty + TextPosition.y * v14.d + v14.b * TextPosition.x);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v9 = atomic_load((unint64_t *)this + 9 * a3 + 51);
  if (c && v9)
    TLine::DrawGlyphs(*(TLine **)(v9 + 40), c);
  v10 = (unint64_t *)((char *)this + 72 * a3 + 416);
  if (atomic_load(v10))
  {
    v12 = atomic_load(v10);
    if (c)
    {
      if (v12)
        TLine::DrawGlyphs(*(TLine **)(v12 + 40), c);
    }
  }
  if (v6)
    CGContextRestoreGState(c);
}

void TRubyRun::DrawGlyphs(TRubyRun *this, CGContextRef c, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  CGFloat y;
  CGPoint TextPosition;
  CGPoint v9;
  double x;
  CGFloat v11;
  uint64_t v12;
  unint64_t *v13;
  CFRange v15;

  length = a3.length;
  location = a3.location;
  TextPosition = CGContextGetTextPosition(c);
  y = TextPosition.y;
  if (*((_BYTE *)this + 401))
  {
    v15.location = location;
    v15.length = length;
    TRun::DrawGlyphs(this, c, v15);
    v9 = CGContextGetTextPosition(c);
    y = v9.y;
    x = v9.x;
  }
  else
  {
    x = TextPosition.x + *((double *)this + 24);
  }
  v11 = y;
  v12 = 0;
  v13 = (unint64_t *)((char *)this + 408);
  do
  {
    if (atomic_load(v13))
    {
      CGContextSetTextPosition(c, TextPosition.x, TextPosition.y);
      TRubyRun::DrawAnnotationLine(this, c, v12);
    }
    v13 += 9;
    ++v12;
  }
  while (v12 != 4);
  CGContextSetTextPosition(c, x, v11);
}

void TRubyRun::AdvanceRubyLinesInitialAdvance(TRubyRun *this, double a2)
{
  uint64_t v4;
  int v5;
  double *v6;
  double *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  TRun *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double Ascent;
  double *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  TRun *v22;
  double *v23;
  CGSize v24;
  CGSize v25;

  v4 = 0;
  v5 = *((unsigned __int8 *)this + 90);
  v6 = (double *)((char *)this + 464);
  v7 = (double *)MEMORY[0x1E0C9D820];
  do
  {
    v8 = atomic_load((unint64_t *)v6 - 7);
    if (v8)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v8 + 40) + 16);
      v9 = *v10;
      if (v10[1] - *v10 >= 1)
      {
        v11 = *(TRun **)(*(_QWORD *)v9 + 48);
        v12 = (double *)*((_QWORD *)v11 + 39);
        if (!v12)
          v12 = v7;
        v13 = *v12;
        v14 = v12[1];
        v15 = *(v6 - 1) + a2;
        if (v4 == 2)
        {
          Ascent = TRun::GetAscent(this);
          if (v5)
          {
            v18 = (double *)((char *)this + 72 * v4 + 432);
          }
          else
          {
            v15 = v15 - Ascent;
            Ascent = *((double *)this + 90);
            v18 = v6 - 5;
          }
          v16 = Ascent + *v18;
          v19 = atomic_load((unint64_t *)v6 - 6);
          if (v19)
          {
            v21 = (uint64_t *)(*(_QWORD *)(v19 + 40) + 16);
            v20 = *v21;
            if (v21[1] - *v21 >= 1)
            {
              v22 = *(TRun **)(*(_QWORD *)v20 + 48);
              v23 = (double *)*((_QWORD *)v22 + 39);
              if (!v23)
                v23 = v7;
              v24.width = v15 - *(v6 - 1) + *v6 - *v23;
              v24.height = v16 + *(v6 - 5) + *(v6 - 4) - v23[1];
              TRun::AdvanceInitialAdvance(v22, v24);
            }
          }
        }
        else if (v4 == 1)
        {
          v16 = -(TRun::GetDescent(this) + *(v6 - 5));
        }
        else
        {
          v16 = 0.0;
          if (!(_BYTE)v4)
            v16 = TRun::GetAscent(this) + *(v6 - 4);
        }
        v25.width = v15 - v13;
        v25.height = v16 - v14;
        TRun::AdvanceInitialAdvance(v11, v25);
      }
    }
    v6 += 9;
    ++v4;
  }
  while (v4 != 4);
}

void TRubyRun::CacheGlyphPositions(double **this, double *a2, double *a3)
{
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double *v11;

  TRubyRun::AdvanceRubyLinesInitialAdvance((TRubyRun *)this, *a2 - *((double *)this + 93));
  v6 = *a2;
  v7 = *a3;
  TRun::CacheGlyphPositions((TRun *)this, a2, a3);
  if (*((_BYTE *)this + 761))
  {
    v8 = this[39];
    if (!v8)
      v8 = (double *)MEMORY[0x1E0C9D820];
    v9 = *((double *)this + 24) + *v8;
    v10 = *((double *)this + 87) + *((double *)this + 88);
    if (v10 > v9 || vabdd_f64(v10, v9) < 0.001)
    {
      TRun::GetPositions((__n128 *)this, 0);
      *((double *)this + 96) = *v11 - v6 - v7;
    }
  }
}

void TRubyRun::DrawGlyphsAtPositions(TRun *this, CGContextRef c, CFRange a3, CGPoint *a4, const TAttributes **a5)
{
  uint64_t v7;
  unint64_t *v8;
  _OWORD *v9;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if (*((_BYTE *)this + 401))
    TRun::DrawRotatedGlyphsAtPositions(this, c, a3, a4, a5, *((double *)this + 96));
  v7 = 0;
  v8 = (unint64_t *)((char *)this + 408);
  v9 = (_OWORD *)MEMORY[0x1E0C9BAA8];
  do
  {
    if (atomic_load(v8))
    {
      *(_QWORD *)&v11 = -1;
      *((_QWORD *)&v11 + 1) = -1;
      *(_OWORD *)&v17.c = v11;
      *(_OWORD *)&v17.tx = v11;
      *(_OWORD *)&v17.a = v11;
      CGContextGetTextMatrix(&v17, c);
      if (*((_BYTE *)this + 144))
        v12 = (_OWORD *)((char *)this + 96);
      else
        v12 = v9;
      v13 = v12[1];
      *(_OWORD *)&t1.a = *v12;
      *(_OWORD *)&t1.c = v13;
      *(_OWORD *)&t1.tx = v12[2];
      CGAffineTransformInvert(&t2, &t1);
      t1 = t2;
      t2 = v17;
      CGAffineTransformConcat(&v16, &t1, &t2);
      v15 = v16;
      CGContextSetTextMatrix(c, &v15);
      TRubyRun::DrawAnnotationLine(this, c, v7);
      v14 = v17;
      CGContextSetTextMatrix(c, &v14);
    }
    v8 += 9;
    ++v7;
  }
  while (v7 != 4);
}

double TRubyRun::GetBackgroundRect(TRubyRun *this)
{
  double result;
  CGRect v3;

  v3.origin.x = TRun::GetBackgroundRect(this);
  *(_QWORD *)&result = (unint64_t)CGRectOffset(v3, -*((double *)this + 93), -*((double *)this + 94));
  return result;
}

CTFontRef CreateRubyFont(const __CTFont *a1, CGFloat a2, int a3)
{
  const __CTFontDescriptor *v4;
  const __CFAllocator *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontRef v10;
  int valuePtr;
  int v12;

  v4 = (const __CTFontDescriptor *)atomic_load((unint64_t *)(*((_QWORD *)a1 + 5) + 8));
  if (a3 == 1)
    return CTFontCreateWithFontDescriptor(v4, a2, 0);
  valuePtr = 28;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v12 = 2;
  v8 = CFNumberCreate(v6, kCFNumberIntType, &v12);
  CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v4, v7, v8);

  v10 = CTFontCreateWithFontDescriptor(CopyWithFeature, a2, 0);
  return v10;
}

void RemoveIfValueEqual(TCFMutableDictionary *a1, const void *a2, const __CFString *key)
{
  const __CFDictionary *v6;
  const void *Value;
  __CFDictionary *v8;

  v6 = (const __CFDictionary *)atomic_load((unint64_t *)a1);
  Value = CFDictionaryGetValue(v6, key);
  if (Value == a2 || a2 && Value && CFEqual(a2, Value))
  {
    v8 = (__CFDictionary *)atomic_load((unint64_t *)a1);
    CFDictionaryRemoveValue(v8, key);
  }
}

void TRubyAnnotationLine::InitWithAnnotation(TRubyAnnotationLine *this, const TRubyAnnotation *a2, unsigned int a3, const __CFDictionary *a4, double a5, int a6)
{
  const __CFAttributedString *v12;
  CFIndex v13;
  CFIndex v14;
  const __CFAllocator *v15;
  CFMutableAttributedStringRef MutableCopy;
  _QWORD *Value;
  double v18;
  double v19;
  const __CTFontDescriptor *v20;
  CTFontRef v21;
  const __CFString *String;
  const __CFAttributedString *v23;
  char *v24;
  const __CFString *v25;
  CFIndex Length;
  uint64_t v27;
  const __CFDictionary *v28;
  const __CTFont *v29;
  double v30;
  CTFontRef RubyFont;
  CTFontRef v32;
  double v33;
  const __CTFontDescriptor *v34;
  CTFontRef v35;
  __CFDictionary *v36;
  const __CFAllocator *v37;
  CFMutableStringRef v38;
  __CFDictionary *v39;
  const __CFString *ToneString;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  __CFAttributedString *v44;
  id v45;
  __CFString *v46;
  const __CFDictionary *v47;
  const __CFAttributedString *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  const __CFDictionary *v52;
  unint64_t v53;
  void *v54;
  const __CFAttributedString *v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  id v62;
  BOOL v63;
  id Line;
  _QWORD v65[5];
  id v66;
  char v67;
  id v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;

  v68 = 0;
  v12 = (const __CFAttributedString *)atomic_load((unint64_t *)a2 + 7);
  if (v12 && (v13 = CFAttributedStringGetLength(v12)) != 0)
  {
    v14 = v13;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v12);
    v65[0] = MEMORY[0x1E0C809B0];
    v65[1] = 3321888768;
    v65[2] = ___ZN19TRubyAnnotationLine18InitWithAnnotationERK15TRubyAnnotation14CTRubyPositionPK14__CFDictionarydb_block_invoke;
    v65[3] = &unk_1E15E1830;
    v65[4] = a4;
    v66 = MutableCopy;
    v67 = a3;
    -[__CFAttributedString enumerateAttributesInRange:options:usingBlock:](v12, "enumerateAttributesInRange:options:usingBlock:", 0, v14, 0, v65);
    Value = CFDictionaryGetValue(a4, CFSTR("NSFont"));
    if (Value)
      v18 = *(double *)(Value[5] + 16);
    else
      v18 = 0.0;
    if (*((_BYTE *)a2 + 72))
    {
      v19 = v18 * (double)v14;
      if (v19 > a5)
      {
        v20 = (const __CTFontDescriptor *)atomic_load((unint64_t *)(Value[5] + 8));
        v21 = CTFontCreateWithFontDescriptor(v20, v18 * a5 / v19, 0);
        v69.location = 0;
        v69.length = v14;
        CFAttributedStringSetAttribute(MutableCopy, v69, CFSTR("NSFont"), v21);

      }
    }
    if (a3 == 2)
    {
      String = CFAttributedStringGetString(v12);
      LOBYTE(v62) = 0;
      if (HasToneString(String, (BOOL *)&v62))
      {
        v73.location = v14 - 1;
        v73.length = 1;
        v23 = CFAttributedStringCreateWithSubstring(v15, MutableCopy, v73);
        v70.location = v14 - 1;
        v70.length = 1;
        CFAttributedStringReplaceString(MutableCopy, v70, &stru_1E15EDAC0);
        if ((_BYTE)v62)
        {
          v71.location = 0;
          v71.length = 0;
          CFAttributedStringReplaceAttributedString(MutableCopy, v71, v23);
          *((_BYTE *)this + 65) = 1;
        }
        else
        {
          Line = (id)CreateLine(v23, a6);
          v41 = (unint64_t *)((char *)this + 8);
          do
            v42 = __ldaxr((unint64_t *)&Line);
          while (__stlxr(0, (unint64_t *)&Line));
          do
            v43 = (void *)__ldaxr(v41);
          while (__stlxr(v42, v41));

        }
      }
    }
    v44 = MutableCopy;
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v68, v44);

    v45 = MutableCopy;
  }
  else
  {
    if (a3 > 3)
      goto LABEL_46;
    v24 = (char *)a2 + 8 * a3;
    v25 = (const __CFString *)*((_QWORD *)v24 + 2);
    if (!v25)
      goto LABEL_46;
    Length = CFStringGetLength(*((CFStringRef *)v24 + 2));
    if (!Length)
      goto LABEL_46;
    v27 = Length;
    Line = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&Line, a4);
    v28 = (const __CFDictionary *)atomic_load((unint64_t *)&Line);
    v29 = (const __CTFont *)CFDictionaryGetValue(v28, CFSTR("NSFont"));
    if (v29)
      v30 = *(double *)(*((_QWORD *)v29 + 5) + 16);
    else
      v30 = 0.0;
    RubyFont = CreateRubyFont(v29, v30, a3);
    v32 = RubyFont;
    if (*((_BYTE *)a2 + 72))
    {
      v33 = v30 * (double)v27;
      if (v33 > a5)
      {
        v34 = (const __CTFontDescriptor *)atomic_load((unint64_t *)(*((_QWORD *)RubyFont + 5) + 8));
        v35 = CTFontCreateWithFontDescriptor(v34, v30 * a5 / v33, 0);
        v36 = (__CFDictionary *)atomic_load((unint64_t *)&Line);
        CFDictionarySetValue(v36, CFSTR("NSFont"), v35);

      }
    }
    v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v38 = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v25);
    if (a3 == 2)
    {
      v39 = (__CFDictionary *)atomic_load((unint64_t *)&Line);
      CFDictionarySetValue(v39, CFSTR("CTVerticalForms"), (const void *)*MEMORY[0x1E0C9AE50]);
      v63 = 0;
      if (HasToneString(v25, &v63))
      {
        v72.location = v27 - 1;
        v72.length = 1;
        CFStringDelete(v38, v72);
        if (v63)
        {
          ToneString = (const __CFString *)GetToneString(5);
          CFStringInsert(v38, 0, ToneString);
          *((_BYTE *)this + 65) = 1;
        }
        else
        {
          v74.location = v27 - 1;
          v74.length = 1;
          v46 = (__CFString *)CFStringCreateWithSubstring(v37, v25, v74);
          v47 = (const __CFDictionary *)atomic_load((unint64_t *)&Line);
          v48 = CFAttributedStringCreate(v37, v46, v47);
          v62 = (id)CreateLine(v48, a6);
          v49 = (unint64_t *)((char *)this + 8);
          do
            v50 = __ldaxr((unint64_t *)&v62);
          while (__stlxr(0, (unint64_t *)&v62));
          do
            v51 = (void *)__ldaxr(v49);
          while (__stlxr(v50, v49));

        }
      }
    }
    v52 = (const __CFDictionary *)atomic_load((unint64_t *)&Line);
    v62 = CFAttributedStringCreate(v37, v38, v52);
    do
      v53 = __ldaxr((unint64_t *)&v62);
    while (__stlxr(0, (unint64_t *)&v62));
    do
      v54 = (void *)__ldaxr((unint64_t *)&v68);
    while (__stlxr(v53, (unint64_t *)&v68));

    v45 = Line;
  }

  v55 = (const __CFAttributedString *)atomic_load((unint64_t *)&v68);
  Line = (id)CreateLine(v55, a6);
  do
    v56 = __ldaxr((unint64_t *)&Line);
  while (__stlxr(0, (unint64_t *)&Line));
  do
    v57 = (void *)__ldaxr((unint64_t *)this);
  while (__stlxr(v56, (unint64_t *)this));

  v58 = atomic_load((unint64_t *)this);
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 40);
    *((_QWORD *)this + 2) = *(_QWORD *)(v59 + 112);
    *((_QWORD *)this + 3) = *(_QWORD *)(v59 + 120);
    v60 = *(double *)(v59 + 128);
    if (v60 == -1.79769313e308)
      v60 = 0.0;
    *((double *)this + 4) = v60;
    v61 = *(_QWORD *)(v59 + 104);
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)this + 5) = v61;
  *((_BYTE *)this + 64) = a6;
LABEL_46:

}

void TRubyRun::UpdateWidth(TRubyRun *this, TLine *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  TStorageRange *v8;
  double v9;
  int v10;
  unsigned int v11;
  double *v12;
  double v13;
  unint64_t v14;
  double v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;
  double v49;
  CGFloat v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  CGFloat v63;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double Width;
  double *v73;
  double v74;
  double Descent;
  double v76;
  double v78;
  unint64_t v79;
  double v80;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  CFRange v89;
  CGSize v90;
  CGSize v91;

  if (*((double *)this + 89) <= 0.0)
  {
    v7 = 0;
    v8 = (TRubyRun *)((char *)this + 192);
    v9 = *((double *)this + 24);
    v10 = *((unsigned __int8 *)this + 328);
    v11 = *((unsigned __int8 *)this + 329);
    v12 = (double *)*((_QWORD *)this + 39);
    if (!v12)
      v12 = (double *)MEMORY[0x1E0C9D820];
    v13 = *v12;
    v14 = atomic_load((unint64_t *)this + 7);
    v15 = *(double *)(*(_QWORD *)(v14 + 40) + 16);
    v16 = *((unsigned __int8 *)this + 90);
    v17 = 216;
    if (!*((_BYTE *)this + 90))
      v17 = 144;
    v18 = v9 + v13;
    *((double *)this + 90) = v9 + v13;
    v19 = v9 + v13;
    do
    {
      if (v19 < *(double *)((char *)this + v7 + 448))
        v19 = *(double *)((char *)this + v7 + 448);
      v7 += 72;
    }
    while (v17 != v7);
    v20 = *((_QWORD *)this + 27);
    v21 = *(_QWORD *)(v20 + 32);
    if (v21 || (v24 = *(_QWORD *)(v20 + 24)) == 0)
    {
      v22 = 0;
      v23 = v21 + 16 * *((_QWORD *)this + 25);
    }
    else
    {
      v23 = v24 + 8 * *((_QWORD *)this + 25);
      v22 = 1;
    }
    v25 = v15 * 0.25;
    v26 = 0.0;
    if (v19 <= v18)
    {
      v88 = *((_QWORD *)this + 26);
      v29 = 0;
      v30 = 0.0;
    }
    else
    {
      if (!a2)
        return;
      v88 = *((_QWORD *)this + 26);
      if (a3 < 1)
      {
        v29 = 0;
      }
      else
      {
        v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * a3 - 8) + 40);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 120))(v27);
        if (v11 < 2)
          v29 = v28;
        else
          v29 = 0;
      }
      v31 = *((_QWORD *)a2 + 2);
      v33 = ((*((_QWORD *)a2 + 3) - v31) >> 3) - 1 > a3
         && (v32 = *(_QWORD *)(*(_QWORD *)(v31 + 8 * a3 + 8) + 40),
             (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 120))(v32))
         && (v11 & 0xFD) == 0;
      v34 = v19 - v18;
      v35 = CountGraphemes(this);
      v30 = 0.0;
      switch(v10)
      {
        case 0:
        case 4:
        case 5:
          v36 = v34 * 0.5;
          if (v25 <= v34 * 0.5)
            v36 = v25;
          if (v29)
            v37 = v36;
          else
            v37 = 0.0;
          if (v33)
            v38 = v36;
          else
            v38 = 0.0;
          v39 = v19 - (v37 + v38);
          if (v10 == 4)
            v40 = 0.0;
          else
            v40 = (v34 - (v37 + v38)) / (double)v35;
          v41 = v39 - v40;
          v42 = v19 - v41;
          v43 = v41 - v18;
          if (v35 >= 2)
            v44 = v43 / (double)(v35 - 1);
          else
            v44 = 0.0;
          if (v37 <= 0.0 || v38 <= 0.0)
          {
            v47 = v38 < 0.0;
            v46 = v42 - v38;
            if (v47)
              v46 = 0.0;
            v48 = v42 - v37;
            if (v37 <= 0.0)
            {
              v45 = 0.0;
            }
            else
            {
              v46 = 0.0;
              v45 = v48;
            }
          }
          else
          {
            v45 = v42 * 0.5 - v37;
            v46 = v42 * 0.5 - v38;
          }
          v49 = v43 * 0.5;
          if (v35 >= 2)
            v49 = -0.0;
          v30 = v49 + v46;
          v50 = v49 + v45;
          v90.height = 0.0;
          v90.width = v50;
          TRun::AdvanceInitialAdvance(this, v90);
          *((CGFloat *)this + 93) = v50;
          *((_QWORD *)this + 94) = 0;
          if (v88 < 2)
          {
            v19 = v39;
          }
          else
          {
            v51 = 0;
            v87 = v23;
            do
            {
              v52 = *((_QWORD *)this + 27);
              v53 = *((_QWORD *)this + 25);
              v54 = *(_DWORD *)(*(_QWORD *)(v52 + 40) + 4 * v53 + 4 * v51);
              if ((v54 & 0x1040) == 0
                && (v54 & 0x20) == 0
                && *(unsigned __int16 *)(*(_QWORD *)(v52 + 16) + 2 * v53 + 2 * v51) != 0xFFFF)
              {
                if (v22)
                {
                  v55 = (double *)(v87 + 8 * v51);
                  v56 = 0;
                }
                else
                {
                  v56 = *(_QWORD *)(v23 + 8);
                  v55 = (double *)v23;
                }
                v57 = v44 + *v55;
                TStorageRange::SetAdvance(v8, v51, *(CGSize *)(&v56 - 1));
              }
              ++v51;
              v23 += 16;
            }
            while (v88 - 1 != v51);
            v19 = v39;
            v23 = v87;
          }
          break;
        case 1:
          goto LABEL_66;
        case 3:
          goto LABEL_65;
        case 6:
          break;
        default:
          v34 = v34 * 0.5;
LABEL_65:
          v30 = v34;
LABEL_66:
          if (v10 == 3)
            v58 = 0.0;
          else
            v58 = v34;
          if (v25 > v30)
            v59 = v30;
          else
            v59 = v25;
          if (v29)
            v60 = v59;
          else
            v60 = 0.0;
          if (v25 > v58)
            v61 = v58;
          else
            v61 = v25;
          if (v33)
            v62 = v61;
          else
            v62 = 0.0;
          v63 = v30 - v60;
          v30 = v58 - v62;
          v91.height = 0.0;
          v91.width = v63;
          TRun::AdvanceInitialAdvance(this, v91);
          *((CGFloat *)this + 93) = v63;
          *((_QWORD *)this + 94) = 0;
          v19 = v19 - (v60 + v62);
          break;
      }
    }
    TRubyAnnotationLine::UpdateWidth((TRubyRun *)((char *)this + 408), v10, v29, v18, v25);
    TRubyAnnotationLine::UpdateWidth((TRubyRun *)((char *)this + 480), v10, v29, v18, v25);
    if (atomic_load((unint64_t *)this + 69))
    {
      v65 = *((double *)this + 71) + *((double *)this + 72);
      if (v16)
        v26 = 0.0;
      else
        v26 = v65 + 0.0;
      if (v10 == 2)
      {
        v66 = *((double *)this + 74);
        if (*((_BYTE *)this + 617))
        {
          v67 = atomic_load((unint64_t *)this + 69);
          v68 = *(_QWORD *)(v67 + 40);
          if (v68)
          {
            v70 = v68 + 16;
            v69 = *(_QWORD *)(v68 + 16);
            if (*(_QWORD *)(v70 + 8) - v69 >= 1)
            {
              v71 = *(_QWORD *)(*(_QWORD *)v69 + 40);
              if (v71)
              {
                v89.location = 0;
                v89.length = 1;
                Width = TStorageRange::GetWidth((TStorageRange *)(v71 + 192), v89);
                v73 = *(double **)(v71 + 312);
                if (!v73)
                  v73 = (double *)MEMORY[0x1E0C9D820];
                v74 = Width + *v73;
                if (!v16)
                  v74 = -v74;
                v66 = v66 + v74;
              }
            }
          }
        }
        Descent = TRun::GetDescent(this);
        v76 = Descent + TRun::GetAscent(this) - v66;
        if (v76 > 0.0)
          *((double *)this + 75) = v76 * 0.5;
      }
      if (atomic_load((unint64_t *)this + 70))
      {
        v78 = -0.0;
        if (!v16)
          v78 = v65;
        v79 = atomic_load((unint64_t *)this + 70);
        if (v79)
          v80 = *(double *)(*(_QWORD *)(v79 + 40) + 104);
        else
          v80 = 0.0;
        v26 = v78 + v26;
        *((double *)this + 76) = *((double *)this + 75) + (*((double *)this + 74) - v80) * 0.5;
      }
    }
    if (atomic_load((unint64_t *)this + 78))
    {
      *((double *)this + 84) = v18 + v26;
      v26 = v26 + *((double *)this + 83);
    }
    if (v26 >= v30)
      v82 = v26;
    else
      v82 = v30;
    if (v82 > 0.0)
    {
      v83 = v88 - 1;
      if (v22)
      {
        v84 = v23 + 8 * v83;
        v85 = 0;
      }
      else
      {
        v84 = v23 + 16 * v83;
        v85 = *(_QWORD *)(v84 + 8);
      }
      v86 = v82 + *(double *)v84;
      TStorageRange::SetAdvance(v8, v83, *(CGSize *)(&v85 - 1));
    }
    TRubyRun::AdvanceRubyLinesInitialAdvance(this, 0.0);
    *((double *)this + 89) = v19 + v26;
  }
}

uint64_t CountGraphemes(const TRun *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v8;

  v1 = *((_QWORD *)a1 + 26);
  if (v1 < 1)
    return 0;
  result = 0;
  v4 = *((_QWORD *)a1 + 27);
  v5 = *((_QWORD *)a1 + 25);
  do
  {
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 4 * v5);
    if ((v6 & 0x1040) == 0)
    {
      v8 = (v6 & 0x20) == 0 && *(__int16 *)(*(_QWORD *)(v4 + 16) + 2 * v5) != -1;
      result += v8;
    }
    ++v5;
    --v1;
  }
  while (v1);
  return result;
}

void TRubyAnnotationLine::UpdateWidth(TRubyAnnotationLine *this, int a2, int a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const __CTLine *v21;
  CTLineRef JustifiedLine;
  CTLineRef v23;
  double v24;

  if (atomic_load((unint64_t *)this))
  {
    v9 = *((double *)this + 5);
    v10 = a4 - v9;
    if (a4 - v9 <= 0.0)
    {
      if (a4 - v9 >= 0.0)
        return;
      if (a2 == 1)
      {
        v11 = 0.0;
      }
      else
      {
        if (a2 == 3)
        {
          v24 = -v10;
        }
        else
        {
          if (a2 == 6)
            return;
          v24 = v10 * -0.5;
        }
        if (v24 >= a5)
          v24 = a5;
        if (!a3)
          v24 = 0.0;
        v11 = -v24;
      }
LABEL_29:
      *((double *)this + 6) = v11;
    }
    else
    {
      v11 = 0.0;
      switch(a2)
      {
        case 0:
        case 4:
        case 5:
          v12 = atomic_load((unint64_t *)this);
          v13 = *(_QWORD *)(v12 + 40);
          v15 = *(uint64_t **)(v13 + 16);
          v14 = *(_QWORD *)(v13 + 24);
          if (v14 - (uint64_t)v15 >= 1)
          {
            v16 = 0;
            v17 = (unint64_t)(v14 - (_QWORD)v15) >> 3 <= 1 ? 1 : (unint64_t)(v14 - (_QWORD)v15) >> 3;
            do
            {
              v18 = *v15++;
              v16 += CountGraphemes(*(const TRun **)(v18 + 40));
              --v17;
            }
            while (v17);
            if (v16 >= 2)
            {
              v19 = 0.0;
              if (a2 != 4)
                v19 = v10 / (double)v16;
              v20 = a4 - v19;
              v21 = (const __CTLine *)atomic_load((unint64_t *)this);
              JustifiedLine = CTLineCreateJustifiedLine(v21, 1.0, a4 - v19);
              if (JustifiedLine)
              {
                v23 = JustifiedLine;
                TCFRef<__CTFont const*>::Retain((unint64_t *)this, JustifiedLine);
                CFRelease(v23);
                *((double *)this + 5) = v20;
              }
            }
          }
          v11 = (a4 - *((double *)this + 5)) * 0.5;
          goto LABEL_29;
        case 1:
          goto LABEL_29;
        case 3:
          v11 = v10;
          goto LABEL_29;
        case 6:
          return;
        default:
          v11 = v10 * 0.5;
          goto LABEL_29;
      }
    }
  }
}

double TRubyRun::GetImageBounds(TRubyRun *this, CGContext *a2, CFRange a3, double *a4, double *a5)
{
  double ImageBounds;
  double v7;
  CGFloat y;
  double v9;
  CGFloat width;
  double v11;
  CGFloat height;
  unsigned int v13;
  unint64_t v14;
  CFIndex *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CFRange v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  ImageBounds = TRun::GetImageBounds(this, a2, a3, a4, a5);
  y = v7;
  width = v9;
  height = v11;
  v13 = 0;
  do
  {
    v14 = atomic_load((unint64_t *)this + 51);
    if (v14)
    {
      v15 = *(CFIndex **)(v14 + 40);
      v21.length = v15[18];
      v21.location = 0;
      v24.origin.x = TLine::GetImageBounds((TLine *)v15, 0, v21);
      v24.origin.y = v16;
      v24.size.width = v17;
      v24.size.height = v18;
      v22.origin.x = ImageBounds;
      v22.origin.y = y;
      v22.size.width = width;
      v22.size.height = height;
      v23 = CGRectUnion(v22, v24);
      ImageBounds = v23.origin.x;
      y = v23.origin.y;
      width = v23.size.width;
      height = v23.size.height;
    }
  }
  while (v13++ < 3);
  return ImageBounds;
}

void *TRubyRun::CopyDescriptionDictionary(TRubyRun *this, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  double *v7;
  TFrame **v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v16;
  void *v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[6];
  _QWORD v23[8];

  v23[6] = *MEMORY[0x1E0C80C00];
  v4 = TRun::CopyDescriptionDictionary(this, a2);
  v17 = (void *)objc_msgSend((id)(id)CFMakeCollectable(v4), "mutableCopy");
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = 0;
  v16 = (double *)this;
  v7 = (double *)((char *)this + 408);
  do
  {
    if (atomic_load((unint64_t *)v7))
    {
      v22[0] = CFSTR("ascent");
      v23[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7[2]);
      v22[1] = CFSTR("descent");
      v23[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7[3]);
      v22[2] = CFSTR("leading");
      v23[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7[4]);
      v22[3] = CFSTR("width");
      v23[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7[5]);
      v22[4] = CFSTR("initialOffset");
      v23[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7[6]);
      v22[5] = CFSTR("line");
      v9 = (TFrame **)atomic_load((unint64_t *)v7);
      v10 = CTCopyDescriptionDictionary(v9, a2);
      v23[5] = (id)CFMakeCollectable(v10);
      v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 6);
      if ((v6 & 0xFC) != 0)
        v12 = 0;
      else
        v12 = *((_QWORD *)&off_1E15E7700 + v6);
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, v12, v16);
    }
    ++v6;
    v7 += 9;
  }
  while (v6 != 4);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", TRun::GetAscent((TRun *)v16)), CFSTR("baseAscent"));
  objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", TRun::GetDescent((TRun *)v16)), CFSTR("baseDescent"));
  v20[0] = CFSTR("baseInitialAdvance");
  v18[0] = CFSTR("width");
  v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16[93]);
  v18[1] = CFSTR("height");
  v19[0] = v13;
  v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16[94]);
  v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
  v20[1] = CFSTR("lines");
  v21[0] = v14;
  v21[1] = v5;
  objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2), CFSTR("rubyAnnotations"));
  return v17;
}

void TRubyRun::CopyRubyAnnotationLineForPosition(TRubyRun *this@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X8>)
{
  unsigned int v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;
  void *v8;
  unint64_t v9;
  id v10;

  if (a2 == 5)
    v4 = 2;
  else
    v4 = a2;
  if (v4 > 3)
  {
    *a3 = 0;
  }
  else
  {
    v5 = (char *)this + 72 * v4;
    v6 = (unint64_t *)(v5 + 408);
    v7 = (unint64_t *)(v5 + 416);
    if (a2 != 5)
      v7 = v6;
    v8 = (void *)atomic_load(v7);
    v10 = v8;
    do
      v9 = __ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    *a3 = v9;

  }
}

uint64_t ___ZN19TRubyAnnotationLine18InitWithAnnotationERK15TRubyAnnotation14CTRubyPositionPK14__CFDictionarydb_block_invoke(uint64_t a1, uint64_t a2, CFIndex a3, CFIndex a4)
{
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  const __CTFont *Value;
  const __CTFont *v14;
  CTFontRef RubyFont;
  __CFAttributedString *v16;
  __CFAttributedString *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CFRange v25;
  CFRange v26;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = *(void **)(a1 + 32);
  result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v20;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(const __CFString **)(*((_QWORD *)&v19 + 1) + 8 * v11);
        Value = (const __CTFont *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v12);
        if (Value)
        {
          v14 = Value;
          if (v12 == CFSTR("NSFont") || CFSTR("NSFont") && v12 && CFEqual(v12, CFSTR("NSFont")))
          {
            RubyFont = CreateRubyFont(v14, *(CGFloat *)(*((_QWORD *)v14 + 5) + 16), *(unsigned __int8 *)(a1 + 48));
            v16 = (__CFAttributedString *)atomic_load((unint64_t *)(a1 + 40));
            v25.location = a3;
            v25.length = a4;
            CFAttributedStringSetAttribute(v16, v25, v12, RubyFont);

          }
        }
        else
        {
          v17 = (__CFAttributedString *)atomic_load((unint64_t *)(a1 + 40));
          v18 = (const void *)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v12);
          v26.location = a3;
          v26.length = a4;
          CFAttributedStringSetAttribute(v17, v26, v12, v18);
        }
        ++v11;
      }
      while (v9 != v11);
      result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

id __copy_helper_block_8_40c36_ZTS6TCFRefIP20__CFAttributedStringE(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)(a2 + 40));
  result = v3;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_8_40c36_ZTS6TCFRefIP20__CFAttributedStringE(uint64_t a1)
{

}

BOOL HasToneString(const __CFString *a1, BOOL *a2)
{
  const __CFString *ToneString;
  _BOOL8 result;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;

  ToneString = (const __CFString *)GetToneString(5);
  if (CFStringHasSuffix(a1, ToneString))
  {
    result = 1;
    *a2 = 1;
  }
  else
  {
    v6 = (const __CFString *)GetToneString(2);
    if (CFStringHasSuffix(a1, v6))
      return 1;
    v7 = (const __CFString *)GetToneString(3);
    if (CFStringHasSuffix(a1, v7))
    {
      return 1;
    }
    else
    {
      v8 = (const __CFString *)GetToneString(4);
      return CFStringHasSuffix(a1, v8) != 0;
    }
  }
  return result;
}

unint64_t CreateLine(const __CFAttributedString *a1, int a2)
{
  unint64_t v3;
  void *v4;
  const __CFDictionary *v5;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t RunWithCharIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  TRun *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  id v30;
  id v31;
  void *values;
  void *keys[35];

  keys[34] = *(void **)MEMORY[0x1E0C80C00];
  v31 = 0;
  if (a2)
  {
    values = (void *)*MEMORY[0x1E0C9AE50];
    keys[0] = CFSTR("CTTypesetterOptionVerticalLayout");
    v30 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
      v3 = __ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));
    do
      v4 = (void *)__ldaxr((unint64_t *)&v31);
    while (__stlxr(v3, (unint64_t *)&v31));

  }
  memcpy(keys, &unk_184948678, 0x110uLL);
  v5 = (const __CFDictionary *)atomic_load((unint64_t *)&v31);
  TTypesetterAttrString::TTypesetterAttrString((TTypesetterAttrString *)keys, a1, v5, 1);
  values = (void *)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>((uint64_t *)keys, (unint64_t *)&values);
  if (!atomic_load((unint64_t *)&values))
  {
    v19 = 0;
    goto LABEL_34;
  }
  v7 = atomic_load((unint64_t *)&values);
  TTypesetter::FillLine((TTypesetter *)keys, *(TLine **)(v7 + 40), 1.79769313e308, 0.0);
  if (atomic_load((unint64_t *)&values))
  {
    v9 = atomic_load((unint64_t *)&values);
    v10 = *(_QWORD *)(v9 + 40);
    v11 = *(uint64_t **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24) - (_QWORD)v11;
    if (v12 >= 1)
    {
      v13 = (unint64_t)v12 >> 3;
      if ((unint64_t)v12 >> 3 <= 1)
        v13 = 1;
      do
      {
        v14 = *v11++;
        *(_QWORD *)(*(_QWORD *)(v14 + 48) + 272) = v10;
        --v13;
      }
      while (v13);
    }
    if ((*(_WORD *)(v10 + 154) & 8) == 0)
      goto LABEL_31;
    v15 = v12 >> 3;
    v16 = *(_QWORD *)(v10 + 72);
    v17 = *(_QWORD *)(v10 + 88);
    if (v17)
      goto LABEL_14;
    RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v10, *(_QWORD *)(v10 + 72), 1);
    if (RunWithCharIndex >= v15)
    {
      v17 = 0;
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * RunWithCharIndex) + 48);
      if (v17)
      {
LABEL_14:
        if ((*(_BYTE *)(v17 + 224) & 1) != 0)
          v18 = *(_QWORD *)(v17 + 208) - 1;
        else
          v18 = 0;
        v21 = *(_QWORD *)(v17 + 216);
        v22 = *(_QWORD *)(v17 + 200);
        if (*(__int16 *)(*(_QWORD *)(v21 + 16) + 2 * v22 + 2 * v18) == -1
          && *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v22 + 8 * v18) == v16)
        {
          *(_QWORD *)(v17 + 264) = v18;
        }
      }
    }
    if (v12 >= 1)
    {
      v23 = v15 - 1;
      do
      {
        v24 = *(TRun **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v23) + 48);
        if (v24 != (TRun *)v17 && !TRun::GetNonDeletedGlyphCount(v24))
          TLine::DeleteRun((TLine *)v10, v23);
        v25 = v23-- + 1;
      }
      while (v25 > 1);
    }
LABEL_31:
    if ((*(_WORD *)(v10 + 154) & 0x20) != 0)
      TLine::DoGlyphFixups((TLine *)v10);
    goto LABEL_33;
  }
  do
LABEL_33:
    v19 = __ldaxr((unint64_t *)&values);
  while (__stlxr(0, (unint64_t *)&values));
LABEL_34:

  v26 = (std::__shared_weak_count *)keys[31];
  if (keys[31])
  {
    v27 = (unint64_t *)((char *)keys[31] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  TLine::~TLine((TLine *)keys);

  return v19;
}

uint64_t GetToneString(int a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t result;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  UniChar chars;
  UniChar v9;
  UniChar v10;
  UniChar v11;
  uint64_t v12;
  uint64_t v13;

  v12 = v1;
  v13 = v2;
  switch(a1)
  {
    case 2:
      v11 = 714;
      v3 = atomic_load((unsigned __int8 *)&qword_1ECDE78C0);
      if ((v3 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_1ECDE78C0))
        {
          qword_1ECDE78B8 = (uint64_t)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v11, 1);
          __cxa_guard_release(&qword_1ECDE78C0);
        }
      }
      result = qword_1ECDE78B8;
      break;
    case 3:
      v10 = 711;
      v5 = atomic_load((unsigned __int8 *)&qword_1ECDE78D0);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE78D0))
      {
        qword_1ECDE78C8 = (uint64_t)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v10, 1);
        __cxa_guard_release(&qword_1ECDE78D0);
      }
      result = qword_1ECDE78C8;
      break;
    case 4:
      v9 = 715;
      v6 = atomic_load((unsigned __int8 *)&qword_1ECDE78E0);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE78E0))
      {
        qword_1ECDE78D8 = (uint64_t)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v9, 1);
        __cxa_guard_release(&qword_1ECDE78E0);
      }
      result = qword_1ECDE78D8;
      break;
    case 5:
      chars = 729;
      v7 = atomic_load((unsigned __int8 *)&qword_1ECDE78F0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE78F0))
      {
        qword_1ECDE78E8 = (uint64_t)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &chars, 1);
        __cxa_guard_release(&qword_1ECDE78F0);
      }
      result = qword_1ECDE78E8;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void TRubyRun::~TRubyRun(id *this)
{
  uint64_t v2;

  v2 = 0;
  *this = &off_1E15DE7A0;
  do
  {

    v2 -= 9;
  }
  while (v2 != -36);
  TRubyAnnotation::~TRubyAnnotation(this + 41);

  TRun::~TRun(this);
}

{
  uint64_t v2;

  v2 = 0;
  *this = &off_1E15DE7A0;
  do
  {

    v2 -= 9;
  }
  while (v2 != -36);
  TRubyAnnotation::~TRubyAnnotation(this + 41);

  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TRubyRun::FindBreak@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  double v9;
  uint64_t v10;
  BOOL v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v6 = result;
  if (atomic_load((unint64_t *)(result + 408)))
  {
LABEL_2:
    v9 = *(double *)(result + 712);
    if (v9 > 0.0)
    {
      v10 = *(_QWORD *)(result + 8) - a2 + *(_QWORD *)(result + 16);
      v11 = v9 <= a6;
      if (v9 > a6)
        v10 = 0;
      v12 = 0.0;
      *(_BYTE *)a5 = 0;
      if (v11)
        v12 = v9;
      *(_QWORD *)(a5 + 8) = v10;
      *(double *)(a5 + 16) = v12;
      return result;
    }
  }
  else
  {
    v13 = (unint64_t *)(result + 480);
    v14 = -1;
    while (v14 != 2)
    {
      v15 = atomic_load(v13);
      ++v14;
      v13 += 9;
      if (v15)
      {
        if (v14 <= 2)
          goto LABEL_2;
        break;
      }
    }
  }
  *(_OWORD *)a5 = xmmword_184948788;
  *(_QWORD *)(a5 + 16) = -1;
  result = TRun::FindBreak(result, a2, a3, a4, a5, a6);
  if (*(double *)(v6 + 712) <= 0.0)
    *(_BYTE *)a5 |= 8u;
  return result;
}

double TRubyRun::GetAscent(TRubyRun *this)
{
  return *((double *)this + 87);
}

double TRubyRun::GetDescent(TRubyRun *this)
{
  return *((double *)this + 88);
}

uint64_t TRubyRun::CanUpdateWidth(TRubyRun *this)
{
  return 1;
}

uint64_t TRubyRun::AcceptsOverhang(TRubyRun *this)
{
  return 0;
}

void TRubyRun::UpdateCachedMetrics(TRubyRun *this, double a2)
{
  TRubyRun::UpdateWidth(this, 0, 0, a2);
}

CFSetRef GetValidRubyAttributes(void)::$_0::__invoke()
{
  CFSetRef result;
  void *values[13];

  values[12] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("CTBackgroundColor");
  values[1] = CFSTR("CTBaselineOffset");
  values[2] = CFSTR("NSFont");
  values[3] = CFSTR("CTForegroundColor");
  values[4] = CFSTR("NSKern");
  values[5] = CFSTR("NSLanguage");
  values[6] = CFSTR("NSLigature");
  values[7] = CFSTR("CTRenderingStyle");
  values[8] = CFSTR("NSStrokeWidth");
  values[9] = CFSTR("CTStrokeColor");
  values[10] = CFSTR("CTTracking");
  values[11] = CFSTR("NSBackgroundColor");
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 12, MEMORY[0x1E0C9B3B0]);
  _MergedGlobals_19 = (uint64_t)result;
  return result;
}

uint64_t OTL::GSUB::ApplyAlternateSubst(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t GlyphID;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v32;

  v12 = *(_QWORD *)(a3 + 48);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v12);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = a2 + 6;
  if (a2 + 6 > v14)
    return 0;
  v16 = GlyphID;
  v17 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v18 = v15 + 2 * v17;
  v20 = v18 >= v15 && v18 <= v14;
  v21 = (v14 - v15) >> 1;
  if (a2 + 8 > v14)
    v21 = 0;
  if (!v20 && v21 != v17)
    return 0;
  if (v17 >= a4)
  {
    v22 = a4 - 1;
    if (v20)
    {
      if (v22 >= v17)
        goto LABEL_36;
    }
    else if (v21 != v17 || v22 >= v17)
    {
      goto LABEL_36;
    }
    v24 = (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 2 * v22 + 6)) >> 16));
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) <= v14)
    {
      v26 = bswap32(*v24) >> 16;
      v27 = (unint64_t)&v25[v26];
      if ((unint64_t)(v24 + 2) <= v14)
        v28 = (v14 - (unint64_t)v25) >> 1;
      else
        v28 = 0;
      if ((v27 <= v14 && v27 >= (unint64_t)v25 || v28 == v26) && v26 > a5)
        v16 = bswap32(v24[a5 + 1]) >> 16;
    }
  }
LABEL_36:
  TRunGlue::SetGlyphID<true>(*(TRunGlue **)a3, v12, v16);
  v32 = 1;
  std::function<void ()(CFRange,long)>::operator()(a6, v12, 1, 1);
  return v32;
}

unsigned __int16 *EqualSequenceAndNote<BigEndianScalar<unsigned short>>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3, _QWORD *a4)
{
  unsigned __int16 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    while (TRunGlue::GetGlyphID((TRunGlue *)*a3, a3[6]) == bswap32(*v4) >> 16)
    {
      *a4 = a3[6];
      if (++v4 == a2)
        return a2;
      ++a4;
      if ((TGlyphIterator::Next((TGlyphIterator *)a3, 1) & 1) == 0)
        return v4;
    }
  }
  return v4;
}

uint64_t OTL::GSUB::WouldSubstituteLigature(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v21;
  unint64_t v22;
  int v23;
  uint64_t result;
  unint64_t v26;
  char *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  BOOL v33;
  BOOL v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  unsigned int v40;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = a2 + 6;
  if ((unint64_t)(a2 + 4) < *(_QWORD *)(a1 + 32) || v6 > v5)
    return 0;
  v8 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v9 = v6 + 2 * v8;
  v11 = v9 >= v6 && v9 <= v5;
  v12 = (v5 - v6) >> 1;
  if (a2 + 8 > v5)
    v12 = 0;
  if (!v11 && v12 != v8 || v8 < a3)
    return 0;
  v13 = a3 - 1;
  if (v11)
  {
    if (v13 >= v8)
      return 0;
  }
  else if (v12 != v8 || v13 >= v8)
  {
    return 0;
  }
  v15 = (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 2 * v13 + 6)) >> 16));
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) <= v5)
  {
    v17 = *v15;
    v18 = __rev16(v17);
    v19 = (unint64_t)&v16[v18];
    v21 = v19 >= (unint64_t)v16 && v19 <= v5;
    v22 = (v5 - (unint64_t)v16) >> 1;
    if ((unint64_t)(v15 + 2) > v5)
      v22 = 0;
    v23 = v22 == v18 || v21;
    if (v23 == 1 && v17 != 0)
    {
      v26 = 0;
      while (1)
      {
        if (v21)
        {
          if (v26 >= v18)
            return 0;
        }
        else
        {
          result = 0;
          if (v22 != v18 || v26 >= v18)
            return result;
        }
        v27 = (char *)v15 + (bswap32(v15[v26 + 1]) >> 16);
        v28 = (unsigned __int16 *)(v27 + 4);
        if ((unint64_t)(v27 + 4) > v5)
          break;
        v29 = *((unsigned __int16 *)v27 + 1);
        v30 = __rev16(v29);
        v31 = &v28[v30 - 1];
        v32 = (unint64_t)(v27 + 6) <= v5 ? (v5 - (unint64_t)v28) >> 1 : 0;
        v33 = (unint64_t)v31 <= v5 && v31 >= v28;
        if (!v33 && v32 != v30 - 1)
          break;
        if (v29)
          v35 = v30 > a5;
        else
          v35 = 1;
        if (!v35)
        {
          v36 = (v30 - 1);
          v37 = (unsigned __int16 *)(a4 + 2);
          while (v36)
          {
            v39 = *v37++;
            v38 = v39;
            v40 = *v28++;
            --v36;
            if (v38 != bswap32(v40) >> 16)
              goto LABEL_65;
          }
          return 1;
        }
LABEL_65:
        result = 0;
        if (++v26 == v18)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int16 *ContextSubstFormat1::NthSubRuleSet(ContextSubstFormat1 *this, unsigned int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 2)) >> 16)
    return 0;
  v3 = (unsigned __int16 *)((char *)this + (bswap32(*((unsigned __int16 *)this + a2 + 3)) >> 16));
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > a3)
    return 0;
  v6 = bswap32(*v3) >> 16;
  v7 = (unint64_t)&v4[v6];
  if ((unint64_t)(v3 + 2) <= a3)
    v8 = (a3 - (unint64_t)v4) >> 1;
  else
    v8 = 0;
  if (v7 >= (unint64_t)v4 && v7 <= a3 || v8 == v6)
    return v3;
  else
    return 0;
}

uint64_t OTL::GSUB::ApplySubstLookupRecords(_QWORD *a1, unint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, unint64_t a8, _WORD *a9, uint64_t a10, unint64_t a11)
{
  uint64_t *v11;
  int v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t GlyphID;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *i;
  __int128 *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v51;
  char v53;
  _QWORD v58[4];
  __int16 v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v11 = a7;
  v66 = *MEMORY[0x1E0C80C00];
  v60 = a8;
  v51 = *(_QWORD *)(a5 + 72);
  if (a4)
  {
    v13 = a4;
    v14 = a3;
    v15 = a2;
    v53 = 0;
    v16 = a3;
    while (1)
    {
      a8 = v60;
      if ((unint64_t)v14 < v15 || (v17 = v16 + 2, (unint64_t)(v16 + 2) > a1[5]))
      {
LABEL_48:
        v48 = v53;
        goto LABEL_50;
      }
      v18 = bswap32(*v16) >> 16;
      if (v60 <= v18)
        goto LABEL_46;
      *(_QWORD *)(a5 + 48) = v11[v18];
      v19 = TBaseFont::NthLookup<OTL::GSUB>(*(_QWORD *)(a1[2] + 400), a1, bswap32(v16[1]) >> 16);
      if (!v19)
        goto LABEL_46;
      v20 = v19;
      v59 = 0;
      *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v62 = 0xAAAAAAAAAAAAAAAALL;
      v63 = v21;
      v61 = v21;
      v58[0] = a10;
      v58[1] = a5;
      v58[2] = v11;
      v58[3] = &v60;
      v64[0] = &off_1E15DC950;
      v64[1] = v58;
      v65 = v64;
      std::__function::__value_func<void ()(CFRange,long)>::swap[abi:nn180100](v64, &v61);
      v22 = v65;
      if (v65 == v64)
        break;
      if (v65)
      {
        v23 = 5;
LABEL_11:
        (*(void (**)(void))(*v22 + 8 * v23))();
      }
      v24 = *(_QWORD *)(a10 + 40);
      *(_QWORD *)&v63 = *(_QWORD *)(a10 + 32);
      *((_QWORD *)&v63 + 1) = v24;
      *(_QWORD *)(a5 + 72) = v20[3];
      if (a11 <= 0x3E)
      {
        v25 = *((unsigned __int16 *)v20 + 8);
        v26 = -1431655765 * ((*((_DWORD *)v20 + 24) - *((_DWORD *)v20 + 22)) >> 4);
        v27 = *(_QWORD *)(a5 + 48);
        GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a5, v27);
        v29 = (unsigned __int16)v26;
        if ((_WORD)v26)
        {
          v30 = GlyphID;
          v31 = 0;
          v32 = 0;
          v33 = 48 * v29;
          do
          {
            *(_QWORD *)(a5 + 48) = v27;
            v34 = v20[11];
            if (0xAAAAAAAAAAAAAAABLL * ((v20[12] - v34) >> 4) <= v32)
              break;
            v35 = v34 + v31;
            v36 = *(uint64_t (**)(_QWORD *, uint64_t))(v34 + v31 + 24);
            v37 = *(_QWORD *)(v35 + 32);
            v38 = (_QWORD *)(v35 + (v37 >> 1) + 8);
            if ((v37 & 1) != 0)
              v36 = *(uint64_t (**)(_QWORD *, uint64_t))(*v38 + v36);
            v39 = v36(v38, v30);
            if (v39)
            {
              v40 = v20[11];
              if (0xAAAAAAAAAAAAAAABLL * ((v20[12] - v40) >> 4) <= v32)
                LODWORD(v41) = 0;
              else
                v41 = *(_QWORD *)(v40 + v31);
              if ((OTL::GSUB::ApplyLookupSubtable((int)a1, (int)v20, v25, v41, (TGlyphIterator *)a5, v39, 0, (int)&v59, (uint64_t)&v61, a11 + 1) & 1) != 0)
              {
                v53 = 1;
                break;
              }
            }
            ++v32;
            v31 += 48;
          }
          while (v33 != v31);
          v11 = a7;
        }
        v15 = a2;
        v14 = a3;
      }
      if (v59)
      {
        *a9 += v59;
        v42 = &v11[v60];
        v43 = v11;
        if (v60)
        {
          v44 = 8 * v60;
          v43 = v11;
          while (TRunGlue::GetGlyphID(*(TRunGlue **)a5, *v43) != 0xFFFF)
          {
            ++v43;
            v44 -= 8;
            if (!v44)
            {
              v43 = v42;
              goto LABEL_40;
            }
          }
        }
        if (v43 != v42)
        {
          for (i = v43 + 1; i != v42; ++i)
          {
            if (TRunGlue::GetGlyphID(*(TRunGlue **)a5, *i) != 0xFFFF)
              *v43++ = *i;
          }
        }
LABEL_40:
        v60 = v43 - v11;
      }
      v46 = (__int128 *)*((_QWORD *)&v62 + 1);
      if (*((__int128 **)&v62 + 1) == &v61)
      {
        v46 = &v61;
        v47 = 4;
        goto LABEL_45;
      }
      if (*((_QWORD *)&v62 + 1))
      {
        v47 = 5;
LABEL_45:
        (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
      }
LABEL_46:
      v16 = v17;
      if (!--v13)
      {
        a8 = v60;
        goto LABEL_48;
      }
    }
    v22 = v64;
    v23 = 4;
    goto LABEL_11;
  }
  v48 = 0;
LABEL_50:
  v49 = a6;
  if (a8)
    v49 = v11[a8 - 1];
  *(_QWORD *)(a5 + 48) = v49;
  *(_QWORD *)(a5 + 72) = v51;
  return v48 & 1;
}

uint64_t OTL::GSUB::ApplyContextSubstFormat1(_QWORD *a1, ContextSubstFormat1 *this, uint64_t a3, int a4, _WORD *a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  char *v8;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v21;
  __int128 v22;
  uint64_t result;
  _WORD *v24;
  uint64_t v25;
  int GlyphID;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  BOOL v41;
  unint64_t v42;
  unsigned __int16 *v43;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _OWORD v55[31];
  unint64_t v56;

  v7 = a1[5];
  v8 = (char *)this + 6;
  if ((unint64_t)this + 4 < a1[4] || (unint64_t)v8 > v7)
    return 0;
  v11 = bswap32(*((unsigned __int16 *)this + 2)) >> 16;
  v12 = &v8[2 * v11];
  v13 = (unint64_t)this + 8 <= v7 ? (v7 - (unint64_t)v8) >> 1 : 0;
  v14 = (unint64_t)v12 <= v7 && v12 >= v8;
  if (!v14 && v13 != v11)
    return 0;
  v21 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55[29] = v22;
  v55[30] = v22;
  v55[27] = v22;
  v55[28] = v22;
  v55[25] = v22;
  v55[26] = v22;
  v55[23] = v22;
  v55[24] = v22;
  v55[21] = v22;
  v55[22] = v22;
  v55[19] = v22;
  v55[20] = v22;
  v55[17] = v22;
  v55[18] = v22;
  v55[16] = v22;
  v56 = 0xAAAAAAAAAAAAAAAALL;
  v55[15] = v22;
  v55[14] = v22;
  v55[13] = v22;
  v55[12] = v22;
  v55[11] = v22;
  v55[10] = v22;
  v55[9] = v22;
  v55[8] = v22;
  v55[6] = v22;
  v55[7] = v22;
  v55[4] = v22;
  v55[5] = v22;
  v55[2] = v22;
  v55[3] = v22;
  v55[0] = v22;
  v55[1] = v22;
  v54 = v21;
  result = (uint64_t)ContextSubstFormat1::NthSubRuleSet(this, a4 - 1, v7);
  if (result)
  {
    v24 = (_WORD *)result;
    if (TGlyphIterator::Next((TGlyphIterator *)a3, 1))
    {
      v25 = *(_QWORD *)(a3 + 48);
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v25);
      v27 = v25;
    }
    else
    {
      GlyphID = 0xFFFF;
      v27 = v21;
    }
    v28 = (unint64_t)(v24 + 1);
    v53 = (uint64_t *)a3;
    v48 = a5;
    v49 = a6;
    v46 = a7;
    v47 = a1;
    if (v24 + 1 < (_WORD *)this
      || (v29 = __rev16((unsigned __int16)*v24), v30 = v28 + 2 * v29, v30 < v28)
      || v30 > v7)
    {
      v31 = (unint64_t)(v24 + 2) <= v7 && v28 >= (unint64_t)this;
      v29 = (v7 - v28) >> 1;
      if (!v31)
        v29 = 0;
      if (!(bswap32(v29) >> 16))
        goto LABEL_65;
    }
    else if (!*v24)
    {
LABEL_65:
      result = 0;
      v53[6] = v21;
      return result;
    }
    v32 = 0;
    if ((v29 & 0xFFFE) != 0)
      v33 = (unsigned __int16)v29;
    else
      v33 = 1;
    v52 = v21;
    v51 = GlyphID;
    v50 = v33;
    while (1)
    {
      if (v32 < bswap32((unsigned __int16)*v24) >> 16)
      {
        v34 = (_WORD *)((char *)v24 + (bswap32((unsigned __int16)v24[v32 + 1]) >> 16));
        v35 = v34 + 2;
        if ((unint64_t)(v34 + 2) <= v7)
        {
          if (*v34)
          {
            v36 = __rev16(*v34);
            if (v36 <= 0x40)
            {
              v37 = (v36 - 1);
              v38 = &v35[v37];
              if (v35 < (unsigned __int16 *)this || v38 < v35 || (unint64_t)v38 > v7)
              {
                v41 = (unint64_t)(v34 + 3) <= v7 && v35 >= (unsigned __int16 *)this;
                v42 = (v7 - (unint64_t)v35) >> 1;
                if (!v41)
                  v42 = 0;
                if (v42 != v37)
                  goto LABEL_65;
              }
              v43 = &v35[v36 - 1];
              if (v35 != v43 && v27 != v21 && GlyphID == bswap32(*v35) >> 16)
              {
                *(_QWORD *)&v55[0] = v27;
                v35 = v34 + 3;
                if (v34 + 3 != v43)
                {
                  v45 = v27;
                  if (TGlyphIterator::Next((TGlyphIterator *)v53, 1))
                  {
                    v35 = EqualSequenceAndNote<BigEndianScalar<unsigned short>>(v34 + 3, v43, v53, (_QWORD *)v55 + 1);
                    v27 = v45;
                    v53[6] = v45;
                    v21 = v52;
                  }
                  else
                  {
                    v21 = v52;
                    v27 = v45;
                  }
                  GlyphID = v51;
                  v33 = v50;
                }
              }
              if (v35 == v43)
                break;
            }
          }
        }
      }
      if (v33 == ++v32)
        goto LABEL_65;
    }
    if (OTL::GSUB::ApplySubstLookupRecords(v47, (unint64_t)this, v43, bswap32(v34[1]) >> 16, (uint64_t)v53, v21, &v54, v36, v48, v49, v46))TGlyphIterator::ClearSafeToBreakAfter(v53, &v54, v36);
    return 1;
  }
  return result;
}

uint64_t OTL::GSUB::WouldSubstituteContext1(_QWORD *a1, ContextSubstFormat1 *this, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  char *v6;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t result;
  unsigned __int16 *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int16 *v32;
  BOOL v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;

  v5 = a1[5];
  v6 = (char *)this + 6;
  if ((unint64_t)this + 4 < a1[4] || (unint64_t)v6 > v5)
    return 0;
  v9 = bswap32(*((unsigned __int16 *)this + 2)) >> 16;
  v10 = &v6[2 * v9];
  v11 = (unint64_t)this + 8 <= v5 ? (v5 - (unint64_t)v6) >> 1 : 0;
  v12 = (unint64_t)v10 <= v5 && v10 >= v6;
  if (!v12 && v11 != v9)
    return 0;
  result = (uint64_t)ContextSubstFormat1::NthSubRuleSet(this, a3 - 1, v5);
  if (!result)
    return result;
  v18 = (unsigned __int16 *)result;
  v19 = result + 2;
  if (result + 2 < (unint64_t)this
    || ((v20 = __rev16(*(unsigned __int16 *)result), v21 = v19 + 2 * v20, v21 >= v19) ? (v22 = v21 > v5) : (v22 = 1),
        v22))
  {
    v23 = result + 4 <= v5 && v19 >= (unint64_t)this;
    v20 = (v5 - v19) >> 1;
    if (!v23)
      v20 = 0;
    if (!(bswap32(v20) >> 16))
      return 0;
LABEL_30:
    v24 = 0;
    if ((v20 & 0xFFFE) != 0)
      v25 = (unsigned __int16)v20;
    else
      v25 = 1;
    while (1)
    {
      if (v24 < bswap32(*v18) >> 16)
      {
        v26 = bswap32(v18[v24 + 1]) >> 16;
        v27 = (unsigned __int16 *)((char *)v18 + v26);
        v28 = (unsigned __int16 *)((char *)v18 + v26 + 4);
        if ((unint64_t)v28 <= v5)
        {
          v29 = __rev16(*v27);
          if (*v27 && v29 <= a5)
          {
            v31 = (v29 - 1);
            v32 = &v28[v31];
            if (v28 < (unsigned __int16 *)this || v32 < v28 || (unint64_t)v32 > v5)
            {
              v35 = (unint64_t)(v27 + 3) <= v5 && v28 >= (unsigned __int16 *)this;
              v36 = (v5 - (unint64_t)v28) >> 1;
              if (!v35)
                v36 = 0;
              if (v36 != v31)
                return 0;
            }
            if (v29 < 2)
            {
LABEL_58:
              if ((OTL::GSUB::WouldSubstituteLookupRecords(a1, (unint64_t)this, v28, bswap32(v27[1]) >> 16, a4, a5) & 1) != 0)return 1;
            }
            else
            {
              v37 = (unsigned __int16 *)(v19 + v26 + 2 * v29);
              v38 = v29 - 1;
              v39 = (unsigned __int16 *)(a4 + 2);
              while (1)
              {
                v40 = *v39++;
                if (v40 != bswap32(*v28) >> 16)
                  break;
                ++v28;
                if (!--v38)
                {
                  v28 = v37;
                  goto LABEL_58;
                }
              }
            }
          }
        }
      }
      if (++v24 == v25)
        return 0;
    }
  }
  if (*(_WORD *)result)
    goto LABEL_30;
  return 0;
}

uint64_t OTL::GSUB::WouldSubstituteLookupRecords(_QWORD *a1, unint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, unsigned int a6)
{
  int v8;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int (**v19)(_QWORD *, _QWORD);
  uint64_t *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  uint64_t v25;
  ChainContextSubstFormat1 *v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;

  if (!a4 || (unint64_t)a3 < a2)
    return 0;
  v8 = a4;
  do
  {
    v10 = a3 + 2;
    if ((unint64_t)(a3 + 2) > a1[5])
      break;
    v11 = bswap32(*a3);
    if (a6 > HIWORD(v11))
    {
      v12 = TBaseFont::NthLookup<OTL::GSUB>(*(_QWORD *)(a1[2] + 400), a1, bswap32(a3[1]) >> 16);
      if (v12)
      {
        v13 = v12;
        v29 = (unsigned __int16)(-21845 * ((*((_DWORD *)v12 + 24) - *((_DWORD *)v12 + 22)) >> 4));
        if (-21845 * (unsigned __int16)((*((_DWORD *)v12 + 24) - *((_DWORD *)v12 + 22)) >> 4))
        {
          v14 = 0;
          v30 = a6 - HIWORD(v11);
          v31 = (unsigned __int16 *)(a5 + 2 * HIWORD(v11));
          v28 = a6;
          while (2)
          {
            v15 = v13[11];
            v16 = 0xAAAAAAAAAAAAAAABLL * ((v13[12] - v15) >> 4);
            v17 = v16 <= v14 ? 0 : v15 + 48 * v14 + 8;
            if (v16 > v14)
            {
              v18 = v15 + 48 * v14;
              v19 = (unsigned int (**)(_QWORD *, _QWORD))(v18 + 24);
              v20 = (uint64_t *)(v18 + 32);
              v22 = v30;
              v21 = v31;
              do
              {
                v23 = *v19;
                v24 = (_QWORD *)(v17 + (*v20 >> 1));
                if ((*v20 & 1) != 0)
                  v23 = *(unsigned int (**)(_QWORD *, _QWORD))(*v24 + v23);
                if (v23(v24, *v21))
                {
                  v25 = v13[11];
                  v26 = 0xAAAAAAAAAAAAAAABLL * ((v13[12] - v25) >> 4) <= v14
                      ? 0
                      : *(ChainContextSubstFormat1 **)(v25 + 48 * v14);
                  if ((OTL::GSUB::WouldSubstituteSubtable((int)a1, (int)v13, *((unsigned __int16 *)v13 + 8), v26) & 1) != 0)
                    return 1;
                }
                ++v21;
                --v22;
              }
              while (v22);
              ++v14;
              a6 = v28;
              if (v14 != v29)
                continue;
            }
            break;
          }
        }
      }
    }
    a3 = v10;
    --v8;
  }
  while (v8);
  return 0;
}

unsigned __int16 *ContextSubstFormat2::NthSubClassSet(ContextSubstFormat2 *this, unsigned int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 >= bswap32(*((unsigned __int16 *)this + 3)) >> 16)
    return 0;
  if (!*((_WORD *)this + a2 + 4))
    return 0;
  v3 = (unsigned __int16 *)((char *)this + __rev16(*((unsigned __int16 *)this + a2 + 4)));
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > a3)
    return 0;
  v6 = bswap32(*v3) >> 16;
  v7 = (unint64_t)&v4[v6];
  if ((unint64_t)(v3 + 2) <= a3)
    v8 = (a3 - (unint64_t)v4) >> 1;
  else
    v8 = 0;
  if (v7 >= (unint64_t)v4 && v7 <= a3 || v8 == v6)
    return v3;
  else
    return 0;
}

unsigned __int16 *OTL::GSUB::ApplyContextSubstFormat2(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  unsigned int GlyphID;
  unint64_t v14;
  unsigned __int16 *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *result;
  char *v27;
  __int128 v28;
  unsigned int v29;
  _WORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  BOOL v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  _QWORD *v55;
  _WORD *v56;
  uint64_t v57;
  OTL::ClassDefTable *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  TGlyphIterator *v62;
  uint64_t v63;
  _OWORD v64[31];
  unint64_t v65;

  v12 = *(_QWORD *)(a3 + 48);
  GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v12);
  v14 = a1[5];
  v15 = a2 + 4;
  if ((unint64_t)(a2 + 3) < a1[4] || (unint64_t)v15 > v14)
    return 0;
  v17 = bswap32(a2[3]) >> 16;
  v18 = (unint64_t)&v15[v17];
  v19 = (unint64_t)(a2 + 5) <= v14 ? (v14 - (unint64_t)v15) >> 1 : 0;
  v20 = v18 <= v14 && v18 >= (unint64_t)v15;
  if (!v20 && v19 != v17)
    return 0;
  v22 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[2]) >> 16));
  if ((unint64_t)(v22 + 1) > v14)
    return 0;
  v23 = GlyphID;
  v24 = bswap32(*v22) >> 16;
  if (v24 == 2)
  {
    v25 = 6 * (bswap32(v22[1]) >> 16) + 4;
  }
  else if (v24 == 1)
  {
    v25 = 2 * (bswap32(v22[2]) >> 16) + 6;
  }
  else
  {
    v25 = 0;
  }
  result = 0;
  v27 = (char *)v22 + v25;
  if (v27 >= (char *)v22 && (unint64_t)v27 <= v14)
  {
    *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v64[29] = v28;
    v64[30] = v28;
    v64[27] = v28;
    v64[28] = v28;
    v64[25] = v28;
    v64[26] = v28;
    v64[23] = v28;
    v64[24] = v28;
    v64[21] = v28;
    v64[22] = v28;
    v64[19] = v28;
    v64[20] = v28;
    v64[17] = v28;
    v64[18] = v28;
    v64[16] = v28;
    v65 = 0xAAAAAAAAAAAAAAAALL;
    v64[15] = v28;
    v64[14] = v28;
    v64[13] = v28;
    v64[12] = v28;
    v64[11] = v28;
    v64[10] = v28;
    v64[9] = v28;
    v64[8] = v28;
    v64[6] = v28;
    v64[7] = v28;
    v64[4] = v28;
    v64[5] = v28;
    v64[2] = v28;
    v64[3] = v28;
    v64[0] = v28;
    v64[1] = v28;
    v63 = v12;
    v29 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v22, v23);
    result = ContextSubstFormat2::NthSubClassSet((ContextSubstFormat2 *)a2, v29, v14);
    if (result)
    {
      v30 = result;
      v31 = TGlyphIterator::Next((TGlyphIterator *)a3, 1);
      v56 = a4;
      if (v31)
      {
        v32 = a5;
        v33 = a6;
        v34 = *(_QWORD *)(a3 + 48);
        v35 = TRunGlue::GetGlyphID(*(TRunGlue **)a3, v34);
        v31 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v22, v35);
        v36 = v34;
        a6 = v33;
        a5 = v32;
      }
      else
      {
        v36 = v12;
      }
      v37 = v30 + 1;
      v62 = (TGlyphIterator *)a3;
      v57 = a5;
      v58 = (OTL::ClassDefTable *)v22;
      v54 = a6;
      v55 = a1;
      if (v30 + 1 < a2
        || (v38 = __rev16((unsigned __int16)*v30), v39 = (unint64_t)&v37[v38], v39 < (unint64_t)v37)
        || v39 > v14)
      {
        v40 = (unint64_t)(v30 + 2) <= v14 && v37 >= a2;
        v38 = (v14 - (_DWORD)v37) >> 1;
        if (!v40)
          v38 = 0;
        if (!(bswap32(v38) >> 16))
          goto LABEL_74;
      }
      else if (!*v30)
      {
LABEL_74:
        result = 0;
        *((_QWORD *)v62 + 6) = v12;
        return result;
      }
      v41 = 0;
      if ((v38 & 0xFFFE) != 0)
        v42 = (unsigned __int16)v38;
      else
        v42 = 1;
      v60 = v36;
      v61 = v12;
      v59 = v31;
      while (1)
      {
        if (v41 < bswap32((unsigned __int16)*v30) >> 16)
        {
          v43 = (_WORD *)((char *)v30 + __rev16((unsigned __int16)v30[v41 + 1]));
          v44 = v43 + 2;
          if (v30[v41 + 1] && (unint64_t)v44 <= v14)
          {
            if (*v43)
            {
              v46 = __rev16(*v43);
              if (v46 <= 0x40)
              {
                v47 = (v46 - 1);
                v48 = &v44[v47];
                if (v44 < a2 || v48 < v44 || (unint64_t)v48 > v14)
                {
                  v51 = (unint64_t)(v43 + 3) <= v14 && v44 >= a2;
                  v52 = (v14 - (unint64_t)v44) >> 1;
                  if (!v51)
                    v52 = 0;
                  if (v52 != v47)
                    goto LABEL_74;
                }
                v53 = &v44[v46 - 1];
                if (v36 != v12 && v44 != v53 && v31 == bswap32(*v44) >> 16)
                {
                  *(_QWORD *)&v64[0] = v36;
                  v44 = v43 + 3;
                  if (v43 + 3 != v53)
                  {
                    if (TGlyphIterator::Next(v62, 1))
                    {
                      v44 = EqualClassSequenceAndNote<BigEndianScalar<unsigned short>>(v58, v43 + 3, v53, (uint64_t)v62, (_QWORD *)v64 + 1);
                      v36 = v60;
                      *((_QWORD *)v62 + 6) = v60;
                    }
                    else
                    {
                      v36 = v60;
                    }
                    v12 = v61;
                    v31 = v59;
                  }
                }
                if (v44 == v53)
                  break;
              }
            }
          }
        }
        if (v42 == ++v41)
          goto LABEL_74;
      }
      if (OTL::GSUB::ApplySubstLookupRecords(v55, (unint64_t)a2, v53, bswap32(v43[1]) >> 16, (uint64_t)v62, v12, &v63, v46, v56, v57, v54))TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)v62, &v63, v46);
      return (unsigned __int16 *)1;
    }
  }
  return result;
}

unsigned __int16 *EqualClassSequenceAndNote<BigEndianScalar<unsigned short>>(OTL::ClassDefTable *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int16 *v5;
  unsigned int GlyphID;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      GlyphID = TRunGlue::GetGlyphID(*(TRunGlue **)a4, *(_QWORD *)(a4 + 48));
      if (OTL::ClassDefTable::ClassOf(a1, GlyphID) != bswap32(*v5) >> 16)
        break;
      *a5 = *(_QWORD *)(a4 + 48);
      if (++v5 == a3)
        return a3;
      ++a5;
    }
    while ((TGlyphIterator::Next((TGlyphIterator *)a4, 1) & 1) != 0);
  }
  return v5;
}

uint64_t OTL::GSUB::WouldSubstituteContext2(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned int a4)
{
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v32;
  uint64_t v34;
  unsigned __int16 *v35;
  BOOL v38;
  unint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;

  v4 = a1[5];
  v5 = a2 + 4;
  if ((unint64_t)(a2 + 3) < a1[4] || (unint64_t)v5 > v4)
    return 0;
  v8 = bswap32(a2[3]) >> 16;
  v9 = (unint64_t)&v5[v8];
  v10 = (unint64_t)(a2 + 5) <= v4 ? (v4 - (unint64_t)v5) >> 1 : 0;
  v11 = v9 <= v4 && v9 >= (unint64_t)v5;
  v12 = v11 || v10 == v8;
  if (!v12)
    return 0;
  v13 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[2]) >> 16));
  if ((unint64_t)(v13 + 1) > v4)
    return 0;
  v14 = bswap32(*v13) >> 16;
  if (v14 == 2)
  {
    v15 = 6 * (bswap32(v13[1]) >> 16) + 4;
  }
  else if (v14 == 1)
  {
    v15 = 2 * (bswap32(v13[2]) >> 16) + 6;
  }
  else
  {
    v15 = 0;
  }
  result = 0;
  v17 = (char *)v13 + v15;
  if (v17 >= (char *)v13 && (unint64_t)v17 <= v4)
  {
    v18 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v13, *a3);
    result = (uint64_t)ContextSubstFormat2::NthSubClassSet((ContextSubstFormat2 *)a2, v18, v4);
    if (result)
    {
      v19 = (unsigned __int16 *)result;
      v20 = (unsigned __int16 *)(result + 2);
      if (result + 2 < (unint64_t)a2
        || ((v21 = __rev16(*(unsigned __int16 *)result), v22 = (unint64_t)&v20[v21], v22 >= (unint64_t)v20)
          ? (v23 = v22 > v4)
          : (v23 = 1),
            v23))
      {
        v24 = result + 4 <= v4 && v20 >= a2;
        v21 = (v4 - (_DWORD)v20) >> 1;
        if (!v24)
          v21 = 0;
        if (!(bswap32(v21) >> 16))
          return 0;
      }
      else if (!*(_WORD *)result)
      {
        return 0;
      }
      v25 = 0;
      if ((v21 & 0xFFFE) != 0)
        v26 = (unsigned __int16)v21;
      else
        v26 = 1;
      v43 = (unsigned __int16 *)(result + 2);
      while (1)
      {
        if (v25 < bswap32(*v19) >> 16)
        {
          v27 = v19[v25 + 1];
          v12 = v27 == 0;
          v28 = __rev16(v27);
          v29 = (unsigned __int16 *)((char *)v19 + v28);
          v30 = (unsigned __int16 *)((char *)v19 + v28 + 4);
          if (!v12 && (unint64_t)v30 <= v4)
          {
            v32 = __rev16(*v29);
            if (*v29 && v32 <= a4)
            {
              v34 = (v32 - 1);
              v35 = &v30[v34];
              if (v30 < a2 || v35 < v30 || (unint64_t)v35 > v4)
              {
                v38 = (unint64_t)(v29 + 3) <= v4 && v30 >= a2;
                v39 = (v4 - (unint64_t)v30) >> 1;
                if (!v38)
                  v39 = 0;
                if (v39 != v34)
                  return 0;
              }
              if (v32 < 2)
              {
LABEL_70:
                if ((OTL::GSUB::WouldSubstituteLookupRecords(a1, (unint64_t)a2, v30, bswap32(v29[1]) >> 16, (uint64_t)a3, a4) & 1) != 0)return 1;
              }
              else
              {
                v40 = a3 + 1;
                v44 = (unsigned __int16 *)((char *)&v43[v32] + v28);
                v41 = v32 - 1;
                while (1)
                {
                  v42 = *v40++;
                  if (OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v13, v42) != bswap32(*v30) >> 16)
                    break;
                  ++v30;
                  if (!--v41)
                  {
                    v30 = v44;
                    goto LABEL_70;
                  }
                }
              }
            }
          }
        }
        if (++v25 == v26)
          return 0;
      }
    }
  }
  return result;
}

uint64_t OTL::GSUB::ApplyContextSubstFormat3(_QWORD *a1, unint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[31];
  unint64_t v24;

  v7 = a1[5];
  v8 = a2 + 6;
  v9 = a1[4] > a2 || v8 > v7;
  if (v9 || !*(_WORD *)(a2 + 2))
    return 0;
  v15 = *(_QWORD *)(a3 + 48);
  v16 = __rev16(*(unsigned __int16 *)(a2 + 2));
  v17 = v16 - 1;
  if (v16 != 1)
  {
    v18 = *(_QWORD *)(a3 + 24);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v15 - v17 <= v18)
        return 0;
    }
    else if (v15 + v17 >= v18)
    {
      return 0;
    }
  }
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[29] = v19;
  v23[30] = v19;
  v23[27] = v19;
  v23[28] = v19;
  v23[25] = v19;
  v23[26] = v19;
  v23[23] = v19;
  v23[24] = v19;
  v23[21] = v19;
  v23[22] = v19;
  v23[19] = v19;
  v23[20] = v19;
  v23[17] = v19;
  v23[18] = v19;
  v23[16] = v19;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v23[15] = v19;
  v23[14] = v19;
  v23[13] = v19;
  v23[12] = v19;
  v23[11] = v19;
  v23[10] = v19;
  v23[9] = v19;
  v23[8] = v19;
  v23[6] = v19;
  v23[7] = v19;
  v23[4] = v19;
  v23[5] = v19;
  v23[2] = v19;
  v23[3] = v19;
  v23[0] = v19;
  v23[1] = v19;
  v22 = v15;
  if (v16 >= 2)
  {
    if (v16 <= 0x40)
    {
      result = TGlyphIterator::MatchCoverSequenceAndNote(a3, v17, a2 + 8, (uint64_t)v23, a2, v7);
      if (!(_DWORD)result)
        return result;
      v21 = result + 1;
      goto LABEL_16;
    }
    return 0;
  }
  v21 = 1;
LABEL_16:
  if (OTL::GSUB::ApplySubstLookupRecords(a1, a2, (unsigned __int16 *)(v8 + 2 * v16), bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, a3, v15, &v22, v21, a4, a5, a6))TGlyphIterator::ClearSafeToBreakAfter((CFIndex *)a3, &v22, v21);
  return 1;
}

uint64_t OTL::GSUB::WouldSubstituteContext3(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t result;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;

  v4 = a1[5];
  if (a1[4] > a2 || a2 + 6 > v4)
    return 0;
  v8 = __rev16(*(unsigned __int16 *)(a2 + 2));
  if (!*(_WORD *)(a2 + 2) || v8 > a4)
    return 0;
  v13 = (unsigned __int16 *)(a2 + 8);
  if (v8 < 2)
    return OTL::GSUB::WouldSubstituteLookupRecords(a1, a2, v13, bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, a3, a4);
  v14 = (v8 - 1);
  v15 = &v13[v14];
  if (a2 + 10 <= v4)
    v16 = (v4 - (unint64_t)v13) >> 1;
  else
    v16 = 0;
  if (((unint64_t)v15 > v4 || v15 < v13) && v16 != v14)
    return 0;
  v19 = (unsigned __int16 *)(a3 + 2);
  v20 = v8 - 1;
  while (1)
  {
    v21 = *v13++;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v26 = v22;
    v27 = v22;
    OTL::Coverage::Coverage((OTL::Coverage *)&v26, (unsigned __int16 *)(a2 + (bswap32(v21) >> 16)), v4, 1);
    v23 = (uint64_t (*)(_QWORD *, _QWORD))v27;
    v24 = (_QWORD *)((char *)&v26 + (*((uint64_t *)&v27 + 1) >> 1));
    if ((BYTE8(v27) & 1) != 0)
      v23 = *(uint64_t (**)(_QWORD *, _QWORD))(*v24 + v27);
    v25 = *v19++;
    result = v23(v24, v25);
    if (!(_DWORD)result)
      break;
    if (!--v20)
      return OTL::GSUB::WouldSubstituteLookupRecords(a1, a2, v13, bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, a3, a4);
  }
  return result;
}

uint64_t OTL::GSUB::WouldSubstituteChainContext1(_QWORD *a1, ChainContextSubstFormat1 *this, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  char v15;
  unsigned __int16 *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned __int16 *v41;

  v5 = a1[5];
  v6 = (char *)this + 6;
  if ((unint64_t)this + 4 < a1[4] || (unint64_t)v6 > v5)
    return 0;
  result = 0;
  v11 = __rev16(*((unsigned __int16 *)this + 2));
  v12 = __CFADD__(v6, 2 * v11);
  v13 = (unint64_t)&v6[2 * v11] > v5 || v12;
  v14 = (v5 - (unint64_t)v6) >> 1;
  if ((unint64_t)this + 8 > v5)
    v14 = 0;
  if (v14 == v11)
    v15 = 0;
  else
    v15 = v13;
  if ((v15 & 1) == 0)
  {
    if (*((_WORD *)this + 2))
    {
      result = (uint64_t)ChainContextSubstFormat1::NthChainSubRuleSet(this, a3 - 1, v5);
      if (result)
      {
        v18 = (unsigned __int16 *)result;
        v19 = result + 2;
        if (result + 2 < (unint64_t)this
          || ((v20 = __rev16(*(unsigned __int16 *)result), v21 = v19 + 2 * v20, v21 >= v19)
            ? (v22 = v21 > v5)
            : (v22 = 1),
              v22))
        {
          v23 = result + 4 <= v5 && v19 >= (unint64_t)this;
          v20 = (v5 - v19) >> 1;
          if (!v23)
            v20 = 0;
          if (!(bswap32(v20) >> 16))
            return 0;
        }
        else if (!*(_WORD *)result)
        {
          return 0;
        }
        v24 = 0;
        if ((v20 & 0xFFFE) != 0)
          v25 = (unsigned __int16)v20;
        else
          v25 = 1;
        while (1)
        {
          if (v24 < bswap32(*v18) >> 16)
          {
            v26 = v18[v24 + 1];
            v27 = v26 == 0;
            v28 = __rev16(v26);
            v29 = (unsigned __int16 *)((char *)v18 + v28);
            if (!v27 && (unint64_t)v29 <= v5)
            {
              v31 = bswap32(*v29) >> 16;
              v32 = &v29[v31];
              v33 = v32 + 1;
              v34 = v32 + 2;
              if (v33 < (unsigned __int16 *)this || (unint64_t)v34 > v5)
                return 0;
              v36 = bswap32(*v33) >> 16;
              if (v36 <= a5)
              {
                if (v36 >= 2)
                {
                  v37 = 0;
                  v38 = 2 * v36 - 2;
                  v39 = (char *)&v18[v31] + v28;
                  do
                  {
                    if (v34 < (unsigned __int16 *)this || (unint64_t)&v39[v37 + 6] > v5)
                      break;
                    if (*(unsigned __int16 *)(a4 + 2 + v37) != bswap32(*(unsigned __int16 *)&v39[v37 + 4]) >> 16)
                      goto LABEL_58;
                    v37 += 2;
                  }
                  while (v38 != v37);
                  v34 = (unsigned __int16 *)((char *)&v18[v31 + 2] + v28 + v37);
                }
                if (v34 < (unsigned __int16 *)this || (unint64_t)(v34 + 1) > v5)
                  return 0;
                v41 = &v34[bswap32(*v34) >> 16];
                if ((unint64_t)(v41 + 2) > v5)
                  return 0;
                if ((OTL::GSUB::WouldSubstituteLookupRecords(a1, (unint64_t)this, v41 + 2, bswap32(v41[1]) >> 16, a4, a5) & 1) != 0)return 1;
              }
            }
          }
LABEL_58:
          if (++v24 == v25)
            return 0;
        }
      }
    }
  }
  return result;
}

unsigned __int16 *OTL::GSUB::WouldSubstituteChainContext2(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned int a4)
{
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *result;
  uint64_t v9;
  BOOL v10;
  char v11;
  unint64_t v12;
  char v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  unsigned __int16 *v42;
  char WouldSubstituteLookupRecords;
  uint64_t v47;
  OTL::ClassDefTable *v48;
  unint64_t v49;

  v4 = a1[5];
  v5 = a2 + 6;
  if ((unint64_t)(a2 + 5) < a1[4] || (unint64_t)v5 > v4)
    return 0;
  result = 0;
  v9 = __rev16(a2[5]);
  v10 = __CFADD__(v5, 2 * v9);
  v11 = (unint64_t)&v5[v9] > v4 || v10;
  v12 = (v4 - (unint64_t)v5) >> 1;
  if ((unint64_t)(a2 + 7) > v4)
    v12 = 0;
  if (v12 == v9)
    v13 = 0;
  else
    v13 = v11;
  if ((v13 & 1) == 0 && a2[5])
  {
    v14 = (unsigned __int16 *)((char *)a2 + (bswap32(a2[3]) >> 16));
    if ((unint64_t)(v14 + 1) > v4)
      return 0;
    v15 = bswap32(*v14) >> 16;
    if (v15 == 2)
    {
      v16 = 6 * (bswap32(v14[1]) >> 16) + 4;
    }
    else if (v15 == 1)
    {
      v16 = 2 * (bswap32(v14[2]) >> 16) + 6;
    }
    else
    {
      v16 = 0;
    }
    result = 0;
    v17 = (char *)v14 + v16;
    if (v17 >= (char *)v14 && (unint64_t)v17 <= v4)
    {
      v18 = OTL::ClassDefTable::ClassOf((OTL::ClassDefTable *)v14, *a3);
      v49 = v4;
      result = ChainContextSubstFormat2::NthChainSubClassSet((ChainContextSubstFormat2 *)a2, v18, v4);
      if (result)
      {
        v19 = result + 1;
        v20 = v4;
        if (result + 1 < a2
          || ((LODWORD(v21) = __rev16(*result),
               v22 = (unint64_t)&v19[v21],
               v22 >= (unint64_t)v19)
            ? (v23 = v22 > v4)
            : (v23 = 1),
              v23))
        {
          v24 = (unint64_t)(result + 2) <= v4 && v19 >= a2;
          LODWORD(v21) = (v4 - (_DWORD)v19) >> 1;
          if (!v24)
            LODWORD(v21) = 0;
          if (!(bswap32(v21) >> 16))
            return 0;
        }
        else if (!*result)
        {
          return 0;
        }
        v25 = 0;
        if ((v21 & 0xFFFE) != 0)
          v21 = (unsigned __int16)v21;
        else
          v21 = 1;
        v47 = v21;
        v48 = (OTL::ClassDefTable *)v14;
        while (1)
        {
          v26 = result;
          if (v25 < bswap32(*result) >> 16)
          {
            v27 = result[v25 + 1];
            v28 = v27 == 0;
            v29 = __rev16(v27);
            v30 = (unsigned __int16 *)((char *)result + v29);
            if (!v28 && (unint64_t)v30 <= v20)
            {
              v32 = bswap32(*v30) >> 16;
              v33 = &v30[v32];
              v34 = v33 + 2;
              if (v33 + 1 < a2 || (unint64_t)v34 > v20)
                return 0;
              v36 = bswap32(v33[1]) >> 16;
              if (v36 <= a4)
              {
                if (v36 >= 2)
                {
                  v37 = 0;
                  v38 = 2 * v36 - 2;
                  v39 = (char *)&result[v32] + v29;
                  while (v34 >= a2 && (unint64_t)&v39[v37 + 6] <= v20)
                  {
                    v40 = OTL::ClassDefTable::ClassOf(v48, a3[v37 / 2 + 1]);
                    v20 = v49;
                    if (v40 != bswap32(*(unsigned __int16 *)&v39[v37 + 4]) >> 16)
                      goto LABEL_67;
                    v37 += 2;
                    if (v38 == v37)
                    {
                      v34 = (unsigned __int16 *)((char *)&v26[v32 + 2] + v29 + v37);
                      goto LABEL_61;
                    }
                  }
                  v34 = (unsigned __int16 *)((char *)&v26[v32 + 2] + v29 + v37);
                }
LABEL_61:
                if (v34 < a2 || (unint64_t)(v34 + 1) > v20)
                  return 0;
                v42 = &v34[bswap32(*v34) >> 16];
                if ((unint64_t)(v42 + 2) > v20)
                  return 0;
                WouldSubstituteLookupRecords = OTL::GSUB::WouldSubstituteLookupRecords(a1, (unint64_t)a2, v42 + 2, bswap32(v42[1]) >> 16, (uint64_t)a3, a4);
                v20 = v49;
                if ((WouldSubstituteLookupRecords & 1) != 0)
                  return (unsigned __int16 *)1;
              }
            }
          }
LABEL_67:
          ++v25;
          result = v26;
          if (v25 == v47)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t OTL::GSUB::WouldSubstituteChainContext3(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned int (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  unsigned __int16 *v26;
  uint64_t result;
  _QWORD *v28;
  __int128 v31;
  __int128 v32;
  unint64_t v33;

  v4 = a1[5];
  v5 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  v6 = a2 + 2 * v5;
  if (v6 + 6 > v4)
    return 0;
  v7 = a4;
  v8 = v6 + 4;
  v9 = bswap32(*(unsigned __int16 *)(v6 + 4)) >> 16;
  if (v9 > a4)
    return 0;
  v10 = a3;
  v12 = (unsigned __int16 *)(v6 + 8);
  if (v9 < 2)
  {
    LODWORD(v21) = 1;
  }
  else
  {
    v28 = a1;
    v13 = (v9 - 1);
    v14 = &v12[v13];
    if ((unint64_t)v12 < a2 || v14 < v12 || (unint64_t)v14 > v4)
    {
      v17 = v8 + 6 <= v4 && (unint64_t)v12 >= a2;
      v18 = (v4 - (unint64_t)v12) >> 1;
      if (!v17)
        v18 = 0;
      if (v18 != v13)
        return 0;
    }
    v19 = 0;
    v20 = a3 + 2;
    v21 = 1;
    while (1)
    {
      v33 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v31 = v22;
      v32 = v22;
      OTL::Coverage::Coverage((OTL::Coverage *)&v31, (unsigned __int16 *)(a2 + (bswap32(*(unsigned __int16 *)(a2 + 2 * v5 + v19 + 8)) >> 16)), v4, 1);
      v23 = (unsigned int (*)(_QWORD *, _QWORD))v32;
      v24 = (_QWORD *)((char *)&v31 + (*((uint64_t *)&v32 + 1) >> 1));
      if ((BYTE8(v32) & 1) != 0)
        v23 = *(unsigned int (**)(_QWORD *, _QWORD))(*v24 + v32);
      if (!v23(v24, *(unsigned __int16 *)(v20 + v19)))
        break;
      ++v21;
      v19 += 2;
      if (v9 == v21)
      {
        v12 = (unsigned __int16 *)(a2 + 2 * v5 + v19 + 8);
        v7 = a4;
        a1 = v28;
        v10 = a3;
        goto LABEL_27;
      }
    }
    v12 = (unsigned __int16 *)(a2 + 2 * v5 + v19 + 10);
    v7 = a4;
    a1 = v28;
    v10 = a3;
  }
  if ((_DWORD)v21 != (_DWORD)v9)
    return 0;
LABEL_27:
  if ((unint64_t)v12 < a2 || (unint64_t)(v12 + 1) > v4)
    return 0;
  v26 = &v12[bswap32(*v12) >> 16];
  if ((unint64_t)(v26 + 2) > v4)
    return 0;
  result = OTL::GSUB::WouldSubstituteLookupRecords(a1, a2, v26 + 2, bswap32(v26[1]) >> 16, v10, v7);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t OTL::GSUB::ApplyReverseChainSingleSubst(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  CFRange v33;
  CFIndex v34;
  CFIndex v36;
  CFIndex v37;

  v10 = *(_QWORD *)(a3 + 48);
  TRunGlue::GetGlyphID(*(TRunGlue **)a3, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (unsigned __int16 *)(a2 + 6);
  if (a2 + 6 > v11)
    return 0;
  v13 = *(unsigned __int16 *)(a2 + 4);
  v14 = __rev16(v13);
  if (*(_WORD *)(a2 + 4))
  {
    v15 = *(_QWORD *)(a3 + 40);
    v16 = *(_QWORD *)(a3 + 48);
    if (*(int *)(a3 + 8) < 1)
    {
      if (v16 - v14 <= v15)
        return 0;
    }
    else if (v16 + v14 >= v15)
    {
      return 0;
    }
  }
  v17 = &v12[v14];
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) > v11)
    return 0;
  v19 = *v17;
  v20 = __rev16(v19);
  if (!*v17)
    goto LABEL_13;
  v21 = *(_QWORD *)(a3 + 48);
  v22 = *(_QWORD *)(a3 + 32);
  if (*(int *)(a3 + 8) < 1)
  {
    if (v21 + v20 < v22)
      goto LABEL_13;
    return 0;
  }
  if (v21 - v20 <= v22)
    return 0;
LABEL_13:
  v37 = v10;
  if (v13 && !TGlyphIterator::MatchCoverSequence<(MatchDirection)0>(a3, v10, v14, v12, a2, v11, &v37))
    return 0;
  v36 = v10;
  if (v19)
  {
    if (!TGlyphIterator::MatchCoverSequence<(MatchDirection)1>(a3, v10, v20, v18, a2, v11, &v36))
      return 0;
  }
  v23 = &v18[v20];
  v24 = v23 + 1;
  if ((unint64_t)v23 < a2 || (unint64_t)v24 > v11)
    return 0;
  v26 = bswap32(*v23) >> 16;
  if (v26 < a4)
    return 0;
  v27 = (unint64_t)&v24[v26];
  v28 = (unint64_t)v24 >= a2 && v27 >= (unint64_t)v24;
  if (!v28 || v27 > v11)
  {
    v30 = (unint64_t)(v23 + 2) <= v11 && (unint64_t)v24 >= a2;
    v31 = (v11 - (unint64_t)v24) >> 1;
    if (!v30)
      v31 = 0;
    if (v31 != v26)
      return 0;
  }
  TRunGlue::SetGlyphID<true>(*(TRunGlue **)a3, *(_QWORD *)(a3 + 48), bswap32(v24[a4 - 1]) >> 16);
  v32 = 1;
  std::function<void ()(CFRange,long)>::operator()(a5, v10, 1, 1);
  if (*(_QWORD *)(*(_QWORD *)a3 + 152))
  {
    if (v37 >= v36)
      v33.location = v36;
    else
      v33.location = v37;
    if (v37 - v36 >= 0)
      v34 = v37 - v36;
    else
      v34 = v36 - v37;
    v33.length = v34 + 1;
    TRunGlue::ClearSafeToBreakAfter(*(_QWORD *)a3, v33);
    return 1;
  }
  return v32;
}

uint64_t OTL::GSUB::AddCoveredGlyphs(_QWORD *a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  unsigned __int16 *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE *v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  _BOOL8 v28;
  unsigned int v29;
  unsigned __int16 *v30;
  os_unfair_lock_s *v31;
  unsigned __int16 *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _BYTE v35[24];
  _BYTE *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37 = v7;
  v38 = v7;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)&v37, a3);
  v31 = *(os_unfair_lock_s **)(a1[2] + 400);
  os_unfair_lock_lock_with_options();
  v8 = *a2;
  v30 = a2[1];
  if (*a2 == v30)
  {
    v23 = 1;
    goto LABEL_33;
  }
  while (1)
  {
    v32 = v8;
    v9 = TBaseFont::NthLookup<OTL::GSUB>((uint64_t)v31, a1, *v8);
    if (v9)
    {
      v10 = v9;
      v11 = (unsigned __int16)(-21845 * ((*((_DWORD *)v9 + 24) - *((_DWORD *)v9 + 22)) >> 4));
      if (-21845 * (unsigned __int16)((*((_DWORD *)v9 + 24) - *((_DWORD *)v9 + 22)) >> 4))
        break;
    }
LABEL_28:
    v8 = v32 + 2;
    if (v32 + 2 == v30)
    {
      v23 = 1;
      goto LABEL_33;
    }
  }
  v12 = 0;
  v13 = 8;
  while (1)
  {
    v14 = v10[11];
    if (0xAAAAAAAAAAAAAAABLL * ((v10[12] - v14) >> 4) <= v12)
      break;
    if (*((_QWORD *)&v38 + 1))
    {
      if (*((__int128 **)&v38 + 1) == &v37)
      {
        v34 = v33;
        (*(void (**)(__int128 *, _QWORD *))(v37 + 24))(&v37, v33);
        v15 = v34;
      }
      else
      {
        v15 = (_QWORD *)(*(uint64_t (**)(void))(**((_QWORD **)&v38 + 1) + 16))();
        v34 = v15;
      }
    }
    else
    {
      v15 = 0;
      v34 = 0;
    }
    v36 = 0;
    v16 = operator new(0x28uLL);
    v17 = v16;
    *v16 = &off_1E15E0D90;
    if (v15)
    {
      if (v15 == v33)
      {
        v16[4] = v16 + 1;
        (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
      }
      else
      {
        v16[4] = v15;
        v34 = 0;
      }
    }
    else
    {
      v16[4] = 0;
    }
    v36 = v17;
    v18 = OTL::Coverage::Iterate((unsigned __int16 **)(v14 + v13), (uint64_t)v35);
    v19 = v36;
    if (v36 == v35)
    {
      v19 = v35;
      v20 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_21;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_21:
    v21 = v34;
    if (v34 == v33)
    {
      v21 = v33;
      v22 = 4;
    }
    else
    {
      if (!v34)
        goto LABEL_26;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_26:
    if ((v18 & 1) == 0)
      break;
    ++v12;
    v13 += 48;
    if (v11 == v12)
      goto LABEL_28;
  }
  v24 = *(_QWORD *)(a4 + 24);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
    v23 = 0;
LABEL_33:
    os_unfair_lock_unlock(v31 + 89);
    v25 = (__int128 *)*((_QWORD *)&v38 + 1);
    if (*((__int128 **)&v38 + 1) == &v37)
    {
      v26 = 4;
      v25 = &v37;
LABEL_37:
      (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
    }
    else if (*((_QWORD *)&v38 + 1))
    {
      v26 = 5;
      goto LABEL_37;
    }
    return v23;
  }
  else
  {
    v28 = std::__throw_bad_function_call[abi:nn180100]();
    return OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)const::$_1::operator()((_QWORD *)v28, v29);
  }
}

uint64_t OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)const::$_1::operator()(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned __int16 **v4;
  _QWORD *v5;
  _BYTE *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*a1 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a1 + 96) - v3) >> 4) <= a2)
    goto LABEL_20;
  v4 = (unsigned __int16 **)(v3 + 48 * a2 + 8);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v14, a1[2]);
  v5 = operator new(0x28uLL);
  v6 = v5;
  *v5 = &off_1E15E0DD8;
  if (v15)
  {
    if (v15 == v14)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      v5[4] = v15;
      v15 = 0;
    }
  }
  else
  {
    v5[4] = 0;
  }
  v17 = v6;
  v7 = OTL::Coverage::Iterate(v4, (uint64_t)v16);
  v8 = v17;
  if (v17 == v16)
  {
    v9 = 4;
    v8 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_12;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
  if ((v7 & 1) != 0)
    return 1;
LABEL_20:
  v13 = *(_QWORD *)(a1[1] + 24);
  if (!v13)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1848BD054);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  return 0;
}

void OTL::GSUB::~GSUB(OTL::GSUB *this)
{
  JUMPOUT(0x186DC03ACLL);
}

unsigned __int16 *OTL::GSUB::WouldSubstituteSubtable(_QWORD *a1, int a2, int a3, ChainContextSubstFormat1 *this, unsigned int a5, unsigned __int16 *a6, unsigned int a7)
{
  unsigned int v8;
  unsigned int v9;

  switch(a3)
  {
    case 6:
      v8 = bswap32(*(unsigned __int16 *)this) >> 16;
      switch(v8)
      {
        case 3u:
          return (unsigned __int16 *)OTL::GSUB::WouldSubstituteChainContext3(a1, (unint64_t)this, (uint64_t)a6, a7);
        case 2u:
          return OTL::GSUB::WouldSubstituteChainContext2(a1, (unsigned __int16 *)this, a6, a7);
        case 1u:
          return (unsigned __int16 *)OTL::GSUB::WouldSubstituteChainContext1(a1, this, a5, (uint64_t)a6, a7);
        default:
          return 0;
      }
    case 5:
      v9 = bswap32(*(unsigned __int16 *)this) >> 16;
      switch(v9)
      {
        case 3u:
          return (unsigned __int16 *)OTL::GSUB::WouldSubstituteContext3(a1, (unint64_t)this, (uint64_t)a6, a7);
        case 2u:
          return (unsigned __int16 *)OTL::GSUB::WouldSubstituteContext2(a1, (unsigned __int16 *)this, a6, a7);
        case 1u:
          return (unsigned __int16 *)OTL::GSUB::WouldSubstituteContext1(a1, this, a5, (uint64_t)a6, a7);
        default:
          return 0;
      }
    case 4:
      return (unsigned __int16 *)OTL::GSUB::WouldSubstituteLigature((uint64_t)a1, (uint64_t)this, a5, (uint64_t)a6, a7);
    default:
      return 0;
  }
}

_QWORD *std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0DD8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0DD8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E0DD8;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0DD8;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddShapingGlyphsForLookup(OTL::Lookup const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, __int16 *a2, __int16 *a3)
{
  std::function<void ()(unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a3);
  return 1;
}

void std::__function::__func<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1,std::allocator<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1>,void ()(CFRange,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1,std::allocator<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1>,void ()(CFRange,long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DC950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1,std::allocator<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1>,void ()(CFRange,long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DC950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1,std::allocator<OTL::GSUB::ApplySubstLookupRecords(OTL::LookupSubtable const*,OTL::SubstLookupRecord const*,unsigned int,TGlyphIterator &,long,long *,unsigned long,unsigned short *,OTL::SubstitutionState *,unsigned long)::$_1>,void ()(CFRange,long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a3;
  v7 = *(_QWORD **)(a1 + 8);
  v8 = v7[2];
  v9 = (uint64_t *)v7[3];
  v10 = *a3 - v5;
  v11 = *v9;
  if (*(int *)(v7[1] + 8) <= 0)
  {
    if (v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v16 = *(_QWORD *)(v8 + 8 * i);
        if (v16 > v4)
        {
          *(_QWORD *)(v8 + 8 * i) = v16 + v10;
          v11 = *v9;
        }
      }
    }
  }
  else if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = v8 + 8 * v6;
    while (*(_QWORD *)(v8 + v12) != v4)
    {
      ++v13;
      v12 += 8;
      if (v11 == v13)
        return std::function<void ()(CFRange,long)>::operator()(**(_QWORD **)(a1 + 8), v4, v5, v6);
    }
    v17 = v6 - 1;
    v18 = v11 + v6 - 1;
    if (v18 <= 0x40)
    {
      v19 = (_QWORD *)(v8 + v12 + 8);
      if (8 * v11 - 8 != v12)
      {
        v25 = v8 + 8 * v6;
        memmove((void *)(v8 + 8 * v18 - (8 * v11 - v12 - 8)), v19, 8 * v11 - v12 - 8);
        v17 = v6 - 1;
        v18 = v11 + v6 - 1;
        v14 = v25;
      }
      if (v6 >= 2)
      {
        v20 = v4 + 1;
        v21 = v17;
        do
        {
          *v19++ = v20++;
          --v21;
        }
        while (v21);
      }
      *v9 += v17;
      if (v6 != v5 && v6 + v13 < v18)
      {
        v22 = (_QWORD *)(v14 + v12);
        v23 = ~v13 + v11;
        do
        {
          *v22++ += v10;
          --v23;
        }
        while (v23);
      }
    }
  }
  return std::function<void ()(CFRange,long)>::operator()(**(_QWORD **)(a1 + 8), v4, v5, v6);
}

_QWORD *std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0D90;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0D90;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E0D90;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0D90;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<OTL::GSUB::AddCoveredGlyphs(TInlineVector<std::pair<unsigned short,unsigned short>,30ul> const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, __int16 *a2, __int16 *a3)
{
  std::function<void ()(unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a3);
  return 1;
}

uint64_t OTL::GCommon::IterateFeatureTables(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v27;

  if (!a2)
    return 0;
  if (*(_WORD *)(a1 + 6))
  {
    v6 = (unsigned __int16 *)(a1 + __rev16(*(unsigned __int16 *)(a1 + 6)));
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) <= a3)
    {
      v10 = bswap32(*v6) >> 16;
      v11 = (unint64_t)&v7[3 * v10];
      v12 = v11 < (unint64_t)v7 || v11 > a3;
      if (!v12
        || ((unint64_t)(v6 + 4) <= a3 ? (v13 = (a3 - (unint64_t)v7) / 6) : (v13 = 0), v13 == v10))
      {
        if (!*(_WORD *)(a2 + 4))
          return 1;
        v14 = (unsigned __int16 *)(a2 + 6);
        v15 = 2 * __rev16(*(unsigned __int16 *)(a2 + 4)) - 2;
        while (1)
        {
          v16 = bswap32(*v14) >> 16;
          v17 = &v7[3 * v16];
          if ((unint64_t)v17 < a1 || (unint64_t)(v17 + 3) > a3)
            break;
          v19 = (uint64_t)v6 + (bswap32(v6[3 * v16 + 3]) >> 16);
          v20 = v19 + 4;
          if (v19 + 2 < (unint64_t)v6 || v20 > a3)
            break;
          v22 = bswap32(*(unsigned __int16 *)(v19 + 2)) >> 16;
          v23 = v20 + 2 * v22;
          v24 = v19 + 6 <= a3 ? (a3 - v20) >> 1 : 0;
          v25 = v23 <= a3 && v23 >= v20;
          if (!v25 && v24 != v22)
            break;
          result = std::function<BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(a4, bswap32(*(_DWORD *)&v6[3 * v16 + 1]), v19);
          if ((_DWORD)result)
          {
            result = 1;
            ++v14;
            v27 = v15;
            v15 -= 2;
            if (v27)
              continue;
          }
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t OTL::GCommon::IterateLookupIndexes(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;

  if (*(_WORD *)(a1 + 8))
  {
    v4 = (unsigned __int16 *)(a1 + __rev16(*(unsigned __int16 *)(a1 + 8)));
    v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) <= a3)
    {
      v6 = bswap32(*v4) >> 16;
      v7 = (unint64_t)&v5[v6];
      v8 = (unint64_t)(v4 + 2) <= a3 ? (a3 - (unint64_t)v5) >> 1 : 0;
      v9 = v7 <= a3 && v7 >= (unint64_t)v5;
      if (v9 || v8 == v6)
      {
        if (!*(_WORD *)(a2 + 2))
          return 1;
        v12 = (unsigned __int16 *)(a2 + 4);
        v13 = 2 * __rev16(*(unsigned __int16 *)(a2 + 2)) - 2;
        while (1)
        {
          v14 = bswap32(*v12) >> 16;
          if (v14 >= v6)
            break;
          v22 = 0;
          v23 = v14;
          v15 = *(_QWORD *)(a4 + 24);
          if (!v15)
          {
            v18 = std::__throw_bad_function_call[abi:nn180100]();
            return OTL::GCommon::IterateConditionSetTables(v18, v19, v20, v21);
          }
          result = (*(uint64_t (**)(uint64_t, __int16 *, char *))(*(_QWORD *)v15 + 48))(v15, &v23, &v22);
          if ((_DWORD)result)
          {
            result = 1;
            if (!v22)
            {
              ++v12;
              v17 = v13;
              v13 -= 2;
              if (v17)
                continue;
            }
          }
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t OTL::GCommon::IterateConditionSetTables(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t result;

  if (!a2)
    return 0;
  v5 = *(_DWORD *)(a2 + 4);
  if (!v5)
    return 1;
  v7 = bswap32(*(_DWORD *)(a2 + 8));
  v8 = (unsigned __int16 *)(a2 + v7);
  v9 = a2 + v7 + 2;
  if (v9 <= a3)
  {
    v11 = (unsigned int *)(a2 + 8);
    v12 = a2 + 8 + 8 * bswap32(v5);
    do
    {
      v13 = bswap32(*v8) >> 16;
      v14 = v9 + 4 * v13;
      v15 = (unint64_t)(v8 + 3) <= a3 ? (a3 - v9) >> 2 : 0;
      v16 = v14 <= a3 && v14 >= v9;
      if (!v16 && v15 != v13)
        break;
      v18 = (_WORD *)(a2 + bswap32(v11[1]));
      v19 = v18 + 3;
      if ((unint64_t)(v18 + 3) > a3)
        break;
      v20 = bswap32((unsigned __int16)v18[2]) >> 16;
      v21 = (unint64_t)&v19[3 * v20];
      if (v21 < (unint64_t)v19 || v21 > a3)
      {
        v23 = (a3 - (unint64_t)v19) / 6;
        if ((unint64_t)(v18 + 6) > a3)
          v23 = 0;
        if (v23 != v20)
          break;
      }
      if (*v18 == 256)
      {
        result = std::function<BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::operator()(a4, (uint64_t)v8, (uint64_t)v18);
        if (!(_DWORD)result)
          return result;
        result = 1;
        v11 += 2;
        if (v11 == (unsigned int *)v12)
          return result;
      }
      else
      {
        v11 += 2;
        if (v11 == (unsigned int *)v12)
          return 1;
      }
      v8 = (unsigned __int16 *)(a2 + bswap32(*v11));
      v9 = (unint64_t)(v8 + 1);
    }
    while ((unint64_t)(v8 + 1) <= a3);
  }
  return 0;
}

uint64_t std::function<BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  v7 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return OTL::GCommon::GetLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *,BOOL)const::$_0::operator()(v5);
}

void OTL::GCommon::GetLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *,BOOL)const::$_0::operator()(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  char **v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  unsigned __int16 v36;

  v36 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__hash_table<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>>>::find<unsigned short>(*(_QWORD **)a1, &v36);
  if (**(uint64_t ****)(a1 + 8) == v6)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v5 + 56) + (bswap32(*(unsigned __int16 *)(*(_QWORD *)(v5 + 56) + 6 * v36 + 6)) >> 16));
    v10 = *(_QWORD *)(v5 + 40);
    v11 = (char *)v7 + 4;
    if ((unint64_t)v7 + 4 > v10)
      return;
    v8 = *((unsigned __int16 *)v7 + 1);
    v9 = __rev16(v8);
    v12 = (unint64_t)&v11[2 * v9];
    v13 = (unint64_t)v7 + 6 <= v10 ? (v10 - (unint64_t)v11) >> 1 : 0;
    v14 = v12 <= v10 && v12 >= (unint64_t)v11;
    if (!v14 && v13 != v9)
      return;
  }
  else
  {
    v7 = v6[3];
    v8 = *((unsigned __int16 *)v7 + 1);
    v9 = __rev16(v8);
  }
  if (v8)
  {
    v16 = (unsigned __int16 *)v7 + 2;
    v17 = (uint64_t)v7 + 2 * v9 + 4;
    do
    {
      v18 = bswap32(*v16) >> 16;
      if (**(_QWORD **)(a1 + 24) > v18)
      {
        v19 = **(char ****)(a1 + 32);
        v21 = v19[1];
        v20 = (unint64_t)v19[2];
        if ((unint64_t)v21 >= v20)
        {
          v23 = (v21 - *v19) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            abort();
          v25 = v20 - (_QWORD)*v19;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          v27 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(v19 + 3), v26);
          v28 = &v27[4 * v23];
          *(_WORD *)v28 = v18;
          *((_WORD *)v28 + 1) = a3;
          v30 = *v19;
          v29 = v19[1];
          v31 = v28;
          if (v29 != *v19)
          {
            do
            {
              v32 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            while (v29 != v30);
            v29 = *v19;
          }
          v22 = v28 + 4;
          *v19 = v31;
          v19[1] = v28 + 4;
          v33 = v19[2];
          v19[2] = &v27[4 * v26];
          if (v29)
          {
            v34 = (char *)(v19 + 18);
            if (v19 + 3 <= (char **)v29 && v34 > v29)
            {
              if (v33 == *(char **)v34)
                *(_QWORD *)v34 = v29;
            }
            else
            {
              operator delete(v29);
            }
          }
        }
        else
        {
          *(_WORD *)v21 = v18;
          *((_WORD *)v21 + 1) = a3;
          v22 = v21 + 4;
        }
        v19[1] = v22;
      }
      ++v16;
    }
    while (v16 != (unsigned __int16 *)v17);
  }
}

_QWORD *OTL::GDEF::IterateGlyphsWithClassMask(_QWORD *result, int a2, uint64_t a3)
{
  unsigned __int16 *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE v8[24];
  _BYTE *v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int16 *)result[2];
  if (!v3)
    return result;
  v7 = a2;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v8, a3);
  std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>>((uint64_t)v10, (uint64_t)&v7);
  OTL::ClassDefTable::Iterate(v3, (uint64_t)v10);
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
    goto LABEL_6;
  }
  if (v11)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *(_QWORD *)v4 = &off_1E15E0AC0;
  v4[2] = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    if (v5 == a2 + 8)
    {
      *((_QWORD *)v4 + 5) = v4 + 4;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      *((_QWORD *)v4 + 5) = v5;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *((_QWORD *)v4 + 5) = 0;
  }
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0AC0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0AC0;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_DWORD *std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _DWORD *v2;

  v2 = operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15E0AC0;
  v2[2] = *(_DWORD *)(a1 + 8);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 4), a1 + 16);
  return v2;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15E0AC0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 16, a1 + 16);
}

_QWORD *std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_DWORD *std::__function::__func<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>((_DWORD *)(a1 + 8), a2, a3, a4);
}

_DWORD *std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsWithClassMask(unsigned int,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>(_DWORD *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;

  v4 = *a4;
  if (v4 <= 0x1F)
  {
    v5 = result;
    if (((*result >> v4) & 1) != 0)
    {
      v6 = *a2;
      v7 = *a3;
      if (v6 <= v7 && v6 != (unsigned __int16)(v7 + 1))
      {
        do
        {
          v10 = v6;
          v8 = *((_QWORD *)v5 + 4);
          if (!v8)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            JUMPOUT(0x1848BE0F8);
          }
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 48))(v8, &v10);
          v9 = v7 == (unsigned __int16)v6;
          LOWORD(v6) = v6 + 1;
        }
        while (!v9);
      }
    }
  }
  return result;
}

void std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E15E0B98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E15E0B98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::operator()(uint64_t a1, __int16 *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>(uint64_t *a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v5;
  __int16 v6;

  v2 = *a1;
  v6 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 48))(v3, &v6);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>>(v5);
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  v5 = *a2;
  *v4 = &off_1E15E0A78;
  v4[1] = v5;
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v4[5] = v4 + 2;
      (*(void (**)(uint64_t *))(*v6 + 24))(v6);
    }
    else
    {
      v4[5] = v6;
      a2[4] = 0;
    }
  }
  else
  {
    v4[5] = 0;
  }
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0A78;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0A78;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E15E0A78;
  a2[1] = v2;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotInSet(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  __int16 v13;

  v4 = *a2;
  v5 = *a3;
  v6 = *a4 != 3 || v4 > v5;
  if (!v6 && v4 != (unsigned __int16)(v5 + 1))
  {
    v7 = (_QWORD *)result;
    do
    {
      v8 = *(uint64_t (**)(_QWORD *, _QWORD))(*v7 + 16);
      v9 = *(_QWORD *)(*v7 + 24);
      v10 = (_QWORD *)(*v7 + (v9 >> 1));
      if ((v9 & 1) != 0)
        v8 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + v8);
      result = v8(v10, (unsigned __int16)v4);
      if (!(_DWORD)result)
      {
        v13 = v4;
        v11 = v7[4];
        if (!v11)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x1848BE3F0);
        }
        result = (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v11 + 48))(v11, &v13);
      }
      v12 = v5 == (unsigned __int16)v4;
      LOWORD(v4) = v4 + 1;
    }
    while (!v12);
  }
  return result;
}

void std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2}>,void ()(unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2}>,void ()(unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E15E0B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2}>,void ()(unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E15E0B08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#2}>,void ()(unsigned short)>::operator()(uint64_t a1, __int16 *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>((uint64_t *)(a1 + 8), a2);
}

void std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1},std::allocator<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1}>,void ()(unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E0BE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GDEF::IterateMarkGlyphsNotOfAttachmentType(unsigned short,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#1} &,unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  __int16 v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v3 = *a2;
  result = OTL::ClassDefTable::ClassOf(**(OTL::ClassDefTable ***)a1, *a2);
  if ((_DWORD)result != **(unsigned __int16 **)(a1 + 8))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v7 = v3;
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x1848BE508);
    }
    return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v6 + 48))(v6, &v7);
  }
  return result;
}

void std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3}>,void ()(unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3},std::allocator<OTL::GDEF::IterateGlyphsIgnoredByLookupTable(OTL::LookupTable const*,std::function<void ()(unsigned short)>)::{lambda(unsigned short)#3}>,void ()(unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E15E0B50;
  result[1] = v3;
  return result;
}

unsigned __int16 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  unsigned __int16 *v35;
  unsigned __int16 v36;

  v3 = *a2;
  v4 = *result;
  if (v3 >= v4)
    v5 = 1;
  else
    v5 = -1;
  if (v3 == v4)
  {
    v6 = a2[1];
    v7 = result[1];
    v8 = v6 >= v7;
    v9 = v6 == v7;
    v10 = -1;
    if (v8)
      v10 = 1;
    if (v9)
      v5 = 0;
    else
      v5 = v10;
  }
  v11 = *a3;
  v12 = -1;
  if (v11 >= v3)
    v12 = 1;
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      v25 = a3[1];
      v26 = a2[1];
      v8 = v25 >= v26;
      v27 = v25 == v26;
      v12 = -1;
      if (v8)
        v12 = 1;
      if (v27)
        v12 = 0;
    }
    if (v12 < 0)
    {
      *result++ = v11;
      *a3 = v4;
      v35 = a3 + 1;
    }
    else
    {
      *result = v3;
      *a2 = v4;
      v28 = result[1];
      result[1] = a2[1];
      a2[1] = v28;
      v29 = *a3;
      v30 = *a2;
      v31 = -1;
      if (v29 >= v30)
        v31 = 1;
      if (v29 == v30)
      {
        v32 = a3[1];
        v8 = v32 >= v28;
        v33 = v32 == v28;
        v34 = -1;
        if (v8)
          v34 = 1;
        if (v33)
          v31 = 0;
        else
          v31 = v34;
      }
      if ((v31 & 0x80) == 0)
        return result;
      *a2 = v29;
      *a3 = v30;
      v35 = a3 + 1;
      result = a2 + 1;
    }
    v17 = v35;
    goto LABEL_52;
  }
  if (v11 == v3)
  {
    v13 = a3[1];
    v14 = a2[1];
    v8 = v13 >= v14;
    v15 = v13 == v14;
    v16 = -1;
    if (v8)
      v16 = 1;
    if (v15)
      v12 = 0;
    else
      v12 = v16;
  }
  if (v12 < 0)
  {
    *a2 = v11;
    *a3 = v3;
    v17 = a2 + 1;
    v18 = a2[1];
    a2[1] = a3[1];
    a3[1] = v18;
    v19 = *a2;
    v20 = *result;
    v21 = -1;
    if (v19 >= v20)
      v21 = 1;
    if (v19 == v20)
    {
      v22 = *v17;
      v23 = result[1];
      v8 = v22 >= v23;
      v24 = v22 == v23;
      v21 = -1;
      if (v8)
        v21 = 1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      *result++ = v19;
      *a2 = v20;
LABEL_52:
      v36 = *result;
      *result = *v17;
      *v17 = v36;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  unsigned __int16 v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  unsigned __int16 *v32;

  v4 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      v8 = -1;
      if (v6 >= v7)
        v8 = 1;
      if (v6 == v7)
      {
        v9 = *(a2 - 1);
        v10 = a1[1];
        v11 = v9 >= v10;
        v12 = v9 == v10;
        v8 = -1;
        if (v11)
          v8 = 1;
        if (v12)
          v8 = 0;
      }
      if (v8 < 0)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v13 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v14 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a1 + 2, a1 + 4);
      v15 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *v15;
    v19 = *v14;
    v20 = v18 == v19;
    if (v18 >= v19)
      v21 = 1;
    else
      v21 = -1;
    if (v20)
    {
      v22 = v15[1];
      v23 = v14[1];
      v24 = v22 == v23;
      v21 = v22 >= v23 ? 1 : -1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      v25 = (unsigned __int16)*(_DWORD *)v15;
      v26 = HIWORD(*(_DWORD *)v15);
      v27 = v16;
      while (1)
      {
        v28 = (unsigned __int16 *)((char *)a1 + v27);
        v28[6] = v19;
        v28[7] = *(unsigned __int16 *)((char *)a1 + v27 + 10);
        if (v27 == -8)
          break;
        v19 = v28[2];
        if (v19 <= v25)
          v29 = 1;
        else
          v29 = -1;
        if (v19 == v25)
        {
          v30 = *(unsigned __int16 *)((char *)a1 + v27 + 6);
          v31 = v30 == v26;
          v29 = v30 <= v26 ? 1 : -1;
          if (v31)
            v29 = 0;
        }
        v27 -= 4;
        if ((v29 & 0x80) == 0)
        {
          v32 = (unsigned __int16 *)((char *)a1 + v27 + 12);
          goto LABEL_39;
        }
      }
      v32 = a1;
LABEL_39:
      *v32 = v25;
      v32[1] = v26;
      if (++v17 == 8)
        return v15 + 2 == a2;
    }
    v14 = v15;
    v16 += 4;
    v15 += 2;
    if (v15 == a2)
      return 1;
  }
}

unsigned __int16 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *result;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int16 v30;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = -1;
  if (v9 >= v10)
    v11 = 1;
  if (v9 == v10)
  {
    v12 = a4[1];
    v13 = a3[1];
    v14 = v12 >= v13;
    v15 = v12 == v13;
    v11 = -1;
    if (v14)
      v11 = 1;
    if (v15)
      v11 = 0;
  }
  if (v11 < 0)
  {
    *a3 = v9;
    *a4 = v10;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a3;
    v18 = *a2;
    v19 = -1;
    if (v17 >= v18)
      v19 = 1;
    if (v17 == v18)
    {
      v20 = a3[1];
      v21 = a2[1];
      v14 = v20 >= v21;
      v22 = v20 == v21;
      v19 = -1;
      if (v14)
        v19 = 1;
      if (v22)
        v19 = 0;
    }
    if (v19 < 0)
    {
      *a2 = v17;
      *a3 = v18;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v24 = *a2;
      v25 = *a1;
      v26 = -1;
      if (v24 >= v25)
        v26 = 1;
      if (v24 == v25)
      {
        v27 = a2[1];
        v28 = a1[1];
        v14 = v27 >= v28;
        v29 = v27 == v28;
        v26 = -1;
        if (v14)
          v26 = 1;
        if (v29)
          v26 = 0;
      }
      if (v26 < 0)
      {
        *a1 = v24;
        *a2 = v25;
        v30 = a1[1];
        a1[1] = a2[1];
        a2[1] = v30;
      }
    }
  }
  return result;
}

unsigned __int16 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  unsigned __int16 *result;
  unsigned int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned __int16 v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned __int16 v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned __int16 v39;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned short,unsigned short> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = -1;
  if (v11 >= v12)
    v13 = 1;
  if (v11 == v12)
  {
    v14 = a5[1];
    v15 = a4[1];
    v16 = v14 >= v15;
    v17 = v14 == v15;
    v13 = -1;
    if (v16)
      v13 = 1;
    if (v17)
      v13 = 0;
  }
  if (v13 < 0)
  {
    *a4 = v11;
    *a5 = v12;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = *a4;
    v20 = *a3;
    v21 = -1;
    if (v19 >= v20)
      v21 = 1;
    if (v19 == v20)
    {
      v22 = a4[1];
      v23 = a3[1];
      v16 = v22 >= v23;
      v24 = v22 == v23;
      v21 = -1;
      if (v16)
        v21 = 1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      *a3 = v19;
      *a4 = v20;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      v28 = -1;
      if (v26 >= v27)
        v28 = 1;
      if (v26 == v27)
      {
        v29 = a3[1];
        v30 = a2[1];
        v16 = v29 >= v30;
        v31 = v29 == v30;
        v28 = -1;
        if (v16)
          v28 = 1;
        if (v31)
          v28 = 0;
      }
      if (v28 < 0)
      {
        *a2 = v26;
        *a3 = v27;
        v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        v33 = *a2;
        v34 = *a1;
        v35 = -1;
        if (v33 >= v34)
          v35 = 1;
        if (v33 == v34)
        {
          v36 = a2[1];
          v37 = a1[1];
          v16 = v36 >= v37;
          v38 = v36 == v37;
          v35 = -1;
          if (v16)
            v35 = 1;
          if (v38)
            v35 = 0;
        }
        if (v35 < 0)
        {
          *a1 = v33;
          *a2 = v34;
          v39 = a1[1];
          a1[1] = a2[1];
          a2[1] = v39;
        }
      }
    }
  }
  return result;
}

void std::__function::__func<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0,std::allocator<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0,std::allocator<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0,std::allocator<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0760;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0,std::allocator<OTL::GCommon::GCommon(OTL::GCommon::Table,TFont const&,__CFData const*,OTL::GDEF const&,unsigned int,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3, _BYTE *a4)
{
  if (*a2 == 1987212338 || *a2 == 1986359924)
  {
    **(_BYTE **)(a1 + 8) = 1;
    *a4 = 1;
  }
  return 1;
}

void std::__function::__func<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0,std::allocator<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0>,void ()(unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0,std::allocator<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0>,void ()(unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E06D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0,std::allocator<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0>,void ()(unsigned short)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E06D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0,std::allocator<OTL::Lookup::PopulateIgnoreSet(OTL::GDEF const&)::$_0>,void ()(unsigned short)>::operator()(uint64_t result, _WORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + ((unint64_t)(unsigned __int16)*a2 >> 3)) |= 1 << (*a2 & 7);
  return result;
}

void std::__function::__func<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0,std::allocator<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0,std::allocator<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15E0718;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0,std::allocator<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15E0718;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0,std::allocator<OTL::GCommon::FeatureTableSubstitutionsForFont(OTL::GCommon::Header const*,void const*,TFont const&)::$_0>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t ***v19;
  uint64_t **i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t ***v32;
  uint64_t **j;
  unint64_t v34;
  _QWORD *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v4 = *a3;
  v5 = (unsigned int *)(*a2 + 2);
  if (!*(_WORD *)*a2)
  {
LABEL_13:
    if (!*(_WORD *)(v4 + 4))
      return 1;
    v12 = (unsigned __int16 *)(v4 + 6);
    v13 = v4 + 6 + 6 * __rev16(*(unsigned __int16 *)(v4 + 4));
    while (1)
    {
      v14 = bswap32(*v12) >> 16;
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v18 = v14;
          if (v16 <= v14)
            v18 = v14 % v16;
        }
        else
        {
          v18 = ((_DWORD)v16 - 1) & v14;
        }
        v19 = *(uint64_t ****)(*(_QWORD *)v15 + 8 * v18);
        if (v19)
        {
          for (i = *v19; i; i = (uint64_t **)*i)
          {
            v21 = (unint64_t)i[1];
            if (v21 == v14)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v14)
                goto LABEL_82;
            }
            else
            {
              if (v17.u32[0] > 1uLL)
              {
                if (v21 >= v16)
                  v21 %= v16;
              }
              else
              {
                v21 &= v16 - 1;
              }
              if (v21 != v18)
                break;
            }
          }
        }
      }
      v22 = v4 + bswap32(*(_DWORD *)(v12 + 1));
      v23 = **(_QWORD **)(a1 + 8);
      v24 = v22 + 4;
      if (v22 + 4 > v23)
        goto LABEL_82;
      v25 = bswap32(*(unsigned __int16 *)(v22 + 2)) >> 16;
      v26 = v24 + 2 * v25;
      v27 = v22 + 6 <= v23 ? (v23 - v24) >> 1 : 0;
      v28 = v26 <= v23 && v26 >= v24;
      if (!v28 && v27 != v25)
        goto LABEL_82;
      if (v16)
      {
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v31 = v14;
          if (v16 <= v14)
            v31 = v14 % v16;
        }
        else
        {
          v31 = ((_DWORD)v16 - 1) & v14;
        }
        v32 = *(uint64_t ****)(*(_QWORD *)v15 + 8 * v31);
        if (v32)
        {
          for (j = *v32; j; j = (uint64_t **)*j)
          {
            v34 = (unint64_t)j[1];
            if (v34 == v14)
            {
              if (*((unsigned __int16 *)j + 8) == (_DWORD)v14)
                goto LABEL_82;
            }
            else
            {
              if (v30.u32[0] > 1uLL)
              {
                if (v34 >= v16)
                  v34 %= v16;
              }
              else
              {
                v34 &= v16 - 1;
              }
              if (v34 != v31)
                break;
            }
          }
        }
      }
      else
      {
        v31 = 0xAAAAAAAAAAAAAAAALL;
      }
      v35 = operator new(0x20uLL);
      *v35 = 0;
      v35[1] = v14;
      *((_WORD *)v35 + 8) = v14;
      v35[3] = v22;
      v36 = (float)(unint64_t)(*(_QWORD *)(v15 + 24) + 1);
      v37 = *(float *)(v15 + 32);
      if (!v16 || (float)(v37 * (float)v16) < v36)
      {
        v38 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3)
          v38 = 1;
        v39 = v38 | (2 * v16);
        v40 = vcvtps_u32_f32(v36 / v37);
        if (v39 <= v40)
          v41 = v40;
        else
          v41 = v39;
        std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v15, v41);
        v16 = *(_QWORD *)(v15 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v16 <= v14)
            v31 = v14 % v16;
          else
            v31 = v14;
        }
        else
        {
          v31 = ((_DWORD)v16 - 1) & v14;
        }
      }
      v42 = *(_QWORD *)v15;
      v43 = *(_QWORD **)(*(_QWORD *)v15 + 8 * v31);
      if (v43)
        break;
      *v35 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 16) = v35;
      *(_QWORD *)(v42 + 8 * v31) = v15 + 16;
      if (*v35)
      {
        v44 = *(_QWORD *)(*v35 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v44 >= v16)
            v44 %= v16;
        }
        else
        {
          v44 &= v16 - 1;
        }
        v43 = (_QWORD *)(*(_QWORD *)v15 + 8 * v44);
        goto LABEL_80;
      }
LABEL_81:
      ++*(_QWORD *)(v15 + 24);
LABEL_82:
      v12 += 3;
      if (v12 == (unsigned __int16 *)v13)
        return 1;
    }
    *v35 = *v43;
LABEL_80:
    *v43 = v35;
    goto LABEL_81;
  }
  v6 = **(_QWORD **)(a1 + 8);
  v7 = 4 * __rev16(*(unsigned __int16 *)*a2);
  while (1)
  {
    v8 = (_WORD *)(*a2 + bswap32(*v5));
    if ((unint64_t)(v8 + 1) > v6)
      return 0;
    if (*v8 == 256)
    {
      if (**(_QWORD **)(a1 + 16) > (unint64_t)v8 || (unint64_t)(v8 + 4) > v6)
        return 0;
      v10 = bswap32((unsigned __int16)v8[1]) >> 16;
      if (**(_QWORD **)(a1 + 24) <= v10)
        return 0;
      v11 = *(__int16 *)(**(_QWORD **)(a1 + 32) + 2 * v10);
      if (v11 < (int)bswap32((unsigned __int16)v8[2]) >> 16 || v11 > (int)bswap32((unsigned __int16)v8[3]) >> 16)
        return 1;
    }
    ++v5;
    v7 -= 4;
    if (!v7)
      goto LABEL_13;
  }
}

uint64_t TRunGlue::ReorderGlyphs(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  _WORD *v3;
  BOOL v4;
  unint64_t v5;
  __int16 v6;
  BOOL v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(this + 176);
  v2 = *(_QWORD *)(this + 32);
  v3 = (_WORD *)(v1 + 2 * v2 - 2);
  if (v2)
    v4 = (unint64_t)v3 > v1;
  else
    v4 = 0;
  if (v4)
  {
    v5 = v1 + 2;
    do
    {
      v6 = *(_WORD *)(v5 - 2);
      *(_WORD *)(v5 - 2) = *v3;
      *v3-- = v6;
      v7 = v5 >= (unint64_t)v3;
      v5 += 2;
    }
    while (!v7);
  }
  v8 = *(uint64_t **)(this + 184);
  v9 = (unint64_t)&v8[2 * v2 - 2];
  if (v2)
    v10 = v9 > (unint64_t)v8;
  else
    v10 = 0;
  if (v10)
  {
    do
    {
      v11 = *v8;
      v12 = v8[1];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8 += 2;
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v12;
      v9 -= 16;
    }
    while ((unint64_t)v8 < v9);
    v2 = *(_QWORD *)(this + 32);
  }
  if (v2)
  {
    v13 = *(uint64_t **)(this + 192);
    v14 = (unint64_t)&v13[2 * v2 - 2];
    if (v14 > (unint64_t)v13)
    {
      do
      {
        v15 = *v13;
        v16 = v13[1];
        *(_OWORD *)v13 = *(_OWORD *)v14;
        v13 += 2;
        *(_QWORD *)v14 = v15;
        *(_QWORD *)(v14 + 8) = v16;
        v14 -= 16;
      }
      while ((unint64_t)v13 < v14);
      v2 = *(_QWORD *)(this + 32);
    }
  }
  v17 = *(_QWORD *)(this + 520);
  v18 = (_DWORD *)(v17 + 4 * v2 - 4);
  if (v2)
    v19 = (unint64_t)v18 > v17;
  else
    v19 = 0;
  if (v19)
  {
    v20 = v17 + 4;
    do
    {
      v21 = *(_DWORD *)(v20 - 4);
      *(_DWORD *)(v20 - 4) = *v18;
      *v18-- = v21;
      v7 = v20 >= (unint64_t)v18;
      v20 += 4;
    }
    while (!v7);
  }
  if (v2)
  {
    v22 = *(_QWORD *)(this + 528);
    v23 = (_QWORD *)(v22 + 8 * v2 - 8);
    if ((unint64_t)v23 > v22)
    {
      v24 = v22 + 8;
      do
      {
        v25 = *(_QWORD *)(v24 - 8);
        *(_QWORD *)(v24 - 8) = *v23;
        *v23-- = v25;
        v7 = v24 >= (unint64_t)v23;
        v24 += 8;
      }
      while (!v7);
    }
  }
  *(_DWORD *)(this + 24) = -*(_DWORD *)(this + 24);
  return this;
}

BOOL TRunGlue::FilterSurrogates(TRunGlue *this, uint64_t a2, const uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  const uint64_t **v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int FullChar;
  uint64_t v14;
  uint64_t *v16;
  uint64_t *v17;
  TRunGlue *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TRunGlue *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  const uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  TRunGlue **v49;
  __int128 v50;
  unsigned int v51[4];
  _OWORD v52[8];
  __int128 v53;
  uint64_t v54;
  TRunGlue *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  TRunGlue *v60;
  uint64_t *v61;
  uint64_t *v62;
  _OWORD v63[15];
  _OWORD *v64;
  uint64_t v65;
  CFRange v66;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 75);
  if (!v3)
  {
    v5 = a3;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v63[14] = v7;
    v63[13] = v7;
    v63[12] = v7;
    v63[11] = v7;
    v63[10] = v7;
    v63[9] = v7;
    v63[8] = v7;
    v63[7] = v7;
    v63[6] = v7;
    v63[5] = v7;
    v63[4] = v7;
    v63[3] = v7;
    v63[2] = v7;
    v63[1] = v7;
    v63[0] = v7;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v64 = v63;
    if (a3)
    {
      if (*a3 == a3[1])
        goto LABEL_38;
    }
    else
    {
      v53 = 0u;
      v50 = 0u;
      *(_OWORD *)v51 = 0u;
      memset(v52, 0, sizeof(v52));
      v8 = *(_QWORD *)(a2 + 16);
      v54 = 0;
      *(_QWORD *)&v53 = v8;
      v9 = *((_QWORD *)this + 5);
      v10 = *((_QWORD *)this + 6);
      v48 = v9;
      v49 = (TRunGlue **)a2;
      if (v10 < 1)
      {
LABEL_38:
        v4 = 0;
LABEL_59:
        v49 = &v60;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
        return v4;
      }
      v11 = 0;
      v12 = v10 + v9;
      do
      {
        while (1)
        {
          FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v49, &v48, 0);
          v14 = v48;
          if ((FullChar - 0x10000) >> 20 || v48 >= v12)
            break;
          v16 = v61;
          if (v61 >= v62)
          {
            v18 = v60;
            v19 = ((char *)v61 - (char *)v60) >> 3;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              abort();
            v21 = (char *)v62 - (char *)v60;
            if (((char *)v62 - (char *)v60) >> 2 > v20)
              v20 = v21 >> 2;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            v59 = v63;
            if (v22)
            {
              v23 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v63, v22);
              v18 = v60;
              v16 = v61;
            }
            else
            {
              v23 = 0;
            }
            v24 = (uint64_t *)&v23[8 * v19];
            *v24 = v14;
            if (v16 == (uint64_t *)v18)
            {
              v26 = &v23[8 * v19];
            }
            else
            {
              v25 = (TRunGlue *)v16;
              v26 = &v23[8 * v19];
              do
              {
                v27 = *((_QWORD *)v25 - 1);
                v25 = (TRunGlue *)((char *)v25 - 8);
                *((_QWORD *)v26 - 1) = v27;
                v26 -= 8;
              }
              while (v25 != v18);
              v14 = v48;
            }
            v17 = v24 + 1;
            v60 = (TRunGlue *)v26;
            v61 = v24 + 1;
            v28 = v62;
            v62 = (uint64_t *)&v23[8 * v22];
            v57 = (uint64_t)v16;
            v58 = (uint64_t)v28;
            v55 = v18;
            v56 = (uint64_t)v18;
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v55);
          }
          else
          {
            *v61 = v48;
            v17 = v16 + 1;
          }
          v61 = v17;
          v48 = v14 + 1;
          v11 = 1;
          if (v14 + 1 >= v12)
            goto LABEL_34;
        }
        ++v48;
      }
      while (v14 + 1 < v12);
      if ((v11 & 1) == 0)
        goto LABEL_38;
LABEL_34:
      v5 = (const uint64_t **)&v60;
    }
    if (*((_QWORD *)this + 19))
    {
      v29 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - *(_QWORD *)(*(_QWORD *)this + 16)) >> 3;
      TLine::DeleteChars(*(_QWORD *)this, v5[1] - *v5, *v5);
      v30 = *(_QWORD *)(*(_QWORD *)this + 24) - *(_QWORD *)(*(_QWORD *)this + 16);
      if (v29 == v30 >> 3)
      {
        *((_QWORD *)this + 21) = *(_QWORD *)(*((_QWORD *)this + 19) + 208) + *((_QWORD *)this + 20);
        TRunGlue::ComputeEndIndex(this);
      }
      else
      {
        v36 = v29 - (v30 >> 3);
        v66.location = *((_QWORD *)this + 1);
        v66.length = *((_QWORD *)this + 2) - v36;
        *((_QWORD *)this + 18) -= v36;
        TRunGlue::SetRunRange(this, v66);
      }
    }
    else
    {
      v31 = *((_QWORD *)this + 66);
      v32 = *v5;
      v33 = *((_QWORD *)this + 4);
      if (v33)
      {
        v34 = 8 * v33;
        v35 = (_QWORD *)*((_QWORD *)this + 66);
        while (*v35 != *v32)
        {
          ++v35;
          v34 -= 8;
          if (!v34)
          {
            v35 = (_QWORD *)(v31 + 8 * v33);
            break;
          }
        }
      }
      else
      {
        v35 = (_QWORD *)*((_QWORD *)this + 66);
      }
      v37 = ((uint64_t)v35 - v31) >> 3;
      if (v37 < v33)
      {
        v38 = v5[1];
        v47 = v31 + 8 * *((_QWORD *)this + 20);
        v39 = v37;
        v40 = ((uint64_t)v35 - v31) >> 3;
        do
        {
          if (v32 == v38)
          {
            v32 = v38;
          }
          else if (*(_QWORD *)(v47 + 8 * v40) == *v32)
          {
            if (++v40 >= v33)
              break;
            ++v32;
          }
          v55 = this;
          v56 = v40;
          v41 = *((_QWORD *)this + 20);
          v43 = *((_QWORD *)this + 23) + 16 * v41;
          v57 = *((_QWORD *)this + 22) + 2 * v41;
          v42 = v57;
          v58 = v43;
          v59 = (_OWORD *)(*((_QWORD *)this + 24) + 16 * v41);
          v44 = v59;
          TRunGlue::TGlyphInVector::operator TStorageRange::GlyphEntry((uint64_t)&v49, (uint64_t)&v55);
          *(_WORD *)(v42 + 2 * v37) = (_WORD)v49;
          *(_OWORD *)(v43 + v39 * 16) = v50;
          TRunGlue::SetGlyphProps(this, v37, v51[0]);
          TRunGlue::SetStringIndex(this, v37, *(uint64_t *)&v51[2]);
          v44[v39] = *(_OWORD *)((char *)v52 + 8);
          ++v40;
          ++v37;
          v33 = *((_QWORD *)this + 4);
          ++v39;
        }
        while (v40 < v33);
      }
      while (v37 < v33)
      {
        TRunGlue::SetStringIndex(this, v37, -1);
        TRunGlue::Delete(this, v37++, 0);
        v33 = *((_QWORD *)this + 4);
      }
      v45 = (char *)v5[1] - (char *)*v5;
      std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(*((_QWORD *)this + 73), *((_QWORD *)this + 20) + v33, -(v45 >> 3), (uint64_t)this + 176, (uint64_t)this + 184, (uint64_t)this + 192, (uint64_t)this + 528);
      *((_QWORD *)this + 4) -= v45 >> 3;
      *((_QWORD *)this + 21) -= v45 >> 3;
    }
    v4 = 1;
    goto LABEL_59;
  }
  return v3 > 0;
}

TLine *TRunGlue::GetMappedCharsInRange(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  TLine *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  TLine *v29;
  _QWORD v30[5];

  result = *(TLine **)a1;
  if (result)
    return (TLine *)TLine::GetMappedCharsInRange(result, a2, a3, a4);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 160);
    v11 = *(_QWORD *)(a1 + 528) + 8 * v10;
    v12 = *(_QWORD *)(a1 + 520) + 4 * v10;
    v13 = a2 + a3;
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 8 * v9);
      if (v14 >= a2)
        break;
      if (v8 == ++v9)
        return result;
    }
    if (v14 < v13)
    {
      result = (TLine *)(a4 + 3);
      v29 = (TLine *)(a4 + 3);
      do
      {
        if ((*(_DWORD *)(v12 + 4 * v9) & 0x20) == 0 && a2 <= v14)
        {
          v16 = (uint64_t *)*a4;
          v15 = (uint64_t *)a4[1];
          if (*a4 == (char *)v15 || v14 != *(v15 - 1))
          {
            v17 = (unint64_t)a4[2];
            if ((unint64_t)v15 >= v17)
            {
              v19 = v15 - v16;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 61)
                abort();
              v21 = v17 - (_QWORD)v16;
              if (v21 >> 2 > v20)
                v20 = v21 >> 2;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              v30[4] = result;
              if (v22)
              {
                v23 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)result, v22);
                v16 = (uint64_t *)*a4;
                v15 = (uint64_t *)a4[1];
              }
              else
              {
                v23 = 0;
              }
              v24 = (uint64_t *)&v23[8 * v19];
              *v24 = v14;
              if (v15 == v16)
              {
                v26 = &v23[8 * v19];
              }
              else
              {
                v25 = v15;
                v26 = &v23[8 * v19];
                do
                {
                  v27 = *--v25;
                  *((_QWORD *)v26 - 1) = v27;
                  v26 -= 8;
                }
                while (v25 != v16);
              }
              v18 = (char *)(v24 + 1);
              *a4 = v26;
              a4[1] = (char *)(v24 + 1);
              v28 = a4[2];
              a4[2] = &v23[8 * v22];
              v30[2] = v15;
              v30[3] = v28;
              v30[0] = v16;
              v30[1] = v16;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v30);
              result = v29;
            }
            else
            {
              *v15 = v14;
              v18 = (char *)(v15 + 1);
            }
            a4[1] = v18;
            v8 = *(_QWORD *)(a1 + 32);
          }
        }
        if (++v9 >= v8)
          break;
        v14 = *(_QWORD *)(v11 + 8 * v9);
      }
      while (v14 < v13);
    }
  }
  return result;
}

uint64_t TRunGlue::GetFontForCharIndex(TLine **this, uint64_t a2)
{
  TLine *v2;
  unint64_t v3;
  char *v4;

  v2 = *this;
  if (!*this)
  {
    v4 = (char *)(this + 77);
    return *(_QWORD *)v4;
  }
  if (*((_QWORD *)v2 + 3) != *((_QWORD *)v2 + 2))
  {
    v3 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2)
                                                                + 8 * TLine::FindRunWithCharIndex(*this, a2, 1))
                                                    + 40)
                                        + 56));
    v4 = (char *)(v3 + 40);
    return *(_QWORD *)v4;
  }
  return 0;
}

uint64_t TRunGlue::GetGlyphIDForCharIndex(TRunGlue *this, uint64_t a2)
{
  TLine *v4;
  uint64_t RunWithCharIndex;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(TLine **)this;
  if (v4)
  {
    RunWithCharIndex = TLine::FindRunWithCharIndex(v4, a2, 1);
    v6 = *(_QWORD *)(*(_QWORD *)this + 16);
    if (RunWithCharIndex < (*(_QWORD *)(*(_QWORD *)this + 24) - v6) >> 3)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * RunWithCharIndex) + 40);
      i = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16)
                             + 2 * *(_QWORD *)(v7 + 200)
                             + 2 * TRun::GetGlyphIndexForCharIndex<false>(v7, a2));
      return *i;
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 4);
    if (v10 >= 1)
    {
      v11 = *((_QWORD *)this + 20);
      v12 = (uint64_t *)(*((_QWORD *)this + 66) + 8 * v11);
      for (i = (unsigned __int16 *)(*((_QWORD *)this + 22) + 2 * v11); ; ++i)
      {
        v13 = *v12++;
        if (v13 >= a2)
          break;
        if (!--v10)
          return 0;
      }
      return *i;
    }
  }
  return 0;
}

uint64_t TRunGlue::ReplaceCharRangeWithGlyphs(TRunGlue *this, uint64_t a2, uint64_t a3, _QWORD *a4, _WORD **a5, uint64_t a6)
{
  uint64_t result;
  TRunGlue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const unsigned __int16 *v37;
  TRunGlue *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  UTF32Char v62;
  BOOL v63;
  int v64;
  BOOL v65;
  int v66;
  const __CFCharacterSet *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int IsLongCharacterMember;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _WORD **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  TRunGlue *v96;
  int v97;
  TRunGlue *v98;
  TRunGlue *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _WORD **v112;
  _QWORD *v113;
  _WORD **v114;

  if (*(_QWORD *)this)
    return 0;
  v7 = this;
  v8 = *((_QWORD *)this + 4);
  if (v8 < 1)
    return 0;
  v9 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = *((_QWORD *)this + 20);
  v15 = *((_QWORD *)this + 22) + 2 * v14;
  v16 = *((_QWORD *)this + 65) + 4 * v14;
  v17 = *((_QWORD *)this + 66);
  v18 = v17 + 8 * v14;
  v19 = 1 - a3;
  v20 = 8;
  v21 = 4;
  v22 = 2;
  while (*(_QWORD *)(v18 + 8 * v13) < a2)
  {
    ++v13;
    ++v19;
    v12 += 8;
    v11 += 4;
    v10 += 2;
    v20 += 8;
    v21 += 4;
    v22 += 2;
    if (v13 == v8)
      return 0;
  }
  v23 = (uint64_t *)(v17 + 8 * v13);
  if (v13 == v8)
  {
    v24 = (_QWORD *)(v17 + 8 * v13);
LABEL_13:
    if (v24 != (_QWORD *)(v17 + 8 * v8))
      return 0;
  }
  else
  {
    v25 = 8 * v8;
    while (v20 != v25)
    {
      v24 = v23 + 1;
      v27 = *v23;
      v26 = v23[1];
      v25 -= 8;
      ++v23;
      if (v26 < v27)
        goto LABEL_13;
    }
  }
  v28 = a4[1] - *a4;
  v29 = a3 - (v28 >> 1);
  if (v29 >= 1)
  {
    v30 = 0;
    v31 = 1;
    if ((*(_WORD *)*a4 & 0xF800) == 0xD800)
      v31 = 2;
    v32 = v31 + a2;
    v33 = v13;
    do
    {
      v34 = *((_QWORD *)v7 + 4);
      if (v33 >= v34)
        return 0;
      v35 = v32 + v30;
      while (*(_QWORD *)(v18 + 8 * v33) < v35)
      {
        if (v34 == ++v33)
          return 0;
      }
      v85 = v32;
      v86 = v30;
      v104 = v29;
      v107 = v28;
      v87 = v15;
      v93 = v16;
      v102 = a3;
      v112 = a5;
      v96 = v7;
      v100 = a6;
      v109 = v9;
      v91 = v18;
      TRunGlue::Delete(v7, v33, 0);
      v18 = v91;
      a6 = v100;
      v9 = v109;
      if (v100)
        *(_QWORD *)(v91 + 8 * v13) = *(_QWORD *)(v100 + 8 * (v35 - v109)) + v109;
      v15 = v87;
      v30 = v86 + 1;
      a3 = v102;
      v29 = v104;
      v16 = v93;
      v7 = v96;
      a5 = v112;
      v28 = v107;
      v32 = v85;
    }
    while (v86 + 1 != v104);
  }
  v36 = v28 >> 1;
  if (v28 >> 1 <= a3)
  {
    v51 = 0;
    v52 = v9;
    v50 = v13;
  }
  else
  {
    v105 = v29;
    v108 = v28;
    v88 = v28 >> 1;
    v103 = a3;
    v97 = *(_DWORD *)(v16 + 4 * v13);
    v113 = a5;
    v37 = *a5 + 1;
    *(_WORD *)(v15 + 2 * v13) = **a5;
    v110 = v9;
    v94 = (v28 >> 1) - a3;
    v38 = v7;
    v39 = a6;
    TRunGlue::DoGlyphInsertion(v7, v37, (unsigned __int16)((v28 >> 1) - a3), 0, 1, v13, v13, 0, 0);
    a6 = v39;
    v9 = v110;
    v7 = v38;
    v40 = *((_QWORD *)v38 + 22);
    v41 = *((_QWORD *)v38 + 20);
    v42 = *((_QWORD *)v38 + 65);
    v16 = v42 + 4 * v41;
    v43 = *((_QWORD *)v38 + 66);
    v18 = v43 + 8 * v41;
    *(_DWORD *)(v16 + 4 * v13) |= 0x80u;
    *(_QWORD *)(v18 + 8 * v13) = v110;
    if (v39)
    {
      if (v108 < 3)
      {
        v50 = v13 + 1;
      }
      else
      {
        v44 = 0;
        v45 = v43 + 8 * v41 + v20;
        v46 = v42 + 4 * v41 + v21;
        v47 = v40 + 2 * v41 + v22;
        v48 = *v113 + 2;
        do
        {
          *(_WORD *)(v47 + 2 * v44) = *(_WORD *)(v48 + 2 * v44);
          v49 = *(_QWORD *)(v39 + 8 + 8 * v44);
          *(_DWORD *)(v46 + 4 * v44) = v97 | ((v49 == 0) << 9) | 0x40;
          *(_QWORD *)(v45 + 8 * v44++) = v49 + v110;
          v50 = v13 + v44 + 1;
        }
        while (v50 < v88 + v13);
      }
      goto LABEL_71;
    }
    v15 = v40 + 2 * v41;
    v50 = v13 + 1;
    v36 = v88;
    if (v13 + 1 >= v94 + v13 + 1)
    {
      v51 = 1;
      a5 = (_WORD **)v113;
      a3 = v103;
    }
    else
    {
      a5 = (_WORD **)v113;
      v53 = (_WORD *)*v113;
      v50 = v88 + v19;
      v54 = v43 + 8 * v41 + v12;
      v55 = v42 + 4 * v41 + v11;
      v56 = v40 + 2 * v41 + v10;
      v51 = 1;
      a3 = v103;
      do
      {
        *(_WORD *)(v56 + 2 * v51) = v53[v51];
        *(_DWORD *)(v55 + 4 * v51) = v97 | 0x240;
        *(_QWORD *)(v54 + 8 * v51++) = v110;
      }
      while (v105 + v51 != 1);
    }
    v29 = 0;
    v52 = v110 + 1;
  }
  v57 = atomic_load((unsigned __int8 *)&qword_1ECDE7900);
  if ((v57 & 1) == 0)
  {
    v99 = v7;
    v111 = v9;
    v77 = a6;
    v78 = a5;
    v79 = a3;
    v80 = v16;
    v81 = v15;
    v82 = v18;
    v106 = v29;
    v90 = v36;
    v83 = __cxa_guard_acquire(&qword_1ECDE7900);
    v36 = v90;
    v29 = v106;
    v18 = v82;
    v15 = v81;
    v16 = v80;
    a3 = v79;
    a5 = v78;
    a6 = v77;
    v9 = v111;
    v7 = v99;
    if (v83)
    {
      _MergedGlobals_20 = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetNonBase);
      __cxa_guard_release(&qword_1ECDE7900);
      v36 = v90;
      v29 = v106;
      v18 = v82;
      v15 = v81;
      v16 = v80;
      a3 = v79;
      a5 = v78;
      a6 = v77;
      v9 = v111;
      v7 = v99;
    }
  }
  v58 = v9 + a3;
  if (v52 < v9 + a3)
  {
    v59 = &qword_1ECDE7000;
    do
    {
      v60 = *((_QWORD *)v7 + 4);
      if (v50 >= v60)
        return 0;
      v61 = v51;
      while (*(_QWORD *)(v18 + 8 * v50) < v52)
      {
        result = 0;
        if (v60 == ++v50)
          return result;
      }
      *(_WORD *)(v15 + 2 * v50) = (*a5)[v51++];
      v62 = *(unsigned __int16 *)(*a4 + 2 * v61);
      v63 = (v62 & 0xFC00) != 0xD800 || v51 == v36;
      v101 = a6;
      if (!v63)
      {
        v64 = *(unsigned __int16 *)(*a4 + 2 * v51);
        v65 = (v64 & 0xFC00) == 56320;
        v66 = v64 + (v62 << 10) - 56613888;
        v51 = v65 ? v61 + 2 : v61 + 1;
        if (v65)
          v62 = v66;
      }
      v67 = (const __CFCharacterSet *)v59[287];
      if (!v67)
        goto LABEL_61;
      v98 = v7;
      v68 = v9;
      v114 = a5;
      v69 = a3;
      v92 = v18;
      v95 = v16;
      v70 = v15;
      v71 = v29;
      v89 = v36;
      IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v67, v62);
      v59 = &qword_1ECDE7000;
      v36 = v89;
      v18 = v92;
      v29 = v71;
      v15 = v70;
      v16 = v95;
      v7 = v98;
      a3 = v69;
      a5 = v114;
      v9 = v68;
      if (IsLongCharacterMember)
      {
        v73 = *(_DWORD *)(v95 + 4 * v50) | 0x40;
      }
      else
      {
LABEL_61:
        v74 = *(_DWORD *)(v16 + 4 * v50);
        if ((v74 & 0x40) == 0)
          goto LABEL_64;
        v73 = v74 & 0xFFFFFFBF;
      }
      *(_DWORD *)(v16 + 4 * v50) = v73;
LABEL_64:
      a6 = v101;
      if (v101)
      {
        v75 = *(_QWORD *)(v101 + 8 * (v52 - v9));
        if (a3 > v75 && (v75 & 0x8000000000000000) == 0)
        {
          v76 = v75 + v9;
          if (v76 != v52)
            *(_QWORD *)(v18 + 8 * v50) = v76;
        }
      }
      ++v50;
      v52 = v52 - v61 + v29 + v51;
      v29 = 0;
    }
    while (v52 < v58);
  }
  v40 = *((_QWORD *)v7 + 22);
LABEL_71:
  TFont::GetUnsummedAdvancesForGlyphs(*((_QWORD *)v7 + 77), v40 + 2 * v13, (double *)(*((_QWORD *)v7 + 23) + 16 * v13), 2, v50 - v13, 0, 0);
  return 1;
}

void TRunGlue::Rotate(TRunGlue *this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int16 GlyphProps;
  uint64_t StringIndex;
  _BOOL4 v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unsigned int v150[2];
  uint64_t v151;
  __int128 v152;
  uint64_t v153[5];
  _BYTE __p[72];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _QWORD v182[5];

  v182[2] = *MEMORY[0x1E0C80C00];
  v5 = a3 - a2;
  if (a3 < a2)
    return;
  v6 = a3;
  v7 = a4 - a3;
  if (a4 <= a3)
    return;
  v8 = a2;
  v10 = a4;
  if (a5 && a3 != a2 && a4 != a3)
  {
    v11 = (char *)(*a5 + 16 * a2);
    v12 = (char *)(*a5 + 16 * a3);
    v13 = *a5 + 16 * a4;
    if (v11 + 16 == v12)
    {
      v20 = *(_QWORD *)v11;
      v21 = *((_QWORD *)v11 + 1);
      v22 = v13 - (_QWORD)v12;
      memmove((void *)(*a5 + 16 * v8), v12, v13 - (_QWORD)v12);
      v11 += v22;
    }
    else
    {
      if (v12 + 16 != (char *)v13)
      {
        v14 = (v12 - v11) >> 4;
        if (v14 == (v13 - (uint64_t)v12) >> 4)
        {
          v15 = 0;
          do
          {
            v16 = &v12[v15];
            v17 = *(_QWORD *)&v11[v15];
            v18 = *(_QWORD *)&v11[v15 + 8];
            *(_OWORD *)&v11[v15] = *(_OWORD *)&v12[v15];
            *(_QWORD *)v16 = v17;
            *((_QWORD *)v16 + 1) = v18;
            if (16 * a3 - 16 * v8 - 16 == v15)
              break;
            v19 = 16 * a4 - 16 * a3 - 16 == v15;
            v15 += 16;
          }
          while (!v19);
        }
        else
        {
          v82 = (v13 - (uint64_t)v12) >> 4;
          v83 = (v12 - v11) >> 4;
          do
          {
            v84 = v83;
            v83 = v82;
            v82 = v84 % v82;
          }
          while (v82);
          if (v83)
          {
            v85 = &v11[16 * v83];
            do
            {
              v87 = *((_QWORD *)v85 - 2);
              v85 -= 16;
              v86 = v87;
              v88 = *((_QWORD *)v85 + 1);
              v89 = &v85[16 * v14];
              v90 = v85;
              do
              {
                v91 = v89;
                *(_OWORD *)v90 = *(_OWORD *)v89;
                v92 = &v89[16 * v14];
                v93 = __OFSUB__(v14, (v13 - (uint64_t)v89) >> 4);
                v94 = v14 - ((v13 - (uint64_t)v89) >> 4);
                v66 = (v94 < 0) ^ v93;
                v89 = &v11[16 * v94];
                if (v66)
                  v89 = v92;
                v90 = v91;
              }
              while (v89 != v85);
              *(_QWORD *)v91 = v86;
              *((_QWORD *)v91 + 1) = v88;
            }
            while (v85 != v11);
          }
        }
        goto LABEL_18;
      }
      v20 = *(_QWORD *)(v13 - 16);
      v21 = *(_QWORD *)(v13 - 8);
      if ((char *)(v13 - 16) != v11)
        memmove(v11 + 16, (const void *)(*a5 + 16 * v8), v13 - 16 - (_QWORD)v11);
    }
    *(_QWORD *)v11 = v20;
    *((_QWORD *)v11 + 1) = v21;
  }
LABEL_18:
  TRunGlue::FocusOnIndex(this, v6);
  v23 = *((_QWORD *)this + 19);
  if (!v23)
  {
LABEL_119:
    if (v6 != v8)
    {
      v108 = 16 * v8;
      v109 = v6;
      do
      {
        if (*((_QWORD *)this + 19))
        {
          *(_OWORD *)__p = xmmword_184948800;
          *(_OWORD *)&__p[16] = unk_184948810;
          *(_OWORD *)&__p[32] = xmmword_184948820;
          *(_OWORD *)&__p[48] = unk_184948830;
          CopyFromStorage((TRunGlue *)__p, this, v8);
          CopyFromStorage((TRunGlue *)&v148, this, v6);
          CopyToStorage(this, v8, (uint64_t)&v148);
          CopyToStorage(this, v6, (uint64_t)__p);
        }
        else
        {
          *(_OWORD *)__p = xmmword_184948800;
          *(_OWORD *)&__p[16] = unk_184948810;
          *(_OWORD *)&__p[32] = xmmword_184948820;
          *(_OWORD *)&__p[48] = unk_184948830;
          v148 = (uint64_t)this;
          *(_QWORD *)&v149 = v8;
          v110 = *((_QWORD *)this + 20);
          v111 = *((_QWORD *)this + 23) + 16 * v110;
          *((_QWORD *)&v149 + 1) = *((_QWORD *)this + 22) + 2 * v110;
          *(_QWORD *)v150 = v111;
          v151 = *((_QWORD *)this + 24) + 16 * v110;
          TRunGlue::TGlyphInVector::operator TStorageRange::GlyphEntry((uint64_t)__p, (uint64_t)&v148);
          v153[0] = (uint64_t)this;
          v153[1] = v6;
          v112 = *((_QWORD *)this + 20);
          v113 = *((_QWORD *)this + 23) + 16 * v112;
          v153[2] = *((_QWORD *)this + 22) + 2 * v112;
          v153[3] = v113;
          v153[4] = *((_QWORD *)this + 24) + 16 * v112;
          TRunGlue::TGlyphInVector::operator TStorageRange::GlyphEntry((uint64_t)&v148, (uint64_t)v153);
          v114 = *((_QWORD *)this + 20);
          v115 = *((_QWORD *)this + 23) + 16 * v114;
          v116 = *((_QWORD *)this + 24) + 16 * v114;
          *(_WORD *)(*((_QWORD *)this + 22) + 2 * v114 + 2 * v8) = v148;
          *(_OWORD *)(v115 + v108) = v149;
          TRunGlue::SetGlyphProps(this, v8, v150[0]);
          TRunGlue::SetStringIndex(this, v8, v151);
          *(_OWORD *)(v116 + v108) = v152;
          v117 = *((_QWORD *)this + 20);
          v118 = *((_QWORD *)this + 23) + 16 * v117;
          v119 = *((_QWORD *)this + 24) + 16 * v117;
          *(_WORD *)(*((_QWORD *)this + 22) + 2 * v117 + 2 * v6) = *(_WORD *)__p;
          *(_OWORD *)(v118 + 16 * v6) = *(_OWORD *)&__p[8];
          TRunGlue::SetGlyphProps(this, v6, *(unsigned int *)&__p[24]);
          TRunGlue::SetStringIndex(this, v6, *(uint64_t *)&__p[32]);
          *(_OWORD *)(v119 + 16 * v6) = *(_OWORD *)&__p[48];
        }
        v120 = v6 + 1;
        if (++v8 == v109)
          v121 = v6 + 1;
        else
          v121 = v109;
        if (v120 == a4)
          v6 = v109;
        else
          ++v6;
        if (v120 != a4)
          v109 = v121;
        v108 += 16;
      }
      while (v8 != v6);
    }
    return;
  }
  v24 = a4 - v8;
  v25 = *((_QWORD *)this + 20);
  v26 = v8 - v25;
  if (v8 < v25 || *((_QWORD *)this + 21) < a4)
  {
    v27 = (uint64_t *)*((_QWORD *)this + 13);
    if (v27
      && (v28 = *v27, v8 < (*(_QWORD *)(*((_QWORD *)this + 13) + 8) - v28) >> 4)
      && (v29 = *(_DWORD *)(v28 + 16 * v8 + 12)) != 0)
    {
      if (v8 < 1)
      {
        v31 = v8;
      }
      else
      {
        v30 = (int *)(v28 + 16 * v8 - 4);
        v31 = v8;
        while (1)
        {
          v32 = *v30;
          v30 -= 4;
          if (v32 != v29)
            break;
          --v31;
          ++v24;
          if ((unint64_t)(v31 + 1) <= 1)
          {
            v31 = 0;
            v24 = a4;
            break;
          }
        }
      }
      v137 = v31;
      v138 = v24 + v31;
      v139 = TRunGlue::length(this);
      if (v138 >= v139)
      {
        v33 = v137;
      }
      else
      {
        v140 = (int *)(**((_QWORD **)this + 13) + 16 * v138 + 12);
        v33 = v137;
        while (1)
        {
          v141 = *v140;
          v140 += 4;
          if (v141 != v29)
            break;
          ++v24;
          if (v137 + v24 >= v139)
          {
            v24 = v139 - v137;
            break;
          }
        }
      }
    }
    else
    {
      v33 = v8;
    }
    *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v180 = v34;
    v181 = v34;
    v178 = v34;
    v179 = v34;
    v176 = v34;
    v177 = v34;
    v174 = v34;
    v175 = v34;
    v172 = v34;
    v173 = v34;
    v170 = v34;
    v171 = v34;
    v168 = v34;
    v169 = v34;
    v167 = v34;
    v166 = v34;
    v165 = v34;
    v164 = v34;
    v163 = v34;
    v162 = v34;
    v161 = v34;
    v160 = v34;
    v159 = v34;
    v158 = v34;
    v157 = v34;
    v156 = v34;
    v155 = v34;
    *(_OWORD *)&__p[56] = v34;
    *(_OWORD *)&__p[40] = v34;
    *(_OWORD *)&__p[24] = v34;
    memset(__p, 0, 24);
    v182[0] = &__p[24];
    if (v24 < 1)
    {
      v38 = 0;
      v39 = 0;
    }
    else
    {
      GlyphProps = TRunGlue::GetGlyphProps(this, v33);
      StringIndex = TRunGlue::GetStringIndex(this, v33);
      if ((GlyphProps & 0x380) != 0)
      {
        v37 = 0;
        goto LABEL_112;
      }
      v54 = StringIndex;
      v55 = 0;
      v56 = v33;
      v143 = v24;
      v144 = v33;
      while (1)
      {
        v58 = *(_QWORD **)&__p[8];
        v57 = *(_QWORD *)&__p[16];
        if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
        {
          v59 = *(_QWORD **)__p;
          v60 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            abort();
          if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 3 > v61)
            v61 = (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 3;
          v62 = *(_QWORD *)&__p[16] - *(_QWORD *)__p >= 0x7FFFFFFFFFFFFFF0uLL ? 0xFFFFFFFFFFFFFFFLL : v61;
          v63 = (char *)v182[0];
          if (v182[0] + 16 * v62 <= (unint64_t)v182)
          {
            v182[0] += 16 * v62;
          }
          else
          {
            if (v62 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v142 = v62;
            v63 = (char *)operator new(16 * v62);
            v62 = v142;
          }
          v64 = (uint64_t *)&v63[16 * v60];
          *v64 = v56;
          v64[1] = v54;
          if (v58 == v59)
          {
            v38 = v64 + 2;
            *(_QWORD *)__p = &v63[16 * v60];
            *(_QWORD *)&__p[8] = v64 + 2;
            v33 = v144;
          }
          else
          {
            v65 = &v63[16 * v60];
            v33 = v144;
            do
            {
              *((_OWORD *)v65 - 1) = *((_OWORD *)v58 - 1);
              v65 -= 16;
              v58 -= 2;
            }
            while (v58 != v59);
            v38 = v64 + 2;
            v58 = *(_QWORD **)__p;
            v57 = *(_QWORD *)&__p[16];
            *(_QWORD *)__p = v65;
            *(_QWORD *)&__p[8] = v64 + 2;
          }
          *(_QWORD *)&__p[16] = &v63[16 * v62];
          v24 = v143;
          if (v58)
          {
            v66 = &__p[24] <= (_BYTE *)v58 && v182 > v58;
            if (v66)
            {
              if (v57 == v182[0])
                v182[0] = v58;
            }
            else
            {
              operator delete(v58);
            }
          }
        }
        else
        {
          **(_QWORD **)&__p[8] = v56;
          v58[1] = v54;
          v38 = v58 + 2;
        }
        *(_QWORD *)&__p[8] = v38;
        if (++v55 == v24)
          break;
        v56 = v55 + v33;
        v67 = TRunGlue::GetGlyphProps(this, v55 + v33);
        v54 = TRunGlue::GetStringIndex(this, v55 + v33);
        if ((v67 & 0x380) != 0)
        {
          v37 = v55 >= v24;
          v10 = a4;
          goto LABEL_112;
        }
      }
      v39 = *(uint64_t **)__p;
      v10 = a4;
    }
    v95 = 126 - 2 * __clz(((char *)v38 - (char *)v39) >> 4);
    if (v38 == v39)
      v96 = 0;
    else
      v96 = v95;
    std::__introsort<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *,false>(v39, v38, v96, 1);
    v97 = *(uint64_t **)__p;
    for (i = *(uint64_t **)&__p[8]; v97 != i; v97 += 2)
    {
      v99 = *v97;
      v101 = *(_QWORD *)(*(_QWORD *)this + 16);
      v100 = *(_QWORD *)(*(_QWORD *)this + 24);
      v148 = 0;
      v153[0] = 0xAAAAAAAAAAAAAAAALL;
      v153[0] = TRunGlue::PhysicalRunIndexWithGlyphIndex(this, v99, &v148);
      if (TLine::SeparateCharWithGlyphIndex(*(TLine **)this, v153, v148))
      {
        v102 = *(_QWORD *)this;
        *(_WORD *)(v102 + 152) = *(_WORD *)(*(_QWORD *)this + 152) | 1;
        v103 = ((uint64_t)(*(_QWORD *)(v102 + 24) - *(_QWORD *)(v102 + 16)) >> 3) - ((v100 - v101) >> 3);
        if (v103 >= 1)
          TRunGlue::UpdateForSplitRun(this, v103);
      }
    }
    *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
    v37 = 1;
LABEL_112:
    if (*(_QWORD *)__p
      && ((*(_QWORD *)&__p[8] = *(_QWORD *)__p, (unint64_t)&__p[24] > *(_QWORD *)__p)
       || (unint64_t)v182 <= *(_QWORD *)__p))
    {
      operator delete(*(void **)__p);
      if (v37)
        goto LABEL_116;
    }
    else if (v37)
    {
LABEL_116:
      v104 = TRunGlue::PhysicalRunIndexWithGlyphIndex(this, v8, (uint64_t *)__p);
      v105 = TRunGlue::PhysicalRunIndexWithGlyphIndex(this, v6, (uint64_t *)__p);
      if (TRunGlue::length(this) <= v10)
      {
        v107 = *((_DWORD *)this + 6);
        v122 = *((_QWORD *)this + 1);
        if (v107 < 1)
          v106 = v122 - 1;
        else
          v106 = *((_QWORD *)this + 2) + v122;
      }
      else
      {
        v106 = TRunGlue::PhysicalRunIndexWithGlyphIndex(this, v10, (uint64_t *)__p);
        v107 = *((_DWORD *)this + 6);
      }
      if (v107 < 0)
        v123 = v106 + 1;
      else
        v123 = v104;
      if (v107 < 0)
        v124 = v104 + 1;
      else
        v124 = v106;
      v125 = v105 + (v107 >> 31);
      v126 = *(_QWORD *)this;
      if (v123 != v125)
      {
        v127 = v125 - 1;
        v128 = v123;
        do
        {
          if (v128 == v127)
            break;
          v129 = *(_QWORD *)(v126 + 16);
          v130 = *(_QWORD *)(v129 + 8 * v128);
          *(_QWORD *)(v129 + 8 * v128) = *(_QWORD *)(v129 + 8 * v127);
          *(_QWORD *)(v129 + 8 * v127) = v130;
          *(_WORD *)(v126 + 154) |= 0x40u;
          v19 = v128++ == --v127;
        }
        while (!v19);
        v126 = *(_QWORD *)this;
      }
      if (v125 != v124)
      {
        v131 = v124 - 1;
        do
        {
          if (v125 == v131)
            break;
          v132 = *(_QWORD *)(v126 + 16);
          v133 = *(_QWORD *)(v132 + 8 * v125);
          *(_QWORD *)(v132 + 8 * v125) = *(_QWORD *)(v132 + 8 * v131);
          *(_QWORD *)(v132 + 8 * v131) = v133;
          *(_WORD *)(v126 + 154) |= 0x40u;
          v19 = v125++ == --v131;
        }
        while (!v19);
        v126 = *(_QWORD *)this;
      }
      if (v123 != v124)
      {
        v134 = v124 - 1;
        do
        {
          if (v123 == v134)
            break;
          v135 = *(_QWORD *)(v126 + 16);
          v136 = *(_QWORD *)(v135 + 8 * v123);
          *(_QWORD *)(v135 + 8 * v123) = *(_QWORD *)(v135 + 8 * v134);
          *(_QWORD *)(v135 + 8 * v134) = v136;
          *(_WORD *)(v126 + 154) |= 0x40u;
          v19 = v123++ == --v134;
        }
        while (!v19);
      }
      return;
    }
    goto LABEL_119;
  }
  if (v5 <= v7)
  {
    v68 = v6 - v25;
    v145 = a4 - v6;
    v69 = v8 - v25;
    v70 = v68 - v26;
    objc_msgSend(*(id *)(v23 + 216), "initGlyphStackWithCapacity:", v68 - v26);
    if (v70 >= 1)
    {
      v71 = v69;
      v72 = v5;
      do
      {
        objc_msgSend(*(id *)(v23 + 216), "pushGlyphAtIndex:", v71 + *(_QWORD *)(v23 + 200));
        ++v71;
        --v72;
      }
      while (v72);
    }
    if (v145 >= 1)
    {
      v73 = v68;
      do
      {
        v74 = *(_QWORD **)(v23 + 216);
        v75 = *(_QWORD *)(v23 + 200);
        v76 = *(_DWORD *)(v74[5] + 4 * v75 + 4 * v73);
        if ((v76 & 0x40) != 0)
          objc_msgSend(v74, "setProps:atIndex:", v76 & 0xFFFFEFBF | 0x1000, v73 + v75);
        ++v73;
        --v7;
      }
      while (v7);
    }
    objc_msgSend(*(id *)(v23 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v23 + 200) + v68, v145, *(_QWORD *)(v23 + 200) + v69);
    if (v70 >= 1)
    {
      v77 = v5 + 1;
      v78 = ~v25 + a4;
      do
      {
        objc_msgSend(*(id *)(v23 + 216), "popGlyphAtIndex:", v78 + *(_QWORD *)(v23 + 200));
        v79 = *(_QWORD **)(v23 + 216);
        v80 = *(_QWORD *)(v23 + 200);
        v81 = *(_DWORD *)(v79[5] + 4 * v80 + 4 * v78);
        if ((v81 & 0x40) != 0)
          objc_msgSend(v79, "setProps:atIndex:", v81 & 0xFFFFEFBF | 0x1000, v78 + v80);
        --v77;
        --v78;
      }
      while (v77 > 1);
    }
  }
  else
  {
    v147 = v8 - v25;
    v40 = ~v8 + v6;
    v41 = v24 - v5;
    objc_msgSend(*(id *)(v23 + 216), "initGlyphStackWithCapacity:", v24 - v5);
    if (v24 - v5 >= 1)
    {
      v42 = v147 + v5;
      v43 = v24 - v5;
      do
      {
        objc_msgSend(*(id *)(v23 + 216), "pushGlyphAtIndex:", v42 + *(_QWORD *)(v23 + 200));
        ++v42;
        --v43;
      }
      while (v43);
    }
    if ((v40 & 0x8000000000000000) == 0)
    {
      v44 = v8 - v25;
      v45 = v5;
      do
      {
        v46 = *(_QWORD **)(v23 + 216);
        v47 = *(_QWORD *)(v23 + 200);
        v48 = *(_DWORD *)(v46[5] + 4 * v47 + 4 * v44);
        if ((v48 & 0x40) != 0)
          objc_msgSend(v46, "setProps:atIndex:", v48 & 0xFFFFEFBF | 0x1000, v44 + v47);
        ++v44;
        --v45;
      }
      while (v45);
    }
    objc_msgSend(*(id *)(v23 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v23 + 200) + v147, v5, v147 + v41 + *(_QWORD *)(v23 + 200));
    if (v41 >= 1)
    {
      v49 = ~v25 + v8;
      v50 = 4 * v8 - 4 * v25 - 4;
      do
      {
        objc_msgSend(*(id *)(v23 + 216), "popGlyphAtIndex:", v49 + v41 + *(_QWORD *)(v23 + 200));
        v51 = *(_QWORD **)(v23 + 216);
        v52 = *(_QWORD *)(v23 + 200);
        v53 = *(_DWORD *)(v51[5] + 4 * v52 + v50 + 4 * v41);
        if ((v53 & 0x40) != 0)
          objc_msgSend(v51, "setProps:atIndex:", v53 & 0xFFFFEFBF | 0x1000, v49 + v41 + v52);
        --v41;
      }
      while ((unint64_t)(v41 + 1) > 1);
    }
  }
  objc_msgSend(*(id *)(v23 + 216), "disposeGlyphStack");
  *(_DWORD *)(*((_QWORD *)this + 19) + 256) = 2;
}

uint64_t TRunGlue::PhysicalRunIndexWithGlyphIndex(TRunGlue *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (a2 < 0)
    return -1;
  v4 = a2;
  if (*((int *)this + 6) < 1)
  {
    TRunGlue::FocusOnIndex(this, a2);
    *a3 = v4 - *((_QWORD *)this + 20);
    return TRunGlue::PhysicalRunIndexFromLogical(this, *((_QWORD *)this + 16));
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(*(_QWORD *)this + 16);
  v8 = *(_QWORD *)(*(_QWORD *)this + 24);
  v9 = v7 + 8 * v6;
  if (v9 != v8)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 40) + 208) + v10;
      if (v11 > a2)
        break;
      v9 += 8;
      v10 = v11;
      if (v9 == v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)this + 24);
        goto LABEL_10;
      }
    }
    v4 = a2 - v10;
  }
LABEL_10:
  result = (v9 - v7) >> 3;
  if (v6 > result || *((_QWORD *)this + 2) + v6 <= result)
    return -1;
  *a3 = v4;
  return result;
}

_QWORD *TRunGlue::UpdateForSplitRun(TRunGlue *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 2) += a2;
  *((_QWORD *)this + 18) += a2;
  v3 = *(_QWORD *)this;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16)
                             + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, *((_QWORD *)this + 16)))
                 + 48);
  *((_QWORD *)this + 19) = v4;
  *((_QWORD *)this + 21) = *(_QWORD *)(v4 + 208) + *((_QWORD *)this + 20);
  return TRunGlue::UpdateForCurrentRealRun(this);
}

char **TRunGlue::InsertGlyphs(TRunGlue *this, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  CFIndex v29;
  _QWORD v30[2];
  CFRange v31;

  length = a2.length;
  location = a2.location;
  v5 = TRunGlue::length(this);
  if (v5 - 1 >= location)
    v6 = location;
  else
    v6 = v5 - 1;
  TRunGlue::FocusOnIndex(this, v6);
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    if (v7 != *((_QWORD *)this + 67))
    {
      v8 = objc_msgSend(*(id *)(v7 + 216), "copyWithRange:", *(_QWORD *)(v7 + 200), *(_QWORD *)(v7 + 208));

      *(_QWORD *)(v7 + 216) = v8;
      *(_QWORD *)(v7 + 200) = 0;
      v7 = *((_QWORD *)this + 19);
      *((_QWORD *)this + 67) = v7;
    }
    v31.location = location - *((_QWORD *)this + 20);
    v31.length = length;
    TStorageRange::InsertGlyphs((id *)(v7 + 192), v31);
  }
  else
  {
    result = (char **)std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(*((_QWORD *)this + 73), *((_QWORD *)this + 20) + location, length, (uint64_t)this + 176, (uint64_t)this + 184, (uint64_t)this + 192, (uint64_t)this + 528);
    if (!(_DWORD)result)
      return result;
    if (*((_QWORD *)this + 65))
    {
      v10 = *((_QWORD *)this + 46);
      if (v10 != *((_QWORD *)this + 47))
      {
        v11 = (char *)(v10 + 4 * *((_QWORD *)this + 20) + 4 * location);
        LODWORD(v30[0]) = 0;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::insert((uint64_t *)this + 46, v11, length, (char *)v30);
        *((_QWORD *)this + 65) = *((_QWORD *)this + 46);
      }
    }
    else
    {
      v12 = TRunGlue::length(this);
      v13 = length + v12 + 14;
      if (length + v12 + 7 >= 0)
        v13 = length + v12 + 7;
      v14 = v13 >> 3;
      v15 = *((_QWORD *)this + 26);
      v16 = *((_QWORD *)this + 27) - v15;
      if (v14 <= v16)
      {
        if (v14 < v16)
          *((_QWORD *)this + 27) = v15 + v14;
      }
      else
      {
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__append((_QWORD *)this + 26, v14 - v16);
      }
      v17 = TRunGlue::length(this);
      v18 = location + length;
      if (v17 >= location + length)
      {
        do
        {
          v19 = v17 + *((_QWORD *)this + 20);
          v20 = v19 + 1;
          v21 = v19 + 7;
          if (v19 >= 0)
            v21 = v17 + *((_QWORD *)this + 20);
          v22 = v21 >> 3;
          v23 = *((_QWORD *)this + 26);
          v24 = v19 & 7;
          v25 = 1 << (v20 & 7);
          v26 = v20 / 8;
          if (((*(unsigned __int8 *)(v23 + v22) >> v24) & 1) != 0)
            v27 = *(_BYTE *)(v23 + v26) | v25;
          else
            v27 = *(_BYTE *)(v23 + v26) & ~(_BYTE)v25;
          *(_BYTE *)(v23 + v26) = v27;
        }
        while (v17-- > v18);
      }
      if (length >= 1)
      {
        v29 = location;
        do
        {
          *(_BYTE *)(*((_QWORD *)this + 26) + (v29 + *((_QWORD *)this + 20)) / 8) &= ~(1 << ((v29
                                                                                            + *((_BYTE *)this + 160)) & 7));
          ++v29;
        }
        while (v29 < v18);
      }
    }
  }
  TRunGlue::InsertedGlyphs(this, length);
  result = (char **)*((_QWORD *)this + 13);
  v30[0] = 0;
  v30[1] = 0;
  if (location <= (result[1] - *result) >> 4)
    return std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::insert(result, (uint64_t)&(*result)[16 * location], length, (char *)v30);
  return result;
}

uint64_t std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v11 = a5;
  v12 = a4;
  v9 = a7;
  v10 = a6;
  if (a1)
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, v13, &v12, &v11, &v10, &v9);
  v8 = std::__throw_bad_function_call[abi:nn180100]();
  return std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::resize(v8);
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t *std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::insert(uint64_t *result, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[5];

  if (a3)
  {
    v4 = a4;
    v6 = __src;
    v7 = (uint64_t)result;
    v8 = (char *)result[1];
    v9 = result[2];
    if (a3 <= (v9 - (uint64_t)v8) >> 2)
    {
      v17 = v8 - __src;
      if (a3 <= (v8 - __src) >> 2)
      {
        v20 = (char *)result[1];
        v19 = a3;
      }
      else
      {
        v18 = 0;
        v19 = v17 >> 2;
        v20 = &v8[4 * (a3 - (v17 >> 2))];
        do
        {
          *(_DWORD *)&v8[v18] = *(_DWORD *)a4;
          v18 += 4;
        }
        while (4 * a3 - 4 * v19 != v18);
        result[1] = (uint64_t)v20;
        if (v8 == __src)
          return result;
      }
      v21 = &__src[4 * a3];
      v22 = &v20[-4 * a3];
      v23 = v20;
      if (v22 < v8)
      {
        v23 = v20;
        do
        {
          v24 = *(_DWORD *)v22;
          v22 += 4;
          *(_DWORD *)v23 = v24;
          v23 += 4;
        }
        while (v22 < v8);
      }
      result[1] = (uint64_t)v23;
      if (v20 != v21)
        result = (uint64_t *)memmove(&v20[-4 * ((v20 - v21) >> 2)], __src, v20 - v21);
      if (v6 <= v4)
      {
        if (*(_QWORD *)(v7 + 8) <= (unint64_t)v4)
          v25 = 0;
        else
          v25 = a3;
        v4 += 4 * v25;
      }
      do
      {
        *(_DWORD *)v6 = *(_DWORD *)v4;
        v6 += 4;
        --v19;
      }
      while (v19);
    }
    else
    {
      v10 = *result;
      v11 = a3 + ((uint64_t)&v8[-*result] >> 2);
      if (v11 >> 62)
        abort();
      v12 = (uint64_t)&__src[-v10] >> 2;
      v13 = (uint64_t)(result + 3);
      v14 = v9 - v10;
      if (v14 >> 1 > v11)
        v11 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v11;
      v29[4] = v7 + 24;
      if (v15)
        v16 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate(v13, v15);
      else
        v16 = 0;
      v26 = &v16[4 * v12];
      v29[0] = v16;
      v29[1] = v26;
      v29[3] = &v16[4 * v15];
      v27 = 4 * a3;
      v28 = &v26[4 * a3];
      do
      {
        *(_DWORD *)v26 = *(_DWORD *)v4;
        v26 += 4;
        v27 -= 4;
      }
      while (v27);
      v29[2] = v28;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__swap_out_circular_buffer((void **)v7, (uint64_t)v29, v6);
      return (uint64_t *)std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)v29);
    }
  }
  return result;
}

void TRunGlue::TGlyphInVector::operator TStorageRange::GlyphEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  TRunGlue *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(TRunGlue **)a2;
  *(_WORD *)a1 = *(_WORD *)(v4 + 2 * v6);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v5 + 16 * v6);
  *(_DWORD *)(a1 + 24) = TRunGlue::GetGlyphProps(v7, v6);
  *(_QWORD *)(a1 + 32) = TRunGlue::GetStringIndex(*(TRunGlue **)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = TRunGlue::GetOrigin(*(TRunGlue **)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 56) = v8;
}

void TRunGlue::FilterJoiner(TRunGlue *this, TRunGlue::TGlyph *a2, unsigned __int16 *a3)
{
  uint64_t v6;

  v6 = *a3;
  if ((_DWORD)v6
    || ((*(void (**)(_QWORD, uint64_t, uint64_t, unsigned __int16 *))(**(_QWORD **)(*((_QWORD *)this + 77)
                                                                                           + 400)
                                                                             + 672))(*(_QWORD *)(*((_QWORD *)this + 77) + 400), 32, 1, a3), (v6 = *a3) != 0))
  {
    if ((_DWORD)v6 != 0xFFFF)
    {
      TRunGlue::SetGlyphID<true>(*(TRunGlue **)a2, *((_QWORD *)a2 + 1), v6);
      TRunGlue::SetAdvance(*(_QWORD **)a2, *((_QWORD *)a2 + 1), *MEMORY[0x1E0C9D820]);
      TRunGlue::OrGlyphProps(*(TRunGlue **)a2, *((_QWORD *)a2 + 1), 0x20u);
      return;
    }
  }
  else
  {
    *a3 = -1;
  }
  TRunGlue::Delete(this, *((_QWORD *)a2 + 1), 0);
}

uint64_t TRunGlue::GlyphRangeForGlyphIndex(TRun **this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if (this[19])
  {
    TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    return (uint64_t)this[20] + TRun::GetGlyphRangeForGlyphIndex(this[19], v2 - (_QWORD)this[20]);
  }
  else if ((a2 & 0x8000000000000000) == 0 && TRunGlue::length((TRunGlue *)this) > a2)
  {
    v4 = v2;
    while (1)
    {
      v5 = *((int *)this + 6);
      v4 += v5;
      if (v4 < 0 || (uint64_t)this[4] <= v4)
        break;
      if (!TRunGlue::IsDeleted((TRunGlue *)this, v4))
      {
        v5 = *((int *)this + 6);
        break;
      }
    }
    v6 = v4 - v5;
    if (v6 < v2)
      return v6;
  }
  return v2;
}

uint64_t TRun::GetGlyphRangeForGlyphIndex(TRun *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v2 = 1;
  if ((*((_BYTE *)this + 224) & 1) != 0)
    v2 = -1;
  v3 = a2;
  if (v2 + a2 >= 0)
  {
    v4 = *((_QWORD *)this + 26);
    v3 = a2;
    if (v4 > v2 + a2)
    {
      v5 = *((_QWORD *)this + 27);
      v6 = *((_QWORD *)this + 25);
      v7 = 2 * v2;
      v8 = 4 * v2 + 4 * v6;
      v9 = *(_QWORD *)(v5 + 16) + 2 * v2 + 2 * v6;
      v3 = a2;
      do
      {
        if (*(__int16 *)(v9 + 2 * v3) != -1 && (*(_DWORD *)(*(_QWORD *)(v5 + 40) + v8 + 4 * v3) & 0x20) == 0)
          break;
        v11 = v7 + v3;
        v10 = v7 + v3 < 0;
        v3 += v2;
        if (v10)
          break;
      }
      while (v4 > v11);
    }
  }
  if (v3 >= a2)
    return a2;
  else
    return v3;
}

uint64_t CopyFromStorage(TRunGlue *a1, TRunGlue *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a3;
  v5 = TRunGlue::PhysicalRunIndexWithGlyphIndex(this, a3, &v8);
  if (v5 == -1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * v5) + 48);
  return TStorageRange::GetGlyphEntry((TStorageRange *)(v6 + 192), v8, (uint64_t)a1);
}

uint64_t CopyToStorage(TRunGlue *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const TStorageRange *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v5 = TRunGlue::PhysicalRunIndexWithGlyphIndex(a1, a2, &v13);
  if (v5 == -1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * v5) + 48);
  result = TStorageRange::SetGlyphEntry(v6 + 192, v13, (unsigned __int16 *)a3);
  *(_DWORD *)(v6 + 256) = 2;
  v9 = *(_QWORD *)(v6 + 8);
  v10 = *(_QWORD *)(a3 + 32);
  if (v9 > v10 || *(_QWORD *)(v6 + 16) + v9 <= v10)
  {
    result = TRunGlue::ActualCharRangeForStorage((TRunGlue *)(v6 + 192), v8);
    *(_QWORD *)(v6 + 8) = result;
    *(_QWORD *)(v6 + 16) = v12;
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) < v8[1])
        {
          v42 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v42;
          v43 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        if (*(a2 - 1) < v8[7])
        {
          v44 = v8[6];
          v8[6] = *(a2 - 2);
          *(a2 - 2) = v44;
          v45 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v45;
          v46 = v8[7];
          v47 = v8[5];
          if (v46 < v47)
          {
            v48 = v8[6];
            v49 = v8[3];
            v50 = v8[4];
            v8[4] = v48;
            v8[5] = v46;
            v8[6] = v50;
            v8[7] = v47;
            if (v46 < v49)
            {
              v51 = v8[1];
              v52 = v8[2];
              v8[2] = v48;
              v8[3] = v46;
              v8[4] = v52;
              v8[5] = v49;
              if (v46 < v51)
              {
                v53 = *v8;
                *v8 = v48;
                v8[1] = v46;
                v8[2] = v53;
                v8[3] = v51;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v54 = v8 + 2;
          v56 = v8 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v8;
              do
              {
                v59 = v58[3];
                v60 = v58[1];
                v58 = v54;
                if (v59 < v60)
                {
                  v61 = *v54;
                  v62 = v57;
                  while (1)
                  {
                    v63 = (char *)v8 + v62;
                    v64 = *(uint64_t *)((char *)v8 + v62 + 8);
                    *((_QWORD *)v63 + 2) = *(uint64_t *)((char *)v8 + v62);
                    *((_QWORD *)v63 + 3) = v64;
                    if (!v62)
                      break;
                    v62 -= 16;
                    if (v59 >= *((_QWORD *)v63 - 1))
                    {
                      v65 = (uint64_t *)((char *)v8 + v62 + 16);
                      goto LABEL_82;
                    }
                  }
                  v65 = v8;
LABEL_82:
                  *v65 = v61;
                  v65[1] = v59;
                }
                v54 = v58 + 2;
                v57 += 16;
              }
              while (v58 + 2 != a2);
            }
          }
          else if (!v56)
          {
            v96 = v8 + 3;
            do
            {
              v97 = v7[3];
              v98 = v7[1];
              v7 = v54;
              if (v97 < v98)
              {
                v99 = *v54;
                v100 = v96;
                do
                {
                  v101 = v100;
                  v102 = *(v100 - 4);
                  *(v100 - 1) = *(v100 - 3);
                  v103 = *(v100 - 2);
                  v100 -= 2;
                  *v101 = v103;
                }
                while (v97 < v102);
                *(v100 - 1) = v99;
                *v100 = v97;
              }
              v54 = v7 + 2;
              v96 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v8[2 * v69];
                if (2 * v68 + 2 < (uint64_t)v10)
                {
                  v71 = v70[1];
                  v72 = v70[3];
                  v70 += 2 * (v71 < v72);
                  if (v71 < v72)
                    v69 = 2 * v68 + 2;
                }
                v73 = v8[2 * v68 + 1];
                if (v70[1] >= v73)
                {
                  result = &v8[2 * v68];
                  v74 = *result;
                  do
                  {
                    v75 = v70;
                    *result = *v70;
                    result[1] = v70[1];
                    if (v66 < v69)
                      break;
                    v76 = (2 * v69) | 1;
                    v70 = &v8[2 * v76];
                    v77 = 2 * v69 + 2;
                    if (v77 < (uint64_t)v10)
                    {
                      v78 = v70[1];
                      v79 = v70[3];
                      v70 += 2 * (v78 < v79);
                      if (v78 < v79)
                        v76 = v77;
                    }
                    result = v75;
                    v69 = v76;
                  }
                  while (v70[1] >= v73);
                  *v75 = v74;
                  v75[1] = v73;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v80 = (unint64_t)v9 >> 4;
            do
            {
              v81 = 0;
              v82 = *v8;
              v83 = v8[1];
              v84 = v8;
              do
              {
                v85 = &v84[2 * v81 + 2];
                v86 = (2 * v81) | 1;
                v87 = 2 * v81 + 2;
                if (v87 < v80)
                {
                  v88 = v85[1];
                  v89 = v85[3];
                  v85 += 2 * (v88 < v89);
                  if (v88 < v89)
                    v86 = v87;
                }
                *v84 = *v85;
                v84[1] = v85[1];
                v84 = v85;
                v81 = v86;
              }
              while (v86 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              if (v85 == a2 - 2)
              {
                *v85 = v82;
                v85[1] = v83;
              }
              else
              {
                *v85 = *(a2 - 2);
                v85[1] = *(a2 - 1);
                *(a2 - 2) = v82;
                *(a2 - 1) = v83;
                v90 = (char *)v85 - (char *)v8 + 16;
                if (v90 >= 17)
                {
                  v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
                  v92 = v85[1];
                  if (v8[2 * v91 + 1] < v92)
                  {
                    v93 = *v85;
                    do
                    {
                      v94 = v85;
                      v85 = &v8[2 * v91];
                      *v94 = *v85;
                      v94[1] = v85[1];
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                    }
                    while (v8[2 * v91 + 1] < v92);
                    *v85 = v93;
                    v85[1] = v92;
                  }
                }
              }
              a2 -= 2;
            }
            while (v80-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = v7[1];
          if (*(v7 - 1) < v14)
            goto LABEL_12;
          if (v14 >= *(a2 - 1))
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v33 = v32[1];
              v32 += 2;
            }
            while (v14 >= v33);
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 2;
              v31 = v30[3];
              v30 += 2;
            }
            while (v14 >= v31);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 2;
              v36 = *(v35 - 1);
              v35 -= 2;
            }
            while (v14 < v36);
          }
          v37 = *v7;
          while (v8 < v34)
          {
            v38 = *v8;
            *v8 = *v34;
            *v34 = v38;
            v39 = v8[1];
            v8[1] = v34[1];
            v34[1] = v39;
            do
            {
              v40 = v8[3];
              v8 += 2;
            }
            while (v14 >= v40);
            do
            {
              v41 = *(v34 - 1);
              v34 -= 2;
            }
            while (v14 < v41);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v37;
          *(v8 - 1) = v14;
          continue;
        }
        v14 = v7[1];
LABEL_12:
        v15 = 0;
        v16 = *v7;
        do
        {
          v17 = v7[v15 + 3];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &v7[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 < v14)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
LABEL_22:
        if (v18 >= v20)
        {
          v8 = v18;
        }
        else
        {
          v24 = v20;
          v8 = v18;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = v8[1];
            v8[1] = v24[1];
            v24[1] = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 < v14);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 >= v14);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v14;
        if (v18 < v20)
        {
LABEL_35:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v7, v8 - 2);
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_35;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = result + 1;
  v6 = a3[1];
  if (v4 < result[1])
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] >= v11)
        return result;
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v5 = a2 + 1;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
    }
    v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] < *v5)
    {
      v10 = *result;
      *result = *a2;
      *a2 = v10;
LABEL_10:
      v13 = *v5;
      *v5 = *v3;
      *v3 = v13;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        v20 = a1[7];
        v21 = a1[5];
        if (v20 < v21)
        {
          v22 = a1[6];
          v23 = a1[3];
          v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            v25 = a1[1];
            v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = v9[1];
    if (v12 < v8[1])
    {
      v13 = *v9;
      v14 = v10;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32)
          break;
        v14 -= 16;
        if (v12 >= v15[3])
        {
          v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v13;
      v17[1] = v12;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TRunGlue::SeparateCharactersInGlyphRange(CFRange)::$_0 &,std::pair<long,long> *>(a1, a2, a3);
  if (a4[1] < a3[1])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] < a2[1])
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] < a1[1])
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__append(_QWORD *a1, size_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;

  v6 = a1 + 1;
  v4 = (char *)a1[1];
  v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v12 = &v4[a2];
      bzero(v4, a2);
      v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    v7 = &v4[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v5 - *a1;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (void *)a1[19];
      if ((char *)v11 + v10 <= (char *)(a1 + 19))
        a1[19] = (char *)v11 + v10;
      else
        v11 = operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[(_QWORD)v11];
    v14 = (char *)v11 + v10;
    v15 = &v13[a2];
    bzero(v13, a2);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      v20 = (char *)(a1 + 19);
      if (a1 + 3 <= (_QWORD *)v16 && v20 > v16)
      {
        if (v19 == *(_QWORD *)v20)
          *(_QWORD *)v20 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

char **std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::insert(char **result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  _QWORD v39[5];

  if (a3)
  {
    v4 = a4;
    v6 = result;
    v8 = *result;
    v7 = result[1];
    v9 = a2 - (_QWORD)*result;
    v10 = &(*result)[v9 & 0xFFFFFFFFFFFFFFF0];
    v11 = result[2];
    if (a3 <= (v11 - v7) >> 4)
    {
      v18 = v7 - v10;
      if (a3 <= (v7 - v10) >> 4)
      {
        v21 = result[1];
        v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 4;
        v21 = &v7[16 * (a3 - (v18 >> 4))];
        do
        {
          *(_OWORD *)&v7[v19] = *(_OWORD *)a4;
          v19 += 16;
        }
        while (16 * a3 - 16 * v20 != v19);
        result[1] = v21;
        if (v7 == v10)
          return result;
      }
      v22 = &v10[16 * a3];
      v23 = &v21[-16 * a3];
      v24 = v21;
      if (v23 < v7)
      {
        v24 = v21;
        do
        {
          v25 = *(_OWORD *)v23;
          v23 += 16;
          *(_OWORD *)v24 = v25;
          v24 += 16;
        }
        while (v23 < v7);
      }
      result[1] = v24;
      if (v21 != v22)
        result = (char **)memmove(&v21[-16 * ((v21 - v22) >> 4)], v10, v21 - v22);
      if (v10 <= v4)
      {
        if (v6[1] <= v4)
          v26 = 0;
        else
          v26 = a3;
        v4 += 16 * v26;
      }
      do
      {
        *(_OWORD *)v10 = *(_OWORD *)v4;
        v10 += 16;
        --v20;
      }
      while (v20);
    }
    else
    {
      v12 = a3 + ((v7 - v8) >> 4);
      if (v12 >> 60)
        abort();
      v13 = v9 >> 4;
      v14 = (uint64_t)(result + 3);
      v15 = v11 - v8;
      if (v15 >> 3 > v12)
        v12 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v12;
      v39[4] = v6 + 3;
      if (v16)
        v17 = TInlineBufferAllocator<CGPoint,30ul>::allocate(v14, v16);
      else
        v17 = 0;
      v27 = &v17[16 * v13];
      v28 = &v17[16 * v16];
      v29 = 16 * a3;
      v30 = v27;
      v31 = &v27[16 * a3];
      do
      {
        *(_OWORD *)v30 = *(_OWORD *)v4;
        v30 += 16;
        v29 -= 16;
      }
      while (v29);
      v32 = *v6;
      if (*v6 == v10)
      {
        v34 = &v17[16 * v13];
      }
      else
      {
        v33 = v10;
        do
        {
          v34 = v27 - 16;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v33 - 1);
          v33 -= 16;
          v27 -= 16;
        }
        while (v33 != v32);
      }
      v35 = v6[1];
      v36 = v35 - v10;
      if (v35 != v10)
      {
        memmove(v31, v10, v35 - v10);
        v10 = v6[1];
      }
      v37 = *v6;
      *v6 = v34;
      v6[1] = &v31[v36];
      v38 = v6[2];
      v6[2] = v28;
      v39[2] = v10;
      v39[3] = v38;
      v39[0] = v37;
      v39[1] = v37;
      return (char **)std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)v39);
    }
  }
  return result;
}

void TOpenTypeMorph::SetLookups(TOpenTypeMorph *this, unsigned int *a2, OTL::GlyphLookups *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  _BOOL4 Lookups;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  char **v33;
  char *v34[34];
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  _OWORD v38[7];
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 4);
  v27 = *((_QWORD *)this + 5) - v4;
  if (v27)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *a2;
    if (*a2)
    {
      v8 = 0;
      v9 = v27 >> 4;
      v30 = (char *)this + 640;
      do
      {
        v29 = v8;
        v39 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[5] = v10;
        v38[6] = v10;
        v38[3] = v10;
        v38[4] = v10;
        v38[1] = v10;
        v38[2] = v10;
        v38[0] = v10;
        v36 = 0;
        v37 = 0;
        v35 = 0;
        v40 = v38;
        if (v27 >= 1)
        {
          v11 = 0;
          v31 = 0;
          v12 = 1;
          do
          {
            if (v9 <= v11 + 1)
              v13 = v11 + 1;
            else
              v13 = v27 >> 4;
            v14 = v11;
            while (1)
            {
              v15 = *(int **)(v4 + 16 * v14);
              if (v15)
              {
                v16 = *v15;
                if (*v15)
                  break;
              }
LABEL_18:
              if (++v14 >= v9)
              {
                v14 = v13;
                goto LABEL_21;
              }
            }
            v17 = v15 + 1;
            while (v16 != v6)
            {
              v18 = *v17++;
              v16 = v18;
              if (!v18)
                goto LABEL_18;
            }
            v31 = *(unsigned int *)(v4 + 16 * v14 + 12);
LABEL_21:
            if (v14 == v9)
              break;
            v11 = v14 + 1;
            if (v14 + 1 < v9)
            {
              while (1)
              {
                v19 = *(int **)(v4 + 16 * v11);
                if (!v19)
                  break;
                if (v31 != *(_DWORD *)(v4 + 16 * v11 + 12))
                  break;
                v20 = *v19;
                if (!*v19)
                  break;
                v21 = v19 + 1;
                while (v20 != v6)
                {
                  v22 = *v21++;
                  v20 = v22;
                  if (!v22)
                    goto LABEL_32;
                }
                if (++v11 == v9)
                {
                  v11 = v27 >> 4;
                  break;
                }
              }
            }
LABEL_32:
            if ((v12 & 1) != 0)
            {
              v32 = v6;
              OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(v34, &v32, &v33);
              Lookups = OTL::GCommon::GetLookups((uint64_t)v30, (uint64_t)v34, (uint64_t)&v35, 0);
              v33 = v34;
              std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v33);
              if (!Lookups)
                break;
            }
            v24 = v35;
            v25 = v36;
            while (v24 != v25)
            {
              v26 = *v24++;
              v3 = v3 & 0xFFFFFFFF00000000 | v26;
              OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)a3, v3, v14, v11 - v14);
            }
            v12 = 0;
          }
          while (v11 < v9);
        }
        v34[0] = (char *)&v35;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v34);
        v8 = v29 + 1;
        v6 = a2[v29 + 1];
      }
      while (v6);
    }
  }
}

void TOpenTypeMorph::SetPresentationLookups(TOpenTypeMorph *this, const unsigned int *a2, OTL::GlyphLookups *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  _BOOL4 Lookups;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  int64x2_t *v36;
  int64x2_t v37;
  char *v38;
  _OWORD *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  _OWORD v43[7];
  unint64_t v44;
  _OWORD *v45;
  int64x2_t v46;
  char *v47;
  _OWORD v48[15];
  _OWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5);
  if (v3 != v4 && v4 != 0)
  {
    v8 = 0;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v43[6] = v9;
    v43[5] = v9;
    v35 = v3 - v4;
    v10 = (v3 - v4) >> 4;
    v43[4] = v9;
    v43[2] = v9;
    v43[3] = v9;
    v43[0] = v9;
    v43[1] = v9;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v44 = 0xAAAAAAAAAAAAAAAALL;
    v45 = v43;
    v34 = (char *)this + 640;
    v11 = (unint64_t)v48;
    v48[14] = v9;
    v48[13] = v9;
    v48[12] = v9;
    v48[11] = v9;
    v48[10] = v9;
    v48[9] = v9;
    v48[8] = v9;
    v48[7] = v9;
    v48[6] = v9;
    v48[5] = v9;
    v48[4] = v9;
    v48[3] = v9;
    v48[2] = v9;
    v48[1] = v9;
    v48[0] = v9;
    v46 = 0uLL;
    v47 = 0;
    v49 = v48;
    do
    {
      if (v8 >= v47)
      {
        v12 = (uint64_t)&v8[-v46.i64[0]] >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          abort();
        v13 = (uint64_t)&v47[-v46.i64[0]] >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)&v47[-v46.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v39 = v48;
        v15 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v48, v14);
        v16 = &v15[8 * v12];
        *(_DWORD *)v16 = *a2;
        *((_DWORD *)v16 + 1) = 1;
        v17 = v46.i64[1];
        v18 = v46.i64[0];
        if (v46.i64[1] == v46.i64[0])
        {
          v21 = vdupq_n_s64(v46.u64[1]);
          v19 = &v15[8 * v12];
        }
        else
        {
          v19 = &v15[8 * v12];
          do
          {
            v20 = *(_QWORD *)(v17 - 8);
            v17 -= 8;
            *((_QWORD *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v17 != v18);
          v21 = v46;
        }
        v8 = v16 + 8;
        v46.i64[0] = (uint64_t)v19;
        v46.i64[1] = (uint64_t)(v16 + 8);
        v37 = v21;
        v22 = v47;
        v47 = &v15[8 * v14];
        v38 = v22;
        v36 = (int64x2_t *)v21.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v36);
      }
      else
      {
        *(_DWORD *)v8 = *a2;
        *((_DWORD *)v8 + 1) = 1;
        v8 += 8;
      }
      v46.i64[1] = (uint64_t)v8;
    }
    while (*a2++);
    Lookups = OTL::GCommon::GetLookups((uint64_t)v34, (uint64_t)&v46, (uint64_t)&v40, 0);
    v36 = &v46;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
    if (v35 >= 1 && Lookups)
    {
      v25 = 0;
      do
      {
        v26 = v25;
        v27 = *(_DWORD *)(v4 + 16 * v25 + 12);
        if (v10 <= v25 + 1)
          v28 = v25 + 1;
        else
          v28 = v10;
        v29 = (int *)(v4 + 28 + 16 * v25);
        while (v28 - 1 != v25)
        {
          ++v25;
          v30 = *v29;
          v29 += 4;
          if (v30 != v27)
            goto LABEL_32;
        }
        v25 = v28;
LABEL_32:
        v32 = v40;
        v31 = v41;
        while (v32 != v31)
        {
          v33 = *v32++;
          v11 = v11 & 0xFFFFFFFF00000000 | v33;
          OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)a3, v11, v26, v25 - v26);
        }
      }
      while (v25 < v10);
    }
    v46.i64[0] = (uint64_t)&v40;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v46);
  }
}

void TOpenTypeMorph::SetInitLookups(TOpenTypeMorph *this, OTL::GlyphLookups *a2)
{
  uint64_t v2;
  unint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  char **v16;
  char *v17[34];
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  _OWORD v21[7];
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v4 = *((_QWORD *)this + 5);
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[6] = v5;
    v21[5] = v5;
    v21[4] = v5;
    v21[3] = v5;
    v21[2] = v5;
    v21[1] = v5;
    v21[0] = v5;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v6 = (char *)this + 640;
    v22 = 0xAAAAAAAAAAAAAAAALL;
    v23 = v21;
    v15 = 1768843636;
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(v17, &v15, &v16);
    LODWORD(v6) = OTL::GCommon::GetLookups((uint64_t)v6, (uint64_t)v17, (uint64_t)&v18, 0);
    v16 = v17;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v16);
    if ((_DWORD)v6 && (uint64_t)(v4 - v2) >= 1)
    {
      v7 = 0;
      if ((uint64_t)(v4 - v2) >> 4 <= 1)
        v8 = 1;
      else
        v8 = (uint64_t)(v4 - v2) >> 4;
      v9 = -1;
      do
      {
        v10 = v2 + 16 * v7;
        v11 = *(unsigned int *)(v10 + 12);
        if (v9 != v11)
        {
          if ((*(_DWORD *)(v10 + 8) & 0x70FFFF) != 0x400006
            || v7 && *(_WORD *)(v2 + 16 * v7 - 8)
            || (v13 = v18, v12 = v19, v18 == v19))
          {
            v9 = *(unsigned int *)(v10 + 12);
          }
          else
          {
            do
            {
              v14 = *v13++;
              v4 = v4 & 0xFFFFFFFF00000000 | v14;
              OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)a2, v4, v7, 1);
            }
            while (v13 != v12);
            v9 = v11;
          }
        }
        ++v7;
      }
      while (v7 != v8);
    }
    v17[0] = (char *)&v18;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v17);
  }
}

BOOL TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_2::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  os_unfair_lock_s *v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t ***v13;
  uint64_t **i;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  int **v35;
  int *v36;
  int *v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  int *v51;
  int *v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *j;
  unint64_t v58;
  char *v59;
  float v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  int8x8_t prime;
  void *v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  _BOOL8 v81;
  void *v83;
  os_unfair_lock_t lock;
  int64x2_t *v86;
  int64x2_t v87;
  unint64_t v88;
  _OWORD *v89;
  int64x2_t v90;
  unint64_t v91;
  _OWORD v92[15];
  _OWORD *v93;
  unsigned int *v94[3];
  _OWORD v95[9];
  _OWORD *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(int *)(*a1 + 24) + 2654435769;
  v7 = (*(unsigned int *)(*a1 + 28) + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  v8 = (*(int *)(*a1 + 16) + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  v9 = (os_unfair_lock_s *)(a2 + 32);
  os_unfair_lock_lock_with_options();
  v10 = *(int8x8_t *)(a2 + 48);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= *(_QWORD *)&v10)
        v12 = v8 % *(_QWORD *)&v10;
    }
    else
    {
      v12 = v8 & (*(_QWORD *)&v10 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)(a2 + 40) + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v8)
        {
          if (i[2] == (uint64_t *)v8)
          {
            std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short>*>,std::__wrap_iter<std::pair<unsigned short,unsigned short>*>>((char *)a3, (int *)i[3], (int *)i[4], ((char *)i[4] - (char *)i[3]) >> 2);
            goto LABEL_126;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= *(_QWORD *)&v10)
              v15 %= *(_QWORD *)&v10;
          }
          else
          {
            v15 &= *(_QWORD *)&v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95[8] = v16;
  v95[7] = v16;
  v95[6] = v16;
  v95[5] = v16;
  v95[4] = v16;
  v95[3] = v16;
  v95[2] = v16;
  v95[1] = v16;
  v95[0] = v16;
  memset(v94, 0, sizeof(v94));
  v96 = v95;
  lock = v9;
  OTL::GCommon::GetFeatures((OTL::GCommon *)(v5 + 640), (OTL::FeatureList *)v94);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v92[14] = v17;
  v92[13] = v17;
  v92[12] = v17;
  v92[11] = v17;
  v92[10] = v17;
  v92[9] = v17;
  v92[8] = v17;
  v92[7] = v17;
  v92[6] = v17;
  v92[5] = v17;
  v92[4] = v17;
  v92[3] = v17;
  v92[2] = v17;
  v92[1] = v17;
  v92[0] = v17;
  v91 = 0;
  v90 = 0uLL;
  v93 = v92;
  if (OTL::FeatureList::StripMissingFeaturesFrom(v94, (unsigned int *)a1[1]))
  {
    v18 = 0;
    v19 = a1[1];
    do
    {
      v20 = *(_DWORD *)(v19 + 4 * v18);
      if (!v20)
        break;
      v21 = v90.i64[1];
      if (v90.i64[1] >= v91)
      {
        v23 = (v90.i64[1] - v90.i64[0]) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
LABEL_136:
          abort();
        v25 = v91 - v90.i64[0];
        if ((uint64_t)(v91 - v90.i64[0]) >> 2 > v24)
          v24 = v25 >> 2;
        v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v24;
        v89 = v92;
        v27 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v92, v26);
        v28 = &v27[8 * v23];
        *(_DWORD *)v28 = v20;
        *((_DWORD *)v28 + 1) = 1;
        v29 = v90.i64[1];
        v30 = v90.i64[0];
        if (v90.i64[1] == v90.i64[0])
        {
          v33 = vdupq_n_s64(v90.u64[1]);
          v31 = (uint64_t)&v27[8 * v23];
        }
        else
        {
          v31 = (uint64_t)&v27[8 * v23];
          do
          {
            v32 = *(_QWORD *)(v29 - 8);
            v29 -= 8;
            *(_QWORD *)(v31 - 8) = v32;
            v31 -= 8;
          }
          while (v29 != v30);
          v33 = v90;
        }
        v22 = (uint64_t)(v28 + 8);
        v90.i64[0] = v31;
        v90.i64[1] = (uint64_t)(v28 + 8);
        v87 = v33;
        v34 = v91;
        v91 = (unint64_t)&v27[8 * v26];
        v88 = v34;
        v86 = (int64x2_t *)v33.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v86);
      }
      else
      {
        *(_DWORD *)v90.i64[1] = v20;
        *(_DWORD *)(v21 + 4) = 1;
        v22 = v21 + 8;
      }
      v90.i64[1] = v22;
      ++v18;
    }
    while (v18 != 16);
  }
  v35 = (int **)a1[2];
  v37 = *v35;
  v36 = v35[1];
  if (*v35 != v36)
  {
    v38 = (_DWORD *)v90.i64[1];
    do
    {
      v39 = *v37;
      if ((unint64_t)v38 >= v91)
      {
        v40 = ((uint64_t)v38 - v90.i64[0]) >> 3;
        if ((unint64_t)(v40 + 1) >> 61)
          goto LABEL_136;
        v41 = (uint64_t)(v91 - v90.i64[0]) >> 2;
        if (v41 <= v40 + 1)
          v41 = v40 + 1;
        if (v91 - v90.i64[0] >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        v89 = v92;
        v43 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v92, v42);
        v44 = &v43[8 * v40];
        *(_DWORD *)v44 = v39;
        *((_DWORD *)v44 + 1) = 0;
        v45 = v90.i64[1];
        v46 = v90.i64[0];
        if (v90.i64[1] == v90.i64[0])
        {
          v49 = vdupq_n_s64(v90.u64[1]);
          v47 = (uint64_t)&v43[8 * v40];
        }
        else
        {
          v47 = (uint64_t)&v43[8 * v40];
          do
          {
            v48 = *(_QWORD *)(v45 - 8);
            v45 -= 8;
            *(_QWORD *)(v47 - 8) = v48;
            v47 -= 8;
          }
          while (v45 != v46);
          v49 = v90;
        }
        v38 = v44 + 8;
        v90.i64[0] = v47;
        v90.i64[1] = (uint64_t)(v44 + 8);
        v87 = v49;
        v50 = v91;
        v91 = (unint64_t)&v43[8 * v42];
        v88 = v50;
        v86 = (int64x2_t *)v49.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v86);
      }
      else
      {
        *v38 = v39;
        v38[1] = 0;
        v38 += 2;
      }
      v90.i64[1] = (uint64_t)v38;
      ++v37;
    }
    while (v37 != v36);
  }
  ConvertSettingsToOTFeatures(v94, (unint64_t *)a2, *(unsigned __int8 *)(v5 + 20), &v90, *(uint64_t (**)(_QWORD))a1[3], 0, 1);
  OTL::GCommon::GetLookups(v5 + 640, (uint64_t)&v90, a3, 1);
  v51 = *(int **)a3;
  v52 = *(int **)(a3 + 8);
  v53 = *(_QWORD *)(a2 + 48);
  if (v53)
  {
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.u32[0] > 1uLL)
    {
      v55 = v8;
      if (v53 <= v8)
        v55 = v8 % v53;
    }
    else
    {
      v55 = (v53 - 1) & v8;
    }
    v56 = *(_QWORD **)(*(_QWORD *)(a2 + 40) + 8 * v55);
    if (v56)
    {
      for (j = (_QWORD *)*v56; j; j = (_QWORD *)*j)
      {
        v58 = j[1];
        if (v58 == v8)
        {
          if (j[2] == v8)
            goto LABEL_125;
        }
        else
        {
          if (v54.u32[0] > 1uLL)
          {
            if (v58 >= v53)
              v58 %= v53;
          }
          else
          {
            v58 &= v53 - 1;
          }
          if (v58 != v55)
            break;
        }
      }
    }
  }
  else
  {
    v55 = 0xAAAAAAAAAAAAAAAALL;
  }
  v59 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v59 = 0;
  *((_QWORD *)v59 + 1) = v8;
  *((_QWORD *)v59 + 2) = v8;
  *((_QWORD *)v59 + 4) = 0;
  *((_QWORD *)v59 + 5) = 0;
  *((_QWORD *)v59 + 3) = 0;
  *((_QWORD *)v59 + 21) = v59 + 48;
  std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>,std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>>(v59 + 24, v51, v52, v52 - v51);
  v60 = (float)(unint64_t)(*(_QWORD *)(a2 + 64) + 1);
  v61 = *(float *)(a2 + 72);
  if (!v53 || (float)(v61 * (float)v53) < v60)
  {
    v62 = 1;
    if (v53 >= 3)
      v62 = (v53 & (v53 - 1)) != 0;
    v63 = v62 | (2 * v53);
    v64 = vcvtps_u32_f32(v60 / v61);
    if (v63 <= v64)
      prime = (int8x8_t)v64;
    else
      prime = (int8x8_t)v63;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v53 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)&prime > v53)
      goto LABEL_81;
    if (*(_QWORD *)&prime < v53)
    {
      v72 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 64) / *(float *)(a2 + 72));
      if (v53 < 3 || (v73 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
      {
        v72 = std::__next_prime(v72);
      }
      else
      {
        v74 = 1 << -(char)__clz(v72 - 1);
        if (v72 >= 2)
          v72 = v74;
      }
      if (*(_QWORD *)&prime <= v72)
        prime = (int8x8_t)v72;
      if (*(_QWORD *)&prime >= v53)
      {
        v53 = *(_QWORD *)(a2 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_81:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v66 = operator new(8 * *(_QWORD *)&prime);
          v67 = *(void **)(a2 + 40);
          *(_QWORD *)(a2 + 40) = v66;
          if (v67)
            operator delete(v67);
          v68 = 0;
          *(int8x8_t *)(a2 + 48) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v68++) = 0;
          while (*(_QWORD *)&prime != v68);
          v69 = *(_QWORD **)(a2 + 56);
          if (v69)
          {
            v70 = v69[1];
            v71 = (uint8x8_t)vcnt_s8(prime);
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.u32[0] > 1uLL)
            {
              if (v70 >= *(_QWORD *)&prime)
                v70 %= *(_QWORD *)&prime;
            }
            else
            {
              v70 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v70) = a2 + 56;
            v75 = (_QWORD *)*v69;
            if (*v69)
            {
              do
              {
                v76 = v75[1];
                if (v71.u32[0] > 1uLL)
                {
                  if (v76 >= *(_QWORD *)&prime)
                    v76 %= *(_QWORD *)&prime;
                }
                else
                {
                  v76 &= *(_QWORD *)&prime - 1;
                }
                if (v76 != v70)
                {
                  v77 = *(_QWORD *)(a2 + 40);
                  if (!*(_QWORD *)(v77 + 8 * v76))
                  {
                    *(_QWORD *)(v77 + 8 * v76) = v69;
                    goto LABEL_106;
                  }
                  *v69 = *v75;
                  *v75 = **(_QWORD **)(*(_QWORD *)(a2 + 40) + 8 * v76);
                  **(_QWORD **)(*(_QWORD *)(a2 + 40) + 8 * v76) = v75;
                  v75 = v69;
                }
                v76 = v70;
LABEL_106:
                v69 = v75;
                v75 = (_QWORD *)*v75;
                v70 = v76;
              }
              while (v75);
            }
          }
          v53 = (unint64_t)prime;
          goto LABEL_110;
        }
        v83 = *(void **)(a2 + 40);
        *(_QWORD *)(a2 + 40) = 0;
        if (v83)
          operator delete(v83);
        v53 = 0;
        *(_QWORD *)(a2 + 48) = 0;
      }
    }
LABEL_110:
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v53 <= v8)
        v55 = v8 % v53;
      else
        v55 = v8;
    }
    else
    {
      v55 = (v53 - 1) & v8;
    }
  }
  v78 = *(_QWORD *)(a2 + 40);
  v79 = *(_QWORD **)(v78 + 8 * v55);
  if (v79)
  {
    *(_QWORD *)v59 = *v79;
  }
  else
  {
    *(_QWORD *)v59 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v59;
    *(_QWORD *)(v78 + 8 * v55) = a2 + 56;
    if (!*(_QWORD *)v59)
      goto LABEL_124;
    v80 = *(_QWORD *)(*(_QWORD *)v59 + 8);
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v80 >= v53)
        v80 %= v53;
    }
    else
    {
      v80 &= v53 - 1;
    }
    v79 = (_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v80);
  }
  *v79 = v59;
LABEL_124:
  ++*(_QWORD *)(a2 + 64);
LABEL_125:
  v86 = &v90;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v86);
  v90.i64[0] = (uint64_t)v94;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v90);
  v9 = lock;
LABEL_126:
  v81 = *(_QWORD *)a3 != *(_QWORD *)(a3 + 8);
  os_unfair_lock_unlock(v9);
  return v81;
}

void TOpenTypeMorph::ApplyVerticalGlyphs(TOpenTypeMorph *this)
{
  _BOOL8 HasAvailable;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  size_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  _BOOL4 SingleSubstLookups;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE v19[4];
  int v20;
  uint64_t v21;
  int v22;
  void ***v23;
  void **v24[3];
  _BYTE v25[3120];
  _BYTE *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  _OWORD v30[7];
  unint64_t v31;
  _OWORD *v32;
  unsigned int *v33[3];
  _OWORD v34[9];
  _OWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  HasAvailable = StackHasAvailable(0x4000uLL);
  if (HasAvailable)
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 104);
    *(_QWORD *)(*(_QWORD *)this + 104) = (char *)this + 32;
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)(*(_QWORD *)this + 624);
    if (v5 <= 0x10000)
      v6 = (v5 + 7) >> 3;
    else
      v6 = 0x2000;
    MEMORY[0x1E0C80A78](HasAvailable, v6);
    v8 = &v19[-v7];
    bzero(&v19[-v7], v9);
    TRunGlue::DetermineCoverage(v4, v8);
    v21 = *(_QWORD *)"2trvtrev";
    v22 = 0;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v34[8] = v10;
    v34[7] = v10;
    v34[6] = v10;
    v34[5] = v10;
    v34[4] = v10;
    v34[3] = v10;
    v34[2] = v10;
    v34[1] = v10;
    v34[0] = v10;
    v35 = v34;
    memset(v33, 0, sizeof(v33));
    if (OTL::GCommon::GetFeatures((TOpenTypeMorph *)((char *)this + 640), (OTL::FeatureList *)v33)
      && OTL::FeatureList::StripMissingFeaturesFrom(v33, (unsigned int *)&v21))
    {
      v31 = 0xAAAAAAAAAAAAAAAALL;
      v11 = (unint64_t)&v27;
      *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v30[6] = v12;
      v30[5] = v12;
      v30[4] = v12;
      v30[3] = v12;
      v30[2] = v12;
      v30[1] = v12;
      v30[0] = v12;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v32 = v30;
      v20 = v21;
      OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>((char **)v24, &v20, &v21);
      SingleSubstLookups = OTL::GSUB::GetSingleSubstLookups((_QWORD *)this + 80, (uint64_t)v24, (uint64_t)&v27);
      v23 = v24;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v23);
      if (SingleSubstLookups)
      {
        memset(v25, 170, sizeof(v25));
        memset(v24, 0, sizeof(v24));
        v26 = v25;
        v14 = TRunGlue::length(*(TRunGlue **)this);
        v15 = v27;
        v16 = v28;
        if (v27 != v28)
        {
          v17 = v14;
          do
          {
            v18 = *v15++;
            v11 = v11 & 0xFFFFFFFF00000000 | v18;
            OTL::GlyphLookups::SetLookupInRange<false>((uint64_t *)v24, v11, 0, v17);
          }
          while (v15 != v16);
        }
        LOBYTE(v23) = 0;
        OTL::GSUB::ApplyLookups((_QWORD *)this + 80, *(TRunGlue **)this, *((_DWORD *)this + 4), (unsigned __int16 **)v24, &v23, 0, 0);
        v23 = v24;
        std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v23);
      }
      v24[0] = (void **)&v27;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](v24);
    }
    *(_QWORD *)(*(_QWORD *)this + 104) = v3;
    v24[0] = (void **)v33;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100](v24);
  }
}

uint64_t TOpenTypeMorph::AddVariantsOfGlyph(uint64_t a1, __int16 a2, uint64_t a3)
{
  const __CFData *CommonTable;
  const __CFData *v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  unint64_t v9;
  uint64_t v10;
  UInt8 *v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  const UInt8 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  const UInt8 *v28;
  unint64_t v29;
  const UInt8 *v30;
  __int16 v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31 = a2;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(a1 + 400), 1196643650, 0);
  if (!CommonTable)
    return 1;
  v6 = CommonTable;
  BytePtr = CFDataGetBytePtr(CommonTable);
  v30 = BytePtr;
  v8 = CFDataGetBytePtr(v6);
  if (v8)
    v9 = (unint64_t)&v8[CFDataGetLength(v6)];
  else
    v9 = 0;
  v29 = v9;
  if (!*((_WORD *)BytePtr + 3))
    return 0;
  v11 = (UInt8 *)&BytePtr[__rev16(*((unsigned __int16 *)BytePtr + 3))];
  v12 = v11 + 2;
  if ((unint64_t)(v11 + 2) > v9)
    return 0;
  v13 = bswap32(*(unsigned __int16 *)v11) >> 16;
  v14 = (unint64_t)&v12[3 * v13];
  if (v14 < (unint64_t)v12 || v14 > v9)
  {
    v16 = (v9 - (unint64_t)v12) / 6;
    if ((unint64_t)(v11 + 8) > v9)
      v16 = 0;
    if (v16 != v13)
      return 0;
  }
  if (!*((_WORD *)BytePtr + 4))
    return 0;
  v17 = &BytePtr[__rev16(*((unsigned __int16 *)BytePtr + 4))];
  v18 = (unsigned __int16 *)(v17 + 2);
  if ((unint64_t)(v17 + 2) > v9)
    return 0;
  v19 = bswap32(*(unsigned __int16 *)v17) >> 16;
  v20 = (unint64_t)&v18[v19];
  v21 = (unint64_t)(v17 + 4) <= v9 ? (v9 - (unint64_t)v18) >> 1 : 0;
  v22 = v20 <= v9 && v20 >= (unint64_t)v18;
  if (!v22 && v21 != v19)
    return 0;
  v28 = v17;
  v24 = operator new(0x38uLL);
  *v24 = &off_1E15E0298;
  v24[1] = a1;
  v24[2] = &v30;
  v24[3] = &v29;
  v24[4] = &v28;
  v24[5] = &v31;
  v24[6] = a3;
  v33 = v24;
  v10 = OTL::GCommon::IterateFeatureTables((unint64_t)BytePtr, v11, v9, (uint64_t)v32);
  v25 = v33;
  if (v33 == v32)
  {
    v26 = 4;
    v25 = v32;
    goto LABEL_35;
  }
  if (v33)
  {
    v26 = 5;
LABEL_35:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return v10;
}

uint64_t TOpenTypeMorph::AddCoveredGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CommonTable;
  const __CFData *v8;
  const __CFData *v9;
  __int128 v10;
  const UInt8 *BytePtr;
  const UInt8 *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v20;
  const UInt8 *v21;
  _OWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = a2;
  CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(a1 + 400), 1196643650, 0);
  v23 = CommonTable;
  if (!CommonTable)
    return 1;
  v8 = (const __CFData *)CommonTable;
  v9 = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(a1 + 400), 1195656518, 0);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[3] = v10;
  v22[4] = v10;
  v22[1] = v10;
  v22[2] = v10;
  v22[0] = v10;
  OTL::GDEF::GDEF((OTL::GDEF *)v22, v9);
  BytePtr = CFDataGetBytePtr(v8);
  v21 = BytePtr;
  v12 = CFDataGetBytePtr(v8);
  if (v12)
    v13 = (unint64_t)&v12[CFDataGetLength(v8)];
  else
    v13 = 0;
  v20 = v13;
  v15 = operator new(0x48uLL);
  *v15 = &unk_1E15E0208;
  v15[1] = &v21;
  v15[2] = &v20;
  v15[3] = a1;
  v15[4] = &v23;
  v15[5] = v22;
  v15[6] = &v24;
  v15[7] = a3;
  v15[8] = a4;
  v26 = v15;
  v14 = OTL::GCommon::IterateScriptTables((uint64_t)BytePtr, v13, (uint64_t)v25);
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_10;
  }
  if (v26)
  {
    v18 = 5;
LABEL_10:
    (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v16);
  }
  return v14;
}

uint64_t TOpenTypeMorph::AddShapingLanguages(TBaseFont *a1, uint64_t a2)
{
  uint64_t CommonTable;
  const __CFData *v5;
  const __CFData *v6;
  __int128 v7;
  const UInt8 *BytePtr;
  const UInt8 *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;
  const UInt8 *v18;
  _OWORD v19[5];
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  CommonTable = TBaseFont::GetCommonTable(a1, 1196643650, 0);
  if (!CommonTable)
    return 1;
  v5 = (const __CFData *)CommonTable;
  v6 = (const __CFData *)TBaseFont::GetCommonTable(a1, 1195656518, 0);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[3] = v7;
  v19[4] = v7;
  v19[1] = v7;
  v19[2] = v7;
  v19[0] = v7;
  OTL::GDEF::GDEF((OTL::GDEF *)v19, v6);
  BytePtr = CFDataGetBytePtr(v5);
  v18 = BytePtr;
  v9 = CFDataGetBytePtr(v5);
  if (!v9)
    return 0;
  v10 = (unint64_t)&v9[CFDataGetLength(v5)];
  v17 = v10;
  if ((unint64_t)(BytePtr + 10) > v10
    || bswap32(*(unsigned __int16 *)BytePtr) >> 16 > 1
    || *((_WORD *)BytePtr + 1) && (unint64_t)(BytePtr + 14) > v10)
  {
    return 0;
  }
  v11 = operator new(0x20uLL);
  *v11 = &off_1E15E02E0;
  v11[1] = &v18;
  v11[2] = &v17;
  v11[3] = a2;
  v21 = v11;
  v13 = OTL::GCommon::IterateScriptTables((uint64_t)BytePtr, v10, (uint64_t)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_12;
  }
  if (v21)
  {
    v15 = 5;
LABEL_12:
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v15))(v14, v12);
  }
  return v13;
}

_QWORD *TOpenTypeMorph::EnumerateScriptRanges(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *ThaiClassTable;
  uint64_t *LaoClassTable;
  uint64_t *KhmerClassTable;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v19, a1);
  EnumeratePatternScriptRanges((uint64_t)"[", 1634885986, (uint64_t)v19);
  v2 = v20;
  if (v20 == v19)
  {
    v3 = 4;
    v2 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v17, a1);
  EnumeratePatternScriptRanges((uint64_t)"[", 1937338979, (uint64_t)v17);
  v4 = v18;
  if (v18 == v17)
  {
    v5 = 4;
    v4 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  ThaiClassTable = GetThaiClassTable();
  std::function<void ()(unsigned int,CFRange)>::operator()(a1, 1952997737, *((unsigned __int16 *)ThaiClassTable + 4), *((unsigned __int16 *)ThaiClassTable + 5) - (unint64_t)*((unsigned __int16 *)ThaiClassTable + 4) + 1);
  LaoClassTable = GetLaoClassTable();
  std::function<void ()(unsigned int,CFRange)>::operator()(a1, 1818324768, *((unsigned __int16 *)LaoClassTable + 4), *((unsigned __int16 *)LaoClassTable + 5) - (unint64_t)*((unsigned __int16 *)LaoClassTable + 4) + 1);
  KhmerClassTable = GetKhmerClassTable();
  std::function<void ()(unsigned int,CFRange)>::operator()(a1, 1802005874, *((unsigned __int16 *)KhmerClassTable + 4), *((unsigned __int16 *)KhmerClassTable + 5) - (unint64_t)*((unsigned __int16 *)KhmerClassTable + 4) + 1);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v15, a1);
  EnumeratePatternScriptRanges((uint64_t)L"[:script=Hang:]", 1751215719, (uint64_t)v15);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v13, a1);
  UniversalClassTable::EnumerateScriptRanges((uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

uint64_t EnumeratePatternScriptRanges(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  result = uset_openPattern();
  if (result)
  {
    v6 = result;
    v14 = a2;
    v7 = v15;
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v15, a3);
    v8 = operator new(0x30uLL);
    v9 = v8;
    *(_QWORD *)v8 = &off_1E15DF9E0;
    v8[2] = v14;
    if (v16)
    {
      if (v16 == v15)
      {
        *((_QWORD *)v8 + 5) = v8 + 4;
        (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
      }
      else
      {
        *((_QWORD *)v8 + 5) = v16;
        v16 = 0;
      }
    }
    else
    {
      *((_QWORD *)v8 + 5) = 0;
    }
    v18 = v9;
    IterateItemRanges(v6, &v13, (uint64_t)v17);
    v10 = v18;
    if (v18 == v17)
    {
      v11 = 4;
      v10 = v17;
    }
    else
    {
      if (!v18)
        goto LABEL_12;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_12:
    if (v16 == v15)
    {
      v12 = 4;
    }
    else
    {
      if (!v16)
        return uset_close();
      v12 = 5;
      v7 = v16;
    }
    (*(void (**)(_QWORD *))(*v7 + 8 * v12))(v7);
    return uset_close();
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,CFRange)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL8 v6;
  int v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return (*(uint64_t (**)(uint64_t, int *, _QWORD *))(*(_QWORD *)v4 + 48))(v4, &v7, v8);
  v6 = std::__throw_bad_function_call[abi:nn180100]();
  return TOpenTypeMorph::GetCharacterClass((TOpenTypeMorph *)v6);
}

uint64_t TOpenTypeMorph::GetCharacterClass(TOpenTypeMorph *this)
{
  unsigned int v1;
  int v2;
  TeluguShapingEngine *v3;
  uint64_t *StaticClassTable;
  uint64_t CharClass;
  uint64_t *ThaiClassTable;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  UniversalClassTable *v11;
  UniversalClassTable *v12;

  v1 = this;
  v2 = ScriptCodeForLongCharacter(this);
  v3 = (TeluguShapingEngine *)ScriptTagForScriptCode(v2);
  if ((int)v3 > 1818324767)
  {
    if ((int)v3 > 1937338978)
    {
      if ((int)v3 > 1952803956)
      {
        if ((_DWORD)v3 == 1952803957)
        {
          StaticClassTable = TeluguShapingEngine::GetStaticClassTable(v3);
          return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
        }
        if ((_DWORD)v3 == 1952997737)
        {
          ThaiClassTable = GetThaiClassTable();
          goto LABEL_40;
        }
      }
      else
      {
        if ((_DWORD)v3 == 1937338979)
          return u_getIntPropertyValue(v1, UCHAR_JOINING_TYPE);
        if ((_DWORD)v3 == 1952542060)
        {
          StaticClassTable = TamilShapingEngine::GetStaticClassTable(v3);
          return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
        }
      }
LABEL_46:
      v12 = (UniversalClassTable *)0xAAAAAAAAAAAAAAAALL;
      UniversalClassTable::ClassTableForScript((uint64_t)v3, &v12);
      v11 = v12;
      if (!v12)
        return 0;
      CharClass = UniversalClassTable::getCharClass(v12, v1);
      MEMORY[0x186DC03AC](v11, 0x1050C409ECFBC67);
      return CharClass;
    }
    if ((int)v3 > 1836674417)
    {
      if ((_DWORD)v3 == 1836674418)
        return GetCharClass((unsigned __int16)v1);
      if ((_DWORD)v3 == 1869773153)
      {
        StaticClassTable = OriyaShapingEngine::GetStaticClassTable(v3);
        return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
      }
      goto LABEL_46;
    }
    if ((_DWORD)v3 != 1818324768)
    {
      if ((_DWORD)v3 == 1835825517)
      {
        StaticClassTable = MalayalamShapingEngine::GetStaticClassTable(v3);
        return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
      }
      goto LABEL_46;
    }
    ThaiClassTable = GetLaoClassTable();
LABEL_40:
    CharClass = 0;
    v8 = *((unsigned __int16 *)ThaiClassTable + 4);
    v9 = v1 >= v8;
    v10 = v1 - v8;
    if (v9 && *((unsigned __int16 *)ThaiClassTable + 5) >= v1)
      return *(unsigned int *)(ThaiClassTable[2] + 4 * v10);
    return CharClass;
  }
  if ((int)v3 > 1735750260)
  {
    if ((int)v3 <= 1802005873)
    {
      if ((_DWORD)v3 == 1735750261)
      {
        StaticClassTable = GurmukhiShapingEngine::GetStaticClassTable(v3);
        return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
      }
      if ((_DWORD)v3 == 1751215719)
      {
        if (v1 >> 1 != 6167)
          return u_getIntPropertyValue((unsigned __int16)v1, UCHAR_HANGUL_SYLLABLE_TYPE);
        return 0xFFFFFFFFLL;
      }
      goto LABEL_46;
    }
    if ((_DWORD)v3 != 1802005874)
    {
      if ((_DWORD)v3 == 1802396769)
      {
        StaticClassTable = KannadaShapingEngine::GetStaticClassTable(v3);
        return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
      }
      goto LABEL_46;
    }
    ThaiClassTable = GetKhmerClassTable();
    goto LABEL_40;
  }
  if ((int)v3 > 1684371040)
  {
    if ((_DWORD)v3 == 1684371041)
    {
      StaticClassTable = DevanagariShapingEngine::GetStaticClassTable(v3);
      return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
    }
    if ((_DWORD)v3 == 1735748210)
    {
      StaticClassTable = GujaratiShapingEngine::GetStaticClassTable(v3);
      return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
    }
    goto LABEL_46;
  }
  if ((_DWORD)v3 != 1634885986)
  {
    if ((_DWORD)v3 == 1650814567)
    {
      StaticClassTable = BengaliShapingEngine::GetStaticClassTable(v3);
      return IndicClassTable::getCharClass((IndicClassTable *)StaticClassTable, v1);
    }
    goto LABEL_46;
  }
  return u_getIntPropertyValue(v1, UCHAR_JOINING_TYPE);
}

uint64_t IsRightAssociative(unsigned int)::$_0::__invoke()
{
  uint64_t v0;
  const USet *BinaryPropertySet;
  const USet *v2;
  const USet *v3;
  uint64_t result;
  UErrorCode pErrorCode;

  pErrorCode = U_ZERO_ERROR;
  v0 = uset_openEmpty();
  MEMORY[0x186DC0D0C](v0, 4117, 1, &pErrorCode);
  MEMORY[0x186DC0CF4](v0, 9676);
  BinaryPropertySet = u_getBinaryPropertySet(UCHAR_BINARY_LIMIT, &pErrorCode);
  MEMORY[0x186DC0D00](v0, BinaryPropertySet);
  v2 = u_getBinaryPropertySet(UCHAR_IDS_BINARY_OPERATOR, &pErrorCode);
  MEMORY[0x186DC0D00](v0, v2);
  v3 = u_getBinaryPropertySet(UCHAR_IDS_TRINARY_OPERATOR, &pErrorCode);
  MEMORY[0x186DC0D00](v0, v3);
  result = MEMORY[0x186DC0D30](v0);
  _MergedGlobals_21 = v0;
  return result;
}

char *std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short>*>,std::__wrap_iter<std::pair<unsigned short,unsigned short>*>>(char *result, int *a2, int *a3, unint64_t a4)
{
  int *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  int v16;
  unint64_t v17;
  int *v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;

  v6 = a2;
  v7 = result;
  v8 = *(char **)result;
  if (a4 > (uint64_t)(*((_QWORD *)result + 2) - *(_QWORD *)result) >> 2)
  {
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vdeallocate((uint64_t)result);
    if (a4 >> 62)
      abort();
    v9 = *((_QWORD *)v7 + 2) - *(_QWORD *)v7;
    v10 = v9 >> 1;
    if (v9 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vallocate[abi:nn180100](v7, v11);
    v14 = (char *)*((_QWORD *)v7 + 1);
    v13 = v7 + 8;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_DWORD *)v15 = v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
LABEL_18:
    v22 = (char *)(v15 - v12);
    goto LABEL_23;
  }
  v13 = result + 8;
  v12 = (char *)*((_QWORD *)result + 1);
  v17 = (v12 - v8) >> 2;
  if (v17 < a4)
  {
    v18 = &a2[v17];
    if (v12 != v8)
    {
      do
      {
        v19 = *v6++;
        *(_DWORD *)v8 = v19;
        v8 += 4;
      }
      while (v6 != v18);
    }
    v15 = v12;
    if (v18 != a3)
    {
      v20 = v12;
      do
      {
        v21 = *v18++;
        *(_DWORD *)v20 = v21;
        v20 += 4;
        v15 += 4;
      }
      while (v18 != a3);
    }
    goto LABEL_18;
  }
  v23 = *(char **)result;
  if (a2 != a3)
  {
    v24 = *(char **)result;
    do
    {
      v25 = *v6++;
      *(_DWORD *)v24 = v25;
      v24 += 4;
      v23 += 4;
    }
    while (v6 != a3);
  }
  v22 = (char *)(v23 - v8);
  v12 = v8;
LABEL_23:
  *v13 = &v22[(_QWORD)v12];
  return result;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(__int16 *a1, __int16 *a2, __int16 *a3)
{
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;

  v5 = a1;
  v6 = (unsigned __int16)*a2;
  v7 = (unsigned __int16)*a1;
  v8 = -1;
  if (v6 >= v7)
    v8 = 1;
  if (v6 == v7)
  {
    v9 = (unsigned __int16)a2[1];
    v10 = (unsigned __int16)a1[1];
    v11 = v9 >= v10;
    v12 = v9 == v10;
    v13 = -1;
    if (v11)
      v13 = 1;
    if (v12)
      v8 = 0;
    else
      v8 = v13;
  }
  v14 = (unsigned __int16)*a3;
  v15 = -1;
  if (v14 >= v6)
    v15 = 1;
  if ((v8 & 0x80) == 0)
  {
    if (v14 == v6)
    {
      v16 = (unsigned __int16)a3[1];
      v17 = (unsigned __int16)a2[1];
      v11 = v16 >= v17;
      v18 = v16 == v17;
      v19 = -1;
      if (v11)
        v19 = 1;
      if (v18)
        v15 = 0;
      else
        v15 = v19;
    }
    if (v15 < 0)
    {
      std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a2, a3);
      v20 = (unsigned __int16)*a2;
      v21 = (unsigned __int16)*v5;
      v22 = v20 == v21;
      if (v20 >= v21)
        v23 = 1;
      else
        v23 = -1;
      if (v22)
      {
        v24 = (unsigned __int16)a2[1];
        v25 = (unsigned __int16)v5[1];
        v11 = v24 >= v25;
        v26 = v24 == v25;
        v23 = -1;
        if (v11)
          v23 = 1;
        if (v26)
          v23 = 0;
      }
      if (v23 < 0)
        std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](v5, a2);
    }
    return;
  }
  if (v14 == v6)
  {
    v27 = (unsigned __int16)a3[1];
    v28 = (unsigned __int16)a2[1];
    v11 = v27 >= v28;
    v29 = v27 == v28;
    v30 = -1;
    if (v11)
      v30 = 1;
    if (v29)
      v15 = 0;
    else
      v15 = v30;
  }
  if (v15 < 0)
  {
LABEL_54:
    std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a1, a3);
    return;
  }
  std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a1, a2);
  v31 = (unsigned __int16)*a3;
  v32 = (unsigned __int16)*a2;
  v33 = v31 == v32;
  if (v31 >= v32)
    v34 = 1;
  else
    v34 = -1;
  if (v33)
  {
    v35 = (unsigned __int16)a3[1];
    v36 = (unsigned __int16)a2[1];
    v11 = v35 >= v36;
    v37 = v35 == v36;
    v34 = -1;
    if (v11)
      v34 = 1;
    if (v37)
      v34 = 0;
  }
  if (v34 < 0)
  {
    a1 = a2;
    goto LABEL_54;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(__int16 *a1, unsigned __int16 *a2)
{
  _BOOL8 v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  switch(0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = (__int16 *)(a2 - 52);
      v6 = *(a2 - 52);
      v7 = (unsigned __int16)*a1;
      v8 = v6 == v7;
      if (v6 >= v7)
        v9 = 1;
      else
        v9 = -1;
      if (v8)
      {
        v10 = *(a2 - 51);
        v11 = (unsigned __int16)a1[1];
        v12 = v10 >= v11;
        v13 = v10 == v11;
        v9 = -1;
        if (v12)
          v9 = 1;
        if (v13)
          v9 = 0;
      }
      if (v9 < 0)
        std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a1, v5);
      return v4;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a1 + 52, (__int16 *)a2 - 52);
      return v4;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a1 + 52, a1 + 104, (__int16 *)a2 - 52);
      return v4;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a1 + 52, a1 + 104, a1 + 156, (__int16 *)a2 - 52);
      return v4;
    default:
      v14 = (unsigned __int16 *)(a1 + 104);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a1 + 52, a1 + 104);
      v15 = (unsigned __int16 *)(a1 + 156);
      if (a1 + 156 == (__int16 *)a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *v15;
    v19 = *v14;
    v20 = v18 == v19;
    if (v18 >= v19)
      v21 = 1;
    else
      v21 = -1;
    if (v20)
    {
      v22 = v15[1];
      v23 = v14[1];
      v24 = v22 == v23;
      v21 = v22 >= v23 ? 1 : -1;
      if (v24)
        v21 = 0;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_43;
    v41 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v39 = v25;
    v40 = v25;
    v37 = v25;
    v38 = v25;
    v35 = v25;
    v36 = v25;
    LODWORD(v35) = *(_DWORD *)v15;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)&v35 + 8, *((_BYTE **)v15 + 1), *((_BYTE **)v15 + 2));
    LOWORD(v26) = *v14;
    v27 = v16;
    while (1)
    {
      v28 = (unsigned __int16 *)((char *)a1 + v27);
      v28[156] = v26;
      v28[157] = *(__int16 *)((char *)a1 + v27 + 210);
      std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a1 + v27 + 320, *(char **)((char *)a1 + v27 + 216), *(_QWORD *)((char *)a1 + v27 + 224), (uint64_t)(*(_QWORD *)((char *)a1 + v27 + 224) - *(_QWORD *)((char *)a1 + v27 + 216)) >> 4);
      if (v27 == -208)
        break;
      v26 = v28[52];
      if ((unsigned __int16)v35 >= v26)
        v29 = 1;
      else
        v29 = -1;
      if ((unsigned __int16)v35 == v26)
      {
        v30 = *(unsigned __int16 *)((char *)a1 + v27 + 106);
        v31 = WORD1(v35) == v30;
        v29 = WORD1(v35) >= v30 ? 1 : -1;
        if (v31)
          v29 = 0;
      }
      v27 -= 104;
      if ((v29 & 0x80) == 0)
      {
        v32 = (uint64_t)a1 + v27 + 312;
        goto LABEL_41;
      }
    }
    v32 = (uint64_t)a1;
LABEL_41:
    *(_DWORD *)v32 = v35;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)(v32 + 8), *((char **)&v35 + 1), v36, (uint64_t)(v36 - *((_QWORD *)&v35 + 1)) >> 4);
    if (++v17 == 8)
      break;
    v34 = (void **)&v35 + 1;
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v34);
LABEL_43:
    v14 = v15;
    v16 += 104;
    v15 += 52;
    if (v15 == a2)
      return 1;
  }
  v4 = v15 + 52 == a2;
  v34 = (void **)&v35 + 1;
  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v34);
  return v4;
}

void std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](__int16 *a1, __int16 *a2)
{
  __int16 v3;
  __int16 v4;
  __int128 v5;
  char *v6;
  void **v7;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[4] = v5;
  v8[5] = v5;
  v8[2] = v5;
  v8[3] = v5;
  v8[0] = v5;
  v8[1] = v5;
  v6 = (char *)(a1 + 4);
  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::vector<std::__wrap_iter<CFRange const*>,0>((uint64_t)v8, *((_BYTE **)a1 + 1), *((_BYTE **)a1 + 2));
  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(v6, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4);
  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>((char *)a2 + 8, *(char **)&v8[0], *((uint64_t *)&v8[0] + 1), (uint64_t)(*((_QWORD *)&v8[0] + 1) - *(_QWORD *)&v8[0]) >> 4);
  v7 = (void **)v8;
  std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v7);
}

char *std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CFRange const*>,std::__wrap_iter<CFRange const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  _BYTE *v13;
  void **v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  v10 = (v8 - *(_QWORD *)result) >> 4;
  if (v10 < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      v11 = (void **)(result + 88);
      if (result + 24 <= v9 && v11 > (void **)v9)
      {
        if (&v9[16 * v10] == *v11)
          *v11 = v9;
      }
      else
      {
        operator delete(v9);
      }
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v20 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v20 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    result = std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__vallocate[abi:nn180100](v7, v21);
    v22 = (char *)v7[1];
    v14 = (void **)(v7 + 1);
    v9 = v22;
LABEL_23:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v14 = (void **)(result + 8);
  v13 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v13 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_23;
  v16 = &__src[16 * v15];
  if (v13 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 16 * v15);
    v9 = (char *)*v14;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_25:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_26:
  *v14 = &v9[v17];
  return result;
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a2, a3);
  v8 = (unsigned __int16)*a4;
  v9 = (unsigned __int16)*a3;
  v10 = v8 == v9;
  if (v8 >= v9)
    v11 = 1;
  else
    v11 = -1;
  if (v10)
  {
    v12 = (unsigned __int16)a4[1];
    v13 = (unsigned __int16)a3[1];
    v14 = v12 >= v13;
    v15 = v12 == v13;
    v11 = -1;
    if (v14)
      v11 = 1;
    if (v15)
      v11 = 0;
  }
  if (v11 < 0)
  {
    std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a3, a4);
    v16 = (unsigned __int16)*a3;
    v17 = (unsigned __int16)*a2;
    v18 = v16 == v17;
    if (v16 >= v17)
      v19 = 1;
    else
      v19 = -1;
    if (v18)
    {
      v20 = (unsigned __int16)a3[1];
      v21 = (unsigned __int16)a2[1];
      v14 = v20 >= v21;
      v22 = v20 == v21;
      v19 = -1;
      if (v14)
        v19 = 1;
      if (v22)
        v19 = 0;
    }
    if (v19 < 0)
    {
      std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a2, a3);
      v23 = (unsigned __int16)*a2;
      v24 = (unsigned __int16)*a1;
      v25 = v23 == v24;
      if (v23 >= v24)
        v26 = 1;
      else
        v26 = -1;
      if (v25)
      {
        v27 = (unsigned __int16)a2[1];
        v28 = (unsigned __int16)a1[1];
        v14 = v27 >= v28;
        v29 = v27 == v28;
        v26 = -1;
        if (v14)
          v26 = 1;
        if (v29)
          v26 = 0;
      }
      if (v26 < 0)
        std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a1, a2);
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,OTL::GlyphLookups::SortLookups(void)::{lambda(std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>> const&)#1} &,std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>*>(a1, a2, a3, a4);
  v10 = (unsigned __int16)*a5;
  v11 = (unsigned __int16)*a4;
  v12 = v10 == v11;
  if (v10 >= v11)
    v13 = 1;
  else
    v13 = -1;
  if (v12)
  {
    v14 = (unsigned __int16)a5[1];
    v15 = (unsigned __int16)a4[1];
    v16 = v14 >= v15;
    v17 = v14 == v15;
    v13 = -1;
    if (v16)
      v13 = 1;
    if (v17)
      v13 = 0;
  }
  if (v13 < 0)
  {
    std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a4, a5);
    v18 = (unsigned __int16)*a4;
    v19 = (unsigned __int16)*a3;
    v20 = v18 == v19;
    if (v18 >= v19)
      v21 = 1;
    else
      v21 = -1;
    if (v20)
    {
      v22 = (unsigned __int16)a4[1];
      v23 = (unsigned __int16)a3[1];
      v16 = v22 >= v23;
      v24 = v22 == v23;
      v21 = -1;
      if (v16)
        v21 = 1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a3, a4);
      v25 = (unsigned __int16)*a3;
      v26 = (unsigned __int16)*a2;
      v27 = v25 == v26;
      if (v25 >= v26)
        v28 = 1;
      else
        v28 = -1;
      if (v27)
      {
        v29 = (unsigned __int16)a3[1];
        v30 = (unsigned __int16)a2[1];
        v16 = v29 >= v30;
        v31 = v29 == v30;
        v28 = -1;
        if (v16)
          v28 = 1;
        if (v31)
          v28 = 0;
      }
      if (v28 < 0)
      {
        std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a2, a3);
        v32 = (unsigned __int16)*a2;
        v33 = (unsigned __int16)*a1;
        v34 = v32 == v33;
        if (v32 >= v33)
          v35 = 1;
        else
          v35 = -1;
        if (v34)
        {
          v36 = (unsigned __int16)a2[1];
          v37 = (unsigned __int16)a1[1];
          v16 = v36 >= v37;
          v38 = v36 == v37;
          v35 = -1;
          if (v16)
            v35 = 1;
          if (v38)
            v35 = 0;
        }
        if (v35 < 0)
          std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>::swap[abi:nn180100](a1, a2);
      }
    }
  }
}

_QWORD *std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15DF9E0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15DF9E0;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_DWORD *std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _DWORD *v2;

  v2 = operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15DF9E0;
  v2[2] = *(_DWORD *)(a1 + 8);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 4), a1 + 16);
  return v2;
}

uint64_t std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E15DF9E0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 16, a1 + 16);
}

_QWORD *std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0,std::allocator<EnumeratePatternScriptRanges(char16_t const*,unsigned int,std::function<void ()(unsigned int,CFRange)>)::$_0>,void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return std::function<void ()(unsigned int,CFRange)>::operator()(a1 + 16, *(_DWORD *)(a1 + 8), *a2, (*a3 - *a2));
}

void std::__function::__func<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1,std::allocator<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1>,BOOL ()(TRunGlue::TGlyph)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1,std::allocator<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1>,BOOL ()(TRunGlue::TGlyph)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15E01C0;
  return result;
}

void std::__function::__func<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1,std::allocator<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1>,BOOL ()(TRunGlue::TGlyph)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E01C0;
}

BOOL std::__function::__func<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1,std::allocator<TOpenTypeMorph::ShapeGlyphs(SyncState &)::$_1>,BOOL ()(TRunGlue::TGlyph)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return TRunGlue::TGlyph::IsIgnorable((TRunGlue::TGlyph *)&v3);
}

uint64_t IndicShapingEngine::ApplyLookups(IndicShapingEngine *this, unsigned __int16 **a2)
{
  const IndicClassTable *v3;
  const IndicClassTable *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v9;
  __int16 v10;
  unsigned __int16 v11;

  v9 = 0;
  OTL::GSUB::ApplyLookups(*((_QWORD **)this + 64), *((TRunGlue **)this + 1), 1, a2, &v9, (uint64_t)IndicShapingEngine::ApplyLookups(OTL::GlyphLookups &)::{lambda(void *,CFRange,long)#1}::__invoke, (uint64_t)this + 520);
  if (*((_BYTE *)this + 888) || (*(_BYTE *)(*((_QWORD *)this + 62) + 15) & 8) != 0)
  {
    v11 = 0;
    v3 = (const IndicClassTable *)*((_QWORD *)this + 63);
    v4 = v3;
    if (!v3)
      v4 = (const IndicClassTable *)*((_QWORD *)this + 62);
    v5 = *((unsigned __int16 *)v4 + 12);
    v10 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 616) + 400);
      (*(void (**)(uint64_t, __int16 *, unsigned __int16 *, uint64_t))(*(_QWORD *)v6 + 664))(v6, &v10, &v11, 1);
      v7 = v11;
      v3 = (const IndicClassTable *)*((_QWORD *)this + 63);
    }
    else
    {
      v7 = 0;
    }
    if (!v3)
      v3 = (const IndicClassTable *)*((_QWORD *)this + 62);
    PostGSUBFixups::apply((IndicShapingEngine *)((char *)this + 520), *((TRunGlue **)this + 1), v7, v3, *(_DWORD *)(*((_QWORD *)this + 64) + 72));
  }
  OpenTypeShapingEngine::SetSafeToBreakAfterEachSyllable((uint64_t)this);
  return v9;
}

uint64_t TOpenTypeMorph::ApplyShapingEngine<TInlineVector<unsigned int,1ul>>(OTL::GlyphLookups &,unsigned int *,BOOL (**)(unsigned int),TInlineVector<unsigned int,1ul> &,SyncState &,BOOL *)::{lambda(unsigned int)#1}::__invoke()
{
  return 1;
}

void IndicShapingEngine::IndicShapingEngine(IndicShapingEngine *this, const TCharStream *a2, TRunGlue *a3, const IndicClassTable *a4, OTL::GSUB *a5)
{
  uint64_t v8;
  BOOL v9;
  char v10;
  IndicClassTable *v11;
  uint64_t v12;

  OpenTypeShapingEngine::OpenTypeShapingEngine(this, a2, a3);
  *(_QWORD *)v8 = off_1E15DDA68;
  *(_QWORD *)(v8 + 496) = a4;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = a5;
  *(_QWORD *)(v8 + 536) = 0;
  *(_QWORD *)(v8 + 528) = 0;
  *(_QWORD *)(v8 + 520) = 0;
  *(_QWORD *)(v8 + 800) = v8 + 544;
  *(_QWORD *)(v8 + 808) = 0;
  *(_QWORD *)(v8 + 824) = 0;
  *(_QWORD *)(v8 + 816) = 0;
  *(_QWORD *)(v8 + 880) = v8 + 832;
  if (*((_DWORD *)a5 + 19))
    v9 = 1;
  else
    v9 = *((_BYTE *)a4 + 80) == 0;
  v10 = v9;
  *(_BYTE *)(v8 + 888) = v10;
  v11 = (IndicClassTable *)operator new();
  IndicClassTable::IndicClassTable(v11, a4, *(const __CTFont **)(*((_QWORD *)this + 1) + 608), a5);
  v12 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t IndicShapingEngine::ApplyLookups(OTL::GlyphLookups &)::{lambda(void *,CFRange,long)#1}::__invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = a4 - a3;
  if (a4 - a3 >= 1)
  {
    v5 = *(_QWORD **)result;
    v6 = *(_QWORD **)(result + 8);
    while (v5 != v6)
    {
      if (*v5 > a2)
        *v5 += v4;
      v7 = v5[1];
      if (v7 > a2)
        v5[1] = v7 + v4;
      v5 += 4;
    }
  }
  return result;
}

void *TInlineBufferAllocator<unsigned int,1ul>::allocate(uint64_t a1, unint64_t a2)
{
  void *result;
  unint64_t v4;

  result = *(void **)(a1 + 8);
  v4 = (unint64_t)result + 4 * a2;
  if (v4 <= a1 + 4)
  {
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(4 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,1ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 <= (unint64_t)v4 && v5 + 4 > (unint64_t)v4)
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(v5 + 8))
        *(_QWORD *)(v5 + 8) = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t TOpenTypeMorph::ApplyShapingEngine<TInlineVector<unsigned int,1ul>>(OTL::GlyphLookups &,unsigned int *,BOOL (**)(unsigned int),TInlineVector<unsigned int,1ul> &,SyncState &,BOOL *)::{lambda(unsigned int)#2}::__invoke()
{
  return 1;
}

void std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0,std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0,std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E15E0298;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0,std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15E0298;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0,std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int v3;
  uint64_t v4;
  int v6;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unsigned int v21;
  _BYTE v22[24];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v21 = v3;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  if (v3 == 1667460464)
    return 1;
  v6 = ConvertOTFeatureToAATFeature(v3, (uint64_t)&v20);
  if (v3 != 1819239276 && v6 == 2)
    return 1;
  v8 = (**(_BYTE **)(a1 + 8) & 1) != 0 ? 32 : 16;
  if ((v8 & HIDWORD(v20)) != 0)
    return 1;
  v19 = -86;
  v11 = *(uint64_t **)(a1 + 16);
  v12 = *(unint64_t **)(a1 + 24);
  v13 = *v11;
  v14 = *v12;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = operator new(0x40uLL);
  *v18 = &off_1E15E1528;
  v18[1] = v15;
  v18[2] = v11;
  v18[3] = v12;
  v18[4] = v16;
  v18[5] = &v21;
  v18[6] = &v19;
  v18[7] = v17;
  v23 = v18;
  v9 = OTL::GCommon::IterateLookupIndexes(v13, v4, v14, (uint64_t)v22);
  (*(void (**)(_QWORD *))(*v18 + 40))(v18);
  return v9;
}

void std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E15E1528;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E1528;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<TOpenTypeMorph::AddVariantsOfGlyph(TFont const&,unsigned short,std::function<void ()(unsigned short,__CFDictionary const*)>)::$_0::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  BOOL v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned __int16 v15;
  unsigned int v16;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  uint64_t (*v27)(_QWORD *, _QWORD);
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  const __CFString *v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  void *v52;
  uint64_t v53;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v63;
  uint64_t v64;
  const __CFString *v65;
  uint64_t v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  char v70;
  const __CFAllocator *alloc;
  unint64_t v73;
  char cStr[8];
  id v75;
  id v76[2];
  uint64_t (*v77)(_QWORD *, _QWORD);
  uint64_t v78;
  __int16 v79;

  v2 = (unsigned __int16 *)(**(_QWORD **)(a1 + 8)
                          + (bswap32(*(unsigned __int16 *)(**(_QWORD **)(a1 + 8) + 2 * *a2 + 2)) >> 16));
  v3 = **(_QWORD **)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = v2 + 3;
  v6 = (unint64_t)(v2 + 2) < v3 || (unint64_t)v5 > v4;
  if (v6
    || ((v7 = __rev16(v2[2]),
         v8 = (unint64_t)&v2[v7 + 3] + (((unint64_t)v2[1] >> 11) & 2),
         v3 <= (unint64_t)v2)
      ? (v9 = v8 >= (unint64_t)v2)
      : (v9 = 0),
        v9 ? (v10 = v8 > v4) : (v10 = 1),
        v10))
  {
    v70 = 0;
    return v70 & 1;
  }
  v11 = (unint64_t)&v5[v7];
  if ((unint64_t)(v2 + 4) <= v4)
    v12 = (v4 - (_DWORD)v5) >> 1;
  else
    v12 = 0;
  v13 = bswap32(v12) >> 16;
  v14 = v11 < (unint64_t)v5 || v11 > v4;
  if (v14)
    v15 = v12;
  else
    v15 = v7;
  if (v14)
    v16 = v13;
  else
    v16 = v2[2];
  if (!v16)
  {
    v19 = 1;
    goto LABEL_119;
  }
  v18 = 0;
  v19 = 0;
  v73 = v15;
  if ((v15 & 0xFFFE) != 0)
    v20 = v15;
  else
    v20 = 1;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v21 = (unsigned __int16 *)((char *)v2 + (bswap32(v2[v18 + 3]) >> 16));
    v22 = **(_QWORD **)(a1 + 24);
    if ((unint64_t)(v21 + 1) > v22)
      break;
    v23 = *v2;
    if (v23 == 1792)
    {
      if (*v21 != 256 || (unint64_t)(v21 + 4) > v22)
        break;
      v25 = v21[1];
      if (v25 == 1792
        || (v21 = (unsigned __int16 *)((char *)v21 + bswap32(*((_DWORD *)v21 + 1))), (unint64_t)(v21 + 1) > v22))
      {
LABEL_118:
        LOBYTE(v15) = 1;
        goto LABEL_119;
      }
      v26 = __rev16(v25);
    }
    else
    {
      v26 = __rev16(v23);
    }
    if ((v26 & 0xFFFFFFFD) != 1)
      goto LABEL_118;
    OTL::LookupWithCoverage::GetCoverage((OTL::Coverage *)v21, v22, (uint64_t)v76);
    v27 = v77;
    v28 = (id *)((char *)v76 + (v78 >> 1));
    if ((v78 & 1) != 0)
      v27 = *(uint64_t (**)(_QWORD *, _QWORD))(*v28 + v77);
    v29 = v27(v28, **(unsigned __int16 **)(a1 + 32));
    if (v29)
    {
      v30 = v29;
      v75 = 0;
      v31 = **(_DWORD **)(a1 + 40);
      if (v31 != 1633774708 && v31 != 1819239276)
      {
        *(_DWORD *)cStr = bswap32(v31);
        cStr[4] = 0;
        v76[0] = (id)CFStringCreateWithCString(alloc, cStr, 0);
        do
          v32 = __ldaxr((unint64_t *)v76);
        while (__stlxr(0, (unint64_t *)v76));
        do
          v33 = (void *)__ldaxr((unint64_t *)&v75);
        while (__stlxr(v32, (unint64_t *)&v75));

      }
      if (v26 == 3)
      {
        if (*v21 == 256)
        {
          v35 = **(_QWORD **)(a1 + 24);
          v36 = v21 + 3;
          if ((unint64_t)(v21 + 3) > v35)
            goto LABEL_123;
          v37 = bswap32(v21[2]) >> 16;
          v38 = (unint64_t)&v36[v37];
          v40 = v38 >= (unint64_t)v36 && v38 <= v35;
          v41 = (v35 - (unint64_t)v36) >> 1;
          if ((unint64_t)(v21 + 4) > v35)
            v41 = 0;
          if (!v40 && v41 != v37)
            goto LABEL_123;
          if (v30 <= v37)
          {
            v42 = v30 - 1;
            if (v40)
            {
              if (v42 >= v37)
                goto LABEL_123;
            }
            else if (v41 != v37 || v42 >= v37)
            {
              goto LABEL_123;
            }
            v55 = (unsigned __int16 *)((char *)v21 + (bswap32(v21[v42 + 3]) >> 16));
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) > v35)
              goto LABEL_123;
            v57 = *v55;
            v58 = __rev16(v57);
            v59 = (unint64_t)&v56[v58];
            v60 = (unint64_t)(v55 + 2) <= v35 ? (v35 - (unint64_t)v56) >> 1 : 0;
            v61 = v59 <= v35 && v59 >= (unint64_t)v56;
            if (!v61 && v60 != v58)
              goto LABEL_123;
            if (v57)
            {
              v63 = 0;
              if (v58 <= 1)
                v64 = 1;
              else
                v64 = v58;
              while (1)
              {
                *(_QWORD *)cStr = 0xAAAAAAAAAAAAAAAALL;
                v65 = (const __CFString *)atomic_load((unint64_t *)&v75);
                if (v65)
                {
                  *(_QWORD *)cStr = 0xAAAAAAAAAAAAAAAALL;
                  CopyFeatureSettingForTag(v65, 0, 0, 0, (v63 + 1), cStr);
                }
                else
                {
                  *(_QWORD *)cStr = 0;
                }
                v66 = *(_QWORD *)(a1 + 56);
                v67 = bswap32(v56[v63]);
                v68 = (void *)atomic_load((unint64_t *)cStr);
                v69 = *(_QWORD *)(v66 + 24);
                v79 = HIWORD(v67);
                v76[0] = v68;
                if (!v69)
                  break;
                ++v63;
                (*(void (**)(uint64_t, __int16 *, id *))(*(_QWORD *)v69 + 48))(v69, &v79, v76);

                if (v64 == v63)
                  goto LABEL_88;
              }
LABEL_125:
              std::__throw_bad_function_call[abi:nn180100]();
              JUMPOUT(0x1848C5798);
            }
          }
        }
      }
      else if (v26 == 1)
      {
        *(_QWORD *)cStr = 0xAAAAAAAAAAAAAAAALL;
        v34 = (const __CFString *)atomic_load((unint64_t *)&v75);
        if (v34)
        {
          *(_QWORD *)cStr = 0xAAAAAAAAAAAAAAAALL;
          CopyFeatureSettingForTag(v34, 0, 0, 0, 1, cStr);
        }
        else
        {
          *(_QWORD *)cStr = 0;
        }
        v43 = bswap32(*v21) >> 16;
        if (v43 == 2)
        {
          v46 = **(_QWORD **)(a1 + 24);
          v47 = v21 + 3;
          if ((unint64_t)(v21 + 3) > v46
            || ((v48 = bswap32(v21[2]) >> 16,
                 v49 = (unint64_t)&v47[v48],
                 (unint64_t)(v21 + 4) <= v46)
              ? (v50 = (v46 - (unint64_t)v47) >> 1)
              : (v50 = 0),
                v49 <= v46 ? (v51 = v49 >= (unint64_t)v47) : (v51 = 0),
                !v51 && v50 != v48))
          {
LABEL_122:

LABEL_123:
            break;
          }
          if (v30 <= v48)
          {
            v44 = *(_QWORD *)(a1 + 56);
            v45 = bswap32(v21[v30 + 2]) >> 16;
            goto LABEL_85;
          }
        }
        else if (v43 == 1)
        {
          if ((unint64_t)(v21 + 3) > **(_QWORD **)(a1 + 24))
            goto LABEL_122;
          v44 = *(_QWORD *)(a1 + 56);
          v45 = **(unsigned __int16 **)(a1 + 32) + (bswap32(v21[2]) >> 16);
LABEL_85:
          v52 = (void *)atomic_load((unint64_t *)cStr);
          v53 = *(_QWORD *)(v44 + 24);
          v79 = v45;
          v76[0] = v52;
          if (!v53)
            goto LABEL_125;
          (*(void (**)(uint64_t, __int16 *, id *))(*(_QWORD *)v53 + 48))(v53, &v79, v76);
        }

      }
LABEL_88:

    }
    ++v18;
    LOBYTE(v15) = v73;
    v19 = v18 >= v73;
    if (v18 == v20)
      goto LABEL_119;
  }
  LOBYTE(v15) = 0;
LABEL_119:
  v70 = v19 | v15;
  return v70 & 1;
}

void std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &unk_1E15E0250;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_1E15E0250;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(uint64_t a1, int *a2, unsigned __int16 **a3)
{
  int v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = operator new(0x48uLL);
  *(_QWORD *)v9 = &off_1E15E14E0;
  v9[2] = v4;
  v10 = *(_OWORD *)(a1 + 40);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v9 + 2) = v10;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v9 + 8) = v8;
  v16 = v9;
  v11 = OTL::GCommon::IterateLangSysTables(v6, v5, v7, (uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E15E14E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E14E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingGlyphs(TFont const&,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(unsigned int)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *LaoClassTable;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unsigned int *v21;
  unsigned int *i;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _OWORD v45[4];
  __int128 v46;
  unint64_t v47;
  int64x2_t **v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  int64x2_t *v53;
  int64x2_t v54;
  _OWORD v55[7];
  unint64_t v56;
  _OWORD *v57;
  int64x2_t v58;
  unint64_t v59;
  _OWORD v60[15];
  _OWORD *v61;
  unsigned int *v62;
  unsigned int *v63;
  uint64_t v64;
  _OWORD v65[9];
  _OWORD *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[3] = v4;
  v46 = v4;
  v45[1] = v4;
  v45[2] = v4;
  v45[0] = v4;
  OTL::GCommon::GCommon((uint64_t)v45, 0, *(_BYTE **)(a1 + 16), **(CFDataRef **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 8), v3);
  *(_QWORD *)&v45[0] = &unk_1E15DEE98;
  if (!HIDWORD(v46) || HIDWORD(v46) == *(_DWORD *)(a1 + 8))
  {
    if (v3)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v58.i32[0] = v3;
      v7 = *(_QWORD *)(v6 + 24);
      if (!v7)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1848C5F04);
      }
      (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)v7 + 48))(v7, &v58);
    }
    v8 = DWORD2(v46);
    if (SDWORD2(v46) > 1818324767)
    {
      if (DWORD2(v46) == 1818324768)
      {
        LaoClassTable = GetLaoClassTable();
        goto LABEL_18;
      }
      if (DWORD2(v46) == 1952997737)
      {
        LaoClassTable = GetThaiClassTable();
        goto LABEL_18;
      }
    }
    else
    {
      if (DWORD2(v46) == 1751215719)
      {
        v10 = *(_QWORD *)(a1 + 16);
        v11 = (uint64_t *)(a1 + 48);
        if (!v3)
          v11 = (uint64_t *)(a1 + 56);
        std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v67, *v11);
        HangulShapingEngine::AddShapingGlyphs(v10, (uint64_t)v67);
LABEL_24:
        v17 = v68;
        if (v68 == v67)
        {
          v18 = 4;
          v17 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_29;
          v18 = 5;
        }
        (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_29:
        *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v65[8] = v19;
        v65[7] = v19;
        v65[6] = v19;
        v65[5] = v19;
        v65[4] = v19;
        v65[3] = v19;
        v65[2] = v19;
        v65[1] = v19;
        v65[0] = v19;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v66 = v65;
        OTL::GCommon::GetFeatures((OTL::GCommon *)v45, (OTL::FeatureList *)&v62);
        *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v60[14] = v20;
        v60[13] = v20;
        v60[12] = v20;
        v60[11] = v20;
        v60[10] = v20;
        v60[9] = v20;
        v60[8] = v20;
        v60[7] = v20;
        v60[6] = v20;
        v60[5] = v20;
        v60[4] = v20;
        v60[3] = v20;
        v60[2] = v20;
        v60[1] = v20;
        v60[0] = v20;
        v58 = 0uLL;
        v59 = 0;
        v61 = v60;
        v21 = v62;
        for (i = v63; v21 != i; ++v21)
        {
          v23 = *v21;
          if (IsOTFeatureTurnedOnByShapingEngine(*v21))
          {
            v24 = v58.i64[1];
            if (v58.i64[1] >= v59)
            {
              v26 = (v58.i64[1] - v58.i64[0]) >> 3;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 61)
                abort();
              v28 = v59 - v58.i64[0];
              if ((uint64_t)(v59 - v58.i64[0]) >> 2 > v27)
                v27 = v28 >> 2;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v29 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              *((_QWORD *)&v55[0] + 1) = v60;
              v30 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v60, v29);
              v31 = (unsigned int *)&v30[8 * v26];
              *v31 = v23;
              v31[1] = 1;
              v32 = v58.i64[1];
              v33 = v58.i64[0];
              if (v58.i64[1] == v58.i64[0])
              {
                v36 = vdupq_n_s64(v58.u64[1]);
                v34 = (uint64_t)&v30[8 * v26];
              }
              else
              {
                v34 = (uint64_t)&v30[8 * v26];
                do
                {
                  v35 = *(_QWORD *)(v32 - 8);
                  v32 -= 8;
                  *(_QWORD *)(v34 - 8) = v35;
                  v34 -= 8;
                }
                while (v32 != v33);
                v36 = v58;
              }
              v25 = (uint64_t)(v31 + 2);
              v58.i64[0] = v34;
              v58.i64[1] = (uint64_t)(v31 + 2);
              v54 = v36;
              v37 = v59;
              v59 = (unint64_t)&v30[8 * v29];
              *(_QWORD *)&v55[0] = v37;
              v53 = (int64x2_t *)v36.i64[0];
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v53);
            }
            else
            {
              *(_DWORD *)v58.i64[1] = v23;
              *(_DWORD *)(v24 + 4) = 1;
              v25 = v24 + 8;
            }
            v58.i64[1] = v25;
          }
        }
        ConvertSettingsToOTFeatures(&v62, (unint64_t *)(*(_QWORD *)(a1 + 16) + 168), **(_DWORD **)(a1 + 16) & 1, &v58, 0, 0, 1);
        *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v55[6] = v38;
        v55[5] = v38;
        v55[4] = v38;
        v55[3] = v38;
        v55[2] = v38;
        v55[1] = v38;
        v55[0] = v38;
        v56 = 0xAAAAAAAAAAAAAAAALL;
        v57 = v55;
        v54 = 0uLL;
        v53 = 0;
        OTL::GCommon::GetLookups((uint64_t)v45, (uint64_t)&v58, (uint64_t)&v53, 1);
        v39 = (uint64_t *)(a1 + 48);
        if (!v3)
          v39 = (uint64_t *)(a1 + 56);
        std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v51, *v39);
        std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v49, *(_QWORD *)(a1 + 64));
        v5 = OTL::GSUB::AddShapingGlyphs(v45, (unsigned __int16 **)&v53, (uint64_t)v51, (uint64_t)v49);
        v40 = v50;
        if (v50 == v49)
        {
          v41 = 4;
          v40 = v49;
        }
        else
        {
          if (!v50)
            goto LABEL_54;
          v41 = 5;
        }
        (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_54:
        v42 = v52;
        if (v52 == v51)
        {
          v43 = 4;
          v42 = v51;
        }
        else
        {
          if (!v52)
          {
LABEL_59:
            v48 = &v53;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v48);
            v53 = &v58;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v53);
            v58.i64[0] = (uint64_t)&v62;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v58);
            return v5;
          }
          v43 = 5;
        }
        (*(void (**)(void))(*v42 + 8 * v43))();
        goto LABEL_59;
      }
      if (DWORD2(v46) == 1802005874)
      {
        LaoClassTable = GetKhmerClassTable();
LABEL_18:
        v12 = (uint64_t)LaoClassTable;
        v13 = *(_QWORD *)(a1 + 16);
        v14 = (uint64_t *)(a1 + 48);
        if (!v3)
          v14 = (uint64_t *)(a1 + 56);
        std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v67, *v14);
        OpenTypeClassTable::AddShapingGlyphs(v12, v13, (uint64_t)v67);
        goto LABEL_24;
      }
    }
    v15 = *(_QWORD **)(a1 + 16);
    v16 = (uint64_t *)(a1 + 48);
    if (!v3)
      v16 = (uint64_t *)(a1 + 56);
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v67, *v16);
    UniversalShapingEngine::AddShapingGlyphsForScript(v15, v8, (uint64_t)v67);
    goto LABEL_24;
  }
  return 1;
}

void std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &unk_1E15E0208;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_1E15E0208;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(uint64_t a1, int *a2, unsigned __int16 **a3)
{
  int v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  v8 = operator new(0x40uLL);
  *(_QWORD *)v8 = &off_1E15E1498;
  v8[2] = v4;
  v9 = *(_OWORD *)(a1 + 40);
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a1 + 56);
  v15 = v8;
  v10 = OTL::GCommon::IterateLangSysTables(v6, v5, v7, (uint64_t)v14);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E15E1498;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E1498;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddCoveredGlyphs(TFont const&,CTFeatureSetting *,std::function<void ()(unsigned short,unsigned short)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  CFArrayRef v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v15[8];
  __int128 v16;
  _OWORD v17[2];
  unint64_t v18;
  _OWORD v19[5];
  unint64_t v20;
  void **v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  void *values[3];
  _OWORD v27[7];
  unint64_t v28;
  _OWORD *v29;
  int64x2_t v30;
  uint64_t v31;
  _OWORD v32[15];
  _OWORD *v33;
  unsigned int *v34[3];
  _OWORD v35[9];
  _OWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[3] = v4;
  v19[4] = v4;
  v19[1] = v4;
  v19[2] = v4;
  v19[0] = v4;
  OTL::GCommon::GCommon((uint64_t)v19, 0, *(_BYTE **)(a1 + 16), **(CFDataRef **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 8), v3);
  *(_QWORD *)&v19[0] = &unk_1E15DEE98;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[8] = v5;
  v35[7] = v5;
  v35[6] = v5;
  v35[5] = v5;
  v35[4] = v5;
  v35[3] = v5;
  v35[2] = v5;
  v35[1] = v5;
  v35[0] = v5;
  memset(v34, 0, sizeof(v34));
  v36 = v35;
  if (OTL::GCommon::GetFeatures((OTL::GCommon *)v19, (OTL::FeatureList *)v34))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v32[14] = v6;
    v32[13] = v6;
    v32[12] = v6;
    v32[11] = v6;
    v32[10] = v6;
    v32[9] = v6;
    v32[8] = v6;
    v32[7] = v6;
    v32[6] = v6;
    v32[5] = v6;
    v32[4] = v6;
    v32[3] = v6;
    v32[2] = v6;
    v32[1] = v6;
    v32[0] = v6;
    v30 = 0uLL;
    v31 = 0;
    v33 = v32;
    values[0] = **(void ***)(a1 + 40);
    v7 = 1;
    v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v16 = xmmword_184948968;
    memset(v17, 170, sizeof(v17));
    v18 = 0xAAAAAAAAFFFFFFFFLL;
    memset(v15, 170, sizeof(v15));
    TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)v15, v8);
    ConvertSettingsToOTFeatures(v34, (unint64_t *)v15, **(_DWORD **)(a1 + 16) & 1, &v30, 0, 0, 0);
    if (v30.i64[0] == v30.i64[1])
    {
LABEL_15:
      std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)v17);
      std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v15[5]);
      std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)&v15[1], (_QWORD *)v15[2]);

      values[0] = &v30;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)values);
      goto LABEL_16;
    }
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[6] = v9;
    v27[5] = v9;
    v27[4] = v9;
    v27[3] = v9;
    v27[2] = v9;
    v27[1] = v9;
    v27[0] = v9;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    v29 = v27;
    memset(values, 0, sizeof(values));
    OTL::GCommon::GetLookups((uint64_t)v19, (uint64_t)&v30, (uint64_t)values, 0);
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v24, *(_QWORD *)(a1 + 48));
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v22, *(_QWORD *)(a1 + 56));
    v7 = OTL::GSUB::AddCoveredGlyphs(v19, (unsigned __int16 **)values, (uint64_t)v24, (uint64_t)v22);
    v10 = v23;
    if (v23 == v22)
    {
      v11 = 4;
      v10 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_9;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_9:
    v12 = v25;
    if (v25 == v24)
    {
      v13 = 4;
      v12 = v24;
    }
    else
    {
      if (!v25)
      {
LABEL_14:
        v21 = values;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v21);
        goto LABEL_15;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
    goto LABEL_14;
  }
  v7 = 1;
LABEL_16:
  v30.i64[0] = (uint64_t)v34;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,36ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
  return v7;
}

void std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15E02E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E02E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0,std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2, unsigned __int16 **a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *a3;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = **(_QWORD **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v12[0] = &off_1E15E1570;
  v12[1] = v3;
  v12[2] = v7;
  v13 = v12;
  v8 = OTL::GCommon::IterateLangSysTables(v5, v4, v6, (uint64_t)v12);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15E1570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E1570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1},std::allocator<TOpenTypeMorph::AddShapingLanguages(TBaseFont const&,std::function<void ()(__CFString const*)>,std::function<void ()(void)>)::$_0::operator() const(unsigned int,OTL::ScriptTable const*,BOOL &)::{lambda(unsigned int,OTL::LangSysTable const*,BOOL &)#1}>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFString *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;
  const char *ShortName;
  CFStringRef v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  id v18;
  CFStringRef v19;

  v3 = *a2;
  if (*a2)
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    LanguagesWithLangSysTag(v3, &v18);
    v4 = (const __CFArray *)atomic_load((unint64_t *)&v18);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count)
      {
        v6 = Count;
        v7 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v7);
          v9 = *(_QWORD *)(a1 + 16);
          v19 = ValueAtIndex;
          v10 = *(_QWORD *)(v9 + 24);
          if (!v10)
            goto LABEL_13;
          (*(void (**)(uint64_t, CFStringRef *))(*(_QWORD *)v10 + 48))(v10, &v19);
        }
        while (v6 != ++v7);
      }
    }

    return 1;
  }
  ScriptCodeForScriptTag(*(_DWORD *)(a1 + 8));
  ShortName = (const char *)uscript_getShortName();
  if (!ShortName)
    return 1;
  v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ShortName, 0x600u);
  if (!v13)
    return 1;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 16);
  v19 = v13;
  v16 = *(_QWORD *)(v15 + 24);
  if (v16)
  {
    (*(void (**)(uint64_t, CFStringRef *))(*(_QWORD *)v16 + 48))(v16, &v19);
    CFRelease(v14);
    return 1;
  }
LABEL_13:
  v17 = std::__throw_bad_function_call[abi:nn180100]();
  return UniversalClassTable::EnumerateScriptRanges(v17);
}

uint64_t UniversalClassTable::EnumerateScriptRanges(uint64_t a1)
{
  uint64_t i;
  uint64_t result;

  for (i = 0; i != 1600; i += 16)
    result = std::function<void ()(unsigned int,CFRange)>::operator()(a1, *(_DWORD *)&kClassDataDirectory[i], *(unsigned int *)&kClassDataDirectory[i + 4], *(unsigned __int16 *)&kClassDataDirectory[i + 10]+ (unint64_t)*(unsigned __int16 *)&kClassDataDirectory[i + 8]);
  return result;
}

uint64_t UniversalClassTable::determineCharClass(unsigned int c)
{
  uint64_t result;
  int v3;
  int32_t IntPropertyValue;
  unsigned int v5;

  if (c == 32)
    return 14;
  if (c == 847)
    return 21;
  if (c >> 9 < 0x7F || (result = 22, c >> 4 >= 0xFE1) && c - 917760 >= 0xF0)
  {
    v3 = u_charType(c);
    if (v3 > 24)
    {
      if (v3 == 27 || v3 == 25)
        return 16;
    }
    else
    {
      if (v3 == 12)
        return 14;
      if (v3 == 23)
        return 2;
    }
    IntPropertyValue = u_getIntPropertyValue(c, UCHAR_SCRIPT);
    if (IntPropertyValue == 71)
      v5 = 23;
    else
      v5 = 0;
    if (IntPropertyValue)
      return v5;
    else
      return 14;
  }
  return result;
}

uint64_t *FirstBlockForScript@<X0>(BOOL *a1@<X1>, unsigned int a2@<W0>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;

  v10 = a2;
  if (FirstBlockForScript(unsigned int,BOOL *)::once != -1)
    dispatch_once_f(&FirstBlockForScript(unsigned int,BOOL *)::once, 0, (dispatch_function_t)FirstBlockForScript(unsigned int,BOOL *)::$_0::__invoke);
  if (result)
  {
    v6 = result[3];
    v7 = *(unsigned __int16 *)(v6 + 14);
    if (a1)
      *a1 = v7 != 0;
    *(_QWORD *)a3 = (char *)&kClassDataTable + 2 * *(unsigned __int16 *)(v6 + 12);
    v8 = *(_DWORD *)(v6 + 4);
    v9 = v8 + *(unsigned __int16 *)(v6 + 8);
    *(_DWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 12) = v9 - 1;
    *(_DWORD *)(a3 + 16) = v9 + *(unsigned __int16 *)(v6 + 10);
    *(_BYTE *)(a3 + 20) = v7 != 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t UniversalClassTable::getCharClass(UniversalClassTable *this, unsigned int c)
{
  uint64_t v2;
  unsigned int v3;

  if (c >= *(_DWORD *)this && *((_DWORD *)this + 1) >= c)
    return *(unsigned __int16 *)(*((_QWORD *)this + 2) + 2 * (c - *(_DWORD *)this));
  v2 = 0;
  while (1)
  {
    v3 = *(_DWORD *)&kClassDataDirectory[v2 + 4];
    if (c >= v3 && v3 + *(unsigned __int16 *)&kClassDataDirectory[v2 + 8] - 1 >= c)
      break;
    v2 += 16;
    if (v2 == 1600)
      return UniversalClassTable::determineCharClass(c);
  }
  return kClassDataTable[*(unsigned __int16 *)&kClassDataDirectory[v2 + 12] + c - v3];
}

uint64_t UniversalClassTable::getSplitMatra(UniversalClassTable *this)
{
  __int128 v1;
  int Decomposition;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  void **v11;
  _QWORD v12[3];
  uint64_t v13;
  _OWORD v14[3];
  unint64_t v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[2] = v1;
  v14[0] = v1;
  v14[1] = v1;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  v16 = (char *)v14 + 4;
  v12[2] = (char *)v14 + 4;
  v13 = 0;
  LODWORD(v14[0]) = 0;
  v12[0] = &v13;
  v12[1] = (char *)v14 + 4;
  LODWORD(v11) = 0;
  unorm2_getNFDInstance();
  Decomposition = unorm2_getDecomposition();
  if (Decomposition < 1)
  {
    v7 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (int *)&v9;
    v5 = v12[0];
    do
    {
      v6 = *(unsigned __int16 *)(v5 + 2 * v3);
      if ((v6 & 0xFC00) == 0xD800)
      {
        ++v3;
        v6 = *(unsigned __int16 *)(v5 + 2 * v3) + (v6 << 10) - 56613888;
      }
      *v4++ = v6;
      ++v3;
    }
    while (v3 < Decomposition);
    v7 = v9;
  }
  v11 = (void **)v12;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v11);
  return v7;
}

void *TInlineBufferAllocator<unsigned short,48ul>::allocate(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 96);
  v2 = (unint64_t *)(a1 + 96);
  v3 = v4;
  v5 = v4 + 2 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 < 0)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(2 * a2);
  }
}

uint64_t std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,48ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 96);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,48ul>>::__destroy_vector::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 120);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 120))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t *std::unordered_map<unsigned int,`anonymous namespace'::DirectoryEntry const&>::find[abi:nn180100](unsigned int *a1)
{
  unint64_t v1;
  uint8x8_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t *result;
  unint64_t v6;

  if (!*((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1))
    return 0;
  v1 = *a1;
  v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8));
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = *a1;
    if (*((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1) <= v1)
      v3 = v1 % *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1);
  }
  else
  {
    v3 = (DWORD2(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries) - 1) & v1;
  }
  v4 = *(uint64_t ***)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v3);
  if (!v4)
    return 0;
  for (result = *v4; result; result = (uint64_t *)*result)
  {
    v6 = result[1];
    if (v6 == v1)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v1)
        return result;
    }
    else
    {
      if (v2.u32[0] > 1uLL)
      {
        if (v6 >= *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1))
          v6 %= *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1);
      }
      else
      {
        v6 &= *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1) - 1;
      }
      if (v6 != v3)
        return 0;
    }
  }
  return result;
}

void FirstBlockForScript(unsigned int,BOOL *)::$_0::__invoke()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  _QWORD *v9;
  float v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD **v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *j;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void *v29;

  v0 = 0;
  v1 = 0;
  FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries = 0u;
  *(_OWORD *)&qword_1ECDE7400 = 0u;
  v2 = (unsigned int *)"****-";
  dword_1ECDE7410 = 1065353216;
  do
  {
      goto LABEL_76;
    v3 = *v2;
    if (v1)
    {
      v4 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v5 = *v2;
        if (v1 <= v3)
          v5 = v3 % v1;
      }
      else
      {
        v5 = ((_DWORD)v1 - 1) & v3;
      }
      v6 = *(uint64_t ***)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v5);
      if (v6)
      {
        for (i = *v6; i; i = (uint64_t *)*i)
        {
          v8 = i[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v3)
              goto LABEL_76;
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v8 >= v1)
                v8 %= v1;
            }
            else
            {
              v8 &= v1 - 1;
            }
            if (v8 != v5)
              break;
          }
        }
      }
    }
    else
    {
      v5 = 0xAAAAAAAAAAAAAAAALL;
    }
    v9 = operator new(0x20uLL);
    *v9 = 0;
    v9[1] = v3;
    *((_DWORD *)v9 + 4) = v3;
    v9[3] = v2;
    v10 = (float)(unint64_t)(v0 + 1);
    if (!v1 || (float)(*(float *)&dword_1ECDE7410 * (float)v1) < v10)
    {
      v11 = (v1 & (v1 - 1)) == 0;
      if (v1 < 3)
        v11 = 0;
      v12 = (2 * v1) | !v11;
      v13 = vcvtps_u32_f32(v10 / *(float *)&dword_1ECDE7410);
      if (v12 <= v13)
        prime = (int8x8_t)v13;
      else
        prime = (int8x8_t)v12;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v1 = *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1);
      }
      if (*(_QWORD *)&prime > v1)
        goto LABEL_32;
      if (*(_QWORD *)&prime < v1)
      {
        v21 = vcvtps_u32_f32((float)(unint64_t)qword_1ECDE7408 / *(float *)&dword_1ECDE7410);
        if (v1 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v1), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
        {
          v21 = std::__next_prime(v21);
        }
        else
        {
          v23 = 1 << -(char)__clz(v21 - 1);
          if (v21 >= 2)
            v21 = v23;
        }
        if (*(_QWORD *)&prime <= v21)
          prime = (int8x8_t)v21;
        if (*(_QWORD *)&prime >= v1)
        {
          v1 = *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1);
        }
        else
        {
          if (prime)
          {
LABEL_32:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v15 = operator new(8 * *(_QWORD *)&prime);
            v16 = (void *)FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries;
            *(_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries = v15;
            if (v16)
              operator delete(v16);
            v17 = 0;
            *((int8x8_t *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1) = prime;
            do
              *(_QWORD *)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v17++) = 0;
            while (*(_QWORD *)&prime != v17);
            v18 = (_QWORD **)qword_1ECDE7400;
            if (qword_1ECDE7400)
            {
              v19 = *(_QWORD *)(qword_1ECDE7400 + 8);
              v20 = (uint8x8_t)vcnt_s8(prime);
              v20.i16[0] = vaddlv_u8(v20);
              if (v20.u32[0] > 1uLL)
              {
                if (v19 >= *(_QWORD *)&prime)
                  v19 %= *(_QWORD *)&prime;
              }
              else
              {
                v19 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v19) = &qword_1ECDE7400;
              for (j = *v18; j; v19 = v25)
              {
                v25 = j[1];
                if (v20.u32[0] > 1uLL)
                {
                  if (v25 >= *(_QWORD *)&prime)
                    v25 %= *(_QWORD *)&prime;
                }
                else
                {
                  v25 &= *(_QWORD *)&prime - 1;
                }
                if (v25 != v19)
                {
                  if (!*(_QWORD *)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v25))
                  {
                    *(_QWORD *)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v25) = v18;
                    goto LABEL_57;
                  }
                  *v18 = (_QWORD *)*j;
                  *j = **(_QWORD **)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v25);
                  **(_QWORD **)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v25) = j;
                  j = v18;
                }
                v25 = v19;
LABEL_57:
                v18 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v1 = (unint64_t)prime;
            goto LABEL_61;
          }
          v29 = (void *)FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries;
          *(_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries = 0;
          if (v29)
            operator delete(v29);
          v1 = 0;
          *((_QWORD *)&FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 1) = 0;
        }
      }
LABEL_61:
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v1 <= v3)
          v5 = v3 % v1;
        else
          v5 = v3;
      }
      else
      {
        v5 = ((_DWORD)v1 - 1) & v3;
      }
    }
    v26 = FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries;
    v27 = *(_QWORD **)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v5);
    if (v27)
    {
      *v9 = *v27;
LABEL_74:
      *v27 = v9;
      goto LABEL_75;
    }
    *v9 = qword_1ECDE7400;
    qword_1ECDE7400 = (uint64_t)v9;
    *(_QWORD *)(v26 + 8 * v5) = &qword_1ECDE7400;
    if (*v9)
    {
      v28 = *(_QWORD *)(*v9 + 8);
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v28 >= v1)
          v28 %= v1;
      }
      else
      {
        v28 &= v1 - 1;
      }
      v27 = (_QWORD *)(FirstBlockForScript(unsigned int,BOOL *)::sFirstEntries + 8 * v28);
      goto LABEL_74;
    }
LABEL_75:
    v0 = ++qword_1ECDE7408;
LABEL_76:
    v2 += 4;
  }
  while (v2 != (unsigned int *)&kClassDataTable);
}

const __CFData *TOpenTypePositioningEngine::SetScript(uint64_t a1, int a2)
{
  const __CFData *result;
  _BYTE *v4;
  int v5;
  unsigned int v6;

  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = ScriptTagForScriptCode(a2);
  result = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(*(_QWORD *)(a1 + 8) + 400), 1196445523, 0);
  if (result)
  {
    v4 = *(_BYTE **)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 28);
    v6 = *(_DWORD *)(a1 + 32);
    if (*(_BYTE *)(a1 + 208))
      *(_BYTE *)(a1 + 208) = 0;
    result = (const __CFData *)OTL::GCommon::GCommon(a1 + 120, 1, v4, result, a1 + 40, v5, v6);
    *(_QWORD *)(a1 + 120) = &off_1E15DEE70;
    *(_BYTE *)(a1 + 208) = 1;
  }
  return result;
}

void std::__function::__func<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1,std::allocator<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1,std::allocator<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0640;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1,std::allocator<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0640;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1,std::allocator<TOpenTypePositioningEngine::PositionRuns(SyncState &,KerningStatus &)::$_1>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3, _BYTE *a4)
{
  if (*a2 == 1801810542)
  {
    **(_WORD **)(a1 + 8) = bswap32(*(unsigned __int16 *)(*(_QWORD *)a3 + 4)) >> 16;
    *a4 = 1;
  }
  return 1;
}

CTParagraphStyleRef CTParagraphStyleCreateCopy(CTParagraphStyleRef paragraphStyle)
{
  uint64_t v1;
  _QWORD *v2;
  TNativeParagraphStyle *v3;
  void *v4;
  void *v5;
  const __CTParagraphStyle *v6;
  id v8;
  id v9;
  TParagraphStyle *v10[2];
  id v11;

  if (!paragraphStyle)
    return 0;
  v10[0] = 0;
  v10[1] = (TParagraphStyle *)0xAAAAAAAAAAAAAA00;
  if (!TParagraphStyle::SetStyle((TParagraphStyle *)v10, paragraphStyle))
    return 0;
  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  v1 = TCFBase<TNativeParagraphStyle>::Allocate();
  if (v1)
  {
    v2 = (_QWORD *)v1;
    v3 = (TNativeParagraphStyle *)(v1 + 48);
    v2[2] = 0;
    v2[3] = TNativeParagraphStyle::Hash;
    v2[4] = 0;
    v2[5] = v3;
    TNativeParagraphStyle::TNativeParagraphStyle(v3, v10);
    v11 = v2;
    do
      v4 = (void *)__ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
    v8 = v4;

  }
  else
  {
    v8 = 0;
  }
  do
    v5 = (void *)__ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));
  v9 = v5;

  do
    v6 = (const __CTParagraphStyle *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  return v6;
}

BOOL CTParagraphStyleGetValueForSpecifier(CTParagraphStyleRef paragraphStyle, CTParagraphStyleSpecifier spec, size_t valueBufferSize, void *valueBuffer)
{
  CTParagraphStyleRef v5;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 Alignment;
  double FirstLineHeadIndent;
  id TabStops;
  uint64_t v14;
  TParagraphStyle *v16;
  unint64_t v17;

  v5 = paragraphStyle;
  LOBYTE(paragraphStyle) = 0;
  if (v5)
  {
    if (valueBuffer)
    {
      v16 = 0;
      v17 = 0xAAAAAAAAAAAAAA00;
      LODWORD(paragraphStyle) = TParagraphStyle::SetStyle((TParagraphStyle *)&v16, v5);
      if ((_DWORD)paragraphStyle)
      {
        switch(spec)
        {
          case kCTParagraphStyleSpecifierAlignment:
            if (!valueBufferSize)
              goto LABEL_48;
            Alignment = TParagraphStyle::GetAlignment(&v16, v8);
            goto LABEL_35;
          case kCTParagraphStyleSpecifierFirstLineHeadIndent:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetFirstLineHeadIndent(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierHeadIndent:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetHeadIndent(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierTailIndent:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetTailIndent(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierTabStops:
            if (valueBufferSize < 8)
              goto LABEL_48;
            TabStops = TParagraphStyle::GetTabStops(&v16, v8);
            goto LABEL_47;
          case kCTParagraphStyleSpecifierDefaultTabInterval:
            if (valueBufferSize < 8)
              goto LABEL_48;
            TParagraphStyle::GetDefaultTabInterval(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierLineBreakMode:
            if (!valueBufferSize)
              goto LABEL_48;
            Alignment = TParagraphStyle::GetLineBreakMode(&v16, v8);
            goto LABEL_35;
          case kCTParagraphStyleSpecifierLineHeightMultiple:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetLineHeightMultiple(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierMaximumLineHeight:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetMaximumLineHeight(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierMinimumLineHeight:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetMinimumLineHeight(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierLineSpacing:
          case kCTParagraphStyleSpecifierMinimumLineSpacing:
            if (valueBufferSize < 8)
              goto LABEL_48;
            v9 = 0;
            if ((_BYTE)v17)
            {
              v10 = TParagraphStyle::GetNative(v16, v8)[1];
              if (v10)
                v9 = *(_QWORD *)(v10 + 40);
            }
            goto LABEL_40;
          case kCTParagraphStyleSpecifierParagraphSpacing:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetParagraphSpacing(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierParagraphSpacingBefore:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetParagraphSpacingBefore(&v16, v8);
            goto LABEL_43;
          case kCTParagraphStyleSpecifierBaseWritingDirection:
            if (!valueBufferSize)
              goto LABEL_48;
            Alignment = TParagraphStyle::GetBaseWritingDirection(&v16, v8);
LABEL_35:
            *(_BYTE *)valueBuffer = Alignment;
            goto LABEL_44;
          case kCTParagraphStyleSpecifierMaximumLineSpacing:
            if (valueBufferSize < 8)
              goto LABEL_48;
            v9 = 0x416312D000000000;
            if ((_BYTE)v17)
            {
              v14 = TParagraphStyle::GetNative(v16, v8)[1];
              if (v14)
                v9 = *(_QWORD *)(v14 + 32);
            }
LABEL_40:
            *(_QWORD *)valueBuffer = v9;
            goto LABEL_44;
          case kCTParagraphStyleSpecifierLineSpacingAdjustment:
            if (valueBufferSize < 8)
              goto LABEL_48;
            FirstLineHeadIndent = TParagraphStyle::GetLineSpacingAdjustment(&v16, v8);
LABEL_43:
            *(double *)valueBuffer = FirstLineHeadIndent;
            goto LABEL_44;
          case kCTParagraphStyleSpecifierLineBoundsOptions:
            if (valueBufferSize < 8)
              goto LABEL_48;
            TabStops = TParagraphStyle::GetLineBoundsOptions((id *)&v16, v8);
LABEL_47:
            *(_QWORD *)valueBuffer = TabStops;
LABEL_44:
            LOBYTE(paragraphStyle) = 1;
            break;
          default:
LABEL_48:
            LOBYTE(paragraphStyle) = 0;
            break;
        }
      }
    }
  }
  return (char)paragraphStyle;
}

uint64_t CTParagraphStyleGetCompositionLanguage(CFTypeRef cf)
{
  const void *v1;
  id v3[2];

  if (!cf)
    return 1;
  v3[0] = 0;
  v3[1] = (id)0xAAAAAAAAAAAAAA00;
  if (TParagraphStyle::SetStyle((TParagraphStyle *)v3, cf))
    return (uint64_t)TParagraphStyle::GetCompositionLanguage(v3, v1);
  else
    return 1;
}

const void *CTParagraphStyleSetCompositionLanguage(const void *cf, uint64_t a2)
{
  _QWORD v3[2];

  if (cf)
  {
    v3[0] = 0;
    v3[1] = 0xAAAAAAAAAAAAAA00;
    cf = (const void *)TParagraphStyle::SetStyle((TParagraphStyle *)v3, cf);
    if ((_DWORD)cf)
      return (const void *)TParagraphStyle::SetCompositionLanguage((uint64_t)v3, a2);
  }
  return cf;
}

BOOL TCFBase<TNativeParagraphStyle>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TNativeParagraphStyle::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

_QWORD *TCFBase<TNativeParagraphStyle>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

__CFString *TCFBase<TNativeParagraphStyle>::ClassDebug(uint64_t a1)
{
  __CFString *result;
  __CFString *v3;
  CFStringRef v4;

  result = TNativeParagraphStyle::DebugDescription(*(TNativeParagraphStyle **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTParagraphStyle", a1, result);
    CFRelease(v3);
    return (__CFString *)v4;
  }
  return result;
}

void TNativeParagraphStyle::TNativeParagraphStyle(TNativeParagraphStyle *this, TParagraphStyle **a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  double FirstLineHeadIndent;
  double v12;
  double *v13;
  const void *v14;
  double HeadIndent;
  double v16;
  uint64_t v17;
  const void *v18;
  double TailIndent;
  double v20;
  uint64_t v21;
  const void *v22;
  double LineHeightMultiple;
  double v24;
  double *v25;
  const void *v26;
  double LineSpacingAdjustment;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const void *v36;
  double ParagraphSpacing;
  double v38;
  uint64_t v39;
  double ParagraphSpacingBefore;
  double v41;
  uint64_t v42;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = TParagraphStyle::GetTabStops(a2, a2);
  *((_BYTE *)this + 32) = TParagraphStyle::GetLineBreakMode(a2, v4);
  *((_BYTE *)this + 33) = TParagraphStyle::GetAlignment(a2, v5);
  *((_BYTE *)this + 34) = TParagraphStyle::GetBaseWritingDirection(a2, v6);
  *((_QWORD *)this + 5) = TParagraphStyle::GetLineBoundsOptions((id *)a2, v7);
  *((_BYTE *)this + 48) = TParagraphStyle::GetCompositionLanguage((id *)a2, v8);
  FirstLineHeadIndent = TParagraphStyle::GetFirstLineHeadIndent(a2, v9);
  if (FirstLineHeadIndent != 0.0)
  {
    v12 = FirstLineHeadIndent;
    v13 = *(double **)this;
    if (!*(_QWORD *)this)
    {
      TNativeParagraphStyle::CreateIndentPack(this);
      v13 = *(double **)this;
    }
    *v13 = v12;
  }
  HeadIndent = TParagraphStyle::GetHeadIndent(a2, v10);
  if (HeadIndent != 0.0)
  {
    v16 = HeadIndent;
    v17 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      TNativeParagraphStyle::CreateIndentPack(this);
      v17 = *(_QWORD *)this;
    }
    *(double *)(v17 + 8) = v16;
  }
  TailIndent = TParagraphStyle::GetTailIndent(a2, v14);
  if (TailIndent != 0.0)
  {
    v20 = TailIndent;
    v21 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      TNativeParagraphStyle::CreateIndentPack(this);
      v21 = *(_QWORD *)this;
    }
    *(double *)(v21 + 16) = v20;
  }
  LineHeightMultiple = TParagraphStyle::GetLineHeightMultiple(a2, v18);
  if (LineHeightMultiple != 0.0)
  {
    v24 = LineHeightMultiple;
    v25 = (double *)*((_QWORD *)this + 1);
    if (!v25)
    {
      TNativeParagraphStyle::CreateSpacePack(this);
      v25 = (double *)*((_QWORD *)this + 1);
    }
    *v25 = v24;
  }
  LineSpacingAdjustment = TParagraphStyle::GetLineSpacingAdjustment(a2, v22);
  if (LineSpacingAdjustment != 0.0)
  {
    v28 = LineSpacingAdjustment;
    v29 = *((_QWORD *)this + 1);
    if (!v29)
    {
      TNativeParagraphStyle::CreateSpacePack(this);
      v29 = *((_QWORD *)this + 1);
    }
    *(double *)(v29 + 24) = v28;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v30 = TParagraphStyle::GetNative(*a2, v26)[1];
    if (v30)
    {
      v31 = *(double *)(v30 + 32);
      if (v31 != 10000000.0)
      {
        v32 = *((_QWORD *)this + 1);
        if (!v32)
        {
          TNativeParagraphStyle::CreateSpacePack(this);
          v32 = *((_QWORD *)this + 1);
        }
        *(double *)(v32 + 32) = v31;
      }
    }
    if (*((_BYTE *)a2 + 8))
    {
      v33 = TParagraphStyle::GetNative(*a2, v26)[1];
      if (v33)
      {
        v34 = *(double *)(v33 + 40);
        if (v34 != 0.0)
        {
          v35 = *((_QWORD *)this + 1);
          if (!v35)
          {
            TNativeParagraphStyle::CreateSpacePack(this);
            v35 = *((_QWORD *)this + 1);
          }
          *(double *)(v35 + 40) = v34;
        }
      }
    }
  }
  ParagraphSpacing = TParagraphStyle::GetParagraphSpacing(a2, v26);
  if (ParagraphSpacing != 0.0)
  {
    v38 = ParagraphSpacing;
    v39 = *((_QWORD *)this + 1);
    if (!v39)
    {
      TNativeParagraphStyle::CreateSpacePack(this);
      v39 = *((_QWORD *)this + 1);
    }
    *(double *)(v39 + 48) = v38;
  }
  ParagraphSpacingBefore = TParagraphStyle::GetParagraphSpacingBefore(a2, v36);
  if (ParagraphSpacingBefore != 0.0)
  {
    v41 = ParagraphSpacingBefore;
    v42 = *((_QWORD *)this + 1);
    if (!v42)
    {
      TNativeParagraphStyle::CreateSpacePack(this);
      v42 = *((_QWORD *)this + 1);
    }
    *(double *)(v42 + 56) = v41;
  }
}

uint64_t TNativeParagraphStyle::Hash(TNativeParagraphStyle *this)
{
  unint64_t v1;
  double *v2;
  uint64_t v3;
  const __CFArray *Count;

  v1 = (unint64_t)*((unsigned __int8 *)this + 33) << 24;
  v2 = *(double **)this;
  if (*(_QWORD *)this)
  {
    v1 += (uint64_t)v2[1] << 16;
    v3 = (uint64_t)*v2 << 8;
  }
  else
  {
    v3 = 0;
  }
  Count = (const __CFArray *)atomic_load((unint64_t *)this + 3);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  return (uint64_t)Count + v3 + v1;
}

BOOL TNativeParagraphStyle::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  const void *v15;
  const void *v16;

  if (*(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33)
    || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34)
    || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || operator!=((unint64_t *)(a1 + 24), (unint64_t *)(a2 + 24)))
  {
    return 0;
  }
  v5 = *(uint64_t **)a1;
  v6 = *(uint64_t **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v6)
      return 0;
    v7 = *v5;
    v8 = v5[1];
    v9 = *v6;
    v10 = v6[1];
    v11 = v5[2];
    v12 = v6[2];
    v13 = v7 == v9 && v8 == v10;
    if (!v13 || v11 != v12)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v15 = *(const void **)(a1 + 8);
  v16 = *(const void **)(a2 + 8);
  if (v15)
    return v16 && !memcmp(v15, v16, 0x40uLL);
  return !v16;
}

__CFString *TNativeParagraphStyle::DebugDescription(TNativeParagraphStyle *this)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  int v4;
  __CFString *v5;
  CFStringRef v6;
  __CFString *v7;
  __CFString *v8;
  CFStringRef v9;
  __CFString *v10;
  __CFString *v11;
  CFStringRef v12;
  __CFString *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  const __CFArray *v28;
  id v29;
  CFIndex Count;
  CFIndex v31;
  CFIndex i;
  TNativeTextTab **ValueAtIndex;
  void *v34;
  CFTypeID v35;
  CFStringRef v36;
  CFTypeRef v37;
  const __CFString *v38;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = *((char *)this + 34);
  if (v4 == 1)
  {
    v5 = CFSTR("right to left");
    goto LABEL_7;
  }
  if (!*((_BYTE *)this + 34))
  {
    v5 = CFSTR("left to right");
    goto LABEL_7;
  }
  if (v4 == -1)
  {
    v5 = CFSTR("natural");
LABEL_7:
    v6 = v5;
    goto LABEL_9;
  }
  v6 = CFStringCreateWithFormat(v2, 0, CFSTR("%d"), *((char *)this + 34));
LABEL_9:
  v7 = (__CFString *)v6;
  switch(*((_BYTE *)this + 33))
  {
    case 0:
      v8 = CFSTR("left");
      goto LABEL_16;
    case 1:
      v8 = CFSTR("right");
      goto LABEL_16;
    case 2:
      v8 = CFSTR("center");
      goto LABEL_16;
    case 3:
      v8 = CFSTR("justified");
      goto LABEL_16;
    case 4:
      v8 = CFSTR("natural");
LABEL_16:
      v9 = v8;
      break;
    default:
      v9 = CFStringCreateWithFormat(v2, 0, CFSTR("%d"), *((unsigned __int8 *)this + 33));
      break;
  }
  v10 = (__CFString *)v9;
  switch(*((_BYTE *)this + 32))
  {
    case 0:
      v11 = CFSTR("word wrapping");
      goto LABEL_25;
    case 1:
      v11 = CFSTR("char wrapping");
      goto LABEL_25;
    case 2:
      v11 = CFSTR("clipping");
      goto LABEL_25;
    case 3:
      v11 = CFSTR("truncating head");
      goto LABEL_25;
    case 4:
      v11 = CFSTR("truncating tail");
      goto LABEL_25;
    case 5:
      v11 = CFSTR("truncating middle");
LABEL_25:
      v12 = v11;
      break;
    default:
      v12 = CFStringCreateWithFormat(v2, 0, CFSTR("%d"), *((unsigned __int8 *)this + 32));
      break;
  }
  v13 = (__CFString *)v12;
  CFStringAppendFormat(Mutable, 0, CFSTR("base writing direction = %@, alignment = %@, line break mode = %@, default tab interval = %g\n"), v7, v10, v12, *((_QWORD *)this + 2));

  v14 = *(uint64_t **)this;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if (*(_QWORD *)this)
  {
    v17 = *v14;
    v16 = v14[1];
    v18 = v14[2];
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("first line head indent = %g, head indent = %g, tail indent = %g\n"), v17, v16, v18);
  v19 = (uint64_t *)*((_QWORD *)this + 1);
  v20 = 0;
  v21 = 0;
  if (v19)
  {
    v20 = *v19;
    v15 = v19[1];
    v21 = v19[2];
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("line height multiple = %g, maximum line height = %g, minimum line height = %g\n"), v20, v15, v21);
  v22 = (_QWORD *)*((_QWORD *)this + 1);
  if (v22)
  {
    v23 = v22[3];
    v24 = v22[6];
    v25 = v22[7];
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v25 = 0;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("line spacing adjustment = %g, paragraph spacing = %g, paragraph spacing before = %g\n"), v23, v24, v25);
  v26 = *((_QWORD *)this + 1);
  v27 = (_QWORD *)(v26 + 32);
  if (!v26)
    v27 = &TParagraphStyle::kLargeNumber;
  if (*(double *)v27 != 10000000.0)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("maximum line spacing = %g\n"), *v27);
    v26 = *((_QWORD *)this + 1);
  }
  if (v26 && *(double *)(v26 + 40) != 0.0)
    CFStringAppendFormat(Mutable, 0, CFSTR("minimum line spacing = %g\n"), *(_QWORD *)(v26 + 40));
  v28 = (const __CFArray *)atomic_load((unint64_t *)this + 3);
  if (v28)
  {
    v29 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    Count = CFArrayGetCount(v28);
    if (Count)
    {
      v31 = Count;
      for (i = 0; i != v31; ++i)
      {
        ValueAtIndex = (TNativeTextTab **)CFArrayGetValueAtIndex(v28, i);
        v34 = (void *)MEMORY[0x186DC070C]();
        v35 = CFGetTypeID(ValueAtIndex);
        if (TCFBase<TNativeTextTab>::GetTypeID(void)::once != -1)
          dispatch_once_f(&TCFBase<TNativeTextTab>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeTextTab>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
        if (v35 == TCFBase<TNativeTextTab>::fTypeID)
        {
          v36 = TNativeTextTab::DebugDescription(ValueAtIndex[5]);
          v37 = (id)CFMakeCollectable(v36);
        }
        else
        {
          v37 = (CFTypeRef)objc_msgSend(ValueAtIndex, "description");
        }
        objc_msgSend(v29, "addObject:", v37);
        objc_autoreleasePoolPop(v34);
      }
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("tabs = %@"), v29);

  }
  v38 = CFSTR("none");
  switch(*((_BYTE *)this + 48))
  {
    case 0:
      return Mutable;
    case 2:
      v38 = CFSTR("Japanese");
      goto LABEL_54;
    case 3:
      v38 = CFSTR("Simplified Chinese");
      goto LABEL_54;
    case 4:
      v38 = CFSTR("Traditional Chinese");
      goto LABEL_54;
    default:
LABEL_54:
      CFStringAppendFormat(Mutable, 0, CFSTR("composition language = %@"), v38);
      return Mutable;
  }
}

_QWORD *TNativeParagraphStyle::CreateIndentPack(TNativeParagraphStyle *this)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD **)this;
  *(_QWORD *)this = result;
  if (v3)
  {
    MEMORY[0x186DC03AC](v3, 0x1000C40504FFAC1);
    result = *(_QWORD **)this;
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

id TParagraphStyle::GetTabStops(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
    return (id)atomic_load((unint64_t *)TParagraphStyle::GetNative(v3, a2) + 3);
  else
    return -[TParagraphStyle tabStops](v3, sel_tabStops);
}

uint64_t *TParagraphStyle::GetDefaultTabInterval(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
    return TParagraphStyle::GetNative(v3, a2);
  else
    return (uint64_t *)-[TParagraphStyle defaultTabInterval](v3, sel_defaultTabInterval);
}

TNativeParagraphStyle **TParagraphStyle::SetFirstLineHeadIndent(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **result;
  double **v5;
  double *v6;

  v3 = *((unsigned __int8 *)this + 8);
  result = *this;
  if (!v3)
    return (TNativeParagraphStyle **)objc_msgSend(result, sel_setFirstLineHeadIndent_, a2);
  v5 = (double **)result[5];
  v6 = *v5;
  if (!*v5)
  {
    result = (TNativeParagraphStyle **)TNativeParagraphStyle::CreateIndentPack(result[5]);
    v6 = *v5;
  }
  *v6 = a2;
  return result;
}

TNativeParagraphStyle **TParagraphStyle::SetHeadIndent(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **result;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  result = *this;
  if (!v3)
    return (TNativeParagraphStyle **)objc_msgSend(result, sel_setHeadIndent_, a2);
  v5 = result[5];
  v6 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
  {
    result = (TNativeParagraphStyle **)TNativeParagraphStyle::CreateIndentPack(result[5]);
    v6 = *(_QWORD *)v5;
  }
  *(double *)(v6 + 8) = a2;
  return result;
}

TNativeParagraphStyle **TParagraphStyle::SetTailIndent(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **result;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  result = *this;
  if (!v3)
    return (TNativeParagraphStyle **)objc_msgSend(result, sel_setTailIndent_, a2);
  v5 = result[5];
  v6 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
  {
    result = (TNativeParagraphStyle **)TNativeParagraphStyle::CreateIndentPack(result[5]);
    v6 = *(_QWORD *)v5;
  }
  *(double *)(v6 + 16) = a2;
  return result;
}

_QWORD *TParagraphStyle::SetLineBreakMode(TParagraphStyle *this, uint64_t a2)
{
  int v2;
  _QWORD *result;

  v2 = *((unsigned __int8 *)this + 8);
  result = *(_QWORD **)this;
  if (!v2)
    return objc_msgSend(result, sel_setLineBreakMode_, a2);
  *(_BYTE *)(result[5] + 32) = a2;
  return result;
}

void TParagraphStyle::SetLineHeightMultiple(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  double *v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = (double *)*((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = (double *)*((_QWORD *)v5 + 1);
    }
    *v6 = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setLineHeightMultiple_, a2);
  }
}

void TParagraphStyle::SetMaximumLineHeight(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = *((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = *((_QWORD *)v5 + 1);
    }
    *(double *)(v6 + 8) = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setMaximumLineHeight_, a2);
  }
}

void TParagraphStyle::SetMinimumLineHeight(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = *((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = *((_QWORD *)v5 + 1);
    }
    *(double *)(v6 + 16) = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setMinimumLineHeight_, a2);
  }
}

void TParagraphStyle::SetLineSpacingAdjustment(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = *((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = *((_QWORD *)v5 + 1);
    }
    *(double *)(v6 + 24) = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setLineSpacing_, a2);
  }
}

void TParagraphStyle::SetParagraphSpacing(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = *((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = *((_QWORD *)v5 + 1);
    }
    *(double *)(v6 + 48) = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setParagraphSpacing_, a2);
  }
}

void TParagraphStyle::SetParagraphSpacingBefore(TNativeParagraphStyle ***this, double a2)
{
  int v3;
  TNativeParagraphStyle **v4;
  TNativeParagraphStyle *v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *this;
  if (v3)
  {
    v5 = v4[5];
    v6 = *((_QWORD *)v5 + 1);
    if (!v6)
    {
      TNativeParagraphStyle::CreateSpacePack(v4[5]);
      v6 = *((_QWORD *)v5 + 1);
    }
    *(double *)(v6 + 56) = a2;
  }
  else
  {
    objc_msgSend(v4, sel_setParagraphSpacingBefore_, a2);
  }
}

uint64_t TParagraphStyle::SetCompositionLanguage(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 8);
  result = *(_QWORD *)a1;
  if (v4)
  {
    *(_BYTE *)(*(_QWORD *)(result + 40) + 48) = a2;
  }
  else
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return (uint64_t)objc_msgSend(*(id *)a1, sel_setCompositionLanguage_, a2);
  }
  return result;
}

BOOL IsProhibitedSequence(int a1, int a2, BOOL *a3)
{
  unsigned int v3;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  _BOOL8 result;

  if (a1 > 3336)
  {
    if (a1 <= 70143)
    {
      if (a1 <= 3466)
      {
        if (a1 <= 3345)
        {
          if (a1 != 3337)
            return a1 == 3342 && a2 == 3398;
          return a2 == 3415;
        }
        if (a1 == 3346)
        {
          v7 = a2 == 3390;
          v8 = 3415;
          return v7 || a2 == v8;
        }
        if (a1 != 3461)
          return 0;
        v9 = a2 - 3535;
        return v9 < 3;
      }
      if (a1 <= 69636)
      {
        switch(a1)
        {
          case 3467:
          case 3471:
          case 3476:
            return a2 == 3551;
          case 3469:
            return a2 == 3544;
          case 3473:
            v4 = a2 + 54;
            if ((a2 - 3530) >= 0x15)
              return 0;
            v5 = 1933313;
            break;
          default:
            return 0;
        }
        return (v5 >> v4) & 1;
      }
      switch(a1)
      {
        case 69637:
          v6 = 69688;
          break;
        case 69643:
          v6 = 69694;
          break;
        case 69647:
          v6 = 69698;
          break;
        default:
          return 0;
      }
    }
    else if (a1 <= 70794)
    {
      if (a1 > 70207)
      {
        switch(a1)
        {
          case 70208:
            v6 = 70190;
            break;
          case 70320:
            v4 = a2 + 32;
            if ((a2 - 70368) >= 9)
              return 0;
            v5 = 481;
            return (v5 >> v4) & 1;
          case 70785:
            v6 = 70832;
            break;
          default:
            return 0;
        }
      }
      else
      {
        if (a1 == 70144)
        {
          v4 = a2 - 44;
          if ((a2 - 70188) >= 8)
            return 0;
          v5 = 161;
          return (v5 >> v4) & 1;
        }
        if (a1 != 70150)
          return a1 == 70188 && (a2 & 0xFFFFFFFE) == 0x11230;
        v6 = 70188;
      }
    }
    else if (a1 <= 71167)
    {
      if (a1 != 70795 && a1 != 70797)
      {
        if (a1 != 70826)
          return 0;
        v3 = a2 - 70837;
        return v3 < 2;
      }
      v6 = 70842;
    }
    else
    {
      if (a1 <= 71295)
      {
        if (a1 != 71168 && a1 != 71169)
          return 0;
        v3 = a2 - 71225;
        return v3 < 2;
      }
      if (a1 == 71296)
      {
        v4 = a2 + 83;
        if ((a2 - 71341) >= 9)
          return 0;
        v5 = 385;
        return (v5 >> v4) & 1;
      }
      if (a1 != 71302)
        return 0;
      v6 = 71346;
    }
    return a2 == v6;
  }
  if (a1 <= 2756)
  {
    if (a1 > 2442)
    {
      if (a1 > 2673)
      {
        switch(a1)
        {
          case 2674:
            v4 = a2 - 63;
            if ((a2 - 2623) >= 9)
              return 0;
            v5 = 259;
            break;
          case 2675:
            v4 = a2 - 65;
            if ((a2 - 2625) >= 0xB)
              return 0;
            v5 = 1027;
            break;
          case 2693:
            v4 = a2 + 66;
            if ((a2 - 2750) >= 0xF)
              return 0;
            v5 = 28289;
            break;
          default:
            return 0;
        }
      }
      else
      {
        if (a1 == 2443)
          return a2 == 2499;
        if (a1 == 2444)
          return a2 == 2530;
        if (a1 != 2565)
          return 0;
        v4 = a2 - 62;
        if ((a2 - 2622) >= 0xF)
          return 0;
        v5 = 17409;
      }
      return (v5 >> v4) & 1;
    }
    if (a1 <= 2318)
    {
      if (a1 == 2309)
      {
        v4 = a2 - 58;
        if ((a2 - 2362) >= 0x1E)
          return 0;
        v5 = 807899155;
      }
      else
      {
        if (a1 != 2310)
          return a1 == 2313 && a2 == 2369;
        v4 = a2 - 58;
        if ((a2 - 2362) >= 0xF)
          return 0;
        v5 = 30721;
      }
      return (v5 >> v4) & 1;
    }
    if (a1 != 2319)
    {
      if (a1 == 2352)
      {
        if (a2 == 2381 && a3)
        {
          result = 0;
          *a3 = 1;
          return result;
        }
        return 0;
      }
      return a1 == 2437 && a2 == 2494;
    }
    v9 = a2 - 2373;
    return v9 < 3;
  }
  if (a1 > 3134)
  {
    if (a1 <= 3208)
      return (a1 == 3135 || a1 == 3142 || a1 == 3146) && a2 == 3157;
    if (a1 <= 3217)
      return (a1 == 3209 || a1 == 3211) && a2 == 3262;
    if (a1 == 3218)
      return a2 == 3276;
    if (a1 != 3335)
      return 0;
    return a2 == 3415;
  }
  if (a1 <= 2834)
  {
    if (a1 == 2757)
      return a2 == 2750;
    if (a1 == 2821)
      return a2 == 2878;
    if (a1 != 2831)
      return 0;
    return a2 == 2903;
  }
  if (a1 == 2835)
    return a2 == 2903;
  if (a1 == 2949)
    return a2 == 3010;
  if (a1 != 3090)
    return 0;
  v7 = a2 == 3148;
  v8 = 3157;
  return v7 || a2 == v8;
}

id TTextTab::SetTabRef(TTextTab *this, void *cf)
{
  CFTypeID v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unsigned int v8;
  char v9;

  v4 = CFGetTypeID(cf);
  if (TCFBase<TNativeTextTab>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeTextTab>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeTextTab>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  if (v4 == TCFBase<TNativeTextTab>::fTypeID)
  {
    v5 = *((_QWORD *)cf + 5);
    *(_QWORD *)this = *(_QWORD *)v5;
    *((_BYTE *)this + 8) = *(_BYTE *)(v5 + 8);
    result = *(id *)(v5 + 16);
  }
  else
  {
    objc_msgSend(cf, sel_location);
    *(_QWORD *)this = v7;
    v8 = objc_msgSend(cf, sel_alignment);
    if ((dyld_program_sdk_at_least() & (v8 < 5)) != 0)
      v9 = 0x403010200uLL >> (8 * v8);
    else
      v9 = v8;
    *((_BYTE *)this + 8) = v9;
    result = objc_msgSend(cf, sel_options);
  }
  *((_QWORD *)this + 2) = result;
  return result;
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15DF200;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15DF200;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF200;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0,std::allocator<ForEachVisibleFormatter(std::function<void ()(unsigned int)>)::$_0>,void ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0,std::allocator<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0>,void ()(__CFString const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0,std::allocator<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0>,void ()(__CFString const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF098;
  return result;
}

void std::__function::__func<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0,std::allocator<IterateItemRanges(USet const*,UErrorCode *,std::function<void ()(unsigned int,unsigned int)>)::$_0>,void ()(__CFString const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF098;
}

BOOL TNativeTextTab::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  _BOOL8 result;

  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v2 = *(const void **)(a1 + 16);
  v3 = *(const void **)(a2 + 16);
  if (v2 == v3)
    return 1;
  result = 0;
  if (v2)
  {
    if (v3)
      return CFEqual(v2, v3) != 0;
  }
  return result;
}

CFStringRef TNativeTextTab::DebugDescription(TNativeTextTab *this)
{
  const __CFAllocator *v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  const __CFDictionary *v6;
  CFStringRef v7;
  const __CFDictionary *v8;
  CFStringRef v9;
  CFStringRef v10;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *(_QWORD *)this;
  v4 = *((char *)this + 8);
  if (v4 >= 5)
  {
    v6 = (const __CFDictionary *)*((_QWORD *)this + 2);
    v5 = "?";
    if (v6 && CFDictionaryGetValue(v6, CFSTR("NSTabColumnTerminatorsAttributeName")))
      v5 = "D";
  }
  else
  {
    v5 = off_1E15E7728[v4];
  }
  v7 = CFStringCreateWithFormat(v2, 0, CFSTR("%g%s"), v3, v5);
  if (v7)
  {
    v8 = (const __CFDictionary *)*((_QWORD *)this + 2);
    if (v8)
    {
      if (CFDictionaryGetCount(v8))
      {
        v9 = CFStringCreateWithFormat(v2, 0, CFSTR("%@%@"), v7, *((_QWORD *)this + 2));
        if (v9)
        {
          v10 = v9;
          CFRelease(v7);
          return v10;
        }
      }
    }
  }
  return v7;
}

void TTabEngine::ApplyTabs(TLine **this@<X0>, double a2@<D0>, double a3@<D1>, const void *a4@<X1>, uint64_t a5@<X8>)
{
  uint64_t v6;
  TLine *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double *v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TabGlyph;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  const __CFCharacterSet *Value;
  double v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  __int128 v43;
  CFDictionaryRef theDict;

  v6 = *((_QWORD *)*this + 2);
  if (*((_QWORD *)*this + 3) - v6 <= 7
    || !TAttributes::GetTabStopsPresent((TAttributes *)(*(_QWORD *)(*(_QWORD *)v6 + 40) + 40), a4))
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return;
  }
  v10 = *this;
  v11 = *((_WORD *)*this + 76);
  if ((v11 & 8) != 0)
    v12 = ((uint64_t)(*((_QWORD *)*this + 3) - *((_QWORD *)*this + 2)) >> 3) - 1;
  else
    v12 = 0;
  if ((v11 & 8) != 0)
    v13 = -1;
  else
    v13 = (uint64_t)(*((_QWORD *)*this + 3) - *((_QWORD *)*this + 2)) >> 3;
  if ((v11 & 8) != 0)
    v14 = -1;
  else
    v14 = 1;
  *(_QWORD *)a5 = 0xAAAAAAAAAAAAAA00;
  *(_QWORD *)(a5 + 8) = -1;
  *(_QWORD *)(a5 + 16) = 0xAAAAAAAAAAAAAA00;
  if (v12 == v13)
    goto LABEL_62;
  v40 = a5;
  v15 = a2 + a3;
  v16 = (double *)MEMORY[0x1E0C9D820];
  v41 = v13;
  while (1)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * v12) + 40);
    if ((v11 & 8) == 0)
    {
      v18 = *(double **)(v17 + 312);
      if (!v18)
        v18 = v16;
      a2 = a2 + *v18;
    }
    if ((*(_BYTE *)(v17 + 225) & 1) == 0)
      goto LABEL_53;
    TLine::DetachRun(v10, v12);
    theDict = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    v43 = xmmword_18494CA50;
    v10 = *this;
    v19 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)*this + 2) + 8 * v12) + 48);
    v20 = (v11 & 8) != 0 ? -1 : v19[26];
    v21 = (v11 & 8) != 0 ? v19[26] - 1 : 0;
    v42 = 0.0;
    TabGlyph = TStorageRange::FindTabGlyph((TStorageRange *)(v19 + 24), v21, v14, &v42);
    if (TabGlyph != v20)
      break;
LABEL_52:
    v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * v12) + 40);
    v16 = (double *)MEMORY[0x1E0C9D820];
LABEL_53:
    v36 = *(double *)(v17 + 192);
    v37 = *(double **)(v17 + 312);
    if (!v37)
      v37 = v16;
    v38 = *v37;
    v39 = a2 + v36 + *v37;
    v12 += v14;
    if ((v11 & 8) == 0)
      v38 = -0.0;
    a2 = v38 + v39;
    if (v12 == v13)
      goto LABEL_62;
  }
  v23 = TabGlyph;
  v24 = a2;
  while (1)
  {
    v25 = v24 + v42;
    if ((TAttributes::GetTabStopForLocation((TAttributes *)(v19 + 5), v25, (TTextTab *)&v43) & 1) == 0)
      break;
    v26 = *(double *)&v43 - v25;
    if (theDict
      && (Value = (const __CFCharacterSet *)CFDictionaryGetValue(theDict, CFSTR("NSTabColumnTerminatorsAttributeName"))) != 0)
    {
      TTabEngine::CalculateCylinderWidth((uint64_t)this, v12, v14, v23, v26, Value);
LABEL_39:
      v26 = v26 - v28;
    }
    else if ((v11 & 8) != 0)
    {
      switch(BYTE8(v43))
      {
        case 0:
LABEL_34:
          TTabEngine::CalculateCylinderWidth((uint64_t)this, v12, v14, v23, v26, 0);
          v29 = v28 < v26 || (v11 & 8) == 0;
          v13 = v41;
          if (!v29)
            v28 = 0.0;
          goto LABEL_39;
        case 1:
        case 3:
        case 4:
          break;
        case 2:
LABEL_47:
          v34 = v15 - *(double *)&v43;
          if (v26 <= v15 - *(double *)&v43)
            v34 = v26;
          TTabEngine::CalculateCylinderWidth((uint64_t)this, v12, v14, v23, v34 + v34, 0);
          if (v35 == v26)
            v26 = 0.0;
          else
            v26 = v26 + v35 * -0.5;
          break;
        default:
LABEL_46:
          v26 = 0.0;
          break;
      }
    }
    else
    {
      switch(BYTE8(v43))
      {
        case 0:
        case 3:
        case 4:
          break;
        case 1:
          goto LABEL_34;
        case 2:
          goto LABEL_47;
        default:
          goto LABEL_46;
      }
    }
    v30 = v19[27];
    v31 = *(_QWORD *)(v30 + 32);
    if (v31 || (v32 = 0, !*(_QWORD *)(v30 + 24)))
      v32 = *(_QWORD *)(v31 + 16 * v19[25] + 16 * v23 + 8);
    v33 = v26;
    TStorageRange::SetAdvance((TStorageRange *)(v19 + 24), v23, *(CGSize *)(&v32 - 1));
    v24 = v25 + v26;
    if (v24 > v15)
      goto LABEL_61;
    v42 = 0.0;
    v23 = TStorageRange::FindTabGlyph((TStorageRange *)(v19 + 24), v23 + v14, v14, &v42);
    if (v23 == v20)
    {
      v10 = *this;
      goto LABEL_52;
    }
  }
  *(_QWORD *)v40 = *(_QWORD *)(*(_QWORD *)(v19[27] + 48) + 8 * v19[25] + 8 * v23);
  *(double *)(v40 + 8) = v25;
  *(_BYTE *)(v40 + 16) = 1;
LABEL_61:
  v10 = *this;
LABEL_62:
  TLine::SyncWithRuns(v10);
}

uint64_t TTabEngine::CalculateCylinderWidth(uint64_t this, uint64_t a2, int a3, uint64_t a4, double a5, const __CFCharacterSet *a6)
{
  uint64_t v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  UTF32Char FullChar;
  double *v28;
  uint64_t v29;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v33 = (_QWORD *)this;
  v7 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - *(_QWORD *)(*(_QWORD *)this + 16)) >> 3;
  if (a3 < 0)
    v7 = -1;
  v8 = 0.0;
  v29 = v7;
  if (v7 != a2)
  {
    v10 = a2;
    v11 = a3 + a4;
    v34 = 16 * a3;
    v12 = 8 * a3;
    while (1)
    {
      v13 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*v33 + 16) + 8 * v10) + 40);
      v14 = (_QWORD *)v13[27];
      v15 = v13[26] - 1;
      if (a3 < 0)
      {
        v16 = -1;
      }
      else
      {
        v15 = 0;
        v16 = v13[26];
      }
      if (v10 != a2)
        v11 = v15;
      v17 = v14[4];
      if (v17 || (v20 = v14[3]) == 0)
      {
        v32 = 0;
        v18 = v13[25];
        v19 = v17 + 16 * v18;
      }
      else
      {
        v18 = v13[25];
        v19 = v20 + 8 * v18;
        v32 = 1;
      }
      if (v11 != v16)
        break;
LABEL_27:
      v10 += a3;
      if (v10 == v29)
        return this;
    }
    v21 = v14[5];
    v22 = v19 + 16 * v11;
    v23 = v19 + 8 * v11;
    while (1)
    {
      v24 = *(_DWORD *)(v21 + 4 * v18 + 4 * v11);
      if ((v24 & 4) != 0)
        break;
      if (a6)
      {
        v25 = v33[1];
        v48 = *(_QWORD *)(v14[6] + 8 * v18 + 8 * v11);
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v47 = 0;
        v46 = 0u;
        v26 = *(_QWORD *)(v25 + 16);
        v35 = v25;
        *(_QWORD *)&v46 = v26;
        FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v35, &v48, 0);
        this = CFCharacterSetIsLongCharacterMember(a6, FullChar);
        if ((_DWORD)this)
          return this;
        v14 = (_QWORD *)v13[27];
        v18 = v13[25];
        v21 = v14[5];
        v24 = *(_DWORD *)(v21 + 4 * v18 + 4 * v11);
      }
      if ((v24 & 2) == 0)
      {
        v28 = (double *)(v32 ? v23 : v22);
        v8 = v8 + *v28;
        if (v8 >= a5)
          break;
      }
      v11 += a3;
      v22 += v34;
      v23 += v12;
      if (v16 == v11)
      {
        v11 = v16;
        goto LABEL_27;
      }
    }
  }
  return this;
}

unint64_t *ColorPaletteTable::ColorPaletteTable(unint64_t *a1, unint64_t *a2)
{
  void *v5;
  const __CFData *v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  void *v9;
  id v10;
  const __CFData *v11;
  const __CFData *v12;
  const UInt8 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!atomic_load(a2))
    return a1;
  v5 = (void *)atomic_load(a2);
  v6 = v5;
  v7 = v6;
  if (v6)
    BytePtr = CFDataGetBytePtr(v6);
  else
    BytePtr = 0;

  v9 = (void *)atomic_load(a2);
  v10 = v9;
  v11 = (const __CFData *)v10;
  if (!v11)
  {

    goto LABEL_15;
  }
  v12 = v11;
  v13 = CFDataGetBytePtr(v11);

  if (!v13)
  {
LABEL_15:

    return a1;
  }
  v14 = (unint64_t)&v13[CFDataGetLength((CFDataRef)v10)];

  if ((unint64_t)(BytePtr + 12) <= v14)
  {
    v15 = bswap32(*(unsigned __int16 *)BytePtr) >> 16;
    if (v15 <= 1)
    {
      if (*((_WORD *)BytePtr + 2))
      {
        v16 = __rev16(*((unsigned __int16 *)BytePtr + 2));
        do
          v17 = __ldaxr(a2);
        while (__stlxr(0, a2));
        do
          v18 = (void *)__ldaxr(a1);
        while (__stlxr(v17, a1));

        a1[1] = v15;
        a1[2] = v16;
      }
    }
  }
  return a1;
}

const UInt8 *ColorPaletteTable::PaletteTypeArray(ColorPaletteTable *this)
{
  void *v2;
  const __CFData *v3;
  const __CFData *v4;
  const UInt8 *BytePtr;
  void *v6;
  id v7;
  const __CFData *v8;
  const __CFData *v9;
  const UInt8 *v10;
  const UInt8 *result;
  uint64_t v12;
  const UInt8 *v13;
  unsigned int v14;
  const UInt8 *v15;
  unint64_t v16;
  unint64_t v17;

  if (!*((_QWORD *)this + 1))
    return 0;
  v2 = (void *)atomic_load((unint64_t *)this);
  v3 = v2;
  v4 = v3;
  if (v3)
    BytePtr = CFDataGetBytePtr(v3);
  else
    BytePtr = 0;

  v6 = (void *)atomic_load((unint64_t *)this);
  v7 = v6;
  v8 = (const __CFData *)v7;
  if (v8)
  {
    v9 = v8;
    v10 = CFDataGetBytePtr(v8);

    if (v10)
      v10 += CFDataGetLength((CFDataRef)v7);
  }
  else
  {

    v10 = 0;
  }

  result = 0;
  v12 = *((_QWORD *)this + 2);
  v13 = &BytePtr[2 * v12];
  if (BytePtr <= v13 + 12 && v13 + 16 <= v10)
  {
    v14 = *((_DWORD *)v13 + 3);
    if (v14)
    {
      v15 = &BytePtr[bswap32(v14)];
      v16 = (unint64_t)&v15[4 * v12];
      if (v15 + 4 <= v10)
        v17 = (unint64_t)(v10 - v15) >> 2;
      else
        v17 = 0;
      if (v16 <= (unint64_t)v10 && v16 >= (unint64_t)v15 || v17 == v12)
        return v15;
      else
        return 0;
    }
    return 0;
  }
  return result;
}

const UInt8 *ColorPaletteTable::IndexOfFirstPaletteWithFlags(const UInt8 **this, int a2, int a3)
{
  const UInt8 *result;
  const UInt8 *v7;
  const UInt8 *v8;

  result = ColorPaletteTable::PaletteTypeArray((ColorPaletteTable *)this);
  if (result)
  {
    v7 = this[2];
    if (v7)
    {
      v8 = result;
      result = 0;
      while ((bswap32(*(_DWORD *)&v8[4 * (_QWORD)result]) & a3) != a2)
      {
        if (v7 == ++result)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ColorPaletteTable::Palette *ColorPaletteTable::Palette::Palette(ColorPaletteTable::Palette *this, CFDataRef theData, unint64_t a3)
{
  const UInt8 *BytePtr;
  const UInt8 *v7;
  unint64_t v8;
  unint64_t v9;
  const UInt8 *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v17;
  unint64_t v18;

  *(_QWORD *)this = 0;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    v7 = CFDataGetBytePtr(theData);
    v8 = v7 ? (unint64_t)&v7[CFDataGetLength(theData)] : 0;
    if (*((_WORD *)BytePtr + 2))
    {
      v9 = __rev16(*((unsigned __int16 *)BytePtr + 2)) <= a3 ? 0 : a3;
      v10 = &BytePtr[2 * v9];
      if (BytePtr <= v10 + 12 && (unint64_t)(v10 + 14) <= v8)
      {
        v12 = (unint64_t)&BytePtr[4 * (bswap32(*((unsigned __int16 *)v10 + 6)) >> 16)
                                       + bswap32(*((_DWORD *)BytePtr + 2))];
        v13 = bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16;
        v14 = v12 + 4 * v13;
        v15 = (unint64_t)BytePtr <= v12 && v14 >= v12;
        if (v15 && v14 <= v8)
          goto LABEL_28;
        v17 = v12 + 4 > v8 || (unint64_t)BytePtr > v12;
        v18 = (v8 - v12) >> 2;
        if (v17)
          v18 = 0;
        if (v18 == v13)
        {
LABEL_28:
          TCFRef<__CTFont const*>::Retain((unint64_t *)this, theData);
          *((_QWORD *)this + 1) = v12;
          *((_QWORD *)this + 2) = v13;
        }
      }
    }
  }
  return this;
}

unint64_t *ColorPaletteTable::Palette::ColorForPaletteEntry@<X0>(unint64_t *this@<X0>, unint64_t a2@<X1>, unint64_t **a3@<X8>, unint64_t a4@<D0>)
{
  unint64_t v5;
  _BYTE *v6;
  double v7;
  double v8;
  double v9;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v5 = atomic_load(this);
  if (v5 && this[2] > a2)
  {
    v6 = (_BYTE *)(this[1] + 4 * a2);
    LOBYTE(a4) = v6[2];
    v7 = (double)a4 / 255.0;
    components[0] = v7;
    LOBYTE(v7) = v6[1];
    v8 = (double)*(unint64_t *)&v7 / 255.0;
    components[1] = v8;
    LOBYTE(v8) = *v6;
    v9 = (double)*(unint64_t *)&v8 / 255.0;
    components[2] = v9;
    LOBYTE(v9) = v6[3];
    components[3] = (double)*(unint64_t *)&v9 / 255.0;
    if (sRGBColorSpace(void)::once != -1)
      dispatch_once_f(&sRGBColorSpace(void)::once, 0, (dispatch_function_t)sRGBColorSpace(void)::$_0::__invoke);
    this = (unint64_t *)CGColorCreate((CGColorSpaceRef)sRGBColorSpace(void)::sRGB, components);
    *a3 = this;
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

CGColorSpaceRef sRGBColorSpace(void)::$_0::__invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  sRGBColorSpace(void)::sRGB = (uint64_t)result;
  return result;
}

char **PostGSUBFixups::add(char **this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;

  v9 = this;
  v10 = *this;
  v11 = (unint64_t)this[1];
  if (*this != (char *)v11
    && *(_QWORD *)(v11 - 32) == a2
    && (v12 = *(_QWORD *)(v11 - 16), *(_QWORD *)(v11 - 24) + v12 == a3))
  {
    *(_QWORD *)(v11 - 16) = v12 + a4;
  }
  else
  {
    v13 = (unint64_t)this[2];
    if (v11 >= v13)
    {
      v15 = (uint64_t)(v11 - (_QWORD)v10) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        abort();
      v17 = (uint64_t)(this + 3);
      v18 = v13 - (_QWORD)v10;
      if (v18 >> 4 > v16)
        v16 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v16;
      v31 = v9 + 3;
      v20 = TInlineBufferAllocator<PostGSUBFixups::FixupData,8ul>::allocate(v17, v19);
      v21 = &v20[32 * v15];
      *(_QWORD *)v21 = a2;
      *((_QWORD *)v21 + 1) = a3;
      *((_QWORD *)v21 + 2) = a4;
      *((_DWORD *)v21 + 6) = a5;
      v22 = *v9;
      v23 = (unint64_t)v9[1];
      if ((char *)v23 == *v9)
      {
        v26 = vdupq_n_s64(v23);
        v24 = &v20[32 * v15];
      }
      else
      {
        v24 = &v20[32 * v15];
        do
        {
          v25 = *(_OWORD *)(v23 - 32);
          *(_OWORD *)(v24 - 20) = *(_OWORD *)(v23 - 20);
          *((_OWORD *)v24 - 2) = v25;
          v24 -= 32;
          v23 -= 32;
        }
        while ((char *)v23 != v22);
        v26 = *(int64x2_t *)v9;
      }
      v14 = v21 + 32;
      *v9 = v24;
      v9[1] = v21 + 32;
      v29 = v26;
      v27 = v9[2];
      v9[2] = &v20[32 * v19];
      v30 = v27;
      v28 = v26.i64[0];
      this = (char **)std::__split_buffer<PostGSUBFixups::FixupData,TInlineBufferAllocator<PostGSUBFixups::FixupData,8ul> &>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *(_QWORD *)(v11 + 8) = a3;
      *(_QWORD *)(v11 + 16) = a4;
      v14 = (char *)(v11 + 32);
      *(_DWORD *)(v11 + 24) = a5;
    }
    v9[1] = v14;
  }
  return this;
}

uint64_t PostGSUBFixups::apply(PostGSUBFixups *this, TRunGlue *a2, int a3, const IndicClassTable *a4, int a5)
{
  PostGSUBFixups *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  __int16 v41;
  int v42;
  uint64_t StringIndex;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  PostGSUBFixups *v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  int64x2_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  __int128 v95;
  int64x2_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v108;
  _QWORD *v109;
  char v111;
  unint64_t v112;
  PostGSUBFixups *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  TRunGlue *v120;
  int64x2_t v121;
  uint64_t v122;
  uint64_t v123;

  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    v7 = this;
    v109 = (_QWORD *)*((_QWORD *)a2 + 13);
    v8 = TRunGlue::length(a2);
    v9 = *(_QWORD *)v7;
    v115 = *((_QWORD *)v7 + 1);
    if (*(_QWORD *)v7 != v115)
    {
      v10 = v8;
      v11 = 0;
      v111 = 0;
      v108 = (uint64_t)v7 + 312;
      v12 = -1;
      v118 = a3;
      v113 = v7;
      v114 = v8;
      while (1)
      {
        v14 = (_QWORD *)*((_QWORD *)v7 + 36);
        v13 = (_QWORD *)*((_QWORD *)v7 + 37);
        v16 = *(_QWORD *)v9;
        v15 = *(_QWORD *)(v9 + 8);
        if (v14 != v13)
        {
          v17 = v14 + 2;
          do
          {
            v19 = *(v17 - 2);
            v18 = v17 - 2;
            v20 = *(v17 - 1) + v19;
            if (v19 <= v16 && v20 > v16)
              v16 += *v17;
            if (v19 <= v15 && v20 > v15)
              v15 += *v17;
            v17 += 3;
          }
          while (v18 + 3 != v13);
        }
        v116 = *(_QWORD *)(v9 + 16);
        v119 = v9;
        v23 = *(_DWORD *)(v9 + 24);
        v24 = v23 & 0x30000000;
        if ((v23 & 0x30000000) == 0)
          break;
        v120 = a2;
        v121.i64[0] = v15;
        if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120))
        {
          if ((v23 & 0x10000000) == 0)
            break;
          v120 = a2;
          v121.i64[0] = v15 + 1;
          if (TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120))
            break;
        }
        v25 = v119;
LABEL_197:
        v9 = v25 + 32;
        if (v9 == v115)
          return v111 & 1;
      }
      v26 = **((_QWORD **)a2 + 13);
      if (v12 > v15 || v12 + v11 <= v15)
      {
        v28 = *(_DWORD *)(v26 + 16 * v15 + 12);
        if (v15 < 1)
        {
          v12 = v15;
          v11 = 1;
        }
        else
        {
          v11 = v15 + 1;
          v29 = (int *)(v26 + 16 * v15 - 4);
          v30 = 1;
          v12 = v15;
          while (1)
          {
            v31 = *v29;
            v29 -= 4;
            if (v31 != v28)
              break;
            ++v30;
            --v12;
            if (v30 - v15 == 1)
            {
              v12 = 0;
              goto LABEL_34;
            }
          }
          v11 = v30;
        }
LABEL_34:
        if (v11 + v12 < v10)
        {
          v32 = (int *)(v26 + 16 * (v11 + v12) + 12);
          while (1)
          {
            v33 = *v32;
            v32 += 4;
            if (v33 != v28)
              break;
            ++v11;
            if (v12 + v11 >= v10)
            {
              v11 = v10 - v12;
              break;
            }
          }
        }
        *((_QWORD *)v7 + 37) = *((_QWORD *)v7 + 36);
      }
      if (v23 < 0)
      {
        if (a3 && (v23 & 0x40000000) != 0 && TRunGlue::GetGlyphID(a2, v16) == a3)
          ++v16;
        if (v16 < v10)
        {
          while (1)
          {
            v120 = a2;
            v121.i64[0] = v16;
            if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120))
            {
              if ((TRunGlue::GetGlyphProps(a2, v16) & 0x200) == 0)
                break;
              StringIndex = TRunGlue::GetStringIndex(a2, v16);
              if (StringIndex != TRunGlue::GetStringIndex(a2, v15))
                break;
            }
            if (v10 == ++v16)
            {
              v16 = v10;
              break;
            }
          }
        }
LABEL_134:
        v48 = v16;
        goto LABEL_135;
      }
      v34 = v11 + v12;
      if (v16 > v11 + v12)
        goto LABEL_134;
      v35 = *(_DWORD *)(v26 + 16 * v15 + 8);
      if ((v35 & 0x40000000) == 0)
      {
        if ((v23 & 0x10000000) == 0 && (v35 & 0x70FFFF) != 0x400006)
          goto LABEL_134;
        v36 = v16 + 2;
        v37 = v16;
        if (v16 + 2 >= v34)
          goto LABEL_93;
        v38 = v26 + 16 * v16;
        if ((*(_DWORD *)(v38 + 8) & 0x80000000) != 0)
        {
          v39 = v16;
          if ((unsigned __int16)*(_DWORD *)(v38 + 8) != 8)
            goto LABEL_53;
        }
        v40 = (int *)(v38 + 24);
        v39 = v16;
        while (v39 + 3 < v34)
        {
          ++v39;
          v42 = *v40;
          v40 += 4;
          v41 = v42;
          if (v42 < 0 && v41 != 8)
          {
            v36 = v39 + 2;
LABEL_53:
            v37 = v16;
            if (v118)
            {
              if (TRunGlue::GetGlyphID(a2, v39 + 1) == v118)
                v37 = v36;
              else
                v37 = v16;
            }
LABEL_93:
            if (a5 == 1952542060)
              goto LABEL_127;
            if (a5 == 1835825517)
            {
              v52 = v37 + 1;
              if (v37 + 1 >= v34)
              {
                v16 = v37;
              }
              else
              {
                v53 = 16 * v37 + 24;
                v16 = v37;
                do
                {
                  v120 = a2;
                  v121.i64[0] = v52;
                  if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120)
                    && (!v118 || TRunGlue::GetGlyphID(v120, v121.i64[0]) != v118)
                    && (*(_BYTE *)(**((_QWORD **)a2 + 13) + v53 + 3) & 0x10) != 0)
                  {
                    v16 = v52;
                  }
                  ++v52;
                  v53 += 16;
                }
                while (v34 != v52);
              }
              goto LABEL_127;
            }
            v54 = v37 - 1;
            v55 = v15;
            if (v37 - 1 <= v15)
              goto LABEL_120;
            v56 = v37;
            v57 = 16 * v37;
            while (1)
            {
              if (v118 && TRunGlue::GetGlyphID(a2, v54) == v118)
              {
                v58 = **((_QWORD **)a2 + 13);
                if (*(_DWORD *)(v58 + v57 - 24) != 9 && (unsigned __int16)*(_DWORD *)(v58 + v57 - 24) != 8)
                {
                  if ((unsigned __int16)*(_DWORD *)(v58 + v57 + 8) != 8)
                  {
                    if (*(_DWORD *)(v58 + v57 + 8) == 9)
                      v105 = v54 + 1;
                    else
                      v105 = v54;
                    v55 = v105 + 1;
LABEL_119:
                    v37 = v56;
LABEL_120:
                    if (v55 != v15 || v24 == 0)
                      v16 = v55;
                    else
                      v16 = v37;
LABEL_127:
                    if (v16 > v12)
                    {
                      while (1)
                      {
                        v120 = a2;
                        v121.i64[0] = v16;
                        if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120))
                          break;
                        if (--v16 <= v12)
                        {
                          v16 = v12;
                          goto LABEL_134;
                        }
                      }
                    }
                    goto LABEL_134;
                  }
                  if (v54 + 3 < v34)
                  {
                    v60 = v58 + v57;
                    if ((*(_BYTE *)(v60 + 27) & 2) != 0
                      && *(_WORD *)(v60 + 40) == 7
                      && TRunGlue::GetGlyphID(a2, v54 + 3) != v118)
                    {
                      v55 = v54 + 2;
                      goto LABEL_119;
                    }
                  }
                }
              }
              --v54;
              v57 -= 16;
              if (v54 <= v15)
              {
                v55 = v15;
                goto LABEL_119;
              }
            }
          }
        }
        v37 = v16;
        goto LABEL_93;
      }
      if ((*((_BYTE *)a4 + 15) & 3) == 0)
        goto LABEL_133;
      v44 = v15 + 1;
      if (v15 + 1 < v16)
      {
        v45 = 16 * v15 + 40;
        v46 = v15 + 1;
        while (!v118 || TRunGlue::GetGlyphID(a2, v46) != v118)
        {
          ++v46;
          v45 += 16;
          if (v16 == v46)
            goto LABEL_73;
        }
        v48 = v46 + 1;
        if (v46 + 1 < v16
          && ((unsigned __int16)*(_DWORD *)(**((_QWORD **)a2 + 13) + v45) == 8
           || *(_DWORD *)(**((_QWORD **)a2 + 13) + v45) == 9))
        {
          v48 = v46 + 2;
        }
        if (v48 != -1)
        {
LABEL_135:
          v62 = v15 + v116;
          v10 = v114;
          if (v15 + v116 >= v114)
          {
            v25 = v119;
          }
          else
          {
            v25 = v119;
            while (1)
            {
              v120 = a2;
              v121.i64[0] = v62;
              if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120))
                break;
              if (++v62 >= v114)
              {
                v62 = v114;
                break;
              }
            }
          }
          if (v48 == v62)
          {
            a3 = v118;
            v7 = v113;
          }
          else
          {
            if (v48 == v15)
            {
              v7 = v113;
              v64 = *((_QWORD *)v113 + 37);
              v63 = *((_QWORD *)v113 + 38);
              if (v64 >= v63)
              {
                v73 = *((_QWORD *)v113 + 36);
                v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v73) >> 3);
                v75 = v74 + 1;
                a3 = v118;
                if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_206;
                v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v73) >> 3);
                if (2 * v76 > v75)
                  v75 = 2 * v76;
                if (v76 >= 0x555555555555555)
                  v77 = 0xAAAAAAAAAAAAAAALL;
                else
                  v77 = v75;
                v123 = v108;
                v78 = (char *)TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul>::allocate(v108, v77);
                v79 = &v78[24 * v74];
                *(_QWORD *)v79 = v15;
                *(int64x2_t *)(v79 + 8) = vdupq_n_s64(1uLL);
                v80 = *((_QWORD *)v113 + 36);
                v81 = *((_QWORD *)v113 + 37);
                if (v81 == v80)
                {
                  v84 = vdupq_n_s64(v81);
                  v82 = &v78[24 * v74];
                }
                else
                {
                  v82 = &v78[24 * v74];
                  do
                  {
                    v83 = *(_OWORD *)(v81 - 24);
                    *((_QWORD *)v82 - 1) = *(_QWORD *)(v81 - 8);
                    *(_OWORD *)(v82 - 24) = v83;
                    v82 -= 24;
                    v81 -= 24;
                  }
                  while (v81 != v80);
                  v84 = *((int64x2_t *)v113 + 18);
                }
                v65 = v79 + 24;
                *((_QWORD *)v113 + 36) = v82;
                *((_QWORD *)v113 + 37) = v79 + 24;
                v121 = v84;
                v100 = *((_QWORD *)v113 + 38);
                *((_QWORD *)v113 + 38) = &v78[24 * v77];
                v122 = v100;
                v120 = (TRunGlue *)v84.i64[0];
                std::__split_buffer<PostGSUBFixups::Adjustment,TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul> &>::~__split_buffer((uint64_t)&v120);
              }
              else
              {
                *(_QWORD *)v64 = v15;
                *(int64x2_t *)(v64 + 8) = vdupq_n_s64(1uLL);
                v65 = (char *)(v64 + 24);
                a3 = v118;
              }
              *((_QWORD *)v113 + 37) = v65;
            }
            else
            {
              if (v15 > v48)
                v66 = v15 - v48 + 1;
              else
                v66 = v48 - v62;
              if (v48 >= v15)
                v67 = v62;
              else
                v67 = v48;
              if (v48 >= v15)
                v68 = v15 - v62;
              else
                v68 = v62 - v15;
              v69 = v113;
              v71 = (uint64_t *)*((_QWORD *)v113 + 37);
              v70 = *((_QWORD *)v113 + 38);
              if ((unint64_t)v71 >= v70)
              {
                v117 = v67;
                v85 = *((_QWORD *)v113 + 36);
                v86 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - v85) >> 3);
                v87 = v86 + 1;
                if (v86 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_206:
                  abort();
                v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v85) >> 3);
                if (2 * v88 > v87)
                  v87 = 2 * v88;
                if (v88 >= 0x555555555555555)
                  v89 = 0xAAAAAAAAAAAAAAALL;
                else
                  v89 = v87;
                v123 = v108;
                v112 = v89;
                v90 = (char *)TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul>::allocate(v108, v89);
                v91 = &v90[24 * v86];
                *(_QWORD *)v91 = v117;
                *((_QWORD *)v91 + 1) = v66;
                *((_QWORD *)v91 + 2) = v68;
                v92 = *((_QWORD *)v113 + 36);
                v93 = *((_QWORD *)v113 + 37);
                if (v93 == v92)
                {
                  v96 = vdupq_n_s64(v93);
                  v94 = &v90[24 * v86];
                  v69 = v113;
                  v25 = v119;
                }
                else
                {
                  v94 = &v90[24 * v86];
                  v25 = v119;
                  do
                  {
                    v95 = *(_OWORD *)(v93 - 24);
                    *((_QWORD *)v94 - 1) = *(_QWORD *)(v93 - 8);
                    *(_OWORD *)(v94 - 24) = v95;
                    v94 -= 24;
                    v93 -= 24;
                  }
                  while (v93 != v92);
                  v69 = v113;
                  v96 = *((int64x2_t *)v113 + 18);
                }
                v72 = v91 + 24;
                *((_QWORD *)v69 + 36) = v94;
                *((_QWORD *)v69 + 37) = v91 + 24;
                v121 = v96;
                v101 = *((_QWORD *)v69 + 38);
                *((_QWORD *)v69 + 38) = &v90[24 * v112];
                v122 = v101;
                v120 = (TRunGlue *)v96.i64[0];
                std::__split_buffer<PostGSUBFixups::Adjustment,TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul> &>::~__split_buffer((uint64_t)&v120);
              }
              else
              {
                *v71 = v67;
                v71[1] = v66;
                v72 = v71 + 3;
                v71[2] = v68;
              }
              *((_QWORD *)v69 + 37) = v72;
              if (v15 >= v48)
              {
                v102 = v48;
                v103 = v15;
                v104 = v62;
              }
              else
              {
                v102 = v15;
                v103 = v62;
                v104 = v48;
              }
              TRunGlue::Rotate(a2, v102, v103, v104, v109);
              v111 = 1;
              a3 = v118;
              v7 = v113;
            }
            v10 = v114;
          }
          goto LABEL_197;
        }
      }
LABEL_73:
      v47 = *((_DWORD *)a4 + 3) & 0x3000000;
      v48 = v16;
      if (v47 != 50331648)
      {
        if (v47 != 0x1000000 || v44 >= v16)
        {
LABEL_133:
          if ((*((_DWORD *)a4 + 3) & 0x3000000) == 0x2000000)
            goto LABEL_134;
          if (v34 >= v12)
            v97 = v12;
          else
            v97 = v11 + v12;
          v98 = 16 * v34 - 8;
          while (v34 > v12)
          {
            --v34;
            v99 = *(_DWORD *)(**((_QWORD **)a2 + 13) + v98) & 0xFFFE;
            v98 -= 16;
            if (v99 != 12)
            {
              v97 = v34 + 1;
              break;
            }
          }
          if (v97 == -1)
            v48 = v16;
          else
            v48 = v97;
          goto LABEL_135;
        }
        v50 = 16 * v15 + 24;
        while (1)
        {
          v120 = a2;
          v121.i64[0] = v44;
          if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v120)
            && (~*(_DWORD *)(**((_QWORD **)a2 + 13) + v50) & 0x88000000) == 0)
          {
            break;
          }
          ++v44;
          v50 += 16;
          if (v16 == v44)
            goto LABEL_133;
        }
        v48 = v44;
      }
      if (v48 != -1)
        goto LABEL_135;
      goto LABEL_133;
    }
  }
  v111 = 0;
  return v111 & 1;
}

char *TInlineBufferAllocator<PostGSUBFixups::FixupData,8ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 256);
  result = *(char **)(a1 + 256);
  v4 = &result[32 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(32 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<PostGSUBFixups::FixupData,TInlineBufferAllocator<PostGSUBFixups::FixupData,8ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 31) & 0xFFFFFFFFFFFFFFE0);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 256);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void *TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 48);
  v2 = (unint64_t *)(a1 + 48);
  v3 = v4;
  v5 = v4 + 24 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(24 * a2);
  }
}

uint64_t std::__split_buffer<PostGSUBFixups::Adjustment,TInlineBufferAllocator<PostGSUBFixups::Adjustment,2ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 24) % 0x18uLL + *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (_QWORD *)(v4 + 48);
    if (v4 <= (unint64_t)v3 && v5 > v3)
    {
      if (*(_QWORD *)(a1 + 24) == *v5)
        *v5 = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t TTextEncapsulationRun::TTextEncapsulationRun(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  double *v5;
  unsigned int v6;
  int v7;
  double v8;
  double v9;
  unsigned int v10;
  const void *v11;
  const void *v12;

  TRun::TRun((TRun *)a1, *(const TRun **)(a2 + 40));
  *v3 = &off_1E15DE328;
  v3[40] = 0;
  v3[41] = 0;
  v4 = v3[20];
  if (v4)
    v4 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(a1 + 336) = v4;
  *(double *)(a1 + 344) = TRun::GetAscent((TRun *)a1);
  *(double *)(a1 + 352) = TRun::GetDescent((TRun *)a1);
  *(_QWORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 388) = 1;
  *(_BYTE *)(a1 + 390) = 0;
  v5 = *(double **)(a1 + 336);
  v6 = *(unsigned __int8 *)v5;
  v7 = *((unsigned __int8 *)v5 + 3);
  v8 = v5[4];
  if (!*((_BYTE *)v5 + 3))
  {
    v9 = v5[1];
    if (v9 <= 0.0)
    {
      *(double *)(a1 + 368) = TTextEncapsulationRun::GetParameter(5u, *((unsigned __int16 *)v5 + 20), *(unsigned __int8 *)v5, v5[4]);
      v5 = *(double **)(a1 + 336);
    }
    else
    {
      *(double *)(a1 + 368) = v9;
    }
  }
  if (*((_BYTE *)v5 + 1))
    v10 = 4;
  else
    v10 = 3;
  *(double *)(a1 + 360) = TTextEncapsulationRun::GetParameter(v10, *((unsigned __int16 *)v5 + 20), v6, v8);
  *(_DWORD *)(a1 + 384) = 0;
  if (v7 == 1)
  {
    v11 = (const void *)atomic_load((unint64_t *)(a1 + 72));
    if (!v11 || (v12 = *(const void **)(*(_QWORD *)(a1 + 336) + 24)) == 0 || CFEqual(v11, v12))
      *(_DWORD *)(a1 + 384) = 16;
  }
  return a1;
}

double TTextEncapsulationRun::GetParameter(unsigned int a1, unsigned int a2, unsigned int a3, double a4)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (a3 == 1
    && TTextEncapsulationRun::GetParameter(TTextEncapsulationRun::Parameter,unsigned short,CTTextEncapsulationScale,double)::onceToken != -1)
  {
    dispatch_once(&TTextEncapsulationRun::GetParameter(TTextEncapsulationRun::Parameter,unsigned short,CTTextEncapsulationScale,double)::onceToken, &__block_literal_global_3);
  }
  v8 = &kEnclosureParameters[18 * a3];
  if (a2 > 0x190)
  {
    v11 = v8[a1 + 12];
    v10 = ((double)a2 + -400.0) / 600.0;
    v9 = kEnclosureParameters[18 * a3 + 6 + a1];
  }
  else
  {
    v9 = v8[a1];
    v10 = (double)a2 / 400.0;
    v11 = kEnclosureParameters[18 * a3 + 6 + a1];
  }
  v12 = std::__lerp[abi:nn180100]<double>(v9, v11, v10);
  v13 = 1.0;
  if (a1)
    v13 = a4;
  return v13 * v12;
}

void TTextEncapsulationRun::TTextEncapsulationRun(TTextEncapsulationRun *this, const TTextEncapsulationRun *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  double Descent;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  TRun::TRun(this, a2);
  *v4 = &off_1E15DE328;
  v5 = *((_QWORD *)a2 + 41);
  v4[40] = *((_QWORD *)a2 + 40);
  v4[41] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((double *)this + 43) = TRun::GetAscent(this);
  Descent = TRun::GetDescent(this);
  v9 = *((_QWORD *)a2 + 45);
  v10 = *((_QWORD *)a2 + 46);
  *((double *)this + 44) = Descent;
  *((_QWORD *)this + 45) = v9;
  *((_QWORD *)this + 46) = v10;
  v11 = (void *)atomic_load((unint64_t *)a2 + 47);
  *((_QWORD *)this + 47) = v11;
  *((_DWORD *)this + 96) = *((_DWORD *)a2 + 96);
  *((_BYTE *)this + 388) = *((_BYTE *)a2 + 388);
  *((_BYTE *)this + 389) = 0;
  *((_BYTE *)this + 390) = *((_BYTE *)a2 + 390);
}

uint64_t TTextEncapsulationRun::TTextEncapsulationRun(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  TRun *v7;
  double Descent;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (TRun *)TRun::TRun(a1, a2, a3, a4, a5);
  *(_QWORD *)v7 = &off_1E15DE328;
  *((_QWORD *)v7 + 40) = 0;
  *((_QWORD *)v7 + 41) = 0;
  *((_QWORD *)v7 + 42) = *(_QWORD *)(a2 + 336);
  *(double *)(a1 + 344) = TRun::GetAscent(v7);
  Descent = TRun::GetDescent((TRun *)a1);
  v9 = *(_QWORD *)(a2 + 360);
  v10 = *(_QWORD *)(a2 + 368);
  *(double *)(a1 + 352) = Descent;
  *(_QWORD *)(a1 + 360) = v9;
  *(_QWORD *)(a1 + 368) = v10;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_WORD *)(a1 + 388) = 1;
  *(_BYTE *)(a1 + 390) = *(_BYTE *)(a2 + 390);
  *(_DWORD *)(a1 + 256) = 3;
  v11 = *(_OWORD **)(a1 + 312);
  if (v11)
  {
    *v11 = *MEMORY[0x1E0C9D820];
    v12 = *(_QWORD *)(a1 + 312);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 56);
      if (v13 != *(_QWORD *)(v12 + 64))
        *(_QWORD *)(v12 + 64) = v13;
    }
  }
  return a1;
}

unsigned int TTextEncapsulationRun::GetClassOfWeight(TTextEncapsulationRun *this, double a2)
{
  unsigned int v3;
  double v4;
  double v5;
  double v6;

  v3 = IndexesBracketing<double const*,double>(kSFWeightScale, (double *)&xmmword_18494CAD8, a2, 0.001);
  v4 = kSFWeightScale[(unsigned __int16)v3];
  v5 = kSFWeightScale[HIWORD(v3)];
  v6 = 0.0;
  if (v4 != v5)
    v6 = (a2 - v4) / (v5 - v4);
  return llround(std::__lerp[abi:nn180100]<double>((double)(100 * (unsigned __int16)v3), (double)(int)(100 * HIWORD(v3)), v6));
}

void TTextEncapsulationRun::CreateEncapsulationFont(const __CTFont *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, CTFontRef *a5@<X8>)
{
  double v9;
  unsigned int v10;
  double Parameter;
  __CFString *v12;
  const __CFAllocator *v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  const __CTFontDescriptor *v23;
  id v24;
  void *values;
  void *keys;

  if (a1)
    v9 = *(double *)(*((_QWORD *)a1 + 5) + 16);
  else
    v9 = 0.0;
  if (a3)
    v10 = 2;
  else
    v10 = 1;
  Parameter = TTextEncapsulationRun::GetParameter(v10, a2, a4, v9);
  v24 = 0;
  if (a1)
  {
    v12 = *(__CFString **)(*((_QWORD *)a1 + 5) + 400);
    if (v12)
      v12 = (__CFString *)(*((uint64_t (**)(__CFString *))v12->isa + 67))(v12);
  }
  else
  {
    v12 = 0;
  }
  if (v12 == CFSTR("NSCTFontUIFontDesignDefault")
    || v12 && CFSTR("NSCTFontUIFontDesignDefault") && CFEqual(v12, CFSTR("NSCTFontUIFontDesignDefault")))
  {
    values = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", TTextEncapsulationRun::GetParameter(0, a2, a4, v9));
    keys = &unk_1E1617098;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v16 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    values = v16;
    keys = CFSTR("NSCTFontVariationAttribute");
    v17 = CFDictionaryCreate(v13, (const void **)&keys, (const void **)&values, 1, v14, v15);
    v18 = TCFBase<TDescriptor>::Allocate();
    if (v18)
    {
      v19 = (void *)v18;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = TDescriptor::Hash;
      *(_QWORD *)(v18 + 48) = &off_1E15DCAF0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = v18 + 48;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 80) = 0;
      *(_QWORD *)(v18 + 88) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      TCFRef<__CTFont const*>::Retain((unint64_t *)(v18 + 56), v17);
      keys = v19;
      do
        v20 = (void *)__ldaxr((unint64_t *)&keys);
      while (__stlxr(0, (unint64_t *)&keys));
      values = v20;

    }
    else
    {
      values = 0;
    }
    do
      v21 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    do
      v22 = (void *)__ldaxr((unint64_t *)&v24);
    while (__stlxr(v21, (unint64_t *)&v24));

  }
  v23 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v24);
  *a5 = CTFontCreateCopyWithAttributes(a1, Parameter, 0, v23);

}

void ___ZN21TTextEncapsulationRun12GetParameterENS_9ParameterEt24CTTextEncapsulationScaled_block_invoke()
{
  uint64_t v0;
  double *v1;
  uint64_t i;

  v0 = 0;
  v1 = kEnclosureParameters;
  do
  {
    for (i = 0; i != 6; ++i)
      v1[i + 18] = std::__lerp[abi:nn180100]<double>(v1[i], v1[i + 36], 0.43);
    ++v0;
    v1 += 6;
  }
  while (v0 != 3);
}

void TTextEncapsulationRun::CopyPlatterPath(TTextEncapsulationRun *this, __n128 *a2)
{
  int v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  const CGPath *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const CGPath *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  TRun *v29;
  CGPath *v30;
  const CGPath *v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  __int128 v40;
  id v41;
  CGAffineTransform v42;
  CGSize v43;
  CGRect v44;
  CGRect v45;
  CGRect BoundingBox;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  *(_QWORD *)&v44.size.height = a2[22].n128_u64[1];
  v44.origin.y = (*(double *)(a2[21].n128_u64[0] + 48) - v44.size.height) * 0.5;
  v44.size.width = *(CGFloat *)(a2[20].n128_u64[0] + 32);
  v44.origin.x = 0.0;
  v45 = CGRectInset(v44, a2[23].n128_f64[0], 0.0);
  *(_QWORD *)this = 0;
  v4 = *(unsigned __int8 *)(a2[21].n128_u64[0] + 2);
  if (v4 == 2)
  {
    *(_QWORD *)&v42.a = CGPathCreateWithContinuousRoundedRect();
    do
      v7 = __ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    do
      v6 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v7, (unint64_t *)this));
  }
  else if (v4 == 1)
  {
    *(_QWORD *)&v42.a = CGPathCreateWithContinuousRoundedRect();
    do
      v8 = __ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    do
      v6 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v8, (unint64_t *)this));
  }
  else
  {
    if (*(_BYTE *)(a2[21].n128_u64[0] + 2))
      goto LABEL_16;
    *(_QWORD *)&v42.a = CGPathCreateWithRect(v45, 0);
    do
      v5 = __ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    do
      v6 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v5, (unint64_t *)this));
  }

LABEL_16:
  if (!*(_BYTE *)(a2[21].n128_u64[0] + 3))
  {
    v9 = (const CGPath *)atomic_load((unint64_t *)this);
    *(_QWORD *)&v42.a = CGPathCreateCopyByStrokingPath(v9, 0, a2[23].n128_f64[0], kCGLineCapButt, kCGLineJoinMiter, 10.0);
    do
      v10 = __ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    do
      v11 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v10, (unint64_t *)this));

    v12 = (void *)atomic_load((unint64_t *)this);
    if (*(_BYTE *)(a2[21].n128_u64[0] + 3) || a2[5].n128_u8[10])
    {
      v41 = v12;
    }
    else
    {
      BoundingBox = CGPathGetBoundingBox((CGPathRef)v12);
      x = BoundingBox.origin.x;
      y = BoundingBox.origin.y;
      width = BoundingBox.size.width;
      height = BoundingBox.size.height;
      *(_QWORD *)&v42.a = CGPathCreateMutable();
      v19 = (const CGPath *)a2[17].n128_u64[0];
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 3) - *((_QWORD *)v19 + 2);
        v21 = v20 >> 3;
        v22 = (uint64_t *)a2[20].n128_u64[0];
        v23 = *v22;
        v24 = v22[1] + *v22;
        if (v24 >= v20 >> 3)
          v25 = v20 >> 3;
        else
          v25 = v24;
        if (v23 < 0 || v23 >= v21)
        {
          v26 = v24 > 0 && v23 < 1;
          v23 = 0;
          if (!v26)
            v25 = 0;
        }
        else
        {
          v25 -= v23;
        }
        if (v25 >= 1)
        {
          v27 = v23 + v25;
          v28 = v23;
          do
          {
            v29 = *(TRun **)(*(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * v28) + 40);
            v43.width = -3.72066208e-103;
            TRun::CopyPath(v29, (unint64_t *)&v43);
            v30 = (CGPath *)atomic_load((unint64_t *)&v42);
            v31 = (const CGPath *)atomic_load((unint64_t *)&v43);
            CGPathAddPath(v30, 0, v31);

            ++v28;
          }
          while (v23 <= v28 && v27 > v28);
        }
        do
          v19 = (const CGPath *)__ldaxr((unint64_t *)&v42);
        while (__stlxr(0, (unint64_t *)&v42));
      }

      v43.width = NAN;
      v43.height = NAN;
      TRun::GetPositions(a2, &v43);
      v47 = CGPathGetBoundingBox(v19);
      v32 = v47.origin.x;
      v33 = v47.origin.y;
      v34 = v47.size.width;
      v35 = v47.size.height;
      if (CGRectIsNull(v47))
        goto LABEL_47;
      v48.origin.x = v32;
      v48.origin.y = v33;
      v48.size.width = v34;
      v48.size.height = v35;
      v49 = CGRectOffset(v48, -v43.width, -v43.height);
      v50 = CGRectInset(v49, a2[23].n128_f64[0] * -0.5, a2[23].n128_f64[0] * -0.5);
      v36 = v50.origin.x;
      v37 = v50.origin.y;
      v38 = v50.size.width;
      v39 = v50.size.height;
      v50.origin.x = x;
      v50.origin.y = y;
      v50.size.width = width;
      v50.size.height = height;
      v51 = CGRectInset(v50, a2[23].n128_f64[0], a2[23].n128_f64[0]);
      v52.origin.x = v36;
      v52.origin.y = v37;
      v52.size.width = v38;
      v52.size.height = v39;
      if (!CGRectContainsRect(v51, v52))
      {
LABEL_47:
        *(_QWORD *)&v40 = -1;
        *((_QWORD *)&v40 + 1) = -1;
        *(_OWORD *)&v42.c = v40;
        *(_OWORD *)&v42.tx = v40;
        *(_OWORD *)&v42.a = v40;
        CGAffineTransformMakeTranslation(&v42, -v43.width, -v43.height);
        CreateMaskedPath((const CGPath *)v12, v19, a2[23].n128_f64[0], &v42, 1, (unint64_t *)&v41);
      }
      else
      {
        v41 = v12;
      }

    }
    do
      v13 = __ldaxr((unint64_t *)&v41);
    while (__stlxr(0, (unint64_t *)&v41));
    do
      v14 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v13, (unint64_t *)this));

  }
}

void TTextEncapsulationRun::DrawGlyphs(__n128 *this, CGContextRef c, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  CGPoint TextPosition;
  const CGPoint *v8;
  const CGPoint *v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double v22;
  _QWORD v23[3];
  CGSize v24;

  length = a3.length;
  location = a3.location;
  TextPosition = CGContextGetTextPosition(c);
  v24.width = NAN;
  v24.height = NAN;
  TRun::GetPositions(this, &v24);
  v9 = v8;
  CGContextSetTextPosition(c, TextPosition.x - v24.width, TextPosition.y - v24.height);
  v23[1] = 0;
  v23[2] = 0xAAAAAAAAAAAAAA00;
  v23[0] = 0xAAAAAAAAAAAAAA01;
  TTextEncapsulationRun::DrawGlyphsAtPositions(this, c, location, length, v9, (uint64_t)v23);
  v10 = (double *)this[19].n128_u64[1];
  if (!v10)
    v10 = (double *)MEMORY[0x1E0C9D820];
  v11 = TextPosition.x + *v10;
  v12 = TextPosition.y + v10[1];
  v13 = this[13].n128_i64[0];
  if (v13)
  {
    v14 = this[13].n128_u64[1];
    v15 = *(_QWORD *)(v14 + 32);
    if (v15 || (v18 = *(_QWORD *)(v14 + 24)) == 0)
    {
      v16 = 0;
      v17 = (double *)(v15 + 16 * this[12].n128_u64[1]);
    }
    else
    {
      v17 = (double *)(v18 + 8 * this[12].n128_u64[1]);
      v16 = 1;
    }
    if (v13 >= 1)
    {
      v19 = 0;
      v20 = v17;
      do
      {
        if (v16)
        {
          v21 = &v17[v19];
          v22 = 0.0;
        }
        else
        {
          v22 = v20[1];
          v21 = v20;
        }
        v11 = v11 + *v21;
        v12 = v12 + v22;
        ++v19;
        v20 += 2;
        --v13;
      }
      while (v13);
    }
  }
  CGContextSetTextPosition(c, v11, v12);
}

void TTextEncapsulationRun::DrawGlyphsAtPositions(__n128 *a1, CGContextRef c, CFIndex a3, CFIndex a4, const CGPoint *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGPoint TextPosition;
  CGFloat v17;
  CGFloat v18;
  unint64_t *v19;
  void *v20;
  const void *v21;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  int v28;
  void *v30;
  const CGPath *v31;
  CGBlendMode v32;
  id v33;
  id v34;
  CGAffineTransform transform;
  CGSize v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFRange v41;

  if (a4 >= 1)
  {
    v37 = v9;
    v38 = v8;
    v39 = v6;
    v40 = v7;
    if (a1[24].n128_u8[5])
    {
      TextPosition = CGContextGetTextPosition(c);
      v36.width = NAN;
      v36.height = NAN;
      TRun::GetPositions(a1, &v36);
      v17 = TextPosition.x + v36.width;
      v18 = TextPosition.y + v36.height;
      CGContextSaveGState(c);
      CGAffineTransformMakeTranslation(&transform, v17, v18);
      CGContextConcatCTM(c, &transform);
      v19 = &a1[23].n128_u64[1];
      v20 = (void *)atomic_load(&a1[23].n128_u64[1]);
      v34 = v20;
      if (!atomic_load((unint64_t *)&v34))
      {
        TTextEncapsulationRun::CopyPlatterPath((TTextEncapsulationRun *)&v33, a1);
        do
          v23 = __ldaxr((unint64_t *)&v33);
        while (__stlxr(0, (unint64_t *)&v33));
        do
          v24 = (void *)__ldaxr((unint64_t *)&v34);
        while (__stlxr(v23, (unint64_t *)&v34));

        v25 = (void *)atomic_load((unint64_t *)&v34);
        v26 = v25;
        while (!__ldaxr(v19))
        {
          if (!__stlxr((unint64_t)v26, v19))
          {
            v28 = 1;
            goto LABEL_12;
          }
        }
        v28 = 0;
        __clrex();
LABEL_12:
        if (v28)
          v26 = 0;

      }
      if (atomic_load((unint64_t *)&v34))
      {
        v30 = *(void **)(a1[21].n128_u64[0] + 24);
        if (v30 || (v30 = (void *)atomic_load(&a1[4].n128_u64[1])) != 0)
          TAttributes::SetFillColor(c, v30, v21);
        v31 = (const CGPath *)atomic_load((unint64_t *)&v34);
        CGContextAddPath(c, v31);
        CGContextFillPath(c);
      }

      CGContextRestoreGState(c);
    }
    CGContextSaveGState(c);
    CGContextSetShouldSubpixelQuantizeFonts(c, 0);
    v32 = a1[24].n128_u32[0];
    if (v32)
      CGContextSetBlendMode(c, v32);
    v41.location = a3;
    v41.length = a4;
    TRun::DrawGlyphsAtPositionsInternal((TRun *)a1, c, v41, a5, *(_BYTE *)a6 != 0, *(const TAttributes **)(a6 + 8), 1);
    CGContextRestoreGState(c);
  }
}

void TTextEncapsulationRun::CopyEncapsulationPath(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  CGAffineTransform v8;
  CGSize v9;
  id v10;

  if (this[24].n128_u8[5])
  {
    v10 = (id)0xAAAAAAAAAAAAAAAALL;
    TTextEncapsulationRun::CopyPlatterPath((TTextEncapsulationRun *)&v10, this);
    if (atomic_load((unint64_t *)&v10))
    {
      v9.width = NAN;
      v9.height = NAN;
      TRun::GetPositions(this, &v9);
      *(_QWORD *)&v5 = -1;
      *((_QWORD *)&v5 + 1) = -1;
      *(_OWORD *)&v8.c = v5;
      *(_OWORD *)&v8.tx = v5;
      *(_OWORD *)&v8.a = v5;
      CGAffineTransformMakeTranslation(&v8, v9.width, v9.height);
      v6 = atomic_load((unint64_t *)&v10);
      v7 = MEMORY[0x186DBFE00](v6, &v8);
    }
    else
    {
      v7 = 0;
    }
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t TTextEncapsulationRun::GetLeftWhitespaceGlyphCountAndWidth(TTextEncapsulationRun *this)
{
  if (*((_BYTE *)this + 389))
    return TRun::GetLeftWhitespaceGlyphCountAndWidth(this);
  else
    return 0;
}

double TTextEncapsulationRun::UpdateWidth(TTextEncapsulationRun *this, TLine *a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  TAttributes *v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  unint64_t v41;
  double y;
  CGFloat x;
  double height;
  CGFloat width;
  TFont *v46;
  _DWORD *v47;
  double v48;
  double v49;
  uint64_t v50;
  TRun *v51;
  CFIndex v52;
  int *inited;
  double v54;
  int *v55;
  uint64_t v56;
  double v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  uint64_t v61;
  double v62;
  int v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  const __CFDictionary *Dictionary;
  double v73;
  double DoubleValue;
  const __CFNumber *Value;
  const __CFNumber *v76;
  CFTypeID v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CFTypeID TypeID;
  uint64_t v91;
  double v92;
  double v94;
  int v95;
  double v96;
  uint64_t v97;
  TAttributes *v98;
  double v99;
  double v100;
  double v101;
  id valuePtr;
  CFRange v103;
  CGSize v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;

  v4 = a3;
  v7 = (TTextEncapsulationRun *)((char *)this + 40);
  v8 = atomic_load((unint64_t *)this + 7);
  if (v8)
    v9 = *(double *)(*(_QWORD *)(v8 + 40) + 16);
  else
    v9 = 0.0;
  v10 = *(double *)(*((_QWORD *)this + 42) + 32);
  v11 = (uint64_t *)*((_QWORD *)this + 40);
  if (!v11)
    goto LABEL_15;
  v12 = *v11;
  v13 = v11[1] + *v11;
  if (v12 > a3 || v13 <= a3)
  {
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 41) = 0;
    if (!v15)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, a4);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (!*((_QWORD *)this + 40))
    {
LABEL_15:
      v18 = (char *)operator new(0x60uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_1E15E16D0;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_QWORD *)v18 + 11) = 0;
      v19 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
      *((_QWORD *)this + 41) = v18;
      *(_OWORD *)(v18 + 24) = 0u;
      *((_QWORD *)this + 40) = v18 + 24;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (double *)*((_QWORD *)this + 39);
      v23 = (double *)MEMORY[0x1E0C9D820];
      if (!v22)
        v22 = (double *)MEMORY[0x1E0C9D820];
      v24 = *v22;
      v25 = *((_QWORD *)this + 20);
      if (v25)
        v26 = *(_QWORD *)(v25 + 72);
      else
        v26 = 0;
      v27 = *((double *)this + 24) + v24;
      v28 = v4 + 1;
      v29 = 1;
      v30 = v4;
      if (v4 > 0)
      {
        while (1)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v30 - 8) + 40);
          v32 = *(_QWORD *)(v31 + 160);
          if (v32)
            v32 = *(_QWORD *)(v32 + 72);
          if (v32 != v26)
            break;
          --v30;
          std::shared_ptr<TTextEncapsulationRun::RunGroup>::operator=[abi:nn180100]((_QWORD *)(v31 + 320), *((_QWORD *)this + 40), *((_QWORD *)this + 41));
          ++v29;
          v33 = *(double **)(v31 + 312);
          if (!v33)
            v33 = v23;
          v27 = v27 + *(double *)(v31 + 192) + *v33;
          if (!v30)
          {
            v29 = v4 + 1;
            break;
          }
        }
      }
      v34 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
      v35 = *((unsigned __int8 *)this + 390);
      v97 = v4;
      v98 = v7;
      if (v28 >= v34 >> 3)
      {
        v95 = *((unsigned __int8 *)this + 390);
      }
      else
      {
        v36 = v34 >> 3;
        v37 = v29 + ~v4 + (v34 >> 3);
        while (1)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v28) + 40);
          v39 = *(_QWORD *)(v38 + 160);
          if (v39)
            v39 = *(_QWORD *)(v39 + 72);
          if (v39 != v26)
            break;
          std::shared_ptr<TTextEncapsulationRun::RunGroup>::operator=[abi:nn180100]((_QWORD *)(v38 + 320), *((_QWORD *)this + 40), *((_QWORD *)this + 41));
          ++v29;
          v40 = *(double **)(v38 + 312);
          if (!v40)
            v40 = v23;
          v27 = v27 + *(double *)(v38 + 192) + *v40;
          v35 = *(unsigned __int8 *)(v38 + 390);
          if (v36 == ++v28)
          {
            v95 = *(unsigned __int8 *)(v38 + 390);
            v29 = v37;
            goto LABEL_44;
          }
        }
        v95 = v35;
LABEL_44:
        v7 = v98;
      }
      v99 = v9 / v10;
      TAttributes::OriginalFont(v7, (unint64_t *)&valuePtr);
      v41 = atomic_load((unint64_t *)&valuePtr);

      x = *MEMORY[0x1E0C9D648];
      y = *(double *)(MEMORY[0x1E0C9D648] + 8);
      width = *(double *)(MEMORY[0x1E0C9D648] + 16);
      height = *(double *)(MEMORY[0x1E0C9D648] + 24);
      if (v29 < 1)
      {
        v49 = 1.79769313e308;
        v48 = 2.22507386e-308;
      }
      else
      {
        v46 = *(TFont **)(v41 + 40);
        v47 = (_DWORD *)((char *)v46 + 48);
        v48 = 2.22507386e-308;
        v49 = 1.79769313e308;
        v50 = v30;
        do
        {
          v51 = *(TRun **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v50) + 40);
          v52 = *((_QWORD *)v51 + 26);
          inited = (int *)((char *)v46 + 48);
          if (!*v47)
            inited = TFont::InitStrikeMetrics(v46);
          v54 = *((double *)inited + 1);
          v55 = (int *)((char *)v46 + 48);
          if (!*v47)
            v55 = TFont::InitStrikeMetrics(v46);
          if (v99 * v54 >= v48)
            v48 = v99 * v54;
          if (v99 * *((double *)v55 + 2) >= v49)
            v49 = v99 * *((double *)v55 + 2);
          *(double *)&valuePtr = 0.0;
          v56 = *((_QWORD *)v51 + 20);
          if (v56)
            v57 = *(double *)(v56 + 48);
          else
            v57 = 0.0;
          v101 = -v57;
          v103.location = 0;
          v103.length = v52;
          v109.origin.x = TRun::GetImageBounds(v51, 0, v103, (double *)&valuePtr, &v101);
          v109.origin.y = v58;
          v109.size.width = v59;
          v109.size.height = v60;
          v105.origin.x = x;
          v105.origin.y = y;
          v105.size.width = width;
          v105.size.height = height;
          v106 = CGRectUnion(v105, v109);
          x = v106.origin.x;
          y = v106.origin.y;
          width = v106.size.width;
          height = v106.size.height;
          ++v50;
        }
        while (v30 <= v50 && v29 + v30 > v50);
      }
      v61 = *((_QWORD *)this + 42);
      v94 = *(double *)(v61 + 48);
      v62 = v99 * v94;
      v100 = (*((double *)this + 45) - v99 * v94) * 0.5;
      v63 = *(unsigned __int8 *)(v61 + 2);
      v64 = 0.0;
      if (v63 == 1)
        v64 = 0.25;
      if (v63 == 2)
        v64 = 1.0;
      v96 = v64;
      v107.origin.x = x;
      v107.origin.y = y;
      v107.size.width = width;
      v107.size.height = height;
      v4 = v97;
      if (CGRectGetMinY(v107) >= -v49
        && (v108.origin.x = x,
            v108.origin.y = y,
            v108.size.width = width,
            v108.size.height = height,
            CGRectGetMaxY(v108) <= v48))
      {
        v66 = (v94 - v62) * 0.5;
        v65 = *((_QWORD *)this + 42);
      }
      else
      {
        v65 = *((_QWORD *)this + 42);
        v66 = (*(double *)(v65 + 48) - height) * 0.5 - y;
      }
      v7 = v98;
      v67 = v100 + v62 * v96 * 0.25;
      v68 = *((double *)this + 46);
      if ((*(double *)(v65 + 16) - v27 - v68) * 0.5 > v67)
        v67 = (*(double *)(v65 + 16) - v27 - v68) * 0.5;
      v69 = *((_QWORD *)this + 40);
      *(_QWORD *)v69 = v30;
      *(_QWORD *)(v69 + 8) = v29;
      *(double *)(v69 + 16) = v66;
      *(double *)(v69 + 24) = v67;
      v70 = v68 + v67;
      v71 = 1.0;
      if (!v95)
        v71 = 2.0;
      *(double *)(v69 + 32) = v27 + v70 * v71;
      *(CGFloat *)(v69 + 40) = x;
      *(double *)(v69 + 48) = y;
      *(CGFloat *)(v69 + 56) = width;
      *(double *)(v69 + 64) = height;
    }
  }
  *(double *)&valuePtr = 0.0;
  Dictionary = (const __CFDictionary *)TAttributes::GetDictionary(v7);
  v73 = 0.0;
  DoubleValue = 0.0;
  if (Dictionary)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(Dictionary, CFSTR("CTBaselineOffset"));
    DoubleValue = 0.0;
    if (Value)
    {
      v76 = Value;
      v77 = CFGetTypeID(Value);
      if (v77 == CFNumberGetTypeID() || v77 == CFBooleanGetTypeID())
      {
        CFNumberGetValue(v76, kCFNumberDoubleType, &valuePtr);
        DoubleValue = *(double *)&valuePtr;
      }
      else
      {
        TypeID = CFStringGetTypeID();
        DoubleValue = 0.0;
        if (v77 == TypeID)
        {
          DoubleValue = CFStringGetDoubleValue((CFStringRef)v76);
          *(double *)&valuePtr = DoubleValue;
        }
      }
    }
  }
  v78 = *((_QWORD *)this + 40);
  v79 = DoubleValue + *(double *)(v78 + 16);
  v80 = *((_QWORD *)this + 20);
  if (v80)
    v73 = *(double *)(v80 + 48);
  if (v73 != v79)
  {
    *(double *)(TAttributes::EnsureRareData(v7) + 48) = v79;
    *((_BYTE *)this + 89) = 1;
    v78 = *((_QWORD *)this + 40);
  }
  v81 = *(double *)(v78 + 24) + *((double *)this + 46);
  v82 = *(_QWORD *)v78;
  if (*(_QWORD *)v78 == v4)
  {
    v82 = v4;
    if (!*((_BYTE *)this + 389))
    {
      v104.height = 0.0;
      v104.width = *(double *)(v78 + 24) + *((double *)this + 46);
      TRun::AdvanceInitialAdvance(this, v104);
      *((_BYTE *)this + 389) = 1;
      v78 = *((_QWORD *)this + 40);
      v82 = *(_QWORD *)v78;
    }
    v83 = v81 + 0.0;
  }
  else
  {
    v83 = 0.0;
  }
  if (v82 + *(_QWORD *)(v78 + 8) - 1 == v4 && !*((_BYTE *)this + 390))
  {
    v84 = *((_QWORD *)this + 26);
    v85 = *((_QWORD *)this + 27);
    v86 = *(_QWORD *)(v85 + 32);
    if (v86 || (v91 = *(_QWORD *)(v85 + 24)) == 0)
    {
      v87 = v84 - 1;
      v88 = v86 + 16 * *((_QWORD *)this + 25) + 16 * (v84 - 1);
      v89 = *(_QWORD *)(v88 + 8);
    }
    else
    {
      v87 = v84 - 1;
      v88 = v91 + 8 * *((_QWORD *)this + 25) + 8 * (v84 - 1);
      v89 = 0;
    }
    v92 = v81 + *(double *)v88;
    TStorageRange::SetAdvance((TTextEncapsulationRun *)((char *)this + 192), v87, *(CGSize *)(&v89 - 1));
    *((_BYTE *)this + 390) = 1;
    v83 = v81 + v83;
  }
  *((_BYTE *)this + 388) = 0;
  return v83;
}

_QWORD *std::shared_ptr<TTextEncapsulationRun::RunGroup>::operator=[abi:nn180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

double TTextEncapsulationRun::GetImageBounds(TTextEncapsulationRun *this, CGContext *a2, CFRange a3, double *a4, double *a5)
{
  double ImageBounds;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  const CGPath *v14;
  id v16;
  CGRect v17;
  CGRect BoundingBox;

  ImageBounds = TRun::GetImageBounds(this, a2, a3, a4, a5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  if (!*((_BYTE *)this + 388))
  {
    v16 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TTextEncapsulationRun *))(*(_QWORD *)this + 128))(&v16, this);
    if (atomic_load((unint64_t *)&v16))
    {
      v14 = (const CGPath *)atomic_load((unint64_t *)&v16);
      BoundingBox = CGPathGetBoundingBox(v14);
      v17.origin.x = ImageBounds;
      v17.origin.y = v8;
      v17.size.width = v10;
      v17.size.height = v12;
      *(_QWORD *)&ImageBounds = (unint64_t)CGRectUnion(v17, BoundingBox);
    }

  }
  return ImageBounds;
}

void TTextEncapsulationRun::~TTextEncapsulationRun(id *this)
{
  *this = &off_1E15DE328;

  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)(this + 40));
  TRun::~TRun(this);
}

{
  *this = &off_1E15DE328;

  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)(this + 40));
  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TTextEncapsulationRun::FindBreak@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t result;

  *(_OWORD *)a5 = xmmword_18494CAD8;
  *(_QWORD *)(a5 + 16) = -1;
  result = TRun::FindBreak(a1, a2, a3, a4, a5, a6);
  *(_BYTE *)a5 |= 8u;
  return result;
}

double TTextEncapsulationRun::GetAscent(TTextEncapsulationRun *this)
{
  return *((double *)this + 43);
}

double TTextEncapsulationRun::GetDescent(TTextEncapsulationRun *this)
{
  return *((double *)this + 44);
}

double TTextEncapsulationRun::GetLeading(TTextEncapsulationRun *this)
{
  return 0.0;
}

uint64_t TTextEncapsulationRun::CanUpdateWidth(TTextEncapsulationRun *this)
{
  return *((unsigned __int8 *)this + 388);
}

void std::__shared_ptr_emplace<TTextEncapsulationRun::RunGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E16D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTextEncapsulationRun::RunGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E16D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t IsWAPIComplianceRequired(void)
{
  return MGGetBoolAnswer();
}

BOOL IsSystemFontPath(CFStringRef theString)
{
  _BOOL8 result;

  if (GetSystemLibraryFontsPath(void)::once != -1)
    dispatch_once_f(&GetSystemLibraryFontsPath(void)::once, 0, (dispatch_function_t)GetSystemLibraryFontsPath(void)::$_0::__invoke);
  if ((CFStringRef)GetSystemLibraryFontsPath(void)::_sysFontsPath == theString
    || theString
    && GetSystemLibraryFontsPath(void)::_sysFontsPath
    && CFStringHasPrefix(theString, (CFStringRef)GetSystemLibraryFontsPath(void)::_sysFontsPath))
  {
    return 1;
  }
  if (GetSystemLibraryPrivateFontsPath(void)::once != -1)
    dispatch_once_f(&GetSystemLibraryPrivateFontsPath(void)::once, 0, (dispatch_function_t)GetSystemLibraryPrivateFontsPath(void)::$_0::__invoke);
  if ((CFStringRef)GetSystemLibraryPrivateFontsPath(void)::_sysPrivateFontsPath == theString)
    return 1;
  result = 0;
  if (theString)
  {
    if (GetSystemLibraryPrivateFontsPath(void)::_sysPrivateFontsPath)
      return CFStringHasPrefix(theString, (CFStringRef)GetSystemLibraryPrivateFontsPath(void)::_sysPrivateFontsPath) != 0;
  }
  return result;
}

const char *GetSystemRootPath(void)::$_0::__invoke()
{
  const char *result;
  const char *v1;
  const char *v2;

  result = getenv("SIMULATOR_ROOT");
  if (result)
  {
    v1 = result;
    if (*result)
    {
      if (result[strlen(result) - 1] == 47)
        v2 = "";
      else
        v2 = "/";
      result = (const char *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s%s"), v1, v2);
      GetSystemRootPath(void)::_sysPath = (uint64_t)result;
    }
  }
  return result;
}

CFStringRef GetSystemLibraryFontsPath(void)::$_0::__invoke()
{
  const __CFAllocator *v0;
  CFStringRef result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (GetSystemRootPath(void)::once != -1)
    dispatch_once_f(&GetSystemRootPath(void)::once, 0, (dispatch_function_t)GetSystemRootPath(void)::$_0::__invoke);
  result = CFStringCreateWithFormat(v0, 0, CFSTR("%@System/Library/Fonts/"), GetSystemRootPath(void)::_sysPath);
  GetSystemLibraryFontsPath(void)::_sysFontsPath = (uint64_t)result;
  return result;
}

CFStringRef GetSystemLibraryPrivateFontsPath(void)::$_0::__invoke()
{
  const __CFAllocator *v0;
  CFStringRef result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (GetSystemRootPath(void)::once != -1)
    dispatch_once_f(&GetSystemRootPath(void)::once, 0, (dispatch_function_t)GetSystemRootPath(void)::$_0::__invoke);
  result = CFStringCreateWithFormat(v0, 0, CFSTR("%@System/Library/PrivateFrameworks/FontServices.framework/CorePrivate/"), GetSystemRootPath(void)::_sysPath);
  GetSystemLibraryPrivateFontsPath(void)::_sysPrivateFontsPath = (uint64_t)result;
  return result;
}

CFStringRef GetAppleInternalFontsPath(void)::$_0::__invoke()
{
  const __CFAllocator *v0;
  CFStringRef result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (GetSystemRootPath(void)::once != -1)
    dispatch_once_f(&GetSystemRootPath(void)::once, 0, (dispatch_function_t)GetSystemRootPath(void)::$_0::__invoke);
  result = CFStringCreateWithFormat(v0, 0, CFSTR("%@%@"), GetSystemRootPath(void)::_sysPath, CFSTR("AppleInternal/Fonts/"));
  GetAppleInternalFontsPath(void)::_aiSysFontsPath = (uint64_t)result;
  return result;
}

__CFString *TCharStream::DebugDescriptionForRange(TCharStream *this, CFRange a2)
{
  uint64_t length;
  CFIndex location;
  __CFString *Mutable;
  __int128 v5;
  const __CFString *v6;
  const char *CStringPtr;
  int64_t i;
  int64_t v9;
  UniChar v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  __CFString *v14;
  CFIndex v15;
  int64_t v16;
  int64_t v18;
  UniChar v19;
  int v20;
  int64_t v21;
  int64_t v22;
  UniChar chars[2];
  UniChar buffer[8];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CFStringRef v33;
  const UniChar *CharactersPtr;
  unint64_t v35;
  CFIndex v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  id v40[3];
  CFRange v41;
  CFRange v42;

  length = a2.length;
  location = a2.location;
  v40[0] = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 8))(v40);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], length);
  v39 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v27 = v5;
  v28 = v5;
  *(_OWORD *)buffer = v5;
  v26 = v5;
  v6 = (const __CFString *)atomic_load((unint64_t *)v40);
  v33 = v6;
  v36 = location;
  v37 = length;
  CharactersPtr = CFStringGetCharactersPtr(v6);
  if (CharactersPtr)
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(v6, 0x600u);
  v35 = (unint64_t)CStringPtr;
  v38 = 0;
  v39 = 0;
  if (length >= 1)
  {
    for (i = 0; i < length; ++i)
    {
      if (i < 0 || (v9 = v37, v37 <= i))
      {
        v11 = 0;
LABEL_11:
        CFStringAppendFormat(Mutable, 0, CFSTR("\\x%02X"), v11);
      }
      else
      {
        if (CharactersPtr)
        {
          v10 = CharactersPtr[v36 + i];
        }
        else if (v35)
        {
          v10 = *(char *)(v35 + v36 + i);
        }
        else
        {
          if (v39 <= i || (v12 = v38, v38 > i))
          {
            v13 = i - 4;
            if ((unint64_t)i < 4)
              v13 = 0;
            if (v13 + 64 < v37)
              v9 = v13 + 64;
            v38 = v13;
            v39 = v9;
            v41.location = v36 + v13;
            v41.length = v9 - v13;
            CFStringGetCharacters(v33, v41, buffer);
            v12 = v38;
          }
          v10 = buffer[i - v12];
        }
        if ((unsigned __int16)(v10 - 32) > 0x5Eu)
        {
          v11 = v10;
          v16 = i + 1;
          if (v10 >> 10 != 54 || v16 >= length)
          {
            switch(v10)
            {
              case 7u:
                *(_DWORD *)chars = 6357084;
                goto LABEL_44;
              case 8u:
                v20 = 6422620;
                goto LABEL_43;
              case 9u:
                v20 = 7602268;
                goto LABEL_43;
              case 0xAu:
                v20 = 7209052;
                goto LABEL_43;
              case 0xBu:
                v20 = 7733340;
                goto LABEL_43;
              case 0xCu:
                v20 = 6684764;
                goto LABEL_43;
              case 0xDu:
                v20 = 7471196;
LABEL_43:
                *(_DWORD *)chars = v20;
LABEL_44:
                v14 = Mutable;
                v15 = 2;
                goto LABEL_45;
              default:
                if (v10 < 0x20u || v10 == 127)
                  goto LABEL_11;
                CFStringAppendFormat(Mutable, 0, CFSTR("\\u%04X"), v10);
                continue;
            }
          }
          v18 = v37;
          if (v37 > v16)
          {
            if (CharactersPtr)
            {
              v19 = CharactersPtr[v36 + v16];
            }
            else if (v35)
            {
              v19 = *(char *)(v35 + v36 + v16);
            }
            else
            {
              if (v39 <= v16 || (v21 = v38, v38 > v16))
              {
                v22 = i - 3;
                if ((unint64_t)v16 < 4)
                  v22 = 0;
                if (v22 + 64 < v37)
                  v18 = v22 + 64;
                v38 = v22;
                v39 = v18;
                v42.location = v36 + v22;
                v42.length = v18 - v22;
                CFStringGetCharacters(v33, v42, buffer);
                v21 = v38;
              }
              v19 = buffer[v16 - v21];
            }
            if (v19 >> 10 == 55)
            {
              CFStringAppendFormat(Mutable, 0, CFSTR("\\U%08X"), ((_DWORD)v11 << 10) + v19 - 56613888);
              ++i;
            }
          }
        }
        else
        {
          chars[0] = v10;
          v14 = Mutable;
          v15 = 1;
LABEL_45:
          CFStringAppendCharacters(v14, chars, v15);
        }
      }
    }
  }

  return Mutable;
}

int64_t TCharStream::GetRangeOfParagraphSeparatorAtIndex(TCharStream *this, int64_t a2)
{
  UChar32 v3;
  UText v5;

  memset(&v5, 0, sizeof(v5));
  v5.magic = 878368812;
  v5.sizeOfStruct = 144;
  if ((**(uint64_t (***)(TCharStream *, UText *))this)(this, &v5))
  {
    v3 = utext_char32At(&v5, a2);
    if (v3 != 8233)
    {
      if (v3 == 13)
      {
        utext_next32(&v5);
      }
      else if (v3 == 10)
      {
        a2 -= utext_previous32(&v5) == 13;
      }
    }
    utext_close(&v5);
  }
  return a2;
}

BOOL TCharStream::IsParagraphSeparator(TCharStream *this, uint64_t a2)
{
  __int128 v2;
  unsigned __int16 *v3;
  int v4;
  BOOL v5;
  _BOOL8 v7;
  void **v9;
  _QWORD v10[3];
  _OWORD v11[4];
  _OWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[2] = v2;
  v11[3] = v2;
  v11[0] = v2;
  v11[1] = v2;
  memset(v10, 0, sizeof(v10));
  v12 = v11;
  v3 = (unsigned __int16 *)(*(uint64_t (**)(TCharStream *, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)this + 72))(this, a2, 1, v10);
  v7 = 0;
  if (v3)
  {
    v4 = *v3;
    v5 = v4 == 10 || v4 == 13;
    if (v5 || v4 == 8233)
      v7 = 1;
  }
  v9 = (void **)v10;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v9);
  return v7;
}

uint64_t TCharStream::LazyCopy(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize((uint64_t)a4, a3);
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, *a4);
  return *a4;
}

void TCharStreamUTF16::~TCharStreamUTF16(TCharStreamUTF16 *this)
{
  JUMPOUT(0x186DC03ACLL);
}

UText *TCharStreamUTF16::OpenUText(TCharStreamUTF16 *this, UText *ut)
{
  UText *result;
  UErrorCode status;

  status = U_ZERO_ERROR;
  result = utext_openUChars(ut, *((const UChar **)this + 3), *((_QWORD *)this + 2), &status);
  if (status > U_ZERO_ERROR)
    return 0;
  return result;
}

CFStringRef TCharStreamUTF16::CopyChars@<X0>(TCharStreamUTF16 *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef result;

  result = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((const UniChar **)this + 3), *((_QWORD *)this + 2), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  *a2 = result;
  return result;
}

CFStringRef TCharStreamUTF16::CopyChars@<X0>(TCharStreamUTF16 *this@<X0>, CFRange a2@<0:X1, 8:X2>, CFStringRef *a3@<X8>)
{
  CFStringRef result;

  result = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UniChar *)(*((_QWORD *)this + 3) + 2 * a2.location), a2.length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  *a3 = result;
  return result;
}

_QWORD *TCharStreamUTF16::CopyChars(_QWORD *this, CFRange a2, unsigned __int16 *__dst)
{
  if (a2.length)
    return memmove(__dst, (const void *)(this[3] + 2 * a2.location), 2 * a2.length);
  return this;
}

uint64_t TCharStreamUTF16::GetClusterRangeAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  uint64_t RangeOfCharacterClusterAtIndex;
  id v8;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)a1 + 8))(&v8);
  v5 = (const __CFString *)atomic_load((unint64_t *)&v8);
  RangeOfCharacterClusterAtIndex = TCharStream::GetRangeOfCharacterClusterAtIndex(v5, a2, a3);

  return RangeOfCharacterClusterAtIndex;
}

uint64_t TCharStreamUTF16::GetSegment(TCharStreamUTF16 *this, uint64_t a2, uint64_t *a3)
{
  return 0;
}

void TCharStream::CopyAttributedString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

CFStringRef TCharStreamCFString::CopyChars@<X0>(TCharStreamCFString *this@<X0>, CFStringRef *a2@<X8>)
{
  const __CFString *v3;
  CFStringRef result;

  v3 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  *a2 = result;
  return result;
}

void TCharStreamCFString::CopyChars(TCharStreamCFString *this, CFRange a2, unsigned __int16 *a3)
{
  const __CFString *v3;

  v3 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  CFStringGetCharacters(v3, a2, a3);
}

CFAttributedStringRef TCharStreamCFString::CopyAttributedString@<X0>(TCharStreamCFString *this@<X0>, CFAttributedStringRef *a2@<X8>)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFDictionary *v5;
  CFAttributedStringRef result;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  v5 = (const __CFDictionary *)atomic_load((unint64_t *)this + 5);
  result = CFAttributedStringCreate(v3, v4, v5);
  *a2 = result;
  return result;
}

uint64_t TCharStreamCFString::GetSegment(TCharStreamCFString *this, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    *a3 = *((_QWORD *)this + 2) - a2;
  return result;
}

uint64_t vImageCompressionDecode_BGRA8888(uint64_t a1, unint64_t a2, _QWORD *a3, char a4, uint8_t *a5)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  uint8_t *v13;
  int16x8_t *v14;
  size_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint8_t *v19;
  uint8_t *v20;
  uint8_t *v21;
  int8x16_t v22;
  int16x8_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  int8x16_t *v34;
  __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  uint8_t *v55;
  uint8_t *v56;
  uint8_t *v57;
  int8x16_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int8x16_t v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  char *v89;
  __int16 v90;
  int16x8_t *v91;
  __int16 v92;
  __int8 *v93;
  __int16 v94;
  __int16 v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  uint8_t *v111;
  BOOL v112;
  int16x8_t *v113;
  __int8 *v114;
  __int16 *v115;
  _OWORD *v116;
  unint64_t j;
  int16x8_t v118;
  unint64_t v119;
  uint8_t *v120;
  uint8_t *v121;
  __int16 v122;
  uint64_t v123;
  int16x8_t *v124;
  int16x8_t v125;
  int16x8_t *v126;
  unint64_t v127;
  int16x8_t *v128;
  unint64_t k;
  size_t v130;
  int8x16_t v131;
  int16x8_t *v132;
  int16x8_t v133;
  uint16x8_t v134;
  unint64_t v135;
  __int16 *v136;
  int v137;
  unsigned int v138;
  size_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int8x16_t *v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int8x16_t *v161;
  int8x16_t *v162;
  int8x16_t v163;
  int8x16_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  uint64_t v175;
  size_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int8x16_t *v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int8x16_t v190;
  int16x8_t v191;
  int8x16_t *v192;
  int8x16_t v193;
  int8x16_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  uint64_t v198;
  int16x8_t *v199;
  uint64_t v200;
  uint8_t *v201;
  unsigned __int8 *v202;
  unsigned __int16 *v203;
  uint64_t v204;
  unint64_t v205;
  __int16 *v206;
  int v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned __int8 *v214;
  unint64_t v215;
  __int16 *v216;
  __int16 *v217;
  unint64_t v218;
  __int16 v219;
  int16x8_t *v220;
  uint64_t v221;
  uint64_t i;
  __int16 *v223;
  unint64_t v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  __int16 *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  int v237;
  char *v238;
  __int16 v239;
  int16x8_t *v240;
  __int16 v241;
  __int8 *v242;
  __int16 v243;
  __int16 v244;
  int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  __int16 v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint8_t *v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  uint8_t *v260;
  int16x8_t *v261;
  __int8 *v262;
  uint64_t v263;
  int8x16_t *v264;
  unsigned __int16 *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  int8x16_t *v272;
  unsigned __int16 *v273;
  uint8_t v274;
  int v275;
  __int16 v276;
  uint64_t v277;
  size_t v278;
  __int16 *v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  size_t v286;
  __int16 *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v292;
  size_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int16 *v297;
  size_t v298;
  uint8_t *v299;
  uint8_t *v300;
  uint64_t v301;
  uint64_t v302;
  size_t v303;
  size_t v304;
  uint64_t v305;
  uint8_t *v306;
  uint8_t *v307;
  __int16 *v308;
  int8x16x2_t v309;
  int8x16x2_t v310;
  int8x16x2_t v311;
  int8x16x2_t v312;

  result = -21773;
  if (a1)
  {
    if (a3)
    {
      result = -21773;
      if (a5)
      {
        if (*a3)
        {
          v8 = a3[1];
          v9 = a3[2];
          if (a2 < 4)
            v10 = 0;
          else
            v10 = *(_DWORD *)a1;
          v11 = v9 * v8;
          v12 = v8 - v9 * v8 + 8 * v9 * v8;
          v13 = a5 + 4096;
          v14 = (int16x8_t *)&a5[v12 + 4096];
          v15 = 3 * v9 * v8;
          v16 = a3[1];
          compression_decode_buffer(a5 + 4096, v12, (const uint8_t *)(a1 + 4), a2 - 4, (char *)v14 + 18 * v9, COMPRESSION_LZFSE);
          if (v15 < v10)
            return -21776;
          v17 = &v13[v11];
          v18 = &v13[v11 + v16];
          v19 = &v18[v15];
          v289 = v16;
          v280 = v17;
          if (v10 <= 0x1000)
          {
            memcpy(a5, &v18[v15], v10);
            bzero(&v18[v15], v15);
            v21 = a5;
            if (!v10)
            {
              v304 = v12;
              v27 = 0;
              goto LABEL_24;
            }
          }
          else
          {
            v20 = (uint8_t *)malloc_type_malloc(v10, 0x24DCC0CCuLL);
            if (!v20)
              return -21771;
            v21 = v20;
            memcpy(v20, &v18[v15], v10);
            bzero(&v18[v15], v15);
          }
          v24 = *v21;
          v304 = v12;
          if ((uint64_t)v15 <= (uint64_t)(v24 >> 2))
          {
LABEL_18:
            v27 = 0;
          }
          else
          {
            v25 = 0;
            v26 = &v19[v24 >> 2];
            while (1)
            {
              *v26++ = v24 & 3;
              if (v10 - 1 == v25)
                break;
              v24 = v21[v25 + 1];
              v26 += v24 >> 2;
              ++v25;
              if (v26 >= &v19[v15])
              {
                if (v25 < v10)
                  goto LABEL_18;
                break;
              }
            }
            v27 = (_BYTE *)(v26 - v19);
          }
          if (v10 > 0x1000)
            free(v21);
LABEL_24:
          v29 = v289;
          v28 = a3;
          v30 = v280;
          if ((unint64_t)v27 < v15)
            return -21776;
          v31 = 3 * v9;
          v32 = 6 * v9;
          v308 = &v14->i16[3 * v9];
          v33 = 12 * v9;
          v34 = (int8x16_t *)*a3;
          v35 = &v14->i16[6 * v9];
          if (v9 <= 7)
          {
            if (v289)
            {
              v198 = 0;
              v199 = (int16x8_t *)(v308 - 3);
              if (v31 <= 1)
                v200 = 1;
              else
                v200 = 3 * v9;
              v295 = v200;
              v297 = (__int16 *)&a5[v304];
              v293 = v32 + 4110;
              v288 = v33 + 4110;
              v201 = &a5[v304 + v33];
              v306 = &a5[v304 + v32];
              v307 = v201;
              v301 = v33 + 4102;
              v303 = v32 + 4096;
              v287 = (__int16 *)(v201 + 4102);
              while (2)
              {
                if (v198)
                {
                  v202 = v30;
                  memcpy(v14, v308, v32);
                  v199 = (int16x8_t *)(v308 - 3);
                  v33 = 12 * v9;
                  v32 = 6 * v9;
                  v30 = v202;
                  v29 = v289;
                  v28 = a3;
                }
                v203 = (unsigned __int16 *)v14 + 3 * v9;
                if (v9)
                {
                  v204 = 0;
                  v205 = v9;
                  do
                  {
                    v206 = &v35[v204];
                    v207 = v18[v204];
                    v208 = v207 | (v19[v204] << 8);
                    *v206 = ((v207 & 1) - 1) & (v208 >> 1) | ((__int16)((_WORD)v207 << 15) >> 15) & -(__int16)(v208 >> 1);
                    v209 = v18[v204 + 1];
                    v210 = v209 | (v19[v204 + 1] << 8);
                    v206[1] = ((v209 & 1) - 1) & (v210 >> 1) | ((__int16)((_WORD)v209 << 15) >> 15) & -(__int16)(v210 >> 1);
                    v211 = v18[v204 + 2];
                    v212 = v211 | (v19[v204 + 2] << 8);
                    v206[2] = ((v211 & 1) - 1) & (v212 >> 1) | ((__int16)((_WORD)v211 << 15) >> 15) & -(__int16)(v212 >> 1);
                    v204 += 3;
                    --v205;
                  }
                  while (v205);
                }
                v213 = *v30++;
                switch(v213)
                {
                  case 0:
                    v214 = v30;
                    memcpy(v308, (char *)v14 + 12 * v9, v32);
                    v199 = (int16x8_t *)(v308 - 3);
                    v33 = 12 * v9;
                    v32 = 6 * v9;
                    v30 = v214;
                    v203 = (unsigned __int16 *)v14 + 3 * v9;
                    v29 = v289;
                    v28 = a3;
                    goto LABEL_174;
                  case 1:
                    *v308 = v14->i16[0] + *v35;
                    v308[1] = v14->i16[1] + v35[1];
                    v308[2] = v14->i16[2] + v35[2];
                    if (v31 >= 9)
                    {
                      v227 = 0;
                      v228 = v297;
                      v229 = 9;
                      v230 = 3;
                      do
                      {
                        v231 = v229;
                        v232 = (char *)v228 + v293;
                        v233 = *(__int16 *)((char *)v228 + v293 - 14);
                        v234 = v228[2051];
                        v235 = v228[2048];
                        v236 = v234 - v235;
                        if (v234 - v235 < 0)
                          v236 = v235 - v234;
                        v237 = v233 - v235;
                        if (v237 < 0)
                          v237 = -v237;
                        v238 = (char *)v228 + v288;
                        v239 = *(__int16 *)((char *)v228 + v288 - 8);
                        if (v236 <= v237)
                        {
                          v240 = v199;
                        }
                        else
                        {
                          LOWORD(v233) = v228[2051];
                          v240 = v14;
                        }
                        v241 = v233 + v239;
                        *((_WORD *)v232 - 4) = v233 + v239;
                        v242 = &v240->i8[2 * v227];
                        v243 = *((_WORD *)v242 + 4) + *((_WORD *)v238 - 3);
                        *((_WORD *)v232 - 3) = v243;
                        v244 = *((_WORD *)v242 + 5) + *((_WORD *)v238 - 2);
                        *((_WORD *)v232 - 2) = v244;
                        v245 = v228[2054];
                        v246 = v245 - v234;
                        if (v245 - v234 < 0)
                          v246 = v234 - v245;
                        v247 = v241 - v234;
                        if (v247 >= 0)
                          v248 = v247;
                        else
                          v248 = -v247;
                        v249 = *((_WORD *)v238 - 1);
                        if (v246 <= v248)
                        {
                          *((_WORD *)v232 - 1) = v249 + v241;
                          *(__int16 *)((char *)v228 + v293) = *(__int16 *)((char *)v228 + v288) + v243;
                          v250 = v230 + 5;
                        }
                        else
                        {
                          *((_WORD *)v232 - 1) = v249 + v245;
                          *(__int16 *)((char *)v228 + v293) = v228[2055] + *(__int16 *)((char *)v228 + v288);
                          v250 = v227 + 8;
                          v244 = v228[2056];
                        }
                        v228 += 6;
                        v308[v250] = v35[v250] + v244;
                        v229 = v231 + 6;
                        v251 = v227 + 6;
                        v252 = v227 + 15;
                        v227 += 6;
                        v230 = v231;
                      }
                      while (v252 <= v31);
                      v215 = v251 + 3;
                      v29 = v289;
                      v28 = a3;
                    }
                    else
                    {
                      v215 = 3;
                    }
                    if (v215 < v31)
                    {
                      v253 = 2 * v215;
                      do
                      {
                        v254 = &v306[v253];
                        v255 = *(__int16 *)&v306[v253 + 4090];
                        v256 = v14->i16[(unint64_t)v253 / 2];
                        v257 = v14->i16[(unint64_t)v253 / 2 - 3];
                        v258 = v256 - v257;
                        if (v256 - v257 < 0)
                          v258 = v257 - v256;
                        v259 = v255 - v257;
                        if (v259 < 0)
                          v259 = -v259;
                        v260 = &v307[v253];
                        if (v258 <= v259)
                        {
                          v261 = v199;
                        }
                        else
                        {
                          LOWORD(v255) = v14->i16[(unint64_t)v253 / 2];
                          v261 = v14;
                        }
                        *((_WORD *)v254 + 2048) = v255 + *(_WORD *)&v307[v253 + 4096];
                        v262 = &v261->i8[v253];
                        *((_WORD *)v254 + 2049) = *((_WORD *)v262 + 1) + *((_WORD *)v260 + 2049);
                        *((_WORD *)v254 + 2050) = *((_WORD *)v262 + 2) + *((_WORD *)v260 + 2050);
                        v215 += 3;
                        v253 += 6;
                      }
                      while (v215 < v31);
                    }
                    goto LABEL_174;
                  case 2:
                    *v308 = *v35;
                    v308[1] = v35[1];
                    v308[2] = v35[2];
                    if (v31 >= 4)
                    {
                      v216 = v287;
                      v217 = &v14->i16[3 * v9];
                      v218 = v31 - 3;
                      do
                      {
                        v219 = *v216++;
                        v217[3] = v219 + *v217;
                        ++v217;
                        --v218;
                      }
                      while (v218);
                    }
                    goto LABEL_174;
                  case 3:
                    v220 = v14;
                    v221 = v295;
                    if (!v9)
                      goto LABEL_182;
                    do
                    {
                      v220->i16[v32 / 2] = v220->i16[(unint64_t)v33 / 2] + v220->i16[0];
                      v220 = (int16x8_t *)((char *)v220 + 2);
                      --v221;
                    }
                    while (v221);
LABEL_174:
                    if ((a4 & 1) != 0)
                    {
                      if (v9)
                      {
                        v263 = 0;
                        v264 = v34;
                        v265 = v203;
                        do
                        {
                          v266 = v13[v263];
                          v267 = *v265 - ((__int16)(v265[2] + (v265[2] >> 15)) >> 1);
                          v268 = v267 + v265[2];
                          v269 = v267 - ((__int16)(v265[1] + (v265[1] >> 15)) >> 1);
                          v270 = v269 + v265[1];
                          v264->i8[0] = (unsigned __int16)(v269 * v266 + 128 + (((v269 * v266 + 128) & 0xFF00u) >> 8)) >> 8;
                          v264->i8[1] = (unsigned __int16)(v268 * v266 + 128 + (((v268 * v266 + 128) & 0xFF00u) >> 8)) >> 8;
                          v264->i8[2] = (unsigned __int16)(v270 * v266 + 128 + (((v270 * v266 + 128) & 0xFF00u) >> 8)) >> 8;
                          v264->i8[3] = v266;
                          v264 = (int8x16_t *)((char *)v264 + 4);
                          ++v263;
                          v265 += 3;
                        }
                        while (v9 != v263);
                      }
                    }
                    else if (v9)
                    {
                      v271 = 0;
                      v272 = v34;
                      v273 = v203;
                      do
                      {
                        v274 = v13[v271];
                        v275 = *v273 - ((__int16)(v273[2] + (v273[2] >> 15)) >> 1) + v273[2];
                        v276 = *v273
                             - (__int16)v273[2] / 2
                             - ((__int16)(v273[1] + (v273[1] >> 15)) >> 1)
                             + v273[1];
                        v272->i8[0] = *(_BYTE *)v273
                                    - (__int16)v273[2] / 2
                                    + -((__int16)(v273[1] + (v273[1] >> 15)) >> 1);
                        v272->i8[1] = v275;
                        v272->i8[2] = v276;
                        v272->i8[3] = v274;
                        v272 = (int8x16_t *)((char *)v272 + 4);
                        ++v271;
                        v273 += 3;
                      }
                      while (v9 != v271);
                    }
LABEL_182:
                    result = 0;
                    v18 += v31;
                    v19 += v31;
                    v13 += v9;
                    v34 = (int8x16_t *)((char *)v34 + v28[3]);
                    if (++v198 == v29)
                      return result;
                    continue;
                  case 4:
                    for (i = 0; i != 3; ++i)
                      v308[i] = v35[i] + v14->i16[i];
                    v223 = v297;
                    v224 = v31 - 3;
                    if (v31 >= 4)
                    {
                      do
                      {
                        v225 = *(__int16 *)((char *)v223 + v303) + v223[2051];
                        if (v225 + 1 >= 0)
                          v226 = v225 + 1;
                        else
                          v226 = v225 + 2;
                        *(__int16 *)((char *)v223 + v303 + 6) = *(__int16 *)((char *)v223 + v301) + (v226 >> 1);
                        ++v223;
                        --v224;
                      }
                      while (v224);
                    }
                    goto LABEL_174;
                  default:
                    goto LABEL_174;
                }
              }
            }
          }
          else if (v289)
          {
            v36 = 0;
            v37 = 8 - (v9 & 7);
            v282 = -(uint64_t)(4 * v37);
            v294 = v289 + v289 * v9 + 4096;
            v292 = v289 * ((4 * v9) | 1) + 4096;
            v279 = (__int16 *)&a5[v304];
            v278 = v32 + 4110;
            v38 = v33 + 4110;
            v39 = v304 + v32;
            v277 = v33 + 4102;
            v296 = v33 + 4096;
            v298 = v32 + 4090;
            v300 = &a5[v304 + v33];
            v281 = v304 + v33 + 4096;
            v299 = &a5[v304 + v32];
            v305 = 4096;
            v302 = 4096 - v37;
            v40 = (int8x16_t)xmmword_18494CB00;
            v41 = (int8x16_t)xmmword_18494CB10;
            v42 = (int8x16_t)xmmword_18494CB20;
            v43 = (int8x16_t)xmmword_18494CB30;
            v44 = (int8x16_t)xmmword_18494CB40;
            v45 = (int8x16_t)xmmword_18494CB50;
            v283 = -3 * v9;
            v46 = (int8x16_t)xmmword_18494CB60;
            v47 = (int8x16_t)xmmword_18494CB70;
            v48 = (int8x16_t)xmmword_18494CB80;
            v49 = (int8x16_t)xmmword_18494CB90;
            v50 = (int8x16_t)xmmword_18494CBA0;
            v285 = v39 + 4096 - 2 * (3 * v37);
            v286 = v39 + 4096;
            v51.i64[0] = 0x1000100010001;
            v51.i64[1] = 0x1000100010001;
            v52.i64[0] = -1;
            v52.i64[1] = -1;
            v284 = v33 + 4110;
            while (1)
            {
              if (v36)
              {
                v53 = v30;
                memcpy(v14, v308, v32);
                v52.i64[0] = -1;
                v52.i64[1] = -1;
                v51.i64[0] = 0x1000100010001;
                v51.i64[1] = 0x1000100010001;
                v50 = (int8x16_t)xmmword_18494CBA0;
                v49 = (int8x16_t)xmmword_18494CB90;
                v48 = (int8x16_t)xmmword_18494CB80;
                v47 = (int8x16_t)xmmword_18494CB70;
                v46 = (int8x16_t)xmmword_18494CB60;
                v45 = (int8x16_t)xmmword_18494CB50;
                v44 = (int8x16_t)xmmword_18494CB40;
                v43 = (int8x16_t)xmmword_18494CB30;
                v42 = (int8x16_t)xmmword_18494CB20;
                v41 = (int8x16_t)xmmword_18494CB10;
                v40 = (int8x16_t)xmmword_18494CB00;
                v38 = v284;
                v33 = 12 * v9;
                v32 = 6 * v9;
                v30 = v53;
                v29 = v289;
                v28 = a3;
              }
              if (v31 >= 8)
              {
                v60 = v292;
                v59 = v294;
                v61 = v281;
                v62 = 8;
                v58 = v34;
                do
                {
                  v22.i64[0] = *(_QWORD *)&a5[v59];
                  v23.i64[0] = *(_QWORD *)&a5[v60];
                  v63 = vzip1q_s8(v22, (int8x16_t)v23);
                  v64 = (int16x8_t)vandq_s8(v63, v51);
                  v65 = (int16x8_t)vshrq_n_u16((uint16x8_t)v63, 1uLL);
                  v66 = vandq_s8((int8x16_t)vaddq_s16(v64, v52), (int8x16_t)v65);
                  v23 = vceqzq_s16(v64);
                  v22 = vorrq_s8(v66, vbicq_s8((int8x16_t)vnegq_s16(v65), (int8x16_t)v23));
                  *(int8x16_t *)&a5[v61] = v22;
                  v62 += 8;
                  v61 += 16;
                  v59 += 8;
                  v60 += 8;
                }
                while (v62 <= v31);
                v57 = &a5[v61];
                v56 = &a5[v59];
                v55 = &a5[v60];
                v54 = ((v31 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
              }
              else
              {
                v54 = 0;
                v55 = v19;
                v56 = v18;
                v57 = (uint8_t *)v14 + 12 * v9;
                v58 = v34;
              }
              if (v54 < v31)
              {
                v67 = v283 + v54;
                do
                {
                  v69 = *v56++;
                  v68 = v69;
                  v70 = *v55++;
                  *(_WORD *)v57 = ((v68 & 1) - 1) & ((v68 | (v70 << 8)) >> 1) | ((__int16)((_WORD)v68 << 15) >> 15) & -(__int16)((v68 | (v70 << 8)) >> 1);
                  v57 += 2;
                  v71 = __CFADD__(v67++, 1);
                }
                while (!v71);
              }
              v72 = *v30++;
              switch(v72)
              {
                case 0:
                  v73 = v30;
                  memcpy(v308, (char *)v14 + 12 * v9, v32);
                  v52.i64[0] = -1;
                  v52.i64[1] = -1;
                  v51.i64[0] = 0x1000100010001;
                  v51.i64[1] = 0x1000100010001;
                  v50 = (int8x16_t)xmmword_18494CBA0;
                  v49 = (int8x16_t)xmmword_18494CB90;
                  v48 = (int8x16_t)xmmword_18494CB80;
                  v47 = (int8x16_t)xmmword_18494CB70;
                  v46 = (int8x16_t)xmmword_18494CB60;
                  v45 = (int8x16_t)xmmword_18494CB50;
                  v44 = (int8x16_t)xmmword_18494CB40;
                  v43 = (int8x16_t)xmmword_18494CB30;
                  v42 = (int8x16_t)xmmword_18494CB20;
                  v41 = (int8x16_t)xmmword_18494CB10;
                  v40 = (int8x16_t)xmmword_18494CB00;
                  v38 = v284;
                  v33 = 12 * v9;
                  v32 = 6 * v9;
                  v30 = v73;
                  v58 = v34;
                  v29 = v289;
                  v28 = a3;
                  break;
                case 1:
                  *v308 = v14->i16[0] + *v35;
                  v308[1] = v14->i16[1] + v35[1];
                  v308[2] = v14->i16[2] + v35[2];
                  if (v31 >= 9)
                  {
                    v78 = 0;
                    v79 = v279;
                    v80 = 9;
                    v81 = 3;
                    do
                    {
                      v82 = v80;
                      v83 = (char *)v79 + v278;
                      v84 = *(__int16 *)((char *)v79 + v278 - 14);
                      v85 = v79[2051];
                      v86 = v79[2048];
                      v87 = v85 - v86;
                      if (v85 - v86 < 0)
                        v87 = v86 - v85;
                      v88 = v84 - v86;
                      if (v88 < 0)
                        v88 = -v88;
                      v89 = (char *)v79 + v38;
                      v90 = *(__int16 *)((char *)v79 + v38 - 8);
                      if (v87 <= v88)
                      {
                        v91 = (int16x8_t *)(v308 - 3);
                      }
                      else
                      {
                        LOWORD(v84) = v79[2051];
                        v91 = v14;
                      }
                      v92 = v84 + v90;
                      *((_WORD *)v83 - 4) = v84 + v90;
                      v93 = &v91->i8[2 * v78];
                      v94 = *((_WORD *)v93 + 4) + *((_WORD *)v89 - 3);
                      *((_WORD *)v83 - 3) = v94;
                      v95 = *((_WORD *)v93 + 5) + *((_WORD *)v89 - 2);
                      *((_WORD *)v83 - 2) = v95;
                      v96 = v79[2054];
                      v97 = v96 - v85;
                      if (v96 - v85 < 0)
                        v97 = v85 - v96;
                      v98 = v92 - v85;
                      if (v98 >= 0)
                        v99 = v98;
                      else
                        v99 = -v98;
                      v100 = *((_WORD *)v89 - 1);
                      if (v97 <= v99)
                      {
                        *((_WORD *)v83 - 1) = v100 + v92;
                        *(__int16 *)((char *)v79 + v278) = *(__int16 *)((char *)v79 + v38) + v94;
                        v101 = v81 + 5;
                      }
                      else
                      {
                        *((_WORD *)v83 - 1) = v100 + v96;
                        *(__int16 *)((char *)v79 + v278) = v79[2055] + *(__int16 *)((char *)v79 + v38);
                        v101 = v78 + 8;
                        v95 = v79[2056];
                      }
                      v79 += 6;
                      v308[v101] = v35[v101] + v95;
                      v80 = v82 + 6;
                      v102 = v78 + 6;
                      v103 = v78 + 15;
                      v78 += 6;
                      v81 = v82;
                    }
                    while (v103 <= v31);
                    v74 = v102 + 3;
                  }
                  else
                  {
                    v74 = 3;
                  }
                  if (v74 < v31)
                  {
                    v104 = 2 * v74;
                    do
                    {
                      v105 = &v299[v104];
                      v106 = *(__int16 *)&v299[v104 + 4090];
                      v107 = v14->i16[(unint64_t)v104 / 2];
                      v108 = v14->i16[(unint64_t)v104 / 2 - 3];
                      v109 = v107 - v108;
                      if (v107 - v108 < 0)
                        v109 = v108 - v107;
                      v110 = v106 - v108;
                      if (v110 < 0)
                        v110 = -v110;
                      v111 = &v300[v104];
                      v112 = v109 > v110;
                      if (v109 > v110)
                        LOWORD(v106) = v14->i16[(unint64_t)v104 / 2];
                      v113 = (int16x8_t *)(v308 - 3);
                      if (v112)
                        v113 = v14;
                      *((_WORD *)v105 + 2048) = v106 + *(_WORD *)&v300[v104 + 4096];
                      v114 = &v113->i8[v104];
                      *((_WORD *)v105 + 2049) = *((_WORD *)v114 + 1) + *((_WORD *)v111 + 2049);
                      *((_WORD *)v105 + 2050) = *((_WORD *)v114 + 2) + *((_WORD *)v111 + 2050);
                      v74 += 3;
                      v104 += 6;
                    }
                    while (v74 < v31);
                  }
                  break;
                case 2:
                  *(_QWORD *)v308 = *(_QWORD *)v35;
                  if (v31 >= 0xB)
                  {
                    v115 = &v14->i16[3 * v9];
                    v116 = v300 + 4102;
                    for (j = 11; j <= v31; j += 3)
                    {
                      v118 = *(int16x8_t *)v116;
                      v116 = (_OWORD *)((char *)v116 + 6);
                      *(int16x8_t *)(v115 + 3) = vaddq_s16(*(int16x8_t *)v115, v118);
                      v115 += 3;
                    }
                    v75 = j - 8;
                  }
                  else
                  {
                    v75 = 3;
                  }
                  if (v75 < v31)
                  {
                    v119 = v283 + v75;
                    v120 = &a5[2 * v75 + v281];
                    v121 = &v299[2 * v75 + 4090];
                    do
                    {
                      v122 = *(_WORD *)v120;
                      v120 += 2;
                      *((_WORD *)v121 + 3) = *(_WORD *)v121 + v122;
                      v121 += 2;
                      v71 = __CFADD__(v119++, 1);
                    }
                    while (!v71);
                  }
                  break;
                case 3:
                  if (v31 >= 0x10)
                  {
                    v123 = 0;
                    v124 = v14;
                    do
                    {
                      v125 = vaddq_s16(v124[1], *(int16x8_t *)((char *)&v124[1] + v33));
                      v126 = (int16x8_t *)((char *)v124 + v32);
                      *v126 = vaddq_s16(*v124, *(int16x8_t *)((char *)v124 + v33));
                      v126[1] = v125;
                      v76 = v123 + 16;
                      v127 = v123 + 32;
                      v124 += 2;
                      v123 += 16;
                    }
                    while (v127 <= v31);
                  }
                  else
                  {
                    v76 = 0;
                  }
                  if ((v76 | 8uLL) <= v31)
                  {
                    *(int16x8_t *)&v308[v76] = vaddq_s16(*(int16x8_t *)((char *)v14 + 2 * v76), *(int16x8_t *)&v35[v76]);
                    v76 |= 8uLL;
                  }
                  if (v76 != v31)
                    *(int16x8_t *)&v308[v31 - 8] = vaddq_s16(*(int16x8_t *)((char *)v14 + 2 * v31 - 16), *(int16x8_t *)&v35[v31 - 8]);
                  break;
                case 4:
                  *v308 = v14->i16[0] + *v35;
                  v308[1] = v14->i16[1] + v35[1];
                  v308[2] = v14->i16[2] + v35[2];
                  if (v31 >= 0xB)
                  {
                    v128 = v14;
                    for (k = 11; k <= v31; k += 3)
                    {
                      v130 = (size_t)v128->u64 + v32;
                      v131 = *(int8x16_t *)((char *)v128 + v32);
                      v132 = (int16x8_t *)((char *)v128 + v277);
                      v133 = *(int16x8_t *)((char *)v128 + 6);
                      v128 = (int16x8_t *)((char *)v128 + 6);
                      v134 = (uint16x8_t)vsubq_s16(v133, (int16x8_t)vmvnq_s8(v131));
                      *(int16x8_t *)(v130 + 6) = vsraq_n_s16(v132[-256], (int16x8_t)vsraq_n_u16(v134, v134, 0xFuLL), 1uLL);
                    }
                    v77 = k - 8;
                  }
                  else
                  {
                    v77 = 3;
                  }
                  if (v77 < v31)
                  {
                    v135 = v283 + v77;
                    v136 = &v279[v77];
                    do
                    {
                      v137 = *(__int16 *)((char *)v136 + v298) + v136[2048];
                      if (v137 + 1 >= 0)
                        v138 = v137 + 1;
                      else
                        v138 = v137 + 2;
                      *(__int16 *)((char *)v136 + v298 + 6) = *(__int16 *)((char *)v136 + v296) + (v138 >> 1);
                      ++v136;
                      v71 = __CFADD__(v135++, 1);
                    }
                    while (!v71);
                  }
                  break;
                default:
                  break;
              }
              if ((a4 & 1) != 0)
              {
                v140 = v285;
                v139 = v286;
                v141 = v302;
                v142 = v305;
                v143 = 8;
                v144 = v58;
                do
                {
                  v145 = *(int8x16_t *)&a5[v139];
                  v146 = *(int8x16_t *)&a5[v139 + 16];
                  v147 = *(int8x16_t *)&a5[v139 + 32];
                  v148 = (int16x8_t)vqtbl1q_s8(v145, v41);
                  v149 = vaddq_s16((int16x8_t)vqtbl1q_s8(v146, v43), (int16x8_t)vqtbl1q_s8(v145, v40));
                  v150 = vaddq_s16((int16x8_t)vqtbl1q_s8(v146, v45), (int16x8_t)vqtbl1q_s8(v145, v42));
                  v151 = vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v146, v44), v148), (int16x8_t)vqtbl1q_s8(v147, v47));
                  v152 = vaddq_s16(v150, (int16x8_t)vqtbl1q_s8(v147, v48));
                  v153 = vsubq_s16(vaddq_s16(v149, (int16x8_t)vqtbl1q_s8(v147, v46)), vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v152, (uint16x8_t)v152, 0xFuLL), 1uLL));
                  v154 = vaddq_s16(v153, v152);
                  v155 = vsubq_s16(v153, vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v151, (uint16x8_t)v151, 0xFuLL), 1uLL));
                  v156 = vaddq_s16(v155, v151);
                  v157 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&a5[v142]);
                  v148.i64[0] = 0x80008000800080;
                  v148.i64[1] = 0x80008000800080;
                  v158 = vmlaq_s16(v148, v155, v157);
                  v155.i64[0] = 0x80008000800080;
                  v155.i64[1] = 0x80008000800080;
                  v159 = vmlaq_s16(v155, v154, v157);
                  v154.i64[0] = 0x80008000800080;
                  v154.i64[1] = 0x80008000800080;
                  v160 = vmlaq_s16(v154, v156, v157);
                  *(int8x8_t *)v311.val[1].i8 = vaddhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v160, 8uLL), v160);
                  v311.val[0] = vaddhn_high_s16(vaddhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v158, 8uLL), v158), (int16x8_t)vshrq_n_u16((uint16x8_t)v159, 8uLL), v159);
                  v311.val[1].i64[1] = *(_QWORD *)&a5[v142];
                  v22 = vqtbl2q_s8(v311, v49);
                  v23 = (int16x8_t)vqtbl2q_s8(v311, v50);
                  *v144 = v22;
                  v144[1] = (int8x16_t)v23;
                  v144 += 2;
                  v143 += 8;
                  v142 += 8;
                  v141 += 8;
                  v139 += 48;
                  v140 += 48;
                }
                while (v143 <= v9);
                if ((v9 & 7) == 0)
                  goto LABEL_115;
                v161 = v144 - 2;
                v162 = (int8x16_t *)&a5[v140];
                v163 = v162[1];
                v164 = v162[2];
                v165 = vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v163, v44), (int16x8_t)vqtbl1q_s8(*v162, v41)), (int16x8_t)vqtbl1q_s8(v164, v47));
                v166 = vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v163, v45), (int16x8_t)vqtbl1q_s8(*v162, v42)), (int16x8_t)vqtbl1q_s8(v164, v48));
                v167 = vsubq_s16(vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v163, v43), (int16x8_t)vqtbl1q_s8(*v162, v40)), (int16x8_t)vqtbl1q_s8(v164, v46)), vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v166, (uint16x8_t)v166, 0xFuLL), 1uLL));
                v168 = vaddq_s16(v167, v166);
                v169 = vsubq_s16(v167, vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v165, (uint16x8_t)v165, 0xFuLL), 1uLL));
                v170 = vaddq_s16(v169, v165);
                v171 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&a5[v141]);
                v172.i64[0] = 0x80008000800080;
                v172.i64[1] = 0x80008000800080;
                v173 = vmlaq_s16(v172, v169, v171);
                v169.i64[0] = 0x80008000800080;
                v169.i64[1] = 0x80008000800080;
                v174 = vmlaq_s16(v169, v168, v171);
                v168.i64[0] = 0x80008000800080;
                v168.i64[1] = 0x80008000800080;
                v23 = vmlaq_s16(v168, v170, v171);
                *(int8x8_t *)v312.val[1].i8 = vaddhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v23, 8uLL), v23);
                v312.val[0] = vaddhn_high_s16(vaddhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v173, 8uLL), v173), (int16x8_t)vshrq_n_u16((uint16x8_t)v174, 8uLL), v174);
                v312.val[1].i64[1] = *(_QWORD *)&a5[v141];
                *(int8x16_t *)((char *)v144 + v282) = vqtbl2q_s8(v312, v49);
                v175 = v282;
                v22 = vqtbl2q_s8(v312, v50);
              }
              else
              {
                v177 = v285;
                v176 = v286;
                v178 = v302;
                v179 = v305;
                v180 = 8;
                v181 = v58;
                do
                {
                  v182 = *(int8x16_t *)&a5[v176];
                  v183 = *(int8x16_t *)&a5[v176 + 16];
                  v184 = *(int8x16_t *)&a5[v176 + 32];
                  v310.val[1] = vqtbl1q_s8(v182, v41);
                  v185 = vaddq_s16((int16x8_t)vqtbl1q_s8(v183, v43), (int16x8_t)vqtbl1q_s8(v182, v40));
                  v186 = vaddq_s16((int16x8_t)vqtbl1q_s8(v183, v45), (int16x8_t)vqtbl1q_s8(v182, v42));
                  v187 = vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v183, v44), (int16x8_t)v310.val[1]), (int16x8_t)vqtbl1q_s8(v184, v47));
                  v188 = vaddq_s16(v186, (int16x8_t)vqtbl1q_s8(v184, v48));
                  v189 = vsubq_s16(vaddq_s16(v185, (int16x8_t)vqtbl1q_s8(v184, v46)), vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v188, (uint16x8_t)v188, 0xFuLL), 1uLL));
                  v190 = (int8x16_t)vaddq_s16(v189, v188);
                  v191 = vsubq_s16(v189, vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v187, (uint16x8_t)v187, 0xFuLL), 1uLL));
                  *(int8x8_t *)v310.val[1].i8 = vmovn_s16(vaddq_s16(v191, v187));
                  v310.val[0] = vuzp1q_s8((int8x16_t)v191, v190);
                  v310.val[1].i64[1] = *(_QWORD *)&a5[v179];
                  v22 = vqtbl2q_s8(v310, v49);
                  v23 = (int16x8_t)vqtbl2q_s8(v310, v50);
                  *v181 = v22;
                  v181[1] = (int8x16_t)v23;
                  v181 += 2;
                  v180 += 8;
                  v179 += 8;
                  v178 += 8;
                  v176 += 48;
                  v177 += 48;
                }
                while (v180 <= v9);
                if ((v9 & 7) == 0)
                  goto LABEL_115;
                v161 = v181 - 2;
                v192 = (int8x16_t *)&a5[v177];
                v193 = v192[1];
                v194 = v192[2];
                v309.val[1] = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v193, v44), (int16x8_t)vqtbl1q_s8(*v192, v41)), (int16x8_t)vqtbl1q_s8(v194, v47));
                v195 = vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v193, v45), (int16x8_t)vqtbl1q_s8(*v192, v42)), (int16x8_t)vqtbl1q_s8(v194, v48));
                v196 = vsubq_s16(vaddq_s16(vaddq_s16((int16x8_t)vqtbl1q_s8(v193, v43), (int16x8_t)vqtbl1q_s8(*v192, v40)), (int16x8_t)vqtbl1q_s8(v194, v46)), vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v195, (uint16x8_t)v195, 0xFuLL), 1uLL));
                v23 = vaddq_s16(v196, v195);
                v197 = vsubq_s16(v196, vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v309.val[1], (uint16x8_t)v309.val[1], 0xFuLL), 1uLL));
                *(int8x8_t *)v309.val[1].i8 = vmovn_s16(vaddq_s16(v197, (int16x8_t)v309.val[1]));
                v309.val[0] = vuzp1q_s8((int8x16_t)v197, (int8x16_t)v23);
                v309.val[1].i64[1] = *(_QWORD *)&a5[v178];
                *(int8x16_t *)((char *)v181 + v282) = vqtbl2q_s8(v309, v49);
                v175 = v282;
                v22 = vqtbl2q_s8(v309, v50);
              }
              *(int8x16_t *)((char *)&v161[3] + v175) = v22;
LABEL_115:
              result = 0;
              v18 += v31;
              v19 += v31;
              v34 = (int8x16_t *)((char *)v58 + v28[3]);
              ++v36;
              v294 += v31;
              v292 += v31;
              v305 += v9;
              v302 += v9;
              if (v36 == v29)
                return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t TCharStreamCopyCallback::OpenUText(TCharStreamCopyCallback *this, UText *a2)
{
  return 0;
}

CFStringRef TCharStreamCopyCallback::CopyChars@<X0>(TCharStreamCopyCallback *this@<X0>, CFRange a2@<0:X1, 8:X2>, CFStringRef *a3@<X8>)
{
  CFIndex length;
  CFIndex location;
  unint64_t *v7;
  const __CFAllocator *v9;
  const __CFString *v10;
  CFStringRef result;
  CFRange v12;

  length = a2.length;
  location = a2.location;
  v7 = (unint64_t *)((char *)this + 32);
  if (!atomic_load((unint64_t *)this + 4))
    TCharStreamCopyCallback::FetchString(this);
  v12.location = location - *((_QWORD *)this + 1);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = (const __CFString *)atomic_load(v7);
  v12.length = length;
  result = CFStringCreateWithSubstring(v9, v10, v12);
  *a3 = result;
  return result;
}

CFStringRef TCharStreamCopyCallback::CopyChars@<X0>(TCharStreamCopyCallback *this@<X0>, CFStringRef *a2@<X8>)
{
  const __CFString *v3;
  CFStringRef result;

  v3 = (const __CFString *)atomic_load((unint64_t *)this + 4);
  result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  *a2 = result;
  return result;
}

void TCharStreamCopyCallback::CopyChars(TCharStreamCopyCallback *this, CFRange a2, UniChar *buffer)
{
  CFIndex length;
  CFIndex location;
  unint64_t *v7;
  const __CFString *v9;
  CFRange v10;

  length = a2.length;
  location = a2.location;
  v7 = (unint64_t *)((char *)this + 32);
  if (!atomic_load((unint64_t *)this + 4))
    TCharStreamCopyCallback::FetchString(this);
  v10.location = location - *((_QWORD *)this + 1);
  v9 = (const __CFString *)atomic_load(v7);
  v10.length = length;
  CFStringGetCharacters(v9, v10, buffer);
}

uint64_t TCharStreamCopyCallback::GetClusterRangeAtIndex(TCharStreamCopyCallback *this, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  uint64_t v8;
  const __CFString *v9;

  v6 = (unint64_t *)((char *)this + 32);
  if (!atomic_load((unint64_t *)this + 4))
    TCharStreamCopyCallback::FetchString(this);
  v8 = a2 - *((_QWORD *)this + 1);
  v9 = (const __CFString *)atomic_load(v6);
  return TCharStream::GetRangeOfCharacterClusterAtIndex(v9, v8, a3);
}

uint64_t TCharStreamCopyCallback::GetSegment(TCharStreamCopyCallback *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!atomic_load((unint64_t *)this + 4))
    TCharStreamCopyCallback::FetchString(this);
  v7 = a2 - *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    *a3 = *((_QWORD *)this + 2) - v7;
    return v8 + 2 * v7;
  }
  else
  {
    result = *((_QWORD *)this + 3);
    if (result)
      *a3 = *((_QWORD *)this + 2) - v7;
  }
  return result;
}

uint64_t TCharStreamCopyCallback::LazyCopy(TCharStreamCopyCallback *this, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v9;
  uint64_t v10;

  if (!atomic_load((unint64_t *)this + 4))
    TCharStreamCopyCallback::FetchString(this);
  v9 = a2 - *((_QWORD *)this + 1);
  v10 = *((_QWORD *)this + 7);
  if (v10)
    return v10 + 2 * v9;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize((uint64_t)a4, a3);
  (*(void (**)(TCharStreamCopyCallback *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)this + 24))(this, v9, a3, *a4);
  return *a4;
}

void TCharStreamCopyCallback::FetchString(TCharStreamCopyCallback *this)
{
  id v2;

  v2 = (id)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD))this + 6))(*((_QWORD *)this + 1), *((_QWORD *)this + 2), *((_QWORD *)this + 8));
  TCharStreamCFString::SetString(this, (unint64_t *)&v2);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;

}

void TCharStreamCopyCallback::~TCharStreamCopyCallback(id *this)
{
  id *v1;

  *this = &off_1E15DDC70;
  v1 = this + 4;

}

{
  id *v1;

  *this = &off_1E15DDC70;
  v1 = this + 4;

  JUMPOUT(0x186DC03ACLL);
}

void TCharStreamUniChar::TCharStreamUniChar(TCharStreamUniChar *this, const unsigned __int16 *(*a2)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a3)(const unsigned __int16 *, void *), void *a4)
{
  char **v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  __int128 v27;
  uint64_t v28;
  const unsigned __int16 *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;

  *((_QWORD *)this + 6) = 0;
  v6 = (char **)((char *)this + 48);
  *(_QWORD *)this = &off_1E15DDB50;
  *((_QWORD *)this + 1) = 0;
  v32 = (char *)this + 72;
  *((_QWORD *)this + 18) = (char *)this + 72;
  v7 = (unint64_t *)((char *)this + 144);
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v8 = ((uint64_t (*)(_QWORD, unint64_t *, unint64_t *))a2)(0, &v34, &v33);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = v8;
    while (1)
    {
      v12 = (unint64_t *)*((_QWORD *)this + 7);
      v13 = *((_QWORD *)this + 8);
      if ((unint64_t)v12 >= v13)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - *v6) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)*v6) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        v19 = v18 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v17;
        v20 = (char *)*v7;
        v21 = *v7 + 24 * v19;
        if (v21 <= (unint64_t)v7)
        {
          *v7 = v21;
        }
        else
        {
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = (char *)operator new(24 * v19);
        }
        v22 = (unint64_t *)&v20[24 * v16];
        v23 = v33;
        *v22 = v34;
        v22[1] = v9;
        v22[2] = v23;
        v25 = (char *)*((_QWORD *)this + 6);
        v24 = (char *)*((_QWORD *)this + 7);
        v26 = v22;
        if (v24 != v25)
        {
          do
          {
            v27 = *(_OWORD *)(v24 - 24);
            *(v26 - 1) = *((_QWORD *)v24 - 1);
            *(_OWORD *)(v26 - 3) = v27;
            v26 -= 3;
            v24 -= 24;
          }
          while (v24 != v25);
          v24 = *v6;
        }
        v15 = v22 + 3;
        *((_QWORD *)this + 6) = v26;
        *((_QWORD *)this + 7) = v22 + 3;
        v28 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = &v20[24 * v19];
        if (v24)
        {
          if (v32 <= v24 && v7 > (unint64_t *)v24)
          {
            if (v28 == *v7)
              *v7 = (unint64_t)v24;
          }
          else
          {
            operator delete(v24);
          }
        }
      }
      else
      {
        v14 = v33;
        *v12 = v34;
        v12[1] = v9;
        v12[2] = v14;
        v15 = v12 + 3;
      }
      *((_QWORD *)this + 7) = v15;
      v10 += v34;
      v30 = a2(v10, (uint64_t *)&v34, (const __CFDictionary **)&v33, *((void **)this + 4));
      if (!v30)
        break;
      v9 = (uint64_t)v30;
      if ((const unsigned __int16 *)(v11 + 2 * v10) == v30)
        v31 = v11;
      else
        v31 = 0;
      if (v11)
        v11 = v31;
      else
        v11 = 0;
    }
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v11;
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

void TCharStreamUniChar::~TCharStreamUniChar(TCharStreamUniChar *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_1E15DDB50;
  if (*((_QWORD *)this + 5))
  {
    v2 = *((_QWORD *)this + 7) - *((_QWORD *)this + 6);
    if (v2)
    {
      v3 = v2 / 24;
      if (v3 <= 1)
        v4 = 1;
      else
        v4 = v3;
      v5 = 8;
      do
      {
        (*((void (**)(_QWORD, _QWORD))this + 5))(*(_QWORD *)(*((_QWORD *)this + 6) + v5), *((_QWORD *)this + 4));
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    v7 = (char *)this + 144;
    if ((char *)this + 72 <= v6 && v7 > v6)
    {
      if (*((_QWORD *)this + 8) == *((_QWORD *)this + 18))
        *(_QWORD *)v7 = v6;
    }
    else
    {
      operator delete(v6);
    }
  }
}

{
  TCharStreamUniChar::~TCharStreamUniChar(this);
  JUMPOUT(0x186DC03ACLL);
}

UText *TCharStreamUniChar::OpenUText(TCharStreamUniChar *this, UText *ut)
{
  UText *result;
  UErrorCode status;

  status = U_ZERO_ERROR;
  result = utext_setup(ut, 0, &status);
  if (status > U_ZERO_ERROR)
    return 0;
  result->providerProperties = 0;
  result->context = this;
  result->pFuncs = (const UTextFuncs *)&TCharStreamUniChar::GetUTextFuncs(void)::funcs;
  return result;
}

UText *TCharStreamUniChar::UTextClone(UText *this, UText *a2, const UText *a3, UErrorCode *status, UErrorCode *a5)
{
  UText *result;
  int64_t chunkNativeStart;

  if (*(int *)status > 0)
    return 0;
  if ((_DWORD)a3)
  {
    result = 0;
    *status = U_UNSUPPORTED_ERROR;
  }
  else
  {
    result = utext_setup(this, 0, status);
    if (*(int *)status <= 0)
    {
      result->chunkNativeStart = a2->chunkNativeStart;
      chunkNativeStart = a2->chunkNativeStart;
      result->chunkNativeLimit = chunkNativeStart;
      result->nativeIndexingLimit = chunkNativeStart;
      result->chunkOffset = 0;
      result->providerProperties = a2->providerProperties;
      result->context = a2->context;
      result->pFuncs = (const UTextFuncs *)&TCharStreamUniChar::GetUTextFuncs(void)::funcs;
    }
  }
  return result;
}

uint64_t TCharStreamUniChar::UTextLength(TCharStreamUniChar *this, UText *a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 9) + 16);
}

uint64_t TCharStreamUniChar::UTextAccess(TCharStreamUniChar *this, UText *a2, int a3)
{
  TCharStreamUniChar *v5;
  uint64_t v6;
  UText *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  v5 = (TCharStreamUniChar *)*((_QWORD *)this + 9);
  v6 = *((_QWORD *)v5 + 2);
  if (v6 >= (uint64_t)a2)
    v7 = a2;
  else
    v7 = (UText *)*((_QWORD *)v5 + 2);
  if ((uint64_t)a2 >= 0)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 2);
  if (a3)
  {
    if (v8 >= v9 || (v10 = *((_QWORD *)this + 4), v8 < v10))
    {
      if (v9 == v6 && v8 >= v6)
      {
        result = 0;
        *((_DWORD *)this + 10) = *((_DWORD *)this + 11);
        return result;
      }
      goto LABEL_20;
    }
    v14 = v8 - v10;
LABEL_26:
    *((_DWORD *)this + 10) = v14;
    return 1;
  }
  if (v8 <= v9)
  {
    v13 = *((_QWORD *)this + 4);
    if (v8 > v13)
    {
      v14 = v8 - v13;
      goto LABEL_26;
    }
  }
  if (!v8 && !*((_QWORD *)this + 4))
  {
    result = 0;
    *((_DWORD *)this + 10) = 0;
    return result;
  }
LABEL_20:
  result = *((_QWORD *)this + 10);
  if (result
    || (result = (uint64_t)malloc_type_malloc(0x40uLL, 0x1000040BDFB0063uLL), (*((_QWORD *)this + 10) = result) != 0))
  {
    *((_QWORD *)this + 6) = result;
    if (a3)
    {
      *((_QWORD *)this + 4) = v8;
      *((_QWORD *)this + 2) = v8 + 32;
      if (v8 + 32 <= v6)
      {
        if (v8 + 32 < v6)
        {
          v6 = TCharStreamUniChar::PinUTextIndex(v5, v8 + 32, v6, a3);
          *((_QWORD *)this + 2) = v6;
          v8 = *((_QWORD *)this + 4);
        }
        else
        {
          LODWORD(v6) = v8 + 32;
        }
      }
      else
      {
        *((_QWORD *)this + 2) = v6;
      }
      v16 = 0;
      v17 = v6 - v8;
      v18 = v6 - v8;
    }
    else
    {
      if (v8 >= v6)
        v15 = v6;
      else
        v15 = v8;
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 4) = v15 - 32;
      if (v15 - 32 < 0)
      {
        v8 = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else if (v15 == 32)
      {
        v8 = 0;
        LODWORD(v15) = 32;
      }
      else
      {
        v8 = TCharStreamUniChar::PinUTextIndex(v5, v15 - 32, v6, 0);
        *((_QWORD *)this + 4) = v8;
        v15 = *((_QWORD *)this + 2);
      }
      v16 = v15 - v8;
      v17 = v16;
      v18 = v16;
    }
    *((_DWORD *)this + 10) = v16;
    *((_DWORD *)this + 11) = v17;
    (*(void (**)(TCharStreamUniChar *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(v5, v8, v18, *((_QWORD *)this + 6));
    *((_DWORD *)this + 7) = *((_DWORD *)this + 11);
    return 1;
  }
  return result;
}

uint64_t TCharStreamUniChar::UTextExtract(TCharStreamUniChar *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int *a6, UErrorCode *a7)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (*a6 > 0)
    return 0;
  v9 = a5;
  if ((a5 & 0x80000000) != 0 || (v12 = (uint64_t *)*((_QWORD *)this + 9), v13 = v12[2], !a4) && (_DWORD)a5)
  {
    v7 = 0;
    v14 = 1;
LABEL_7:
    *a6 = v14;
    return v7;
  }
  if (a2 < 0 || a3 < a2 || a3 - a2 >= 0x80000000)
  {
    v7 = 0;
    v14 = 8;
    goto LABEL_7;
  }
  v16 = TCharStreamUniChar::PinUTextIndex(*((TCharStreamUniChar **)this + 9), a2, v12[2], 1);
  v7 = TCharStreamUniChar::PinUTextIndex((TCharStreamUniChar *)v12, a3, v13, 1) - v16;
  if (a4 && v9)
  {
    if ((int)v7 >= (int)v9)
      v17 = v9;
    else
      v17 = v7;
    (*(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*v12 + 24))(v12, v16, v17, a4);
    v18 = v9;
    if (v7 < v9)
      *(_WORD *)(a4 + 2 * v7) = 0;
  }
  else
  {
    v18 = v9;
  }
  if (v7 >= v18)
  {
    if (v7 == v18)
      v14 = -124;
    else
      v14 = 15;
    goto LABEL_7;
  }
  return v7;
}

void TCharStreamUniChar::UTextClose(void **this, UText *a2)
{
  free(this[10]);
  this[10] = 0;
}

uint64_t TCharStreamUniChar::PinUTextIndex(TCharStreamUniChar *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v8;

  if (a2 < 0)
    return 0;
  v4 = a2;
  if (a2 <= a3)
  {
    if (a2)
    {
      if (a2 < a3)
      {
        v8 = 0xAAAAAAAAAAAAAAAALL;
        if ((*(_WORD *)(*(uint64_t (**)(TCharStreamUniChar *, uint64_t, unint64_t *))(*(_QWORD *)this + 64))(this, a2, &v8) & 0xFC00) == 0xDC00&& (*(_WORD *)(*(uint64_t (**)(TCharStreamUniChar *, uint64_t, unint64_t *))(*(_QWORD *)this + 64))(this, v4 - 1, &v8) & 0xFC00) == 0xD800)
        {
          if (a4)
            --v4;
          else
            ++v4;
        }
      }
    }
    return v4;
  }
  return a3;
}

uint64_t TCharStreamUniChar::GetSegment(TCharStreamUniChar *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  v5 = 0;
  v6 = v4 - v3;
  if (v4 == v3)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = v6 / 24;
    v9 = (uint64_t *)*((_QWORD *)this + 6);
    while (1)
    {
      v10 = *v9;
      v9 += 3;
      v7 += v10;
      if (v7 > a2)
        break;
      if (v8 == ++v5)
      {
        v5 = v8;
        break;
      }
    }
  }
  *a3 = v7 - a2;
  return *(_QWORD *)(v3 + 24 * v5 + 8) + 2 * (a2 - v7 + *(_QWORD *)(v3 + 24 * v5));
}

uint64_t TCharStreamUniChar::CopyChars(TCharStreamUniChar *this)
{
  return (*(uint64_t (**)(TCharStreamUniChar *, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, 0, *((_QWORD *)this + 2));
}

CFStringRef TCharStreamUniChar::CopyChars@<X0>(TCharStreamUniChar *this@<X0>, CFRange a2@<0:X1, 8:X2>, CFStringRef *a3@<X8>)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  const __CFAllocator *v7;
  const __CFAllocator *v8;
  const __CFAllocator *v10;
  void *v11;
  CFStringRef result;

  length = a2.length;
  location = a2.location;
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    a2.location = v6 + 2 * a2.location;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  }
  else
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
    v11 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], 2 * a2.length, 0);
    (*(void (**)(TCharStreamUniChar *, CFIndex, CFIndex, void *))(*(_QWORD *)this + 24))(this, location, length, v11);
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    a2.location = (CFIndex)v11;
    a2.length = length;
    v8 = v10;
  }
  result = CFStringCreateWithCharactersNoCopy(v7, (const UniChar *)a2.location, a2.length, v8);
  *a3 = result;
  return result;
}

_QWORD *TCharStreamUniChar::CopyChars(_QWORD *this, CFRange a2, unsigned __int16 *__dst)
{
  CFIndex length;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  length = a2.length;
  v5 = this[3];
  if (v5)
  {
    if (a2.length)
      return memmove(__dst, (const void *)(v5 + 2 * a2.location), 2 * a2.length);
  }
  else
  {
    v6 = this;
    v7 = this[6];
    v8 = this[7];
    v9 = 0;
    v10 = v8 - v7;
    if (v8 == v7)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v12 = v10 / 24;
      v13 = (uint64_t *)this[6];
      while (1)
      {
        v14 = *v13;
        v13 += 3;
        v11 += v14;
        if (v11 > a2.location)
          break;
        if (v12 == ++v9)
        {
          v9 = v12;
          break;
        }
      }
    }
    if (v11 - a2.location >= a2.length)
      v15 = a2.length;
    else
      v15 = v11 - a2.location;
    if (v15)
      this = memmove(__dst, (const void *)(*(_QWORD *)(v7 + 24 * v9 + 8) + 2 * (a2.location - v11 + *(_QWORD *)(v7 + 24 * v9))), 2 * v15);
    v16 = length - v15;
    if (v16 >= 1)
    {
      v17 = &__dst[v15];
      v18 = 24 * v9;
      do
      {
        v19 = v6[6] + v18;
        if (*(_QWORD *)(v19 + 24) >= v16)
          v20 = v16;
        else
          v20 = *(_QWORD *)(v19 + 24);
        if (v20)
          this = memmove(v17, *(const void **)(v19 + 32), 2 * v20);
        v17 += v20;
        v18 += 24;
        v21 = v16 <= v20;
        v16 -= v20;
      }
      while (!v21);
    }
  }
  return this;
}

uint64_t TCharStreamUniChar::GetClusterRangeAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  uint64_t RangeOfCharacterClusterAtIndex;
  id v8;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)a1 + 8))(&v8);
  v5 = (const __CFString *)atomic_load((unint64_t *)&v8);
  RangeOfCharacterClusterAtIndex = TCharStream::GetRangeOfCharacterClusterAtIndex(v5, a2, a3);

  return RangeOfCharacterClusterAtIndex;
}

void TDecorationRun::CalculateGlyphIntersections(uint64_t a1, CGFloat *a2, __n128 *a3, uint64_t a4, CGFloat a5, double a6)
{
  unint64_t v12;
  TFont *v13;
  const unsigned __int16 *v14;
  __int128 v15;
  _QWORD *v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  CGRect *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int FullChar;
  int v38;
  double *v39;
  CGFloat v40;
  CGFloat v41;
  __int128 v42;
  unsigned int v43;
  __int128 v45;
  const CGPath *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  CGFloat d;
  uint64_t v62;
  _BOOL8 v63;
  const TLineDrawContext *v64;
  const TRun *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  TFont *v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  id v73;
  CGAffineTransform v74;
  _BYTE v75[192];
  unint64_t v76;
  CGAffineTransform t2;
  uint64_t v78;
  unint64_t v79;
  CGAffineTransform t1;
  _QWORD v81[13];
  _QWORD *v82;
  CGAffineTransform v83;
  CGRect *v84;
  _OWORD *v85;
  uint64_t v86;
  _BYTE v87[960];
  _BYTE *v88;
  uint64_t v89;
  CFRange v90;
  CGPoint v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  v89 = *MEMORY[0x1E0C80C00];
  if (!a3[13].n128_u64[0])
    return;
  v12 = atomic_load(&a3[3].n128_u64[1]);
  v13 = *(TFont **)(v12 + 40);
  v14 = (const unsigned __int16 *)(*(_QWORD *)(a3[13].n128_u64[1] + 16) + 2 * a3[12].n128_u64[1]);
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v76 = 0xAAAAAAAAAAAAAA00;
  *(_OWORD *)&v75[160] = v15;
  *(_OWORD *)&v75[176] = v15;
  *(_OWORD *)&v75[128] = v15;
  *(_OWORD *)&v75[144] = v15;
  *(_OWORD *)&v75[96] = v15;
  *(_OWORD *)&v75[112] = v15;
  *(_OWORD *)&v75[80] = v15;
  *(_OWORD *)&v75[48] = v15;
  *(_OWORD *)&v75[64] = v15;
  *(_OWORD *)&v75[16] = v15;
  *(_OWORD *)&v75[32] = v15;
  *(_OWORD *)v75 = v15;
  v75[0] = 0;
  v16 = (_QWORD *)a3[17].n128_u64[0];
  if (v16)
  {
    *(_QWORD *)v75 = *v16;
    memset(&v75[8], 0, 184);
    *(_QWORD *)&v75[168] = *(_QWORD *)(*(_QWORD *)v75 + 16);
    LOBYTE(v76) = 1;
  }
  memset(v87, 170, sizeof(v87));
  v17 = a3[13].n128_u64[0];
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v88 = v87;
  if (v17)
  {
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100]((char **)&v84, v17);
    v18 = v85;
    v19 = &v85[2 * v17];
    v20 = 32 * v17;
    v21 = (_OWORD *)MEMORY[0x1E0C9D648];
    do
    {
      v22 = v21[1];
      *v18 = *v21;
      v18[1] = v22;
      v18 += 2;
      v20 -= 32;
    }
    while (v20);
    v85 = v19;
    v23 = v84;
    v24 = a3[13].n128_i64[0];
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  TFont::GetBoundingBoxesForGlyphs(v13, v14, v23, v24, kCTFontOrientationDefault);
  TRun::GetPositions(a3, 0);
  v26 = a3[13].n128_i64[0];
  if (v26 < 1)
  {
LABEL_76:
    *(_QWORD *)&t1.a = &v84;
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&t1);
    return;
  }
  v27 = v25;
  v28 = 0;
  v29 = *a2;
  v71 = a2[2];
  v72 = a2[1];
  v70 = a2[3];
  v30 = *MEMORY[0x1E0C9D538];
  v31 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v32 = *(double *)(a1 + 24);
  v33 = *(double *)(a1 + 56);
  while (1)
  {
    v34 = a3[13].n128_u64[1];
    v35 = a3[12].n128_u64[1];
    if (*(__int16 *)(*(_QWORD *)(v34 + 16) + 2 * v35 + 2 * v28) == -1
      || (*(_DWORD *)(*(_QWORD *)(v34 + 40) + 4 * v35 + 4 * v28) & 0x20) != 0
      || CGRectIsEmpty(v84[v28]))
    {
      goto LABEL_75;
    }
    v36 = ScriptTagForScriptCode(a3[19].n128_i32[0]);
    if (!v36)
    {
      if (!(_BYTE)v76)
        goto LABEL_20;
      t1.a = *(CGFloat *)(*(_QWORD *)(a3[13].n128_u64[1] + 48) + 8 * a3[12].n128_u64[1] + 8 * v28);
      FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v75, (uint64_t *)&t1, 0);
      v38 = ScriptCodeForLongCharacter(FullChar);
      v36 = ScriptTagForScriptCode(v38);
    }
    if (v36 == 1751215719 || v36 == 1751215721 || v36 == 1801547361)
      goto LABEL_75;
LABEL_20:
    v39 = (double *)(v27 + 16 * v28);
    v40 = *v39;
    v41 = v39[1];
    *(_QWORD *)&v42 = -1;
    *((_QWORD *)&v42 + 1) = -1;
    *(_OWORD *)&v74.c = v42;
    *(_OWORD *)&v74.tx = v42;
    *(_OWORD *)&v74.a = v42;
    CGAffineTransformMakeTranslation(&v74, v40, v41);
    t1.a = v29;
    t1.b = v72;
    t1.c = v71;
    t1.d = v70;
    t1.tx = v30;
    t1.ty = v31;
    t2 = v74;
    CGAffineTransformConcat(&v83, &t1, &t2);
    v74 = v83;
    v43 = v14[v28];
    v92 = v84[v28];
    t1 = v83;
    v93 = CGRectApplyAffineTransform(v92, &t1);
    v94.origin.x = v33;
    v94.origin.y = a5;
    v94.size.width = v32;
    v94.size.height = a6 - a5;
    if (CGRectIntersectsRect(v93, v94))
      break;
LABEL_75:
    if (++v28 == v26)
      goto LABEL_76;
  }
  v73 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CreatePathForGlyph(v13, 0, v43, (unint64_t *)&v73);
  if (!atomic_load((unint64_t *)&v73))
  {
LABEL_74:

    goto LABEL_75;
  }
  *(_QWORD *)&v45 = -1;
  *((_QWORD *)&v45 + 1) = -1;
  *(_OWORD *)&t2.c = v45;
  *(_OWORD *)&t2.tx = v45;
  *(_OWORD *)&t2.a = v45;
  t1 = v74;
  CGAffineTransformInvert(&t2, &t1);
  memset(v81, 170, sizeof(v81));
  memset(&t1, 255, sizeof(t1));
  *(_OWORD *)&t1.a = *MEMORY[0x1E0C9D538];
  *(_OWORD *)&t1.c = *(_OWORD *)&t1.a;
  t1.tx = t2.ty + t2.d * a5 + t2.b * 0.0;
  t1.ty = t2.ty + t2.d * a6 + t2.b * 0.0;
  v81[0] = 0;
  LODWORD(v81[1]) = 0;
  memset(&v81[2], 0, 24);
  v82 = &v81[5];
  if (t1.tx > t1.ty)
  {
    t1.tx = t2.ty + t2.d * a6 + t2.b * 0.0;
    t1.ty = t2.ty + t2.d * a5 + t2.b * 0.0;
  }
  v46 = (const CGPath *)atomic_load((unint64_t *)&v73);
  CGPathApply(v46, &t1, (CGPathApplierFunction)TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)const::$_0::__invoke);
  v47 = (_QWORD *)v81[2];
  if (v81[2] == v81[3])
  {
LABEL_70:
    if (v47)
    {
      v81[3] = v47;
      if (&v81[5] > v47 || &v82 <= v47)
        operator delete(v47);
    }
    goto LABEL_74;
  }
  v68 = v29;
  v69 = v13;
  *(_QWORD *)&v83.a = &off_1E15DC908;
  *(_QWORD *)&v83.b = &v74;
  *(_QWORD *)&v83.c = a4;
  *(_QWORD *)&v83.d = &v83;
  v48 = 126 - 2 * __clz((uint64_t)(v81[3] - v81[2]) >> 4);
  if (v81[3] == v81[2])
    v49 = 0;
  else
    v49 = v48;
  v52 = v81[2];
  v51 = v81[3];
  if (v81[2] == v81[3])
  {
LABEL_64:
    d = v83.d;
    if (*(CGAffineTransform **)&v83.d == &v83)
    {
      d = COERCE_DOUBLE(&v83);
      v62 = 4;
      v13 = v69;
      v29 = v68;
    }
    else
    {
      v13 = v69;
      v29 = v68;
      if (!*(_QWORD *)&v83.d)
      {
LABEL_69:
        v47 = (_QWORD *)v81[2];
        goto LABEL_70;
      }
      v62 = 5;
    }
    (*(void (**)(__n128))(**(_QWORD **)&d + 8 * v62))(v50);
    goto LABEL_69;
  }
  v66 = v27;
  v67 = a4;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v50.n128_u64[0] = -256;
  v56 = -256;
  while (2)
  {
    v57 = v53;
    v58 = *(_DWORD *)(v52 + 8);
    if (v58)
      v59 = v53;
    else
      v59 = v53 + 1;
    if (v58 == 2)
      --v53;
    else
      v53 = v59;
    if (v57 && !v53)
    {
      v56 = *(_QWORD *)v52;
      goto LABEL_53;
    }
    if (v57 || !v53)
    {
      if (v58 != 1 || v57 || v53)
        goto LABEL_53;
      if (v55)
      {
        if (v54)
        {
          v56 = *(_QWORD *)v52;
          goto LABEL_52;
        }
        v78 = v56;
        v79 = v50.n128_u64[0];
        if (!*(_QWORD *)&v83.d)
          goto LABEL_78;
        (*(void (**)(_QWORD, unint64_t *, uint64_t *))(**(_QWORD **)&v83.d + 48))(*(_QWORD *)&v83.d, &v79, &v78);
      }
      v56 = *(_QWORD *)v52;
      v55 = 1;
      v50.n128_u64[0] = *(_QWORD *)v52;
    }
    else
    {
      if (!v55)
        goto LABEL_45;
      if (!v54)
      {
        v78 = v56;
        v79 = v50.n128_u64[0];
        if (!*(_QWORD *)&v83.d)
          goto LABEL_78;
        (*(void (**)(_QWORD, unint64_t *, uint64_t *))(**(_QWORD **)&v83.d + 48))(*(_QWORD *)&v83.d, &v79, &v78);
LABEL_45:
        v50.n128_u64[0] = *(_QWORD *)v52;
      }
LABEL_52:
      v55 = 1;
    }
LABEL_53:
    if ((*(_DWORD *)(v52 + 12) - 1) >= 0x40)
      v60 = 0;
    else
      v60 = 1 << (*(_BYTE *)(v52 + 12) - 1);
    v54 ^= v60;
    v52 += 16;
    if (v52 != v51)
      continue;
    break;
  }
  v27 = v66;
  a4 = v67;
  if (!v55)
    goto LABEL_64;
  v78 = v56;
  v79 = v50.n128_u64[0];
  if (*(_QWORD *)&v83.d)
  {
    (*(void (**)(_QWORD, unint64_t *, uint64_t *))(**(_QWORD **)&v83.d + 48))(*(_QWORD *)&v83.d, &v79, &v78);
    goto LABEL_64;
  }
LABEL_78:
  v63 = std::__throw_bad_function_call[abi:nn180100]();
  TDecorator::DrawDecoration((TDecorator *)v63, v64, v65, v90, v91);
}

void TDecorator::DrawDecoration(TDecorator *this, const TLineDrawContext *a2, __n128 *a3, CFRange a4, CGPoint a5)
{
  CFIndex location;
  double v9;
  uint64_t v10;
  double v11;
  CGContext *v12;
  void *v13;
  const void *v14;
  char v15;
  __int128 v16;
  __int128 v17;
  double ty;
  double tx;
  double v21;
  double v22;
  float64x2_t v23;
  int64x2_t v24;
  unint64_t v25;
  double v27;
  double v28;
  double v35;
  double v37;
  double v40;
  double v41;
  double v43;
  double v44;
  double v45;
  CGFloat v46;
  double v47;
  id v48[2];
  uint64_t v49;
  double v50;
  CGFloat width[2];
  int v52[2];
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  CGFloat v58;
  CGFloat v59;
  double v60;
  double v61;
  id v62;
  int v63;
  CGAffineTransform v64;
  _OWORD v65[5];
  uint64_t v66;

  location = a4.location;
  v66 = *MEMORY[0x1E0C80C00];
  v9 = *((double *)a2 + 10);
  v63 = 0;
  v61 = 0.0;
  v62 = 0;
  v59 = 0.0;
  v60 = 0.0;
  v58 = 0.0;
  v57 = 0;
  if (GetDecorationAttributes(a3->n128_u64, a4.location, (const __CFString **)a4.length, (TAttributes *)&a3[2].n128_i8[8], *(_DWORD *)this, &v63, &v62, &v61, v9, a5.y, &v60, &v59, &v58, &v57))
  {
    TRun::GetPositions(a3, 0);
    v11 = *(double *)(v10 + 16 * location);
    v48[0] = (id)0xAAAAAAAAAAAAAAAALL;
    v49 = unk_18494CD58;
    width[1] = NAN;
    v48[1] = 0;
    LOBYTE(v49) = 0;
    v52[1] = -1431655766;
    v52[0] = 0;
    v50 = 0.0;
    width[0] = 0.0;
    v53 = v11;
    v54 = v60;
    v55 = 0;
    v56 = 0;
    LODWORD(v48[0]) = *(_DWORD *)this;
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v48[1], v62);
    v52[0] = v63;
    width[0] = v59;
    width[1] = v58;
    LOBYTE(v49) = v57;
    v50 = v61;
    if (*(_DWORD *)a2)
    {
LABEL_13:

      return;
    }
    v12 = (CGContext *)*((_QWORD *)a2 + 1);
    CGContextSaveGState(v12);
    v13 = (void *)atomic_load((unint64_t *)&v48[1]);
    TAttributes::SetStrokeColor(v12, v13, v14);
    v15 = v52[0];
    *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v65[3] = v16;
    v65[4] = v16;
    v65[1] = v16;
    v65[2] = v16;
    v65[0] = v16;
    TDecorator::dashes((TDecorator *)v65, v52[0], width[0] / (double)(v52[0] & 7));
    CGContextSetLineWidth(v12, width[0]);
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    *(_OWORD *)&v64.c = v17;
    *(_OWORD *)&v64.tx = v17;
    *(_OWORD *)&v64.a = v17;
    CGContextGetTextMatrix(&v64, v12);
    tx = v64.tx;
    ty = v64.ty;
    _V0.D[1] = v64.b;
    v21 = *MEMORY[0x1E0C9D538];
    v22 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v64.tx = *(CGFloat *)MEMORY[0x1E0C9D538];
    v64.ty = v22;
    v23 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
    v24 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v23, (float64x2_t)vandq_s8(*(int8x16_t *)&v64.tx, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL))), (int8x16_t)vcgeq_f64(v23, vabsq_f64(vaddq_f64(*(float64x2_t *)&v64.a, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v23, vabsq_f64(vaddq_f64(*(float64x2_t *)&v64.c, (float64x2_t)xmmword_18492F290))));
    v25 = vandq_s8((int8x16_t)vdupq_laneq_s64(v24, 1), (int8x16_t)v24).u64[0];
    _D2 = v53;
    v27 = v54;
    v28 = ceil(v50);
    if ((v15 & 8) != 0)
    {
      v37 = v54 - width[1];
      _D4 = v28 + v53;
      if ((v25 & 0x8000000000000000) != 0)
      {
        v40 = v54 - width[1];
      }
      else
      {
        __asm { FMLA            D3, D2, V0.D[1] }
        _D2 = v21 + vmlad_n_f64(v64.c * v37, v53, v64.a);
        v40 = v22 + _D3;
        v41 = vmlad_n_f64(v64.c * v37, _D4, v64.a);
        __asm { FMLA            D5, D4, V0.D[1] }
        _D4 = v21 + v41;
        v37 = v22 + _D5;
      }
      TDecorationRun::DrawLine<TRun const*>((uint64_t)v48, v12, a3, a3 + 20, *(const CGFloat **)&v65[0], (const double *)((uint64_t)(*((_QWORD *)&v65[0] + 1) - *(_QWORD *)&v65[0]) >> 3), tx, ty, _D2, v40, _D4, v37);
      _D2 = v53;
      v27 = v54 + width[1];
      _D4 = v28 + v53;
      if ((v25 & 0x8000000000000000) == 0)
      {
        v43 = v27 * v64.c;
        v44 = v27 * v64.c + v64.a * v53;
        v45 = v27 * v64.d;
        v46 = v64.tx + v44;
        v35 = v64.ty + v45 + v64.b * v53;
        v47 = v45 + v64.b * _D4;
        _D4 = v64.tx + v43 + v64.a * _D4;
        v27 = v64.ty + v47;
        _D2 = v46;
        goto LABEL_12;
      }
    }
    else
    {
      _D4 = v28 + v53;
      if ((v25 & 0x8000000000000000) == 0)
      {
        __asm { FMLA            D3, D2, V0.D[1] }
        _D2 = v21 + vmlad_n_f64(v64.c * v54, v53, v64.a);
        v35 = v22 + _D3;
        __asm { FMLA            D5, D4, V0.D[1] }
        _D4 = v21 + vmlad_n_f64(v64.c * v54, _D4, v64.a);
        v27 = v22 + _D5;
LABEL_12:
        TDecorationRun::DrawLine<TRun const*>((uint64_t)v48, v12, a3, a3 + 20, *(const CGFloat **)&v65[0], (const double *)((uint64_t)(*((_QWORD *)&v65[0] + 1) - *(_QWORD *)&v65[0]) >> 3), tx, ty, _D2, v35, _D4, v27);
        std::vector<double,TInlineBufferAllocator<double,6ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v65);
        CGContextRestoreGState(v12);
        goto LABEL_13;
      }
    }
    v35 = v27;
    goto LABEL_12;
  }
}

void TDecorator::DrawDecoration(uint64_t a1, uint64_t a2, TLine *a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CGFloat v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  CGFloat v13;
  uint64_t v14;
  BOOL v15;
  CGFloat v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  CGFloat v24;
  CGFloat d;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int64x2_t v34;
  CGFloat v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  CGFloat y;
  CGFloat b;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  int64x2_t *v46;
  CGFloat v47;
  CGFloat a;
  _QWORD *v49;
  CGFloat v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  _QWORD *v55;
  BOOL v56;
  CGFloat v57;
  uint64_t v58;
  BOOL v59;
  CGFloat v60;
  uint64_t v61;
  double v62;
  TRun *v63;
  CFIndex v64;
  uint64_t RightWhitespaceGlyphCountAndWidth;
  const void *v66;
  uint64_t v67;
  id *v68;
  char v69;
  CFIndex RightHangersGlyphCountAndWidth;
  double v71;
  CGFloat v72;
  CGFloat v73;
  double v74;
  double v75;
  double v76;
  int v77;
  unint64_t v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  unsigned int v82;
  __int128 v83;
  uint64_t v84;
  double v85;
  TRun *v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  id *v91;
  char v92;
  CFIndex LeftHangersGlyphCountAndWidth;
  double v94;
  CGContext *v95;
  double v96;
  double v97;
  uint64_t v98;
  double *v99;
  void *v100;
  const void *v101;
  char v102;
  __int128 v103;
  CGContext *v104;
  __int128 v105;
  int64x2_t v106;
  double v107;
  double v108;
  double v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  CGFloat v113;
  double tx;
  double ty;
  double v117;
  double v118;
  int64x2_t v119;
  double v121;
  double v128;
  double v130;
  uint64_t v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __int128 v136;
  __n128 v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  __n128 *v141;
  CGFloat v142;
  double v143;
  __int128 *v144;
  __int128 *v145;
  uint64_t v146;
  double *v147;
  int8x8_t v148;
  _OWORD *v149;
  int8x16_t v150;
  double *v151;
  double v152;
  uint64_t v153;
  float64x2_t v154;
  CGFloat v156;
  uint64_t v157;
  id v158[2];
  uint64_t v159;
  double v160;
  CGFloat width[2];
  int v162[2];
  __int128 v163;
  CGFloat v164;
  CGFloat v165;
  char v166;
  unint64_t v167;
  char v168;
  int v169;
  CGFloat v170;
  __int128 v171;
  double *v172;
  double *v173;
  CGFloat *v174;
  CGFloat v175;
  double v176;
  CGFloat v177;
  CGContextRef c[2];
  double v179[2];
  CGAffineTransform v180;
  int64x2_t v181;
  double v182;
  _BYTE v183[960];
  _BYTE *v184;
  __int128 v185;
  __int128 *v186;
  CGAffineTransform v187;
  __int128 v188;
  __int128 v189;
  CGAffineTransform v190;
  __int128 v191;
  __int128 v192;
  CGFloat v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  memset(v183, 170, sizeof(v183));
  v181 = 0uLL;
  v182 = 0.0;
  v184 = v183;
  if (a4)
  {
    v8 = *(_QWORD **)a4;
    v7 = *(_QWORD **)(a4 + 8);
    if (*(_QWORD **)a4 != v7)
    {
      v9 = 0.0;
      do
      {
        v10 = v8;
        v158[0] = (id)0xAAAAAAAAAAAAAAAALL;
        v11 = (id)*v8;
        v158[0] = *(id *)v8;
        while ((id)*v8 == v11)
        {
          v8 += 4;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * (_QWORD)v11) + 40) + 208);
        if (v12 >= 1)
        {
          v13 = 0.0;
          while (v10 != v8)
          {
            v14 = v10[1];
            v15 = v14 <= *(_QWORD *)&v13;
            *(_QWORD *)&v16 = v14 - *(_QWORD *)&v13;
            if (v15)
            {
              v17 = (void *)atomic_load(v10 + 3);
              v18 = v181.i64[1];
              if (v181.i64[1] >= *(_QWORD *)&v182)
              {
                v20 = (v181.i64[1] - v181.i64[0]) >> 5;
                if ((unint64_t)(v20 + 1) >> 59)
                  abort();
                v21 = (*(_QWORD *)&v182 - v181.i64[0]) >> 4;
                if (v21 <= v20 + 1)
                  v21 = v20 + 1;
                if (*(_QWORD *)&v182 - v181.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
                  v22 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v22 = v21;
                *(_QWORD *)&v190.tx = v183;
                if (v22)
                  v23 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)v183, v22);
                else
                  v23 = 0;
                *(_QWORD *)&v24 = &v23[32 * v20];
                *(_QWORD *)&v190.a = v23;
                v190.b = v24;
                *(_QWORD *)&d = &v23[32 * v22];
                v190.d = d;
                v26 = *(_OWORD *)(v10 + 1);
                **(_QWORD **)&v24 = v158[0];
                *(_OWORD *)(*(_QWORD *)&v24 + 8) = v26;
                *(_QWORD *)(*(_QWORD *)&v24 + 24) = v17;
                *(_QWORD *)&v9 = *(_QWORD *)&v24 + 32;
                *(_QWORD *)&v190.c = *(_QWORD *)&v24 + 32;
                v28 = v181.i64[1];
                v27 = v181.i64[0];
                if (v181.i64[1] == v181.i64[0])
                {
                  v34 = vdupq_n_s64(v181.u64[1]);
                }
                else
                {
                  do
                  {
                    *(_QWORD *)&v29 = *(_QWORD *)&v24 - 32;
                    v30 = *(_OWORD *)(v28 - 32);
                    v31 = *(_QWORD *)(v28 - 16);
                    v32 = (unint64_t *)(v28 - 8);
                    v28 -= 32;
                    *(_QWORD *)(*(_QWORD *)&v24 - 16) = v31;
                    *(_OWORD *)(*(_QWORD *)&v24 - 32) = v30;
                    do
                      v33 = __ldaxr(v32);
                    while (__stlxr(0, v32));
                    *(_QWORD *)(*(_QWORD *)&v24 - 8) = v33;
                    *(_QWORD *)&v24 -= 32;
                  }
                  while (v28 != v27);
                  v34 = v181;
                  v24 = v29;
                  v9 = v190.c;
                  d = v190.d;
                }
                *(CGFloat *)v181.i64 = v24;
                *(CGFloat *)&v181.i64[1] = v9;
                *(int64x2_t *)&v190.b = v34;
                v35 = v182;
                v182 = d;
                v190.d = v35;
                *(_QWORD *)&v190.a = v34.i64[0];
                std::__split_buffer<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul> &>::~__split_buffer((uint64_t)&v190);
              }
              else
              {
                v19 = *(_OWORD *)(v10 + 1);
                *(_QWORD *)v181.i64[1] = v158[0];
                *(_OWORD *)(v18 + 8) = v19;
                *(_QWORD *)(v18 + 24) = v17;
                *(_QWORD *)&v9 = v18 + 32;
              }
              *(CGFloat *)&v181.i64[1] = v9;
              v36 = v10[1];
              v37 = v10[2];
              v10 += 4;
              *(_QWORD *)&v13 = v37 + v36;
            }
            else
            {
              v190.a = v13;
              v190.b = v16;
              if (*(_QWORD *)&v9 >= *(_QWORD *)&v182)
              {
                v9 = COERCE_DOUBLE(std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange>((char **)&v181, v158, (__int128 *)&v190));
              }
              else
              {
                **(_QWORD **)&v9 = v158[0];
                *(CGFloat *)(*(_QWORD *)&v9 + 8) = v13;
                *(CGFloat *)(*(_QWORD *)&v9 + 16) = v16;
                *(_QWORD *)(*(_QWORD *)&v9 + 24) = 0;
                *(_QWORD *)&v9 += 32;
              }
              *(CGFloat *)&v181.i64[1] = v9;
              v13 = *((double *)v10 + 1);
            }
            if (*(uint64_t *)&v13 >= v12)
              goto LABEL_41;
          }
          v190.a = v13;
          *(_QWORD *)&v190.b = v12 - *(_QWORD *)&v13;
          if (*(_QWORD *)&v9 >= *(_QWORD *)&v182)
          {
            v9 = COERCE_DOUBLE(std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange>((char **)&v181, v158, (__int128 *)&v190));
          }
          else
          {
            **(_QWORD **)&v9 = v158[0];
            *(CGFloat *)(*(_QWORD *)&v9 + 8) = v13;
            *(_QWORD *)(*(_QWORD *)&v9 + 16) = v12 - *(_QWORD *)&v13;
            *(_QWORD *)(*(_QWORD *)&v9 + 24) = 0;
            *(_QWORD *)&v9 += 32;
          }
          *(CGFloat *)&v181.i64[1] = v9;
        }
LABEL_41:
        ;
      }
      while (v8 != v7);
    }
  }
  TLine::GetLeftHangersGlyphCountAndWidth(a3, 0);
  if (v38 == 0.0)
    v39 = 0.0;
  else
    v39 = 0.0 - v38;
  v40 = a2;
  if (*(_DWORD *)a2)
    y = *(double *)(a2 + 24);
  else
    y = CGContextGetTextPosition((CGContextRef)*(_QWORD *)(a2 + 8)).y;
  b = 0.0;
  v44 = *((_QWORD *)a3 + 2);
  v43 = *((_QWORD *)a3 + 3);
  v157 = (v43 - v44) >> 3;
  v45 = *(double **)(a2 + 80);
  v149 = (_OWORD *)(a2 + 32);
  v154 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  v148 = (int8x8_t)0x700000000FFLL;
  v150 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v151 = v45;
  v152 = y;
  while (2)
  {
    v158[0] = (id)0xAAAAAAAAAAAAAAAALL;
    v159 = unk_18494CD58;
    v162[1] = -1431655766;
    width[1] = NAN;
    v158[1] = 0;
    LOBYTE(v159) = 0;
    v162[0] = 0;
    v160 = 0.0;
    width[0] = 0.0;
    *(double *)&v163 = v39;
    *((CGFloat *)&v163 + 1) = y;
    v164 = b;
    v165 = 0.0;
    LODWORD(v158[0]) = *(_DWORD *)a1;
    if (v181.i64[0] == v181.i64[1])
      v46 = 0;
    else
      v46 = &v181;
    v172 = v45;
    v179[0] = 0.0;
    *(_QWORD *)&v47 = (v43 - v44) >> 3;
    v180.a = b;
    v180.b = 0.0;
    if (*(uint64_t *)&b >= *(uint64_t *)&v47)
    {
      *(double *)&v52 = 0.0;
      goto LABEL_63;
    }
    while (1)
    {
      v187.a = -3.72066208e-103;
      v187.a = *(CGFloat *)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * *(_QWORD *)&b) + 40);
      a = v187.a;
      LOBYTE(v185) = 0;
      v49 = operator new(0x38uLL);
      *v49 = &off_1E15DFB48;
      v49[1] = *(_QWORD *)&a + 40;
      v49[2] = a1;
      v49[3] = &v185;
      v49[4] = v158;
      v49[5] = v179;
      v49[6] = &v187;
      *(_QWORD *)&v190.d = v49;
      EnumerateOverrides(*(_QWORD *)(*(_QWORD *)&a + 208), *(uint64_t *)&b, v46, (uint64_t)&v190);
      v50 = v190.d;
      if (*(CGAffineTransform **)&v190.d == &v190)
      {
        v50 = COERCE_DOUBLE(&v190);
        v51 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v190.d)
          goto LABEL_58;
        v51 = 5;
      }
      (*(void (**)(void))(**(_QWORD **)&v50 + 8 * v51))();
LABEL_58:
      if ((_BYTE)v185)
        break;
      ++*(_QWORD *)&b;
      v180.a = b;
      if (*(_QWORD *)&v47 == *(_QWORD *)&b)
      {
        *(double *)&v52 = 0.0;
LABEL_64:
        v164 = v47;
        v165 = *(double *)&v52;
        b = *(double *)&v52;
        v53 = v179[0];
        goto LABEL_78;
      }
    }
    *(_QWORD *)&v180.b = 1;
    v52 = 1;
LABEL_63:
    if (*(_QWORD *)&b == *(_QWORD *)&v47)
      goto LABEL_64;
    v185 = v163;
    v169 = -1;
    v177 = 0.0;
    c[0] = 0;
    v170 = b;
    *(_QWORD *)&v171 = 0;
    v175 = 0.0;
    v176 = 0.0;
    v168 = 0;
    while (2)
    {
      if (*(uint64_t *)&b < *(uint64_t *)&v47)
      {
        v167 = 0xAAAAAAAAAAAAAAAALL;
        v167 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * *(_QWORD *)&b) + 40);
        v54 = v167;
        v166 = 0;
        v55 = operator new(0x88uLL);
        *v55 = &off_1E15DFB90;
        v55[1] = v54 + 40;
        v55[2] = &v172;
        v55[3] = &v167;
        v55[4] = &v185;
        v55[5] = a1;
        v55[6] = &v168;
        v55[7] = &v166;
        v55[8] = v158;
        v55[9] = &v169;
        v55[10] = &v175;
        v55[11] = &v170;
        v55[12] = &v180;
        v55[13] = c;
        v55[14] = &v176;
        v55[15] = &v171;
        v55[16] = &v177;
        *(_QWORD *)&v187.d = v55;
        v56 = EnumerateOverrides(*(_QWORD *)(v54 + 208), *(uint64_t *)&b, v46, (uint64_t)&v187);
        v57 = v187.d;
        if (*(CGAffineTransform **)&v187.d == &v187)
        {
          v57 = COERCE_DOUBLE(&v187);
          v58 = 4;
LABEL_71:
          (*(void (**)(void))(**(_QWORD **)&v57 + 8 * v58))();
        }
        else if (*(_QWORD *)&v187.d)
        {
          v58 = 5;
          goto LABEL_71;
        }
        if (v166)
          v59 = 0;
        else
          v59 = v56;
        if (!v59)
          break;
        *(_QWORD *)&b = ++*(_QWORD *)&v170;
        continue;
      }
      break;
    }
    v162[0] = v169;
    *(double *)&v163 = v179[0] + *(double *)&v185;
    *((CGContextRef *)&v163 + 1) = c[0];
    *(_QWORD *)&width[0] = v171;
    width[1] = v177;
    v160 = v176;
    v47 = v180.a;
    b = v180.b;
    v164 = v180.a;
    v165 = v180.b;
    v53 = v179[0] + v176;
LABEL_78:
    if (*(uint64_t *)&v47 < v157)
    {
      if (v47 == 0.0 && (v181.i64[0] == v181.i64[1] || *(uint64_t *)v181.i64[0] >= 1))
      {
        if (*(uint64_t *)&b < 1)
        {
          v84 = 0;
          v85 = 0.0;
        }
        else
        {
          v84 = 0;
          v85 = 0.0;
          while (1)
          {
            v86 = *(TRun **)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v84) + 40);
            v87 = *((_QWORD *)v86 + 26);
            v88 = (*(uint64_t (**)(TRun *))(*(_QWORD *)v86 + 80))(v86);
            v85 = v85 + *(double *)&v89;
            if (v88 < v87)
              break;
            v90 = v88;
            v91 = (id *)*((_QWORD *)v86 + 21);
            v92 = v91 ? TParagraphStyle::GetLineBoundsOptions(v91, v89) : 0;
            LeftHangersGlyphCountAndWidth = TRun::GetLeftHangersGlyphCountAndWidth(v86, v90, v92, *(const TCharStream **)a3, 1);
            v85 = v85 + v94;
            if (LeftHangersGlyphCountAndWidth < v87)
              break;
            if (*(_QWORD *)&b == ++v84)
              goto LABEL_138;
          }
        }
        if (v84 == *(_QWORD *)&b)
        {
LABEL_138:
          v40 = a2;
          goto LABEL_148;
        }
        *(double *)&v163 = v85 + *(double *)&v163;
        v160 = v160 - v85;
        v40 = a2;
      }
      if (*(_QWORD *)&b + *(_QWORD *)&v47 == v157 && v181.i64[0] == v181.i64[1])
      {
        v60 = v164;
        v61 = *(_QWORD *)&v165 + *(_QWORD *)&v164;
        v62 = 0.0;
        do
        {
          if (v61 <= *(uint64_t *)&v60)
          {
            b = *(double *)&v157;
            goto LABEL_148;
          }
          v63 = *(TRun **)(*(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v61 - 8) + 40);
          v64 = *((_QWORD *)v63 + 26);
          RightWhitespaceGlyphCountAndWidth = TRun::GetRightWhitespaceGlyphCountAndWidth(v63);
          v62 = v62 + *(double *)&v66;
          v67 = v64 - RightWhitespaceGlyphCountAndWidth;
          if (v64 > RightWhitespaceGlyphCountAndWidth)
            break;
          v68 = (id *)*((_QWORD *)v63 + 21);
          v69 = v68 ? TParagraphStyle::GetLineBoundsOptions(v68, v66) : 0;
          RightHangersGlyphCountAndWidth = TRun::GetRightHangersGlyphCountAndWidth(v63, v67, v69, *(const TCharStream **)a3, -1);
          v62 = v62 + v71;
          --v61;
        }
        while (RightHangersGlyphCountAndWidth >= v64);
        v160 = v160 - v62;
      }
      v73 = v164;
      v72 = v165;
      v74 = *(double *)(a1 + 8);
      if (v74 == 0.0)
      {
        v95 = *(CGContext **)(v40 + 8);
        TLine::GetLeftHangersGlyphCountAndWidth(a3, 0);
        if (v96 == 0.0)
          v97 = 0.0;
        else
          v97 = 0.0 - v96;
        v98 = *((_QWORD *)a3 + 2);
        v99 = (double *)(v98 + 8 * *(_QWORD *)&v73);
        *(_QWORD *)&b = *(_QWORD *)&v72 + *(_QWORD *)&v73;
        v172 = v99;
        *(_QWORD *)&v179[0] = v98 + 8 * *(_QWORD *)&b;
        c[0] = v95;
        CGContextSaveGState(v95);
        v100 = (void *)atomic_load((unint64_t *)&v158[1]);
        TAttributes::SetStrokeColor(v95, v100, v101);
        v102 = v162[0];
        *(_QWORD *)&v103 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v103 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v192 = v103;
        v191 = v103;
        *(_OWORD *)&v190.tx = v103;
        *(_OWORD *)&v190.c = v103;
        *(_OWORD *)&v190.a = v103;
        TDecorator::dashes((TDecorator *)&v190, v162[0], width[0] / (double)(v162[0] & 7));
        v104 = c[0];
        CGContextSetLineWidth(c[0], width[0]);
        *(_QWORD *)&v105 = -1;
        *((_QWORD *)&v105 + 1) = -1;
        *(_OWORD *)&v180.c = v105;
        *(_OWORD *)&v180.tx = v105;
        *(_OWORD *)&v180.a = v105;
        CGContextGetTextMatrix(&v180, v104);
        *(double *)&v185 = v180.tx - v97;
        *((_QWORD *)&v185 + 1) = *(_QWORD *)&v180.ty;
        *(_OWORD *)&v180.tx = *MEMORY[0x1E0C9D538];
        v106 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v154, vabsq_f64(*(float64x2_t *)&v180.tx)), (int8x16_t)vcgeq_f64(v154, vabsq_f64(vaddq_f64(*(float64x2_t *)&v180.a, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v154, vabsq_f64(vaddq_f64(*(float64x2_t *)&v180.c, (float64x2_t)xmmword_18492F290))));
        LOBYTE(v171) = vandq_s8((int8x16_t)vdupq_laneq_s64(v106, 1), (int8x16_t)v106).i64[0] < 0;
        *(_QWORD *)&v187.a = &v171;
        *(_QWORD *)&v187.b = &v180;
        *(_QWORD *)&v187.c = c;
        *(_QWORD *)&v187.d = &v185;
        *(_QWORD *)&v187.tx = &v172;
        *(_QWORD *)&v187.ty = v179;
        *(_QWORD *)&v188 = &v190;
        *((_QWORD *)&v188 + 1) = v158;
        v107 = ceil(v160);
        v109 = *((double *)&v163 + 1);
        v108 = *(double *)&v163;
        if ((v102 & 8) != 0)
        {
          v108 = *(double *)&v163;
          v109 = *((double *)&v163 + 1) + width[1];
        }
        std::vector<double,TInlineBufferAllocator<double,6ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v190);
        CGContextRestoreGState(v95);
        goto LABEL_145;
      }
      v156 = v165;
      TLine::GetLeftHangersGlyphCountAndWidth(a3, 0);
      if (v75 == 0.0)
        v76 = 0.0;
      else
        v76 = 0.0 - v75;
      v153 = *((_QWORD *)a3 + 2);
      v170 = v74;
      v77 = (int)v158[0];
      v78 = atomic_load((unint64_t *)&v158[1]);
      v80 = v160;
      v79 = width[0];
      v81 = width[1];
      v82 = v162[0];
      v83 = v163;
      if (**(_DWORD **)&v74 == 1)
      {
        memset(&v190, 170, 24);
        *(_QWORD *)&v110 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v110 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v189 = v110;
        v188 = v110;
        *(_OWORD *)&v187.tx = v110;
        *(_OWORD *)&v187.c = v110;
        *(_OWORD *)&v187.a = v110;
        TDecorator::dashes((TDecorator *)&v187, v162[0], width[0] / (double)(v162[0] & 7));
        LODWORD(v190.a) = 0;
        LODWORD(v190.b) = v77;
        v190.d = v80;
        v190.tx = v79;
        *(int8x8_t *)((char *)&v190.b + 4) = vand_s8((int8x8_t)vdup_n_s32(v82), v148);
        v190.ty = v81;
        v191 = v83;
        *(CGFloat *)&v192 = v73;
        *((CGFloat *)&v192 + 1) = v156;
        v193 = v187.a;
        v194 = (uint64_t)(*(_QWORD *)&v187.b - *(_QWORD *)&v187.a) >> 3;
        v195 = v78;
        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)&v74 + 8) + 16))();
        std::vector<double,TInlineBufferAllocator<double,6ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v187);
      }
      else if (!**(_DWORD **)&v74)
      {
        (*(void (**)(double, double, double, double, double))(*(_QWORD *)(*(_QWORD *)&v74 + 8) + 16))(v160, width[0], width[1], *(double *)&v163, *((double *)&v163 + 1));
      }
      *(_QWORD *)&v111 = -1;
      *((_QWORD *)&v111 + 1) = -1;
      *(_OWORD *)&v180.c = v111;
      *(_OWORD *)&v180.tx = v111;
      *(_OWORD *)&v180.a = v111;
      v40 = a2;
      if (*(_DWORD *)a2)
      {
        v112 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v180.a = *v149;
        *(_OWORD *)&v180.c = v112;
        *(_OWORD *)&v180.tx = *(_OWORD *)(a2 + 64);
      }
      else
      {
        CGContextGetTextMatrix(&v180, *(CGContextRef *)(a2 + 8));
      }
      v113 = v156;
      tx = v180.tx;
      ty = v180.ty;
      _V1.D[1] = v180.b;
      v117 = *MEMORY[0x1E0C9D538];
      v118 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      v180.tx = *(CGFloat *)MEMORY[0x1E0C9D538];
      v180.ty = v118;
      v119 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f64(v154, (float64x2_t)vandq_s8(*(int8x16_t *)&v180.tx, v150)), (int8x16_t)vcgeq_f64(v154, vabsq_f64(vaddq_f64(*(float64x2_t *)&v180.a, (float64x2_t)xmmword_18492F280)))), (int8x16_t)vcgeq_f64(v154, vabsq_f64(vaddq_f64(*(float64x2_t *)&v180.c, (float64x2_t)xmmword_18492F290))));
      v121 = *((double *)&v163 + 1);
      _D10 = *(double *)&v163;
      _D11 = *(double *)&v163 + ceil(v160);
      if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v119, 1), (int8x16_t)v119).u64[0] & 0x8000000000000000) != 0)
      {
        v128 = *((double *)&v163 + 1);
      }
      else
      {
        __asm { FMLA            D7, D10, V1.D[1] }
        _D10 = v117 + vmlad_n_f64(v180.c * *((double *)&v163 + 1), *(double *)&v163, v180.a);
        v128 = v118 + _D7;
        __asm { FMLA            D4, D11, V1.D[1] }
        _D11 = v117 + vmlad_n_f64(v180.c * *((double *)&v163 + 1), _D11, v180.a);
        v121 = v118 + _D4;
      }
      v130 = tx - v76;
      *(_QWORD *)&v190.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v190.b = 3321888768;
      *(_QWORD *)&v190.c = ___ZZN14TDecorationRun22EnumerateDecorationRunIN12_GLOBAL__N_111TRunAdapterEEEvRK16TLineDrawContextT_S6_7CFRangeP18TDecoratorObserverdENKUl7CGPointSA_E_cvU13block_pointerFvSA_SA_EEv_block_invoke;
      *(_QWORD *)&v190.d = &__block_descriptor_40_8_32c151_ZTSKZN14TDecorationRun22EnumerateDecorationRunIN12_GLOBAL__N_111TRunAdapterEEEvRK16TLineDrawContextT_S6_7CFRangeP18TDecoratorObserverdEUl7CGPointSA_E__e33_v40__0_CGPoint_dd_8_CGPoint_dd_24l;
      *(_QWORD *)&v190.tx = &v170;
      *(double *)&v131 = COERCE_DOUBLE(objc_msgSend((id)objc_msgSend(&v190, "copy", *(_QWORD *)&v148), "autorelease"));
      v179[0] = v130;
      v179[1] = ty;
      c[0] = *(CGContextRef *)&_D10;
      c[1] = *(CGContextRef *)&v128;
      v177 = *(double *)&v131;
      v175 = width[0];
      v176 = width[0] * 0.75;
      if ((_BYTE)v159)
      {
        v121 = v121 - v128 * 2.0;
        v128 = v128 - v128 * 2.0;
        c[1] = *(CGContextRef *)&v128;
      }
      v172 = &v176;
      v173 = v179;
      v174 = &v177;
      if (LODWORD(v158[0]))
      {
        if (_D11 - _D10 > width[0] * 0.75)
        {
          v132.n128_f64[0] = v130 + _D10;
          v133.n128_f64[0] = ty + v128;
          v134.n128_f64[0] = v130 + _D11;
          v135.n128_f64[0] = ty + v121;
          (*(void (**)(__n128, __n128, __n128, __n128))(v131 + 16))(v132, v133, v134, v135);
        }
        goto LABEL_144;
      }
      v171 = *(_OWORD *)c;
      *(_QWORD *)&v136 = -1;
      *((_QWORD *)&v136 + 1) = -1;
      *(_OWORD *)&v190.tx = v136;
      *(_OWORD *)&v190.c = v136;
      *(_OWORD *)&v190.a = v136;
      if (*(_DWORD *)a2)
      {
        v137 = *(__n128 *)(a2 + 48);
        *(_OWORD *)&v190.a = *v149;
        *(__n128 *)&v190.c = v137;
        v138 = *(__n128 *)(a2 + 64);
        *(__n128 *)&v190.tx = v138;
        if (v156 != 0.0)
          goto LABEL_128;
LABEL_141:
        v147 = &v176;
        goto LABEL_142;
      }
      CGContextGetTextMatrix(&v190, *(CGContextRef *)(a2 + 8));
      if (v156 == 0.0)
        goto LABEL_141;
LABEL_128:
      v139 = 8 * *(_QWORD *)&v156;
      v140 = v153 + 8 * *(_QWORD *)&v73;
      while (2)
      {
        v141 = *(__n128 **)(*(_QWORD *)v140 + 40);
        v187 = v190;
        v142 = *(double *)&c[1] - width[0] * 0.5;
        v143 = *(double *)&c[1] + width[0] * 0.5;
        v144 = (__int128 *)operator new(0x28uLL);
        *(_QWORD *)v144 = &off_1E15DC8C0;
        *((_QWORD *)v144 + 1) = &v175;
        *((_QWORD *)v144 + 2) = c;
        *((_QWORD *)v144 + 3) = &v172;
        *((_QWORD *)v144 + 4) = &v171;
        v186 = v144;
        TDecorationRun::CalculateGlyphIntersections((uint64_t)v158, &v187.a, v141, (uint64_t)&v185, v142, v143);
        v145 = v186;
        if (v186 == &v185)
        {
          v145 = &v185;
          v146 = 4;
LABEL_133:
          (*(void (**)(void))(*(_QWORD *)v145 + 8 * v146))();
        }
        else if (v186)
        {
          v146 = 5;
          goto LABEL_133;
        }
        v140 += 8;
        v139 -= 8;
        if (v139)
          continue;
        break;
      }
      v147 = v172;
      v113 = v156;
LABEL_142:
      if (_D11 - *(double *)&v171 > *v147)
      {
        v135.n128_f64[0] = v173[1];
        v138.n128_f64[0] = *(double *)&v171 + *v173;
        v137.n128_f64[0] = *((double *)&v171 + 1) + v135.n128_f64[0];
        v134.n128_f64[0] = _D11 + *v173;
        v135.n128_f64[0] = v121 + v135.n128_f64[0];
        (*(void (**)(__n128, __n128, __n128, __n128))(*(_QWORD *)v174 + 16))(v138, v137, v134, v135);
      }
LABEL_144:
      *(_QWORD *)&b = *(_QWORD *)&v113 + *(_QWORD *)&v73;
      v45 = v151;
      y = v152;
LABEL_145:
      if (v181.i64[0] != v181.i64[1] && *(_QWORD *)v181.i64[0] < *(uint64_t *)&b)
        b = *(double *)v181.i64[0];
LABEL_148:
      v39 = v39 + v53;

      v44 = *((_QWORD *)a3 + 2);
      v43 = *((_QWORD *)a3 + 3);
      continue;
    }
    break;
  }

  *(_QWORD *)&v190.a = &v181;
  std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v190);
}

void TDecorator::dashes(TDecorator *this, unsigned int a2, double a3)
{
  __int128 v5;
  char *v6;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)this + 56) = v5;
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v5;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 9) = (char *)this + 24;
  switch((a2 >> 8) & 7)
  {
    case 1u:
      v6 = (char *)&v22;
      v24[0] = &v22;
      v20 = &v22;
      __asm { FMOV            V0.2D, #3.0 }
      goto LABEL_4;
    case 2u:
      v6 = (char *)&v22;
      v24[0] = &v22;
      v20 = &v22;
      _Q0 = xmmword_18494CBC0;
LABEL_4:
      v21 = _Q0;
      v18 = &v21;
      v19 = &v22;
      v12 = 2;
      goto LABEL_7;
    case 3u:
      v6 = (char *)&v23;
      v24[0] = &v23;
      v19 = &v23;
      v20 = &v23;
      v21 = xmmword_18494CDA0;
      v22 = unk_18494CDB0;
      v18 = &v21;
      v12 = 4;
      goto LABEL_7;
    case 4u:
      v6 = (char *)v24;
      v24[0] = v24;
      v19 = (__int128 *)v24;
      v20 = (__int128 *)v24;
      v21 = xmmword_18494CDC0;
      v22 = unk_18494CDD0;
      v23 = xmmword_18494CDE0;
      v18 = &v21;
      v12 = 6;
LABEL_7:
      std::vector<double,TInlineBufferAllocator<double,6ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((void **)this, (char *)&v21, v6, v12);
      std::vector<double,TInlineBufferAllocator<double,6ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v18);
      break;
    default:
      break;
  }
  v13 = *(_QWORD *)this;
  v14 = *((_QWORD *)this + 1);
  v15 = v14 - *(_QWORD *)this;
  if (v14 != *(_QWORD *)this)
  {
    v16 = 0;
    v17 = v15 >> 3;
    do
    {
      *(double *)(v13 + 8 * v16) = *(double *)(v13 + 8 * v16) * a3;
      ++v16;
    }
    while (v17 > v16);
  }
}

unsigned int *CTLineDecorationGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

int *CTLineDecorationGetSegment(int *result)
{
  int v1;

  if (result)
  {
    v1 = *result;
    result += 2;
    if (v1)
      return 0;
  }
  return result;
}

uint64_t CTLineDecorationGetSegmentColor(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result)
      return 0;
    else
      return *(_QWORD *)(result + 96);
  }
  return result;
}

int *CTLineDecorationGetFragment(int *result)
{
  int v1;

  if (result)
  {
    v1 = *result;
    result += 2;
    if (v1 != 1)
      return 0;
  }
  return result;
}

void TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)const::$_0::__invoke(_anonymous_namespace_::PathObserver *this, uint64_t a2)
{
  _anonymous_namespace_::PathObserver *v4;
  unsigned int v5;
  int v6;
  int v7;
  double *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  int v20;
  double *v21;
  double v22;
  double v23;
  CGPoint *v25;
  __int128 v26;
  unsigned int InterceptsAtY;
  uint64_t v28;
  double *v29;
  double *v30;
  int v31;
  int v32;
  double v33;
  double v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  double v49[3];
  double v50[3];
  CGPoint v51;
  _OWORD v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *(_anonymous_namespace_::PathObserver **)(a2 + 8);
  v5 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 - 1) >= 3)
  {
    if (v5 == 4)
    {
      v6 = 1;
      v5 = 1;
      v4 = this;
    }
    else
    {
      if (v5)
      {
        v5 = 0;
        v8 = (double *)((char *)this + 24);
        v12 = *((double *)this + 3);
        v14 = 1;
        v6 = 1;
        v9 = v12;
        goto LABEL_16;
      }
      *(_OWORD *)this = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v6 = 0;
      if (*(double *)(*(_QWORD *)(a2 + 8) + 8) < *((double *)this + 4) + 1.0e-10)
      {
        v7 = *((_DWORD *)this + 12) + 1;
        *((_DWORD *)this + 12) = v7;
        *((_DWORD *)this + 13) = v7;
        *((_DWORD *)this + 14) = v7;
      }
      v5 = 1;
    }
  }
  else
  {
    v6 = 1;
  }
  v8 = (double *)((char *)this + 24);
  v9 = *((double *)this + 3);
  v10 = v5;
  v11 = 8;
  v12 = v9;
  do
  {
    v13 = *(double *)((char *)v4 + v11);
    if (v9 < v13)
      v9 = *(double *)((char *)v4 + v11);
    if (v13 < v12)
      v12 = *(double *)((char *)v4 + v11);
    v11 += 16;
    --v10;
  }
  while (v10);
  v14 = 0;
LABEL_16:
  v15 = *((double *)this + 4);
  v16 = *((double *)this + 5);
  v17 = v12 <= v15;
  if (v15 > v9)
    v17 = 0;
  v18 = v6 & v17;
  v19 = v12 <= v16;
  if (v16 > v9)
    v19 = 0;
  v20 = v6 & v19;
  v21 = (double *)((char *)v4 + 16 * v5 - 16);
  v22 = *v21;
  v23 = v21[1];
  if (v15 < v23 && v23 < v16)
  v25 = (CGPoint *)((char *)this + 16);
  if ((v18 | v20) == 1)
  {
    *(_QWORD *)&v26 = -1;
    *((_QWORD *)&v26 + 1) = -1;
    v52[1] = v26;
    v52[2] = v26;
    v51 = *v25;
    v52[0] = v26;
    if ((v14 & 1) == 0)
      memmove(v52, v4, 16 * v5);
    memset(v50, 255, sizeof(v50));
    memset(v49, 255, sizeof(v49));
    if (v18)
    {
      InterceptsAtY = GetInterceptsAtY(v5, &v51, *((double *)this + 4) + 1.0e-10, v50, v49);
      if (InterceptsAtY)
      {
        v28 = InterceptsAtY;
        v29 = v49;
        v30 = v50;
        do
        {
          v31 = *((_DWORD *)this + 13);
          if (v31)
          {
            v32 = 0;
          }
          else
          {
            v32 = *((_DWORD *)this + 12) + 1;
            *((_DWORD *)this + 12) = v32;
            v31 = v32;
          }
          v33 = *v30++;
          v34 = v33;
          *((_DWORD *)this + 13) = v32;
          v35 = *v29++;
          --v28;
        }
        while (v28);
      }
    }
    if (v20)
    {
      v36 = GetInterceptsAtY(v5, &v51, *((double *)this + 5) + 1.0e-10, v50, v49);
      if (v36)
      {
        v37 = v36;
        v38 = v49;
        v39 = v50;
        do
        {
          v40 = *v39++;
          v41 = v40;
          v42 = *v38++;
          --v37;
        }
        while (v37);
      }
    }
  }
  if (*(_DWORD *)a2 == 4)
  {
    v43 = *MEMORY[0x1E0C9D538];
    *v25 = *(CGPoint *)MEMORY[0x1E0C9D538];
    *(_OWORD *)this = v43;
    v44 = *((_DWORD *)this + 14);
    if (v44)
    {
      v45 = *((_DWORD *)this + 13);
      if (v44 != v45)
      {
        v46 = *((_QWORD *)this + 9);
        while (v46 != *((_QWORD *)this + 8))
        {
          v47 = v46;
          v48 = *(_DWORD *)(v46 - 4);
          v46 -= 16;
          if (v48 == v45)
          {
            *(_DWORD *)(v47 - 4) = v44;
            break;
          }
        }
      }
      *((_DWORD *)this + 13) = 0;
      *((_DWORD *)this + 14) = 0;
    }
  }
  else
  {
    v25->x = v22;
    *v8 = v23;
  }
}

BOOL std::__less<void,void>::operator()[abi:nn180100]<`anonymous namespace'::PathObserver::Intersection,`anonymous namespace'::PathObserver::Intersection>(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;

  if (*(double *)a1 == *(double *)a2)
    v2 = 0;
  else
    v2 = -127;
  if (*(double *)a1 > *(double *)a2)
    v2 = 1;
  if (*(double *)a1 < *(double *)a2)
    v2 = -1;
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a2 + 8);
    v5 = v3 == v4;
    LOBYTE(v2) = v3 < v4 ? -1 : 1;
    if (v5)
    {
      v6 = *(_DWORD *)(a1 + 12);
      v7 = *(_DWORD *)(a2 + 12);
      v8 = v6 == v7;
      LOBYTE(v2) = v6 < v7 ? -1 : 1;
      if (v8)
        LOBYTE(v2) = 0;
    }
  }
  return v2 != 129 && (v2 & 0x80u) != 0;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::PathObserver::Intersection *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (v6)
  {
    v8 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 12);
    if (result)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 12) = v9;
      if (!result)
        return result;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 12) = v9;
  }
  else if (result)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    if (result)
    {
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::PathObserver::Intersection *>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v6;
        *((_QWORD *)a2 - 2) = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v16 = (__int128 *)(a1 + 16);
      v17 = (__int128 *)(a1 + 32);
      v18 = (__int128 *)(a1 + 48);
      v19 = a2 - 1;
      {
        v20 = *(_QWORD *)(a1 + 48);
        v21 = *(_QWORD *)(a1 + 56);
        *v18 = *v19;
        *((_QWORD *)a2 - 2) = v20;
        *((_QWORD *)a2 - 1) = v21;
        {
          v22 = *(_QWORD *)(a1 + 32);
          v23 = *(_QWORD *)(a1 + 40);
          *v17 = *v18;
          *(_QWORD *)(a1 + 48) = v22;
          *(_QWORD *)(a1 + 56) = v23;
          {
            v24 = *(_QWORD *)(a1 + 16);
            v25 = *(_QWORD *)(a1 + 24);
            *v16 = *v17;
            *(_QWORD *)(a1 + 32) = v24;
            *(_QWORD *)(a1 + 40) = v25;
            {
              v26 = *(_QWORD *)a1;
              v27 = *(_QWORD *)(a1 + 8);
              *(_OWORD *)a1 = *v16;
              *(_QWORD *)(a1 + 16) = v26;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    {
      v28 = *v10;
      v13 = v11;
      while (1)
      {
        v14 = a1 + v13;
        *(_OWORD *)(a1 + v13 + 48) = *(_OWORD *)(a1 + v13 + 32);
        if (v13 == -32)
          break;
        v13 -= 16;
        {
          v15 = (_OWORD *)(a1 + v13 + 48);
          goto LABEL_13;
        }
      }
      v15 = (_OWORD *)a1;
LABEL_13:
      *v15 = v28;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = (uint64_t)v10;
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::PathObserver::Intersection *>(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  double result;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(double *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    {
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *a3 = v11;
      *((_QWORD *)a3 + 1) = v12;
      {
        result = *(double *)a1;
        v13 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = result;
        *((_QWORD *)a2 + 1) = v13;
      }
    }
  }
  return result;
}

char *std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange>(char **a1, _QWORD *a2, __int128 *a3)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  char *v25;
  char *v27;
  int64x2_t v28;
  char *v29;
  uint64_t v30;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v9 = (uint64_t)(a1 + 3);
  v10 = a1[2] - v3;
  if (v10 >> 4 > v5)
    v5 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v5;
  v30 = v9;
  if (v11)
    v12 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v4];
  v27 = v12;
  v28.i64[0] = (uint64_t)v13;
  v14 = &v12[32 * v11];
  v29 = v14;
  v15 = *a3;
  *(_QWORD *)v13 = *a2;
  *(_OWORD *)(v13 + 8) = v15;
  *((_QWORD *)v13 + 3) = 0;
  v16 = v13 + 32;
  v28.i64[1] = (uint64_t)(v13 + 32);
  v17 = *a1;
  v18 = (unint64_t)a1[1];
  if ((char *)v18 == *a1)
  {
    v24 = vdupq_n_s64(v18);
  }
  else
  {
    do
    {
      v19 = v13 - 32;
      v20 = *(_OWORD *)(v18 - 32);
      v21 = *(_QWORD *)(v18 - 16);
      v22 = (unint64_t *)(v18 - 8);
      v18 -= 32;
      *((_QWORD *)v13 - 2) = v21;
      *((_OWORD *)v13 - 2) = v20;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(0, v22));
      *((_QWORD *)v13 - 1) = v23;
      v13 -= 32;
    }
    while ((char *)v18 != v17);
    v24 = *(int64x2_t *)a1;
    v13 = v19;
    v16 = (char *)v28.i64[1];
    v14 = v29;
  }
  *a1 = v13;
  a1[1] = v16;
  v28 = v24;
  v25 = a1[2];
  a1[2] = v14;
  v29 = v25;
  v27 = (char *)v24.i64[0];
  std::__split_buffer<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul> &>::~__split_buffer((uint64_t)&v27);
  return v16;
}

void std::vector<double,TInlineBufferAllocator<double,6ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(void **a1, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  char *v13;
  void **v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v6 = __src;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  v10 = (v8 - (uint64_t)*a1) >> 3;
  if (v10 < a4)
  {
    if (v9)
    {
      a1[1] = v9;
      v11 = a1 + 9;
      if (a1 + 3 <= (void **)v9 && v11 > (void **)v9)
      {
        if (&v9[8 * v10] == *v11)
          *v11 = v9;
      }
      else
      {
        operator delete(v9);
      }
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v19 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v19 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20 >> 61)
      abort();
    v9 = (char *)a1[9];
    v21 = (unint64_t)&v9[8 * v20];
    if (v21 <= (unint64_t)(a1 + 9))
      a1[9] = (void *)v21;
    else
      v9 = (char *)operator new(8 * v20);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[8 * v20];
    v17 = a3 - v6;
    if (v17)
      memmove(v9, v6, v17);
    v14 = a1 + 1;
    goto LABEL_31;
  }
  v14 = a1 + 1;
  v13 = (char *)a1[1];
  v15 = (v13 - v9) >> 3;
  if (v15 >= a4)
  {
    v17 = a3 - __src;
    if (a3 == __src)
      goto LABEL_31;
    v18 = (char *)*a1;
LABEL_15:
    memmove(v18, __src, v17);
    goto LABEL_31;
  }
  v16 = &__src[8 * v15];
  if (v13 != v9)
  {
    memmove(*a1, __src, 8 * v15);
    v9 = (char *)*v14;
  }
  v17 = a3 - v16;
  if (v17)
  {
    v18 = v9;
    __src = v16;
    goto LABEL_15;
  }
LABEL_31:
  *v14 = &v9[v17];
}

void std::vector<double,TInlineBufferAllocator<double,6ul>>::__destroy_vector::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 72);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 72))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::__function::__func<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1,std::allocator<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1>,void ()(double,double)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1,std::allocator<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1>,void ()(double,double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DC908;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1,std::allocator<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1>,void ()(double,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DC908;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1,std::allocator<TDecorationRun::CalculateGlyphIntersections(CGAffineTransform,TRun const&,double,double,std::function<void ()(double,double)> const&)::$_1>,void ()(double,double)>::operator()(uint64_t a1, double *a2, double *a3)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v9;
  double v10;

  v3 = *(double **)(a1 + 8);
  v4 = v3[4];
  v5 = v3[2] * 0.0;
  v6 = v4 + v5 + *v3 * *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v9 = v4 + v5 + *v3 * *a3;
  v10 = v6;
  if (!v7)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1848D148CLL);
  }
  return (*(uint64_t (**)(uint64_t, double *, double *))(*(_QWORD *)v7 + 48))(v7, &v10, &v9);
}

void std::__function::__func<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_1E15E0838;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E15E0838;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1},std::allocator<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1}>,void ()(double,double)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1},std::allocator<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15DC8C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1},std::allocator<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DC8C0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1},std::allocator<void TDecorationRun::EnumerateLine<`anonymous namespace'::TRunAdapter>(TLineDrawContext const&,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,void({block_pointer})(CGPoint,CGPoint))::{lambda(double,double)#1}>,void ()(double,double)>::operator()(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double result;

  v3 = *a3;
  v4 = **(double **)(a1 + 8);
  v5 = *a2 - v4;
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(double **)(a1 + 32);
  if (v5 - *v6 > **(double **)v7)
  {
    (*(void (**)(double, double, double, double))(**(_QWORD **)(v7 + 16) + 16))(*v6 + **(double **)(v7 + 8), v6[1] + *(double *)(*(_QWORD *)(v7 + 8) + 8), v5 + **(double **)(v7 + 8), *(double *)(*(_QWORD *)(a1 + 16) + 8) + *(double *)(*(_QWORD *)(v7 + 8) + 8));
    v4 = **(double **)(a1 + 8);
    v6 = *(double **)(a1 + 32);
  }
  result = v3 + v4;
  *v6 = result;
  return result;
}

uint64_t ___ZZN14TDecorationRun22EnumerateDecorationRunIN12_GLOBAL__N_111TRunAdapterEEEvRK16TLineDrawContextT_S6_7CFRangeP18TDecoratorObserverdENKUl7CGPointSA_E_cvU13block_pointerFvSA_SA_EEv_block_invoke(uint64_t result, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD v13[6];
  __int128 v14;
  _OWORD v15[3];

  v12 = **(_QWORD **)(result + 32);
  if (*(_DWORD *)v12 == 1)
  {
    memset(v15, 170, 40);
    v13[5] = -1;
    v14 = unk_18494CE20;
    v13[0] = 0xAAAAAAAA00000001;
    *(double *)&v13[1] = a2;
    *(double *)&v13[2] = a3;
    *(double *)&v13[3] = a4;
    *(double *)&v13[4] = a5;
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8), 1, v13, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t __copy_helper_block_8_32c151_ZTSKZN14TDecorationRun22EnumerateDecorationRunIN12_GLOBAL__N_111TRunAdapterEEEvRK16TLineDrawContextT_S6_7CFRangeP18TDecoratorObserverdEUl7CGPointSA_E_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void TDecorationRun::DrawLine<TRun const*>(uint64_t a1, CGContextRef c, __n128 *a3, __n128 *a4, const CGFloat *a5, const double *a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v14;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  TDecorationRun *v22;
  double v23;
  double v24;
  const CGFloat *v25;
  const double *v26;
  __int128 v27;
  double v28;
  CGFloat v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  double *v34;
  double v35;
  CGAffineTransform v36;
  __int128 v37;
  CGAffineTransform v38;
  double *v39;
  double *v40;
  uint64_t v41;
  TDecorationRun **v42;
  const CGFloat **v43;
  const double **v44;
  uint64_t v45;
  double v46;
  const double *v47;
  const CGFloat *v48;
  CGContextRef v49;
  __int128 v50;
  _QWORD v51[2];
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v14 = a12;
  v54 = *MEMORY[0x1E0C80C00];
  *(double *)v51 = a7;
  *(double *)&v51[1] = a8;
  *(double *)&v50 = a9;
  *((double *)&v50 + 1) = a10;
  v48 = a5;
  v49 = c;
  v47 = a6;
  v17 = *(double *)(a1 + 32) * 0.75;
  v45 = *(_QWORD *)(a1 + 32);
  v46 = v17;
  if (*(_BYTE *)(a1 + 16))
  {
    v14 = a12 - a10 * 2.0;
    a10 = a10 - a10 * 2.0;
    *((double *)&v50 + 1) = a10;
  }
  v39 = &v46;
  v40 = (double *)v51;
  v41 = a1;
  v42 = &v49;
  v43 = &v48;
  v44 = &v47;
  if (*(_DWORD *)a1)
  {
    if (a11 - a9 <= v17)
      return;
    v18 = a7 + a9;
    v19 = a8 + a10;
    v20 = a7 + a11;
    v21 = a8 + v14;
    v22 = c;
    v23 = v18;
    v24 = v19;
    v25 = a5;
    v26 = a6;
    goto LABEL_17;
  }
  *(_QWORD *)&v27 = -1;
  *((_QWORD *)&v27 + 1) = -1;
  *(_OWORD *)&v38.c = v27;
  *(_OWORD *)&v38.tx = v27;
  *(_OWORD *)&v38.a = v27;
  CGContextGetTextMatrix(&v38, c);
  v37 = v50;
  if (a3 != a4)
  {
    while (1)
    {
      v36 = v38;
      v28 = *(double *)(a1 + 32) * 0.5;
      v29 = *((double *)&v50 + 1) - v28;
      v30 = *((double *)&v50 + 1) + v28;
      v31 = operator new(0x28uLL);
      *v31 = &off_1E15E0880;
      v31[1] = &v45;
      v31[2] = &v50;
      v31[3] = &v39;
      v31[4] = &v37;
      v53 = v31;
      TDecorationRun::CalculateGlyphIntersections(a1, &v36.a, a3, (uint64_t)v52, v29, v30);
      v32 = v53;
      if (v53 == v52)
        break;
      if (v53)
      {
        v33 = 5;
LABEL_11:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      a3 += 20;
      if (a3 == a4)
      {
        v34 = v39;
        goto LABEL_15;
      }
    }
    v32 = v52;
    v33 = 4;
    goto LABEL_11;
  }
  v34 = &v46;
LABEL_15:
  if (a11 - *(double *)&v37 > *v34)
  {
    v35 = v40[1];
    v23 = *(double *)&v37 + *v40;
    v24 = *((double *)&v37 + 1) + v35;
    v20 = a11 + *v40;
    v21 = v14 + v35;
    v22 = *v42;
    v25 = *v43;
    v26 = *v44;
LABEL_17:
    TDecorationRun::DrawLineSegment(v22, v25, *(CGPoint *)&v23, *(CGPoint *)&v20, v26);
  }
}

void std::__function::__func<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15E0880;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E0880;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<TRun const*>(CGContext *,CGPoint,TRun const*,TRun const*,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::operator()(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v10;
  double *v11;
  double v12;
  double result;
  CGPoint v14;
  CGPoint v15;

  v3 = *a3;
  v4 = **(double **)(a1 + 8);
  v5 = *a2 - v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(double **)(a1 + 32);
  v8 = *v7;
  if (v5 - *v7 > **(double **)v6)
  {
    v10 = v7[1];
    v11 = *(double **)(v6 + 8);
    v12 = v11[1];
    v14.x = v8 + *v11;
    v14.y = v10 + v12;
    v15.x = v5 + *v11;
    v15.y = *(double *)(*(_QWORD *)(a1 + 16) + 8) + v12;
    TDecorationRun::DrawLineSegment(**(TDecorationRun ***)(v6 + 24), **(const CGFloat ***)(v6 + 32), v14, v15, **(const double ***)(v6 + 40));
    v4 = **(double **)(a1 + 8);
    v7 = *(double **)(a1 + 32);
  }
  result = v3 + v4;
  *v7 = result;
  return result;
}

void std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E15DFB48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15DFB48;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_0>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::operator()(uint64_t a1, CFIndex *a2, const __CFDictionary **a3, _QWORD *a4, _BYTE **a5)
{
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *v8;
  _BYTE *v9;
  _BYTE *v10;
  _DWORD *v11;
  uint64_t v12;
  const __CFString **v13;
  uint64_t v14;
  void *StrikethroughColor;
  uint64_t v16;
  double Width;
  double v18;
  double *v19;
  _OWORD v20[10];
  CFRange v21;

  v6 = *a2;
  v7 = a2[1];
  v8 = *a3;
  v9 = (_BYTE *)*a4;
  v10 = *a5;
  v20[6] = xmmword_18494CEB8;
  memset(&v20[7], 170, 40);
  v20[3] = unk_18494CE88;
  memset(&v20[4], 255, 32);
  memset(v20, 170, 48);
  v11 = *(_DWORD **)(a1 + 16);
  TAttributes::TAttributes((TAttributes *)v20, *(const TAttributes **)(a1 + 8), v8);
  if (*v11 == 1)
  {
    if ((BYTE9(v20[8]) & 0x10) != 0)
    {
      **(_BYTE **)(a1 + 24) = 1;
      v14 = *(_QWORD *)(a1 + 32);
      StrikethroughColor = (void *)TAttributes::GetStrikethroughColor((TAttributes *)v20, v12, v13);
      goto LABEL_12;
    }
  }
  else if (!*v11 && (BYTE9(v20[8]) & 4) != 0)
  {
    **(_BYTE **)(a1 + 24) = 1;
    v14 = *(_QWORD *)(a1 + 32);
    StrikethroughColor = (void *)TAttributes::GetUnderlineColor((TAttributes *)v20, v12, v13);
LABEL_12:
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v14 + 8), StrikethroughColor);
    goto LABEL_13;
  }
  v16 = **(_QWORD **)(a1 + 48);
  v21.location = v6;
  v21.length = v7;
  Width = TStorageRange::GetWidth((TStorageRange *)(v16 + 192), v21);
  v18 = 0.0;
  if (!v6)
  {
    v19 = *(double **)(v16 + 312);
    if (!v19)
      v19 = (double *)MEMORY[0x1E0C9D820];
    v18 = *v19;
  }
  **(double **)(a1 + 40) = Width + v18 + **(double **)(a1 + 40);
  v10 = v9;
LABEL_13:
  *v10 = 1;
  TAttributes::~TAttributes((TAttributes *)v20);
}

void std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_1E15DFB90;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_1E15DFB90;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void std::__function::__func<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1,std::allocator<TDecorator::NextDecorationRun(double,TLine const&,TInlineVector<DecorationOverride,30ul> *,TDecorationRun &)::$_1>,void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::operator()(uint64_t a1, uint64_t *a2, const __CFDictionary **a3, _BYTE **a4, _BYTE **a5)
{
  uint64_t v6;
  const __CFString **v7;
  const __CFDictionary *v8;
  _BYTE *v9;
  _BYTE *v10;
  int *v11;
  double v12;
  unint64_t *v13;
  double v14;
  int v15;
  _DWORD *v16;
  CFTypeRef *v17;
  CFTypeRef v18;
  int v19;
  double *v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CFTypeRef cf2;
  int v34;
  _OWORD v35[10];

  v6 = *a2;
  v7 = (const __CFString **)a2[1];
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *(int **)(a1 + 40);
  v35[6] = xmmword_18494CEB8;
  memset(&v35[7], 170, 40);
  v35[3] = unk_18494CE88;
  memset(&v35[4], 255, 32);
  memset(v35, 170, 48);
  TAttributes::TAttributes((TAttributes *)v35, *(const TAttributes **)(a1 + 8), v8);
  v34 = 0;
  v32 = 0.0;
  cf2 = 0;
  v30 = 0.0;
  v31 = 0.0;
  v12 = **(double **)(a1 + 16);
  v13 = **(unint64_t ***)(a1 + 24);
  v14 = *(double *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *v11;
  v28 = *(BOOL **)(a1 + 48);
  v29 = 0.0;
  if ((GetDecorationAttributes(v13, v6, v7, (TAttributes *)v35, v15, &v34, &cf2, &v32, v12, v14, &v31, &v30, &v29, v28) & 1) == 0)
    goto LABEL_13;
  *(_BYTE *)(*(_QWORD *)(a1 + 64) + 16) = **(_BYTE **)(a1 + 48);
  v16 = *(_DWORD **)(a1 + 72);
  if (*v16 == -1)
  {
    *v16 = v34;
    **(_QWORD **)(a1 + 80) = cf2;
  }
  else
  {
    if (v34 != *v16)
      goto LABEL_13;
    v17 = *(CFTypeRef **)(a1 + 80);
    v18 = *v17;
    if (*v17 != cf2 && (!v18 || !cf2 || !CFEqual(v18, cf2)))
      goto LABEL_13;
  }
  v19 = *v11;
  if (*v11 == 1 && **(_QWORD **)(a1 + 88) > **(_QWORD **)(a1 + 96) && **(double **)(a1 + 104) != v31)
  {
LABEL_13:
    **(_BYTE **)(a1 + 56) = 1;
    *v10 = 1;
    goto LABEL_14;
  }
  **(double **)(a1 + 112) = v32 + **(double **)(a1 + 112);
  v20 = *(double **)(a1 + 120);
  v21 = *v20;
  if (*v20 < v30)
    v21 = v30;
  *v20 = v21;
  if (v19)
  {
    v22 = v31;
    v23 = *(double **)(a1 + 104);
  }
  else
  {
    v23 = *(double **)(a1 + 104);
    v22 = v31;
    if (v31 >= *v23)
      v22 = *v23;
  }
  *v23 = v22;
  v24 = *(double **)(a1 + 128);
  v25 = *v24;
  if (*v24 < v29)
    v25 = v29;
  *v24 = v25;
  *v9 = 1;
  v26 = *(_QWORD **)(a1 + 96);
  v27 = v26[1];
  if (**(_QWORD **)(a1 + 88) == v27 + *v26)
    v26[1] = v27 + 1;
LABEL_14:
  TAttributes::~TAttributes((TAttributes *)v35);
}

void LanguagesWithLangSysTag(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  const __CFAllocator *v6;
  int v7;
  __CFString *v8;
  __CFArray *v9;
  int v10;
  __CFString *v11;
  __CFArray *v12;
  unint64_t v13;
  void *v14;
  const __CFAllocator *v15;
  __CFString *v16;
  char cStr;
  char v18;
  char v19;
  char v20;
  void *values;

  v4 = 6352;
  v5 = &kLanguageToLangSysMappings[8];
  do
  {
    if (*((_DWORD *)v5 - 1) == a1)
    {
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v7 = *((_DWORD *)v5 - 2);
      cStr = HIBYTE(v7);
      v18 = BYTE2(v7);
      v19 = BYTE1(v7);
      v20 = 0;
      v8 = (__CFString *)CFStringCreateWithCString(v6, &cStr, 0x600u);
      v9 = (__CFArray *)atomic_load((unint64_t *)&values);
      CFArrayAppendValue(v9, v8);

      if (v4 != 8)
      {
        do
        {
          if (*((_DWORD *)v5 + 1) == a1)
          {
            v10 = *(_DWORD *)v5;
            v5 += 8;
            cStr = HIBYTE(v10);
            v18 = BYTE2(v10);
            v19 = BYTE1(v10);
            v20 = 0;
            v11 = (__CFString *)CFStringCreateWithCString(v6, &cStr, 0x600u);
            v12 = (__CFArray *)atomic_load((unint64_t *)&values);
            CFArrayAppendValue(v12, v11);

          }
          else
          {
            v5 += 8;
          }
        }
        while (v5 != (char *)&kMasterFeatureMap);
      }
      do
        v13 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      *a2 = v13;
      v14 = values;
      goto LABEL_14;
    }
    v5 += 8;
    v4 -= 8;
  }
  while (v4);
  if (a1 == 32)
  {
    cStr = __tolower(HIBYTE(a1));
    v18 = __tolower(BYTE2(a1));
    v19 = __tolower(BYTE1(a1));
    v20 = 0;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &cStr, 0x600u);
    values = v16;
    *a2 = CFArrayCreate(v15, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v14 = v16;
LABEL_14:

    return;
  }
  *a2 = 0;
}

uint64_t ScriptCodeForScriptTag(unsigned int a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  unsigned int v12;
  unsigned int v13;

  v13 = a1;
  {
    ScriptCodeForScriptTag::sMap = 0u;
    unk_1EDD176C0 = 0u;
    dword_1EDD176D0 = 1065353216;
  }
  os_unfair_lock_lock_with_options();
  v2 = std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(&ScriptCodeForScriptTag::sMap, &v13);
  if (v2)
  {
    v3 = *((unsigned int *)v2 + 5);
  }
  else
  {
    v4 = v13;
    if (v13 == 1145457748)
    {
      v5 = -1;
    }
    else
    {
      v5 = 2;
      while ((v5 & 0x7FFFFFFD) == 0x14 || ScriptTagForScriptCode(v5) != v4)
      {
        if (++v5 == 200)
        {
          v6 = 0;
          v7 = 201;
          do
          {
            v5 = v7;
            v8 = ScriptTagForScriptCode(v7);
            if ((v6 & 1) != 0)
              break;
            v7 = 202;
            v6 = 1;
          }
          while (v8 != v4);
          if (v8 != v4)
            v5 = -1;
          break;
        }
      }
    }
    v12 = v5;
    v9 = std::__hash_table<std::__hash_value_type<unsigned int,UScriptCode>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,UScriptCode>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,UScriptCode>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,UScriptCode>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,UScriptCode&>((float *)&ScriptCodeForScriptTag::sMap, &v13, &v13, (int *)&v12);
    v3 = v12;
    if (!v10)
      *((_DWORD *)v9 + 5) = v12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&ScriptCodeForScriptTag::sLock);
  return v3;
}

unint64_t NumberOfGlyphVariants(const TBaseFont *a1, int a2)
{
  const __CFData *CommonTable;
  const __CFData *v3;
  unint64_t BytePtr;
  const UInt8 *v5;
  unsigned __int16 *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  unsigned int v45;
  unsigned int v46;
  __int16 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 *v58[5];
  char *v59;
  unsigned __int16 v60;
  void *v61;
  int v62;
  _BYTE v63[24];
  _BYTE *v64;
  _QWORD v65[3];
  _QWORD *v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  _OWORD v70[4];
  _OWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v62 = a2;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1, 1196643650, 0);
  if (!CommonTable)
    return 0;
  v3 = CommonTable;
  BytePtr = (unint64_t)CFDataGetBytePtr(CommonTable);
  if (BytePtr)
  {
    v5 = CFDataGetBytePtr(v3);
    if (v5)
      v6 = (unsigned __int16 *)&v5[CFDataGetLength(v3)];
    else
      v6 = 0;
    v61 = v6;
    if (!*(_WORD *)(BytePtr + 6))
      return 0;
    v7 = (_WORD *)(BytePtr + __rev16(*(unsigned __int16 *)(BytePtr + 6)));
    v8 = (char *)(v7 + 1);
    if (v7 + 1 > v6)
      return 0;
    v9 = bswap32((unsigned __int16)*v7) >> 16;
    v10 = (unint64_t)&v8[6 * v9];
    if (v10 < (unint64_t)v8 || v10 > (unint64_t)v6)
    {
      v12 = ((char *)v6 - v8) / 6uLL;
      if (v7 + 4 > v6)
        v12 = 0;
      if (v12 != v9)
        return 0;
    }
    if (!*(_WORD *)(BytePtr + 8))
      return 0;
    v13 = (unsigned __int16 *)(BytePtr + __rev16(*(unsigned __int16 *)(BytePtr + 8)));
    v14 = v13 + 1;
    if (v13 + 1 > v6)
      return 0;
    v15 = bswap32(*v13) >> 16;
    v16 = (unint64_t)&v14[v15];
    v17 = v13 + 2 <= v6 ? (unint64_t)((char *)v6 - (char *)v14) >> 1 : 0;
    v18 = v16 <= (unint64_t)v6 && v16 >= (unint64_t)v14;
    if (!v18 && v17 != v15)
      return 0;
    *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v70[3] = v20;
    v70[2] = v20;
    v70[1] = v20;
    v70[0] = v20;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v71 = v70;
    v65[0] = &off_1E15DF170;
    v65[1] = &v62;
    v65[2] = &v67;
    v66 = v65;
    OTL::GCommon::IterateFeatureTables(BytePtr, v7, (unint64_t)v6, (uint64_t)v65);
    v21 = v66;
    if (v66 == v65)
    {
      v22 = 4;
      v21 = v65;
    }
    else
    {
      if (!v66)
        goto LABEL_36;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_36:
    v24 = std::__unique[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::__equal_to &>(v67, v68);
    v25 = v67;
    if (v68 != v24)
      v68 = v24;
    v26 = *v13;
    v60 = 0;
    if (v67 == v24)
    {
LABEL_101:
      BytePtr = 0;
    }
    else
    {
      v57 = bswap32(v26) >> 16;
      do
      {
        v27 = *v25;
        if (v27 >= v57)
          break;
        v28 = (unsigned __int16 *)((char *)v13 + (bswap32(v13[v27 + 1]) >> 16));
        v29 = v28 + 3;
        if ((unint64_t)(v28 + 2) < BytePtr || v29 > v61)
          goto LABEL_101;
        v31 = v28[2];
        v32 = __rev16(v31);
        v33 = (unint64_t)&v28[v32 + 3] + (((unint64_t)v28[1] >> 11) & 2);
        v34 = BytePtr <= (unint64_t)v28 && v33 >= (unint64_t)v28;
        if (!v34 || v33 > (unint64_t)v61)
          goto LABEL_101;
        v36 = (unint64_t)&v29[v32];
        if (v28 + 4 <= v61)
          v37 = ((_DWORD)v61 - (_DWORD)v29) >> 1;
        else
          v37 = 0;
        v38 = bswap32(v37) >> 16;
        v39 = v36 < (unint64_t)v29 || v36 > (unint64_t)v61;
        if (v39)
          v40 = (unsigned __int16)v37;
        else
          v40 = v32;
        if (v39)
          v31 = v38;
        if (v31)
        {
          v41 = 2 * v40;
          while (1)
          {
            v42 = (char *)v28 + (bswap32(*v29) >> 16);
            if (v42 + 2 > v61)
              goto LABEL_101;
            v43 = *v28;
            if (v43 == 1792)
            {
              if (*(_WORD *)v42 != 256 || v42 + 8 > v61)
                goto LABEL_101;
              v45 = *((unsigned __int16 *)v42 + 1);
              if (v45 == 1792)
                goto LABEL_101;
              v42 += bswap32(*((_DWORD *)v42 + 1));
              if (v42 + 2 > v61)
                goto LABEL_101;
              v46 = __rev16(v45);
            }
            else
            {
              v46 = __rev16(v43);
            }
            if (v46 != 3)
            {
              if (v46 == 7)
                goto LABEL_101;
              v47 = v60;
              if (v60 <= 1u)
                v47 = 1;
              v60 = v47;
              goto LABEL_98;
            }
            v59 = v42;
            v48 = (unint64_t)(v42 + 6);
            if (v42 + 6 > v61)
              goto LABEL_101;
            v49 = bswap32(*((unsigned __int16 *)v42 + 2)) >> 16;
            v50 = v48 + 2 * v49;
            v51 = v42 + 8 <= v61 ? ((unint64_t)v61 - v48) >> 1 : 0;
            v52 = v50 <= (unint64_t)v61 && v50 >= v48;
            if (!v52 && v51 != v49)
              goto LABEL_101;
            OTL::LookupWithCoverage::GetCoverage((OTL::Coverage *)v42, (unint64_t)v61, (uint64_t)v58);
            v54 = operator new(0x20uLL);
            *v54 = &off_1E15DF1B8;
            v54[1] = &v59;
            v54[2] = &v61;
            v54[3] = &v60;
            v64 = v54;
            OTL::Coverage::Iterate(v58, (uint64_t)v63);
            v55 = v64;
            if (v64 == v63)
              break;
            if (v64)
            {
              v56 = 5;
LABEL_97:
              (*(void (**)(void))(*v55 + 8 * v56))();
            }
LABEL_98:
            ++v29;
            v41 -= 2;
            if (!v41)
              goto LABEL_99;
          }
          v55 = v63;
          v56 = 4;
          goto LABEL_97;
        }
LABEL_99:
        ++v25;
      }
      while (v25 != v24);
      BytePtr = v60;
    }
    v58[0] = (unsigned __int16 *)&v67;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v58);
  }
  return BytePtr;
}

uint64_t NameIDForCharacterVariant(TBaseFont *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v9;
  const __CFData *CommonTable;
  unsigned __int16 *v11;
  const __CFData *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v9 = (((a2 - 10 * ((205 * a2) >> 11)) | ((205 * a2) >> 11 << 8)) + 12288) | 0x63760030;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1, 1196643650, 0);
  if (CommonTable
    && (v11 = (unsigned __int16 *)FeatureParamsForTag<OTL::CharacterVariantFeatureParams>(CommonTable, v9)) != 0
    || (v12 = (const __CFData *)TBaseFont::GetCommonTable(a1, 1196445523, 0)) != 0
    && (v11 = (unsigned __int16 *)FeatureParamsForTag<OTL::CharacterVariantFeatureParams>(v12, v9)) != 0)
  {
    v13 = v11[3];
    if (!*(_BYTE *)(a3 + 2))
      *(_BYTE *)(a3 + 2) = 1;
    *(_WORD *)a3 = __rev16(v13);
    v14 = v11[2];
    if (!*(_BYTE *)(a4 + 2))
      *(_BYTE *)(a4 + 2) = 1;
    *(_WORD *)a4 = __rev16(v14);
    std::vector<int,TInlineBufferAllocator<int,30ul>>::resize((uint64_t)a5, bswap32(v11[4]) >> 16);
    v15 = (_DWORD *)*a5;
    v16 = (_DWORD *)a5[1];
    if ((_DWORD *)*a5 != v16)
    {
      v17 = bswap32(v11[5]) >> 16;
      do
        *v15++ = (unsigned __int16)v17++;
      while (v15 != v16);
    }
    v18 = bswap32(v11[1]);
    v19 = HIWORD(v18) & 0xFF00;
    v20 = BYTE2(v18);
    v21 = 0x10000;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v21 = 0;
  }
  return v19 | v20 | v21;
}

void std::vector<int,TInlineBufferAllocator<int,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__append((char **)a1, a2 - v2);
  }
}

const __CFData *NameIDForStylisticSet(const TBaseFont *a1, int a2)
{
  const __CFData *result;

  result = FeatureParamsForTag<OTL::StylisticSetFeatureParams>(a1, (((a2 - 10 * ((205 * a2) >> 11)) | ((205 * a2) >> 11 << 8))+ 12288) | 0x73730030);
  if (result)
    return (const __CFData *)((bswap32(*((unsigned __int16 *)result + 1)) >> 16) | 0x10000);
  return result;
}

uint64_t GetCharacterVariantOrStylisticSet(__int16 a1)
{
  unsigned __int8 v1;
  int v2;

  v1 = a1 + 10 * HIBYTE(a1) - 16;
  v2 = a1 + 10 * HIBYTE(a1) != 528;
  if (a1 - 48 > 9 || HIBYTE(a1) - 48 > 9)
  {
    v1 = 0;
    v2 = 0;
  }
  return v1 | (v2 << 8);
}

void CopyStaticOTFeatureName(unsigned int *a1@<X1>, int a2@<W0>, unint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const __CFString *v14;
  id v15;

  if ((a2 & 0x80000000) == 0)
    goto LABEL_2;
  if (v7 != v6 && (v8 = v6, CFStringFind((CFStringRef)*((_QWORD *)v6 + 1), CFSTR("%d"), 0xCuLL).location == -1))
  {
    if (a1)
      *a1 = (unint64_t)(v8 - (char *)&CopyStaticOTFeatureName(int,unsigned int *)::kMasterFeatureNameStrings) >> 4;
    CTCopyLocalizedString(*((CFStringRef *)v8 + 1), CFSTR("OpenType"), a3);
  }
  else
  {
    v9 = -a2;
    v10 = v9 / 0xC8;
    if (v11 == v12)
    {
LABEL_2:
      *a3 = 0;
      return;
    }
    if (a1)
      *a1 = (unint64_t)(v11 - (char *)&CopyStaticOTFeatureName(int,unsigned int *)::kMasterFeatureNameStrings) >> 4;
    if (v9 / 0xC8 == 36)
      v13 = (unsigned __int16)((__int16)(~(200 * v10) + v9 + (((~(200 * v10) + v9) & 0x8000) >> 15)) >> 1);
    else
      v13 = ~(200 * v10) + v9;
    CTCopyLocalizedString(*((CFStringRef *)v11 + 1), CFSTR("OpenType"), (unint64_t *)&v15);
    v14 = (const __CFString *)atomic_load((unint64_t *)&v15);
    CreateLocalizedStringWithFormat(v14, a3, v13);

  }
}

char *std::equal_range[abi:nn180100]<`anonymous namespace'::NameString const*,int,std::greater<int>>(int a1)
{
  char *v1;
  const char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;

  v1 = (char *)&CopyStaticOTFeatureName(int,unsigned int *)::kMasterFeatureNameStrings;
  v2 = "mond";
  v3 = 91;
  while (1)
  {
    v4 = v3 >> 1;
    v5 = &v1[16 * (v3 >> 1)];
    if (*(_DWORD *)v5 <= a1)
      break;
    v1 = v5 + 16;
    v4 = v3 + ~v4;
LABEL_6:
    v3 = v4;
    if (!v4)
      return v1;
  }
  if (*(_DWORD *)v5 < a1)
  {
    v2 = &v1[16 * (v3 >> 1)];
    goto LABEL_6;
  }
  v6 = &v1[16 * (v3 >> 1)];
  if (v3 >= 2)
  {
    v6 = v1;
    do
    {
      v7 = v4 >> 1;
      v8 = &v6[16 * (v4 >> 1)];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 16;
      v4 += ~(v4 >> 1);
      if (v10 <= a1)
        v4 = v7;
      else
        v6 = v9;
    }
    while (v4);
  }
  v11 = v5 + 16;
  if (v2 == v5 + 16)
    return v6;
  v12 = (v2 - (v5 + 16)) >> 4;
  do
  {
    v13 = v12 >> 1;
    v14 = &v11[4 * (v12 >> 1)];
    v16 = *v14;
    v15 = v14 + 4;
    v12 += ~(v12 >> 1);
    if (v16 < a1)
      v12 = v13;
    else
      v11 = v15;
  }
  while (v12);
  return v6;
}

void CopyLocalizedOTFeatureName(const __CFString *a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;

  if (a1)
  {
    v3 = FourCharCodeFromString(a1);
    v4 = 0;
    while (*(_DWORD *)&CopyLocalizedOTFeatureName(__CFString const*)::kOTFeatureNames[v4] != v3)
    {
      v4 += 16;
      if (v4 == 128)
        goto LABEL_7;
    }
    CTCopyLocalizedString(*(CFStringRef *)&CopyLocalizedOTFeatureName(__CFString const*)::kOTFeatureNames[v4 + 8], CFSTR("OpenType"), a2);
  }
  else
  {
LABEL_7:
    *a2 = 0;
  }
}

uint64_t *std::equal_range[abi:nn180100]<`anonymous namespace'::FeatureMapEntry const*,unsigned int>(unsigned int *a1)
{
  uint64_t *result;
  __int128 *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  _DWORD *v17;
  unsigned int v18;

  result = &kMasterFeatureMap;
  v3 = &__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf;
  v4 = *a1;
  v5 = 165;
  while (1)
  {
    v6 = v5 >> 1;
    v7 = (unsigned int *)result + 3 * (v5 >> 1);
    if (*v7 >= v4)
      break;
    result = (uint64_t *)(v7 + 3);
    v6 = v5 + ~v6;
LABEL_6:
    v5 = v6;
    if (!v6)
      return result;
  }
  if (*v7 > v4)
  {
    v3 = (__int128 *)((char *)result + 12 * (v5 >> 1));
    goto LABEL_6;
  }
  v8 = (uint64_t *)((char *)result + 12 * (v5 >> 1));
  if (v5 >= 2)
  {
    v8 = result;
    do
    {
      v9 = v6 >> 1;
      v10 = (_DWORD *)v8 + 3 * (v6 >> 1);
      v12 = *v10;
      v11 = (uint64_t *)(v10 + 3);
      v6 += ~(v6 >> 1);
      if (v12 >= v4)
        v6 = v9;
      else
        v8 = v11;
    }
    while (v6);
  }
  v13 = v7 + 3;
  if (v3 == (__int128 *)(v7 + 3))
    return v8;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)(v7 + 3)) >> 2);
  do
  {
    v15 = v14 >> 1;
    v16 = &v13[3 * (v14 >> 1)];
    v18 = *v16;
    v17 = v16 + 3;
    v14 += ~(v14 >> 1);
    if (v18 > v4)
      v14 = v15;
    else
      v13 = v17;
  }
  while (v14);
  return v8;
}

uint64_t IsOTFeatureFontSpecific(unsigned int a1)
{
  int v1;
  uint64_t result;
  unint64_t v3;

  v3 = 0xAAAAAAAAAAAAAAAALL;
  v1 = ConvertOTFeatureToAATFeature(a1, (uint64_t)&v3);
  result = 1;
  if (v1 && (unsigned __int16)v3 != 35)
  {
    if ((v3 & 0x800000000000) != 0)
      return 1;
    else
      return (HIDWORD(v3) >> 6) & 1;
  }
  return result;
}

uint64_t ConvertOTFeatureToAATFeature(unsigned int a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v11;

  v11 = a1;
  if (v4 != v5)
  {
    v6 = *((_DWORD *)v4 + 2);
    if ((~v6 & 0xE) == 0)
    {
      if (a1 != 1667460464)
        return 2 * (v6 == 14);
      v7 = 27;
      goto LABEL_20;
    }
    if (v4 != (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf)
    {
      while (*(_DWORD *)v4 <= a1)
      {
        if (*(_DWORD *)v4 == a1 && (v4[1] & 0x44) != 4)
          goto LABEL_14;
        v4 = (uint64_t *)((char *)v4 + 12);
        if (v4 == (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf)
          break;
      }
    }
    v4 = (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf;
LABEL_14:
    if ((v4[1] & 8) == 0)
    {
      v9 = *(uint64_t *)((char *)v4 + 4);
      *(_QWORD *)a2 = v9;
      if ((v4[1] & 0x40) != 0)
        *(_WORD *)(a2 + 2) = WORD1(v9) + 1;
      return 1;
    }
    if ((v4[1] & 0x180) == 0x80)
    {
      v7 = 1;
LABEL_20:
      *(_QWORD *)a2 = v7 & 0xFFFF0000FFFFFFFFLL | 0x200000000;
      return 1;
    }
  }
  return 0;
}

uint64_t IsFontSpecificFeatureSetting(CTFeatureSetting *a1)
{
  CTFeatureSetting *v1;
  uint64_t v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  int v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  unsigned int v11;
  uint64_t v12;
  id v14;
  id v15;

  v1 = a1;
  v15 = 0;
  v2 = -[CTFeatureSetting type]((uint64_t)a1);
  if (v2)
  {
    v3 = (const __CFNumber *)v2;
    v4 = (const __CFNumber *)-[CTFeatureSetting selector]((uint64_t)v1);
    LOWORD(v14) = -21846;
    CFNumberGetValue(v3, kCFNumberShortType, &v14);
    v5 = (unsigned __int16)v14;
    LOWORD(v14) = -21846;
    CFNumberGetValue(v4, kCFNumberShortType, &v14);
    CopyOTFeatureSettingForTypeAndSelector(v5, (unsigned __int16)v14, &v14);
    do
      v6 = __ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    do
      v7 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(v6, (unint64_t *)&v15));

    v8 = atomic_load((unint64_t *)&v15);
    if (!v8)
    {
      v9 = 0;
      while (*(unsigned __int16 *)((char *)&kMasterFeatureMap + v9 + 4) != v5
           || (*(_WORD *)((_BYTE *)&kMasterFeatureMap + v9 + 8) & 0x8040) == 0)
      {
        v9 += 12;
        if (v9 == 1980)
          goto LABEL_11;
      }
      goto LABEL_13;
    }
    v1 = (CTFeatureSetting *)atomic_load((unint64_t *)&v15);
  }
LABEL_11:
  v10 = (const __CFString *)-[CTFeatureSetting tag]((uint64_t)v1);
  if (!v10 || (v11 = FourCharCodeFromString(v10), (IsOTFeatureFontSpecific(v11) & 1) == 0))
  {
    v12 = 0;
    goto LABEL_15;
  }
LABEL_13:
  v12 = 1;
LABEL_15:

  return v12;
}

void CopyOTFeatureSettingForTypeAndSelector(int a1@<W0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  CFStringRef v9;
  __CFString *v10;
  CFStringRef v11;
  unsigned int v12;
  char v13;
  char cStr[4];
  char v15;

  if (qword_1ECDE79F8 != -1)
    dispatch_once_f(&qword_1ECDE79F8, 0, (dispatch_function_t)CopyOTFeatureSettingForTypeAndSelector(unsigned short,unsigned short)::$_0::__invoke);
  if (!v6)
    goto LABEL_7;
  v7 = (unsigned int *)v6[3];
  v8 = v7[2];
  if ((v8 & 1) != 0)
  {
    if ((v8 & 0xA) == 0)
    {
      *(_DWORD *)cStr = bswap32(*v7);
      v15 = 0;
      v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
      *a3 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], 0, 0, (uint64_t)v11, (NSNumber *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1));
      v10 = (__CFString *)v11;
      goto LABEL_9;
    }
LABEL_7:
    *a3 = 0;
    return;
  }
  v12 = bswap32(*v7);
  v13 = 0;
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&v12, 0);
  *a3 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], 0, 0, (uint64_t)v9, (NSNumber *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (a2 & 1) == 0));
  v10 = (__CFString *)v9;
LABEL_9:

}

void FallbackForLangSysTag(unsigned int)::$_0::__invoke()
{
  const char *v0;
  char *v1;
  int v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v0 = kLanguageToLangSysMappings;
  v1 = &kLanguageToLangSysMappings[8];
  v2 = 1633776160;
  do
  {
    v3 = (unsigned int *)v0;
    v0 = v1;
    v4 = v2;
    v2 = v3[2];
    if (v2 != v4)
      goto LABEL_42;
    v5 = v3[1];
    v6 = v3[3];
    v7 = *((_QWORD *)&xmmword_1ECDE7A38 + 1);
    if (*((_QWORD *)&xmmword_1ECDE7A38 + 1))
    {
      v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1ECDE7A38 + 8));
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v3[1];
        if (*((_QWORD *)&xmmword_1ECDE7A38 + 1) <= v5)
          v9 = v5 % *((_QWORD *)&xmmword_1ECDE7A38 + 1);
      }
      else
      {
        v9 = (DWORD2(xmmword_1ECDE7A38) - 1) & v5;
      }
      v10 = *(uint64_t ***)(xmmword_1ECDE7A38 + 8 * v9);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v12 == v5)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v5)
              goto LABEL_42;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&xmmword_1ECDE7A38 + 1))
                v12 %= *((_QWORD *)&xmmword_1ECDE7A38 + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&xmmword_1ECDE7A38 + 1) - 1;
            }
            if (v12 != v9)
              break;
          }
        }
      }
    }
    else
    {
      v9 = 0xAAAAAAAAAAAAAAAALL;
    }
    v13 = operator new(0x18uLL);
    *v13 = 0;
    v13[1] = v5;
    *((_DWORD *)v13 + 4) = v5;
    *((_DWORD *)v13 + 5) = v6;
    v14 = (float)(unint64_t)(qword_1ECDE7A50 + 1);
    if (!v7 || (float)(*(float *)&dword_1ECDE7A58 * (float)v7) < v14)
    {
      v15 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v15 = 1;
      v16 = v15 | (2 * v7);
      v17 = vcvtps_u32_f32(v14 / *(float *)&dword_1ECDE7A58);
      if (v16 <= v17)
        v18 = v17;
      else
        v18 = v16;
      std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)&xmmword_1ECDE7A38, v18);
      v7 = *((_QWORD *)&xmmword_1ECDE7A38 + 1);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (*((_QWORD *)&xmmword_1ECDE7A38 + 1) <= v5)
          v9 = v5 % *((_QWORD *)&xmmword_1ECDE7A38 + 1);
        else
          v9 = v5;
      }
      else
      {
        v9 = (DWORD2(xmmword_1ECDE7A38) - 1) & v5;
      }
    }
    v19 = xmmword_1ECDE7A38;
    v20 = *(_QWORD **)(xmmword_1ECDE7A38 + 8 * v9);
    if (v20)
    {
      *v13 = *v20;
LABEL_40:
      *v20 = v13;
      goto LABEL_41;
    }
    *v13 = qword_1ECDE7A48;
    qword_1ECDE7A48 = (uint64_t)v13;
    *(_QWORD *)(v19 + 8 * v9) = &qword_1ECDE7A48;
    if (*v13)
    {
      v21 = *(_QWORD *)(*v13 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      v20 = (_QWORD *)(xmmword_1ECDE7A38 + 8 * v21);
      goto LABEL_40;
    }
LABEL_41:
    ++qword_1ECDE7A50;
LABEL_42:
    v1 = (char *)(v0 + 8);
  }
  while (v0 + 8 != (const char *)&kMasterFeatureMap);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

void LangSysTagsWithFallback(unsigned int)::$_0::__invoke()
{
  const char *v0;
  char *v1;
  int v2;
  char *v3;
  int v4;
  unint64_t v5;
  int v6;
  _DWORD *v7;
  int8x8_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  int8x8_t prime;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t *i;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;

  v0 = kLanguageToLangSysMappings;
  v1 = &kLanguageToLangSysMappings[8];
  v2 = 1633776160;
  do
  {
    v3 = v1;
    v4 = *((_DWORD *)v0 + 2);
    if (v4 != v2)
      goto LABEL_82;
    v5 = *((unsigned int *)v0 + 3);
    v6 = *((_DWORD *)v0 + 1);
    v7 = operator new(0x18uLL);
    v7[4] = v5;
    v7[5] = v6;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = v5;
    v8 = (int8x8_t)qword_1ECDE7A68;
    v9 = (float)(unint64_t)(qword_1ECDE7A78 + 1);
    if (!qword_1ECDE7A68 || (float)(*(float *)&dword_1ECDE7A80 * (float)(unint64_t)qword_1ECDE7A68) < v9)
    {
      v10 = (qword_1ECDE7A68 & (qword_1ECDE7A68 - 1)) != 0;
      if ((unint64_t)qword_1ECDE7A68 < 3)
        v10 = 1;
      v11 = v10 | (2 * qword_1ECDE7A68);
      v12 = vcvtps_u32_f32(v9 / *(float *)&dword_1ECDE7A80);
      if (v11 <= v12)
        prime = (int8x8_t)v12;
      else
        prime = (int8x8_t)v11;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v8 = (int8x8_t)qword_1ECDE7A68;
      }
      if (*(_QWORD *)&prime > *(_QWORD *)&v8)
        goto LABEL_96;
      if (*(_QWORD *)&prime >= *(_QWORD *)&v8)
        goto LABEL_45;
      v20 = vcvtps_u32_f32((float)(unint64_t)qword_1ECDE7A78 / *(float *)&dword_1ECDE7A80);
      if (*(_QWORD *)&v8 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (*(_QWORD *)&prime <= v20)
        prime = (int8x8_t)v20;
      if (*(_QWORD *)&prime >= *(_QWORD *)&v8)
      {
        v8 = (int8x8_t)qword_1ECDE7A68;
        goto LABEL_45;
      }
      if (prime)
      {
LABEL_96:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = operator new(8 * *(_QWORD *)&prime);
        v15 = (void *)qword_1ECDE7A60;
        qword_1ECDE7A60 = (uint64_t)v14;
        if (v15)
          operator delete(v15);
        v16 = 0;
        qword_1ECDE7A68 = (uint64_t)prime;
        do
          *(_QWORD *)(qword_1ECDE7A60 + 8 * v16++) = 0;
        while (*(_QWORD *)&prime != v16);
        v17 = (uint64_t **)qword_1ECDE7A70;
        if (qword_1ECDE7A70)
        {
          v18 = *(_QWORD *)(qword_1ECDE7A70 + 8);
          v19 = (uint8x8_t)vcnt_s8(prime);
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&prime)
              v18 %= *(_QWORD *)&prime;
          }
          else
          {
            v18 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(qword_1ECDE7A60 + 8 * v18) = &qword_1ECDE7A70;
          for (i = *v17; *v17; i = *v17)
          {
            v24 = i[1];
            if (v19.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            if (v24 == v18)
            {
              v17 = (uint64_t **)i;
            }
            else
            {
              v25 = i;
              if (*(_QWORD *)(qword_1ECDE7A60 + 8 * v24))
              {
                do
                {
                  v26 = v25;
                  v25 = (uint64_t *)*v25;
                }
                while (v25 && *((_DWORD *)i + 4) == *((_DWORD *)v25 + 4));
                *v17 = v25;
                *v26 = **(_QWORD **)(qword_1ECDE7A60 + 8 * v24);
                **(_QWORD **)(qword_1ECDE7A60 + 8 * v24) = i;
              }
              else
              {
                *(_QWORD *)(qword_1ECDE7A60 + 8 * v24) = v17;
                v17 = (uint64_t **)i;
                v18 = v24;
              }
            }
          }
        }
        v8 = prime;
      }
      else
      {
        v39 = (void *)qword_1ECDE7A60;
        qword_1ECDE7A60 = 0;
        if (v39)
          operator delete(v39);
        v8 = 0;
        qword_1ECDE7A68 = 0;
      }
    }
LABEL_45:
    v27 = (uint8x8_t)vcnt_s8(v8);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v28 = v5;
      if (*(_QWORD *)&v8 <= v5)
        v28 = v5 % *(_QWORD *)&v8;
    }
    else
    {
      v28 = (v8.i32[0] - 1) & v5;
    }
    v29 = qword_1ECDE7A60;
    v30 = *(uint64_t **)(qword_1ECDE7A60 + 8 * v28);
    if (v30)
    {
      v31 = 0;
      do
      {
        v32 = v30;
        v30 = (uint64_t *)*v30;
        if (!v30)
          break;
        v33 = v30[1];
        if (v27.u32[0] > 1uLL)
        {
          v34 = v30[1];
          if (v33 >= *(_QWORD *)&v8)
            v34 = v33 % *(_QWORD *)&v8;
        }
        else
        {
          v34 = v33 & (*(_QWORD *)&v8 - 1);
        }
        if (v34 != v28)
          break;
        v35 = v33 == v5 && *((_DWORD *)v30 + 4) == v7[4];
        v36 = v31 & !v35;
        v31 |= v35;
      }
      while (v36 != 1);
    }
    else
    {
      v32 = 0;
    }
    if (v27.u32[0] > 1uLL)
    {
      if (*(_QWORD *)&v8 <= v5)
        v5 %= *(_QWORD *)&v8;
    }
    else
    {
      v5 = (v8.i32[0] - 1) & v5;
    }
    if (v32)
    {
      *(_QWORD *)v7 = *v32;
      *v32 = v7;
      if (!*(_QWORD *)v7)
        goto LABEL_81;
      v37 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v27.u32[0] > 1uLL)
      {
        if (v37 >= *(_QWORD *)&v8)
          v37 %= *(_QWORD *)&v8;
      }
      else
      {
        v37 &= *(_QWORD *)&v8 - 1;
      }
      if (v37 == v5)
        goto LABEL_81;
      goto LABEL_80;
    }
    v38 = qword_1ECDE7A70;
    *(_QWORD *)v7 = qword_1ECDE7A70;
    qword_1ECDE7A70 = (uint64_t)v7;
    *(_QWORD *)(v29 + 8 * v5) = &qword_1ECDE7A70;
    if (v38)
    {
      v37 = *(_QWORD *)(v38 + 8);
      if (v27.u32[0] > 1uLL)
      {
        if (v37 >= *(_QWORD *)&v8)
          v37 %= *(_QWORD *)&v8;
      }
      else
      {
        v37 &= *(_QWORD *)&v8 - 1;
      }
LABEL_80:
      *(_QWORD *)(qword_1ECDE7A60 + 8 * v37) = v7;
    }
LABEL_81:
    ++qword_1ECDE7A78;
LABEL_82:
    v1 = v3 + 8;
    v2 = v4;
    v0 = v3;
  }
  while (v3 + 8 != (char *)&kMasterFeatureMap);
}

uint64_t LangSysForChineseLocale(__CFString *a1)
{
  void *v1;
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  int v5;
  void *v6;
  const __CFString *v7;
  __CFString *v8;
  int v9;
  void *v10;
  const __CFString *v11;
  __CFString *v12;
  int v13;
  id v15;

  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  LanguageIdentifierByNormalizing(a1, 3u, (unint64_t *)&v15);
  v1 = (void *)atomic_load((unint64_t *)&v15);
  v2 = v1;
  v3 = (__CFString *)v2;
  v4 = 1514686496;
  if (v2 == CFSTR("zh-HK"))
  {

    goto LABEL_22;
  }
  if (v2)
  {
    v5 = CFEqual(v2, CFSTR("zh-HK"));

    if (v5)
      goto LABEL_22;
  }
  else
  {

  }
  v6 = (void *)atomic_load((unint64_t *)&v15);
  v7 = v6;
  v8 = (__CFString *)v7;
  if (v7 == CFSTR("zh-MO"))
  {

    goto LABEL_12;
  }
  if (v7)
  {
    v9 = CFEqual(v7, CFSTR("zh-MO"));

    if (!v9)
      goto LABEL_14;
LABEL_12:
    v4 = 1514689613;
    goto LABEL_22;
  }

LABEL_14:
  v10 = (void *)atomic_load((unint64_t *)&v15);
  v11 = v10;
  v12 = (__CFString *)v11;
  if (v11 == CFSTR("zh-Hans"))
  {

  }
  else
  {
    if (!v11)
    {

LABEL_21:
      v4 = 1514689568;
      goto LABEL_22;
    }
    v13 = CFEqual(v11, CFSTR("zh-Hans"));

    if (!v13)
      goto LABEL_21;
  }
  v4 = 1514689312;
LABEL_22:

  return v4;
}

uint64_t FindFirstLangSysTagForISO3LanguageTag(unsigned int a1)
{
  const char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  unsigned int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;

  v1 = kLanguageToLangSysMappings;
  v2 = &kLanguageToLangSysMappings[6352];
  v3 = 794;
  while (1)
  {
    v4 = v3 >> 1;
    v5 = &v1[8 * (v3 >> 1)];
    if (*(_DWORD *)v5 >= a1)
      break;
    v1 = v5 + 8;
    v4 = v3 + ~v4;
LABEL_6:
    v3 = v4;
    if (!v4)
      return 0;
  }
  if (*(_DWORD *)v5 > a1)
  {
    v2 = (char *)&v1[8 * (v3 >> 1)];
    goto LABEL_6;
  }
  v7 = &v1[8 * (v3 >> 1)];
  if (v3 >= 2)
  {
    v7 = v1;
    do
    {
      v8 = v4 >> 1;
      v9 = &v7[8 * (v4 >> 1)];
      v11 = *(_DWORD *)v9;
      v10 = v9 + 8;
      v4 += ~(v4 >> 1);
      if (v11 >= a1)
        v4 = v8;
      else
        v7 = v10;
    }
    while (v4);
  }
  v12 = (char *)(v5 + 8);
  if (v2 != v12)
  {
    v13 = (v2 - v12) >> 3;
    v2 = v12;
    do
    {
      v14 = v13 >> 1;
      v15 = &v2[8 * (v13 >> 1)];
      v17 = *(_DWORD *)v15;
      v16 = v15 + 8;
      v13 += ~(v13 >> 1);
      if (v17 > a1)
        v13 = v14;
      else
        v2 = v16;
    }
    while (v13);
  }
  if (v7 == v2)
    return 0;
  return *((unsigned int *)v7 + 1);
}

uint64_t TagByUppercasing(unsigned int a1)
{
  unsigned int v1;
  int v2;
  int v3;

  if (HIBYTE(a1) - 97 >= 0x1Au)
    v1 = a1 & 0xFF000000;
  else
    v1 = (a1 & 0xFF000000) - 0x20000000;
  v2 = BYTE2(a1) << 16;
  if (BYTE2(a1) - 97 < 0x1A)
    v2 -= 0x200000;
  v3 = BYTE1(a1) << 8;
  if (BYTE1(a1) - 97 < 0x1A)
    v3 -= 0x2000;
  return v1 | v2 | v3 | 0x20;
}

void ScriptAndLangSysFromScriptCode(UScriptCode,__CFString const*)::$_1::__invoke()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("ay"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("gd"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("gn"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("grc"), (const void *)0xE);
  CFDictionaryAddValue(Mutable, CFSTR("jv"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("ku"), (const void *)2);
  CFDictionaryAddValue(Mutable, CFSTR("la"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("ny"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("qu"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("sa"), (const void *)0xA);
  CFDictionaryAddValue(Mutable, CFSTR("sd"), (const void *)2);
  CFDictionaryAddValue(Mutable, CFSTR("se"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("su"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("tt"), (const void *)8);
  CFDictionaryAddValue(Mutable, CFSTR("tt-Cyrl"), (const void *)8);
  CFDictionaryAddValue(Mutable, CFSTR("mo"), (const void *)0x19);
  CFDictionaryAddValue(Mutable, CFSTR("mo-Cyrl"), (const void *)8);
  qword_1ECDE7A00 = (uint64_t)Mutable;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      abort();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void std::vector<int,TInlineBufferAllocator<int,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  char **v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v7 = (unint64_t)(a1 + 3);
    v6 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      abort();
    v10 = v8 >> 2;
    v11 = v4 - v6;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), v12);
      v6 = *a1;
      v5 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    while (v5 != v6)
    {
      v17 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v14 - 1) = v17;
      v14 -= 4;
    }
    *a1 = v14;
    a1[1] = v16;
    v18 = a1[2];
    a1[2] = v15;
    if (v6)
    {
      if (v7 > (unint64_t)v6 || (v19 = a1 + 18, a1 + 18 <= (char **)v6))
      {
        operator delete(v6);
      }
      else if (v18 == *v19)
      {
        *v19 = v6;
      }
    }
  }
}

unsigned __int16 *std::__unique[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::__equal_to &>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 *result;
  unsigned __int16 *v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  int v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != v5)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

unsigned __int16 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  _BOOL4 v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = *result;
  v6 = result[1];
  v7 = v3 < v5;
  if (v3 == v5)
    v7 = v4 < v6;
  v8 = *a3;
  v9 = v8 == v3;
  v10 = v8 < v3;
  if (v9)
    v10 = a3[1] < v4;
  if (v7)
  {
    v11 = *((_DWORD *)result + 1);
    if (v10)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
LABEL_17:
      *a3 = v5;
      a3[1] = v6;
      *((_DWORD *)a3 + 1) = v11;
      return result;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *a2 = v5;
    a2[1] = v6;
    *((_DWORD *)a2 + 1) = v11;
    v18 = *a3;
    v9 = v18 == v5;
    v19 = v18 < v5;
    if (v9)
      v19 = a3[1] < v6;
    if (v19)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    v12 = *((_DWORD *)a2 + 1);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *a3 = v3;
    a3[1] = v4;
    *((_DWORD *)a3 + 1) = v12;
    v13 = *a2;
    v14 = *result;
    v15 = result[1];
    v9 = v13 == v14;
    v16 = v13 < v14;
    if (v9)
      v16 = a2[1] < v15;
    if (v16)
    {
      v17 = *((_DWORD *)result + 1);
      *(_QWORD *)result = *(_QWORD *)a2;
      *a2 = v14;
      a2[1] = v15;
      *((_DWORD *)a2 + 1) = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v26;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v7 = *a1;
      v8 = a1[1];
      v9 = v6 == v7;
      v10 = v6 < v7;
      if (v9)
        v10 = *(a2 - 3) < v8;
      if (v10)
      {
        v11 = *((_DWORD *)a1 + 1);
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *(a2 - 4) = v7;
        *(a2 - 3) = v8;
        *((_DWORD *)a2 - 1) = v11;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v12 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a1 + 4, a1 + 8);
      v13 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    v17 = *v12;
    v9 = v16 == v17;
    v18 = v16 < v17;
    if (v9)
      v18 = v13[1] < v12[1];
    if (v18)
    {
      v19 = *(_QWORD *)v13;
      v20 = (unsigned __int16)*(_QWORD *)v13;
      v21 = v14;
      while (1)
      {
        v22 = (char *)a1 + v21;
        *(_QWORD *)((char *)a1 + v21 + 24) = *(_QWORD *)((char *)a1 + v21 + 16);
        if (v21 == -16)
          break;
        v23 = *((unsigned __int16 *)v22 + 4);
        v24 = *((unsigned __int16 *)v22 + 5) > WORD1(v19);
        v9 = v23 == v20;
        v25 = v23 > v20;
        if (!v9)
          v24 = v25;
        v21 -= 8;
        if (!v24)
        {
          v26 = (_QWORD *)((char *)a1 + v21 + 24);
          goto LABEL_18;
        }
      }
      v26 = a1;
LABEL_18:
      *v26 = v19;
      if (++v15 == 8)
        return v13 + 4 == a2;
    }
    v12 = v13;
    v14 += 8;
    v13 += 4;
    if (v13 == a2)
      return 1;
  }
}

unsigned __int16 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  int v24;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = a3[1];
  v12 = v9 == v10;
  v13 = v9 < v10;
  if (v12)
    v13 = a4[1] < v11;
  if (v13)
  {
    v14 = *((_DWORD *)a3 + 1);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *a4 = v10;
    a4[1] = v11;
    *((_DWORD *)a4 + 1) = v14;
    v15 = *a3;
    v16 = *a2;
    v17 = a2[1];
    v12 = v15 == v16;
    v18 = v15 < v16;
    if (v12)
      v18 = a3[1] < v17;
    if (v18)
    {
      v19 = *((_DWORD *)a2 + 1);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *a3 = v16;
      a3[1] = v17;
      *((_DWORD *)a3 + 1) = v19;
      v20 = *a2;
      v21 = *a1;
      v22 = a1[1];
      v12 = v20 == v21;
      v23 = v20 < v21;
      if (v12)
        v23 = a2[1] < v22;
      if (v23)
      {
        v24 = *((_DWORD *)a1 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *a2 = v21;
        a2[1] = v22;
        *((_DWORD *)a2 + 1) = v24;
      }
    }
  }
  return result;
}

unsigned __int16 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  unsigned __int16 *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  int v31;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = a4[1];
  v14 = v11 == v12;
  v15 = v11 < v12;
  if (v14)
    v15 = a5[1] < v13;
  if (v15)
  {
    v16 = *((_DWORD *)a4 + 1);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *a5 = v12;
    a5[1] = v13;
    *((_DWORD *)a5 + 1) = v16;
    v17 = *a4;
    v18 = *a3;
    v19 = a3[1];
    v14 = v17 == v18;
    v20 = v17 < v18;
    if (v14)
      v20 = a4[1] < v19;
    if (v20)
    {
      v21 = *((_DWORD *)a3 + 1);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *a4 = v18;
      a4[1] = v19;
      *((_DWORD *)a4 + 1) = v21;
      v22 = *a3;
      v23 = *a2;
      v24 = a2[1];
      v14 = v22 == v23;
      v25 = v22 < v23;
      if (v14)
        v25 = a3[1] < v24;
      if (v25)
      {
        v26 = *((_DWORD *)a2 + 1);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *a3 = v23;
        a3[1] = v24;
        *((_DWORD *)a3 + 1) = v26;
        v27 = *a2;
        v28 = *a1;
        v29 = a1[1];
        v14 = v27 == v28;
        v30 = v27 < v28;
        if (v14)
          v30 = a2[1] < v29;
        if (v30)
        {
          v31 = *((_DWORD *)a1 + 1);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *a2 = v28;
          a2[1] = v29;
          *((_DWORD *)a2 + 1) = v31;
        }
      }
    }
  }
  return result;
}

void FindMasterFeatureMapEntry(unsigned int)::$_0::__invoke()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  _QWORD *v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v0 = 0;
  v1 = 0;
  xmmword_1ECDE7AD8 = 0u;
  *(_OWORD *)&qword_1ECDE7AE8 = 0u;
  v2 = &kMasterFeatureMap;
  dword_1ECDE7AF8 = 1065353216;
  do
  {
    if ((v2[1] & 0x44) == 4)
      goto LABEL_42;
    v3 = *(unsigned int *)v2;
    if (v1)
    {
      v4 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v5 = *(unsigned int *)v2;
        if (v1 <= v3)
          v5 = v3 % v1;
      }
      else
      {
        v5 = ((_DWORD)v1 - 1) & v3;
      }
      v6 = *(uint64_t ***)(xmmword_1ECDE7AD8 + 8 * v5);
      if (v6)
      {
        for (i = *v6; i; i = (uint64_t *)*i)
        {
          v8 = i[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v3)
              goto LABEL_42;
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v8 >= v1)
                v8 %= v1;
            }
            else
            {
              v8 &= v1 - 1;
            }
            if (v8 != v5)
              break;
          }
        }
      }
    }
    else
    {
      v5 = 0xAAAAAAAAAAAAAAAALL;
    }
    v9 = operator new(0x20uLL);
    *v9 = 0;
    v9[1] = v3;
    *((_DWORD *)v9 + 4) = v3;
    v9[3] = v2;
    v10 = (float)(unint64_t)(v0 + 1);
    if (!v1 || (float)(*(float *)&dword_1ECDE7AF8 * (float)v1) < v10)
    {
      v11 = (v1 & (v1 - 1)) != 0;
      if (v1 < 3)
        v11 = 1;
      v12 = v11 | (2 * v1);
      v13 = vcvtps_u32_f32(v10 / *(float *)&dword_1ECDE7AF8);
      if (v12 <= v13)
        v14 = v13;
      else
        v14 = v12;
      std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>((uint64_t)&xmmword_1ECDE7AD8, v14);
      v1 = *((_QWORD *)&xmmword_1ECDE7AD8 + 1);
      if ((v1 & (v1 - 1)) != 0)
      {
        if (*((_QWORD *)&xmmword_1ECDE7AD8 + 1) <= v3)
          v5 = v3 % *((_QWORD *)&xmmword_1ECDE7AD8 + 1);
        else
          v5 = v3;
      }
      else
      {
        v5 = (DWORD2(xmmword_1ECDE7AD8) - 1) & v3;
      }
    }
    v15 = xmmword_1ECDE7AD8;
    v16 = *(_QWORD **)(xmmword_1ECDE7AD8 + 8 * v5);
    if (v16)
    {
      *v9 = *v16;
LABEL_40:
      *v16 = v9;
      goto LABEL_41;
    }
    *v9 = qword_1ECDE7AE8;
    qword_1ECDE7AE8 = (uint64_t)v9;
    *(_QWORD *)(v15 + 8 * v5) = &qword_1ECDE7AE8;
    if (*v9)
    {
      v17 = *(_QWORD *)(*v9 + 8);
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v17 >= v1)
          v17 %= v1;
      }
      else
      {
        v17 &= v1 - 1;
      }
      v16 = (_QWORD *)(xmmword_1ECDE7AD8 + 8 * v17);
      goto LABEL_40;
    }
LABEL_41:
    v0 = ++qword_1ECDE7AF0;
LABEL_42:
    v2 = (uint64_t *)((char *)v2 + 12);
  }
  while (v2 != (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf);
}

_QWORD *IsOTFeatureTurnedOnByShapingEngine(unsigned int)::$_0::__invoke()
{
  uint64_t i;
  _QWORD *result;

  for (i = 0; i != 1980; i += 12)
  {
    if (*(_DWORD *)((char *)&kMasterFeatureMap + i + 8) == 14)
      result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&xmmword_1ECDE7A88, (unsigned int *)((char *)&kMasterFeatureMap + i), (uint64_t *)((char *)&kMasterFeatureMap + i));
  }
  return result;
}

void GetDefaultFeatureList<true>(void)::{lambda(void *)#1}::__invoke()
{
  uint64_t i;
  _BYTE v1[12];

  for (i = 0; i != 1980; i += 12)
  {
    *(_QWORD *)v1 = *(uint64_t *)((char *)&kMasterFeatureMap + i);
    *(_DWORD *)&v1[8] = *(_DWORD *)((char *)&kMasterFeatureMap + i + 8);
    if ((*(_QWORD *)&v1[4] & 0x2600000000) == 0x200000000)
  }
}

void std::vector<`anonymous namespace'::FeatureMapEntry,TInlineBufferAllocator<`anonymous namespace'::FeatureMapEntry,10ul>>::push_back[abi:nn180100](char **a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  char *v22;
  char **v23;

  v5 = (unint64_t)a1[1];
  v4 = (unint64_t)a1[2];
  if (v5 >= v4)
  {
    v8 = (char *)(a1 + 3);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      v13 = a1[18];
      v14 = (unint64_t)&v13[12 * v12];
      if (v14 <= (unint64_t)(a1 + 18))
      {
        a1[18] = (char *)v14;
      }
      else
      {
        if (v12 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(12 * v12);
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[12 * v9];
    v16 = &v13[12 * v12];
    v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v15 = v17;
    v7 = v15 + 12;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v7;
    v22 = a1[2];
    a1[2] = v16;
    if (v18)
    {
      v23 = a1 + 18;
      if (v8 <= v18 && v23 > (char **)v18)
      {
        if (v22 == *v23)
          *v23 = v18;
      }
      else
      {
        operator delete(v18);
      }
    }
  }
  else
  {
    v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = (char *)(v5 + 12);
  }
  a1[1] = v7;
}

void CopyOTFeatureSettingForTypeAndSelector(unsigned short,unsigned short)::$_0::__invoke()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  _QWORD *v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v0 = 0;
  v1 = 0;
  xmmword_1ECDE7AB0 = 0u;
  *(_OWORD *)&qword_1ECDE7AC0 = 0u;
  v2 = &kMasterFeatureMap;
  dword_1ECDE7AD0 = 1065353216;
  do
  {
    if (*(_DWORD *)v2 && (v2[1] & 0x40) == 0)
    {
      v3 = *((unsigned __int16 *)v2 + 3) | (*((unsigned __int16 *)v2 + 2) << 16);
      if (v1)
      {
        v4 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
        v4.i16[0] = vaddlv_u8(v4);
        if (v4.u32[0] > 1uLL)
        {
          v5 = *((unsigned __int16 *)v2 + 3) | (*((unsigned __int16 *)v2 + 2) << 16);
          if (v1 <= v3)
            v5 = v3 % v1;
        }
        else
        {
          v5 = ((_DWORD)v1 - 1) & v3;
        }
        v6 = *(uint64_t ***)(xmmword_1ECDE7AB0 + 8 * v5);
        if (v6)
        {
          for (i = *v6; i; i = (uint64_t *)*i)
          {
            v8 = i[1];
            if (v8 == v3)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v3)
                goto LABEL_43;
            }
            else
            {
              if (v4.u32[0] > 1uLL)
              {
                if (v8 >= v1)
                  v8 %= v1;
              }
              else
              {
                v8 &= v1 - 1;
              }
              if (v8 != v5)
                break;
            }
          }
        }
      }
      else
      {
        v5 = 0xAAAAAAAAAAAAAAAALL;
      }
      v9 = operator new(0x20uLL);
      *v9 = 0;
      v9[1] = v3;
      *((_DWORD *)v9 + 4) = v3;
      v9[3] = v2;
      v10 = (float)(unint64_t)(v0 + 1);
      if (!v1 || (float)(*(float *)&dword_1ECDE7AD0 * (float)v1) < v10)
      {
        v11 = (v1 & (v1 - 1)) != 0;
        if (v1 < 3)
          v11 = 1;
        v12 = v11 | (2 * v1);
        v13 = vcvtps_u32_f32(v10 / *(float *)&dword_1ECDE7AD0);
        if (v12 <= v13)
          v14 = v13;
        else
          v14 = v12;
        std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>((uint64_t)&xmmword_1ECDE7AB0, v14);
        v1 = *((_QWORD *)&xmmword_1ECDE7AB0 + 1);
        if ((v1 & (v1 - 1)) != 0)
        {
          if (*((_QWORD *)&xmmword_1ECDE7AB0 + 1) <= v3)
            v5 = v3 % *((_QWORD *)&xmmword_1ECDE7AB0 + 1);
          else
            v5 = v3;
        }
        else
        {
          v5 = (DWORD2(xmmword_1ECDE7AB0) - 1) & v3;
        }
      }
      v15 = xmmword_1ECDE7AB0;
      v16 = *(_QWORD **)(xmmword_1ECDE7AB0 + 8 * v5);
      if (v16)
      {
        *v9 = *v16;
      }
      else
      {
        *v9 = qword_1ECDE7AC0;
        qword_1ECDE7AC0 = (uint64_t)v9;
        *(_QWORD *)(v15 + 8 * v5) = &qword_1ECDE7AC0;
        if (!*v9)
        {
LABEL_42:
          v0 = ++qword_1ECDE7AC8;
          goto LABEL_43;
        }
        v17 = *(_QWORD *)(*v9 + 8);
        if ((v1 & (v1 - 1)) != 0)
        {
          if (v17 >= v1)
            v17 %= v1;
        }
        else
        {
          v17 &= v1 - 1;
        }
        v16 = (_QWORD *)(xmmword_1ECDE7AB0 + 8 * v17);
      }
      *v16 = v9;
      goto LABEL_42;
    }
LABEL_43:
    v2 = (uint64_t *)((char *)v2 + 12);
  }
  while (v2 != (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf);
}

uint64_t *std::__hash_table<std::__hash_value_type<UScriptCode,unsigned int>,std::__unordered_map_hasher<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::hash<UScriptCode>,std::equal_to<UScriptCode>,true>,std::__unordered_map_equal<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::equal_to<UScriptCode>,std::hash<UScriptCode>,true>,std::allocator<std::__hash_value_type<UScriptCode,unsigned int>>>::find<UScriptCode>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<UScriptCode,unsigned int>,std::__unordered_map_hasher<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::hash<UScriptCode>,std::equal_to<UScriptCode>,true>,std::__unordered_map_equal<UScriptCode,std::__hash_value_type<UScriptCode,unsigned int>,std::equal_to<UScriptCode>,std::hash<UScriptCode>,true>,std::allocator<std::__hash_value_type<UScriptCode,unsigned int>>>::__emplace_unique_key_args<UScriptCode,std::pair<UScriptCode,unsigned int>>(float *a1, int a2, int a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v7 = a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a2;
      if (v8 <= a2)
        v10 = a2 % v8;
    }
    else
    {
      v10 = (v8 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v10] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8)
        v34 %= v8;
    }
    else
    {
      v34 &= v8 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,UScriptCode>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,UScriptCode>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,UScriptCode>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,UScriptCode>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,UScriptCode&>(float *a1, unsigned int *a2, _DWORD *a3, int *a4)
{
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v7 = *a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *a2;
      if (v8 <= v7)
        v10 = v7 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
              return v12;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v7;
  v14 = *a4;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = v14;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v33)
  {
    *v12 = *v33;
LABEL_72:
    *v33 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v32[v10] = a1 + 4;
  if (*v12)
  {
    v34 = *(_QWORD *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8)
        v34 %= v8;
    }
    else
    {
      v34 &= v8 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void std::__inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__less<void,void> &>(char *a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const std::nothrow_t *v9;
  _DWORD *v10;
  BOOL v11;
  void *v12;

  v6 = (a2 - a1) >> 2;
  v7 = (a3 - a2) >> 2;
  if (v7 >= v6)
    v8 = (a2 - a1) >> 2;
  else
    v8 = (a3 - a2) >> 2;
  if (v8 < 1)
  {
LABEL_8:
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned int *>>(a1, a2, a3, v6, v7, 0, 0);
  }
  else
  {
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    while (1)
    {
      v10 = operator new(4 * v8, v9);
      if (v10)
        break;
      v11 = (unint64_t)v8 > 1;
      v8 = (unint64_t)v8 >> 1;
      if (!v11)
        goto LABEL_8;
    }
    v12 = v10;
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned int *>>(a1, a2, a3, v6, v7, v10, v8);
    operator delete(v12);
  }
}

const __CFData *FeatureParamsForTag<OTL::CharacterVariantFeatureParams>(CFDataRef theData, int a2)
{
  const __CFData *v2;
  const UInt8 *BytePtr;
  unint64_t v5;
  const UInt8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  const __CFData *v36;
  void **v38;
  _QWORD v39[3];
  _OWORD v40[4];
  _OWORD *v41;
  uint64_t v42;

  v2 = theData;
  v42 = *MEMORY[0x1E0C80C00];
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr)
      return 0;
    v5 = (unint64_t)BytePtr;
    v6 = CFDataGetBytePtr(v2);
    v7 = v6 ? (unint64_t)&v6[CFDataGetLength(v2)] : 0;
    if (!*(_WORD *)(v5 + 6))
      return 0;
    v8 = __rev16(*(unsigned __int16 *)(v5 + 6));
    v9 = (unsigned __int16 *)(v5 + v8);
    v10 = v5 + v8 + 2;
    if (v10 > v7)
      return 0;
    v11 = *v9;
    v12 = __rev16(v11);
    v13 = v10 + 6 * v12;
    if (v13 < v10 || v13 > v7)
    {
      v15 = (v7 - v10) / 6;
      if ((unint64_t)(v9 + 4) > v7)
        v15 = 0;
      if (v15 != v12)
        return 0;
    }
    if (*(_WORD *)(v5 + 8)
      && (v16 = (unsigned __int16 *)(v5 + __rev16(*(unsigned __int16 *)(v5 + 8))),
          v17 = v16 + 1,
          (unint64_t)(v16 + 1) <= v7))
    {
      v2 = 0;
      v19 = bswap32(*v16) >> 16;
      v20 = (unint64_t)&v17[v19];
      if ((unint64_t)(v16 + 2) <= v7)
        v21 = (v7 - (unint64_t)v17) >> 1;
      else
        v21 = 0;
      if (v20 <= v7 && v20 >= (unint64_t)v17 || v21 == v19)
      {
        *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40[2] = v24;
        v40[3] = v24;
        v40[0] = v24;
        v40[1] = v24;
        memset(v39, 0, sizeof(v39));
        v41 = v40;
        if (!v11)
          goto LABEL_35;
        v25 = (unsigned __int16 *)(v8 + v5 + 6);
        v26 = 6 * v12;
        while (bswap32(*((_DWORD *)v25 - 1)) != a2)
        {
          v25 += 3;
          v26 -= 6;
          if (!v26)
            goto LABEL_35;
        }
        v27 = (unsigned __int16 *)((char *)v9 + (bswap32(*v25) >> 16));
        v28 = v27 + 2;
        v29 = (unint64_t)(v27 + 1) < v5 || (unint64_t)v28 > v7;
        if (!v29
          && ((v30 = bswap32(v27[1]) >> 16,
               v31 = (unint64_t)&v28[v30],
               (unint64_t)(v27 + 3) <= v7)
            ? (v32 = (v7 - (unint64_t)v28) >> 1)
            : (v32 = 0),
              v31 <= v7 ? (v33 = v31 >= (unint64_t)v28) : (v33 = 0),
              !v33 ? (v34 = v32 == v30) : (v34 = 1),
              v34))
        {
          v35 = *v27;
          v36 = (const __CFData *)((char *)v27 + __rev16(v35));
          if ((unint64_t)v36 + 14 > v7 || v35 == 0)
            v2 = 0;
          else
            v2 = v36;
        }
        else
        {
LABEL_35:
          v2 = 0;
        }
        v38 = (void **)v39;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v38);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_0>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v8;

  if (**(_DWORD **)(a1 + 8) == *a2 && *(_WORD *)(*(_QWORD *)a3 + 2))
  {
    v4 = (unsigned __int16 *)(*(_QWORD *)a3 + 4);
    v5 = 2 * __rev16(*(unsigned __int16 *)(*(_QWORD *)a3 + 2));
    do
    {
      v6 = *v4++;
      v8 = bswap32(v6) >> 16;
      STL::insert_sorted<TInlineVector<unsigned short,30ul>>(*(_QWORD **)(a1 + 16), (char *)&v8);
      v5 -= 2;
    }
    while (v5);
  }
  return 1;
}

char *STL::insert_sorted<TInlineVector<unsigned short,30ul>>(_QWORD *a1, char *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  unsigned int v9;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  if (v3 != (char *)*a1)
  {
    v5 = (uint64_t)&v3[-*a1] >> 1;
    do
    {
      v6 = v5 >> 1;
      v7 = &v4[2 * (v5 >> 1)];
      v9 = *(unsigned __int16 *)v7;
      v8 = (unsigned __int16 *)(v7 + 2);
      v5 += ~(v5 >> 1);
      if (v9 < *(unsigned __int16 *)a2)
        v4 = (char *)v8;
      else
        v5 = v6;
    }
    while (v5);
    v3 = v4;
  }
  return std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::insert((uint64_t)a1, v3, a2);
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _WORD *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = (uint64_t)&v6[-*(_QWORD *)a1];
    v31 = 0xAAAAAAAAAAAAAAAALL;
    if (v13 <= -3)
      abort();
    v14 = __src - v12;
    v15 = (__src - v12) >> 1;
    v16 = v13 >> 1;
    v17 = v7 - (_QWORD)v12;
    if (v17 <= v16 + 1)
      v18 = v16 + 1;
    else
      v18 = v17;
    if (v17 >= 0x7FFFFFFFFFFFFFFELL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v33 = a1 + 24;
    if (v19)
      v20 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(a1 + 24, v19);
    else
      v20 = 0;
    v21 = &v20[2 * v15];
    v29 = v20;
    v30 = v21;
    v22 = &v20[2 * v19];
    v32 = v22;
    if (v15 == v19)
    {
      if (v14 < 1)
      {
        if (v12 == v4)
          v24 = 1;
        else
          v24 = v4 - v12;
        v38 = a1 + 24;
        v25 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(a1 + 24, v24);
        v26 = &v25[2 * (v24 >> 2)];
        v29 = v25;
        v30 = v26;
        v34 = v20;
        v35 = &v20[2 * v15];
        v32 = &v25[2 * v24];
        v36 = v35;
        v37 = v22;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v34);
        v21 = v26;
      }
      else
      {
        v23 = v15 + 2;
        if (v15 >= -1)
          v23 = v15 + 1;
        v21 -= v23 & 0xFFFFFFFFFFFFFFFELL;
        v30 = v21;
      }
    }
    *(_WORD *)v21 = *(_WORD *)a3;
    v31 = (unint64_t)(v21 + 2);
    v4 = std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v29, v4);
    std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v29);
  }
  else if (__src == v6)
  {
    *(_WORD *)__src = *(_WORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 2;
  }
  else
  {
    v8 = __src + 2;
    v9 = v6 - 2;
    v10 = *(_WORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_WORD *)v9;
      v9 += 2;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-2 * ((v6 - v8) >> 1)], __src, v6 - v8);
    if (v4 <= v3)
      v3 += 2 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_WORD *)v4 = *(_WORD *)v3;
  }
  return v4;
}

void std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15DF1B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF1B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1,std::allocator<NumberOfGlyphVariants(TBaseFont const&,unsigned int)::$_1>,BOOL ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int16 v11;
  _WORD *v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unsigned int v26;

  v4 = *a2;
  v5 = *a3;
  v6 = 1;
  if (v4 <= v5 && v4 != (unsigned __int16)(v5 + 1))
  {
    v7 = **(_QWORD **)(a1 + 8);
    v8 = **(_QWORD **)(a1 + 16);
    v9 = v7 + 6;
    if (v7 + 8 <= v8)
      v10 = (v8 - (v7 + 6)) >> 1;
    else
      v10 = 0;
    if (v8 < v9)
    {
      return 0;
    }
    else
    {
      v11 = *a4;
      v12 = *(_WORD **)(a1 + 24);
      v13 = *a2;
      do
      {
        v14 = v13 - v4 + v11;
        v15 = bswap32(*(unsigned __int16 *)(v7 + 4)) >> 16;
        v16 = v9 + 2 * v15;
        if (v16 < v9 || v16 > v8)
        {
          v18 = v15 > v14 && v10 == v15;
          if (!v18)
            return 0;
        }
        else if (v15 <= v14)
        {
          return 0;
        }
        v19 = (unsigned __int16 *)(v7 + (bswap32(*(unsigned __int16 *)(v7 + 2 * v14 + 6)) >> 16));
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) > v8)
          return 0;
        v21 = bswap32(*v19) >> 16;
        v22 = (unint64_t)&v20[v21];
        v23 = (unint64_t)(v19 + 2) <= v8 ? (v8 - (unint64_t)v20) >> 1 : 0;
        v24 = v22 <= v8 && v22 >= (unint64_t)v20;
        if (!v24 && v23 != v21)
          return 0;
        v26 = (unsigned __int16)*v12;
        if (v26 <= v21)
          LOWORD(v26) = v21;
        *v12 = v26;
        v18 = v5 == v13++;
      }
      while (!v18);
      return 1;
    }
  }
  return v6;
}

void TTruncator::Truncate(uint64_t **this, unsigned __int32 a2, __CTLine *a3, uint64_t a4, double a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  TLine *v12;
  unsigned __int8 *v13;
  _BYTE v14[128];
  _BYTE v15[48];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((double *)this[3] + 13) <= *(double *)this + a5)
  {
    TTruncator::TruncateEndWhitespace((TTruncator *)this, a5);
  }
  else
  {
    *(_OWORD *)&v14[96] = xmmword_18494F188;
    *(_OWORD *)&v14[112] = unk_18494F198;
    v16 = unk_18494F1D8;
    *(_OWORD *)v15 = xmmword_18494F1A8;
    memset(&v15[16], 170, 32);
    memset(v14, 170, 96);
    v7 = this[4];
    v9 = *v7;
    v8 = v7[1];
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_QWORD *)v14 = v9;
    *(_QWORD *)&v14[8] = v8;
    memset(&v14[16], 0, 24);
    *(_QWORD *)&v14[64] = &v14[40];
    BYTE8(v16) = 0;
    memset(&v14[72], 0, 56);
    memset(&v15[8], 0, 21);
    *(_OWORD *)&v15[32] = 0uLL;
    LOBYTE(v16) = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    *(_QWORD *)v15 = 0xFFEFFFFFFFFFFFFFLL;
    if (a3)
      TTruncator::TruncateWithToken((TTruncator *)this, a5, (int64x2_t *)v14, (CTLineTruncationType)a2, a3);
    else
      TTruncator::TruncateWithTokenHandler((TTruncator *)this, (uint64_t)v14, a2, a4, a5);
    if (a2 == 2)
      TTruncator::AppendLine((unint64_t)this, (const TLine *)v14);
    TTruncator::HandleLeveledRuns((TTruncator *)this, v12, v13);
    TLine::~TLine((TLine *)v14);
  }
}

_QWORD *TTruncator::TruncateEndWhitespace(TTruncator *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  TLine *v5;
  unsigned __int8 *v6;
  unsigned __int8 v8;

  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(v4 + 72);
  TTruncator::TruncateEndChars(this, *(_QWORD *)(v4 + 80) + *(_QWORD *)(v4 + 72), a2, (TLine *)v3, (BOOL *)&v8);
  return TTruncator::HandleLeveledRuns(this, v5, v6);
}

unint64_t TTruncator::TruncateWithToken(TTruncator *this, double a2, int64x2_t *a3, CTLineTruncationType a4, const __CTLine *a5)
{
  TLine *v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  CFIndex v15;
  uint64_t v16;
  unint64_t v17;
  CFIndex v18;
  uint64_t v19;
  double v20;
  CFIndex v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  CFIndex started;
  uint64_t v26;
  CFIndex v27;
  unsigned __int8 v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  TLine *v37;
  const TRun **v38;
  unint64_t v39;
  TLine *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t GlyphIndexForChar;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  id v54;

  v9 = *((_QWORD *)this + 3);
  v8 = (TLine *)*((_QWORD *)this + 4);
  v11 = *(_QWORD *)(v9 + 72);
  v10 = *(_QWORD *)(v9 + 80);
  v12 = v10 + v11;
  v53 = -86;
  v13 = *((_QWORD *)a5 + 5);
  v14 = *(double *)this + a2 - *(double *)(v13 + 104);
  *((_QWORD *)v8 + 9) = v11;
  *((_QWORD *)v8 + 10) = v10;
  if (a4 == kCTLineTruncationMiddle)
  {
    v20 = v14 * 0.5;
    v52 = -86;
    v21 = TTruncator::TruncateEndChars(this, v12, v14 * 0.5, v8, (BOOL *)&v52);
    v23 = v22;
    v24 = v20 + *(double *)this;
    v51 = -86;
    started = TTruncator::TruncateStartChars(this, v11, v24, a3, (BOOL *)&v51);
    if (v21 + v23 >= started + v26)
      v27 = started + v26;
    else
      v27 = v21 + v23;
    if (started <= v21 && v21 < started + v26)
    {
      v49 = v27 - v21;
      v50 = v21;
    }
    else if (v21 <= started && started < v21 + v23)
    {
      v49 = v27 - started;
      v50 = started;
    }
    else
    {
      v49 = 0;
      v50 = 0;
    }
    v30 = v52;
    if (v52 <= v51)
      v30 = v51;
    v53 = ((v30 ^ (*(_BYTE *)(v13 + 152) >> 3)) & 1) + v30;
    goto LABEL_24;
  }
  if (a4 == kCTLineTruncationEnd)
  {
    v18 = TTruncator::TruncateEndChars(this, v12, v14, v8, (BOOL *)&v53);
    v49 = v19;
    v50 = v18;
LABEL_24:
    v17 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) - *(_QWORD *)(*((_QWORD *)this + 4) + 16)) >> 3;
    goto LABEL_25;
  }
  if (a4)
  {
    v49 = 0xAAAAAAAAAAAAAAAALL;
    v50 = 0xAAAAAAAAAAAAAAAALL;
    v17 = 0xAAAAAAAAAAAAAAABLL;
  }
  else
  {
    v15 = TTruncator::TruncateStartChars(this, v11, v14, (int64x2_t *)v8, (BOOL *)&v53);
    v49 = v16;
    v50 = v15;
    v17 = 0;
  }
LABEL_25:
  v47 = *(_QWORD *)(v13 + 80);
  v48 = *(_QWORD *)(v13 + 24) - *(_QWORD *)(v13 + 16);
  if (v48 >= 1)
  {
    v31 = v53;
    v32 = v50 - *(_QWORD *)(v13 + 72);
    v33 = ((unint64_t)v48 >> 3) - 1;
    do
    {
      v54 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr))(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v33) + 56))(&v54);
      v34 = atomic_load((unint64_t *)&v54);
      v35 = *(_QWORD *)(v34 + 48);
      v36 = (void *)objc_msgSend(*(id *)(v35 + 216), "copyWithRange:", *(_QWORD *)(v35 + 200), *(_QWORD *)(v35 + 208));

      *(_QWORD *)(v35 + 216) = v36;
      *(_QWORD *)(v35 + 200) = 0;
      *(_QWORD *)(v35 + 8) += v32;
      objc_msgSend(v36, "puntStringIndicesInRange:by:", 0, *(_QWORD *)(v35 + 208), v32);
      if (*(unsigned __int8 *)(v35 + 224) != v31)
        *(_BYTE *)(v35 + 224) = v31;
      v37 = (TLine *)*((_QWORD *)this + 4);
      v38 = (const TRun **)atomic_load((unint64_t *)&v54);
      TLine::InsertRun(v37, v17, v38);

      v39 = v33-- + 1;
    }
    while (v39 > 1);
  }
  if (v49 > 0)
  {
    v40 = (TLine *)*((_QWORD *)this + 4);
    if ((uint64_t)(*((_QWORD *)v40 + 3) - *((_QWORD *)v40 + 2)) >= 1 && (uint64_t)(v50 + v47 - 1) >= 0)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16)
                                  + 8 * TLine::FindRunWithCharIndex(v40, v50 + v47 - 1, 1))
                      + 48);
      if (v48 <= 0)
      {
        v42 = objc_msgSend(*(id *)(v41 + 216), "copyWithRange:", *(_QWORD *)(v41 + 200), *(_QWORD *)(v41 + 208));

        *(_QWORD *)(v41 + 216) = v42;
        *(_QWORD *)(v41 + 200) = 0;
      }
      v43 = *(_QWORD *)(v41 + 8);
      v44 = *(_QWORD *)(v41 + 16);
      GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v41, v50 + v47 - 1);
      objc_msgSend(*(id *)(v41 + 216), "setAttachmentCount:atIndex:", objc_msgSend(*(id *)(v41 + 216), "attachmentCountAtIndex:", *(_QWORD *)(v41 + 200) + GlyphIndexForChar)+ v49- v47, *(_QWORD *)(v41 + 200) + GlyphIndexForChar);
      *(_QWORD *)(v41 + 8) = v43;
      *(_QWORD *)(v41 + 16) = v44 + v49 - v47;
    }
  }
  return v50;
}

uint64_t TTruncator::AppendToken(TLine **this, CFRange a2, double a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t result;
  TLine *v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;

  length = a2.length;
  location = a2.location;
  TTruncator::TruncateEndChars((TTruncator *)this, a2.location, a3, this[4], (BOOL *)&v10);
  result = TTruncator::NoRunAdded((uint64_t)this, 0, 0, -1, a3);
  if ((result & 1) == 0)
  {
    result = TTruncator::CreateAndAppendToken((uint64_t)this, location, length, 1.79769313e308, 0, 0);
    if ((_DWORD)result)
      return (uint64_t)TTruncator::HandleLeveledRuns((TTruncator *)this, v8, v9);
  }
  return result;
}

uint64_t TAATPropTable::GetNullPropertiesForGlyph(TAATPropTable *this)
{
  return 0;
}

uint64_t TAATPropTable::GetDefaultPropertiesForGlyph(TAATPropTable *this)
{
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 1) + 6)) >> 16;
}

uint64_t TAATPropTable::GetPropertiesForGlyph(TAATPropTable *this, uint64_t a2)
{
  __int128 v4;
  SFNTLookupTable *v5;
  const SFNTLookupTable *v6;
  uint64_t (*v7)(TAATLookupTable *, unsigned __int16, unint64_t *);
  TAATLookupTable *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t (*v13)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = v4;
  v16 = v4;
  v5 = (SFNTLookupTable *)*((_QWORD *)this + 2);
  v6 = (const SFNTLookupTable *)(*((_QWORD *)this + 1) + 8);
  v13 = TAATLookupTable::BadTable;
  v14 = 0;
  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0xAAAAAAAAAAAAFFFFLL;
  TAATLookupTable::SetTable((uint64_t)&v13, v6, v5);
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v7 = v13;
  v8 = (TAATLookupTable *)((char *)&v13 + (v14 >> 1));
  if ((v14 & 1) != 0)
    v7 = *(uint64_t (**)(TAATLookupTable *, unsigned __int16, unint64_t *))(*(_QWORD *)v8
                                                                                           + v13);
  v9 = (unsigned __int16 *)v7(v8, a2, &v18);
  v10 = *((_QWORD *)this + 1);
  if (!v9
    || (v10 <= (unint64_t)v9 ? (v11 = (unint64_t)(v9 + 1) > *((_QWORD *)this + 2)) : (v11 = 1), v11))
  {
    v9 = (unsigned __int16 *)(v10 + 6);
  }
  return bswap32(*v9) >> 16;
}

uint64_t TAATPropTable::MirrorGlyph(TAATPropTable *this, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  int v8;

  v3 = *a2;
  v4 = (uint64_t (*)(_QWORD *, uint64_t))*((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = (_QWORD *)((char *)this + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v6 + v4);
  v7 = v4(v6, v3);
  if ((v7 & 0x1000) != 0)
  {
    v8 = (v7 >> 8) | 0xF8;
    if (((v7 >> 8) & 8) == 0)
      LOBYTE(v8) = BYTE1(v7) & 0xF;
    *a2 += (char)v8;
  }
  return (v7 >> 12) & 1;
}

CFTypeID CTGlyphInfoGetTypeID(void)
{
  if (TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeGlyphInfo>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TNativeGlyphInfo>::fTypeID;
}

CTGlyphInfoRef CTGlyphInfoCreateWithGlyphName(CFStringRef glyphName, CTFontRef font, CFStringRef baseString)
{
  const __CTGlyphInfo *v3;
  void *v4;
  id v6;
  id v7;
  CFStringRef v8;
  TFont **v9;
  __CFString *v10;

  v10 = (__CFString *)glyphName;
  v8 = baseString;
  v9 = (TFont **)font;
  if (!glyphName)
    return 0;
  v3 = 0;
  if (font && baseString)
  {
    if (TFont::GetGlyphWithName(*((TFont **)font + 5), glyphName))
    {
      v7 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFBase_NEW<CTGlyphInfo,__CFString const*&,__CTFont const*&,__CFString const*&>(&v10, &v9, (void **)&v8, (unint64_t *)&v6);
      do
        v4 = (void *)__ldaxr((unint64_t *)&v6);
      while (__stlxr(0, (unint64_t *)&v6));
      v7 = v4;

      do
        v3 = (const __CTGlyphInfo *)__ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));

      return v3;
    }
    return 0;
  }
  return v3;
}

void TCFBase_NEW<CTGlyphInfo,__CFString const*&,__CTFont const*&,__CFString const*&>(__CFString **a1@<X0>, TFont ***a2@<X1>, void **a3@<X2>, unint64_t *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  __CFString *v10;
  TFont **v11;
  void *v12;
  TNativeGlyphInfo::NamedGlyphInfo *v13;
  unint64_t v14;
  id v15;

  v8 = (_QWORD *)TCFBase<TNativeGlyphInfo>::Allocate();
  if (v8)
  {
    v9 = v8;
    v10 = *a1;
    v11 = *a2;
    v12 = *a3;
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = 0;
    v8[5] = v8 + 6;
    v13 = (TNativeGlyphInfo::NamedGlyphInfo *)operator new();
    v9[6] = TNativeGlyphInfo::NamedGlyphInfo::NamedGlyphInfo(v13, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

CTGlyphInfoRef CTGlyphInfoCreateWithGlyph(CGGlyph glyph, CTFontRef font, CFStringRef baseString)
{
  const __CTGlyphInfo *v3;
  void *v4;
  id v6;
  id v7;
  __CFString *v8;
  CTFontRef v9;
  CGGlyph v10;

  v10 = glyph;
  v8 = (__CFString *)baseString;
  v9 = font;
  if (!glyph)
    return 0;
  v3 = 0;
  if (font && baseString)
  {
    if (CTFontGetGlyphCount(font) > glyph)
    {
      v7 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFBase_NEW<CTGlyphInfo,unsigned short &,__CTFont const*&,__CFString const*&>((__int16 *)&v10, &v9, &v8, (unint64_t *)&v6);
      do
        v4 = (void *)__ldaxr((unint64_t *)&v6);
      while (__stlxr(0, (unint64_t *)&v6));
      v7 = v4;

      do
        v3 = (const __CTGlyphInfo *)__ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));

      return v3;
    }
    return 0;
  }
  return v3;
}

void TCFBase_NEW<CTGlyphInfo,unsigned short &,__CTFont const*&,__CFString const*&>(__int16 *a1@<X0>, const __CTFont **a2@<X1>, __CFString **a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  __int16 v10;
  const __CTFont *v11;
  __CFString *v12;
  TNativeGlyphInfo *v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TNativeGlyphInfo>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a1;
    v11 = *a2;
    v12 = *a3;
    v13 = (TNativeGlyphInfo *)(v8 + 48);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v13;
    TNativeGlyphInfo::TNativeGlyphInfo(v13, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

CTGlyphInfoRef CTGlyphInfoCreateWithCharacterIdentifier(CGFontIndex cid, CTCharacterCollection collection, CFStringRef baseString)
{
  const __CTGlyphInfo *v3;
  void *v4;
  id v6;
  id v7;
  CFStringRef v8;
  CTCharacterCollection v9;
  CGFontIndex v10;

  v3 = 0;
  v10 = cid;
  v9 = collection;
  v8 = baseString;
  if (collection <= kCTCharacterCollectionAdobeKorea1 && cid != 0xFFFF && baseString)
  {
    v7 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTGlyphInfo,unsigned short &,CTCharacterCollection &,__CFString const*&>((__int16 *)&v10, (__int16 *)&v9, (void **)&v8, (unint64_t *)&v6);
    do
      v4 = (void *)__ldaxr((unint64_t *)&v6);
    while (__stlxr(0, (unint64_t *)&v6));
    v7 = v4;

    do
      v3 = (const __CTGlyphInfo *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));

  }
  return v3;
}

void TCFBase_NEW<CTGlyphInfo,unsigned short &,CTCharacterCollection &,__CFString const*&>(__int16 *a1@<X0>, __int16 *a2@<X1>, void **a3@<X2>, unint64_t *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  __int16 v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  id v16;

  v8 = (_QWORD *)TCFBase<TNativeGlyphInfo>::Allocate();
  if (v8)
  {
    v9 = v8;
    v10 = *a1;
    v11 = *a2;
    v12 = *a3;
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = 0;
    v8[5] = v8 + 6;
    v13 = operator new();
    v14 = v12;
    *(_QWORD *)v13 = &off_1E15DECF0;
    *(_QWORD *)(v13 + 8) = v14;
    *(_WORD *)(v13 + 16) = v10;
    *(_WORD *)(v13 + 18) = v11;
    v9[6] = v13;
    v16 = v9;
    do
      v15 = __ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    *a4 = v15;

  }
  else
  {
    *a4 = 0;
  }
}

CFStringRef CTGlyphInfoGetGlyphName(CTGlyphInfoRef glyphInfo)
{
  unint64_t v1;
  const __CFString *v2;
  id v4[2];

  if (!glyphInfo)
    return 0;
  v4[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v4, glyphInfo);
  v1 = atomic_load((unint64_t *)v4);
  v2 = (const __CFString *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v1 + 40) + 32))(**(_QWORD **)(v1 + 40));

  return v2;
}

CGFontIndex CTGlyphInfoGetCharacterIdentifier(CTGlyphInfoRef glyphInfo)
{
  unint64_t v1;
  CGFontIndex v2;
  id v4[2];

  if (!glyphInfo)
    return -1;
  v4[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v4, glyphInfo);
  v1 = atomic_load((unint64_t *)v4);
  v2 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v1 + 40) + 40))(**(_QWORD **)(v1 + 40));

  return v2;
}

CTCharacterCollection CTGlyphInfoGetCharacterCollection(CTGlyphInfoRef glyphInfo)
{
  unint64_t v1;
  CTCharacterCollection v2;
  id v4[2];

  if (!glyphInfo)
    return 0;
  v4[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v4, glyphInfo);
  v1 = atomic_load((unint64_t *)v4);
  v2 = (*(unsigned __int16 (**)(_QWORD))(***(_QWORD ***)(v1 + 40) + 48))(**(_QWORD **)(v1 + 40));

  return v2;
}

unint64_t _CTGlyphInfoGetBaseString(id a1)
{
  unint64_t v1;
  unint64_t v2;
  id v4[2];

  if (!a1)
    return 0;
  v4[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v4, a1);
  v1 = atomic_load((unint64_t *)v4);
  v2 = atomic_load((unint64_t *)(**(_QWORD **)(v1 + 40) + 8));

  return v2;
}

const void *_CTGlyphInfoGetFont(id a1)
{
  unint64_t v1;
  const void *v2;
  const void *v3;
  id v5[2];

  if (!a1)
    return 0;
  v5[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v5[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v5, a1);
  v1 = atomic_load((unint64_t *)v5);
  v2 = (const void *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v1 + 40) + 24))(**(_QWORD **)(v1 + 40));
  v3 = _CTFontEnsureFontRef(v2);

  return v3;
}

CGGlyph CTGlyphInfoGetGlyph(CTGlyphInfoRef glyphInfo)
{
  unint64_t v1;
  CGGlyph v2;
  id v4[2];

  if (!glyphInfo)
    return 0;
  v4[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (id)0xAAAAAAAAAAAAAAAALL;
  TGlyphInfo::TGlyphInfo((TGlyphInfo *)v4, glyphInfo);
  v1 = atomic_load((unint64_t *)v4);
  v2 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v1 + 40) + 16))(**(_QWORD **)(v1 + 40));

  return v2;
}

Class TCFBase<TNativeGlyphInfo>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  TCFBase<TNativeGlyphInfo>::CreateTypeID();
  return _CTGlyphInfoEnableBridging();
}

uint64_t TCFBase<TNativeGlyphInfo>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  if ((v0 & 1) == 0
  {
    TCFBase<TNativeGlyphInfo>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE7058 = "CTGlyphInfo";
    qword_1ECDE7060 = 0;
    unk_1ECDE7068 = 0;
    qword_1ECDE7070 = (uint64_t)TCFBase<TNativeGlyphInfo>::ClassDestruct;
    unk_1ECDE7078 = TCFBase<TNativeGlyphInfo>::ClassEqual;
    qword_1ECDE7080 = (uint64_t)TCFBase<TNativeGlyphInfo>::ClassHash;
    unk_1ECDE7088 = 0;
    qword_1ECDE7090 = (uint64_t)TCFBase<TNativeGlyphInfo>::ClassDebug;
    unk_1ECDE7098 = 0;
    qword_1ECDE70A0 = 0;
    unk_1ECDE70A8 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TNativeGlyphInfo>::fTypeID = result;
  return result;
}

uint64_t TCFBase<TNativeGlyphInfo>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t result;

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  v3 = *(uint64_t **)(a1 + 40);
  result = *v3;
  *v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t TCFBase<TNativeGlyphInfo>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 40) + 64))(**(_QWORD **)(a1 + 40), **(_QWORD **)(a2 + 40));
}

_QWORD *TCFBase<TNativeGlyphInfo>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TCFBase<TNativeGlyphInfo>::ClassDebug(uint64_t a1)
{
  uint64_t result;
  const void *v3;
  CFStringRef v4;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  if (result)
  {
    v3 = (const void *)result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTGlyphInfo", a1, result);
    CFRelease(v3);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t TCFBase<TNativeGlyphInfo>::Allocate()
{
  if (TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeGlyphInfo>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

void TNativeGlyphInfo::TNativeGlyphInfo(TNativeGlyphInfo *this, __int16 a2, const __CTFont *a3, __CFString *a4)
{
  uint64_t v8;
  const __CFString *v9;

  v8 = operator new();
  v9 = a4;
  *(_QWORD *)v8 = &off_1E15DEDB0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_WORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)this = v8;
}

BOOL TNativeGlyphInfo::GlyphInfo::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  BOOL v4;

  v2 = (const void *)atomic_load((unint64_t *)(a1 + 8));
  v3 = (const void *)atomic_load((unint64_t *)(a2 + 8));
  if (v2 == v3)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && CFEqual(v2, v3) != 0;
}

uint64_t TNativeGlyphInfo::IdentityGlyphInfo::GetGlyphForFont(TNativeGlyphInfo::IdentityGlyphInfo *this, const __CTFont *a2, CFTypeRef cf1)
{
  CFTypeRef v5;
  uint64_t result;
  BOOL v7;
  TFont *v9;
  unint64_t v10;

  v5 = (CFTypeRef)atomic_load((unint64_t *)this + 1);
  if (v5 == cf1)
  {
    v7 = 0;
  }
  else
  {
    result = 0;
    if (!cf1 || !v5)
      return result;
    v7 = CFEqual(cf1, v5) == 0;
  }
  result = 0;
  if (a2 && !v7)
  {
    if (atomic_load((unint64_t *)this + 3))
    {
      v9 = (TFont *)*((_QWORD *)a2 + 5);
      v10 = atomic_load((unint64_t *)this + 3);
      result = TFont::Compare(v9, *(const TFont **)(v10 + 40), 1);
      if ((_DWORD)result)
        return *((unsigned __int16 *)this + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TNativeGlyphInfo::IdentityGlyphInfo::operator==(unint64_t *a1, unint64_t *a2)
{
  const void *v4;
  const void *v5;
  BOOL v6;
  uint64_t result;
  int v8;
  const void *v9;
  const void *v10;
  BOOL v11;

  v4 = (const void *)atomic_load(a1 + 1);
  v5 = (const void *)atomic_load(a2 + 1);
  if (v4 == v5)
  {
LABEL_7:
    v8 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
    if (v8 == (*(unsigned int (**)(unint64_t *))(*a2 + 16))(a2))
    {
      v9 = (const void *)(*(uint64_t (**)(unint64_t *))(*a1 + 24))(a1);
      v10 = (const void *)(*(uint64_t (**)(unint64_t *))(*a2 + 24))(a2);
      if (v9 == v10)
        return 1;
      if (v9)
        v11 = v10 == 0;
      else
        v11 = 1;
      if (!v11)
        return CFEqual(v9, v10) != 0;
    }
    return 0;
  }
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    result = CFEqual(v4, v5);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  return 0;
}

TNativeGlyphInfo::NamedGlyphInfo *TNativeGlyphInfo::NamedGlyphInfo::NamedGlyphInfo(TNativeGlyphInfo::NamedGlyphInfo *this, __CFString *a2, TFont **a3, id a4)
{
  __int16 GlyphWithName;
  id v9;

  GlyphWithName = 0;
  if (a2 && a3)
    GlyphWithName = TFont::GetGlyphWithName(a3[5], a2);
  *(_QWORD *)this = &off_1E15DEE10;
  v9 = a4;
  *(_QWORD *)this = &off_1E15DEDB0;
  *((_QWORD *)this + 1) = v9;
  *((_WORD *)this + 8) = GlyphWithName;
  *((_QWORD *)this + 3) = a3;
  *(_QWORD *)this = &off_1E15DED50;
  *((_QWORD *)this + 4) = a2;
  return this;
}

uint64_t TNativeGlyphInfo::NamedGlyphInfo::operator==(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  BOOL v7;

  result = TNativeGlyphInfo::IdentityGlyphInfo::operator==(a1, a2);
  if ((_DWORD)result)
  {
    v5 = (const void *)(*(uint64_t (**)(unint64_t *))(*a1 + 32))(a1);
    v6 = (const void *)(*(uint64_t (**)(unint64_t *))(*a2 + 32))(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      if (v5)
        v7 = v6 == 0;
      else
        v7 = 1;
      return !v7 && CFEqual(v5, v6) != 0;
    }
  }
  return result;
}

uint64_t TNativeGlyphInfo::CIDGlyphInfo::GetGlyphForFont(TNativeGlyphInfo::CIDGlyphInfo *this, const __CTFont *font, CFTypeRef cf1)
{
  CFTypeRef v5;
  uint64_t v6;
  __CFString *v8;
  CFIndex v9;
  id v11;

  v5 = (CFTypeRef)atomic_load((unint64_t *)this + 1);
  if (v5 == cf1)
  {
LABEL_5:
    if (*((_WORD *)this + 9))
    {
      v11 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 496))(&v11);
      if (atomic_load((unint64_t *)&v11))
      {
        atomic_load((unint64_t *)&v11);
        if (CGFontGetRegistryOrderingSupplement())
        {
          v8 = TNativeGlyphInfo::CIDGlyphInfo::GetGlyphForFont(__CTFont const*,__CFString const*)const::kOrderingTable[*((unsigned __int16 *)this + 9) - 1];
          if (CFEqual((CFTypeRef)0xAAAAAAAAAAAAAAAALL, CFSTR("Adobe")))
          {
            if (CFEqual((CFTypeRef)0xAAAAAAAAAAAAAAAALL, v8))
            {
              atomic_load((unint64_t *)&v11);
              if ((CGFontGetGlyphsForCIDs() & 1) != 0)
              {
                v6 = 43690;

                return v6;
              }
            }
          }
        }
      }

    }
    else
    {
      v9 = *((unsigned __int16 *)this + 8);
      if (CTFontGetGlyphCount(font) > v9)
        return *((unsigned __int16 *)this + 8);
    }
    return 0;
  }
  v6 = 0;
  if (cf1 && v5)
  {
    if (!CFEqual(cf1, v5))
      return 0;
    goto LABEL_5;
  }
  return v6;
}

uint64_t TNativeGlyphInfo::CIDGlyphInfo::operator==(unint64_t *a1, unint64_t *a2)
{
  const void *v4;
  const void *v5;
  BOOL v6;
  uint64_t result;
  int v8;
  int v9;

  v4 = (const void *)atomic_load(a1 + 1);
  v5 = (const void *)atomic_load(a2 + 1);
  if (v4 != v5)
  {
    if (v4)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (v6)
      return 0;
    result = CFEqual(v4, v5);
    if (!(_DWORD)result)
      return result;
  }
  v8 = (*(uint64_t (**)(unint64_t *))(*a1 + 40))(a1);
  if (v8 == (*(unsigned int (**)(unint64_t *))(*a2 + 40))(a2))
  {
    v9 = (*(uint64_t (**)(unint64_t *))(*a1 + 48))(a1);
    return v9 == (*(unsigned int (**)(unint64_t *))(*a2 + 48))(a2);
  }
  return 0;
}

void TNativeGlyphInfo::GlyphInfo::~GlyphInfo(id *this)
{
  *this = &off_1E15DEE10;

}

{
  *this = &off_1E15DEE10;

  JUMPOUT(0x186DC03ACLL);
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetGlyph(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetFont(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetGlyphName(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetCID(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetCollection(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::GetGlyphForFont(TNativeGlyphInfo::GlyphInfo *this, const __CTFont *a2, const __CFString *a3)
{
  return 0;
}

uint64_t TNativeGlyphInfo::GlyphInfo::DebugDescription(TNativeGlyphInfo::GlyphInfo *this)
{
  return 0;
}

void TNativeGlyphInfo::IdentityGlyphInfo::~IdentityGlyphInfo(id *this)
{
  *this = &off_1E15DEDB0;

  *this = &off_1E15DEE10;
}

{
  *this = &off_1E15DEDB0;

  *this = &off_1E15DEE10;
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TNativeGlyphInfo::IdentityGlyphInfo::GetGlyph(TNativeGlyphInfo::IdentityGlyphInfo *this)
{
  return *((unsigned __int16 *)this + 8);
}

unint64_t TNativeGlyphInfo::IdentityGlyphInfo::GetFont(TNativeGlyphInfo::IdentityGlyphInfo *this)
{
  return atomic_load((unint64_t *)this + 3);
}

void TNativeGlyphInfo::NamedGlyphInfo::~NamedGlyphInfo(id *this)
{
  TNativeGlyphInfo::NamedGlyphInfo::~NamedGlyphInfo(this);
  JUMPOUT(0x186DC03ACLL);
}

{
  *this = &off_1E15DED50;

  *this = &off_1E15DEDB0;
  *this = &off_1E15DEE10;

}

uint64_t TNativeGlyphInfo::NamedGlyphInfo::GetGlyph(TNativeGlyphInfo::NamedGlyphInfo *this)
{
  return 0;
}

unint64_t TNativeGlyphInfo::NamedGlyphInfo::GetGlyphName(TNativeGlyphInfo::NamedGlyphInfo *this)
{
  return atomic_load((unint64_t *)this + 4);
}

void TNativeGlyphInfo::CIDGlyphInfo::~CIDGlyphInfo(id *this)
{
  *this = &off_1E15DEE10;

}

{
  *this = &off_1E15DEE10;

  JUMPOUT(0x186DC03ACLL);
}

uint64_t TNativeGlyphInfo::CIDGlyphInfo::GetCID(TNativeGlyphInfo::CIDGlyphInfo *this)
{
  return *((unsigned __int16 *)this + 8);
}

uint64_t TNativeGlyphInfo::CIDGlyphInfo::GetCollection(TNativeGlyphInfo::CIDGlyphInfo *this)
{
  return *((unsigned __int16 *)this + 9);
}

void TGlyphInfo::TGlyphInfo(TGlyphInfo *this, id a2)
{
  CFTypeID v4;
  BOOL v5;
  void *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  void *v11;
  __CFString *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  __CFString *v17;
  id v18;
  __CFString *v19;
  id v20;

  *(_QWORD *)this = a2;
  v4 = CFGetTypeID(a2);
  if (TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeGlyphInfo>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeGlyphInfo>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  v5 = v4 == TCFBase<TNativeGlyphInfo>::fTypeID;
  *((_BYTE *)this + 8) = v4 == TCFBase<TNativeGlyphInfo>::fTypeID;
  if (!v5)
  {
    v6 = (void *)atomic_load((unint64_t *)this);
    v20 = objc_msgSend(v6, sel__baseString);
    v7 = atomic_load((unsigned __int8 *)&qword_1ECDE7C38);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7C38))
    {
      _MergedGlobals_25 = (uint64_t)objc_lookUpClass("NSCIDGlyphInfo");
      __cxa_guard_release(&qword_1ECDE7C38);
    }
    v8 = atomic_load((unsigned __int8 *)&qword_1ECDE7C48);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7C48))
    {
      qword_1ECDE7C40 = (uint64_t)objc_lookUpClass("NSGlyphNameGlyphInfo");
      __cxa_guard_release(&qword_1ECDE7C48);
    }
    v9 = atomic_load((unsigned __int8 *)&qword_1ECDE7C58);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7C58))
    {
      qword_1ECDE7C50 = (uint64_t)objc_lookUpClass("NSIdentityGlyphInfo");
      __cxa_guard_release(&qword_1ECDE7C58);
    }
    if (objc_msgSend(v6, sel_isKindOfClass_, _MergedGlobals_25))
    {
      LOWORD(v18) = (unsigned __int16)objc_msgSend(v6, sel_characterIdentifier);
      LOWORD(v17) = (unsigned __int16)objc_msgSend(v6, sel_characterCollection);
      TCFBase_NEW<CTGlyphInfo,unsigned short &,CTCharacterCollection &,__CFString const*&>((__int16 *)&v18, (__int16 *)&v17, &v20, (unint64_t *)&v19);
      do
        v10 = __ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
      do
        v11 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v10, (unint64_t *)this));

      v12 = v19;
    }
    else if (objc_msgSend(v6, sel_isKindOfClass_, qword_1ECDE7C40))
    {
      v19 = (__CFString *)objc_msgSend(v6, sel_glyphName);
      v18 = (id)_CTFontEnsureFontRef(objc_msgSend(v6, sel__font));
      TCFBase_NEW<CTGlyphInfo,__CFString const*&,__CTFont const*&,__CFString const*&>(&v19, (TFont ***)&v18, &v20, (unint64_t *)&v17);
      do
        v13 = __ldaxr((unint64_t *)&v17);
      while (__stlxr(0, (unint64_t *)&v17));
      do
        v14 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v13, (unint64_t *)this));

      v12 = v17;
    }
    else
    {
      if (!objc_msgSend(v6, sel_isKindOfClass_, qword_1ECDE7C50))
        return;
      LOWORD(v17) = (unsigned __int16)objc_msgSend(v6, sel__glyph);
      v19 = (__CFString *)_CTFontEnsureFontRef(objc_msgSend(v6, sel__font, v17));
      TCFBase_NEW<CTGlyphInfo,unsigned short &,__CTFont const*&,__CFString const*&>((__int16 *)&v17, (const __CTFont **)&v19, (__CFString **)&v20, (unint64_t *)&v18);
      do
        v15 = __ldaxr((unint64_t *)&v18);
      while (__stlxr(0, (unint64_t *)&v18));
      do
        v16 = (void *)__ldaxr((unint64_t *)this);
      while (__stlxr(v15, (unint64_t *)this));

      v12 = (__CFString *)v18;
    }

  }
}

uint64_t TGlyphInfo::GetGlyph(TGlyphInfo *this, const __CTFont *a2, const __CFString *a3)
{
  unint64_t v5;

  if (!*((_BYTE *)this + 8))
    a2 = (const __CTFont *)_CTFontEnsureFontRef(a2);
  v5 = atomic_load((unint64_t *)this);
  return (*(uint64_t (**)(_QWORD, const __CTFont *, const __CFString *))(***(_QWORD ***)(v5 + 40) + 56))(**(_QWORD **)(v5 + 40), a2, a3);
}

void CreateSetWithArray(const __CFArray *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", a1);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

void ArrayComponentsJoinedByString(const __CFArray *a1@<X0>, const __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  unint64_t v7;
  void *v8;
  id v9;

  *a3 = 0;
  v6 = (void *)MEMORY[0x186DC070C]();
  v9 = (id)-[__CFArray componentsJoinedByString:](a1, "componentsJoinedByString:", a2);
  do
    v7 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  do
    v8 = (void *)__ldaxr(a3);
  while (__stlxr(v7, a3));

  objc_autoreleasePoolPop(v6);
}

void EnumerateCharactersInRange(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *CStringPtr;
  __int128 v9;
  int64_t v10;
  int64_t v11;
  UniChar v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  UniChar v21;
  int64_t v22;
  int64_t v23;
  BOOL v24;
  int v25;
  _BOOL8 v26;
  const __CFCharacterSet *v27;
  unint64_t v28;
  char v29;
  UniChar buffer[8];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CFStringRef v38;
  const UniChar *CharactersPtr;
  const char *v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  char *v45;
  int v46;
  _QWORD v47[4];
  CFRange v48;
  CFRange v49;
  CFRange v50;

  v38 = a1;
  v41 = a2;
  v42 = a3;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (CharactersPtr)
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v9;
  v37 = v9;
  v34 = v9;
  v35 = v9;
  v32 = v9;
  v33 = v9;
  *(_OWORD *)buffer = v9;
  v31 = v9;
  v40 = CStringPtr;
  v43 = 0;
  v44 = 0;
  if (a3 < 1)
  {
LABEL_50:

    return;
  }
  v10 = 0;
  while (1)
  {
    if (v10 < 0 || (v11 = v42, v42 <= v10))
    {
      v13 = 0;
LABEL_11:
      v14 = 1;
      v15 = v10;
      goto LABEL_12;
    }
    if (CharactersPtr)
    {
      v12 = CharactersPtr[v41 + v10];
    }
    else if (v40)
    {
      v12 = v40[v41 + v10];
    }
    else
    {
      if (v44 <= v10 || (v17 = v43, v43 > v10))
      {
        v18 = v10 - 4;
        if ((unint64_t)v10 < 4)
          v18 = 0;
        if (v18 + 64 < v42)
          v11 = v18 + 64;
        v43 = v18;
        v44 = v11;
        v48.location = v41 + v18;
        v48.length = v11 - v18;
        CFStringGetCharacters(v38, v48, buffer);
        v17 = v43;
      }
      v12 = buffer[v10 - v17];
    }
    v13 = v12;
    if (v12 >> 10 != 54)
      goto LABEL_11;
    v19 = v10 + 1;
    if (v10 + 1 >= a3)
      goto LABEL_11;
    v20 = v42;
    if (v42 <= v19)
      goto LABEL_11;
    if (CharactersPtr)
    {
      v21 = CharactersPtr[v41 + v19];
    }
    else if (v40)
    {
      v21 = v40[v41 + v19];
    }
    else
    {
      if (v44 <= v19 || (v22 = v43, v43 > v19))
      {
        v23 = v10 - 3;
        if ((unint64_t)v19 < 4)
          v23 = 0;
        if (v23 + 64 < v42)
          v20 = v23 + 64;
        v43 = v23;
        v44 = v20;
        v49.location = v41 + v23;
        v49.length = v20 - v23;
        CFStringGetCharacters(v38, v49, buffer);
        v22 = v43;
      }
      v21 = buffer[v19 - v22];
    }
    v24 = v21 >> 10 == 55;
    v25 = (v13 << 10) + v21 - 56613888;
    if (v24)
      v13 = v25;
    v14 = 1;
    if (v24)
      v14 = 2;
    v15 = v24 ? v10 + 1 : v10;
LABEL_12:
    v29 = 0;
    v16 = *(_QWORD *)(a4 + 24);
    v47[0] = v10 + a2;
    v47[1] = v14;
    v46 = v13;
    v45 = &v29;
    if (!v16)
      break;
    (*(void (**)(uint64_t, _QWORD *, int *, char **))(*(_QWORD *)v16 + 48))(v16, v47, &v46, &v45);
    if (!v29)
    {
      v10 = v15 + 1;
      if (v15 + 1 < a3)
        continue;
    }
    goto LABEL_50;
  }
  v26 = std::__throw_bad_function_call[abi:nn180100]();
  RangeOfCharactersFromSet((const __CFString *)v26, v27, v50, v28);
}

CFIndex RangeOfCharactersFromSet(const __CFString *a1, const __CFCharacterSet *a2, CFRange a3, CFStringCompareFlags a4)
{
  CFIndex length;
  CFIndex location;
  _QWORD *v7;
  uint64_t v8;
  const __CFCharacterSet *v10;
  CFRange result;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  length = a3.length;
  location = a3.location;
  v14 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  result = (CFRange)xmmword_18494F310;
  if (CFStringFindCharacterFromSet(a1, a2, a3, a4, &result))
  {
    v12[0] = &off_1E15DF290;
    v12[1] = &v10;
    v12[2] = &result;
    v13 = v12;
    EnumerateCharactersInRange(a1, result.length + result.location, location + length - (result.length + result.location), (uint64_t)v12);
    v7 = v13;
    if (v13 == v12)
    {
      v8 = 4;
      v7 = v12;
      goto LABEL_6;
    }
    if (v13)
    {
      v8 = 5;
LABEL_6:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  return result.location;
}

void CreateLocalizedStringWithFormat(const __CFString *a1@<X0>, unint64_t *a2@<X8>, ...)
{
  id v4;
  unint64_t v5;
  id v6;
  va_list v7;
  va_list va;

  va_start(va, a2);
  va_copy(v7, va);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v6 = (id)objc_msgSend(v4, "initWithFormat:locale:arguments:", a1, objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"), v7);
  do
    v5 = __ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));
  *a2 = v5;

}

void CopyPreferredAndSystemLanguages(unint64_t *a1@<X8>)
{
  CFArrayRef v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = CFLocaleCopyPreferredLanguages();
  v5[0] = &off_1E15DEEE8;
  v6 = v5;
  CreateOrderedArray(v2, (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "systemLanguages"), (uint64_t)v5, a1);
  v3 = v6;
  if (v6 == v5)
  {
    v4 = 4;
    v3 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

}

void CreateCopyOfArrayByApplyingFunction(__CFArray const*,std::function<TCFRef<void const*> ()(void const*)>)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  void *v7;
  id v8;
  __CFArray *v9;
  id v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 8);
  v11 = a1;
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v10 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(&v10, v3, &v11);
    if (atomic_load((unint64_t *)&v10))
    {
      v6 = *(unint64_t **)a2;
      v7 = (void *)atomic_load((unint64_t *)&v10);
      v8 = v7;
      v9 = (__CFArray *)atomic_load(v6);
      CFArrayAppendValue(v9, v8);

    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    CopyLowercasedString(__CFString const*)::$_0::__invoke();
  }
}

CFLocaleRef CopyLowercasedString(__CFString const*)::$_0::__invoke()
{
  CFLocaleRef result;

  result = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US"));
  _MergedGlobals_26 = (uint64_t)result;
  return result;
}

void std::__function::__func<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0,std::allocator<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0,std::allocator<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0,std::allocator<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0,std::allocator<RangeOfCharactersFromSet(__CFString const*,__CFCharacterSet const*,CFRange,unsigned long)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::operator()(uint64_t a1, uint64_t a2, UTF32Char *a3, _BYTE **a4)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *a4;
  result = CFCharacterSetIsLongCharacterMember(**(CFCharacterSetRef **)(a1 + 8), *a3);
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) += v5;
  else
    *v6 = 1;
  return result;
}

void std::__function::__func<$_3,std::allocator<$_3>,objc_object * ()(objc_object *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<$_3,std::allocator<$_3>,objc_object * ()(objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DEEE8;
  return result;
}

void std::__function::__func<$_3,std::allocator<$_3>,objc_object * ()(objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DEEE8;
}

uint64_t std::__function::__func<$_3,std::allocator<$_3>,objc_object * ()(objc_object *)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void ArabicShapingEngine::~ArabicShapingEngine(ArabicShapingEngine *this)
{
  JUMPOUT(0x186DC03ACLL);
}

uint64_t ArabicShapingEngine::ApplyScriptShaping(ArabicShapingEngine *this, const OTL::GSUB *a2, OTL::GlyphLookups *a3, unsigned int *a4, BOOL *a5)
{
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  int v18;
  char **v19;
  char *v20[34];
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  __int128 *v32;
  uint64_t v33;

  v7 = (unint64_t)a2;
  v33 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  JoiningScriptShapingEngine::ApplyScriptShaping(this, a2, a3, a5);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v8;
  v29 = v8;
  v28 = v8;
  v27 = v8;
  v26 = v8;
  v25 = v8;
  v24 = v8;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v32 = &v24;
  v18 = 1919707495;
  v9 = (unint64_t)v20;
  OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(v20, &v18, &v19);
  OTL::GCommon::GetLookups(v7, (uint64_t)v20, (uint64_t)&v21, 0);
  v19 = v20;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
  v10 = v21;
  v11 = v22;
  while (v10 != v11)
  {
    v12 = *v10++;
    v9 = v9 & 0xFFFFFFFF00000000 | v12;
    OTL::GlyphLookups::SetLookupInRange<true>((uint64_t *)a3, v9, 0, -1);
  }
  v20[0] = (char *)&v21;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v20);
  if (OTL::GCommon::HasFeature((OTL::GCommon *)v7, 0x72636C74u))
  {
    *(_OWORD *)a4 = xmmword_18494F330;
  }
  else
  {
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v30 = v13;
    v29 = v13;
    v28 = v13;
    v27 = v13;
    v26 = v13;
    v25 = v13;
    v24 = v13;
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v31 = 0xAAAAAAAAAAAAAAAALL;
    v32 = &v24;
    v18 = 1667329140;
    OTL::FeatureBuffer::FeatureBuffer<unsigned int const*>(v20, &v18, &v19);
    OTL::GCommon::GetLookups(v7, (uint64_t)v20, (uint64_t)&v21, 0);
    v19 = v20;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
    v14 = v21;
    v15 = v22;
    while (v14 != v15)
    {
      v16 = *v14++;
      v7 = v7 & 0xFFFFFFFF00000000 | v16;
      OTL::GlyphLookups::SetLookupInRange<true>((uint64_t *)a3, v7, 0, -1);
    }
    *(_QWORD *)a4 = 1836279156;
    v20[0] = (char *)&v21;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v20);
  }
  return 1;
}

uint32_t CTGetCoreTextVersion(void)
{
  return 851968;
}

id CTCopyDescriptionDictionary(TFrame **a1, uint64_t a2)
{
  CFTypeID v4;
  CFTypeID v6;
  CFTypeID v7;

  v4 = CFGetTypeID(a1);
  if (TCFBase<TFrame>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TFrame>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFrame>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  if (v4 == TCFBase<TFrame>::fTypeID)
    return TFrame::CopyDescriptionDictionary(a1[5], a2);
  v6 = CFGetTypeID(a1);
  if (v6 == CTLineGetTypeID())
    return TLine::CopyDescriptionDictionary(a1[5], a2);
  v7 = CFGetTypeID(a1);
  if (v7 == CTRunGetTypeID())
    return (id)(*(uint64_t (**)(TFrame *, uint64_t))(*(_QWORD *)a1[5] + 16))(a1[5], a2);
  else
    return 0;
}

void CTWriteDescriptionDictionaryToFile(TFrame **a1, uint64_t a2, const char *a3)
{
  id v4;
  const void *v5;
  const __CFAllocator *v6;
  size_t v7;
  const __CFURL *v8;
  const __CFURL *v9;
  __CFWriteStream *v10;
  __CFWriteStream *v11;

  v4 = CTCopyDescriptionDictionary(a1, a2);
  if (v4)
  {
    v5 = v4;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = strlen(a3);
    v8 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)a3, v7, 0);
    if (v8)
    {
      v9 = v8;
      v10 = CFWriteStreamCreateWithFile(v6, v8);
      if (v10)
      {
        v11 = v10;
        if (CFWriteStreamOpen(v10))
        {
          CFPropertyListWrite(v5, v11, kCFPropertyListXMLFormat_v1_0, 0, 0);
          CFWriteStreamClose(v11);
        }
        CFRelease(v11);
      }
      CFRelease(v9);
    }
    CFRelease(v5);
  }
}

uint64_t PointerToEpsilonDestructor(uint64_t result)
{
  if (result)
    JUMPOUT(0x186DC03ACLL);
  return result;
}

_QWORD *_CTSwapAllDescriptorsFallbackDisabled(unsigned int a1)
{
  _QWORD *result;
  uint64_t v3;

  result = GetTable();
  if (result)
  {
    v3 = result[16];
    result[16] = a1;
    result[17] = ThreadSpecificNullDestructor<BOOL>;
    return (_QWORD *)(v3 != 0);
  }
  return result;
}

double CTGetDefaultLanguageAwareLineHeightRatio()
{
  return 0.33;
}

BOOL CTStringIsSuitableForVerticalLayout(void *a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v5;
  _QWORD v7[8];
  _QWORD v8[4];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v2 = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (CTStringIsSuitableForVerticalLayout::once != -1)
      dispatch_once_f(&CTStringIsSuitableForVerticalLayout::once, 0, (dispatch_function_t)CTStringIsSuitableForVerticalLayout::$_0::__invoke);
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 1;
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2020000000;
    v8[3] = 0;
    v5 = objc_msgSend(a1, "length");
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CTStringIsSuitableForVerticalLayout_block_invoke;
    v7[3] = &unk_1E15E7DD8;
    v7[4] = a1;
    v7[5] = &v9;
    v7[6] = v8;
    v7[7] = a2;
    objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 2, v7);
    v2 = *((_BYTE *)v10 + 24) != 0;
    _Block_object_dispose(v8, 8);
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

uint64_t CTStringIsSuitableForArabicJustification(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  int v4;
  unint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CTFont *v9;
  CTFontRef v10;
  char v11;
  int v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  _QWORD *v16;
  CFIndex shared_weak_owners;
  unint64_t v18;
  const __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  const TRun *v22;
  unint64_t v23;
  char *v24;
  unsigned __int16 *i;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  const __CFDictionary *v32;
  const __CTFont *v33;
  _OWORD v34[4];
  _OWORD v35[4];
  unint64_t v36;
  char v37;
  CFRange result;
  id v39;
  void **p_keys;
  void *keys;
  void *v42[2];
  _BYTE v43[720];
  _BYTE *v44;
  void *values[34];
  _BYTE v46[128];
  _BYTE v47[48];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CFRange v53;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    Length = CFStringGetLength(a1);
    if (Length >= 1)
    {
      v3 = Length;
      v39 = 0;
      keys = &v39;
      v42[0] = 0;
      v4 = _ExuberatedGroupForPreferredLanguages(0, (const __CFString **)v42);
      v5 = (unint64_t *)keys;
      v6 = v42[0];
      do
        v7 = (void *)__ldaxr(v5);
      while (__stlxr((unint64_t)v6, v5));

      if (v4)
      {
        v8 = (void *)atomic_load((unint64_t *)&v39);
        v9 = v8;
        v10 = v9;
        if (v9 == (const __CTFont *)CFSTR("ur"))
          goto LABEL_18;
        if (v9)
        {
          v12 = CFEqual(v9, CFSTR("ur"));

          if (v12)
          {
            v11 = 0;
LABEL_20:

            return v11 & 1;
          }
        }
        else
        {

        }
      }
      v10 = CTFontCreateWithNameAndOptions(CFSTR(".SFArabic-Regular"), 0.0, 0, 0x400uLL);
      if (v10)
      {
        if (qword_1ECDE7C78 != -1)
          dispatch_once_f(&qword_1ECDE7C78, v10, (dispatch_function_t)CTStringIsSuitableForArabicJustification::$_0::__invoke);
        if (_MergedGlobals_27)
        {
          result.location = 0xAAAAAAAAAAAAAAAALL;
          result.length = 0xAAAAAAAAAAAAAAAALL;
          v53.location = 0;
          v53.length = v3;
          if (!CFStringFindCharacterFromSet(a1, (CFCharacterSetRef)_MergedGlobals_27, v53, 0, &result))
          {
            v14 = (std::__shared_weak_count *)operator new(0x48uLL);
            v14->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            v14->__shared_weak_owners_ = 0;
            v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
            v16 = &v14[1].__vftable;
            TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)&v14[1], a1, 0);
            shared_weak_owners = v14[1].__shared_weak_owners_;
            result.location = 0;
            result.length = shared_weak_owners;
            *(_OWORD *)v47 = xmmword_18494F3C8;
            memset(&v47[16], 170, 32);
            v48 = unk_18494F3F8;
            *(_OWORD *)&v46[96] = xmmword_18494F3A8;
            *(_OWORD *)&v46[112] = unk_18494F3B8;
            memset(v46, 170, 96);
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
            *(_QWORD *)v46 = v14 + 1;
            v31 = v14;
            *(_QWORD *)&v46[8] = v14;
            memset(&v46[16], 0, 24);
            *(_QWORD *)&v46[64] = &v46[40];
            BYTE8(v48) = 0;
            memset(&v46[72], 0, 56);
            memset(&v47[8], 0, 21);
            LOBYTE(v48) = 0;
            v51 = 0;
            v49 = 0;
            v50 = 0;
            *(_OWORD *)&v47[32] = 0uLL;
            *(_QWORD *)v47 = 0xFFEFFFFFFFFFFFFFLL;
            keys = CFSTR("NSFont");
            v33 = v10;
            values[0] = v10;
            v19 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            memcpy(values, &unk_18494F420, sizeof(values));
            v32 = v19;
            TTypesetterString::TTypesetterString((TTypesetterString *)values, a1, v19);
            TTypesetter::FillLine((TTypesetter *)values, (TLine *)v46, 1.79769313e308, 0.0);
            v37 = 0;
            v20 = *(_QWORD *)&v46[24];
            v21 = *(_QWORD *)&v46[16];
            if (*(_QWORD *)&v46[16] == *(_QWORD *)&v46[24])
            {
              v11 = 0;
            }
            else
            {
              v11 = 0;
              memset(v34, 170, sizeof(v34));
              do
              {
                v22 = *(const TRun **)(*(_QWORD *)v21 + 40);
                v23 = *((_QWORD *)v22 + 26);
                v35[2] = v34[3];
                v35[3] = v34[2];
                v36 = 0xAAAAAAAAFFFFFFFFLL;
                v35[0] = v34[0];
                v35[1] = v34[1];
                TArabicJustEngine::TArabicJustEngine((TArabicJustEngine *)v35, v22);
                memset(v43, 170, sizeof(v43));
                keys = 0;
                v42[0] = 0;
                v42[1] = 0;
                v44 = v43;
                if (v23)
                {
                  std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__vallocate[abi:nn180100]((char **)&keys, v23);
                  v24 = (char *)v42[0];
                  bzero(v42[0], 24 * ((24 * v23 - 24) / 0x18) + 24);
                  v42[0] = &v24[24 * v23];
                }
                if (TArabicJustEngine::GenerateMaximas((uint64_t)v35, (uint64_t)v46, v16, 0, v23, (uint64_t *)&keys, 0, 1))
                {
                  for (i = (unsigned __int16 *)keys; i != v42[0]; i += 12)
                  {
                    if (i[8] < 2u)
                    {
                      if (i != v42[0])
                      {
                        v11 = 1;
                        v26 = 1;
                        goto LABEL_37;
                      }
                      break;
                    }
                  }
                  v11 = 0;
                }
                v26 = 0;
LABEL_37:
                p_keys = &keys;
                std::vector<JustLeftRightMaxima,TInlineBufferAllocator<JustLeftRightMaxima,30ul>>::__destroy_vector::operator()[abi:nn180100](&p_keys);
                TArabicJustEngine::~TArabicJustEngine((TArabicJustEngine *)v35);
                if ((v26 & 1) != 0)
                  break;
                v21 += 8;
              }
              while (v21 != v20);
            }
            v27 = (std::__shared_weak_count *)values[31];
            v10 = v33;
            if (values[31])
            {
              v28 = (unint64_t *)((char *)values[31] + 8);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            TLine::~TLine((TLine *)values);

            TLine::~TLine((TLine *)v46);
            do
              v30 = __ldaxr(p_shared_owners);
            while (__stlxr(v30 - 1, p_shared_owners));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
            goto LABEL_19;
          }
        }
      }
LABEL_18:
      v11 = 0;
LABEL_19:

      goto LABEL_20;
    }
  }
  v11 = 0;
  return v11 & 1;
}

const __CFString *CTIsExuberatedLanguage(const __CFString *result)
{
  const __CFString *v1;

  if (result)
  {
    v1 = result;
    result = (const __CFString *)CFStringGetLength(result);
    if (result)
      return (const __CFString *)(GetExuberatedGroupForLanguage(v1, 0) != 0);
  }
  return result;
}

unint64_t CTCopyLanguageIdentifierNormalizedForLocalizedNames(__CFString *a1)
{
  unint64_t v1;
  id v3;

  LanguageIdentifierByNormalizing(a1, 1u, (unint64_t *)&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

_QWORD *_CTEnumerateScriptRanges(_QWORD *result)
{
  uint64_t v1;
  _QWORD v2[3];
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2[0] = &off_1E15DF2D8;
    v2[1] = result;
    v3 = v2;
    TOpenTypeMorph::EnumerateScriptRanges((uint64_t)v2);
    result = v3;
    if (v3 == v2)
    {
      v1 = 4;
      result = v2;
    }
    else
    {
      if (!v3)
        return result;
      v1 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
  }
  return result;
}

uint64_t CTStringIsSuitableForVerticalLayout::$_0::__invoke(CTStringIsSuitableForVerticalLayout::$_0 *this, void *a2)
{
  uint64_t result;
  unint64_t v3;

  v3 = 0xAAAAAAAAAAAAAAAALL;
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB38E8]), "initWithPattern:options:error:", CFSTR("[^  [[\\p{Hani}\\p{Hira}\\p{Kana}\\p{Hang}]--\\p{vo=R}]  \\u3099\\u309A  \\p{Block=Katakana}  [[\\p{Block=Halfwidth_and_Fullwidth_Forms}\\p{Punctuation}]--\\p{vo=R}]  \\uFF0D  [\\p{gc=Zs}--\\u1680]]+"), 2, &v3);
  CTStringIsSuitableForVerticalLayout::nonCJKRegex = result;
  return result;
}

void CTStringIsSuitableForArabicJustification::$_0::__invoke(CTStringIsSuitableForArabicJustification::$_0 *this, void *a2)
{
  const __CFCharacterSet *v2;
  CFCharacterSetRef Predefined;
  const __CFCharacterSet *v4;
  __CFCharacterSet *v5;
  __CFCharacterSet *v6;
  __CFCharacterSet *v7;
  CFCharacterSetRef v8;
  const __CFCharacterSet *v9;
  __CFCharacterSet *v10;
  unint64_t v11;
  id v12;
  CFRange v13;

  v2 = CTFontCopyCharacterSet(this);
  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableCharacterSet::TCFMutableCharacterSet((TCFMutableCharacterSet *)&v12, v2);
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  if (Predefined)
  {
    v4 = Predefined;
    v5 = (__CFCharacterSet *)atomic_load((unint64_t *)&v12);
    CFCharacterSetUnion(v5, v4);
  }
  v6 = (__CFCharacterSet *)atomic_load((unint64_t *)&v12);
  v13.location = 48;
  v13.length = 10;
  CFCharacterSetAddCharactersInRange(v6, v13);
  v7 = (__CFCharacterSet *)atomic_load((unint64_t *)&v12);
  CFCharacterSetInvert(v7);
  v8 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  if (v8)
  {
    v9 = v8;
    v10 = (__CFCharacterSet *)atomic_load((unint64_t *)&v12);
    CFCharacterSetUnion(v10, v9);
  }
  do
    v11 = __ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));
  _CFCharacterSetCompact();
  _MergedGlobals_27 = v11;

}

uint64_t _CTGetVisibleFormatterCharacterSet::$_0::__invoke(_CTGetVisibleFormatterCharacterSet::$_0 *this, void *a2)
{
  CFMutableCharacterSetRef Mutable;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v6[0] = &off_1E15E1330;
  v6[1] = Mutable;
  v7 = v6;
  ForEachVisibleFormatter((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  result = _CFCharacterSetCompact();
  qword_1ECDE7C80 = (uint64_t)Mutable;
  return result;
}

void std::__function::__func<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1},std::allocator<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1}>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1},std::allocator<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1}>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E1330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1},std::allocator<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1}>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E1330;
  a2[1] = v2;
  return result;
}

void std::__function::__func<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1},std::allocator<_CTGetVisibleFormatterCharacterSet::$_0::operator() const(void *)::{lambda(unsigned int)#1}>,void ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  CFRange v2;

  v2.location = *a2;
  v2.length = 1;
  CFCharacterSetAddCharactersInRange(*(CFMutableCharacterSetRef *)(a1 + 8), v2);
}

void std::__function::__func<_CTEnumerateScriptRanges::$_0,std::allocator<_CTEnumerateScriptRanges::$_0>,void ()(unsigned int,CFRange)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<_CTEnumerateScriptRanges::$_0,std::allocator<_CTEnumerateScriptRanges::$_0>,void ()(unsigned int,CFRange)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF2D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_CTEnumerateScriptRanges::$_0,std::allocator<_CTEnumerateScriptRanges::$_0>,void ()(unsigned int,CFRange)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF2D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_CTEnumerateScriptRanges::$_0,std::allocator<_CTEnumerateScriptRanges::$_0>,void ()(unsigned int,CFRange)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t TBaseFont::CopyMetadata@<X0>(TBaseFont *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = TBaseFont::GetInitializedGraphicsFont(this);
  if (result)
  {
    result = CGFontGetParserFont();
    if (result)
    {
      if (a2)
        FPFontGetDefaultInstance();
      result = FPFontCopyMetadata();
    }
  }
  *a3 = result;
  return result;
}

void TBaseFont::CopyOTName(unsigned int *a1@<X2>, int a2@<W1>, unint64_t *a3@<X8>)
{
  CopyStaticOTFeatureName(a1, a2, a3);
}

void TBaseFont::CopyLocalizedName(TBaseFont *this@<X0>, const __CFString *a2@<X1>, CFArrayRef theArray@<X2>, const __CFString **a4@<X3>, unint64_t *a5@<X8>)
{
  const __CFArray *v9;
  void *v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  unint64_t v13;
  const __CFDictionary *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  int v19;
  const __CFDictionary *v20;
  id v21;
  const __CFArray *v23;
  unint64_t v24;
  void *v25;
  CGFont *v26;
  int v27;
  const __CFArray *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  __CFDictionary *v35;
  const void *v36;
  const __CFDictionary *v39;
  const __CFDictionary *v40;
  void *v41;
  __CFDictionary *v42;
  const void *v43;
  __CFDictionary *v44;
  const void *v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  void *v48;
  __CFDictionary *v49;
  const void *v50;
  __CFDictionary *v51;
  const void *v52;
  const void *v53;
  const __CFString *v54;
  id v55;
  id v56;
  unint64_t v57;
  id v58;
  id v59;
  id v60;

  if (!theArray || (v9 = theArray, !CFArrayGetCount(theArray)))
    v9 = 0;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontLocalizedNames"), &v56);
  do
    v10 = (void *)__ldaxr((unint64_t *)&v56);
  while (__stlxr(0, (unint64_t *)&v56));

  Value = v10;
  v12 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
  *a5 = (unint64_t)Value;

  v13 = atomic_load(a5);
  if (!v9 && v13)
  {
    v14 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("language map"));
    if (v14)
      v15 = (id)CFDictionaryGetValue(v14, a2);
    else
      v15 = 0;
    v56 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyPreferredLanguage((unint64_t *)&v56);
    v16 = (void *)atomic_load((unint64_t *)&v56);
    v17 = v16;
    if (v17 == v15)
    {

      if (!a4)
      {
LABEL_23:
        v21 = v56;
        goto LABEL_53;
      }
LABEL_20:
      v20 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("actual language"));
      if (v20)
        v20 = (const __CFDictionary *)CFDictionaryGetValue(v20, a2);
      *a4 = (const __CFString *)v20;
      goto LABEL_23;
    }
    v18 = v17;
    if (v15 && v17)
    {
      v19 = CFEqual(v15, v17);

      if (v19)
      {
        if (!a4)
          goto LABEL_23;
        goto LABEL_20;
      }
    }
    else
    {

    }
  }
  v60 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateNormalizedLanguages(v9, (unint64_t *)&v60);
  if (!atomic_load((unint64_t *)&v60))
  {
    v23 = CFLocaleCopyPreferredLanguages();
    CreateNormalizedLanguages(v23, (unint64_t *)&v56);

    do
      v24 = __ldaxr((unint64_t *)&v56);
    while (__stlxr(0, (unint64_t *)&v56));
    do
      v25 = (void *)__ldaxr((unint64_t *)&v60);
    while (__stlxr(v24, (unint64_t *)&v60));

  }
  v59 = 0;
  v26 = (CGFont *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 576))(this);
  v27 = FontNameCodeForKey(a2);
  v28 = (const __CFArray *)atomic_load((unint64_t *)&v60);
  v56 = &v59;
  v57 = 0;
  CopyLocalizedFontNameInternal(v28, v26, 0, v27, &v57, 0, (unint64_t *)&v58);
  do
    v29 = __ldaxr((unint64_t *)&v58);
  while (__stlxr(0, (unint64_t *)&v58));
  do
    v30 = (void *)__ldaxr(a5);
  while (__stlxr(v29, a5));

  v31 = (unint64_t *)v56;
  v32 = v57;
  do
    v33 = (void *)__ldaxr(v31);
  while (__stlxr(v32, v31));

  v34 = atomic_load(a5);
  if (!v9 && v34)
  {
    v56 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v56, (CFDictionaryRef)v10);
    v35 = (__CFDictionary *)atomic_load((unint64_t *)&v56);
    v36 = (const void *)atomic_load(a5);
    CFDictionarySetValue(v35, a2, v36);
    if (atomic_load((unint64_t *)&v59))
    {
      v58 = (id)0xAAAAAAAAAAAAAAAALL;
      CopyPreferredLanguage((unint64_t *)&v58);
      if (atomic_load((unint64_t *)&v58))
      {
        v55 = (id)0xAAAAAAAAAAAAAAAALL;
        v39 = v10;
        v40 = v39;
        if (v39)
          v41 = (void *)CFDictionaryGetValue(v39, CFSTR("language map"));
        else
          v41 = 0;
        TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v55, v41);

        v42 = (__CFDictionary *)atomic_load((unint64_t *)&v55);
        v43 = (const void *)atomic_load((unint64_t *)&v58);
        CFDictionarySetValue(v42, a2, v43);
        v44 = (__CFDictionary *)atomic_load((unint64_t *)&v56);
        v45 = (const void *)atomic_load((unint64_t *)&v55);
        CFDictionarySetValue(v44, CFSTR("language map"), v45);

      }
      v58 = (id)0xAAAAAAAAAAAAAAAALL;
      v46 = v10;
      v47 = v46;
      if (v46)
        v48 = (void *)CFDictionaryGetValue(v46, CFSTR("actual language"));
      else
        v48 = 0;
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v58, v48);

      v49 = (__CFDictionary *)atomic_load((unint64_t *)&v58);
      v50 = (const void *)atomic_load((unint64_t *)&v59);
      CFDictionarySetValue(v49, a2, v50);
      v51 = (__CFDictionary *)atomic_load((unint64_t *)&v56);
      v52 = (const void *)atomic_load((unint64_t *)&v58);
      CFDictionarySetValue(v51, CFSTR("actual language"), v52);

    }
    v53 = (const void *)atomic_load((unint64_t *)&v56);
    TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v53, CFSTR("CTFontLocalizedNames"));

  }
  if (a4)
  {
    do
      v54 = (const __CFString *)__ldaxr((unint64_t *)&v59);
    while (__stlxr(0, (unint64_t *)&v59));
    *a4 = v54;
  }

  v21 = v60;
LABEL_53:

}

void TBaseFont::CopyLocalizedNameID(TBaseFont *this@<X0>, CFArrayRef theArray@<X2>, const __CFString **a3@<X3>, int a4@<W1>, unint64_t *a5@<X8>)
{
  unint64_t v10;
  void *v11;
  CGFont *v12;
  const __CFArray *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  const __CFString *v17;
  id v18;
  unint64_t v19;
  id v20;
  id v21;

  v21 = 0;
  if (theArray && CFArrayGetCount(theArray))
  {
    CreateNormalizedLanguages(theArray, (unint64_t *)&v18);
    do
      v10 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    do
      v11 = (void *)__ldaxr((unint64_t *)&v21);
    while (__stlxr(v10, (unint64_t *)&v21));

  }
  v12 = (CGFont *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 576))(this);
  v19 = 0;
  v20 = 0;
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  v13 = (const __CFArray *)atomic_load((unint64_t *)&v21);
  v18 = &v20;
  CopyLocalizedFontNameInternal(v13, v12, 0, a4, &v19, 0, a5);
  v14 = (unint64_t *)v18;
  v15 = v19;
  do
    v16 = (void *)__ldaxr(v14);
  while (__stlxr(v15, v14));

  if (a3)
  {
    do
      v17 = (const __CFString *)__ldaxr((unint64_t *)&v20);
    while (__stlxr(0, (unint64_t *)&v20));
    *a3 = v17;
  }

}

BOOL TBaseFont::HasPostScriptNameAlias(TBaseFont *this, __CFString *theString)
{
  __CFString *v4;
  const __CTFontDescriptor *v6;
  void *v7;
  __CFString *v8;
  __CFString *v9;
  int v10;
  _BOOL8 v11;
  void *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  void *Value;
  void *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex Count;
  __int128 v22;
  char *v23;
  const __CFArray *v24;
  CFSetRef v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  _OWORD v32[15];
  _OWORD *v33;
  uint64_t v34;
  CFRange v35;

  v34 = *MEMORY[0x1E0C80C00];
  if (!theString || !CFStringGetLength(theString))
    return 0;
  v4 = (__CFString *)atomic_load((unint64_t *)this + 12);
  if (v4 != theString && (!v4 || !CFEqual(v4, theString)) && !IsPostScriptNameAlias(theString, v4))
  {
    v29 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v28);
    TDescriptorSource::CopyFontDescriptorFromVariationPostScriptName((TDescriptorSource *)&v28, theString, 1, 0, (unint64_t *)&v29);
    if (!atomic_load((unint64_t *)&v29))
      goto LABEL_21;
    v6 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v29);
    v28 = (id)CTFontDescriptorCopyAttribute(v6, CFSTR("NSCTFontPostScriptNameAttribute"));
    do
      v7 = (void *)__ldaxr((unint64_t *)&v28);
    while (__stlxr(0, (unint64_t *)&v28));

    v8 = v7;
    if (v8 == v4)
    {

    }
    else
    {
      v9 = v8;
      if (!v4 || !v8)
      {

        goto LABEL_21;
      }
      v10 = CFEqual(v8, v4);

      if (!v10)
      {
LABEL_21:

        v27 = 0;
        if (!atomic_load((unint64_t *)&v27))
        {
          v29 = (id)0xAAAAAAAAAAAAAAAALL;
          TBaseFont::CopyMetadata(this, 0, &v29);
          v14 = (void *)atomic_load((unint64_t *)&v29);
          v15 = v14;
          v16 = v15;
          if (v15)
            Value = (void *)CFDictionaryGetValue(v15, CFSTR("MTD_Typeface_ID_ATS_PostscriptName_Aliases"));
          else
            Value = 0;
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v27, Value);

        }
        v18 = (void *)atomic_load((unint64_t *)&v27);
        v19 = v18;
        if (v19)
        {
          v20 = v19;
          Count = CFArrayGetCount(v19);

          if (Count >= 1)
          {
            *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v32[14] = v22;
            v32[13] = v22;
            v32[12] = v22;
            v32[11] = v22;
            v32[10] = v22;
            v32[9] = v22;
            v32[8] = v22;
            v32[7] = v22;
            v32[6] = v22;
            v32[5] = v22;
            v32[3] = v22;
            v32[4] = v22;
            v32[1] = v22;
            v32[2] = v22;
            v32[0] = v22;
            v30 = 0;
            v31 = 0;
            v29 = 0;
            v33 = v32;
            std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v29, Count);
            v23 = (char *)v30;
            bzero(v30, 8 * Count);
            v30 = &v23[8 * Count];
            v24 = (const __CFArray *)atomic_load((unint64_t *)&v27);
            v35.location = 0;
            v35.length = Count;
            CFArrayGetValues(v24, v35, (const void **)v29);
            v25 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v29, Count, MEMORY[0x1E0C9AEC0]);
            v26 = v25;
            TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v26, CFSTR("CTFontPostScriptNameAliases"));

            v11 = CFSetContainsValue(v25, theString) != 0;
            v28 = &v29;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
LABEL_31:

            return v11;
          }
        }
        else
        {

        }
        TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, (const void *)*MEMORY[0x1E0C9B0D0], CFSTR("CTFontPostScriptNameAliases"));
        v11 = 0;
        goto LABEL_31;
      }
    }

  }
  return 1;
}

uint64_t TBaseFont::IsBaseVariation(TBaseFont *this, CFDictionaryRef theDict)
{
  CFIndex Count;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  char *v14;
  CFTypeRef *v15;
  void **v16;
  CFTypeID v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  uint64_t v24;
  id v26;
  double valuePtr;
  void **values;
  void *v29;
  uint64_t v30;
  _OWORD v31[15];
  _OWORD *v32;
  id v33;
  void *v34;
  uint64_t v35;
  _OWORD v36[15];
  _OWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!theDict)
    return 1;
  Count = CFDictionaryGetCount(theDict);
  if (!Count)
    return 1;
  v5 = Count;
  v33 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v33, this);
  v6 = atomic_load((unint64_t *)&v33);

  if (v6)
  {
    v26 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 120))(&v26, this);
    v7 = (void *)atomic_load((unint64_t *)&v26);
    v8 = v7;
    if (v8)
    {
      v9 = v8;
      v10 = CFArrayGetCount(v8);

      if (v10)
      {
        *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v36[14] = v11;
        v36[13] = v11;
        v36[12] = v11;
        v36[11] = v11;
        v36[10] = v11;
        v36[9] = v11;
        v36[8] = v11;
        v36[7] = v11;
        v36[6] = v11;
        v36[5] = v11;
        v36[4] = v11;
        v36[3] = v11;
        v36[2] = v11;
        v36[1] = v11;
        v36[0] = v11;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v37 = v36;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v33, v5);
        v12 = (char *)v34;
        bzero(v34, 8 * v5);
        v34 = &v12[8 * v5];
        *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v31[14] = v13;
        v31[13] = v13;
        v31[12] = v13;
        v31[11] = v13;
        v31[10] = v13;
        v31[9] = v13;
        v31[8] = v13;
        v31[7] = v13;
        v31[6] = v13;
        v31[5] = v13;
        v31[4] = v13;
        v31[3] = v13;
        v31[2] = v13;
        v31[1] = v13;
        v31[0] = v13;
        v29 = 0;
        v30 = 0;
        values = 0;
        v32 = v31;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v5);
        v14 = (char *)v29;
        bzero(v29, 8 * v5);
        v29 = &v14[8 * v5];
        CFDictionaryGetKeysAndValues(theDict, (const void **)v33, (const void **)values);
        v15 = (CFTypeRef *)v33;
        v16 = values;
        while (1)
        {
          v17 = CFGetTypeID(*v16);
          if (v17 != CFNumberGetTypeID())
            break;
          v18 = (const __CFArray *)atomic_load((unint64_t *)&v26);
          if (!v18)
            break;
          v19 = CFArrayGetCount(v18);
          if (!v19)
            break;
          v20 = v19;
          v21 = 0;
          --v5;
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
            Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
            if (CFEqual(Value, *v15))
            {
              valuePtr = NAN;
              CFNumberGetValue((CFNumberRef)*v16, kCFNumberDoubleType, &valuePtr);
              if ((IsValueInRangeOfAxis(valuePtr, ValueAtIndex) & 1) != 0)
                break;
            }
            if (v20 == ++v21)
              goto LABEL_19;
          }
          ++v15;
          ++v16;
          if (!v5)
          {
            v24 = 1;
            goto LABEL_20;
          }
        }
LABEL_19:
        v24 = 0;
LABEL_20:
        valuePtr = COERCE_DOUBLE(&values);
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
        values = &v33;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
        goto LABEL_23;
      }
    }
    else
    {

    }
    v24 = 0;
LABEL_23:

    return v24;
  }
  return 0;
}

BOOL TBaseFont::HasFeature(TBaseFont *this, int a2, int a3)
{
  void *v5;
  _BOOL8 v6;
  id v8;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, _QWORD))(*(_QWORD *)this + 136))(&v8, this, 0);
  do
    v5 = (void *)__ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));
  v9 = v5;

  v6 = TFontFeatures::GetFeatureSelector((TFontFeatures *)&v9, a2, a3) != 0;
  return v6;
}

void OS2::OS2(OS2 *this, id a2)
{
  id v3;

  v3 = a2;
  OS2::OS2((unint64_t *)this, (unint64_t *)&v3);

}

void TBaseFont::CopySupportedLanguagesFromMetadata(TBaseFont *this, unint64_t *a2)
{
  const __CFString *v4;
  unint64_t v5;
  const __CFDictionary *v8;
  void *Value;
  unint64_t v11;
  id v12;
  id v13;

  if ((*(unsigned int (**)(unint64_t *))(*a2 + 704))(a2))
  {
    *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
    v4 = (const __CFString *)atomic_load(a2 + 12);
    CopyAttributeForSystemFont(v4, CFSTR("NSCTFontLanguagesAttribute"), (const __CFString **)&v13);
    do
      v5 = __ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    *(_QWORD *)this = v5;

    if (atomic_load((unint64_t *)this))
      return;

  }
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyMetadata((TBaseFont *)a2, 0, &v12);
  if (atomic_load((unint64_t *)&v12))
  {
    v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v12);
    Value = (void *)CFDictionaryGetValue(v8, CFSTR("MTD_Typeface_Repertoire_SupportedLanguages"));
  }
  else
  {
    Value = 0;
  }
  v13 = Value;

  if (atomic_load((unint64_t *)&v13))
  {
    do
      v11 = __ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    *(_QWORD *)this = v11;

  }
  else
  {

    *(_QWORD *)this = 0;
  }
}

BOOL TBaseFont::SupportsLanguages(TBaseFont *this, const __CFArray *a2)
{
  const __CFArray *v4;
  _BOOL8 v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  const __CFArray *v11;
  id v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFSet *v18;
  const __CFSet *v19;
  int v20;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  const __CFString *v25;
  __CFSet *v26;
  const __CFCharacterSet *v27;
  const void *v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  void *v31;
  const void *v32;
  const void *v33;
  id v35;
  id v36;
  id v37;

  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontLanguagesAttribute"), &v37);
  do
    v4 = (const __CFArray *)__ldaxr((unint64_t *)&v37);
  while (__stlxr(0, (unint64_t *)&v37));

  if (!v4 || !ArrayContainsAllValues(v4, a2))
  {
    if ((*((_DWORD *)this + 46) & 0x100000) == 0)
    {
      v6 = (unsigned int *)((char *)this + 184);
      atomic_load((unint64_t *)this + 12);
      v7 = (unsigned int *)((char *)this + 180);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8, v7));
      do
        v9 = __ldxr(v6);
      while (__stxr(v9 | 0x100000, v6));
    }
    if ((*((_DWORD *)this + 45) & 0x100000) != 0)
    {
      v5 = 0;
      goto LABEL_44;
    }
    v37 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::CopySupportedLanguagesFromMetadata((TBaseFont *)&v37, (unint64_t *)this);
    if (atomic_load((unint64_t *)&v37))
    {
      v11 = (const __CFArray *)atomic_load((unint64_t *)&v37);
      v5 = ArrayContainsAllValues(v11, a2);
      v12 = v37;
LABEL_43:

      goto LABEL_44;
    }

    TBaseFont::CopyAttributeInternal(this, CFSTR("CTCheckedLanguages"), &v37);
    do
      v13 = (void *)__ldaxr((unint64_t *)&v37);
    while (__stlxr(0, (unint64_t *)&v37));

    if (a2)
    {
      Count = CFArrayGetCount(a2);
      if (Count)
      {
        v15 = Count;
        for (i = 0; v15 != i; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          v18 = v13;
          if (v18)
          {
            v19 = v18;
            v20 = CFSetContainsValue(v18, ValueAtIndex);

            if (v20)
            {
              v5 = 0;
              goto LABEL_42;
            }
          }
          else
          {

          }
        }
      }
    }
    v37 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableSet::TCFMutableSet((TCFMutableSet *)&v37, (CFSetRef)v13);
    v36 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 768))(&v36, this);
    if (atomic_load((unint64_t *)&v36))
    {
      if (!a2 || (v22 = CFArrayGetCount(a2)) == 0)
      {
LABEL_30:
        v35 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v35, v4);
        TCFMutableArray::AppendArray<__CFArray const*>((unint64_t *)&v35, a2);
        v28 = (const void *)atomic_load((unint64_t *)&v35);
        os_unfair_lock_lock_with_options();
        v29 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
        if (v28)
        {
          if (!v29)
            TBaseFont::InitAttributesDict(this);
          v30 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
          if (v30)
            CFDictionarySetValue(v30, CFSTR("NSCTFontLanguagesAttribute"), v28);
        }
        else if (v29)
        {
          CFDictionaryRemoveValue(v29, CFSTR("NSCTFontLanguagesAttribute"));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)this + 28);
        v33 = (const void *)atomic_load((unint64_t *)&v37);
        TBaseFont::SetAttributeInternal<__CFSet const*>((unint64_t *)this, v33);

        v5 = 1;
LABEL_41:

LABEL_42:
        v12 = v13;
        goto LABEL_43;
      }
      v23 = v22;
      v24 = 0;
      while (1)
      {
        v25 = (const __CFString *)CFArrayGetValueAtIndex(a2, v24);
        v26 = (__CFSet *)atomic_load((unint64_t *)&v37);
        CFSetAddValue(v26, v25);
        TLocaleManager::TLocaleManager((TLocaleManager *)&v35);
        v27 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v36);
        LOBYTE(v25) = TLocaleManagerImp::CharacterSetCoversLanguage((TLocaleManagerImp *)v35, v27, v25);
        os_unfair_lock_unlock((os_unfair_lock_t)v35 + 6);
        if ((v25 & 1) == 0)
          break;
        if (v23 == ++v24)
          goto LABEL_30;
      }
    }
    else if (a2)
    {
      v31 = (void *)atomic_load((unint64_t *)&v37);
      objc_msgSend(v31, "addObjectsFromArray:", a2);
    }

    v32 = (const void *)atomic_load((unint64_t *)&v37);
    TBaseFont::SetAttributeInternal<__CFSet const*>((unint64_t *)this, v32);
    v5 = 0;
    goto LABEL_41;
  }
  v5 = 1;
LABEL_44:

  return v5;
}

BOOL ArrayContainsAllValues(const __CFArray *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  int v10;
  _BOOL8 result;
  CFRange v13;

  Count = CFArrayGetCount(a1);
  if (!a2)
    return 1;
  v5 = Count;
  v6 = CFArrayGetCount(a2);
  if (!v6)
    return 1;
  v7 = 0;
  v8 = v6 - 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
    v13.location = 0;
    v13.length = v5;
    v10 = CFArrayContainsValue(a1, v13, ValueAtIndex);
    result = v10 != 0;
    if (!v10)
      break;
  }
  while (v8 != v7++);
  return result;
}

void TCFMutableArray::AppendArray<__CFArray const*>(unint64_t *a1, CFArrayRef theArray)
{
  __CFArray *v3;
  CFRange v4;

  v3 = (__CFArray *)atomic_load(a1);
  if (theArray)
    v4.length = CFArrayGetCount(theArray);
  else
    v4.length = 0;
  v4.location = 0;
  CFArrayAppendArray(v3, theArray, v4);
}

void TBaseFont::SetAttributeInternal<__CFSet const*>(unint64_t *a1, const void *a2)
{
  os_unfair_lock_s *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;

  v4 = (os_unfair_lock_s *)(a1 + 14);
  os_unfair_lock_lock_with_options();
  v5 = (__CFDictionary *)atomic_load(a1 + 15);
  if (a2)
  {
    if (!v5)
      TBaseFont::InitAttributesDict((TBaseFont *)a1);
    v6 = (__CFDictionary *)atomic_load(a1 + 15);
    if (v6)
      CFDictionarySetValue(v6, CFSTR("CTCheckedLanguages"), a2);
  }
  else if (v5)
  {
    CFDictionaryRemoveValue(v5, CFSTR("CTCheckedLanguages"));
  }
  os_unfair_lock_unlock(v4);
}

void TBaseFont::CopyMacintoshEncodings(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  void *v6;
  const __CFData *v7;
  const __CFData *v8;
  const UInt8 *BytePtr;
  void *v10;
  id v11;
  const __CFData *v12;
  const __CFData *v13;
  const UInt8 *v14;
  unsigned int v15;
  const UInt8 *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  void *v26;
  void *v28;
  id v29;
  id v30;
  id v31;
  id valuePtr;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontMacintoshEncodingsAttribute"), &valuePtr);
  do
    v4 = __ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    v31 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v31, this, 1668112752);
    v6 = (void *)atomic_load((unint64_t *)&v31);
    v7 = v6;
    v8 = v7;
    if (v7)
      BytePtr = CFDataGetBytePtr(v7);
    else
      BytePtr = 0;

    v10 = (void *)atomic_load((unint64_t *)&v31);
    v11 = v10;
    v12 = (const __CFData *)v11;
    if (v12)
    {
      v13 = v12;
      v14 = CFDataGetBytePtr(v12);

      if (v14)
        v14 += CFDataGetLength((CFDataRef)v11);
    }
    else
    {

      v14 = 0;
    }

    v15 = 0;
    if (BytePtr)
    {
      v16 = BytePtr + 4;
      if (BytePtr + 4 <= v14)
      {
        v17 = bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16;
        v18 = (unint64_t)&v16[8 * v17];
        if (BytePtr + 12 <= v14)
          v19 = ((_DWORD)v14 - (_DWORD)v16) >> 3;
        else
          LOWORD(v19) = 0;
        if (v18 <= (unint64_t)v14 && v18 >= (unint64_t)v16)
          LOWORD(v21) = v17;
        else
          LOWORD(v21) = v19;
        if ((_WORD)v21)
        {
          v15 = 0;
          v21 = (unsigned __int16)v21;
          v22 = (unsigned __int16 *)(BytePtr + 6);
          do
          {
            if (*(v22 - 1) == 256)
            {
              v23 = bswap32(*v22) >> 16;
              if (v23 >= 0x20)
                v24 = 0;
              else
                v24 = 1 << v23;
              v15 |= v24;
            }
            v22 += 4;
            --v21;
          }
          while (v21);
        }
        else
        {
          v15 = 0;
        }
      }
    }
    valuePtr = (id)v15;
    v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
    do
      v25 = __ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));
    do
      v26 = (void *)__ldaxr(a2);
    while (__stlxr(v25, a2));

    if (atomic_load(a2))
    {
      v28 = (void *)atomic_load(a2);
      v29 = v28;
      TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v29, CFSTR("NSCTFontMacintoshEncodingsAttribute"));

    }
  }
}

void TBaseFont::CopyDesignLanguagesFromMetadata(TBaseFont *this, TBaseFont *a2)
{
  const __CFDictionary *v4;
  void *Value;
  unint64_t v7;
  id v8;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyMetadata(a2, 0, &v8);
  if (atomic_load((unint64_t *)&v8))
  {
    v4 = (const __CFDictionary *)atomic_load((unint64_t *)&v8);
    Value = (void *)CFDictionaryGetValue(v4, CFSTR("MTD_Typeface_Repertoire_PrimaryScriptLanguages"));
  }
  else
  {
    Value = 0;
  }
  v9 = Value;

  if (atomic_load((unint64_t *)&v9))
  {
    do
      v7 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *(_QWORD *)this = v7;

  }
  else
  {

    *(_QWORD *)this = 0;
  }
}

void TBaseFont::CopyDesignLanguages(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontDesignLanguagesAttribute"), &v22);
  do
    v4 = __ldaxr((unint64_t *)&v22);
  while (__stlxr(0, (unint64_t *)&v22));
  *a2 = v4;

  v5 = (unsigned int *)((char *)this + 184);
  if ((*((_DWORD *)this + 46) & 0x200000) == 0)
  {
    atomic_load((unint64_t *)this + 12);
    v6 = (unsigned int *)((char *)this + 180);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7, v6));
    do
      v8 = __ldxr(v5);
    while (__stxr(v8 | 0x200000, v5));
  }
  if ((*((_DWORD *)this + 45) & 0x200000) == 0)
  {
    v9 = (unsigned int *)((char *)this + 180);
    TBaseFont::CopyDesignLanguagesFromMetadata((TBaseFont *)&v22, this);
    do
      v10 = __ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
    do
      v11 = (void *)__ldaxr(a2);
    while (__stlxr(v10, a2));

    if (!atomic_load(a2))
    {
      (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 336))(&v22, this);
      do
        v13 = __ldaxr((unint64_t *)&v22);
      while (__stlxr(0, (unint64_t *)&v22));
      do
        v14 = (void *)__ldaxr(a2);
      while (__stlxr(v13, a2));

    }
    v15 = (void *)atomic_load(a2);
    v21 = v15;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v21, CFSTR("NSCTFontDesignLanguagesAttribute"));

    do
      v16 = __ldxr(v9);
    while (__stxr(v16 | 0x200000, v9));
    do
      v17 = __ldxr(v5);
    while (__stxr(v17 | 0x200000, v5));
  }
  if (!atomic_load(a2))
  {
    v22 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    do
      v19 = __ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
    do
      v20 = (void *)__ldaxr(a2);
    while (__stlxr(v19, a2));

  }
}

BOOL TBaseFont::HasDesignLanguages(TBaseFont *this, const __CFArray *a2)
{
  const __CFArray *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const __CFArray *v10;
  _BOOL8 v11;
  uint64_t v12;
  id v14;

  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontDesignLanguagesAttribute"), &v14);
  do
    v4 = (const __CFArray *)__ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));

  if ((*((_DWORD *)this + 46) & 0x200000) == 0)
  {
    v5 = (unsigned int *)((char *)this + 184);
    atomic_load((unint64_t *)this + 12);
    v6 = (unsigned int *)((char *)this + 180);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7, v6));
    do
      v8 = __ldxr(v5);
    while (__stxr(v8 | 0x200000, v5));
  }
  if ((*((_DWORD *)this + 45) & 0x200000) != 0)
  {
    if (!v4)
    {
      v11 = 0;
      goto LABEL_15;
    }
    v12 = ArrayContainsAllValues(v4, a2);
    goto LABEL_13;
  }
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyDesignLanguagesFromMetadata((TBaseFont *)&v14, this);
  if (!atomic_load((unint64_t *)&v14))
  {

    v12 = (*(uint64_t (**)(TBaseFont *, const __CFArray *))(*(_QWORD *)this + 344))(this, a2);
LABEL_13:
    v11 = v12;
    goto LABEL_15;
  }
  v10 = (const __CFArray *)atomic_load((unint64_t *)&v14);
  v11 = ArrayContainsAllValues(v10, a2);

LABEL_15:
  return v11;
}

uint64_t TBaseFont::GetUnicodeEncoding(TBaseFont *this)
{
  uint64_t v1;
  void *v3;
  const __CFData *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  void *v7;
  id v8;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *v11;
  const UInt8 *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  id v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 86);
  if (!(_DWORD)v1)
  {
    v33 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v33, this, 1668112752);
    v3 = (void *)atomic_load((unint64_t *)&v33);
    v4 = v3;
    v5 = v4;
    if (v4)
      BytePtr = CFDataGetBytePtr(v4);
    else
      BytePtr = 0;

    v7 = (void *)atomic_load((unint64_t *)&v33);
    v8 = v7;
    v9 = (const __CFData *)v8;
    if (v9)
    {
      v10 = v9;
      v11 = CFDataGetBytePtr(v9);

      if (v11)
        v11 += CFDataGetLength((CFDataRef)v8);
    }
    else
    {

      v11 = 0;
    }

    v1 = 0;
    if (BytePtr)
    {
      v12 = BytePtr + 4;
      if (BytePtr + 4 <= v11)
      {
        v36 = 0;
        v35 = 0;
        v37 = 0;
        v13 = bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16;
        v14 = (unint64_t)&v12[8 * v13];
        if (BytePtr + 12 <= v11)
          v15 = ((_DWORD)v11 - (_DWORD)v12) >> 3;
        else
          LOWORD(v15) = 0;
        if (v14 <= (unint64_t)v11 && v14 >= (unint64_t)v12)
          v17 = v13;
        else
          v17 = v15;
        if (v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = (unsigned __int16 *)(BytePtr + 6);
          do
          {
            v27 = bswap32(*(v26 - 1)) >> 16;
            v28 = bswap32(*v26) >> 16;
            if (v27 == 3)
            {
              v29 = v25 | 1;
              if (v28 == 1)
                v30 = v18;
              else
                v30 = v23;
              if (v28 == 1)
                v25 |= 4uLL;
              if (v28 == 10)
              {
                v25 = v29;
                v24 = v18;
              }
              else
              {
                v23 = v30;
              }
            }
            else if (!v27)
            {
              switch(v28)
              {
                case 0u:
                  v25 |= 0x20uLL;
                  v20 = v18;
                  break;
                case 1u:
                  v25 |= 0x10uLL;
                  v21 = v18;
                  break;
                case 2u:
                  v25 |= 8uLL;
                  v22 = v18;
                  break;
                case 5u:
                case 6u:
                  break;
                default:
                  v25 |= 2uLL;
                  v19 = v18;
                  break;
              }
            }
            v26 += 4;
            ++v18;
          }
          while (v17 != v18);
          v36 = __PAIR64__(v21, v22);
          v37 = v20;
          v35 = __PAIR64__(v23, v19);
        }
        else
        {
          v25 = 0;
          v24 = 0;
        }
        v31 = 0;
        v34 = v24;
        while (((v25 >> v31) & 1) == 0)
        {
          if (++v31 == 6)
          {
            v1 = 0;
            goto LABEL_45;
          }
        }
        v1 = (*(&v34 + v31) + 1);
        *((_DWORD *)this + 86) = v1;
      }
    }
LABEL_45:

  }
  return v1;
}

uint64_t TBaseFont::GetStringEncoding(TBaseFont *this)
{
  void *v2;
  const __CFNumber *v3;
  unsigned int v4;
  unint64_t v5;
  void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const void *Value;
  CFTypeID v10;
  uint64_t v11;
  const void *v12;
  int v13;
  void *v14;
  uint64_t i;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  int v20;
  void *v22;
  const __CFNumber *v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  const __CFNumber *v34;
  id v35[3];
  id v36;
  unsigned int valuePtr;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  valuePtr = -1;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontStringEncodingAttribute"), v35);
  do
    v2 = (void *)__ldaxr((unint64_t *)v35);
  while (__stlxr(0, (unint64_t *)v35));

  if (v2)
  {
    v3 = v2;
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
  }
  else
  {
    v4 = valuePtr;
    if (valuePtr == -1)
    {
      v5 = atomic_load((unint64_t *)this + 12);
      GetStringEncodingSpecialCase(v5, &valuePtr);
      v4 = valuePtr;
      if (valuePtr == -1)
      {
        v35[0] = (id)0xAAAAAAAAAAAAAAAALL;
        TBaseFont::CopyMetadata(this, 0, v35);
        v6 = (void *)atomic_load((unint64_t *)v35);
        v7 = v6;
        if (v7)
        {
          v8 = v7;
          Value = CFDictionaryGetValue(v7, CFSTR("MTD_Typeface_Repertoire_PrimaryScript"));

          if (Value)
          {
            v10 = CFGetTypeID(Value);
            if (v10 == CFStringGetTypeID())
            {
              v11 = 0;
              while (1)
              {
                v12 = *(const void **)&dword_1E15E7F28[v11 + 2];
                if (v12 == Value || v12 && CFEqual(Value, v12))
                  break;
                v11 += 4;
                if (v11 == 124)
                {
                  v13 = -1;
                  goto LABEL_18;
                }
              }
              v13 = dword_1E15E7F28[v11];
LABEL_18:
              valuePtr = v13;
            }
          }
        }
        else
        {

        }
        v4 = valuePtr;
        if (valuePtr == -1)
        {
          v36 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)this + 480))(&v36, this, 1330851634);
          memset(v35, 170, sizeof(v35));
          v14 = (void *)atomic_load((unint64_t *)&v36);
          OS2::OS2((OS2 *)v35, v14);
          if ((uint64_t)v35[2] < 78)
          {
LABEL_30:
            v20 = 32;
          }
          else
          {
            for (i = 0; i != 15; ++i)
            {
              if (v35[2] >= (id)0x56)
              {
                if (*(_WORD *)v35[1])
                {
                  v16 = gCodePageOrderList[i];
                  if (((bswap32(*(_DWORD *)((char *)v35[1] + ((v16 >> 3) & 0x1C) + 78)) >> v16) & 1) != 0
                    && ((0xF4000000003F006BLL >> v16) & 1) != 0)
                  {
                    v20 = gCodePageToScript[v16];
                    goto LABEL_33;
                  }
                }
              }
            }
            v38[0] = 0xAAAAAAAAAAAAAAAALL;
            v38[1] = 0xAAAAAAAAAAAAAAAALL;
            TBaseFont::GetOS2UnicodeRanges(this, v38, (unint64_t *)&v36);
            v17 = 0;
            v18 = 0;
            while (1)
            {
              v19 = v17;
              if (((*(_DWORD *)((char *)v38
                               + (((unint64_t)dword_18494F880[2 * v18] >> 3) & 0x1FFFFFFC)) >> dword_18494F880[2 * v18]) & 1) != 0)
                break;
              v17 = 1;
              v18 = 1;
              if ((v19 & 1) != 0)
                goto LABEL_30;
            }
            v20 = dword_18494F880[2 * v18 + 1];
          }
LABEL_33:

          v35[0] = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 360))(v35, this);
          if (atomic_load((unint64_t *)v35))
          {
            v22 = (void *)atomic_load((unint64_t *)v35);
            v23 = v22;
            LODWORD(v38[0]) = -1431655766;
            CFNumberGetValue(v23, kCFNumberIntType, v38);
            v24 = v38[0];

          }
          else
          {
            v24 = 0;
          }
          v25 = 0;
          v26 = 0;
          v27 = 32;
          do
          {
            if (((1 << v25) & v24) != 0)
            {
              if (v20 == v25)
              {
                v27 = v20;
                goto LABEL_64;
              }
              v26 |= 1 << v25;
              if (v27 > v25 || v27 == 32)
                v29 = v25;
              else
                v29 = v27;
              if (v25)
                v27 = v29;
            }
            ++v25;
          }
          while (v25 != 32);
          if (v27 == 32)
          {
            v27 = (32 * (v24 & 1)) ^ 0x20;
            if ((v24 & 1) != 0)
              v26 &= ~1u;
            if (v26)
            {
              v30 = 0;
              while (((1 << v30) & v26) == 0)
              {
                if (v30 <= 0x1E)
                {
                  v26 &= ~(1 << v30++);
                  if (v26)
                    continue;
                }
                goto LABEL_59;
              }
              v27 = v30;
            }
LABEL_59:
            if (v20 != 32 && v27 == 32)
              v27 = v20;
          }
LABEL_64:
          if (v27 <= 0x1F)
            valuePtr = v27;

          v4 = valuePtr;
          if (valuePtr == -1)
          {
            v4 = 256;
            valuePtr = 256;
          }
        }
      }
    }
    TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v34, v4);
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v34, CFSTR("NSCTFontStringEncodingAttribute"));
    v3 = v34;
  }

  v32 = valuePtr;
  return v32;
}

void TBaseFont::CopyTraits(TBaseFont *this@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  const __CFDictionary *v5;
  __CFDictionary *MutableCopy;
  unsigned int SymbolicTraitsFromTraits;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 152))(&v11);
  if ((a2 & 1) != 0)
  {
    v5 = (const __CFDictionary *)atomic_load((unint64_t *)&v11);
    if (v5)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5);
      SymbolicTraitsFromTraits = GetSymbolicTraitsFromTraits(v5);
      TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v12, SymbolicTraitsFromTraits | 0x800);
      v8 = (const void *)atomic_load((unint64_t *)&v12);
      CFDictionarySetValue(MutableCopy, CFSTR("NSCTFontSymbolicTrait"), v8);

      v12 = MutableCopy;
      do
        v9 = __ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
      *a3 = v9;

    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    do
      v10 = __ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
    *a3 = v10;
  }

}

id ___ZNK9TBaseFont9GetFormatEv_block_invoke()
{
  id result;

  qword_1EDD171D8 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", CFSTR("public.truetype-font"));
  qword_1EDD171E0 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", CFSTR("com.apple.font-suitcase"));
  qword_1EDD171E8 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", CFSTR("public.opentype-font"));
  result = (id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", CFSTR("com.adobe.postscript-font"));
  qword_1EDD171F0 = (uint64_t)result;
  return result;
}

uint64_t TBaseFont::GetScope(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x3FFF) != 0x3FFF)
    TBaseFont::DetermineFontFlags(this, *((_DWORD *)this + 46) & 0x3FFF ^ 0x3FFF);
  return (*((_DWORD *)this + 45) >> 12) & 3;
}

uint64_t TBaseFont::GetSearchDomain(TBaseFont *this)
{
  return 0;
}

uint64_t TBaseFont::GetPriority(TBaseFont *this)
{
  return 60000;
}

CFIndex TBaseFont::CopyStringForGlyph@<X0>(TBaseFont *this@<X0>, CFIndex *a2@<X8>)
{
  CFIndex result;
  uint64_t v4;
  size_t v5;
  UniChar *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  TBaseFont::GetInitializedGraphicsFont(this);
  result = CGFontGetMaxUnichars();
  if (result
    && (MEMORY[0x1E0C80A78](result, v4),
        v6 = (UniChar *)((char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0)),
        memset(v6, 170, v5),
        (result = CGFontGetUnicharsForGlyph()) != 0))
  {
    result = (CFIndex)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, result);
    *a2 = result;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t TBaseFont::IsCJK(TBaseFont *this)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 416))(this);
  return (v1 < 0x1A) & (0x200000Eu >> v1);
}

BOOL TBaseFont::IsEnabled(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 0x3FFF) != 0x3FFF)
    TBaseFont::DetermineFontFlags(this, *((_DWORD *)this + 46) & 0x3FFF ^ 0x3FFF);
  return (*((_DWORD *)this + 45) & 1) == 0;
}

BOOL TBaseFont::IsValid(TBaseFont *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if ((*((_DWORD *)this + 45) & 0x10000000) == 0)
    return 1;
  v2 = (unsigned int *)((char *)this + 180);
  if ((*((_DWORD *)this + 46) & 0x80000000) == 0)
  {
    v3 = (unsigned int *)((char *)this + 184);
    atomic_load((unint64_t *)this + 12);
    do
      v4 = __ldxr(v2);
    while (__stxr(v4, v2));
    do
      v5 = __ldxr(v3);
    while (__stxr(v5 | 0x80000000, v3));
  }
  return (*v2 & 0x80000000) == 0;
}

BOOL TBaseFont::IsDownloadable(TBaseFont *this)
{
  const __CFURL *v1;
  CFURLRef v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  _BOOL8 v6;
  id v8;
  id v9;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v8);
  v1 = (const __CFURL *)atomic_load((unint64_t *)&v8);
  if (v1)
  {
    v9 = 0;
    if (CFURLGetBaseURL(v1))
    {
      v2 = CFURLCopyAbsoluteURL(v1);
      do
        v3 = (void *)__ldaxr((unint64_t *)&v9);
      while (__stlxr((unint64_t)v2, (unint64_t *)&v9));

      v1 = (const __CFURL *)atomic_load((unint64_t *)&v9);
    }
    v1 = (const __CFURL *)CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);

  }
  v4 = v1;
  v5 = v4;
  if (v4 == CFSTR("/private/var/MobileAsset/AssetsV2/com_apple_MobileAsset_Font"))
  {
    v6 = 1;
  }
  else if (v4)
  {
    v6 = CFStringHasPrefix(v4, CFSTR("/private/var/MobileAsset/AssetsV2/com_apple_MobileAsset_Font")) != 0;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t TBaseFont::HasBeenDownloaded(TBaseFont *this)
{
  return (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 304))(this);
}

void TCFBase_NEW<CTFontDescriptor,TBaseFont const*&>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  id v9;

  v4 = TCFBase<TDescriptor>::Allocate();
  if (v4)
  {
    v5 = *a1;
    *(_QWORD *)(v4 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v4 + 48;
    *(_QWORD *)(v4 + 56) = 0;
    *(_DWORD *)(v4 + 64) = 0x80000000;
    *(_QWORD *)(v4 + 72) = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_QWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = 0;
    v9 = (id)v4;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a2 = v8;

  }
  else
  {
    *a2 = 0;
  }
}

void TBaseFont::CreateVariantWithTraitsMatchingDescriptors(const TTraitsValues *this@<X0>, CFArrayRef theArray@<X1>, unint64_t *a3@<X8>)
{
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  unint64_t v10;
  CFIndex v11;
  TDescriptor **ValueAtIndex;
  TDescriptor **v13;
  TDescriptor *v14;
  TBaseFont *v15;
  double v16;
  double v17;
  CFIndex v18;
  TDescriptor **v19;
  TDescriptor **v20;
  TDescriptor *v21;
  TBaseFont *v22;
  double v23;
  id v24;

  if (!theArray)
    goto LABEL_23;
  Count = CFArrayGetCount(theArray);
  if (Count <= 0)
    goto LABEL_23;
  v8 = Count;
  v9 = CFArrayGetCount(theArray);
  if (v8 == 1)
  {
    v24 = (id)CFArrayGetValueAtIndex(theArray, 0);
    do
      v10 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
    goto LABEL_22;
  }
  v11 = v9;
  ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(theArray, 0);
  v13 = ValueAtIndex;
  v14 = ValueAtIndex[5];
  if ((*((_DWORD *)v14 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(ValueAtIndex[5], 0, 0.0);
  v15 = (TBaseFont *)atomic_load((unint64_t *)v14 + 4);
  if (!v15)
  {
LABEL_23:
    *a3 = 0;
    return;
  }
  v16 = TBaseFont::TraitsDistance(v15, this);
  if (v11 == 1)
  {
LABEL_20:
    v24 = v13;
    do
      v10 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
    goto LABEL_22;
  }
  v17 = v16;
  v18 = 1;
  while (1)
  {
    v19 = (TDescriptor **)CFArrayGetValueAtIndex(theArray, v18);
    v20 = v19;
    v21 = v19[5];
    if ((*((_DWORD *)v21 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v19[5], 0, 0.0);
    v22 = (TBaseFont *)atomic_load((unint64_t *)v21 + 4);
    if (!v22)
      goto LABEL_19;
    v23 = TBaseFont::TraitsDistance(v22, this);
    if (v23 != 0.0)
    {
      if (v17 > v23)
      {
        v13 = v20;
        v17 = v23;
      }
      goto LABEL_19;
    }
    if (v23 < v17)
      break;
LABEL_19:
    if (v11 == ++v18)
      goto LABEL_20;
  }
  v24 = v20;
  do
    v10 = __ldaxr((unint64_t *)&v24);
  while (__stlxr(0, (unint64_t *)&v24));
LABEL_22:
  *a3 = v10;

}

void TBaseFont::CreateVariantMatchingFamily(TBaseFont *this@<X0>, const __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  const TTraitsValues *TraitsValues;
  const __CFArray *v7;
  TPurgeableCache *v8;
  id v9;

  if (a2)
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
    TDescriptorSource::CopyMatchingDescriptorsForFamily(&v8, a2, (CFComparisonResult (*)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily, 0, (unint64_t *)&v9);
    TraitsValues = (const TTraitsValues *)atomic_load((unint64_t *)this + 30);
    if (!TraitsValues)
      TraitsValues = (const TTraitsValues *)TBaseFont::CreateTraitsValues(this);
    if (TraitsValues)
    {
      v7 = (const __CFArray *)atomic_load((unint64_t *)&v9);
      TBaseFont::CreateVariantWithTraitsMatchingDescriptors(TraitsValues, v7, a3);
    }
    else
    {
      *a3 = 0;
    }

  }
  else
  {
    *a3 = 0;
  }
}

void TCFBase_NEW<CTFontDescriptor,TBaseFont const*,__CFDictionary const*,unsigned int>(unint64_t *a1, const TBaseFont **a2, const __CFDictionary **a3, int *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  const TBaseFont *v10;
  const __CFDictionary *v11;
  int v12;
  TInstanceFont *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  id v18;

  v8 = (_QWORD *)TCFBase<TDescriptor>::Allocate();
  if (v8)
  {
    v9 = v8;
    v10 = *a2;
    v11 = *a3;
    v12 = *a4;
    v8[2] = 0;
    v8[3] = TDescriptor::Hash;
    v8[4] = 0;
    v8[5] = v8 + 6;
    v13 = (TInstanceFont *)operator new();
    TInstanceFont::TInstanceFont(v13, v10, v11);
    v9[6] = &off_1E15DCAF0;
    v9[7] = 0;
    *((_DWORD *)v9 + 16) = v12 | 0x80000000;
    v9[9] = 0;
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v9[10] = v14;
    v9[11] = 0;
    v18 = v9;
    do
      v17 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    *a1 = v17;

  }
  else
  {
    *a1 = 0;
  }
}

void TBaseFont::DefaultFallbackDescriptor(CFArrayRef theArray@<X1>, int a2@<W2>, unint64_t *a3@<X8>)
{
  void *v5;
  TDescriptor **v6;
  TDescriptor **v7;
  TDescriptor *v8;
  unint64_t v9;
  void *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  void *ValueAtIndex;
  id v14;
  id v15;

  v15 = (id)CFArrayGetValueAtIndex(theArray, 0);
  v5 = (void *)atomic_load((unint64_t *)&v15);
  v6 = v5;
  v7 = v6;
  v8 = v6[5];
  if ((*((_DWORD *)v8 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v6[5], 0, 0.0);
  v9 = atomic_load((unint64_t *)v8 + 4);

  if (v9 && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v9 + 16))(v9) == 1414743620)
  {
    v14 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v9 + 504))(&v14, v9);
    v10 = (void *)atomic_load((unint64_t *)&v14);
    v11 = v10;
    v12 = v11;
    if (v11)
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, 0);
    else
      ValueAtIndex = 0;
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v15, ValueAtIndex);

  }
  TDescriptorSource::CopyPossibleSystemUIFontDescriptor((unint64_t *)&v15, a2, a3);

}

void TBaseFont::FindFallbackDescriptorForCharacterRange(TBaseFont *this@<X0>, const __CFArray *a2@<X1>, const unsigned __int16 *a3@<X2>, CFRange *a4@<X4>, uint64_t a5@<X3>, unint64_t *a6@<X8>)
{
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  TDescriptor **ValueAtIndex;
  TDescriptor **v15;
  TDescriptor *v16;
  unint64_t v17;
  CFIndex v18;
  CFIndex v19;
  const __CFArray *v21;
  unint64_t v23;
  id v25;

  if (!a2 || (Count = CFArrayGetCount(a2)) == 0)
  {
LABEL_17:
    *a6 = 0;
    return;
  }
  v12 = Count;
  v13 = 0;
  while (1)
  {
    ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(a2, v13);
    v15 = ValueAtIndex;
    v16 = ValueAtIndex[5];
    if ((*((_DWORD *)v16 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(ValueAtIndex[5], 0x8000, 0.0);
    v17 = atomic_load((unint64_t *)v16 + 4);
    if (!v17)
      goto LABEL_16;
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v17 + 16))(v17) != 1414743620
      || ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 840))(v17) & 1) != 0)
    {
      break;
    }
    v25 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v17 + 504))(&v25, v17);
    if (atomic_load((unint64_t *)&v25))
    {
      *a6 = 0xAAAAAAAAAAAAAAAALL;
      v21 = (const __CFArray *)atomic_load((unint64_t *)&v25);
      TBaseFont::FindFallbackDescriptorForCharacterRange(this, v21, a3, a5, a4);
      if (atomic_load(a6))
        goto LABEL_21;

    }
LABEL_16:
    if (v12 == ++v13)
      goto LABEL_17;
  }
  if (((*(uint64_t (**)(unint64_t, TBaseFont *))(*(_QWORD *)v17 + 32))(v17, this) & 1) != 0)
    goto LABEL_16;
  v18 = (*(uint64_t (**)(unint64_t, const unsigned __int16 *, uint64_t))(*(_QWORD *)v17 + 816))(v17, a3, a5);
  if (v19 < 1)
    goto LABEL_16;
  a4->location = v18;
  a4->length = v19;
  v25 = v15;
  do
    v23 = __ldaxr((unint64_t *)&v25);
  while (__stlxr(0, (unint64_t *)&v25));
  *a6 = v23;
LABEL_21:

}

void TBaseFont::ShapingLanguages(TBaseFont *this@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id Mutable;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if ((a2 & 1) == 0)
  {
    v22[0] = &off_1E15E12A0;
    v22[1] = &Mutable;
    v23 = v22;
    v20[0] = &off_1E15E12E8;
    v20[1] = &Mutable;
    v21 = v20;
    if (TAATMorphTable::AddShapingLanguages(this, (uint64_t)v22))
      goto LABEL_14;
  }
  v18[0] = &off_1E15E12A0;
  v18[1] = &Mutable;
  v19 = v18;
  v16[0] = &off_1E15E12E8;
  v16[1] = &Mutable;
  v17 = v16;
  TOpenTypeMorph::AddShapingLanguages(this, (uint64_t)v18);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
LABEL_8:
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v9))(v8);
LABEL_13:
  if ((a2 & 1) != 0)
    goto LABEL_24;
LABEL_14:
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_19;
    v11 = 5;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
LABEL_19:
  v12 = v23;
  if (v23 == v22)
  {
    v13 = 4;
    v12 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_24;
    v13 = 5;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
  do
LABEL_24:
    v14 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a3 = v14;

}

uint64_t TBaseFont::InvalidateTable(TBaseFont *this, int a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  result = TableFlagForIdentifier(a2);
  v4 = (unsigned int *)((char *)this + 176);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 | result, v4));
  return result;
}

void TBaseFont::CopyAttribute(TBaseFont *this@<X0>, const __CFString **a2@<X2>, uint64_t a3@<X1>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;

  *a4 = 0;
  switch(a3)
  {
    case 1:
      goto LABEL_7;
    case 2:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *, _QWORD, const __CFString **))(*(_QWORD *)this + 88))(&v11, this, CFSTR("CTFontFullName"), 0, a2);
      do
        v5 = __ldaxr((unint64_t *)&v11);
      while (__stlxr(0, (unint64_t *)&v11));
      do
        v6 = (void *)__ldaxr(a4);
      while (__stlxr(v5, a4));
      break;
    case 3:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *, _QWORD, const __CFString **))(*(_QWORD *)this + 88))(&v11, this, CFSTR("CTFontFamilyName"), 0, a2);
      do
        v8 = __ldaxr((unint64_t *)&v11);
      while (__stlxr(0, (unint64_t *)&v11));
      do
        v6 = (void *)__ldaxr(a4);
      while (__stlxr(v8, a4));
      break;
    case 4:
      (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *, _QWORD, const __CFString **))(*(_QWORD *)this + 88))(&v11, this, CFSTR("CTFontSubFamilyName"), 0, a2);
      do
        v9 = __ldaxr((unint64_t *)&v11);
      while (__stlxr(0, (unint64_t *)&v11));
      do
        v6 = (void *)__ldaxr(a4);
      while (__stlxr(v9, a4));
      break;
    default:
      if (a3 == 34)
      {
LABEL_7:
        (*(void (**)(id *__return_ptr, TBaseFont *, const __CFString *, _QWORD, const __CFString **))(*(_QWORD *)this + 88))(&v11, this, CFSTR("CTFontPostScriptName"), 0, a2);
        do
          v7 = __ldaxr((unint64_t *)&v11);
        while (__stlxr(0, (unint64_t *)&v11));
        do
          v6 = (void *)__ldaxr(a4);
        while (__stlxr(v7, a4));
      }
      else
      {
        (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 40))(&v11);
        do
          v10 = __ldaxr((unint64_t *)&v11);
        while (__stlxr(0, (unint64_t *)&v11));
        do
          v6 = (void *)__ldaxr(a4);
        while (__stlxr(v10, a4));
      }
      break;
  }

}

uint64_t TBaseFont::IsStandaloneEmojiModifier(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a2 > 0)
    return (a4 != 2) ^ (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 712))(a1);
  if ((a3 - 127995) < 5 || a3 == 8205)
    return (a4 != 2) ^ (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 712))(a1);
  else
    return 0;
}

uint64_t TBaseFont::CharacterSetCoversCharacters(TBaseFont *this, CFCharacterSetRef theSet, const unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  int v14;

  v8 = 0;
  while (1)
  {
    v9 = v8 + 1;
    v10 = a3[v8];
    if ((v10 & 0xFC00) == 0xD800 && v9 != a4)
    {
      v12 = a3[v9];
      if ((v12 & 0xFC00) == 0xDC00)
      {
        v9 = v8 + 2;
        v10 = v12 + (v10 << 10) - 56613888;
LABEL_14:
        v13 = v10 - 127995 < 5;
        goto LABEL_15;
      }
    }
    if (v10 >= 0xFE0E)
      break;
    v13 = 0;
LABEL_15:
    v14 = 2;
    if (v10 == 8205 || v13)
      goto LABEL_19;
    if (CFCharacterSetIsLongCharacterMember(theSet, v10))
      return 1;
LABEL_20:
    v8 = v9;
    if (v9 >= a4)
      return 0;
  }
  if (v10 >> 4 > 0xFE0)
    goto LABEL_14;
  if (v10 == 65038)
    v14 = 1;
  else
    v14 = 2;
LABEL_19:
  if ((TBaseFont::IsStandaloneEmojiModifier((uint64_t)this, 0, v10, v14) & 1) == 0)
    goto LABEL_20;
  return 1;
}

void TBaseFont::CopyNativeFontForDescriptor(TBaseFont *this, const __CTFontDescriptor *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  TCGFontCache *v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  if (!a3)
    goto LABEL_13;
  v5 = *(_QWORD *)(a3 + 40);
  if ((*(_DWORD *)(v5 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(a3 + 40), 0, 0.0);
  v6 = (unint64_t *)atomic_load((unint64_t *)(v5 + 32));
  if (!v6)
    goto LABEL_13;
  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  v7 = (TCGFontCache *)atomic_load(v6 + 10);
  TCGFontCache::CopyFont(v7, 0, 0, (unint64_t *)this);
  if (!atomic_load((unint64_t *)this))
  {

LABEL_13:
    *(_QWORD *)this = 0;
    return;
  }
  if ((*(unsigned int (**)(unint64_t *))(*v6 + 688))(v6))
  {
    v9 = (unsigned int *)((char *)a2 + 180);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 | 2, v9));
    v11 = (unsigned int *)((char *)a2 + 184);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 | 2, v11));
  }
}

void *TBaseFont::CreateStrikeMetricsDictionaryRepresentation(TBaseFont *this)
{
  _DWORD *inited;
  void *v2;
  CFDictionaryRef DictionaryRepresentation;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CGRect v11;

  v7 = xmmword_18494F838;
  v8 = unk_18494F848;
  v9 = xmmword_18494F858;
  v10 = unk_18494F868;
  v5 = __const__ZL17StrikeMetricsFromPK14CGFontHMetricsj6CGRectd_result;
  v6 = unk_18494F828;
  if (*((_DWORD *)this + 62))
    inited = (_DWORD *)((char *)this + 248);
  else
    inited = TBaseFont::InitFontMetrics(this, 0.0);
  StrikeMetrics::StrikeMetrics((uint64_t)&v5, (uint64_t)inited);
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v5), CFSTR("unitsPerEm"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)&v5 + 1)), CFSTR("ascent"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v6), CFSTR("descent"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)&v6 + 1)), CFSTR("leading"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v7), CFSTR("capHeight"));
  v11.origin.x = *((CGFloat *)&v8 + 1);
  *(_OWORD *)&v11.origin.y = v9;
  *(_QWORD *)&v11.size.height = v10;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v11);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("bbox"));
  CFRelease(DictionaryRepresentation);
  if (BYTE8(v10))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("forceAscenderDelta"));
  return v2;
}

CFStringRef TBaseFont::DebugDescription(TBaseFont *this)
{
  void *v1;
  CFStringRef v2;
  id v4;

  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v4);
  do
    v1 = (void *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("BaseFont <url: %@>\n"), v1);
  return v2;
}

uint64_t TBaseFont::CopyAttribute(TBaseFont *this, const __CFString *key, const __CFString **a3)
{
  const void *FontAttributeID;

  FontAttributeID = GetFontAttributeID(key);
  return (*(uint64_t (**)(TBaseFont *, const void *, const __CFString **))(*(_QWORD *)this + 48))(this, FontAttributeID, a3);
}

CFNumberRef TBaseFont::CopyFormat@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 208))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopyStringEncoding@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  uint64_t valuePtr;

  valuePtr = (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 416))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  *a2 = result;
  return result;
}

void TBaseFont::CopyIgnoreScriptAnalysis(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  int v3;
  id *v4;
  unint64_t v5;
  id v6;

  v3 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 760))(this);
  if (v3)
  {
    v4 = (id *)MEMORY[0x1E0C9AE50];
    if (v3 != 2)
      v4 = (id *)MEMORY[0x1E0C9AE40];
    v6 = *v4;
    do
      v5 = __ldaxr((unint64_t *)&v6);
    while (__stlxr(0, (unint64_t *)&v6));
    *a2 = v5;

  }
  else
  {
    *a2 = 0;
  }
}

CFNumberRef TBaseFont::CopyScope@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 240))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopyPriority@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  uint64_t valuePtr;

  valuePtr = (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 256))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopySearchDomain@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  uint64_t valuePtr;

  valuePtr = (*(unsigned int (**)(TBaseFont *))(*(_QWORD *)this + 272))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopyIsEnabled@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 288))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopyIsDownloadable@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 304))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef TBaseFont::CopyHasBeenDownloaded@<X0>(TBaseFont *this@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 320))(this);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  *a2 = result;
  return result;
}

uint64_t TBaseFont::HasDerivedOpticalSize(TBaseFont *this)
{
  return 0;
}

void TBaseFont::CopyPhysicalFontDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TBaseFont::GetPhysicalSymbolicTraits(TBaseFont *this)
{
  return (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 160))(this);
}

CGFloat TBaseFont::GetCapHeight(TBaseFont *this, const CGAffineTransform *a2)
{
  CGFont *InitializedGraphicsFont;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  return a2->ty + a2->d * (double)CGFontGetCapHeight(InitializedGraphicsFont) + a2->b * 0.0;
}

CGFloat TBaseFont::GetSlantAngle(TBaseFont *this, const CGAffineTransform *a2)
{
  CGFont *InitializedGraphicsFont;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  return CGFontGetItalicAngle(InitializedGraphicsFont);
}

uint64_t TBaseFont::IsInvisible(TBaseFont *this)
{
  if ((*((_DWORD *)this + 46) & 8) == 0)
    TBaseFont::DetermineFontFlags(this, 8);
  return (*((_DWORD *)this + 45) >> 3) & 1;
}

uint64_t TBaseFont::GetTextStyle(TBaseFont *this)
{
  return 0;
}

uint64_t TBaseFont::HasExuberatedLineHeight(TBaseFont *this)
{
  return 0;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<TUnicodeDataCachePage>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::unique_ptr<TUnicodeDataCachePage>::reset[abi:nn180100](v2 + 3, 0);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t TFallbacksSource::GetCache(void)::{lambda(void *)#1}::__invoke()
{
  unint64_t *v0;
  void *v1;
  void *v2;
  uint64_t result;

  v0 = (unint64_t *)operator new();
  *v0 = objc_opt_new();
  v1 = (void *)atomic_load(v0);
  objc_msgSend(v1, "setName:", CFSTR("com.apple.CoreText.TFallbacksSource"));
  v2 = (void *)atomic_load(v0);
  objc_msgSend(v2, "setEvictsObjectsWithDiscardedContent:", 0);
  qword_1EDD17218 = (uint64_t)v0;
  result = GetLocaleChangedCount();
  dword_1EDD171BC = result;
  return result;
}

void TBaseFont::GetUnscaledTrackAmount(__CFDictionary const*,double,BOOL,unsigned int)const::$_0::__invoke()
{
  void *v0;
  void *v1;
  const __CFNumber *v2;
  uint64_t valuePtr;

  v0 = (void *)CFPreferencesCopyValue(CFSTR("AppleSystemUIFontDefaultTrack"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  v1 = v0;
  if (v0)
  {
    v2 = v0;
    valuePtr = -1;
    CFNumberGetValue(v2, kCFNumberDoubleType, &valuePtr);
    qword_1EDD17210 = valuePtr;

  }
}

void std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_0,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_0>,void ()(__CFString const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_0,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_0>,void ()(__CFString const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E12A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_0,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_0>,void ()(__CFString const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E12A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_0,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_0>,void ()(__CFString const*)>::operator()(uint64_t a1, const void **a2)
{
  const void *v2;
  __CFArray *v3;

  v2 = *a2;
  v3 = (__CFArray *)atomic_load(*(unint64_t **)(a1 + 8));
  CFArrayAppendValue(v3, v2);
}

void std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_1,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_1,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E12E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_1,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E12E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TBaseFont::ShapingLanguages(BOOL)::$_1,std::allocator<TBaseFont::ShapingLanguages(BOOL)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  __CFArray *v1;

  v1 = (__CFArray *)atomic_load(*(unint64_t **)(a1 + 8));
  CFArrayRemoveAllValues(v1);
}

id **std::unique_ptr<OTL::MergeTable const>::reset[abi:nn180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x186DC03ACLL);
  }
  return result;
}

BOOL TSplicedFont::IsInvisible(TSplicedFont *this)
{
  _BOOL8 v2;
  void *v3;
  const __CFString *v4;
  __CFString *v5;
  CFIndex Length;
  const __CFString *v7;
  void *v8;
  const __CFString *v9;
  __CFString *v10;
  CFIndex v11;
  const __CFString *v12;
  id v14;
  id v15;

  if ((TSplicedFontDict::IsInvisibleSplice((TSplicedFont *)((char *)this + 600)) & 1) == 0)
  {
    v15 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TSplicedFont *, const __CFString *))(*(_QWORD *)this + 72))(&v15, this, CFSTR("CTFontFullName"));
    v3 = (void *)atomic_load((unint64_t *)&v15);
    v4 = v3;
    if (v4)
    {
      v5 = (__CFString *)v4;
      Length = CFStringGetLength(v4);

      if (Length)
      {
        v7 = (const __CFString *)atomic_load((unint64_t *)&v15);
        if (CFStringGetCharacterAtIndex(v7, 0) != 46)
        {
          v14 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, TSplicedFont *, const __CFString *))(*(_QWORD *)this + 72))(&v14, this, CFSTR("CTFontFamilyName"));
          v8 = (void *)atomic_load((unint64_t *)&v14);
          v9 = v8;
          if (v9)
          {
            v10 = (__CFString *)v9;
            v11 = CFStringGetLength(v9);

            if (v11)
            {
              v12 = (const __CFString *)atomic_load((unint64_t *)&v14);
              v2 = CFStringGetCharacterAtIndex(v12, 0) == 46;
LABEL_15:

              goto LABEL_11;
            }
          }
          else
          {

          }
          v2 = 1;
          goto LABEL_15;
        }
      }
    }
    else
    {

    }
    v2 = 1;
LABEL_11:

    return v2;
  }
  return 1;
}

void CopyComponentFontDescriptorWithBaseSystemFallback(__CFString *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const __CFDictionary *v7;
  _BYTE v8[8];
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  a1->isa = (void *)0xAAAAAAAAAAAAAAAALL;
  v6 = a4 | 0x12;
  if (a3)
  {
    v9[0] = CFSTR("NSFontNameAttribute");
    v9[1] = CFSTR("NSCTFontFileURLAttribute");
    v10[0] = a2;
    v10[1] = a3;
    v7 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2);
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)v8);
    TDescriptorSource::CopyDescriptorForRequest((TDescriptorSource *)v8, v7, 0, 0, v6, (unint64_t *)a1);
  }
  else
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)v10);
    TDescriptorSource::CopyFontDescriptorPerPostScriptName(a1, v10, a2, v6, 5, 0, 0, 0, -1, *MEMORY[0x1E0C9AE40]);
  }
}

uint64_t std::vector<__CFString const*,TInlineBufferAllocator<__CFString const*,30ul>>::push_back[abi:nn180100](uint64_t result, _QWORD *a2)
{
  int64x2_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t *v23;

  v3 = (int64x2_t *)result;
  v5 = *(_QWORD **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = result + 24;
    v8 = ((uint64_t)v5 - v3->i64[0]) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v3->i64[0];
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v23 = &v3[1].i64[1];
    if (v11)
      v12 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v7, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    v22 = v14;
    *(_QWORD *)v13 = *a2;
    v6 = v13 + 8;
    v21.i64[1] = (uint64_t)(v13 + 8);
    v16 = v3->i64[0];
    v15 = v3->u64[1];
    if (v15 == v3->i64[0])
    {
      v18 = vdupq_n_s64(v15);
    }
    else
    {
      do
      {
        v17 = *(_QWORD *)(v15 - 8);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v18 = *v3;
      v6 = (_QWORD *)v21.i64[1];
      v14 = v22;
    }
    v3->i64[0] = (uint64_t)v13;
    v3->i64[1] = (uint64_t)v6;
    v21 = v18;
    v19 = (char *)v3[1].i64[0];
    v3[1].i64[0] = (uint64_t)v14;
    v22 = v19;
    v20 = v18.i64[0];
    result = std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  v3->i64[1] = (uint64_t)v6;
  return result;
}

void TSplicedFont::CopyLocalizedName(TSplicedFont *this@<X0>, __CFString *a2@<X1>, const __CFArray *a3@<X2>, const __CFString **a4@<X3>, unint64_t *a5@<X8>)
{
  void *v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  int v13;
  int v14;
  int v15;
  int v17;
  unint64_t v18;
  void *v19;
  const void *v21;
  const void *v22;
  __CFString *v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  __CFString v30;

  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontNames"), &v30.info);
  do
    v10 = (void *)__ldaxr((unint64_t *)&v30.info);
  while (__stlxr(0, (unint64_t *)&v30.info));

  Value = v10;
  v12 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
  v30.info = (uint64_t)Value;

  v13 = FontNameCodeForKey(a2);
  v14 = (*(uint64_t (**)(TSplicedFont *))(*(_QWORD *)this + 848))(this);
  v15 = v14;
  if (atomic_load((unint64_t *)&v30.info))
  {
    if (!v14)
      goto LABEL_24;
    goto LABEL_20;
  }
  v30.isa = 0;
  if (*((_BYTE *)this + 632))
    v17 = v14;
  else
    v17 = 1;
  if (v17 == 1)
  {
    v29 = TSplicedFontDict::FindLocalizedName((TSplicedFont *)((char *)this + 600), v13, (const __CFString **)&v30);
    do
      v18 = __ldaxr((unint64_t *)&v29);
    while (__stlxr(0, (unint64_t *)&v29));
    do
      v19 = (void *)__ldaxr((unint64_t *)&v30.info);
    while (__stlxr(v18, (unint64_t *)&v30.info));

  }
  if (atomic_load((unint64_t *)&v30.info))
  {
    if (a4)
      *a4 = (const __CFString *)v30.isa;
    v21 = (const void *)atomic_load((unint64_t *)&v30.info);
    NamesWithUpdatedName((const __CFDictionary *)&v29, (CFDictionaryRef)v10, a2, v21);
    v22 = (const void *)atomic_load((unint64_t *)&v29);
    TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v22, CFSTR("CTFontNames"));

    if (!v15)
      goto LABEL_24;
LABEL_20:
    v23 = (__CFString *)atomic_load((unint64_t *)&v30.info);
    CopyLocalizedFontNameFromResources(v23, a3, a4, v13, &v30);
    do
      v24 = __ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));
    do
      v25 = (void *)__ldaxr((unint64_t *)&v30.info);
    while (__stlxr(v24, (unint64_t *)&v30.info));

    do
LABEL_24:
      v26 = __ldaxr((unint64_t *)&v30.info);
    while (__stlxr(0, (unint64_t *)&v30.info));
    *a5 = v26;
    goto LABEL_26;
  }
  v27 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v27 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v27, 0, 0.0);
  v28 = atomic_load((unint64_t *)(v27 + 32));
  (*(void (**)(unint64_t, __CFString *, const __CFArray *, const __CFString **))(*(_QWORD *)v28 + 88))(v28, a2, a3, a4);
LABEL_26:

}

uint64_t TSplicedFont::CharactersCovered(TSplicedFont *this, const unsigned __int16 *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8;
  unint64_t v9;

  if (!(*(unsigned int (**)(TSplicedFont *))(*(_QWORD *)this + 840))(this))
    return TBaseFont::CharactersCovered(this, a2, a3, a4);
  v8 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v8 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v8, 0, 0.0);
  v9 = atomic_load((unint64_t *)(v8 + 32));
  return (*(uint64_t (**)(unint64_t, const unsigned __int16 *, uint64_t, BOOL *))(*(_QWORD *)v9 + 808))(v9, a2, a3, a4);
}

id TSplicedFont::CopyLogicalCharacterSet@<X0>(TSplicedFont *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v7;
  const void *v9;
  void *v10;
  id result;
  id v12;

  v3 = (unint64_t *)((char *)this + 192);
  if (!atomic_load((unint64_t *)this + 24))
  {
    v12 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 176))(&v12);
    if (atomic_load((unint64_t *)&v12))
    {
      v7 = atomic_load((unint64_t *)&v12);
      do
      {
        if (__ldaxr(v3))
        {
          __clrex();
          goto LABEL_9;
        }
      }
      while (__stlxr(v7, v3));
      do
        v9 = (const void *)__ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
      TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v9, CFSTR("NSCTFontCharacterSetAttribute"));
    }
LABEL_9:

  }
  v10 = (void *)atomic_load(v3);
  result = v10;
  *a2 = result;
  return result;
}

void TSplicedFont::CopyCharacterSet(TSplicedFont *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  const void *v10;
  void *v11;
  id v12;

  if (*((_QWORD *)this + 77))
  {
    v12 = (id)0xAAAAAAAAAAAAAAAALL;
    v4 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
    if ((*(_DWORD *)(v4 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
    v5 = atomic_load((unint64_t *)(v4 + 32));
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v5 + 184))(&v12);
    if (atomic_load((unint64_t *)&v12))
    {
      v7 = (unint64_t *)((char *)this + 192);
      v8 = atomic_load((unint64_t *)&v12);
      do
      {
        if (__ldaxr(v7))
        {
          __clrex();
          goto LABEL_12;
        }
      }
      while (__stlxr(v8, v7));
      do
        v10 = (const void *)__ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
      TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v10, CFSTR("NSCTFontCharacterSetAttribute"));
    }
LABEL_12:
    v11 = (void *)atomic_load((unint64_t *)this + 24);
    *a2 = v11;

  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, TSplicedFont *))(*(_QWORD *)this + 768))(a2, this);
  }
}

CGFloat TSplicedFont::GetUnderlinePosition(TSplicedFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  double v4;

  v3 = (TSplicedFont *)((char *)this + 600);
  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlinePosition();
  return TSplicedFontDict::GetUnderlinePosition(v3, a2->ty + v4 * a2->d + a2->b * 0.0, a2);
}

CGFloat TSplicedFont::GetUnderlineThickness(TSplicedFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  double v4;

  v3 = (TSplicedFont *)((char *)this + 600);
  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlineThickness();
  return TSplicedFontDict::GetUnderlineThickness(v3, a2->ty + v4 * a2->d + a2->b * 0.0, a2);
}

double TSplicedFont::GetSlantAngle(TSplicedFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  CGFont *InitializedGraphicsFont;
  double ItalicAngle;

  v3 = (TSplicedFont *)((char *)this + 600);
  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  ItalicAngle = CGFontGetItalicAngle(InitializedGraphicsFont);
  return TSplicedFontDict::GetSlantAngle(v3, ItalicAngle, a2);
}

CGFloat TSplicedFont::GetMaxAdvance(TSplicedFont *this, const CGAffineTransform *a2, int a3)
{
  TSplicedFontDict *v4;
  double MaxAdvance;

  v4 = (TSplicedFont *)((char *)this + 600);
  MaxAdvance = TBaseFont::GetMaxAdvance(this, a2, a3);
  return TSplicedFontDict::GetMaxAdvance(v4, MaxAdvance, a2);
}

CFStringRef TSplicedFont::DebugDescription(TSplicedFont *this)
{
  const __CFAllocator *v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = atomic_load((unint64_t *)this + 12);
  v3 = atomic_load((unint64_t *)this + 78);
  return CFStringCreateWithFormat(v1, 0, CFSTR("SplicedFont <name: %@, cascade list: %@>\n"), v2, v3);
}

uint64_t TSplicedFont::CopyPhysicalFontDescriptor(TSplicedFont *this, double a2)
{
  double v4;
  unint64_t OpticalSizeComponent;
  uint64_t v6;

  if ((*(unsigned int (**)(TSplicedFont *))(*(_QWORD *)this + 16))(this) == 1414743620
    && (*(unsigned int (**)(TSplicedFont *))(*(_QWORD *)this + 840))(this))
  {
    v4 = 12.0;
    if (a2 != 0.0)
      v4 = a2;
    OpticalSizeComponent = TSplicedFont::GetOpticalSizeComponent(this, v4);
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
    if ((*(_DWORD *)(v6 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont((TDescriptor *)v6, 0, 0.0);
    OpticalSizeComponent = atomic_load((unint64_t *)(v6 + 32));
  }
  return (*(uint64_t (**)(unint64_t, double))(*(_QWORD *)OpticalSizeComponent + 520))(OpticalSizeComponent, a2);
}

void TComponentFont::CopyPhysicalFontDescriptor(TComponentFont *this@<X0>, double a2@<D0>, unint64_t *a3@<X8>)
{
  const __CFURL *v5;
  TPurgeableCache *v6;
  id v7;

  v7 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, double))(*(_QWORD *)this + 200))(&v7, a2);
  if (atomic_load((unint64_t *)&v7))
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v6);
    v5 = (const __CFURL *)atomic_load((unint64_t *)&v7);
    TDescriptorSource::CopyDescriptor(&v6, v5, 0, 0, a3);
  }
  else
  {
    *a3 = 0;
  }

}

uint64_t TSplicedFont::GetLanguageAwareOutsets(TSplicedFont *this, double a2, double *a3, double *a4, double *a5, double *a6, const __CFString *a7)
{
  uint64_t v13;
  unint64_t v14;

  v13 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v13 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v14 = atomic_load((unint64_t *)(v13 + 32));
  return (*(uint64_t (**)(unint64_t, double *, double *, double *, double *, const __CFString *, double))(*(_QWORD *)v14 + 888))(v14, a3, a4, a5, a6, a7, a2);
}

BOOL TSplicedFont::GetOpticalPointSizes(TSplicedFont *this, double *a2, double *a3)
{
  double *v3;

  v3 = (double *)*((_QWORD *)this + 77);
  if (v3)
  {
    *a2 = 0.0;
    *a3 = *v3;
  }
  return v3 != 0;
}

void TComponentFont::TComponentFont(TComponentFont *this, const TBaseFont *a2, const __CFDictionary *a3, const TSplicedFontDict *a4)
{
  uint64_t v8;
  void *v9;
  void *ComponentAttribute;
  void *v13;

  TBaseFont::TBaseFont(this, a2);
  *(_QWORD *)v8 = &off_1E15DD370;
  *(_DWORD *)(v8 + 712) = 0;
  if (a4)
    v9 = (void *)atomic_load((unint64_t *)a4);
  else
    v9 = (void *)(*(uint64_t (**)(const TBaseFont *))(*(_QWORD *)a2 + 880))(a2);
  *((_QWORD *)this + 90) = v9;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 93) = a3;
  *((_QWORD *)this + 94) = 0;
  if (!atomic_load((unint64_t *)this + 12))
  {
    ComponentAttribute = (void *)TComponentFont::GetComponentAttribute(this, CFSTR("name"));
    TCFRef<__CTFont const*>::Retain((unint64_t *)this + 12, ComponentAttribute);
  }
  if (!atomic_load((unint64_t *)this + 15))
    TBaseFont::InitAttributesDict(this);
  v13 = (void *)atomic_load((unint64_t *)this + 15);
  if (a3)
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)SetValuesToDictionaryFromDictionary(__CFDictionary *,__CFDictionary const*)::$_0::__invoke, v13);
  if (CFDictionaryGetValue(a3, CFSTR("hmtxOverride")))
    *((_DWORD *)this + 178) |= 0x20u;
  if (CFDictionaryGetValue(a3, CFSTR("Matrix")))
    *((_DWORD *)this + 178) |= 0x40u;
  if (CFDictionaryGetValue(a3, CFSTR("cmapOverride")))
    *((_DWORD *)this + 178) |= 0x100u;
  if (CFDictionaryGetValue(a3, CFSTR("UnicodeCharSet"))
    || CFDictionaryGetValue(a3, CFSTR("NSCTFontCharacterSetAttribute")))
  {
    *((_DWORD *)this + 178) |= 0x200u;
  }
  if (CFDictionaryGetValue(a3, CFSTR("UnicodeCharSetTrim")))
    *((_DWORD *)this + 178) |= 0x400u;
}

unsigned int *TComponentFont::GetPhysicalSymbolicTraits(TComponentFont *this)
{
  unsigned int *result;

  result = (unsigned int *)(*(uint64_t (**)(TComponentFont *))(*(_QWORD *)this + 800))(this);
  if (result)
    return (unsigned int *)*result;
  return result;
}

unint64_t TComponentFont::GetPhysicalTraitsValues(TComponentFont *this)
{
  unint64_t *v1;
  unint64_t v2;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFArray *v7;
  unint64_t v8;
  void *v9;
  TBaseFont *v11;
  unint64_t TraitsValuesFromTraitsDictionary;
  unint64_t v13;
  id v15;
  id v16;
  id v17;
  id v18;
  int v19;

  v1 = (unint64_t *)((char *)this + 736);
  v2 = atomic_load((unint64_t *)this + 92);
  if (!v2)
  {
    v19 = 0;
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::CreateTraitsValuesPerFontInfo((unint64_t *)this, &v19, (unint64_t *)&v18);
    if (!v19 && (*((_BYTE *)this + 712) & 4) != 0)
    {
      v17 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TComponentFont *))(*(_QWORD *)this + 112))(&v17, this);
      v16 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TComponentFont *))(*(_QWORD *)this + 120))(&v16, this);
      v5 = (const __CFDictionary *)atomic_load((unint64_t *)&v18);
      v6 = (const __CFDictionary *)atomic_load((unint64_t *)&v17);
      v7 = (const __CFArray *)atomic_load((unint64_t *)&v16);
      CreateTraitsWithVariation(v5, v6, v7, 0, 0, 0, (unint64_t *)&v15);
      do
        v8 = __ldaxr((unint64_t *)&v15);
      while (__stlxr(0, (unint64_t *)&v15));
      do
        v9 = (void *)__ldaxr((unint64_t *)&v18);
      while (__stlxr(v8, (unint64_t *)&v18));

    }
    if (atomic_load((unint64_t *)&v18))
    {
      v11 = (TBaseFont *)atomic_load((unint64_t *)&v18);
      TraitsValuesFromTraitsDictionary = TBaseFont::CreateTraitsValuesFromTraitsDictionary(v11, v4);
      v2 = TraitsValuesFromTraitsDictionary;
      while (1)
      {
        v13 = __ldaxr(v1);
        if (v13)
          break;
        if (!__stlxr(TraitsValuesFromTraitsDictionary, v1))
          goto LABEL_15;
      }
      __clrex();
      MEMORY[0x186DC03AC](TraitsValuesFromTraitsDictionary, 0x1000C4089CA3EB1);
      v2 = v13;
    }
    else
    {
      v2 = 0;
    }
LABEL_15:

  }
  return v2;
}

double TComponentFont::GetSlantAngle(TComponentFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  CGFont *InitializedGraphicsFont;
  double ItalicAngle;

  v3 = (TComponentFont *)((char *)this + 720);
  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  ItalicAngle = CGFontGetItalicAngle(InitializedGraphicsFont);
  return TSplicedFontDict::GetSlantAngle(v3, ItalicAngle, a2);
}

double TComponentFont::ModifyRawBoundingBox(TComponentFont *this, CGRect a2)
{
  return TSplicedFontDict::ModifyRawBoundingBox((TComponentFont *)((char *)this + 720), a2);
}

void TComponentFont::CalculateFontMetrics(TComponentFont *this@<X0>, double a2@<D0>, int a3@<W1>, StrikeMetrics *a4@<X8>)
{
  __n128 v8;

  *((_OWORD *)a4 + 2) = xmmword_18494F8D8;
  *((_OWORD *)a4 + 3) = unk_18494F8E8;
  *((_OWORD *)a4 + 4) = xmmword_18494F8F8;
  *((_OWORD *)a4 + 5) = unk_18494F908;
  *(_OWORD *)a4 = xmmword_18494F8B8;
  *((_OWORD *)a4 + 1) = unk_18494F8C8;
  TBaseFont::CalculateFontMetrics(this, a3, (uint64_t)a4);
  v8.n128_f64[0] = a2;
  TComponentFont::AdjustLineMetrics(this, a3, a4, v8);
}

__CFString *TComponentFont::GetSyntheticName(TComponentFont *this)
{
  double *v2;
  double *v3;
  int v4;
  const __CFString *v5;
  const __CFString **v6;
  double v7;

  v2 = (double *)(*(uint64_t (**)(TComponentFont *))(*(_QWORD *)this + 800))(this);
  if (v2)
  {
    v3 = v2;
    v4 = *(_DWORD *)v2 & 1;
    v5 = (const __CFString *)(*(uint64_t (**)(TComponentFont *))(*(_QWORD *)this + 536))(this);
    v7 = v3[1];
  }
  else
  {
    v5 = (const __CFString *)(*(uint64_t (**)(TComponentFont *))(*(_QWORD *)this + 536))(this);
    v4 = 0;
    v7 = 0.0;
  }
  return TDescriptorSource::GetNameForSystemFontOfWeight(v5, 0, v7, v4, 0, v6);
}

void TComponentFont::CopyLocalizedName(TComponentFont *this@<X0>, const __CFString *a2@<X1>, const __CFArray *a3@<X2>, const __CFString **a4@<X3>, __CFString *a5@<X8>)
{
  int v10;
  BOOL v11;
  __CFString *FontName;
  __CFString *SyntheticName;

  if ((*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 848))(this))
  {
    v10 = FontNameCodeForKey(a2);
    if ((*(unsigned int (**)(TComponentFont *))(*(_QWORD *)this + 856))(this))
      v11 = v10 == 4;
    else
      v11 = 0;
    if (v11)
    {
      SyntheticName = TComponentFont::GetSyntheticName(this);
      FontName = (__CFString *)FullNameForSynthetic(SyntheticName);
    }
    else
    {
      FontName = (__CFString *)TSplicedFontDict::FindFontName((TComponentFont *)((char *)this + 720), v10, 0);
    }
    CopyLocalizedFontNameFromResources(FontName, a3, a4, v10, a5);
  }
  else
  {
    TBaseFont::CopyLocalizedName(this, a2, a3, a4, (unint64_t *)a5);
  }
}

BOOL TComponentFont::SupportsLanguages(TComponentFont *this, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;
  void *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  int v10;
  _BOOL8 v11;
  BOOL v12;
  id v14;
  CFRange v15;

  if ((*((_BYTE *)this + 713) & 7) == 0)
    return TBaseFont::SupportsLanguages(this, a2);
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 336))(&v14);
  if (a2 && (Count = CFArrayGetCount(a2)) != 0)
  {
    v4 = 0;
    v5 = Count - 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v4);
      v7 = (void *)atomic_load((unint64_t *)&v14);
      v8 = v7;
      if (!v8)
        break;
      v9 = v8;
      v15.length = CFArrayGetCount(v8);
      v15.location = 0;
      v10 = CFArrayContainsValue(v9, v15, ValueAtIndex);
      v11 = v10 != 0;

      if (v10)
        v12 = v5 == v4;
      else
        v12 = 1;
      ++v4;
      if (v12)
        goto LABEL_15;
    }

    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
LABEL_15:

  return v11;
}

uint64_t `anonymous namespace'::TcmapOverrideContext::GetMappedGlyph(_anonymous_namespace_::TcmapOverrideContext *this, unsigned int a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  int v7;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;

  if (!this)
    goto LABEL_9;
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_9;
  v3 = (char *)this + 8;
  v4 = (char *)this + 8 * v2 + 8;
  while (1)
  {
    v5 = v2 >> 1;
    v6 = &v3[8 * (v2 >> 1)];
    if (*(_DWORD *)v6 >= a2)
      break;
    v3 = v6 + 8;
    v5 = v2 + ~v5;
LABEL_8:
    v2 = v5;
    if (!v5)
      goto LABEL_9;
  }
  if (*(_DWORD *)v6 > a2)
  {
    v4 = &v3[8 * (v2 >> 1)];
    goto LABEL_8;
  }
  v9 = &v3[8 * (v2 >> 1)];
  if (v2 >= 2)
  {
    v9 = v3;
    do
    {
      v10 = v5 >> 1;
      v11 = &v9[8 * (v5 >> 1)];
      v13 = *(_DWORD *)v11;
      v12 = v11 + 8;
      v5 += ~(v5 >> 1);
      if (v13 >= a2)
        v5 = v10;
      else
        v9 = v12;
    }
    while (v5);
  }
  v14 = v6 + 8;
  if (v4 != v14)
  {
    v15 = (v4 - v14) >> 3;
    v4 = v14;
    do
    {
      v16 = v15 >> 1;
      v17 = &v4[8 * (v15 >> 1)];
      v19 = *(_DWORD *)v17;
      v18 = v17 + 8;
      v15 += ~(v15 >> 1);
      if (v19 > a2)
        v15 = v16;
      else
        v4 = v18;
    }
    while (v15);
  }
  if (v9 != v4)
    return (unsigned __int16)*((_DWORD *)v9 + 1);
LABEL_9:
  LOWORD(v7) = 0;
  return (unsigned __int16)v7;
}

uint64_t TComponentFont::CharacterRangeCovered(TComponentFont *this, const unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;
  void *ComponentAttribute;
  _anonymous_namespace_::TcmapOverrideContext *BytePtr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  BOOL v14;
  int v15;
  id v17;

  if ((*((_BYTE *)this + 713) & 1) == 0)
    return TBaseFont::CharacterRangeCovered(this, a2, a3);
  ComponentAttribute = (void *)TComponentFont::GetComponentAttribute(this, CFSTR("cmapOverride"));
  v17 = ComponentAttribute;
  if (ComponentAttribute)
    BytePtr = (_anonymous_namespace_::TcmapOverrideContext *)CFDataGetBytePtr((CFDataRef)ComponentAttribute);
  else
    BytePtr = 0;
  if (a3 < 1)
  {
    v5 = 0;
  }
  else
  {
    v8 = 0;
    v5 = 0;
    v9 = 0;
    do
    {
      v10 = v8 + 1;
      v11 = a2[v8];
      if ((v11 & 0xFC00) == 0xD800 && v10 != a3)
      {
        v13 = a2[v10];
        v14 = (v13 & 0xFC00) == 56320;
        v15 = v13 + (v11 << 10) - 56613888;
        v10 = v14 ? v8 + 2 : v8 + 1;
        if (v14)
          v11 = v15;
      }
      {
        if (!v9)
          v5 = v10;
        v9 = v9 - v8 + v10;
      }
      else if (v9)
      {
        break;
      }
      v8 = v10;
    }
    while (v10 < a3);
  }

  return v5;
}

uint64_t TComponentFont::GetUnscaledAdvances(TComponentFont *this, unsigned __int16 *a2, _QWORD *a3, int a4, int64_t a5)
{
  const __CFDictionary *ComponentAttribute;
  const __CFDictionary *v11;
  double *v12;
  unsigned int v13;

  if ((*((_BYTE *)this + 712) & 0x20) == 0)
    return TBaseFont::GetUnscaledAdvances(this, (uint64_t)a2, a3, a4, a5);
  ComponentAttribute = (const __CFDictionary *)TComponentFont::GetComponentAttribute(this, CFSTR("hmtxOverride"));
  if (!ComponentAttribute)
    return TBaseFont::GetUnscaledAdvances(this, (uint64_t)a2, a3, a4, a5);
  if (a5 >= 1)
  {
    v11 = ComponentAttribute;
    v12 = (double *)(a3 + 1);
    do
    {
      v13 = *a2++;
      *(v12 - 1) = (double)(uint64_t)CFDictionaryGetValue(v11, (const void *)v13);
      if (a4 >= 2)
        bzero(v12, 8 * (a4 - (unint64_t)(((a4 - 1) & 0x1FFFFFFFFFFFFFFFLL) != 0)));
      v12 += a4;
      --a5;
    }
    while (a5);
  }
  return 1;
}

CFStringRef TComponentFont::DebugDescription(TComponentFont *this)
{
  void *v2;
  void *v3;
  CFStringRef v4;
  id v6;

  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v6);
  do
    v2 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  TBaseFont::CreateDescriptorAttributes(this, (CFDictionaryRef *)&v6);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("ComponentFont <url: %@, attributes: %@>\n"), v2, v3);
  return v4;
}

void TTenuousComponentFont::TTenuousComponentFont(TTenuousComponentFont *this, const TTenuousComponentFont *a2, const __CFDictionary *a3)
{
  _QWORD *v6;
  void *v7;

  TComponentFont::TComponentFont(this, a2);
  *v6 = &off_1E15DDF90;
  v7 = (void *)atomic_load((unint64_t *)a2 + 95);
  *((_QWORD *)this + 95) = v7;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_WORD *)this + 396) = 256;
  *((_DWORD *)this + 199) = 0;
  *((_BYTE *)this + 800) = 0;
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 96, a3);
}

CGFloat TTenuousComponentFont::GetCapHeight(TTenuousComponentFont *this, const CGAffineTransform *a2)
{
  CGFont *InitializedGraphicsFont;
  int CapHeight;

  if ((*((_BYTE *)this + 713) & 0x20) != 0)
  {
    CapHeight = *((_DWORD *)this + 162);
  }
  else
  {
    InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
    CapHeight = CGFontGetCapHeight(InitializedGraphicsFont);
  }
  return a2->ty + a2->d * (double)CapHeight + a2->b * 0.0;
}

uint64_t TTenuousComponentFont::CharacterRangeCovered(TTenuousComponentFont *this, const unsigned __int16 *a2, uint64_t a3)
{
  const __CFCharacterSet *v6;
  _BOOL4 v7;
  uint64_t v9;

  v6 = (const __CFCharacterSet *)atomic_load((unint64_t *)this + 95);
  if (!v6)
    return TComponentFont::CharacterRangeCovered(this, a2, a3);
  v9 = 0;
  do
    v7 = IsCharCovered(v6, a2, a3, &v9);
  while (!v7 && v9 < a3);
  if (!v7)
    return 0;
  else
    return TComponentFont::CharacterRangeCovered(this, a2, a3);
}

uint64_t TTenuousComponentFont::GetUnicodeEncoding(TTenuousComponentFont *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this);
  if ((_DWORD)result)
    return TBaseFont::GetUnicodeEncoding(this);
  return result;
}

BOOL TTenuousComponentFont::GetOpticalPointSizes(TTenuousComponentFont *this, double *a2, double *a3)
{
  if ((*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 840))(this))
  {
    *a2 = *((double *)this + 75);
    *a3 = *((double *)this + 82);
    return 1;
  }
  else
  {
    return (*((_BYTE *)this + 712) & 0x80) == 0 && TBaseFont::GetOpticalPointSizes(this, a2, a3);
  }
}

uint64_t TSplicedFont::GetSymbolicTraitsInternal(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 160))(v2);
}

uint64_t TSplicedFont::CopyDesignLanguages(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 368))(v2);
}

uint64_t TSplicedFont::GetUnicodeEncoding(TSplicedFont *this)
{
  return 0;
}

uint64_t TSplicedFont::InvalidateTable(TSplicedFont *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v4 = atomic_load((unint64_t *)(v3 + 32));
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 488))(v4, a2);
}

uint64_t TSplicedFont::GetPhysicalSymbolicTraits(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 528))(v2);
}

unint64_t TSplicedFont::GetPresetFallbacksKey(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return atomic_load((unint64_t *)(v2 + 96));
}

uint64_t TSplicedFont::IsBaseVariation(TSplicedFont *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t TSplicedFont::GetGlyphsForCharacters(TSplicedFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v7 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v8 = atomic_load((unint64_t *)(v7 + 32));
  return (*(uint64_t (**)(unint64_t, const unsigned __int16 *, unsigned __int16 *, uint64_t))(*(_QWORD *)v8 + 664))(v8, a2, a3, a4);
}

BOOL TSplicedFont::IsValid(TSplicedFont *this)
{
  return *((_QWORD *)this + 76) != 0;
}

const __CFDictionary *TSplicedFont::GetTextStyle(TSplicedFont *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("NSCTFontUIUsageAttribute"));
  return result;
}

uint64_t TSplicedFont::HasExuberatedLineHeight(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 784))(v2);
}

uint64_t TSplicedFont::GetPhysicalTraitsValues(TSplicedFont *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(*((_QWORD *)this + 76) + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 800))(v2);
}

BOOL TSplicedFont::IsSystemUI(TSplicedFont *this)
{
  return TSplicedFontDict::IsSystemUISplice((TSplicedFont *)((char *)this + 600));
}

unint64_t TSplicedFont::GetSplicedDict(TSplicedFont *this)
{
  return atomic_load((unint64_t *)this + 75);
}

uint64_t TComponentFont::GetType(TComponentFont *this)
{
  return 1413695044;
}

uint64_t TComponentFont::MayHaveOverrides(TComponentFont *this)
{
  return 1;
}

uint64_t TComponentFont::Substantiate(TComponentFont *this)
{
  return 1;
}

void *__cdecl CTRunDelegateGetRefCon(void *runDelegate)
{
  __int128 v1;
  _OWORD v2[2];
  __int128 v3;

  if (runDelegate)
  {
    *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v2[1] = v1;
    v3 = v1;
    v2[0] = v1;
    TRunDelegate::TRunDelegate((TRunDelegate *)v2, runDelegate);
    return (void *)*((_QWORD *)&v3 + 1);
  }
  return runDelegate;
}

uint64_t TCFBase<TRunDelegate>::ClassDebug()
{
  return 0;
}

double TMetricsDelegateRun::UpdateWidth(TMetricsDelegateRun *this, TLine *a2, uint64_t a3, double a4)
{
  double v4;
  double *v8;
  double *v9;
  double v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  double *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  double *v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CFIndex ClusterRange;
  uint64_t v49;
  BOOL v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  CFIndex v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  TRun *v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 *v93;
  int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  double v98;
  _OWORD *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  double v111;
  double v112;
  char *v113;
  char *v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  TStorageRange *v135;
  double v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  void *Value;
  int v146[5];
  double v147;
  double v148;
  double v149;
  char *v150;
  char *v151;
  char *v152;
  _BYTE v153[720];
  _QWORD v154[3];
  CGSize v155;

  v154[1] = *MEMORY[0x1E0C80C00];
  v4 = 0.0;
  if (a2)
  {
    v8 = (double *)*((_QWORD *)this + 39);
    v9 = (double *)MEMORY[0x1E0C9D820];
    if (!v8)
      v8 = (double *)MEMORY[0x1E0C9D820];
    v10 = *((double *)this + 24) + *v8;
    v11 = (const __CFDictionary *)atomic_load((unint64_t *)this + 5);
    Value = (void *)CFDictionaryGetValue(v11, CFSTR("CTRunMetricsDelegate"));
    v12 = a3 + 1;
    v13 = 1;
    v14 = a3;
    if (a3 > 0)
    {
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v14 - 8) + 40);
        v16 = (const __CFDictionary *)atomic_load((unint64_t *)(v15 + 40));
        if (!objc_msgSend(Value, "isEqual:", CFDictionaryGetValue(v16, CFSTR("CTRunMetricsDelegate"))))
          break;
        if ((*((_WORD *)a2 + 76) & 8) != 0)
          return v4;
        ++v13;
        v17 = *(double **)(v15 + 312);
        if (!v17)
          v17 = v9;
        v18 = *(double *)(v15 + 192) + *v17;
        v10 = v10 + v18;
        a4 = a4 - v18;
        if (!--v14)
        {
          v13 = a3 + 1;
          break;
        }
      }
    }
    v19 = *((_QWORD *)a2 + 2);
    v20 = *((_QWORD *)a2 + 3) - v19;
    if (v12 < v20 >> 3)
    {
      v21 = v20 >> 3;
      v22 = v13 + ~a3 + (v20 >> 3);
      while (1)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v12) + 40);
        v24 = (const __CFDictionary *)atomic_load((unint64_t *)(v23 + 40));
        if (!objc_msgSend(Value, "isEqual:", CFDictionaryGetValue(v24, CFSTR("CTRunMetricsDelegate"))))
          break;
        if ((*((_WORD *)a2 + 76) & 8) == 0)
          return v4;
        ++v13;
        v25 = *(double **)(v23 + 312);
        if (!v25)
          v25 = v9;
        v26 = *(double *)(v23 + 192) + *v25;
        v10 = v10 + v26;
        a4 = a4 - v26;
        if (v21 == ++v12)
        {
          v13 = v22;
          break;
        }
      }
      v19 = *((_QWORD *)a2 + 2);
    }
    v27 = *(_QWORD **)(*(_QWORD *)(v19 + 8 * v14) + 40);
    v29 = v27[1];
    v28 = v27[2];
    v30 = (*(double (**)(_QWORD *))(*v27 + 56))(v27);
    v149 = v30;
    v31 = (*(double (**)(_QWORD *))(*v27 + 64))(v27);
    if (v13 >= 2)
    {
      v32 = v13 + v14;
      v33 = v14 + 1;
      do
      {
        v34 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v33) + 40);
        v35 = v34[1];
        v36 = v29 + v28;
        if (v35 < v29)
          v29 = v34[1];
        v37 = v34[2] + v35;
        if (v36 > v37)
          v37 = v36;
        v28 = v37 - v29;
        v38 = (*(double (**)(_QWORD))(*v34 + 56))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v33)
                                                                         + 40));
        if (v30 < v38)
          v30 = v38;
        v39 = (*(double (**)(_QWORD *))(*v34 + 64))(v34);
        if (v31 < v39)
          v31 = v39;
        ++v33;
      }
      while (v14 <= v33 && v32 > v33);
      v149 = v30;
    }
    v148 = v31;
    v40 = objc_msgSend(Value, "beginClusterModificationHandler");
    if (v40)
    {
      v41 = v40;
      v43 = *(_QWORD **)a2;
      v42 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      if (v28 < 1)
      {
        v46 = 0;
      }
      else
      {
        v46 = 0;
        v47 = v29;
        do
        {
          ClusterRange = TLine::GetClusterRange(a2, v43, v47, 2, 0, 0, 0);
          ++v46;
          v47 = ClusterRange + v49;
          v50 = v29 > ClusterRange + v49 || v28 + v29 <= v47;
        }
        while (!v50);
      }
      v144 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(v41 + 16))(v41, v46, v29, v28, v10, a4, v30, v31);
      if (v42)
      {
        v51 = (unint64_t *)&v42->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    else
    {
      v144 = 0;
    }
    v53 = objc_msgSend(Value, "clusterModificationHandler");
    if (v53)
    {
      v54 = v53;
      v55 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v143 = *(_QWORD **)a2;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v141 = v55;
      memset(v153, 170, sizeof(v153));
      v151 = 0;
      v152 = 0;
      v150 = 0;
      v154[0] = v153;
      if (v28 < 1)
      {
        v4 = 0.0;
      }
      else
      {
        v142 = v28 + v29;
        v4 = 0.0;
        v59 = v29;
        do
        {
          v147 = 0.0;
          memset(v146, 170, sizeof(v146));
          v60 = TLine::GetClusterRange(a2, v143, v59, 2, &v146[1], &v147, v146);
          v62 = v61;
          if (v146[0] <= 0)
            v63 = *(_QWORD *)&v146[1] + *(_QWORD *)&v146[3] - 1;
          else
            v63 = *(_QWORD *)&v146[1];
          v64 = *((_QWORD *)a2 + 2);
          v65 = *((_QWORD *)a2 + 3);
          if (v64 == v65)
          {
            v67 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v66 = 0;
            v67 = *((_QWORD *)a2 + 2);
            while (1)
            {
              v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v67 + 40) + 208) + v66;
              if (v68 > v63)
                break;
              v67 += 8;
              v66 = v68;
              if (v67 == v65)
              {
                v67 = *((_QWORD *)a2 + 3);
                goto LABEL_68;
              }
            }
            v63 -= v66;
          }
LABEL_68:
          v69 = (v67 - v64) >> 3;
          if (v69 >= (v65 - v64) >> 3)
            break;
          v70 = *(TRun **)(*(_QWORD *)(v64 + 8 * v69) + 48);
          v71 = (*(double (**)(TRun *))(*(_QWORD *)v70 + 56))(v70);
          v58.n128_f64[0] = (*(double (**)(TRun *))(*(_QWORD *)v70 + 64))(v70);
          v72 = v58.n128_f64[0];
          v73 = *(_QWORD *)&v146[3];
          if (v146[0] < 0)
          {
            if (v63 - *(_QWORD *)&v146[3] + 1 >= v63)
              v73 = 2 - *(_QWORD *)&v146[3];
            else
              v63 = v63 - *(_QWORD *)&v146[3] + 1;
          }
          v74 = *((_QWORD *)v70 + 26);
          v75 = v73 + v63;
          if (v73 + v63 >= v74)
            v76 = *((_QWORD *)v70 + 26);
          else
            v76 = v73 + v63;
          if (v63 < 0 || v63 >= v74)
          {
            v78 = v75 > 0 && v63 < 1;
            v63 = 0;
            if (v78)
              v77 = v76;
            else
              v77 = 0;
          }
          else
          {
            v77 = v76 - v63;
          }
          if (v77 >= 1)
          {
            v79 = v63;
            v80 = *(_QWORD *)(*((_QWORD *)v70 + 27) + 16);
            v81 = *((_QWORD *)v70 + 25);
            if (v74 >= v63)
              v82 = v63;
            else
              v82 = *((_QWORD *)v70 + 26);
            if (v82 < 1)
            {
              v82 = 0;
            }
            else
            {
              v83 = (__int16 *)(v80 + 2 * v81);
              v84 = *((_QWORD *)v70 + 33);
              v85 = v82;
              do
              {
                v87 = *v83++;
                v86 = v87;
                v88 = v84-- != 0;
                v89 = v88;
                if (v86 == -1)
                  v90 = v89;
                else
                  v90 = 0;
                v79 -= v90;
                --v85;
              }
              while (v85);
            }
            if (v74 >= v63 + v77)
              v74 = v63 + v77;
            v50 = v74 <= v82;
            v91 = v74 - v82;
            if (!v50)
            {
              v92 = *((_QWORD *)v70 + 33) - v82;
              v93 = (__int16 *)(v80 + 2 * v81 + 2 * v82);
              do
              {
                v95 = *v93++;
                v94 = v95;
                v88 = v92-- != 0;
                v96 = v88;
                if (v94 == -1)
                  v97 = v96;
                else
                  v97 = 0;
                v77 -= v97;
                --v91;
              }
              while (v91);
            }
            v58.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, CFIndex, uint64_t, _QWORD, uint64_t, double))(v54 + 16))(v54, v144, v60, v62, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v69), v79, v147);
            if (v58.n128_f64[0] != 0.0)
            {
              v98 = v58.n128_f64[0];
              v99 = v151;
              if (v151 >= v152)
              {
                v101 = 0xAAAAAAAAAAAAAAABLL * ((v151 - v150) >> 3);
                v102 = v101 + 1;
                if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((v152 - v150) >> 3) > v102)
                  v102 = 0x5555555555555556 * ((v152 - v150) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v152 - v150) >> 3) >= 0x555555555555555)
                  v103 = 0xAAAAAAAAAAAAAAALL;
                else
                  v103 = v102;
                if (v103)
                {
                  v104 = (char *)v154[0];
                  if (v154[0] + 24 * v103 <= (unint64_t)v154)
                  {
                    v154[0] += 24 * v103;
                  }
                  else
                  {
                    if (v103 > 0xAAAAAAAAAAAAAAALL)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v104 = (char *)operator new(24 * v103);
                  }
                }
                else
                {
                  v104 = 0;
                }
                v105 = &v104[24 * v101];
                v58 = *(__n128 *)&v146[1];
                *(_OWORD *)v105 = *(_OWORD *)&v146[1];
                *((double *)v105 + 2) = v98;
                v107 = v150;
                v106 = v151;
                v108 = v105;
                if (v151 != v150)
                {
                  do
                  {
                    v58 = *(__n128 *)(v106 - 24);
                    *((_QWORD *)v108 - 1) = *((_QWORD *)v106 - 1);
                    *(__n128 *)(v108 - 24) = v58;
                    v108 -= 24;
                    v106 -= 24;
                  }
                  while (v106 != v107);
                  v106 = v150;
                }
                v100 = v105 + 24;
                v150 = v108;
                v151 = v105 + 24;
                v109 = v152;
                v152 = &v104[24 * v103];
                if (v106)
                {
                  if (v153 <= v106 && v154 > (_QWORD *)v106)
                  {
                    if (v109 == (char *)v154[0])
                      v154[0] = v106;
                  }
                  else
                  {
                    operator delete(v106);
                  }
                }
              }
              else
              {
                v58 = *(__n128 *)&v146[1];
                *(_OWORD *)v151 = *(_OWORD *)&v146[1];
                *((double *)v99 + 2) = v98;
                v100 = (char *)v99 + 24;
              }
              v4 = v4 + v98;
              v151 = v100;
            }
            v111 = v149;
            if (v149 != v71 && v149 > 0.0)
              *(double *)(TRun::EnsureRareData(v70) + 32) = v111;
            v112 = v148;
            if (v148 != v72 && v148 > 0.0)
              *(double *)(TRun::EnsureRareData(v70) + 40) = v112;
            v59 = v60 + v62;
          }
        }
        while (v29 <= v59 && v142 > v59);
      }
      v114 = v150;
      v113 = v151;
      if (v150 != v151)
      {
        do
        {
          v115 = *(_QWORD *)v114;
          v116 = *((_WORD *)a2 + 76);
          if ((v116 & 8) == 0)
            v115 = v115 + *((_QWORD *)v114 + 1) - 1;
          v117 = *((_QWORD *)a2 + 2);
          v118 = *((_QWORD *)a2 + 3);
          if (v117 == v118)
          {
            v122 = 0xAAAAAAAAAAAAAAAALL;
            v120 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v119 = 0;
            v120 = *((_QWORD *)a2 + 2);
            while (1)
            {
              v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v120 + 40) + 208) + v119;
              if (v121 > v115)
                break;
              v120 += 8;
              v119 = v121;
              if (v120 == v118)
              {
                v122 = 0xAAAAAAAAAAAAAAAALL;
                v120 = *((_QWORD *)a2 + 3);
                goto LABEL_160;
              }
            }
            v122 = v115 - v119;
          }
LABEL_160:
          v123 = (v120 - v117) >> 3;
          if (v123 < (v118 - v117) >> 3)
          {
            v124 = *((double *)v114 + 2);
            v125 = *(_QWORD **)(*(_QWORD *)(v117 + 8 * v123) + 48);
            if ((v116 & 8) != 0)
            {
              while (1)
              {
                v129 = v122 - 1;
                if (v122 < 1)
                  break;
                v126 = (_QWORD *)v125[27];
                v127 = v125[25];
                v130 = *(_BYTE *)(v126[5] + 4 * v127 + 4 * v122-- - 4);
                if ((v130 & 0x20) == 0)
                {
LABEL_167:
                  v131 = v126[4];
                  if (v131 || (v134 = v126[3]) == 0)
                  {
                    v132 = v131 + 16 * v127 + 16 * v129;
                    v133 = *(_QWORD *)(v132 + 8);
                  }
                  else
                  {
                    v132 = v134 + 8 * v127 + 8 * v129;
                    v133 = 0;
                  }
                  v135 = (TStorageRange *)(v125 + 24);
                  v136 = v124 + *(double *)v132;
                  TStorageRange::SetAdvance((TStorageRange *)(v125 + 24), v129, *(CGSize *)(&v133 - 1));
                  TStorageRange::SetInterGlyphsExtraSpace(v135, v129, v124);
                  goto LABEL_173;
                }
              }
            }
            else
            {
              while (v122 + 1 >= 1)
              {
                v126 = (_QWORD *)v125[27];
                v127 = v125[25];
                v128 = *(_DWORD *)(v126[5] + 4 * v127 + 4 * v122--);
                if ((v128 & 0x20) == 0)
                {
                  v129 = v122 + 1;
                  goto LABEL_167;
                }
              }
            }
            v155.height = 0.0;
            v155.width = *((CGFloat *)v114 + 2);
            v58.n128_f64[0] = TRun::AdvanceInitialAdvance((TRun *)v125, v155);
          }
LABEL_173:
          v114 += 24;
        }
        while (v114 != v113);
        v114 = v150;
      }
      if (v114)
      {
        v151 = v114;
        if (v153 > v114 || v154 <= (_QWORD *)v114)
          operator delete(v114);
      }
      if (v141)
      {
        v137 = (unint64_t *)&v141->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v141->__on_zero_shared)(v141, v58);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
    }
    else
    {
      v4 = 0.0;
    }
    v139 = objc_msgSend(Value, "endClusterModificationHandler");
    if (v139)
      (*(void (**)(uint64_t, uint64_t))(v139 + 16))(v139, v144);
  }
  return v4;
}

double TDelegateRun::UpdateWidth(TDelegateRun *this, TLine *a2, double a3)
{
  TStorageRange *v3;
  uint64_t v4;
  double (*v5)(uint64_t, TLine *, double);
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t i;
  CGSize v14;

  v3 = (TDelegateRun *)((char *)this + 192);
  v4 = *((_QWORD *)this + 26);
  v5 = (double (*)(uint64_t, TLine *, double))*((_QWORD *)this + 45);
  v6 = 0.0;
  v7 = 0.0;
  if (v5)
  {
    v8 = *((_QWORD *)this + 41);
    v9 = *((_QWORD *)this + 46);
    if (v8 == 2)
      v5(v9, a2, a3);
    else
      v10 = v5(v9, a2, a3);
    v7 = v10;
  }
  v11 = v7 * (double)v4 - *(double *)v3;
  if (v11 != 0.0)
  {
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        v14.height = 0.0;
        v14.width = v7;
        TStorageRange::SetAdvance(v3, i, v14);
      }
    }
    return v11;
  }
  return v6;
}

void TMetricsDelegateRun::~TMetricsDelegateRun(void **this)
{
  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TMetricsDelegateRun::FindBreak@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t result;

  *(_OWORD *)a5 = xmmword_18494F928;
  *(_QWORD *)(a5 + 16) = -1;
  result = TRun::FindBreak(a1, a2, a3, a4, a5, a6);
  *(_BYTE *)a5 |= 8u;
  return result;
}

uint64_t TMetricsDelegateRun::CanUpdateWidth(TMetricsDelegateRun *this)
{
  return 1;
}

unint64_t TInstanceFont::GetPresetFallbacksKey(TInstanceFont *this)
{
  uint64_t ParserFont;
  uint64_t v4;
  const __CFDictionary *v5;
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  const __CFArray *v8;
  void *v9;
  void *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  unint64_t Count;
  __int128 v14;
  char *v15;
  __int128 v16;
  char *v17;
  const __CFDictionary *v18;
  __int128 v19;
  size_t v20;
  _OWORD *v21;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  uint64_t CopyWithVariation;
  const void *v29;
  id v31;
  id v32;
  uint64_t valuePtr;
  void *keys;
  void *v35;
  _OWORD *v36;
  _OWORD v37[30];
  _OWORD *v38;
  void **v39;
  void *v40;
  uint64_t v41;
  _OWORD v42[15];
  _OWORD *v43;
  void *values;
  void *v45;
  uint64_t v46;
  _OWORD v47[15];
  _OWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  atomic_load((unint64_t *)this + 79);
  ParserFont = CGFontGetParserFont();
  if (!ParserFont)
    return atomic_load((unint64_t *)this + 12);
  if (!atomic_load((unint64_t *)this + 75))
    return atomic_load((unint64_t *)this + 12);
  v4 = ParserFont;
  v5 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
  keys = &unk_1E1617128;
  values = (void *)CFDictionaryGetValue(v5, &unk_1E1617128);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  keys = v7;
  v8 = CFArrayCreate(v6, (const void **)&keys, 1, MEMORY[0x1E0C9B378]);
  v32 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TInstanceFont *))(*(_QWORD *)this + 120))(&v32, this);
  v31 = (id)0xAAAAAAAAAAAAAAAALL;
  v9 = (void *)atomic_load((unint64_t *)&v32);
  CreateClosestInstanceVariation(v8, v9, (unint64_t *)&v31);
  v10 = (void *)atomic_load((unint64_t *)&v31);
  v11 = v10;
  if (!v11)
  {

LABEL_9:
    v22 = 1;
    goto LABEL_21;
  }
  v12 = v11;
  Count = CFDictionaryGetCount(v11);

  if (!Count)
    goto LABEL_9;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[14] = v14;
  v47[13] = v14;
  v47[12] = v14;
  v47[11] = v14;
  v47[10] = v14;
  v47[9] = v14;
  v47[8] = v14;
  v47[7] = v14;
  v47[6] = v14;
  v47[5] = v14;
  v47[4] = v14;
  v47[3] = v14;
  v47[2] = v14;
  v47[1] = v14;
  v47[0] = v14;
  values = 0;
  v45 = 0;
  v46 = 0;
  v48 = v47;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, Count);
  v15 = (char *)v45;
  bzero(v45, 8 * Count);
  v45 = &v15[8 * Count];
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[14] = v16;
  v42[13] = v16;
  v42[12] = v16;
  v42[11] = v16;
  v42[10] = v16;
  v42[9] = v16;
  v42[8] = v16;
  v42[7] = v16;
  v42[6] = v16;
  v42[5] = v16;
  v42[4] = v16;
  v42[3] = v16;
  v42[2] = v16;
  v42[1] = v16;
  v42[0] = v16;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v43 = v42;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v39, Count);
  v17 = (char *)v40;
  bzero(v40, 8 * Count);
  v40 = &v17[8 * Count];
  v18 = (const __CFDictionary *)atomic_load((unint64_t *)&v31);
  CFDictionaryGetKeysAndValues(v18, (const void **)values, (const void **)v39);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[28] = v19;
  v37[29] = v19;
  v37[26] = v19;
  v37[27] = v19;
  v37[24] = v19;
  v37[25] = v19;
  v37[22] = v19;
  v37[23] = v19;
  v37[20] = v19;
  v37[21] = v19;
  v37[18] = v19;
  v37[19] = v19;
  v37[16] = v19;
  v37[17] = v19;
  v37[15] = v19;
  v37[14] = v19;
  v37[13] = v19;
  v37[12] = v19;
  v37[11] = v19;
  v37[10] = v19;
  v37[9] = v19;
  v37[8] = v19;
  v37[7] = v19;
  v37[6] = v19;
  v37[5] = v19;
  v37[4] = v19;
  v37[3] = v19;
  v37[2] = v19;
  v37[1] = v19;
  v37[0] = v19;
  keys = 0;
  v35 = 0;
  v36 = 0;
  v38 = v37;
  if (Count >> 60)
    abort();
  if (&v37[Count] <= (_OWORD *)&v38)
  {
    v38 = &v37[Count];
    v20 = 16 * Count;
    v21 = v37;
  }
  else
  {
    v20 = 16 * Count;
    v21 = operator new(16 * Count);
  }
  v23 = &v21[Count];
  keys = v21;
  v36 = v23;
  bzero(v21, v20);
  v24 = 0;
  v25 = 0;
  v35 = v23;
  do
  {
    v26 = (const __CFNumber *)*((_QWORD *)values + v25);
    LODWORD(valuePtr) = -1431655766;
    CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
    *(_DWORD *)((char *)keys + v24) = valuePtr;
    v27 = (const __CFNumber *)v39[v25];
    valuePtr = -1;
    CFNumberGetValue(v27, kCFNumberDoubleType, &valuePtr);
    *(_QWORD *)((char *)keys + v24 + 8) = valuePtr;
    ++v25;
    v24 += 16;
  }
  while (Count != v25);
  CopyWithVariation = FPFontCreateCopyWithVariation();
  if (CopyWithVariation)
  {
    v29 = (const void *)FPFontCopyPostScriptName();
    FPFontRelease();
    v4 = (uint64_t)CFAutorelease(v29);
  }
  if (keys)
  {
    v35 = keys;
    if (v37 > keys || &v38 <= keys)
      operator delete(keys);
  }
  keys = &v39;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&keys);
  keys = &values;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&keys);
  if (!CopyWithVariation)
    goto LABEL_9;
  v22 = 0;
LABEL_21:

  if (v22)
    return atomic_load((unint64_t *)this + 12);
  return v4;
}

void TInstanceFont::TInstanceFont(TInstanceFont *this, const TBaseFont *a2, const __CFDictionary *a3)
{
  uint64_t v6;
  CGFont *v7;
  const __CFDictionary *v8;
  CGFont *v9;
  const __CFArray *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  TBaseFont::TBaseFont(this, a2);
  *(_QWORD *)v6 = &off_1E15DCF58;
  *(_BYTE *)(v6 + 624) = 0;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_BYTE *)(v6 + 616) = 0;
  *(_OWORD *)(v6 + 632) = 0u;
  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  GetBaseCGFont(a2, a3, (unint64_t *)&v15);
  v7 = (CGFont *)atomic_load((unint64_t *)&v15);
  v8 = CGFontCopyVariations(v7);
  v9 = (CGFont *)atomic_load((unint64_t *)&v15);
  (*(void (**)(id *__return_ptr, const TBaseFont *))(*(_QWORD *)a2 + 120))(&v13, a2);
  v10 = (const __CFArray *)atomic_load((unint64_t *)&v13);
  CreateValidVariation(v10, a3, &v14);
  v11 = (void *)atomic_load((unint64_t *)&v14);
  TInstanceFont::InitWithVariation(this, v9, v8, v11);

  if ((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2) == 1414088260)
  {
    v12 = *((_QWORD *)a2 + 77);
    *((_BYTE *)this + 624) = *((_BYTE *)a2 + 624);
    *((_QWORD *)this + 77) = v12;
  }

}

void TInstanceFont::TInstanceFont(TInstanceFont *this, const TInstanceFont *a2)
{
  _QWORD *v4;
  unint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  TBaseFont::TBaseFont(this, a2);
  *v4 = &off_1E15DCF58;
  v5 = v4 + 75;
  v6 = (void *)atomic_load((unint64_t *)a2 + 75);
  *((_QWORD *)this + 75) = v6;
  v7 = (void *)atomic_load((unint64_t *)a2 + 76);
  *((_QWORD *)this + 76) = v7;
  *(_OWORD *)((char *)this + 616) = *(_OWORD *)((char *)a2 + 616);
  v8 = (void *)atomic_load((unint64_t *)a2 + 79);
  *((_QWORD *)this + 79) = v8;
  v9 = (void *)atomic_load((unint64_t *)a2 + 80);
  *((_QWORD *)this + 80) = v9;
  v10 = (void *)atomic_load((unint64_t *)a2 + 12);
  TCFRef<__CTFont const*>::Retain((unint64_t *)this + 12, v10);
  v11 = (void *)atomic_load(v5);
  v12 = v11;
  TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v12, CFSTR("NSCTFontVariationAttribute"));

}

void TInstanceFont::CopyLocalizedName(TInstanceFont *this@<X0>, const __CFString *a2@<X1>, CFArrayRef theArray@<X2>, const __CFString **a4@<X3>, unint64_t *a5@<X8>)
{
  const __CFAllocator *v11;
  const __CFString *v12;
  __CFString *v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id MutableCopy;
  id v20;

  if (CFSTR("CTFontFullName") != a2 && (!a2 || !CFSTR("CTFontFullName") || !CFEqual(a2, CFSTR("CTFontFullName"))))
    goto LABEL_13;
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyLocalizedName(this, CFSTR("CTFontFamilyName"), theArray, 0, (unint64_t *)&v20);
  if (!atomic_load((unint64_t *)&v20))
  {
LABEL_12:

LABEL_13:
    TBaseFont::CopyLocalizedName(this, a2, theArray, a4, a5);
    return;
  }
  MutableCopy = (id)0xAAAAAAAAAAAAAAAALL;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = (const __CFString *)atomic_load((unint64_t *)&v20);
  MutableCopy = CFStringCreateMutableCopy(v11, 0, v12);
  if (!atomic_load((unint64_t *)&MutableCopy))
  {

    goto LABEL_12;
  }
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TInstanceFont *, const __CFString *, CFArrayRef, _QWORD))(*(_QWORD *)this + 88))(&v18, this, CFSTR("CTFontSubFamilyName"), theArray, 0);
  if (atomic_load((unint64_t *)&v18))
  {
    v15 = (__CFString *)atomic_load((unint64_t *)&MutableCopy);
    v16 = atomic_load((unint64_t *)&v18);
    CFStringAppendFormat(v15, 0, CFSTR(" %@"), v16);
  }
  do
    v17 = __ldaxr((unint64_t *)&MutableCopy);
  while (__stlxr(0, (unint64_t *)&MutableCopy));
  *a5 = v17;

}

void TInstanceFont::CopyAttribute(TInstanceFont *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  unint64_t v8;
  void *v9;
  id v10;
  id v11;

  if (a2 == 61)
  {
    if (atomic_load((unint64_t *)this + 80))
    {
      v11 = (id)0xAAAAAAAAAAAAAAAALL;
      atomic_load((unint64_t *)this + 80);
      CreateVariationDictFromGraphicsFont(&v11);
      v6 = (const __CFDictionary *)atomic_load((unint64_t *)this + 75);
      v7 = (const __CFDictionary *)atomic_load((unint64_t *)&v11);
      CreateCodableVariationFromDefaultVariation(v6, v7, (unint64_t *)&v10);
      do
        v8 = __ldaxr((unint64_t *)&v10);
      while (__stlxr(0, (unint64_t *)&v10));
      *a3 = v8;

    }
    else
    {
      v9 = (void *)atomic_load((unint64_t *)this + 75);
      *a3 = (unint64_t)v9;
    }
  }
  else
  {
    TBaseFont::CopyAttribute(this, a2, a3);
  }
}

CFStringRef TInstanceFont::DebugDescription(TInstanceFont *this)
{
  void *v1;
  CFStringRef v2;
  id v4;

  (*(void (**)(id *__return_ptr))(*(_QWORD *)this + 200))(&v4);
  do
    v1 = (void *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("InstanceFont <url: %@>"), v1);
  return v2;
}

unint64_t TInstanceFont::GetGraphicsFontForNames(TInstanceFont *this)
{
  unint64_t result;

  result = atomic_load((unint64_t *)this + 80);
  if (!result)
    return atomic_load((unint64_t *)this + 79);
  return result;
}

const __CFDictionary *IsValueInRangeOfAxis(double a1, const __CFDictionary *result)
{
  const __CFDictionary *v2;
  double v3;
  const __CFNumber *Value;
  const __CFNumber *v5;

  if (result)
  {
    v2 = result;
    v3 = trunc(a1 * 10000.0) / 10000.0;
    Value = (const __CFNumber *)CFDictionaryGetValue(result, CFSTR("NSCTVariationAxisMinimumValue"));
    if (CFNumberCompare((CFNumberRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v3), Value, 0) == kCFCompareLessThan)
    {
      return 0;
    }
    else
    {
      v5 = (const __CFNumber *)CFDictionaryGetValue(v2, CFSTR("NSCTVariationAxisMaximumValue"));
      return (const __CFDictionary *)(CFNumberCompare((CFNumberRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v3), v5, 0) != kCFCompareGreaterThan);
    }
  }
  return result;
}

void CreateClosestInstanceVariation(const __CFArray *a1@<X1>, id a2@<X2>, unint64_t *a3@<X8>)
{
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  BOOL v10;
  CFIndex v11;
  uint64_t v12;
  const __CFDictionary *ValueAtIndex;
  CFIndex v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  const void **v20;
  const void **v21;
  double v22;
  double v23;
  const __CFNumber *v24;
  unint64_t v25;
  const __CFNumber *v26;
  int v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t *v33;
  CFAllocatorRef *v34;
  const __CFArray *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  double v39;
  const __CFDictionary *v40;
  const __CFNumber *Value;
  unsigned int v42;
  const __CFNumber *v43;
  id v44;
  const __CFNumber *v45;
  double v46;
  const __CFNumber *v47;
  uint64_t *v48;
  id v49;
  uint64_t *v50;
  unsigned int v51;
  double v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t *v56;
  double *v57;
  unsigned int v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t **v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t **v70;
  unsigned int v71;
  double *v72;
  double *v73;
  uint64_t *v74;
  void *v75;
  uint64_t *v76;
  double v77;
  double v78;
  int v79;
  BOOL v80;
  __CFDictionary *Mutable;
  __CFString *v82;
  const __CFAllocator *v83;
  CFURLRef v84;
  CFIndex v85;
  uint64_t *v86;
  unsigned int v87;
  double v88;
  const void *v89;
  const void *v90;
  uint64_t *v91;
  uint64_t **v92;
  unint64_t v93;
  const void **v94;
  const void **v95;
  const __CFDictionary *v96;
  CTFontDescriptorRef v97;
  const __CFArray *MatchingFontDescriptorsWithOptions;
  const __CFArray *v99;
  CFIndex v100;
  const __CTFontDescriptor *v101;
  const __CFDictionary *v102;
  uint64_t *v103;
  double v104;
  unsigned int v105;
  double v106;
  double v107;
  double v108;
  const void *v109;
  const __CFNumber *v110;
  uint64_t *v111;
  uint64_t **v112;
  double v113;
  unint64_t v114;
  void *v115;
  const __CFDictionary *v116;
  __CFDictionary *MutableCopy;
  uint64_t *v118;
  unsigned int v119;
  double v120;
  const void *v121;
  void *v122;
  const void *v123;
  const void *v124;
  uint64_t *v125;
  uint64_t **v126;
  unint64_t v127;
  const __CFDictionary *v128;
  const void **v129;
  const void **v130;
  const __CFURL *v131;
  unint64_t *v132;
  CFIndex capacity;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  void *context;
  int contexta;
  void *contextb;
  id v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  id v143;
  unint64_t valuePtr;
  id v145;
  void *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 *v163;
  id v164;
  void *v165;
  uint64_t v166;
  _OWORD v167[15];
  _OWORD *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v139 = (id)0xAAAAAAAAAAAAAAAALL;
  if (a2)
    v139 = a2;
  else
    CopyVariationAxes(&v139);
  if (!atomic_load((unint64_t *)&v139))
  {
    *a3 = 0;
    goto LABEL_168;
  }
  v7 = (const __CFArray *)atomic_load((unint64_t *)&v139);
  v143 = 0;
  Count = CFArrayGetCount(v7);
  v9 = CFArrayGetCount(a1);
  v10 = v9 > Count || v9 == 0;
  if (v10)
  {
    *a3 = 0;
    goto LABEL_167;
  }
  theArray = v7;
  v141 = 0;
  v142 = 0;
  v140 = (uint64_t *)&v141;
  v132 = a3;
  if (a1 && (context = (void *)CFArrayGetCount(a1)) != 0)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v11);
      v14 = CFDictionaryGetCount(ValueAtIndex);
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v167[13] = v15;
      v167[14] = v15;
      v167[11] = v15;
      v167[12] = v15;
      v167[9] = v15;
      v167[10] = v15;
      v167[7] = v15;
      v167[8] = v15;
      v167[5] = v15;
      v167[6] = v15;
      v167[3] = v15;
      v167[4] = v15;
      v167[1] = v15;
      v167[2] = v15;
      v167[0] = v15;
      *(double *)&v164 = 0.0;
      v165 = 0;
      v166 = 0;
      v168 = v167;
      if (v14)
      {
        v16 = v14;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v164, v14);
        v17 = (char *)v165;
        bzero(v165, 8 * v16);
        v165 = &v17[8 * v16];
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v161 = v18;
        v162 = v18;
        v159 = v18;
        v160 = v18;
        v157 = v18;
        v158 = v18;
        v155 = v18;
        v156 = v18;
        v153 = v18;
        v154 = v18;
        v151 = v18;
        v152 = v18;
        v149 = v18;
        v150 = v18;
        v148 = v18;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v163 = &v148;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v145, v16);
        v19 = (char *)v146;
        bzero(v146, 8 * v16);
        v146 = &v19[8 * v16];
        v20 = (const void **)v164;
        v21 = (const void **)v145;
      }
      else
      {
        v21 = 0;
        v20 = 0;
        v161 = v15;
        v162 = v15;
        v159 = v15;
        v160 = v15;
        v157 = v15;
        v158 = v15;
        v155 = v15;
        v156 = v15;
        v153 = v15;
        v154 = v15;
        v151 = v15;
        v152 = v15;
        v149 = v15;
        v150 = v15;
        v148 = v15;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v163 = &v148;
      }
      CFDictionaryGetKeysAndValues(ValueAtIndex, v20, v21);
      v22 = __exp10((double)v12);
      v23 = v22;
      v24 = *(const __CFNumber **)v145;
      if (*(_QWORD *)v145)
      {
        valuePtr = -1;
        CFNumberGetValue(v24, kCFNumberDoubleType, &valuePtr);
        v25 = valuePtr;
      }
      else
      {
        v23 = -v22;
        v25 = 0;
      }
      v26 = *(const __CFNumber **)v164;
      LODWORD(valuePtr) = -1431655766;
      CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
      v27 = valuePtr;
      v28 = v141;
      v29 = &v141;
      v30 = &v141;
      if (v141)
      {
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = *((_DWORD *)v28 + 8);
            if (v31 <= valuePtr)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_28;
          }
          if (v31 >= valuePtr)
            break;
          v28 = v30[1];
          if (!v28)
          {
            v29 = v30 + 1;
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        v32 = operator new(0x40uLL);
        v32[8] = v27;
        *((_QWORD *)v32 + 5) = v25;
        *((_QWORD *)v32 + 6) = 0;
        *((double *)v32 + 7) = v23;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v30;
        *v29 = (uint64_t *)v32;
        if (*v140)
        {
          v140 = (uint64_t *)*v140;
          v33 = *v29;
        }
        else
        {
          v33 = (uint64_t *)v32;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v141, v33);
        ++v142;
      }
      ++v12;
      valuePtr = (unint64_t)&v145;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
      v145 = &v164;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v145);
      ++v11;
    }
    while ((void *)v11 != context);
  }
  else
  {
    v12 = 1;
  }
  v34 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v35 = theArray;
  if (!theArray || (v36 = CFArrayGetCount(theArray)) == 0)
  {
LABEL_118:
    Mutable = CFDictionaryCreateMutable(*v34, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v86 = v140;
    if (v140 != (uint64_t *)&v141)
    {
      do
      {
        v87 = *((_DWORD *)v86 + 8);
        v88 = *((double *)v86 + 6);
        *(double *)&v164 = -3.72066208e-103;
        TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v164, v87);
        v145 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFNumber::TCFNumber<double>((unint64_t *)&v145, v88);
        v89 = (const void *)atomic_load((unint64_t *)&v164);
        v90 = (const void *)atomic_load((unint64_t *)&v145);
        CFDictionaryAddValue(Mutable, v89, v90);

        v91 = (uint64_t *)v86[1];
        if (v91)
        {
          do
          {
            v92 = (uint64_t **)v91;
            v91 = (uint64_t *)*v91;
          }
          while (v91);
        }
        else
        {
          do
          {
            v92 = (uint64_t **)v86[2];
            v10 = *v92 == v86;
            v86 = (uint64_t *)v92;
          }
          while (!v10);
        }
        v86 = (uint64_t *)v92;
      }
      while (v92 != &v141);
    }
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v143, Mutable);
    do
      v93 = __ldaxr((unint64_t *)&v143);
    while (__stlxr(0, (unint64_t *)&v143));
    *v132 = v93;
    goto LABEL_166;
  }
  v37 = v36;
  contexta = 0;
  v38 = 0;
  v39 = 0.0;
  do
  {
    v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, v38);
    Value = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("NSCTVariationAxisIdentifier"));
    LODWORD(v164) = -1431655766;
    CFNumberGetValue(Value, kCFNumberIntType, &v164);
    v42 = v164;
    v43 = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("NSCTVariationAxisDefaultValue"));
    *(double *)&v164 = NAN;
    CFNumberGetValue(v43, kCFNumberDoubleType, &v164);
    v44 = v164;
    v45 = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("NSCTVariationAxisMinimumValue"));
    *(double *)&v164 = NAN;
    CFNumberGetValue(v45, kCFNumberDoubleType, &v164);
    v46 = *(double *)&v164;
    v47 = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("NSCTVariationAxisMaximumValue"));
    *(double *)&v164 = NAN;
    CFNumberGetValue(v47, kCFNumberDoubleType, &v164);
    v48 = v141;
    if (!v141)
    {
LABEL_44:
      v52 = __exp10((double)v12++);
LABEL_45:
      v46 = *(double *)&v44;
      goto LABEL_46;
    }
    v49 = v164;
    v50 = v141;
    while (1)
    {
      v51 = *((_DWORD *)v50 + 8);
      if (v42 >= v51)
        break;
LABEL_43:
      v50 = (uint64_t *)*v50;
      if (!v50)
        goto LABEL_44;
    }
    if (v51 < v42)
    {
      ++v50;
      goto LABEL_43;
    }
    do
    {
      while (1)
      {
        v65 = v48;
        v66 = *((_DWORD *)v48 + 8);
        if (v66 <= v42)
          break;
        v48 = (uint64_t *)*v65;
        if (!*v65)
        {
          v67 = (uint64_t **)v65;
          goto LABEL_99;
        }
      }
      if (v66 >= v42)
      {
        v75 = v65;
        goto LABEL_102;
      }
      v48 = (uint64_t *)v65[1];
    }
    while (v48);
    v67 = (uint64_t **)(v65 + 1);
LABEL_99:
    v75 = operator new(0x40uLL);
    *((_DWORD *)v75 + 8) = v42;
    *((_QWORD *)v75 + 6) = 0;
    *((_QWORD *)v75 + 7) = 0;
    *((_QWORD *)v75 + 5) = 0;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v65;
    *v67 = (uint64_t *)v75;
    v76 = (uint64_t *)v75;
    if (*v140)
    {
      v140 = (uint64_t *)*v140;
      v76 = *v67;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v141, v76);
    ++v142;
    v35 = theArray;
LABEL_102:
    v52 = *((double *)v75 + 7);
    if (v52 <= 0.0)
    {
      v52 = -v52;
      goto LABEL_45;
    }
    v77 = *((double *)v75 + 5);
    if (*(double *)&v49 >= v77)
      v78 = *((double *)v75 + 5);
    else
      v78 = *(double *)&v49;
    if (v77 >= v46)
      v46 = v78;
    v79 = contexta;
    if (contexta)
      v80 = 1;
    else
      v80 = v46 == *(double *)&v44;
    if (!v80)
      v79 = 1;
    contexta = v79;
LABEL_46:
    v53 = v141;
    if (!v141)
    {
      v61 = &v141;
      if (v140 == (uint64_t *)&v141)
      {
        v60 = 0;
        v61 = &v141;
        v64 = &v141;
        goto LABEL_84;
      }
      goto LABEL_67;
    }
    v54 = &v141;
    v55 = v141;
    do
    {
      v56 = v55;
      v57 = (double *)v54;
      v58 = *((_DWORD *)v55 + 8);
      v59 = (uint64_t **)(v55 + 1);
      if (v58 >= v42)
      {
        v59 = (uint64_t **)v56;
        v54 = (uint64_t **)v56;
      }
      v55 = *v59;
    }
    while (v55);
    v60 = v141;
    v61 = &v141;
    if (v54 == &v141)
    {
LABEL_57:
      if (v140 == (uint64_t *)v61)
      {
        v64 = v61;
        goto LABEL_84;
      }
      v63 = v60;
      if (v60)
      {
        do
        {
          v64 = (uint64_t **)v63;
          v63 = (uint64_t *)v63[1];
        }
        while (v63);
        goto LABEL_70;
      }
LABEL_67:
      v64 = v61;
      do
      {
        v68 = (uint64_t *)v64;
        v64 = (uint64_t **)v64[2];
      }
      while (*v64 == v68);
      v60 = 0;
LABEL_70:
      if (*((_DWORD *)v64 + 8) >= v42)
      {
        v69 = &v141;
        v70 = &v141;
        if (v141)
        {
          while (1)
          {
            while (1)
            {
              v70 = (uint64_t **)v53;
              v71 = *((_DWORD *)v53 + 8);
              if (v71 <= v42)
                break;
              v53 = *v70;
              v69 = v70;
              if (!*v70)
                goto LABEL_91;
            }
            if (v71 >= v42)
              goto LABEL_95;
            v53 = v70[1];
            if (!v53)
            {
              v69 = v70 + 1;
              break;
            }
          }
        }
LABEL_91:
        v73 = (double *)operator new(0x40uLL);
        *((_DWORD *)v73 + 8) = v42;
        v73[5] = v46;
        v73[6] = *(double *)&v44;
        v73[7] = v52;
        *v73 = 0.0;
        v73[1] = 0.0;
        *((_QWORD *)v73 + 2) = v70;
        *v69 = (uint64_t *)v73;
        if (*v140)
        {
          v140 = (uint64_t *)*v140;
          v74 = *v69;
        }
        else
        {
          v74 = (uint64_t *)v73;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v141, v74);
        ++v142;
        goto LABEL_95;
      }
LABEL_84:
      if (v60)
        v70 = v64;
      else
        v70 = v61;
      if (v60)
        v69 = v64 + 1;
      else
        v69 = v61;
      if (*v69)
        goto LABEL_95;
      goto LABEL_91;
    }
    if (v58 >= v42)
      v62 = v56;
    else
      v62 = v57;
    if (v62[8] > v42)
    {
      v60 = *v54;
      v61 = v54;
      goto LABEL_57;
    }
    if (v58 >= v42)
      v72 = (double *)v56;
    else
      v72 = v57;
    v72[5] = v46;
    v72[6] = *(double *)&v44;
    v72[7] = v52;
LABEL_95:
    v39 = v39 + v52 * v46 * (v52 * v46);
    ++v38;
  }
  while (v38 != v37);
  v34 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!contexta)
    goto LABEL_118;
  CGFontGetParserFont();
  Mutable = (__CFDictionary *)FPFontCopyFamilyName();
  v82 = (__CFString *)FPFontCopyPath();
  v83 = *v34;
  if (v82)
  {
    v84 = CFURLCreateWithFileSystemPath(*v34, v82, kCFURLPOSIXPathStyle, 0);
    v85 = 2;
  }
  else
  {
    v84 = 0;
    v85 = 1;
  }
  v94 = (const void **)operator new(0x10uLL);
  *v94 = CFSTR("NSFontFamilyAttribute");
  v94[1] = CFSTR("NSCTFontFileURLAttribute");
  v95 = (const void **)operator new(0x10uLL);
  *v95 = Mutable;
  v95[1] = v84;
  v96 = CFDictionaryCreate(v83, v94, v95, v85, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v97 = CTFontDescriptorCreateWithAttributes(v96);
  MatchingFontDescriptorsWithOptions = (const __CFArray *)CTFontDescriptorCreateMatchingFontDescriptorsWithOptions((uint64_t)v97, 0, 1024);
  v99 = MatchingFontDescriptorsWithOptions;
  if (MatchingFontDescriptorsWithOptions)
  {
    v128 = v96;
    v129 = v95;
    v130 = v94;
    v131 = v84;
    v145 = 0;
    theArraya = (CFArrayRef)CFArrayGetCount(MatchingFontDescriptorsWithOptions);
    if (theArraya)
    {
      v100 = 0;
      capacity = (CFIndex)v99;
      while (1)
      {
        v101 = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v99, v100);
        contextb = (void *)MEMORY[0x186DC070C](v101);
        *(double *)&v164 = COERCE_DOUBLE(CTFontDescriptorCopyAttribute(v101, CFSTR("NSCTFontVariationAttribute")));
        do
          v102 = (const __CFDictionary *)__ldaxr((unint64_t *)&v164);
        while (__stlxr(0, (unint64_t *)&v164));

        v103 = v140;
        v104 = 0.0;
        if (v140 != (uint64_t *)&v141)
        {
          do
          {
            v105 = *((_DWORD *)v103 + 8);
            v106 = *((double *)v103 + 5);
            v107 = *((double *)v103 + 6);
            v108 = *((double *)v103 + 7);
            valuePtr = 0xAAAAAAAAAAAAAAAALL;
            TCFNumber::TCFNumber<unsigned int>(&valuePtr, v105);
            v109 = (const void *)atomic_load(&valuePtr);
            v110 = (const __CFNumber *)CFDictionaryGetValue(v102, v109);
            if (v110)
            {
              *(double *)&v164 = NAN;
              CFNumberGetValue(v110, kCFNumberDoubleType, &v164);
              v107 = *(double *)&v164;
            }

            v111 = (uint64_t *)v103[1];
            if (v111)
            {
              do
              {
                v112 = (uint64_t **)v111;
                v111 = (uint64_t *)*v111;
              }
              while (v111);
            }
            else
            {
              do
              {
                v112 = (uint64_t **)v103[2];
                v10 = *v112 == v103;
                v103 = (uint64_t *)v112;
              }
              while (!v10);
            }
            v104 = v104 + v108 * (v106 - v107) * (v108 * (v106 - v107));
            v103 = (uint64_t *)v112;
          }
          while (v112 != &v141);
        }
        v113 = sqrt(v104);
        if (v113 < v39)
        {
          *(double *)&v164 = COERCE_DOUBLE(v102);
          do
            v114 = __ldaxr((unint64_t *)&v164);
          while (__stlxr(0, (unint64_t *)&v164));
          do
            v115 = (void *)__ldaxr((unint64_t *)&v145);
          while (__stlxr(v114, (unint64_t *)&v145));

          v39 = v113;
          if (v113 == 0.0)
            break;
        }

        objc_autoreleasePoolPop(contextb);
        ++v100;
        v99 = (const __CFArray *)capacity;
        if ((CFArrayRef)v100 == theArraya)
          goto LABEL_151;
      }

      objc_autoreleasePoolPop(contextb);
      v99 = (const __CFArray *)capacity;
    }
LABEL_151:
    v116 = (const __CFDictionary *)atomic_load((unint64_t *)&v145);
    if (v116)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(v83, 0, v116);
      v118 = v140;
      if (v140 != (uint64_t *)&v141)
      {
        do
        {
          v119 = *((_DWORD *)v118 + 8);
          v120 = *((double *)v118 + 6);
          *(double *)&v164 = -3.72066208e-103;
          TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v164, v119);
          valuePtr = 0xAAAAAAAAAAAAAAAALL;
          TCFNumber::TCFNumber<double>(&valuePtr, v120);
          v121 = (const void *)atomic_load((unint64_t *)&v164);
          v122 = (void *)CFDictionaryGetValue(v116, v121);
          if (v122)
            TCFRef<__CTFont const*>::Retain(&valuePtr, v122);
          v123 = (const void *)atomic_load((unint64_t *)&v164);
          v124 = (const void *)atomic_load(&valuePtr);
          CFDictionaryAddValue(MutableCopy, v123, v124);

          v125 = (uint64_t *)v118[1];
          if (v125)
          {
            do
            {
              v126 = (uint64_t **)v125;
              v125 = (uint64_t *)*v125;
            }
            while (v125);
          }
          else
          {
            do
            {
              v126 = (uint64_t **)v118[2];
              v10 = *v126 == v118;
              v118 = (uint64_t *)v126;
            }
            while (!v10);
          }
          v118 = (uint64_t *)v126;
        }
        while (v126 != &v141);
      }
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v143, MutableCopy);

    }
    v84 = v131;
    v95 = v129;
    v94 = v130;
    v96 = v128;
  }

  do
    v127 = __ldaxr((unint64_t *)&v143);
  while (__stlxr(0, (unint64_t *)&v143));
  *v132 = v127;

  operator delete(v95);
  operator delete(v94);

LABEL_166:
  std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(v141);
LABEL_167:

LABEL_168:
}

void CreateCodableVariationFromDefaultVariation(const __CFDictionary *a1@<X0>, const __CFDictionary *a2@<X1>, unint64_t *a3@<X8>)
{
  CFIndex Count;
  __int128 v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  const void *Value;
  void **v14;
  const void *v15;
  BOOL v16;
  const void *v17;
  __CFDictionary *v18;
  const __CFDictionary *v19;
  unint64_t v20;
  id Mutable;
  void ***p_values;
  void **values;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  void **keys;
  void *v43;
  uint64_t v44;
  _OWORD v45[15];
  _OWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Count = CFDictionaryGetCount(a1);
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v45[14] = v7;
      v45[13] = v7;
      v45[12] = v7;
      v45[11] = v7;
      v45[10] = v7;
      v45[9] = v7;
      v45[8] = v7;
      v45[7] = v7;
      v45[6] = v7;
      v45[5] = v7;
      v45[4] = v7;
      v45[3] = v7;
      v45[2] = v7;
      v45[1] = v7;
      v45[0] = v7;
      keys = 0;
      v43 = 0;
      v44 = 0;
      v46 = v45;
      if (Count)
      {
        v8 = Count;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&keys, Count);
        v9 = (char *)v43;
        bzero(v43, 8 * v8);
        v43 = &v9[8 * v8];
        *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40 = v10;
        v39 = v10;
        v38 = v10;
        v37 = v10;
        v36 = v10;
        v35 = v10;
        v34 = v10;
        v33 = v10;
        v32 = v10;
        v30 = v10;
        v31 = v10;
        v28 = v10;
        v29 = v10;
        v26 = v10;
        v27 = v10;
        v24 = 0;
        v25 = 0;
        values = 0;
        v41 = &v26;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v8);
        v11 = (char *)v24;
        bzero(v24, 8 * v8);
        v24 = &v11[8 * v8];
        CFDictionaryGetKeysAndValues(a1, (const void **)keys, (const void **)values);
        v12 = 0;
        while (1)
        {
          if (CFEqual(keys[v12], &unk_1E1617158))
            goto LABEL_14;
          Value = CFDictionaryGetValue(a2, keys[v12]);
          v14 = values;
          v15 = values[v12];
          if (Value == v15)
            goto LABEL_14;
          if (Value)
            v16 = v15 == 0;
          else
            v16 = 1;
          if (v16)
            goto LABEL_13;
          if (!CFEqual(Value, v15))
            break;
LABEL_14:
          if (v8 == ++v12)
            goto LABEL_19;
        }
        v14 = values;
LABEL_13:
        v17 = keys[v12];
        v18 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        CFDictionarySetValue(v18, v17, v14[v12]);
        goto LABEL_14;
      }
      v40 = v7;
      v39 = v7;
      v38 = v7;
      v37 = v7;
      v36 = v7;
      v35 = v7;
      v34 = v7;
      v33 = v7;
      v32 = v7;
      v30 = v7;
      v31 = v7;
      v28 = v7;
      v29 = v7;
      v26 = v7;
      v27 = v7;
      v24 = 0;
      v25 = 0;
      values = 0;
      v41 = &v26;
      CFDictionaryGetKeysAndValues(a1, 0, 0);
LABEL_19:
      v19 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
      if (CFDictionaryGetCount(v19))
      {
        do
          v20 = __ldaxr((unint64_t *)&Mutable);
        while (__stlxr(0, (unint64_t *)&Mutable));
      }
      else
      {
        v20 = 0;
      }
      *a3 = v20;
      p_values = &values;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_values);
      values = (void **)&keys;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);

    }
    else
    {
      *a3 = (unint64_t)a1;
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TLCARTable::GetLigatureCaretPositions(TLCARTable *this, uint64_t a2, __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t result;
  __int128 v12;
  SFNTLookupTable *v13;
  uint64_t (*v14)(TAATLookupTable *, unsigned __int16, unint64_t *);
  TAATLookupTable *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t (*v21)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  v5 = *(_DWORD **)this;
  if (**(_DWORD **)this != 256)
    return 0;
  v6 = bswap32(*((unsigned __int16 *)v5 + 2)) >> 16;
  if (v6 > 1)
    return 0;
  if (a5)
    *a5 = v6;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v12;
  v24 = v12;
  v13 = (SFNTLookupTable *)*((_QWORD *)this + 1);
  v21 = TAATLookupTable::BadTable;
  v22 = 0;
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0xAAAAAAAAAAAAFFFFLL;
  TAATLookupTable::SetTable((uint64_t)&v21, (const SFNTLookupTable *)((char *)v5 + 6), v13);
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v14 = v21;
  v15 = (TAATLookupTable *)((char *)&v21 + (v22 >> 1));
  if ((v22 & 1) != 0)
    v14 = *(uint64_t (**)(TAATLookupTable *, unsigned __int16, unint64_t *))(*(_QWORD *)v15
                                                                                            + v21);
  result = v14(v15, a2, &v26);
  if (result)
  {
    v16 = (unsigned __int16 *)(*(_QWORD *)this + (bswap32(*(unsigned __int16 *)result) >> 16));
    v17 = bswap32(*v16);
    result = HIWORD(v17);
    if (result >= a4)
      v18 = a4;
    else
      v18 = HIWORD(v17);
    if (v18 >= 1)
    {
      v19 = v16 + 1;
      do
      {
        v20 = *v19++;
        *a3++ = bswap32(v20) >> 16;
        --v18;
      }
      while (v18);
      return bswap32(*v16) >> 16;
    }
  }
  return result;
}

unsigned __int16 *TLCARTable::GetLigatureCaretCount(TLCARTable *this, uint64_t a2)
{
  _DWORD *v2;
  unsigned __int16 *result;
  __int128 v6;
  SFNTLookupTable *v7;
  uint64_t (*v8)(TAATLookupTable *, unsigned __int16, unint64_t *);
  TAATLookupTable *v9;
  uint64_t (*v10)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(_DWORD **)this;
  if (**(_DWORD **)this != 256 || bswap32(*((unsigned __int16 *)v2 + 2)) >> 16 > 1)
    return 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  v13 = v6;
  v7 = (SFNTLookupTable *)*((_QWORD *)this + 1);
  v10 = TAATLookupTable::BadTable;
  v11 = 0;
  *((_QWORD *)&v13 + 1) = 0;
  v14 = 0xAAAAAAAAAAAAFFFFLL;
  TAATLookupTable::SetTable((uint64_t)&v10, (const SFNTLookupTable *)((char *)v2 + 6), v7);
  v15 = 0xAAAAAAAAAAAAAAAALL;
  v8 = v10;
  v9 = (TAATLookupTable *)((char *)&v10 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v8 = *(uint64_t (**)(TAATLookupTable *, unsigned __int16, unint64_t *))(*(_QWORD *)v9
                                                                                           + v10);
  result = (unsigned __int16 *)v8(v9, a2, &v15);
  if (result)
    return (unsigned __int16 *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)this + (bswap32(*result) >> 16))) >> 16);
  return result;
}

void LayerRecordsForGlyph(const __CFData *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  const UInt8 *BytePtr;
  const UInt8 *v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unsigned __int16 *v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  const UInt8 *v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const UInt8 *v36;
  int v38;
  int v39;
  unint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  const UInt8 *v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  const UInt8 *v52;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!a1)
    return;
  BytePtr = CFDataGetBytePtr(a1);
  v7 = CFDataGetBytePtr(a1);
  if (!v7)
    return;
  v8 = (unint64_t)&v7[CFDataGetLength(a1)];
  if ((unint64_t)(BytePtr + 14) > v8)
    return;
  v9 = (unsigned __int16 *)&BytePtr[bswap32(*((_DWORD *)BytePtr + 1))];
  v10 = *((unsigned __int16 *)BytePtr + 1);
  v11 = __rev16(v10);
  v12 = (unint64_t)&v9[3 * v11];
  if (v12 < (unint64_t)v9 || v12 > v8)
  {
    if ((unint64_t)(v9 + 3) > v8)
      v14 = 0;
    else
      v14 = (v8 - (unint64_t)v9) / 6;
    if (v14 != v11 || v10 == 0)
      return;
  }
  else if (!*((_WORD *)BytePtr + 1))
  {
    return;
  }
  v16 = &v9[3 * v11];
  while (1)
  {
    v17 = v11 >> 1;
    v18 = &v9[3 * (v11 >> 1)];
    v19 = bswap32(*v18) >> 16;
    if (v19 >= a2)
      break;
    v9 = v18 + 3;
    v17 = v11 + ~v17;
LABEL_22:
    v11 = v17;
    if (!v17)
      return;
  }
  if (v19 > a2)
  {
    v16 = &v9[3 * (v11 >> 1)];
    goto LABEL_22;
  }
  v20 = &v9[3 * (v11 >> 1)];
  if (v11 >= 2)
  {
    v20 = v9;
    do
    {
      v21 = v17 >> 1;
      v22 = &v20[3 * (v17 >> 1)];
      v24 = *v22;
      v23 = v22 + 3;
      v17 += ~(v17 >> 1);
      if (bswap32(v24) >> 16 >= a2)
        v17 = v21;
      else
        v20 = v23;
    }
    while (v17);
  }
  if (v16 != v18 + 3)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v16 - (v18 + 3));
    v16 = v18 + 3;
    do
    {
      v26 = v25 >> 1;
      v27 = &v16[3 * (v25 >> 1)];
      v29 = *v27;
      v28 = v27 + 3;
      v25 += ~(v25 >> 1);
      if (bswap32(v29) >> 16 > a2)
        v25 = v26;
      else
        v16 = v28;
    }
    while (v25);
  }
  if (v20 != v16 && v20[2])
  {
    v30 = &BytePtr[bswap32(*((_DWORD *)BytePtr + 2))];
    v31 = __rev16(v20[2]);
    v32 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v31);
    *a3 = v32;
    a3[1] = v32;
    a3[2] = &v32[v33];
    v34 = bswap32(v20[1]) >> 16;
    v35 = v34 + v31;
    v52 = BytePtr;
    do
    {
      v36 = &v30[4 * v34];
      if (BytePtr > v36 || (unint64_t)(v36 + 4) > v8)
        break;
      v38 = *(unsigned __int16 *)v36;
      v39 = *((unsigned __int16 *)v36 + 1);
      v40 = a3[2];
      if ((unint64_t)v32 >= v40)
      {
        v42 = v8;
        v43 = v30;
        v44 = (_DWORD *)*a3;
        v45 = ((uint64_t)v32 - *a3) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
          abort();
        v47 = v40 - (_QWORD)v44;
        if (v47 >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
          v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v48);
        else
          v49 = 0;
        v50 = (_DWORD *)(v48 + 4 * v45);
        *v50 = bswap32(v39 | (v38 << 16));
        v41 = v50 + 1;
        v30 = v43;
        if (v32 != v44)
        {
          do
          {
            v51 = *--v32;
            *--v50 = v51;
          }
          while (v32 != v44);
          v32 = (_DWORD *)*a3;
        }
        *a3 = v50;
        a3[1] = v41;
        a3[2] = v48 + 4 * v49;
        v8 = v42;
        if (v32)
          operator delete(v32);
        BytePtr = v52;
      }
      else
      {
        *v32 = bswap32(v39 | (v38 << 16));
        v41 = v32 + 1;
      }
      a3[1] = v41;
      ++v34;
      v32 = v41;
    }
    while (v34 < v35);
  }
}

const __CFData *EnumerateGlyphsWithLayerRecords(const __CFData *result, uint64_t a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  const __CFData *v5;
  unint64_t v6;
  uint64_t v7;
  const UInt8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  const UInt8 *v13;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      BytePtr = CFDataGetBytePtr(result);
      result = (const __CFData *)CFDataGetBytePtr(v3);
      if (result)
      {
        v5 = result;
        result = (const __CFData *)CFDataGetLength(v3);
        v6 = (unint64_t)result + (_QWORD)v5;
        if (BytePtr + 14 <= (const UInt8 *)result + (unint64_t)v5)
        {
          v7 = bswap32(*((_DWORD *)BytePtr + 1));
          v8 = &BytePtr[v7];
          v9 = __rev16(*((unsigned __int16 *)BytePtr + 1));
          v10 = (unint64_t)&BytePtr[6 * v9 + v7];
          if (v10 < (unint64_t)&BytePtr[v7] || v10 > v6)
          {
            if ((unint64_t)(v8 + 6) > v6)
            {
              v12 = 0;
              if (!*((_WORD *)BytePtr + 1))
                return result;
            }
            else
            {
              v12 = (v6 - (unint64_t)v8) / 6;
              if (!*((_WORD *)BytePtr + 1))
                return result;
            }
            if (v12 != v9)
              return result;
          }
          else if (!*((_WORD *)BytePtr + 1))
          {
            return result;
          }
          v13 = &BytePtr[v7 + 4];
          do
          {
            if (*(_WORD *)v13)
              result = (const __CFData *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a2, bswap32(*((unsigned __int16 *)v13 - 2)) >> 16, 1);
            v13 += 6;
            --v9;
          }
          while (v9);
        }
      }
    }
  }
  return result;
}

void TSampleManagerImp::CopySampleLettersSpanningCharacterSet(const __CFArray *a1, unint64_t *a2, unsigned int a3, uint64_t a4, void *key)
{
  const __CFCharacterSet *v7;
  id v8;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  TSampleManagerImp::CopySampleLettersForLanguage(key, a2, a3, (unint64_t *)&v8);
  v7 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v8);
  SampleLettersSpanningCharacterSet(a1, v7, a4);

}

void TSampleManagerImp::CopySampleLettersForLanguage(void *key@<X2>, unint64_t *a2@<X0>, unsigned int a3@<W1>, unint64_t *a4@<X8>)
{
  void *ValueAtIndex;
  void *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFDictionary *v10;
  __int128 v11;
  CFIndex Count;
  char *v13;
  const __CFAllocator *v14;
  const CFArrayCallBacks *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  CFArrayRef v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex v21;
  __CFString *v22;
  __CFString *v23;
  void *Value;
  unint64_t v25;
  const void *v26;
  void *v27;
  unint64_t v28;
  _DWORD v29[2];
  void *v30;
  void *values;
  id v32;
  void *v33;
  uint64_t v34;
  _OWORD v35[15];
  _OWORD *v36;
  uint64_t v37;

  ValueAtIndex = key;
  v37 = *MEMORY[0x1E0C80C00];
  v29[1] = -1431655766;
  v30 = key;
  v29[0] = a3;
  if (!key)
  {
    v7 = (void *)atomic_load(a2);
    v8 = v7;
    v9 = v8;
    if (v8)
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v8, 0);
    else
      ValueAtIndex = 0;

  }
  if (a3 > 2 || (v10 = (const __CFDictionary *)*off_1E15E81F8[a3]) == 0)
  {
    *a4 = 0;
    return;
  }
  if (!_MergedGlobals_29
    || CFDictionaryContainsKey(v10, ValueAtIndex)
    || !CFDictionaryContainsKey((CFDictionaryRef)_MergedGlobals_29, ValueAtIndex))
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v35[14] = v11;
    v35[13] = v11;
    v35[12] = v11;
    v35[11] = v11;
    v35[10] = v11;
    v35[9] = v11;
    v35[8] = v11;
    v35[7] = v11;
    v35[6] = v11;
    v35[5] = v11;
    v35[3] = v11;
    v35[4] = v11;
    v35[1] = v11;
    v35[2] = v11;
    v35[0] = v11;
    Count = CFDictionaryGetCount(v10);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v36 = v35;
    std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v32, Count + 1);
    v13 = (char *)v33;
    bzero(v33, 8 * Count + 8);
    v33 = &v13[8 * Count + 8];
    *(_QWORD *)v32 = CFSTR("zxx");
    CFDictionaryGetKeysAndValues(v10, (const void **)v32 + 1, 0);
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v32, ((_BYTE *)v33 - (_BYTE *)v32) >> 3, MEMORY[0x1E0C9B378]);
    values = ValueAtIndex;
    v17 = CFArrayCreate(v14, (const void **)&values, 1, v15);
    v18 = CFBundleCopyLocalizationsForPreferences(v16, v17);
    v19 = v18;
    if (v19)
    {
      v20 = v19;
      v21 = CFArrayGetCount(v19);

      if (v21)
      {
        v22 = (__CFString *)CFArrayGetValueAtIndex(v18, 0);
        if (v22 != CFSTR("zxx"))
        {
          v23 = v22;
          if (!v22 || !CFEqual(v22, CFSTR("zxx")))
          {
            Value = (void *)CFDictionaryGetValue(v10, v23);
            TSampleManagerImp::CopySampleLettersForLanguage(CTFontSampleString,__CFString const*)const::$_0::operator()((unint64_t *)&values, (uint64_t)v29, Value);
            do
              v25 = __ldaxr((unint64_t *)&values);
            while (__stlxr(0, (unint64_t *)&values));
            *a4 = v25;

            goto LABEL_21;
          }
        }
      }
    }
    else
    {

    }
    *a4 = 0;
LABEL_21:

    values = &v32;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&values);
    return;
  }
  v26 = CFDictionaryGetValue((CFDictionaryRef)_MergedGlobals_29, ValueAtIndex);
  v27 = (void *)CFDictionaryGetValue(v10, v26);
  TSampleManagerImp::CopySampleLettersForLanguage(CTFontSampleString,__CFString const*)const::$_0::operator()((unint64_t *)&v32, (uint64_t)v29, v27);
  do
    v28 = __ldaxr((unint64_t *)&v32);
  while (__stlxr(0, (unint64_t *)&v32));
  *a4 = v28;

}

void SampleLettersSpanningCharacterSet(const __CFArray *a1, const __CFCharacterSet *a2, uint64_t a3)
{
  const __CFArray *v5;
  uint64_t CountOfLetters;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  LettersSpanningCharacterSet((const __CFArray *)&v11, a2, a3);
  v5 = (const __CFArray *)atomic_load((unint64_t *)&v11);
  CountOfLetters = GetCountOfLetters(v5);
  if (CountOfLetters
    && ((v7 = CountOfLetters, v8 = GetCountOfLetters(a2), v8 >= 0) ? (v9 = v8) : (v9 = v8 + 1), v7 > v9 >> 1))
  {
    do
      v10 = __ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)a1 = v10;

}

void TSampleManagerImp::CopyPreferredSampleLetters(const __CFArray *a1, unint64_t *a2, int a3, unsigned int a4, CFArrayRef theArray, uint64_t a6, const __CFArray *a7, void **a8)
{
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  __CFString *ValueAtIndex;
  const __CFCharacterSet *v21;
  void *v23;
  void **v24;
  CFArrayRef theArraya;
  id v26;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    goto LABEL_14;
  v24 = a8;
  theArraya = CFBundleCopyLocalizationsForPreferences(theArray, a7);
  if (!theArraya || (Count = CFArrayGetCount(theArraya)) == 0)
  {
LABEL_13:

LABEL_14:
    *(_QWORD *)a1 = 0;
    return;
  }
  v17 = Count;
  v18 = 0;
  while (1)
  {
    ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArraya, v18);
    *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
    TSampleManagerImp::CopySampleLettersSpanningCharacterSet(a1, a2, a4, a6, ValueAtIndex);
    if (atomic_load((unint64_t *)a1))
      break;

    SampleLettersForLanguage((unint64_t *)&v26, a3, a4, a6, ValueAtIndex);
    do
      v21 = (const __CFCharacterSet *)__ldaxr((unint64_t *)&v26);
    while (__stlxr(0, (unint64_t *)&v26));

    if (v21)
    {
      *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
      SampleLettersSpanningCharacterSet(a1, v21, a6);
      if (atomic_load((unint64_t *)a1))
      {
        if (v24)
        {
          v23 = *v24;
          if (*v24 != ValueAtIndex)
          {
            *v24 = ValueAtIndex;

          }
        }
        goto LABEL_22;
      }

    }
    if (++v18 == v17)
      goto LABEL_13;
  }
  if (v24)
  {
    v21 = (const __CFCharacterSet *)*v24;
    if (*v24 != ValueAtIndex)
    {
      *v24 = ValueAtIndex;
LABEL_22:

    }
  }

}

void SampleLettersForLanguage(unint64_t *a1, int a2, int a3, uint64_t a4, CFStringRef theString)
{
  __int128 v10;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v13;
  char *v14;
  uint64_t v15;
  void *ExemplarSet;
  const __CFString *v18;
  const __CFString *v19;
  CFIndex v20;
  uint64_t *v21;
  uint64_t v22;
  int SampleString;
  const __CFAllocator *v24;
  __CFArray *Mutable;
  CFStringRef v26;
  const __CFString *v27;
  __CFString *MutableCopy;
  __CFString *v29;
  __CFArray *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  void (*v36)(void);
  __CFString __s;
  id *v38;
  uint64_t *p_length;
  int64x2_t v40;
  uint64_t v41;
  _OWORD v42[2];
  _OWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = v10;
  v42[0] = v10;
  v41 = 0;
  v40 = 0uLL;
  v43 = v42;
  if (!CFStringGetCStringPtr(theString, 0x600u))
  {
    Length = CFStringGetLength(theString);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
    v13 = MaximumSizeForEncoding + 1;
    v14 = (char *)v40.i64[0];
    if ((unint64_t)(MaximumSizeForEncoding + 1) <= v40.i64[1] - v40.i64[0])
    {
      if ((unint64_t)(MaximumSizeForEncoding + 1) < v40.i64[1] - v40.i64[0])
        v40.i64[1] = v40.i64[0] + v13;
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v40, MaximumSizeForEncoding + 1 - (v40.i64[1] - v40.i64[0]));
      v14 = (char *)v40.i64[0];
    }
    if (!CFStringGetCString(theString, v14, v13, 0x600u) || !v40.i64[0])
      goto LABEL_38;
  }
  HIDWORD(__s.data) = 0;
  if ((a3 - 1) <= 1)
  {
    LODWORD(__s.data) = -1431655766;
    uscript_getCode();
    HIDWORD(__s.info) = -1431655766;
    SampleString = uscript_getSampleString();
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v26 = CFStringCreateWithCharacters(v24, (const UniChar *)&__s.info + 2, SampleString);
    if (v26)
    {
      v27 = v26;
      CFArrayAppendValue(Mutable, v26);
      if (a3 == 1)
      {
        if (uscript_isCased())
        {
          MutableCopy = CFStringCreateMutableCopy(v24, 0, v27);
          if (MutableCopy)
          {
            v29 = MutableCopy;
            CFStringLowercase(MutableCopy, 0);
            if (!CFEqual(v29, v27))
              CFArrayAppendValue(Mutable, v29);
            CFRelease(v29);
          }
        }
      }
      CFRelease(v27);
    }
    v35 = CFArrayCreateMutable(v24, 0, MEMORY[0x1E0C9B378]);
    v30 = (__CFArray *)atomic_load((unint64_t *)&v35);
    CFArrayAppendValue(v30, Mutable);
    do
      v31 = (void *)__ldaxr((unint64_t *)&v35);
    while (__stlxr(0, (unint64_t *)&v35));
    __s.isa = v31;
    do
      v32 = __ldaxr((unint64_t *)&__s);
    while (__stlxr(0, (unint64_t *)&__s));
    *a1 = v32;

    goto LABEL_39;
  }
  v15 = ulocdata_open();
  v36 = (void (*)(void))MEMORY[0x1E0DE6988];
  ExemplarSet = (void *)ulocdata_getExemplarSet();
  v35 = ExemplarSet;
  if (a3)
    goto LABEL_31;
  __s.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  DigitsStringForLanguage(&__s, theString);
  if (atomic_load((unint64_t *)&__s))
  {
    v18 = (const __CFString *)atomic_load((unint64_t *)&__s);
    v19 = (const __CFString *)atomic_load((unint64_t *)&__s);
    v20 = CFStringGetLength(v19);
    __s.length = (uint64_t)&off_1E15DF908;
    v38 = &v35;
    p_length = &__s.length;
    EnumerateCharactersInRange(v18, 0, v20, (uint64_t)&__s.length);
    v21 = p_length;
    if (p_length == &__s.length)
    {
      v22 = 4;
      v21 = &__s.length;
      goto LABEL_29;
    }
    if (p_length)
    {
      v22 = 5;
LABEL_29:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
  }

  ExemplarSet = v35;
LABEL_31:
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  SampleLettersFromUSet(a1, a2, a3, a4, (uint64_t)ExemplarSet, (int *)&__s.data + 1, theString);
  v33 = atomic_load(a1);
  if (!v33)

  v34 = v35;
  v35 = 0;
  if (v34)
    v36();
  if (v15)
    ulocdata_close();
  if (!v33)
LABEL_38:
    *a1 = 0;
LABEL_39:
  v35 = &v40;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v35);
}

void TSampleManagerImp::Copy(unint64_t *a1@<X0>, int a2@<W1>, unint64_t *a3@<X2>, unsigned int a4@<W3>, const __CFArray *a5@<X4>, void **a6@<X5>, unint64_t *a7@<X8>)
{
  const __CFCharacterSet *v14;
  void *v16;
  id v17;
  void *v18;
  unint64_t *v19;
  const __CFDictionary *v20;
  id v21;
  void *v22;
  void *Value;
  uint64_t v24;
  unint64_t v25;
  id v26;
  CFArrayRef v27;
  CFArrayRef v28;
  int v29;
  const __CFArray *v30;
  uint64_t v31;
  const __CFArray *v32;
  unint64_t v34;
  void *info;
  void *v36;
  const __CFArray *v37;
  void *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  CFIndex Count;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  const __CFArray *v46;
  uint64_t v47;
  const __CFArray *v48;
  uint64_t v49;
  unint64_t v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex i;
  __CFString *ValueAtIndex;
  uint64_t v56;
  const __CFCharacterSet *v57;
  uint64_t v58;
  __int128 v60;
  unsigned int v61;
  CFDictionaryRef *v62;
  const __CFDictionary *v63;
  CFIndex v64;
  CFIndex v65;
  __int128 v66;
  char *data;
  const void *v68;
  char *v69;
  void **v70;
  char *v71;
  int v72;
  void *v73;
  CFTypeID v74;
  unint64_t v75;
  void *v76;
  unint64_t v77;
  void *v78;
  unint64_t v79;
  const __CFCharacterSet *v80;
  const __CFArray *v82;
  CFIndex v83;
  CFIndex v84;
  CFIndex k;
  const __CFString *v86;
  __CFArray *v87;
  const __CFArray *v88;
  void *v89;
  const __CFArray *v90;
  id v91;
  __CFArray *v92;
  unint64_t v93;
  void *v94;
  const __CFArray *v95;
  uint64_t v96;
  const __CFArray *v97;
  uint64_t CountOfLetters;
  uint64_t v99;
  const __CFArray *v100;
  uint64_t v101;
  unint64_t v103;
  void *v104;
  const __CFArray *v105;
  CFIndex v106;
  CFIndex v107;
  CFIndex j;
  __CFString *v109;
  uint64_t v110;
  const __CFCharacterSet *v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  unsigned int v118;
  BOOL v120;
  BOOL v121;
  char v122;
  BOOL v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v132;
  void *v133;
  unint64_t v134;
  void *v135;
  unint64_t v136;
  unint64_t v137;
  const __CFAllocator *allocator;
  char *v139;
  unint64_t *v140;
  int v141;
  id v142;
  id v143[2];
  __int128 v144;
  id v145;
  id v146;
  id v147;
  const __CFArray *v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id Mutable;
  __CFString v154;
  _OWORD v155[15];
  _OWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  CFRange v160;

  v159 = *MEMORY[0x1E0C80C00];
  if (a6)
    *a6 = &stru_1E15EDAC0;
  v152 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(uint64_t *__return_ptr, unint64_t *))(*a3 + 184))(&v154.info, a3);
  v14 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v154.info);
  TCFMutableCharacterSet::TCFMutableCharacterSet((TCFMutableCharacterSet *)&v152, v14);

  if (!atomic_load((unint64_t *)&v152))
  {
    *a7 = 0;
    goto LABEL_103;
  }
  v141 = a2;
  v16 = (void *)atomic_load(a3 + 12);
  v17 = v16;
  v18 = v17;
  if (v17)
  {
    v19 = a7;
    v20 = (const __CFDictionary *)qword_1ECDE7D08;
    v21 = v17;
    v22 = v21;
    if (v20)
    {
      Value = (void *)CFDictionaryGetValue(v20, v21);

      a7 = v19;
      if (Value)
      {
        v24 = atomic_load((unint64_t *)&v152);
        TSampleManagerImp::CopySampleLettersSpanningCharacterSet((const __CFArray *)&v154.info, a1, a4, v24, Value);
        do
          v25 = __ldaxr((unint64_t *)&v154.info);
        while (__stlxr(0, (unint64_t *)&v154.info));
        *v19 = v25;

        v26 = v18;
        goto LABEL_102;
      }
    }
    else
    {

      a7 = v19;
    }
  }

  v151 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, unint64_t *))(*a3 + 368))(&v151, a3);
  if (!a5 || !CFArrayGetCount(a5))
    goto LABEL_19;
  v27 = CFLocaleCopyPreferredLanguages();
  if (v27 == a5)
  {

    goto LABEL_19;
  }
  v28 = v27;
  if (!v27)
  {
    v36 = 0;
LABEL_24:

    goto LABEL_25;
  }
  v29 = CFEqual(a5, v27);

  if (v29)
  {
LABEL_19:
    v154.info = 0xAAAAAAAAAAAAAAAALL;
    v30 = (const __CFArray *)atomic_load((unint64_t *)&v151);
    v31 = atomic_load((unint64_t *)&v152);
    v32 = (const __CFArray *)atomic_load(a1);
    TSampleManagerImp::CopyPreferredSampleLetters((const __CFArray *)&v154.info, a1, v141, a4, v30, v31, v32, a6);
    if (atomic_load((unint64_t *)&v154.info))
    {
      do
        v34 = __ldaxr((unint64_t *)&v154.info);
      while (__stlxr(0, (unint64_t *)&v154.info));
      *a7 = v34;
      info = (void *)v154.info;
      goto LABEL_101;
    }
    v36 = (void *)v154.info;
    goto LABEL_24;
  }
LABEL_25:
  v150 = (id)0xAAAAAAAAAAAAAAAALL;
  v37 = (const __CFArray *)atomic_load((unint64_t *)&v151);
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v150, v37);
  (*(void (**)(id *__return_ptr, unint64_t *))(*a3 + 336))(&v149, a3);
  TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>((unint64_t *)&v150, (unint64_t *)&v149);

  v154.info = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::ShapingLanguages((TBaseFont *)a3, 1, (unint64_t *)&v154.info);
  v38 = (void *)atomic_load((unint64_t *)&v154.info);
  v39 = v38;
  if (!v39)
  {
    v42 = v141;
    goto LABEL_29;
  }
  v40 = v39;
  Count = CFArrayGetCount(v39);

  v42 = v141;
  if (Count)
  {
    v43 = (void *)atomic_load((unint64_t *)&v154.info);
    v148 = v43;
    TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>((unint64_t *)&v150, (unint64_t *)&v148);
    v39 = v148;
LABEL_29:

  }
  v147 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v147, a5);
  v44 = (void *)atomic_load((unint64_t *)&v151);
  v146 = v44;
  TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>((unint64_t *)&v147, (unint64_t *)&v146);

  v45 = (void *)atomic_load(a1);
  v145 = v45;
  TCFMutableArray::AppendArray<TCFRef<__CFArray const*>>((unint64_t *)&v147, (unint64_t *)&v145);

  v154.info = 0xAAAAAAAAAAAAAAAALL;
  v46 = (const __CFArray *)atomic_load((unint64_t *)&v150);
  v47 = atomic_load((unint64_t *)&v152);
  v48 = (const __CFArray *)atomic_load((unint64_t *)&v147);
  TSampleManagerImp::CopyPreferredSampleLetters((const __CFArray *)v143, a1, v42, a4, v46, v47, v48, a6);
  do
    v49 = __ldaxr((unint64_t *)v143);
  while (__stlxr(0, (unint64_t *)v143));
  v154.info = v49;

  if (atomic_load((unint64_t *)&v154.info))
  {
    do
      v51 = __ldaxr((unint64_t *)&v154.info);
    while (__stlxr(0, (unint64_t *)&v154.info));
    *a7 = v51;
    goto LABEL_98;
  }

  v157 = 0xAAAAAAAAAAAAAAAALL;
  v158 = 0xAAAAAAAAAAAAAAAALL;
  if (TBaseFont::GetOS2UnicodeRanges((TBaseFont *)a3, &v157, 0) && (v158 & 0x40000) != 0)
  {
    TSampleManagerImp::CopySampleLettersForLanguage(CFSTR("braille"), a1, a4, (unint64_t *)&v154.info);
    do
      v103 = __ldaxr((unint64_t *)&v154.info);
    while (__stlxr(0, (unint64_t *)&v154.info));
    goto LABEL_97;
  }
  v140 = a7;
  if (a5)
  {
    v52 = CFArrayGetCount(a5);
    if (v52)
    {
      v53 = v52;
      for (i = 0; i != v53; ++i)
      {
        ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a5, i);
        v56 = atomic_load((unint64_t *)&v152);
        SampleLettersForLanguage((unint64_t *)&v154.info, v42, a4, v56, ValueAtIndex);
        do
          v57 = (const __CFCharacterSet *)__ldaxr((unint64_t *)&v154.info);
        while (__stlxr(0, (unint64_t *)&v154.info));

        if (v57)
        {
          v154.info = 0xAAAAAAAAAAAAAAAALL;
          v58 = atomic_load((unint64_t *)&v152);
          SampleLettersSpanningCharacterSet((const __CFArray *)&v154.info, v57, v58);
          if (atomic_load((unint64_t *)&v154.info))
          {
            if (a6)
            {
              v133 = *a6;
              if (*a6 != ValueAtIndex)
              {
                *a6 = ValueAtIndex;

              }
            }
            do
              v134 = __ldaxr((unint64_t *)&v154.info);
            while (__stlxr(0, (unint64_t *)&v154.info));
            *v140 = v134;

            v104 = v57;
            goto LABEL_99;
          }

        }
        v42 = v141;
      }
    }
  }
  *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v143 = v60;
  v144 = v60;
  atomic_load((unint64_t *)&v152);
  CFCharacterSetInitInlineBuffer();
  v61 = a4;
  a7 = v140;
  if (a4 > 2)
    goto LABEL_92;
  v62 = (CFDictionaryRef *)off_1E15E81F8[a4];
  v63 = *v62;
  if (!*v62)
    goto LABEL_92;
  v64 = CFDictionaryGetCount(*v62);
  if (!v64)
    goto LABEL_92;
  v65 = v64;
  *(_QWORD *)&v66 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v66 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v155[14] = v66;
  v155[13] = v66;
  v155[12] = v66;
  v155[11] = v66;
  v155[10] = v66;
  v155[9] = v66;
  v155[8] = v66;
  v155[7] = v66;
  v155[6] = v66;
  v155[5] = v66;
  v155[4] = v66;
  v155[3] = v66;
  v155[2] = v66;
  v155[1] = v66;
  v155[0] = v66;
  memset(&v154.info, 0, 24);
  v156 = v155;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v154.info, v64);
  data = v154.data;
  bzero(v154.data, 8 * v65);
  v154.data = &data[8 * v65];
  CFDictionaryGetKeysAndValues(v63, 0, (const void **)v154.info);
  v68 = CFDictionaryGetValue(v63, CFSTR("emoji"));
  if (v68)
  {
    v69 = (char *)v154.info;
    if ((char *)v154.info != v154.data)
    {
      while (*(const void **)v69 != v68)
      {
        v69 += 8;
        if (v69 == v154.data)
        {
          v69 = v154.data;
          break;
        }
      }
    }
    std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<void const**>,std::__wrap_iter<void const**>>((char *)v154.info, v69, v154.data);
  }
  v70 = (void **)v154.info;
  v71 = v154.data;
  v72 = v141;
  if ((char *)v154.info == v154.data)
  {
LABEL_91:
    v154.isa = &v154.info;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v154);
    v61 = a4;
LABEL_92:
    v154.info = 0xAAAAAAAAAAAAAAAALL;
    v101 = atomic_load((unint64_t *)&v152);
    TSampleManagerImp::CopySampleLettersSpanningCharacterSet((const __CFArray *)&v154.info, a1, v61, v101, 0);
    if (atomic_load((unint64_t *)&v154.info))
    {
      do
        v103 = __ldaxr((unint64_t *)&v154.info);
      while (__stlxr(0, (unint64_t *)&v154.info));
LABEL_97:
      *a7 = v103;
LABEL_98:
      v104 = (void *)v154.info;
LABEL_99:

      goto LABEL_100;
    }

    v105 = (const __CFArray *)atomic_load((unint64_t *)&v150);
    if (v105)
    {
      v106 = CFArrayGetCount(v105);
      if (v106)
      {
        v107 = v106;
        for (j = 0; j != v107; ++j)
        {
          v109 = (__CFString *)CFArrayGetValueAtIndex(v105, j);
          v110 = atomic_load((unint64_t *)&v152);
          SampleLettersForLanguage((unint64_t *)&v154.info, v141, a4, v110, v109);
          do
            v111 = (const __CFCharacterSet *)__ldaxr((unint64_t *)&v154.info);
          while (__stlxr(0, (unint64_t *)&v154.info));

          if (v111)
          {
            v154.info = 0xAAAAAAAAAAAAAAAALL;
            v112 = atomic_load((unint64_t *)&v152);
            SampleLettersSpanningCharacterSet((const __CFArray *)&v154.info, v111, v112);
            if (atomic_load((unint64_t *)&v154.info))
            {
              if (a6)
              {
                v135 = *a6;
                if (*a6 != v109)
                {
                  *a6 = v109;

                }
              }
              do
                v136 = __ldaxr((unint64_t *)&v154.info);
              while (__stlxr(0, (unint64_t *)&v154.info));
              *a7 = v136;

              v104 = v111;
              goto LABEL_99;
            }

          }
        }
      }
    }
    v114 = uset_openEmpty();
    if (!v114)
      goto LABEL_166;
    v115 = v114;
    v116 = -1114112;
    while (1)
    {
      v117 = (v116 + 1114112);
      if (v117 >= 0xE000
        && (v117 >> 11 < 0x1F || v117 >= 0xF0000 && (v116 + 2) < 0xFFFFFC02))
      {
        goto LABEL_139;
      }
      v118 = (uint64_t)v143[1] & 4;
      if (HIDWORD(v143[1]) > v117 || v144 <= v117)
        break;
      if (!WORD1(v117) && ((uint64_t)v143[1] & 2) == 0)
      {
        if (*((_QWORD *)&v144 + 1))
        {
          if (((uint64_t)v143[1] & 1) != 0)
          {
            v126 = v118 >> 2;
            v127 = *(unsigned __int8 *)(*((_QWORD *)&v144 + 1) + (v117 >> 8));
            if (*(_BYTE *)(*((_QWORD *)&v144 + 1) + (v117 >> 8)))
            {
              if ((_DWORD)v127 == 255)
              {
                v126 = v118 == 0;
              }
              else
              {
                v128 = v118 == 0;
                if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v144 + 1)
                                                            + 32 * v127
                                                            + (v116 >> 3)
                                                            + 224) >> (v116 & 7)) & 1) != 0)
                  v126 = v128;
              }
            }
            if (!v126)
              goto LABEL_139;
          }
          else
          {
            v120 = v118 == 0;
            v121 = v118 != 0;
            v122 = v120;
            if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v144 + 1)
                                                        + ((unint64_t)(v116 + 1114112) >> 3)) >> (v116 & 7)) & 1) != 0)
              v121 = v122;
            if (!v121)
              goto LABEL_139;
          }
        }
        else
        {
          v120 = v118 == 0;
          v124 = v118 != 0;
          v125 = v120;
          if (((uint64_t)v143[1] & 1) == 0)
            v124 = v125;
          if (!v124)
            goto LABEL_139;
        }
LABEL_138:
        MEMORY[0x186DC0CF4](v115, (v116 + 1114112));
        goto LABEL_139;
      }
      if (CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)v143[0], v116 + 1114112))
        goto LABEL_138;
LABEL_139:
      if (__CFADD__(v116++, 1))
      {
        LODWORD(Mutable) = 0;
        v154.info = 0xAAAAAAAAAAAAAAAALL;
        v129 = atomic_load((unint64_t *)&v152);
        SampleLettersFromUSet((unint64_t *)&v154, v141, a4, v129, v115, (int *)&Mutable, 0);
        do
          v130 = __ldaxr((unint64_t *)&v154);
        while (__stlxr(0, (unint64_t *)&v154));
        v154.info = v130;

        if (atomic_load((unint64_t *)&v154.info))
        {
          do
            v132 = __ldaxr((unint64_t *)&v154.info);
          while (__stlxr(0, (unint64_t *)&v154.info));
          *a7 = v132;

          uset_close();
          goto LABEL_100;
        }

        uset_close();
LABEL_166:
        *a7 = 0;
        goto LABEL_100;
      }
    }
    if (((uint64_t)v143[1] & 4) == 0)
      goto LABEL_139;
    goto LABEL_138;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v139 = v154.data;
  while (1)
  {
    v73 = *v70;
    v142 = 0;
    v74 = CFGetTypeID(v73);
    if (v74 != CFStringGetTypeID())
    {
      if (v72 == 1)
      {
        LinesByWrapping((const __CFArray *)&v154, (const __CFArray *)v73);
        do
          v77 = __ldaxr((unint64_t *)&v154);
        while (__stlxr(0, (unint64_t *)&v154));
        do
          v78 = (void *)__ldaxr((unint64_t *)&v142);
        while (__stlxr(v77, (unint64_t *)&v142));
      }
      else
      {
        v154.isa = v73;
        do
          v79 = __ldaxr((unint64_t *)&v154);
        while (__stlxr(0, (unint64_t *)&v154));
        do
          v78 = (void *)__ldaxr((unint64_t *)&v142);
        while (__stlxr(v79, (unint64_t *)&v142));
      }

      v80 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v152);
      v154.isa = (void *)0xAAAAAAAAAAAAAAAALL;
      DigitsForLanguage(&v154, 0);
      if (atomic_load((unint64_t *)&v154))
      {
        Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v82 = (const __CFArray *)atomic_load((unint64_t *)&v154);
        if (v82)
        {
          v83 = CFArrayGetCount(v82);
          if (v83)
          {
            v84 = v83;
            for (k = 0; k != v84; ++k)
            {
              v86 = (const __CFString *)CFArrayGetValueAtIndex(v82, k);
              v160.length = CFStringGetLength(v86);
              v160.location = 0;
              if (!RangeOfCharactersFromSet(v86, v80, v160, 8uLL))
              {
                v87 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
                CFArrayAppendValue(v87, v86);
              }
            }
          }
        }
        v88 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
        if (CFArrayGetCount(v88))
        {
          do
            v89 = (void *)__ldaxr((unint64_t *)&Mutable);
          while (__stlxr(0, (unint64_t *)&Mutable));

          a7 = v140;
          if (v89)
          {
            v154.isa = (void *)0xAAAAAAAAAAAAAAAALL;
            v90 = (const __CFArray *)atomic_load((unint64_t *)&v142);
            TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v154, v90);
            v91 = v89;
            v92 = (__CFArray *)atomic_load((unint64_t *)&v154);
            CFArrayAppendValue(v92, v91);

            v71 = v139;
            do
              v93 = __ldaxr((unint64_t *)&v154);
            while (__stlxr(0, (unint64_t *)&v154));
            do
              v94 = (void *)__ldaxr((unint64_t *)&v142);
            while (__stlxr(v93, (unint64_t *)&v142));

            goto LABEL_87;
          }
LABEL_86:
          v71 = v139;
LABEL_87:

          v72 = v141;
          goto LABEL_88;
        }

        a7 = v140;
      }

      v89 = 0;
      goto LABEL_86;
    }
    CreateLettersFromString(&v154, v73);
    do
      v75 = __ldaxr((unint64_t *)&v154);
    while (__stlxr(0, (unint64_t *)&v154));
    do
      v76 = (void *)__ldaxr((unint64_t *)&v142);
    while (__stlxr(v75, (unint64_t *)&v142));

LABEL_88:
    v154.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    v95 = (const __CFArray *)atomic_load((unint64_t *)&v142);
    v96 = atomic_load((unint64_t *)&v152);
    LettersSpanningCharacterSet((const __CFArray *)&v154, v95, v96);
    v97 = (const __CFArray *)atomic_load((unint64_t *)&v154);
    CountOfLetters = GetCountOfLetters(v97);
    if (CountOfLetters)
    {
      v99 = CountOfLetters;
      v100 = (const __CFArray *)atomic_load((unint64_t *)&v142);
      if (v99 == GetCountOfLetters(v100))
        break;
    }

    if (++v70 == (void **)v71)
      goto LABEL_91;
  }
  do
    v137 = __ldaxr((unint64_t *)&v154);
  while (__stlxr(0, (unint64_t *)&v154));
  *a7 = v137;

  v154.isa = &v154.info;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v154);
LABEL_100:

  info = v150;
LABEL_101:

  v26 = v151;
LABEL_102:

LABEL_103:
}

void CreateLettersFromString(const __CFString *a1, void *a2)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;

  v4 = (void *)MEMORY[0x186DC070C]();
  v8 = 0;
  v9 = &v8;
  v10 = 0x3052000000;
  v11 = __Block_byref_object_copy__1;
  v12 = __Block_byref_object_dispose__1;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v13 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL23CreateLettersFromStringPK10__CFString_block_invoke;
  v7[3] = &unk_1E15E81D8;
  v7[4] = &v8;
  objc_msgSend(a2, "enumerateLinesUsingBlock:", v7);
  v6 = (id)v9[5];
  do
    v5 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));
  a1->isa = v5;

  _Block_object_dispose(&v8, 8);
  objc_autoreleasePoolPop(v4);
}

void LinesByWrapping(const __CFArray *a1, const __CFArray *a2)
{
  const __CFAllocator *v2;
  CFIndex v3;
  const CFArrayCallBacks *v4;
  const __CFArray *ValueAtIndex;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  __CFArray *v17;
  __CFArray *v18;
  __CFArray *v19;
  __CFArray *v20;
  __CFArray *v21;
  __CFArray *v22;
  __CFArray *v23;
  __CFArray *v24;
  unint64_t v25;
  CFIndex Count;
  id Mutable;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count)
    {
      v3 = 0;
      v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a2, v3);
        v6 = CFArrayGetCount(ValueAtIndex);
        if (v6 >= 0)
          v7 = v6;
        else
          v7 = v6 + 1;
        v8 = v7 >> 1;
        v9 = v6 - (v7 >> 1);
        if (v9 >= 0)
          v10 = v9;
        else
          v10 = v9 + 1;
        v11 = v10 >> 1;
        v12 = v9 - (v10 >> 1);
        if (v6 >= 41)
          v13 = v11;
        else
          v13 = v8;
        if (v6 >= 41)
          v14 = v8 - ((unint64_t)v6 >> 2);
        else
          v14 = 0;
        if (v6 >= 41)
          v15 = v12;
        else
          v15 = v9;
        if (v6 >= 41)
          v16 = (unint64_t)v6 >> 2;
        else
          v16 = 0;
        v17 = CFArrayCreateMutable(v2, v15, v4);
        v30.location = 0;
        v30.length = v15;
        CFArrayAppendArray(v17, ValueAtIndex, v30);
        v18 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
        CFArrayAppendValue(v18, v17);
        if (v13)
        {
          v19 = CFArrayCreateMutable(v2, v13, v4);
          v31.location = v15;
          v31.length = v13;
          CFArrayAppendArray(v19, ValueAtIndex, v31);
          v20 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v20, v19);

        }
        if (v14)
        {
          v21 = CFArrayCreateMutable(v2, v14, v4);
          v32.location = v15 + v13;
          v32.length = v14;
          CFArrayAppendArray(v21, ValueAtIndex, v32);
          v22 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v22, v21);

        }
        if (v16)
        {
          v23 = CFArrayCreateMutable(v2, v16, v4);
          v33.location = v15 + v13 + v14;
          v33.length = v16;
          CFArrayAppendArray(v23, ValueAtIndex, v33);
          v24 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v24, v23);

        }
        ++v3;
      }
      while (Count != v3);
    }
  }
  do
    v25 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *(_QWORD *)a1 = v25;

}

void LettersSpanningCharacterSet(const __CFArray *a1, const __CFArray *a2, uint64_t a3)
{
  const __CFArray *v3;
  __int128 v4;
  CFIndex v5;
  const __CFAllocator *v6;
  const __CFArray *ValueAtIndex;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  __CFString *v11;
  _QWORD *v12;
  uint64_t v13;
  const __CFAllocator *v14;
  CFIndex v15;
  void *v16;
  const __CFString *v17;
  __CFString *v18;
  CFIndex Length;
  CFIndex v20;
  unint64_t v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex i;
  const __CFArray *v26;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v28;
  __CFArray *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  const __CFArray *v35;
  CFIndex v36;
  unint64_t v37;
  const __CFArray *v38;
  const __CFArray *v39;
  __CFArray *v40;
  unint64_t v41;
  CFIndex Count;
  CFIndex idx;
  id v45;
  id v46;
  id v47;
  _OWORD v48[2];
  id Mutable;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v3 = a2;
  v52 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[0] = v4;
    v48[1] = v4;
    CFCharacterSetInitInlineBuffer();
    v47 = 0;
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        idx = v5;
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v3, v5);
        v8 = CFArrayGetCount(ValueAtIndex);
        if (v8 >= 1)
          break;
LABEL_31:
        v5 = idx + 1;
        if (idx + 1 == Count)
          goto LABEL_32;
      }
      v9 = v8;
      v10 = 0;
      while (1)
      {
        v11 = (__CFString *)CFArrayGetValueAtIndex(ValueAtIndex, v10);
        v46 = (id)0xAAAAAAAAAAAAAAAALL;
        v50[0] = &off_1E15DF998;
        v50[1] = v48;
        v51 = v50;
        CreateStringByDeletingLongCharactersPassingTest(v11, (uint64_t)v50, (__CFString **)&v46);
        v12 = v51;
        if (v51 == v50)
        {
          v12 = v50;
          v13 = 4;
        }
        else
        {
          if (!v51)
            goto LABEL_12;
          v13 = 5;
        }
        (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
        v14 = v6;
        v15 = v9;
        v16 = (void *)atomic_load((unint64_t *)&v46);
        v17 = v16;
        v18 = (__CFString *)v17;
        if (v17)
          Length = CFStringGetLength(v17);
        else
          Length = 0;
        v20 = CFStringGetLength(v11);

        if (Length >= v20)
        {
          v9 = v15;
          v6 = v14;
        }
        else
        {
          v21 = atomic_load((unint64_t *)&v47);
          v22 = v15;
          v6 = v14;
          if (!v21)
          {
            Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
            if (v3)
            {
              v23 = CFArrayGetCount(v3);
              if (v23)
              {
                v24 = v23;
                for (i = 0; i != v24; ++i)
                {
                  v26 = (const __CFArray *)CFArrayGetValueAtIndex(v3, i);
                  MutableCopy = CFArrayCreateMutableCopy(v14, 0, v26);
                  if (MutableCopy)
                  {
                    v28 = MutableCopy;
                    v29 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
                    CFArrayAppendValue(v29, v28);
                    CFRelease(v28);
                  }
                }
              }
            }
            do
              v30 = (void *)__ldaxr((unint64_t *)&Mutable);
            while (__stlxr(0, (unint64_t *)&Mutable));
            v45 = v30;

            do
              v31 = __ldaxr((unint64_t *)&v45);
            while (__stlxr(0, (unint64_t *)&v45));
            do
              v32 = (void *)__ldaxr((unint64_t *)&v47);
            while (__stlxr(v31, (unint64_t *)&v47));

            if (!atomic_load((unint64_t *)&v47))
            {
              *(_QWORD *)a1 = 0;

              goto LABEL_42;
            }
          }
          v3 = (const __CFArray *)atomic_load((unint64_t *)&v47);
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v3, idx);
          CFArrayRemoveValueAtIndex(ValueAtIndex, v10);
          v9 = v22 - 1;
          --v10;
        }

        if (++v10 >= v9)
          goto LABEL_31;
      }
    }
LABEL_32:
    if (atomic_load((unint64_t *)&v47))
    {
      v35 = (const __CFArray *)atomic_load((unint64_t *)&v47);
      v36 = CFArrayGetCount(v35);
      if (v36 >= 1)
      {
        v37 = v36 + 1;
        do
        {
          v38 = (const __CFArray *)atomic_load((unint64_t *)&v47);
          v39 = (const __CFArray *)CFArrayGetValueAtIndex(v38, v37 - 2);
          if (!CFArrayGetCount(v39))
          {
            v40 = (__CFArray *)atomic_load((unint64_t *)&v47);
            CFArrayRemoveValueAtIndex(v40, v37 - 2);
          }
          --v37;
        }
        while (v37 > 1);
      }
      do
        v41 = __ldaxr((unint64_t *)&v47);
      while (__stlxr(0, (unint64_t *)&v47));
      *(_QWORD *)a1 = v41;
    }
    else
    {
      *(_QWORD *)a1 = v3;
    }
LABEL_42:

  }
  else
  {
    *(_QWORD *)a1 = a2;
  }
}

uint64_t GetCountOfLetters(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  uint64_t v4;
  CFIndex i;
  const __CFArray *ValueAtIndex;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v3 = Count;
  v4 = 0;
  for (i = 0; i != v3; ++i)
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, i);
    v4 += CFArrayGetCount(ValueAtIndex);
  }
  return v4;
}

void SampleLettersFromUSet(unint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, int *a6, const __CFString *a7)
{
  const __CFAllocator *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const __CFSet *v22;
  const __CFAllocator *v23;
  CFLocaleRef v24;
  int v25;
  void **v26;
  void **v27;
  uint64_t v28;
  CFLocaleRef v29;
  const __CFSet *v30;
  const __CFArray *v31;
  const __CFSet *v32;
  const CFArrayCallBacks *v33;
  const __CFArray *v34;
  CFArrayRef v35;
  __CFArray *v36;
  void *v37;
  id v38;
  void *v39;
  CFIndex v40;
  const __CFArray *v41;
  const __CFArray *v42;
  const __CFArray *v43;
  const void *v44;
  __CFArray *v45;
  const void *v46;
  __CFArray *v47;
  void *v48;
  unint64_t v49;
  id v50;
  const void *v51;
  __CFArray *v52;
  void *v53;
  const __CFArray *v54;
  const __CFArray *v55;
  CFIndex Count;
  void *v57;
  __CFArray *v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  void **v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  const __CFArray *v67;
  unint64_t v68;
  void *v69;
  const __CFSet *v70;
  const __CFSet *v71;
  const __CFArray *v72;
  const __CFArray *v73;
  CFIndex v74;
  CFIndex v75;
  CFIndex v76;
  const __CFArray *v77;
  const __CFString *ValueAtIndex;
  UChar32 FirstCharacter;
  __CFArray *v81;
  const __CFArray *v82;
  CFIndex v83;
  CFIndex v84;
  CFIndex j;
  const __CFString *v86;
  uint64_t v87;
  __CFArray *v88;
  void **v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void **v94;
  void **v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  const __CFArray *v99;
  const void *v100;
  __CFArray *v101;
  void *v102;
  unint64_t v103;
  id v104;
  __CFArray *i;
  const __CFArray *v106;
  const void *v107;
  __CFArray *v108;
  const void *v109;
  __CFArray *v110;
  void *v111;
  unint64_t v112;
  id v113;
  id v114;
  id v115;
  id v116;
  __int128 v117;
  __int128 v118;
  id *v119;
  char v120;
  id v121;
  CFSetCallBacks callBacks;
  id v123;
  id Mutable;
  uint64_t v125;
  _QWORD v126[3];
  _QWORD *v127;
  _QWORD v128[3];
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _QWORD v136[3];
  _QWORD *v137;
  void *values[3];
  void **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v125 = a4;
  if (*a6 >= 1)
  {
    *a1 = 0;
    return;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = MEMORY[0x1E0C9B3B0];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v123 = CFSetCreateMutable(v13, 0, (const CFSetCallBacks *)v14);
  v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)&callBacks.version = *(_OWORD *)v14;
  *(_OWORD *)&callBacks.release = v15;
  callBacks.equal = (CFSetEqualCallBack)SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_7::__invoke;
  callBacks.hash = (CFSetHashCallBack)SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_8::__invoke;
  v121 = CFSetCreateMutable(v13, 0, &callBacks);
  v120 = 0;
  *(_QWORD *)&v117 = &v120;
  *((_QWORD *)&v117 + 1) = &v121;
  *(_QWORD *)&v118 = &v125;
  *((_QWORD *)&v118 + 1) = &Mutable;
  v119 = &v123;
  v136[0] = &off_1E15DF6C8;
  v136[1] = &v117;
  v137 = v136;
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = &off_1E15DF710;
  v17 = v118;
  *(_OWORD *)(v16 + 8) = v117;
  *(_OWORD *)(v16 + 24) = v17;
  *((_QWORD *)v16 + 5) = v119;
  v135 = v16;
  IterateItems(a5, a6, (uint64_t)v136, (uint64_t)v134);
  v18 = v135;
  if (v135 == v134)
  {
    v19 = 4;
    v18 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_8;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_8:
  v20 = v137;
  if (v137 == v136)
  {
    v21 = 4;
    v20 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_13:
  v22 = (const __CFSet *)atomic_load((unint64_t *)&Mutable);
  if (!CFSetGetCount(v22))
  {
    v116 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
    v132[0] = &unk_1E15DF758;
    v133 = v132;
    if (a3 == 2)
      v25 = 1;
    else
      v25 = 2;
    LODWORD(v115) = v25;
    LODWORD(v114) = 0;
    v26 = (void **)operator new(0x28uLL);
    *v26 = &off_1E15E1408;
    v26[1] = &v115;
    v26[2] = v132;
    v26[3] = &v116;
    v26[4] = &v114;
    v139 = v26;
    IterateItemRanges(a5, a6, (uint64_t)values);
    v27 = v139;
    if (v139 == values)
    {
      v28 = 4;
      v27 = values;
    }
    else
    {
      if (!v139)
        goto LABEL_38;
      v28 = 5;
    }
    (*((void (**)(void))*v27 + v28))();
LABEL_38:
    v59 = v25 - (_DWORD)v114;
    v60 = v133;
    if (v133 == v132)
    {
      v61 = 4;
      v60 = v132;
    }
    else
    {
      if (!v133)
        goto LABEL_43;
      v61 = 5;
    }
    (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_43:
    v130[0] = &off_1E15DF7A0;
    v131 = v130;
    LODWORD(v115) = v59;
    if (v59 <= 0)
    {
      v65 = v130;
      v66 = 4;
      goto LABEL_76;
    }
    LODWORD(v114) = 0;
    v62 = (void **)operator new(0x28uLL);
    *v62 = &off_1E15E1408;
    v62[1] = &v115;
    v62[2] = v130;
    v62[3] = &v116;
    v62[4] = &v114;
    v139 = v62;
    IterateItemRanges(a5, a6, (uint64_t)values);
    v63 = v139;
    if (v139 == values)
    {
      v64 = 4;
      v63 = values;
    }
    else
    {
      if (!v139)
        goto LABEL_62;
      v64 = 5;
    }
    (*((void (**)(void))*v63 + v64))();
LABEL_62:
    v65 = v131;
    v59 -= (int)v114;
    if (v131 == v130)
    {
      v66 = 4;
      v65 = v130;
    }
    else
    {
      if (!v131)
        goto LABEL_77;
      v66 = 5;
    }
LABEL_76:
    (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_77:
    v128[0] = &off_1E15DF7E8;
    v129 = v128;
    LODWORD(v115) = v59;
    if (v59 <= 0)
    {
      v92 = v128;
      v93 = 4;
      goto LABEL_88;
    }
    LODWORD(v114) = 0;
    v89 = (void **)operator new(0x28uLL);
    *v89 = &off_1E15E1408;
    v89[1] = &v115;
    v89[2] = v128;
    v89[3] = &v116;
    v89[4] = &v114;
    v139 = v89;
    IterateItemRanges(a5, a6, (uint64_t)values);
    v90 = v139;
    if (v139 == values)
    {
      v91 = 4;
      v90 = values;
    }
    else
    {
      if (!v139)
        goto LABEL_84;
      v91 = 5;
    }
    (*((void (**)(void))*v90 + v91))();
LABEL_84:
    v92 = v129;
    v59 -= (int)v114;
    if (v129 == v128)
    {
      v93 = 4;
      v92 = v128;
    }
    else
    {
      if (!v129)
        goto LABEL_89;
      v93 = 5;
    }
LABEL_88:
    (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_89:
    v126[0] = &off_1E15DF830;
    v127 = v126;
    LODWORD(v115) = v59;
    if (v59 <= 0)
    {
      v97 = v126;
      v98 = 4;
      goto LABEL_100;
    }
    LODWORD(v114) = 0;
    v94 = (void **)operator new(0x28uLL);
    *v94 = &off_1E15E1408;
    v94[1] = &v115;
    v94[2] = v126;
    v94[3] = &v116;
    v94[4] = &v114;
    v139 = v94;
    IterateItemRanges(a5, a6, (uint64_t)values);
    v95 = v139;
    if (v139 == values)
    {
      v96 = 4;
      v95 = values;
    }
    else
    {
      if (!v139)
        goto LABEL_96;
      v96 = 5;
    }
    (*((void (**)(void))*v95 + v96))();
LABEL_96:
    v97 = v127;
    if (v127 == v126)
    {
      v98 = 4;
      v97 = v126;
    }
    else
    {
      if (!v127)
      {
LABEL_101:
        v99 = (const __CFArray *)atomic_load((unint64_t *)&v116);
        if (CFArrayGetCount(v99))
        {
          values[0] = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
          v100 = (const void *)atomic_load((unint64_t *)&v116);
          v101 = (__CFArray *)atomic_load((unint64_t *)values);
          CFArrayAppendValue(v101, v100);
          do
            v102 = (void *)__ldaxr((unint64_t *)values);
          while (__stlxr(0, (unint64_t *)values));
          v115 = v102;
          do
            v103 = __ldaxr((unint64_t *)&v115);
          while (__stlxr(0, (unint64_t *)&v115));
          *a1 = v103;

        }
        else
        {
          *a1 = 0;
        }
        v104 = v116;
        goto LABEL_119;
      }
      v98 = 5;
    }
LABEL_100:
    (*(void (**)(void))(*v97 + 8 * v98))();
    goto LABEL_101;
  }
  v23 = v13;
  if (a7)
    v24 = CFLocaleCreate(v13, a7);
  else
    v24 = CFLocaleCopyCurrent();
  v29 = v24;
  v116 = (id)0xAAAAAAAAAAAAAAAALL;
  v30 = (const __CFSet *)atomic_load((unint64_t *)&Mutable);
  CreateSortedArrayWithSet(v30, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_9::__invoke, v29, values);
  v31 = (const __CFArray *)atomic_load((unint64_t *)values);
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v116, v31);

  v115 = (id)0xAAAAAAAAAAAAAAAALL;
  v32 = (const __CFSet *)atomic_load((unint64_t *)&v123);
  CreateSortedArrayWithSet(v32, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_9::__invoke, v29, &v115);
  if (!a3)
  {
    values[0] = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
    v51 = (const void *)atomic_load((unint64_t *)&v116);
    v52 = (__CFArray *)atomic_load((unint64_t *)values);
    CFArrayAppendValue(v52, v51);
    v53 = (void *)atomic_load((unint64_t *)&v115);
    v54 = v53;
    v55 = v54;
    if (v54)
    {
      Count = CFArrayGetCount(v54);

      if (!Count)
      {
LABEL_49:
        if (a2 == 1)
        {
          v67 = (const __CFArray *)atomic_load((unint64_t *)values);
          LinesByWrapping((const __CFArray *)&v114, v67);
          do
            v68 = __ldaxr((unint64_t *)&v114);
          while (__stlxr(0, (unint64_t *)&v114));
          do
            v69 = (void *)__ldaxr((unint64_t *)values);
          while (__stlxr(v68, (unint64_t *)values));

        }
        v70 = (const __CFSet *)atomic_load((unint64_t *)&v121);
        if (CFSetGetCount(v70))
        {
          v114 = (id)0xAAAAAAAAAAAAAAAALL;
          v71 = (const __CFSet *)atomic_load((unint64_t *)&v121);
          CreateSortedArrayWithSet(v71, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_9::__invoke, v29, &v113);
          v72 = (const __CFArray *)atomic_load((unint64_t *)&v113);
          TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v114, v72);

          v73 = (const __CFArray *)atomic_load((unint64_t *)&v114);
          v74 = CFArrayGetCount(v73);
          if (v74 >= 1)
          {
            v75 = v74;
            v76 = 0;
            while (1)
            {
              v77 = (const __CFArray *)atomic_load((unint64_t *)&v114);
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v77, v76);
              FirstCharacter = GetFirstCharacter(ValueAtIndex);
              if (u_getNumericValue(FirstCharacter) > 0.0)
                break;
              if (v75 == ++v76)
                goto LABEL_112;
            }
            for (i = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]); v76; --v76)
            {
              v106 = (const __CFArray *)atomic_load((unint64_t *)&v114);
              v107 = CFArrayGetValueAtIndex(v106, 0);
              CFArrayAppendValue(i, v107);
              v108 = (__CFArray *)atomic_load((unint64_t *)&v114);
              CFArrayRemoveValueAtIndex(v108, 0);
            }
            TCFMutableArray::AppendArray<__CFArray const*>((unint64_t *)&v114, i);

          }
LABEL_112:
          v109 = (const void *)atomic_load((unint64_t *)&v114);
          v110 = (__CFArray *)atomic_load((unint64_t *)values);
          CFArrayAppendValue(v110, v109);
        }
        else
        {
          v114 = (id)0xAAAAAAAAAAAAAAAALL;
          DigitsForLanguage((const __CFString *)&v114, a7);
          if (atomic_load((unint64_t *)&v114))
          {
            v81 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
            v82 = (const __CFArray *)atomic_load((unint64_t *)&v114);
            if (v82)
            {
              v83 = CFArrayGetCount(v82);
              if (v83)
              {
                v84 = v83;
                for (j = 0; j != v84; ++j)
                {
                  v86 = (const __CFString *)CFArrayGetValueAtIndex(v82, j);
                  v87 = GetFirstCharacter(v86);
                  if (MEMORY[0x186DC0D24](a5, v87))
                    CFArrayAppendValue(v81, v86);
                }
              }
            }
            if (CFArrayGetCount(v81))
            {
              v88 = (__CFArray *)atomic_load((unint64_t *)values);
              CFArrayAppendValue(v88, v81);
            }

          }
        }

        do
          v111 = (void *)__ldaxr((unint64_t *)values);
        while (__stlxr(0, (unint64_t *)values));
        v114 = v111;
        do
          v112 = __ldaxr((unint64_t *)&v114);
        while (__stlxr(0, (unint64_t *)&v114));
        *a1 = v112;

        v50 = values[0];
        goto LABEL_118;
      }
      v57 = (void *)atomic_load((unint64_t *)&v115);
      v55 = v57;
      v58 = (__CFArray *)atomic_load((unint64_t *)values);
      CFArrayAppendValue(v58, v55);
    }

    goto LABEL_49;
  }
  v33 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v114 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
  v34 = (const __CFArray *)atomic_load((unint64_t *)&v116);
  values[0] = (void *)CFArrayGetValueAtIndex(v34, 0);
  v35 = CFArrayCreate(v23, (const void **)values, 1, v33);
  v36 = (__CFArray *)atomic_load((unint64_t *)&v114);
  CFArrayAppendValue(v36, v35);

  if (a3 == 1)
  {
    v37 = (void *)atomic_load((unint64_t *)&v115);
    v38 = v37;
    if (!v38)
    {
LABEL_28:

      goto LABEL_29;
    }
    v39 = v38;
    v40 = CFArrayGetCount((CFArrayRef)v38);

    if (v40)
    {
      values[0] = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
      v41 = (const __CFArray *)atomic_load((unint64_t *)&v114);
      v42 = (const __CFArray *)CFArrayGetValueAtIndex(v41, 0);
      TCFMutableArray::AppendArray<__CFArray const*>((unint64_t *)values, v42);
      v43 = (const __CFArray *)atomic_load((unint64_t *)&v115);
      v44 = CFArrayGetValueAtIndex(v43, 0);
      v45 = (__CFArray *)atomic_load((unint64_t *)values);
      CFArrayAppendValue(v45, v44);
      v46 = (const void *)atomic_load((unint64_t *)values);
      v47 = (__CFArray *)atomic_load((unint64_t *)&v114);
      CFArraySetValueAtIndex(v47, 0, v46);
      v38 = values[0];
      goto LABEL_28;
    }
  }
  do
LABEL_29:
    v48 = (void *)__ldaxr((unint64_t *)&v114);
  while (__stlxr(0, (unint64_t *)&v114));
  values[0] = v48;
  do
    v49 = __ldaxr((unint64_t *)values);
  while (__stlxr(0, (unint64_t *)values));
  *a1 = v49;

  v50 = v114;
LABEL_118:

  v104 = v29;
LABEL_119:

}

void TSampleManagerImp::CopySampleLettersForLanguage(CTFontSampleString,__CFString const*)const::$_0::operator()(unint64_t *a1, uint64_t a2, void *cf)
{
  CFTypeID v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  __CFArray *v11;
  void *v12;
  unint64_t v13;
  id v14;
  id v15;
  __CFString v16;

  v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID())
  {
    if (*(_DWORD *)a2)
      goto LABEL_3;
    v16.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    DigitsForLanguage(&v16, *(const void **)(a2 + 8));
    if (!atomic_load((unint64_t *)&v16))
    {

LABEL_3:
      v16.isa = cf;
      do
        v7 = __ldaxr((unint64_t *)&v16);
      while (__stlxr(0, (unint64_t *)&v16));
      *a1 = v7;
      goto LABEL_9;
    }
    v15 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v15, (CFArrayRef)cf);
    v10 = (const void *)atomic_load((unint64_t *)&v16);
    v11 = (__CFArray *)atomic_load((unint64_t *)&v15);
    CFArrayAppendValue(v11, v10);
    do
      v12 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    v14 = v12;
    do
      v13 = __ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    *a1 = v13;

  }
  else
  {
    CreateLettersFromString(&v16, cf);
    do
      v8 = __ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    *a1 = v8;
  }
LABEL_9:

}

void TSampleManager::TSampleManager(TSampleManager *this)
{
  if (qword_1ECDE7D30 != -1)
    dispatch_once_f(&qword_1ECDE7D30, 0, (dispatch_function_t)GetTheSampleManager(void)::$_0::__invoke);
  *(_QWORD *)this = qword_1ECDE7D28;
}

void TSampleManager::CopySampleString(unint64_t **a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, const __CFArray *a4@<X3>, void **a5@<X4>, unint64_t *a6@<X8>)
{
  TSampleManager *v7;
  const __CFArray *v8;
  id v9;

  TSampleManagerImp::Copy(*a1, 1, a2, a3, a4, a5, (unint64_t *)&v9);
  do
    v7 = (TSampleManager *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  TSampleManager::CreateStringWithLetters(v7, v8, a6);
}

void TSampleManager::CreateStringWithLetters(TSampleManager *this@<X0>, const __CFArray *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v5 = (void *)MEMORY[0x186DC070C](this, a2);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = -[TSampleManager countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(this);
          objc_msgSend(v6, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "componentsJoinedByString:", &stru_1E15EDAC0));
        }
        v8 = -[TSampleManager countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }
    v12 = (id)objc_msgSend(v6, "componentsJoinedByString:", CFSTR("\n"));
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

    objc_autoreleasePoolPop(v5);
  }
  else
  {
    *a3 = 0;
  }
}

void DigitsStringForLanguage(const __CFString *a1, const void *a2)
{
  void *Value;
  void *v5;
  unint64_t v7;
  void *v8;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;

  if (qword_1ECDE7D00 && (Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7D00, a2)) != 0)
  {
    v15 = Value;
    do
      v5 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
  }
  else
  {
    v15 = (id)_CFLocaleCopyNumberingSystemForLocaleIdentifier();
    if (atomic_load((unint64_t *)&v15))
      goto LABEL_21;
    CopyPreferredNumberingSystem((uint64_t *)&v14);
    do
      v7 = __ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    do
      v8 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(v7, (unint64_t *)&v15));

    if (atomic_load((unint64_t *)&v15))
    {
LABEL_21:
      do
        v5 = (void *)__ldaxr((unint64_t *)&v15);
      while (__stlxr(0, (unint64_t *)&v15));
    }
    else
    {
      v5 = 0;
    }
  }

  if (v5)
  {
    v10 = (void *)MEMORY[0x186DC070C]();
    v11 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", a2), "mutableCopy");
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v5, CFSTR("numbers"));
    v12 = (id)objc_opt_new();
    objc_msgSend(v12, "setLocale:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v11)));
    v15 = (id)objc_msgSend(v12, "stringFromNumber:", &unk_1E1617170);
    do
      v13 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    a1->isa = v13;

    objc_autoreleasePoolPop(v10);
  }
  else
  {

    a1->isa = 0;
  }
}

void std::__function::__func<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0,std::allocator<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0,std::allocator<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF908;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0,std::allocator<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF908;
  a2[1] = v2;
  return result;
}

void std::__function::__func<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0,std::allocator<SampleLettersForLanguage(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::operator()()
{
  JUMPOUT(0x186DC0CF4);
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<void const**>,std::__wrap_iter<void const**>>(char *__src, char *a2, char *a3)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  char v23;
  uint64_t v24;

  if (__src != a2 && a2 != a3)
  {
    v3 = __src;
    if (__src + 8 == a2)
    {
      v9 = *(_QWORD *)__src;
      v10 = a3 - a2;
      __src = (char *)memmove(__src, a2, a3 - a2);
      *(_QWORD *)((char *)v3 + v10) = v9;
    }
    else if (a2 + 8 == a3)
    {
      v11 = *((_QWORD *)a3 - 1);
      if (a3 - 8 != __src)
        __src = (char *)memmove(__src + 8, __src, a3 - 8 - __src);
      *v3 = v11;
    }
    else
    {
      v4 = (a2 - __src) >> 3;
      if (v4 == (a3 - a2) >> 3)
      {
        v5 = __src + 8;
        v6 = a2 + 8;
        do
        {
          v7 = *((_QWORD *)v5 - 1);
          *((_QWORD *)v5 - 1) = *((_QWORD *)v6 - 1);
          *((_QWORD *)v6 - 1) = v7;
          if (v5 == a2)
            break;
          v5 += 8;
          v8 = v6 == a3;
          v6 += 8;
        }
        while (!v8);
      }
      else
      {
        v12 = (a3 - a2) >> 3;
        v13 = (a2 - __src) >> 3;
        do
        {
          v14 = v13;
          v13 = v12;
          v12 = v14 % v12;
        }
        while (v12);
        if (v13)
        {
          v15 = &__src[8 * v13];
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            v16 = v17;
            v18 = &v15[8 * v4];
            v19 = v15;
            do
            {
              v20 = v18;
              *(_QWORD *)v19 = *(_QWORD *)v18;
              v21 = &v18[8 * v4];
              v22 = __OFSUB__(v4, (a3 - v18) >> 3);
              v24 = v4 - ((a3 - v18) >> 3);
              v23 = (v24 < 0) ^ v22;
              v18 = &__src[8 * v24];
              if (v23)
                v18 = v21;
              v19 = v20;
            }
            while (v18 != v15);
            *(_QWORD *)v20 = v16;
          }
          while (v15 != __src);
        }
      }
    }
  }
  return __src;
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t ___ZL23CreateLettersFromStringPK10__CFString_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v4 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = objc_msgSend(a2, "length");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL23CreateLettersFromStringPK10__CFString_block_invoke_2;
  v7[3] = &unk_1E15E81B0;
  v7[4] = v4;
  objc_msgSend(a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 2, v7);
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v4);
}

uint64_t ___ZL23CreateLettersFromStringPK10__CFString_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void DigitsForLanguage(const __CFString *a1, const void *a2)
{
  CFMutableArrayRef Mutable;
  const __CFString *v6;
  CFIndex Length;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  CFIndex v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  __CFString v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v17.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  v17.info = (uint64_t)Mutable;
  DigitsStringForLanguage(&v17, a2);
  if (!atomic_load((unint64_t *)&v17))
    goto LABEL_10;
  v6 = (const __CFString *)atomic_load((unint64_t *)&v17);
  v17.length = (uint64_t)v6;
  HIBYTE(v17.data) = 0;
  Length = CFStringGetLength(v6);
  v8 = operator new(0x20uLL);
  *v8 = &off_1E15E13C0;
  v8[1] = &v17.length;
  v8[2] = (char *)&v17.data + 7;
  v8[3] = &v17.info;
  v19 = v8;
  EnumerateCharactersInRange(v6, 0, Length, (uint64_t)v18);
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  if (HIBYTE(v17.data))
  {
    do
      v11 = (void *)__ldaxr((unint64_t *)&v17.info);
    while (__stlxr(0, (unint64_t *)&v17.info));
    a1->isa = v11;

    goto LABEL_19;
  }
LABEL_10:

  v17.length = (uint64_t)CFSTR("1234567890");
  LOBYTE(v17.isa) = 0;
  v12 = CFStringGetLength(CFSTR("1234567890"));
  v13 = operator new(0x20uLL);
  *v13 = &off_1E15E13C0;
  v13[1] = &v17.length;
  v13[2] = &v17;
  v13[3] = &v17.info;
  v19 = v13;
  EnumerateCharactersInRange(CFSTR("1234567890"), 0, v12, (uint64_t)v18);
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
  if (LOBYTE(v17.isa))
  {
    do
      v16 = (void *)__ldaxr((unint64_t *)&v17.info);
    while (__stlxr(0, (unint64_t *)&v17.info));
    a1->isa = v16;
  }
  else
  {
    a1->isa = 0;
  }
LABEL_19:

}

void std::__function::__func<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15E13C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E13C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<DigitsForLanguage(__CFString const*)::$_0::operator() const(__CFString const*)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::operator()(uint64_t a1, CFRange *a2)
{
  CFStringRef v3;
  CFStringRef v4;
  unint64_t *v5;
  __CFArray *v6;

  v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], **(CFStringRef **)(a1 + 8), *a2);
  if (v3)
  {
    v4 = v3;
    v5 = *(unint64_t **)(a1 + 24);
    **(_BYTE **)(a1 + 16) = 1;
    v6 = (__CFArray *)atomic_load(v5);
    CFArrayAppendValue(v6, v4);
    CFRelease(v4);
  }
}

void std::__function::__func<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0,std::allocator<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0>,BOOL ()(CFRange,unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0,std::allocator<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0>,BOOL ()(CFRange,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0,std::allocator<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0>,BOOL ()(CFRange,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF998;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0,std::allocator<LettersSpanningCharacterSet(__CFArray const*,__CFCharacterSet const*)::$_0>,BOOL ()(CFRange,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL4 v13;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  v6 = (v5 >> 2) & 1;
  if (*(_DWORD *)(v4 + 12) <= v3 && *(_DWORD *)(v4 + 16) > v3)
  {
    if (WORD1(v3))
      v7 = 0;
    else
      v7 = (*(_DWORD *)(v4 + 8) & 2) == 0;
    if (!v7)
    {
      v8 = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)v4, v3) == 0;
LABEL_22:
      v6 = !v8;
      return v6 ^ 1u;
    }
    v9 = *(_DWORD *)(v4 + 8) & 4;
    v10 = *(_QWORD *)(v4 + 24);
    if (v10)
    {
      if ((v5 & 1) != 0)
      {
        v11 = v9 >> 2;
        v12 = *(unsigned __int8 *)(v10 + (v3 >> 8));
        if (*(_BYTE *)(v10 + (v3 >> 8)))
        {
          if ((_DWORD)v12 == 255)
          {
            v11 = v9 == 0;
          }
          else
          {
            v13 = v9 == 0;
            if (((*(unsigned __int8 *)(v10 + 32 * v12 + (v3 >> 3) + 224) >> (v3 & 7)) & 1) != 0)
              v11 = v13;
          }
        }
        v8 = v11 == 0;
        goto LABEL_22;
      }
      if (((*(unsigned __int8 *)(v10 + (v3 >> 3)) >> (v3 & 7)) & 1) != 0)
        v6 = v9 == 0;
      else
        v6 = v9 != 0;
    }
    else
    {
      v6 = v9 != 0;
      if ((v5 & 1) == 0)
        v6 = v9 == 0;
    }
  }
  return v6 ^ 1u;
}

uint64_t GetFirstCharacter(const __CFString *a1)
{
  CFIndex Length;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = -1;
  Length = CFStringGetLength(a1);
  v7[0] = &off_1E15DF638;
  v7[1] = &v6;
  v8 = v7;
  EnumerateCharactersInRange(a1, 0, Length, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v6;
}

BOOL SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_7::__invoke(const __CFString *a1, const __CFString *a2)
{
  UChar32 FirstCharacter;
  double NumericValue;
  UChar32 v5;

  FirstCharacter = GetFirstCharacter(a1);
  NumericValue = u_getNumericValue(FirstCharacter);
  v5 = GetFirstCharacter(a2);
  return NumericValue == u_getNumericValue(v5);
}

uint64_t SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_8::__invoke(const __CFString *a1)
{
  void *v2;
  void *v3;
  UChar32 FirstCharacter;
  uint64_t v5;

  v2 = (void *)MEMORY[0x186DC070C]();
  v3 = (void *)MEMORY[0x1E0CB37E8];
  FirstCharacter = GetFirstCharacter(a1);
  v5 = objc_msgSend((id)objc_msgSend(v3, "numberWithDouble:", u_getNumericValue(FirstCharacter)), "hash");
  objc_autoreleasePoolPop(v2);
  return v5;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0>,void ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF6C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0>,void ()(unsigned int,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF6C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_0>,void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, int *a3)
{
  unsigned int v3;
  int i;
  const __CFString *StringWithLongCharacter;
  const __CFString *v7;

  v3 = *a2;
  for (i = *a3; i != v3; ++v3)
  {
    StringWithLongCharacter = CreateStringWithLongCharacter(v3);
    if (StringWithLongCharacter)
    {
      v7 = StringWithLongCharacter;
      SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1::operator()(*(_QWORD *)(a1 + 8), StringWithLongCharacter);
      CFRelease(v7);
    }
  }
}

CFStringRef CreateStringWithLongCharacter(unsigned int a1)
{
  CFIndex v1;
  __int16 v2;
  UniChar chars;
  __int16 v5;

  v5 = -21846;
  if (HIWORD(a1))
  {
    v2 = a1 & 0x3FF | 0xDC00;
    a1 = (a1 >> 10) - 10304;
    v5 = v2;
    v1 = 2;
  }
  else
  {
    v1 = 1;
  }
  chars = a1;
  return CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &chars, v1);
}

void SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1::operator()(uint64_t a1, CFStringRef theString)
{
  UChar32 FirstCharacter;
  int v5;
  const __CFCharacterSet *v6;
  const __CFAllocator *v7;
  __CFString *MutableCopy;
  const __CFString *v9;
  CFIndex Length;
  uint64_t v11;
  __CFSet *v12;
  __CFString *v13;
  const __CFString *v14;
  const __CFSet *v15;
  __CFSet *v16;
  __CFSet *v17;
  __CFSet *v18;
  const __CFSet *v19;
  const __CFSet *v20;
  const __CFCharacterSet *v21;
  CFRange v22;

  if (!**(_BYTE **)a1)
  {
    if (CFStringGetLength(theString))
    {
      FirstCharacter = GetFirstCharacter(theString);
      v5 = 1 << u_charType(FirstCharacter);
      if ((v5 & 0x226) != 0)
      {
        if ((v5 & 0x200) != 0)
        {
          v17 = (__CFSet *)atomic_load(*(unint64_t **)(a1 + 8));
          CFSetAddValue(v17, theString);
        }
        else
        {
          if ((v5 & 6) != 0)
          {
            v6 = **(const __CFCharacterSet ***)(a1 + 16);
            v21 = v6;
            v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
            if (MutableCopy)
            {
              v9 = MutableCopy;
              CFStringCapitalize(MutableCopy, 0);
              Length = CFStringGetLength(v9);
              v22.location = 0;
              v22.length = Length;
              RangeOfCharactersFromSet(v9, v6, v22, 0);
              if (v11 == Length)
              {
                v12 = (__CFSet *)atomic_load(*(unint64_t **)(a1 + 24));
                CFSetAddValue(v12, v9);
              }
              CFRelease(v9);
            }
            v13 = CFStringCreateMutableCopy(v7, 0, theString);
            if (v13)
            {
              v14 = v13;
              CFStringLowercase(v13, 0);
              v15 = (const __CFSet *)atomic_load(*(unint64_t **)(a1 + 24));
              if (!CFSetContainsValue(v15, v14)
                && SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1::operator() const(__CFString const*)::{lambda(__CFString const*)#1}::operator()(&v21, v14))
              {
                v16 = (__CFSet *)atomic_load(*(unint64_t **)(a1 + 32));
                CFSetAddValue(v16, v14);
              }
              CFRelease(v14);
            }
          }
          else
          {
            v18 = (__CFSet *)atomic_load(*(unint64_t **)(a1 + 24));
            CFSetAddValue(v18, theString);
          }
          v19 = (const __CFSet *)atomic_load(*(unint64_t **)(a1 + 24));
          if (CFSetGetCount(v19) == 80)
          {
            v20 = (const __CFSet *)atomic_load(*(unint64_t **)(a1 + 32));
            if (!CFSetGetCount(v20))
              **(_BYTE **)a1 = 1;
          }
        }
      }
    }
  }
}

BOOL SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1::operator() const(__CFString const*)::{lambda(__CFString const*)#1}::operator()(const __CFCharacterSet **a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  CFRange v7;

  Length = CFStringGetLength(theString);
  v7.location = 0;
  v7.length = Length;
  RangeOfCharactersFromSet(theString, *a1, v7, 0);
  return v5 == Length;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1>,void ()(__CFString const*)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1>,void ()(__CFString const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15DF710;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1>,void ()(__CFString const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15DF710;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1>,void ()(__CFString const*)>::operator()(uint64_t a1, CFStringRef *a2)
{
  SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_1::operator()(a1 + 8, *a2);
}

CFComparisonResult SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_9::__invoke(const __CFString *a1, const __CFString *a2, const __CFLocale *a3)
{
  CFRange v7;

  v7.length = CFStringGetLength(a1);
  v7.location = 0;
  return CFStringCompareWithOptionsAndLocale(a1, a2, v7, 0x20uLL, a3);
}

void std::__function::__func<GetFirstCharacter(__CFString const*)::$_0,std::allocator<GetFirstCharacter(__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<GetFirstCharacter(__CFString const*)::$_0,std::allocator<GetFirstCharacter(__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<GetFirstCharacter(__CFString const*)::$_0,std::allocator<GetFirstCharacter(__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<GetFirstCharacter(__CFString const*)::$_0,std::allocator<GetFirstCharacter(__CFString const*)::$_0>,void ()(CFRange,unsigned int,BOOL *)>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, _BYTE **a4)
{
  _BYTE *v4;

  v4 = *a4;
  **(_DWORD **)(result + 8) = *a3;
  *v4 = 1;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1},std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1}>,void ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1},std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1}>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15E1408;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1},std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1}>,void ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E1408;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1},std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_2::operator() const(int,std::function<BOOL ()(unsigned int)>)::{lambda(unsigned int,unsigned int)#1}>,void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, int *a3)
{
  unsigned int v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  __CFString *StringWithLongCharacter;
  __CFArray *v10;
  _DWORD *v11;
  unsigned int v13;

  v3 = *a2;
  v4 = *a3;
  if (*a2 != *a3 && **(_DWORD **)(a1 + 8) >= 1)
  {
    do
    {
      v7 = *(_QWORD *)(a1 + 16);
      v13 = v3;
      v8 = *(_QWORD *)(v7 + 24);
      if (!v8)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1848E4BFCLL);
      }
      if ((*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)v8 + 48))(v8, &v13))
      {
        StringWithLongCharacter = (__CFString *)CreateStringWithLongCharacter(v3);
        if (StringWithLongCharacter)
        {
          v10 = (__CFArray *)atomic_load(*(unint64_t **)(a1 + 24));
          CFArrayAppendValue(v10, StringWithLongCharacter);
          ++**(_DWORD **)(a1 + 32);
          v11 = *(_DWORD **)(a1 + 8);
          if ((*v11)-- == 1)
          {

            return;
          }
        }

      }
      ++v3;
    }
    while (v4 != v3);
  }
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3>,BOOL ()(unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E15DF758;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3>,BOOL ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E15DF758;
}

BOOL std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_3>,BOOL ()(unsigned int)>::operator()(uint64_t a1, UChar32 *a2)
{
  UChar32 v2;

  v2 = *a2;
  return ((1 << u_charType(*a2)) & 0xE00) != 0 && u_getNumericValue(v2) != 0.0;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4>,BOOL ()(unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF7A0;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4>,BOOL ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF7A0;
}

BOOL std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_4>,BOOL ()(unsigned int)>::operator()(uint64_t a1, UChar32 *a2)
{
  return ((1 << u_charType(*a2)) & 0xE00) != 0;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5>,BOOL ()(unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF7E8;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5>,BOOL ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF7E8;
}

uint64_t std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_5>,BOOL ()(unsigned int)>::operator()(uint64_t a1, UChar32 *a2)
{
  unsigned int v2;
  int v3;
  _BOOL4 v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a2;
  v3 = 1 << u_charType(*a2);
  v4 = v2 < 0xF0000 || v2 - 1113088 < 0x3FE;
  v5 = v2 >> 11 >= 0x1F && v4;
  if (v2 >= 0xE000)
    v6 = v5;
  else
    v6 = 1;
  if ((v3 & 0xF000000) != 0)
    return v6;
  else
    return 0;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6>,BOOL ()(unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15DF830;
  return result;
}

void std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6>,BOOL ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15DF830;
}

uint64_t std::__function::__func<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6,std::allocator<SampleLettersFromUSet(TSampleManager::Sample,CTFontSampleString,__CFCharacterSet const*,USet const*,UErrorCode *,__CFString const*)::$_6>,BOOL ()(unsigned int)>::operator()(uint64_t a1, UChar32 *a2)
{
  unsigned int v2;
  int8_t v3;
  uint64_t result;
  _BOOL4 v5;

  v2 = *a2;
  v3 = u_charType(*a2);
  result = 1;
  if (((1 << v3) & 0x7FE01) != 0)
  {
    if (v2 >= 0xE000)
    {
      v5 = v2 - 1114110 < 0xFFFFFC02;
      if (v2 < 0xF0000)
        v5 = 0;
      return v2 >> 11 < 0x1F || v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void GetTheSampleManager(void)::$_0::__invoke()
{
  unint64_t *v0;
  unint64_t v1;
  void *v2;
  void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  unint64_t v7;
  void *v8;
  id v9;
  id values;

  v0 = (unint64_t *)operator new();
  *v0 = 0;
  _MergedGlobals_29 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("LocaleToSample"));
  qword_1ECDE7D00 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("LocaleToNumberingSystem"));
  qword_1ECDE7D08 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("PostScriptNameToSample"));
  qword_1ECDE7D10 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("LongSamples"));
  qword_1ECDE7D18 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("ShortSamples"));
  qword_1ECDE7D20 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)&unk_1E16077F0, CFSTR("VeryShortSamples"));
  CopyPreferredAndSystemLanguages((unint64_t *)&values);
  do
    v1 = __ldaxr((unint64_t *)&values);
  while (__stlxr(0, (unint64_t *)&values));
  do
    v2 = (void *)__ldaxr(v0);
  while (__stlxr(v1, v0));

  v3 = (void *)atomic_load(v0);
  v4 = v3;
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);

    if (Count)
      goto LABEL_12;
  }
  else
  {

  }
  values = CFSTR("en");
  v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  do
    v7 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  do
    v8 = (void *)__ldaxr(v0);
  while (__stlxr(v7, v0));

LABEL_12:
  qword_1ECDE7D28 = (uint64_t)v0;
}

void CopyConvertedMorxFromGSUB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  const __CFData *v5;
  const __CFData *v6;
  TBaseFont *v7;
  unint64_t *v8;
  unint64_t *v9;
  const UInt8 *BytePtr;
  CFIndex Length;
  __int128 v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t FeatureVariationsTable;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  _OWORD *v24;
  void **v25;
  unsigned __int16 *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  char v41;
  BOOL v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  id v49;
  _QWORD *v50;
  _QWORD *v51;
  id v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  __int128 v56;
  const __CFAllocator *v57;
  __CFString *Mutable;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  void *v62;
  __CFString *v63;
  const __CFString *v64;
  __CFString *v65;
  CFIndex v66;
  CFIndex v67;
  char *v68;
  void *v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  int *v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  CFIndex v80;
  CFIndex v81;
  CFIndex v82;
  UniChar *v83;
  CFMutableStringRef v84;
  id *v85;
  id *v86;
  void **v87;
  id *v88;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  const __CFData *ExternalRepresentation;
  const __CFData *v97;
  int64_t v98;
  CFIndex v99;
  unint64_t v100;
  void *v101;
  __CFData *v102;
  __CFData *v103;
  __CFData *v104;
  const __CFData *v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  __CFData *v108;
  __CFData *v109;
  _anonymous_namespace_ *v110;
  unint64_t v111;
  void *v112;
  unint64_t v113;
  uint64_t InitializedGraphicsFont;
  void **v115;
  void **v116;
  _OWORD *v117;
  CFAllocatorRef alloc;
  TBaseFont *v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  id v125[2];
  void *__p[2];
  int v127;
  int v128;
  id v129[2];
  void *v130[2];
  unint64_t v131;
  unsigned __int8 v132;
  char v133;
  unint64_t v134;
  const UInt8 *v135;
  void *__b[256];
  CFIndex numChars;
  CFMutableStringRef theString;
  void *v139[2];
  _BYTE v140[24];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  _QWORD v148[2];
  void *v149;
  void **v150;
  uint64_t v151;
  _OWORD v152[1770];
  _OWORD *v153;
  void *v154[52];
  void **v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _QWORD v160[3];
  _QWORD *v161;
  _BYTE v162[24];
  _BYTE *v163;
  _BYTE v164[36];
  uint64_t v165;
  CFRange v166;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = (TBaseFont *)v2;
  v9 = v8;
  v165 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(v5);
  Length = CFDataGetLength(v6);
  v123 = (unint64_t)&BytePtr[Length];
  if (BytePtr + 10 > &BytePtr[Length]
    || bswap32(*(unsigned __int16 *)BytePtr) >> 16 > 1
    || *((_WORD *)BytePtr + 1) && (unint64_t)(BytePtr + 14) > v123)
  {
    *v9 = 0;
    return;
  }
  v122 = v4;
  memcpy(v154, &unk_18494F9A0, sizeof(v154));
  memset(v154, 0, 32);
  LODWORD(v154[4]) = 1065353216;
  memset(&v154[5], 0, 32);
  LODWORD(v154[9]) = 1065353216;
  v154[11] = 0;
  v154[10] = &v154[11];
  v154[15] = 0;
  v154[14] = 0;
  v154[12] = 0;
  v154[13] = &v154[14];
  memset(&v154[17], 0, 40);
  v154[16] = &v154[17];
  v155 = &v154[22];
  v134 = v123;
  v135 = BytePtr;
  qmemcpy(v164, "TLFDrehclryckerginahanakntalrbehbara", sizeof(v164));
  v133 = -86;
  v132 = 1;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v152[28] = v12;
  v152[29] = v12;
  v152[26] = v12;
  v152[27] = v12;
  v152[24] = v12;
  v152[25] = v12;
  v152[22] = v12;
  v152[23] = v12;
  v152[20] = v12;
  v152[21] = v12;
  v152[18] = v12;
  v152[19] = v12;
  v152[16] = v12;
  v152[17] = v12;
  v152[15] = v12;
  v152[14] = v12;
  v152[13] = v12;
  v152[12] = v12;
  v152[11] = v12;
  v152[10] = v12;
  v152[9] = v12;
  v152[8] = v12;
  v152[7] = v12;
  v152[6] = v12;
  v152[5] = v12;
  v152[4] = v12;
  v152[3] = v12;
  v152[2] = v12;
  v152[1] = v12;
  v152[0] = v12;
  v150 = 0;
  v149 = 0;
  v151 = 0;
  *(_QWORD *)&v152[30] = v152;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E15DF518;
  v13[1] = v164;
  v13[2] = &v132;
  v13[3] = &v149;
  v163 = v13;
  v14 = OTL::GCommon::IterateScriptTables((uint64_t)BytePtr, v123, (uint64_t)v162);
  v15 = v163;
  if (v163 == v162)
  {
    v16 = 4;
    v15 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_10;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_10:
  if (v132)
    v17 = v14;
  else
    v17 = 0;
  if (v17 != 1)
    goto LABEL_24;
  FeatureVariationsTable = OTL::GCommon::GetFeatureVariationsTable((uint64_t)BytePtr, v123);
  if (!FeatureVariationsTable)
    goto LABEL_25;
  v160[0] = &off_1E15DF560;
  v160[1] = &v132;
  v161 = v160;
  v19 = OTL::GCommon::IterateConditionSetTables((uint64_t)BytePtr, FeatureVariationsTable, v123, (uint64_t)v160);
  v20 = v161;
  if (v161 == v160)
  {
    v21 = 4;
    v20 = v160;
  }
  else
  {
    if (!v161)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_20:
  if (v132)
    v22 = v19;
  else
    v22 = 0;
  if (v22 == 1)
  {
LABEL_25:
    v121 = v9;
    *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__b[59] = v23;
    *(_OWORD *)&__b[61] = v23;
    *(_OWORD *)&__b[55] = v23;
    *(_OWORD *)&__b[57] = v23;
    *(_OWORD *)&__b[51] = v23;
    *(_OWORD *)&__b[53] = v23;
    *(_OWORD *)&__b[47] = v23;
    *(_OWORD *)&__b[49] = v23;
    *(_OWORD *)&__b[43] = v23;
    *(_OWORD *)&__b[45] = v23;
    *(_OWORD *)&__b[39] = v23;
    *(_OWORD *)&__b[41] = v23;
    *(_OWORD *)&__b[35] = v23;
    *(_OWORD *)&__b[37] = v23;
    *(_OWORD *)&__b[33] = v23;
    *(_OWORD *)&__b[31] = v23;
    *(_OWORD *)&__b[29] = v23;
    *(_OWORD *)&__b[27] = v23;
    *(_OWORD *)&__b[25] = v23;
    *(_OWORD *)&__b[23] = v23;
    *(_OWORD *)&__b[21] = v23;
    *(_OWORD *)&__b[19] = v23;
    *(_OWORD *)&__b[17] = v23;
    *(_OWORD *)&__b[15] = v23;
    *(_OWORD *)&__b[13] = v23;
    *(_OWORD *)&__b[11] = v23;
    *(_OWORD *)&__b[9] = v23;
    *(_OWORD *)&__b[7] = v23;
    *(_OWORD *)&__b[5] = v23;
    *(_OWORD *)&__b[3] = v23;
    memset(__b, 0, 24);
    v120 = v7;
    __b[63] = &__b[3];
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)v140 = 0u;
    *(_QWORD *)&v140[16] = 0xAAAAAAAA3F800000;
    *(_OWORD *)v129 = 0u;
    *(_OWORD *)v130 = 0u;
    v131 = 0xAAAAAAAA3F800000;
    v24 = v149;
    v25 = v150;
    if (v149 == v150)
    {
      *(_OWORD *)v125 = 0uLL;
      *(_OWORD *)__p = 0uLL;
      v127 = 1065353216;
      v128 = -1431655766;
      v40 = 1;
      v41 = 1;
      goto LABEL_49;
    }
    while (1)
    {
      *(_OWORD *)v125 = *v24;
      v26 = (unsigned __int16 *)v125[1];
      v27 = operator new(0x30uLL);
      *v27 = &off_1E15DF5A8;
      v27[1] = &v132;
      v27[2] = __b;
      v27[3] = v139;
      v27[4] = v125;
      v27[5] = v129;
      v159 = v27;
      v28 = OTL::GCommon::IterateLangSysTables((unint64_t)BytePtr, v26, v123, (uint64_t)v158);
      v29 = v159;
      if (v159 == v158)
      {
        v29 = v158;
        v30 = 4;
      }
      else
      {
        if (!v159)
          goto LABEL_31;
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_31:
      if (!v28 || !v132)
      {
        v43 = 0;
        goto LABEL_60;
      }
      if (++v24 == (_OWORD *)v25)
      {
        v31 = (char *)__b[1];
        *(_OWORD *)v125 = 0u;
        *(_OWORD *)__p = 0u;
        v127 = 1065353216;
        v128 = -1431655766;
        if (__b[0] == __b[1])
        {
          v40 = 1;
          v41 = 1;
          goto LABEL_49;
        }
        v32 = (char *)__b[0] + 16;
        while (2)
        {
          v124 = *((_OWORD *)v32 - 1);
          v34 = v134;
          v33 = (unint64_t)v135;
          v35 = *((_QWORD *)&v124 + 1);
          v36 = operator new(0x50uLL);
          *v36 = &off_1E15DF5F0;
          v36[1] = &v124;
          v36[2] = &v132;
          v36[3] = v129;
          v36[4] = v139;
          v36[5] = v125;
          v36[6] = &v135;
          v36[7] = &v134;
          v36[8] = v154;
          v36[9] = &v133;
          v157 = v36;
          v37 = OTL::GCommon::IterateFeatureTables(v33, v35, v34, (uint64_t)v156);
          v38 = v157;
          if (v157 == v156)
          {
            v38 = v156;
            v39 = 4;
LABEL_40:
            (*(void (**)(void))(*v38 + 8 * v39))();
          }
          else if (v157)
          {
            v39 = 5;
            goto LABEL_40;
          }
          if ((v37 & 1) != 0)
          {
            v40 = v132;
            v41 = 1;
            if (!v132)
              goto LABEL_49;
            v42 = v32 == v31;
            v32 += 16;
            if (v42)
              goto LABEL_49;
            continue;
          }
          break;
        }
        v41 = 0;
        v40 = v132;
LABEL_49:
        if (v40)
          v43 = v41;
        else
          v43 = 0;
        v44 = __p[0];
        if (__p[0])
        {
          do
          {
            v45 = (_QWORD *)*v44;
            v46 = (_QWORD *)v44[5];
            if (v46)
            {
              do
              {
                v47 = (_QWORD *)*v46;
                operator delete(v46);
                v46 = v47;
              }
              while (v47);
            }
            v48 = (void *)v44[3];
            v44[3] = 0;
            if (v48)
              operator delete(v48);
            operator delete(v44);
            v44 = v45;
          }
          while (v45);
        }
        v49 = v125[0];
        v125[0] = 0;
        if (v49)
          operator delete(v49);
LABEL_60:
        v9 = v121;
        v50 = v130[0];
        if (v130[0])
        {
          do
          {
            v51 = (_QWORD *)*v50;
            operator delete(v50);
            v50 = v51;
          }
          while (v51);
        }
        v52 = v129[0];
        v129[0] = 0;
        if (v52)
          operator delete(v52);
        v53 = *(_QWORD **)v140;
        if (*(_QWORD *)v140)
        {
          do
          {
            v54 = (_QWORD *)*v53;
            operator delete(v53);
            v53 = v54;
          }
          while (v54);
        }
        v55 = v139[0];
        v139[0] = 0;
        if (v55)
          operator delete(v55);
        if (__b[0])
        {
          __b[1] = __b[0];
          if (&__b[3] > __b[0] || &__b[63] <= __b[0])
            operator delete(__b[0]);
        }
        std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v149);
        if ((v43 & 1) == 0)
          goto LABEL_117;
        memset(v152, 170, sizeof(v152));
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v153 = v152;
        {
          v129[0] = 0;
          if (v154[19] == v154[20])
            goto LABEL_154;
          *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v146 = v56;
          v145 = v56;
          v144 = v56;
          v143 = v56;
          v142 = v56;
          v141 = v56;
          *(_OWORD *)&v140[8] = v56;
          v147 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)v140 = 0;
          v139[0] = 0;
          v139[1] = 0;
          v148[0] = &v140[8];
          memset(__b, 170, sizeof(__b));
          v57 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          numChars = 0;
          Mutable = CFStringCreateMutable(v57, 0);
          theString = Mutable;
          v59 = (unint64_t *)v154[19];
          v60 = (unint64_t *)v154[20];
          if (v154[19] != v154[20])
          {
            alloc = v57;
            v61 = 0;
            while (1)
            {
              v62 = (void *)atomic_load(v59);
              v63 = v62;
              v64 = v63;
              if (!v64)
                break;
              v65 = (__CFString *)v64;
              v66 = CFStringGetLength(v64);

              if (!v66)
                goto LABEL_84;
              if (v61 >= 0x10000 || (v67 = v66 + v61, v66 + v61 >= 0x10000))
              {
                *v121 = 0;

                std::vector<LtagStringRange,TInlineBufferAllocator<LtagStringRange,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v139);
                goto LABEL_157;
              }
              v68 = (char *)v139[1];
              if (v139[1] >= (void *)*(_QWORD *)v140)
              {
                v70 = ((char *)v139[1] - (char *)v139[0]) >> 2;
                if ((unint64_t)(v70 + 1) >> 62)
                  abort();
                v71 = (uint64_t)(*(_QWORD *)v140 - (unint64_t)v139[0]) >> 1;
                if (v71 <= v70 + 1)
                  v71 = v70 + 1;
                if (*(_QWORD *)v140 - (unint64_t)v139[0] >= 0x7FFFFFFFFFFFFFFCLL)
                  v72 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v72 = v71;
                if (v72)
                {
                  v73 = (char *)v148[0];
                  if (v148[0] + 4 * v72 <= (unint64_t)v148)
                  {
                    v148[0] += 4 * v72;
                  }
                  else
                  {
                    if (v72 >> 62)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v73 = (char *)operator new(4 * v72);
                  }
                }
                else
                {
                  v73 = 0;
                }
                v74 = (int *)&v73[4 * v70];
                *v74 = (unsigned __int16)v61 | ((unsigned __int16)v66 << 16);
                v69 = v74 + 1;
                v75 = (char *)v139[1];
                v76 = (char *)v139[0];
                if (v139[1] != v139[0])
                {
                  do
                  {
                    v77 = *((_DWORD *)v75 - 1);
                    v75 -= 4;
                    *--v74 = v77;
                  }
                  while (v75 != v76);
                  v75 = (char *)v139[0];
                }
                v139[0] = v74;
                v139[1] = v69;
                v78 = *(_QWORD *)v140;
                *(_QWORD *)v140 = &v73[4 * v72];
                if (v75)
                {
                  if (&v140[8] <= v75 && v148 > (_QWORD *)v75)
                  {
                    if (v78 == v148[0])
                      v148[0] = v75;
                  }
                  else
                  {
                    operator delete(v75);
                  }
                }
              }
              else
              {
                *(_DWORD *)v139[1] = (unsigned __int16)v61 | ((unsigned __int16)v66 << 16);
                v69 = v68 + 4;
              }
              v139[1] = v69;
              v80 = CFStringGetLength(v63);
              v81 = numChars;
              if (v80 < 1025)
              {
                v82 = v80;
                if (numChars + v80 >= 1025)
                {
                  CFStringAppendCharacters(theString, (const UniChar *)__b, numChars);
                  v81 = 0;
                  numChars = 0;
                }
                v83 = (UniChar *)__b + v81;
                v166.location = 0;
                v166.length = v82;
                CFStringGetCharacters(v63, v166, v83);
                numChars += v82;
              }
              else
              {
                if (numChars)
                {
                  CFStringAppendCharacters(theString, (const UniChar *)__b, numChars);
                  numChars = 0;
                }
                CFStringAppend(theString, v63);
              }
LABEL_115:

              ++v59;
              v61 = v67;
              if (v59 == v60)
              {
                v84 = theString;
                v57 = alloc;
                goto LABEL_140;
              }
            }

LABEL_84:
            v67 = v61;
            goto LABEL_115;
          }
          v84 = Mutable;
LABEL_140:
          if (numChars)
          {
            CFStringAppendCharacters(v84, (const UniChar *)__b, numChars);
            numChars = 0;
            v84 = theString;
          }
          theString = 0;
          ExternalRepresentation = CFStringCreateExternalRepresentation(v57, v84, 0x600u, 0);
          v97 = ExternalRepresentation;
          if (ExternalRepresentation)
          {
            v98 = (char *)v139[1] - (char *)v139[0] + 12;
            v99 = CFDataGetLength(ExternalRepresentation);
            v125[0] = CFDataCreateMutable(v57, v98 + v99);
            do
              v100 = __ldaxr((unint64_t *)v125);
            while (__stlxr(0, (unint64_t *)v125));
            do
              v101 = (void *)__ldaxr((unint64_t *)v129);
            while (__stlxr(v100, (unint64_t *)v129));

            v102 = (__CFData *)atomic_load((unint64_t *)v129);
            LODWORD(v125[0]) = 0x1000000;
            CFDataAppendBytes(v102, (const UInt8 *)v125, 4);
            v103 = (__CFData *)atomic_load((unint64_t *)v129);
            LODWORD(v125[0]) = 0;
            CFDataAppendBytes(v103, (const UInt8 *)v125, 4);
            v104 = (__CFData *)atomic_load((unint64_t *)v129);
            LODWORD(v125[0]) = bswap32((unint64_t)((char *)v139[1] - (char *)v139[0]) >> 2);
            CFDataAppendBytes(v104, (const UInt8 *)v125, 4);
            v106 = (unsigned __int16 *)v139[0];
            v107 = (unsigned __int16 *)v139[1];
            while (v106 != v107)
            {
              v108 = (__CFData *)atomic_load((unint64_t *)v129);
              LOWORD(v125[0]) = bswap32(*v106 + (_DWORD)v98) >> 16;
              CFDataAppendBytes(v108, (const UInt8 *)v125, 2);
              v109 = (__CFData *)atomic_load((unint64_t *)v129);
              LOWORD(v125[0]) = bswap32(v106[1]) >> 16;
              CFDataAppendBytes(v109, (const UInt8 *)v125, 2);
              v106 += 2;
            }
            v110 = (_anonymous_namespace_ *)atomic_load((unint64_t *)v129);
            do
              v111 = __ldaxr((unint64_t *)v129);
            while (__stlxr(0, (unint64_t *)v129));
            do
              v112 = (void *)__ldaxr(v122);
            while (__stlxr(v111, v122));

          }
          else
          {
            *v121 = 0;
          }

          std::vector<LtagStringRange,TInlineBufferAllocator<LtagStringRange,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v139);
          v9 = v121;
          if (v97)
          {
LABEL_154:
            v113 = *((_QWORD *)v120 + 25);
            if (!v113)
            {
              InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v120);
              v113 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v120 + 872))(v120, InitializedGraphicsFont);
            }
          }
LABEL_157:

        }
        else
        {
          *v121 = 0;
        }
        v115 = (void **)v149;
        if (v149)
        {
          v116 = v150;
          v117 = v149;
          if (v150 != v149)
          {
            do
            {
              v116 -= 118;
            }
            while (v116 != v115);
            v117 = v149;
          }
          v150 = v115;
          if (v152 > v117 || &v153 <= (_OWORD **)v117)
            operator delete(v117);
        }
        goto LABEL_118;
      }
    }
  }
LABEL_24:
  std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v149);
LABEL_117:
  *v9 = 0;
LABEL_118:
  v85 = (id *)v154[19];
  if (v154[19])
  {
    v86 = (id *)v154[20];
    v87 = (void **)v154[19];
    if (v154[20] != v154[19])
    {
      do
      {
        v88 = v86 - 1;

        v86 = v88;
      }
      while (v88 != v85);
      v87 = (void **)v154[19];
    }
    v154[20] = v85;
    if (&v154[22] <= v87 && &v155 > (void ***)v87)
    {
      if (v154[21] == v155)
        v155 = v87;
    }
    else
    {
      operator delete(v87);
    }
  }
  std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::destroy((_QWORD *)v154[17]);
  std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy((_QWORD *)v154[14]);
  std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::destroy((_QWORD *)v154[11]);
  v90 = v154[7];
  if (v154[7])
  {
    do
    {
      v91 = (_QWORD *)*v90;
      operator delete(v90);
      v90 = v91;
    }
    while (v91);
  }
  v92 = v154[5];
  v154[5] = 0;
  if (v92)
    operator delete(v92);
  v93 = v154[2];
  if (v154[2])
  {
    do
    {
      v94 = (_QWORD *)*v93;
      std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)(v93 + 3));
      operator delete(v93);
      v93 = v94;
    }
    while (v94);
  }
  v95 = v154[0];
  v154[0] = 0;
  if (v95)
    operator delete(v95);
}

uint64_t `anonymous namespace'::MorxTableBuilder::From(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  TBaseFont *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t (**v23)();
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  unint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t **v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  const __CFArray *v47;
  void *ValueAtIndex;
  id v49;
  unint64_t *v50;
  unint64_t *v51;
  void *v52;
  id v53;
  void *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t *v75;
  char *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v86;
  BOOL v87;
  unint64_t v89;
  uint8x8_t v90;
  unint64_t v91;
  void **v92;
  _QWORD *v93;
  unint64_t v94;
  float v95;
  float v96;
  _BOOL8 v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const __CFData *CommonTable;
  __int128 v107;
  id *v108;
  uint64_t v109;
  uint64_t (**v110)();
  unsigned __int16 *v111;
  unsigned __int16 *v112;
  int v113;
  int v114;
  unsigned __int16 *v115;
  int v116;
  unsigned __int16 *v117;
  unint64_t v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  unsigned __int16 *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  BOOL v126;
  _QWORD *v127;
  char v128;
  _QWORD *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  __n128 *v134;
  __n128 *v135;
  __n128 *v136;
  __n128 v137;
  __n128 v138;
  void *v139;
  __n128 *v140;
  __n128 *v141;
  uint64_t v142;
  uint64_t v143;
  __n128 *v144;
  __n128 *v145;
  __int8 *v146;
  int v147;
  __n128 *v148;
  char *v149;
  __n128 v150;
  __n128 *v151;
  void *v152;
  uint64_t **v153;
  uint64_t **v154;
  uint64_t **v155;
  __n128 *v156;
  unsigned __int32 v157;
  BOOL v158;
  __n128 *v160;
  __int128 v161;
  uint64_t InitializedGraphicsFont;
  __n128 *v163;
  __n128 *v164;
  unint64_t v165;
  __n128 *v166;
  unint64_t v167;
  unsigned __int16 *v168;
  unsigned __int16 *v169;
  unint64_t v170;
  __n128 *v171;
  __n128 *v172;
  unint64_t v173;
  int v174;
  int v176;
  id *v177;
  id *v178;
  id *v179;
  id *v180;
  id *v181;
  id *v182;
  unsigned __int16 *v183;
  unsigned __int16 *v184;
  int v185;
  int v186;
  int v187;
  unsigned __int16 *v188;
  __n128 *v189;
  int v190;
  char *v191;
  __n128 *v192;
  unsigned __int16 v193;
  __int16 v194;
  unsigned __int32 v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  int64x2_t v205;
  id v206;
  unsigned __int16 v207;
  __int16 v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  int v217;
  int64x2_t v218;
  id v219;
  unsigned int v220;
  int v221;
  _BOOL4 v222;
  BOOL v223;
  unint64_t *v224;
  unint64_t v225;
  void *v226;
  __int128 v227;
  int v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  int64_t v235;
  uint64_t v236;
  _BYTE *v237;
  unsigned __int16 *v239;
  unsigned __int16 *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  BOOL v244;
  _QWORD *v245;
  uint64_t v246;
  void **v247;
  uint64_t v248;
  int v249;
  _BOOL4 v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  __n128 *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const void *v260;
  size_t v261;
  _QWORD *v262;
  uint64_t v263;
  const void *v264;
  __n128 *v265;
  unint64_t v266;
  uint64_t v267;
  __int128 v268;
  __n128 *v269;
  __n128 *v270;
  __n128 *v271;
  int64x2_t v272;
  int v273;
  char *v274;
  char *v275;
  int v276;
  char v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  int64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  int64x2_t v290;
  id *v291;
  void *v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  int64_t v296;
  unint64_t v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t *v302;
  unint64_t *v303;
  unint64_t v304;
  int64x2_t v305;
  id *v306;
  uint64_t v307;
  __CFData *v308;
  uint64_t v309;
  unsigned __int16 *v310;
  const void *v311;
  int64_t v312;
  unsigned __int16 *v313;
  char *v314;
  int64_t v315;
  unint64_t v316;
  unint64_t v317;
  _QWORD *v318;
  int64_t v319;
  unint64_t v320;
  unint64_t v321;
  _QWORD *v322;
  __int128 v323;
  __int128 v324;
  __int16 ActionIndex;
  _WORD *v326;
  unint64_t v327;
  __int16 v328;
  unint64_t v329;
  unint64_t v330;
  int64_t v331;
  uint64_t v332;
  _WORD *v333;
  unint64_t v334;
  char *v335;
  void *v336;
  char *v337;
  char *v338;
  __int16 v339;
  void *v340;
  _QWORD *v341;
  int64_t v342;
  char *v343;
  id *v344;
  uint64_t v345;
  uint64_t v346;
  unsigned __int16 *v347;
  const void *v348;
  int64_t v349;
  void **v350;
  char *v351;
  id *v352;
  int64_t v353;
  char *v354;
  id *v355;
  uint64_t v356;
  uint64_t v357;
  unsigned __int16 *v358;
  const void *v359;
  int64_t v360;
  char *v361;
  char *v362;
  _QWORD *v363;
  int64_t v364;
  char *v365;
  __CFData *SingleSubstitutionLKTHandle;
  id *v367;
  uint64_t v368;
  __int128 v370;
  void *v371;
  const __CFData *v372;
  const __CFData *v373;
  const SFNTLookupTable *v374;
  uint64_t v375;
  __int128 v376;
  _QWORD *n128_u64;
  int v378;
  _WORD *v379;
  void **v380;
  void **v381;
  _BYTE *v382;
  BOOL v383;
  _BYTE *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v388;
  unint64_t *v389;
  unint64_t *v390;
  unint64_t *v391;
  unint64_t v392;
  int64x2_t v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t *v396;
  unint64_t *v397;
  unint64_t v398;
  int64x2_t v399;
  id v400;
  void *v401;
  unint64_t *v402;
  unint64_t v403;
  int64_t v404;
  unint64_t v405;
  unint64_t v406;
  _QWORD *v407;
  id v408;
  void *v409;
  void *v410;
  int64_t v411;
  unint64_t v412;
  unint64_t v413;
  _QWORD *v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t *v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  int64x2_t v423;
  id v424;
  const __CFData *v425;
  void *v426;
  id v427;
  const __CFData *v428;
  const __CFData *v429;
  const UInt8 *v430;
  SFNTLookupTable *v431;
  void **v432;
  uint64_t v433;
  unint64_t v434;
  void *v435;
  unsigned __int16 *v436;
  uint64_t v437;
  const void *v438;
  int64_t v439;
  char *v440;
  char *v441;
  __CFData *v442;
  unint64_t v443;
  void *v444;
  _QWORD *v445;
  int64_t v446;
  char *v447;
  unint64_t v448;
  void *v449;
  _QWORD *v450;
  uint64_t v451;
  const __CFData *v452;
  const __CFData *v453;
  const __CFData *v454;
  const __CFData *v455;
  unint64_t *v456;
  unint64_t v457;
  void *v458;
  int64_t v459;
  unint64_t v460;
  unint64_t v461;
  _QWORD *v462;
  char *v463;
  uint64_t v464;
  __CFData *v465;
  unsigned __int16 *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _WORD *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _WORD *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  char *v484;
  _WORD *v485;
  char *v486;
  __int16 v487;
  _WORD *v488;
  void *v489;
  __int16 v490;
  __int16 v491;
  char *v492;
  void *v493;
  char *v494;
  int64_t v495;
  uint64_t v496;
  int64_t v497;
  uint64_t v498;
  char *v499;
  char *v500;
  char *v501;
  char *v502;
  __int16 v503;
  void *v504;
  unint64_t v505;
  void *v506;
  const __CFData *v507;
  int v508;
  _anonymous_namespace_ *v509;
  const __CFData *v510;
  const __CFData *v511;
  unsigned int v512;
  unsigned __int16 *v513;
  unsigned __int16 *v514;
  __CFData *v515;
  unsigned int v516;
  void *v517;
  unint64_t *v518;
  unint64_t v519;
  char *v520;
  int64_t v521;
  unint64_t v522;
  unint64_t v523;
  char *v524;
  unsigned int v525;
  unsigned __int16 *v526;
  unint64_t v528;
  unsigned __int16 v531;
  OTL::LookupWithCoverage *v532;
  int v533;
  __n128 *v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t i;
  void *v538;
  unint64_t v539;
  __int128 v540;
  int v541;
  char v542;
  unsigned int v543;
  unsigned int v544;
  unsigned __int16 *v545;
  void *v546;
  unsigned __int16 *v547;
  unint64_t v548;
  unint64_t *v549;
  unint64_t *v550;
  unint64_t *v551;
  unint64_t v552;
  int64x2_t v553;
  id v554;
  void *v555;
  unint64_t *v556;
  unint64_t v557;
  char *v558;
  int64_t v559;
  unint64_t v560;
  unint64_t v561;
  char *v562;
  unint64_t v563;
  unint64_t *v564;
  unint64_t *v565;
  unint64_t *v566;
  unint64_t v567;
  int64x2_t v568;
  id v569;
  int64_t v570;
  __CFData *v571;
  UInt8 *v572;
  __CFData *v573;
  unsigned __int16 *v574;
  unsigned __int16 *v575;
  unint64_t v576;
  unint64_t v577;
  void *v578;
  unint64_t *v580;
  unint64_t v581;
  void *v582;
  _WORD *v583;
  _WORD *v584;
  _BYTE *v585;
  _WORD *v586;
  int64_t v588;
  unint64_t v589;
  unint64_t v590;
  _QWORD *v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t *v594;
  unint64_t *v595;
  unint64_t v596;
  int64x2_t v597;
  id v598;
  void *v599;
  unint64_t *v600;
  unint64_t v601;
  int64_t v602;
  unint64_t v603;
  unint64_t v604;
  _QWORD *v605;
  unint64_t v606;
  unint64_t *v607;
  unint64_t *v608;
  unint64_t *v609;
  unint64_t v610;
  int64x2_t v611;
  id v612;
  unint64_t v613;
  unint64_t *v614;
  unint64_t *v615;
  unint64_t *v616;
  unint64_t v617;
  int64x2_t v618;
  id v619;
  void *v620;
  unint64_t *v621;
  unint64_t v622;
  void *v623;
  int64_t v624;
  unint64_t v625;
  unint64_t v626;
  _QWORD *v627;
  unint64_t v628;
  unint64_t *v629;
  unint64_t *v630;
  unint64_t *v631;
  unint64_t v632;
  int64x2_t v633;
  id v634;
  uint64_t *v635;
  _WORD *v636;
  char *v637;
  unint64_t v638;
  _WORD *v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t v645;
  char *v646;
  char *v647;
  char *v648;
  char *v649;
  __int16 v650;
  uint64_t v651;
  _QWORD *v652;
  uint64_t v653;
  uint64_t v654;
  __CFData *Mutable;
  UInt8 *v656;
  uint64_t v657;
  __int128 v658;
  __n128 v659;
  __n128 v660;
  const void *v661;
  int64_t v662;
  char *v663;
  char *v664;
  const void *v665;
  int64_t v666;
  char *v667;
  char *v668;
  _QWORD *v669;
  void *v670;
  int64_t v671;
  char *v672;
  __int128 v673;
  uint64_t v674;
  _QWORD *v675;
  uint64_t v676;
  __int128 v678;
  int v679;
  const __CFData *v680;
  unsigned __int16 **v681;
  unsigned __int16 **v682;
  int v683;
  unsigned __int16 *v684;
  unsigned __int16 *v685;
  unsigned __int16 v686;
  int v687;
  _QWORD *v688;
  __int128 v689;
  const SFNTLookupTable *BytePtr;
  const UInt8 *v691;
  SFNTLookupTable *v692;
  uint64_t (***v693)();
  uint64_t v694;
  unsigned __int16 **v695;
  unsigned __int16 **v696;
  unsigned __int16 *v697;
  unsigned __int16 *v698;
  unsigned __int16 v699;
  int v700;
  _QWORD *v701;
  __CFData *v702;
  _QWORD *v703;
  unsigned __int16 j;
  __int128 v705;
  _WORD *v706;
  _WORD *v707;
  __int16 v708;
  _QWORD *v709;
  _QWORD *v710;
  _DWORD *v711;
  _DWORD *v712;
  int64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  char *v717;
  char *v718;
  char *v719;
  char *v720;
  char *v721;
  uint64_t v722;
  int64x2_t v723;
  char *v724;
  _BYTE *v725;
  unint64_t v726;
  uint64_t v727;
  __int16 v728;
  __int128 v729;
  const SFNTLookupTable *v730;
  const UInt8 *v731;
  SFNTLookupTable *v732;
  void **v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  unsigned __int16 *v737;
  unsigned __int16 *v738;
  unsigned __int16 *v739;
  unsigned __int16 v740;
  unsigned __int16 *v741;
  unsigned __int16 v742;
  unsigned int v743;
  BOOL v744;
  unsigned __int16 v745;
  _QWORD *v746;
  _QWORD *v747;
  unsigned __int16 v748;
  __int128 v749;
  _WORD *v750;
  _WORD *v751;
  __int16 v752;
  _QWORD *v753;
  _QWORD *v754;
  _DWORD *v755;
  _DWORD *v756;
  int64_t v757;
  unint64_t v758;
  uint64_t v759;
  unint64_t v760;
  char *v761;
  char *v762;
  char *v763;
  char *v764;
  char *v765;
  uint64_t v766;
  int64x2_t v767;
  char *v768;
  _BYTE *v769;
  unint64_t v770;
  uint64_t v771;
  unsigned __int16 *v772;
  uint64_t v773;
  unsigned __int16 v774;
  unsigned __int16 *v775;
  unsigned __int16 v776;
  unsigned int v777;
  BOOL v778;
  unsigned __int16 *v779;
  unsigned __int16 *v780;
  unsigned int v781;
  unint64_t v782;
  void *v783;
  __int128 v784;
  uint64_t v785;
  char *v786;
  __int16 v787;
  int v788;
  _WORD *v789;
  __int16 v790;
  __int16 v791;
  unsigned __int16 *v792;
  unsigned __int16 *v793;
  _WORD *v794;
  int v795;
  id v796;
  id v797;
  uint64_t v798;
  unint64_t v799;
  int64_t v800;
  int v801;
  _WORD *v802;
  __int16 v803;
  _WORD *v804;
  unsigned int v805;
  unsigned int v806;
  uint64_t v807;
  __int16 v808;
  uint64_t v809;
  unsigned __int16 *v810;
  unsigned __int16 *v811;
  _WORD *v812;
  int v813;
  uint64_t v814;
  unint64_t v815;
  unint64_t v816;
  int64_t v817;
  int v818;
  _WORD *v819;
  uint64_t v820;
  __int16 v821;
  _WORD *v822;
  unsigned int v823;
  unsigned __int16 v824;
  __int16 v825;
  uint64_t v826;
  unsigned __int16 *v827;
  unsigned __int16 *v828;
  _WORD *v829;
  int v830;
  __CFData *v831;
  _anonymous_namespace_ *v832;
  const __CFData *v833;
  unint64_t v834;
  void *v835;
  unint64_t v836;
  __int16 v837;
  __CFData *v838;
  UInt8 *v839;
  void *v840;
  const __CFData *v841;
  const __CFData *v842;
  const SFNTLookupTable *v843;
  void *v844;
  id v845;
  const __CFData *v846;
  const __CFData *v847;
  const UInt8 *v848;
  SFNTLookupTable *v849;
  _QWORD *v850;
  unsigned __int16 **v851;
  uint64_t v852;
  unint64_t *v853;
  unint64_t v854;
  void *v855;
  int v856;
  int64_t v857;
  unint64_t v858;
  unint64_t v859;
  _QWORD *v860;
  unint64_t v861;
  unint64_t *v862;
  unint64_t *v863;
  unint64_t *v864;
  unint64_t v865;
  int64x2_t v866;
  id v867;
  void *v868;
  unint64_t *v869;
  unint64_t v870;
  void *v871;
  int64_t v872;
  unint64_t v873;
  unint64_t v874;
  _QWORD *v875;
  unint64_t v876;
  unint64_t *v877;
  unint64_t *v878;
  unint64_t *v879;
  unint64_t v880;
  int64x2_t v881;
  id v882;
  const __CFData *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t *v886;
  unint64_t *v887;
  unint64_t v888;
  unint64_t v889;
  _WORD *v890;
  unint64_t v892;
  __int16 v893;
  int v894;
  void *v895;
  __n128 *v896;
  __n128 *v897;
  _BYTE *v898;
  void *v899;
  _QWORD *v901;
  uint64_t v902;
  unsigned __int16 *v903;
  OTL::LookupWithCoverage *v904;
  unsigned __int16 *v905;
  _QWORD *v906;
  __CFData *v907;
  const __CFData *theData;
  CFIndex length;
  const __CFAllocator *allocator;
  unsigned int v911;
  unsigned __int16 *v912;
  unint64_t v913;
  UInt8 *MutableBytePtr;
  uint64_t v915;
  uint64_t *v916;
  __CFData *v917;
  _QWORD *v918;
  _QWORD *v919;
  TBaseFont *v920;
  int v921;
  int v922;
  unsigned __int16 *v923;
  void *v924;
  __CFData *v925;
  __n128 *v926;
  unint64_t v927;
  uint64_t **v928;
  unint64_t v929;
  unint64_t *v930;
  unint64_t v931;
  _QWORD *v932;
  int v933;
  __n128 *v934;
  UInt8 *v935;
  _QWORD *v936;
  int v937;
  void *v938;
  void *v939;
  uint64_t v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  void *v944;
  void *v945;
  uint64_t v946;
  int v947[2];
  void *v948;
  void *v949[5];
  id v950;
  void *v951;
  uint64_t v952;
  id v953;
  id v954;
  id v955;
  id v956;
  _BYTE v957[1464];
  _BYTE *v958;
  id v959;
  int64x2_t v960;
  id *v961;
  __int128 v962;
  __int128 v963;
  unint64_t v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  unint64_t v968;
  unint64_t *v969;
  unint64_t *v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  unint64_t v988;
  unint64_t *v989;
  id v990;
  _BYTE v991[24];
  _BYTE *v992;
  void *v993[2];
  _BYTE v994[64];
  __int128 v995;
  id v996[94];
  void *__dst[94];
  _BYTE v998[12504];
  _BYTE *v999;
  unsigned __int16 *v1000;
  unsigned __int16 *v1001;
  uint64_t v1002;
  _OWORD v1003[4];
  _OWORD *v1004;
  id v1005[118];
  _BYTE v1006[24];
  _BYTE *v1007;
  void *v1008;
  __n128 *v1009;
  uint64_t v1010;
  _BYTE v1011[2160];
  _BYTE *v1012;
  void *v1013;
  void *v1014;
  void **v1015;
  void **v1016;
  id v1017[2];
  char *v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 *v1034;
  uint64_t (**v1035)();
  void **v1036;
  id *v1037;
  void **v1038;
  unsigned __int16 *v1039[3];
  unsigned __int16 **v1040;
  _BYTE bytes[32];
  __int128 v1042;
  unint64_t v1043;
  uint64_t v1044;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v1044 = *MEMORY[0x1E0C80C00];
  v948 = v5;
  v1009 = 0;
  v1008 = 0;
  v1010 = 0;
  v1012 = v1011;
  if (!*(_WORD *)(v4 + 8))
    return 0;
  v7 = (unsigned __int16 *)(v4 + __rev16(*(unsigned __int16 *)(v4 + 8)));
  v8 = v7 + 1;
  if (v7 + 1 > v5)
    return 0;
  v920 = v3;
  v9 = bswap32(*v7) >> 16;
  v10 = (unint64_t)&v8[v9];
  v11 = v7 + 2 <= v5 ? (unint64_t)((char *)v5 - (char *)v8) >> 1 : 0;
  v12 = v10 <= (unint64_t)v5 && v10 >= (unint64_t)v8;
  v13 = v12 || v11 == v9;
  if (!v13)
    return 0;
  v14 = v6;
  v911 = v9;
  v912 = v7;
  v913 = v4;
  v916 = (uint64_t *)v2;
  memset(v1011, 170, sizeof(v1011));
  *(_QWORD *)v947 = 0;
  if (!*(_QWORD *)(v14 + 96))
    goto LABEL_304;
  v15 = 0;
  v16 = &v957[32];
  v17 = (uint64_t **)(v14 + 128);
  v18 = v14 + 176;
  v19 = (uint64_t *)(v14 + 40);
  v20 = (unint64_t *)(v14 + 416);
  v21 = (_QWORD *)(v14 + 56);
  v22 = 0uLL;
  v23 = &off_1E15DF680;
  do
  {
    v24 = *(_QWORD *)(v14 + 80);
    v26 = *(_QWORD *)(v24 + 40);
    v25 = (uint64_t **)(v24 + 40);
    v27 = *(unsigned int *)(v26 + 28);
    LODWORD(v996[0]) = *(_DWORD *)(v26 + 28);
    v28 = *(int8x8_t *)(v14 + 8);
    if (!*(_QWORD *)&v28)
      goto LABEL_272;
    v29 = (uint8x8_t)vcnt_s8(v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v27;
      if (*(_QWORD *)&v28 <= v27)
        v30 = v27 % *(_QWORD *)&v28;
    }
    else
    {
      v30 = (v28.i32[0] - 1) & v27;
    }
    v31 = *(uint64_t ***)(*(_QWORD *)v14 + 8 * v30);
    if (!v31)
      goto LABEL_272;
    v32 = *v31;
    if (!v32)
      goto LABEL_272;
    while (1)
    {
      v33 = v32[1];
      if (v33 == v27)
        break;
      if (v29.u32[0] > 1uLL)
      {
        if (v33 >= *(_QWORD *)&v28)
          v33 %= *(_QWORD *)&v28;
      }
      else
      {
        v33 &= *(_QWORD *)&v28 - 1;
      }
      if (v33 != v30)
        goto LABEL_272;
LABEL_31:
      v32 = (uint64_t *)*v32;
      if (!v32)
        goto LABEL_272;
    }
    if (*((_DWORD *)v32 + 4) != (_DWORD)v27)
      goto LABEL_31;
    v933 = v15;
    v34 = *(unsigned int *)(v24 + 32);
    *(_DWORD *)v957 = v27;
    *(_OWORD *)&v957[4] = v22;
    *(_OWORD *)&v957[20] = v22;
    *(_OWORD *)&v957[36] = v22;
    *(_OWORD *)&v957[52] = v22;
    *(_DWORD *)&v957[68] = 0;
    v936 = v16;
    v931 = v18;
    v930 = v20;
    v932 = v21;
    if (v27 != 32)
    {
      v929 = v34;
      v38 = v913;
      if (*(_QWORD *)(v24 + 56) == 1)
      {
        std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::erase((_QWORD *)(v14 + 80), v24);
      }
      else
      {
        v40 = *v25;
        std::__tree<unsigned int>::__remove_node_pointer(v25, *v25);
        operator delete(v40);
      }
      if ((int)v27 > 1769172843)
      {
        if ((_DWORD)v27 == 1835361385)
          goto LABEL_51;
        v41 = 1769172844;
      }
      else
      {
        if ((_DWORD)v27 == 1718185569)
          goto LABEL_51;
        v41 = 1768843636;
      }
      if ((_DWORD)v27 != v41)
      {
        v57 = ConvertOTFeatureToAATFeature(v27, (uint64_t)&v957[4]);
        if (v57)
        {
          v22 = 0uLL;
          v23 = &off_1E15DF680;
          if (v57 != 2)
          {
            v933 |= *(_DWORD *)&v957[8] & 0xFFFFFE00;
            goto LABEL_126;
          }
LABEL_73:
          v56 = 1;
          v15 = v933;
          goto LABEL_188;
        }
        v56 = 2;
LABEL_87:
        v15 = v933;
        goto LABEL_187;
      }
LABEL_51:
      v42 = std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v17, v27, v996);
      *(_DWORD *)v998 = 1634885986;
      if (std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(v42 + 5, (unsigned int *)v998))
      {
        *(_DWORD *)&v957[8] = 35;
        v43 = *(_QWORD *)v947;
        if (*(_QWORD *)v947)
          goto LABEL_56;
        v44 = operator new(0x660uLL, MEMORY[0x1E0DE4E10]);
        if (v44)
        {
          *v44 = 0;
          v44[1] = 0;
          v44[2] = 0;
          v44[183] = v44 + 3;
          v44[184] = 0;
          v44[186] = 0;
          v44[185] = 0;
          v44[195] = v44 + 187;
          *((_DWORD *)v44 + 392) = 0;
          v44[197] = 0;
          *((_DWORD *)v44 + 396) = 0;
          v44[199] = 0;
          *((_DWORD *)v44 + 400) = 0;
          v44[201] = 0;
          *((_DWORD *)v44 + 404) = 0;
          v44[203] = 0;
        }
        v43 = *(_QWORD *)v947;
        if (*(_QWORD *)v947)
        {
LABEL_56:
          if ((_DWORD)v27 == 1835361385)
          {
            v46 = v43 + 1584;
            v45 = v929;
          }
          else
          {
            v45 = v929;
            if ((_DWORD)v27 == 1768843636)
            {
              v46 = v43 + 1568;
            }
            else
            {
              v58 = v43 + 1600;
              v59 = v43 + 1616;
              v46 = (_DWORD)v27 == 1718185569 ? v58 : v59;
            }
          }
          v60 = (unsigned __int16 *)((char *)v912 + (bswap32(v912[v45 + 1]) >> 16));
          if (v60 + 3 <= v948)
          {
            v61 = (unint64_t)&v60[(bswap32(v60[2]) >> 16) + 3] + (((unint64_t)v60[1] >> 11) & 2);
            v62 = v61 < (unint64_t)v60 || v61 > (unint64_t)v948;
            v15 = v933;
            if (!v62)
            {
              *(_QWORD *)v998 = 0xAAAAAAAAAAAAAAAALL;
              v63 = (unsigned __int16)ResolveLookupSubtable(v60, (unint64_t)v948, v998);
              *(_DWORD *)v46 = v63;
              *(_QWORD *)(v46 + 8) = v64;
              if (*(_QWORD *)v998 < 2uLL)
              {
                if (v63)
                {
                  *(_WORD *)&v957[22] = 1000;
                  v56 = 2;
                  goto LABEL_187;
                }
LABEL_186:
                v56 = 1;
                goto LABEL_187;
              }
              *(_DWORD *)v46 = 0;
            }
            v56 = 1;
            goto LABEL_187;
          }
        }
      }
      v56 = 1;
      goto LABEL_87;
    }
    v35 = *v25;
    v36 = (uint64_t *)(*v25)[1];
    v37 = *v25;
    v38 = v913;
    if (v36)
    {
      do
      {
        v39 = v36;
        v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v39 = (uint64_t *)v37[2];
        v13 = *v39 == (_QWORD)v37;
        v37 = v39;
      }
      while (!v13);
    }
    if (v39 == (uint64_t *)(v24 + 48))
    {
      v929 = v34;
      std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::erase((_QWORD *)(v14 + 80), v24);
      goto LABEL_60;
    }
    if (*((_BYTE *)v39 + 28) != 32)
      goto LABEL_73;
    v929 = v34;
    std::__tree<unsigned int>::__remove_node_pointer(v25, v35);
    operator delete(v35);
LABEL_60:
    *(_QWORD *)v998 = 0xAAAAAAAAAAAAAAAALL;
    LanguagesWithLangSysTag(v27, v998);
    v47 = (const __CFArray *)atomic_load((unint64_t *)v998);
    if (!v47 || (ValueAtIndex = (void *)CFArrayGetValueAtIndex(v47, 0)) == 0)
    {

      v56 = 1;
      v15 = v933;
      goto LABEL_187;
    }
    v49 = ValueAtIndex;
    v928 = v17;
    v51 = *(unint64_t **)(v14 + 152);
    v50 = *(unint64_t **)(v14 + 160);
    if (v51 != v50)
    {
      while (1)
      {
        v52 = (void *)atomic_load(v51);
        v53 = v52;
        if (v53 == v49)
          break;
        v54 = v53;
        if (v53)
        {
          v55 = CFEqual(v53, v49);

          if (v55)
            goto LABEL_93;
        }
        else
        {

        }
        if (++v51 == v50)
        {
          v51 = v50;
          goto LABEL_93;
        }
      }

LABEL_93:
      v38 = v913;
    }
    v17 = v928;
    if (v51 == *(unint64_t **)(v14 + 160))
    {
      v1005[0] = v49;
      v66 = *(unint64_t **)(v14 + 160);
      v65 = *(_QWORD *)(v14 + 168);
      if ((unint64_t)v66 >= v65)
      {
        v69 = *(_QWORD *)(v14 + 152);
        v70 = ((uint64_t)v66 - v69) >> 3;
        if ((unint64_t)(v70 + 1) >> 61)
LABEL_1296:
          abort();
        v71 = v65 - v69;
        v72 = v71 >> 2;
        if (v71 >> 2 <= (unint64_t)(v70 + 1))
          v72 = v70 + 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
          v74 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v931, v73);
        else
          v74 = 0;
        v75 = (unint64_t *)&v74[8 * v70];
        v76 = &v74[8 * v73];
        do
          v77 = __ldaxr((unint64_t *)v1005);
        while (__stlxr(0, (unint64_t *)v1005));
        *v75 = v77;
        v68 = v75 + 1;
        v78 = *(unint64_t **)(v14 + 152);
        v79 = *(unint64_t **)(v14 + 160);
        if (v79 == v78)
        {
          *(_QWORD *)(v14 + 152) = v75;
          *(_QWORD *)(v14 + 160) = v68;
          v82 = *(_QWORD *)(v14 + 168);
          *(_QWORD *)(v14 + 168) = v76;
        }
        else
        {
          do
          {
            --v75;
            --v79;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(0, v79));
            *v75 = v80;
          }
          while (v79 != v78);
          v79 = *(unint64_t **)(v14 + 152);
          v81 = *(unint64_t **)(v14 + 160);
          *(_QWORD *)(v14 + 152) = v75;
          *(_QWORD *)(v14 + 160) = v68;
          v82 = *(_QWORD *)(v14 + 168);
          *(_QWORD *)(v14 + 168) = v76;
          if (v81 != v79)
          {
            do
            {
              v83 = v81 - 1;

              v81 = v83;
            }
            while (v83 != v79);
          }
        }
        if (v79)
        {
          if (v931 > (unint64_t)v79 || v930 <= v79)
          {
            operator delete(v79);
          }
          else if (v82 == *v930)
          {
            *v930 = (unint64_t)v79;
          }
        }
        v17 = v928;
      }
      else
      {
        do
          v67 = __ldaxr((unint64_t *)v1005);
        while (__stlxr(0, (unint64_t *)v1005));
        *v66 = v67;
        v68 = v66 + 1;
      }
      *(_QWORD *)(v14 + 160) = v68;

      v51 = (unint64_t *)(*(_QWORD *)(v14 + 160) - 8);
      v38 = v913;
    }
    strcpy(&v957[4], "'");
    *(_WORD *)&v957[6] = (((_DWORD)v51 - *(_DWORD *)(v14 + 152)) >> 3) + 1;
    *(_DWORD *)&v957[8] = 1;

    v22 = 0uLL;
    v23 = &off_1E15DF680;
LABEL_126:
    v84 = (unint64_t)v912 + (bswap32(v912[v929 + 1]) >> 16);
    *(_QWORD *)&v957[24] = v84;
    if (v84 + 4 < v38 || v84 + 6 > (unint64_t)v948)
      goto LABEL_73;
    v86 = v84
        + 2 * (bswap32(*(unsigned __int16 *)(v84 + 4)) >> 16)
        + (((unint64_t)*(unsigned __int16 *)(v84 + 2) >> 11) & 2)
        + 6;
    v87 = v84 >= v38 && v86 >= v84;
    if (!v87 || v86 > (unint64_t)v948)
      goto LABEL_73;
    v89 = *(_QWORD *)(v14 + 48);
    if (v89)
    {
      v90 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
      v90.i16[0] = vaddlv_u8(v90);
      if (v90.u32[0] > 1uLL)
      {
        v91 = v929;
        if (v89 <= v929)
          v91 = v929 % v89;
      }
      else
      {
        v91 = ((_DWORD)v89 - 1) & v929;
      }
      v92 = *(void ***)(*v19 + 8 * v91);
      if (v92)
      {
        v93 = *v92;
        if (*v92)
        {
          do
          {
            v94 = v93[1];
            if (v94 == v929)
            {
              if (*((_DWORD *)v93 + 4) == (_DWORD)v929)
                goto LABEL_176;
            }
            else
            {
              if (v90.u32[0] > 1uLL)
              {
                if (v94 >= v89)
                  v94 %= v89;
              }
              else
              {
                v94 &= v89 - 1;
              }
              if (v94 != v91)
                break;
            }
            v93 = (_QWORD *)*v93;
          }
          while (v93);
        }
      }
    }
    else
    {
      v91 = 0xAAAAAAAAAAAAAAAALL;
    }
    v93 = operator new(0x18uLL);
    *v93 = 0;
    v93[1] = v929;
    v93[2] = v929;
    v95 = (float)(unint64_t)(*(_QWORD *)(v14 + 64) + 1);
    v96 = *(float *)(v14 + 72);
    if (!v89 || (float)(v96 * (float)v89) < v95)
    {
      v97 = (v89 & (v89 - 1)) != 0;
      if (v89 < 3)
        v97 = 1;
      v98 = v97 | (2 * v89);
      v99 = vcvtps_u32_f32(v95 / v96);
      if (v98 <= v99)
        v100 = v99;
      else
        v100 = v98;
      std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>((uint64_t)v19, v100);
      v89 = *(_QWORD *)(v14 + 48);
      if ((v89 & (v89 - 1)) != 0)
      {
        if (v89 <= v929)
          v91 = v929 % v89;
        else
          v91 = v929;
      }
      else
      {
        v91 = ((_DWORD)v89 - 1) & v929;
      }
    }
    v101 = *v19;
    v102 = *(_QWORD **)(*v19 + 8 * v91);
    if (v102)
    {
      *v93 = *v102;
      goto LABEL_174;
    }
    *v93 = *v932;
    *v932 = v93;
    *(_QWORD *)(v101 + 8 * v91) = v932;
    if (*v93)
    {
      v103 = *(_QWORD *)(*v93 + 8);
      if ((v89 & (v89 - 1)) != 0)
      {
        if (v103 >= v89)
          v103 %= v89;
      }
      else
      {
        v103 &= v89 - 1;
      }
      v102 = (_QWORD *)(*v19 + 8 * v103);
LABEL_174:
      *v102 = v93;
    }
    ++*(_QWORD *)(v14 + 64);
LABEL_176:
    v15 = v933;
    if ((*((_DWORD *)v93 + 5) & 0x80000000) != 0)
      *(_WORD *)&v957[20] = 1;
    *(_WORD *)&v957[22] = ResolveLookupSubtable(*(unsigned __int16 **)&v957[24], (unint64_t)v948, v936);
    *(_QWORD *)&v957[40] = v104;
    if (!*(_WORD *)&v957[22])
      goto LABEL_186;
    v22 = 0uLL;
    v23 = &off_1E15DF680;
    if (*(_QWORD *)&v957[32])
    {
      if (*(_QWORD *)&v957[32] == 1)
      {
        v105 = *(_QWORD *)&v957[24];
        memset(__dst, 0, 24);
        if ((*(_WORD *)(*(_QWORD *)&v957[24] + 2) & 0x1EFF) != 0)
        {
          CommonTable = (const __CFData *)TBaseFont::GetCommonTable(v920, 1195656518, 0);
          if (CommonTable)
          {
            *(_QWORD *)&v107 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v107 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v998[64] = v107;
            *(_OWORD *)&v998[48] = v107;
            *(_OWORD *)&v998[32] = v107;
            *(_OWORD *)&v998[16] = v107;
            *(_OWORD *)v998 = v107;
            OTL::GDEF::GDEF((OTL::GDEF *)v998, CommonTable);
            v1005[0] = &off_1E15DF680;
            v1005[1] = __dst;
            v1005[3] = v1005;
            OTL::GDEF::IterateGlyphsIgnoredByLookupTable(v998, v105, (uint64_t)v1005);
            v108 = (id *)v1005[3];
            if (v1005[3] == v1005)
            {
              v108 = v1005;
              v109 = 4;
              v15 = v933;
LABEL_196:
              (*((void (**)(void))*v108 + v109))();
            }
            else
            {
              v15 = v933;
              if (v1005[3])
              {
                v109 = 5;
                goto LABEL_196;
              }
            }
            LOBYTE(v959) = -86;
            std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
            v111 = (unsigned __int16 *)__dst[1];
            if (__dst[0] != __dst[1])
            {
              v112 = (unsigned __int16 *)((char *)__dst[0] + 2);
              while (v112 != __dst[1])
              {
                v113 = *(v112 - 1);
                v114 = *v112++;
                if (v113 == v114)
                {
                  v115 = v112 - 2;
                  while (v112 != v111)
                  {
                    v116 = v113;
                    v113 = *v112;
                    if (v116 != v113)
                    {
                      v115[1] = v113;
                      ++v115;
                    }
                    ++v112;
                  }
                  v117 = v115 + 1;
                  goto LABEL_208;
                }
              }
            }
            v117 = (unsigned __int16 *)__dst[1];
LABEL_208:
            if (v111 != v117)
            {
              __dst[1] = v117;
              v15 = v933;
            }
          }
        }
        if (*(_QWORD *)&v957[48])
        {
          *(_QWORD *)&v957[56] = *(_QWORD *)&v957[48];
          operator delete(*(void **)&v957[48]);
        }
        *(_OWORD *)&v957[48] = *(_OWORD *)__dst;
        *(void **)&v957[64] = __dst[2];
        if (*(unsigned __int16 *)&v957[22] == 3)
        {
          LOWORD(__dst[0]) = 0;
          if (*(_QWORD *)&v957[32])
          {
            v118 = 0;
            while (1)
            {
              v119 = (unsigned __int16 *)v948;
              if ((ResolveLookupSubtableWithIndex(*(unsigned __int16 **)&v957[24], v118, (unint64_t)v948) & 0xFFFD) != 1
                || (v1005[0] = v120, v121 = v120 + 3, v120 + 3 > v119)
                || ((v122 = bswap32(v120[2]) >> 16, v123 = (unint64_t)&v121[v122], v120 + 4 <= v119)
                  ? (v124 = (unint64_t)((char *)v119 - (char *)v121) >> 1)
                  : (v124 = 0),
                    v123 <= (unint64_t)v119 ? (v125 = v123 >= (unint64_t)v121) : (v125 = 0),
                    !v125 ? (v126 = v124 == v122) : (v126 = 1),
                    !v126))
              {
LABEL_240:
                v56 = 1;
                v15 = v933;
                goto LABEL_187;
              }
              OTL::LookupWithCoverage::GetCoverage((OTL::Coverage *)v120, (unint64_t)v119, (uint64_t)v998);
              v127 = operator new(0x20uLL);
              *v127 = &off_1E15DFD88;
              v127[1] = v1005;
              v127[2] = &v948;
              v127[3] = __dst;
              v1007 = v127;
              v128 = OTL::Coverage::Iterate((unsigned __int16 **)v998, (uint64_t)v1006);
              v129 = v1007;
              if (v1007 == v1006)
                break;
              if (v1007)
              {
                v130 = 5;
LABEL_232:
                (*(void (**)(void))(*v129 + 8 * v130))();
              }
              if ((v128 & 1) == 0)
                goto LABEL_240;
              if (++v118 >= *(_QWORD *)&v957[32])
              {
                v15 = v933;
                if ((v957[8] & 0x40) != 0 && LOWORD(__dst[0]) >= 2u)
                {
                  v131 = 1;
                  do
                  {
                    *(_WORD *)&v957[6] = ++v131;
                  }
                  while (v131 < LOWORD(__dst[0]));
                }
                goto LABEL_239;
              }
            }
            v129 = v1006;
            v130 = 4;
            goto LABEL_232;
          }
        }
LABEL_239:
        v56 = 0;
LABEL_187:
        v22 = 0uLL;
        v23 = &off_1E15DF680;
      }
      else
      {
        v56 = 1;
      }
    }
    else
    {
      v56 = 2;
    }
LABEL_188:
    if (*(_QWORD *)&v957[48])
    {
      *(_QWORD *)&v957[56] = *(_QWORD *)&v957[48];
      v110 = v23;
      operator delete(*(void **)&v957[48]);
      v23 = v110;
      v22 = 0uLL;
    }
    if ((v56 | 2) != 2)
      goto LABEL_272;
    v16 = v936;
    v18 = v931;
    v20 = v930;
    v21 = v932;
  }
  while (*(_QWORD *)(v14 + 96));
  if ((v15 & 0x1000) != 0)
  {
    v134 = (__n128 *)v1008;
    v135 = v1009;
    if (v1008 != v1009)
    {
      while (v134->n128_u32[0] != 1986359924)
      {
        v134 = (__n128 *)((char *)v134 + 72);
        if (v134 == v1009)
          goto LABEL_261;
      }
      if (v134 != v1009)
      {
        v136 = (__n128 *)((char *)v134 + 72);
        if (&v134[4].n128_i8[8] != (__int8 *)v1009)
        {
          do
          {
            if (v136->n128_u32[0] != 1986359924)
            {
              v137 = *v136;
              v138 = v136[2];
              v134[1] = v136[1];
              v134[2] = v138;
              *v134 = v137;
              std::vector<unsigned short>::__move_assign((uint64_t)&v134[3], v136 + 3);
              v134 = (__n128 *)((char *)v134 + 72);
            }
            v136 = (__n128 *)((char *)v136 + 72);
          }
          while (v136 != v135);
          v135 = v1009;
        }
      }
      if (v134 != v135)
      {
        while (v135 != v134)
        {
          v139 = (void *)v135[-2].n128_u64[1];
          if (v139)
          {
            v135[-1].n128_u64[0] = (unint64_t)v139;
            operator delete(v139);
          }
          v135 = (__n128 *)((char *)v135 - 72);
        }
        v1009 = v134;
      }
    }
  }
LABEL_261:
  if (!*(_QWORD *)v947)
    goto LABEL_304;
  if (*(_QWORD *)(*(_QWORD *)v947 + 1576)
    && *(_QWORD *)(*(_QWORD *)v947 + 1592)
    && *(_QWORD *)(*(_QWORD *)v947 + 1608))
  {
    v140 = (__n128 *)v1008;
    v141 = v1009;
    if (v1008 == v1009)
    {
      v143 = -1;
    }
    else
    {
      v142 = 0;
      do
      {
        if (v140[1].n128_u16[3] == 1000)
          ++v142;
        v140 = (__n128 *)((char *)v140 + 72);
      }
      while (v140 != v1009);
      v143 = v142 - 1;
      if (v142 == 1)
        goto LABEL_286;
    }
    do
    {
      v144 = (__n128 *)v1008;
      v145 = v141;
      while (v145 != v1008)
      {
        v146 = &v145[-5].n128_i8[8];
        v147 = v145[-4].n128_u16[7];
        v145 = (__n128 *)((char *)v145 - 72);
        if (v147 == 1000)
        {
          v144 = (__n128 *)(v146 + 72);
          break;
        }
      }
      v148 = (__n128 *)((char *)v144 - 72);
      if (v144 != v141)
      {
        do
        {
          v149 = &v148[4].n128_i8[8];
          v150 = *(__n128 *)((char *)v148 + 88);
          *v148 = *(__n128 *)((char *)v148 + 72);
          v148[1] = v150;
          v148[2] = *(__n128 *)((char *)v148 + 104);
          std::vector<unsigned short>::__move_assign((uint64_t)&v148[3], (__n128 *)((char *)v148 + 120));
          v151 = v148 + 9;
          v148 = (__n128 *)((char *)v148 + 72);
        }
        while (v151 != v141);
        v141 = v1009;
        v148 = (__n128 *)v149;
      }
      while (v141 != v148)
      {
        v152 = (void *)v141[-2].n128_u64[1];
        if (v152)
        {
          v141[-1].n128_u64[0] = (unint64_t)v152;
          operator delete(v152);
        }
        v141 = (__n128 *)((char *)v141 - 72);
      }
      v1009 = v148;
      v141 = v148;
      --v143;
    }
    while (v143);
LABEL_286:
    *(_DWORD *)v998 = 1919707495;
    v153 = std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v17, 0x726C6967u, v998);
    *(_DWORD *)v998 = 1919118452;
    v154 = std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v17, 0x72636C74u, v998);
    *(_DWORD *)v998 = 1667329140;
    v155 = std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v17, 0x63616C74u, v998);
    *(_DWORD *)v998 = 1634885986;
    if (std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(v153 + 5, (unsigned int *)v998))
    {
      *(_DWORD *)v957 = 1634885986;
      if (std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(v154 + 5, (unsigned int *)v957)|| (LODWORD(v1005[0]) = 1634885986, std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::find<unsigned int>(v155 + 5, (unsigned int *)v1005)))
      {
        if ((unint64_t)v153[8] > 1 || (unint64_t)v154[8] > 1 || (unint64_t)v155[8] > 1)
        {
          v132 = 0;
          goto LABEL_1284;
        }
        v156 = (__n128 *)v1008;
        if (v1008 != v1009)
        {
          while (1)
          {
            v157 = v156->n128_u32[0];
            v158 = v156->n128_u32[0] == 1667329140 || v157 == 1919118452;
            if (v158 || v157 == 1919707495)
              break;
            v156 = (__n128 *)((char *)v156 + 72);
            if (v156 == v1009)
            {
              v156 = v1009;
              break;
            }
          }
        }
      }
    }
LABEL_304:
    memset(v1005, 170, 0x3A8uLL);
    LODWORD(v1005[0]) = 0;
    memset(&v1005[1], 0, 24);
    v1005[49] = &v1005[4];
    memset(&v1005[50], 0, 24);
    v1005[83] = &v1005[53];
    memset(&v1005[84], 0, 24);
    v1005[117] = &v1005[87];
    *(_QWORD *)&v161 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v161 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v1003[3] = v161;
    v1003[2] = v161;
    v1003[1] = v161;
    v1003[0] = v161;
    v1000 = 0;
    v1001 = 0;
    v1002 = 0;
    v1004 = v1003;
    v927 = *((_QWORD *)v920 + 25);
    if (!v927)
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v920);
      v927 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v920 + 872))(v920, InitializedGraphicsFont);
    }
    v163 = (__n128 *)v1008;
    v164 = v1009;
    if (v1008 == v1009)
    {
LABEL_1282:
      v132 = 1;
LABEL_1283:
      *(_QWORD *)v998 = &v1000;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v998);
      *(_QWORD *)v998 = &v1005[84];
      std::vector<TCFRef<__CFData const*>,TInlineBufferAllocator<TCFRef<__CFData const*>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v998);
      *(_QWORD *)v998 = &v1005[50];
      std::vector<TCFRef<__CFData const*>,TInlineBufferAllocator<TCFRef<__CFData const*>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v998);
      *(_QWORD *)v998 = &v1005[1];
      std::vector<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v998);
      goto LABEL_1284;
    }
    v937 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v165 = (v927 + 7) >> 3;
    if (v927 > 0x10000)
      v165 = 0x2000;
    length = v165;
    v926 = v1009;
    while (2)
    {
      v166 = v163;
      v168 = &v163->n128_u16[2];
      v167 = *(unint64_t *)((char *)v163->n128_u64 + 4);
      v169 = (unsigned __int16 *)v1005[1];
      v170 = HIDWORD(v167);
      v934 = v163;
      if (v1005[1] != v1005[2])
      {
        while (*v169 != (unsigned __int16)v167 || v169[1] != WORD1(v167))
        {
          v169 += 6;
          if (v169 == v1005[2])
            goto LABEL_318;
        }
      }
      if (v169 != v1005[2])
      {
        *(unint64_t *)((char *)&v163->n128_u64[1] + 4) = *(_QWORD *)(v169 + 2);
        v163 = (__n128 *)((char *)v163 + 72);
        if ((v167 & 0x200000000) == 0)
          goto LABEL_388;
LABEL_387:
        LODWORD(v1005[0]) |= v166->n128_u32[3];
        goto LABEL_388;
      }
LABEL_318:
      v171 = (__n128 *)((char *)v163 + 72);
      do
      {
        v172 = v171;
        if (v171 == v164 || (v167 & 0x4000000000) != 0)
          break;
        v173 = v171[1].n128_u64[1];
        v174 = v171->n128_u16[2];
        v171 = (__n128 *)((char *)v171 + 72);
      }
      while (v173 == v163[1].n128_u64[1] && v174 == (unsigned __int16)v167);
      if (v937)
      {
        v176 = 2 * v937;
        if (!(2 * v937))
        {
          LODWORD(v1005[0]) = 0;
          v177 = (id *)v1005[50];
          v1005[2] = v1005[1];
          v178 = (id *)v1005[51];
          if (v1005[51] != v1005[50])
          {
            do
            {
              v179 = v178 - 1;

              v178 = v179;
            }
            while (v179 != v177);
          }
          v1005[51] = v177;
          v180 = (id *)v1005[85];
          v181 = (id *)v1005[84];
          if (v1005[85] != v1005[84])
          {
            do
            {
              v182 = v180 - 1;

              v180 = v182;
            }
            while (v182 != v181);
          }
          v1005[85] = v181;
          v1001 = v1000;
          v166 = v163;
          LODWORD(v170) = v163->n128_u32[2];
          v176 = 1;
        }
      }
      else
      {
        v176 = 1;
      }
      v166->n128_u32[3] = v176;
      v166[1].n128_u32[0] = -1;
      if ((v170 & 1) != 0)
      {
        v183 = (unsigned __int16 *)v1005[1];
        v184 = (unsigned __int16 *)v1005[2];
        if (v1005[1] == v1005[2])
        {
          v185 = 0;
        }
        else
        {
          v185 = 0;
          v186 = *v168;
          do
          {
            if (*v183 == v186)
            {
              v187 = *((_DWORD *)v183 + 1);
              *((_DWORD *)v183 + 2) &= ~v176;
              v185 |= v187;
            }
            v183 += 6;
          }
          while (v183 != v184);
        }
        v166[1].n128_u32[0] = ~v185;
        v188 = v1000;
        if (v1000 != v1001)
        {
          while (*v188 != *v168)
          {
            if (++v188 == v1001)
            {
              v188 = v1001;
              break;
            }
          }
        }
        if (v188 == v1001)
        {
          STL::insert_sorted<TInlineVector<unsigned short,30ul>>(&v1000, &v163->n128_i8[4]);
          v166 = v163;
        }
      }
      v189 = (__n128 *)((char *)v172 - 72);
      v937 = v176;
      v190 = ~v176;
      v191 = (char *)v1005[2];
      v192 = v166;
      do
      {
        v193 = v166->n128_u16[2];
        v194 = v192->n128_i16[3];
        v195 = v166[1].n128_u32[0];
        if (v191 >= v1005[3])
        {
          v196 = (char *)v1005[1];
          v197 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (char *)v1005[1]) >> 2);
          v198 = v197 + 1;
          if (v197 + 1 > 0x1555555555555555)
            goto LABEL_1296;
          if (0x5555555555555556 * (((char *)v1005[3] - (char *)v1005[1]) >> 2) > v198)
            v198 = 0x5555555555555556 * (((char *)v1005[3] - (char *)v1005[1]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1005[3] - (char *)v1005[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v199 = 0x1555555555555555;
          else
            v199 = v198;
          *(_QWORD *)&v998[32] = &v1005[4];
          if (v199)
          {
            v200 = TInlineBufferAllocator<MortFeatureEntry,30ul>::allocate((uint64_t)&v1005[4], v199);
            v191 = (char *)v1005[2];
            v196 = (char *)v1005[1];
          }
          else
          {
            v200 = 0;
          }
          v201 = &v200[12 * v197];
          *(_WORD *)v201 = v193;
          *((_WORD *)v201 + 1) = v194;
          *((_DWORD *)v201 + 1) = v937;
          *((_DWORD *)v201 + 2) = v195;
          if (v191 == v196)
          {
            v205 = vdupq_n_s64((unint64_t)v196);
            v202 = &v200[12 * v197];
          }
          else
          {
            v202 = &v200[12 * v197];
            do
            {
              v203 = *(_QWORD *)(v191 - 12);
              v191 -= 12;
              v204 = *((_DWORD *)v191 + 2);
              *(_QWORD *)(v202 - 12) = v203;
              v202 -= 12;
              *((_DWORD *)v202 + 2) = v204;
            }
            while (v191 != v196);
            v205 = *(int64x2_t *)&v1005[1];
          }
          v191 = v201 + 12;
          v1005[1] = v202;
          v1005[2] = v201 + 12;
          *(int64x2_t *)&v998[8] = v205;
          v206 = v1005[3];
          v1005[3] = &v200[12 * v199];
          *(_QWORD *)&v998[24] = v206;
          *(_QWORD *)v998 = v205.i64[0];
          std::__split_buffer<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul> &>::~__split_buffer((uint64_t)v998);
          v166 = v934;
        }
        else
        {
          *(_WORD *)v191 = v193;
          *((_WORD *)v191 + 1) = v194;
          *((_DWORD *)v191 + 1) = v937;
          *((_DWORD *)v191 + 2) = v195;
          v191 += 12;
        }
        v1005[2] = v191;
        if ((v166->n128_u8[8] & 1) == 0)
        {
          v207 = *v168;
          v208 = v192->n128_u16[3] + 1;
          if (v191 >= v1005[3])
          {
            v209 = (char *)v1005[1];
            v210 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (char *)v1005[1]) >> 2);
            v211 = v210 + 1;
            if (v210 + 1 > 0x1555555555555555)
              goto LABEL_1296;
            if (0x5555555555555556 * (((char *)v1005[3] - (char *)v1005[1]) >> 2) > v211)
              v211 = 0x5555555555555556 * (((char *)v1005[3] - (char *)v1005[1]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1005[3] - (char *)v1005[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v212 = 0x1555555555555555;
            else
              v212 = v211;
            *(_QWORD *)&v998[32] = &v1005[4];
            if (v212)
            {
              v213 = TInlineBufferAllocator<MortFeatureEntry,30ul>::allocate((uint64_t)&v1005[4], v212);
              v191 = (char *)v1005[2];
              v209 = (char *)v1005[1];
            }
            else
            {
              v213 = 0;
            }
            v214 = &v213[12 * v210];
            *(_WORD *)v214 = v207;
            *((_WORD *)v214 + 1) = v208;
            *((_DWORD *)v214 + 1) = 0;
            *((_DWORD *)v214 + 2) = v190;
            if (v191 == v209)
            {
              v218 = vdupq_n_s64((unint64_t)v209);
              v215 = &v213[12 * v210];
            }
            else
            {
              v215 = &v213[12 * v210];
              do
              {
                v216 = *(_QWORD *)(v191 - 12);
                v191 -= 12;
                v217 = *((_DWORD *)v191 + 2);
                *(_QWORD *)(v215 - 12) = v216;
                v215 -= 12;
                *((_DWORD *)v215 + 2) = v217;
              }
              while (v191 != v209);
              v218 = *(int64x2_t *)&v1005[1];
            }
            v191 = v214 + 12;
            v1005[1] = v215;
            v1005[2] = v214 + 12;
            *(int64x2_t *)&v998[8] = v218;
            v219 = v1005[3];
            v1005[3] = &v213[12 * v212];
            *(_QWORD *)&v998[24] = v219;
            *(_QWORD *)v998 = v218.i64[0];
            std::__split_buffer<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul> &>::~__split_buffer((uint64_t)v998);
            v166 = v934;
          }
          else
          {
            *(_WORD *)v191 = v207;
            *((_WORD *)v191 + 1) = v208;
            *((_DWORD *)v191 + 1) = 0;
            *((_DWORD *)v191 + 2) = v190;
            v191 += 12;
          }
          v1005[2] = v191;
        }
        v163 = (__n128 *)((char *)v192 + 72);
        v13 = v189 == v192;
        v192 = (__n128 *)((char *)v192 + 72);
      }
      while (!v13);
      LODWORD(v170) = v166->n128_u32[2];
      v164 = v926;
      if ((v170 & 2) != 0)
        goto LABEL_387;
LABEL_388:
      v132 = 0;
      v220 = ~((_DWORD)v170 << 26) & 0x80000000;
      if ((v170 & 0x30) == 0)
        v220 = 0x20000000;
      if (v166[1].n128_u16[2])
        v221 = v220 | 0x40000000;
      else
        v221 = v220;
      switch(v166[1].n128_u16[3])
      {
        case 1u:
          *(_QWORD *)v957 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[8] = 0;
          *(_QWORD *)&v957[16] = 0;
          v223 = v222;
          if (!v222)
            goto LABEL_446;
          v224 = (unint64_t *)v1005[51];
          if (v1005[51] >= v1005[52])
          {
            v315 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
            if ((unint64_t)(v315 + 1) >> 61)
              goto LABEL_1296;
            v316 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
            if (v316 <= v315 + 1)
              v316 = v315 + 1;
            if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
              v317 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v317 = v316;
            *(_QWORD *)&v998[32] = &v1005[53];
            if (v317)
              v318 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v317);
            else
              v318 = 0;
            *(_QWORD *)v998 = v318;
            *(_QWORD *)&v998[8] = &v318[v315];
            *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
            *(_QWORD *)&v998[24] = &v318[v317];
            do
              v388 = __ldaxr((unint64_t *)__dst);
            while (__stlxr(0, (unint64_t *)__dst));
            v318[v315] = v388;
            v389 = *(unint64_t **)&v998[8];
            v226 = (void *)(*(_QWORD *)&v998[16] + 8);
            *(_QWORD *)&v998[16] += 8;
            v390 = (unint64_t *)v1005[51];
            v391 = (unint64_t *)v1005[50];
            if (v1005[51] == v1005[50])
            {
              v393 = vdupq_n_s64((unint64_t)v1005[51]);
            }
            else
            {
              do
              {
                --v389;
                --v390;
                do
                  v392 = __ldaxr(v390);
                while (__stlxr(0, v390));
                *v389 = v392;
              }
              while (v390 != v391);
              v393 = *(int64x2_t *)&v1005[50];
              v226 = *(void **)&v998[16];
            }
            v1005[50] = v389;
            v1005[51] = v226;
            *(int64x2_t *)&v998[8] = v393;
            v400 = v1005[52];
            v1005[52] = *(id *)&v998[24];
            *(_QWORD *)&v998[24] = v400;
            *(_QWORD *)v998 = v393.i64[0];
            std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v998);
          }
          else
          {
            do
              v225 = __ldaxr((unint64_t *)__dst);
            while (__stlxr(0, (unint64_t *)__dst));
            *v224 = v225;
            v226 = v224 + 1;
          }
          v1005[51] = v226;

          v401 = (void *)atomic_load((unint64_t *)&v957[8]);
          __dst[0] = v401;
          v402 = (unint64_t *)v1005[85];
          if (v1005[85] < v1005[86])
          {
            do
              v403 = __ldaxr((unint64_t *)__dst);
            while (__stlxr(0, (unint64_t *)__dst));
            goto LABEL_643;
          }
          v404 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
          if ((unint64_t)(v404 + 1) >> 61)
            goto LABEL_1296;
          v405 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
          if (v405 <= v404 + 1)
            v405 = v404 + 1;
          if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
            v406 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v406 = v405;
          *(_QWORD *)&v998[32] = &v1005[87];
          if (v406)
            v407 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v406);
          else
            v407 = 0;
          *(_QWORD *)v998 = v407;
          *(_QWORD *)&v998[8] = &v407[v404];
          *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
          *(_QWORD *)&v998[24] = &v407[v406];
          do
            v415 = __ldaxr((unint64_t *)__dst);
          while (__stlxr(0, (unint64_t *)__dst));
          v407[v404] = v415;
          v416 = *(unint64_t **)&v998[8];
          v410 = (void *)(*(_QWORD *)&v998[16] + 8);
          *(_QWORD *)&v998[16] += 8;
          v417 = (unint64_t *)v1005[85];
          v418 = (unint64_t *)v1005[84];
          if (v1005[85] == v1005[84])
            goto LABEL_668;
          do
          {
            --v416;
            --v417;
            do
              v419 = __ldaxr(v417);
            while (__stlxr(0, v417));
            *v416 = v419;
          }
          while (v417 != v418);
          goto LABEL_667;
        case 2u:
          memset(&v998[24], 170, 0x690uLL);
          memset(v998, 0, 24);
          *(_QWORD *)&v998[1704] = &v998[24];
          v239 = (unsigned __int16 *)v934[2].n128_u64[1];
          LOBYTE(v1017[0]) = v934[1].n128_u16[2] != 0;
          v996[0] = v948;
          if (*v239 != 256)
            goto LABEL_876;
          v959 = v239;
          v240 = v239 + 3;
          if (v239 + 3 > v948)
            goto LABEL_876;
          v241 = bswap32(v239[2]) >> 16;
          v242 = (unint64_t)&v240[v241];
          v243 = v239 + 4 <= v948 ? (unint64_t)((_BYTE *)v948 - (_BYTE *)v240) >> 1 : 0;
          v244 = v242 <= (unint64_t)v948 && v242 >= (unint64_t)v240;
          if (!v244 && v243 != v241)
            goto LABEL_876;
          OTL::LookupWithCoverage::GetCoverage((OTL::Coverage *)v239, (unint64_t)v948, (uint64_t)v957);
          v245 = operator new(0x28uLL);
          *v245 = &off_1E15DFA70;
          v245[1] = &v959;
          v245[2] = v996;
          v245[3] = v1017;
          v245[4] = v998;
          __dst[3] = v245;
          LODWORD(v246) = OTL::Coverage::Iterate((unsigned __int16 **)v957, (uint64_t)__dst);
          v247 = (void **)__dst[3];
          if (__dst[3] == __dst)
          {
            v247 = __dst;
            v248 = 4;
          }
          else
          {
            if (!__dst[3])
              goto LABEL_523;
            v248 = 5;
          }
          (*((void (**)(void))*v247 + v248))();
LABEL_523:
          if (!(_DWORD)v246)
            goto LABEL_877;
          *(_QWORD *)&v957[488] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v323 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v323 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[456] = v323;
          *(_OWORD *)&v957[472] = v323;
          *(_QWORD *)&v957[432] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[440] = v323;
          *(_QWORD *)&v957[392] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[360] = v323;
          *(_OWORD *)&v957[376] = v323;
          *(_OWORD *)&v957[328] = v323;
          *(_OWORD *)&v957[344] = v323;
          *(_OWORD *)&v957[296] = v323;
          *(_OWORD *)&v957[312] = v323;
          *(_OWORD *)&v957[264] = v323;
          *(_OWORD *)&v957[280] = v323;
          *(_OWORD *)&v957[232] = v323;
          *(_OWORD *)&v957[248] = v323;
          *(_OWORD *)&v957[200] = v323;
          *(_OWORD *)&v957[216] = v323;
          *(_OWORD *)&v957[168] = v323;
          *(_OWORD *)&v957[184] = v323;
          *(_QWORD *)&v957[160] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[104] = v323;
          *(_QWORD *)&v957[120] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[72] = v323;
          *(_OWORD *)&v957[88] = v323;
          *(_QWORD *)&v957[64] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[24] = 0xAAAAAAAAAAAAAAAALL;
          memset(&v957[32], 0, 32);
          memset(&v957[136], 0, 24);
          *(_QWORD *)&v957[128] = &v957[64];
          *(_QWORD *)&v957[400] = &v957[160];
          *(_QWORD *)&v957[16] = 0;
          *(_QWORD *)v957 = off_1E15DEC50;
          memset(&v957[408], 0, 24);
          *(_QWORD *)&v957[496] = &v957[432];
          v917 = NewLKTHandle(v927, 1);
          *(_QWORD *)&v324 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v324 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&__dst[7] = v324;
          *(_OWORD *)&__dst[9] = v324;
          *(_OWORD *)&__dst[3] = v324;
          *(_OWORD *)&__dst[5] = v324;
          memset(__dst, 0, 24);
          __dst[11] = &__dst[3];
          ActionIndex = GetActionIndex((unint64_t **)&v957[136], 0, 0, 0xFFFFu, 0xFFFFFFFFLL);
          v326 = __dst[1];
          v327 = (char *)__dst[1] - (char *)__dst[0];
          if ((void *)((char *)__dst[1] - (char *)__dst[0]) > (void *)7)
          {
            if (v327 != 8)
              __dst[1] = (char *)__dst[0] + 8;
          }
          else
          {
            v328 = ActionIndex;
            v329 = v327 >> 1;
            v330 = 4 - (v327 >> 1);
            if (v330 <= ((char *)__dst[2] - (char *)__dst[1]) >> 1)
            {
              v463 = (char *)__dst[1] + 2 * v330;
              v464 = 8 - 2 * v329;
              do
              {
                *v326++ = ActionIndex;
                v464 -= 2;
              }
              while (v464);
              __dst[1] = v463;
            }
            else
            {
              if ((void *)((char *)__dst[2] - (char *)__dst[0]) <= (void *)4)
                v331 = 4;
              else
                v331 = (char *)__dst[2] - (char *)__dst[0];
              if ((void *)((char *)__dst[2] - (char *)__dst[0]) >= (void *)0x7FFFFFFFFFFFFFFELL)
                v332 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v332 = v331;
              v996[4] = &__dst[3];
              v333 = TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)&__dst[3], v332);
              v334 = v329;
              do
                v333[v334++] = v328;
              while (v334 != 4);
              v335 = (char *)&v333[v329];
              v336 = __dst[1];
              v337 = (char *)__dst[0];
              if (__dst[1] != __dst[0])
              {
                v338 = (char *)__dst[1];
                do
                {
                  v339 = *((_WORD *)v338 - 1);
                  v338 -= 2;
                  *((_WORD *)v335 - 1) = v339;
                  v335 -= 2;
                }
                while (v338 != v337);
              }
              __dst[0] = v335;
              __dst[1] = v333 + 4;
              v340 = __dst[2];
              __dst[2] = &v333[v332];
              v996[2] = v336;
              v996[3] = v340;
              v996[1] = v337;
              v996[0] = v337;
              std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v996);
            }
          }
          v465 = (__CFData *)atomic_load((unint64_t *)&v957[16]);
          MutableBytePtr = CFDataGetMutableBytePtr(v465);
          v466 = *(unsigned __int16 **)v998;
          v923 = *(unsigned __int16 **)&v998[8];
          if (*(_QWORD *)v998 == *(_QWORD *)&v998[8])
          {
            LOWORD(v472) = 4;
          }
          else
          {
            v467 = 4;
            v921 = v221;
            do
            {
              v469 = *((_QWORD *)v466 + 1);
              v468 = *((_QWORD *)v466 + 2);
              v470 = v468 - v469;
              if (v468 == v469)
              {
                v472 = v467;
              }
              else
              {
                v471 = *v466;
                v472 = (v467 + 1);
                if (LKTAddRange(v917, *v466, *v466, v467))
                {
                  v473 = 0;
                  MutableBytePtr[v471 >> 3] |= 1 << (v471 & 7);
                  v474 = *(_WORD **)&v957[416];
                  v475 = *(_QWORD *)&v957[416] - *(_QWORD *)&v957[408];
                  if ((unint64_t)(v470 >> 1) <= 1)
                    v476 = 1;
                  else
                    v476 = v470 >> 1;
                  do
                  {
                    v477 = *((_QWORD *)v466 + 1);
                    if ((unint64_t)v474 >= *(_QWORD *)&v957[424])
                    {
                      v478 = *(_WORD **)&v957[408];
                      v479 = (uint64_t)v474 - *(_QWORD *)&v957[408];
                      if ((uint64_t)v474 - *(_QWORD *)&v957[408] <= -3)
                        goto LABEL_1296;
                      v480 = v479 >> 1;
                      if (*(_QWORD *)&v957[424] - *(_QWORD *)&v957[408] <= (unint64_t)((v479 >> 1) + 1))
                        v481 = v480 + 1;
                      else
                        v481 = *(_QWORD *)&v957[424] - *(_QWORD *)&v957[408];
                      if (*(_QWORD *)&v957[424] - *(_QWORD *)&v957[408] >= 0x7FFFFFFFFFFFFFFEuLL)
                        v482 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v482 = v481;
                      v996[4] = &v957[432];
                      if (v482)
                      {
                        v483 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)&v957[432], v482);
                        v474 = *(_WORD **)&v957[416];
                        v478 = *(_WORD **)&v957[408];
                      }
                      else
                      {
                        v483 = 0;
                      }
                      v484 = &v483[2 * v480];
                      *(_WORD *)v484 = *(_WORD *)(v477 + 2 * v473);
                      if (v474 == v478)
                      {
                        v486 = &v483[2 * v480];
                      }
                      else
                      {
                        v485 = v474;
                        v486 = &v483[2 * v480];
                        do
                        {
                          v487 = *--v485;
                          *((_WORD *)v486 - 1) = v487;
                          v486 -= 2;
                        }
                        while (v485 != v478);
                      }
                      v488 = v484 + 2;
                      *(_QWORD *)&v957[408] = v486;
                      *(_QWORD *)&v957[416] = v484 + 2;
                      v489 = *(void **)&v957[424];
                      *(_QWORD *)&v957[424] = &v483[2 * v482];
                      v996[2] = v474;
                      v996[3] = v489;
                      v996[1] = v478;
                      v996[0] = v478;
                      std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v996);
                      v474 = v488;
                    }
                    else
                    {
                      *v474++ = *(_WORD *)(v477 + 2 * v473);
                    }
                    *(_QWORD *)&v957[416] = v474;
                    ++v473;
                  }
                  while (v473 != v476);
                  v490 = GetActionIndex((unint64_t **)&v957[136], 0, (16 * v470) & 0xD7E0 | 0x2800, v475 >> 1, 0xFFFFFFFFLL);
                  v491 = v490;
                  v492 = (char *)__dst[1];
                  if (__dst[1] >= __dst[2])
                  {
                    v494 = (char *)__dst[0];
                    v495 = (char *)__dst[1] - (char *)__dst[0];
                    v164 = v926;
                    v221 = v921;
                    if ((char *)__dst[1] - (char *)__dst[0] <= -3)
                      goto LABEL_1296;
                    v496 = v495 >> 1;
                    if ((void *)((char *)__dst[2] - (char *)__dst[0]) <= (void *)((v495 >> 1) + 1))
                      v497 = v496 + 1;
                    else
                      v497 = (char *)__dst[2] - (char *)__dst[0];
                    if ((void *)((char *)__dst[2] - (char *)__dst[0]) >= (void *)0x7FFFFFFFFFFFFFFELL)
                      v498 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v498 = v497;
                    v996[4] = &__dst[3];
                    if (v498)
                    {
                      v499 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)&__dst[3], v498);
                      v492 = (char *)__dst[1];
                      v494 = (char *)__dst[0];
                    }
                    else
                    {
                      v499 = 0;
                    }
                    v500 = &v499[2 * v496];
                    *(_WORD *)v500 = v491;
                    if (v492 == v494)
                    {
                      v502 = &v499[2 * v496];
                    }
                    else
                    {
                      v501 = v492;
                      v502 = &v499[2 * v496];
                      do
                      {
                        v503 = *((_WORD *)v501 - 1);
                        v501 -= 2;
                        *((_WORD *)v502 - 1) = v503;
                        v502 -= 2;
                      }
                      while (v501 != v494);
                    }
                    v493 = v500 + 2;
                    __dst[0] = v502;
                    __dst[1] = v500 + 2;
                    v504 = __dst[2];
                    __dst[2] = &v499[2 * v498];
                    v996[2] = v492;
                    v996[3] = v504;
                    v996[1] = v494;
                    v996[0] = v494;
                    std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v996);
                  }
                  else
                  {
                    *(_WORD *)__dst[1] = v490;
                    v493 = v492 + 2;
                    v164 = v926;
                    v221 = v921;
                  }
                  __dst[1] = v493;
                }
              }
              v466 += 28;
              v467 = v472;
            }
            while (v466 != v923);
          }
          *(_DWORD *)&v957[24] = (unsigned __int16)v472;
          LKTCreateLookupTable(v917, (unint64_t *)v996);
          do
            v505 = __ldaxr((unint64_t *)v996);
          while (__stlxr(0, (unint64_t *)v996));
          do
            v506 = (void *)__ldaxr((unint64_t *)&v957[32]);
          while (__stlxr(v505, (unint64_t *)&v957[32]));

          DisposeLKTHandle(v917);
          std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)__dst[0], (_WORD *)__dst[0] + *(unsigned int *)&v957[24], (char **)&v957[40]);
          std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)__dst[0], (_WORD *)__dst[0] + *(unsigned int *)&v957[24], (char **)&v957[40]);
          v996[0] = __dst;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v996);
          if (*(_QWORD *)&v957[416] - *(_QWORD *)&v957[408] > 0xFFFFFFFEuLL)
          {
            v996[0] = 0;
          }
          else
          {
            __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
            v507 = (const __CFData *)atomic_load((unint64_t *)__dst);
            v508 = CFDataGetLength(v507);
            CFDataIncreaseLength(v507, 4);
            v509 = (_anonymous_namespace_ *)atomic_load((unint64_t *)__dst);
            v511 = (const __CFData *)atomic_load((unint64_t *)__dst);
            v512 = bswap32(CFDataGetLength(v511) - 12);
            *(_DWORD *)&CFDataGetMutableBytePtr(v507)[v508] = v512;
            v513 = *(unsigned __int16 **)&v957[408];
            v514 = *(unsigned __int16 **)&v957[416];
            while (v513 != v514)
            {
              v515 = (__CFData *)atomic_load((unint64_t *)__dst);
              v516 = *v513++;
              LOWORD(v996[0]) = bswap32(v516) >> 16;
              CFDataAppendBytes(v515, (const UInt8 *)v996, 2);
            }
            do
              v517 = (void *)__ldaxr((unint64_t *)__dst);
            while (__stlxr(0, (unint64_t *)__dst));
            v996[0] = v517;

          }
          v518 = (unint64_t *)v1005[51];
          if (v1005[51] >= v1005[52])
          {
            v521 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
            if ((unint64_t)(v521 + 1) >> 61)
              goto LABEL_1296;
            v522 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
            if (v522 <= v521 + 1)
              v522 = v521 + 1;
            if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
              v523 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v523 = v522;
            __dst[4] = &v1005[53];
            if (v523)
              v524 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v523);
            else
              v524 = 0;
            __dst[0] = v524;
            __dst[1] = &v524[8 * v521];
            __dst[2] = __dst[1];
            __dst[3] = &v524[8 * v523];
            do
              v548 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *(_QWORD *)&v524[8 * v521] = v548;
            v549 = (unint64_t *)__dst[1];
            v520 = (char *)__dst[2] + 8;
            __dst[2] = (char *)__dst[2] + 8;
            v550 = (unint64_t *)v1005[51];
            v551 = (unint64_t *)v1005[50];
            if (v1005[51] == v1005[50])
            {
              v553 = vdupq_n_s64((unint64_t)v1005[51]);
            }
            else
            {
              do
              {
                --v549;
                --v550;
                do
                  v552 = __ldaxr(v550);
                while (__stlxr(0, v550));
                *v549 = v552;
              }
              while (v550 != v551);
              v553 = *(int64x2_t *)&v1005[50];
              v520 = (char *)__dst[2];
            }
            v1005[50] = v549;
            v1005[51] = v520;
            *(int64x2_t *)&__dst[1] = v553;
            v554 = v1005[52];
            v1005[52] = __dst[3];
            __dst[3] = v554;
            __dst[0] = (void *)v553.i64[0];
            std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)__dst);
          }
          else
          {
            do
              v519 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *v518 = v519;
            v520 = (char *)(v518 + 1);
          }
          v1005[51] = v520;

          v555 = (void *)atomic_load((unint64_t *)&v957[16]);
          v996[0] = v555;
          v556 = (unint64_t *)v1005[85];
          if (v1005[85] >= v1005[86])
          {
            v559 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
            if ((unint64_t)(v559 + 1) >> 61)
              goto LABEL_1296;
            v560 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
            if (v560 <= v559 + 1)
              v560 = v559 + 1;
            if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
              v561 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v561 = v560;
            __dst[4] = &v1005[87];
            if (v561)
              v562 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v561);
            else
              v562 = 0;
            __dst[0] = v562;
            __dst[1] = &v562[8 * v559];
            __dst[2] = __dst[1];
            __dst[3] = &v562[8 * v561];
            do
              v563 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *(_QWORD *)&v562[8 * v559] = v563;
            v564 = (unint64_t *)__dst[1];
            v558 = (char *)__dst[2] + 8;
            __dst[2] = (char *)__dst[2] + 8;
            v565 = (unint64_t *)v1005[85];
            v566 = (unint64_t *)v1005[84];
            if (v1005[85] == v1005[84])
            {
              v568 = vdupq_n_s64((unint64_t)v1005[85]);
            }
            else
            {
              do
              {
                --v564;
                --v565;
                do
                  v567 = __ldaxr(v565);
                while (__stlxr(0, v565));
                *v564 = v567;
              }
              while (v565 != v566);
              v568 = *(int64x2_t *)&v1005[84];
              v558 = (char *)__dst[2];
            }
            v1005[84] = v564;
            v1005[85] = v558;
            *(int64x2_t *)&__dst[1] = v568;
            v569 = v1005[86];
            v1005[86] = __dst[3];
            __dst[3] = v569;
            __dst[0] = (void *)v568.i64[0];
            std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)__dst);
          }
          else
          {
            do
              v557 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *v556 = v557;
            v558 = (char *)(v556 + 1);
          }
          v1005[85] = v558;

          *(_QWORD *)v957 = off_1E15DEC50;
          __dst[0] = &v957[408];
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
          __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
          __dst[1] = 0;
          __dst[2] = 0;
          v570 = v927;
          v571 = (__CFData *)atomic_load((unint64_t *)&__dst[1]);
          v572 = CFDataGetMutableBytePtr(v571);
          v573 = NewLKTHandle(v570, 0);
          v574 = *(unsigned __int16 **)v998;
          v575 = *(unsigned __int16 **)&v998[8];
          while (v574 != v575)
          {
            v576 = *v574;
            if (LKTAddRange(v573, *v574, *v574, v574[24]))
              v572[v576 >> 3] |= 1 << (v576 & 7);
            v574 += 28;
          }
          LKTCreateLookupTable(v573, (unint64_t *)v957);
          do
            v577 = __ldaxr((unint64_t *)v957);
          while (__stlxr(0, (unint64_t *)v957));
          do
            v578 = (void *)__ldaxr((unint64_t *)&__dst[2]);
          while (__stlxr(v577, (unint64_t *)&__dst[2]));

          DisposeLKTHandle(v573);
          if (!atomic_load((unint64_t *)&__dst[2]))
          {

LABEL_876:
            LOBYTE(v246) = 0;
LABEL_877:
            v273 = 1;
LABEL_878:
            v583 = *(_WORD **)v998;
            if (!*(_QWORD *)v998)
              goto LABEL_928;
            goto LABEL_879;
          }
          v580 = (unint64_t *)v1005[51];
          if (v1005[51] >= v1005[52])
          {
            v588 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
            if ((unint64_t)(v588 + 1) >> 61)
              goto LABEL_1296;
            v589 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
            if (v589 <= v588 + 1)
              v589 = v588 + 1;
            if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
              v590 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v590 = v589;
            *(_QWORD *)&v957[32] = &v1005[53];
            if (v590)
              v591 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v590);
            else
              v591 = 0;
            *(_QWORD *)v957 = v591;
            *(_QWORD *)&v957[8] = &v591[v588];
            *(_QWORD *)&v957[16] = *(_QWORD *)&v957[8];
            *(_QWORD *)&v957[24] = &v591[v590];
            do
              v613 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            v591[v588] = v613;
            v614 = *(unint64_t **)&v957[8];
            v582 = (void *)(*(_QWORD *)&v957[16] + 8);
            *(_QWORD *)&v957[16] += 8;
            v615 = (unint64_t *)v1005[51];
            v616 = (unint64_t *)v1005[50];
            if (v1005[51] == v1005[50])
            {
              v618 = vdupq_n_s64((unint64_t)v1005[51]);
            }
            else
            {
              do
              {
                --v614;
                --v615;
                do
                  v617 = __ldaxr(v615);
                while (__stlxr(0, v615));
                *v614 = v617;
              }
              while (v615 != v616);
              v618 = *(int64x2_t *)&v1005[50];
              v582 = *(void **)&v957[16];
            }
            v1005[50] = v614;
            v1005[51] = v582;
            *(int64x2_t *)&v957[8] = v618;
            v619 = v1005[52];
            v1005[52] = *(id *)&v957[24];
            *(_QWORD *)&v957[24] = v619;
            *(_QWORD *)v957 = v618.i64[0];
            std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v957);
          }
          else
          {
            do
              v581 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *v580 = v581;
            v582 = v580 + 1;
          }
          v1005[51] = v582;

          v620 = (void *)atomic_load((unint64_t *)&__dst[1]);
          v996[0] = v620;
          v621 = (unint64_t *)v1005[85];
          if (v1005[85] >= v1005[86])
          {
            v624 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
            if ((unint64_t)(v624 + 1) >> 61)
              goto LABEL_1296;
            v625 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
            if (v625 <= v624 + 1)
              v625 = v624 + 1;
            if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
              v626 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v626 = v625;
            *(_QWORD *)&v957[32] = &v1005[87];
            if (v626)
              v627 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v626);
            else
              v627 = 0;
            *(_QWORD *)v957 = v627;
            *(_QWORD *)&v957[8] = &v627[v624];
            *(_QWORD *)&v957[16] = *(_QWORD *)&v957[8];
            *(_QWORD *)&v957[24] = &v627[v626];
            do
              v628 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            v627[v624] = v628;
            v629 = *(unint64_t **)&v957[8];
            v623 = (void *)(*(_QWORD *)&v957[16] + 8);
            *(_QWORD *)&v957[16] += 8;
            v630 = (unint64_t *)v1005[85];
            v631 = (unint64_t *)v1005[84];
            if (v1005[85] == v1005[84])
            {
              v633 = vdupq_n_s64((unint64_t)v1005[85]);
            }
            else
            {
              do
              {
                --v629;
                --v630;
                do
                  v632 = __ldaxr(v630);
                while (__stlxr(0, v630));
                *v629 = v632;
              }
              while (v630 != v631);
              v633 = *(int64x2_t *)&v1005[84];
              v623 = *(void **)&v957[16];
            }
            v1005[84] = v629;
            v1005[85] = v623;
            *(int64x2_t *)&v957[8] = v633;
            v634 = v1005[86];
            v1005[86] = *(id *)&v957[24];
            *(_QWORD *)&v957[24] = v634;
            *(_QWORD *)v957 = v633.i64[0];
            std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v957);
          }
          else
          {
            do
              v622 = __ldaxr((unint64_t *)v996);
            while (__stlxr(0, (unint64_t *)v996));
            *v621 = v622;
            v623 = v621 + 1;
          }
          v1005[85] = v623;

          v635 = *(uint64_t **)v947;
          if (!*(_QWORD *)v947)
            goto LABEL_987;
          v583 = *(_WORD **)v998;
          v636 = *(_WORD **)&v998[8];
          if (*(_QWORD *)v998 != *(_QWORD *)&v998[8])
          {
            do
            {
              if (*((_QWORD *)v583 + 1) == *((_QWORD *)v583 + 2))
              {
                memset(&v957[24], 170, 24);
                *(_OWORD *)&v957[8] = 0u;
                __dst[4] = &v957[24];
                *(_QWORD *)v957 = 0;
                *(_QWORD *)&v957[32] = &v957[26];
                *(_WORD *)&v957[24] = *v583;
                *(_QWORD *)v957 = &v957[24];
                *(_QWORD *)&v957[8] = &v957[26];
                *(_QWORD *)&v957[16] = &v957[26];
                memset(__dst, 0, 32);
                std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,3ul> &>::~__split_buffer((uint64_t)__dst);
                *(_QWORD *)&v957[8] = &v957[26];
                *(_WORD *)&v957[40] = v583[24];
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v957);
              }
              else
              {
                v637 = (char *)v635[185];
                v638 = v635[186];
                if ((unint64_t)v637 >= v638)
                {
                  v640 = (char *)v635[184];
                  v641 = v637 - v640;
                  if (v637 - v640 <= -3)
                    goto LABEL_1296;
                  v642 = v641 >> 1;
                  v643 = v638 - (_QWORD)v640;
                  if (v643 <= (v641 >> 1) + 1)
                    v644 = v642 + 1;
                  else
                    v644 = v643;
                  if (v643 >= 0x7FFFFFFFFFFFFFFELL)
                    v645 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v645 = v644;
                  *(_QWORD *)&v957[32] = v635 + 187;
                  if (v645)
                  {
                    v646 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(v635 + 187), v645);
                    v637 = (char *)v635[185];
                    v640 = (char *)v635[184];
                  }
                  else
                  {
                    v646 = 0;
                  }
                  v647 = &v646[2 * v642];
                  *(_WORD *)v647 = *v583;
                  if (v637 == v640)
                  {
                    v649 = &v646[2 * v642];
                  }
                  else
                  {
                    v648 = v637;
                    v649 = &v646[2 * v642];
                    do
                    {
                      v650 = *((_WORD *)v648 - 1);
                      v648 -= 2;
                      *((_WORD *)v649 - 1) = v650;
                      v649 -= 2;
                    }
                    while (v648 != v640);
                  }
                  v639 = v647 + 2;
                  v635[184] = (uint64_t)v649;
                  v635[185] = (uint64_t)(v647 + 2);
                  v651 = v635[186];
                  v635[186] = (uint64_t)&v646[2 * v645];
                  *(_QWORD *)&v957[16] = v637;
                  *(_QWORD *)&v957[24] = v651;
                  *(_QWORD *)&v957[8] = v640;
                  *(_QWORD *)v957 = v640;
                  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v957);
                }
                else
                {
                  *(_WORD *)v637 = *v583;
                  v639 = v637 + 2;
                }
                v635[185] = (uint64_t)v639;
              }
              v583 += 28;
            }
            while (v583 != v636);
LABEL_987:
            v273 = 28;
            LOBYTE(v246) = 1;
            goto LABEL_878;
          }
          v273 = 28;
          LOBYTE(v246) = 1;
          if (!*(_QWORD *)v998)
            goto LABEL_928;
LABEL_879:
          v584 = *(_WORD **)&v998[8];
          v585 = v583;
          if (*(_WORD **)&v998[8] != v583)
          {
            do
            {
              v586 = v584 - 28;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)(v584 - 24));
              v584 = v586;
            }
            while (v586 != v583);
            v585 = *(_BYTE **)v998;
          }
          *(_QWORD *)&v998[8] = v583;
          if (&v998[24] > v585 || &v998[1704] <= v585)
            operator delete(v585);
LABEL_928:
          if ((v246 & 1) == 0)
            goto LABEL_929;
          goto LABEL_930;
        case 3u:
          v249 = v166->n128_u16[3] + ((int)((_DWORD)v170 << 25) >> 31);
          *(_QWORD *)v957 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[8] = 0;
          *(_QWORD *)&v957[16] = 0;
          v223 = v250;
          if (v250)
          {
            v251 = (unint64_t *)v1005[51];
            if (v1005[51] >= v1005[52])
            {
              v319 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
              if ((unint64_t)(v319 + 1) >> 61)
                goto LABEL_1296;
              v320 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
              if (v320 <= v319 + 1)
                v320 = v319 + 1;
              if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
                v321 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v321 = v320;
              *(_QWORD *)&v998[32] = &v1005[53];
              if (v321)
                v322 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v321);
              else
                v322 = 0;
              *(_QWORD *)v998 = v322;
              *(_QWORD *)&v998[8] = &v322[v319];
              *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
              *(_QWORD *)&v998[24] = &v322[v321];
              do
                v394 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              v322[v319] = v394;
              v395 = *(unint64_t **)&v998[8];
              v253 = (void *)(*(_QWORD *)&v998[16] + 8);
              *(_QWORD *)&v998[16] += 8;
              v396 = (unint64_t *)v1005[51];
              v397 = (unint64_t *)v1005[50];
              if (v1005[51] == v1005[50])
              {
                v399 = vdupq_n_s64((unint64_t)v1005[51]);
              }
              else
              {
                do
                {
                  --v395;
                  --v396;
                  do
                    v398 = __ldaxr(v396);
                  while (__stlxr(0, v396));
                  *v395 = v398;
                }
                while (v396 != v397);
                v399 = *(int64x2_t *)&v1005[50];
                v253 = *(void **)&v998[16];
              }
              v1005[50] = v395;
              v1005[51] = v253;
              *(int64x2_t *)&v998[8] = v399;
              v408 = v1005[52];
              v1005[52] = *(id *)&v998[24];
              *(_QWORD *)&v998[24] = v408;
              *(_QWORD *)v998 = v399.i64[0];
              std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v998);
            }
            else
            {
              do
                v252 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              *v251 = v252;
              v253 = v251 + 1;
            }
            v1005[51] = v253;

            v409 = (void *)atomic_load((unint64_t *)&v957[8]);
            __dst[0] = v409;
            v402 = (unint64_t *)v1005[85];
            if (v1005[85] >= v1005[86])
            {
              v411 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
              if ((unint64_t)(v411 + 1) >> 61)
                goto LABEL_1296;
              v412 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
              if (v412 <= v411 + 1)
                v412 = v411 + 1;
              if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
                v413 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v413 = v412;
              *(_QWORD *)&v998[32] = &v1005[87];
              if (v413)
                v414 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v413);
              else
                v414 = 0;
              *(_QWORD *)v998 = v414;
              *(_QWORD *)&v998[8] = &v414[v411];
              *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
              *(_QWORD *)&v998[24] = &v414[v413];
              do
                v420 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              v414[v411] = v420;
              v416 = *(unint64_t **)&v998[8];
              v410 = (void *)(*(_QWORD *)&v998[16] + 8);
              *(_QWORD *)&v998[16] += 8;
              v417 = (unint64_t *)v1005[85];
              v421 = (unint64_t *)v1005[84];
              if (v1005[85] == v1005[84])
              {
LABEL_668:
                v423 = vdupq_n_s64((unint64_t)v417);
              }
              else
              {
                do
                {
                  --v416;
                  --v417;
                  do
                    v422 = __ldaxr(v417);
                  while (__stlxr(0, v417));
                  *v416 = v422;
                }
                while (v417 != v421);
LABEL_667:
                v423 = *(int64x2_t *)&v1005[84];
                v410 = *(void **)&v998[16];
              }
              v1005[84] = v416;
              v1005[85] = v410;
              *(int64x2_t *)&v998[8] = v423;
              v424 = v1005[86];
              v1005[86] = *(id *)&v998[24];
              *(_QWORD *)&v998[24] = v424;
              *(_QWORD *)v998 = v423.i64[0];
              std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v998);
            }
            else
            {
              do
                v403 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
LABEL_643:
              *v402 = v403;
              v410 = v402 + 1;
            }
            v1005[85] = v410;

            if (*(_QWORD *)v947)
            {
              v425 = (const __CFData *)atomic_load((unint64_t *)&v957[16]);
              AddPrevLigaturesFromSingleSubstitutionLookupTable(*(uint64_t *)v947, v425);
            }
            v273 = 28;
          }
          else
          {
LABEL_446:
            v273 = 1;
          }

          if (v223)
            goto LABEL_930;
          goto LABEL_929;
        case 4u:
          v254 = v166;
          memset(&v998[24], 170, 0x5A0uLL);
          memset(v998, 0, 24);
          *(_QWORD *)&v998[1464] = &v998[24];
          if (!LigInputsForLigatureSubst(v927, (OTL::LookupWithCoverage *)v254[2].n128_u64[1], (char *)v948, (__n128 *)v254[3].n128_u64, (unsigned __int16 ***)v998))
          {
            v273 = 1;
            goto LABEL_596;
          }
          *(_QWORD *)&v255 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v255 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v996[29] = v255;
          *(_OWORD *)&v996[31] = v255;
          *(_OWORD *)&v996[25] = v255;
          *(_OWORD *)&v996[27] = v255;
          *(_OWORD *)&v996[21] = v255;
          *(_OWORD *)&v996[23] = v255;
          *(_OWORD *)&v996[17] = v255;
          *(_OWORD *)&v996[19] = v255;
          *(_OWORD *)&v996[13] = v255;
          *(_OWORD *)&v996[15] = v255;
          *(_OWORD *)&v996[9] = v255;
          *(_OWORD *)&v996[11] = v255;
          *(_OWORD *)&v996[5] = v255;
          *(_OWORD *)&v996[7] = v255;
          *(_OWORD *)&v996[3] = v255;
          memset(v996, 0, 24);
          v996[33] = &v996[3];
          v256 = *(_QWORD *)&v998[8];
          v257 = *(_QWORD *)v998;
          if (*(_QWORD *)v998 == *(_QWORD *)&v998[8])
            goto LABEL_448;
          v258 = *(_QWORD *)v998;
          while (2)
          {
            v259 = 0;
            while (v258 == v257)
            {
LABEL_436:
              v258 += 48;
              v259 += 48;
              if (v258 == v256)
              {
LABEL_448:
                *(_QWORD *)v957 = v256;
                goto LABEL_449;
              }
            }
            v260 = *(const void **)v258;
            v261 = *(_QWORD *)(v258 + 8) - *(_QWORD *)v258;
            v262 = (_QWORD *)(v257 + 8);
            v263 = v259;
            while (1)
            {
              v264 = (const void *)*(v262 - 1);
              if (v261 < *v262 - (_QWORD)v264 && !memcmp(v260, v264, v261))
                break;
              v262 += 6;
              v263 -= 48;
              if (!v263)
                goto LABEL_436;
            }
            *(_QWORD *)v957 = v258;
            if (v258 != v256)
            {
              v257 = v258;
              continue;
            }
            break;
          }
LABEL_449:
          v274 = (char *)v996[0];
          v275 = (char *)v996[1];
          v164 = v926;
          if (v996[0] == v996[1])
          {
LABEL_496:
            if (*(_QWORD *)v947)
              AddPrevLigaturesFromLigInputs(*(char ***)v947, *(char ***)v998, *(uint64_t *)&v998[8]);
            v273 = 28;
          }
          else
          {
            while (1)
            {
              memset(&__dst[1], 170, 0x2A8uLL);
              memset(&__dst[4], 0, 32);
              memset(&__dst[17], 0, 24);
              __dst[16] = &__dst[8];
              __dst[43] = &__dst[20];
              __dst[2] = 0;
              __dst[0] = off_1E15DEC28;
              memset(&__dst[44], 0, 24);
              memset(&__dst[63], 0, 24);
              __dst[62] = &__dst[47];
              __dst[74] = &__dst[66];
              memset(&__dst[75], 0, 24);
              __dst[86] = &__dst[78];
              memset(&v957[24], 170, 0x2D0uLL);
              memset(v957, 0, 24);
              *(_QWORD *)&v957[744] = &v957[24];
              v277 = v276;
              if (v276)
              {
                v278 = (unint64_t *)v1005[51];
                if (v1005[51] >= v1005[52])
                {
                  v281 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
                  if ((unint64_t)(v281 + 1) >> 61)
                    goto LABEL_1296;
                  v282 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
                  if (v282 <= v281 + 1)
                    v282 = v281 + 1;
                  if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
                    v283 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v283 = v282;
                  *(_QWORD *)&v962 = &v1005[53];
                  if (v283)
                    v284 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v283);
                  else
                    v284 = 0;
                  v959 = v284;
                  v960.i64[0] = (uint64_t)&v284[8 * v281];
                  v960.i64[1] = v960.i64[0];
                  v961 = (id *)&v284[8 * v283];
                  do
                    v285 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *(_QWORD *)&v284[8 * v281] = v285;
                  v286 = (unint64_t *)v960.i64[0];
                  v280 = (void *)(v960.i64[1] + 8);
                  v960.i64[1] += 8;
                  v287 = (unint64_t *)v1005[51];
                  v288 = (unint64_t *)v1005[50];
                  if (v1005[51] == v1005[50])
                  {
                    v290 = vdupq_n_s64((unint64_t)v1005[51]);
                  }
                  else
                  {
                    do
                    {
                      --v286;
                      --v287;
                      do
                        v289 = __ldaxr(v287);
                      while (__stlxr(0, v287));
                      *v286 = v289;
                    }
                    while (v287 != v288);
                    v290 = *(int64x2_t *)&v1005[50];
                    v280 = (void *)v960.i64[1];
                  }
                  v1005[50] = v286;
                  v1005[51] = v280;
                  v960 = v290;
                  v291 = (id *)v1005[52];
                  v1005[52] = v961;
                  v961 = v291;
                  v959 = (id)v290.i64[0];
                  std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)&v959);
                }
                else
                {
                  do
                    v279 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *v278 = v279;
                  v280 = v278 + 1;
                }
                v1005[51] = v280;

                v292 = (void *)atomic_load((unint64_t *)&__dst[2]);
                v1017[0] = v292;
                v293 = (unint64_t *)v1005[85];
                if (v1005[85] >= v1005[86])
                {
                  v296 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
                  if ((unint64_t)(v296 + 1) >> 61)
                    goto LABEL_1296;
                  v297 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
                  if (v297 <= v296 + 1)
                    v297 = v296 + 1;
                  if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
                    v298 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v298 = v297;
                  *(_QWORD *)&v962 = &v1005[87];
                  if (v298)
                    v299 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v298);
                  else
                    v299 = 0;
                  v959 = v299;
                  v960.i64[0] = (uint64_t)&v299[8 * v296];
                  v960.i64[1] = v960.i64[0];
                  v961 = (id *)&v299[8 * v298];
                  do
                    v300 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *(_QWORD *)&v299[8 * v296] = v300;
                  v301 = (unint64_t *)v960.i64[0];
                  v295 = (void *)(v960.i64[1] + 8);
                  v960.i64[1] += 8;
                  v302 = (unint64_t *)v1005[85];
                  v303 = (unint64_t *)v1005[84];
                  if (v1005[85] == v1005[84])
                  {
                    v305 = vdupq_n_s64((unint64_t)v1005[85]);
                  }
                  else
                  {
                    do
                    {
                      --v301;
                      --v302;
                      do
                        v304 = __ldaxr(v302);
                      while (__stlxr(0, v302));
                      *v301 = v304;
                    }
                    while (v302 != v303);
                    v305 = *(int64x2_t *)&v1005[84];
                    v295 = (void *)v960.i64[1];
                  }
                  v1005[84] = v301;
                  v1005[85] = v295;
                  v960 = v305;
                  v306 = (id *)v1005[86];
                  v1005[86] = v961;
                  v961 = v306;
                  v959 = (id)v305.i64[0];
                  std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)&v959);
                }
                else
                {
                  do
                    v294 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *v293 = v294;
                  v295 = v293 + 1;
                }
                v1005[85] = v295;

              }
              v959 = v957;
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v959);
              __dst[0] = off_1E15DEC28;
              *(_QWORD *)v957 = &__dst[75];
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);
              *(_QWORD *)v957 = &__dst[63];
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);
              *(_QWORD *)v957 = &__dst[44];
              std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);
              __dst[0] = off_1E15DECA0;
              std::vector<STXEntryOne,TInlineBufferAllocator<STXEntryOne,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&__dst[17]);
              *(_QWORD *)v957 = &__dst[5];
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);

              if ((v277 & 1) == 0)
                break;
              v274 += 8;
              if (v274 == v275)
                goto LABEL_496;
            }
            v273 = 1;
          }
          if (v996[0])
          {
            v996[1] = v996[0];
            if (&v996[3] > v996[0] || &v996[33] <= v996[0])
              operator delete(v996[0]);
          }
LABEL_596:
          v385 = *(_QWORD *)v998;
          if (!*(_QWORD *)v998)
            goto LABEL_606;
          v386 = *(_QWORD *)&v998[8];
          v382 = *(_BYTE **)v998;
          if (*(_QWORD *)&v998[8] != *(_QWORD *)v998)
          {
            do
            {
              v386 -= 48;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v386);
            }
            while (v386 != v385);
            v382 = *(_BYTE **)v998;
          }
          *(_QWORD *)&v998[8] = v385;
          v383 = &v998[24] > v382;
          v384 = &v998[1464];
          goto LABEL_601;
        case 5u:
          goto LABEL_1283;
        case 6u:
          if (*(_WORD *)v166[2].n128_u64[1] != 768)
            goto LABEL_1295;
          memset(&v998[64], 170, 0x3098uLL);
          *(_QWORD *)&v957[400] = 0;
          memset(v957, 0, 136);
          *(_QWORD *)&v957[136] = &v957[40];
          memset(&v957[144], 0, 120);
          *(_QWORD *)&v957[264] = &v957[168];
          memset(&v957[272], 0, 120);
          *(_QWORD *)&v957[392] = &v957[296];
          *(_QWORD *)&v957[408] = 0;
          *(_QWORD *)v998 = &v998[24];
          *(_QWORD *)&v998[8] = &v998[24];
          memset(&v998[24], 0, 40);
          *(_QWORD *)&v998[16] = &v998[440];
          *(_QWORD *)&v998[160] = &v998[64];
          memset(&v998[168], 0, 24);
          v999 = &v998[440];
          *(_QWORD *)&v998[288] = &v998[192];
          std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::vector<unsigned short> const*>,std::__wrap_iter<std::vector<unsigned short> const*>>(&v998[168], 0, 0, 0);
          memset(&v998[296], 0, 24);
          *(_QWORD *)&v998[416] = &v998[320];
          std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::vector<unsigned short> const*>,std::__wrap_iter<std::vector<unsigned short> const*>>(&v998[296], *(uint64_t *)&v957[272], *(uint64_t *)&v957[280], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v957[280] - *(_QWORD *)&v957[272]) >> 3));
          *(_OWORD *)&v998[424] = *(_OWORD *)&v957[400];
          *(_QWORD *)&v998[8] = &v998[440];
          __dst[0] = &v957[272];
          std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
          __dst[0] = &v957[144];
          std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
          __dst[0] = &v957[16];
          std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
          v265 = v934;
          v266 = v934[2].n128_u64[0];
          v267 = *(_QWORD *)v998;
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v998[16] - *(_QWORD *)v998) >> 5) >= v266)
            goto LABEL_578;
          if (v266 >= 0x9D89D89D89D89ELL)
            goto LABEL_1296;
          *(_QWORD *)&v957[32] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v268 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v268 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)v957 = v268;
          *(_OWORD *)&v957[16] = v268;
          v269 = *(__n128 **)&v998[8];
          v270 = *(__n128 **)v998;
          v271 = *(__n128 **)&v957[8];
          if (*(_QWORD *)&v998[8] == *(_QWORD *)v998)
          {
            v272 = vdupq_n_s64(*(unint64_t *)&v998[8]);
          }
          else
          {
            do
            {
              v271 -= 26;
              v269 -= 26;
            }
            while (v269 != v270);
            v272 = *(int64x2_t *)v998;
          }
          *(_QWORD *)v998 = v271;
          v375 = *(_QWORD *)&v998[16];
          v376 = *(_OWORD *)&v957[16];
          *(int64x2_t *)&v957[8] = v272;
          *(_OWORD *)&v998[8] = v376;
          *(_QWORD *)&v957[24] = v375;
          *(_QWORD *)v957 = v272.i64[0];
          v267 = *(_QWORD *)v998;
          v265 = v934;
LABEL_578:
          n128_u64 = v265[3].n128_u64;
          v378 = *(_DWORD *)(v267 + 400);
          if (v378 != 1)
          {
            if (!v378)
            {
              if (v934[2].n128_u64[0] > 1)
                v273 = 1;
              else
                v273 = 20;
              goto LABEL_586;
            }
            goto LABEL_585;
          }
          v379 = *(_WORD **)(v267 + 408);
          if (*v379)
            goto LABEL_585;
          v525 = bswap32((unsigned __int16)v379[1]) >> 16;
          if (v525 >= v911)
            goto LABEL_585;
          v526 = (unsigned __int16 *)((char *)v912 + (bswap32(v912[v525 + 1]) >> 16));
          if ((unint64_t)(v526 + 2) < v913 || v526 + 3 > v948)
            goto LABEL_585;
          v528 = (unint64_t)&v526[(bswap32(v526[2]) >> 16) + 3] + (((unint64_t)v526[1] >> 11) & 2);
          if ((unint64_t)v526 < v913 || v528 < (unint64_t)v526 || v528 > (unint64_t)v948)
            goto LABEL_1257;
          v531 = ResolveLookupSubtable(v526, (unint64_t)v948, 0);
          v904 = v532;
          v533 = v531;
          if (v531 != 1
            && *(_QWORD *)(v267 + 16) != *(_QWORD *)(v267 + 24)
            && *(_QWORD *)(v267 + 272) != *(_QWORD *)(v267 + 280))
          {
            goto LABEL_1257;
          }
          v534 = v934;
          v535 = v934[2].n128_u64[0];
          v915 = v267;
          if (v535 >= 2)
          {
            v536 = (uint64_t)n128_u64;
            for (i = 1; i < v535; ++i)
            {
              v538 = v948;
              if ((unsigned __int16)ResolveLookupSubtableWithIndex((unsigned __int16 *)v534[1].n128_u64[1], i, (unint64_t)v948) != 6)goto LABEL_1257;
              *(_QWORD *)&v540 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v540 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v957[376] = v540;
              *(_OWORD *)&v957[344] = v540;
              *(_OWORD *)&v957[360] = v540;
              *(_OWORD *)&v957[312] = v540;
              *(_OWORD *)&v957[328] = v540;
              *(_OWORD *)&v957[296] = v540;
              *(_OWORD *)&v957[248] = v540;
              *(_OWORD *)&v957[216] = v540;
              *(_OWORD *)&v957[232] = v540;
              *(_OWORD *)&v957[184] = v540;
              *(_OWORD *)&v957[200] = v540;
              *(_OWORD *)&v957[168] = v540;
              *(_OWORD *)&v957[120] = v540;
              *(_OWORD *)&v957[88] = v540;
              *(_OWORD *)&v957[104] = v540;
              *(_OWORD *)&v957[56] = v540;
              *(_OWORD *)&v957[72] = v540;
              *(_OWORD *)&v957[40] = v540;
              memset(v957, 0, 40);
              *(_QWORD *)&v957[136] = &v957[40];
              memset(&v957[144], 0, 24);
              memset(&v957[272], 0, 24);
              *(_QWORD *)&v957[264] = &v957[168];
              *(_QWORD *)&v957[392] = &v957[296];
              *(_QWORD *)&v957[400] = 0xAAAAAAAA00000000;
              *(_QWORD *)&v957[408] = 0;
              v542 = 0;
              if (v541)
              {
                if (*(_QWORD *)&v957[24] - *(_QWORD *)&v957[16] == *(_QWORD *)(v915 + 24) - *(_QWORD *)(v915 + 16)
                  && *(_QWORD *)&v957[280] - *(_QWORD *)&v957[272] == *(_QWORD *)(v915 + 280) - *(_QWORD *)(v915 + 272)
                  && *(_DWORD *)&v957[400] == *(_DWORD *)(v915 + 400)
                  && !**(_WORD **)&v957[408]
                  && ((v543 = *(unsigned __int16 *)(*(_QWORD *)&v957[408] + 2), v543 == (unsigned __int16)v379[1])
                   || (v544 = __rev16(v543), v544 < v911)
                   && (v545 = (unsigned __int16 *)((char *)v912 + (bswap32(v912[v544 + 1]) >> 16)),
                       v546 = v948,
                       IsAccessWithinRange<OTL::LookupTable>((unint64_t)v545, v913, (unint64_t)v948))
                   && (unsigned __int16)ResolveLookupSubtable(v545, (unint64_t)v546, 0) == 1
                   && SingleSubstIsEqualTo(v547, (uint64_t)v904, (unint64_t)v948)))
                {
                  v542 = 1;
                }
                else
                {
                  v542 = 0;
                }
              }
              __dst[0] = &v957[272];
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
              __dst[0] = &v957[144];
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
              __dst[0] = &v957[16];
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
              if ((v542 & 1) == 0)
                goto LABEL_1257;
              v534 = v934;
              v535 = v934[2].n128_u64[0];
            }
            n128_u64 = (_QWORD *)v536;
          }
          if (v533 == 4)
          {
            if (v535 <= 1)
            {
              memset(&v957[24], 170, 0x5A0uLL);
              memset(v957, 0, 24);
              v958 = &v957[24];
              if ((LigInputsForLigatureSubst(v927, v904, (char *)v948, n128_u64, (unsigned __int16 ***)v957) & 1) == 0)
              {
LABEL_585:
                v273 = 1;
LABEL_586:
                v380 = *(void ***)v998;
                if (*(_QWORD *)v998)
                {
                  v381 = *(void ***)&v998[8];
                  v382 = *(_BYTE **)v998;
                  if (*(_QWORD *)&v998[8] != *(_QWORD *)v998)
                  {
                    do
                    {
                      v381 -= 52;
                    }
                    while (v381 != v380);
                    v382 = *(_BYTE **)v998;
                  }
                  *(_QWORD *)&v998[8] = v380;
                  v383 = &v998[24] > v382;
                  v384 = &v999;
LABEL_601:
                  if (v383 || v384 <= v382)
                    operator delete(v382);
                }
LABEL_606:
                if (v273 == 28)
                  goto LABEL_930;
LABEL_929:
                if (v273 != 20)
                {
LABEL_1295:
                  v132 = 0;
                  goto LABEL_1283;
                }
LABEL_930:
                if (v163 == v164)
                  goto LABEL_1282;
                continue;
              }
              memset(&__dst[3], 170, 0x2D0uLL);
              memset(__dst, 0, 24);
              __dst[93] = &__dst[3];
              v885 = *(_QWORD *)(v915 + 272);
              v884 = *(_QWORD *)(v915 + 280);
              if (v885 == v884)
              {
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>,std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>>((uint64_t *)__dst, *(_QWORD *)(v915 + 24), *(_QWORD *)(v915 + 24), *(_QWORD *)(v915 + 16), *(_QWORD *)(v915 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v915 + 24) - *(_QWORD *)(v915 + 16)) >> 3));
              }
              else
              {
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>,std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>>((uint64_t *)__dst, v884, *(_QWORD *)(v915 + 280), v885, *(_QWORD *)(v915 + 272), 0xAAAAAAAAAAAAAAABLL * ((v884 - v885) >> 3));
                v886 = *(unint64_t **)&v957[8];
                if (*(_QWORD *)v957 != *(_QWORD *)&v957[8])
                {
                  v887 = *(unint64_t **)v957;
                  do
                  {
                    v888 = *v887;
                    v889 = v887[1];
                    v890 = (_WORD *)(v889 - 2);
                    if (*v887 != v889 && (unint64_t)v890 > v888)
                    {
                      v892 = v888 + 2;
                      do
                      {
                        v893 = *(_WORD *)(v892 - 2);
                        *(_WORD *)(v892 - 2) = *v890;
                        *v890-- = v893;
                        v12 = v892 >= (unint64_t)v890;
                        v892 += 2;
                      }
                      while (!v12);
                    }
                    v887 += 6;
                  }
                  while (v887 != v886);
                }
              }
              memset(&v996[1], 170, 0x2A8uLL);
              memset(&v996[4], 0, 32);
              memset(&v996[17], 0, 24);
              v996[16] = &v996[8];
              v996[43] = &v996[20];
              v996[2] = 0;
              v996[0] = off_1E15DEC28;
              memset(&v996[44], 0, 24);
              memset(&v996[63], 0, 24);
              v996[62] = &v996[47];
              v996[74] = &v996[66];
              memset(&v996[75], 0, 24);
              v996[86] = &v996[78];
              if (v894)
              {
                std::vector<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul>>::emplace_back<TCFRef<__CFData const*>>((uint64_t)&v1005[50], (unint64_t *)&v959);

                v895 = (void *)atomic_load((unint64_t *)&v996[2]);
                v959 = v895;
                std::vector<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul>>::emplace_back<TCFRef<__CFData const*>>((uint64_t)&v1005[84], (unint64_t *)&v959);

                if (*(_QWORD *)v947)
                  AddPrevLigaturesFromLigInputs(*(char ***)v947, *(char ***)v957, *(uint64_t *)&v957[8]);
                v273 = 46;
              }
              else
              {
                v273 = 1;
              }
              v996[0] = __dst;
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v996);
              if (!v894)
                goto LABEL_586;
              goto LABEL_1280;
            }
          }
          else if (v533 == 1)
          {
            v652 = *(_QWORD **)v998;
            v901 = *(_QWORD **)&v998[8];
            v902 = (uint64_t)n128_u64;
            while (v652 != v901)
            {
              memset(__dst, 170, sizeof(__dst));
              v654 = v652[2];
              v653 = v652[3];
              memset(__dst, 0, 24);
              __dst[93] = &__dst[3];
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>,std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>>((char **)__dst, v653, v653, v654, v654, 0xAAAAAAAAAAAAAAABLL * ((v653 - v654) >> 3));
              memset(&v996[3], 170, 0x2D0uLL);
              memset(v996, 0, 24);
              v996[93] = &v996[3];
              if (__dst[0] == __dst[1])
              {
                v221 ^= 0x40000000u;
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>,std::reverse_iterator<std::__wrap_iter<std::vector<unsigned short> const*>>>((uint64_t *)__dst, v652[35], v652[35], v652[34], v652[34], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v652[35] - v652[34]) >> 3));
              }
              else
              {
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::vector<unsigned short> const*>,std::__wrap_iter<std::vector<unsigned short> const*>>((uint64_t *)v996, v652[34], v652[35], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v652[35] - v652[34]) >> 3));
              }
              Mutable = CFDataCreateMutable(allocator, 0);
              CFDataSetLength(Mutable, length);
              v907 = Mutable;
              v656 = CFDataGetMutableBytePtr(Mutable);
              v657 = *(_QWORD *)(v915 + 144);
              *(_QWORD *)&v658 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v658 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v995 = v658;
              *(_OWORD *)&v994[48] = v658;
              *(_OWORD *)&v994[32] = v658;
              *(_OWORD *)&v994[16] = v658;
              *(_OWORD *)v994 = v658;
              *(_OWORD *)v993 = v658;
              std::vector<unsigned short>::vector(v993, v657);
              v659 = *v934;
              v660 = v934[2];
              *(__n128 *)&v994[24] = v934[1];
              *(__n128 *)&v994[40] = v660;
              *(__n128 *)&v994[8] = v659;
              std::vector<unsigned short>::vector(&v994[56], v902);
              v956 = (id)0xAAAAAAAAAAAAAAAALL;
              v924 = v948;
              v940 = 0;
              v938 = 0;
              v939 = 0;
              v661 = v993[0];
              v662 = (char *)v993[1] - (char *)v993[0];
              if (v993[1] == v993[0])
              {
                v664 = 0;
              }
              else
              {
                std::vector<unsigned short>::__vallocate[abi:nn180100](&v938, v662 >> 1);
                v663 = (char *)v939;
                memmove(v939, v661, v662);
                v664 = &v663[v662];
                v939 = v664;
              }
              v941 = *(_OWORD *)&v994[8];
              v942 = *(_OWORD *)&v994[24];
              v943 = *(_OWORD *)&v994[40];
              v945 = 0;
              v946 = 0;
              v944 = 0;
              v665 = *(const void **)&v994[56];
              v666 = v995 - *(_QWORD *)&v994[56];
              if ((_QWORD)v995 == *(_QWORD *)&v994[56])
              {
                v668 = 0;
              }
              else
              {
                std::vector<unsigned short>::__vallocate[abi:nn180100](&v944, v666 >> 1);
                v667 = (char *)v945;
                memmove(v945, v665, v666);
                v668 = &v667[v666];
                v945 = &v667[v666];
                v664 = (char *)v939;
              }
              v992 = 0;
              v669 = operator new(0x68uLL);
              *v669 = &off_1E15DFDD0;
              v669[1] = 0;
              v669[2] = 0;
              v669[3] = 0;
              v670 = v938;
              v671 = v664 - (_BYTE *)v938;
              if (v671)
              {
                std::vector<unsigned short>::__vallocate[abi:nn180100](v669 + 1, v671 >> 1);
                v672 = (char *)v669[2];
                memmove(v672, v670, v671);
                v669[2] = &v672[v671];
                v668 = (char *)v945;
              }
              v673 = v942;
              *((_OWORD *)v669 + 2) = v941;
              *((_OWORD *)v669 + 3) = v673;
              *((_OWORD *)v669 + 4) = v943;
              v674 = v946;
              v669[10] = v944;
              v669[11] = v668;
              v669[12] = v674;
              v945 = 0;
              v946 = 0;
              v944 = 0;
              v992 = v669;
              CreateSingleSubstitutionLookupTable((unint64_t *)&v956, v927, 1, (unsigned __int16 *)v904, (unint64_t)v924, (uint64_t)v656, (uint64_t)v991, 0);
              v675 = v992;
              if (v992 == v991)
              {
                v675 = v991;
                v676 = 4;
              }
              else
              {
                if (!v992)
                  goto LABEL_1009;
                v676 = 5;
              }
              (*(void (**)(void))(*v675 + 8 * v676))();
LABEL_1009:
              if (v944)
              {
                v945 = v944;
                operator delete(v944);
              }
              if (v938)
              {
                v939 = v938;
                operator delete(v938);
              }
              if (!atomic_load((unint64_t *)&v956))
              {
                v856 = 1;
                goto LABEL_1248;
              }
              v988 = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v678 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v678 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v986 = v678;
              v987 = v678;
              v984 = v678;
              v985 = v678;
              v982 = v678;
              v983 = v678;
              v980 = v678;
              v981 = v678;
              v978 = v678;
              v979 = v678;
              v976 = v678;
              v977 = v678;
              v974 = v678;
              v975 = v678;
              v973 = 0xAAAAAAAAAAAAAAAALL;
              v967 = v678;
              v968 = 0xAAAAAAAAAAAAAAAALL;
              v965 = v678;
              v966 = v678;
              v964 = 0xAAAAAAAAAAAAAAAALL;
              v960 = (int64x2_t)0xAAAAAAAAAAAAAAAALL;
              v961 = (id *)0xAAAAAAAAAAAAAAAALL;
              v962 = 0u;
              v963 = 0u;
              v971 = 0;
              v972 = 0;
              v970 = 0;
              v969 = &v964;
              v989 = &v973;
              v959 = &off_1E15DEC78;
              v990 = 0;
              v679 = v934->n128_i32[3];
              v680 = (const __CFData *)atomic_load((unint64_t *)&v956);
              memset(v949, 0, 32);
              v949[4] = (void *)0xAAAAAAAA3F800000;
              LODWORD(v1017[0]) = 1;
              v681 = (unsigned __int16 **)__dst[0];
              v682 = (unsigned __int16 **)__dst[1];
              if (__dst[0] != __dst[1])
              {
                v683 = 1;
                do
                {
                  v684 = *v681;
                  v685 = v681[1];
                  if (*v681 != v685)
                  {
                    do
                    {
                      v686 = *v684++;
                      *(_WORD *)v957 = v686;
                      v687 = (int)v1017[0];
                      v688 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v949, v686, v957);
                      *((_DWORD *)v688 + 5) |= v687;
                    }
                    while (v684 != v685);
                    v683 = (int)v1017[0];
                  }
                  v683 *= 2;
                  LODWORD(v1017[0]) = v683;
                  v681 += 3;
                }
                while (v681 != v682);
              }
              *(_QWORD *)&v957[48] = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v689 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v689 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v957[16] = v689;
              *(_OWORD *)&v957[32] = v689;
              *(_OWORD *)v957 = v689;
              if (v680)
              {
                BytePtr = (const SFNTLookupTable *)CFDataGetBytePtr(v680);
                v691 = CFDataGetBytePtr(v680);
                if (v691)
                {
                  v692 = (SFNTLookupTable *)&v691[CFDataGetLength(v680)];
                  goto LABEL_1025;
                }
              }
              else
              {
                BytePtr = 0;
              }
              v692 = 0;
LABEL_1025:
              *(_QWORD *)v957 = TAATLookupTable::BadTable;
              *(_QWORD *)&v957[8] = 0;
              *(_QWORD *)&v957[40] = 0;
              *(_WORD *)&v957[48] = -1;
              TAATLookupTable::SetTable((uint64_t)v957, BytePtr, v692);
              v1035 = &off_1E15DFEA8;
              v1036 = v949;
              v1037 = v1017;
              v1038 = (void **)&v1035;
              TAATLookupTable::Iterate((uint64_t)v957, (uint64_t)&v1035);
              v693 = (uint64_t (***)())v1038;
              if (v1038 == (void **)&v1035)
              {
                v693 = &v1035;
                v694 = 4;
                goto LABEL_1029;
              }
              if (v1038)
              {
                v694 = 5;
LABEL_1029:
                (*v693)[v694]();
              }
              v695 = (unsigned __int16 **)v996[0];
              v696 = (unsigned __int16 **)v996[1];
              while (v695 != v696)
              {
                LODWORD(v1017[0]) *= 2;
                v697 = *v695;
                v698 = v695[1];
                while (v697 != v698)
                {
                  v699 = *v697++;
                  *(_WORD *)bytes = v699;
                  v700 = (int)v1017[0];
                  v701 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v949, v699, bytes);
                  *((_DWORD *)v701 + 5) |= v700;
                }
                v695 += 3;
              }
              theData = v680;
              v906 = v652;
              v702 = NewLKTHandle(v927, 1);
              memset(&v957[24], 170, 0x2D0uLL);
              memset(v957, 0, 24);
              *(_QWORD *)&v957[744] = &v957[24];
              v703 = __dst[0];
              v918 = __dst[1];
              v922 = v221;
              v925 = v702;
              for (j = 4; v703 != v918; v703 += 3)
              {
                *(_QWORD *)&v705 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v705 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v1032 = v705;
                v1033 = v705;
                v1030 = v705;
                v1031 = v705;
                v1028 = v705;
                v1029 = v705;
                v1026 = v705;
                v1027 = v705;
                v1024 = v705;
                v1025 = v705;
                v1022 = v705;
                v1023 = v705;
                v1020 = v705;
                v1021 = v705;
                v1019 = v705;
                v1017[0] = 0;
                v1017[1] = 0;
                v1018 = 0;
                v1034 = &v1019;
                v707 = (_WORD *)*v703;
                v706 = (_WORD *)v703[1];
                if ((_WORD *)*v703 == v706)
                {
                  v712 = 0;
                  v725 = 0;
                }
                else
                {
                  do
                  {
                    LOWORD(v1039[0]) = *v707;
                    v708 = (__int16)v1039[0];
                    v709 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v949, (unsigned __int16)v1039[0], v1039);
                    v710 = v709;
                    v711 = v1017[1];
                    if (v1017[1] >= v1018)
                    {
                      v713 = ((char *)v1017[1] - (char *)v1017[0]) >> 3;
                      v714 = v713 + 1;
                      if ((unint64_t)(v713 + 1) >> 61)
                        goto LABEL_1296;
                      v715 = v1018 - (char *)v1017[0];
                      if ((v1018 - (char *)v1017[0]) >> 2 > v714)
                        v714 = v715 >> 2;
                      if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFF8)
                        v716 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v716 = v714;
                      *(_QWORD *)&v1042 = &v1019;
                      v717 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1019, v716);
                      v718 = &v717[8 * v713];
                      *(_WORD *)v718 = v708;
                      *((_DWORD *)v718 + 1) = *((_DWORD *)v710 + 5);
                      v719 = (char *)v1017[1];
                      v720 = (char *)v1017[0];
                      if (v1017[1] == v1017[0])
                      {
                        v723 = vdupq_n_s64((unint64_t)v1017[1]);
                        v721 = &v717[8 * v713];
                      }
                      else
                      {
                        v721 = &v717[8 * v713];
                        do
                        {
                          v722 = *((_QWORD *)v719 - 1);
                          v719 -= 8;
                          *((_QWORD *)v721 - 1) = v722;
                          v721 -= 8;
                        }
                        while (v719 != v720);
                        v723 = *(int64x2_t *)v1017;
                      }
                      v712 = v718 + 8;
                      v1017[0] = v721;
                      v1017[1] = v718 + 8;
                      *(int64x2_t *)&bytes[8] = v723;
                      v724 = v1018;
                      v1018 = &v717[8 * v716];
                      *(_QWORD *)&bytes[24] = v724;
                      *(_QWORD *)bytes = v723.i64[0];
                      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)bytes);
                    }
                    else
                    {
                      *(_WORD *)v1017[1] = v708;
                      v711[1] = *((_DWORD *)v709 + 5);
                      v712 = v711 + 2;
                    }
                    v1017[1] = v712;
                    ++v707;
                  }
                  while (v707 != v706);
                  v725 = v1017[0];
                }
                v726 = 126 - 2 * __clz(((char *)v712 - v725) >> 3);
                if (v712 == (_DWORD *)v725)
                  v727 = 0;
                else
                  v727 = v726;
                memset(bytes, 170, 24);
                v702 = v925;
                AddGlyphClassesByAppearance((unsigned __int16 **)bytes, v925, j, (unsigned __int16 *)v1017[0], (unsigned __int16 *)v1017[1]);
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::push_back[abi:nn180100](v957, (uint64_t)bytes);
                v728 = *(_WORD *)(*(_QWORD *)&bytes[8] - 2);
                v221 = v922;
                if (*(_QWORD *)bytes)
                {
                  *(_QWORD *)&bytes[8] = *(_QWORD *)bytes;
                  operator delete(*(void **)bytes);
                }
                j = v728 + 1;
                std::vector<std::pair<unsigned short,unsigned int>,TInlineBufferAllocator<std::pair<unsigned short,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v1017);
              }
              *(_QWORD *)&v729 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v729 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v1032 = v729;
              v1033 = v729;
              v1030 = v729;
              v1031 = v729;
              v1028 = v729;
              v1029 = v729;
              v1026 = v729;
              v1027 = v729;
              v1024 = v729;
              v1025 = v729;
              v1022 = v729;
              v1023 = v729;
              v1020 = v729;
              v1021 = v729;
              v1019 = v729;
              v1017[0] = 0;
              v1017[1] = 0;
              v1018 = 0;
              v1034 = &v1019;
              v1043 = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&bytes[16] = v729;
              v1042 = v729;
              *(_OWORD *)bytes = v729;
              if (theData)
              {
                v730 = (const SFNTLookupTable *)CFDataGetBytePtr(theData);
                v731 = CFDataGetBytePtr(theData);
                v164 = v926;
                if (v731)
                  v732 = (SFNTLookupTable *)&v731[CFDataGetLength(theData)];
                else
                  v732 = 0;
              }
              else
              {
                v730 = 0;
                v732 = 0;
                v164 = v926;
              }
              *(_QWORD *)bytes = TAATLookupTable::BadTable;
              *(_QWORD *)&bytes[8] = 0;
              *((_QWORD *)&v1042 + 1) = 0;
              LOWORD(v1043) = -1;
              TAATLookupTable::SetTable((uint64_t)bytes, v730, v732);
              v1013 = &off_1E15DFEF0;
              v1014 = v1017;
              v1015 = v949;
              v1016 = &v1013;
              TAATLookupTable::Iterate((uint64_t)bytes, (uint64_t)&v1013);
              v733 = v1016;
              if (v1016 == &v1013)
              {
                v733 = &v1013;
                v734 = 4;
              }
              else
              {
                if (!v1016)
                  goto LABEL_1071;
                v734 = 5;
              }
              (*((void (**)(void))*v733 + v734))();
LABEL_1071:
              v735 = 126 - 2 * __clz(((char *)v1017[1] - (char *)v1017[0]) >> 3);
              if (v1017[1] == v1017[0])
                v736 = 0;
              else
                v736 = v735;
              memset(v1039, 170, sizeof(v1039));
              AddGlyphClassesByAppearance(v1039, v702, j, (unsigned __int16 *)v1017[0], (unsigned __int16 *)v1017[1]);
              v737 = v1039[0];
              v905 = v1039[1];
              if (v1039[0] == v1039[1])
              {
                if (v1039[0])
                {
                  v1039[1] = v1039[0];
                  operator delete(v1039[0]);
                }
                std::vector<std::pair<unsigned short,unsigned int>,TInlineBufferAllocator<std::pair<unsigned short,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v1017);
                goto LABEL_1200;
              }
              v903 = v1039[0];
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::push_back[abi:nn180100](v957, (uint64_t)v1039);
              v738 = v1039[0];
              if (v1039[0] != v1039[1])
              {
                v739 = v1039[0] + 1;
                v738 = v1039[0];
                if (v1039[0] + 1 != v1039[1])
                {
                  v740 = *v1039[0];
                  v738 = v1039[0];
                  v741 = v1039[0] + 1;
                  do
                  {
                    v743 = *v741++;
                    v742 = v743;
                    v744 = v740 >= v743;
                    if (v740 <= v743)
                      v740 = v742;
                    if (!v744)
                      v738 = v739;
                    v739 = v741;
                  }
                  while (v741 != v1039[1]);
                }
              }
              if (j <= *v738)
                v745 = *v738;
              else
                v745 = j;
              if (v1039[0])
              {
                v1039[1] = v1039[0];
                operator delete(v1039[0]);
              }
              std::vector<std::pair<unsigned short,unsigned int>,TInlineBufferAllocator<std::pair<unsigned short,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v1017);
              v746 = v996[0];
              v747 = v996[1];
              v748 = v745 + 1;
              v919 = v996[1];
              while (v746 != v747)
              {
                *(_QWORD *)&v749 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v749 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v1032 = v749;
                v1033 = v749;
                v1030 = v749;
                v1031 = v749;
                v1028 = v749;
                v1029 = v749;
                v1026 = v749;
                v1027 = v749;
                v1024 = v749;
                v1025 = v749;
                v1022 = v749;
                v1023 = v749;
                v1020 = v749;
                v1021 = v749;
                v1019 = v749;
                v1017[0] = 0;
                v1017[1] = 0;
                v1018 = 0;
                v1034 = &v1019;
                v750 = (_WORD *)*v746;
                v751 = (_WORD *)v746[1];
                if ((_WORD *)*v746 == v751)
                {
                  v756 = 0;
                  v769 = 0;
                }
                else
                {
                  do
                  {
                    LOWORD(v1039[0]) = *v750;
                    v752 = (__int16)v1039[0];
                    v753 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v949, (unsigned __int16)v1039[0], v1039);
                    v754 = v753;
                    v755 = v1017[1];
                    if (v1017[1] >= v1018)
                    {
                      v757 = ((char *)v1017[1] - (char *)v1017[0]) >> 3;
                      v758 = v757 + 1;
                      if ((unint64_t)(v757 + 1) >> 61)
                        goto LABEL_1296;
                      v759 = v1018 - (char *)v1017[0];
                      if ((v1018 - (char *)v1017[0]) >> 2 > v758)
                        v758 = v759 >> 2;
                      if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFF8)
                        v760 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v760 = v758;
                      *(_QWORD *)&v1042 = &v1019;
                      v761 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1019, v760);
                      v762 = &v761[8 * v757];
                      *(_WORD *)v762 = v752;
                      *((_DWORD *)v762 + 1) = *((_DWORD *)v754 + 5);
                      v763 = (char *)v1017[1];
                      v764 = (char *)v1017[0];
                      if (v1017[1] == v1017[0])
                      {
                        v767 = vdupq_n_s64((unint64_t)v1017[1]);
                        v765 = &v761[8 * v757];
                      }
                      else
                      {
                        v765 = &v761[8 * v757];
                        do
                        {
                          v766 = *((_QWORD *)v763 - 1);
                          v763 -= 8;
                          *((_QWORD *)v765 - 1) = v766;
                          v765 -= 8;
                        }
                        while (v763 != v764);
                        v767 = *(int64x2_t *)v1017;
                      }
                      v756 = v762 + 8;
                      v1017[0] = v765;
                      v1017[1] = v762 + 8;
                      *(int64x2_t *)&bytes[8] = v767;
                      v768 = v1018;
                      v1018 = &v761[8 * v760];
                      *(_QWORD *)&bytes[24] = v768;
                      *(_QWORD *)bytes = v767.i64[0];
                      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)bytes);
                    }
                    else
                    {
                      *(_WORD *)v1017[1] = v752;
                      v755[1] = *((_DWORD *)v753 + 5);
                      v756 = v755 + 2;
                    }
                    v1017[1] = v756;
                    ++v750;
                  }
                  while (v750 != v751);
                  v769 = v1017[0];
                }
                v770 = 126 - 2 * __clz(((char *)v756 - v769) >> 3);
                if (v756 == (_DWORD *)v769)
                  v771 = 0;
                else
                  v771 = v770;
                memset(bytes, 170, 24);
                v745 = v748;
                v702 = v925;
                AddGlyphClassesByAppearance((unsigned __int16 **)bytes, v925, v748, (unsigned __int16 *)v1017[0], (unsigned __int16 *)v1017[1]);
                std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::push_back[abi:nn180100](v957, (uint64_t)bytes);
                v772 = *(unsigned __int16 **)bytes;
                if (*(_QWORD *)bytes != *(_QWORD *)&bytes[8])
                {
                  v773 = *(_QWORD *)bytes + 2;
                  v772 = *(unsigned __int16 **)bytes;
                  if (*(_QWORD *)bytes + 2 != *(_QWORD *)&bytes[8])
                  {
                    v774 = **(_WORD **)bytes;
                    v772 = *(unsigned __int16 **)bytes;
                    v775 = (unsigned __int16 *)(*(_QWORD *)bytes + 2);
                    do
                    {
                      v777 = *v775++;
                      v776 = v777;
                      v778 = v774 >= v777;
                      if (v774 <= v777)
                        v774 = v776;
                      if (!v778)
                        v772 = (unsigned __int16 *)v773;
                      v773 = (uint64_t)v775;
                    }
                    while (v775 != *(unsigned __int16 **)&bytes[8]);
                  }
                }
                if (v748 <= *v772)
                  v745 = *v772;
                if (*(_QWORD *)bytes)
                {
                  *(_QWORD *)&bytes[8] = *(_QWORD *)bytes;
                  operator delete(*(void **)bytes);
                }
                std::vector<std::pair<unsigned short,unsigned int>,TInlineBufferAllocator<std::pair<unsigned short,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v1017);
                v746 += 3;
                v748 = v745 + 1;
                v747 = v919;
              }
              v779 = (unsigned __int16 *)v934[3].n128_u64[0];
              v780 = (unsigned __int16 *)v934[3].n128_u64[1];
              if (v779 != v780)
              {
                do
                {
                  v781 = *v779++;
                  LKTAddRange(v702, v781, v781, v748);
                }
                while (v779 != v780);
                v748 = v745 + 2;
              }
              LODWORD(v961) = v748;
              LKTCreateLookupTable(v702, (unint64_t *)v1017);
              do
                v782 = __ldaxr((unint64_t *)v1017);
              while (__stlxr(0, (unint64_t *)v1017));
              do
                v783 = (void *)__ldaxr((unint64_t *)&v962);
              while (__stlxr(v782, (unint64_t *)&v962));

              DisposeLKTHandle(v702);
              *(_QWORD *)&v784 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v784 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v1021 = v784;
              v1022 = v784;
              v1019 = v784;
              v1020 = v784;
              v785 = v961;
              v1017[0] = 0;
              v1017[1] = 0;
              v1018 = 0;
              *(_QWORD *)&v1023 = &v1019;
              if ((_DWORD)v961)
              {
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](v1017, v961);
                v786 = (char *)v1017[1];
                bzero(v1017[1], 2 * v785);
                v1017[1] = &v786[2 * v785];
              }
              v787 = GetActionIndex(&v970, 0, 0, 0xFFFFu, 0xFFFFFFFFLL);
              v788 = (int)v961;
              if ((_DWORD)v961)
              {
                v789 = v1017[0];
                do
                {
                  *v789++ = v787;
                  --v788;
                }
                while (v788);
              }
              v790 = GetActionIndex(&v970, 0, 0x4000u, 0xFFFFu, 0xFFFFFFFFLL);
              v791 = GetActionIndex(&v970, 2u, 0, 0xFFFFu, 0xFFFFFFFFLL);
              v792 = **(unsigned __int16 ***)v957;
              v793 = *(unsigned __int16 **)(*(_QWORD *)v957 + 8);
              v794 = v1017[0];
              while (v792 != v793)
              {
                v795 = *v792++;
                v794[v795] = v791;
              }
              std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)v794, &v794[v961], (char **)&v962 + 1);
              std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)v1017[0], (_WORD *)v1017[0] + v961, (char **)&v962 + 1);
              v796 = v996[0];
              v797 = v996[1];
              if (__dst[1] != __dst[0])
              {
                v798 = 0;
                v799 = ((char *)__dst[1] - (char *)__dst[0]) / 24;
                if (v799 <= 1)
                  v800 = 1;
                else
                  v800 = ((char *)__dst[1] - (char *)__dst[0]) / 24;
                while (1)
                {
                  v801 = (int)v961;
                  if ((_DWORD)v961)
                  {
                    v802 = v1017[0];
                    do
                    {
                      *v802++ = v790;
                      --v801;
                    }
                    while (v801);
                  }
                  v803 = GetActionIndex(&v970, (unsigned __int16)(v798 + 2), 0, 0xFFFFu, 0xFFFFFFFFLL);
                  v804 = v1017[0];
                  *((_WORD *)v1017[0] + 2) = v803;
                  if (v934[3].n128_u64[0] != v934[3].n128_u64[1])
                    v804[(_DWORD)v961 - 1] = v803;
                  if (v799 > (unsigned __int16)++v798)
                    break;
                  if (v796 != v797)
                  {
                    v805 = (unsigned __int16)(v798 + 2);
                    v806 = 0x8000;
                    goto LABEL_1151;
                  }
                  v805 = 0;
                  v806 = 0;
                  v807 = 0;
LABEL_1152:
                  v808 = GetActionIndex(&v970, v805, v806, 0xFFFFu, v807);
                  v809 = *(_QWORD *)v957 + 24 * v798;
                  v810 = *(unsigned __int16 **)v809;
                  v811 = *(unsigned __int16 **)(v809 + 8);
                  v812 = v1017[0];
                  while (v810 != v811)
                  {
                    v813 = *v810++;
                    v812[v813] = v808;
                  }
                  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)v812, &v812[v961], (char **)&v962 + 1);
                  if (v798 == v800)
                    goto LABEL_1158;
                }
                v805 = (unsigned __int16)(v798 + 2);
                v806 = 0;
LABEL_1151:
                v807 = 0xFFFFFFFFLL;
                goto LABEL_1152;
              }
LABEL_1158:
              v164 = v926;
              if (v796 != v797 && v996[1] != v996[0])
              {
                v814 = 0;
                v815 = 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3);
                v816 = ((char *)v996[1] - (char *)v996[0]) / 24;
                if (v816 <= 1)
                  v817 = 1;
                else
                  v817 = ((char *)v996[1] - (char *)v996[0]) / 24;
                do
                {
                  v818 = (int)v961;
                  if ((_DWORD)v961)
                  {
                    v819 = v1017[0];
                    do
                    {
                      *v819++ = v790;
                      --v818;
                    }
                    while (v818);
                  }
                  v820 = v814 + v815;
                  v821 = GetActionIndex(&v970, (unsigned __int16)(v814 + v815 + 2), 0, 0xFFFFu, 0xFFFFFFFFLL);
                  v822 = v1017[0];
                  *((_WORD *)v1017[0] + 2) = v821;
                  if (v934[3].n128_u64[0] != v934[3].n128_u64[1])
                    v822[(_DWORD)v961 - 1] = v821;
                  if (v816 <= (unsigned __int16)++v814)
                  {
                    v823 = 0;
                    v824 = 0;
                  }
                  else
                  {
                    v823 = (unsigned __int16)(v814 + v815 + 2);
                    v824 = -1;
                  }
                  v825 = GetActionIndex(&v970, v823, 0, v824, 0xFFFFFFFFLL);
                  v826 = *(_QWORD *)v957 + 24 * v820;
                  v827 = *(unsigned __int16 **)(v826 + 24);
                  v828 = *(unsigned __int16 **)(v826 + 32);
                  v829 = v1017[0];
                  while (v827 != v828)
                  {
                    v830 = *v827++;
                    v829[v830] = v825;
                  }
                  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>((uint64_t)v829, &v829[v961], (char **)&v962 + 1);
                }
                while (v814 != v817);
              }
              v950 = CFDataCreateMutable(allocator, 0);
              v831 = (__CFData *)atomic_load((unint64_t *)&v950);
              *(_DWORD *)bytes = 0x4000000;
              CFDataAppendBytes(v831, bytes, 4);
              v832 = (_anonymous_namespace_ *)atomic_load((unint64_t *)&v950);
              do
                v834 = __ldaxr((unint64_t *)&v950);
              while (__stlxr(0, (unint64_t *)&v950));
              do
                v835 = (void *)__ldaxr((unint64_t *)&v990);
              while (__stlxr(v834, (unint64_t *)&v990));

              if (v961 < 2
                || (_QWORD)v963 - *((_QWORD *)&v962 + 1) < 3uLL
                || (v836 = *(unsigned __int16 *)(*((_QWORD *)&v962 + 1) + 2), v836 >= (v971 - (uint64_t)v970) >> 3))
              {
                v837 = 0;
              }
              else
              {
                v837 = v970[v836];
              }
              v838 = (__CFData *)atomic_load(&v960.u64[1]);
              v839 = CFDataGetMutableBytePtr(v838);
              v840 = (void *)atomic_load((unint64_t *)&v962);
              v841 = v840;
              v842 = v841;
              if (v841)
                v843 = (const SFNTLookupTable *)CFDataGetBytePtr(v841);
              else
                v843 = 0;
              v844 = (void *)atomic_load((unint64_t *)&v962);
              v845 = v844;
              v846 = (const __CFData *)v845;
              if (v846)
              {
                v847 = v846;
                v848 = CFDataGetBytePtr(v846);

                if (v848)
                {
                  v849 = (SFNTLookupTable *)&v848[CFDataGetLength((CFDataRef)v845)];
                  goto LABEL_1194;
                }
              }
              else
              {

              }
              v849 = 0;
LABEL_1194:
              *(_QWORD *)bytes = TAATLookupTable::BadTable;
              *(_QWORD *)&bytes[8] = 0;
              *((_QWORD *)&v1042 + 1) = 0;
              LOWORD(v1043) = -1;
              TAATLookupTable::SetTable((uint64_t)bytes, v843, v849);
              v850 = operator new(0x28uLL);
              *v850 = &off_1E15E0010;
              v850[1] = &v959;
              v850[2] = v927;
              v850[3] = v839;
              *((_WORD *)v850 + 16) = v837;
              v1040 = (unsigned __int16 **)v850;
              TAATLookupTable::Iterate((uint64_t)bytes, (uint64_t)v1039);
              v851 = v1040;
              v652 = v906;
              if (v1040 == v1039)
              {
                v851 = v1039;
                v852 = 4;
                v221 = v922;
                goto LABEL_1198;
              }
              v221 = v922;
              if (v1040)
              {
                v852 = 5;
LABEL_1198:
                (*(void (**)(void))&(*v851)[4 * v852])();
              }

              *(_QWORD *)bytes = v1017;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)bytes);
              v737 = v903;
LABEL_1200:
              v1017[0] = v957;
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v1017);
              std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v949);
              if (v737 == v905)
              {
                v856 = 1;
              }
              else
              {
                v853 = (unint64_t *)v1005[51];
                if (v1005[51] >= v1005[52])
                {
                  v857 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
                  if ((unint64_t)(v857 + 1) >> 61)
                    goto LABEL_1296;
                  v858 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
                  if (v858 <= v857 + 1)
                    v858 = v857 + 1;
                  if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
                    v859 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v859 = v858;
                  *(_QWORD *)&v957[32] = &v1005[53];
                  if (v859)
                    v860 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v859);
                  else
                    v860 = 0;
                  *(_QWORD *)v957 = v860;
                  *(_QWORD *)&v957[8] = &v860[v857];
                  *(_QWORD *)&v957[16] = *(_QWORD *)&v957[8];
                  *(_QWORD *)&v957[24] = &v860[v859];
                  do
                    v861 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  v860[v857] = v861;
                  v862 = *(unint64_t **)&v957[8];
                  v855 = (void *)(*(_QWORD *)&v957[16] + 8);
                  *(_QWORD *)&v957[16] += 8;
                  v863 = (unint64_t *)v1005[51];
                  v864 = (unint64_t *)v1005[50];
                  if (v1005[51] == v1005[50])
                  {
                    v866 = vdupq_n_s64((unint64_t)v1005[51]);
                  }
                  else
                  {
                    do
                    {
                      --v862;
                      --v863;
                      do
                        v865 = __ldaxr(v863);
                      while (__stlxr(0, v863));
                      *v862 = v865;
                    }
                    while (v863 != v864);
                    v866 = *(int64x2_t *)&v1005[50];
                    v855 = *(void **)&v957[16];
                  }
                  v1005[50] = v862;
                  v1005[51] = v855;
                  *(int64x2_t *)&v957[8] = v866;
                  v867 = v1005[52];
                  v1005[52] = *(id *)&v957[24];
                  *(_QWORD *)&v957[24] = v867;
                  *(_QWORD *)v957 = v866.i64[0];
                  std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v957);
                }
                else
                {
                  do
                    v854 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *v853 = v854;
                  v855 = v853 + 1;
                }
                v1005[51] = v855;

                v868 = (void *)atomic_load(&v960.u64[1]);
                v1017[0] = v868;
                v869 = (unint64_t *)v1005[85];
                if (v1005[85] >= v1005[86])
                {
                  v872 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
                  if ((unint64_t)(v872 + 1) >> 61)
                    goto LABEL_1296;
                  v873 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
                  if (v873 <= v872 + 1)
                    v873 = v872 + 1;
                  if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
                    v874 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v874 = v873;
                  *(_QWORD *)&v957[32] = &v1005[87];
                  if (v874)
                    v875 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v874);
                  else
                    v875 = 0;
                  *(_QWORD *)v957 = v875;
                  *(_QWORD *)&v957[8] = &v875[v872];
                  *(_QWORD *)&v957[16] = *(_QWORD *)&v957[8];
                  *(_QWORD *)&v957[24] = &v875[v874];
                  do
                    v876 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  v875[v872] = v876;
                  v877 = *(unint64_t **)&v957[8];
                  v871 = (void *)(*(_QWORD *)&v957[16] + 8);
                  *(_QWORD *)&v957[16] += 8;
                  v878 = (unint64_t *)v1005[85];
                  v879 = (unint64_t *)v1005[84];
                  if (v1005[85] == v1005[84])
                  {
                    v881 = vdupq_n_s64((unint64_t)v1005[85]);
                  }
                  else
                  {
                    do
                    {
                      --v877;
                      --v878;
                      do
                        v880 = __ldaxr(v878);
                      while (__stlxr(0, v878));
                      *v877 = v880;
                    }
                    while (v878 != v879);
                    v881 = *(int64x2_t *)&v1005[84];
                    v871 = *(void **)&v957[16];
                  }
                  v1005[84] = v877;
                  v1005[85] = v871;
                  *(int64x2_t *)&v957[8] = v881;
                  v882 = v1005[86];
                  v1005[86] = *(id *)&v957[24];
                  *(_QWORD *)&v957[24] = v882;
                  *(_QWORD *)v957 = v881.i64[0];
                  std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v957);
                }
                else
                {
                  do
                    v870 = __ldaxr((unint64_t *)v1017);
                  while (__stlxr(0, (unint64_t *)v1017));
                  *v869 = v870;
                  v871 = v869 + 1;
                }
                v1005[85] = v871;

                if (*(_QWORD *)v947)
                {
                  v883 = (const __CFData *)atomic_load((unint64_t *)&v956);
                  AddPrevLigaturesFromSingleSubstitutionLookupTable(*(uint64_t *)v947, v883);
                }
                v856 = 0;
              }
              v959 = &off_1E15DEC78;

LABEL_1248:

              if (*(_QWORD *)&v994[56])
              {
                *(_QWORD *)&v995 = *(_QWORD *)&v994[56];
                operator delete(*(void **)&v994[56]);
              }
              if (v993[0])
              {
                v993[1] = v993[0];
                operator delete(v993[0]);
              }

              *(_QWORD *)v957 = v996;
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);
              *(_QWORD *)v957 = __dst;
              std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v957);
              if (v856)
                goto LABEL_585;
              v652 += 52;
            }
LABEL_1280:
            v273 = 28;
            goto LABEL_586;
          }
LABEL_1257:
          v273 = 1;
          goto LABEL_586;
        default:
          if (v166[1].n128_u16[3] != 1000)
            goto LABEL_1283;
          *(_QWORD *)&v957[392] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v227 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v227 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[360] = v227;
          *(_OWORD *)&v957[376] = v227;
          *(_OWORD *)&v957[328] = v227;
          *(_OWORD *)&v957[344] = v227;
          *(_OWORD *)&v957[296] = v227;
          *(_OWORD *)&v957[312] = v227;
          *(_OWORD *)&v957[264] = v227;
          *(_OWORD *)&v957[280] = v227;
          *(_OWORD *)&v957[232] = v227;
          *(_OWORD *)&v957[248] = v227;
          *(_OWORD *)&v957[200] = v227;
          *(_OWORD *)&v957[216] = v227;
          *(_OWORD *)&v957[168] = v227;
          *(_OWORD *)&v957[184] = v227;
          *(_QWORD *)&v957[160] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[104] = v227;
          *(_QWORD *)&v957[120] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v957[72] = v227;
          *(_OWORD *)&v957[88] = v227;
          *(_QWORD *)&v957[64] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v957[24] = 0xAAAAAAAAAAAAAAAALL;
          memset(&v957[32], 0, 32);
          memset(&v957[136], 0, 24);
          *(_QWORD *)&v957[128] = &v957[64];
          *(_QWORD *)&v957[400] = &v957[160];
          *(_QWORD *)&v957[16] = 0;
          *(_QWORD *)v957 = &off_1E15DEC78;
          *(_QWORD *)&v957[408] = 0;
          v228 = v166->n128_i32[3];
          v229 = *(_QWORD *)v947;
          v230 = v948;
          v231 = *((_QWORD *)v920 + 25);
          if (!v231)
          {
            v232 = TBaseFont::GetInitializedGraphicsFont(v920);
            v231 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v920 + 872))(v920, v232);
          }
          v234 = *(_QWORD *)v998;
          v235 = v231;
          if (*(_QWORD *)v998)
          {
            v236 = *(_QWORD *)&v998[8];
            v237 = *(_BYTE **)v998;
            if (*(_QWORD *)&v998[8] != *(_QWORD *)v998)
            {
              do
              {
                v236 -= 48;
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v236);
              }
              while (v236 != v234);
              v237 = *(_BYTE **)v998;
            }
            *(_QWORD *)&v998[8] = v234;
            if (&v998[24] <= v237 && &v998[1464] > v237)
            {
              if (*(_QWORD *)&v998[16] == *(_QWORD *)&v998[1464])
                *(_QWORD *)&v998[1464] = v237;
            }
            else
            {
              operator delete(v237);
            }
          }
          if ((v233 & 1) == 0)
          {
            LOBYTE(v246) = 0;
            v273 = 1;
            goto LABEL_927;
          }
          v307 = (uint64_t)&v934[3];
          v308 = (__CFData *)atomic_load((unint64_t *)&v957[16]);
          v935 = CFDataGetMutableBytePtr(v308);
          memset(v949, 170, 24);
          std::vector<unsigned short>::vector(v949, v307);
          v956 = (id)0xAAAAAAAAAAAAAAAALL;
          v309 = *(_QWORD *)(v229 + 1568);
          v310 = *(unsigned __int16 **)(v229 + 1576);
          memset(v1039, 0, sizeof(v1039));
          v311 = v949[0];
          v312 = (char *)v949[1] - (char *)v949[0];
          if (v949[1] == v949[0])
          {
            v314 = 0;
          }
          else
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](v1039, v312 >> 1);
            v313 = v1039[1];
            memmove(v1039[1], v311, v312);
            v314 = (char *)v313 + v312;
            v1039[1] = (unsigned __int16 *)((char *)v313 + v312);
            v312 = (int64_t)v1039[0];
          }
          v996[3] = 0;
          v341 = operator new(0x20uLL);
          *v341 = &off_1E15DFF38;
          v341[1] = 0;
          v341[2] = 0;
          v341[3] = 0;
          v342 = (int64_t)&v314[-v312];
          if (v342)
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](v341 + 1, v342 >> 1);
            v343 = (char *)v341[2];
            memmove(v343, (const void *)v312, v342);
            v341[2] = &v343[v342];
          }
          v996[3] = v341;
          CreateSingleSubstitutionLookupTable((unint64_t *)&v956, v235, v309, v310, (unint64_t)v230, (uint64_t)v935, (uint64_t)v996, 0);
          v344 = (id *)v996[3];
          if (v996[3] == v996)
          {
            v344 = v996;
            v345 = 4;
          }
          else
          {
            if (!v996[3])
              goto LABEL_546;
            v345 = 5;
          }
          (*((void (**)(void))*v344 + v345))();
LABEL_546:
          if (v1039[0])
          {
            v1039[1] = v1039[0];
            operator delete(v1039[0]);
          }
          v955 = (id)0xAAAAAAAAAAAAAAAALL;
          v346 = *(_QWORD *)(v229 + 1600);
          v347 = *(unsigned __int16 **)(v229 + 1608);
          v1036 = 0;
          v1037 = 0;
          v1035 = 0;
          v348 = v949[0];
          v349 = (char *)v949[1] - (char *)v949[0];
          if (v949[1] == v949[0])
          {
            v351 = 0;
          }
          else
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](&v1035, v349 >> 1);
            v350 = v1036;
            memmove(v1036, v348, v349);
            v351 = (char *)v350 + v349;
            v1036 = (void **)((char *)v350 + v349);
            v349 = (int64_t)v1035;
          }
          v961 = 0;
          v352 = (id *)operator new(0x20uLL);
          *v352 = &off_1E15DFF38;
          v352[1] = 0;
          v352[2] = 0;
          v352[3] = 0;
          v353 = (int64_t)&v351[-v349];
          if (v353)
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](v352 + 1, v353 >> 1);
            v354 = (char *)v352[2];
            memmove(v354, (const void *)v349, v353);
            v352[2] = &v354[v353];
          }
          v961 = v352;
          CreateSingleSubstitutionLookupTable((unint64_t *)&v955, v235, v346, v347, (unint64_t)v230, (uint64_t)v935, (uint64_t)&v959, 0);
          v355 = v961;
          if (v961 == &v959)
          {
            v355 = &v959;
            v356 = 4;
          }
          else
          {
            if (!v961)
              goto LABEL_558;
            v356 = 5;
          }
          (*((void (**)(void))*v355 + v356))();
LABEL_558:
          if (v1035)
          {
            v1036 = (void **)v1035;
            operator delete(v1035);
          }
          v954 = 0;
          v357 = *(_QWORD *)(v229 + 1584);
          v358 = *(unsigned __int16 **)(v229 + 1592);
          v1015 = 0;
          v1013 = 0;
          v1014 = 0;
          v359 = v949[0];
          v360 = (char *)v949[1] - (char *)v949[0];
          if (v949[1] == v949[0])
          {
            v362 = 0;
          }
          else
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](&v1013, v360 >> 1);
            v361 = (char *)v1014;
            memmove(v1014, v359, v360);
            v362 = &v361[v360];
            v1014 = &v361[v360];
            v360 = (int64_t)v1013;
          }
          *(_QWORD *)&v1019 = 0;
          v363 = operator new(0x20uLL);
          *v363 = &off_1E15DFF38;
          v363[1] = 0;
          v363[2] = 0;
          v363[3] = 0;
          v364 = (int64_t)&v362[-v360];
          if (v364)
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](v363 + 1, v364 >> 1);
            v365 = (char *)v363[2];
            memmove(v365, (const void *)v360, v364);
            v363[2] = &v365[v364];
          }
          *(_QWORD *)&v1019 = v363;
          SingleSubstitutionLKTHandle = CreateSingleSubstitutionLKTHandle(v235, v357, v358, (unint64_t)v230, (uint64_t)v935, (uint64_t)v1017, 0);
          v367 = (id *)v1019;
          if ((id *)v1019 == v1017)
          {
            v367 = v1017;
            v368 = 4;
            v164 = v926;
          }
          else
          {
            v164 = v926;
            if (!(_QWORD)v1019)
              goto LABEL_570;
            v368 = 5;
          }
          (*((void (**)(void))*v367 + v368))();
LABEL_570:
          if (v1013)
          {
            v1014 = v1013;
            operator delete(v1013);
          }
          if (!SingleSubstitutionLKTHandle)
            goto LABEL_690;
          if (!atomic_load((unint64_t *)&v955))
            goto LABEL_686;
          __dst[6] = (void *)0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v370 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v370 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&__dst[4] = v370;
          *(_OWORD *)&__dst[2] = v370;
          *(_OWORD *)__dst = v370;
          v371 = (void *)atomic_load((unint64_t *)&v955);
          v372 = v371;
          v373 = v372;
          if (v372)
            v374 = (const SFNTLookupTable *)CFDataGetBytePtr(v372);
          else
            v374 = 0;
          v426 = (void *)atomic_load((unint64_t *)&v955);
          v427 = v426;
          v428 = (const __CFData *)v427;
          if (v428)
          {
            v429 = v428;
            v430 = CFDataGetBytePtr(v428);

            if (v430)
            {
              v431 = (SFNTLookupTable *)&v430[CFDataGetLength((CFDataRef)v427)];
              goto LABEL_681;
            }
          }
          else
          {

          }
          v431 = 0;
LABEL_681:
          __dst[0] = TAATLookupTable::BadTable;
          __dst[1] = 0;
          __dst[5] = 0;
          LOWORD(__dst[6]) = -1;
          TAATLookupTable::SetTable((uint64_t)__dst, v374, v431);

          v993[0] = &off_1E15DFF80;
          v993[1] = SingleSubstitutionLKTHandle;
          *(_QWORD *)&v994[8] = v993;
          TAATLookupTable::Iterate((uint64_t)__dst, (uint64_t)v993);
          v432 = *(void ***)&v994[8];
          if (*(void ***)&v994[8] == v993)
          {
            v432 = v993;
            v433 = 4;
            v164 = v926;
          }
          else
          {
            v164 = v926;
            if (!*(_QWORD *)&v994[8])
              goto LABEL_686;
            v433 = 5;
          }
          (*((void (**)(void))*v432 + v433))();
LABEL_686:
          LKTCreateLookupTable(SingleSubstitutionLKTHandle, (unint64_t *)__dst);
          do
            v434 = __ldaxr((unint64_t *)__dst);
          while (__stlxr(0, (unint64_t *)__dst));
          do
            v435 = (void *)__ldaxr((unint64_t *)&v954);
          while (__stlxr(v434, (unint64_t *)&v954));

          DisposeLKTHandle(SingleSubstitutionLKTHandle);
LABEL_690:
          __dst[0] = 0;
          v436 = *(unsigned __int16 **)(v229 + 1624);
          if (!v436)
          {
            v442 = NewLKTHandle(v235, 0);
            LKTCreateLookupTable(v442, (unint64_t *)&v953);
            do
              v443 = __ldaxr((unint64_t *)&v953);
            while (__stlxr(0, (unint64_t *)&v953));
            do
              v444 = (void *)__ldaxr((unint64_t *)__dst);
            while (__stlxr(v443, (unint64_t *)__dst));

            DisposeLKTHandle(v442);
            goto LABEL_711;
          }
          v437 = *(_QWORD *)(v229 + 1616);
          v952 = 0;
          v950 = 0;
          v951 = 0;
          v438 = v949[0];
          v439 = (char *)v949[1] - (char *)v949[0];
          if (v949[1] == v949[0])
          {
            v441 = 0;
          }
          else
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](&v950, v439 >> 1);
            v440 = (char *)v951;
            memmove(v951, v438, v439);
            v441 = &v440[v439];
            v951 = &v440[v439];
            v439 = (int64_t)v950;
          }
          v445 = operator new(0x20uLL);
          *v445 = &off_1E15DFF38;
          v445[1] = 0;
          v445[2] = 0;
          v445[3] = 0;
          v446 = (int64_t)&v441[-v439];
          if (v446)
          {
            std::vector<unsigned short>::__vallocate[abi:nn180100](v445 + 1, v446 >> 1);
            v447 = (char *)v445[2];
            memmove(v447, (const void *)v439, v446);
            v445[2] = &v447[v446];
          }
          *(_QWORD *)&bytes[24] = v445;
          CreateSingleSubstitutionLookupTable((unint64_t *)&v953, v235, v437, v436, (unint64_t)v230, (uint64_t)v935, (uint64_t)bytes, 0);
          do
            v448 = __ldaxr((unint64_t *)&v953);
          while (__stlxr(0, (unint64_t *)&v953));
          v164 = v926;
          do
            v449 = (void *)__ldaxr((unint64_t *)__dst);
          while (__stlxr(v448, (unint64_t *)__dst));

          v450 = *(_QWORD **)&bytes[24];
          if (*(_BYTE **)&bytes[24] == bytes)
          {
            v450 = bytes;
            v451 = 4;
          }
          else
          {
            if (!*(_QWORD *)&bytes[24])
              goto LABEL_709;
            v451 = 5;
          }
          (*(void (**)(void))(*v450 + 8 * v451))();
LABEL_709:
          if (v950)
          {
            v951 = v950;
            operator delete(v950);
          }
LABEL_711:
          v452 = (const __CFData *)atomic_load((unint64_t *)&v956);
          v453 = (const __CFData *)atomic_load((unint64_t *)&v954);
          v454 = (const __CFData *)atomic_load((unint64_t *)&v955);
          v455 = (const __CFData *)atomic_load((unint64_t *)__dst);

          if (v949[0])
          {
            v949[1] = v949[0];
            operator delete(v949[0]);
          }
          if ((_DWORD)v246)
          {
            v456 = (unint64_t *)v1005[51];
            if (v1005[51] >= v1005[52])
            {
              v459 = ((char *)v1005[51] - (char *)v1005[50]) >> 3;
              if ((unint64_t)(v459 + 1) >> 61)
                goto LABEL_1296;
              v460 = ((char *)v1005[52] - (char *)v1005[50]) >> 2;
              if (v460 <= v459 + 1)
                v460 = v459 + 1;
              if ((id)((char *)v1005[52] - (char *)v1005[50]) >= (id)0x7FFFFFFFFFFFFFF8)
                v461 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v461 = v460;
              *(_QWORD *)&v998[32] = &v1005[53];
              if (v461)
                v462 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[53], v461);
              else
                v462 = 0;
              *(_QWORD *)v998 = v462;
              *(_QWORD *)&v998[8] = &v462[v459];
              *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
              *(_QWORD *)&v998[24] = &v462[v461];
              do
                v592 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              v462[v459] = v592;
              v593 = *(unint64_t **)&v998[8];
              v458 = (void *)(*(_QWORD *)&v998[16] + 8);
              *(_QWORD *)&v998[16] += 8;
              v594 = (unint64_t *)v1005[51];
              v595 = (unint64_t *)v1005[50];
              if (v1005[51] == v1005[50])
              {
                v597 = vdupq_n_s64((unint64_t)v1005[51]);
              }
              else
              {
                do
                {
                  --v593;
                  --v594;
                  do
                    v596 = __ldaxr(v594);
                  while (__stlxr(0, v594));
                  *v593 = v596;
                }
                while (v594 != v595);
                v597 = *(int64x2_t *)&v1005[50];
                v458 = *(void **)&v998[16];
              }
              v1005[50] = v593;
              v1005[51] = v458;
              *(int64x2_t *)&v998[8] = v597;
              v598 = v1005[52];
              v1005[52] = *(id *)&v998[24];
              *(_QWORD *)&v998[24] = v598;
              *(_QWORD *)v998 = v597.i64[0];
              std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v998);
            }
            else
            {
              do
                v457 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              *v456 = v457;
              v458 = v456 + 1;
            }
            v1005[51] = v458;

            v599 = (void *)atomic_load((unint64_t *)&v957[16]);
            __dst[0] = v599;
            v600 = (unint64_t *)v1005[85];
            if (v1005[85] >= v1005[86])
            {
              v602 = ((char *)v1005[85] - (char *)v1005[84]) >> 3;
              if ((unint64_t)(v602 + 1) >> 61)
                goto LABEL_1296;
              v603 = ((char *)v1005[86] - (char *)v1005[84]) >> 2;
              if (v603 <= v602 + 1)
                v603 = v602 + 1;
              if ((id)((char *)v1005[86] - (char *)v1005[84]) >= (id)0x7FFFFFFFFFFFFFF8)
                v604 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v604 = v603;
              *(_QWORD *)&v998[32] = &v1005[87];
              if (v604)
                v605 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v1005[87], v604);
              else
                v605 = 0;
              *(_QWORD *)v998 = v605;
              *(_QWORD *)&v998[8] = &v605[v602];
              *(_QWORD *)&v998[16] = *(_QWORD *)&v998[8];
              *(_QWORD *)&v998[24] = &v605[v604];
              do
                v606 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              v605[v602] = v606;
              v607 = *(unint64_t **)&v998[8];
              v246 = *(_QWORD *)&v998[16] + 8;
              *(_QWORD *)&v998[16] += 8;
              v608 = (unint64_t *)v1005[85];
              v609 = (unint64_t *)v1005[84];
              if (v1005[85] == v1005[84])
              {
                v611 = vdupq_n_s64((unint64_t)v1005[85]);
              }
              else
              {
                do
                {
                  --v607;
                  --v608;
                  do
                    v610 = __ldaxr(v608);
                  while (__stlxr(0, v608));
                  *v607 = v610;
                }
                while (v608 != v609);
                v611 = *(int64x2_t *)&v1005[84];
                v246 = *(_QWORD *)&v998[16];
              }
              v1005[84] = v607;
              v1005[85] = (id)v246;
              *(int64x2_t *)&v998[8] = v611;
              v612 = v1005[86];
              v1005[86] = *(id *)&v998[24];
              *(_QWORD *)&v998[24] = v612;
              *(_QWORD *)v998 = v611.i64[0];
              std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v998);
            }
            else
            {
              do
                v601 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              *v600 = v601;
              v246 = (uint64_t)(v600 + 1);
            }
            v1005[85] = (id)v246;

            v273 = 28;
            LOBYTE(v246) = 1;
          }
          else
          {
            v273 = 1;
          }
LABEL_927:
          *(_QWORD *)v957 = &off_1E15DEC78;

          goto LABEL_928;
      }
    }
  }
LABEL_272:
  v132 = 0;
LABEL_1284:
  v896 = (__n128 *)v1008;
  if (v1008)
  {
    v897 = v1009;
    v898 = v1008;
    if (v1009 != v1008)
    {
      do
      {
        v899 = (void *)v897[-2].n128_u64[1];
        if (v899)
        {
          v897[-1].n128_u64[0] = (unint64_t)v899;
          operator delete(v899);
        }
        v897 = (__n128 *)((char *)v897 - 72);
      }
      while (v897 != v896);
      v898 = v1008;
    }
    v1009 = v896;
    if (v1011 > v898 || &v1012 <= (_BYTE **)v898)
      operator delete(v898);
  }
  return v132;
}

void `anonymous namespace'::AppendData(_anonymous_namespace_ *this, CFDataRef theData, const __CFData *a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  CFDataAppendBytes(this, BytePtr, Length);
}

void `anonymous namespace'::MorxTableBuilder::CreateTableData(_anonymous_namespace_::MorxChainBuilder **this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _anonymous_namespace_::MorxChainBuilder *v6;
  _anonymous_namespace_::MorxChainBuilder *v7;
  unint64_t v8;
  const __CFAllocator *i;
  __CFData *v10;
  __CFData *v11;
  _anonymous_namespace_::MorxChainBuilder *v12;
  _anonymous_namespace_::MorxChainBuilder *v13;
  unint64_t v14;
  __CFData *v15;
  __CFData *v16;
  __CFData *v17;
  __CFData *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  __CFData *v21;
  __CFData *v22;
  __CFData *v23;
  __CFData *v24;
  __CFData *v25;
  __CFData *v26;
  __CFData *v27;
  __CFData *v28;
  const __CFData *v29;
  unint64_t *v30;
  unint64_t *v31;
  _anonymous_namespace_ *v33;
  const __CFData *v34;
  unint64_t *v35;
  const __CFData *v36;
  int Length;
  uint64_t v38;
  int v39;
  _anonymous_namespace_::MorxChainBuilder *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __CFData *v44;
  const __CFData *v45;
  unint64_t *v46;
  unint64_t *v47;
  _anonymous_namespace_ *v48;
  const __CFData *v49;
  __CFData *v50;
  const __CFData *v51;
  const __CFData *v52;
  _anonymous_namespace_ *v53;
  unint64_t v54;
  const __CFAllocator *v55;
  id Mutable;
  UInt8 bytes[8];
  UInt8 v58[4];

  v7 = *this;
  v6 = this[1];
  v8 = 8;
  if (*this == v6)
    goto LABEL_4;
  do
  {
    v7 = (_anonymous_namespace_::MorxChainBuilder *)((char *)v7 + 944);
  }
  while (v7 != v6);
  if (v8 < 0xFFFFFFFF)
  {
LABEL_4:
    i = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
    v10 = (__CFData *)atomic_load((unint64_t *)&Mutable);
    *(_DWORD *)bytes = 768;
    CFDataAppendBytes(v10, bytes, 4);
    v11 = (__CFData *)atomic_load((unint64_t *)&Mutable);
    *(_DWORD *)bytes = bswap32(-1601513229 * ((unint64_t)(this[1] - *this) >> 4));
    CFDataAppendBytes(v11, bytes, 4);
    v12 = *this;
    v13 = this[1];
    if (*this != v13)
    {
      while (2)
      {
        *(_QWORD *)bytes = CFDataCreateMutable(i, v14);
        v15 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = bswap32(*(_DWORD *)v12);
        CFDataAppendBytes(v15, v58, 4);
        v16 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = bswap32(v14);
        CFDataAppendBytes(v16, v58, 4);
        v17 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = bswap32(1 - 1431655765 * ((*((_QWORD *)v12 + 2) - *((_QWORD *)v12 + 1)) >> 2));
        CFDataAppendBytes(v17, v58, 4);
        v18 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = bswap32((*((_QWORD *)v12 + 51) - *((_QWORD *)v12 + 50)) >> 3);
        CFDataAppendBytes(v18, v58, 4);
        v20 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
        v19 = (unsigned __int16 *)*((_QWORD *)v12 + 2);
        while (v20 != v19)
        {
          v21 = (__CFData *)atomic_load((unint64_t *)bytes);
          *(_WORD *)v58 = bswap32(*v20) >> 16;
          CFDataAppendBytes(v21, v58, 2);
          v22 = (__CFData *)atomic_load((unint64_t *)bytes);
          *(_WORD *)v58 = bswap32(v20[1]) >> 16;
          CFDataAppendBytes(v22, v58, 2);
          v23 = (__CFData *)atomic_load((unint64_t *)bytes);
          *(_DWORD *)v58 = bswap32(*((_DWORD *)v20 + 1));
          CFDataAppendBytes(v23, v58, 4);
          v24 = (__CFData *)atomic_load((unint64_t *)bytes);
          *(_DWORD *)v58 = bswap32(*((_DWORD *)v20 + 2));
          CFDataAppendBytes(v24, v58, 4);
          v20 += 6;
        }
        v25 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_WORD *)v58 = 0;
        CFDataAppendBytes(v25, v58, 2);
        v26 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_WORD *)v58 = 256;
        CFDataAppendBytes(v26, v58, 2);
        v27 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = 0;
        CFDataAppendBytes(v27, v58, 4);
        v28 = (__CFData *)atomic_load((unint64_t *)bytes);
        *(_DWORD *)v58 = 0;
        CFDataAppendBytes(v28, v58, 4);
        v30 = (unint64_t *)*((_QWORD *)v12 + 50);
        v31 = (unint64_t *)*((_QWORD *)v12 + 51);
        while (v30 != v31)
        {
          if (!atomic_load(v30))
          {

LABEL_26:
            *a3 = 0;

            goto LABEL_27;
          }
          v33 = (_anonymous_namespace_ *)atomic_load((unint64_t *)bytes);
          v34 = (const __CFData *)atomic_load(v30);
          ++v30;
        }
        v35 = (unint64_t *)*((_QWORD *)v12 + 84);
        if (v35 != *((unint64_t **)v12 + 85))
        {
          v36 = (const __CFData *)atomic_load(v35);
          Length = CFDataGetLength(v36);
          v38 = *((_QWORD *)v12 + 85) - *((_QWORD *)v12 + 84);
          if (v38)
          {
            v39 = Length;
            v55 = i;
            v40 = v13;
            v41 = a3;
            v42 = (unint64_t)v38 >> 1;
            v43 = v38 >> 3;
            do
            {
              --v43;
              v44 = (__CFData *)atomic_load((unint64_t *)bytes);
              *(_DWORD *)v58 = bswap32(v42);
              CFDataAppendBytes(v44, v58, 4);
              LODWORD(v42) = v42 + v39;
            }
            while (v43);
            v46 = (unint64_t *)*((_QWORD *)v12 + 84);
            v47 = (unint64_t *)*((_QWORD *)v12 + 85);
            a3 = v41;
            v13 = v40;
            for (i = v55; v46 != v47; ++v46)
            {
              v48 = (_anonymous_namespace_ *)atomic_load((unint64_t *)bytes);
              v49 = (const __CFData *)atomic_load(v46);
            }
          }
        }
        if (HIDWORD(v14))
        {
          v50 = (__CFData *)atomic_load((unint64_t *)bytes);
          CFDataIncreaseLength(v50, HIDWORD(v14));
        }
        do
          v51 = (const __CFData *)__ldaxr((unint64_t *)bytes);
        while (__stlxr(0, (unint64_t *)bytes));

        if (!v51)
          goto LABEL_26;
        v53 = (_anonymous_namespace_ *)atomic_load((unint64_t *)&Mutable);

        v12 = (_anonymous_namespace_::MorxChainBuilder *)((char *)v12 + 944);
        if (v12 != v13)
          continue;
        break;
      }
    }
    do
      v54 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    *a3 = v54;
LABEL_27:

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t `anonymous namespace'::MorxTableBuilder::FromArabicPresentationForms(_anonymous_namespace_::MorxTableBuilder *this, const TBaseFont *a2)
{
  uint64_t v2;
  TBaseFont *v3;
  TBaseFont *v4;
  uint64_t InitializedGraphicsFont;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  __CFData *v15;
  UInt8 *MutableBytePtr;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  __CFData *v23;
  unint64_t v24;
  void *v25;
  const __CFData *v26;
  const __CFData *v27;
  const __CFData *v28;
  const __CFData *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  int64x2_t v90;
  uint64_t v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  int64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t *v125;
  unint64_t v126;
  int64x2_t v127;
  uint64_t v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  int64x2_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  unsigned __int16 *v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  __int16 v152;
  int v154;
  uint64_t *v155;
  id v156;
  char *v157;
  _QWORD *v158;
  id v159;
  id v160;
  id v161;
  void (**v162)(_anonymous_namespace_::MorxLigatureSubtableBuilder *__hidden);
  id v163[85];
  id *v164;
  _BYTE __b[936];
  _BYTE *v166;
  _BYTE v167[32];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _OWORD v184[5];
  __int128 __p;
  _BYTE v186[728];
  _BYTE *v187;
  _BYTE *v188;
  __int128 v189;
  uint64_t v190;
  _OWORD v191[4];
  _OWORD *v192;
  _BYTE v193[1464];
  _QWORD v194[5];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v155 = (uint64_t *)v2;
  v194[2] = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)v3 + 25))
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v3);
    (*(void (**)(TBaseFont *, uint64_t))(*(_QWORD *)v4 + 872))(v4, InitializedGraphicsFont);
  }
  memset(__b, 170, sizeof(__b));
  *(_QWORD *)&__b[664] = &__b[424];
  memset(&__b[672], 0, 24);
  v166 = &__b[696];
  *(_DWORD *)__b = 1;
  *(_QWORD *)&v193[32] = &__b[32];
  memset(&__b[400], 0, 24);
  *(_QWORD *)&__b[392] = &__b[44];
  *(_DWORD *)&__b[32] = 1000;
  *(_QWORD *)&__b[36] = 0xFFFFFFFF00000001;
  *(_QWORD *)&__b[8] = &__b[32];
  *(_QWORD *)&__b[16] = &__b[44];
  *(_QWORD *)&__b[24] = &__b[44];
  memset(v193, 0, 32);
  std::__split_buffer<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul> &>::~__split_buffer((uint64_t)v193);
  *(_QWORD *)&__b[16] = &__b[44];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v163[44] = v6;
  *(_OWORD *)&v163[46] = v6;
  *(_OWORD *)&v163[40] = v6;
  *(_OWORD *)&v163[42] = v6;
  *(_OWORD *)&v163[36] = v6;
  *(_OWORD *)&v163[38] = v6;
  *(_OWORD *)&v163[32] = v6;
  *(_OWORD *)&v163[34] = v6;
  *(_OWORD *)&v163[30] = v6;
  *(_OWORD *)&v163[28] = v6;
  *(_OWORD *)&v163[26] = v6;
  *(_OWORD *)&v163[24] = v6;
  *(_OWORD *)&v163[22] = v6;
  *(_OWORD *)&v163[20] = v6;
  v163[19] = (id)0xAAAAAAAAAAAAAAAALL;
  v163[14] = (id)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v163[12] = v6;
  *(_OWORD *)&v163[10] = v6;
  v163[7] = (id)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v163[8] = v6;
  v163[2] = (id)0xAAAAAAAAAAAAAAAALL;
  v163[0] = (id)0xAAAAAAAAAAAAAAAALL;
  v163[1] = 0;
  memset(&v163[3], 0, 32);
  v163[15] = &v163[7];
  memset(&v163[16], 0, 24);
  v163[48] = (id)0xAAAAAAAAAAAAAAAALL;
  v163[49] = &v163[19];
  v162 = &off_1E15DEC78;
  v163[50] = 0;
  v7 = *((_QWORD *)v4 + 25);
  if (!v7)
  {
    v8 = TBaseFont::GetInitializedGraphicsFont(v4);
    v7 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v4 + 872))(v4, v8);
  }
  memset(&v193[24], 170, 0x5A0uLL);
  memset(v193, 0, 24);
  v194[0] = &v193[24];
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v191[3] = v9;
  v191[2] = v9;
  v191[1] = v9;
  v191[0] = v9;
  v189 = 0uLL;
  v190 = 0;
  v192 = v191;
  v11 = __p;
  if ((_QWORD)__p)
  {
    v12 = *((_QWORD *)&__p + 1);
    v13 = (_BYTE *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        v12 -= 48;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v12);
      }
      while (v12 != v11);
      v13 = (_BYTE *)__p;
    }
    *((_QWORD *)&__p + 1) = v11;
    if (&v186[8] <= v13 && &v188 > (_BYTE **)v13)
    {
      if (*(_BYTE **)v186 == v188)
        v188 = v13;
    }
    else
    {
      operator delete(v13);
    }
  }
  if (v10)
  {
    v15 = (__CFData *)atomic_load((unint64_t *)&v163[1]);
    MutableBytePtr = CFDataGetMutableBytePtr(v15);
    v156 = 0;
    *(_OWORD *)v167 = xmmword_18494FCD0;
    *(_OWORD *)&v167[16] = xmmword_18494FCE0;
    v168 = xmmword_18494FCF0;
    v169 = xmmword_18494FD00;
    v170 = xmmword_18494FD10;
    v171 = xmmword_18494FD20;
    v172 = xmmword_18494FD30;
    v173 = xmmword_18494FD40;
    v174 = xmmword_18494FD50;
    v175 = xmmword_18494FD60;
    v176 = xmmword_18494FD70;
    *(_QWORD *)&v177 = 0xFBE606D0FBFE06CCLL;
    CreateLookupTableFromCharacterSwashes<std::pair<unsigned short,unsigned short> const*>((unint64_t *)&v161, (uint64_t)v4, v7, (int *)v167, (int *)&v177 + 2, (uint64_t)MutableBytePtr);
    do
      v17 = __ldaxr((unint64_t *)&v161);
    while (__stlxr(0, (unint64_t *)&v161));
    do
      v18 = (void *)__ldaxr((unint64_t *)&v156);
    while (__stlxr(v17, (unint64_t *)&v156));

    v161 = 0;
    *(_OWORD *)v167 = xmmword_18494FD80;
    *(_OWORD *)&v167[16] = xmmword_18494FD90;
    v168 = xmmword_18494FDA0;
    v169 = xmmword_18494FDB0;
    v170 = xmmword_18494FDC0;
    v171 = xmmword_18494FDD0;
    v172 = xmmword_18494FDE0;
    v173 = xmmword_18494FDF0;
    v174 = xmmword_18494FE00;
    v175 = xmmword_18494FE10;
    v176 = xmmword_18494FE20;
    v177 = xmmword_18494FE30;
    v178 = xmmword_18494FE40;
    v179 = xmmword_18494FE50;
    v180 = xmmword_18494FE60;
    v181 = xmmword_18494FE70;
    v182 = xmmword_18494FE80;
    v183 = xmmword_18494FE90;
    v184[0] = xmmword_18494FEA0;
    v184[1] = xmmword_18494FEB0;
    v184[2] = xmmword_18494FEC0;
    v184[3] = xmmword_18494FED0;
    v184[4] = xmmword_18494FEE0;
    CreateLookupTableFromCharacterSwashes<std::pair<unsigned short,unsigned short> const*>((unint64_t *)&v160, (uint64_t)v4, v7, (int *)v167, (int *)&__p, (uint64_t)MutableBytePtr);
    do
      v19 = __ldaxr((unint64_t *)&v160);
    while (__stlxr(0, (unint64_t *)&v160));
    do
      v20 = (void *)__ldaxr((unint64_t *)&v161);
    while (__stlxr(v19, (unint64_t *)&v161));

    v160 = 0;
    *(_OWORD *)v167 = xmmword_18494FEF0;
    *(_OWORD *)&v167[16] = xmmword_18494FF00;
    v168 = xmmword_18494FF10;
    v169 = xmmword_18494FF20;
    v170 = xmmword_18494FF30;
    v171 = xmmword_18494FF40;
    v172 = xmmword_18494FF50;
    v173 = xmmword_18494FF60;
    v174 = xmmword_18494FF70;
    v175 = xmmword_18494FF80;
    v176 = xmmword_18494FF90;
    v177 = xmmword_18494FFA0;
    v178 = xmmword_18494FFB0;
    v179 = xmmword_18494FFC0;
    v180 = xmmword_18494FFD0;
    v181 = xmmword_18494FFE0;
    v182 = xmmword_18494FFF0;
    v183 = xmmword_184950000;
    *(_QWORD *)&v184[0] = 0xFBB106D3FBAF06D2;
    CreateLookupTableFromCharacterSwashes<std::pair<unsigned short,unsigned short> const*>((unint64_t *)&v159, (uint64_t)v4, v7, (int *)v167, (int *)v184 + 2, (uint64_t)MutableBytePtr);
    do
      v21 = __ldaxr((unint64_t *)&v159);
    while (__stlxr(0, (unint64_t *)&v159));
    do
      v22 = (void *)__ldaxr((unint64_t *)&v160);
    while (__stlxr(v21, (unint64_t *)&v160));

    *(_QWORD *)v167 = 0;
    v23 = NewLKTHandle(v7, 0);
    LKTCreateLookupTable(v23, (unint64_t *)&v159);
    do
      v24 = __ldaxr((unint64_t *)&v159);
    while (__stlxr(0, (unint64_t *)&v159));
    do
      v25 = (void *)__ldaxr((unint64_t *)v167);
    while (__stlxr(v24, (unint64_t *)v167));

    DisposeLKTHandle(v23);
    v26 = (const __CFData *)atomic_load((unint64_t *)&v156);
    v27 = (const __CFData *)atomic_load((unint64_t *)&v161);
    v28 = (const __CFData *)atomic_load((unint64_t *)&v160);
    v29 = (const __CFData *)atomic_load((unint64_t *)v167);

  }
  *(_QWORD *)v167 = &v189;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v167);
  v30 = *(_QWORD *)v193;
  if (*(_QWORD *)v193)
  {
    v31 = *(_QWORD *)&v193[8];
    v32 = *(_BYTE **)v193;
    if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
    {
      do
      {
        v31 -= 48;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v31);
      }
      while (v31 != v30);
      v32 = *(_BYTE **)v193;
    }
    *(_QWORD *)&v193[8] = v30;
    if (&v193[24] > v32 || v194 <= (_QWORD *)v32)
      operator delete(v32);
  }
  if (!v10)
  {
    v162 = &off_1E15DEC78;

LABEL_44:
    v37 = 0;
    goto LABEL_238;
  }
  v34 = *(unint64_t **)&__b[408];
  if (*(_QWORD *)&__b[408] >= *(_QWORD *)&__b[416])
  {
    v38 = (uint64_t)(*(_QWORD *)&__b[408] - *(_QWORD *)&__b[400]) >> 3;
    if ((unint64_t)(v38 + 1) >> 61)
      goto LABEL_243;
    v39 = (uint64_t)(*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400]) >> 2;
    if (v39 <= v38 + 1)
      v39 = v38 + 1;
    if (*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400] >= 0x7FFFFFFFFFFFFFF8uLL)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    *(_QWORD *)&v193[32] = &__b[424];
    if (v40)
      v41 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[424], v40);
    else
      v41 = 0;
    *(_QWORD *)v193 = v41;
    *(_QWORD *)&v193[8] = &v41[v38];
    *(_QWORD *)&v193[16] = *(_QWORD *)&v193[8];
    *(_QWORD *)&v193[24] = &v41[v40];
    do
      v42 = __ldaxr((unint64_t *)&__p);
    while (__stlxr(0, (unint64_t *)&__p));
    v41[v38] = v42;
    v43 = *(unint64_t **)&v193[8];
    v36 = *(_QWORD *)&v193[16] + 8;
    *(_QWORD *)&v193[16] += 8;
    v44 = *(unint64_t **)&__b[408];
    v45 = *(unint64_t **)&__b[400];
    if (*(_QWORD *)&__b[408] == *(_QWORD *)&__b[400])
    {
      v47 = vdupq_n_s64(*(unint64_t *)&__b[408]);
    }
    else
    {
      do
      {
        --v43;
        --v44;
        do
          v46 = __ldaxr(v44);
        while (__stlxr(0, v44));
        *v43 = v46;
      }
      while (v44 != v45);
      v47 = *(int64x2_t *)&__b[400];
      v36 = *(_QWORD *)&v193[16];
    }
    *(_QWORD *)&__b[400] = v43;
    *(_QWORD *)&__b[408] = v36;
    *(int64x2_t *)&v193[8] = v47;
    v48 = *(_QWORD *)&__b[416];
    *(_QWORD *)&__b[416] = *(_QWORD *)&v193[24];
    *(_QWORD *)&v193[24] = v48;
    *(_QWORD *)v193 = v47.i64[0];
    std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v193);
  }
  else
  {
    do
      v35 = __ldaxr((unint64_t *)&__p);
    while (__stlxr(0, (unint64_t *)&__p));
    *v34 = v35;
    v36 = (uint64_t)(v34 + 1);
  }
  *(_QWORD *)&__b[408] = v36;

  v49 = (void *)atomic_load((unint64_t *)&v163[1]);
  *(_QWORD *)&__p = v49;
  v50 = *(unint64_t **)&__b[680];
  if (*(_QWORD *)&__b[680] >= *(_QWORD *)&__b[688])
  {
    v53 = (uint64_t)(*(_QWORD *)&__b[680] - *(_QWORD *)&__b[672]) >> 3;
    if ((unint64_t)(v53 + 1) >> 61)
      goto LABEL_243;
    v54 = (uint64_t)(*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672]) >> 2;
    if (v54 <= v53 + 1)
      v54 = v53 + 1;
    if (*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672] >= 0x7FFFFFFFFFFFFFF8uLL)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    *(_QWORD *)&v193[32] = &__b[696];
    if (v55)
      v56 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[696], v55);
    else
      v56 = 0;
    *(_QWORD *)v193 = v56;
    *(_QWORD *)&v193[8] = &v56[v53];
    *(_QWORD *)&v193[16] = *(_QWORD *)&v193[8];
    *(_QWORD *)&v193[24] = &v56[v55];
    do
      v57 = __ldaxr((unint64_t *)&__p);
    while (__stlxr(0, (unint64_t *)&__p));
    v56[v53] = v57;
    v58 = *(unint64_t **)&v193[8];
    v52 = *(_QWORD *)&v193[16] + 8;
    *(_QWORD *)&v193[16] += 8;
    v59 = *(unint64_t **)&__b[680];
    v60 = *(unint64_t **)&__b[672];
    if (*(_QWORD *)&__b[680] == *(_QWORD *)&__b[672])
    {
      v62 = vdupq_n_s64(*(unint64_t *)&__b[680]);
    }
    else
    {
      do
      {
        --v58;
        --v59;
        do
          v61 = __ldaxr(v59);
        while (__stlxr(0, v59));
        *v58 = v61;
      }
      while (v59 != v60);
      v62 = *(int64x2_t *)&__b[672];
      v52 = *(_QWORD *)&v193[16];
    }
    *(_QWORD *)&__b[672] = v58;
    *(_QWORD *)&__b[680] = v52;
    *(int64x2_t *)&v193[8] = v62;
    v63 = *(_QWORD *)&__b[688];
    *(_QWORD *)&__b[688] = *(_QWORD *)&v193[24];
    *(_QWORD *)&v193[24] = v63;
    *(_QWORD *)v193 = v62.i64[0];
    std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v193);
  }
  else
  {
    do
      v51 = __ldaxr((unint64_t *)&__p);
    while (__stlxr(0, (unint64_t *)&__p));
    *v50 = v51;
    v52 = (uint64_t)(v50 + 1);
  }
  *(_QWORD *)&__b[680] = v52;

  v162 = &off_1E15DEC78;
  memset(&v193[24], 170, 0x5A0uLL);
  memset(v193, 0, 24);
  v194[0] = &v193[24];
  LODWORD(__p) = -24183157;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64490, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183156;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64491, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 114687627;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64492, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 114687628;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64493, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17891701;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64494, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17891700;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64495, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69665141;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64496, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69665140;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64497, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69534069;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64498, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69534068;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64499, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69402997;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64500, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -69402996;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64501, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -68813173;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64502, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -68813172;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64503, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -68682101;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64504, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760629;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64505, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760628;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64506, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -68551029;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64507, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134581;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64512, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872437;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64513, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678133;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64514, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760629;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64515, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629557;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64516, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134575;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64517, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872431;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64518, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610287;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64519, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678127;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64520, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760623;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64521, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629551;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64522, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134569;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64523, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872425;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64524, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610281;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64525, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678121;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64526, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64527, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629545;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64528, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134565;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64529, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678117;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64530, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760613;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64531, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629541;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64532, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872417;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64533, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678113;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64534, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134557;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64535, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678109;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64536, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134553;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64537, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872409;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64538, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678105;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64539, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134541;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64540, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872397;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64541, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610253;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64542, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678093;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64543, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872389;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64544, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678085;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64545, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134529;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64546, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872385;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64547, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610241;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64548, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678081;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64549, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872381;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64550, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678077;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64551, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678073;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64552, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134517;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64553, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678069;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64554, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134513;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64555, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678065;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64556, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134509;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64557, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872365;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64558, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610221;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64559, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678061;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64560, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760557;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64561, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629485;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64562, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872361;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64563, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678057;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64564, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760553;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64565, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629481;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64566, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183077;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64567, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134501;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64568, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872357;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64569, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610213;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64570, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18940197;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64571, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678053;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64572, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760549;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64573, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629477;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64574, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134497;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64575, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872353;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64576, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610209;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64577, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678049;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64578, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760545;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64579, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629473;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64580, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134493;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64581, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872349;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64582, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610205;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64583, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678045;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64584, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760541;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64585, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629469;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64586, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134489;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64587, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872345;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64588, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610201;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64589, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678041;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64590, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760537;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64591, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629465;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64592, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134485;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64593, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678037;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64594, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760533;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64595, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629461;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64596, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134477;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64597, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872333;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64598, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610189;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64599, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678029;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64600, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760525;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64601, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629453;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64602, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22086004;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64612, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954932;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64613, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678132;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64614, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415988;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64615, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760628;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64616, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629556;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64617, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085998;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64618, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954926;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64619, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678126;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64620, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415982;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64621, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760622;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64622, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629550;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64623, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085992;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64624, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954920;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64625, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678120;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64626, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415976;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64627, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760616;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64628, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629544;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64629, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085988;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64630, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954916;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64631, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678116;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64632, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415972;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64633, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760612;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64634, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629540;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64635, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760556;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64636, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629484;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64637, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760552;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64638, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629480;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64639, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183076;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64640, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18940196;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64641, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678052;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64642, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760548;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64643, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629476;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64644, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678048;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64645, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760544;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64646, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629472;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64647, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183068;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64648, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678044;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64649, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085912;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64650, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954840;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64651, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678040;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64652, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415896;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64653, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760536;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64654, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629464;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64655, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085900;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64657, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -21954828;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64658, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678028;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64659, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18415884;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64660, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760524;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64661, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629452;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64662, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003509;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64663, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741365;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64664, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479221;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64665, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547061;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64666, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022773;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64667, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003503;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64668, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741359;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64669, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479215;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64670, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547055;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64671, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022767;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64672, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003497;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64673, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741353;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64674, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479209;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64675, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547049;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64676, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022761;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64677, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547045;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64678, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741345;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64679, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547041;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64680, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003485;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64681, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547037;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64682, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003481;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64683, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547033;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64684, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003469;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64685, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741325;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64686, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479181;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64687, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547021;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64688, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741317;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64689, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479173;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64690, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547013;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64691, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003457;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64692, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741313;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64693, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479169;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64694, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547009;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64695, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741309;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64696, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547001;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64697, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003445;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64698, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546997;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64699, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003441;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64700, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546993;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64701, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003437;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64702, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741293;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64703, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479149;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64704, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546989;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64705, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741289;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64706, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546985;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64707, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003429;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64708, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741285;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64709, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479141;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64710, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18809125;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64711, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546981;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64712, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003425;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64713, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741281;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64714, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479137;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64715, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546977;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64716, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022689;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64717, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003421;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64718, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741277;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64719, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479133;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64720, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546973;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64721, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003417;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64722, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741273;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64723, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479129;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64724, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546969;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64725, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022681;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64726, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003413;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64727, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546965;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64728, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003405;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64730, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741261;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64731, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479117;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64732, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546957;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64733, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022669;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64734, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547060;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64735, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022772;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64736, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547054;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64737, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022766;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64738, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547048;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64739, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022760;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64740, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547044;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64741, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022756;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64742, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547020;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64743, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022732;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64744, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547016;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64745, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022728;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64746, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18809124;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64747, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546980;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64748, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546976;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64749, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546968;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64750, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022680;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64751, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18546956;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64752, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022668;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64753, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760573;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64757, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629501;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64758, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760565;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64759, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629493;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64760, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760561;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64761, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629489;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64762, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760589;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64763, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629517;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64764, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760585;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64765, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629513;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64766, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760605;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64767, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629533;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64768, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760609;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64769, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629537;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64770, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760601;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64771, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629529;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64772, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760581;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64773, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629509;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64774, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760577;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64775, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629505;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64776, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134537;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64777, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872393;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64778, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610249;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64779, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678089;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64780, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085961;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64781, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085965;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64782, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085957;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64783, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085953;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64784, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760572;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64785, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629500;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64786, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760564;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64787, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629492;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64788, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760560;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64789, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629488;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64790, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760588;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64791, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629516;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64792, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760584;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64793, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629512;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64794, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760604;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64795, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629532;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64796, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760608;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64797, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629536;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64798, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760600;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64799, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629528;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64800, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760580;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64801, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629508;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64802, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17760576;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64803, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -17629504;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64804, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23134536;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64805, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22872392;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64806, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22610248;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64807, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18678088;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64808, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085960;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64809, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085964;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64810, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085956;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64811, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22085952;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64812, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003465;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64813, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741321;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64814, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479177;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64815, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547017;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64816, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022733;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64817, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18022729;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64818, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547005;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64819, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003468;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64820, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741324;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64821, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479180;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64822, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003464;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64823, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22741320;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64824, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -22479176;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64825, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547004;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64826, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -18547000;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64827, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -23003497;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64848, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741352;
  WORD2(__p) = -354;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64849, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741353;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64850, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741353;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64851, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479209;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64852, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547049;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64853, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547049;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64854, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547049;
  WORD2(__p) = -344;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64855, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547040;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64856, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547041;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64857, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547036;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64858, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547036;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64859, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741325;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64860, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003469;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64861, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003468;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64862, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547020;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64863, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547021;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64864, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547021;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64865, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547020;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64866, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547021;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64867, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741316;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64868, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741317;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64869, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547012;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64870, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741320;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64871, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741321;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64872, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003464;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64873, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547016;
  WORD2(__p) = -346;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64874, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547017;
  WORD2(__p) = -344;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64875, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547016;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64876, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547017;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64877, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741312;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64878, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479168;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64879, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479169;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64880, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547004;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64881, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547005;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64882, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547005;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64883, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547004;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64884, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003444;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64885, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546996;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64886, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546997;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64887, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546996;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64888, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546992;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64889, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546992;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64890, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546992;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64891, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479148;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64892, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479149;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64893, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546984;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64894, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546984;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64895, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741280;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64896, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741280;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64897, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741280;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64898, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003425;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64899, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003424;
  WORD2(__p) = -354;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64900, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479136;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64901, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479137;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64902, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546976;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64903, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546977;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64904, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741277;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64905, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741277;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64906, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741276;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64907, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003421;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64908, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003421;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64909, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479133;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64910, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479133;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64911, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003421;
  WORD2(__p) = -344;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64914, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546965;
  WORD2(__p) = -352;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64915, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546965;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64916, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741273;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64917, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741272;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64918, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003416;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64919, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003417;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64920, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003416;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64921, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546968;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64922, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546968;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64923, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546956;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64924, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546957;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64925, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479214;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64926, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003496;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64927, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003496;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64928, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479208;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64929, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479208;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64930, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547048;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64931, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547048;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64932, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547040;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64933, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741344;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64934, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547040;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64935, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479180;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64936, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741316;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64937, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741320;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64938, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741312;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64939, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003424;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64940, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546976;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64941, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741260;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64942, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003404;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64943, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546956;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64944, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546972;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64945, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546984;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64946, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741272;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64947, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546985;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64948, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741281;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64949, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546996;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64950, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546980;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64951, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003417;
  WORD2(__p) = -348;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64952, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479132;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64953, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003425;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64954, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546980;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64955, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003424;
  WORD2(__p) = -286;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64956, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003416;
  WORD2(__p) = -350;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64957, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741344;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64958, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003484;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64959, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003420;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64960, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546988;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64961, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22741358;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64962, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18546981;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64963, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003445;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64964, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18547013;
  WORD2(__p) = -284;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64965, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -22479180;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64966, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -23003416;
  WORD2(__p) = -270;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64967, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18809157;
  WORD2(__p) = -1105;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65008, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = -18809129;
  WORD2(__p) = -1105;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65009, (__int16 *)&__p, 3uLL);
  *(_QWORD *)&__p = 0xFEEAFEE0FEDF0627;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65010, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0xFEAEFE92FEDB0627;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65011, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0xFEAAFEE4FEA4FEE3;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65012, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0xFEE2FECCFEE0FEBBLL;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65013, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0x644FEEEFEB30631;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65014, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0xFEEAFEF4FEE0FECBLL;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65015, (__int16 *)&__p, 4uLL);
  *(_QWORD *)&__p = 0xFEE2FEE0FEB30648;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65016, (__int16 *)&__p, 4uLL);
  LODWORD(__p) = -18809157;
  WORD2(__p) = -272;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65017, (__int16 *)&__p, 3uLL);
  __p = xmmword_18494FC44;
  *(_OWORD *)v186 = unk_18494FC54;
  *(_DWORD *)&v186[16] = -18678048;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65018, (__int16 *)&__p, 0x12uLL);
  __p = xmmword_184950010;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65019, (__int16 *)&__p, 8uLL);
  LODWORD(__p) = -24969505;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65269, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24969504;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65270, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24838433;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65271, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24838432;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65272, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24576289;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65273, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24576288;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65274, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183073;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65275, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = -24183072;
  AddLigInputForCharacters((uint64_t *)v193, v4, 65276, (__int16 *)&__p, 2uLL);
  v189 = xmmword_18494FC68;
  v190 = 0x670065506540653;
  v64 = (char *)operator new(0x18uLL);
  v65 = v64 + 24;
  v157 = v64 + 24;
  v158 = v64 + 24;
  *(_QWORD *)v64 = 0;
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  v156 = v64;
  (*(void (**)(TBaseFont *, __int128 *, char *, uint64_t))(*(_QWORD *)v4 + 664))(v4, &v189, v64, 12);
  v66 = 0;
  while (*(_WORD *)&v64[v66])
  {
    v66 += 2;
    if (v66 == 24)
      goto LABEL_89;
  }
  v65 = &v64[v66];
LABEL_89:
  if (v65 - v64 != 24)
  {
    v67 = (v65 - v64) >> 1;
    if (v67 == 11)
    {
      v68 = 11;
LABEL_97:
      v71 = &v64[2 * v67];
      v72 = v68 + ((24 - 2 * v68) >> 1);
      v73 = 24 - 2 * v72;
      if (v72 != 12)
        memmove(v71, &v64[2 * v72], 24 - 2 * v72);
      v157 = &v71[v73];
      goto LABEL_100;
    }
    v69 = v64 + 2;
    v70 = (v65 - v64) >> 1;
    do
    {
      if (*(_WORD *)&v69[2 * v70])
        *(_WORD *)&v64[2 * v67++] = *(_WORD *)&v69[2 * v70];
      ++v70;
    }
    while (v70 != 11);
    v68 = v67;
    if (v67 != 12)
      goto LABEL_97;
  }
LABEL_100:
  memset(v163, 170, sizeof(v163));
  memset(&v163[3], 0, 32);
  v163[15] = &v163[7];
  memset(&v163[16], 0, 24);
  v163[1] = 0;
  v162 = off_1E15DEC28;
  v163[42] = &v163[19];
  memset(&v163[43], 0, 24);
  v163[61] = &v163[46];
  memset(&v163[62], 0, 24);
  v163[73] = &v163[65];
  memset(&v163[74], 0, 24);
  v164 = &v163[77];
  memset(&v186[8], 170, 0x2D0uLL);
  __p = 0uLL;
  *(_QWORD *)v186 = 0;
  v187 = &v186[8];
  {
    *(_QWORD *)v167 = &__p;
    std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v167);
    v162 = off_1E15DEC28;
    *(_QWORD *)&__p = &v163[74];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    *(_QWORD *)&__p = &v163[62];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    *(_QWORD *)&__p = &v163[43];
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    v162 = (void (**)(_anonymous_namespace_::MorxLigatureSubtableBuilder *__hidden))off_1E15DECA0;
    std::vector<STXEntryOne,TInlineBufferAllocator<STXEntryOne,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v163[16]);
    *(_QWORD *)&__p = &v163[4];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);

    operator delete(v64);
    v77 = *(_QWORD *)v193;
    if (*(_QWORD *)v193)
    {
      v78 = *(_QWORD *)&v193[8];
      v79 = *(_BYTE **)v193;
      if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
      {
        do
        {
          v78 -= 48;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v78);
        }
        while (v78 != v77);
        v79 = *(_BYTE **)v193;
      }
      *(_QWORD *)&v193[8] = v77;
      if (&v193[24] > v79 || v194 <= (_QWORD *)v79)
        operator delete(v79);
    }
    v37 = 0;
    goto LABEL_238;
  }
  v74 = *(unint64_t **)&__b[408];
  if (*(_QWORD *)&__b[408] >= *(_QWORD *)&__b[416])
  {
    v81 = (uint64_t)(*(_QWORD *)&__b[408] - *(_QWORD *)&__b[400]) >> 3;
    if ((unint64_t)(v81 + 1) >> 61)
      goto LABEL_243;
    v82 = (uint64_t)(*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400]) >> 2;
    if (v82 <= v81 + 1)
      v82 = v81 + 1;
    if (*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400] >= 0x7FFFFFFFFFFFFFF8uLL)
      v83 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v83 = v82;
    *(_QWORD *)&v168 = &__b[424];
    if (v83)
      v84 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[424], v83);
    else
      v84 = 0;
    *(_QWORD *)v167 = v84;
    *(_QWORD *)&v167[8] = &v84[v81];
    *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
    *(_QWORD *)&v167[24] = &v84[v83];
    do
      v85 = __ldaxr((unint64_t *)&v161);
    while (__stlxr(0, (unint64_t *)&v161));
    v84[v81] = v85;
    v86 = *(unint64_t **)&v167[8];
    v76 = *(_QWORD *)&v167[16] + 8;
    *(_QWORD *)&v167[16] += 8;
    v87 = *(unint64_t **)&__b[408];
    v88 = *(unint64_t **)&__b[400];
    if (*(_QWORD *)&__b[408] == *(_QWORD *)&__b[400])
    {
      v90 = vdupq_n_s64(*(unint64_t *)&__b[408]);
    }
    else
    {
      do
      {
        --v86;
        --v87;
        do
          v89 = __ldaxr(v87);
        while (__stlxr(0, v87));
        *v86 = v89;
      }
      while (v87 != v88);
      v90 = *(int64x2_t *)&__b[400];
      v76 = *(_QWORD *)&v167[16];
    }
    *(_QWORD *)&__b[400] = v86;
    *(_QWORD *)&__b[408] = v76;
    *(int64x2_t *)&v167[8] = v90;
    v91 = *(_QWORD *)&__b[416];
    *(_QWORD *)&__b[416] = *(_QWORD *)&v167[24];
    *(_QWORD *)&v167[24] = v91;
    *(_QWORD *)v167 = v90.i64[0];
    std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v167);
  }
  else
  {
    do
      v75 = __ldaxr((unint64_t *)&v161);
    while (__stlxr(0, (unint64_t *)&v161));
    *v74 = v75;
    v76 = (uint64_t)(v74 + 1);
  }
  *(_QWORD *)&__b[408] = v76;

  v92 = (void *)atomic_load((unint64_t *)&v163[1]);
  v161 = v92;
  v93 = *(unint64_t **)&__b[680];
  if (*(_QWORD *)&__b[680] >= *(_QWORD *)&__b[688])
  {
    v96 = (uint64_t)(*(_QWORD *)&__b[680] - *(_QWORD *)&__b[672]) >> 3;
    if ((unint64_t)(v96 + 1) >> 61)
      goto LABEL_243;
    v97 = (uint64_t)(*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672]) >> 2;
    if (v97 <= v96 + 1)
      v97 = v96 + 1;
    if (*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672] >= 0x7FFFFFFFFFFFFFF8uLL)
      v98 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v98 = v97;
    *(_QWORD *)&v168 = &__b[696];
    if (v98)
      v99 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[696], v98);
    else
      v99 = 0;
    *(_QWORD *)v167 = v99;
    *(_QWORD *)&v167[8] = &v99[v96];
    *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
    *(_QWORD *)&v167[24] = &v99[v98];
    do
      v100 = __ldaxr((unint64_t *)&v161);
    while (__stlxr(0, (unint64_t *)&v161));
    v99[v96] = v100;
    v101 = *(unint64_t **)&v167[8];
    v95 = *(_QWORD *)&v167[16] + 8;
    *(_QWORD *)&v167[16] += 8;
    v102 = *(unint64_t **)&__b[680];
    v103 = *(unint64_t **)&__b[672];
    if (*(_QWORD *)&__b[680] == *(_QWORD *)&__b[672])
    {
      v105 = vdupq_n_s64(*(unint64_t *)&__b[680]);
    }
    else
    {
      do
      {
        --v101;
        --v102;
        do
          v104 = __ldaxr(v102);
        while (__stlxr(0, v102));
        *v101 = v104;
      }
      while (v102 != v103);
      v105 = *(int64x2_t *)&__b[672];
      v95 = *(_QWORD *)&v167[16];
    }
    *(_QWORD *)&__b[672] = v101;
    *(_QWORD *)&__b[680] = v95;
    *(int64x2_t *)&v167[8] = v105;
    v106 = *(_QWORD *)&__b[688];
    *(_QWORD *)&__b[688] = *(_QWORD *)&v167[24];
    *(_QWORD *)&v167[24] = v106;
    *(_QWORD *)v167 = v105.i64[0];
    std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v167);
  }
  else
  {
    do
      v94 = __ldaxr((unint64_t *)&v161);
    while (__stlxr(0, (unint64_t *)&v161));
    *v93 = v94;
    v95 = (uint64_t)(v93 + 1);
  }
  *(_QWORD *)&__b[680] = v95;

  *(_QWORD *)v167 = &__p;
  std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v167);
  v162 = off_1E15DEC28;
  *(_QWORD *)&__p = &v163[74];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  *(_QWORD *)&__p = &v163[62];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  *(_QWORD *)&__p = &v163[43];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  v162 = (void (**)(_anonymous_namespace_::MorxLigatureSubtableBuilder *__hidden))off_1E15DECA0;
  std::vector<STXEntryOne,TInlineBufferAllocator<STXEntryOne,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v163[16]);
  *(_QWORD *)&__p = &v163[4];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);

  if (v156)
    operator delete(v156);
  v107 = *(_QWORD *)v193;
  if (*(_QWORD *)v193)
  {
    v108 = *(_QWORD *)&v193[8];
    v109 = *(_BYTE **)v193;
    if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
    {
      do
      {
        v108 -= 48;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v108);
      }
      while (v108 != v107);
      v109 = *(_BYTE **)v193;
    }
    *(_QWORD *)&v193[8] = v107;
    if (&v193[24] > v109 || v194 <= (_QWORD *)v109)
      operator delete(v109);
  }
  memset(&v193[24], 170, 0x5A0uLL);
  memset(v193, 0, 24);
  v194[0] = &v193[24];
  LODWORD(__p) = 108004912;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64603, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 108004913;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64604, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 108004937;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64605, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 105644064;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64606, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1612;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64606, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105709600;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64607, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1613;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64607, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105775136;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64608, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1614;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64608, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105840672;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64609, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1615;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64609, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105906208;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64610, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1616;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64610, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105971744;
  WORD2(__p) = 1648;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64611, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 108003360;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64611, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 108068592;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64656, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 108068587;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64729, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 105776704;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64754, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105973312;
  WORD2(__p) = 1614;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64754, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105842240;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64755, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105973312;
  WORD2(__p) = 1615;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64755, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105907776;
  WORD2(__p) = 1617;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64756, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105973312;
  WORD2(__p) = 1616;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64756, (__int16 *)&__p, 3uLL);
  LODWORD(__p) = 105643662;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64828, (__int16 *)&__p, 2uLL);
  LODWORD(__p) = 105580071;
  AddLigInputForCharacters((uint64_t *)v193, v4, 64829, (__int16 *)&__p, 2uLL);
  memset(v163, 170, sizeof(v163));
  memset(&v163[3], 0, 32);
  v163[15] = &v163[7];
  memset(&v163[16], 0, 24);
  v163[1] = 0;
  v162 = off_1E15DEC28;
  v163[42] = &v163[19];
  memset(&v163[43], 0, 24);
  v163[61] = &v163[46];
  memset(&v163[62], 0, 24);
  v163[73] = &v163[65];
  memset(&v163[74], 0, 24);
  v164 = &v163[77];
  memset(&v186[8], 170, 0x2D0uLL);
  __p = 0uLL;
  *(_QWORD *)v186 = 0;
  v187 = &v186[8];
  v189 = 0uLL;
  v190 = 0;
  {
    *(_QWORD *)v167 = &__p;
    std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v167);
    v162 = off_1E15DEC28;
    *(_QWORD *)&__p = &v163[74];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    *(_QWORD *)&__p = &v163[62];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    *(_QWORD *)&__p = &v163[43];
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
    v162 = (void (**)(_anonymous_namespace_::MorxLigatureSubtableBuilder *__hidden))off_1E15DECA0;
    std::vector<STXEntryOne,TInlineBufferAllocator<STXEntryOne,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v163[16]);
    *(_QWORD *)&__p = &v163[4];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);

    v114 = *(_QWORD *)v193;
    if (*(_QWORD *)v193)
    {
      v115 = *(_QWORD *)&v193[8];
      v116 = *(_BYTE **)v193;
      if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
      {
        do
        {
          v115 -= 48;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v115);
        }
        while (v115 != v114);
        v116 = *(_BYTE **)v193;
      }
      *(_QWORD *)&v193[8] = v114;
      if (&v193[24] > v116 || v194 <= (_QWORD *)v116)
        operator delete(v116);
    }
    goto LABEL_44;
  }
  v111 = *(unint64_t **)&__b[408];
  if (*(_QWORD *)&__b[408] >= *(_QWORD *)&__b[416])
  {
    v118 = (uint64_t)(*(_QWORD *)&__b[408] - *(_QWORD *)&__b[400]) >> 3;
    if ((unint64_t)(v118 + 1) >> 61)
      goto LABEL_243;
    v119 = (uint64_t)(*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400]) >> 2;
    if (v119 <= v118 + 1)
      v119 = v118 + 1;
    if (*(_QWORD *)&__b[416] - *(_QWORD *)&__b[400] >= 0x7FFFFFFFFFFFFFF8uLL)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v119;
    *(_QWORD *)&v168 = &__b[424];
    if (v120)
      v121 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[424], v120);
    else
      v121 = 0;
    *(_QWORD *)v167 = v121;
    *(_QWORD *)&v167[8] = &v121[v118];
    *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
    *(_QWORD *)&v167[24] = &v121[v120];
    do
      v122 = __ldaxr((unint64_t *)&v156);
    while (__stlxr(0, (unint64_t *)&v156));
    v121[v118] = v122;
    v123 = *(unint64_t **)&v167[8];
    v113 = *(_QWORD *)&v167[16] + 8;
    *(_QWORD *)&v167[16] += 8;
    v124 = *(unint64_t **)&__b[408];
    v125 = *(unint64_t **)&__b[400];
    if (*(_QWORD *)&__b[408] == *(_QWORD *)&__b[400])
    {
      v127 = vdupq_n_s64(*(unint64_t *)&__b[408]);
    }
    else
    {
      do
      {
        --v123;
        --v124;
        do
          v126 = __ldaxr(v124);
        while (__stlxr(0, v124));
        *v123 = v126;
      }
      while (v124 != v125);
      v127 = *(int64x2_t *)&__b[400];
      v113 = *(_QWORD *)&v167[16];
    }
    *(_QWORD *)&__b[400] = v123;
    *(_QWORD *)&__b[408] = v113;
    *(int64x2_t *)&v167[8] = v127;
    v128 = *(_QWORD *)&__b[416];
    *(_QWORD *)&__b[416] = *(_QWORD *)&v167[24];
    *(_QWORD *)&v167[24] = v128;
    *(_QWORD *)v167 = v127.i64[0];
    std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v167);
  }
  else
  {
    do
      v112 = __ldaxr((unint64_t *)&v156);
    while (__stlxr(0, (unint64_t *)&v156));
    *v111 = v112;
    v113 = (uint64_t)(v111 + 1);
  }
  *(_QWORD *)&__b[408] = v113;

  v129 = (void *)atomic_load((unint64_t *)&v163[1]);
  v156 = v129;
  v130 = *(unint64_t **)&__b[680];
  if (*(_QWORD *)&__b[680] >= *(_QWORD *)&__b[688])
  {
    v133 = (uint64_t)(*(_QWORD *)&__b[680] - *(_QWORD *)&__b[672]) >> 3;
    if (!((unint64_t)(v133 + 1) >> 61))
    {
      v134 = (uint64_t)(*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672]) >> 2;
      if (v134 <= v133 + 1)
        v134 = v133 + 1;
      if (*(_QWORD *)&__b[688] - *(_QWORD *)&__b[672] >= 0x7FFFFFFFFFFFFFF8uLL)
        v135 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v135 = v134;
      *(_QWORD *)&v168 = &__b[696];
      if (v135)
        v136 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&__b[696], v135);
      else
        v136 = 0;
      *(_QWORD *)v167 = v136;
      *(_QWORD *)&v167[8] = &v136[v133];
      *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
      *(_QWORD *)&v167[24] = &v136[v135];
      do
        v137 = __ldaxr((unint64_t *)&v156);
      while (__stlxr(0, (unint64_t *)&v156));
      v136[v133] = v137;
      v138 = *(unint64_t **)&v167[8];
      v132 = *(_QWORD *)&v167[16] + 8;
      *(_QWORD *)&v167[16] += 8;
      v139 = *(unint64_t **)&__b[680];
      v140 = *(unint64_t **)&__b[672];
      if (*(_QWORD *)&__b[680] == *(_QWORD *)&__b[672])
      {
        v142 = vdupq_n_s64(*(unint64_t *)&__b[680]);
      }
      else
      {
        do
        {
          --v138;
          --v139;
          do
            v141 = __ldaxr(v139);
          while (__stlxr(0, v139));
          *v138 = v141;
        }
        while (v139 != v140);
        v142 = *(int64x2_t *)&__b[672];
        v132 = *(_QWORD *)&v167[16];
      }
      *(_QWORD *)&__b[672] = v138;
      *(_QWORD *)&__b[680] = v132;
      *(int64x2_t *)&v167[8] = v142;
      v143 = *(_QWORD *)&__b[688];
      *(_QWORD *)&__b[688] = *(_QWORD *)&v167[24];
      *(_QWORD *)&v167[24] = v143;
      *(_QWORD *)v167 = v142.i64[0];
      std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)v167);
      goto LABEL_216;
    }
LABEL_243:
    abort();
  }
  do
    v131 = __ldaxr((unint64_t *)&v156);
  while (__stlxr(0, (unint64_t *)&v156));
  *v130 = v131;
  v132 = (uint64_t)(v130 + 1);
LABEL_216:
  *(_QWORD *)&__b[680] = v132;

  if ((_QWORD)v189)
    operator delete((void *)v189);
  *(_QWORD *)v167 = &__p;
  std::vector<std::vector<unsigned short>,TInlineBufferAllocator<std::vector<unsigned short>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v167);
  v162 = off_1E15DEC28;
  *(_QWORD *)&__p = &v163[74];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  *(_QWORD *)&__p = &v163[62];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  *(_QWORD *)&__p = &v163[43];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  v162 = (void (**)(_anonymous_namespace_::MorxLigatureSubtableBuilder *__hidden))off_1E15DECA0;
  std::vector<STXEntryOne,TInlineBufferAllocator<STXEntryOne,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v163[16]);
  *(_QWORD *)&__p = &v163[4];
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);

  v144 = *(_QWORD *)v193;
  if (*(_QWORD *)v193)
  {
    v145 = *(_QWORD *)&v193[8];
    v146 = *(_BYTE **)v193;
    if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
    {
      do
      {
        v145 -= 48;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v145);
      }
      while (v145 != v144);
      v146 = *(_BYTE **)v193;
    }
    *(_QWORD *)&v193[8] = v144;
    if (&v193[24] > v146 || v194 <= (_QWORD *)v146)
      operator delete(v146);
  }
  v148 = *(unsigned __int16 **)&__b[8];
  if (*(_QWORD *)&__b[8] == *(_QWORD *)&__b[16])
  {
    v149 = v155;
  }
  else
  {
    v149 = v155;
    while (*v148 != 1000)
    {
      v148 += 6;
      if (v148 == *(unsigned __int16 **)&__b[16])
      {
        v148 = *(unsigned __int16 **)&__b[16];
        break;
      }
    }
  }
  v150 = 0;
  *(_WORD *)v193 = *v148;
  v151 = *v148;
  while (*(unsigned __int16 *)((char *)&kMasterFeatureMap + v150 + 4) != v151)
  {
    v150 += 12;
    if (v150 == 1980)
    {
LABEL_236:
      v152 = 0;
      goto LABEL_237;
    }
  }
  while ((*((_BYTE *)&kMasterFeatureMap + v150 + 8) & 2) == 0)
  {
    if (v150 != 1968)
    {
      v154 = *(unsigned __int16 *)((char *)&kMasterFeatureMap + v150 + 16);
      v150 += 12;
      if (v154 == v151)
        continue;
    }
    goto LABEL_236;
  }
  v152 = *(_WORD *)((char *)&kMasterFeatureMap + v150 + 6);
LABEL_237:
  *(_WORD *)&v193[2] = v152;
  *(_DWORD *)&v193[4] = 0;
  *(_DWORD *)&v193[8] = *((_DWORD *)v148 + 2) ^ *((_DWORD *)v148 + 1);
  std::vector<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul>>::emplace<MortFeatureEntry>(&__b[8], (char *)v148, (uint64_t *)v193);
  v37 = 1;
LABEL_238:
  *(_QWORD *)v193 = &__b[672];
  std::vector<TCFRef<__CFData const*>,TInlineBufferAllocator<TCFRef<__CFData const*>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v193);
  *(_QWORD *)v193 = &__b[400];
  std::vector<TCFRef<__CFData const*>,TInlineBufferAllocator<TCFRef<__CFData const*>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v193);
  *(_QWORD *)v193 = &__b[8];
  std::vector<MortFeatureEntry,TInlineBufferAllocator<MortFeatureEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v193);
  return v37;
}

void std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15DF518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF518;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_0>,BOOL ()(unsigned int,OTL::ScriptTable const*,BOOL &)>::operator()(uint64_t a1, __int32 *a2, uint64_t *a3, _BYTE *a4)
{
  __int32 v6;
  uint64_t v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  char **v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t *v25;
  char *v26;
  char *v27;

  v6 = *a2;
  v7 = *a3;
  v8 = *(__int32 **)(a1 + 8);
  v9 = v8 + 9;
  v10 = wmemchr(v8, *a2, 9uLL);
  if (v10)
    v11 = v10;
  else
    v11 = v9;
  if (v11 == (__int32 *)(*(_QWORD *)(a1 + 8) + 36))
  {
    **(_BYTE **)(a1 + 16) = 0;
    *a4 = 1;
  }
  else
  {
    v12 = *(char ***)(a1 + 24);
    v14 = (unint64_t)v12[1];
    v13 = (unint64_t)v12[2];
    if (v14 >= v13)
    {
      v16 = (uint64_t)(v14 - (_QWORD)*v12) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        abort();
      v18 = v13 - (_QWORD)*v12;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v20 = (unint64_t *)(v12 + 63);
      v21 = v12[63];
      v22 = (unint64_t)&v21[16 * v19];
      if (v22 <= (unint64_t)(v12 + 63))
      {
        *v20 = v22;
      }
      else
      {
        if (v19 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (char *)operator new(16 * v19);
      }
      v23 = &v21[16 * v16];
      *(_DWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v7;
      v25 = (unint64_t *)*v12;
      v24 = (unint64_t *)v12[1];
      v26 = v23;
      if (v24 != (unint64_t *)*v12)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
          v26 -= 16;
          v24 -= 2;
        }
        while (v24 != v25);
        v24 = (unint64_t *)*v12;
      }
      v15 = v23 + 16;
      *v12 = v26;
      v12[1] = v23 + 16;
      v27 = v12[2];
      v12[2] = &v21[16 * v19];
      if (v24)
      {
        if (v12 + 3 <= (char **)v24 && v20 > v24)
        {
          if (v27 == (char *)*v20)
            *v20 = (unint64_t)v24;
        }
        else
        {
          operator delete(v24);
        }
      }
    }
    else
    {
      *(_DWORD *)v14 = v6;
      *(_QWORD *)(v14 + 8) = v7;
      v15 = (char *)(v14 + 16);
    }
    v12[1] = v15;
  }
  return 1;
}

void std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF560;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_1>,BOOL ()(OTL::ConditionSetTable const*,OTL::FeatureTableSubstitutionTable const*,BOOL &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  **(_BYTE **)(a1 + 8) = 0;
  *a4 = 1;
  return 1;
}

void std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15DF5A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15DF5A8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_2>,BOOL ()(unsigned int,OTL::LangSysTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2, unint64_t *a3, _BYTE *a4)
{
  unint64_t v4;
  unint64_t v6;
  char **v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *i;
  unint64_t v34;
  _QWORD *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t **v50;
  uint64_t *j;
  unint64_t v52;
  _QWORD *v53;
  float v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;

  v4 = *a3;
  if (!*a3)
    return v4 != 0;
  if (*(__int16 *)(v4 + 2) != -1)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *a4 = 1;
    return v4 != 0;
  }
  v6 = *a2;
  v7 = *(char ***)(a1 + 16);
  v9 = (unint64_t)v7[1];
  v8 = (unint64_t)v7[2];
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - (_QWORD)*v7) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v8 - (_QWORD)*v7;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v15 = (unint64_t *)(v7 + 63);
    v16 = v7[63];
    v17 = (unint64_t)&v16[16 * v14];
    if (v17 <= (unint64_t)(v7 + 63))
    {
      *v15 = v17;
    }
    else
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(16 * v14);
    }
    v18 = &v16[16 * v11];
    *(_DWORD *)v18 = v6;
    *((_QWORD *)v18 + 1) = v4;
    v20 = (unint64_t *)*v7;
    v19 = (unint64_t *)v7[1];
    v21 = v18;
    if (v19 != (unint64_t *)*v7)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
        v21 -= 16;
        v19 -= 2;
      }
      while (v19 != v20);
      v19 = (unint64_t *)*v7;
    }
    v10 = v18 + 16;
    *v7 = v21;
    v7[1] = v18 + 16;
    v22 = v7[2];
    v7[2] = &v16[16 * v14];
    if (v19)
    {
      if (v7 + 3 <= (char **)v19 && v15 > v19)
      {
        if (v22 == (char *)*v15)
          *v15 = (unint64_t)v19;
      }
      else
      {
        operator delete(v19);
      }
    }
  }
  else
  {
    *(_DWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v4;
    v10 = (char *)(v9 + 16);
  }
  v7[1] = v10;
  v24 = *(_QWORD *)(a1 + 24);
  v25 = **(_DWORD **)(a1 + 32);
  v26 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v27 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v26 >> 47) ^ v26);
  v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
  v29 = *(_QWORD *)(v24 + 8);
  if (v29)
  {
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
      if (v28 >= v29)
        v31 = v28 % v29;
    }
    else
    {
      v31 = (v29 - 1) & v28;
    }
    v32 = *(_QWORD **)(*(_QWORD *)v24 + 8 * v31);
    if (v32)
    {
      for (i = (_QWORD *)*v32; i; i = (_QWORD *)*i)
      {
        v34 = i[1];
        if (v34 == v28)
        {
          if (i[2] == v4)
            goto LABEL_66;
        }
        else
        {
          if (v30.u32[0] > 1uLL)
          {
            if (v34 >= v29)
              v34 %= v29;
          }
          else
          {
            v34 &= v29 - 1;
          }
          if (v34 != v31)
            break;
        }
      }
    }
  }
  else
  {
    v31 = 0xAAAAAAAAAAAAAAAALL;
  }
  v35 = operator new(0x20uLL);
  *v35 = 0;
  v35[1] = v28;
  v35[2] = v4;
  *((_DWORD *)v35 + 6) = v25;
  v36 = (float)(unint64_t)(*(_QWORD *)(v24 + 24) + 1);
  v37 = *(float *)(v24 + 32);
  if (!v29 || (float)(v37 * (float)v29) < v36)
  {
    v38 = 1;
    if (v29 >= 3)
      v38 = (v29 & (v29 - 1)) != 0;
    v39 = v38 | (2 * v29);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      v41 = v40;
    else
      v41 = v39;
    std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(v24, v41);
    v29 = *(_QWORD *)(v24 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v28 >= v29)
        v31 = v28 % v29;
      else
        v31 = v28;
    }
    else
    {
      v31 = (v29 - 1) & v28;
    }
  }
  v42 = *(_QWORD *)v24;
  v43 = *(_QWORD **)(*(_QWORD *)v24 + 8 * v31);
  if (v43)
  {
    *v35 = *v43;
LABEL_64:
    *v43 = v35;
    goto LABEL_65;
  }
  *v35 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v24 + 16) = v35;
  *(_QWORD *)(v42 + 8 * v31) = v24 + 16;
  if (*v35)
  {
    v44 = *(_QWORD *)(*v35 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v44 >= v29)
        v44 %= v29;
    }
    else
    {
      v44 &= v29 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)v24 + 8 * v44);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(v24 + 24);
LABEL_66:
  if ((_DWORD)v6)
  {
    v45 = *(_QWORD *)(a1 + 40);
    v46 = **(_DWORD **)(a1 + 32);
    v47 = *(_QWORD *)(v45 + 8);
    if (v47)
    {
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        v49 = v6;
        if (v47 <= v6)
          v49 = v6 % v47;
      }
      else
      {
        v49 = ((_DWORD)v47 - 1) & v6;
      }
      v50 = *(uint64_t ***)(*(_QWORD *)v45 + 8 * v49);
      if (v50)
      {
        for (j = *v50; j; j = (uint64_t *)*j)
        {
          v52 = j[1];
          if (v52 == v6)
          {
            if (*((_DWORD *)j + 4) == (_DWORD)v6)
              return v4 != 0;
          }
          else
          {
            if (v48.u32[0] > 1uLL)
            {
              if (v52 >= v47)
                v52 %= v47;
            }
            else
            {
              v52 &= v47 - 1;
            }
            if (v52 != v49)
              break;
          }
        }
      }
    }
    else
    {
      v49 = 0xAAAAAAAAAAAAAAAALL;
    }
    v53 = operator new(0x18uLL);
    v53[1] = v6;
    *((_DWORD *)v53 + 4) = v6;
    *((_DWORD *)v53 + 5) = v46;
    v54 = (float)(unint64_t)(*(_QWORD *)(v45 + 24) + 1);
    v55 = *(float *)(v45 + 32);
    if (!v47 || (float)(v55 * (float)v47) < v54)
    {
      v56 = 1;
      if (v47 >= 3)
        v56 = (v47 & (v47 - 1)) != 0;
      v57 = v56 | (2 * v47);
      v58 = vcvtps_u32_f32(v54 / v55);
      if (v57 <= v58)
        v59 = v58;
      else
        v59 = v57;
      std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v45, v59);
      v47 = *(_QWORD *)(v45 + 8);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v47 <= v6)
          v49 = v6 % v47;
        else
          v49 = v6;
      }
      else
      {
        v49 = ((_DWORD)v47 - 1) & v6;
      }
    }
    v60 = *(_QWORD *)v45;
    v61 = *(_QWORD **)(*(_QWORD *)v45 + 8 * v49);
    if (v61)
    {
      *v53 = *v61;
    }
    else
    {
      v62 = *(_QWORD *)(v45 + 16);
      *v53 = v62;
      *(_QWORD *)(v45 + 16) = v53;
      *(_QWORD *)(v60 + 8 * v49) = v45 + 16;
      if (!v62)
      {
LABEL_105:
        ++*(_QWORD *)(v45 + 24);
        return v4 != 0;
      }
      v63 = *(_QWORD *)(v62 + 8);
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v63 >= v47)
          v63 %= v47;
      }
      else
      {
        v63 &= v47 - 1;
      }
      v61 = (_QWORD *)(*(_QWORD *)v45 + 8 * v63);
    }
    *v61 = v53;
    goto LABEL_105;
  }
  return v4 != 0;
}

void std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15DF5F0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15DF5F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3,std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3>,BOOL ()(unsigned int,OTL::FeatureTable const*,BOOL &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned int *v15;
  void **v16;
  char *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t *i;
  unint64_t v67;
  _QWORD *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  int8x8_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  void *v105;
  void *v106;
  int v107;
  _BYTE v108[24];
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *a3;
  v107 = v6;
  if ((_DWORD)v6 == 1920365166)
    goto LABEL_217;
  if ((_DWORD)v6 == 1819239276)
  {
    v8 = *(int **)(a1 + 8);
    v107 = *v8;
LABEL_209:
    v90 = **(_QWORD **)(a1 + 48);
    v91 = **(_QWORD **)(a1 + 56);
    v92 = *(_QWORD *)(a1 + 32);
    v93 = *(_QWORD *)(a1 + 64);
    v94 = *(_QWORD *)(a1 + 72);
    v95 = *(_QWORD *)(a1 + 16);
    v96 = operator new(0x40uLL);
    *v96 = &off_1E15E1378;
    v96[1] = v92;
    v96[2] = v8;
    v96[3] = v93;
    v96[4] = &v107;
    v96[5] = v94;
    v96[6] = v95;
    v96[7] = a4;
    v109 = v96;
    v97 = OTL::GCommon::IterateLookupIndexes(v90, v7, v91, (uint64_t)v108);
    (*(void (**)(_QWORD *))(*v96 + 40))(v96);
    return v97;
  }
  v9 = *(unsigned int **)(a1 + 8);
  v10 = *v9;
  if (!(_DWORD)v10)
  {
    v15 = (unsigned int *)(std::__hash_table<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::__unordered_map_hasher<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::hash<OTL::LangSysTable const*>,std::equal_to<OTL::LangSysTable const*>,true>,std::__unordered_map_equal<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::equal_to<OTL::LangSysTable const*>,std::hash<OTL::LangSysTable const*>,true>,std::allocator<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>>>::__emplace_unique_key_args<OTL::LangSysTable const*,std::piecewise_construct_t const&,std::tuple<OTL::LangSysTable const* const&>,std::tuple<>>(*(_QWORD *)(a1 + 32), *((_QWORD *)v9 + 1), (_QWORD *)v9 + 1)+ 3);
    goto LABEL_47;
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = *v9;
      if (v12 <= v10)
        v14 = v10 % v12;
    }
    else
    {
      v14 = ((_DWORD)v12 - 1) & v10;
    }
    v16 = *(void ***)(*(_QWORD *)v11 + 8 * v14);
    if (v16)
    {
      v17 = (char *)*v16;
      if (*v16)
      {
        do
        {
          v18 = *((_QWORD *)v17 + 1);
          if (v18 == v10)
          {
            if (*((_DWORD *)v17 + 4) == (_DWORD)v10)
              goto LABEL_46;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v18 >= v12)
                v18 %= v12;
            }
            else
            {
              v18 &= v12 - 1;
            }
            if (v18 != v14)
              break;
          }
          v17 = *(char **)v17;
        }
        while (v17);
      }
    }
  }
  else
  {
    v14 = 0xAAAAAAAAAAAAAAAALL;
  }
  v17 = (char *)operator new(0x18uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  *((_DWORD *)v17 + 4) = *v9;
  *((_DWORD *)v17 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(v11 + 24) + 1);
  v20 = *(float *)(v11 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = v12 < 3 || (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(v11, v24);
    v12 = *(_QWORD *)(v11 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v10)
        v14 = v10 % v12;
      else
        v14 = v10;
    }
    else
    {
      v14 = ((_DWORD)v12 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)v11;
  v26 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)v17 = *v26;
  }
  else
  {
    *(_QWORD *)v17 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v17;
    *(_QWORD *)(v25 + 8 * v14) = v11 + 16;
    if (!*(_QWORD *)v17)
      goto LABEL_45;
    v27 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)v11 + 8 * v27);
  }
  *v26 = v17;
LABEL_45:
  ++*(_QWORD *)(v11 + 24);
LABEL_46:
  v15 = (unsigned int *)(v17 + 20);
LABEL_47:
  v28 = *v15;
  v29 = *(uint64_t **)(a1 + 40);
  v30 = v29[1];
  if (v30)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v32 = *v15;
      if (v30 <= v28)
        v32 = v28 % v30;
    }
    else
    {
      v32 = ((_DWORD)v30 - 1) & v28;
    }
    v33 = *(void ***)(*v29 + 8 * v32);
    if (v33)
    {
      v34 = (char *)*v33;
      if (*v33)
      {
        do
        {
          v35 = *((_QWORD *)v34 + 1);
          if (v35 == v28)
          {
            if (*((_DWORD *)v34 + 4) == (_DWORD)v28)
              goto LABEL_120;
          }
          else
          {
            if (v31.u32[0] > 1uLL)
            {
              if (v35 >= v30)
                v35 %= v30;
            }
            else
            {
              v35 &= v30 - 1;
            }
            if (v35 != v32)
              break;
          }
          v34 = *(char **)v34;
        }
        while (v34);
      }
    }
  }
  else
  {
    v32 = 0xAAAAAAAAAAAAAAAALL;
  }
  v36 = v29 + 2;
  v34 = (char *)operator new(0x40uLL);
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = v28;
  *((_DWORD *)v34 + 4) = v28;
  *(_OWORD *)(v34 + 24) = 0u;
  *(_OWORD *)(v34 + 40) = 0u;
  *((_DWORD *)v34 + 14) = 1065353216;
  v37 = (float)(unint64_t)(v29[3] + 1);
  v38 = *((float *)v29 + 8);
  if (!v30 || (float)(v38 * (float)v30) < v37)
  {
    v39 = 1;
    if (v30 >= 3)
      v39 = (v30 & (v30 - 1)) != 0;
    v40 = v39 | (2 * v30);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = (int8x8_t)v41;
    else
      prime = (int8x8_t)v40;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v30 = v29[1];
    }
    if (*(_QWORD *)&prime > v30)
      goto LABEL_76;
    if (*(_QWORD *)&prime < v30)
    {
      v49 = vcvtps_u32_f32((float)(unint64_t)v29[3] / *((float *)v29 + 8));
      if (v30 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v30)
      {
        v30 = v29[1];
      }
      else
      {
        if (prime)
        {
LABEL_76:
          if (*(_QWORD *)&prime >> 61)
            goto LABEL_238;
          v43 = operator new(8 * *(_QWORD *)&prime);
          v44 = (void *)*v29;
          *v29 = (uint64_t)v43;
          if (v44)
            operator delete(v44);
          v45 = 0;
          v29[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v29 + 8 * v45++) = 0;
          while (*(_QWORD *)&prime != v45);
          v46 = (_QWORD *)*v36;
          if (*v36)
          {
            v47 = v46[1];
            v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(_QWORD *)&prime)
                v47 %= *(_QWORD *)&prime;
            }
            else
            {
              v47 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v29 + 8 * v47) = v36;
            v52 = (_QWORD *)*v46;
            if (*v46)
            {
              do
              {
                v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(_QWORD *)&prime)
                    v53 %= *(_QWORD *)&prime;
                }
                else
                {
                  v53 &= *(_QWORD *)&prime - 1;
                }
                if (v53 != v47)
                {
                  if (!*(_QWORD *)(*v29 + 8 * v53))
                  {
                    *(_QWORD *)(*v29 + 8 * v53) = v46;
                    goto LABEL_101;
                  }
                  *v46 = *v52;
                  *v52 = **(_QWORD **)(*v29 + 8 * v53);
                  **(_QWORD **)(*v29 + 8 * v53) = v52;
                  v52 = v46;
                }
                v53 = v47;
LABEL_101:
                v46 = v52;
                v52 = (_QWORD *)*v52;
                v47 = v53;
              }
              while (v52);
            }
          }
          v30 = (unint64_t)prime;
          goto LABEL_105;
        }
        v105 = (void *)*v29;
        *v29 = 0;
        if (v105)
          operator delete(v105);
        v30 = 0;
        v29[1] = 0;
      }
    }
LABEL_105:
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v30 <= v28)
        v32 = v28 % v30;
      else
        v32 = v28;
    }
    else
    {
      v32 = ((_DWORD)v30 - 1) & v28;
    }
  }
  v54 = *v29;
  v55 = *(_QWORD **)(*v29 + 8 * v32);
  if (v55)
  {
    *(_QWORD *)v34 = *v55;
LABEL_118:
    *v55 = v34;
    goto LABEL_119;
  }
  *(_QWORD *)v34 = *v36;
  *v36 = v34;
  *(_QWORD *)(v54 + 8 * v32) = v36;
  if (*(_QWORD *)v34)
  {
    v56 = *(_QWORD *)(*(_QWORD *)v34 + 8);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v56 >= v30)
        v56 %= v30;
    }
    else
    {
      v56 &= v30 - 1;
    }
    v55 = (_QWORD *)(*v29 + 8 * v56);
    goto LABEL_118;
  }
LABEL_119:
  ++v29[3];
LABEL_120:
  v57 = *((_QWORD *)v34 + 4);
  if (!v57)
  {
    v60 = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_152;
  }
  v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = v6;
    if (v57 <= v6)
      v59 = v6 % v57;
  }
  else
  {
    v59 = ((_DWORD)v57 - 1) & v6;
  }
  v61 = *((_QWORD *)v34 + 3);
  v62 = *(uint64_t ***)(v61 + 8 * v59);
  if (!v62 || (v63 = *v62) == 0)
  {
LABEL_137:
    if (v58.u32[0] > 1uLL)
    {
      v60 = v6;
      if (v57 <= v6)
        v60 = v6 % v57;
    }
    else
    {
      v60 = ((_DWORD)v57 - 1) & v6;
    }
    v65 = *(uint64_t ***)(v61 + 8 * v60);
    if (v65)
    {
      for (i = *v65; i; i = (uint64_t *)*i)
      {
        v67 = i[1];
        if (v67 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            goto LABEL_208;
        }
        else
        {
          if (v58.u32[0] > 1uLL)
          {
            if (v67 >= v57)
              v67 %= v57;
          }
          else
          {
            v67 &= v57 - 1;
          }
          if (v67 != v60)
            break;
        }
      }
    }
LABEL_152:
    v68 = operator new(0x20uLL);
    *v68 = 0;
    v68[1] = v6;
    *((_DWORD *)v68 + 4) = v6;
    v68[3] = v7;
    v69 = (float)(unint64_t)(*((_QWORD *)v34 + 6) + 1);
    v70 = *((float *)v34 + 14);
    if (v57 && (float)(v70 * (float)v57) >= v69)
    {
LABEL_198:
      v87 = *((_QWORD *)v34 + 3);
      v88 = *(_QWORD **)(v87 + 8 * v60);
      if (v88)
      {
        *v68 = *v88;
      }
      else
      {
        *v68 = *((_QWORD *)v34 + 5);
        *((_QWORD *)v34 + 5) = v68;
        *(_QWORD *)(v87 + 8 * v60) = v34 + 40;
        if (!*v68)
          goto LABEL_207;
        v89 = *(_QWORD *)(*v68 + 8);
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v89 >= v57)
            v89 %= v57;
        }
        else
        {
          v89 &= v57 - 1;
        }
        v88 = (_QWORD *)(*((_QWORD *)v34 + 3) + 8 * v89);
      }
      *v88 = v68;
LABEL_207:
      ++*((_QWORD *)v34 + 6);
LABEL_208:
      v8 = *(int **)(a1 + 8);
      goto LABEL_209;
    }
    v71 = 1;
    if (v57 >= 3)
      v71 = (v57 & (v57 - 1)) != 0;
    v72 = v71 | (2 * v57);
    v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73)
      v74 = (int8x8_t)v73;
    else
      v74 = (int8x8_t)v72;
    if (*(_QWORD *)&v74 == 1)
    {
      v74 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v74 & (*(_QWORD *)&v74 - 1)) != 0)
    {
      v74 = (int8x8_t)std::__next_prime(*(_QWORD *)&v74);
      v57 = *((_QWORD *)v34 + 4);
    }
    if (*(_QWORD *)&v74 > v57)
    {
LABEL_164:
      if (!(*(_QWORD *)&v74 >> 61))
      {
        v75 = operator new(8 * *(_QWORD *)&v74);
        v76 = (void *)*((_QWORD *)v34 + 3);
        *((_QWORD *)v34 + 3) = v75;
        if (v76)
          operator delete(v76);
        v77 = 0;
        *((int8x8_t *)v34 + 4) = v74;
        do
          *(_QWORD *)(*((_QWORD *)v34 + 3) + 8 * v77++) = 0;
        while (*(_QWORD *)&v74 != v77);
        v78 = (_QWORD *)*((_QWORD *)v34 + 5);
        if (v78)
        {
          v79 = v78[1];
          v80 = (uint8x8_t)vcnt_s8(v74);
          v80.i16[0] = vaddlv_u8(v80);
          if (v80.u32[0] > 1uLL)
          {
            if (v79 >= *(_QWORD *)&v74)
              v79 %= *(_QWORD *)&v74;
          }
          else
          {
            v79 &= *(_QWORD *)&v74 - 1;
          }
          *(_QWORD *)(*((_QWORD *)v34 + 3) + 8 * v79) = v34 + 40;
          v84 = (_QWORD *)*v78;
          if (*v78)
          {
            do
            {
              v85 = v84[1];
              if (v80.u32[0] > 1uLL)
              {
                if (v85 >= *(_QWORD *)&v74)
                  v85 %= *(_QWORD *)&v74;
              }
              else
              {
                v85 &= *(_QWORD *)&v74 - 1;
              }
              if (v85 != v79)
              {
                v86 = *((_QWORD *)v34 + 3);
                if (!*(_QWORD *)(v86 + 8 * v85))
                {
                  *(_QWORD *)(v86 + 8 * v85) = v78;
                  goto LABEL_189;
                }
                *v78 = *v84;
                *v84 = **(_QWORD **)(*((_QWORD *)v34 + 3) + 8 * v85);
                **(_QWORD **)(*((_QWORD *)v34 + 3) + 8 * v85) = v84;
                v84 = v78;
              }
              v85 = v79;
LABEL_189:
              v78 = v84;
              v84 = (_QWORD *)*v84;
              v79 = v85;
            }
            while (v84);
          }
        }
        v57 = (unint64_t)v74;
        goto LABEL_193;
      }
LABEL_238:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(_QWORD *)&v74 < v57)
    {
      v81 = vcvtps_u32_f32((float)*((unint64_t *)v34 + 6) / *((float *)v34 + 14));
      if (v57 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (*(_QWORD *)&v74 <= v81)
        v74 = (int8x8_t)v81;
      if (*(_QWORD *)&v74 >= v57)
      {
        v57 = *((_QWORD *)v34 + 4);
      }
      else
      {
        if (v74)
          goto LABEL_164;
        v106 = (void *)*((_QWORD *)v34 + 3);
        *((_QWORD *)v34 + 3) = 0;
        if (v106)
          operator delete(v106);
        v57 = 0;
        *((_QWORD *)v34 + 4) = 0;
      }
    }
LABEL_193:
    if ((v57 & (v57 - 1)) != 0)
    {
      if (v57 <= v6)
        v60 = v6 % v57;
      else
        v60 = v6;
    }
    else
    {
      v60 = ((_DWORD)v57 - 1) & v6;
    }
    goto LABEL_198;
  }
  while (1)
  {
    v64 = v63[1];
    if (v64 == v6)
      break;
    if (v58.u32[0] > 1uLL)
    {
      if (v64 >= v57)
        v64 %= v57;
    }
    else
    {
      v64 &= v57 - 1;
    }
    if (v64 != v59)
      goto LABEL_137;
LABEL_136:
    v63 = (uint64_t *)*v63;
    if (!v63)
      goto LABEL_137;
  }
  if (*((_DWORD *)v63 + 4) != (_DWORD)v6)
    goto LABEL_136;
  v98 = v63[3];
  if (v98 == v7)
    return 1;
  v99 = *(unsigned __int16 *)(v98 + 2);
  if (v99 != *(unsigned __int16 *)(v7 + 2))
    goto LABEL_217;
  if (!*(_WORD *)(v98 + 2))
    return 1;
  v100 = (unsigned __int16 *)(v98 + 4);
  v101 = __rev16(v99);
  v102 = (unsigned __int16 *)(v7 + 4);
  v103 = 2 * v101;
  v97 = 1;
  while (*v100 == *v102)
  {
    ++v100;
    ++v102;
    v103 -= 2;
    if (!v103)
      return v97;
  }
LABEL_217:
  **(_BYTE **)(a1 + 16) = 0;
  v97 = 1;
  *a4 = 1;
  return v97;
}

_QWORD *std::__hash_table<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::__unordered_map_hasher<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::hash<OTL::LangSysTable const*>,std::equal_to<OTL::LangSysTable const*>,true>,std::__unordered_map_equal<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::equal_to<OTL::LangSysTable const*>,std::hash<OTL::LangSysTable const*>,true>,std::allocator<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>>>::__emplace_unique_key_args<OTL::LangSysTable const*,std::piecewise_construct_t const&,std::tuple<OTL::LangSysTable const* const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v7;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v10) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E15E1378;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E1378;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1},std::allocator<BuildFeaturesMap(OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3::operator() const(unsigned int,OTL::FeatureTable const*,BOOL &)::{lambda(unsigned short,BOOL &)#1}>,BOOL ()(unsigned short,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t *v25;
  unsigned int *i;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *j;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t **v63;
  void *v65;
  int v66;
  char v67;
  uint64_t v68;
  unsigned int v69;
  size_t __n[2];
  __int128 v71;
  int v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  int v76;
  int v77;

  v3 = *a2;
  v4 = *((_DWORD *)std::__hash_table<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::__unordered_map_hasher<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::hash<OTL::LangSysTable const*>,std::equal_to<OTL::LangSysTable const*>,true>,std::__unordered_map_equal<OTL::LangSysTable const*,std::__hash_value_type<OTL::LangSysTable const*,unsigned int>,std::equal_to<OTL::LangSysTable const*>,std::hash<OTL::LangSysTable const*>,true>,std::allocator<std::__hash_value_type<OTL::LangSysTable const*,unsigned int>>>::__emplace_unique_key_args<OTL::LangSysTable const*,std::piecewise_construct_t const&,std::tuple<OTL::LangSysTable const* const&>,std::tuple<>>(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (_QWORD *)(*(_QWORD *)(a1 + 16) + 8))+ 6);
  v77 = v4;
  v5 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v5 + 88);
  v6 = v5 + 88;
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v6;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= v3;
    if (v10 >= v3)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 != v6 && *(_DWORD *)(v9 + 32) <= v3)
  {
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v9 + 40), **(_DWORD **)(a1 + 32), **(_DWORD **)(a1 + 32));
  }
  else
  {
LABEL_12:
    v13 = (uint64_t *)(v6 - 8);
    v14 = **(_DWORD **)(a1 + 32);
    __n[1] = 0;
    *(_QWORD *)&v71 = 0;
    __n[0] = (size_t)&__n[1];
    std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)__n, (uint64_t *)&__n[1], v14, v14);
    v73 = v3;
    *((_QWORD *)&v74 + 1) = 0;
    *(_QWORD *)&v75 = 0;
    *(_QWORD *)&v74 = (char *)&v74 + 8;
    std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v74, (_QWORD *)__n[0], &__n[1]);
    std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<unsigned int>>>(v13, v73, (uint64_t)&v73);
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(*((_QWORD **)&v74 + 1));
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy((_QWORD *)__n[1]);
  }
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(v15 + 112);
  if (!v16)
    goto LABEL_24;
  v17 = v15 + 112;
  do
  {
    v18 = *(_DWORD *)(v16 + 32);
    v19 = v18 >= v3;
    if (v18 >= v3)
      v20 = (uint64_t *)v16;
    else
      v20 = (uint64_t *)(v16 + 8);
    if (v19)
      v17 = v16;
    v16 = *v20;
  }
  while (*v20);
  if (v17 == v15 + 112 || *(_DWORD *)(v17 + 32) > v3)
  {
LABEL_24:
    v21 = 0;
    if (v4 > 1751215720)
    {
      if (v4 > 1801547360)
      {
        if (v4 != 1818326126)
        {
          v22 = 1801547361;
LABEL_36:
          if (v4 == v22)
            goto LABEL_37;
LABEL_38:
          v73 = v3;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15 + 40, v3, &v73)+ 5) = v21;
          v23 = *(_QWORD *)(a1 + 24);
          __n[1] = 0;
          *(_QWORD *)&v71 = 0;
          __n[0] = (size_t)&__n[1];
          std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)__n, (uint64_t *)&__n[1], v4, v4);
          v73 = v3;
          *(_QWORD *)&v75 = 0;
          v74 = (unint64_t)&v74 + 8;
          std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v74, (_QWORD *)__n[0], &__n[1]);
          std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<unsigned int>>>((uint64_t *)(v23 + 104), v73, (uint64_t)&v73);
          std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(*((_QWORD **)&v74 + 1));
          std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy((_QWORD *)__n[1]);
          goto LABEL_39;
        }
      }
      else if (v4 != 1751215721)
      {
        if (v4 != 1751474802)
          goto LABEL_38;
        goto LABEL_31;
      }
    }
    else
    {
      if (v4 <= 1668903531)
      {
        if (v4 != 1634885986)
        {
          v22 = 1667786098;
          goto LABEL_36;
        }
LABEL_31:
        v21 = -1;
        goto LABEL_38;
      }
      if (v4 != 1668903532)
      {
        v22 = 1735550315;
        goto LABEL_36;
      }
    }
LABEL_37:
    v21 = 1;
    goto LABEL_38;
  }
  v55 = 0;
  v56 = 1;
  if (v4 <= 1751215720)
  {
    if (v4 <= 1668903531)
    {
      if (v4 != 1634885986)
      {
        v57 = 1667786098;
        goto LABEL_144;
      }
LABEL_98:
      v56 = 0;
      v55 = -1;
      goto LABEL_146;
    }
    if (v4 != 1668903532)
    {
      v57 = 1735550315;
      goto LABEL_144;
    }
LABEL_145:
    v56 = 0;
    v55 = 1;
    goto LABEL_146;
  }
  if (v4 <= 1801547360)
  {
    if (v4 != 1751215721)
    {
      if (v4 != 1751474802)
        goto LABEL_146;
      goto LABEL_98;
    }
    goto LABEL_145;
  }
  if (v4 == 1818326126)
    goto LABEL_145;
  v57 = 1801547361;
LABEL_144:
  if (v4 == v57)
    goto LABEL_145;
LABEL_146:
  v73 = v3;
  v66 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15 + 40, v3, &v73)+ 5);
  if (v66)
  {
    if (v55 == v66)
      v67 = 1;
    else
      v67 = v56;
    if ((v67 & 1) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      **(_BYTE **)(a1 + 56) = 1;
      return 1;
    }
  }
  else
  {
    v68 = *(_QWORD *)(a1 + 24) + 40;
    v73 = v3;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v68, v3, &v73)+ 5) = v55;
  }
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v17 + 40), v4, v4);
LABEL_39:
  v25 = *(uint64_t **)(a1 + 24);
  v24 = *(unsigned int **)(a1 + 32);
  v69 = v3;
  *(_OWORD *)__n = 0u;
  v71 = 0u;
  v72 = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)__n, &v69, &v69);
  v73 = *v24;
  v74 = 0u;
  v75 = 0u;
  v76 = v72;
  std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>((uint64_t)&v74, __n[1]);
  for (i = (unsigned int *)v71; i; i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v74, i + 4, i + 4);
  v27 = v73;
  v28 = v25[1];
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v73;
      if (v28 <= v73)
        v30 = v73 % v28;
    }
    else
    {
      v30 = ((_DWORD)v28 - 1) & v73;
    }
    v31 = *(uint64_t ***)(*v25 + 8 * v30);
    if (v31)
    {
      for (j = *v31; j; j = (uint64_t *)*j)
      {
        v33 = j[1];
        if (v33 == v73)
        {
          if (*((_DWORD *)j + 4) == v73)
            goto LABEL_129;
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v33 >= v28)
              v33 %= v28;
          }
          else
          {
            v33 &= v28 - 1;
          }
          if (v33 != v30)
            break;
        }
      }
    }
  }
  else
  {
    v30 = 0xAAAAAAAAAAAAAAAALL;
  }
  v34 = v25 + 2;
  v35 = (char *)operator new(0x40uLL);
  v36 = v35;
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = v27;
  *((_DWORD *)v35 + 4) = v27;
  v37 = v74;
  v74 = 0uLL;
  *(_OWORD *)(v35 + 24) = v37;
  v38 = v75;
  *(_OWORD *)(v35 + 40) = v75;
  *((_DWORD *)v35 + 14) = v76;
  if (*((_QWORD *)&v38 + 1))
  {
    v39 = *(_QWORD *)(v38 + 8);
    if ((*((_QWORD *)&v37 + 1) & (*((_QWORD *)&v37 + 1) - 1)) != 0)
    {
      if (v39 >= *((_QWORD *)&v37 + 1))
        v39 %= *((_QWORD *)&v37 + 1);
    }
    else
    {
      v39 &= *((_QWORD *)&v37 + 1) - 1;
    }
    *(_QWORD *)(v37 + 8 * v39) = v35 + 40;
    v75 = 0uLL;
  }
  v40 = (float)(unint64_t)(v25[3] + 1);
  v41 = *((float *)v25 + 8);
  if (!v28 || (float)(v41 * (float)v28) < v40)
  {
    v42 = 1;
    if (v28 >= 3)
      v42 = (v28 & (v28 - 1)) != 0;
    v43 = v42 | (2 * v28);
    v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44)
      prime = (int8x8_t)v44;
    else
      prime = (int8x8_t)v43;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v28 = v25[1];
    if (*(_QWORD *)&prime > v28)
      goto LABEL_76;
    if (*(_QWORD *)&prime < v28)
    {
      v52 = vcvtps_u32_f32((float)(unint64_t)v25[3] / *((float *)v25 + 8));
      if (v28 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
      {
        v52 = std::__next_prime(v52);
      }
      else
      {
        v54 = 1 << -(char)__clz(v52 - 1);
        if (v52 >= 2)
          v52 = v54;
      }
      if (*(_QWORD *)&prime <= v52)
        prime = (int8x8_t)v52;
      if (*(_QWORD *)&prime >= v28)
      {
        v28 = v25[1];
      }
      else
      {
        if (prime)
        {
LABEL_76:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v46 = operator new(8 * *(_QWORD *)&prime);
          v47 = (void *)*v25;
          *v25 = (uint64_t)v46;
          if (v47)
            operator delete(v47);
          v48 = 0;
          v25[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v25 + 8 * v48++) = 0;
          while (*(_QWORD *)&prime != v48);
          v49 = (_QWORD *)*v34;
          if (*v34)
          {
            v50 = v49[1];
            v51 = (uint8x8_t)vcnt_s8(prime);
            v51.i16[0] = vaddlv_u8(v51);
            if (v51.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&prime)
                v50 %= *(_QWORD *)&prime;
            }
            else
            {
              v50 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v25 + 8 * v50) = v34;
            v58 = (_QWORD *)*v49;
            if (*v49)
            {
              do
              {
                v59 = v58[1];
                if (v51.u32[0] > 1uLL)
                {
                  if (v59 >= *(_QWORD *)&prime)
                    v59 %= *(_QWORD *)&prime;
                }
                else
                {
                  v59 &= *(_QWORD *)&prime - 1;
                }
                if (v59 != v50)
                {
                  if (!*(_QWORD *)(*v25 + 8 * v59))
                  {
                    *(_QWORD *)(*v25 + 8 * v59) = v49;
                    goto LABEL_110;
                  }
                  *v49 = *v58;
                  *v58 = **(_QWORD **)(*v25 + 8 * v59);
                  **(_QWORD **)(*v25 + 8 * v59) = v58;
                  v58 = v49;
                }
                v59 = v50;
LABEL_110:
                v49 = v58;
                v58 = (_QWORD *)*v58;
                v50 = v59;
              }
              while (v58);
            }
          }
          v28 = (unint64_t)prime;
          goto LABEL_114;
        }
        v65 = (void *)*v25;
        *v25 = 0;
        if (v65)
          operator delete(v65);
        v28 = 0;
        v25[1] = 0;
      }
    }
LABEL_114:
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = ((_DWORD)v28 - 1) & v27;
    }
  }
  v60 = *v25;
  v61 = *(_QWORD **)(*v25 + 8 * v30);
  if (v61)
  {
    *(_QWORD *)v36 = *v61;
  }
  else
  {
    *(_QWORD *)v36 = *v34;
    *v34 = v36;
    *(_QWORD *)(v60 + 8 * v30) = v34;
    if (!*(_QWORD *)v36)
      goto LABEL_128;
    v62 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v62 >= v28)
        v62 %= v28;
    }
    else
    {
      v62 &= v28 - 1;
    }
    v61 = (_QWORD *)(*v25 + 8 * v62);
  }
  *v61 = v36;
LABEL_128:
  ++v25[3];
LABEL_129:
  std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v74);
  std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)__n);
  v63 = std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 24) + 128), **(_DWORD **)(a1 + 32), *(_DWORD **)(a1 + 32));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)(v63 + 5), (unsigned int *)&v77, &v77);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::set<unsigned int>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = v9;
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    v11 = (_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 16);
    v9[5] = *(_QWORD *)(a3 + 8);
    v9[6] = v12;
    v13 = (char *)(v9 + 6);
    v14 = *(_QWORD *)(a3 + 24);
    v9[7] = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(a3 + 8) = v11;
      *v11 = 0;
      *(_QWORD *)(a3 + 24) = 0;
    }
    else
    {
      v9[5] = (uint64_t)v13;
    }
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v15 = *(_QWORD *)*v4;
    if (v15)
    {
      *v4 = v15;
      v10 = *v6;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v10);
    ++v4[2];
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;

  v5 = (uint64_t **)a2;
  v6 = (uint64_t **)result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 7), v8 > a3))
  {
    v9 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = (uint64_t **)v11;
      else
        v17 = (uint64_t **)a2;
      if (v9)
        v13 = (uint64_t **)(v11 + 1);
      else
        v13 = (uint64_t **)a2;
      if (*v13)
        return result;
      v5 = v17;
LABEL_43:
      v23 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v23 + 7) = a4;
      return std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__insert_node_at(v6, (uint64_t)v5, v13, v23);
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 7) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_43;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v18;
        v19 = *((_DWORD *)v18 + 7);
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_43;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = (uint64_t **)(a2 + 1);
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = (uint64_t **)a2;
      do
      {
        v20 = (uint64_t *)v14;
        v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v20);
    }
    if (v14 == v7)
      goto LABEL_43;
    if (*((_DWORD *)v14 + 7) > a3)
      goto LABEL_43;
    v21 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_43;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v21;
        v22 = *((_DWORD *)v21 + 7);
        if (v22 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_43;
      }
      if (v22 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_43;
      }
    }
  }
  return result;
}

uint64_t *std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, *((_DWORD *)v4 + 7), *((_DWORD *)v4 + 7));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<TRun const*,long>,std::__unordered_map_hasher<TRun const*,std::__hash_value_type<TRun const*,long>,std::hash<TRun const*>,std::equal_to<TRun const*>,true>,std::__unordered_map_equal<TRun const*,std::__hash_value_type<TRun const*,long>,std::equal_to<TRun const*>,std::hash<TRun const*>,true>,std::allocator<std::__hash_value_type<TRun const*,long>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unordered_set<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;
  _QWORD v12[3];

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12[2] = 0xAAAAAAAAAAAAAA01;
    v10 = (char *)operator new(0x50uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_DWORD *)v10 + 18) = 1065353216;
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,void *>>>>::reset[abi:nn180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::unordered_set<unsigned int>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v1 + 40);
    operator delete(v1);
  }
}

uint64_t *std::unique_ptr<`anonymous namespace'::ArabicLookups>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  BOOL v8;
  void **v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v9 = (void **)(v2 + 1472);
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v9);
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(_QWORD *)(v2 + 8);
      v5 = *(_QWORD **)v2;
      if ((_QWORD *)v4 != v3)
      {
        do
        {
          v4 -= 48;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v4);
        }
        while ((_QWORD *)v4 != v3);
        v5 = *(_QWORD **)v2;
      }
      *(_QWORD *)(v2 + 8) = v3;
      v6 = (_QWORD *)(v2 + 1464);
      if (v2 + 24 <= (unint64_t)v5)
      {
        v7 = v6 >= v5;
        v8 = v6 == v5;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      if (!v8 && v7)
      {
        if (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v2 + 1464))
          *v6 = v5;
      }
      else
      {
        operator delete(v5);
      }
    }
    return (uint64_t *)MEMORY[0x186DC03AC](v2, 0x1070C40A52D4504);
  }
  return result;
}

void std::vector<`anonymous namespace'::LookupInfo,TInlineBufferAllocator<`anonymous namespace'::LookupInfo,30ul>>::push_back[abi:nn180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  char **v27;

  v5 = (unint64_t)a1[1];
  v4 = (unint64_t)a1[2];
  if (v5 >= v4)
  {
    v9 = (char *)(a1 + 3);
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (v10 + 1 > 0x38E38E38E38E38ELL)
      abort();
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x1C71C71C71C71C7)
      v13 = 0x38E38E38E38E38ELL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = a1[273];
      v15 = (unint64_t)&v14[72 * v13];
      if (v15 <= (unint64_t)(a1 + 273))
      {
        a1[273] = (char *)v15;
      }
      else
      {
        if (v13 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = (char *)operator new(72 * v13);
      }
    }
    else
    {
      v14 = 0;
    }
    v16 = &v14[72 * v10];
    v17 = *a2;
    v18 = a2[2];
    *((_OWORD *)v16 + 1) = a2[1];
    *((_OWORD *)v16 + 2) = v18;
    v19 = &v14[72 * v13];
    *(_OWORD *)v16 = v17;
    std::vector<unsigned short>::vector((_QWORD *)v16 + 6, (uint64_t)(a2 + 3));
    v8 = v16 + 72;
    v20 = *a1;
    v21 = a1[1];
    if (v21 == *a1)
    {
      *a1 = v16;
      a1[1] = v8;
      v25 = a1[2];
      a1[2] = v19;
    }
    else
    {
      do
      {
        v22 = *(_OWORD *)(v21 - 72);
        v23 = *(_OWORD *)(v21 - 56);
        *(_OWORD *)(v16 - 40) = *(_OWORD *)(v21 - 40);
        *(_OWORD *)(v16 - 56) = v23;
        *(_OWORD *)(v16 - 72) = v22;
        *((_QWORD *)v16 - 2) = 0;
        *((_QWORD *)v16 - 1) = 0;
        *((_QWORD *)v16 - 3) = 0;
        *(_OWORD *)(v16 - 24) = *(_OWORD *)(v21 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v21 - 1);
        v16 -= 72;
        *((_QWORD *)v21 - 3) = 0;
        *((_QWORD *)v21 - 2) = 0;
        *((_QWORD *)v21 - 1) = 0;
        v21 -= 72;
      }
      while (v21 != v20);
      v21 = *a1;
      v24 = a1[1];
      *a1 = v16;
      a1[1] = v8;
      v25 = a1[2];
      a1[2] = v19;
      while (v24 != v21)
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        if (v26)
        {
          *((_QWORD *)v24 - 2) = v26;
          operator delete(v26);
        }
        v24 -= 72;
      }
    }
    if (v21)
    {
      if (v9 > v21 || (v27 = a1 + 273, a1 + 273 <= (char **)v21))
      {
        operator delete(v21);
      }
      else if (v25 == *v27)
      {
        *v27 = v21;
      }
    }
  }
  else
  {
    v6 = *a2;
    v7 = a2[2];
    *(_OWORD *)(v5 + 16) = a2[1];
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)v5 = v6;
    std::vector<unsigned short>::vector((_QWORD *)(v5 + 48), (uint64_t)(a2 + 3));
    v8 = (char *)(v5 + 72);
  }
  a1[1] = v8;
}

BOOL IsAccessWithinRange<OTL::LookupTable>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _BOOL8 result;
  unint64_t v6;

  if (a1 + 4 < a2 || a1 + 6 > a3)
    return 0;
  result = 0;
  if (a2 <= a1)
  {
    v6 = a1
       + 2 * (bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16)
       + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 11) & 2)
       + 6;
    if (v6 >= a1)
      return v6 <= a3;
  }
  return result;
}

uint64_t ResolveLookupSubtable(unsigned __int16 *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;

  v3 = (unint64_t)&a1[__rev16(a1[2]) + 3];
  if ((unint64_t)(a1 + 4) <= a2)
    v4 = (a2 - ((_DWORD)a1 + 6)) >> 1;
  else
    v4 = 0;
  v5 = bswap32(v4) >> 16;
  if (v3 < (unint64_t)(a1 + 3) || v3 > a2)
    v7 = v5;
  else
    v7 = a1[2];
  if (a3)
    *a3 = __rev16(v7);
  return ResolveLookupSubtableWithIndex(a1, 0, a2);
}

uint64_t ResolveLookupSubtableWithIndex(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = bswap32(a1[2]) >> 16;
  v4 = (unint64_t)&a1[v3 + 3];
  if ((unint64_t)(a1 + 4) <= a3)
    v5 = (unsigned __int16)((unint64_t)(a3 - ((_DWORD)a1 + 6)) >> 1);
  else
    v5 = 0;
  if (v4 < (unint64_t)(a1 + 3) || v4 > a3)
    v7 = v5;
  else
    v7 = v3;
  if (v7 <= a2)
    return 0;
  v8 = (char *)a1 + (bswap32(a1[a2 + 3]) >> 16);
  if ((unint64_t)(v8 + 2) > a3)
    return 0;
  v9 = *a1;
  if (v9 != 1792)
    return __rev16(v9);
  if (*(_WORD *)v8 != 256 || (unint64_t)(v8 + 8) > a3)
    return 0;
  v11 = *((unsigned __int16 *)v8 + 1);
  v12 = 7;
  if (v11 != 1792)
  {
    v13 = __rev16(v11);
    if ((unint64_t)&v8[bswap32(*((_DWORD *)v8 + 1)) + 2] <= a3)
      return v13;
    else
      return 7;
  }
  return v12;
}

__n128 *std::stable_partition[abi:nn180100]<std::__wrap_iter<`anonymous namespace'::LookupInfo *>,`anonymous namespace'::MorxTableBuilder::From(TBaseFont const&,OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_3>(__n128 *a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v3;
  uint64_t i;
  unsigned __int32 v5;
  BOOL v6;
  __n128 *v9;
  uint64_t v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1;
  if (a1 != a2)
  {
    v3 = (uint64_t)a2;
    for (i = (uint64_t)a1; ; i += 72)
    {
      v5 = v2->n128_u32[0];
      v6 = v2->n128_u32[0] == 1667329140 || v5 == 1919118452;
      if (!v6 && v5 != 1919707495)
        break;
      v2 = (__n128 *)((char *)v2 + 72);
      if (v2 == a2)
        return a2;
    }
    v9 = (__n128 *)((char *)a2 - 72);
    v10 = (uint64_t)a2 - i;
    while (v2 != v9)
    {
      v12 = v9->n128_u32[0];
      v9 = (__n128 *)((char *)v9 - 72);
      v11 = v12;
      v3 -= 72;
      v10 -= 72;
      if (v12 == 1667329140 || v11 == 1919707495 || v11 == 1919118452)
      {
        v15 = 0x8E38E38E38E38E39 * (v10 >> 3) + 1;
        if (v10 < 145)
        {
          v16 = 0;
          v18 = 0;
        }
        else
        {
                                                                                         * (v10 >> 3) + 1);
          v18 = v17;
        }
        if (v16)
          operator delete(v16);
        return v2;
      }
    }
  }
  return v2;
}

void std::stable_partition[abi:nn180100]<std::__wrap_iter<`anonymous namespace'::LookupInfo *>,`anonymous namespace'::MorxTableBuilder::From(TBaseFont const&,OTL::GCommon::Header const*,void const*,`anonymous namespace'::OTFeaturesMap &)::$_6>(int *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v2 = (uint64_t)a2;
    v3 = (uint64_t)a1;
    v4 = a1;
    while (*v4 == 1919707495)
    {
      v4 += 18;
      v3 += 72;
      if (v4 == a2)
        return;
    }
    v5 = a2 - 18;
    v6 = (uint64_t)a2 - v3;
    while (v4 != v5)
    {
      v7 = *v5;
      v5 -= 18;
      v2 -= 72;
      v6 -= 72;
      if (v7 == 1919707495)
      {
        v8 = 0x8E38E38E38E38E39 * (v6 >> 3) + 1;
        if (v6 < 145)
        {
          v9 = 0;
          v11 = 0;
        }
        else
        {
                                                                                        * (v6 >> 3) + 1);
          v11 = v10;
        }
        if (v9)
          operator delete(v9);
        return;
      }
    }
  }
}

BOOL `anonymous namespace'::MorxSwashSubtableBuilder::FromLookupSubtable(unint64_t *a1, unint64_t a2, int a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, uint64_t a8, __int16 a9)
{
  __CFData *v14;
  UInt8 *MutableBytePtr;
  int v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  int64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void *__p;
  void *__dst;
  uint64_t v34;
  id v35;
  void *v36[3];
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v14 = (__CFData *)atomic_load(a1 + 1);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  memset(v36, 170, sizeof(v36));
  std::vector<unsigned short>::vector(v36, a8);
  v16 = a5;
  __dst = 0;
  v34 = 0;
  __p = 0;
  v17 = v36[0];
  v18 = (char *)v36[1] - (char *)v36[0];
  if (v36[1] == v36[0])
  {
    v20 = 0;
  }
  else
  {
    std::vector<unsigned short>::__vallocate[abi:nn180100](&__p, v18 >> 1);
    v19 = (char *)__dst;
    memmove(__dst, v17, v18);
    v20 = &v19[v18];
    __dst = &v19[v18];
    v18 = (int64_t)__p;
  }
  v21 = operator new(0x20uLL);
  *v21 = &off_1E15DFE60;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = 0;
  v22 = (int64_t)&v20[-v18];
  if (v20 != (char *)v18)
  {
    std::vector<unsigned short>::__vallocate[abi:nn180100](v21 + 1, v22 >> 1);
    v23 = (char *)v21[2];
    memmove(v23, (const void *)v18, v22);
    v21[2] = &v23[v22];
  }
  v38 = v21;
  CreateSingleSubstitutionLookupTable((unint64_t *)&v35, a2, v16, a6, a7, (uint64_t)MutableBytePtr, (uint64_t)v37, a9);
  v24 = a1 + 2;
  do
    v25 = __ldaxr((unint64_t *)&v35);
  while (__stlxr(0, (unint64_t *)&v35));
  do
    v26 = (void *)__ldaxr(v24);
  while (__stlxr(v25, v24));

  v27 = v38;
  if (v38 == v37)
  {
    v28 = 4;
    v27 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_14;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_14:
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  v29 = atomic_load(v24);
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  return v29 != 0;
}

uint64_t std::vector<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul>>::emplace_back<TCFRef<__CFData const*>>(uint64_t result, unint64_t *a2)
{
  unint64_t **v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  int64x2_t v19;
  unint64_t *v20;
  _QWORD *v21;
  int64x2_t v22;
  unint64_t *v23;
  _QWORD *v24;

  v3 = (unint64_t **)result;
  v5 = *(unint64_t **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if ((unint64_t)v5 >= v4)
  {
    v8 = result + 24;
    v9 = v5 - *v3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)*v3;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = v3 + 3;
    if (v12)
      v13 = TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v8, v12);
    else
      v13 = 0;
    v21 = v13;
    v22.i64[0] = (uint64_t)&v13[v9];
    v22.i64[1] = v22.i64[0];
    v23 = &v13[v12];
    do
      v14 = __ldaxr(a2);
    while (__stlxr(0, a2));
    v13[v9] = v14;
    v15 = (unint64_t *)v22.i64[0];
    v7 = v22.i64[1] + 8;
    v22.i64[1] += 8;
    v17 = *v3;
    v16 = v3[1];
    if (v16 == *v3)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        --v15;
        --v16;
        do
          v18 = __ldaxr(v16);
        while (__stlxr(0, v16));
        *v15 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)v3;
      v7 = v22.i64[1];
    }
    *v3 = v15;
    v3[1] = (unint64_t *)v7;
    v22 = v19;
    v20 = v3[2];
    v3[2] = v23;
    v23 = v20;
    v21 = (_QWORD *)v19.i64[0];
    result = std::__split_buffer<TCFRef<__CFData *>,TInlineBufferAllocator<TCFRef<__CFData *>,30ul> &>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    do
      v6 = __ldaxr(a2);
    while (__stlxr(0, a2));
    *v5 = v6;
    v7 = (uint64_t)(v5 + 1);
  }
  v3[1] = (unint64_t *)v7;
  return result;
}

void `anonymous namespace'::MorxSwashSubtableBuilder::CreateSubtableData(_anonymous_namespace_::MorxSwashSubtableBuilder *this, uint64_t a2)
{
  unint64_t *v4;
  const __CFData *v5;
  int Length;
  _anonymous_namespace_ *v7;
  const __CFData *v8;
  const __CFData *v9;
  unint64_t v10;
  id v11;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = (unint64_t *)(a2 + 16);
  v5 = (const __CFData *)atomic_load((unint64_t *)(a2 + 16));
  Length = CFDataGetLength(v5);
  v7 = (_anonymous_namespace_ *)atomic_load((unint64_t *)&v11);
  v8 = (const __CFData *)atomic_load(v4);
  do
    v10 = __ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));
  *(_QWORD *)this = v10;

}

_QWORD *AddPrevLigaturesFromSingleSubstitutionLookupTable(uint64_t a1, CFDataRef theData)
{
  const SFNTLookupTable *BytePtr;
  const UInt8 *v5;
  SFNTLookupTable *v6;
  __int128 v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (theData)
  {
    BytePtr = (const SFNTLookupTable *)CFDataGetBytePtr(theData);
    v5 = CFDataGetBytePtr(theData);
    if (v5)
    {
      v6 = (SFNTLookupTable *)&v5[CFDataGetLength(theData)];
      goto LABEL_6;
    }
  }
  else
  {
    BytePtr = 0;
  }
  v6 = 0;
LABEL_6:
  v14 = 0xAAAAAAAAAAAAFFFFLL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v7;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = TAATLookupTable::BadTable;
  v10[1] = 0;
  v13 = 0;
  TAATLookupTable::SetTable((uint64_t)v10, BytePtr, v6);
  v15[0] = &off_1E15DFB00;
  v15[1] = a1;
  v16 = v15;
  TAATLookupTable::Iterate((uint64_t)v10, (uint64_t)v15);
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void `anonymous namespace'::MorxInsertionSubtableBuilder::~MorxInsertionSubtableBuilder(_anonymous_namespace_::MorxInsertionSubtableBuilder *this)
{
  void **v2;

  *(_QWORD *)this = off_1E15DEC50;
  v2 = (void **)((char *)this + 408);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E15DEC50;
  v3 = (void **)((char *)this + 408);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
  MEMORY[0x186DC03AC](v2, 0x10F1C40126EF00FLL);
}

uint64_t std::vector<`anonymous namespace'::LigInput,TInlineBufferAllocator<`anonymous namespace'::LigInput,30ul>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  _QWORD *v28;

  v5 = a1[1];
  v4 = a1[2];
  if (v5 >= v4)
  {
    v8 = (uint64_t)(a1 + 3);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v28 = a1 + 3;
    if (v12)
    {
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = (uint64_t)&v13[48 * v9];
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>(v16, *(_BYTE **)a2, *(_BYTE **)(a2 + 8));
    *(_WORD *)(v16 + 40) = *(_WORD *)(a2 + 40);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v23 = vdupq_n_s64(v17);
      v19 = v16;
    }
    else
    {
      v19 = v16;
      do
      {
        v20 = v19;
        v21 = *(_BYTE **)(v17 - 48);
        v22 = *(_BYTE **)(v17 - 40);
        v17 -= 48;
        v19 = std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>(v19 - 48, v21, v22);
        *(_WORD *)(v20 - 8) = *(_WORD *)(v17 + 40);
      }
      while (v17 != v18);
      v23 = *(int64x2_t *)a1;
    }
    v7 = v16 + 48;
    *a1 = v19;
    a1[1] = v16 + 48;
    v26 = v23;
    v24 = a1[2];
    a1[2] = (uint64_t)&v13[48 * v15];
    v27 = v24;
    v25 = v23.i64[0];
  }
  else
  {
    result = std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>(a1[1], *(_BYTE **)a2, *(_BYTE **)(a2 + 8));
    *(_WORD *)(v5 + 40) = *(_WORD *)(a2 + 40);
    v7 = v5 + 48;
  }
  a1[1] = v7;
  return result;
}

uint64_t LigInputsForLigatureSubst(uint64_t a1, OTL::LookupWithCoverage *this, char *a3, _QWORD *a4, unsigned __int16 ***a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int16 **v17;
  unsigned __int16 **v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned __int16 **v24;
  unsigned __int16 *i;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned __int16 **v33;
  unsigned __int16 **v34;
  char *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int16 **v46;
  unsigned __int16 **v47;
  unint64_t v48;
  uint64_t v49;
  void *__p;
  void *__dst;
  uint64_t v53;
  void *v54[5];
  OTL::LookupWithCoverage *v55;
  char *v56;
  uint64_t v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v56 = a3;
  v57 = a1;
  v55 = this;
  v5 = (char *)this + 6;
  if ((char *)this + 6 > a3)
    return 0;
  v6 = bswap32(*((unsigned __int16 *)this + 2)) >> 16;
  v7 = (unint64_t)&v5[2 * v6];
  v8 = (char *)this + 8 <= a3 ? (unint64_t)(a3 - v5) >> 1 : 0;
  v9 = v7 <= (unint64_t)a3 && v7 >= (unint64_t)v5;
  if (!v9 && v8 != v6)
    return 0;
  OTL::LookupWithCoverage::GetCoverage(this, (unint64_t)a3, (uint64_t)v54);
  v13 = operator new(0x28uLL);
  *v13 = &off_1E15DF950;
  v13[1] = &v55;
  v13[2] = &v56;
  v13[3] = &v57;
  v13[4] = a5;
  v59 = v13;
  v14 = OTL::Coverage::Iterate((unsigned __int16 **)v54, (uint64_t)v58);
  v15 = v59;
  if (v59 == v58)
  {
    v16 = 4;
    v15 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_18;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_18:
  if (!v14)
    return 0;
  if (*a4 != a4[1])
  {
    memset(v54, 170, 24);
    std::vector<unsigned short>::vector(v54, (uint64_t)a4);
    v18 = *a5;
    v17 = a5[1];
    __dst = 0;
    v53 = 0;
    __p = 0;
    v19 = v54[0];
    v20 = (char *)v54[1] - (char *)v54[0];
    if (v54[1] == v54[0])
    {
      v22 = 0;
    }
    else
    {
      std::vector<unsigned short>::__vallocate[abi:nn180100](&__p, v20 >> 1);
      v21 = (char *)__dst;
      memmove(__dst, v19, v20);
      v22 = &v21[v20];
      __dst = &v21[v20];
    }
    if (v18 != v17)
    {
      v24 = v17;
LABEL_26:
      for (i = *v18; ; ++i)
      {
        if (i == v18[1])
        {
          v18 += 6;
          if (v18 != v17)
            goto LABEL_26;
          goto LABEL_57;
        }
        if (v22 != __p)
        {
          v26 = *i;
          v27 = (char *)__p;
          v28 = (v22 - (_BYTE *)__p) >> 1;
          do
          {
            v29 = v28 >> 1;
            v30 = (unsigned __int16 *)&v27[2 * (v28 >> 1)];
            v32 = *v30;
            v31 = v30 + 1;
            v28 += ~(v28 >> 1);
            if (v32 < v26)
              v27 = (char *)v31;
            else
              v28 = v29;
          }
          while (v28);
          if (v27 != v22 && v26 >= *(unsigned __int16 *)v27)
            break;
        }
      }
      if (v18 == v17)
        goto LABEL_57;
      v33 = v18 + 6;
      if (v18 + 6 != v17)
      {
        v24 = v18;
        do
        {
          v34 = v33;
          v35 = (char *)v18[6];
          v36 = (uint64_t)v18[7];
          if (v35 == (char *)v36)
          {
LABEL_53:
            std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v24, v35, v36, (v36 - (uint64_t)v35) >> 1);
            *((_WORD *)v24 + 20) = *((_WORD *)v18 + 44);
            v24 += 6;
          }
          else
          {
            v37 = v18[6];
            while (1)
            {
              if (__dst != __p)
              {
                v38 = *v37;
                v39 = (unsigned __int16 *)__p;
                v40 = ((_BYTE *)__dst - (_BYTE *)__p) >> 1;
                do
                {
                  v41 = v40 >> 1;
                  v42 = &v39[v40 >> 1];
                  v44 = *v42;
                  v43 = v42 + 1;
                  v40 += ~(v40 >> 1);
                  if (v44 < v38)
                    v39 = v43;
                  else
                    v40 = v41;
                }
                while (v40);
                if (v39 != __dst && v38 >= *v39)
                  break;
              }
              if (++v37 == (unsigned __int16 *)v36)
                goto LABEL_53;
            }
          }
          v33 = v34 + 6;
          v18 = v34;
        }
        while (v34 + 6 != v17);
        goto LABEL_57;
      }
    }
    v24 = v18;
LABEL_57:
    v45 = (uint64_t)a5[1];
    if (v24 != (unsigned __int16 **)v45)
    {
      while ((unsigned __int16 **)v45 != v24)
      {
        v45 -= 48;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v45);
      }
      a5[1] = v24;
    }
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
    if (v54[0])
    {
      v54[1] = v54[0];
      operator delete(v54[0]);
    }
  }
  v46 = *a5;
  v47 = a5[1];
  v48 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)*a5) >> 4));
  if (v47 == *a5)
    v49 = 0;
  else
    v49 = v48;
  v23 = 1;
  return v23;
}

void std::vector<std::__wrap_iter<`anonymous namespace'::LigInput *>,TInlineBufferAllocator<std::__wrap_iter<`anonymous namespace'::LigInput *>,30ul>>::push_back[abi:nn180100](char **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char **v20;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (char *)(a1 + 3);
    v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = a1[33];
      v13 = (unint64_t)&v12[8 * v11];
      if (v13 <= (unint64_t)(a1 + 33))
      {
        a1[33] = (char *)v13;
      }
      else
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v12 = (char *)operator new(8 * v11);
      }
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[8 * v8];
    v15 = &v12[8 * v11];
    *(_QWORD *)v14 = *a2;
    v6 = v14 + 8;
    v17 = *a1;
    v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *a1;
    }
    *a1 = v14;
    a1[1] = v6;
    v19 = a1[2];
    a1[2] = v15;
    if (v16)
    {
      v20 = a1 + 33;
      if (v7 <= v16 && v20 > (char **)v16)
      {
        if (v19 == *v20)
          *v20 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v6 = v5 + 8;
  }
  a1[1] = v6;
}

uint64_t `anonymous namespace'::MorxLigatureSubtableBuilder::FromLigInputs()
{
  uint64_t v0;
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __CFData *v12;
  __CFData *v13;
  UInt8 *MutableBytePtr;
  unsigned __int16 **v15;
  unsigned __int16 **v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned __int16 **v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 v26;
  unsigned __int16 *v27;
  unsigned __int16 v28;
  unsigned int v29;
  BOOL v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  unsigned __int16 **v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int16 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  const void *v69;
  uint64_t v70;
  __int16 v71;
  __int16 v72;
  char **v73;
  char **v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char **v81;
  char *v82;
  uint64_t v83;
  char **v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v100;
  char **v101;
  char *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  __int16 v116;
  char *v117;
  uint64_t v118;
  char *v119;
  _BYTE *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  int v128;
  char *v129;
  char *v130;
  char *v131;
  unsigned int v132;
  char *v133;
  unsigned __int16 *v134;
  int v135;
  id v136;
  __int128 v137;
  uint64_t v138;
  _WORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  _WORD *v157;
  uint64_t v158;
  unsigned __int16 *v159;
  char *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char **v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  __int16 ActionIndex;
  _WORD *v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  __int16 v194;
  unsigned __int16 *v195;
  unsigned __int16 *v196;
  __int16 v197;
  uint64_t v198;
  char v199;
  char v200;
  _WORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  char *v206;
  __int16 v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  int v212;
  __int16 v214;
  uint64_t v215;
  char v216;
  char v217;
  BOOL v218;
  uint64_t v219;
  uint64_t v220;
  _WORD *v221;
  uint64_t v222;
  char *v223;
  __int16 v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unsigned __int16 v237;
  unsigned int ActionLookupIndex;
  int v239;
  __int16 v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  unsigned __int16 *v248;
  unsigned __int16 *v249;
  char *v250;
  unsigned __int16 *v251;
  unsigned __int16 *v252;
  char *v253;
  const void *v254;
  size_t v255;
  int v256;
  unsigned int v257;
  int v258;
  __int128 v259;
  unsigned __int16 *v260;
  unint64_t v261;
  unsigned __int16 *v262;
  unint64_t v263;
  unint64_t v264;
  unsigned __int16 *v265;
  unsigned __int16 *v266;
  unsigned int v267;
  unint64_t v268;
  unsigned __int16 *v269;
  unsigned __int16 *v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int *v274;
  int *v275;
  _DWORD *v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  unsigned int *v281;
  int v282;
  uint64_t v283;
  char *v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  unsigned int *v293;
  unsigned int *v294;
  int v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  unsigned __int16 *v299;
  unsigned __int16 *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  int v308;
  _DWORD *v309;
  unint64_t v310;
  _DWORD *v311;
  int v312;
  _DWORD *v313;
  unint64_t v314;
  _DWORD *v315;
  _DWORD *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  _DWORD *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char *v327;
  char *v328;
  _DWORD *v329;
  char *v330;
  int v331;
  uint64_t v332;
  __int16 v333;
  char *v334;
  unint64_t v335;
  _WORD *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  __int16 v347;
  uint64_t v348;
  char *v349;
  _DWORD *v350;
  char *v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  char *v358;
  unint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  __int16 v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  unsigned __int16 *v376;
  _WORD *v377;
  unsigned int v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  __int16 v390;
  char *v391;
  uint64_t v392;
  __int16 v393;
  unint64_t *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  __CFData *v398;
  UInt8 *v399;
  void *v400;
  const __CFData *v401;
  const __CFData *v402;
  const SFNTLookupTable *BytePtr;
  void *v404;
  id v405;
  const __CFData *v406;
  const __CFData *v407;
  const UInt8 *v408;
  SFNTLookupTable *v409;
  _QWORD *v410;
  __int128 *v411;
  uint64_t v412;
  uint64_t v413;
  __CFData *v414;
  _BYTE *v415;
  _BYTE *v416;
  _QWORD *v417;
  _BYTE *v418;
  char **v420;
  char **v421;
  _BYTE *v422;
  int64_t v425;
  unsigned int v426;
  BOOL v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t *v430;
  unsigned __int16 **v431;
  unsigned __int16 **v432;
  uint64_t v433;
  char **v434;
  void *v435;
  int v436[2];
  uint64_t v437;
  unsigned __int16 **v438;
  uint64_t v439;
  BOOL v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  int v444;
  unsigned __int16 *v445;
  uint64_t __src;
  unsigned int *__srcb;
  unsigned int *__srcc;
  unsigned __int16 *__srca;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  unint64_t v458;
  uint64_t v459;
  id v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  __CFData *i;
  char *v466;
  uint64_t v467;
  int v468;
  char **v469;
  unint64_t v470;
  uint64_t v471;
  char **v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  char *v476;
  char *v477;
  char *v478;
  char *v479;
  unint64_t v480;
  unint64_t *v481;
  void *__p;
  _BYTE *v483;
  uint64_t v484;
  _QWORD v485[212];
  id v486;
  char **v487;
  unint64_t v488;
  _BYTE v489[52800];
  char *v490;
  __int128 v491;
  __int128 v492;
  _QWORD v493[2];
  unint64_t v494;
  __int128 v495;
  _OWORD v496[109];
  uint64_t v497;

  v0 = MEMORY[0x1E0C80A78]();
  v431 = v1;
  v432 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v497 = *MEMORY[0x1E0C80C00];
  v425 = v8;
  v12 = NewLKTHandle(v8, 1);
  v13 = (__CFData *)atomic_load((unint64_t *)(v9 + 16));
  MutableBytePtr = CFDataGetMutableBytePtr(v13);
  v430 = v6;
  v15 = (unsigned __int16 **)*v6;
  v16 = (unsigned __int16 **)v6[1];
  v17 = 4;
  while (v15 != v16)
  {
    v18 = *v15;
    v19 = v15[1];
    while (v18 != v19)
    {
      v20 = *v18++;
      LKTAddRange(v12, v20, v20, v17++);
    }
    v15 += 3;
  }
  v21 = v431;
  for (i = v12; v21 != v4; v21 += 6)
  {
    v22 = *v21;
    v23 = v21[1];
    v24 = (uint64_t)(*v21 + 1);
    if (*v21 != v23 && v24 != (_QWORD)v23)
    {
      v26 = *v22;
      v27 = *v21 + 1;
      do
      {
        v29 = *v27++;
        v28 = v29;
        v30 = v26 >= v29;
        if (v26 <= v29)
          v26 = v28;
        if (!v30)
          v22 = (unsigned __int16 *)v24;
        v24 = (uint64_t)v27;
      }
      while (v27 != v23);
    }
    MutableBytePtr[(unint64_t)*v22 >> 3] |= 1 << (*v22 & 7);
    v31 = *v21;
    v32 = v21[1];
    while (v31 != v32)
    {
      v33 = *v31;
      if ((LKTGetValue(v12, v33) & 0xFF0000) == 0)
      {
        LKTAddRange(i, v33, v33, v17++);
        v12 = i;
      }
      ++v31;
    }
  }
  v34 = *v432;
  v35 = v432[1];
  if (*v432 != v35)
  {
    do
    {
      v36 = *v34++;
      LKTAddRange(v12, v36, v36, v17);
    }
    while (v34 != v35);
    ++v17;
  }
  *(_DWORD *)(v9 + 24) = v17;
  LKTCreateLookupTable(v12, (unint64_t *)&v486);
  v37 = (unint64_t *)(v9 + 32);
  do
    v38 = __ldaxr((unint64_t *)&v486);
  while (__stlxr(0, (unint64_t *)&v486));
  do
    v39 = (void *)__ldaxr(v37);
  while (__stlxr(v38, v37));

  memset(v489, 170, sizeof(v489));
  v488 = 0;
  v486 = 0;
  v487 = 0;
  v490 = v489;
  memset(v485, 170, sizeof(v485));
  __p = 0;
  v483 = 0;
  v484 = 0;
  v485[210] = v485;
  LODWORD(v485[211]) = 0;
  v40 = v431;
  if (v4 == v431)
    goto LABEL_219;
  v41 = 0;
  v42 = 0;
  if ((unint64_t)(((char *)v4 - (char *)v431) / 48) <= 1)
    v43 = 1;
  else
    v43 = ((char *)v4 - (char *)v431) / 48;
  v428 = v43;
  v429 = ((char *)v4 - (char *)v431) / 48;
  while (1)
  {
    v427 = v41;
    v433 = v42;
    v434 = (char **)&v40[6 * v42];
    v44 = (v434[1] - *v434) >> 1;
    v45 = v44 - 1;
    if (v44 != 1)
      break;
LABEL_210:
    v42 = v433 + 1;
    v41 = v433 + 1 >= v429;
    v40 = v431;
    if (v433 + 1 == v428)
    {
      if (v487 != v486)
      {
        v173 = 0;
        if ((unint64_t)(((char *)v487 - (_BYTE *)v486) / 1760) <= 1)
          v174 = 1;
        else
          v174 = ((char *)v487 - (_BYTE *)v486) / 1760;
        do
        {
          v175 = (char *)v486 + 1760 * v173;
          v176 = *((_QWORD *)v175 + 5);
          v177 = *((_QWORD *)v175 + 6);
          while (v176 != v177)
          {
            *(_WORD *)(v176 + 52) = GetActionLookupIndex((char **)&__p, v173, *(__int16 *)(v176 + 50), v176 + 8);
            v176 += 56;
          }
          ++v173;
        }
        while (v173 != v174);
      }
      goto LABEL_219;
    }
  }
  v46 = 0;
  v438 = &v431[6 * v433 + 5];
  while (1)
  {
    v441 = v46;
    v459 = v44;
    v47 = v45;
    v48 = *v434;
    v49 = (uint64_t)v434[1];
    v468 = *(unsigned __int16 *)&(*v434)[2 * v45];
    v50 = (v49 - (uint64_t)*v434) >> 1;
    v479 = 0;
    v480 = 0xAAAAAAAAAAAAAAAALL;
    v477 = 0;
    v478 = 0;
    v481 = &v480;
    v470 = v50;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v477, v48, v49, v50);
    v51 = v47;
    v52 = v477;
    v53 = v478;
    v54 = (v478 - v477) >> 1;
    v454 = v51;
    if (v51 <= v54)
    {
      if (v51 < v54)
      {
        v53 = &v477[2 * v51];
        v478 = v53;
      }
    }
    else
    {
      v55 = v51 - v54;
      if (v51 - v54 <= (v479 - v478) >> 1)
      {
        bzero(v478, 2 * v55);
        v53 += 2 * v55;
        v478 = v53;
      }
      else
      {
        if ((v51 & 0x8000000000000000) != 0)
          goto LABEL_509;
        if (v479 - v477 <= v51)
          v56 = v51;
        else
          v56 = v479 - v477;
        if ((unint64_t)(v479 - v477) >= 0x7FFFFFFFFFFFFFFELL)
          v57 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        *(_QWORD *)&v496[1] = &v480;
        v58 = (char *)TInlineBufferAllocator<unsigned short,3ul>::allocate((uint64_t)&v480, v57);
        v60 = v477;
        v59 = v478;
        bzero(&v58[2 * v54], 2 * v55);
        if (v59 == v60)
        {
          v62 = &v58[2 * v54];
        }
        else
        {
          v61 = v59;
          v62 = &v58[2 * v54];
          do
          {
            v63 = *((_WORD *)v61 - 1);
            v61 -= 2;
            *((_WORD *)v62 - 1) = v63;
            v62 -= 2;
          }
          while (v61 != v60);
        }
        v477 = v62;
        v478 = &v58[2 * v54 + 2 * v55];
        v64 = v479;
        v479 = &v58[2 * v57];
        *(_QWORD *)&v496[0] = v59;
        *((_QWORD *)&v496[0] + 1) = v64;
        *(_QWORD *)&v495 = v60;
        *((_QWORD *)&v495 + 1) = v60;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,3ul> &>::~__split_buffer((uint64_t)&v495);
        v52 = v477;
        v53 = v478;
      }
    }
    v65 = (char *)v486;
    v450 = ((char *)v487 - (_BYTE *)v486) / 1760;
    if (v487 == v486)
    {
      v67 = v53 - v52;
LABEL_66:
      memset((char *)v496 + 8, 170, 0x6C8uLL);
      *(_QWORD *)&v496[0] = 0;
      v495 = 0uLL;
      *(_QWORD *)&v496[1] = (char *)v496 + 8;
      v496[2] = 0uLL;
      *((_QWORD *)&v496[1] + 1) = 0;
      *(_QWORD *)&v496[108] = &v496[3];
      BYTE8(v496[108]) = 0;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v495, v52, (uint64_t)v53, v67 >> 1);
      v493[0] = 0xAAAAAAAAAAAAAAAALL;
      v494 = 0xAAAAAAAAAAAAAAAALL;
      v491 = 0xAAAAAAAAAAAAAAAALL;
      v492 = 0uLL;
      v493[1] = v493;
      LOWORD(v491) = v468;
      v70 = v459;
      if (v459 == v470)
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v491 + 8, v477, (uint64_t)v478, (v478 - v477) >> 1);
        v71 = *(_WORD *)v438;
        v72 = -1;
      }
      else
      {
        v71 = 0;
        v72 = v441;
      }
      LOWORD(v494) = v71;
      WORD1(v494) = v72;
      v73 = v487;
      if ((unint64_t)v487 < v488)
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)v487, (_BYTE *)v495, *((_BYTE **)&v495 + 1));
        *((_BYTE *)v73 + 1752) = BYTE8(v496[108]);
        v74 = v73 + 220;
LABEL_105:
        v487 = v74;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v491 + 8);
        v95 = *((_QWORD *)&v496[1] + 1);
        if (*((_QWORD *)&v496[1] + 1))
        {
          v96 = *(_QWORD *)&v496[2];
          v97 = (_OWORD *)*((_QWORD *)&v496[1] + 1);
          if (*(_QWORD *)&v496[2] != *((_QWORD *)&v496[1] + 1))
          {
            do
            {
              v98 = v96 - 56;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100](v96 - 48);
              v96 = v98;
            }
            while (v98 != v95);
            v97 = (_OWORD *)*((_QWORD *)&v496[1] + 1);
          }
          *(_QWORD *)&v496[2] = v95;
          if (&v496[3] <= v97 && &v496[108] > v97)
          {
            if (*((_QWORD *)&v496[2] + 1) == *(_QWORD *)&v496[108])
              *(_QWORD *)&v496[108] = v97;
          }
          else
          {
            operator delete(v97);
          }
        }
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v495);
        v46 = v450;
        goto LABEL_117;
      }
      v75 = 0x6FB586FB586FB587 * (((char *)v487 - (_BYTE *)v486) >> 5);
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) > 0x253C8253C8253CLL)
        goto LABEL_509;
      if (0xDF6B0DF6B0DF6B0ELL * ((uint64_t)(v488 - (_QWORD)v486) >> 5) > v76)
        v76 = 0xDF6B0DF6B0DF6B0ELL * ((uint64_t)(v488 - (_QWORD)v486) >> 5);
      if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(v488 - (_QWORD)v486) >> 5)) >= 0x129E4129E4129ELL)
        v77 = 0x253C8253C8253CLL;
      else
        v77 = v76;
      if (v77)
      {
        v78 = v490;
        if (&v490[1760 * v77] <= (char *)&v490)
        {
          v490 += 1760 * v77;
        }
        else
        {
          if (v77 > 0x253C8253C8253CLL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v78 = (char *)operator new(1760 * v77);
        }
      }
      else
      {
        v78 = 0;
      }
      v79 = (uint64_t)&v78[1760 * v75];
      v80 = &v78[1760 * v77];
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>(v79, (_BYTE *)v495, *((_BYTE **)&v495 + 1));
      *(_BYTE *)(v79 + 1752) = BYTE8(v496[108]);
      v74 = (char **)(v79 + 1760);
      v81 = v487;
      v82 = (char *)v486;
      if (v487 == v486)
      {
        v486 = (id)v79;
        v487 = (char **)(v79 + 1760);
        v85 = (char *)v488;
        v488 = (unint64_t)v80;
      }
      else
      {
        v83 = 0;
        do
        {
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>(v79 + v83 * 8 - 1760, v81[v83 - 220], v81[v83 - 219]);
          *(_BYTE *)(v79 + v83 * 8 - 8) = v81[v83 - 1];
          v83 -= 220;
        }
        while (&v81[v83] != (char **)v82);
        v81 = (char **)v486;
        v84 = v487;
        v486 = (id)(v79 + v83 * 8);
        v487 = (char **)(v79 + 1760);
        v85 = (char *)v488;
        v488 = (unint64_t)v80;
        if (v84 != v81)
        {
          v70 = v459;
          do
          {
            v84 -= 220;
          }
          while (v84 != v81);
LABEL_99:
          if (v81)
          {
            if (v489 > (_BYTE *)v81 || &v490 <= v81)
            {
              operator delete(v81);
            }
            else if (v85 == v490)
            {
              v490 = (char *)v81;
            }
          }
          goto LABEL_105;
        }
      }
      v70 = v459;
      goto LABEL_99;
    }
    v46 = 0;
    if ((unint64_t)(((char *)v487 - (_BYTE *)v486) / 1760) <= 1)
      v66 = 1;
    else
      v66 = ((char *)v487 - (_BYTE *)v486) / 1760;
    v67 = v53 - v52;
    v68 = (char *)v486 + 8;
    while (1)
    {
      v69 = (const void *)*(v68 - 1);
      if (*v68 - (_QWORD)v69 == v67 && !memcmp(v69, v52, v53 - v52))
        break;
      ++v46;
      v68 += 220;
      if (v66 == v46)
        goto LABEL_66;
    }
    if ((unsigned __int16)v46 == 0xFFFFLL)
      goto LABEL_66;
    v46 = (unsigned __int16)v46;
    v86 = &v65[1760 * (unsigned __int16)v46];
    v88 = (char **)(v86 + 40);
    v87 = *((_QWORD *)v86 + 5);
    v89 = *((_QWORD *)v86 + 6);
    v90 = v89 - v87;
    if (v89 == v87)
      goto LABEL_182;
    v91 = 0;
    v92 = v90 / 56;
    if (v92 <= 1)
      v92 = 1;
    v93 = (unsigned __int16 *)*((_QWORD *)v86 + 5);
    while (1)
    {
      v94 = *v93;
      v93 += 28;
      if (v94 == v468)
        break;
      if (v92 == ++v91)
        goto LABEL_182;
    }
    if ((unsigned __int16)v91 == 0xFFFFLL)
    {
LABEL_182:
      *(_QWORD *)&v496[1] = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v496[2] = 0xAAAAAAAAAAAAAAAALL;
      v495 = 0xAAAAAAAAAAAAAAAALL;
      v496[0] = 0uLL;
      *((_QWORD *)&v496[1] + 1) = &v496[1];
      LOWORD(v495) = v468;
      if (v459 == v470)
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v495 + 8, v52, (uint64_t)v53, v67 >> 1);
        v151 = *(_WORD *)v438;
        v152 = -1;
      }
      else
      {
        v151 = 0;
        v152 = v441;
      }
      LOWORD(v496[2]) = v151;
      WORD1(v496[2]) = v152;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v495 + 8);
      v70 = v459;
      goto LABEL_117;
    }
    v153 = v87 + 56 * (unsigned __int16)v91;
    if (*(_QWORD *)(v153 + 8) != *(_QWORD *)(v153 + 16))
    {
      v451 = *((_QWORD *)v86 + 5);
      v426 = (unsigned __int16)v91;
      v154 = v441;
      *(_WORD *)(v87 + 56 * (unsigned __int16)v91 + 50) = v441;
      v493[0] = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v155 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v155 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v492 = v155;
      v491 = v155;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v491, *(_BYTE **)v86, *((_BYTE **)v86 + 1));
      v156 = *((_QWORD *)&v491 + 1);
      if (*((_QWORD *)&v491 + 1) < (unint64_t)v492)
      {
        **((_WORD **)&v491 + 1) = *(_WORD *)v153;
        v157 = (_WORD *)(v156 + 2);
        v70 = v459;
LABEL_209:
        *((_QWORD *)&v491 + 1) = v157;
        DoSubgroupSubstitutions(&v486, (uint64_t)&v65[1760 * v154], (unsigned __int16 **)&v491, *(unsigned __int16 *)(v451 + 56 * v426 + 48));
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v491);
LABEL_117:
        if (v70 != v470)
          goto LABEL_179;
LABEL_118:
        if (v486 == v487)
          goto LABEL_179;
        v471 = v46;
        v100 = 0x6FB586FB586FB587 * (((char *)v487 - (_BYTE *)v486) >> 5);
        v101 = v487 - 220;
        while (2)
        {
          v102 = v478;
          v103 = (v478 - v477) >> 1;
          if (v103 < (v101[1] - *v101) >> 1)
          {
            *(_QWORD *)&v492 = 0;
            *((_QWORD *)&v492 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v491 = 0uLL;
            v493[0] = (char *)&v492 + 8;
            if (v478 == v477)
            {
              v120 = 0;
              v104 = 0;
              v119 = v478;
            }
            else
            {
              v104 = 0;
              v105 = v101[1];
              v106 = &v105[-2 * v103];
              do
              {
                if ((unint64_t)v104 >= (unint64_t)v492)
                {
                  v107 = (char *)v491;
                  v108 = (uint64_t)&v104[-v491];
                  if ((uint64_t)&v104[-v491] <= -3)
                    goto LABEL_509;
                  v109 = v108 >> 1;
                  if ((_QWORD)v492 - (_QWORD)v491 <= (unint64_t)((v108 >> 1) + 1))
                    v110 = v109 + 1;
                  else
                    v110 = v492 - v491;
                  if ((_QWORD)v492 - (_QWORD)v491 >= 0x7FFFFFFFFFFFFFFEuLL)
                    v111 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v111 = v110;
                  *(_QWORD *)&v496[1] = (char *)&v492 + 8;
                  if (v111)
                  {
                    v112 = (char *)TInlineBufferAllocator<unsigned short,3ul>::allocate((uint64_t)&v492 + 8, v111);
                    v104 = (char *)*((_QWORD *)&v491 + 1);
                    v107 = (char *)v491;
                  }
                  else
                  {
                    v112 = 0;
                  }
                  v113 = &v112[2 * v109];
                  *(_WORD *)v113 = *(_WORD *)v106;
                  if (v104 == v107)
                  {
                    v115 = &v112[2 * v109];
                  }
                  else
                  {
                    v114 = v104;
                    v115 = &v112[2 * v109];
                    do
                    {
                      v116 = *((_WORD *)v114 - 1);
                      v114 -= 2;
                      *((_WORD *)v115 - 1) = v116;
                      v115 -= 2;
                    }
                    while (v114 != v107);
                  }
                  v117 = v113 + 2;
                  *(_QWORD *)&v491 = v115;
                  *((_QWORD *)&v491 + 1) = v113 + 2;
                  v118 = v492;
                  *(_QWORD *)&v492 = &v112[2 * v111];
                  *(_QWORD *)&v496[0] = v104;
                  *((_QWORD *)&v496[0] + 1) = v118;
                  *(_QWORD *)&v495 = v107;
                  *((_QWORD *)&v495 + 1) = v107;
                  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,3ul> &>::~__split_buffer((uint64_t)&v495);
                  v104 = v117;
                }
                else
                {
                  *(_WORD *)v104 = *(_WORD *)v106;
                  v104 += 2;
                }
                *((_QWORD *)&v491 + 1) = v104;
                v106 += 2;
              }
              while (v106 != v105);
              v102 = v477;
              v119 = v478;
              v120 = (_BYTE *)v491;
            }
            v121 = v119 - v102;
            if (v119 - v102 == v104 - v120 && !memcmp(v102, v120, v119 - v102))
            {
              v123 = v101[5];
              v122 = v101[6];
              v124 = v122 - v123;
              if (v122 == v123)
                goto LABEL_154;
              v125 = 0;
              v126 = v124 / 56;
              if (v126 <= 1)
                v126 = 1;
              v127 = v101[5];
              while (1)
              {
                v128 = *(unsigned __int16 *)v127;
                v127 += 56;
                if (v128 == v468)
                  break;
                if (v126 == ++v125)
                  goto LABEL_154;
              }
              if ((unsigned __int16)v125 == 0xFFFFLL)
              {
LABEL_154:
                *(_QWORD *)&v496[1] = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v496[2] = 0xAAAAAAAAAAAAAAAALL;
                v495 = 0xAAAAAAAAAAAAAAAALL;
                v496[0] = 0uLL;
                *((_QWORD *)&v496[1] + 1) = &v496[1];
                LOWORD(v495) = v468;
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v495 + 8, v102, (uint64_t)v119, v121 >> 1);
                LOWORD(v496[2]) = *(_WORD *)v438;
                WORD1(v496[2]) = -1;
                v129 = (char *)&v495 + 8;
                goto LABEL_155;
              }
              v130 = &v123[56 * (unsigned __int16)v125];
              if (*((_QWORD *)v130 + 1) == *((_QWORD *)v130 + 2))
              {
                v131 = v102;
                v132 = (unsigned __int16)v125;
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(v130 + 8, v131, (uint64_t)v119, v121 >> 1);
                v133 = &v123[56 * v132];
                *((_WORD *)v133 + 24) = *(_WORD *)v438;
                v134 = (unsigned __int16 *)(v133 + 48);
                v135 = (__int16)v134[1];
                v136 = v486;
                v476 = (char *)0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v474 = v137;
                v475 = v137;
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v474, v477, v478);
                v138 = *((_QWORD *)&v474 + 1);
                if (*((_QWORD *)&v474 + 1) >= (unint64_t)v475)
                {
                  v460 = v136;
                  v140 = v474;
                  v141 = *((_QWORD *)&v474 + 1) - v474;
                  if ((uint64_t)(*((_QWORD *)&v474 + 1) - v474) <= -3)
                    goto LABEL_509;
                  v142 = v141 >> 1;
                  if ((_QWORD)v475 - (_QWORD)v474 <= (unint64_t)((v141 >> 1) + 1))
                    v143 = v142 + 1;
                  else
                    v143 = v475 - v474;
                  if ((_QWORD)v475 - (_QWORD)v474 >= 0x7FFFFFFFFFFFFFFEuLL)
                    v144 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v144 = v143;
                  *(_QWORD *)&v496[1] = (char *)&v475 + 8;
                  if (v144)
                  {
                    v145 = (char *)TInlineBufferAllocator<unsigned short,3ul>::allocate((uint64_t)&v475 + 8, v144);
                    v138 = *((_QWORD *)&v474 + 1);
                    v140 = v474;
                  }
                  else
                  {
                    v145 = 0;
                  }
                  v146 = &v145[2 * v142];
                  *(_WORD *)v146 = *(_WORD *)v130;
                  if (v138 == v140)
                  {
                    v148 = &v145[2 * v142];
                  }
                  else
                  {
                    v147 = v138;
                    v148 = &v145[2 * v142];
                    do
                    {
                      v149 = *(_WORD *)(v147 - 2);
                      v147 -= 2;
                      *((_WORD *)v148 - 1) = v149;
                      v148 -= 2;
                    }
                    while (v147 != v140);
                  }
                  v139 = v146 + 2;
                  *(_QWORD *)&v474 = v148;
                  *((_QWORD *)&v474 + 1) = v146 + 2;
                  v150 = v475;
                  *(_QWORD *)&v475 = &v145[2 * v144];
                  *(_QWORD *)&v496[0] = v138;
                  *((_QWORD *)&v496[0] + 1) = v150;
                  *(_QWORD *)&v495 = v140;
                  *((_QWORD *)&v495 + 1) = v140;
                  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,3ul> &>::~__split_buffer((uint64_t)&v495);
                  v136 = v460;
                }
                else
                {
                  **((_WORD **)&v474 + 1) = *(_WORD *)v130;
                  v139 = (_WORD *)(v138 + 2);
                }
                *((_QWORD *)&v474 + 1) = v139;
                DoSubgroupSubstitutions(&v486, (uint64_t)v136 + 1760 * v135, (unsigned __int16 **)&v474, *v134);
                v129 = (char *)&v474;
LABEL_155:
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v129);
              }
            }
            std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v491);
          }
          v101 -= 220;
          if (!--v100)
          {
            v46 = v471;
            goto LABEL_179;
          }
          continue;
        }
      }
      v162 = v491;
      v163 = *((_QWORD *)&v491 + 1) - v491;
      v70 = v459;
      if ((uint64_t)(*((_QWORD *)&v491 + 1) - v491) > -3)
      {
        v164 = v163 >> 1;
        if ((_QWORD)v492 - (_QWORD)v491 <= (unint64_t)((v163 >> 1) + 1))
          v165 = v164 + 1;
        else
          v165 = v492 - v491;
        if ((_QWORD)v492 - (_QWORD)v491 >= 0x7FFFFFFFFFFFFFFEuLL)
          v166 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v166 = v165;
        *(_QWORD *)&v496[1] = (char *)&v492 + 8;
        if (v166)
        {
          v167 = (char *)TInlineBufferAllocator<unsigned short,3ul>::allocate((uint64_t)&v492 + 8, v166);
          v156 = *((_QWORD *)&v491 + 1);
          v162 = v491;
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[2 * v164];
        *(_WORD *)v168 = *(_WORD *)v153;
        if (v156 == v162)
        {
          v170 = &v167[2 * v164];
          v154 = v441;
        }
        else
        {
          v169 = v156;
          v170 = &v167[2 * v164];
          v154 = v441;
          do
          {
            v171 = *(_WORD *)(v169 - 2);
            v169 -= 2;
            *((_WORD *)v170 - 1) = v171;
            v170 -= 2;
          }
          while (v169 != v162);
        }
        v157 = v168 + 2;
        *(_QWORD *)&v491 = v170;
        *((_QWORD *)&v491 + 1) = v168 + 2;
        v172 = v492;
        *(_QWORD *)&v492 = &v167[2 * v166];
        *(_QWORD *)&v496[0] = v156;
        *((_QWORD *)&v496[0] + 1) = v172;
        *(_QWORD *)&v495 = v162;
        *((_QWORD *)&v495 + 1) = v162;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,3ul> &>::~__split_buffer((uint64_t)&v495);
        goto LABEL_209;
      }
LABEL_509:
      abort();
    }
    if (v459 == v470)
      break;
LABEL_179:
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v477);
    v44 = v454;
    v45 = v454 - 1;
    if (v454 == 1)
      goto LABEL_210;
  }
  v158 = v87 + 56 * (unsigned __int16)v91;
  *(_WORD *)(v158 + 48) = *(_WORD *)v438;
  v159 = (unsigned __int16 *)(v158 + 48);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)(v153 + 8), v52, (uint64_t)v53, v67 >> 1);
  if ((__int16)v159[1] != -1)
  {
    v160 = (char *)v486 + 1760 * v441;
    *(_QWORD *)&v496[1] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v161 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v161 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v496[0] = v161;
    v495 = v161;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v495, *v434, v434[1]);
    DoSubgroupSubstitutions(&v486, (uint64_t)v160, (unsigned __int16 **)&v495, *v159);
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v495);
    goto LABEL_118;
  }
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v477);
  v414 = i;
  if (v427)
  {
LABEL_219:
    v178 = *(unsigned int *)(v9 + 24);
    v179 = (char **)(v9 + 136);
    *(_QWORD *)&v180 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v180 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)((char *)&v496[3] + 8) = v180;
    *(_OWORD *)((char *)&v496[2] + 8) = v180;
    *(_OWORD *)((char *)&v496[1] + 8) = v180;
    *(_OWORD *)((char *)v496 + 8) = v180;
    *(_QWORD *)&v496[0] = 0;
    v495 = 0uLL;
    *((_QWORD *)&v496[4] + 1) = (char *)v496 + 8;
    v472 = (char **)(v9 + 136);
    if ((_DWORD)v178)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&v495, v178);
      v181 = *((_QWORD *)&v495 + 1);
      bzero(*((void **)&v495 + 1), 2 * v178);
      v182 = v181 + 2 * v178;
      v179 = (char **)(v9 + 136);
      *((_QWORD *)&v495 + 1) = v182;
      ActionIndex = GetActionIndex(v472, 0, 0, -1);
      v184 = (_WORD *)v495;
      v185 = v178;
      do
      {
        *v184++ = ActionIndex;
        --v185;
      }
      while (v185);
    }
    else
    {
      GetActionIndex((char **)(v9 + 136), 0, 0, -1);
    }
    v186 = GetActionIndex(v179, 0, 0x4000, -1);
    v187 = *v430;
    v461 = v430[1];
    v452 = (v461 - *v430) / 24;
    v469 = (char **)(v9 + 40);
    if (v461 != *v430)
    {
      v188 = 0;
      v189 = (v461 - *v430) / 24;
      if (v452 <= 1)
        v189 = 1;
      v455 = v189;
      while (1)
      {
        v190 = *v430;
        if (v188)
        {
          v191 = GetActionIndex(v179, (unsigned __int16)(v188 + 1), 0, -1);
          v192 = v495;
          *(_WORD *)(v495 + 4) = v191;
          if (*v432 != v432[1])
            *(_WORD *)(v192 + 2 * (v178 - 1)) = v191;
          v193 = v188;
        }
        else
        {
          v193 = 0;
        }
        v194 = GetActionIndex(v179, (unsigned __int16)(v193 + 2), 0, -1);
        v195 = *(unsigned __int16 **)(v190 + 24 * v188);
        v196 = *(unsigned __int16 **)(v190 + 24 * v188 + 8);
        if (v195 != v196)
          break;
LABEL_237:
        v199 = 1;
        do
        {
          v200 = v199;
          std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>(v495, (_WORD *)(v495 + 2 * v178), v469);
          if (v188)
            break;
          v199 = 0;
        }
        while ((v200 & 1) != 0);
        v179 = (char **)(v9 + 136);
        if ((_DWORD)v178)
        {
          v201 = (_WORD *)v495;
          v202 = v178;
          do
          {
            *v201++ = v186;
            --v202;
          }
          while (v202);
        }
        if (++v188 == v455)
          goto LABEL_244;
      }
      v197 = v194;
      while (1)
      {
        v198 = LKTGetValue(i, *v195);
        if ((v198 & 0xFF0000) == 0)
          break;
        *(_WORD *)(v495 + 2 * (unsigned __int16)v198) = v197;
        if (++v195 == v196)
          goto LABEL_237;
      }
LABEL_486:
      *(_QWORD *)&v491 = &v495;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v491);
      goto LABEL_488;
    }
LABEL_244:
    if (v487 != v486)
    {
      if ((unint64_t)(((char *)v487 - (_BYTE *)v486) / 1760) <= 1)
        v203 = 1;
      else
        v203 = ((char *)v487 - (_BYTE *)v486) / 1760;
      v204 = 1752;
      v205 = v452;
      do
      {
        v206 = (char *)v486;
        if (v461 != v187)
        {
          v207 = GetActionIndex(v179, (unsigned __int16)(v205 + 1), 0, -1);
          v208 = v495;
          *(_WORD *)(v495 + 4) = v207;
          if (*v432 != v432[1])
            *(_WORD *)(v208 + 2 * (v178 - 1)) = v207;
        }
        v209 = &v206[v204];
        v210 = &v206[v204 - 1752];
        v211 = *((_QWORD *)v209 - 218) - *(_QWORD *)v210;
        v212 = *v209;
        if (v211 == 2 && v212 == 0)
        {
          v214 = GetActionIndex(v179, (unsigned __int16)(v205 + 2), 0x8000, -1);
          v215 = LKTGetValue(i, **(unsigned __int16 **)v210);
          if ((v215 & 0xFF0000) == 0)
            goto LABEL_486;
          *(_WORD *)(v495 + 2 * (unsigned __int16)v215) = v214;
          v179 = (char **)(v9 + 136);
        }
        ++v205;
        v204 += 1760;
        --v203;
      }
      while (v203);
    }
    v216 = 1;
    do
    {
      v217 = v216;
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>(v495, (_WORD *)(v495 + 2 * v178), v469);
      if (v461 != v187)
        break;
      v216 = 0;
    }
    while ((v217 & 1) != 0);
    if (v487 == v486)
    {
LABEL_287:
      *(_QWORD *)&v491 = &v495;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v491);
    }
    else
    {
      v218 = 0;
      v219 = 0;
      v442 = v178;
      __src = v178 - 1;
      if ((unint64_t)(((char *)v487 - (_BYTE *)v486) / 1760) <= 1)
        v220 = 1;
      else
        v220 = ((char *)v487 - (_BYTE *)v486) / 1760;
      v456 = v220;
      v462 = ((char *)v487 - (_BYTE *)v486) / 1760;
      while (1)
      {
        if ((_DWORD)v178)
        {
          v221 = (_WORD *)v495;
          v222 = v178;
          do
          {
            *v221++ = v186;
            --v222;
          }
          while (v222);
        }
        v223 = (char *)v486;
        v224 = GetActionIndex(v179, (unsigned __int16)(v219 + v452 + 2), 0, -1);
        v225 = v495;
        *(_WORD *)(v495 + 4) = v224;
        if (*v432 != v432[1])
          *(_WORD *)(v225 + 2 * __src) = v224;
        v226 = &v223[1760 * v219];
        v227 = *((_QWORD *)v226 + 5);
        v228 = *((_QWORD *)v226 + 6);
        v229 = (uint64_t *)(v226 + 40);
        v230 = v228 - v227;
        if (v230)
          break;
LABEL_286:
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,std::back_insert_iterator<TInlineVector<unsigned short,30ul>>,0>(v225, (_WORD *)(v225 + 2 * v178), v469);
        v218 = ++v219 >= v462;
        if (v219 == v456)
          goto LABEL_287;
      }
      v440 = v218;
      v231 = 0;
      v232 = v230 / 56;
      if (v232 <= 1)
        v233 = 1;
      else
        v233 = v232;
      while (1)
      {
        v234 = *v229;
        v235 = *v229 + v231;
        v236 = *(__int16 *)(v235 + 50);
        v237 = v236 == -1 ? 0 : v452 + 2 + v236;
        ActionLookupIndex = GetActionLookupIndex((char **)&__p, v219, v236, v235 + 8);
        v239 = *((__int16 *)__p + 28 * ActionLookupIndex + 24) == -1
             ? -1
             : *((unsigned __int16 *)__p + 28 * ActionLookupIndex + 25);
        v240 = GetActionIndex(v472, v237, 0x8000, v239);
        v241 = LKTGetValue(i, *(unsigned __int16 *)(v234 + v231));
        if ((v241 & 0xFF0000) == 0)
          break;
        v242 = (unsigned __int16)v241;
        v225 = v495;
        *(_WORD *)(v495 + 2 * v242) = v240;
        v231 += 56;
        if (!--v233)
        {
          v178 = v442;
          v179 = (char **)(v9 + 136);
          goto LABEL_286;
        }
      }
      *(_QWORD *)&v491 = &v495;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v491);
      if (!v440)
      {
LABEL_488:
        v414 = i;
        goto LABEL_489;
      }
    }
    DisposeLKTHandle(i);
    if (LOWORD(v485[211]))
    {
      v243 = 0;
      v435 = __p;
      *(_QWORD *)v436 = v483;
      v453 = v9 + 376;
      v473 = v9 + 528;
      if ((unint64_t)((v483 - (_BYTE *)__p) / 56) <= 1)
        v244 = 1;
      else
        v244 = (v483 - (_BYTE *)__p) / 56;
      v439 = v244;
      while (1)
      {
        *(_QWORD *)&v475 = 0;
        *((_QWORD *)&v475 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v474 = 0uLL;
        v476 = (char *)&v475 + 8;
        *((_QWORD *)&v496[7] + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v245 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v245 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&v496[5] + 8) = v245;
        *(_OWORD *)((char *)&v496[6] + 8) = v245;
        *(_OWORD *)((char *)&v496[3] + 8) = v245;
        *(_OWORD *)((char *)&v496[4] + 8) = v245;
        *(_OWORD *)((char *)&v496[1] + 8) = v245;
        *(_OWORD *)((char *)&v496[2] + 8) = v245;
        *(_OWORD *)((char *)v496 + 8) = v245;
        *(_QWORD *)&v496[0] = 0;
        v495 = 0uLL;
        *(_QWORD *)&v496[8] = (char *)v496 + 8;
        v437 = v243;
        if (*(void **)v436 != v435)
          break;
        v301 = 0;
        v302 = 0;
        v300 = 0;
        v299 = 0;
LABEL_355:
        v303 = 0;
        v445 = v300;
        __srca = v299;
        v304 = ((char *)v299 - (char *)v300) >> 2;
        v305 = (uint64_t)(*(_QWORD *)(v9 + 512) - *(_QWORD *)(v9 + 504)) >> 1;
        v464 = *(_QWORD *)(v9 + 608) - *(_QWORD *)(v9 + 600);
        v467 = *v300;
        v306 = (v302 - v301) >> 1;
        v458 = v304 - 1;
        if (v304 <= 1)
          v307 = 1;
        else
          v307 = v304;
        do
        {
          if (v303)
          {
            v305 = (uint64_t)(*(_QWORD *)(v9 + 512) - *(_QWORD *)(v9 + 504)) >> 1;
            if (v306 == v303)
              v308 = (v305 - *(unsigned __int16 *)(v301 + 2 * (v306 - v303))) & 0x3FFFFFFF | 0x80000000;
            else
              v308 = (v305 - *(unsigned __int16 *)(v301 + 2 * (v306 - v303))) & 0x3FFFFFFF;
            v309 = *(_DWORD **)(v9 + 360);
            v310 = *(_QWORD *)(v9 + 368);
            if ((unint64_t)v309 >= v310)
            {
              v316 = *(_DWORD **)(v9 + 352);
              v317 = v309 - v316;
              v318 = v317 + 1;
              if ((unint64_t)(v317 + 1) >> 62)
                goto LABEL_509;
              v319 = v310 - (_QWORD)v316;
              if (v319 >> 1 > v318)
                v318 = v319 >> 1;
              if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFFCLL)
                v320 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v320 = v318;
              v493[0] = v9 + 376;
              if (v320)
              {
                v321 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate(v453, v320);
                v316 = *(_DWORD **)(v9 + 352);
                v309 = *(_DWORD **)(v9 + 360);
              }
              else
              {
                v321 = 0;
              }
              v328 = &v321[4 * v317];
              *(_DWORD *)v328 = v308;
              if (v309 == v316)
              {
                v330 = &v321[4 * v317];
              }
              else
              {
                v329 = v309;
                v330 = &v321[4 * v317];
                do
                {
                  v331 = *--v329;
                  *((_DWORD *)v330 - 1) = v331;
                  v330 -= 4;
                }
                while (v329 != v316);
              }
              v311 = v328 + 4;
              *(_QWORD *)(v9 + 352) = v330;
              *(_QWORD *)(v9 + 360) = v328 + 4;
              v332 = *(_QWORD *)(v9 + 368);
              *(_QWORD *)(v9 + 368) = &v321[4 * v320];
              *(_QWORD *)&v492 = v309;
              *((_QWORD *)&v492 + 1) = v332;
              *(_QWORD *)&v491 = v316;
              *((_QWORD *)&v491 + 1) = v316;
              std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v491);
            }
            else
            {
              *v309 = v308;
              v311 = v309 + 1;
            }
            *(_QWORD *)(v9 + 360) = v311;
            if (v306 == v303)
              v333 = v464 >> 1;
            else
              v333 = 0;
            v334 = *(char **)(v9 + 512);
            v335 = *(_QWORD *)(v9 + 520);
            if ((unint64_t)v334 >= v335)
            {
              v337 = *(char **)(v9 + 504);
              v338 = v334 - v337;
              if (v334 - v337 <= -3)
                goto LABEL_509;
              v339 = v338 >> 1;
              v340 = v335 - (_QWORD)v337;
              if (v340 <= (v338 >> 1) + 1)
                v341 = v339 + 1;
              else
                v341 = v340;
              if (v340 >= 0x7FFFFFFFFFFFFFFELL)
                v342 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              v493[0] = v9 + 528;
              if (v342)
              {
                v343 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v473, v342);
                v337 = *(char **)(v9 + 504);
                v334 = *(char **)(v9 + 512);
              }
              else
              {
                v343 = 0;
              }
              v344 = &v343[2 * v339];
              *(_WORD *)v344 = v333;
              if (v334 == v337)
              {
                v346 = &v343[2 * v339];
              }
              else
              {
                v345 = v334;
                v346 = &v343[2 * v339];
                do
                {
                  v347 = *((_WORD *)v345 - 1);
                  v345 -= 2;
                  *((_WORD *)v346 - 1) = v347;
                  v346 -= 2;
                }
                while (v345 != v337);
              }
              v336 = v344 + 2;
              *(_QWORD *)(v9 + 504) = v346;
              *(_QWORD *)(v9 + 512) = v344 + 2;
              v348 = *(_QWORD *)(v9 + 520);
              *(_QWORD *)(v9 + 520) = &v343[2 * v342];
              *(_QWORD *)&v492 = v334;
              *((_QWORD *)&v492 + 1) = v348;
              *(_QWORD *)&v491 = v337;
              *((_QWORD *)&v491 + 1) = v337;
              std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v491);
            }
            else
            {
              *(_WORD *)v334 = v333;
              v336 = v334 + 2;
            }
            *(_QWORD *)(v9 + 512) = v336;
          }
          else
          {
            v312 = (v305 - v467) & 0x3FFFFFFF;
            v313 = *(_DWORD **)(v9 + 360);
            v314 = *(_QWORD *)(v9 + 368);
            if ((unint64_t)v313 >= v314)
            {
              v322 = *(_DWORD **)(v9 + 352);
              v323 = v313 - v322;
              v324 = v323 + 1;
              if ((unint64_t)(v323 + 1) >> 62)
                goto LABEL_509;
              v325 = v314 - (_QWORD)v322;
              if (v325 >> 1 > v324)
                v324 = v325 >> 1;
              if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFFCLL)
                v326 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v326 = v324;
              v493[0] = v9 + 376;
              if (v326)
              {
                v327 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate(v453, v326);
                v322 = *(_DWORD **)(v9 + 352);
                v313 = *(_DWORD **)(v9 + 360);
              }
              else
              {
                v327 = 0;
              }
              v349 = &v327[4 * v323];
              *(_DWORD *)v349 = v312;
              if (v313 == v322)
              {
                v351 = &v327[4 * v323];
              }
              else
              {
                v350 = v313;
                v351 = &v327[4 * v323];
                do
                {
                  v352 = *--v350;
                  *((_DWORD *)v351 - 1) = v352;
                  v351 -= 4;
                }
                while (v350 != v322);
              }
              v315 = v349 + 4;
              *(_QWORD *)(v9 + 352) = v351;
              *(_QWORD *)(v9 + 360) = v349 + 4;
              v353 = *(_QWORD *)(v9 + 368);
              *(_QWORD *)(v9 + 368) = &v327[4 * v326];
              *(_QWORD *)&v492 = v313;
              *((_QWORD *)&v492 + 1) = v353;
              *(_QWORD *)&v491 = v322;
              *((_QWORD *)&v491 + 1) = v322;
              std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v491);
            }
            else
            {
              *v313 = v312;
              v315 = v313 + 1;
            }
            *(_QWORD *)(v9 + 360) = v315;
            v355 = *(_QWORD *)(v9 + 504);
            v354 = *(_QWORD *)(v9 + 512);
            v356 = *(unsigned __int16 *)(v495 + 4 * v458) - (_DWORD)v467;
            if (v356 >= 0)
            {
              v357 = v356 + 1;
              v358 = *(char **)(v9 + 512);
              do
              {
                v359 = *(_QWORD *)(v9 + 520);
                if ((unint64_t)v358 >= v359)
                {
                  v360 = *(char **)(v9 + 504);
                  v361 = v358 - v360;
                  if (v358 - v360 <= -3)
                    goto LABEL_509;
                  v362 = v361 >> 1;
                  v363 = v359 - (_QWORD)v360;
                  if (v363 <= (v361 >> 1) + 1)
                    v364 = v362 + 1;
                  else
                    v364 = v363;
                  if (v363 >= 0x7FFFFFFFFFFFFFFELL)
                    v365 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v365 = v364;
                  v493[0] = v9 + 528;
                  if (v365)
                  {
                    v366 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v473, v365);
                    v360 = *(char **)(v9 + 504);
                    v358 = *(char **)(v9 + 512);
                  }
                  else
                  {
                    v366 = 0;
                  }
                  v367 = &v366[2 * v362];
                  *(_WORD *)v367 = 0;
                  if (v358 == v360)
                  {
                    v369 = &v366[2 * v362];
                  }
                  else
                  {
                    v368 = v358;
                    v369 = &v366[2 * v362];
                    do
                    {
                      v370 = *((_WORD *)v368 - 1);
                      v368 -= 2;
                      *((_WORD *)v369 - 1) = v370;
                      v369 -= 2;
                    }
                    while (v368 != v360);
                  }
                  v371 = v367 + 2;
                  *(_QWORD *)(v9 + 504) = v369;
                  *(_QWORD *)(v9 + 512) = v367 + 2;
                  v372 = *(_QWORD *)(v9 + 520);
                  *(_QWORD *)(v9 + 520) = &v366[2 * v365];
                  *(_QWORD *)&v492 = v358;
                  *((_QWORD *)&v492 + 1) = v372;
                  *(_QWORD *)&v491 = v360;
                  *((_QWORD *)&v491 + 1) = v360;
                  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v491);
                  v358 = v371;
                }
                else
                {
                  *(_WORD *)v358 = 0;
                  v358 += 2;
                }
                *(_QWORD *)(v9 + 512) = v358;
                v30 = v357-- != 0;
              }
              while (v357 != 0 && v30);
            }
            if (__srca != v445)
            {
              v373 = 0;
              v374 = ((v354 - v355) >> 1) - v467;
              v375 = *(char **)(v9 + 608);
              do
              {
                v376 = (unsigned __int16 *)(v495 + 4 * v373);
                v378 = *v376;
                v377 = v376 + 1;
                *(_WORD *)(*(_QWORD *)(v9 + 504) + 2 * (v374 + v378)) = v373;
                v379 = *(_QWORD *)(v9 + 616);
                if ((unint64_t)v375 >= v379)
                {
                  v380 = *(char **)(v9 + 600);
                  v381 = v375 - v380;
                  if (v375 - v380 <= -3)
                    goto LABEL_509;
                  v382 = v381 >> 1;
                  v383 = v379 - (_QWORD)v380;
                  if (v383 <= (v381 >> 1) + 1)
                    v384 = v382 + 1;
                  else
                    v384 = v383;
                  if (v383 >= 0x7FFFFFFFFFFFFFFELL)
                    v385 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v385 = v384;
                  v493[0] = v9 + 624;
                  if (v385)
                  {
                    v386 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v9 + 624, v385);
                    v375 = *(char **)(v9 + 608);
                    v380 = *(char **)(v9 + 600);
                  }
                  else
                  {
                    v386 = 0;
                  }
                  v387 = &v386[2 * v382];
                  *(_WORD *)v387 = *v377;
                  if (v375 == v380)
                  {
                    v389 = &v386[2 * v382];
                  }
                  else
                  {
                    v388 = v375;
                    v389 = &v386[2 * v382];
                    do
                    {
                      v390 = *((_WORD *)v388 - 1);
                      v388 -= 2;
                      *((_WORD *)v389 - 1) = v390;
                      v389 -= 2;
                    }
                    while (v388 != v380);
                  }
                  v391 = v387 + 2;
                  *(_QWORD *)(v9 + 600) = v389;
                  *(_QWORD *)(v9 + 608) = v387 + 2;
                  v392 = *(_QWORD *)(v9 + 616);
                  *(_QWORD *)(v9 + 616) = &v386[2 * v385];
                  *(_QWORD *)&v492 = v375;
                  *((_QWORD *)&v492 + 1) = v392;
                  *(_QWORD *)&v491 = v380;
                  *((_QWORD *)&v491 + 1) = v380;
                  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v491);
                  v375 = v391;
                }
                else
                {
                  *(_WORD *)v375 = *v377;
                  v375 += 2;
                }
                *(_QWORD *)(v9 + 608) = v375;
                ++v373;
              }
              while (v373 != v307);
            }
          }
          ++v303;
          v301 = v474;
          v306 = (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 1;
        }
        while (v303 <= v306);
        v244 = v439;
        if ((_QWORD)v495)
        {
          *((_QWORD *)&v495 + 1) = v495;
          if ((unint64_t)v496 + 8 > (unint64_t)v495
            || (unint64_t)&v496[8] <= (unint64_t)v495)
          {
            operator delete((void *)v495);
          }
        }
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v474);
        v243 = v437 + 1;
        if (v437 + 1 >= (unint64_t)SLOWORD(v485[211]))
          goto LABEL_466;
      }
      v246 = 0;
      v457 = (unsigned __int16)v243;
      while (1)
      {
        v247 = (char *)__p;
        v463 = v246;
        if (v457 == *((__int16 *)__p + 28 * v246 + 24))
        {
          v248 = (unsigned __int16 *)((char *)__p + 56 * v246);
          v249 = v248 + 4;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&v474, *((char **)v248 + 1), *((_QWORD *)v248 + 2), (uint64_t)(*((_QWORD *)v248 + 2) - *((_QWORD *)v248 + 1)) >> 1);
          v250 = (char *)v486 + 1760 * *v248;
          v252 = (unsigned __int16 *)*((_QWORD *)v250 + 5);
          v251 = (unsigned __int16 *)*((_QWORD *)v250 + 6);
          if (v252 != v251)
            break;
        }
LABEL_352:
        v246 = v463 + 1;
        if (v463 + 1 == v244)
        {
          v299 = (unsigned __int16 *)*((_QWORD *)&v495 + 1);
          v300 = (unsigned __int16 *)v495;
          v302 = *((_QWORD *)&v474 + 1);
          v301 = v474;
          goto LABEL_355;
        }
      }
      v253 = &v247[56 * v463 + 2];
      v466 = v253;
      while (1)
      {
        if (v252[25] != *(unsigned __int16 *)v253)
          goto LABEL_351;
        v254 = (const void *)*((_QWORD *)v252 + 1);
        v255 = *((_QWORD *)v252 + 2) - (_QWORD)v254;
        if (v255 != *((_QWORD *)v249 + 1) - *(_QWORD *)v249)
          goto LABEL_351;
        v256 = memcmp(v254, *(const void **)v249, v255);
        v253 = v466;
        if (v256)
          goto LABEL_351;
        v257 = *v252;
        v258 = v252[24];
        v259 = v495;
        if (*((_QWORD *)&v495 + 1) == (_QWORD)v495)
        {
          v272 = v495;
          v260 = (unsigned __int16 *)v495;
        }
        else
        {
          v260 = (unsigned __int16 *)v495;
          v261 = (uint64_t)(*((_QWORD *)&v495 + 1) - v495) >> 2;
          v262 = (unsigned __int16 *)v495;
          v263 = v261;
          do
          {
            v264 = v263 >> 1;
            v265 = &v262[2 * (v263 >> 1)];
            v267 = *v265;
            v266 = v265 + 2;
            v263 += ~(v263 >> 1);
            if (v267 < v257)
              v262 = v266;
            else
              v263 = v264;
          }
          while (v263);
          if (v262 != *((unsigned __int16 **)&v495 + 1) && v257 >= *v262)
            goto LABEL_351;
          do
          {
            v268 = v261 >> 1;
            v269 = &v260[2 * (v261 >> 1)];
            v271 = *v269;
            v270 = v269 + 2;
            v261 += ~(v261 >> 1);
            if (v271 < v257)
              v260 = v270;
            else
              v261 = v268;
          }
          while (v261);
          v272 = *((_QWORD *)&v495 + 1);
        }
        v273 = (uint64_t)v260 - v495;
        v274 = (unsigned int *)(v495 + (((unint64_t)v260 - v495) & 0xFFFFFFFFFFFFFFFCLL));
        if (*((_QWORD *)&v495 + 1) >= *(_QWORD *)&v496[0])
          break;
        if (v274 != *((unsigned int **)&v495 + 1))
        {
          v275 = (int *)(v272 - 4);
          v276 = (_DWORD *)*((_QWORD *)&v495 + 1);
          while ((unint64_t)v275 < *((_QWORD *)&v259 + 1))
          {
            v277 = *v275++;
            *v276++ = v277;
          }
          *((_QWORD *)&v495 + 1) = v276;
          if (*((unsigned int **)&v259 + 1) != v274 + 1)
          {
            v281 = (unsigned int *)(v259 + (((unint64_t)v260 - v259) & 0xFFFFFFFFFFFFFFFCLL));
            v282 = v258;
            memmove((void *)(*((_QWORD *)&v259 + 1) - 4 * ((v272 - (uint64_t)(v274 + 1)) >> 2)), v274, v272 - (_QWORD)(v274 + 1));
            v274 = v281;
            v258 = v282;
          }
          *v274 = v257 | (v258 << 16);
LABEL_350:
          v253 = v466;
          goto LABEL_351;
        }
        **((_DWORD **)&v495 + 1) = v257 | (v258 << 16);
        *((_QWORD *)&v495 + 1) = *((_QWORD *)&v259 + 1) + 4;
LABEL_351:
        v252 += 28;
        if (v252 == v251)
          goto LABEL_352;
      }
      v278 = ((v272 - (uint64_t)v495) >> 2) + 1;
      if (v278 >> 62)
        goto LABEL_509;
      if ((uint64_t)(*(_QWORD *)&v496[0] - v495) >> 1 > v278)
        v278 = (uint64_t)(*(_QWORD *)&v496[0] - v495) >> 1;
      if (*(_QWORD *)&v496[0] - (_QWORD)v495 >= 0x7FFFFFFFFFFFFFFCuLL)
        v279 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v279 = v278;
      v481 = (unint64_t *)v496 + 1;
      if (v279)
      {
        __srcb = (unsigned int *)(v495 + (((unint64_t)v260 - v495) & 0xFFFFFFFFFFFFFFFCLL));
        v443 = v258;
        v280 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)v496 + 8, v279);
        v273 = (uint64_t)v260 - v259;
        v274 = __srcb;
        v258 = v443;
      }
      else
      {
        v280 = 0;
      }
      v283 = v273 >> 2;
      v284 = &v280[4 * (v273 >> 2)];
      v285 = &v280[4 * v279];
      v480 = (unint64_t)v285;
      if (v273 >> 2 == v279)
      {
        if (v273 < 1)
        {
          if (v260 == (unsigned __int16 *)v259)
            v287 = 1;
          else
            v287 = v273 >> 1;
          v288 = v280;
          v493[0] = (char *)v496 + 8;
          __srcc = v274;
          v444 = v258;
          v289 = v285;
          v290 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)v496 + 8, v287);
          *(_QWORD *)&v491 = v288;
          *((_QWORD *)&v491 + 1) = v284;
          v291 = &v290[v287 & 0xFFFFFFFFFFFFFFFCLL];
          v477 = v290;
          v480 = (unint64_t)&v290[4 * v287];
          *(_QWORD *)&v492 = v284;
          *((_QWORD *)&v492 + 1) = v289;
          std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v491);
          v274 = __srcc;
          v258 = v444;
          v284 = v291;
        }
        else
        {
          if (v283 >= -1)
            v286 = v283 + 1;
          else
            v286 = v283 + 2;
          v284 -= 4 * (v286 >> 1);
        }
      }
      *(_DWORD *)v284 = v257 | (v258 << 16);
      v292 = v284 + 4;
      v479 = v284 + 4;
      v293 = (unsigned int *)v495;
      if ((unsigned int *)v495 != v274)
      {
        v294 = v274;
        do
        {
          v295 = *--v294;
          *((_DWORD *)v284 - 1) = v295;
          v284 -= 4;
        }
        while (v294 != v293);
        v292 = v479;
      }
      v478 = v284;
      v296 = *((_QWORD *)&v495 + 1) - (_QWORD)v274;
      if (*((unsigned int **)&v495 + 1) != v274)
      {
        memmove(v292, v274, *((_QWORD *)&v495 + 1) - (_QWORD)v274);
        v284 = v478;
        v274 = (unsigned int *)*((_QWORD *)&v495 + 1);
      }
      v297 = (char *)v495;
      *(_QWORD *)&v495 = v284;
      *((_QWORD *)&v495 + 1) = &v292[v296];
      v298 = *(_QWORD *)&v496[0];
      *(_QWORD *)&v496[0] = v480;
      v479 = (char *)v274;
      v480 = v298;
      v477 = v297;
      v478 = v297;
      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v477);
      v244 = v439;
      goto LABEL_350;
    }
LABEL_466:
    if (*(_DWORD *)(v9 + 24) >= 2u)
    {
      v395 = *(_QWORD *)(v9 + 40);
      v394 = (unint64_t *)(v9 + 32);
      if ((unint64_t)(*(_QWORD *)(v9 + 48) - v395) < 3
        || (v396 = *(unsigned __int16 *)(v395 + 2),
            v397 = *(_QWORD *)(v9 + 136),
            0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 144) - v397) >> 1) <= v396))
      {
        v393 = 0;
      }
      else
      {
        v393 = *(_WORD *)(v397 + 6 * v396);
      }
    }
    else
    {
      v393 = 0;
      v394 = (unint64_t *)(v9 + 32);
    }
    v398 = (__CFData *)atomic_load((unint64_t *)(v9 + 16));
    v399 = CFDataGetMutableBytePtr(v398);
    v400 = (void *)atomic_load((unint64_t *)(v9 + 32));
    v401 = v400;
    v402 = v401;
    if (v401)
      BytePtr = (const SFNTLookupTable *)CFDataGetBytePtr(v401);
    else
      BytePtr = 0;
    v404 = (void *)atomic_load(v394);
    v405 = v404;
    v406 = (const __CFData *)v405;
    if (v406)
    {
      v407 = v406;
      v408 = CFDataGetBytePtr(v406);

      if (v408)
      {
        v409 = (SFNTLookupTable *)&v408[CFDataGetLength((CFDataRef)v405)];
        goto LABEL_480;
      }
    }
    else
    {

    }
    v409 = 0;
LABEL_480:
    *(_QWORD *)&v495 = TAATLookupTable::BadTable;
    *((_QWORD *)&v495 + 1) = 0;
    *((_QWORD *)&v496[1] + 1) = 0;
    LOWORD(v496[2]) = -1;
    TAATLookupTable::SetTable((uint64_t)&v495, BytePtr, v409);
    v410 = operator new(0x28uLL);
    *v410 = &off_1E15DFFC8;
    v410[1] = v9;
    v410[2] = v425;
    v410[3] = v399;
    *((_WORD *)v410 + 16) = v393;
    *((_QWORD *)&v492 + 1) = v410;
    TAATLookupTable::Iterate((uint64_t)&v495, (uint64_t)&v491);
    v411 = (__int128 *)*((_QWORD *)&v492 + 1);
    if (*((__int128 **)&v492 + 1) == &v491)
    {
      v412 = 4;
      v411 = &v491;
    }
    else
    {
      if (!*((_QWORD *)&v492 + 1))
      {
LABEL_485:

        v413 = 1;
        goto LABEL_490;
      }
      v412 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v411 + 8 * v412))();
    goto LABEL_485;
  }
LABEL_489:
  DisposeLKTHandle(v414);
  v413 = 0;
LABEL_490:
  v415 = __p;
  if (__p)
  {
    v416 = v483;
    v417 = __p;
    if (v483 != __p)
    {
      do
      {
        v418 = v416 - 56;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)(v416 - 48));
        v416 = v418;
      }
      while (v418 != v415);
      v417 = __p;
    }
    v483 = v415;
    if (v485 > v417 || &v485[210] <= v417)
      operator delete(v417);
  }
  v420 = (char **)v486;
  if (v486)
  {
    v421 = v487;
    v422 = v486;
    if (v487 != v486)
    {
      do
      {
        v421 -= 220;
      }
      while (v421 != v420);
      v422 = v486;
    }
    v487 = v420;
    if (v489 > v422 || &v490 <= (char **)v422)
      operator delete(v422);
  }
  return v413;
}

