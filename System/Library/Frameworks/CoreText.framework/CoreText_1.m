void TSplicedFontDict::CreateTraitsValuesPerFontInfo(TSplicedFontDict *this@<X0>, double a2@<D0>, uint64_t a3@<D1>, char *a4@<D2>, _BOOL4 a5@<W1>, _BOOL4 a6@<W2>, _BOOL4 a7@<W3>, unint64_t *a8@<X8>)
{
  uint64_t v10;
  int v11;
  const __CFDictionary *v12;
  const __CFDictionary *v14;
  const __CFNumber *Value;
  const __CFDictionary *v16;
  const __CFNumber *v17;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  const __CFDictionary *v23;
  const __CFString *v24;
  unint64_t *v25;
  __CFString v26;
  double valuePtr;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v30 = a5;
  v29 = a6;
  v28 = a7;
  v26.length = a3;
  valuePtr = a2;
  v26.data = a4;
  HIDWORD(v26.info) = 0;
  if (!a6 || !a7)
  {
    TSplicedFontDict::GetTraitsValuesFromMetrics(this, &v30, &v29, &v28, &valuePtr, (double *)&v26.length, (double *)&v26.data, (unsigned int *)&v26.info + 1);
    a5 = v30;
    a6 = v29;
    a7 = v28;
  }
  if (!a5 || !a6 || !a7)
  {
    v25 = a8;
    v10 = 0;
    v31[0] = CFSTR("CTFontFullName");
    v31[1] = CFSTR("CTFontFamilyName");
    v31[2] = CFSTR("CTFontSubFamilyName");
    while (1)
    {
      v11 = FontNameCodeForKey((const __CFString *)v31[v10]);
      v12 = TSplicedFontDict::FindFontName(this, v11, 0);
      if (v12)
      {
        v26.isa = (void *)0xAAAAAAAAAAAAAAAALL;
        CreateTraitsByStyleGlossaryString(&v26, (const __CFString *)v12);
        if (atomic_load((unint64_t *)&v26))
        {
          if (!v30)
          {
            v14 = (const __CFDictionary *)atomic_load((unint64_t *)&v26);
            Value = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("NSCTFontWeightTrait"));
            if (Value)
            {
              CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
              v30 = 1;
            }
          }
          if (!v29)
          {
            v16 = (const __CFDictionary *)atomic_load((unint64_t *)&v26);
            v17 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("NSCTFontProportionTrait"));
            if (v17)
            {
              CFNumberGetValue(v17, kCFNumberDoubleType, &v26.length);
              v29 = 1;
            }
          }
          if (!v28)
          {
            v18 = (const __CFDictionary *)atomic_load((unint64_t *)&v26);
            v19 = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("NSCTFontSlantTrait"));
            if (v19)
            {
              CFNumberGetValue(v19, kCFNumberDoubleType, &v26.data);
              v28 = 1;
            }
          }
        }
        v20 = v30;
        v21 = v29;
        v22 = v28;

        if (v20 && v21 && v22)
          break;
      }

      if (++v10 == 3)
        goto LABEL_25;
    }

LABEL_25:
    a8 = v25;
  }
  v23 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v23)
    v24 = (const __CFString *)CFDictionaryGetValue(v23, CFSTR("NSCTFontUIFontDesignTrait"));
  else
    v24 = 0;
  CreateTraitValues(valuePtr, *(double *)&v26.length, *(double *)&v26.data, v24, v30, v29, v28, SHIDWORD(v26.info), a8);
}

void TSplicedFont::CreateTraitsValuesPerFontInfo(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  _BOOL4 v7;

  *a2 = 1;
  v3 = *(_QWORD *)(a1 + 616);
  if (!v3)
  {
    v7 = 0;
    v4 = 2.0;
    v5 = 2.0;
LABEL_8:
    v6 = 2.0;
    goto LABEL_9;
  }
  v4 = *(double *)(v3 + 32);
  v5 = 2.0;
  if (v4 == 2.0)
  {
    v7 = 0;
    v4 = 0.0;
    goto LABEL_8;
  }
  v6 = 0.0;
  if ((*(_BYTE *)(v3 + 52) & 1) != 0)
    v6 = 0.0694444444;
  v5 = *(_QWORD *)(v3 + 40);
  v7 = 1;
LABEL_9:
  TSplicedFontDict::CreateTraitsValuesPerFontInfo((TSplicedFontDict *)(a1 + 600), v4, v5, *(char **)&v6, v7, v3 != 0, v3 != 0, a3);
}

void TSplicedFont::CopyVariation(TSplicedFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v4;
  const __CFDictionary *v5;
  void *Value;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;

  v4 = (unint64_t *)((char *)this + 600);
  if (TSplicedFontDict::ComponentHasVariations((TSplicedFont *)((char *)this + 600)))
  {
    v5 = (const __CFDictionary *)atomic_load(v4);
    if (v5 && (Value = (void *)CFDictionaryGetValue(v5, CFSTR("variations"))) != 0)
    {
      v10 = Value;
      do
        v7 = __ldaxr((unint64_t *)&v10);
      while (__stlxr(0, (unint64_t *)&v10));
      *a2 = v7;

    }
    else
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
      if ((*(_DWORD *)(v8 + 16) & 0x80000000) == 0)
        TDescriptor::InitBaseFont((TDescriptor *)v8, 0, 0.0);
      v9 = atomic_load((unint64_t *)(v8 + 32));
      (*(void (**)(unint64_t))(*(_QWORD *)v9 + 112))(v9);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void TDescriptorSource::CreateDescriptorForUIType(TDescriptorSource *a1@<X1>, double a2@<D0>, const __CFString *a3@<X2>, unint64_t *a4@<X8>)
{
  unsigned int v7;
  __CFString *v9;
  int v10;
  double *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  id v18;
  int v19;
  __CFString *v20;
  double v21;
  __CFString *v22;
  unint64_t v23;
  double v24;
  _QWORD v25[3];
  _QWORD v26[3];
  const __CFString *v27;
  _QWORD v28[2];

  v7 = a1;
  v28[1] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  if (((_DWORD)a1 == -1 || a1 < 0x145 || ((_DWORD)a1 - 1007) > 0xFFFFFFF8)
    && (v22 = 0,
        v23 = 0xAAAAAAAAFFFFFFFFLL,
        v20 = 0,
        v21 = 0.0,
        (SetDescriptorInfoForUIType((uint64_t)&v20, a1) & 1) != 0))
  {
    v9 = v22;
    if (v22)
    {
      v27 = CFSTR("NSCTFontTextStylePlatformAttribute");
      v28[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v23);
      TDescriptorSource::CreateDescriptorForTextStyle(v9, CFSTR("UICTContentSizeCategoryL"), (unint64_t)a3, (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1), a4);
    }
    else
    {
      if (v7 <= 1)
        v10 = 20;
      else
        v10 = 1028;
      v19 = v10;
      v18 = (id)0xAAAAAAAAAAAAAAAALL;
      if (a2 == 0.0)
        v11 = &v21;
      else
        v11 = &v24;
      TCFBase_NEW<CTFontDescriptor,__CFString const*&,double &,unsigned int &>(&v20, v11, &v19, (unint64_t *)&v17);
      do
        v12 = (void *)__ldaxr((unint64_t *)&v17);
      while (__stlxr(0, (unint64_t *)&v17));
      v18 = v12;

      if (a3)
      {
        if (v24 == 0.0)
          v24 = v21;
        v26[0] = v20;
        v25[0] = CFSTR("NSFontNameAttribute");
        v25[1] = CFSTR("NSFontSizeAttribute");
        v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
        v25[2] = CFSTR("CTFontDescriptorLanguageAttribute");
        v26[1] = v13;
        v26[2] = a3;
        v17 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
        TCFBase_NEW<CTFontDescriptor,__CFDictionary const*&,unsigned int &>(&v17, &v19, (unint64_t *)&v16);
        do
          v14 = __ldaxr((unint64_t *)&v16);
        while (__stlxr(0, (unint64_t *)&v16));
        *a4 = v14;

      }
      else
      {
        do
          v15 = __ldaxr((unint64_t *)&v18);
        while (__stlxr(0, (unint64_t *)&v18));
        *a4 = v15;
      }

    }
  }
  else
  {
    *a4 = 0;
  }
}

void TDescriptor::TDescriptor(TDescriptor *this, __CFString *a2, double a3, int a4)
{
  unint64_t *v6;
  __CFDictionary *v7;
  const __CFString *v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  const void *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id Mutable;

  *(_QWORD *)this = &off_1E15DCAF0;
  *((_QWORD *)this + 1) = 0;
  v6 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = a4 & 0x7FFFFFFF;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
  {
    v7 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionarySetValue(v7, CFSTR("NSFontNameAttribute"), a2);
    v10 = TDescriptorSource::TextStyleForUIFontName((TDescriptorSource *)a2, v8, v9);
    if (v10)
    {
      v11 = (const void *)v10;
      v12 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionarySetValue(v12, CFSTR("NSCTFontUIUsageAttribute"), v11);
    }
  }
  if (a3 > 0.0)
  {
    TCFNumber::TCFNumber<double>((unint64_t *)&v17, a3);
    v13 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v14 = (const void *)atomic_load((unint64_t *)&v17);
    CFDictionarySetValue(v13, CFSTR("NSFontSizeAttribute"), v14);

  }
  do
    v15 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  do
    v16 = (void *)__ldaxr(v6);
  while (__stlxr(v15, v6));

}

uint64_t TBaseFont::TBaseFont(uint64_t a1, id a2, void *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E15DE850;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 805306368;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v5 = (_OWORD *)MEMORY[0x1E0C9D538];
  v6 = (_OWORD *)MEMORY[0x1E0C9D648];
  *(_DWORD *)(a1 + 248) = 0;
  v7 = v6[1];
  *(_OWORD *)(a1 + 304) = *v6;
  *(_OWORD *)(a1 + 320) = v7;
  *(_OWORD *)(a1 + 288) = *v5;
  *(_BYTE *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_WORD *)(a1 + 440) = -1;
  *(_QWORD *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 472;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 544) = a1 + 512;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  TBaseFont::Init((TBaseFont *)a1, 0);
  return a1;
}

CFURLRef TSplicedFont::SynthesiseURL@<X0>(TSplicedFont *this@<X0>, CFURLRef *a2@<X8>)
{
  const __CFString *v4;
  CFURLRef result;

  v4 = (const __CFString *)objc_msgSend(CFSTR("file://system-synthetic-spliced-font#postscript-name="), "stringByAppendingString:", this);
  result = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0);
  *a2 = result;
  return result;
}

void AddVariationInfoWithGrade(TCFMutableDictionary *a1, const __CFString *a2, uint64_t a3)
{
  __CFString *v4;

  if ((_DWORD)a3)
  {
    v4 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@G%u"), a2, a3);
    AddVariationInfo(a1, v4);

  }
  else
  {
    AddVariationInfo(a1, a2);
  }
}

BOOL TBaseFont::GetStrikeMetricsForSystemFont(TBaseFont *this, char a2, StrikeMetrics *a3, double a4)
{
  _BOOL8 v4;
  const __CFString *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double CapHeight;
  CGFont *InitializedGraphicsFont;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;

  if ((a2 & 1) != 0)
    return 0;
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  v7 = (const __CFString *)atomic_load((unint64_t *)this + 12);
  CopyStrikeMetricsDictionaryRepresentationForSystemFont(v7, (unint64_t *)&v20);
  v8 = (void *)atomic_load((unint64_t *)&v20);
  v4 = v8 != 0;
  if (v8)
  {
    v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("unitsPerEm")), "unsignedIntValue");
    v19 = *MEMORY[0x1E0C9D538];
    v17 = *MEMORY[0x1E0C9D648];
    v18 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_DWORD *)a3 = v9;
    *(_OWORD *)((char *)a3 + 24) = 0u;
    *(_OWORD *)((char *)a3 + 8) = 0u;
    *(_OWORD *)((char *)a3 + 40) = v19;
    *(_OWORD *)((char *)a3 + 56) = v17;
    *(_OWORD *)((char *)a3 + 72) = v18;
    *((_BYTE *)a3 + 88) = 0;
    objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ascent"), v17, v18, v19), "doubleValue");
    *((_QWORD *)a3 + 1) = v10;
    objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("descent")), "doubleValue");
    *((_QWORD *)a3 + 2) = v11;
    objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("leading")), "doubleValue");
    *((_QWORD *)a3 + 3) = v12;
    v13 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("capHeight"));
    if (v13)
    {
      objc_msgSend(v13, "doubleValue");
    }
    else
    {
      InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
      CapHeight = (double)CGFontGetCapHeight(InitializedGraphicsFont);
    }
    *((double *)a3 + 4) = CapHeight;
    CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("bbox")), (CGRect *)((char *)a3 + 56));
    *((_BYTE *)a3 + 88) = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("forceAscenderDelta")), "BOOLValue");
  }

  return v4;
}

void CopyStrikeMetricsDictionaryRepresentationForSystemFont(const __CFString *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  CopyAttributeForSystemFont(a1, CFSTR("CTFontStrikeMetrics"), (const __CFString **)&v4);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

void AddVariationInfo(TCFMutableDictionary *a1, const __CFString *a2)
{
  unint64_t v4;
  __CFDictionary *v5;
  const __CFDictionary *v7;
  __CFDictionary *v8;
  const void *v9;
  void *v10;
  __CFDictionary *v11;
  void *v12;
  __CFDictionary *v13;
  id v14;

  CopyAttributeForSystemFont(a2, CFSTR("NSCTFontVariationAxesAttribute"), (const __CFString **)&v14);
  do
    v4 = __ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));

  if (v4)
  {
    v5 = (__CFDictionary *)atomic_load((unint64_t *)a1);
    CFDictionaryAddValue(v5, CFSTR("variationAxes"), (const void *)v4);
  }
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyVariationAttributeForSystemFont(a2, &v14);
  if (atomic_load((unint64_t *)&v14))
  {
    v7 = (const __CFDictionary *)atomic_load((unint64_t *)&v14);
    if (CFDictionaryGetCount(v7) | v4)
    {
      v8 = (__CFDictionary *)atomic_load((unint64_t *)a1);
      v9 = (const void *)atomic_load((unint64_t *)&v14);
      CFDictionaryAddValue(v8, CFSTR("variations"), v9);
    }
  }
  v10 = (void *)GSFontCopyFontFilePath();
  if (v10)
  {
    v11 = (__CFDictionary *)atomic_load((unint64_t *)a1);
    CFDictionaryAddValue(v11, CFSTR("path"), v10);
    v12 = (void *)CGFontURLCreate();
    if (v12)
    {
      v13 = (__CFDictionary *)atomic_load((unint64_t *)a1);
      CFDictionaryAddValue(v13, CFSTR("fontURL"), v12);
    }

  }
}

void CopyVariationAttributeForSystemFont(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  CFIndex Count;
  __int128 v8;
  char *v9;
  __int128 v10;
  char *v11;
  const __CFDictionary *v12;
  __int128 v13;
  char *v14;
  uint64_t i;
  void *v16;
  unint64_t v17;
  id v18;
  void ***p_keys;
  void **keys;
  void *v21;
  uint64_t v22;
  _OWORD v23[15];
  _OWORD *v24;
  void **values;
  void *v26;
  uint64_t v27;
  _OWORD v28[15];
  _OWORD *v29;
  id v30;
  void *v31;
  uint64_t v32;
  _OWORD v33[15];
  _OWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyAttributeForSystemFont(a1, CFSTR("NSCTFontVariationAttribute"), (const __CFString **)&v30);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v30);
  while (__stlxr(0, (unint64_t *)&v30));
  v18 = v3;

  v4 = (void *)atomic_load((unint64_t *)&v18);
  v5 = v4;
  if (!v5)
  {

    goto LABEL_10;
  }
  v6 = v5;
  Count = CFDictionaryGetCount(v5);

  if (!Count)
  {
    do
LABEL_10:
      v17 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    *a2 = v17;
    goto LABEL_12;
  }
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[14] = v8;
  v33[13] = v8;
  v33[12] = v8;
  v33[11] = v8;
  v33[10] = v8;
  v33[9] = v8;
  v33[8] = v8;
  v33[7] = v8;
  v33[6] = v8;
  v33[5] = v8;
  v33[4] = v8;
  v33[3] = v8;
  v33[2] = v8;
  v33[1] = v8;
  v33[0] = v8;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v34 = v33;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v30, Count);
  v9 = (char *)v31;
  bzero(v31, 8 * Count);
  v31 = &v9[8 * Count];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[14] = v10;
  v28[13] = v10;
  v28[12] = v10;
  v28[11] = v10;
  v28[10] = v10;
  v28[9] = v10;
  v28[8] = v10;
  v28[7] = v10;
  v28[6] = v10;
  v28[5] = v10;
  v28[4] = v10;
  v28[3] = v10;
  v28[2] = v10;
  v28[1] = v10;
  v28[0] = v10;
  values = 0;
  v26 = 0;
  v27 = 0;
  v29 = v28;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, Count);
  v11 = (char *)v26;
  bzero(v26, 8 * Count);
  v26 = &v11[8 * Count];
  v12 = (const __CFDictionary *)atomic_load((unint64_t *)&v18);
  CFDictionaryGetKeysAndValues(v12, (const void **)v30, (const void **)values);
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[14] = v13;
  v23[13] = v13;
  v23[12] = v13;
  v23[11] = v13;
  v23[10] = v13;
  v23[9] = v13;
  v23[8] = v13;
  v23[7] = v13;
  v23[6] = v13;
  v23[4] = v13;
  v23[5] = v13;
  v23[2] = v13;
  v23[3] = v13;
  v23[0] = v13;
  v23[1] = v13;
  v21 = 0;
  v22 = 0;
  keys = 0;
  v24 = v23;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&keys, Count);
  v14 = (char *)v21;
  bzero(v21, 8 * Count);
  v21 = &v14[8 * Count];
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v16 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", FourCharCodeFromString(*((const __CFString **)v30 + i)));
      keys[i] = v16;
    }
  }
  *a2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  p_keys = &keys;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_keys);
  keys = (void **)&values;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&keys);
  values = &v30;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
LABEL_12:

}

const __CFString *CopyAttributeForSystemFont@<X0>(const __CFString *result@<X0>, const __CFString *a2@<X1>, const __CFString **a3@<X8>)
{
  const __CFString *v5;
  const __CFDictionary *Value;

  if (result)
  {
    v5 = result;
    if (!qword_1ECDE7DE0)
      qword_1ECDE7DE0 = _sl_dlopen();
    if (qword_1ECDE7DE0
      && getFSFontIsOverriddenSystemFontNameSymbolLoc()
      && (SoftLinked__FSFontIsOverriddenSystemFontName(v5) & 1) != 0)
    {
      result = 0;
    }
    else
    {
      if (qword_1ECDE7DD8 != -1)
        dispatch_once(&qword_1ECDE7DD8, &__block_literal_global_80);
      Value = (const __CFDictionary *)qword_1ECDE7DD0;
      if (qword_1ECDE7DD0)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7DD0, CFSTR("Attrs"));
        if (Value)
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v5);
          if (Value)
            Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
        }
      }
      result = Value;
    }
  }
  *a3 = result;
  return result;
}

const __CFString *FourCharCodeFromString(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  UInt8 buffer[8];
  CFRange v4;

  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    if ((unint64_t)(Length - 5) >= 0xFFFFFFFFFFFFFFFCLL)
    {
      v4.length = Length;
      strcpy((char *)buffer, "    ");
      v4.location = 0;
      CFStringGetBytes(v1, v4, 0x600u, 0, 0, buffer, 4, 0);
      return (const __CFString *)(((char)buffer[1] << 16) | (buffer[0] << 24) | ((char)buffer[2] << 8) | (char)buffer[3]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFString *SFFontNameForWidth(unsigned int a1, CFNumberRef number, _QWORD *a3)
{
  __CFString *v3;
  unsigned int v6;
  int v7;
  double valuePtr;

  v3 = kFont2X[5 * a1];
  if (number)
  {
    valuePtr = NAN;
    CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr);
    v6 = ClassOfWidth(valuePtr);
    if (v6 != 5)
    {
      if (v6 >= 8)
        v7 = 8;
      else
        v7 = v6;
      if (a3)
        *a3 = off_1E15E61D8[v7];
      return off_1E15E6460[v7][a1 % 9];
    }
  }
  return v3;
}

void addComponentsWithTrimCharacterSet(const void **a1, const void *a2, unint64_t *a3, uint64_t a4)
{
  const __CFAllocator *v8;
  __CFDictionary *v9;
  __CFArray *v10;
  __CFDictionary *v11;
  const void *v12;
  id Mutable;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v9, CFSTR("name"), *a1);
  if (a2)
    CFDictionaryAddValue(v9, CFSTR("UnicodeCharSetTrim"), a2);
  v10 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
  CFArrayAppendValue(v10, v9);
  if (a4)
    (*(void (**)(uint64_t, id *))(a4 + 16))(a4, &Mutable);
  v11 = (__CFDictionary *)atomic_load(a3);
  v12 = (const void *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v11, CFSTR("Components"), v12);

}

id *std::tuple<TCFRef<__CFCharacterSet const*>,`anonymous namespace'::TFontInfo const*,unsigned long,TCFRef<__CFString const*>>::~tuple(id *a1)
{

  return a1;
}

void GetLocalizedTrimCharacterSet(const __CFString *a1, __CFString *a2)
{
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  const __CFString *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17[3];
  id v18;

  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  LanguageNormalizedForPresetFallbacks(a2, (unint64_t *)&v18);
  if (a2)
  {
    memset(v17, 170, sizeof(v17));
    v4 = (const __CFString *)atomic_load((unint64_t *)&v18);
    CreateLocalizedTrimCharacterSet(v17, v4, &v17[2], &v17[1]);
    do
      v5 = (void *)__ldaxr(v17);
    while (__stlxr(0, v17));
    v6 = v17[2];
    a1->isa = v5;
    a1->info = v6;
    a1->data = (char *)v17[1];
    do
      v7 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    a1->length = v7;
    v8 = (void *)v17[0];
  }
  else
  {
    v9 = dword_1EDD16EC8;
    if (v9 != GetLocaleChangedCount())
    {
      v17[2] = 0xAAAAAAAAAAAAAAAALL;
      v10 = (const __CFString *)atomic_load((unint64_t *)&v18);
      CreateLocalizedTrimCharacterSet(&v17[2], v10, &qword_1EDD16F78, &qword_1EDD16F80);
      do
        v11 = __ldaxr(&v17[2]);
      while (__stlxr(0, &v17[2]));
      v12 = (void *)qword_1EDD16F70;
      qword_1EDD16F70 = v11;

      dword_1EDD16EC8 = GetLocaleChangedCount();
    }
    v17[2] = (unint64_t)(id)qword_1EDD16F70;
    do
      v13 = (void *)__ldaxr(&v17[2]);
    while (__stlxr(0, &v17[2]));
    v14 = qword_1EDD16F78;
    v15 = (char *)qword_1EDD16F80;
    a1->isa = v13;
    a1->info = v14;
    a1->data = v15;
    do
      v16 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    a1->length = v16;
    v8 = (void *)v17[2];
  }

}

unint64_t CreateSyntheticAppleSymbolsSplicedFont(void)
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  __CFDictionary *v3;
  __CFDictionary *v4;
  const CFArrayCallBacks *v5;
  __CFArray *v6;
  __CFDictionary *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  __CFArray *v11;
  __CFDictionary *v12;
  __CFCharacterSet *v13;
  CFCharacterSetRef Copy;
  __CFDictionary *v15;
  __CFCharacterSet *v16;
  CFCharacterSetRef v17;
  __CFDictionary *v18;
  CFCharacterSetRef v19;
  __CFDictionary *v20;
  unint64_t v21;
  id Mutable;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  uint64_t v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;
  CFRange v43;
  CFRange v44;
  CFRange v45;
  CFRange v46;
  CFRange v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;

  v28 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v3, CFSTR("name"), CFSTR(".AppleSymbolsFB"));
  v4 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v4, CFSTR("version"), CFSTR("1.0"));
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v6 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("1");
  v27 = CFSTR(".Apple Symbols Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("16");
  v27 = CFSTR(".Apple Symbols Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("4");
  v27 = CFSTR(".Apple Symbols Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("18");
  v27 = CFSTR(".Apple Symbols Fallback");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("2");
  v27 = CFSTR("Regular");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v24 = CFSTR("type");
  v25 = CFSTR("string");
  v26 = CFSTR("7");
  v27 = CFSTR("Apple Inc.");
  CFArrayAppendValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v24, 2));
  v7 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v7, CFSTR("familyName"), CFSTR(".Apple Symbols Fallback"));
  v8 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v8, CFSTR("FontNames"), v6);

  v9 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionaryAddValue(v9, CFSTR("weightClass"), CFSTR("w4"));
  v10 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v10, CFSTR("FontMetrics"), v9);

  v11 = CFArrayCreateMutable(v0, 0, v5);
  v12 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionaryAddValue(v12, CFSTR("name"), CFSTR("AppleSymbols"));
  v13 = CFCharacterSetCreateMutable(v0);
  v29.location = 8505;
  v29.length = 1;
  CFCharacterSetAddCharactersInRange(v13, v29);
  v30.location = 8196;
  v30.length = 7;
  CFCharacterSetAddCharactersInRange(v13, v30);
  v31.location = 8704;
  v31.length = 239;
  CFCharacterSetAddCharactersInRange(v13, v31);
  v32.location = 8944;
  v32.length = 16;
  CFCharacterSetAddCharactersInRange(v13, v32);
  v33.location = 9744;
  v33.length = 3;
  CFCharacterSetAddCharactersInRange(v13, v33);
  v34.location = 10176;
  v34.length = 5;
  CFCharacterSetAddCharactersInRange(v13, v34);
  v35.location = 10183;
  v35.length = 4;
  CFCharacterSetAddCharactersInRange(v13, v35);
  v36.location = 10192;
  v36.length = 28;
  CFCharacterSetAddCharactersInRange(v13, v36);
  v37.location = 10240;
  v37.length = 256;
  CFCharacterSetAddCharactersInRange(v13, v37);
  v38.location = 10624;
  v38.length = 144;
  CFCharacterSetAddCharactersInRange(v13, v38);
  v39.location = 10769;
  v39.length = 1;
  CFCharacterSetAddCharactersInRange(v13, v39);
  v40.location = 10774;
  v40.length = 234;
  CFCharacterSetAddCharactersInRange(v13, v40);
  v41.location = 127760;
  v41.length = 1;
  CFCharacterSetAddCharactersInRange(v13, v41);
  v42.location = 127908;
  v42.length = 1;
  CFCharacterSetAddCharactersInRange(v13, v42);
  Copy = CFCharacterSetCreateCopy(v0, v13);
  CFDictionaryAddValue(v12, CFSTR("UnicodeCharSet"), Copy);

  CFArrayAppendValue(v11, v12);
  v15 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionaryAddValue(v15, CFSTR("name"), CFSTR("ZapfDingbatsITC"));
  v16 = CFCharacterSetCreateMutable(v0);
  v43.location = 9985;
  v43.length = 4;
  CFCharacterSetAddCharactersInRange(v16, v43);
  v44.location = 9996;
  v44.length = 28;
  CFCharacterSetAddCharactersInRange(v16, v44);
  v45.location = 10025;
  v45.length = 35;
  CFCharacterSetAddCharactersInRange(v16, v45);
  v46.location = 10061;
  v46.length = 1;
  CFCharacterSetAddCharactersInRange(v16, v46);
  v47.location = 10063;
  v47.length = 4;
  CFCharacterSetAddCharactersInRange(v16, v47);
  v48.location = 10070;
  v48.length = 1;
  CFCharacterSetAddCharactersInRange(v16, v48);
  v49.location = 10072;
  v49.length = 7;
  CFCharacterSetAddCharactersInRange(v16, v49);
  v50.location = 10081;
  v50.length = 52;
  CFCharacterSetAddCharactersInRange(v16, v50);
  v51.location = 10136;
  v51.length = 24;
  CFCharacterSetAddCharactersInRange(v16, v51);
  v52.location = 10161;
  v52.length = 14;
  CFCharacterSetAddCharactersInRange(v16, v52);
  v17 = CFCharacterSetCreateCopy(v0, v16);
  CFDictionaryAddValue(v15, CFSTR("UnicodeCharSet"), v17);

  CFArrayAppendValue(v11, v15);
  v18 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionaryAddValue(v18, CFSTR("name"), CFSTR("Symbol"));
  v53.location = 63743;
  v53.length = 1;
  v19 = CFCharacterSetCreateWithCharactersInRange(v0, v53);
  CFDictionaryAddValue(v18, CFSTR("UnicodeCharSet"), v19);
  CFArrayAppendValue(v11, v18);

  v20 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v20, CFSTR("Components"), v11);

  do
    v21 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));

  return v21;
}

void CreateLocalizedTrimCharacterSet(unint64_t *a1, const __CFString *cf1, _QWORD *a3, _QWORD *a4)
{
  unint64_t SFTrimCharacterSetForChineseOrJapanese;
  unsigned int v8;
  uint64_t v11;
  const __CFString *TrimStringForNumberingSystem;
  const __CFString *v13;
  __CFCharacterSet *v14;
  __CFString **v15;
  __CFCharacterSet *v16;
  const __CFString *v17;
  const __CFString *v18;
  __CFCharacterSet *v19;
  id Mutable;
  unsigned int v21;

  v21 = 0;
  SFTrimCharacterSetForChineseOrJapanese = 0;
  if (!GetLocalizedTrimSetKeyForNormalizedLanguage(cf1, &v21))
    goto LABEL_33;
  v8 = v21;
  if ((int)v21 <= 15)
  {
    if (v21 - 1 < 2 || v21 == 4 || v21 == 8)
    {
      SFTrimCharacterSetForChineseOrJapanese = CreateSFTrimCharacterSetForChineseOrJapanese(kFont2X[15], v21);
      *a4 = 8;
      if (qword_1EDD16F68 != -1)
        dispatch_once(&qword_1EDD16F68, &__block_literal_global_2245);
      v11 = qword_1ECDE6FA0;
      if (v8 == 4)
      {
        v11 = qword_1ECDE6FA0 + 640;
      }
      else if (v8 == 2)
      {
        v11 = qword_1ECDE6FA0 + 320;
      }
      else if (v8 != 1)
      {
        v11 = qword_1ECDE6FA0 + 960;
      }
      *a3 = v11;
    }
    goto LABEL_33;
  }
  switch(v21)
  {
    case 0x40u:
      Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      TrimStringForNumberingSystem = GetTrimStringForNumberingSystem();
      if (TrimStringForNumberingSystem)
      {
        v13 = TrimStringForNumberingSystem;
        v14 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
        CFCharacterSetAddCharactersInString(v14, v13);
      }
      do
        SFTrimCharacterSetForChineseOrJapanese = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      _CFCharacterSetCompact();
      v15 = &kFontHindi;
      goto LABEL_32;
    case 0x20u:
      Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      v16 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
      CFCharacterSetAddCharactersInString(v16, CFSTR("\"'()°‘’“”"));
      v17 = GetTrimStringForNumberingSystem();
      if (v17)
      {
        v18 = v17;
        v19 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
        CFCharacterSetAddCharactersInString(v19, v18);
      }
      do
        SFTrimCharacterSetForChineseOrJapanese = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      _CFCharacterSetCompact();
      v15 = &kFontSFArabic;
LABEL_32:
      *a3 = v15;
      *a4 = 9;

      break;
    case 0x10u:
      SFTrimCharacterSetForChineseOrJapanese = CreateSFTrimCharacterSetForChineseOrJapanese(kFont2X[15], 16);
      *a3 = off_1ECDE6F70[0];
      *a4 = 9;
      break;
  }
LABEL_33:
  *a1 = SFTrimCharacterSetForChineseOrJapanese;
}

CTTypesetterRef CTTypesetterCreateWithAttributedStringAndOptions(CFAttributedStringRef string, CFDictionaryRef options)
{
  uint64_t v4;
  _QWORD *v5;
  TTypesetterAttrString *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const __CTTypesetter *v11;
  id v13;
  id v14;
  id v15;

  if (!string)
    return 0;
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = TCFBase<TTypesetter>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TTypesetterAttrString *)(v4 + 48);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    TTypesetterAttrString::TTypesetterAttrString(v6, string, options, 0);
    v15 = v5;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    v13 = v7;

  }
  else
  {
    v13 = 0;
  }
  do
    v8 = (void *)__ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));
  v14 = v8;

  v9 = atomic_load((unint64_t *)&v14);
  if (v9 && (v10 = atomic_load((unint64_t *)&v14), *(_BYTE *)(*(_QWORD *)(v10 + 40) + 257)))
  {
    v11 = 0;
  }
  else
  {
    do
      v11 = (const __CTTypesetter *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
  }

  return v11;
}

unint64_t CTTypesetterCreateWithRunArray(const __CFArray *a1, const __CFString *a2, const void *(*a3)(const __CTRun *, const __CFString *, void *), void *a4)
{
  uint64_t v8;
  _QWORD *v9;
  TTypesetter *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  id v15;
  id v16;
  id v17;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TTypesetter>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (TTypesetter *)(v8 + 48);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v10;
    TTypesetter::TTypesetter(v10, a1, a2, a3, a4, 0);
    v17 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  v16 = v12;

  do
    v13 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));

  return v13;
}

unint64_t CTTypesetterCreateWithRunArrayAndOptions(const __CFArray *a1, const __CFString *a2, const void *(*a3)(const __CTRun *, const __CFString *, void *), void *a4, const __CFDictionary *a5)
{
  uint64_t v10;
  _QWORD *v11;
  TTypesetter *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v19;
  id v20;
  id v21;

  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  v10 = TCFBase<TTypesetter>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = (TTypesetter *)(v10 + 48);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v12;
    TTypesetter::TTypesetter(v12, a1, a2, a3, a4, a5);
    v21 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v21);
    while (__stlxr(0, (unint64_t *)&v21));
    v19 = v13;

  }
  else
  {
    v19 = 0;
  }
  do
    v14 = (void *)__ldaxr((unint64_t *)&v19);
  while (__stlxr(0, (unint64_t *)&v19));
  v20 = v14;

  v15 = atomic_load((unint64_t *)&v20);
  if (v15 && (v16 = atomic_load((unint64_t *)&v20), *(_BYTE *)(*(_QWORD *)(v16 + 40) + 257)))
  {
    v17 = 0;
  }
  else
  {
    do
      v17 = __ldaxr((unint64_t *)&v20);
    while (__stlxr(0, (unint64_t *)&v20));
  }

  return v17;
}

CTTypesetterRef CTTypesetterCreateWithAttributedString(CFAttributedStringRef string)
{
  const __CFAttributedString *v1;
  uint64_t v2;
  _QWORD *v3;
  TTypesetterAttrString *v4;
  void *v5;
  void *v6;
  id v8;
  id v9;
  id v10;

  v1 = string;
  if (string)
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    v2 = TCFBase<TTypesetter>::Allocate();
    if (v2)
    {
      v3 = (_QWORD *)v2;
      v4 = (TTypesetterAttrString *)(v2 + 48);
      v3[2] = 0;
      v3[3] = 0;
      v3[4] = 0;
      v3[5] = v4;
      TTypesetterAttrString::TTypesetterAttrString(v4, v1, 0, 0);
      v10 = v3;
      do
        v5 = (void *)__ldaxr((unint64_t *)&v10);
      while (__stlxr(0, (unint64_t *)&v10));
      v8 = v5;

    }
    else
    {
      v8 = 0;
    }
    do
      v6 = (void *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    v9 = v6;

    do
      v1 = (const __CFAttributedString *)__ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));

  }
  return v1;
}

uint64_t TCFBase<TTypesetter>::Allocate()
{
  if (TCFBase<TTypesetter>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TTypesetter>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TTypesetter>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

void TTypesetter::TTypesetter(TTypesetter *this, const __CFArray *a2, const __CFString *a3, const void *(*a4)(const __CTRun *, const __CFString *, void *), void *a5, const __CFDictionary *a6)
{
  _QWORD *v12;
  uint64_t v13;
  int v14;
  const TCharStream *v15;
  char v16;
  char v17;
  TCompositionEngine **v18;
  uint64_t v19;
  char v20;
  TTypesetter *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  TCompositionEngine **v28;
  TCompositionEngine *__dst[83];

  __dst[82] = *(TCompositionEngine **)MEMORY[0x1E0C80C00];
  v12 = operator new(0x48uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E15E15F0;
  TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)(v12 + 3), a3, 0);
  *(_QWORD *)this = v13;
  *((_QWORD *)this + 1) = v12;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = v13;
  *((_QWORD *)this + 28) = a4;
  *((_QWORD *)this + 29) = a5;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_WORD *)this + 128) = 0;
  TLine::SetRunArray((int64x2_t *)this, a2);
  TLine::LinkRuns(this);
  if (a6)
    TTypesetter::UnpackOptions(this, a6);
  if (TTypesetter::CanLayout(this))
  {
    v21 = this;
    v22 = *(_OWORD *)((char *)this + 216);
    v23 = *((_QWORD *)this + 29);
    v24 = (char *)this + 240;
    v14 = *((_DWORD *)this + 65);
    v26 = -1431655766;
    v27 = 0;
    v25 = v14;
    LOBYTE(v26) = *((_BYTE *)this + 264);
    BYTE1(v26) = *((_BYTE *)this + 257);
    memcpy(__dst, &unk_184930C10, 0x290uLL);
    TRunGlue::TRunGlue((TRunGlue *)__dst, this);
    LOBYTE(v28) = 0;
    v20 = 0;
    if ((TTypesetter::DoAttachments((uint64_t)&v21, (void ***)__dst, &v28, &v20) & 1) != 0)
    {
      v16 = TShapingEngine::ShapeGlyphs((TShapingEngine *)__dst, *((TRunGlue **)this + 27), v15);
      v17 = v20 | v16;
    }
    else
    {
      v17 = v20;
    }
    TTypesetter::FinishLayout((uint64_t)&v21, __dst, (const TCharStream *)(char)v28, v17);
    DoGlyphFixupsCheck(this);
    v18 = (TCompositionEngine **)__dst[73];
    if ((TCompositionEngine **)__dst[73] == &__dst[70])
    {
      v19 = 4;
      v18 = &__dst[70];
    }
    else
    {
      if (!__dst[73])
      {
LABEL_12:
        v28 = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
        v28 = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
        v28 = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v28);
        return;
      }
      v19 = 5;
    }
    (*((void (**)(void))*v18 + v19))();
    goto LABEL_12;
  }
}

const __CFNumber *TTypesetter::UnpackOptions(TTypesetter *this, CFDictionaryRef theDict)
{
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  uint64_t (**v6)(const void *, _QWORD, uint64_t, unsigned __int8 *);
  uint64_t (**v7)(const void *, _QWORD, uint64_t, unsigned __int8 *);
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const __CFBoolean *v13;
  const __CFNumber *result;
  int v15;
  unsigned __int8 v16;

  Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("CTTypesetterOptionVerticalLayout"));
  if (Value && CFBooleanGetValue(Value))
    *((_WORD *)this + 77) |= 0x100u;
  v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("CTTypesetterOptionAllowUnboundedLayout"));
  if (v5 && CFBooleanGetValue(v5))
    *((_BYTE *)this + 256) = 1;
  v6 = (uint64_t (**)(const void *, _QWORD, uint64_t, unsigned __int8 *))CFDictionaryGetValue(theDict, CFSTR("CTTypesetterOptionBidiLevelsProvider"));
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)(*((_QWORD *)this + 27) + 16);
    v9 = operator new(0x38uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E15E1698;
    v9[3] = &off_1E15DE640;
    v9[4] = 0;
    v16 = 0;
    v9[5] = v7[2](v7, 0, v8, &v16);
    *((_WORD *)v9 + 24) = v16 | 0x100;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 30) = v9 + 3;
    *((_QWORD *)this + 31) = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("CTTypesetterOptionDisableBidiProcessing"));
  if (v13 && CFBooleanGetValue(v13))
    *((_DWORD *)this + 65) |= 1u;
  result = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CTTypesetterOptionForcedEmbeddingLevel"));
  if (result)
  {
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberCharType, (char *)this + 264);
    if (*((_BYTE *)this + 264))
      v15 = 2;
    else
      v15 = 1;
    *((_DWORD *)this + 65) |= v15;
  }
  return result;
}

void TLine::SetRunArray(int64x2_t *this, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;

  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v5 = Count;
    if (theArray)
    {
      v6 = CFArrayGetCount(theArray);
      if (v6)
      {
        v7 = v6;
        for (i = 0; i != v7; ++i)
        {
          v15 = (id)CFArrayGetValueAtIndex(theArray, i);
          do
            v9 = (void *)__ldaxr((unint64_t *)&v15);
          while (__stlxr(0, (unint64_t *)&v15));
          v16 = v9;
          TLine::AppendRun(this, (unint64_t *)&v16);

        }
      }
    }
    v10 = this[1].i64[0];
    v11 = *(_QWORD *)(*(_QWORD *)v10 + 40);
    v12 = *(_QWORD *)(v11 + 8);
    if (v5 <= 1)
    {
      v14 = *(_QWORD *)(v11 + 16);
    }
    else
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * v5 - 8) + 40);
      v14 = *(_QWORD *)(v13 + 8) - v12 + *(_QWORD *)(v13 + 16);
    }
    this[4].i64[1] = v12;
    this[5].i64[0] = v14;
  }
}

_QWORD *DoGlyphFixupsCheck(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int v11;

  v1 = result[3] - result[2];
  if (v1 >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = (unint64_t)v1 >> 3;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2[2] + 8 * v3) + 48);
      v7 = *(_QWORD *)(v6 + 208);
      result = *(_QWORD **)(v6 + 216);
      v8 = result[2];
      v9 = *(_QWORD *)(v6 + 200);
      if ((*(_BYTE *)(v6 + 225) & 0x10) != 0)
      {
        result = (_QWORD *)objc_msgSend(result, "implementsOrigins");
        if (!(_DWORD)result)
          break;
      }
      if (v7 >= 1)
      {
        v10 = (__int16 *)(v8 + 2 * v9);
        do
        {
          v11 = *v10++;
          if (v11 == -1)
            goto LABEL_13;
        }
        while (--v7);
      }
      if (++v3 == v5)
        return result;
    }
LABEL_13:
    *((_WORD *)v2 + 77) |= 0x20u;
  }
  return result;
}

uint64_t FixRunIfBroken(TRun *a1, uint64_t a2, NSMutableIndexSet *a3)
{
  int v3;
  _BOOL4 v4;
  BOOL v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  BOOL v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _BOOL4 v41;

  v3 = *((_DWORD *)a1 + 64);
  v4 = v3 != 2;
  if (v3)
    v5 = v3 == 3;
  else
    v5 = 1;
  if (v5)
    v4 = 0;
  v41 = v4;
  v6 = v5 || v3 == 2;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  v8 = *((_QWORD *)a1 + 26);
  if (v8 >= 1)
  {
    v11 = *((_QWORD *)a1 + 1);
    v37 = *((_QWORD *)a1 + 2);
    v12 = (_QWORD *)*((_QWORD *)a1 + 27);
    v13 = (uint64_t *)(v12[6] + 8 * *((_QWORD *)a1 + 25));
    v14 = *v13;
    v15 = objc_msgSend(v12, "attachmentCountAtIndex:") + v14;
    if (v8 != 1)
    {
      for (i = 1; i != v8; ++i)
      {
        v17 = v13[i];
        if (v17 < v14)
          v14 = v13[i];
        v18 = objc_msgSend(*((id *)a1 + 27), "attachmentCountAtIndex:", i + *((_QWORD *)a1 + 25));
        if ((uint64_t)v15 <= v18 + v17)
          v15 = v18 + v17;
      }
    }
    if ((uint64_t)(v15 + 1) < a2)
      v19 = v15 + 1;
    else
      v19 = a2;
    if (v14 < 0 || v14 >= a2)
    {
      v20 = v15 < 0x7FFFFFFFFFFFFFFFLL && v14 < 1;
      v14 = 0;
      if (!v20)
        v19 = 0;
    }
    else
    {
      v19 -= v14;
    }
    v39 = v13;
    if (v14 != v11 || v19 != v37)
    {
      *((_QWORD *)a1 + 1) = v14;
      *((_QWORD *)a1 + 2) = v19;
      v7 = 1;
    }
    v21 = v7;
    if ((*((_BYTE *)a1 + 224) & 1) != 0)
      v22 = v8 - 1;
    else
      v22 = 0;
    if ((*((_BYTE *)a1 + 224) & 1) != 0)
      v23 = -1;
    else
      v23 = v8;
    v24 = 1;
    if ((*((_BYTE *)a1 + 224) & 1) != 0)
      v25 = -1;
    else
      v25 = 1;
    v26 = v39[v22] - 1;
    v38 = v14 + v19;
    while (1)
    {
      v27 = v26;
      v26 = v39[v22];
      v28 = objc_msgSend(*((id *)a1 + 27), "attachmentCountAtIndex:", v22 + *((_QWORD *)a1 + 25));
      v29 = v28;
      v30 = v41;
      if (v26 != v27)
        v30 = 0;
      v31 = v26 != v27 + v24 && !v30;
      v32 = v28 + v26;
      if (!v31 && v14 <= v32)
      {
        v34 = v38 <= v32;
        v35 = v38 <= v32 || v41;
        if ((v35 & 1) != 0)
        {
          if (!v34)
            goto LABEL_54;
        }
        else if ((-[NSMutableIndexSet containsIndex:](a3, "containsIndex:", v26) & 1) == 0)
        {
          goto LABEL_54;
        }
      }
      objc_msgSend(*((id *)a1 + 27), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 27) + 40) + 4 * *((_QWORD *)a1 + 25) + 4 * v22) | 0x20u, v22 + *((_QWORD *)a1 + 25));
      objc_msgSend(*((id *)a1 + 27), "setStringIndex:atIndex:", v14, v22 + *((_QWORD *)a1 + 25));
      *((_DWORD *)a1 + 64) = 2;
      v21 = 1;
LABEL_54:
      -[NSMutableIndexSet addIndex:](a3, "addIndex:", v26);
      v24 = v29 + 1;
      v22 += v25;
      if (v23 == v22)
        return v21 & 1;
    }
  }
  v21 = v7;
  return v21 & 1;
}

void GetDefaultFeatureList<false>(void)::{lambda(void *)#1}::__invoke()
{
  uint64_t i;
  _BYTE v1[12];

  for (i = 0; i != 1980; i += 12)
  {
    *(_QWORD *)v1 = *(uint64_t *)((char *)&kMasterFeatureMap + i);
    *(_DWORD *)&v1[8] = *(_DWORD *)((char *)&kMasterFeatureMap + i + 8);
    if ((*(_QWORD *)&v1[4] & 0x1600000000) == 0x200000000)
  }
}

BOOL CTFontHasFeatureSettingWithTypeAndSelector(_BOOL8 result, unsigned __int16 a2, int a3)
{
  if (result)
    return TFontFeatureSettingList::IndexOfAATSetting((TFontFeatureSettingList *)(*(_QWORD *)(result + 40) + 168), a2, a3) != -1;
  return result;
}

CGPathRef CTFrameGetPath(CGPathRef frame)
{
  if (frame)
    return (CGPathRef)atomic_load((unint64_t *)(*((_QWORD *)frame + 5) + 80));
  return frame;
}

void TCFBase<TFrame>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  std::__destroy_at[abi:nn180100]<TFrame,0>(*(_QWORD *)(a1 + 40));
}

uint64_t CTFontDescriptorGetOptions(uint64_t result)
{
  if (result)
    return *(unsigned int *)(*(_QWORD *)(result + 40) + 16);
  return result;
}

uint64_t GetInternalKey(void)::$_0::__invoke()
{
  return pthread_key_init_np();
}

void CTLineDrawWithAttributeOverrides(uint64_t a1, CGContext *a2)
{
  uint64_t v2;
  _OWORD v3[5];
  uint64_t v4;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v4 = -1;
    v3[0] = xmmword_18492F040;
    memset(&v3[1], 255, 64);
    TLineDrawContext::TLineDrawContext((TLineDrawContext *)v3, a2);
    TLine::DrawGlyphsWithAttributeOverrides(v2, (uint64_t)v3);
  }
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
  uint64_t v3;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex length;
  uint64_t v10;
  CFIndex v12;
  _QWORD *v14;
  uint64_t v15;
  CFIndex v16;
  CFIndex v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (run && buffer)
  {
    v3 = *((_QWORD *)run + 5);
    if ((*(_BYTE *)(v3 + 225) & 8) != 0)
    {
      v6 = *(_QWORD *)(v3 + 208);
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 16) + 2 * *(_QWORD *)(v3 + 200);
      v8 = *(_QWORD *)(v3 + 264);
      v19[0] = &off_1E15DEF78;
      v19[1] = buffer;
      v19[2] = v7;
      v20 = v19;
      if (range.length)
        length = range.length;
      else
        length = v6;
      v10 = 0;
      if (v6 >= 1 && range.location >= 1)
      {
        v12 = 0;
        do
        {
          if (v8 == v10 || *(__int16 *)(v7 + 2 * v10) != -1)
            ++v12;
          ++v10;
        }
        while (v10 < v6 && v12 < range.location);
      }
      v14 = v19;
      v15 = 4;
      if (v10 < v6 && length >= 1)
      {
        v16 = 0;
        do
        {
          if (v8 == v10 || *(unsigned __int16 *)(v7 + 2 * v10) != 0xFFFF)
          {
            v17 = v16;
            v18 = v10;
            if (!v20)
              std::__throw_bad_function_call[abi:nn180100]();
            (*(void (**)(_QWORD *, uint64_t *, CFIndex *))(*v20 + 48))(v20, &v18, &v17);
            ++v16;
          }
          ++v10;
        }
        while (v10 < v6 && v16 < length);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            return;
          v15 = 5;
        }
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
    }
    else if ((range.location & 0x8000000000000000) == 0)
    {
      v4 = *(_QWORD *)(v3 + 208);
      if (range.location + range.length <= v4)
      {
        v5 = v4 - range.location;
        if (range.length)
          v5 = range.length;
        if (v5)
          memmove(buffer, (const void *)(*(_QWORD *)(*(_QWORD *)(v3 + 216) + 16) + 2 * *(_QWORD *)(v3 + 200) + 2 * range.location), 2 * v5);
      }
    }
  }
}

uint64_t std::__function::__func<CTRunGetGlyphs::$_0,std::allocator<CTRunGetGlyphs::$_0>,void ()(long,long)>::operator()(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *(_WORD *)(*(_QWORD *)(result + 8) + 2 * *a3) = *(_WORD *)(*(_QWORD *)(result + 16) + 2 * *a2);
  return result;
}

uint64_t TDescriptorSource::GetTextStyleWithSymbolicTraits(TDescriptorSource *this, __CFString *a2)
{
  TDescriptorSource *v3;
  const __CFString *v4;
  uint64_t *v5;
  TDescriptorSource *FontNameForNameAndTrait;

  v3 = (TDescriptorSource *)MapTextStyleValue((uint64_t)this);
  if (v3 > 0x144)
  {
    FontNameForNameAndTrait = 0;
  }
  else
  {
    FontNameForNameAndTrait = (TDescriptorSource *)TDescriptorSource::UIFontNameForUIType(v3);
    if (FontNameForNameAndTrait)
      FontNameForNameAndTrait = (TDescriptorSource *)TDescriptorSource::FindFontNameForNameAndTrait(FontNameForNameAndTrait, 0, (uint64_t *)a2, (int)a2);
  }
  return TDescriptorSource::TextStyleForUIFontName(FontNameForNameAndTrait, v4, v5);
}

void *TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  v2 = (unint64_t *)(a1 + 16);
  v3 = v4;
  v5 = v4 + 16 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(16 * a2);
  }
}

uint64_t CTFontIsAppleColorEmoji(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 40) + 400) + 712))(*(_QWORD *)(*(_QWORD *)(result + 40) + 400));
  return result;
}

BOOL CTFontManagerRegisterFontsForURL(CFURLRef fontURL, CTFontManagerScope scope, CFErrorRef *error)
{
  return _CTFontManagerRegisterActionFontsForURL(fontURL, scope, 1, error);
}

uint64_t TAATMorphTable::ShapeGlyphs(uint64_t *a1, _BYTE *a2, CFIndex a3)
{
  uint64_t *v3;
  TRunGlue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int length_high;
  __int128 v17;
  uint64_t i;
  uint64_t v19;
  const TAttributes *v20;
  unint64_t v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  CFIndex v43;
  uint64_t v44;
  CFIndex v45;
  CFIndex v46;
  int v48;
  const unsigned __int8 *v49;
  TRunGlue *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  TRunGlue *v57;
  unsigned int length;
  unsigned int v59;
  uint64_t v60;
  uint64_t result;
  unsigned int v62;
  unsigned __int8 v63;
  int LocaleChangedCount;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  const TFontFeatureSettingList *v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  TAATMorphChain *v76;
  const TAttributes *v77;
  __CFString *location;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  const unsigned __int8 *v82;
  int v83;
  int v84;
  TRunGlue *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __CFString *v93;
  __CFString *v94;
  __CFString *v95;
  __CFString *v96;
  __CFString *v97;
  __CFString *v98;
  __CFString *v99;
  __CFString *v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  uint64_t *v105;
  CFRange v106;
  char v107[8];
  char *v108;
  char *v109;
  char *v110;
  _OWORD *v111;
  _QWORD v112[3];
  _QWORD *v113;
  _QWORD v114[3];
  _QWORD *v115;
  _QWORD v116[3];
  _QWORD *v117;
  char cStr[8];
  char *v119;
  char *v120;
  _OWORD v121[7];
  unint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  CFRange v125;
  CFRange v126;
  CFRange v127;

  v106.location = a3;
  v3 = a1;
  v124 = *MEMORY[0x1E0C80C00];
  a1[2] = TRunGlue::length((TRunGlue *)a1[1]) << 7;
  v105 = v3;
  if (!*((_BYTE *)v3 + 56))
  {
    v11 = *v3;
    v10 = v3[1];
    v12 = *(_QWORD *)(v10 + 16);
    v106.location = *(_QWORD *)(v10 + 8);
    HIDWORD(v106.length) = -1431655766;
    v13 = (*(uint64_t (**)(uint64_t *, char *))(v11 + 16))(v3, (char *)&v106.length + 4);
    v14 = 1;
    if (HIDWORD(v106.length))
    {
      v15 = (unsigned int *)v13;
      length_high = 0;
      while ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15))
      {
        v101 = length_high;
        v102 = TAATMorphChain::FlagsForOptionalLigatures((TAATMorphChain *)v15);
        v122 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v121[5] = v17;
        v121[6] = v17;
        v121[3] = v17;
        v121[4] = v17;
        v121[1] = v17;
        v121[2] = v17;
        v121[0] = v17;
        *(_QWORD *)cStr = 0;
        v119 = 0;
        v120 = 0;
        v123 = v121;
        if (v12 >= 1)
        {
          for (i = 0; i != v12; ++i)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3[1] + 16) + 8 * (i + v106.location)) + 48);
            v20 = (const TAttributes *)(v19 + 40);
            v21 = atomic_load((unint64_t *)(v19 + 56));
            v22 = TAATMorphChain::ResolveFlags((TAATMorphChain *)v15, v15[10], (const TFontFeatureSettingList *)(*(_QWORD *)(v21 + 40) + 168), v20, 0);
            v23 = v22;
            v24 = v119;
            if (v119 >= v120)
            {
              v26 = *(char **)cStr;
              v27 = (uint64_t)&v119[-*(_QWORD *)cStr] >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                abort();
              v29 = (uint64_t)&v120[-*(_QWORD *)cStr];
              if ((uint64_t)&v120[-*(_QWORD *)cStr] >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              v111 = v121;
              if (v30)
              {
                v31 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)v121, v30);
                v26 = *(char **)cStr;
                v24 = v119;
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[4 * v27];
              *(_DWORD *)v32 = v23;
              if (v24 == v26)
              {
                v34 = &v31[4 * v27];
              }
              else
              {
                v33 = v24;
                v34 = &v31[4 * v27];
                do
                {
                  v35 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                while (v33 != v26);
              }
              v25 = v32 + 4;
              *(_QWORD *)cStr = v34;
              v119 = v32 + 4;
              v36 = v120;
              v120 = &v31[4 * v30];
              v109 = v24;
              v110 = v36;
              *(_QWORD *)v107 = v26;
              v108 = v26;
              std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)v107);
            }
            else
            {
              *(_DWORD *)v119 = v22;
              v25 = v24 + 4;
            }
            v119 = v25;
          }
        }
        LODWORD(v106.length) = -1431655766;
        v37 = (*(uint64_t (**)(unsigned int *, CFIndex *))(*(_QWORD *)v15 + 40))(v15, &v106.length);
        if (LODWORD(v106.length))
        {
          v38 = (_DWORD *)v37;
          v39 = 0;
          while (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38) & 1) != 0)
          {
            if (v12 >= 1)
            {
              v40 = 0;
              v41 = v38[2];
              do
              {
                v42 = *(_DWORD *)(*(_QWORD *)cStr + 4 * v40);
                if ((v42 & v41) != 0)
                {
                  v43 = v40 + v106.location;
                  v44 = 1;
                  do
                  {
                    v45 = v44;
                    v46 = v40 + v44;
                    if (v40 + v44 >= v12 || (v41 & v102) != 0)
                      break;
                    v48 = *(_DWORD *)(*(_QWORD *)cStr + 4 * v40 + 4 * v44++) ^ v42;
                  }
                  while ((v48 & v41) == 0);
                  v49 = (const unsigned __int8 *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v15 + 32))(v15, v39);
                  if (!v49
                    || (v127.location = v106.location,
                        v127.length = v12,
                        TRunGlue::CoveredByBitmap((TRunGlue *)v3[1], v49, v127)))
                  {
                    v125.location = v43;
                    v125.length = v45;
                    TRunGlue::SetRunRange((TRunGlue *)v3[1], v125);
                    v50 = (TRunGlue *)v3[1];
                    v116[0] = &off_1E15E0178;
                    v117 = v116;
                    v51 = TRunGlue::GlyphRangeByTrimming(v50, (uint64_t)v116);
                    v53 = v52;
                    v54 = v117;
                    if (v117 == v116)
                    {
                      v54 = v116;
                      v55 = 4;
                      v3 = v105;
LABEL_48:
                      (*(void (**)(void))(*v54 + 8 * v55))();
                    }
                    else
                    {
                      v3 = v105;
                      if (v117)
                      {
                        v55 = 5;
                        goto LABEL_48;
                      }
                    }
                    if (v53)
                    {
                      v56 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v3[1], v51, v53);
                      if (v56)
                      {
                        if (v56 == 5)
                        {
                          *(_QWORD *)v107 = cStr;
                          std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v107);
                          return 0;
                        }
                        *a2 = 1;
                        if (v56 >= 2)
                        {
                          v57 = (TRunGlue *)v3[1];
                          *((_BYTE *)v57 + 592) = 1;
                          if (v56 == 3)
                          {
                            if (TRunGlue::length(v57) > v3[2])
                              break;
                          }
                          else if (v56 == 6)
                          {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  v46 = v40 + 1;
                }
                v40 = v46;
              }
              while (v46 < v12);
            }
            v39 = (v39 + 1);
            length = v106.length;
            if (v39 >= LODWORD(v106.length))
              goto LABEL_59;
          }
          length = v106.length;
LABEL_59:
          if (v39 < length)
          {
            *(_DWORD *)v107 = bswap32(*((_DWORD *)v3 + 7));
            v107[4] = 0;
            v96 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v107, 0);
            v100 = TFont::DebugDescription(*(TFont **)(v3[1] + 616));
            CFLog();

            v92 = *(_QWORD *)(*(_QWORD *)(v3[1] + 616) + 400);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 488))(v92, *((unsigned int *)v3 + 7));
            v3[4] = 0;
            length_high = HIDWORD(v106.length);

            *(_QWORD *)v107 = cStr;
            std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v107);
            v14 = 0;
            goto LABEL_115;
          }
        }
        *(_QWORD *)v107 = cStr;
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v107);
        length_high = v101 + 1;
        if (v101 + 1 >= HIDWORD(v106.length))
          break;
      }
      v14 = 1;
    }
    else
    {
      length_high = 0;
    }
LABEL_115:
    if (length_high < HIDWORD(v106.length))
    {
      *(_DWORD *)cStr = bswap32(*((_DWORD *)v3 + 7));
      cStr[4] = 0;
      v93 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
      v97 = TFont::DebugDescription(*(TFont **)(v3[1] + 616));
      CFLog();

      v89 = *(_QWORD *)(*(_QWORD *)(v3[1] + 616) + 400);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 488))(v89, *((unsigned int *)v3 + 7));
      v3[4] = 0;

      v14 = 0;
    }
    v126.location = v106.location;
    v126.length = v12;
    TRunGlue::SetRunRange((TRunGlue *)v3[1], v126);
    return v14;
  }
  v4 = (TRunGlue *)v3[1];
  v114[0] = &off_1E15E00E8;
  v115 = v114;
  v5 = TRunGlue::GlyphRangeByTrimming(v4, (uint64_t)v114);
  v7 = v6;
  v8 = v115;
  if (v115 == v114)
  {
    v9 = 4;
    v8 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_65;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_65:
  if (v7 < 1)
    return 1;
  v59 = *(_DWORD *)v3[5];
  *(_DWORD *)v107 = -1431655766;
  v60 = (*(uint64_t (**)(uint64_t *, char *))(*v3 + 16))(v3, v107);
  result = 1;
  v62 = 0;
  if (!*(_DWORD *)v107)
    goto LABEL_120;
  v103 = bswap32(v59) >> 16;
  while (2)
  {
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 16))(v60, v103))
      goto LABEL_118;
    v63 = atomic_load((unsigned __int8 *)&qword_1ECDE7528);
    if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7528))
    {
      _MergedGlobals_9 = GetLocaleChangedCount();
      __cxa_guard_release(&qword_1ECDE7528);
    }
    LocaleChangedCount = GetLocaleChangedCount();
    v65 = LocaleChangedCount;
    v66 = _MergedGlobals_9;
    v67 = v3[1];
    v68 = *(_QWORD *)(v67 + 616);
    v69 = (const TFontFeatureSettingList *)(v68 + 168);
    v70 = *(_QWORD *)(v67 + 152);
    if (v70
      && ((v71 = atomic_load((unint64_t *)(v70 + 64))) != 0
        ? (v72 = LocaleChangedCount == _MergedGlobals_9)
        : (v72 = 0),
          v72))
    {
      v77 = (const TAttributes *)(v70 + 40);
      v75 = *(unsigned int *)(v60 + 40);
      v76 = (TAATMorphChain *)v60;
      location = 0;
    }
    else
    {
      if (!v106.location && !v62)
      {
        v73 = *(_DWORD *)(v68 + 4 * *(unsigned __int8 *)(v60 + 64) + 288);
        if (v73)
          v74 = LocaleChangedCount == _MergedGlobals_9;
        else
          v74 = 0;
        if (!v74)
        {
          v73 = TAATMorphChain::ResolveFlags((TAATMorphChain *)v60, *(unsigned int *)(v60 + 40), v69, 0, 0);
          *(_DWORD *)(v68 + 4 * *(unsigned __int8 *)(v60 + 64) + 288) = v73;
          if (v65 != v66)
            _MergedGlobals_9 = v65;
        }
        goto LABEL_86;
      }
      v75 = *(unsigned int *)(v60 + 40);
      v76 = (TAATMorphChain *)v60;
      v77 = 0;
      location = (__CFString *)v106.location;
    }
    v73 = TAATMorphChain::ResolveFlags(v76, v75, v69, v77, location);
LABEL_86:
    LODWORD(v116[0]) = -1431655766;
    v79 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v60 + 40))(v60, v116);
    if (!LODWORD(v116[0]))
      goto LABEL_108;
    v80 = (_DWORD *)v79;
    v81 = 0;
    while ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v80 + 16))(v80))
    {
      if ((v80[2] & v73) == 0)
        goto LABEL_106;
      v82 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, v81);
      if (v82)
      {
        if (!TRunGlue::CoveredByBitmap((TRunGlue *)v3[1], v82, *(CFRange *)(v3[1] + 8)))
          goto LABEL_106;
      }
      v83 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80 + 40))(v80, v3[1], v5, v7);
      if (!v83)
        goto LABEL_106;
      v84 = v83;
      if (v83 == 5)
        return 0;
      *a2 = 1;
      v85 = (TRunGlue *)v3[1];
      if (v84 >= 2)
      {
        *((_BYTE *)v85 + 592) = 1;
        if (v84 == 3)
        {
          if (TRunGlue::length(v85) > v3[2])
            break;
          v85 = (TRunGlue *)v3[1];
        }
        else if (v84 == 6)
        {
          break;
        }
      }
      v112[0] = &off_1E15E0130;
      v113 = v112;
      v5 = TRunGlue::GlyphRangeByTrimming(v85, (uint64_t)v112);
      v7 = v86;
      v87 = v113;
      if (v113 == v112)
      {
        v87 = v112;
        v88 = 4;
      }
      else
      {
        if (!v113)
        {
          v3 = v105;
          goto LABEL_106;
        }
        v88 = 5;
      }
      v3 = v105;
      (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_106:
      v81 = (v81 + 1);
      if (v81 >= LODWORD(v116[0]))
        break;
    }
    if (v81 >= LODWORD(v116[0]))
    {
LABEL_108:
      if (++v62 >= *(_DWORD *)v107)
      {
LABEL_118:
        result = 1;
        goto LABEL_120;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)cStr = bswap32(*((_DWORD *)v3 + 7));
  cStr[4] = 0;
  v94 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
  v98 = TFont::DebugDescription(*(TFont **)(v3[1] + 616));
  CFLog();

  v90 = *(_QWORD *)(*(_QWORD *)(v3[1] + 616) + 400);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 488))(v90, *((unsigned int *)v3 + 7));
  v3[4] = 0;
  v62 = *(_DWORD *)v107;

  result = 0;
LABEL_120:
  if (v62 < *(_DWORD *)v107)
  {
    *(_DWORD *)cStr = bswap32(*((_DWORD *)v3 + 7));
    cStr[4] = 0;
    v95 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
    v99 = TFont::DebugDescription(*(TFont **)(v3[1] + 616));
    CFLog();

    v91 = *(_QWORD *)(*(_QWORD *)(v3[1] + 616) + 400);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 488))(v91, *((unsigned int *)v3 + 7));
    v3[4] = 0;

    return 0;
  }
  return result;
}

uint64_t TAATMorphSubtableMorx::NextSubtable(TAATMorphSubtableMorx *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unint64_t v3;
  char *v5;

  v1 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v1;
  v2 = v1 + 2;
  v3 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 11) > (unint64_t)(v1 + 2) || (unint64_t)(v1 + 3) > v3)
    return 0;
  v5 = (char *)v1 + bswap32(*v1);
  *((_QWORD *)this + 14) = v5;
  if ((unint64_t)v5 > v3)
    return 0;
  *((_DWORD *)this + 2) = bswap32(*v2);
  return 1;
}

uint64_t TAATMorphChainMorx::GetCoverage(TAATMorphChainMorx *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 24);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 25) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

BOOL TRunGlue::CoveredByBitmap(TRunGlue *this, const unsigned __int8 *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned int v17;

  length = a3.length;
  location = a3.location;
  if (*((_QWORD *)this + 19) || (v14 = TRunGlue::length(this), v14 < 1))
  {
LABEL_2:
    if (length < 1)
    {
      return 0;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (1)
      {
        v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * (v7 + location)) + 40);
        v10 = v9[26];
        if (v10 >= 1)
          break;
LABEL_9:
        v8 = ++v7 < length;
        if (v7 == length)
          return v8;
      }
      v11 = (unsigned __int16 *)(*(_QWORD *)(v9[27] + 16) + 2 * v9[25]);
      while (1)
      {
        v13 = *v11++;
        v12 = v13;
        if (*((_QWORD *)this + 78) > (uint64_t)v13 && ((a2[v12 >> 3] >> (v12 & 7)) & 1) != 0)
          break;
        if (!--v10)
          goto LABEL_9;
      }
    }
  }
  else
  {
    v15 = (unsigned __int16 *)(*((_QWORD *)this + 22) + 2 * *((_QWORD *)this + 20));
    while (1)
    {
      v17 = *v15++;
      v16 = v17;
      if (*((_QWORD *)this + 78) > (uint64_t)v17 && ((a2[v16 >> 3] >> (v16 & 7)) & 1) != 0)
        break;
      if (!--v14)
        goto LABEL_2;
    }
    return 1;
  }
  return v8;
}

uint64_t TAATMorphSubtableMorx::Process(TAATMorphSubtableMorx *this, TRunGlue *a2, CFRange a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  TRunGlue *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  TRunGlue *v20;
  uint64_t v21;
  TRunGlue *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  unsigned __int16 *v41;
  _WORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  __int16 v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int Class;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  TRunGlue *v64;
  uint64_t v65;
  BOOL IsDeleted;
  unsigned __int16 *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned int v74;
  uint64_t v75;
  unsigned __int16 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _WORD *v88;
  unsigned __int16 *v89;
  _WORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  int v99;
  __int16 v100;
  int64x2_t v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int *v117;
  unint64_t v118;
  unsigned int *v119;
  unsigned int v121;
  __int16 v123;
  int v124;
  uint64_t *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  TRunGlue *v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  unsigned __int16 *v146;
  _QWORD *v148;
  uint64_t v149;
  TRunGlue *v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _WORD *v155;
  unsigned __int16 *v156;
  uint64_t v157;
  uint64_t v158;
  _WORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  __int16 v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  __int16 v172;
  int64x2_t v173;
  char *v174;
  int v175;
  uint64_t v176;
  SFNTLookupTable *v177;
  const SFNTLookupTable *v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned __int16 *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  TRunGlue *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  unsigned int *v194;
  unint64_t v195;
  unsigned int *v196;
  unsigned int v198;
  __int16 v200;
  int v201;
  uint64_t *v202;
  unsigned int v203;
  int v204;
  unsigned int *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  __int128 v211;
  TRunGlue *v212;
  uint64_t v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int16 *v222;
  char *v224;
  _QWORD *v226;
  uint64_t v227;
  TRunGlue *v228;
  int v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _WORD *v233;
  unsigned __int16 *v234;
  uint64_t v235;
  uint64_t v236;
  _WORD *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  __int16 v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  int v247;
  __int16 v248;
  int64x2_t v249;
  char *v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  int GlyphID;
  TRunGlue *v258;
  uint64_t v259;
  unsigned __int16 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v264;
  unsigned __int16 *v265;
  unsigned int v267;
  unsigned __int16 *v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  _WORD *v275;
  unsigned __int16 *v276;
  _WORD *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  int v286;
  __int16 v287;
  int64x2_t v288;
  uint64_t v289;
  TRunGlue *v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned __int16 *v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  TRunGlue *v299;
  TRunGlue *v300;
  uint64_t v301;
  uint64_t v302;
  BOOL v303;
  unsigned int *v304;
  unint64_t v305;
  unsigned int *v306;
  unsigned int v308;
  unsigned int *v309;
  int v311;
  __int16 v312;
  int v313;
  TRunGlue **v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  __int128 v322;
  TRunGlue *v323;
  uint64_t v324;
  int v325;
  unsigned int v327;
  _OWORD *v328;
  uint64_t v329;
  TRunGlue *v330;
  unsigned __int16 *v331;
  unint64_t v332;
  unint64_t v333;
  unsigned __int16 *v335;
  TRunGlue **v337;
  uint64_t v338;
  TRunGlue *v339;
  int v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _WORD *v344;
  unsigned __int16 *v345;
  uint64_t v346;
  _WORD *v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unsigned int *v351;
  TRunGlue *v352;
  __int16 v353;
  char *v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  int v360;
  __int16 v361;
  int64x2_t v362;
  char *v363;
  uint64_t v364;
  unsigned int v365;
  int64x2_t *v366;
  unint64_t v367;
  unsigned int v368;
  unsigned int v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  BOOL v374;
  unint64_t v375;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  TRunGlue *v381;
  uint64_t v382;
  unsigned int v383;
  unsigned int *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  unsigned int *v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  unsigned int *v392;
  __int16 v393;
  unsigned int v394;
  __int16 v395;
  unsigned int v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __int16 v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned __int16 v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  uint64_t v418;
  unsigned int *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  TRunGlue *v425;
  TRunGlue *v426;
  TRunGlue *v427;
  TRunGlue *v428;
  TRunGlue *v429;
  TRunGlue *v430;
  TRunGlue *v431;
  TRunGlue *v432;
  TRunGlue *v433;
  TRunGlue *v434;
  TRunGlue *v435;
  TRunGlue *v436;
  TRunGlue *v437;
  TRunGlue *v438;
  TRunGlue *v439;
  TRunGlue *v440;
  TRunGlue *v441;
  TRunGlue *v442;
  TRunGlue *v443;
  TRunGlue *v444;
  TRunGlue *v445;
  TRunGlue *v446;
  TRunGlue *v447;
  TRunGlue *v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451[3];
  _OWORD __b[130];
  uint64_t v453;
  void **v454;
  TRunGlue *v455;
  void **p_src;
  uint64_t *v457;
  __int16 *v458;
  __int16 v459;
  uint64_t v460;
  int64x2_t v461;
  char *v462;
  _QWORD v463[3];
  _QWORD *v464;
  void *__src;
  int64x2_t v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 *v482;
  _OWORD v483[128];
  uint64_t v484;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v8 = v7;
  v9 = (TRunGlue *)v4;
  v10 = v3;
  v484 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(v3 + 104);
  v12 = bswap32(*(_DWORD *)(v11 + 4));
  if ((v12 & 0x20000000) == 0 && *(_BYTE *)(v3 + 80) != v12 >> 31)
    return 0;
  if ((v12 & 0x40000000) != 0)
    v13 = -1;
  else
    v13 = 1;
  *(_DWORD *)(v3 + 12) = v13;
  if ((v12 & 0x10000000) != 0)
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(v4 + 24) * v13;
  v14 = *(_QWORD *)(v4 + 16);
  if (v14 == 1)
  {
    memset(__b, 170, sizeof(__b));
    memset(v451, 170, sizeof(v451));
    v449 = 0;
    v450 = -1431655766;
    switch((char)v12)
    {
      case 0:
LABEL_124:
        if ((unint64_t)(v11 + 28) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitRearrangementState(v10, v9, __b))
        {
          return 6;
        }
        if (TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))TAATMorphSubtableMorx::DoRearrangementSubtable(v10, v9, (uint64_t *)__b, (TRunGlue *)v451[1], v451[2], v451[0], v450, (int *)&v449);
        return v449;
      case 1:
        if ((unint64_t)(v11 + 32) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitContextualState(v10, v9, (uint64_t *)__b))
        {
          return 6;
        }
        if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
        v444 = v9;
        v56 = v451[2];
        v57 = v451[0];
        Class = (unsigned __int16)v450;
        v59 = HIWORD(v450);
        v432 = (TRunGlue *)v451[1];
        v421 = *(_QWORD *)(v451[1] + 176) + 2 * *(_QWORD *)(v451[1] + 160);
        v60 = *(unsigned __int16 *)(v421 + 2 * v451[2]);
        memset((char *)&v483[1] + 8, 170, 24);
        memset(v483, 0, 24);
        *(_QWORD *)&v483[3] = (char *)&v483[1] + 8;
        while (2)
        {
          v62 = *((_QWORD *)&__b[1] + 1);
          v61 = *(_QWORD *)&__b[1];
          v64 = (TRunGlue *)*((_QWORD *)&__b[0] + 1);
          v63 = *(_QWORD *)&__b[0];
          v438 = (TRunGlue *)v56;
          v426 = (TRunGlue *)*((_QWORD *)&__b[0] + 1);
LABEL_72:
          if (v57)
          {
            if (v60 == 0xFFFF)
              goto LABEL_92;
            v65 = v63;
            IsDeleted = TRunGlue::IsDeleted(v432, v56);
            v63 = v65;
            if (IsDeleted)
              goto LABEL_92;
          }
          v67 = (unsigned __int16 *)(v61 + 2 * ((_QWORD)v64 * (unsigned __int16)v59 + Class));
          v68 = *(_QWORD *)(v10 + 104);
          v69 = *(_QWORD *)(v10 + 112);
          if (v68 > (unint64_t)v67 || (unint64_t)(v67 + 1) > v69)
            goto LABEL_499;
          v71 = bswap32(*v67) >> 16;
          v72 = (unsigned __int16 *)(v62 + 8 * v71);
          if (v68 > (unint64_t)v72 || (unint64_t)(v72 + 4) > v69)
            goto LABEL_499;
          v74 = *v72;
          v75 = v62;
          v76 = (unsigned __int16 *)(v62 + 8 * v71);
          v77 = v76[1];
          v78 = v76[2];
          v79 = v76[3];
          if (v78 != 0xFFFF)
          {
            v80 = v63;
            v81 = TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v444, __rev16(v78), v444, v63, &v449);
            v63 = v80;
            if (!v81)
              goto LABEL_499;
          }
          v56 = (uint64_t)v438;
          if (v79 != 0xFFFF)
          {
            v82 = __rev16(v79);
            v83 = v63;
            v84 = TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v444, v82, v432, (uint64_t)v438, &v449);
            v63 = v83;
            if (!v84)
            {
LABEL_499:
              *(_QWORD *)&__b[0] = v63;
LABEL_500:
              v366 = (int64x2_t *)v483;
              goto LABEL_501;
            }
          }
          v85 = bswap32(v74) >> 16;
          v86 = (int)bswap32(v77) >> 16;
          if (v86 < 0)
            v63 = (uint64_t)v438;
          if ((v86 & 0x4000) != 0)
          {
            v88 = (_WORD *)*((_QWORD *)&v483[0] + 1);
            v62 = v75;
            v89 = *(unsigned __int16 **)&v483[0];
            if (*(_QWORD *)&v483[0] != *((_QWORD *)&v483[0] + 1))
            {
              while (*v89 != v60 || v89[1] != (unsigned __int16)v59 || v89[2] != (_DWORD)v85)
              {
                v89 += 3;
                if (v89 == *((unsigned __int16 **)&v483[0] + 1))
                {
                  v89 = (unsigned __int16 *)*((_QWORD *)&v483[0] + 1);
                  break;
                }
              }
            }
            if (v89 == *((unsigned __int16 **)&v483[0] + 1))
            {
              *(_QWORD *)&__b[0] = v63;
              if (*((_QWORD *)&v483[0] + 1) >= *(_QWORD *)&v483[1])
              {
                v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v483[0] + 1) - *(_QWORD *)&v483[0]) >> 1);
                v92 = v91 + 1;
                if (v91 + 1 > 0x2AAAAAAAAAAAAAAALL)
                  goto LABEL_521;
                if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) > v92)
                  v92 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) >= 0x1555555555555555)
                  v93 = 0x2AAAAAAAAAAAAAAALL;
                else
                  v93 = v92;
                *((_QWORD *)&v467 + 1) = (char *)&v483[1] + 8;
                if (v93)
                  v94 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)&v483[1] + 8, v93);
                else
                  v94 = 0;
                v95 = &v94[6 * v91];
                *(_WORD *)v95 = v60;
                *((_WORD *)v95 + 1) = v59;
                *((_WORD *)v95 + 2) = v85;
                v96 = *((_QWORD *)&v483[0] + 1);
                v97 = *(_QWORD *)&v483[0];
                if (*((_QWORD *)&v483[0] + 1) == *(_QWORD *)&v483[0])
                {
                  v101 = vdupq_n_s64(*((unint64_t *)&v483[0] + 1));
                  v98 = &v94[6 * v91];
                }
                else
                {
                  v98 = &v94[6 * v91];
                  do
                  {
                    v99 = *(_DWORD *)(v96 - 6);
                    v96 -= 6;
                    v100 = *(_WORD *)(v96 + 4);
                    *(_DWORD *)(v98 - 6) = v99;
                    v98 -= 6;
                    *((_WORD *)v98 + 2) = v100;
                  }
                  while (v96 != v97);
                  v101 = (int64x2_t)v483[0];
                }
                v90 = v95 + 6;
                *(_QWORD *)&v483[0] = v98;
                *((_QWORD *)&v483[0] + 1) = v95 + 6;
                v466 = v101;
                v102 = *(_QWORD *)&v483[1];
                *(_QWORD *)&v483[1] = &v94[6 * v93];
                *(_QWORD *)&v467 = v102;
                __src = (void *)v101.i64[0];
                std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&__src);
              }
              else
              {
                **((_WORD **)&v483[0] + 1) = v60;
                v88[1] = v59;
                v90 = v88 + 3;
                v88[2] = v85;
              }
              *((_QWORD *)&v483[0] + 1) = v90;
              v56 = (uint64_t)v438;
LABEL_121:
              v60 = *(unsigned __int16 *)(v421 + 2 * v56);
              Class = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, v60);
              v59 = v85;
              continue;
            }
            v59 = v85;
          }
          else
          {
            v59 = v85;
            v62 = v75;
          }
          break;
        }
        v64 = v426;
LABEL_92:
        *((_QWORD *)&v483[0] + 1) = *(_QWORD *)&v483[0];
        v87 = v57 - 1;
        if (v57 <= 1)
        {
          Class = 0;
          v57 = 0;
          if (v87)
            goto LABEL_499;
          goto LABEL_72;
        }
        *(_QWORD *)&__b[0] = v63;
        v56 += *(int *)(v10 + 12);
        v85 = v59;
        --v57;
        goto LABEL_121;
      case 2:
        if ((unint64_t)(v11 + 40) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitLigatureState(v10, __b))
        {
          return 6;
        }
        if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
        v446 = v9;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        v182 = v451[1];
        v183 = v451[0];
        v184 = (unsigned __int16)v450;
        v185 = HIWORD(v450);
        v400 = *(_QWORD *)(v451[1] + 176) + 2 * *(_QWORD *)(v451[1] + 160);
        v412 = v451[2];
        v186 = *(unsigned __int16 *)(v400 + 2 * v451[2]);
        memset(v463, 170, sizeof(v463));
        v462 = 0;
        v461 = 0uLL;
        v378 = v451[1];
        v464 = v463;
        v410 = -1;
LABEL_238:
        v414 = *((_QWORD *)&__b[128] + 1);
        v187 = *((_QWORD *)&__b[129] + 1);
        v418 = *(_QWORD *)&__b[129];
        v188 = __b[128];
        v407 = *((_QWORD *)&__b[129] + 1);
        do
        {
          if (!v183)
            goto LABEL_242;
          if ((_DWORD)v186 != 0xFFFF)
          {
            v189 = (TRunGlue *)v182;
            v190 = v182;
            v191 = v186;
            v192 = v183;
            v193 = TRunGlue::IsDeleted(v189, v412);
            v187 = v407;
            v186 = v191;
            v182 = v190;
            v183 = v192;
            if (!v193)
            {
LABEL_242:
              v194 = (unsigned int *)(v418 + 2 * (v414 * (unsigned __int16)v185 + v184));
              v196 = *(unsigned int **)(v10 + 104);
              v195 = *(_QWORD *)(v10 + 112);
              if (v196 > v194 || (unint64_t)v194 + 2 > v195)
                goto LABEL_493;
              if (v181 == (unsigned __int16 *)v194)
              {
                v194 = (unsigned int *)v181;
              }
              else
              {
                v198 = bswap32(*(unsigned __int16 *)v194) >> 16;
                v179 = (unsigned int *)(v187 + 6 * v198);
                if (v196 > v179 || (unint64_t)v179 + 6 > v195)
                  goto LABEL_493;
                v410 = v185;
                v180 = bswap32(*(unsigned __int16 *)(v187 + 6 * v198 + 2)) >> 16;
                v185 = bswap32(*(unsigned __int16 *)v179) >> 16;
              }
              v200 = v180;
              if ((unsigned __int16)v180 >= 0x2000u)
              {
                if ((v180 & 0x8000) != 0)
                {
                  LODWORD(__b[128]) = v188 + 1;
                  if (v188 > 126)
                  {
                    v188 = 0;
                    LODWORD(__b[128]) = 0;
                  }
                  else
                  {
                    v201 = DWORD1(__b[128]);
                    if (v188 + 1 > SDWORD1(__b[128]))
                      v201 = v188 + 1;
                    DWORD1(__b[128]) = v201;
                    ++v188;
                  }
                  v202 = (uint64_t *)&__b[v188];
                  *v202 = v182;
                  v202[1] = v412;
                }
                if ((v180 & 0x2000) == 0)
                  goto LABEL_303;
                v395 = v180;
                v398 = v180;
                if (v188 < 0)
                  goto LABEL_493;
                v380 = v194;
                v383 = v186;
                v386 = v183;
                v389 = v185;
                v392 = v179;
                v203 = bswap32(*((unsigned __int16 *)v179 + 2)) >> 16;
                memset(v483, 170, sizeof(v483));
                v204 = 0;
                v205 = v196 + 3;
                v206 = (uint64_t)v196 + bswap32(v196[7]) + 12;
                v207 = v196[9];
                v208 = (uint64_t)v196 + bswap32(v196[8]) + 12;
                v209 = -1;
                v460 = -1;
                v423 = (char *)v205 + bswap32(v207);
                v459 = -1;
                v210 = v206 + 4 * v203;
                *(_QWORD *)&v211 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v211 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v480 = v211;
                v481 = v211;
                v478 = v211;
                v479 = v211;
                v476 = v211;
                v477 = v211;
                v474 = v211;
                v475 = v211;
                v472 = v211;
                v473 = v211;
                v470 = v211;
                v471 = v211;
                v468 = v211;
                v469 = v211;
                v467 = v211;
                __src = 0;
                v466 = 0uLL;
                v482 = &v467;
                v454 = (void **)v10;
                v455 = v446;
                p_src = &__src;
                v457 = &v460;
                v458 = &v459;
                v212 = (TRunGlue *)((char *)v483 + 8);
                v213 = 1;
                v214 = DWORD1(__b[128]);
                do
                {
                  v434 = (TRunGlue *)v213;
                  v440 = (TRunGlue *)v209;
                  v428 = v212;
                  v215 = *(_QWORD *)(v10 + 104);
                  v216 = *(_QWORD *)(v10 + 112);
                  if (v215 > v210 || v210 + 4 > v216)
                    goto LABEL_492;
                  v210 += 4;
                  while (1)
                  {
                    v218 = bswap32(*(_DWORD *)(v210 - 4));
                    v219 = &__b[v188];
                    v221 = *v219;
                    v220 = v219[1];
                    v222 = (unsigned __int16 *)(v208
                                              + 2
                                              * (*(unsigned __int16 *)(*(_QWORD *)(*v219 + 176)
                                                                     + 2 * *(_QWORD *)(*v219 + 160)
                                                                     + 2 * v220)
                                               + ((int)(4 * v218) >> 2)));
                    if (v215 > (unint64_t)v222 || (unint64_t)(v222 + 1) > v216)
                      goto LABEL_492;
                    v204 += bswap32(*v222) >> 16;
                    if (v218 >> 30)
                      break;
                    v453 = v220;
                    std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)&__src, (char *)__src, &v453);
                    v449 = 1;
                    if (v188 >= 1)
                      --v188;
                    else
                      v188 = v214;
                    v215 = *(_QWORD *)(v10 + 104);
                    if (v215 <= v210)
                    {
                      v216 = *(_QWORD *)(v10 + 112);
                      v210 += 4;
                      if (v210 <= v216)
                        continue;
                    }
                    goto LABEL_492;
                  }
                  v224 = &v423[2 * v204];
                  if (v215 > (unint64_t)v224 || (unint64_t)(v224 + 2) > v216)
                    goto LABEL_492;
                  if (v460 != -1)
                  {
                    TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
                    v466.i64[0] = (uint64_t)__src;
                  }
                  v460 = v220;
                  v459 = bswap32(*(unsigned __int16 *)v224) >> 16;
                  if (v440 == (TRunGlue *)127)
                  {
LABEL_492:
                    v454 = &__src;
                    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v454);
                    goto LABEL_493;
                  }
                  v209 = (uint64_t)v440 + 1;
                  v226 = &v483[(_QWORD)((_QWORD)v440 + 1)];
                  *v226 = v221;
                  v226[1] = v220;
                  v449 = 1;
                  if (v188 >= 1)
                    --v188;
                  else
                    v188 = v214;
                  v228 = v428;
                  v227 = (uint64_t)v434;
                  v213 = (uint64_t)v434 + 1;
                  v212 = (TRunGlue *)((char *)v428 + 16);
                }
                while ((v218 & 0x80000000) == 0);
                LODWORD(__b[128]) = v188;
                TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
                if ((int)v440 < -1)
                {
                  v182 = v378;
                  v194 = v380;
                  v185 = v389;
                  v180 = v398;
                }
                else
                {
                  v182 = v378;
                  v194 = v380;
                  v185 = v389;
                  v180 = v398;
                  do
                  {
                    if (v188 > 126)
                    {
                      v188 = 0;
                    }
                    else
                    {
                      v229 = DWORD1(__b[128]);
                      if (v188 + 1 > SDWORD1(__b[128]))
                        v229 = v188 + 1;
                      DWORD1(__b[128]) = v229;
                      ++v188;
                    }
                    v230 = *(_QWORD *)v228;
                    v231 = &__b[v188];
                    *v231 = *((_QWORD *)v228 - 1);
                    v231[1] = v230;
                    v228 = (TRunGlue *)((char *)v228 - 16);
                    v28 = v227-- <= 1;
                  }
                  while (!v28);
                  LODWORD(__b[128]) = v188;
                }
                v454 = &__src;
                std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v454);
                v179 = v392;
                v183 = v386;
                v186 = v383;
                v187 = v407;
                v200 = v395;
LABEL_303:
                if ((v200 & 0x4000) != 0)
                {
                  v233 = (_WORD *)v461.i64[1];
                  v234 = (unsigned __int16 *)v461.i64[0];
                  if (v461.i64[0] != v461.i64[1])
                  {
                    while (*v234 != (_DWORD)v186 || v234[1] != v410 || v234[2] != (unsigned __int16)v185)
                    {
                      v234 += 3;
                      if (v234 == (unsigned __int16 *)v461.i64[1])
                      {
                        v234 = (unsigned __int16 *)v461.i64[1];
                        break;
                      }
                    }
                  }
                  if (v234 == (unsigned __int16 *)v461.i64[1])
                  {
                    v235 = v185;
                    if (v461.i64[1] < (unint64_t)v462)
                    {
                      v236 = v183;
                      *(_WORD *)v461.i64[1] = v186;
                      v233[1] = v410;
                      v237 = v233 + 3;
                      v233[2] = v235;
                      goto LABEL_333;
                    }
                    v238 = 0xAAAAAAAAAAAAAAABLL * ((v461.i64[1] - v461.i64[0]) >> 1);
                    v239 = v238 + 1;
                    if (v238 + 1 <= 0x2AAAAAAAAAAAAAAALL)
                    {
                      v236 = v183;
                      if (0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1) > v239)
                        v239 = 0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v462[-v461.i64[0]] >> 1) >= 0x1555555555555555)
                        v240 = 0x2AAAAAAAAAAAAAAALL;
                      else
                        v240 = v239;
                      *(_QWORD *)&v483[2] = v463;
                      if (v240)
                      {
                        v241 = v186;
                        v242 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)v463, v240);
                        LOWORD(v186) = v241;
                      }
                      else
                      {
                        v242 = 0;
                      }
                      v243 = &v242[6 * v238];
                      *(_WORD *)v243 = v186;
                      *((_WORD *)v243 + 1) = v410;
                      *((_WORD *)v243 + 2) = v235;
                      v244 = v461.i64[1];
                      v245 = v461.i64[0];
                      if (v461.i64[1] == v461.i64[0])
                      {
                        v249 = vdupq_n_s64(v461.u64[1]);
                        v246 = &v242[6 * v238];
                      }
                      else
                      {
                        v246 = &v242[6 * v238];
                        do
                        {
                          v247 = *(_DWORD *)(v244 - 6);
                          v244 -= 6;
                          v248 = *(_WORD *)(v244 + 4);
                          *(_DWORD *)(v246 - 6) = v247;
                          v246 -= 6;
                          *((_WORD *)v246 + 2) = v248;
                        }
                        while (v244 != v245);
                        v249 = v461;
                      }
                      v237 = v243 + 6;
                      v461.i64[0] = (uint64_t)v246;
                      v461.i64[1] = (uint64_t)(v243 + 6);
                      *(int64x2_t *)((char *)v483 + 8) = v249;
                      v250 = v462;
                      v462 = &v242[6 * v240];
                      *((_QWORD *)&v483[1] + 1) = v250;
                      *(_QWORD *)&v483[0] = v249.i64[0];
                      std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)v483);
LABEL_333:
                      v461.i64[1] = (uint64_t)v237;
                      v181 = (unsigned __int16 *)v194;
                      v185 = v235;
LABEL_334:
                      v251 = *(unsigned __int16 *)(v400 + 2 * v412);
                      v252 = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, *(unsigned __int16 *)(v400 + 2 * v412));
                      v186 = v251;
                      v184 = v252;
                      v183 = v236;
                      goto LABEL_238;
                    }
LABEL_521:
                    abort();
                  }
                }
              }
              v181 = (unsigned __int16 *)v194;
            }
          }
          v461.i64[1] = v461.i64[0];
          v232 = v183 - 1;
          if (v183 > 1)
          {
            v412 += *(int *)(v10 + 12);
            v236 = v183 - 1;
            goto LABEL_334;
          }
          v184 = 0;
          v183 = 0;
        }
        while (!v232);
        goto LABEL_493;
      case 4:
        v177 = *(SFNTLookupTable **)(v10 + 112);
        if (v11 + 14 > (unint64_t)v177)
          return 6;
        v178 = (const SFNTLookupTable *)(v11 + 12);
        switch(bswap32(*(unsigned __int16 *)(v11 + 12)) >> 16)
        {
          case 0u:
            goto LABEL_518;
          case 2u:
          case 4u:
          case 6u:
LABEL_496:
            if (v11 + 18 > (unint64_t)v177)
              return 6;
            v367 = v11 + 24;
            v368 = bswap32(*(unsigned __int16 *)(v11 + 14)) >> 16;
            v369 = *(unsigned __int16 *)(v11 + 16);
            goto LABEL_514;
          case 8u:
LABEL_502:
            v370 = v11 + 18;
            if (v11 + 18 > (unint64_t)v177)
              return 6;
            v371 = bswap32(*(unsigned __int16 *)(v11 + 16)) >> 16;
            v372 = v370 + 2 * v371;
            v373 = v11 + 20 <= (unint64_t)v177 ? ((unint64_t)v177 - v370) >> 1 : 0;
            v374 = v372 <= (unint64_t)v177 && v372 >= v370;
            if (!v374 && v373 != v371)
              return 6;
            goto LABEL_518;
          case 0xAu:
LABEL_512:
            v367 = v11 + 20;
            if (v11 + 20 > (unint64_t)v177)
              return 6;
            v368 = bswap32(*(unsigned __int16 *)(v11 + 14)) >> 16;
            v369 = *(unsigned __int16 *)(v11 + 18);
LABEL_514:
            v375 = v367 + (bswap32(v369) >> 16) * (unint64_t)v368;
            if (v375 < v367 || v375 > (unint64_t)v177)
              return 6;
LABEL_518:
            TAATLookupTable::SetTable(v10 + 24, v178, v177);
            TAATMorphSubtable::DoSwashSubtable((_QWORD *)v10, v9, v8, (uint64_t)v9, v8 + v6, *(_QWORD *)(v10 + 104), &v449);
            break;
          default:
            return 6;
        }
        return v449;
      case 5:
LABEL_128:
        if ((unint64_t)(v11 + 32) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitInsertionState(v10, v9, (uint64_t *)__b))
        {
          return 6;
        }
        if (TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))TAATMorphSubtableMorx::DoInsertionSubtable(v10, v9, (uint64_t *)__b, (TRunGlue *)v451[1], v451[2], v451[0], v450, (int *)&v449);
        return v449;
      default:
        return 6;
    }
  }
  if (!v14)
  {
    memset(__b, 170, sizeof(__b));
    memset(v451, 170, sizeof(v451));
    v449 = 0;
    v450 = -1431655766;
    switch((char)v12)
    {
      case 0:
        goto LABEL_124;
      case 1:
        if ((unint64_t)(v11 + 32) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitContextualState(v10, v9, (uint64_t *)__b))
        {
          return 6;
        }
        if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
        v443 = v9;
        v15 = v451[2];
        v16 = v451[0];
        v17 = (unsigned __int16)v450;
        v18 = HIWORD(v450);
        v425 = (TRunGlue *)v451[1];
        v420 = *(_QWORD *)(v451[1] + 176) + 2 * *(_QWORD *)(v451[1] + 160);
        v19 = *(unsigned __int16 *)(v420 + 2 * v451[2]);
        memset((char *)&v483[1] + 8, 170, 24);
        memset(v483, 0, 24);
        *(_QWORD *)&v483[3] = (char *)&v483[1] + 8;
        while (2)
        {
          v21 = *((_QWORD *)&__b[1] + 1);
          v20 = *(TRunGlue **)&__b[1];
          v22 = (TRunGlue *)*((_QWORD *)&__b[0] + 1);
          v431 = (TRunGlue *)*((_QWORD *)&__b[0] + 1);
          v23 = *(_QWORD *)&__b[0];
          v437 = *(TRunGlue **)&__b[1];
LABEL_16:
          if (v16 && v19 == 0xFFFF)
          {
            v24 = *(_QWORD *)&v483[0];
            goto LABEL_35;
          }
          v25 = (unsigned __int16 *)((char *)v20 + 2 * (_QWORD)v22 * (unsigned __int16)v18 + 2 * v17);
          v26 = *(_QWORD *)(v10 + 104);
          v27 = *(_QWORD *)(v10 + 112);
          v28 = v26 > (unint64_t)v25 || (unint64_t)(v25 + 1) > v27;
          if (!v28)
          {
            v29 = bswap32(*v25) >> 16;
            v30 = (unsigned __int16 *)(v21 + 8 * v29);
            if (v26 <= (unint64_t)v30 && (unint64_t)(v30 + 4) <= v27)
            {
              v32 = *v30;
              v33 = (unsigned __int16 *)(v21 + 8 * v29);
              v34 = v33[1];
              v35 = v33[2];
              v36 = v33[3];
              if ((v35 == 0xFFFF
                 || TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v443, __rev16(v35), v443, v23, &v449))&& (v36 == 0xFFFF|| TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v443, __rev16(v36), v425, v15, &v449)))
              {
                v37 = bswap32(v32) >> 16;
                v38 = (int)bswap32(v34) >> 16;
                if (v38 < 0)
                  v23 = v15;
                v24 = *(_QWORD *)&v483[0];
                if ((v38 & 0x4000) != 0)
                {
                  v40 = (_WORD *)*((_QWORD *)&v483[0] + 1);
                  v41 = *(unsigned __int16 **)&v483[0];
                  if (*(_QWORD *)&v483[0] != *((_QWORD *)&v483[0] + 1))
                  {
                    while (*v41 != v19 || v41[1] != (unsigned __int16)v18 || v41[2] != (_DWORD)v37)
                    {
                      v41 += 3;
                      if (v41 == *((unsigned __int16 **)&v483[0] + 1))
                      {
                        v41 = (unsigned __int16 *)*((_QWORD *)&v483[0] + 1);
                        break;
                      }
                    }
                  }
                  if (v41 == *((unsigned __int16 **)&v483[0] + 1))
                  {
                    *(_QWORD *)&__b[0] = v23;
                    if (*((_QWORD *)&v483[0] + 1) >= *(_QWORD *)&v483[1])
                    {
                      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v483[0] + 1) - *(_QWORD *)&v483[0]) >> 1);
                      v44 = v43 + 1;
                      if (v43 + 1 > 0x2AAAAAAAAAAAAAAALL)
                        goto LABEL_521;
                      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) > v44)
                        v44 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) >= 0x1555555555555555)
                        v45 = 0x2AAAAAAAAAAAAAAALL;
                      else
                        v45 = v44;
                      *((_QWORD *)&v467 + 1) = (char *)&v483[1] + 8;
                      if (v45)
                        v46 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)&v483[1] + 8, v45);
                      else
                        v46 = 0;
                      v47 = &v46[6 * v43];
                      *(_WORD *)v47 = v19;
                      *((_WORD *)v47 + 1) = v18;
                      *((_WORD *)v47 + 2) = v37;
                      v48 = *((_QWORD *)&v483[0] + 1);
                      v49 = *(_QWORD *)&v483[0];
                      if (*((_QWORD *)&v483[0] + 1) == *(_QWORD *)&v483[0])
                      {
                        v53 = vdupq_n_s64(*((unint64_t *)&v483[0] + 1));
                        v50 = &v46[6 * v43];
                      }
                      else
                      {
                        v50 = &v46[6 * v43];
                        do
                        {
                          v51 = *(_DWORD *)(v48 - 6);
                          v48 -= 6;
                          v52 = *(_WORD *)(v48 + 4);
                          *(_DWORD *)(v50 - 6) = v51;
                          v50 -= 6;
                          *((_WORD *)v50 + 2) = v52;
                        }
                        while (v48 != v49);
                        v53 = (int64x2_t)v483[0];
                      }
                      v42 = v47 + 6;
                      *(_QWORD *)&v483[0] = v50;
                      *((_QWORD *)&v483[0] + 1) = v47 + 6;
                      v466 = v53;
                      v54 = *(_QWORD *)&v483[1];
                      *(_QWORD *)&v483[1] = &v46[6 * v45];
                      *(_QWORD *)&v467 = v54;
                      __src = (void *)v53.i64[0];
                      std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&__src);
                    }
                    else
                    {
                      **((_WORD **)&v483[0] + 1) = v19;
                      v40[1] = v18;
                      v42 = v40 + 3;
                      v40[2] = v37;
                    }
                    *((_QWORD *)&v483[0] + 1) = v42;
LABEL_63:
                    v19 = *(unsigned __int16 *)(v420 + 2 * v15);
                    v17 = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, v19);
                    v18 = v37;
                    continue;
                  }
                }
                v18 = v37;
                v22 = v431;
                v20 = v437;
LABEL_35:
                *((_QWORD *)&v483[0] + 1) = v24;
                v39 = v16 - 1;
                if (v16 <= 1)
                {
                  v17 = 0;
                  v16 = 0;
                  if (v39)
                    break;
                  goto LABEL_16;
                }
                *(_QWORD *)&__b[0] = v23;
                v15 += *(int *)(v10 + 12);
                v37 = v18;
                --v16;
                goto LABEL_63;
              }
            }
          }
          break;
        }
LABEL_498:
        *(_QWORD *)&__b[0] = v23;
        goto LABEL_500;
      case 2:
        if ((unint64_t)(v11 + 40) > *(_QWORD *)(v10 + 112)
          || !TAATMorphSubtableMorx::InitLigatureState(v10, __b))
        {
          return 6;
        }
        if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
        v445 = v9;
        v103 = 0;
        v104 = 0;
        v105 = 0;
        v106 = v451[2];
        v107 = v451[0];
        v108 = (unsigned __int16)v450;
        v109 = HIWORD(v450);
        v377 = v451[1];
        v110 = *(_QWORD *)(v451[1] + 176) + 2 * *(_QWORD *)(v451[1] + 160);
        v111 = *(unsigned __int16 *)(v110 + 2 * v451[2]);
        memset(v463, 170, sizeof(v463));
        v462 = 0;
        v461 = 0uLL;
        v464 = v463;
        v112 = 0xFFFFLL;
        v409 = v110;
LABEL_136:
        v113 = *(_QWORD *)&__b[129];
        v114 = *((_QWORD *)&__b[128] + 1);
        v115 = *((_QWORD *)&__b[129] + 1);
        v116 = __b[128];
        while (2)
        {
          if (v107 && v111 == 0xFFFF)
            goto LABEL_202;
          v117 = (unsigned int *)(v113 + 2 * (v114 * (unsigned __int16)v109 + v108));
          v119 = *(unsigned int **)(v10 + 104);
          v118 = *(_QWORD *)(v10 + 112);
          if (v119 > v117 || (unint64_t)v117 + 2 > v118)
            goto LABEL_493;
          if (v105 == (unsigned __int16 *)v117)
          {
            v117 = (unsigned int *)v105;
            goto LABEL_150;
          }
          v121 = bswap32(*(unsigned __int16 *)v117) >> 16;
          v103 = (unsigned int *)(v115 + 6 * v121);
          if (v119 <= v103 && (unint64_t)v103 + 6 <= v118)
          {
            v112 = v109;
            v104 = bswap32(*(unsigned __int16 *)(v115 + 6 * v121 + 2)) >> 16;
            v109 = bswap32(*(unsigned __int16 *)v103) >> 16;
LABEL_150:
            v123 = v104;
            if ((unsigned __int16)v104 < 0x2000u)
              goto LABEL_201;
            if ((v104 & 0x8000) != 0)
            {
              LODWORD(__b[128]) = v116 + 1;
              if (v116 > 126)
              {
                v116 = 0;
                LODWORD(__b[128]) = 0;
              }
              else
              {
                v124 = DWORD1(__b[128]);
                if (v116 + 1 > SDWORD1(__b[128]))
                  v124 = v116 + 1;
                DWORD1(__b[128]) = v124;
                ++v116;
              }
              v125 = (uint64_t *)&__b[v116];
              *v125 = v377;
              v125[1] = v106;
            }
            if ((v104 & 0x2000) != 0)
            {
              v406 = v104;
              if (v116 < 0)
                goto LABEL_493;
              v379 = v115;
              v382 = v114;
              v385 = v113;
              v388 = v117;
              v391 = v111;
              v394 = v112;
              v397 = v107;
              v399 = v109;
              v416 = v104;
              v401 = v103;
              v403 = v106;
              v126 = bswap32(*((unsigned __int16 *)v103 + 2)) >> 16;
              memset(v483, 170, sizeof(v483));
              v127 = 0;
              v128 = (uint64_t)v119 + bswap32(v119[7]) + 12;
              v129 = v119[9];
              v130 = (uint64_t)v119 + bswap32(v119[8]) + 12;
              v131 = -1;
              v460 = -1;
              v422 = (uint64_t)v119 + bswap32(v129) + 12;
              v459 = -1;
              v132 = v128 + 4 * v126;
              *(_QWORD *)&v133 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v480 = v133;
              v481 = v133;
              v478 = v133;
              v479 = v133;
              v476 = v133;
              v477 = v133;
              v474 = v133;
              v475 = v133;
              v472 = v133;
              v473 = v133;
              v470 = v133;
              v471 = v133;
              v468 = v133;
              v469 = v133;
              v467 = v133;
              __src = 0;
              v466 = 0uLL;
              v482 = &v467;
              v454 = (void **)v10;
              v455 = v445;
              p_src = &__src;
              v457 = &v460;
              v458 = &v459;
              v134 = (TRunGlue *)((char *)v483 + 8);
              v135 = 1;
              v136 = DWORD1(__b[128]);
              do
              {
                v433 = (TRunGlue *)v135;
                v439 = (TRunGlue *)v131;
                v427 = v134;
                v137 = *(_QWORD *)(v10 + 104);
                v138 = *(_QWORD *)(v10 + 112);
                if (v137 > v132 || v132 + 4 > v138)
                  goto LABEL_492;
                v132 += 4;
                while (1)
                {
                  v140 = bswap32(*(_DWORD *)(v132 - 4));
                  v141 = &__b[v116];
                  v142 = *v141;
                  v143 = v141[1];
                  v144 = (unsigned __int16 *)(v130
                                            + 2
                                            * (*(unsigned __int16 *)(*(_QWORD *)(*v141 + 176)
                                                                   + 2 * *(_QWORD *)(*v141 + 160)
                                                                   + 2 * v143)
                                             + ((int)(4 * v140) >> 2)));
                  if (v137 > (unint64_t)v144 || (unint64_t)(v144 + 1) > v138)
                    goto LABEL_492;
                  v127 += bswap32(*v144) >> 16;
                  if (v140 >> 30)
                    break;
                  v453 = v143;
                  std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)&__src, (char *)__src, &v453);
                  v449 = 1;
                  if (v116 >= 1)
                    --v116;
                  else
                    v116 = v136;
                  v137 = *(_QWORD *)(v10 + 104);
                  if (v137 <= v132)
                  {
                    v138 = *(_QWORD *)(v10 + 112);
                    v132 += 4;
                    if (v132 <= v138)
                      continue;
                  }
                  goto LABEL_492;
                }
                v146 = (unsigned __int16 *)(v422 + 2 * v127);
                if (v137 > (unint64_t)v146 || (unint64_t)(v146 + 1) > v138)
                  goto LABEL_492;
                if (v460 != -1)
                {
                  TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
                  v466.i64[0] = (uint64_t)__src;
                }
                v460 = v143;
                v459 = bswap32(*v146) >> 16;
                if (v439 == (TRunGlue *)127)
                  goto LABEL_492;
                v131 = (uint64_t)v439 + 1;
                v148 = &v483[(_QWORD)((_QWORD)v439 + 1)];
                *v148 = v142;
                v148[1] = v143;
                v449 = 1;
                if (v116 >= 1)
                  --v116;
                else
                  v116 = v136;
                v150 = v427;
                v149 = (uint64_t)v433;
                v135 = (uint64_t)v433 + 1;
                v134 = (TRunGlue *)((char *)v427 + 16);
              }
              while ((v140 & 0x80000000) == 0);
              LODWORD(__b[128]) = v116;
              TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
              if ((int)v439 < -1)
              {
                v103 = v401;
                v106 = v403;
                v109 = v399;
                v104 = v416;
              }
              else
              {
                v103 = v401;
                v106 = v403;
                v109 = v399;
                v104 = v416;
                do
                {
                  if (v116 > 126)
                  {
                    v116 = 0;
                  }
                  else
                  {
                    v151 = DWORD1(__b[128]);
                    if (v116 + 1 > SDWORD1(__b[128]))
                      v151 = v116 + 1;
                    DWORD1(__b[128]) = v151;
                    ++v116;
                  }
                  v152 = *(_QWORD *)v150;
                  v153 = &__b[v116];
                  *v153 = *((_QWORD *)v150 - 1);
                  v153[1] = v152;
                  v150 = (TRunGlue *)((char *)v150 - 16);
                  v28 = v149-- <= 1;
                }
                while (!v28);
                LODWORD(__b[128]) = v116;
              }
              v117 = v388;
              v454 = &__src;
              std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v454);
              v110 = v409;
              v107 = v397;
              v112 = v394;
              v111 = v391;
              v114 = v382;
              v113 = v385;
              v115 = v379;
              v123 = v406;
            }
            if ((v123 & 0x4000) == 0)
              goto LABEL_201;
            v155 = (_WORD *)v461.i64[1];
            v156 = (unsigned __int16 *)v461.i64[0];
            if (v461.i64[0] != v461.i64[1])
            {
              while (*v156 != v111 || v156[1] != (unsigned __int16)v112 || v156[2] != (unsigned __int16)v109)
              {
                v156 += 3;
                if (v156 == (unsigned __int16 *)v461.i64[1])
                {
                  v156 = (unsigned __int16 *)v461.i64[1];
                  break;
                }
              }
            }
            if (v156 == (unsigned __int16 *)v461.i64[1])
            {
              v417 = v104;
              if (v461.i64[1] >= (unint64_t)v462)
              {
                v160 = 0xAAAAAAAAAAAAAAABLL * ((v461.i64[1] - v461.i64[0]) >> 1);
                v161 = v160 + 1;
                if (v160 + 1 > 0x2AAAAAAAAAAAAAAALL)
                  goto LABEL_521;
                v162 = v106;
                v157 = v107;
                if (0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1) > v161)
                  v161 = 0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v462[-v461.i64[0]] >> 1) >= 0x1555555555555555)
                  v163 = 0x2AAAAAAAAAAAAAAALL;
                else
                  v163 = v161;
                *(_QWORD *)&v483[2] = v463;
                if (v163)
                {
                  v164 = v111;
                  v165 = v112;
                  v166 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)v463, v163);
                  LOWORD(v111) = v164;
                  v112 = v165;
                }
                else
                {
                  v166 = 0;
                }
                v167 = &v166[6 * v160];
                *(_WORD *)v167 = v111;
                *((_WORD *)v167 + 1) = v112;
                *((_WORD *)v167 + 2) = v109;
                v168 = v461.i64[1];
                v169 = v461.i64[0];
                if (v461.i64[1] == v461.i64[0])
                {
                  v158 = v112;
                  v173 = vdupq_n_s64(v461.u64[1]);
                  v170 = &v166[6 * v160];
                }
                else
                {
                  v170 = &v166[6 * v160];
                  do
                  {
                    v171 = *(_DWORD *)(v168 - 6);
                    v168 -= 6;
                    v172 = *(_WORD *)(v168 + 4);
                    *(_DWORD *)(v170 - 6) = v171;
                    v170 -= 6;
                    *((_WORD *)v170 + 2) = v172;
                  }
                  while (v168 != v169);
                  v158 = v112;
                  v173 = v461;
                }
                v159 = v167 + 6;
                v461.i64[0] = (uint64_t)v170;
                v461.i64[1] = (uint64_t)(v167 + 6);
                *(int64x2_t *)((char *)v483 + 8) = v173;
                v174 = v462;
                v462 = &v166[6 * v163];
                *((_QWORD *)&v483[1] + 1) = v174;
                *(_QWORD *)&v483[0] = v173.i64[0];
                std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)v483);
                v110 = v409;
                v106 = v162;
              }
              else
              {
                v157 = v107;
                *(_WORD *)v461.i64[1] = v111;
                v158 = v112;
                v155[1] = v112;
                v159 = v155 + 3;
                v155[2] = v109;
              }
              v461.i64[1] = (uint64_t)v159;
              v105 = (unsigned __int16 *)v117;
              v104 = v417;
            }
            else
            {
LABEL_201:
              v105 = (unsigned __int16 *)v117;
LABEL_202:
              v461.i64[1] = v461.i64[0];
              v154 = v107 - 1;
              if (v107 <= 1)
              {
                v108 = 0;
                v107 = 0;
                if (v154)
                  goto LABEL_493;
                continue;
              }
              v158 = v112;
              v106 += *(int *)(v10 + 12);
              v157 = v107 - 1;
            }
            v175 = *(unsigned __int16 *)(v110 + 2 * v106);
            v176 = v110;
            v108 = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, v175);
            v110 = v176;
            v111 = v175;
            v107 = v157;
            v112 = v158;
            goto LABEL_136;
          }
          break;
        }
        break;
      case 4:
        v177 = *(SFNTLookupTable **)(v10 + 112);
        if (v11 + 14 <= (unint64_t)v177)
        {
          v178 = (const SFNTLookupTable *)(v11 + 12);
          switch(bswap32(*(unsigned __int16 *)(v11 + 12)) >> 16)
          {
            case 0u:
              goto LABEL_518;
            case 2u:
            case 4u:
            case 6u:
              goto LABEL_496;
            case 8u:
              goto LABEL_502;
            case 0xAu:
              goto LABEL_512;
            default:
              return 6;
          }
        }
        return 6;
      case 5:
        goto LABEL_128;
      default:
        return 6;
    }
    goto LABEL_493;
  }
  memset(__b, 170, sizeof(__b));
  memset(v451, 170, sizeof(v451));
  v449 = 0;
  v450 = -1431655766;
  switch((char)v12)
  {
    case 0:
      goto LABEL_124;
    case 1:
      if ((unint64_t)(v11 + 32) > *(_QWORD *)(v10 + 112)
        || !TAATMorphSubtableMorx::InitContextualState(v10, v9, (uint64_t *)__b))
      {
        return 6;
      }
      if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
      v447 = v9;
      v253 = v451[2];
      v254 = v451[0];
      v255 = (unsigned __int16)v450;
      v256 = HIWORD(v450);
      v441 = (TRunGlue *)v451[1];
      GlyphID = TRunGlue::GetGlyphID((TRunGlue *)v451[1], v451[2]);
      memset((char *)&v483[1] + 8, 170, 24);
      memset(v483, 0, 24);
      *(_QWORD *)&v483[3] = (char *)&v483[1] + 8;
      while (2)
      {
        v259 = *((_QWORD *)&__b[1] + 1);
        v258 = *(TRunGlue **)&__b[1];
        v23 = *(_QWORD *)&__b[0];
        v429 = *(TRunGlue **)&__b[1];
        v435 = (TRunGlue *)*((_QWORD *)&__b[0] + 1);
        while (2)
        {
          if (v254 && (GlyphID == 0xFFFF || TRunGlue::IsDeleted(v441, v253)))
            goto LABEL_361;
          v260 = (unsigned __int16 *)((char *)v258 + 2 * (_QWORD)v435 * (unsigned __int16)v256 + 2 * v255);
          v261 = *(_QWORD *)(v10 + 104);
          v262 = *(_QWORD *)(v10 + 112);
          if (v261 > (unint64_t)v260 || (unint64_t)(v260 + 1) > v262)
            goto LABEL_498;
          v264 = bswap32(*v260) >> 16;
          v265 = (unsigned __int16 *)(v259 + 8 * v264);
          if (v261 > (unint64_t)v265 || (unint64_t)(v265 + 4) > v262)
            goto LABEL_498;
          v267 = *v265;
          v268 = (unsigned __int16 *)(v259 + 8 * v264);
          v269 = v268[1];
          v270 = v268[2];
          v271 = v268[3];
          if (v270 != 0xFFFF
            && !TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v447, __rev16(v270), v447, v23, &v449))
          {
            goto LABEL_498;
          }
          if (v271 != 0xFFFF
            && !TAATMorphSubtableMorx::DoContextualSubstitution(v10, (uint64_t)v447, __rev16(v271), v441, v253, &v449))
          {
            goto LABEL_498;
          }
          v272 = bswap32(v267) >> 16;
          v273 = (int)bswap32(v269) >> 16;
          if (v273 < 0)
            v23 = v253;
          if ((v273 & 0x4000) == 0)
            goto LABEL_360;
          v275 = (_WORD *)*((_QWORD *)&v483[0] + 1);
          v276 = *(unsigned __int16 **)&v483[0];
          if (*(_QWORD *)&v483[0] != *((_QWORD *)&v483[0] + 1))
          {
            while (*v276 != GlyphID || v276[1] != (unsigned __int16)v256 || v276[2] != (_DWORD)v272)
            {
              v276 += 3;
              if (v276 == *((unsigned __int16 **)&v483[0] + 1))
              {
                v276 = (unsigned __int16 *)*((_QWORD *)&v483[0] + 1);
                break;
              }
            }
          }
          if (v276 == *((unsigned __int16 **)&v483[0] + 1))
          {
            *(_QWORD *)&__b[0] = v23;
            if (*((_QWORD *)&v483[0] + 1) >= *(_QWORD *)&v483[1])
            {
              v278 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v483[0] + 1) - *(_QWORD *)&v483[0]) >> 1);
              v279 = v278 + 1;
              if (v278 + 1 > 0x2AAAAAAAAAAAAAAALL)
                goto LABEL_521;
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) > v279)
                v279 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v483[1] - *(_QWORD *)&v483[0]) >> 1) >= 0x1555555555555555)
                v280 = 0x2AAAAAAAAAAAAAAALL;
              else
                v280 = v279;
              *((_QWORD *)&v467 + 1) = (char *)&v483[1] + 8;
              if (v280)
                v281 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)&v483[1] + 8, v280);
              else
                v281 = 0;
              v282 = &v281[6 * v278];
              *(_WORD *)v282 = GlyphID;
              *((_WORD *)v282 + 1) = v256;
              *((_WORD *)v282 + 2) = v272;
              v283 = *((_QWORD *)&v483[0] + 1);
              v284 = *(_QWORD *)&v483[0];
              if (*((_QWORD *)&v483[0] + 1) == *(_QWORD *)&v483[0])
              {
                v288 = vdupq_n_s64(*((unint64_t *)&v483[0] + 1));
                v285 = &v281[6 * v278];
              }
              else
              {
                v285 = &v281[6 * v278];
                do
                {
                  v286 = *(_DWORD *)(v283 - 6);
                  v283 -= 6;
                  v287 = *(_WORD *)(v283 + 4);
                  *(_DWORD *)(v285 - 6) = v286;
                  v285 -= 6;
                  *((_WORD *)v285 + 2) = v287;
                }
                while (v283 != v284);
                v288 = (int64x2_t)v483[0];
              }
              v277 = v282 + 6;
              *(_QWORD *)&v483[0] = v285;
              *((_QWORD *)&v483[0] + 1) = v282 + 6;
              v466 = v288;
              v289 = *(_QWORD *)&v483[1];
              *(_QWORD *)&v483[1] = &v281[6 * v280];
              *(_QWORD *)&v467 = v289;
              __src = (void *)v288.i64[0];
              std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&__src);
            }
            else
            {
              **((_WORD **)&v483[0] + 1) = GlyphID;
              v275[1] = v256;
              v277 = v275 + 3;
              v275[2] = v272;
            }
            *((_QWORD *)&v483[0] + 1) = v277;
          }
          else
          {
LABEL_360:
            v256 = v272;
            v258 = v429;
LABEL_361:
            *((_QWORD *)&v483[0] + 1) = *(_QWORD *)&v483[0];
            v274 = v254 - 1;
            if (v254 <= 1)
            {
              v255 = 0;
              v254 = 0;
              if (v274)
                goto LABEL_498;
              continue;
            }
            *(_QWORD *)&__b[0] = v23;
            v253 += *(int *)(v10 + 12);
            v272 = v256;
            --v254;
          }
          break;
        }
        GlyphID = TRunGlue::GetGlyphID(v441, v253);
        v255 = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, GlyphID);
        v256 = v272;
        continue;
      }
    case 2:
      if ((unint64_t)(v11 + 40) > *(_QWORD *)(v10 + 112)
        || !TAATMorphSubtableMorx::InitLigatureState(v10, __b))
      {
        return 6;
      }
      if (!TAATMorphSubtableMorx::FetchInitialClass((TAATMorphSubtableMorx *)v10, v9, v8, v6, (TRunGlue **)&v451[1], v451, &v450))return v449;
      v290 = (TRunGlue *)v451[1];
      v404 = v451[0];
      v408 = v451[2];
      v291 = (unsigned __int16)v450;
      v292 = HIWORD(v450);
      v293 = TRunGlue::GetGlyphID((TRunGlue *)v451[1], v451[2]);
      v419 = 0;
      v294 = 0;
      v295 = 0;
      memset(v463, 170, sizeof(v463));
      v462 = 0;
      v461 = 0uLL;
      v381 = v290;
      v464 = v463;
      v415 = 0xFFFF;
      v448 = v9;
LABEL_395:
      v411 = *((_QWORD *)&__b[128] + 1);
      v296 = *((_QWORD *)&__b[129] + 1);
      v413 = *(_QWORD *)&__b[129];
      v297 = __b[128];
      v298 = v404;
      v402 = *((_QWORD *)&__b[129] + 1);
      while (2)
      {
        if (v298)
        {
          if ((_DWORD)v293 == 0xFFFF)
            goto LABEL_462;
          v299 = v290;
          v300 = v290;
          v301 = v293;
          v302 = v298;
          v303 = TRunGlue::IsDeleted(v299, v408);
          v296 = v402;
          v293 = v301;
          v290 = v300;
          v298 = v302;
          if (v303)
            goto LABEL_462;
        }
        v304 = (unsigned int *)(v413 + 2 * (v411 * (unsigned __int16)v292 + v291));
        v306 = *(unsigned int **)(v10 + 104);
        v305 = *(_QWORD *)(v10 + 112);
        if (v306 > v304 || (unint64_t)v304 + 2 > v305)
          break;
        if (v295 == (unsigned __int16 *)v304)
        {
          v304 = (unsigned int *)v295;
          v311 = v415;
          goto LABEL_410;
        }
        v308 = bswap32(*(unsigned __int16 *)v304) >> 16;
        v309 = (unsigned int *)(v296 + 6 * v308);
        v419 = v309;
        if (v306 <= v309 && (unint64_t)v309 + 6 <= v305)
        {
          v311 = v292;
          v294 = bswap32(*(unsigned __int16 *)(v296 + 6 * v308 + 2)) >> 16;
          v292 = bswap32(*(unsigned __int16 *)v309) >> 16;
LABEL_410:
          v312 = v294;
          v415 = v311;
          if ((unsigned __int16)v294 < 0x2000u)
            goto LABEL_461;
          if ((v294 & 0x8000) != 0)
          {
            LODWORD(__b[128]) = v297 + 1;
            if (v297 > 126)
            {
              v297 = 0;
              LODWORD(__b[128]) = 0;
            }
            else
            {
              v313 = DWORD1(__b[128]);
              if (v297 + 1 > SDWORD1(__b[128]))
                v313 = v297 + 1;
              DWORD1(__b[128]) = v313;
              ++v297;
            }
            v314 = (TRunGlue **)&__b[v297];
            *v314 = v290;
            v314[1] = (TRunGlue *)v408;
          }
          if ((v294 & 0x2000) != 0)
          {
            v393 = v294;
            v396 = v294;
            if (v297 < 0)
              break;
            v384 = v304;
            v387 = v293;
            v405 = v298;
            v390 = v292;
            v315 = bswap32(*((unsigned __int16 *)v419 + 2)) >> 16;
            memset(v483, 170, sizeof(v483));
            v316 = 0;
            v317 = (uint64_t)v306 + bswap32(v306[7]) + 12;
            v318 = v306[9];
            v319 = (uint64_t)v306 + bswap32(v306[8]) + 12;
            v320 = -1;
            v460 = -1;
            v424 = (uint64_t)v306 + bswap32(v318) + 12;
            v459 = -1;
            v321 = v317 + 4 * v315;
            *(_QWORD *)&v322 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v322 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v480 = v322;
            v481 = v322;
            v478 = v322;
            v479 = v322;
            v476 = v322;
            v477 = v322;
            v474 = v322;
            v475 = v322;
            v472 = v322;
            v473 = v322;
            v470 = v322;
            v471 = v322;
            v468 = v322;
            v469 = v322;
            v467 = v322;
            __src = 0;
            v466 = 0uLL;
            v482 = &v467;
            v454 = (void **)v10;
            v455 = v9;
            p_src = &__src;
            v457 = &v460;
            v458 = &v459;
            v323 = (TRunGlue *)((char *)v483 + 8);
            v324 = 1;
            v325 = DWORD1(__b[128]);
            do
            {
              v436 = (TRunGlue *)v324;
              v442 = (TRunGlue *)v320;
              v430 = v323;
              if (*(_QWORD *)(v10 + 104) > v321 || v321 + 4 > *(_QWORD *)(v10 + 112))
                goto LABEL_492;
              v321 += 4;
              while (1)
              {
                v327 = bswap32(*(_DWORD *)(v321 - 4));
                v328 = &__b[v297];
                v330 = *(TRunGlue **)v328;
                v329 = *((_QWORD *)v328 + 1);
                v331 = (unsigned __int16 *)(v319
                                          + 2
                                          * (int)(TRunGlue::GetGlyphID(*(TRunGlue **)v328, v329) + ((int)(4 * v327) >> 2)));
                v332 = *(_QWORD *)(v10 + 104);
                v333 = *(_QWORD *)(v10 + 112);
                if (v332 > (unint64_t)v331 || (unint64_t)(v331 + 1) > v333)
                  goto LABEL_492;
                v316 += bswap32(*v331) >> 16;
                if (v327 >> 30)
                  break;
                v453 = v329;
                std::vector<long,TInlineBufferAllocator<long,30ul>>::insert((uint64_t)&__src, (char *)__src, &v453);
                v449 = 1;
                if (v297 >= 1)
                  --v297;
                else
                  v297 = v325;
                if (*(_QWORD *)(v10 + 104) <= v321)
                {
                  v321 += 4;
                  if (v321 <= *(_QWORD *)(v10 + 112))
                    continue;
                }
                goto LABEL_492;
              }
              v335 = (unsigned __int16 *)(v424 + 2 * v316);
              if (v332 > (unint64_t)v335 || (unint64_t)(v335 + 1) > v333)
                goto LABEL_492;
              if (v460 != -1)
              {
                TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
                v466.i64[0] = (uint64_t)__src;
              }
              v460 = v329;
              v459 = bswap32(*v335) >> 16;
              if (v442 == (TRunGlue *)127)
                goto LABEL_492;
              v320 = (uint64_t)v442 + 1;
              v337 = (TRunGlue **)&v483[(_QWORD)((_QWORD)v442 + 1)];
              *v337 = v330;
              v337[1] = (TRunGlue *)v329;
              v449 = 1;
              if (v297 >= 1)
                --v297;
              else
                v297 = v325;
              v339 = v430;
              v338 = (uint64_t)v436;
              v324 = (uint64_t)v436 + 1;
              v323 = (TRunGlue *)((char *)v430 + 16);
            }
            while ((v327 & 0x80000000) == 0);
            LODWORD(__b[128]) = v297;
            TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()((uint64_t)&v454);
            if ((int)v442 < -1)
            {
              v290 = v381;
              v292 = v390;
              v294 = v396;
              LOWORD(v311) = v415;
            }
            else
            {
              v290 = v381;
              v292 = v390;
              v294 = v396;
              LOWORD(v311) = v415;
              do
              {
                if (v297 > 126)
                {
                  v297 = 0;
                }
                else
                {
                  v340 = DWORD1(__b[128]);
                  if (v297 + 1 > SDWORD1(__b[128]))
                    v340 = v297 + 1;
                  DWORD1(__b[128]) = v340;
                  ++v297;
                }
                v341 = *(_QWORD *)v339;
                v342 = &__b[v297];
                *v342 = *((_QWORD *)v339 - 1);
                v342[1] = v341;
                v339 = (TRunGlue *)((char *)v339 - 16);
                v28 = v338-- <= 1;
              }
              while (!v28);
              LODWORD(__b[128]) = v297;
            }
            v304 = v384;
            v454 = &__src;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v454);
            v9 = v448;
            v296 = v402;
            v298 = v405;
            v293 = v387;
            v312 = v393;
          }
          if ((v312 & 0x4000) == 0)
            goto LABEL_461;
          v344 = (_WORD *)v461.i64[1];
          v345 = (unsigned __int16 *)v461.i64[0];
          if (v461.i64[0] != v461.i64[1])
          {
            while (*v345 != (_DWORD)v293 || v345[1] != (unsigned __int16)v311 || v345[2] != (unsigned __int16)v292)
            {
              v345 += 3;
              if (v345 == (unsigned __int16 *)v461.i64[1])
              {
                v345 = (unsigned __int16 *)v461.i64[1];
                break;
              }
            }
          }
          if (v345 == (unsigned __int16 *)v461.i64[1])
          {
            v346 = v292;
            v404 = v298;
            if (v461.i64[1] >= (unint64_t)v462)
            {
              v348 = 0xAAAAAAAAAAAAAAABLL * ((v461.i64[1] - v461.i64[0]) >> 1);
              v349 = v348 + 1;
              if (v348 + 1 > 0x2AAAAAAAAAAAAAAALL)
                goto LABEL_521;
              if (0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1) > v349)
                v349 = 0x5555555555555556 * ((uint64_t)&v462[-v461.i64[0]] >> 1);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v462[-v461.i64[0]] >> 1) >= 0x1555555555555555)
                v350 = 0x2AAAAAAAAAAAAAAALL;
              else
                v350 = v349;
              *(_QWORD *)&v483[2] = v463;
              if (v350)
              {
                v351 = v304;
                v352 = v290;
                v353 = v293;
                v354 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)v463, v350);
                LOWORD(v293) = v353;
                v290 = v352;
                v304 = v351;
              }
              else
              {
                v354 = 0;
              }
              v356 = &v354[6 * v348];
              *(_WORD *)v356 = v293;
              *((_WORD *)v356 + 1) = v311;
              *((_WORD *)v356 + 2) = v346;
              v357 = v461.i64[1];
              v358 = v461.i64[0];
              if (v461.i64[1] == v461.i64[0])
              {
                v362 = vdupq_n_s64(v461.u64[1]);
                v359 = &v354[6 * v348];
              }
              else
              {
                v359 = &v354[6 * v348];
                do
                {
                  v360 = *(_DWORD *)(v357 - 6);
                  v357 -= 6;
                  v361 = *(_WORD *)(v357 + 4);
                  *(_DWORD *)(v359 - 6) = v360;
                  v359 -= 6;
                  *((_WORD *)v359 + 2) = v361;
                }
                while (v357 != v358);
                v362 = v461;
              }
              v347 = v356 + 6;
              v461.i64[0] = (uint64_t)v359;
              v461.i64[1] = (uint64_t)(v356 + 6);
              *(int64x2_t *)((char *)v483 + 8) = v362;
              v363 = v462;
              v462 = &v354[6 * v350];
              *((_QWORD *)&v483[1] + 1) = v363;
              *(_QWORD *)&v483[0] = v362.i64[0];
              std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)v483);
            }
            else
            {
              *(_WORD *)v461.i64[1] = v293;
              v344[1] = v311;
              v347 = v344 + 3;
              v344[2] = v346;
            }
            v461.i64[1] = (uint64_t)v347;
            v295 = (unsigned __int16 *)v304;
            v292 = v346;
            v355 = TRunGlue::GetGlyphID(v290, v408);
          }
          else
          {
LABEL_461:
            v295 = (unsigned __int16 *)v304;
LABEL_462:
            v461.i64[1] = v461.i64[0];
            v343 = v298 - 1;
            if (v298 <= 1)
            {
              v291 = 0;
              v298 = 0;
              if (v343)
                break;
              continue;
            }
            v404 = v298 - 1;
            v408 += *(int *)(v10 + 12);
            v355 = TRunGlue::GetGlyphID(v290, v408);
          }
          v364 = v355;
          v365 = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)v10, v355);
          v293 = v364;
          v291 = v365;
          goto LABEL_395;
        }
        break;
      }
LABEL_493:
      v366 = &v461;
LABEL_501:
      std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v366);
      return v449;
    case 4:
      v177 = *(SFNTLookupTable **)(v10 + 112);
      if (v11 + 14 <= (unint64_t)v177)
      {
        v178 = (const SFNTLookupTable *)(v11 + 12);
        switch(bswap32(*(unsigned __int16 *)(v11 + 12)) >> 16)
        {
          case 0u:
            goto LABEL_518;
          case 2u:
          case 4u:
          case 6u:
            goto LABEL_496;
          case 8u:
            goto LABEL_502;
          case 0xAu:
            goto LABEL_512;
          default:
            return 6;
        }
      }
      return 6;
    case 5:
      goto LABEL_128;
    default:
      return 6;
  }
}

uint64_t TAATMorphSubtableMorx::InitLigatureState(uint64_t a1, _QWORD *a2)
{
  SFNTLookupTable *v3;
  unsigned int *v4;
  unsigned int *v5;
  const SFNTLookupTable *v6;
  uint64_t v7;
  UInt8 *values;
  unsigned int v9;
  unsigned int nUnits;
  SFNTLookupValue *p_searchRange;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v17;

  a2[256] = -1;
  v4 = *(unsigned int **)(a1 + 104);
  v3 = *(SFNTLookupTable **)(a1 + 112);
  v5 = v4 + 3;
  a2[257] = bswap32(v4[3]);
  v6 = (const SFNTLookupTable *)((char *)v4 + bswap32(v4[4]) + 12);
  if (&v6->fsHeader > (SFNTLookupFormatSpecificHeader *)v3)
    return 0;
  v7 = 0;
  switch(bswap32(v6->format) >> 16)
  {
    case 0u:
      goto LABEL_23;
    case 2u:
    case 4u:
    case 6u:
      if (v6->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v3)
        return 0;
      values = (UInt8 *)&v6->fsHeader.vector + 10;
      v9 = bswap32(v6->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v6->fsHeader.segment.binSearch.nUnits;
      goto LABEL_19;
    case 8u:
      p_searchRange = &v6->fsHeader.segment.binSearch.searchRange;
      if (v6->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v3)
        return 0;
      v12 = bswap32(v6->fsHeader.segment.binSearch.nUnits) >> 16;
      v13 = (unint64_t)&p_searchRange[v12];
      v14 = v6->fsHeader.vector.values <= (UInt8 *)v3
          ? (unint64_t)((char *)v3 - (char *)p_searchRange) >> 1
          : 0;
      v15 = v13 <= (unint64_t)v3 && v13 >= (unint64_t)p_searchRange;
      if (!v15 && v14 != v12)
        return 0;
      goto LABEL_23;
    case 0xAu:
      values = v6->fsHeader.vector.values;
      if (v6->fsHeader.vector.values > (UInt8 *)v3)
        return 0;
      v9 = bswap32(v6->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v6->fsHeader.segment.binSearch.searchRange;
LABEL_19:
      v17 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v9];
      if (v17 < (unint64_t)values || v17 > (unint64_t)v3)
        return 0;
LABEL_23:
      TAATLookupTable::SetTable(a1 + 24, v6, v3);
      a2[258] = (char *)v5 + bswap32(v4[5]);
      a2[259] = (char *)v5 + bswap32(v4[6]);
      v7 = 1;
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t TAATLookupTable::SetTable(uint64_t this, const SFNTLookupTable *a2, SFNTLookupTable *a3)
{
  SFNTLookupFormatSpecificHeader *p_fsHeader;
  UInt8 *values;
  unsigned int v5;
  unsigned int nUnits;
  SFNTLookupValue *p_searchRange;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v13;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  unsigned int v18;
  unint64_t v19;
  SFNTLookupValue *v20;
  SFNTLookupValue *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  UInt8 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  p_fsHeader = &a2->fsHeader;
  if (&a2->fsHeader <= (SFNTLookupFormatSpecificHeader *)a3)
  {
    switch(bswap32(a2->format) >> 16)
    {
      case 0u:
        goto LABEL_23;
      case 2u:
      case 4u:
      case 6u:
        if (a2->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)a3)
          goto LABEL_46;
        values = (UInt8 *)&a2->fsHeader.vector + 10;
        v5 = bswap32(a2->fsHeader.theArray.lookupValues[0]) >> 16;
        nUnits = a2->fsHeader.segment.binSearch.nUnits;
        break;
      case 8u:
        p_searchRange = &a2->fsHeader.segment.binSearch.searchRange;
        if (a2->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)a3)
          goto LABEL_46;
        v8 = bswap32(a2->fsHeader.segment.binSearch.nUnits) >> 16;
        v9 = (unint64_t)&p_searchRange[v8];
        v10 = a2->fsHeader.vector.values <= (UInt8 *)a3
            ? (unint64_t)((char *)a3 - (char *)p_searchRange) >> 1
            : 0;
        v11 = v9 <= (unint64_t)a3 && v9 >= (unint64_t)p_searchRange;
        if (!v11 && v10 != v8)
          goto LABEL_46;
        goto LABEL_23;
      case 0xAu:
        values = a2->fsHeader.vector.values;
        if (a2->fsHeader.vector.values > (UInt8 *)a3)
          goto LABEL_46;
        v5 = bswap32(a2->fsHeader.theArray.lookupValues[0]) >> 16;
        nUnits = a2->fsHeader.segment.binSearch.searchRange;
        break;
      default:
        goto LABEL_46;
    }
    v13 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v5];
    if (v13 >= (unint64_t)values && v13 <= (unint64_t)a3)
    {
LABEL_23:
      *(_QWORD *)(this + 40) = a3;
      v15 = bswap32(a2->format) >> 16;
      *(_WORD *)(this + 48) = v15;
      switch(v15)
      {
        case 0u:
          if (&a2->fsHeader.segment.binSearch.nUnits <= (UInt16 *)a3)
            v16 = (unint64_t)((char *)a3 - (char *)p_fsHeader) >> 1;
          else
            v16 = 0;
          *(_QWORD *)(this + 16) = p_fsHeader;
          *(_QWORD *)(this + 24) = v16;
          v17 = TAATLookupTable::LookupSimpleArray;
          goto LABEL_51;
        case 2u:
          *(_QWORD *)(this + 16) = a2;
          v17 = TAATLookupTable::LookupSegmentSingle;
          goto LABEL_51;
        case 4u:
          *(_QWORD *)(this + 16) = a2;
          v17 = TAATLookupTable::LookupSegmentArray;
          goto LABEL_51;
        case 6u:
          *(_QWORD *)(this + 16) = a2;
          v17 = TAATLookupTable::LookupSingleTable;
          goto LABEL_51;
        case 8u:
          *(_QWORD *)(this + 16) = p_fsHeader;
          v18 = bswap32(a2->fsHeader.theArray.lookupValues[0]) >> 16;
          *(_WORD *)(this + 24) = v18;
          if (!a2->fsHeader.segment.binSearch.nUnits)
          {
            *(_DWORD *)(this + 24) = 0xFFFF;
LABEL_48:
            v17 = TAATLookupTable::LookupTrimmedArray;
            goto LABEL_51;
          }
          v19 = __rev16(a2->fsHeader.segment.binSearch.nUnits);
          v20 = &a2->fsHeader.segment.binSearch.searchRange;
          v21 = &a2->fsHeader.segment.binSearch.searchRange + v19;
          if (v21 >= &a2->fsHeader.segment.binSearch.searchRange && v21 <= (SFNTLookupValue *)a3)
            goto LABEL_37;
          if (a2->fsHeader.vector.values <= (UInt8 *)a3 && (unint64_t)((char *)a3 - (char *)v20) >= 2)
          {
            v19 = (unint64_t)((char *)a3 - (char *)v20) >> 1;
LABEL_37:
            v22 = v19 + v18 - 1;
            *(_WORD *)(this + 26) = v22;
            if (v22 >> 16)
              break;
            goto LABEL_48;
          }
          break;
        case 0xAu:
          *(_QWORD *)(this + 16) = p_fsHeader;
          v23 = p_fsHeader->theArray.lookupValues[0];
          v24 = __rev16(v23);
          *(_QWORD *)(this + 24) = v24;
          if (!v23)
            break;
          v25 = bswap32(a2->fsHeader.segment.binSearch.nUnits) >> 16;
          *(_WORD *)(this + 32) = v25;
          if (a2->fsHeader.segment.binSearch.searchRange)
          {
            v26 = &a2->fsHeader.vector.values[v24
                                            * (unint64_t)__rev16(a2->fsHeader.segment.binSearch.searchRange)];
            if (a3 < (SFNTLookupTable *)v26)
              v26 = (UInt8 *)a3;
            v27 = v26 - a2->fsHeader.vector.values;
            if (v27 < v24)
              break;
            v28 = v27 / v24 - 1;
            v11 = __CFADD__(v28, v25);
            v29 = v28 + v25;
            *(_WORD *)(this + 34) = v29;
            if (v11 || v29 >> 16)
              break;
          }
          else
          {
            *(_DWORD *)(this + 32) = 0xFFFF;
          }
          v17 = TAATLookupTable::LookupVector;
LABEL_51:
          *(_QWORD *)this = v17;
          *(_QWORD *)(this + 8) = 0;
          return this;
        default:
          break;
      }
    }
  }
LABEL_46:
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = a2;
  *(_QWORD *)this = TAATLookupTable::BadTable;
  *(_WORD *)(this + 48) = -1;
  return this;
}

uint64_t TAATMorphSubtableMorx::FetchInitialClass(TAATMorphSubtableMorx *a1, TRunGlue *a2, uint64_t a3, uint64_t a4, TRunGlue **a5, uint64_t *a6, _WORD *a7)
{
  uint64_t FirstGlyph;
  int GlyphID;

  FirstGlyph = TAATMorphSubtable::FindFirstGlyph((uint64_t)a1, a2, a3, a4, a5, a6);
  if ((_DWORD)FirstGlyph)
  {
    GlyphID = TRunGlue::GetGlyphID(*a5, (uint64_t)a5[1]);
    *a7 = TAATMorphSubtableMorx::FetchClass(a1, GlyphID);
    a7[1] = 0;
  }
  return FirstGlyph;
}

uint64_t TAATMorphSubtableMorx::FetchClass(TAATMorphSubtableMorx *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  uint64_t v5;
  _QWORD *v6;
  unsigned __int16 *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 0xFFFF)
    return 2;
  v10 = v2;
  v11 = v3;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = (_QWORD *)((char *)this + (v5 >> 1) + 24);
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *))(*v6 + v4);
  v7 = (unsigned __int16 *)v4(v6);
  if (v7)
    return bswap32(*v7) >> 16;
  else
    return 1;
}

unsigned __int16 *TAATLookupTable::LookupSingleTable(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int v12;

  if (a2 == 0xFFFF)
    return 0;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v4 = v3 + 1;
  v5 = bswap32(v3[1]) >> 16;
  if (v5 < 4)
    return 0;
  v6 = v3[2];
  if (!v3[2])
    return 0;
  v7 = (char *)(v3 + 6);
  v8 = &v7[__rev16(v6) * v5];
  v9 = &v8[-v5];
  v10 = (unint64_t)v8 <= *((_QWORD *)this + 5) && v9 >= (char *)v4;
  if (!v10 || v8 < v9)
    return 0;
  while (1)
  {
    v12 = bswap32(*(unsigned __int16 *)v7) >> 16;
    if (v12 >= a2)
      break;
    v7 += v5;
    if (v8 <= v7)
      return 0;
  }
  if (v12 != a2)
    return 0;
  *a3 = v5 - 2;
  return (unsigned __int16 *)(v7 + 2);
}

uint64_t TAATMorphSubtable::FindFirstGlyph(uint64_t a1, TRunGlue *this, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 < 1)
    return 0;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = TRunGlue::length(this);
  if (v11 >= 1)
  {
    *a5 = this;
    a5[1] = a3;
    v13 = v12 - a3;
    if (v12 == a3)
      return 0;
LABEL_8:
    *a6 = v13;
    return 1;
  }
  v13 = a3 + a4 - v12 + TRunGlue::length(this);
  if (v13)
  {
    *a5 = this;
    a5[1] = v13 - 1;
    goto LABEL_8;
  }
  return 0;
}

SFNTLookupSegment *TAATLookupTable::LookupSegmentArray(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  SFNTLookupSegment *result;
  unint64_t v6;
  unint64_t v7;

  if (a2 == 0xFFFF)
    return 0;
  result = FindSegment((const SFNTLookupSegmentHeader *)(*((_QWORD *)this + 2) + 2), *((_QWORD *)this + 5), a2, a3);
  if (result)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = v6 + (bswap32(result->value[0]) >> 16) + 2 * a2 - 2 * (bswap32(result->firstGlyph) >> 16);
    if (v7 + 2 > *((_QWORD *)this + 5) || v6 > v7)
      return 0;
    else
      return (SFNTLookupSegment *)v7;
  }
  return result;
}

SFNTLookupSegment *FindSegment(const SFNTLookupSegmentHeader *a1, unint64_t a2, unsigned int a3, unint64_t *a4)
{
  uint64_t v4;
  unsigned int nUnits;
  SFNTLookupSegment *result;
  char *v8;
  unint64_t v9;
  BOOL v10;

  v4 = bswap32(a1->binSearch.unitSize) >> 16;
  if (v4 < 6)
    return 0;
  nUnits = a1->binSearch.nUnits;
  if (!a1->binSearch.nUnits)
    return 0;
  result = a1->segments;
  v8 = (char *)a1->segments + __rev16(nUnits) * v4;
  v9 = (unint64_t)&v8[-v4];
  v10 = (unint64_t)v8 <= a2 && v9 >= (unint64_t)a1;
  if (!v10 || (unint64_t)v8 < v9)
    return 0;
  while (a3 > bswap32(result->lastGlyph) >> 16)
  {
    result = (SFNTLookupSegment *)((char *)result + v4);
    if (v8 <= (char *)result)
      return 0;
  }
  if (a3 < bswap32(result->firstGlyph) >> 16)
    return 0;
  *a4 = v4 - 4;
  return result;
}

uint64_t TAATMorphChainMorx::NextChain(TAATMorphChainMorx *this, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t InitializedGraphicsFont;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  char *v77;

  v2 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v2;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v2 + 4;
  if (v3 > (unint64_t)(v2 + 3) || (unint64_t)v5 > v4)
    return 0;
  v8 = (unint64_t)v2 + bswap32(v2[1]);
  *((_QWORD *)this + 4) = v8;
  if (v8 > v4)
    return 0;
  v9 = &v2[3 * bswap32(v2[2]) + 4];
  *((_QWORD *)this + 22) = v9;
  *((_QWORD *)this + 23) = v9;
  *((_QWORD *)this + 20) = v3;
  *((_QWORD *)this + 21) = v4;
  v10 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 25) = v10;
  if (a2 < 3)
  {
    v31 = v2;
  }
  else
  {
    v11 = v2[3];
    v12 = bswap32(v11);
    if (v11)
    {
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      do
      {
        *((_QWORD *)this + 22) = v9;
        v14 = v9 + 2;
        if (v3 > (unint64_t)(v9 + 2) || (unint64_t)(v9 + 3) > v4)
          break;
        v9 = (unsigned int *)((char *)v9 + bswap32(*v9));
        *((_QWORD *)this + 23) = v9;
        if ((unint64_t)v9 > v4)
          break;
        *((_DWORD *)this + 20) = bswap32(*v14);
        --v13;
      }
      while (v13);
    }
    if (v2 <= v9)
    {
      v16 = &v9[v12];
      if (v16 >= v9 && (unint64_t)v16 <= v8)
        goto LABEL_40;
    }
    v17 = (unint64_t)(v9 + 1) > v8 || v2 > v9;
    v18 = (v8 - (unint64_t)v9) >> 2;
    if (v17)
      v18 = 0;
    if (v18 == v12)
    {
LABEL_40:
      v19 = *((_QWORD *)this + 7);
      v20 = *(_QWORD **)(v19 + 400);
      v21 = v20[25];
      if (!v21)
      {
        InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v19 + 400));
        v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v20 + 872))(v20, InitializedGraphicsFont);
        v10 = *((_QWORD *)this + 24);
      }
      if (v21 <= 0x10000)
        v23 = (v21 + 7) >> 3;
      else
        v23 = 0x2000;
      if (v12 > (*((_QWORD *)this + 26) - v10) >> 3)
      {
        v24 = *((_QWORD *)this + 25) - v10;
        v77 = (char *)this + 216;
        v25 = TInlineBufferAllocator<unsigned char const*,48ul>::allocate((uint64_t)this + 216, v12);
        v27 = *((_QWORD *)this + 24);
        v26 = *((_QWORD *)this + 25);
        if (v26 == v27)
        {
          v30 = vdupq_n_s64(v26);
          v28 = &v25[v24 & 0xFFFFFFFFFFFFFFF8];
        }
        else
        {
          v28 = &v25[v24 & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v29 = *(_QWORD *)(v26 - 8);
            v26 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          while (v26 != v27);
          v30 = *((int64x2_t *)this + 12);
        }
        *((_QWORD *)this + 24) = v28;
        *((_QWORD *)this + 25) = &v25[v24 & 0xFFFFFFFFFFFFFFF8];
        v75 = v30;
        v32 = (char *)*((_QWORD *)this + 26);
        *((_QWORD *)this + 26) = &v25[8 * v12];
        v76 = v32;
        v74 = v30.i64[0];
        std::__split_buffer<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul> &>::~__split_buffer((uint64_t)&v74);
      }
      if (v11)
      {
        v33 = v9;
        v34 = &v9[v12];
        do
        {
          v35 = bswap32(*v33);
          if (v35 + 1 > 1)
          {
            v39 = (char *)v9 + v35;
            v40 = *((_QWORD *)this + 4);
            v42 = &v39[v23] >= v39
               && (unint64_t)&v39[v23] <= v40
               && *((_QWORD *)this + 3) <= (unint64_t)v39;
            v43 = (unint64_t)(v39 + 1) <= v40;
            v44 = v40 - (_QWORD)v39;
            if (*((_QWORD *)this + 3) <= (unint64_t)v39 && v43)
              v45 = v44;
            else
              v45 = 0;
            if (!v42 && v45 != v23)
            {
              *((_QWORD *)this + 25) = *((_QWORD *)this + 24);
              break;
            }
            v47 = (char **)*((_QWORD *)this + 25);
            v46 = *((_QWORD *)this + 26);
            if ((unint64_t)v47 >= v46)
            {
              v54 = *((_QWORD *)this + 24);
              v55 = ((uint64_t)v47 - v54) >> 3;
              if ((unint64_t)(v55 + 1) >> 61)
LABEL_98:
                abort();
              v56 = v46 - v54;
              v57 = v56 >> 2;
              if (v56 >> 2 <= (unint64_t)(v55 + 1))
                v57 = v55 + 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v57;
              v77 = (char *)this + 216;
              if (v58)
                v59 = TInlineBufferAllocator<unsigned char const*,48ul>::allocate((uint64_t)this + 216, v58);
              else
                v59 = 0;
              v60 = &v59[8 * v55];
              v61 = &v59[8 * v58];
              v76 = v61;
              *(_QWORD *)v60 = v39;
              v38 = v60 + 8;
              v75.i64[1] = (uint64_t)(v60 + 8);
              v65 = *((_QWORD *)this + 24);
              v62 = *((_QWORD *)this + 25);
              if (v62 != v65)
              {
                do
                {
                  v66 = *(_QWORD *)(v62 - 8);
                  v62 -= 8;
                  *((_QWORD *)v60 - 1) = v66;
                  v60 -= 8;
                }
                while (v62 != v65);
LABEL_81:
                v67 = *((int64x2_t *)this + 12);
                v38 = (_QWORD *)v75.i64[1];
                v61 = v76;
LABEL_83:
                *((_QWORD *)this + 24) = v60;
                *((_QWORD *)this + 25) = v38;
                v75 = v67;
                v68 = (char *)*((_QWORD *)this + 26);
                *((_QWORD *)this + 26) = v61;
                v76 = v68;
                v74 = v67.i64[0];
                std::__split_buffer<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul> &>::~__split_buffer((uint64_t)&v74);
                goto LABEL_84;
              }
LABEL_82:
              v67 = vdupq_n_s64(v62);
              goto LABEL_83;
            }
            *v47 = v39;
            v38 = v47 + 1;
          }
          else
          {
            v37 = (_QWORD *)*((_QWORD *)this + 25);
            v36 = *((_QWORD *)this + 26);
            if ((unint64_t)v37 >= v36)
            {
              v48 = *((_QWORD *)this + 24);
              v49 = ((uint64_t)v37 - v48) >> 3;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_98;
              v50 = v36 - v48;
              v51 = v50 >> 2;
              if (v50 >> 2 <= (unint64_t)(v49 + 1))
                v51 = v49 + 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              v77 = (char *)this + 216;
              if (v52)
                v53 = TInlineBufferAllocator<unsigned char const*,48ul>::allocate((uint64_t)this + 216, v52);
              else
                v53 = 0;
              v60 = &v53[8 * v49];
              v61 = &v53[8 * v52];
              v76 = v61;
              *(_QWORD *)v60 = 0;
              v38 = v60 + 8;
              v75.i64[1] = (uint64_t)(v60 + 8);
              v63 = *((_QWORD *)this + 24);
              v62 = *((_QWORD *)this + 25);
              if (v62 != v63)
              {
                do
                {
                  v64 = *(_QWORD *)(v62 - 8);
                  v62 -= 8;
                  *((_QWORD *)v60 - 1) = v64;
                  v60 -= 8;
                }
                while (v62 != v63);
                goto LABEL_81;
              }
              goto LABEL_82;
            }
            *v37 = 0;
            v38 = v37 + 1;
          }
LABEL_84:
          *((_QWORD *)this + 25) = v38;
          ++v33;
        }
        while (v33 != v34);
      }
    }
    v69 = (uint64_t)&v2[3 * bswap32(v2[2]) + 4];
    *((_QWORD *)this + 22) = v69;
    *((_QWORD *)this + 23) = v69;
    *((_OWORD *)this + 10) = *(_OWORD *)((char *)this + 8);
    v31 = (unsigned int *)*((_QWORD *)this + 3);
    v8 = *((_QWORD *)this + 4);
    v5 = v2 + 4;
  }
  *((_DWORD *)this + 10) = bswap32(*v2);
  if (v31 > v5
    || ((LODWORD(v70) = bswap32(v2[2]), v71 = (unint64_t)&v5[3 * v70], v71 >= (unint64_t)v5)
      ? (v72 = v71 > v8)
      : (v72 = 1),
        v72))
  {
    LODWORD(v70) = 0;
    if (v31 <= v5 && (unint64_t)(v2 + 7) <= v8)
      v70 = (v8 - (unint64_t)v5) / 0xC;
  }
  *((_DWORD *)this + 11) = v70;
  *((_QWORD *)this + 6) = v5;
  return 1;
}

uint64_t TAATMorphTableMorx::GetChain(TAATMorphTableMorx *this, unsigned int *a2)
{
  *a2 = bswap32(*(_DWORD *)(*((_QWORD *)this + 5) + 4));
  return (uint64_t)this + 64;
}

uint64_t TAATMorphChainMorx::GetSubtable(TAATMorphChainMorx *this, unsigned int *a2)
{
  *a2 = bswap32(*(_DWORD *)(*((_QWORD *)this + 3) + 12));
  return (uint64_t)this + 72;
}

uint64_t std::__split_buffer<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 384);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

char *TInlineBufferAllocator<unsigned char const*,48ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 384);
  result = *(char **)(a1 + 384);
  v4 = &result[8 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return (char *)operator new(8 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 6) % 6uLL + *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (_QWORD *)(v4 + 24);
    if (v4 <= (unint64_t)v3 && v5 > v3)
    {
      if (*(_QWORD *)(a1 + 24) == *v5)
        *v5 = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

void *TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  v2 = (unint64_t *)(a1 + 24);
  v3 = v4;
  v5 = v4 + 6 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >= 0x2AAAAAAAAAAAAAABLL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(6 * a2);
  }
}

uint64_t TAATLookupTable::LookupTrimmedArray(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  if (*((unsigned __int16 *)this + 12) > a2 || *((unsigned __int16 *)this + 13) < a2)
    return 0;
  *a3 = 2;
  return *((_QWORD *)this + 2) + 2 * a2 - 2 * *((unsigned __int16 *)this + 12) + 4;
}

uint64_t TCharStream::GetCharacterAtIndex(const UniChar *this, CFStringInlineBuffer *a2, CFIndex a3)
{
  const UniChar *directUniCharBuffer;

  if (a2->bufferedRangeStart > a3 || a2->bufferedRangeEnd <= a3)
    TCharStream::SetIndex(this, a2, a3);
  directUniCharBuffer = a2->directUniCharBuffer;
  if (directUniCharBuffer)
    return directUniCharBuffer[a3 - a2->bufferedRangeStart];
  else
    return 0;
}

const UniChar *TCharStream::SetIndex(const UniChar *this, CFStringInlineBuffer *a2, CFIndex a3)
{
  const UniChar *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  CFStringInlineBuffer *v12;
  unint64_t v13;

  v5 = this;
  a2->bufferedRangeStart = a3;
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    a2->directUniCharBuffer = (const UniChar *)(v6 + 2 * a3);
    v9 = v8 + v7;
LABEL_5:
    a2->bufferedRangeEnd = v9;
    return this;
  }
  v13 = 0xAAAAAAAAAAAAAAAALL;
  this = (const UniChar *)(*(uint64_t (**)(const UniChar *, CFIndex, unint64_t *))(*(_QWORD *)this
                                                                                                  + 64))(this, a3, &v13);
  a2->directUniCharBuffer = this;
  if (this)
  {
    v9 = v13 + a3;
    goto LABEL_5;
  }
  v10 = *((_QWORD *)v5 + 1) - a3 + *((_QWORD *)v5 + 2);
  if (v10 >= 64)
    v11 = 64;
  else
    v11 = *((_QWORD *)v5 + 1) - a3 + *((_QWORD *)v5 + 2);
  v13 = v11;
  if (v10 < 1)
  {
    v12 = 0;
  }
  else
  {
    this = (const UniChar *)(*(uint64_t (**)(const UniChar *, CFIndex))(*(_QWORD *)v5 + 24))(v5, a3);
    v12 = a2;
  }
  a2->directUniCharBuffer = (const UniChar *)v12;
  return this;
}

void TCFBidiLevelsProvider::~TCFBidiLevelsProvider(TCFBidiLevelsProvider *this)
{
  id *v2;
  void **v3;

  *(_QWORD *)this = off_1E15DDF10;
  v2 = (id *)((char *)this + 8);
  v3 = (void **)((char *)this + 96);
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);

  MEMORY[0x186DC03AC](this, 0x10F1C409899A524);
}

{
  id *v2;
  void **v3;

  *(_QWORD *)this = off_1E15DDF10;
  v2 = (id *)((char *)this + 8);
  v3 = (void **)((char *)this + 96);
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);

}

CGFloat CTLineGetOffsetForStringIndex(CTLineRef line, CFIndex charIndex, CGFloat *secondaryOffset)
{
  CGFloat result;
  uint64_t v5;

  if (!line)
    return 0.0;
  TLine::CharIndexToOffsets(*((_QWORD *)line + 5), charIndex);
  if (secondaryOffset)
    *(_QWORD *)secondaryOffset = v5;
  return result;
}

uint64_t TLine::CharIndexToOffsets(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double *v23;
  _QWORD *v24;
  uint64_t RunWithCharIndex;
  uint64_t *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double *v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double *v43;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this)
    return this;
  v2 = this;
  v3 = *(_QWORD *)(this + 72);
  v4 = *(_QWORD *)(this + 80);
  v5 = v3 <= a2 ? a2 : *(_QWORD *)(this + 72);
  v6 = v4 + v3;
  v7 = v5 >= v4 + v3 ? v4 + v3 : v5;
  v8 = v7 - (v6 <= v5);
  if (v8 < 0)
    return this;
  v9 = *(_QWORD *)(this + 24) - *(_QWORD *)(this + 16);
  this = TLine::FindRunWithCharIndex((TLine *)this, v8, 1);
  if (this >= v9 >> 3)
    return this;
  v10 = this;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * this) + 40);
  if (v6 <= v5)
  {
    v12 = *(unsigned __int8 *)(v11 + 224) ^ ((*(_WORD *)(v2 + 152) & 8) >> 3);
LABEL_19:
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * this) + 40);
LABEL_20:
    v16 = v10;
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(v2 + 72);
  if (v13 >= v7 || *(_QWORD *)(v2 + 80) + v13 < v7)
  {
    LOBYTE(v12) = 0;
    goto LABEL_19;
  }
  RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v2, v7 - 1, 1);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * RunWithCharIndex) + 40);
  if (RunWithCharIndex == v10)
  {
    LOBYTE(v12) = 0;
    goto LABEL_20;
  }
  v16 = RunWithCharIndex;
  v45 = (*(_BYTE *)(v11 + 224) & 1) == 0 || v10 + 1 != RunWithCharIndex;
  if ((*(_BYTE *)(v15 + 224) & 1) != 0)
    LOBYTE(v12) = v45;
  else
    LOBYTE(v12) = *(_BYTE *)(v11 + 224) | (RunWithCharIndex + 1 != v10);
LABEL_21:
  this = TLine::GetLeftHangersGlyphCountAndWidth((TLine *)v2, 0);
  v47 = 0;
  if ((v12 & 1) != 0)
  {
    if ((*(_BYTE *)(v15 + 224) & 1) != 0)
    {
      if (v16 >= 1)
      {
        v26 = *(uint64_t **)(v2 + 16);
        v27 = 0.0;
        do
        {
          v28 = *v26++;
          v29 = *(_QWORD *)(v28 + 40);
          v30 = *(double *)(v29 + 192);
          v31 = *(double **)(v29 + 312);
          if (!v31)
            v31 = (double *)MEMORY[0x1E0C9D820];
          v27 = v27 + v30 + *v31;
          --v16;
        }
        while (v16);
      }
    }
    else if ((v16 & 0x8000000000000000) == 0)
    {
      v17 = *(uint64_t **)(v2 + 16);
      v18 = v16 + 1;
      v19 = 0.0;
      do
      {
        v20 = *v17++;
        v21 = *(_QWORD *)(v20 + 40);
        v22 = *(double *)(v21 + 192);
        v23 = *(double **)(v21 + 312);
        if (!v23)
          v23 = (double *)MEMORY[0x1E0C9D820];
        v19 = v19 + v22 + *v23;
        --v18;
      }
      while (v18);
    }
    v32 = 0.0;
    if ((*(_BYTE *)(v11 + 224) & 1) != 0)
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        v38 = *(uint64_t **)(v2 + 16);
        v39 = v10 + 1;
        do
        {
          v40 = *v38++;
          v41 = *(_QWORD *)(v40 + 40);
          v42 = *(double *)(v41 + 192);
          v43 = *(double **)(v41 + 312);
          if (!v43)
            v43 = (double *)MEMORY[0x1E0C9D820];
          v32 = v32 + v42 + *v43;
          --v39;
        }
        while (v39);
      }
    }
    else if (v10 >= 1)
    {
      v33 = *(uint64_t **)(v2 + 16);
      do
      {
        v34 = *v33++;
        v35 = *(_QWORD *)(v34 + 40);
        v36 = *(double *)(v35 + 192);
        v37 = *(double **)(v35 + 312);
        if (!v37)
          v37 = (double *)MEMORY[0x1E0C9D820];
        v32 = v32 + v36 + *v37;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v46 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
    v24 = operator new(0x28uLL);
    *v24 = &off_1E15E1210;
    v24[1] = &v46;
    v24[2] = &v47;
    *((_BYTE *)v24 + 24) = v6 <= v5;
    v24[4] = v8;
    v49 = v24;
    TLine::EnumerateCaretOffsets((__n128 *)v2, (uint64_t)v48);
    return (*(uint64_t (**)(_QWORD *))(*v24 + 40))(v24);
  }
  return this;
}

CGFloat CTFontGetXHeight(CTFontRef font)
{
  TFont *v1;
  uint64_t v2;
  CGFloat result;
  CGAffineTransform v4;

  if (!font)
    return 0.0;
  v1 = (TFont *)*((_QWORD *)font + 5);
  v2 = *((_QWORD *)v1 + 50);
  TFont::GetScaledMatrix(v1, &v4);
  (*(void (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v2 + 608))(v2, &v4);
  return result;
}

CGFloat TBaseFont::GetXHeight(TBaseFont *this, const CGAffineTransform *a2)
{
  CGFont *InitializedGraphicsFont;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  return a2->ty + a2->d * (double)CGFontGetXHeight(InitializedGraphicsFont) + a2->b * 0.0;
}

uint64_t ___Z29CTFontGetPlistFromGSFontCachePK10__CFStringb_block_invoke()
{
  uint64_t result;

  result = GSFontGetCacheDictionary();
  _MergedGlobals_31 = result != 0;
  return result;
}

CGFloat TComponentFont::GetMaxAdvance(TComponentFont *this, const CGAffineTransform *a2, int a3)
{
  TSplicedFontDict *v4;
  double MaxAdvance;

  v4 = (TComponentFont *)((char *)this + 720);
  MaxAdvance = TBaseFont::GetMaxAdvance(this, a2, a3);
  return TSplicedFontDict::GetMaxAdvance(v4, MaxAdvance, a2);
}

CGFloat TBaseFont::GetMaxAdvance(TBaseFont *this, const CGAffineTransform *a2, int a3)
{
  uint64_t VMetrics;

  TBaseFont::GetInitializedGraphicsFont(this);
  if (a3)
    VMetrics = CGFontGetVMetrics();
  else
    VMetrics = CGFontGetHMetrics();
  if (VMetrics)
    return a2->tx + a2->c * 0.0 + a2->a * (double)*(int *)(VMetrics + 12);
  else
    return 0.0;
}

TDescriptor *CTFontDescriptorIsSystemUIFont(TDescriptor *result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(*((_QWORD *)result + 5) + 16);
    return (TDescriptor *)((TDescriptor::GetSystemUIFontOptions(result) & v1) != 0);
  }
  return result;
}

_QWORD *CTFontCreateForCharactersWithLanguage(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, __CFString *a4, uint64_t *a5)
{
  return CTFontCreateForCharactersWithLanguageAndOption(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL, a5);
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  TNativeParagraphStyle *v4;
  TNativeParagraphStyle *v5;
  void *v6;
  void *v7;
  void *v9;
  size_t v10;
  const void **p_value;
  id *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  const __CTParagraphStyle *v28;
  id v30;
  unint64_t v31;
  id v32;
  id v33;

  v33 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = (TNativeParagraphStyle *)TCFBase<TNativeParagraphStyle>::Allocate();
  if (v4)
  {
    v5 = v4;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = TNativeParagraphStyle::Hash;
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 5) = (char *)v4 + 48;
    *((_QWORD *)v4 + 7) = 0;
    *((_QWORD *)v4 + 8) = 0;
    *((_QWORD *)v4 + 9) = TNativeParagraphStyle::CopyDefaultTabStops(v4);
    *((_WORD *)v5 + 40) = 1024;
    *((_BYTE *)v5 + 82) = -1;
    *((_QWORD *)v5 + 11) = 0;
    *((_BYTE *)v5 + 96) = 0;
    v30 = v5;
    do
      v6 = (void *)__ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));
    v32 = v6;

  }
  else
  {
    v32 = 0;
  }
  do
    v7 = (void *)__ldaxr((unint64_t *)&v32);
  while (__stlxr(0, (unint64_t *)&v32));
  v33 = v7;

  if (atomic_load((unint64_t *)&v33))
  {
    v30 = 0;
    v31 = 0xAAAAAAAAAAAAAA00;
    v9 = (void *)atomic_load((unint64_t *)&v33);
    v30 = v9;
    LOBYTE(v31) = 1;
    if (settings && settingCount)
    {
      v10 = 24 * settingCount;
      p_value = &settings->value;
      while (1)
      {
        v12 = (id *)*p_value;
        if (*p_value)
        {
          v13 = (uint64_t)*(p_value - 1);
          switch(*((_DWORD *)p_value - 4))
          {
            case 0:
              if (v13 == 1)
                TParagraphStyle::SetAlignment((TParagraphStyle *)&v30, *(unsigned __int8 *)v12);
              break;
            case 1:
              if (v13 == 8)
              {
                v15 = *(double *)v12;
                goto LABEL_62;
              }
              if (v13 == 4)
              {
                v15 = *(float *)v12;
LABEL_62:
                TParagraphStyle::SetFirstLineHeadIndent((TNativeParagraphStyle ***)&v30, v15);
                break;
              }
              break;
            case 2:
              if (v13 == 8)
              {
                v16 = *(double *)v12;
                goto LABEL_64;
              }
              if (v13 == 4)
              {
                v16 = *(float *)v12;
LABEL_64:
                TParagraphStyle::SetHeadIndent((TNativeParagraphStyle ***)&v30, v16);
                break;
              }
              break;
            case 3:
              if (v13 == 8)
              {
                v17 = *(double *)v12;
                goto LABEL_66;
              }
              if (v13 == 4)
              {
                v17 = *(float *)v12;
LABEL_66:
                TParagraphStyle::SetTailIndent((TNativeParagraphStyle ***)&v30, v17);
                break;
              }
              break;
            case 4:
              if (v13 == 8)
                TParagraphStyle::SetTabStops((TParagraphStyle *)&v30, *v12);
              break;
            case 5:
              if (v13 == 8)
              {
                v18 = *(double *)v12;
                goto LABEL_68;
              }
              if (v13 == 4)
              {
                v18 = *(float *)v12;
LABEL_68:
                TParagraphStyle::SetDefaultTabInterval((TParagraphStyle *)&v30, v18);
                break;
              }
              break;
            case 6:
              if (v13 == 1)
                TParagraphStyle::SetLineBreakMode((TParagraphStyle *)&v30, *(unsigned __int8 *)v12);
              break;
            case 7:
              if (v13 == 8)
              {
                v19 = *(double *)v12;
                goto LABEL_70;
              }
              if (v13 == 4)
              {
                v19 = *(float *)v12;
LABEL_70:
                TParagraphStyle::SetLineHeightMultiple((TNativeParagraphStyle ***)&v30, v19);
                break;
              }
              break;
            case 8:
              if (v13 == 8)
              {
                v20 = *(double *)v12;
                goto LABEL_72;
              }
              if (v13 == 4)
              {
                v20 = *(float *)v12;
LABEL_72:
                TParagraphStyle::SetMaximumLineHeight((TNativeParagraphStyle ***)&v30, v20);
                break;
              }
              break;
            case 9:
              if (v13 == 8)
              {
                v21 = *(double *)v12;
                goto LABEL_74;
              }
              if (v13 == 4)
              {
                v21 = *(float *)v12;
LABEL_74:
                TParagraphStyle::SetMinimumLineHeight((TNativeParagraphStyle ***)&v30, v21);
                break;
              }
              break;
            case 0xA:
            case 0xF:
              if (v13 == 8)
              {
                v14 = *(double *)v12;
                goto LABEL_60;
              }
              if (v13 == 4)
              {
                v14 = *(float *)v12;
LABEL_60:
                TParagraphStyle::SetMinimumLineSpacing(&v30, v14);
                break;
              }
              break;
            case 0xB:
              if (v13 == 8)
              {
                v22 = *(double *)v12;
                goto LABEL_76;
              }
              if (v13 == 4)
              {
                v22 = *(float *)v12;
LABEL_76:
                TParagraphStyle::SetParagraphSpacing((TNativeParagraphStyle ***)&v30, v22);
                break;
              }
              break;
            case 0xC:
              if (v13 == 8)
              {
                v23 = *(double *)v12;
                goto LABEL_78;
              }
              if (v13 == 4)
              {
                v23 = *(float *)v12;
LABEL_78:
                TParagraphStyle::SetParagraphSpacingBefore((TNativeParagraphStyle ***)&v30, v23);
                break;
              }
              break;
            case 0xD:
              if (v13 == 1)
                TParagraphStyle::SetBaseWritingDirection((TParagraphStyle *)&v30, *(char *)v12);
              break;
            case 0xE:
              if (v13 == 8)
              {
                v24 = *(double *)v12;
LABEL_80:
                if ((_BYTE)v31)
                {
                  v26 = *((_QWORD *)v30 + 5);
                  v27 = *(_QWORD *)(v26 + 8);
                  if (!v27)
                  {
                    TNativeParagraphStyle::CreateSpacePack(*((TNativeParagraphStyle **)v30 + 5));
                    v27 = *(_QWORD *)(v26 + 8);
                  }
                  *(double *)(v27 + 32) = v24;
                }
                break;
              }
              if (v13 == 4)
              {
                v24 = *(float *)v12;
                goto LABEL_80;
              }
              break;
            case 0x10:
              if (v13 == 8)
              {
                v25 = *(double *)v12;
                goto LABEL_85;
              }
              if (v13 == 4)
              {
                v25 = *(float *)v12;
LABEL_85:
                TParagraphStyle::SetLineSpacingAdjustment((TNativeParagraphStyle ***)&v30, v25);
                break;
              }
              break;
            case 0x11:
              if (v13 == 8)
                TParagraphStyle::SetLineBoundsOptions(&v30, (uint64_t)*v12);
              break;
            default:
              break;
          }
        }
        p_value += 3;
        v10 -= 24;
        if (!v10)
          goto LABEL_87;
      }
    }
    do
LABEL_87:
      v28 = (const __CTParagraphStyle *)__ldaxr((unint64_t *)&v33);
    while (__stlxr(0, (unint64_t *)&v33));
  }
  else
  {
    v28 = 0;
  }

  return v28;
}

uint64_t TCFBase<TNativeParagraphStyle>::Allocate()
{
  if (TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeParagraphStyle>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeParagraphStyle>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

CFArrayRef TNativeParagraphStyle::CopyDefaultTabStops(TNativeParagraphStyle *this)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  void *v4;
  CFArrayRef v6;
  uint64_t i;
  char v9;
  id v10;
  double v11;
  void *values[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  v11 = 0.0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)values = 0u;
  v13 = 0u;
  while (1)
  {
    v11 = v11 + 28.0;
    v2 = (unint64_t *)&values[v1];
    v9 = 0;
    TCFBase_NEW<CTTextTab,double &,CTTextAlignment,decltype(nullptr)>((uint64_t *)&v11, &v9, (unint64_t *)&v10);
    do
      v3 = __ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    do
      v4 = (void *)__ldaxr(v2);
    while (__stlxr(v3, v2));

    if (!atomic_load(v2))
      break;
    if (++v1 == 12)
    {
      v6 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 12, MEMORY[0x1E0C9B378]);
      goto LABEL_9;
    }
  }
  v6 = 0;
LABEL_9:
  for (i = 11; i != -1; --i)

  return v6;
}

void TCFBase_NEW<CTTextTab,double &,CTTextAlignment,decltype(nullptr)>(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  id v10;

  v6 = TCFBase<TNativeTextTab>::Allocate();
  if (v6)
  {
    v7 = *a1;
    v8 = *a2;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 48) = v7;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    *(_BYTE *)(v6 + 56) = v8;
    *(_QWORD *)(v6 + 64) = 0;
    v10 = (id)v6;
    do
      v9 = __ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    *a3 = v9;

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TCFBase<TNativeTextTab>::Allocate()
{
  if (TCFBase<TNativeTextTab>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TNativeTextTab>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TNativeTextTab>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

_QWORD *TParagraphStyle::SetAlignment(TParagraphStyle *this, uint64_t a2)
{
  int v2;
  _QWORD *result;

  v2 = *((unsigned __int8 *)this + 8);
  result = *(_QWORD **)this;
  if (!v2)
    return objc_msgSend(result, sel_setAlignment_, a2);
  *(_BYTE *)(result[5] + 33) = a2;
  return result;
}

double TNativeParagraphStyle::CreateSpacePack(TNativeParagraphStyle *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v3)
  {
    MEMORY[0x186DC03AC](v3, 0x1000C40FA0F61DDLL);
    v2 = *((_QWORD *)this + 1);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = xmmword_18494CA10;
  return result;
}

void TParagraphStyle::SetMinimumLineSpacing(id *this, double a2)
{
  TNativeParagraphStyle *v4;
  uint64_t v5;

  if (_CFExecutableLinkedOnOrAfter())
  {
    if (!*((_BYTE *)this + 8))
    {
      objc_msgSend(*this, sel_setLineSpacing_, a2);
      return;
    }
  }
  else if (!*((_BYTE *)this + 8))
  {
    return;
  }
  v4 = (TNativeParagraphStyle *)*((_QWORD *)*this + 5);
  v5 = *((_QWORD *)v4 + 1);
  if (!v5)
  {
    TNativeParagraphStyle::CreateSpacePack(v4);
    v5 = *((_QWORD *)v4 + 1);
  }
  *(double *)(v5 + 40) = a2;
}

_QWORD *TParagraphStyle::SetBaseWritingDirection(TParagraphStyle *this, uint64_t a2)
{
  int v2;
  _QWORD *result;

  v2 = *((unsigned __int8 *)this + 8);
  result = *(_QWORD **)this;
  if (!v2)
    return objc_msgSend(result, sel_setBaseWritingDirection_, a2);
  *(_BYTE *)(result[5] + 34) = a2;
  return result;
}

_QWORD *TParagraphStyle::SetDefaultTabInterval(TParagraphStyle *this, double a2)
{
  int v2;
  _QWORD *result;

  v2 = *((unsigned __int8 *)this + 8);
  result = *(_QWORD **)this;
  if (!v2)
    return objc_msgSend(result, sel_setDefaultTabInterval_, a2);
  *(double *)(result[5] + 16) = a2;
  return result;
}

uint64_t TParagraphStyle::SetLineBoundsOptions(id *this, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = *((unsigned __int8 *)this + 8);
  result = (uint64_t)*this;
  if (v4)
  {
    *(_QWORD *)(*(_QWORD *)(result + 40) + 40) = a2;
  }
  else
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return (uint64_t)objc_msgSend(*this, sel__setLineBoundsOptions_, a2);
  }
  return result;
}

void TParagraphStyle::SetTabStops(TParagraphStyle *this, id a2)
{
  int v2;
  _QWORD *v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *(_QWORD **)this;
  if (v2)
    TCFRef<__CTFont const*>::Retain((unint64_t *)(v3[5] + 24), a2);
  else
    objc_msgSend(v3, sel_setTabStops_, a2);
}

_QWORD *CTFontGetLanguageAwareOutsets(_QWORD *result, double *a2, double *a3, double *a4, double *a5)
{
  return CTFontGetLanguageAwareOutsetsForLanguage(result, a2, a3, a4, a5);
}

_CTMutableGlyphStorage *CTGlyphStorageCreateMutableWithInterface(uint64_t a1, uint64_t a2)
{
  return -[_CTMutableGlyphStorage initWithInterface:options:]([_CTMutableGlyphStorage alloc], "initWithInterface:options:", a2, a1);
}

void std::__function::__func<CreateNormalizedLanguages(__CFArray const*)::$_0,std::allocator<CreateNormalizedLanguages(__CFArray const*)::$_0>,TCFRef<void const*> ()(void const*)>::operator()(__CFString **a1@<X1>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  LanguageIdentifierByNormalizing(*a1, 1u, (unint64_t *)&v4);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

CFArrayRef CTFontCopyVariationAxes(CTFontRef font)
{
  const __CFArray *v1;
  id v3;

  if (!font)
    return 0;
  TBaseFont::CopyVariationAxesExternal(*(TBaseFont **)(*((_QWORD *)font + 5) + 400), (unint64_t *)&v3);
  do
    v1 = (const __CFArray *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

const __CTFont *CTFontCreateCopyOfSystemUIFontWithGrade(TFont **a1, uint64_t a2)
{
  const __CTFont *CopyWithAttributes;
  const __CTFontDescriptor *v4;
  BOOL v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  _QWORD v10[2];

  CopyWithAttributes = (const __CTFont *)a1;
  v10[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (TFont::IsSystemUIFontAndForShaping(a1[5], &v6))
    {
      v9 = CFSTR("NSCTFontTraitsAttribute");
      v7 = CFSTR("NSCTFontGradeTrait");
      v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v10[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
      v4 = CTFontDescriptorCreateWithAttributes((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
      CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, 0.0, 0, v4);

    }
    else
    {
      return 0;
    }
  }
  return CopyWithAttributes;
}

void TBaseFont::CopyVariationAxesExternal(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t ParserFont;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  const __CFString *v18;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  int VariationAxisNameID;
  const __CFArray *v22;
  const __CFArray *v24;
  const __CFString *v25;
  __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  __CFDictionary *v32;
  const void *v33;
  const void *v34;
  CFArrayRef Copy;
  void *v36;
  const __CFAllocator *allocator;
  int v38;
  id v39;
  id v40;
  int valuePtr;
  id v42;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)this + 120))(a2);
  if (atomic_load(a2))
  {
    TBaseFont::GetInitializedGraphicsFont(this);
    ParserFont = CGFontGetParserFont();
    if (ParserFont)
    {
      v6 = ParserFont;
      v7 = (const __CFArray *)atomic_load(a2);
      Count = CFArrayGetCount(v7);
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      v42 = (id)0xAAAAAAAAAAAAAAAALL;
      v11 = CFLocaleCopyPreferredLanguages();
      CreateNormalizedLanguages(v11, (unint64_t *)&v42);

      v12 = CGFontNameTableCreate();
      if (v12)
      {
        v13 = v12;
        allocator = v9;
        v14 = (const __CFArray *)atomic_load(a2);
        if (v14)
        {
          v15 = CFArrayGetCount(v14);
          if (v15)
          {
            v16 = v15;
            v17 = 0;
            v18 = CFSTR("NSCTVariationAxisIdentifier");
            do
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v17);
              valuePtr = -1431655766;
              Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v18);
              if (Value)
              {
                CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
                VariationAxisNameID = FPFontGetVariationAxisNameID();
                v40 = (id)0xAAAAAAAAAAAAAAAALL;
                v22 = (const __CFArray *)atomic_load((unint64_t *)&v42);
                CopyLocalizedFontNameInternal(v22, 0, v13, VariationAxisNameID, 0, CFSTR("AxisNames"), (unint64_t *)&v40);
                if (atomic_load((unint64_t *)&v40))
                {
                  v24 = v14;
                  v25 = v18;
                  v26 = Mutable;
                  v27 = v13;
                  v28 = v6;
                  v29 = (void *)atomic_load((unint64_t *)&v40);
                  v30 = v29;
                  v31 = (id)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisName"));
                  if (v30 == v31)
                  {

                    v6 = v28;
                    v13 = v27;
                    Mutable = v26;
                    v18 = v25;
                    v14 = v24;
                  }
                  else
                  {
                    if (!v30 || !v31)
                    {

                      v6 = v28;
                      v13 = v27;
                      Mutable = v26;
                      v18 = v25;
                      v14 = v24;
LABEL_21:
                      v39 = (id)0xAAAAAAAAAAAAAAAALL;
                      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v39, ValueAtIndex);
                      v32 = (__CFDictionary *)atomic_load((unint64_t *)&v39);
                      v33 = (const void *)atomic_load((unint64_t *)&v40);
                      CFDictionarySetValue(v32, CFSTR("NSCTVariationAxisName"), v33);
                      v34 = (const void *)atomic_load((unint64_t *)&v39);
                      CFArrayAppendValue(Mutable, v34);

                      goto LABEL_18;
                    }
                    v38 = CFEqual(v30, v31);

                    v6 = v28;
                    v13 = v27;
                    Mutable = v26;
                    v18 = v25;
                    v14 = v24;
                    if (!v38)
                      goto LABEL_21;
                  }
                }

              }
              else
              {
                valuePtr = 0;
              }
              CFArrayAppendValue(Mutable, ValueAtIndex);
LABEL_18:
              ++v17;
            }
            while (v16 != v17);
          }
        }
        Copy = CFArrayCreateCopy(allocator, Mutable);
        do
          v36 = (void *)__ldaxr(a2);
        while (__stlxr((unint64_t)Copy, a2));

        CGFontNameTableRelease();
      }

    }
  }
}

void CopyLocalizedFontNameInternal(CFArrayRef theArray@<X3>, CGFont *a2@<X0>, uint64_t a3@<X1>, int a4@<W2>, unint64_t *a5@<X4>, const __CFString *a6@<X5>, unint64_t *a7@<X8>)
{
  const __CFArray *v13;
  const __CFArray *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  const __CFArray *v18;
  const __CFAllocator *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *v24;
  __CFString *CanonicalLanguageIdentifierFromString;
  const __CFString *v26;
  __CFString *v27;
  CFIndex Length;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  const void *v32;
  const __CFString *v33;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  const __CFDictionary *v35;
  const void *Value;
  const void *v37;
  const __CFArray *v38;
  const __CFArray *v39;
  uint64_t v40;
  unint64_t v41;
  const __CFArray *v42;
  const __CFArray *v43;
  __CFArray *v44;
  __CFSet *v45;
  const __CFArray *v46;
  const __CFArray *v47;
  const __CFArray *v48;
  const __CFArray *v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex v52;
  void *v53;
  unint64_t v54;
  void *v55;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  __CFString *v67;
  __CFString *v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  BOOL v74;
  int v75;
  const __CFString *v76;
  const __CFAllocator *v78;
  const __CFString *v79;
  __CFString *MutableCopy;
  __CFString *v81;
  unint64_t v82;
  void *v83;
  const __CFString *v84;
  const __CFString **v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  void *v94;
  unint64_t v95;
  const __CFArray *v96;
  CFArrayRef v97;
  const __CFArray *v98;
  const __CFArray *v99;
  const void *v100;
  const void *v101;
  int v102;
  void *v103;
  void *v104;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  CGFont *v109;
  int v110;
  unint64_t *v111;
  unint64_t *v112;
  const __CFString *v113;
  __CFSet *theSet;
  __CFString v115;
  id v116;
  id values;
  unint64_t v118[2];
  CFRange v119;

  v118[1] = *MEMORY[0x1E0C80C00];
  v116 = 0;
  if (!theArray || (v13 = theArray, !CFArrayGetCount(theArray)))
  {
    v14 = CFLocaleCopyPreferredLanguages();
    CreateNormalizedLanguages(v14, (unint64_t *)&values);

    do
      v15 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    do
      v16 = (void *)__ldaxr((unint64_t *)&v116);
    while (__stlxr(v15, (unint64_t *)&v116));

    v13 = (const __CFArray *)atomic_load((unint64_t *)&v116);
  }
  if (a5)
    *a5 = 0;
  if ((unint64_t)a2 | a3 && a4 != -1)
  {
    v115.data = 0;
    v115.length = 0;
    v113 = a6;
    if ((a4 & 0x80000000) == 0)
    {
      if (a3)
      {
        v17 = 0;
      }
      else
      {
        a3 = CGFontNameTableCreate();
        v17 = a3;
        if (!a3)
          goto LABEL_53;
      }
      v108 = v17;
      v109 = a2;
      v110 = a4;
      v111 = a5;
      v18 = (const __CFArray *)CGFontNameTableCopyLocales();
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
      if (v18)
      {
        Count = CFArrayGetCount(v18);
        if (Count)
        {
          v21 = Count;
          for (i = 0; i != v21; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v18, i);
            v24 = (const __CFString *)MEMORY[0x186DBF2C0](ValueAtIndex);
            CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v19, v24);
            v26 = CanonicalLanguageIdentifierFromString;
            if (v26)
            {
              v27 = (__CFString *)v26;
              Length = CFStringGetLength(v26);

              if (Length >= 1)
                CFSetAddValue(theSet, CanonicalLanguageIdentifierFromString);
            }
            else
            {

            }
          }
        }
      }
      v112 = a7;
      values = (id)0xAAAAAAAAAAAAAAAALL;
      TCFMutableArray::TCFMutableArray((TCFMutableArray *)&values, v13);
      if (v13)
      {
        v29 = CFArrayGetCount(v13);
        if (v29)
        {
          v30 = v29;
          v31 = 0;
          v32 = (const void *)*MEMORY[0x1E0C9B088];
          do
          {
            v33 = (const __CFString *)CFArrayGetValueAtIndex(v13, v31);
            ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v19, v33);
            v35 = ComponentsFromLocaleIdentifier;
            if (ComponentsFromLocaleIdentifier)
            {
              Value = CFDictionaryGetValue(ComponentsFromLocaleIdentifier, v32);
              if (Value)
              {
                v37 = Value;
                v38 = v18;
                v39 = v13;
                v40 = a3;
                v41 = atomic_load((unint64_t *)&values);
                v42 = (const __CFArray *)atomic_load((unint64_t *)&values);
                v119.length = CFArrayGetCount(v42);
                v43 = (const __CFArray *)v41;
                a3 = v40;
                v13 = v39;
                v18 = v38;
                v119.location = 0;
                if (!CFArrayContainsValue(v43, v119, v37))
                {
                  v44 = (__CFArray *)atomic_load((unint64_t *)&values);
                  CFArrayAppendValue(v44, v37);
                }
              }
            }

            ++v31;
          }
          while (v30 != v31);
        }
      }
      v45 = theSet;
      a7 = v112;
      a4 = v110;
      if (CFSetGetCount(theSet) > 0)
      {
        v115.info = 0xAAAAAAAAAAAAAAAALL;
        CreateSortedArrayWithSet(theSet, 0, 0, &v115.info);
        v46 = (const __CFArray *)atomic_load((unint64_t *)&v115.info);
        v47 = (const __CFArray *)atomic_load((unint64_t *)&values);
        v48 = CFBundleCopyLocalizationsForPreferences(v46, v47);
        v49 = v48;
        if (v48)
        {
          v50 = CFArrayGetCount(v48);
          if (v50)
          {
            v51 = v50;
            v52 = 0;
            do
            {
              v53 = (void *)CFArrayGetValueAtIndex(v49, v52);
              TCFRef<__CTFont const*>::Retain((unint64_t *)&v115.data, v53);
              if (v110 == 1 || v110 == 2)
              {
                v54 = CGFontNameTableCopyNameForLocaleIdentifier();
                do
                  v55 = (void *)__ldaxr((unint64_t *)&v115.length);
                while (__stlxr(v54, (unint64_t *)&v115.length));

              }
              if (!atomic_load((unint64_t *)&v115.length))
              {
                v57 = CGFontNameTableCopyNameForLocaleIdentifier();
                do
                  v58 = (void *)__ldaxr((unint64_t *)&v115.length);
                while (__stlxr(v57, (unint64_t *)&v115.length));

              }
              v59 = atomic_load((unint64_t *)&v115.length);
              ++v52;
              if (v59)
                v60 = 1;
              else
                v60 = v52 == v51;
            }
            while (!v60);
          }
        }

        v45 = theSet;
      }

      a5 = v111;
      a2 = v109;
      if (v108)
      {
        CGFontNameTableRelease();
        a3 = 0;
      }
    }
LABEL_53:
    v61 = a3;
    v62 = a4;
    if (a4 != 2 && !v113)
    {
LABEL_112:
      if (atomic_load((unint64_t *)&v115.length))
      {
        if (a5)
        {
          do
            v106 = __ldaxr((unint64_t *)&v115.data);
          while (__stlxr(0, (unint64_t *)&v115.data));
          *a5 = v106;
        }
        do
          v107 = __ldaxr((unint64_t *)&v115.length);
        while (__stlxr(0, (unint64_t *)&v115.length));
        *a7 = v107;
      }
      else
      {
        CopyFontNameInternal(a2, v61, v62, a7);
      }
      goto LABEL_119;
    }
    v63 = atomic_load((unint64_t *)&v115.length);
    v64 = v63 == 0;
    v65 = atomic_load((unint64_t *)&v115.length);
    if (v65 && (v66 = atomic_load((unint64_t *)&v115.data)) != 0 && CFArrayGetCount(v13))
    {
      values = (id)0xAAAAAAAAAAAAAAAALL;
      if (v13)
        v67 = (__CFString *)CFArrayGetValueAtIndex(v13, 0);
      else
        v67 = 0;
      LanguageIdentifierByNormalizing(v67, 1u, (unint64_t *)&values);
      v115.info = 0xAAAAAAAAAAAAAAAALL;
      v68 = (__CFString *)atomic_load((unint64_t *)&v115.data);
      LanguageIdentifierByNormalizing(v68, 1u, (unint64_t *)&v115.info);
      v69 = (void *)atomic_load((unint64_t *)&values);
      v70 = v69;
      v71 = (void *)atomic_load((unint64_t *)&v115.info);
      v72 = v71;
      v73 = v72;
      if (v70 != v72)
      {
        if (!v70 || !v72)
        {

          goto LABEL_75;
        }
        if (CFEqual(v70, v72))
          v74 = v63 == 0;
        else
          v74 = 1;
        v64 = v74;
      }

      if (!v64)
        goto LABEL_112;
    }
    else if (v63)
    {
      goto LABEL_112;
    }
LABEL_75:
    v75 = v62;
    v76 = v113;
    if (v113)
      goto LABEL_81;
    if (v62 != 4)
    {
      v75 = v62;
      if (v62 == 2)
      {
        v76 = CFSTR("StyleNames");
LABEL_81:
        *a7 = 0xAAAAAAAAAAAAAAAALL;
        CopyFontNameInternal(a2, v61, v75, a7);
        if (atomic_load(a7))
        {
          if (v75 < 0)
          {
LABEL_119:

            goto LABEL_120;
          }
          v78 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v79 = (const __CFString *)atomic_load(a7);
          MutableCopy = CFStringCreateMutableCopy(v78, 0, v79);
          if (MutableCopy)
          {
            v81 = MutableCopy;
            CFStringTrimWhitespace(MutableCopy);
            values = v81;
            do
              v82 = __ldaxr((unint64_t *)&values);
            while (__stlxr(0, (unint64_t *)&values));
            do
              v83 = (void *)__ldaxr(a7);
            while (__stlxr(v82, a7));

          }
        }
        v115.isa = (void *)0xAAAAAAAAAAAAAAAALL;
        v115.info = 0;
        v84 = (const __CFString *)atomic_load(a7);
        if (atomic_load((unint64_t *)&v116))
          v86 = 0;
        else
          v86 = (const __CFString **)v13;
        v87 = atomic_load((unint64_t *)&v116);
        if (a5 || !v87)
        {
          values = &v115.info;
          v118[0] = 0;
          CopyDefaultLocalizedName(&v115, v84, v76, v86, v118);
          v88 = (unint64_t *)values;
          v89 = v118[0];
          do
            v90 = (void *)__ldaxr(v88);
          while (__stlxr(v89, v88));

        }
        else
        {
          CopyDefaultLocalizedName(&v115, v84, v76, v86, 0);
        }
        if (!atomic_load((unint64_t *)&v115))
          goto LABEL_111;
        if (atomic_load((unint64_t *)&v115.info))
        {
          if (atomic_load((unint64_t *)&v115.data))
          {
            values = (id)0xAAAAAAAAAAAAAAAALL;
            v118[0] = 0xAAAAAAAAAAAAAAAALL;
            v94 = (void *)atomic_load((unint64_t *)&v115.info);
            v95 = atomic_load((unint64_t *)&v115.data);
            values = v94;
            v118[0] = v95;
            v96 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 2, MEMORY[0x1E0C9B378]);
            v97 = CFBundleCopyLocalizationsForPreferences(v96, v13);
            v98 = v97;
            v99 = v98;
            if (v98 && CFArrayGetCount(v98))
              v100 = CFArrayGetValueAtIndex(v97, 0);
            else
              v100 = 0;

            v101 = (const void *)atomic_load((unint64_t *)&v115.info);
            if (v100 == v101)
            {

            }
            else
            {
              if (!v100 || !v101)
              {

                goto LABEL_111;
              }
              v102 = CFEqual(v100, v101);

              if (!v102)
                goto LABEL_111;
            }
          }
        }
        v103 = (void *)atomic_load((unint64_t *)&v115.info);
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v115.data, v103);
        v104 = (void *)atomic_load((unint64_t *)&v115);
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v115.length, v104);
LABEL_111:

        goto LABEL_112;
      }
      if (v62 != 1)
        goto LABEL_112;
    }
    v76 = CFSTR("FontNames");
    v75 = v62;
    goto LABEL_81;
  }
  *a7 = 0;
LABEL_120:

}

void CreateSortedArrayWithSet(CFSetRef theSet@<X0>, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *)@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  CFIndex Count;
  __int128 v9;
  char *v10;
  void **v11;
  __int128 v12;
  void **v13;
  __CFArray *v14;
  __CFArray *v15;
  const __CFArray *v16;
  unint64_t v17;
  id Mutable;
  void **values;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  uint64_t v38;
  CFRange v39;
  CFRange v40;

  v38 = *MEMORY[0x1E0C80C00];
  if (theSet)
  {
    Count = CFSetGetCount(theSet);
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v36 = v9;
    v35 = v9;
    v34 = v9;
    v33 = v9;
    v32 = v9;
    v31 = v9;
    v30 = v9;
    v29 = v9;
    v28 = v9;
    v26 = v9;
    v27 = v9;
    v24 = v9;
    v25 = v9;
    v22 = v9;
    v23 = v9;
    v20 = 0;
    v21 = 0;
    values = 0;
    v37 = &v22;
    if (Count)
    {
      std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, Count);
      v10 = (char *)v20;
      bzero(v20, 8 * Count);
      v20 = &v10[8 * Count];
      v11 = values;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    Count = 0;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v36 = v12;
    v35 = v12;
    v34 = v12;
    v33 = v12;
    v32 = v12;
    v31 = v12;
    v30 = v12;
    v29 = v12;
    v28 = v12;
    v37 = &v22;
    v26 = v12;
    v27 = v12;
    v24 = v12;
    v25 = v12;
    v22 = v12;
    v23 = v12;
    v20 = 0;
    v21 = 0;
    values = 0;
  }
  CFSetGetValues(theSet, (const void **)v11);
  if (a2 && Count >= 2)
  {
    v13 = values;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v14 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
    v39.location = 0;
    v39.length = 0;
    CFArrayReplaceValues(v14, v39, (const void **)v13, Count);
    v15 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
    v16 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
    v40.length = CFArrayGetCount(v16);
    v40.location = 0;
    CFArraySortValues(v15, v40, a2, a3);
    do
      v17 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    *a4 = v17;

  }
  else
  {
    *a4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, Count, MEMORY[0x1E0C9B378]);
  }
  Mutable = &values;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&Mutable);
}

void addOpticalSizeComponents(unsigned int *a1, uint64_t a2, int a3, const void *a4, uint64_t a5, const __CFNumber *a6, TCFMutableDictionary *a7)
{
  uint64_t v11;
  unsigned int v14;
  unsigned int v15;
  void **v17;
  __CFString *v18;
  uint64_t i;
  __CFDictionary *v20;
  const void *v21;
  id Mutable;

  LODWORD(v11) = a3;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v14 = a1[4];
  if (a5 == 1 && v14 <= 0x10 && ((0x1FEFFu >> v14) & 1) != 0)
    v14 = dword_184948124[v14];
  v15 = v14 % 9;
  if (v14 % 9 <= 2)
  {
    DetermineLanguageSpecificParameters();
    if (v15 < dword_1EDD16EC0)
      v14 = v14 - v15 + dword_1EDD16EC0;
  }
  if (v14 == 8 || (_DWORD)v11 == 0)
    v11 = 0;
  else
    v11 = v11;
  v17 = (void **)(a2 + 40 * v14);
  if (a6)
    v18 = SFFontNameForWidth(v14, a6, 0);
  else
    v18 = (__CFString *)*v17;
  AddVariationInfoWithGrade(a7, v18, v11);
  for (i = 6; i != 10; i += 2)
    insertOpticalSizeComponent(v17, v18, *a1, a1[3], v11, (unint64_t *)&Mutable, a4, 0, *(double *)&a1[i] * 0.5);
  v20 = (__CFDictionary *)atomic_load((unint64_t *)a7);
  v21 = (const void *)atomic_load((unint64_t *)&Mutable);
  CFDictionaryAddValue(v20, CFSTR("Components"), v21);

}

void setNameWithGrade(void *value, uint64_t a2, unint64_t *a3)
{
  __CFString *v5;
  __CFDictionary *v6;
  __CFDictionary *v7;

  if ((_DWORD)a2)
  {
    v5 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@G%u"), value, a2);
    v6 = (__CFDictionary *)atomic_load(a3);
    CFDictionaryAddValue(v6, CFSTR("name"), v5);

  }
  else
  {
    v7 = (__CFDictionary *)atomic_load(a3);
    CFDictionaryAddValue(v7, CFSTR("name"), value);
  }
}

uint64_t DetermineLanguageSpecificParameters(void)
{
  int v0;
  uint64_t result;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  id v15;

  v0 = dword_1EDD16EC4;
  result = GetLocaleChangedCount();
  if (v0 != (_DWORD)result)
  {
    v15 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyPreferredLanguageCode(&v15);
    if (atomic_load((unint64_t *)&v15))
    {
      v3 = (void *)atomic_load((unint64_t *)&v15);
      v4 = v3;
      v5 = v4;
      if (v4 == CFSTR("zh") || v4 && CFEqual(v4, CFSTR("zh")))
      {
        byte_1EDD16EB9 = 1;
      }
      else
      {
        v6 = (void *)atomic_load((unint64_t *)&v15);
        v7 = v6;
        v8 = v7;
        if (v7 == CFSTR("ja") || v7 && CFEqual(v7, CFSTR("ja")))
        {
          byte_1EDD16EB9 = 1;
        }
        else
        {
          v9 = (void *)atomic_load((unint64_t *)&v15);
          v10 = v9;
          v11 = v10;
          if (v10 == CFSTR("ko"))
          {
            v12 = 1;
          }
          else if (v10)
          {
            v12 = CFEqual(v10, CFSTR("ko")) != 0;
          }
          else
          {
            v12 = 0;
          }
          byte_1EDD16EB9 = v12;

        }
      }

      v13 = atomic_load((unint64_t *)&v15);
      v14 = (void *)objc_msgSend(&unk_1E1605540, "objectForKeyedSubscript:", v13);
      if (v14)
        LODWORD(v14) = objc_msgSend(v14, "unsignedIntValue");
      dword_1EDD16EC0 = (int)v14;
    }

    result = GetLocaleChangedCount();
    dword_1EDD16EC4 = result;
  }
  return result;
}

void CopyPreferredLanguageCode(_QWORD *a1@<X8>)
{
  const __CFAllocator *v2;
  const __CFString *v3;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  const __CFDictionary *v5;
  void *Value;
  id v7;
  id v8;

  v8 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyPreferredLanguage((unint64_t *)&v8);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const __CFString *)atomic_load((unint64_t *)&v8);
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v2, v3);
  v5 = ComponentsFromLocaleIdentifier;
  if (ComponentsFromLocaleIdentifier
    && (Value = (void *)CFDictionaryGetValue(ComponentsFromLocaleIdentifier, (const void *)*MEMORY[0x1E0C9B088])) != 0)
  {
    v7 = Value;
  }
  else
  {
    do
      v7 = (id)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
  }
  *a1 = v7;

}

uint64_t TAATMorphChain::ResolveFlags(TAATMorphChain *this, uint64_t a2, const TFontFeatureSettingList *a3, const TAttributes *a4, __CFString *a5)
{
  __CFString *v5;
  uint64_t v10;
  os_unfair_lock_s *v11;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  const void *v17;
  unint64_t v18;
  void *v19;
  id v20;
  int v21;
  int v22;
  TFont *v23;
  unint64_t v24;
  void *v25;
  const __CFDictionary *v27;
  const __CFNumber *Value;
  __int128 v29;
  CFIndex Count;
  CFIndex v31;
  char *v32;
  const void **v33;
  CFStringRef *v34;
  CFStringRef *v35;
  CFIndex v36;
  int v37;
  __CFString *v38;
  CFIndex Length;
  BOOL v40;
  __CFString *v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  __CFString *key;
  __CFString *v49;
  id v50;
  id v51;
  id p_valuePtr;
  id valuePtr;
  void *v54;
  uint64_t v55;
  _OWORD v56[15];
  _OWORD *v57;
  uint64_t v58;

  v5 = a5;
  v58 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    if (*((_BYTE *)this + 64))
    {
      if (!atomic_load((unint64_t *)a3))
      {
        if (!a4)
          return *((unsigned int *)this + 10);
        if (!atomic_load((unint64_t *)a4 + 3))
          return *((unsigned int *)this + 10);
        goto LABEL_5;
      }
    }
  }
  if (a4)
LABEL_5:
    v5 = (__CFString *)atomic_load((unint64_t *)a4 + 3);
  v49 = (__CFString *)*MEMORY[0x1E0C9B0D0];
  if (v5 == (__CFString *)*MEMORY[0x1E0C9B0D0])
  {
    v21 = 0;
    v22 = 43520;
    goto LABEL_57;
  }
  v50 = 0;
  if (v5)
    goto LABEL_8;
  v23 = (TFont *)*((_QWORD *)this + 7);
  LOBYTE(valuePtr) = -86;
  v21 = 0;
  v22 = 43520;
  if (!TFont::IsSystemUIFontAndForShaping(v23, (BOOL *)&valuePtr) || !(_BYTE)valuePtr)
    goto LABEL_56;
  CopyPreferredLanguage((unint64_t *)&valuePtr);
  do
    v24 = __ldaxr((unint64_t *)&valuePtr);
  while (__stlxr(0, (unint64_t *)&valuePtr));
  do
    v25 = (void *)__ldaxr((unint64_t *)&v50);
  while (__stlxr(v24, (unint64_t *)&v50));

  v5 = (__CFString *)atomic_load((unint64_t *)&v50);
  if (v5)
  {
LABEL_8:
    v10 = *((_QWORD *)this + 7);
    v11 = *(os_unfair_lock_s **)(v10 + 400);
    p_valuePtr = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::RetainedObject(v11, 4, 0, &p_valuePtr);
    if (!atomic_load((unint64_t *)&p_valuePtr))
    {
      v13 = atomic_load((unint64_t *)&p_valuePtr);
      if (v49 != (__CFString *)v13)
      {
        TAATLtagTable::TAATLtagTable((TAATLtagTable *)&valuePtr, (const TBaseFont *)v11);
        TAATLtagTable::CopyLanguageTags((TAATLtagTable *)&valuePtr, (unint64_t *)&v51);
        do
          v14 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0, (unint64_t *)&v51));
        do
          v15 = (void *)__ldaxr((unint64_t *)&p_valuePtr);
        while (__stlxr(v14, (unint64_t *)&p_valuePtr));

        if (!atomic_load((unint64_t *)&p_valuePtr))
          TCFRef<__CTFont const*>::Retain((unint64_t *)&p_valuePtr, v49);
        v17 = (const void *)atomic_load((unint64_t *)&p_valuePtr);
        TBaseFont::SetObject(*(os_unfair_lock_s **)(v10 + 400), 4, 0, v17);
      }
    }
    v18 = atomic_load((unint64_t *)&p_valuePtr);
    if (v49 == (__CFString *)v18)
    {
      v20 = 0;
    }
    else
    {
      v19 = (void *)atomic_load((unint64_t *)&p_valuePtr);
      v20 = v19;
    }
    valuePtr = v20;
    do
      v27 = (const __CFDictionary *)__ldaxr((unint64_t *)&valuePtr);
    while (__stlxr(0, (unint64_t *)&valuePtr));

    if (v27)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v27, v5);
      if (Value)
      {
LABEL_34:
        LOWORD(valuePtr) = -21846;
        CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
        v22 = (unsigned __int16)valuePtr;
        v21 = 1;
LABEL_55:

        goto LABEL_56;
      }
      *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v56[14] = v29;
      v56[13] = v29;
      v56[12] = v29;
      v56[11] = v29;
      v56[10] = v29;
      v56[9] = v29;
      v56[8] = v29;
      v56[7] = v29;
      v56[6] = v29;
      v56[5] = v29;
      v56[4] = v29;
      v56[3] = v29;
      v56[2] = v29;
      v56[1] = v29;
      v56[0] = v29;
      Count = CFDictionaryGetCount(v27);
      valuePtr = 0;
      v54 = 0;
      v55 = 0;
      v57 = v56;
      if (Count)
      {
        v31 = Count;
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&valuePtr, Count);
        v32 = (char *)v54;
        bzero(v54, 8 * v31);
        v54 = &v32[8 * v31];
        v33 = (const void **)valuePtr;
      }
      else
      {
        v33 = 0;
      }
      CFDictionaryGetKeysAndValues(v27, v33, 0);
      v34 = (CFStringRef *)valuePtr;
      v35 = (CFStringRef *)v54;
      if (valuePtr == v54)
        goto LABEL_53;
      key = 0;
      v36 = 0;
      v37 = -1;
      do
      {
        v38 = (__CFString *)*v34;
        if (CanonicalLocaleIdentifiersMatch(*v34, v5))
        {
          if (v37 == -1)
            v37 = ScriptAndLangSysFromCanonicalLanguage(v5);
          if (v37 == ScriptAndLangSysFromCanonicalLanguage(v38))
          {
            Length = CFStringGetLength(v38);
            v40 = Length <= v36;
            if (Length > v36)
              v36 = Length;
            v41 = key;
            if (!v40)
              v41 = v38;
            key = v41;
          }
        }
        ++v34;
      }
      while (v34 != v35);
      if (!key)
      {
LABEL_53:
        p_valuePtr = &valuePtr;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_valuePtr);
      }
      else
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(v27, key);
        p_valuePtr = &valuePtr;
        std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_valuePtr);
        if (Value)
          goto LABEL_34;
      }
    }
    v21 = 0;
    v22 = 43520;
    goto LABEL_55;
  }
  v21 = 0;
  v22 = 43520;
LABEL_56:

LABEL_57:
  v42 = *((unsigned int *)this + 11);
  if ((_DWORD)v42)
  {
    v43 = v22 + 1;
    v44 = (unsigned int *)(*((_QWORD *)this + 6) + 4);
    do
    {
      v45 = bswap32(*((unsigned __int16 *)v44 - 2)) >> 16;
      v46 = bswap32(*((unsigned __int16 *)v44 - 1)) >> 16;
      if (v45 == 27)
      {
        if (!*((_BYTE *)this + 64))
        {
          TBaseFont::GetShapingType(*(TBaseFont **)(*((_QWORD *)this + 7) + 400));
          switch(v46)
          {
            case 0u:
            case 5u:
              goto LABEL_69;
            case 1u:
            case 4u:
              goto LABEL_68;
            default:
              goto LABEL_67;
          }
          goto LABEL_69;
        }
      }
      else if (v45 == 39)
      {
        if (v21 && v43 == v46)
        {
LABEL_68:
          a2 = (bswap32(*v44) | a2) & bswap32(v44[1]);
          goto LABEL_69;
        }
        if (v5 == v49)
        {
          a2 = bswap32(*v44) | a2;
          goto LABEL_69;
        }
      }
LABEL_67:
      if (TFontFeatureSettingList::IndexOfAATSetting(a3, v45, v46) != -1)
        goto LABEL_68;
LABEL_69:
      v44 += 3;
      --v42;
    }
    while (v42);
  }
  return a2;
}

const __CFString *GetLocalizedTrimSetKey(__CFString *a1, unsigned int *a2)
{
  const __CFString *v3;
  const __CFString *LocalizedTrimSetKeyForNormalizedLanguage;
  id v6;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  LanguageNormalizedForPresetFallbacks(a1, (unint64_t *)&v6);
  v3 = (const __CFString *)atomic_load((unint64_t *)&v6);
  LocalizedTrimSetKeyForNormalizedLanguage = GetLocalizedTrimSetKeyForNormalizedLanguage(v3, a2);

  return LocalizedTrimSetKeyForNormalizedLanguage;
}

void LanguageNormalizedForPresetFallbacks(__CFString *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  if (a1)
    LanguageIdentifierByNormalizing(a1, 0, a2);
  else
    CreateNormalizedPreferredLanguage(0, a2);
}

void CreateNormalizedPreferredLanguage(unsigned int a1@<W0>, unint64_t *a2@<X8>)
{
  __CFString *v4;
  id v5;

  v5 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyPreferredLanguage((unint64_t *)&v5);
  v4 = (__CFString *)atomic_load((unint64_t *)&v5);
  LanguageIdentifierByNormalizing(v4, a1, a2);

}

void LanguageIdentifierByNormalizing(__CFString *a1@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  const __CFAllocator *v13;
  int v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFArrayRef v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex Count;
  const __CFAllocator *v21;
  char *v22;
  const __CFDictionary *v23;
  const void *v24;
  uint64_t v25;
  const __CFDictionary *v27;
  __CFString *v28;
  void *v29;
  __CFString *v30;
  __CFString *v31;
  int v32;
  const __CFArray *v33;
  const __CFArray *v34;
  CFArrayRef v35;
  const __CFArray *v36;
  const __CFArray *v37;
  CFIndex v38;
  const __CFArray *v39;
  const __CFArray *v40;
  __CFString *ValueAtIndex;
  __CFString *v42;
  void *info;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  __CFString *Value;
  __CFString *v46;
  __CFString *v47;
  const __CFDictionary *v48;
  __CFString *v49;
  void *v50;
  __CFString *v51;
  __CFString *v52;
  int v53;
  const __CFDictionary *v54;
  __CFString *v55;
  __CFString *v56;
  _BOOL4 v57;
  _BOOL4 v58;
  __CFString *v59;
  void *v60;
  __CFString *v61;
  __CFString *v62;
  int v63;
  const __CFString *v64;
  CFDictionaryRef v65;
  void *v66;
  const __CFDictionary *v67;
  unint64_t v68;
  void *v69;
  const __CFDictionary *v70;
  void *isa;
  __CFDictionary *Mutable;
  const void *v73;
  unint64_t v74;
  void *v75;
  const __CFString *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  const __CFString *v80;
  CFDictionaryRef v81;
  void *v82;
  const __CFDictionary *v83;
  unint64_t v84;
  void *v85;
  __CFDictionary *v86;
  const void *v87;
  void *v88;
  void *v89;
  void *key;
  id v91;
  __CFString v92;

  if (!a1)
  {
    *a3 = 0;
    return;
  }
  os_unfair_lock_lock_with_options();
  v6 = a2;
  v7 = *(const void **)&_MergedGlobals_17[8 * a2 + 120];
  if (v7)
  {
    if (*(_DWORD *)&_MergedGlobals_17[4 * a2 + 104] == TGenerationSeed::sGeneration)
      goto LABEL_10;
    CFRelease(v7);
  }
  v92.data = (char *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v8 = __ldaxr((unint64_t *)&v92.data);
  while (__stlxr(0, (unint64_t *)&v92.data));
  v92.info = v8;

  do
    v9 = __ldaxr((unint64_t *)&v92.info);
  while (__stlxr(0, (unint64_t *)&v92.info));
  v10 = &_MergedGlobals_17[8 * a2];
  *((_QWORD *)v10 + 15) = v9;

  *(_DWORD *)&_MergedGlobals_17[4 * a2 + 104] = TGenerationSeed::sGeneration;
  v7 = (const void *)*((_QWORD *)v10 + 15);
LABEL_10:
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  v92.data = (char *)(id)CFDictionaryGetValue((CFDictionaryRef)v7, a1);
  do
    v11 = __ldaxr((unint64_t *)&v92.data);
  while (__stlxr(0, (unint64_t *)&v92.data));
  *a3 = v11;

  if (atomic_load(a3))
    goto LABEL_149;
  if (a1 == CFSTR("zh") || CFStringHasPrefix(a1, CFSTR("zh")))
  {
    v92.data = (char *)a1;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v92.info = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&v92.data, 1, MEMORY[0x1E0C9B378]);
    if (!a2)
    {
      if (a1 == CFSTR("zh-Hant")
        || (v14 = CFEqual(a1, CFSTR("zh-Hant")), a1 == CFSTR("zh"))
        || v14
        || CFEqual(a1, CFSTR("zh")))
      {
        v15 = (const __CFArray *)objc_msgSend(&unk_1E16054C8, "objectForKeyedSubscript:", a1);
        v16 = CFLocaleCopyPreferredLanguages();
        v17 = CFBundleCopyLocalizationsForPreferences(v15, v16);
        v18 = v17;
        if (v18)
        {
          v19 = v18;
          Count = CFArrayGetCount(v18);

          if (Count)
            TCFRef<__CTFont const*>::Retain((unint64_t *)&v92.info, v17);
        }
        else
        {

        }
      }
    }
    if (a2 == 2)
      v33 = (const __CFArray *)&unk_1E16192D8;
    else
      v33 = (const __CFArray *)&unk_1E16192F0;
    v34 = (const __CFArray *)atomic_load((unint64_t *)&v92.info);
    v35 = CFBundleCopyLocalizationsForPreferences(v33, v34);
    v36 = v35;
    if (!v36)
    {

      goto LABEL_47;
    }
    v37 = v36;
    v38 = CFArrayGetCount(v36);

    if (!v38)
    {
LABEL_47:
      v42 = a1;
LABEL_50:
      v92.isa = v42;
LABEL_51:

      info = (void *)v92.info;
      goto LABEL_145;
    }
    v39 = v35;
    if (v39)
    {
      v40 = v39;
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v39, 0);

      if (a2)
      {
LABEL_42:
        if (ValueAtIndex != CFSTR("zxx") && (!ValueAtIndex || !CFEqual(ValueAtIndex, CFSTR("zxx"))))
          goto LABEL_49;
        goto LABEL_47;
      }
      if (ValueAtIndex == CFSTR("zh-Hant"))
      {
LABEL_55:
        ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v13, a1);
        Value = (__CFString *)CFDictionaryGetValue(ComponentsFromLocaleIdentifier, (const void *)*MEMORY[0x1E0C9B060]);
        if (Value != CFSTR("HK"))
        {
          v46 = Value;
          if (Value)
          {
            if (CFEqual(Value, CFSTR("HK")))
              goto LABEL_58;
            if (v46 == CFSTR("MO") || CFEqual(v46, CFSTR("MO")))
            {
              v47 = CFSTR("zh-MO");
              goto LABEL_59;
            }
          }

          goto LABEL_42;
        }
LABEL_58:
        v47 = CFSTR("zh-HK");
LABEL_59:
        v92.isa = v47;

        goto LABEL_51;
      }
      if (ValueAtIndex)
      {
        if (!CFEqual(ValueAtIndex, CFSTR("zh-Hant")))
          goto LABEL_42;
        goto LABEL_55;
      }
    }
    else
    {

      ValueAtIndex = 0;
    }
LABEL_49:
    v42 = ValueAtIndex;
    goto LABEL_50;
  }
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = (char *)CFLocaleCreateComponentsFromLocaleIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  v92.info = 0xAAAAAAAAAAAAAAAALL;
  v92.data = v22;
  v23 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
  v24 = (const void *)*MEMORY[0x1E0C9B088];
  if (v23)
    v23 = (const __CFDictionary *)CFDictionaryGetValue(v23, (const void *)*MEMORY[0x1E0C9B088]);
  v92.isa = v23;
  do
    v25 = __ldaxr((unint64_t *)&v92);
  while (__stlxr(0, (unint64_t *)&v92));
  v92.info = v25;

  if (!atomic_load((unint64_t *)&v92.info))
  {
LABEL_142:
    v59 = a1;
    goto LABEL_143;
  }
  v27 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
  key = (void *)*MEMORY[0x1E0C9B090];
  v28 = (__CFString *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0C9B090]);
  v29 = (void *)atomic_load((unint64_t *)&v92.info);
  v30 = v29;
  if (v30 == CFSTR("yue"))
  {

    goto LABEL_61;
  }
  v31 = v30;
  if (!v30)
  {

    goto LABEL_77;
  }
  v32 = CFEqual(v30, CFSTR("yue"));

  if (v32)
  {
LABEL_61:
    if (v28 != CFSTR("Hans") && (!v28 || !CFEqual(v28, CFSTR("Hans"))))
    {
      if ((v48 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data),
            v49 = (__CFString *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x1E0C9B060]),
            v28 == CFSTR("Hant"))
        || v28 && CFEqual(v28, CFSTR("Hant"))
        || v49 != CFSTR("CN") && (!v49 || !CFEqual(v49, CFSTR("CN"))))
      {
        if (a2 == 3 || !a2)
        {
          if (v49 == CFSTR("MO") || v49 && CFEqual(v49, CFSTR("MO")))
            goto LABEL_116;
          goto LABEL_118;
        }
LABEL_119:
        v59 = CFSTR("zh-Hant");
        goto LABEL_143;
      }
    }
    goto LABEL_89;
  }
LABEL_77:
  v50 = (void *)atomic_load((unint64_t *)&v92.info);
  v51 = v50;
  if (v51 == CFSTR("wuu"))
  {

  }
  else
  {
    v52 = v51;
    if (!v51)
    {

      goto LABEL_91;
    }
    v53 = CFEqual(v51, CFSTR("wuu"));

    if (!v53)
    {
LABEL_91:
      v60 = (void *)atomic_load((unint64_t *)&v92.info);
      v61 = v60;
      if (v61 == CFSTR("und"))
      {

      }
      else
      {
        v62 = v61;
        if (!v61)
        {
          isa = 0;
LABEL_121:

          goto LABEL_122;
        }
        v63 = CFEqual(v61, CFSTR("und"));

        if (!v63)
        {
LABEL_122:
          if (a2)
          {
            if (v28)
            {
              Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v73 = (const void *)atomic_load((unint64_t *)&v92.info);
              CFDictionarySetValue(Mutable, v24, v73);
              CFDictionarySetValue(Mutable, key, v28);
              v92.isa = (void *)CFLocaleCreateLocaleIdentifierFromComponents(v21, Mutable);
              do
                v74 = __ldaxr((unint64_t *)&v92);
              while (__stlxr(0, (unint64_t *)&v92));
              do
                v75 = (void *)__ldaxr((unint64_t *)&v92.info);
              while (__stlxr(v74, (unint64_t *)&v92.info));

              v76 = (const __CFString *)atomic_load((unint64_t *)&v92.info);
              v92.isa = (void *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v21, v76);
              do
                v77 = __ldaxr((unint64_t *)&v92);
              while (__stlxr(0, (unint64_t *)&v92));
              do
                v78 = (void *)__ldaxr((unint64_t *)&v92.info);
              while (__stlxr(v77, (unint64_t *)&v92.info));

              do
                v79 = (void *)__ldaxr((unint64_t *)&v92.info);
              while (__stlxr(0, (unint64_t *)&v92.info));
              v92.isa = v79;

              goto LABEL_144;
            }
            if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "systemLanguages"), "containsObject:", a1) & 1) == 0)
            {
              do
                v88 = (void *)__ldaxr((unint64_t *)&v92.info);
              while (__stlxr(0, (unint64_t *)&v92.info));
              v92.isa = v88;
              goto LABEL_144;
            }
            goto LABEL_142;
          }
          if (!v28)
          {
            v92.isa = (void *)0xAAAAAAAAAAAAAAAALL;
            MaximizedLocaleIdentifier(&v92, a1);
            v80 = (const __CFString *)atomic_load((unint64_t *)&v92);
            v81 = CFLocaleCreateComponentsFromLocaleIdentifier(v21, v80);
            do
              v82 = (void *)__ldaxr((unint64_t *)&v92.data);
            while (__stlxr((unint64_t)v81, (unint64_t *)&v92.data));

            v83 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
            v28 = (__CFString *)CFDictionaryGetValue(v83, key);

          }
          if (v28 == CFSTR("Arab"))
            goto LABEL_140;
          if (v28)
          {
            if (CFEqual(v28, CFSTR("Arab")))
            {
LABEL_140:
              v59 = CFSTR("ar");
              goto LABEL_143;
            }
            if (v28 == CFSTR("Aran") || CFEqual(v28, CFSTR("Aran")))
            {
              v59 = CFSTR("ur");
              goto LABEL_143;
            }
            if (v28 == CFSTR("Qaag") || CFEqual(v28, CFSTR("Qaag")))
            {
              v59 = CFSTR("my-Qaag");
              goto LABEL_143;
            }
          }
          do
            v89 = (void *)__ldaxr((unint64_t *)&v92.info);
          while (__stlxr(0, (unint64_t *)&v92.info));
          v92.isa = v89;
          goto LABEL_144;
        }
      }
      v92.isa = (void *)0xAAAAAAAAAAAAAAAALL;
      MaximizedLocaleIdentifier(&v92, a1);
      v64 = (const __CFString *)atomic_load((unint64_t *)&v92);
      v65 = CFLocaleCreateComponentsFromLocaleIdentifier(v21, v64);
      do
        v66 = (void *)__ldaxr((unint64_t *)&v92.data);
      while (__stlxr((unint64_t)v65, (unint64_t *)&v92.data));

      v67 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
      if (v67)
        v67 = (const __CFDictionary *)CFDictionaryGetValue(v67, v24);
      v91 = v67;
      do
        v68 = __ldaxr((unint64_t *)&v91);
      while (__stlxr(0, (unint64_t *)&v91));
      do
        v69 = (void *)__ldaxr((unint64_t *)&v92.info);
      while (__stlxr(v68, (unint64_t *)&v92.info));

      if (v28)
      {
        v70 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
        v28 = (__CFString *)CFDictionaryGetValue(v70, key);
      }
      isa = v92.isa;
      goto LABEL_121;
    }
  }
  if (v28 == CFSTR("Hant") || v28 && CFEqual(v28, CFSTR("Hant")))
  {
    v54 = (const __CFDictionary *)atomic_load((unint64_t *)&v92.data);
    v55 = (__CFString *)CFDictionaryGetValue(v54, (const void *)*MEMORY[0x1E0C9B060]);
    v56 = v55;
    if (v55 == CFSTR("HK"))
    {
      v57 = 1;
    }
    else
    {
      if (!v55)
      {
        v57 = 0;
        v58 = 0;
LABEL_113:
        if (a2 == 3 || !a2)
        {
          if (v58)
          {
LABEL_116:
            v59 = CFSTR("zh-MO");
            goto LABEL_143;
          }
          if (v57)
          {
LABEL_118:
            v59 = CFSTR("zh-HK");
            goto LABEL_143;
          }
        }
        goto LABEL_119;
      }
      v57 = CFEqual(v55, CFSTR("HK")) != 0;
      if (v56 == CFSTR("MO"))
      {
        v58 = 1;
        goto LABEL_113;
      }
    }
    v58 = CFEqual(v56, CFSTR("MO")) != 0;
    goto LABEL_113;
  }
LABEL_89:
  v59 = CFSTR("zh-Hans");
LABEL_143:
  v92.isa = v59;
LABEL_144:

  info = v92.data;
LABEL_145:

  do
    v84 = __ldaxr((unint64_t *)&v92);
  while (__stlxr(0, (unint64_t *)&v92));
  do
    v85 = (void *)__ldaxr(a3);
  while (__stlxr(v84, a3));

  v86 = *(__CFDictionary **)&_MergedGlobals_17[8 * v6 + 120];
  v87 = (const void *)atomic_load(a3);
  CFDictionarySetValue(v86, a1, v87);
LABEL_149:
  os_unfair_lock_unlock(&stru_1ECDE77C4);
}

void CopyPreferredLanguage(unint64_t *a1@<X8>)
{
  CFArrayRef v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  void *ValueAtIndex;
  void *v7;
  void *v8;

  os_unfair_lock_lock_with_options();
  *a1 = (unint64_t)(id)qword_1ECDE77E8;
  if (qword_1ECDE77F0 != -1)
    dispatch_once_f(&qword_1ECDE77F0, 0, (dispatch_function_t)GetLocaleChangedCount(void)::$_0::__invoke);
  if (dword_1ECDE77CC != gLocaleChangedCount)
  {
    dword_1ECDE77CC = gLocaleChangedCount;
    v2 = CFLocaleCopyPreferredLanguages();
    v3 = v2;
    if (v3)
    {
      v4 = v3;
      Count = CFArrayGetCount(v3);

      if (Count >= 1)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v2, 0);
        TCFRef<__CTFont const*>::Retain(a1, ValueAtIndex);
      }
    }
    else
    {

    }
    v7 = (void *)atomic_load(a1);
    v8 = (void *)qword_1ECDE77E8;
    if ((void *)qword_1ECDE77E8 != v7)
    {
      qword_1ECDE77E8 = v7;

    }
  }
  os_unfair_lock_unlock(&stru_1ECDE77C8);
}

const __CFString *GetLocalizedTrimSetKeyForNormalizedLanguage(const __CFString *cf1, unsigned int *a2)
{
  unsigned int v4;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  int v9;
  id v10;

  if (cf1 == CFSTR("zh-Hans") || cf1 && CFEqual(cf1, CFSTR("zh-Hans")))
  {
    v4 = 1;
LABEL_25:
    *a2 = v4;
    return CFSTR("system-ui");
  }
  if (cf1 == CFSTR("zh-Hant") || cf1 && CFEqual(cf1, CFSTR("zh-Hant")))
  {
    v4 = 2;
    goto LABEL_25;
  }
  if (cf1 == CFSTR("zh-HK") || cf1 && CFEqual(cf1, CFSTR("zh-HK")))
  {
    v4 = 4;
    goto LABEL_25;
  }
  if (cf1 == CFSTR("zh-MO") || cf1 && CFEqual(cf1, CFSTR("zh-MO")))
  {
    v4 = 8;
    goto LABEL_25;
  }
  if (cf1 == CFSTR("ja") || cf1 && CFEqual(cf1, CFSTR("ja")))
  {
    v4 = 16;
    goto LABEL_25;
  }
  if (cf1 == CFSTR("ar") || cf1 && CFEqual(cf1, CFSTR("ar")))
  {
    v4 = 32;
    goto LABEL_25;
  }
  if (cf1 == CFSTR("hi") || cf1 && CFEqual(cf1, CFSTR("hi")))
  {
    v10 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyPreferredNumberingSystem((uint64_t *)&v10);
    v6 = (void *)atomic_load((unint64_t *)&v10);
    v7 = v6;
    if (v7 == CFSTR("deva"))
    {

    }
    else
    {
      v8 = v7;
      if (!v7)
      {

LABEL_37:
        return 0;
      }
      v9 = CFEqual(v7, CFSTR("deva"));

      if (!v9)
        goto LABEL_37;
    }
    *a2 = 64;

    return CFSTR("system-ui");
  }
  return 0;
}

const __CFString *TDescriptorSource::CanLanguageAffectCascadeList(const __CFString *this, const __CFString *a2)
{
  const __CFString *v2;
  const __CFArray *v3;
  CFRange v4;

  if (this)
  {
    v2 = this;
    this = (const __CFString *)CFStringGetLength(this);
    if (this)
    {
      if (qword_1ECDE7798 != -1)
        dispatch_once_f(&qword_1ECDE7798, 0, (dispatch_function_t)GetOrderedLanguages(void)::$_0::__invoke);
      v3 = (const __CFArray *)qword_1ECDE7790;
      if (qword_1ECDE7790)
      {
        v4.length = CFArrayGetCount((CFArrayRef)qword_1ECDE7790);
        v4.location = 0;
        return (const __CFString *)(CFArrayContainsValue(v3, v4, v2) != 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t GetEmojiPolicyFromLocale(const __CFString *a1)
{
  __int128 v2;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v5;
  char *v6;
  uint64_t v7;
  int Script;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  CFComparisonResult v14;
  __CFString *v15;
  CFComparisonResult v16;
  __CFString *v17;
  int KeywordValue;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  CFComparisonResult v24;
  __CFString *v25;
  CFComparisonResult v26;
  _DWORD v28[3];
  UInt8 bytes[8];
  int64x2_t v30;
  uint64_t v31;
  _OWORD v32[2];
  _OWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v32[0] = v2;
    v32[1] = v2;
    v31 = 0;
    v30 = 0uLL;
    v33 = v32;
    if (!CFStringGetCStringPtr(a1, 0x600u))
    {
      Length = CFStringGetLength(a1);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
      v5 = MaximumSizeForEncoding + 1;
      v6 = (char *)v30.i64[0];
      if ((unint64_t)(MaximumSizeForEncoding + 1) <= v30.i64[1] - v30.i64[0])
      {
        if ((unint64_t)(MaximumSizeForEncoding + 1) < v30.i64[1] - v30.i64[0])
          v30.i64[1] = v30.i64[0] + v5;
      }
      else
      {
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v30, MaximumSizeForEncoding + 1 - (v30.i64[1] - v30.i64[0]));
        v6 = (char *)v30.i64[0];
      }
      CFStringGetCString(a1, v6, v5, 0x600u);
    }
    *(_DWORD *)&bytes[3] = 0;
    v28[2] = 0;
    *(_DWORD *)bytes = 0;
    Script = uloc_getScript();
    if (Script < 1)
    {
LABEL_26:
      *(_DWORD *)((char *)v28 + 3) = 0;
      v28[0] = 0;
      KeywordValue = uloc_getKeywordValue();
      v7 = 0;
      if (KeywordValue < 1)
      {
LABEL_44:
        *(_QWORD *)bytes = &v30;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)bytes);
        return v7;
      }
      v19 = (__CFString *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v28, KeywordValue, 0x600u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      v20 = v19;
      if (!v19)
        goto LABEL_43;
      v21 = v19;
      v22 = v21;
      v23 = CFSTR("emoji");
      if (v22 == CFSTR("emoji"))
      {
        v7 = 2;
      }
      else
      {
        if (v22)
        {
          v24 = CFStringCompare(v22, CFSTR("emoji"), 1uLL);

          if (v24 == kCFCompareEqualTo)
          {
            v7 = 2;
LABEL_40:
            v17 = v20;
            goto LABEL_41;
          }
        }
        else
        {

        }
        v21 = v20;
        v25 = v21;
        v23 = CFSTR("text");
        if (v25 != CFSTR("text"))
        {
          if (v25)
          {
            v26 = CFStringCompare(v25, CFSTR("text"), 1uLL);

            if (v26 == kCFCompareEqualTo)
            {
              v7 = 1;
              goto LABEL_40;
            }
          }
          else
          {

          }
LABEL_43:

          v7 = 0;
          goto LABEL_44;
        }
        v7 = 1;
      }

      goto LABEL_40;
    }
    v9 = (__CFString *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, Script, 0x600u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v10 = v9;
    if (v9)
    {
      v11 = v9;
      v12 = v11;
      v13 = CFSTR("Zsye");
      if (v12 == CFSTR("Zsye"))
      {
        v7 = 2;
      }
      else
      {
        if (v12)
        {
          v14 = CFStringCompare(v12, CFSTR("Zsye"), 1uLL);

          if (v14 == kCFCompareEqualTo)
          {
            v7 = 2;
LABEL_23:
            v17 = v10;
LABEL_41:

            goto LABEL_44;
          }
        }
        else
        {

        }
        v11 = v10;
        v15 = v11;
        v13 = CFSTR("Zsym");
        if (v15 != CFSTR("Zsym"))
        {
          if (v15)
          {
            v7 = 1;
            v16 = CFStringCompare(v15, CFSTR("Zsym"), 1uLL);

            if (v16 == kCFCompareEqualTo)
              goto LABEL_23;
          }
          else
          {

          }
          goto LABEL_25;
        }
        v7 = 1;
      }

      goto LABEL_23;
    }
LABEL_25:

    goto LABEL_26;
  }
  return 0;
}

void TBaseFont::RetainedObject(os_unfair_lock_s *a1@<X0>, int a2@<W1>, const void *a3@<X2>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v8;
  void *v9;
  const __CFDictionary *Value;
  const __CFDictionary *v11;

  v8 = a1 + 111;
  os_unfair_lock_lock_with_options();
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  v9 = (void *)atomic_load((unint64_t *)&a1[2 * a2 + 138]._os_unfair_lock_opaque);
  Value = v9;
  v11 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a3);
  *a4 = Value;

  os_unfair_lock_unlock(v8);
}

void CreateCopyOfArrayByApplyingFunction(const __CFArray *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  CFMutableArrayRef Mutable;
  unint64_t v7;
  _QWORD context[2];
  id v9;
  CFRange v10;

  if (a1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    context[1] = a2;
    v9 = Mutable;
    context[0] = &v9;
    v10.length = CFArrayGetCount(a1);
    v10.location = 0;
    CFArrayApplyFunction(a1, v10, (CFArrayApplierFunction)CreateCopyOfArrayByApplyingFunction(__CFArray const*,std::function<TCFRef<void const*> ()(void const*)>)::$_0::__invoke, context);
    do
      v7 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a3 = v7;

  }
  else
  {
    *a3 = 0;
  }
}

void TBaseFont::SetObject(os_unfair_lock_s *a1, int a2, const void *a3, const void *a4)
{
  os_unfair_lock_s *v8;
  unint64_t *p_os_unfair_lock_opaque;
  CFMutableDictionaryRef Mutable;
  void *v12;
  __CFDictionary *v14;

  v8 = a1 + 111;
  os_unfair_lock_lock_with_options();
  p_os_unfair_lock_opaque = (unint64_t *)&a1[2 * a2 + 138]._os_unfair_lock_opaque;
  if (!atomic_load(p_os_unfair_lock_opaque))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    do
      v12 = (void *)__ldaxr(p_os_unfair_lock_opaque);
    while (__stlxr((unint64_t)Mutable, p_os_unfair_lock_opaque));

  }
  if (atomic_load(p_os_unfair_lock_opaque))
  {
    v14 = (__CFDictionary *)atomic_load(p_os_unfair_lock_opaque);
    CFDictionarySetValue(v14, a3, a4);
  }
  os_unfair_lock_unlock(v8);
}

void TAATLtagTable::CopyLanguageTags(TAATLtagTable *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  CFIndex v11;
  const __CFAllocator *v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  CFIndex v17;
  BOOL v18;
  const UInt8 *v19;
  CFStringRef v21;
  void *v22;
  const __CFString *v24;
  __CFString *CanonicalLanguageIdentifierFromString;
  CFNumberRef v26;
  __CFString *v27;
  __CFDictionary *v28;
  unint64_t v29;
  id TaggedPointerString;
  id Mutable;
  int valuePtr;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v5 = v3 + 12;
    v6 = bswap32(*(_DWORD *)(v3 + 8));
    v7 = *((_QWORD *)this + 2);
    v8 = v3 + 12 + 4 * v6;
    if (v3 + 16 <= v7)
      v9 = (v7 - (v3 + 12)) >> 2;
    else
      v9 = 0;
    if (v8 <= v7 && v8 >= v5)
      v9 = v6;
    if (v9 >= 0xFFFF)
      v11 = 0xFFFFLL;
    else
      v11 = v9;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v14 = *((_QWORD *)this + 1);
        v15 = bswap32(*(_DWORD *)(v14 + 4 * i + 12));
        v16 = HIWORD(v15);
        v17 = (unsigned __int16)v15;
        if ((unsigned __int16)v15 + v16)
          v18 = v14 + (unint64_t)(unsigned __int16)v15 + v16 > *((_QWORD *)this + 2);
        else
          v18 = 1;
        if (!v18)
        {
          v19 = (const UInt8 *)(v14 + v16);
          TaggedPointerString = (id)_CFStringCreateTaggedPointerString();
          if (atomic_load((unint64_t *)&TaggedPointerString))
            goto LABEL_23;
          v21 = CFStringCreateWithBytes(v12, v19, v17, 0x8000100u, 0);
          do
            v22 = (void *)__ldaxr((unint64_t *)&TaggedPointerString);
          while (__stlxr((unint64_t)v21, (unint64_t *)&TaggedPointerString));

          if (atomic_load((unint64_t *)&TaggedPointerString))
          {
LABEL_23:
            v24 = (const __CFString *)atomic_load((unint64_t *)&TaggedPointerString);
            CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v12, v24);
            if (CanonicalLanguageIdentifierFromString)
            {
              valuePtr = i;
              v26 = CFNumberCreate(v12, kCFNumberIntType, &valuePtr);
              if (v26)
              {
                v27 = CanonicalLanguageIdentifierFromString;
                v28 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
                CFDictionaryAddValue(v28, v27, v26);

              }
            }

          }
        }
      }
    }
    do
      v29 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    *a2 = v29;

  }
  else
  {
    *a2 = 0;
  }
}

void TAATLtagTable::TAATLtagTable(TAATLtagTable *this, const TBaseFont *a2)
{
  const __CFData *CommonTable;
  const UInt8 **v5;
  const UInt8 *BytePtr;
  const __CFData *v7;
  const UInt8 *v8;
  unint64_t v9;

  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a2, 1634497633, 0);
  *(_QWORD *)this = CommonTable;
  v5 = (const UInt8 **)((char *)this + 8);
  if (CommonTable)
  {
    BytePtr = CFDataGetBytePtr(CommonTable);
    v7 = *(const __CFData **)this;
    *((_QWORD *)this + 1) = BytePtr;
    if (v7)
    {
      v8 = CFDataGetBytePtr(v7);
      if (v8)
        v9 = (unint64_t)&v8[CFDataGetLength(v7)];
      else
        v9 = 0;
      BytePtr = *v5;
    }
    else
    {
      v9 = 0;
    }
    *((_QWORD *)this + 2) = v9;
    if (BytePtr && ((unint64_t)(BytePtr + 12) > v9 || *(_DWORD *)BytePtr != 0x1000000))
      (*(void (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2 + 488))(a2, 1819566439);
  }
  else
  {
    *v5 = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

unint64_t CTLineCreateWithString(const __CFString *a1, const __CFDictionary *a2)
{
  int v4;
  TFont **Value;
  const __CFAttributedString *v6;
  unint64_t v7;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  id v14;
  uint64_t __dst[35];
  CFRange v16;

  __dst[34] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = ShouldCheckForKnownUrduSequences();
  if (a2
    && v4
    && (Value = (TFont **)CFDictionaryGetValue(a2, CFSTR("NSFont"))) != 0
    && TFont::IsSystemUIFontAndForShaping(Value[5], (BOOL *)__dst)
    && (v16.length = CFStringGetLength(a1), v16.location = 0, StringContainsKnownUrduSequences(a1, v16)))
  {
    v6 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, a2);
    v7 = (unint64_t)CTLineCreateWithAttributedString(v6);

  }
  else
  {
    memcpy(__dst, &unk_18492F098, 0x110uLL);
    TTypesetterString::TTypesetterString((TTypesetterString *)__dst, a1, a2);
    v14 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(__dst, (unint64_t *)&v14);
    if (atomic_load((unint64_t *)&v14))
    {
      v9 = atomic_load((unint64_t *)&v14);
      TTypesetter::FillLine((TTypesetter *)__dst, *(TLine **)(v9 + 40), 1.79769313e308, 0.0);
      v7 = ExternalizeLine((unint64_t *)&v14);
    }
    else
    {
      v7 = 0;
    }

    v10 = (std::__shared_weak_count *)__dst[31];
    if (__dst[31])
    {
      v11 = (unint64_t *)(__dst[31] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    TLine::~TLine((TLine *)__dst);
  }
  return v7;
}

_QWORD *TRunReorder::ReorderRuns(_QWORD *this, TLine *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  CFRange v7;
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int16 v11;
  CFIndex v12;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  unsigned __int8 v19;

  v4 = this[2];
  v3 = this[3];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    v6 = this;
    v19 = -86;
    this = (_QWORD *)TRunReorder::GetLevelRange((TRunReorder *)this, (TLine *)&v19, a3);
    v8 = v19;
    if (v19 <= this)
    {
      v9 = this;
      v10 = v5 >> 3;
      v11 = *((_WORD *)v6 + 77);
      do
      {
        v7.location = 0;
        this = (_QWORD *)TRunReorder::FindRunRange((TRunReorder *)v6, (TLine *)v9, 0, v7);
        if ((uint64_t)this < v10)
        {
          v13 = (uint64_t)this;
          v7.location = v12;
          v11 |= 0x80u;
          do
          {
            v14 = v7.location + v13 - 1;
            if (v14 > v13)
            {
              v15 = v13;
              do
              {
                v16 = v6[2];
                v17 = *(_QWORD *)(v16 + 8 * v15);
                *(_QWORD *)(v16 + 8 * v15) = *(_QWORD *)(v16 + 8 * v14);
                *(_QWORD *)(v16 + 8 * v14) = v17;
                ++v15;
                --v14;
              }
              while (v14 > v15);
            }
            *((_WORD *)v6 + 77) = v11;
            this = (_QWORD *)TRunReorder::FindRunRange((TRunReorder *)v6, (TLine *)v9, v13, v7);
            v13 = (uint64_t)this;
            v7.location = v18;
          }
          while ((uint64_t)this < v10);
        }
        --v9;
      }
      while (v8 <= v9);
    }
  }
  return this;
}

unint64_t CTLineCreateHyphenatedLineWithOffset(uint64_t a1, CFIndex a2, CFIndex a3, __CFString *a4, double a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  _BOOL4 v19;
  uint64_t RunWithCharIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  TLine *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE v42[24];
  TLine *v43[2];
  id v44;
  id v45;
  _BYTE v46[128];
  _BYTE v47[48];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD __dst[37];

  __dst[34] = *MEMORY[0x1E0C80C00];
  v45 = (id)CTLineCreateFromLineWithOffset(a1, a2, a3, a5);
  if (!atomic_load((unint64_t *)&v45))
    goto LABEL_33;
  v9 = atomic_load((unint64_t *)&v45);
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 80);
  if (a1)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(_QWORD *)(v13 + 80);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = v12 + v11;
  if (v12 + v11 >= v14 + v15)
  {
    v19 = 0;
  }
  else
  {
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[9] = v17;
    *(_OWORD *)&__dst[7] = v17;
    *(_OWORD *)&__dst[5] = v17;
    *(_OWORD *)&__dst[3] = v17;
    memset(__dst, 0, 24);
    __dst[11] = &__dst[3];
    v18 = (_WORD *)TCharStream::LazyCopyChars(*(_QWORD **)v10, v12 + v11, 1);
    v19 = v18 && *v18 == 173;
    *(_QWORD *)v46 = __dst;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v46);
  }
  RunWithCharIndex = TLine::FindRunWithCharIndex((TLine *)v10, v16 - 1, 1);
  v21 = *(_QWORD *)(v10 + 16);
  if (RunWithCharIndex < (*(_QWORD *)(v10 + 24) - v21) >> 3)
  {
    v22 = RunWithCharIndex;
    v23 = *(_QWORD *)(*(_QWORD *)(v21 + 8 * RunWithCharIndex) + 40);
    memcpy(__dst, &unk_18492F098, 0x110uLL);
    v24 = (void *)atomic_load((unint64_t *)(v23 + 40));
    v25 = v24;
    TTypesetterString::TTypesetterString((TTypesetterString *)__dst, a4, v25);

    memset(&v47[16], 170, 32);
    v48 = unk_18492F258;
    *(_OWORD *)&v46[96] = xmmword_18492F208;
    *(_OWORD *)&v46[112] = unk_18492F218;
    *(_OWORD *)v47 = xmmword_18492F228;
    memset(v46, 170, 96);
    v27 = __dst[0];
    v26 = __dst[1];
    if (__dst[1])
    {
      v28 = (unint64_t *)(__dst[1] + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    *(_QWORD *)v46 = v27;
    *(_QWORD *)&v46[8] = v26;
    memset(&v46[16], 0, 24);
    *(_QWORD *)&v46[64] = &v46[40];
    BYTE8(v48) = 0;
    memset(&v46[72], 0, 56);
    memset(&v47[8], 0, 21);
    *(_QWORD *)&v47[32] = 0;
    *(_QWORD *)&v47[40] = 0;
    LOBYTE(v48) = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    *(_QWORD *)v47 = 0xFFEFFFFFFFFFFFFFLL;
    TTypesetter::FillLine((TTypesetter *)__dst, (TLine *)v46, 1.79769313e308, 0.0);
    v30 = *(_QWORD *)&v46[16];
    if ((uint64_t)(*(_QWORD *)&v46[24] - *(_QWORD *)&v46[16]) >= 1)
    {
      if ((*(_BYTE *)(v23 + 224) & 1) == 0)
        ++v22;
      v44 = **(id **)&v46[16];
      v31 = *(_QWORD *)&v46[24] - (*(_QWORD *)&v46[16] + 8);
      if (*(_QWORD *)&v46[24] != *(_QWORD *)&v46[16] + 8)
        memmove(*(void **)&v46[16], (const void *)(*(_QWORD *)&v46[16] + 8), *(_QWORD *)&v46[24] - (*(_QWORD *)&v46[16] + 8));
      *(_QWORD *)&v46[24] = v30 + v31;
      v32 = atomic_load((unint64_t *)&v44);
      v33 = *(_QWORD *)(v32 + 48);
      *(_QWORD *)(v33 + 8) += v16;
      objc_msgSend(*(id *)(v33 + 216), "puntStringIndicesInRange:by:", *(_QWORD *)(v33 + 200), *(_QWORD *)(v33 + 208), v12 + v11);
      v34 = TRun::EnsureRareData((TRun *)v33);
      TCFRef<__CTFont const*>::Retain((unint64_t *)(v34 + 80), a4);
      *(_QWORD *)(v33 + 272) = v10;
      TLine::DetachRuns((TLine *)v10);
      TLine::InsertLastRun((TLine *)v10, v22, (unint64_t *)&v44);
      if (v19)
      {
        *(_QWORD *)(v10 + 72) = v11;
        *(_QWORD *)(v10 + 80) = v12 + 1;
      }
      else
      {
        *(_QWORD *)(v33 + 8) = v16;
        *(_QWORD *)(v33 + 16) = 0;
      }
      TLine::ResetLine((TLine *)v10, *(const TCharStream **)v10);
      if ((~*(unsigned __int16 *)(v10 + 152) & 3) == 0)
      {
        v36 = *(TLine **)v10;
        v43[0] = (TLine *)v10;
        v43[1] = v36;
        TTabEngine::ApplyTabs(v43, a5, 1.79769313e308, v35, (uint64_t)v42);
      }

    }
    do
      v37 = __ldaxr((unint64_t *)&v45);
    while (__stlxr(0, (unint64_t *)&v45));
    TLine::~TLine((TLine *)v46);
    v38 = (std::__shared_weak_count *)__dst[31];
    if (__dst[31])
    {
      v39 = (unint64_t *)(__dst[31] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    TLine::~TLine((TLine *)__dst);
  }
  else
  {
LABEL_33:
    v37 = 0;
  }

  return v37;
}

void TLine::DetachRuns(TLine *this)
{
  unint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (unint64_t *)((char *)this + 160);
  do
    v3 = (void *)__ldaxr(v2);
  while (__stlxr(0, v2));

  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (unint64_t)v4 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
      TLine::DetachRun(this, v5++);
    while (v7 != v5);
  }
}

void TTypesetterString::TTypesetterString(TTypesetterString *this, const __CFString *a2, const __CFDictionary *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  const __CFString *v9;
  unint64_t v10;
  unint64_t v11;

  v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
  TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)&v6[1], a2, a3);
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *(_QWORD *)this = v8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = v8;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_WORD *)this + 128) = 0;
  *((_WORD *)this + 77) = 1;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  TTypesetterString::Initialize(this, v9, a3);
}

_QWORD *TTypesetterString::Initialize(_QWORD *this, const __CFString *a2, const __CFDictionary *a3)
{
  CFIndex v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  unint64_t **Table;
  unint64_t *v9;
  const __CFDictionary *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  char *v14;
  void *v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE v29[240];
  unint64_t v30;
  char v31;
  void **v32;
  _OWORD __dst[41];
  uint64_t v34;
  CFRange v35;
  CFRange v36;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this[27] + 16);
  if (v3 >= 1)
  {
    v5 = this;
    this = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", v3, v3);
    if (this)
    {
      v6 = this;
      v31 = -86;
      v30 = 0xAAAAAAAAFFFFFFFFLL;
      memset(&v29[80], 170, 160);
      memset(v29, 170, 32);
      v7 = v5[27];
      *(_QWORD *)v29 = this;
      *(_QWORD *)&v29[8] = v7;
      memset(&v29[16], 0, 184);
      *(_QWORD *)&v29[176] = *(_QWORD *)(v7 + 16);
      *(_QWORD *)&v29[200] = v5;
      memset(&v29[208], 0, 32);
      LODWORD(v30) = 1065353216;
      Table = (unint64_t **)GetTable();
      if (Table && (v9 = *Table) != 0)
      {
        v10 = (const __CFDictionary *)atomic_load(v9);
        if (v10 == a3)
        {
          v31 = TGlyphEncoder::EncodeChars((TCharStream **)v29, 0, v3, (uint64_t)(v9 + 1), 0);
LABEL_17:

          v5[9] = 0;
          v5[10] = v3;
          TLine::LinkRuns(v5);
          if (!TTypesetter::CanLayout((TTypesetter *)v5))
            return (_QWORD *)std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v29[208]);
          v22 = v5;
          v23 = *(_OWORD *)(v5 + 27);
          v24 = v5[29];
          v25 = v5 + 30;
          v18 = *((_DWORD *)v5 + 65);
          v27 = -1431655766;
          v28 = 0;
          v26 = v18;
          LOBYTE(v27) = *((_BYTE *)v5 + 264);
          BYTE1(v27) = *((_BYTE *)v5 + 257);
          memcpy(__dst, &unk_18492F460, sizeof(__dst));
          TRunGlue::TRunGlue((TRunGlue *)__dst, (TLine *)v5);
          v19 = TTypesetter::FinishEncoding((uint64_t)&v22, (TShapingEngine *)__dst, (const TCharStream *)&v31);
          TTypesetter::FinishLayout((uint64_t)&v22, (TCompositionEngine **)__dst, (const TCharStream *)v31, v19);
          v20 = (_QWORD *)*((_QWORD *)&__dst[36] + 1);
          if (*((_OWORD **)&__dst[36] + 1) == &__dst[35])
          {
            v21 = 4;
            v20 = &__dst[35];
          }
          else
          {
            if (!*((_QWORD *)&__dst[36] + 1))
            {
LABEL_23:
              v32 = (void **)&__dst[23];
              std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v32);
              v32 = (void **)&__dst[13];
              std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v32);
              v32 = (void **)&__dst[3] + 1;
              std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v32);
              return (_QWORD *)std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v29[208]);
            }
            v21 = 5;
          }
          (*(void (**)(void))(*v20 + 8 * v21))();
          goto LABEL_23;
        }
        __dst[6] = xmmword_18492F428;
        memset(&__dst[7], 170, 40);
        __dst[3] = unk_18492F3F8;
        memset(&__dst[4], 255, 32);
        memset(__dst, 170, 48);
        v35.location = 0;
        v35.length = v3;
        TAttributes::TAttributes((TAttributes *)__dst, a3, (const TCharStream *)v5[27], v35, 0);
        v31 = TGlyphEncoder::EncodeChars((TCharStream **)v29, 0, v3, (uint64_t)__dst, 0);
        v11 = (void *)atomic_load((unint64_t *)(v5[27] + 40));
        v22 = v11;
        do
          v12 = __ldaxr((unint64_t *)&v22);
        while (__stlxr(0, (unint64_t *)&v22));
        do
          v13 = (void *)__ldaxr(v9);
        while (__stlxr(v12, v9));

        TAttributes::operator=((uint64_t)(v9 + 1), (uint64_t)__dst);
      }
      else
      {
        __dst[6] = xmmword_18492F428;
        memset(&__dst[7], 170, 40);
        __dst[3] = unk_18492F3F8;
        memset(&__dst[4], 255, 32);
        memset(__dst, 170, 48);
        v36.location = 0;
        v36.length = v3;
        TAttributes::TAttributes((TAttributes *)__dst, a3, (const TCharStream *)v5[27], v36, 0);
        v31 = TGlyphEncoder::EncodeChars((TCharStream **)v29, 0, v3, (uint64_t)__dst, 0);
        v14 = (char *)operator new(0xA0uLL, MEMORY[0x1E0DE4E10]);
        if (v14)
        {
          v15 = (void *)atomic_load((unint64_t *)(v5[27] + 40));
          v22 = v15;
          do
            v16 = __ldaxr((unint64_t *)&v22);
          while (__stlxr(0, (unint64_t *)&v22));
          *(_QWORD *)v14 = v16;
          *(_WORD *)(v14 + 57) = 0;
          v14[59] = 0;
          v14[64] = 0;
          v14[112] = 0;
          *((_QWORD *)v14 + 19) = 0;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 8) = 0u;
          *((_QWORD *)v14 + 16) = 0;
          *((_QWORD *)v14 + 17) = 0;
          TAttributes::operator=((uint64_t)(v14 + 8), (uint64_t)__dst);

        }
        v17 = GetTable();
        if (v17)
        {
          *v17 = v14;
          v17[1] = TTypesetter::DestroyAttributesCache;
        }
      }
      TAttributes::~TAttributes((TAttributes *)__dst);
      goto LABEL_17;
    }
  }
  return this;
}

void TTypesetter::GetLevelsProvider(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;

  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
  {
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
LABEL_8:
    if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    {
      v12 = *(_BYTE *)(a1 + 44);
      v11 = operator new();
      *(_QWORD *)v11 = off_1E15DE5E0;
      *(_BYTE *)(v11 + 8) = v12;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 72) = v11 + 40;
    }
    else
    {
      v26 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v26);
      if (atomic_load((unint64_t *)&v26))
      {
        v10 = (void *)atomic_load((unint64_t *)&v26);
        v11 = operator new();
        *(_QWORD *)v11 = off_1E15DDF10;
        *(_QWORD *)(v11 + 8) = v10;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 88) = v11 + 56;
        *(_QWORD *)(v11 + 96) = 0;
        *(_QWORD *)(v11 + 104) = 0;
        *(_QWORD *)(v11 + 112) = 0;
        *(_QWORD *)(v11 + 152) = v11 + 120;
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 8);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E15DE460;
        *(_QWORD *)(v11 + 8) = v13;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_QWORD *)(v11 + 56) = 0;
        *(_QWORD *)(v11 + 128) = v11 + 64;
        do
          v14 = __ldaxr(&gBidiEngineRetired);
        while (__stlxr(0, &gBidiEngineRetired));
        if (!v14)
          v14 = ubidi_open();
        *(_QWORD *)(v11 + 16) = v14;
      }

      v6 = (std::__shared_weak_count *)a2[1];
    }
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E15E1708;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v11;
    *a2 = v11;
    a2[1] = (uint64_t)v15;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v18 = *(uint64_t **)(a1 + 32);
    if (v18)
    {
      v20 = *a2;
      v19 = a2[1];
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = (std::__shared_weak_count *)v18[1];
      *v18 = v20;
      v18[1] = v19;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    return;
  }
  v5 = *v4;
  v6 = (std::__shared_weak_count *)v4[1];
  *a2 = *v4;
  a2[1] = (uint64_t)v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (!v5)
    goto LABEL_8;
}

id TCharStreamCFAttrString::CopyAttributedString@<X0>(TCharStreamCFAttrString *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 6);
  result = v3;
  *a2 = result;
  return result;
}

uint64_t TBidiEngine::ReorderGlyphs(uint64_t this, TLine *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  TParagraphStyle **v8;
  signed __int8 BaseWritingDirection;
  CFIndex v10;
  CFIndex v11;
  int v12;
  uint64_t v13;
  uint64_t RunWithCharIndex;
  CFIndex v15;
  _QWORD *v16;
  uint64_t v17;
  TParagraphStyle **v18;
  unsigned __int8 v19;
  CFIndex v20;
  uint64_t v21;
  TBidiEngine *v22;
  CFRange v23;
  CFRange v24;

  v22 = (TBidiEngine *)this;
  v2 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 3);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = *(_QWORD **)(*(_QWORD *)v2 + 40);
    v7 = v6[20];
    if (v7 && (*(_WORD *)(v7 + 66) & 4) != 0)
    {
      BaseWritingDirection = 1;
    }
    else
    {
      v8 = (TParagraphStyle **)v6[21];
      if (v8)
        BaseWritingDirection = TParagraphStyle::GetBaseWritingDirection(v8, a2);
      else
        BaseWritingDirection = -1;
    }
    v10 = v6[1];
    v11 = v6[2];
    if (v4 < 9)
    {
      LOBYTE(v12) = 0;
    }
    else
    {
      v12 = 0;
      v13 = (unint64_t)v4 >> 3;
      RunWithCharIndex = 1;
      v15 = v6[2];
      do
      {
        v16 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * RunWithCharIndex) + 40);
        v17 = v16[20];
        if (v17 && (*(_WORD *)(v17 + 66) & 4) != 0)
        {
          v19 = 1;
        }
        else
        {
          v18 = (TParagraphStyle **)v16[21];
          if (v18)
            v19 = TParagraphStyle::GetBaseWritingDirection(v18, a2);
          else
            v19 = -1;
        }
        v11 = v16[2];
        if (v19 == BaseWritingDirection)
        {
          v11 += v15;
        }
        else
        {
          v20 = v16[1];
          v23.location = v10;
          v23.length = v15;
          v12 |= TBidiEngine::ReorderGlyphsInDirectionRange(v22, a2, v23, BaseWritingDirection);
          v21 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
          if (v13 != v21 >> 3)
          {
            v13 = v21 >> 3;
            RunWithCharIndex = TLine::FindRunWithCharIndex(a2, v20 + v11 - 1, 1);
          }
          v10 = v20;
          BaseWritingDirection = v19;
        }
        ++RunWithCharIndex;
        v15 = v11;
      }
      while (RunWithCharIndex < v13);
    }
    v24.location = v10;
    v24.length = v11;
    this = TBidiEngine::ReorderGlyphsInDirectionRange(v22, a2, v24, BaseWritingDirection);
    if ((v12 & 1) != 0 || (this & 1) != 0)
      *((_WORD *)a2 + 76) |= 1u;
  }
  return this;
}

id TParagraphStyle::GetBaseWritingDirection(TParagraphStyle **this, const void *a2)
{
  int v2;
  TParagraphStyle *v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *this;
  if (v2)
    return (id)*((char *)TParagraphStyle::GetNative(v3, a2) + 34);
  else
    return -[TParagraphStyle baseWritingDirection](v3, sel_baseWritingDirection);
}

uint64_t TBidiEngine::ReorderGlyphsInDirectionRange(TBidiEngine *this, TLine *a2, CFRange a3, uint64_t a4)
{
  CFIndex length;
  CFIndex location;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  CFRange v17;
  CFRange v18;

  length = a3.length;
  location = a3.location;
  v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, CFIndex, CFIndex, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, a3.location, a3.length, a4);
  v9 = v8;
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = v10 != 0;
  if (length < 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    for (i = 1; i < length; ++i)
    {
      if (v9)
        v14 = v9[i];
      else
        v14 = 0;
      if (v14 != v10)
      {
        v17.location = v12 + location;
        v17.length = i - v12;
        v15 = TBidiEngine::NewLevelRun(this, a2, v17, v10);
        if (v9)
          v10 = v9[i];
        else
          v10 = 0;
        v11 |= v10 != 0;
        i += v15;
        v12 = i;
      }
    }
  }
  if (length > v12)
  {
    v18.location = v12 + location;
    v18.length = length - v12;
    TBidiEngine::NewLevelRun(this, a2, v18, v10);
  }
  return v11 & 1;
}

uint64_t TLine::SetLevelRange(_QWORD *a1, CFRange a2, char a3, int a4)
{
  _QWORD *v4;
  uint64_t length;
  CFIndex location;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  uint64_t v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  CFRange v50;
  CFRange v51;

  v4 = a1 + 2;
  if (a1[3] == a1[2])
    return 0;
  length = a2.length;
  location = a2.location;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v10 = TLine::NormalizeRange((TLine *)a1, a2, &v48, &v47);
  if (v11 >= 1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 8 * v47) + 48) + 8);
    if (v10 != v12)
      TLine::SplitRun((uint64_t)a1, v47, v10 - v12);
  }
  if (length >= 1)
  {
    do
    {
      v50.location = location;
      v50.length = length;
      TLine::NormalizeRange((TLine *)a1, v50, &v48, &v47);
      v14 = v48;
      if (v48 < 1)
        break;
      if (v13 >= 1)
      {
        v15 = *(_QWORD *)(*v4 + 8 * v47);
        v16 = *(_QWORD *)(v15 + 48);
        v17 = *(_QWORD *)(v16 + 16);
        if (v48 < v17)
        {
          v25 = *(_QWORD *)(v16 + 8);
          v51.location = location;
          v51.length = length;
          v26 = TLine::NormalizeRange((TLine *)a1, v51, &v48, &v47);
          if (v27 >= 1)
          {
            v28 = v27;
            v29 = v47;
            if (a4 == 1)
            {
              v30 = v26;
              v31 = *(_QWORD *)(*v4 + 8 * v47);
              v43 = *(_QWORD *)(v31 + 48);
              v44 = v25;
              v46 = (id)0xAAAAAAAAAAAAAAAALL;
              (*(void (**)(id *__return_ptr, uint64_t, CFIndex, uint64_t, uint64_t))(v31 + 64))(&v46, v31, v26, v27, 1);
              v32 = atomic_load((unint64_t *)&v46);
              v33 = *(_QWORD *)(v32 + 48);
              if (*(uint64_t *)(v33 + 208) >= 1)
              {
                v34 = objc_msgSend(*(id *)(v33 + 216), "copyWithRange:", *(_QWORD *)(v33 + 200));

                *(_QWORD *)(v33 + 216) = v34;
                *(_QWORD *)(v33 + 200) = 0;
                if (((((a3 & 1) == 0) ^ *(unsigned __int8 *)(v33 + 224)) & 1) == 0)
                  TRun::ReverseGlyphs(v33);
                *(_BYTE *)(v33 + 224) = a3;
                v35 = (void *)atomic_load((unint64_t *)&v46);
                v36 = v47;
                v42 = ++v47;
                v37 = (char *)(a1[2] + 8 * v36);
                v49 = v35;
                std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert((uint64_t)v4, v37, &v49);
                v38 = *(_QWORD *)(v43 + 32);
                v39 = (uint64_t *)(v38 + 24);
                if (!v38)
                  v39 = a1 + 11;
                *v39 = v33;
                *(_QWORD *)(v33 + 24) = v43;
                *(_QWORD *)(v33 + 32) = v38;
                *(_QWORD *)(v43 + 32) = v33;
                v49 = (id)0xAAAAAAAAAAAAAAAALL;
                (*(void (**)(id *__return_ptr, uint64_t, CFIndex, uint64_t, uint64_t))(v31 + 64))(&v49, v31, v30 + v28, v17 + v44 - (v30 + v28), 1);
                do
                  v40 = (void *)__ldaxr((unint64_t *)&v49);
                while (__stlxr(0, (unint64_t *)&v49));
                v45 = v40;
                TLine::ReplaceRun(a1, v42, (unint64_t *)&v45);

              }
            }
            else
            {
              TLine::SplitRun((uint64_t)a1, v47, v27);
              v41 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8 * v29) + 48);
              if (((((a3 & 1) == 0) ^ *(unsigned __int8 *)(v41 + 224)) & 1) == 0)
                TRun::ReverseGlyphs(v41);
              *(_BYTE *)(v41 + 224) = a3;
            }
          }
          length -= v48;
          return -length;
        }
        if (a4 == 1)
        {
          v49 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr))(v15 + 56))(&v49);
          v18 = atomic_load((unint64_t *)&v49);
          v19 = *(_QWORD *)(v18 + 48);
          v20 = objc_msgSend(*(id *)(v19 + 216), "copyWithRange:", *(_QWORD *)(v19 + 200), *(_QWORD *)(v19 + 208));

          *(_QWORD *)(v19 + 216) = v20;
          *(_QWORD *)(v19 + 200) = 0;
          if (((((a3 & 1) == 0) ^ *(unsigned __int8 *)(v19 + 224)) & 1) == 0)
            TRun::ReverseGlyphs(v19);
          *(_BYTE *)(v19 + 224) = a3;
          v21 = v47;
          do
            v22 = (void *)__ldaxr((unint64_t *)&v49);
          while (__stlxr(0, (unint64_t *)&v49));
          v46 = v22;
          TLine::ReplaceRun(a1, v21, (unint64_t *)&v46);

          v14 = v48;
        }
        else
        {
          if (((((a3 & 1) == 0) ^ *(unsigned __int8 *)(v16 + 224)) & 1) == 0)
            TRun::ReverseGlyphs(*(_QWORD *)(v15 + 48));
          *(_BYTE *)(v16 + 224) = a3;
        }
      }
      location += v14;
      v23 = length <= v14;
      length -= v14;
    }
    while (!v23);
  }
  return -length;
}

CFIndex TLine::NormalizeRange(TLine *this, CFRange a2, uint64_t *a3, uint64_t *a4)
{
  CFIndex length;
  CFIndex location;
  uint64_t RunWithCharIndex;
  TRun *v10;
  CFIndex result;
  CFIndex v12;
  uint64_t v13;
  CFRange v14;

  length = a2.length;
  location = a2.location;
  *a3 = 0;
  do
  {
    v13 = 0xAAAAAAAAAAAAAAAALL;
    RunWithCharIndex = TLine::FindRunWithCharIndex(this, location, 1);
    *a4 = RunWithCharIndex;
    v10 = *(TRun **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * RunWithCharIndex) + 40);
    v14.location = location;
    v14.length = length;
    result = TRun::NormalizeRange(v10, v14, &v13);
    location = result;
    length = v12;
    *a3 += v13;
  }
  while (v12 && *((_QWORD *)v10 + 2) + *((_QWORD *)v10 + 1) <= result);
  return result;
}

CFIndex TRun::NormalizeRange(TRun *this, CFRange a2, uint64_t *a3)
{
  CFIndex location;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t GlyphIndexForChar;
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v15;

  location = a2.location;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25);
  v9 = (v6 - a2.location + v7) & ~((v6 - a2.location + v7) >> 63);
  if (a2.length <= v9)
  {
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2.length + a2.location - 1);
    v11 = *(_QWORD *)(v8 + 8 * GlyphIndexForChar);
    v9 = v11
       - location
       + objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + GlyphIndexForChar)
       + 1;
  }
  *a3 = v9;
  if (location == *((_QWORD *)this + 1))
    return location;
  v13 = v7 + v6;
  do
  {
    v12 = location;
    if (v9-- < 1)
      break;
    if (location >= v13)
      break;
    v15 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, location++);
  }
  while (v12 != *(_QWORD *)(v8 + 8 * v15));
  return v12;
}

uint64_t TRun::ReverseGlyphs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(this + 208);
  if (v1 >= 2)
  {
    v2 = this;
    v3 = 0;
    v4 = v1 - 1;
    do
    {
      this = objc_msgSend(*(id *)(v2 + 216), "swapGlyphsAtIndex:withIndex:", v3 + *(_QWORD *)(v2 + 200), v4 + *(_QWORD *)(v2 + 200));
      ++v3;
      --v4;
    }
    while (v3 < v4);
  }
  return this;
}

uint64_t TBidiEngine::NewLevelRun(TBidiEngine *this, TLine *a2, CFRange a3, int a4)
{
  char v4;
  CFIndex length;
  CFIndex location;
  TLine *v7;
  uint64_t RunWithCharIndex;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  TRun **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t GlyphIndexForChar;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  char v38;
  uint64_t RenderingStyle;
  int FullChar;
  const __CTFont *v42;
  int ShapingType;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  const __CTFont *v50;
  TLine *v52;
  char v53;
  CFIndex v54;
  CFIndex v55;
  CFIndex v56;
  TRun **v57;
  unsigned __int16 v58;
  uint64_t v59;
  id v60[2];
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  CFRange v76;

  if (!a4)
    return 0;
  v4 = a4;
  length = a3.length;
  location = a3.location;
  v7 = a2;
  if ((a4 & 1) != 0)
  {
    RunWithCharIndex = TLine::FindRunWithCharIndex(a2, a3.location, 1);
    v10 = *((_QWORD *)v7 + 2);
    if (RunWithCharIndex < (*((_QWORD *)v7 + 3) - v10) >> 3)
    {
      v52 = v7;
      v54 = length;
      v53 = v4;
      v63 = *((_QWORD *)this + 1);
      v64 = 0u;
      v65 = 0u;
      v75 = 0;
      v74 = 0u;
      v73 = 0u;
      v72 = 0u;
      v71 = 0u;
      v70 = 0u;
      v69 = 0u;
      v68 = 0u;
      v67 = 0u;
      v66 = 0u;
      *(_QWORD *)&v74 = *(_QWORD *)(v63 + 16);
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * RunWithCharIndex) + 48);
      if (v11)
      {
        v55 = location;
        v56 = location + length;
        while (1)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v11 + 16) + v12;
          if (v13 >= v56)
            v14 = v56;
          else
            v14 = *(_QWORD *)(v11 + 16) + v12;
          v15 = v14 - location;
          v16 = v12 <= location && location < v13;
          if (v16)
            v17 = (char *)location;
          else
            v17 = 0;
          if (!v16)
            v15 = 0;
          v18 = v14 - v12;
          v19 = location <= v12 && v12 < v56;
          if (v19)
            v20 = *(char **)(v11 + 8);
          else
            v20 = v17;
          if (v19)
            v21 = v18;
          else
            v21 = v15;
          if (!v21)
            goto LABEL_102;
          v22 = (TRun **)atomic_load((unint64_t *)(v11 + 56));
          v23 = (uint64_t)v22[5];
          v62 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)v60 = v24;
          v61 = v24;
          TAATPropTable::TAATPropTable((TAATPropTable *)v60, (const __CTFont *)v22);
          if (v60[1])
          {
            v57 = v22;
            v25 = *(_QWORD *)(v11 + 216);
            v26 = *(_QWORD *)(v25 + 48);
            v27 = *(_QWORD *)(v11 + 200);
            v28 = *(_QWORD *)(v25 + 16);
            GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v11, (uint64_t)v20);
            v30 = *(_QWORD *)(v11 + 208);
            if (GlyphIndexForChar < v30)
            {
              v31 = GlyphIndexForChar;
              v32 = &v20[v21];
              v33 = v26 + 8 * v27;
              v34 = v28 + 2 * v27;
              do
              {
                v35 = *(_QWORD *)(v33 + 8 * v31);
                v59 = v35;
                if ((uint64_t)v20 > v35 || (uint64_t)v32 <= v35)
                  break;
                v58 = *(_WORD *)(v34 + 2 * v31);
                if (TAATPropTable::MirrorGlyph((TAATPropTable *)v60, &v58))
                {
                  v37 = v58;
                  objc_msgSend(*(id *)(v11 + 216), "setGlyph:atIndex:", v58, v31 + *(_QWORD *)(v11 + 200));
                  v38 = *(_BYTE *)(v11 + 225);
                  if (v37 == 0xFFFF && (v38 & 2) != 0)
                    *(_BYTE *)(v11 + 225) = v38 | 8;
                  RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v11 + 40));
                  TStorageRange::ResetAdvance(v11 + 192, v31, v23, RenderingStyle);
                }
                else
                {
                  FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v63, &v59, 0);
                  v42 = (const __CTFont *)MEMORY[0x186DC0AF0]();
                  if ((_DWORD)v42 != FullChar)
                    TBidiEngine::ReplaceCharAtIndex((TBidiEngine *)v11, v57[5], v42, v35);
                }
                ++v31;
              }
              while (v30 != v31);
            }

            location = v55;
            goto LABEL_101;
          }

          ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(v23 + 400));
          v60[0] = v20;
          if (v21 >= 1)
            break;
LABEL_101:
          v11 = *(_QWORD *)(v11 + 24);
          if (!v11)
            goto LABEL_102;
        }
        v44 = &v20[v21];
        v45 = ShapingType & 0xFFFFFFFE;
        while (1)
        {
          v46 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v63, (uint64_t *)v60, 0);
          if (!MEMORY[0x186DC0B50]())
            goto LABEL_100;
          if (v45 != 2)
            goto LABEL_98;
          if ((int)v46 > 10626)
          {
            if ((int)v46 <= 11777)
            {
              if ((int)v46 > 10851)
              {
                switch((int)v46)
                {
                  case 10852:
                  case 10853:
                  case 10873:
                  case 10874:
                  case 10877:
                  case 10878:
                  case 10879:
                  case 10880:
                  case 10881:
                  case 10882:
                  case 10883:
                  case 10884:
                  case 10891:
                  case 10892:
                  case 10897:
                  case 10898:
                  case 10899:
                  case 10900:
                  case 10901:
                  case 10902:
                  case 10903:
                  case 10904:
                  case 10905:
                  case 10906:
                  case 10907:
                  case 10908:
                  case 10913:
                  case 10914:
                  case 10918:
                  case 10919:
                  case 10920:
                  case 10921:
                  case 10922:
                  case 10923:
                  case 10924:
                  case 10925:
                  case 10927:
                  case 10928:
                  case 10931:
                  case 10932:
                  case 10939:
                  case 10940:
                  case 10941:
                  case 10942:
                  case 10943:
                  case 10944:
                  case 10945:
                  case 10946:
                  case 10947:
                  case 10948:
                  case 10949:
                  case 10950:
                  case 10957:
                  case 10958:
                  case 10959:
                  case 10960:
                  case 10961:
                  case 10962:
                  case 10963:
                  case 10964:
                  case 10965:
                  case 10966:
                  case 10974:
                  case 10979:
                  case 10980:
                  case 10981:
                  case 10988:
                  case 10989:
                  case 10999:
                  case 11000:
                  case 11001:
                  case 11002:
                    goto LABEL_98;
                  default:
                    goto LABEL_100;
                }
                goto LABEL_100;
              }
              switch((int)v46)
              {
                case 10627:
                case 10628:
                case 10629:
                case 10630:
                case 10631:
                case 10632:
                case 10633:
                case 10634:
                case 10635:
                case 10636:
                case 10637:
                case 10638:
                case 10639:
                case 10640:
                case 10641:
                case 10642:
                case 10643:
                case 10644:
                case 10645:
                case 10646:
                case 10647:
                case 10648:
                case 10680:
                case 10688:
                case 10689:
                case 10692:
                case 10693:
                case 10703:
                case 10704:
                case 10705:
                case 10706:
                case 10708:
                case 10709:
                case 10712:
                case 10713:
                case 10714:
                case 10715:
                  goto LABEL_98;
                case 10649:
                case 10650:
                case 10651:
                case 10652:
                case 10653:
                case 10654:
                case 10655:
                case 10656:
                case 10657:
                case 10658:
                case 10659:
                case 10660:
                case 10661:
                case 10662:
                case 10663:
                case 10664:
                case 10665:
                case 10666:
                case 10667:
                case 10668:
                case 10669:
                case 10670:
                case 10671:
                case 10672:
                case 10673:
                case 10674:
                case 10675:
                case 10676:
                case 10677:
                case 10678:
                case 10679:
                case 10681:
                case 10682:
                case 10683:
                case 10684:
                case 10685:
                case 10686:
                case 10687:
                case 10690:
                case 10691:
                case 10694:
                case 10695:
                case 10696:
                case 10697:
                case 10698:
                case 10699:
                case 10700:
                case 10701:
                case 10702:
                case 10707:
                case 10710:
                case 10711:
                  goto LABEL_100;
                default:
                  if ((v46 - 10741) <= 0x39
                    && ((1 << (v46 + 11)) & 0x3C0000000000199) != 0)
                  {
                    goto LABEL_98;
                  }
                  if ((v46 - 10804) > 9)
                    goto LABEL_100;
                  v48 = 1 << (v46 - 52);
                  v49 = 771;
                  break;
              }
LABEL_85:
              if ((v48 & v49) != 0)
                goto LABEL_98;
              goto LABEL_100;
            }
            if ((int)v46 <= 12295)
            {
              if ((v46 - 11778) <= 0x27 && ((1 << (v46 - 2)) & 0xFFCC000D8FLL) != 0)
                goto LABEL_98;
            }
            else
            {
              if ((int)v46 <= 65112)
              {
                if ((v46 - 12296) > 0x13)
                  goto LABEL_100;
                v48 = 1 << (v46 - 8);
                v49 = 1045503;
                goto LABEL_85;
              }
              if ((v46 - 65113) <= 0xC && ((1 << (v46 - 89)) & 0x183F) != 0
                || (v46 - 65288) <= 0x35
                && ((1 << (v46 - 8)) & 0x28000000500003) != 0)
              {
LABEL_98:
                v50 = (const __CTFont *)MEMORY[0x186DC0AF0](v46);
                if ((_DWORD)v50 != (_DWORD)v46)
                  TBidiEngine::ReplaceCharAtIndex((TBidiEngine *)v11, v22[5], v50, (uint64_t)v20);
                goto LABEL_100;
              }
              if ((v46 - 65371) <= 8)
              {
                v48 = 1 << (v46 - 91);
                v49 = 437;
                goto LABEL_85;
              }
            }
          }
          else
          {
            if ((int)v46 > 8711)
            {
              switch((int)v46)
              {
                case 8712:
                case 8713:
                case 8714:
                case 8715:
                case 8716:
                case 8717:
                case 8725:
                case 8764:
                case 8765:
                case 8771:
                case 8786:
                case 8787:
                case 8788:
                case 8789:
                case 8804:
                case 8805:
                case 8806:
                case 8807:
                case 8808:
                case 8809:
                case 8810:
                case 8811:
                case 8814:
                case 8815:
                case 8816:
                case 8817:
                case 8818:
                case 8819:
                case 8820:
                case 8821:
                case 8822:
                case 8823:
                case 8824:
                case 8825:
                case 8826:
                case 8827:
                case 8828:
                case 8829:
                case 8830:
                case 8831:
                case 8832:
                case 8833:
                case 8834:
                case 8835:
                case 8836:
                case 8837:
                case 8838:
                case 8839:
                case 8840:
                case 8841:
                case 8842:
                case 8843:
                case 8847:
                case 8848:
                case 8849:
                case 8850:
                case 8856:
                case 8866:
                case 8867:
                case 8870:
                case 8872:
                case 8873:
                case 8875:
                case 8880:
                case 8881:
                case 8882:
                case 8883:
                case 8884:
                case 8885:
                case 8886:
                case 8887:
                case 8905:
                case 8906:
                case 8907:
                case 8908:
                case 8909:
                case 8912:
                case 8913:
                case 8918:
                case 8919:
                case 8920:
                case 8921:
                case 8922:
                case 8923:
                case 8924:
                case 8925:
                case 8926:
                case 8927:
                case 8928:
                case 8929:
                case 8930:
                case 8931:
                case 8932:
                case 8933:
                case 8934:
                case 8935:
                case 8936:
                case 8937:
                case 8938:
                case 8939:
                case 8940:
                case 8941:
                case 8944:
                case 8945:
                case 8946:
                case 8947:
                case 8948:
                case 8950:
                case 8951:
                case 8954:
                case 8955:
                case 8956:
                case 8957:
                case 8958:
                case 8968:
                case 8969:
                case 8970:
                case 8971:
                case 9001:
                case 9002:
                  goto LABEL_98;
                case 8718:
                case 8719:
                case 8720:
                case 8721:
                case 8722:
                case 8723:
                case 8724:
                case 8726:
                case 8727:
                case 8728:
                case 8729:
                case 8730:
                case 8731:
                case 8732:
                case 8733:
                case 8734:
                case 8735:
                case 8736:
                case 8737:
                case 8738:
                case 8739:
                case 8740:
                case 8741:
                case 8742:
                case 8743:
                case 8744:
                case 8745:
                case 8746:
                case 8747:
                case 8748:
                case 8749:
                case 8750:
                case 8751:
                case 8752:
                case 8753:
                case 8754:
                case 8755:
                case 8756:
                case 8757:
                case 8758:
                case 8759:
                case 8760:
                case 8761:
                case 8762:
                case 8763:
                case 8766:
                case 8767:
                case 8768:
                case 8769:
                case 8770:
                case 8772:
                case 8773:
                case 8774:
                case 8775:
                case 8776:
                case 8777:
                case 8778:
                case 8779:
                case 8780:
                case 8781:
                case 8782:
                case 8783:
                case 8784:
                case 8785:
                case 8790:
                case 8791:
                case 8792:
                case 8793:
                case 8794:
                case 8795:
                case 8796:
                case 8797:
                case 8798:
                case 8799:
                case 8800:
                case 8801:
                case 8802:
                case 8803:
                case 8812:
                case 8813:
                case 8844:
                case 8845:
                case 8846:
                case 8851:
                case 8852:
                case 8853:
                case 8854:
                case 8855:
                case 8857:
                case 8858:
                case 8859:
                case 8860:
                case 8861:
                case 8862:
                case 8863:
                case 8864:
                case 8865:
                case 8868:
                case 8869:
                case 8871:
                case 8874:
                case 8876:
                case 8877:
                case 8878:
                case 8879:
                case 8888:
                case 8889:
                case 8890:
                case 8891:
                case 8892:
                case 8893:
                case 8894:
                case 8895:
                case 8896:
                case 8897:
                case 8898:
                case 8899:
                case 8900:
                case 8901:
                case 8902:
                case 8903:
                case 8904:
                case 8910:
                case 8911:
                case 8914:
                case 8915:
                case 8916:
                case 8917:
                case 8942:
                case 8943:
                case 8949:
                case 8952:
                case 8953:
                case 8959:
                case 8960:
                case 8961:
                case 8962:
                case 8963:
                case 8964:
                case 8965:
                case 8966:
                case 8967:
                case 8972:
                case 8973:
                case 8974:
                case 8975:
                case 8976:
                case 8977:
                case 8978:
                case 8979:
                case 8980:
                case 8981:
                case 8982:
                case 8983:
                case 8984:
                case 8985:
                case 8986:
                case 8987:
                case 8988:
                case 8989:
                case 8990:
                case 8991:
                case 8992:
                case 8993:
                case 8994:
                case 8995:
                case 8996:
                case 8997:
                case 8998:
                case 8999:
                case 9000:
                  goto LABEL_100;
                default:
                  if ((v46 - 10179) <= 0x2C
                    && ((1 << (v46 + 61)) & 0x1FFF8C0C006FLL) != 0
                    || (v46 - 10088) < 0xE)
                  {
                    goto LABEL_98;
                  }
                  break;
              }
              goto LABEL_100;
            }
            if ((int)v46 <= 3897)
            {
              if ((v46 - 60) <= 0x3F
                && ((1 << (v46 - 60)) & 0x8000000280000005) != 0
                || (v46 - 125) <= 0x3E
                && ((1 << (v46 - 125)) & 0x4000400000000001) != 0)
              {
                goto LABEL_98;
              }
              v47 = v46 - 40;
              goto LABEL_74;
            }
            if ((int)v46 <= 8248)
            {
              if ((v46 - 3898) < 4)
                goto LABEL_98;
              v47 = v46 - 5787;
LABEL_74:
              if (v47 < 2)
                goto LABEL_98;
              goto LABEL_100;
            }
            if ((v46 - 8249) <= 0xD && ((1 << (v46 - 57)) & 0x3003) != 0
              || (v46 - 8317) <= 0x11 && ((1 << (v46 - 125)) & 0x30003) != 0)
            {
              goto LABEL_98;
            }
          }
LABEL_100:
          v20 = (char *)v60[0] + 1;
          v60[0] = v20;
          if ((uint64_t)v20 >= (uint64_t)v44)
            goto LABEL_101;
        }
      }
LABEL_102:
      v4 = v53;
      length = v54;
      v7 = v52;
    }
  }
  v76.location = location;
  v76.length = length;
  return TLine::SetLevelRange(v7, v76, v4, 0);
}

void TAATPropTable::TAATPropTable(TAATPropTable *this, const __CTFont *a2)
{
  void *v4;
  const __CFData *v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  void *v8;
  const __CFData *Length;
  const __CFData *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)a2 + 5) + 400) + 480))(*(_QWORD *)(*((_QWORD *)a2 + 5) + 400), 1886547824);
  v4 = (void *)atomic_load((unint64_t *)this);
  v5 = v4;
  v6 = v5;
  if (v5)
    BytePtr = CFDataGetBytePtr(v5);
  else
    BytePtr = 0;

  *((_QWORD *)this + 1) = BytePtr;
  v8 = (void *)atomic_load((unint64_t *)this);
  Length = v8;
  v10 = Length;
  if (Length)
    Length = (const __CFData *)CFDataGetLength(Length);
  v11 = (unint64_t)Length + (_QWORD)BytePtr;

  *((_QWORD *)this + 2) = v11;
  *((_QWORD *)this + 3) = TAATPropTable::GetNullPropertiesForGlyph;
  *((_QWORD *)this + 4) = 0;
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    if (v12 + 8 <= v11 && (int)bswap32(*(_DWORD *)v12) <= 196608)
    {
      v13 = bswap32(*(unsigned __int16 *)(v12 + 4)) >> 16;
      if (v13 == 1)
      {
        if (v12 + 10 <= v11)
        {
          switch(bswap32(*(unsigned __int16 *)(v12 + 8)) >> 16)
          {
            case 0u:
              goto LABEL_35;
            case 2u:
            case 4u:
            case 6u:
              if (v12 + 14 > v11)
                goto LABEL_14;
              v15 = v12 + 20;
              v16 = bswap32(*(unsigned __int16 *)(v12 + 10)) >> 16;
              v17 = *(unsigned __int16 *)(v12 + 12);
              goto LABEL_31;
            case 8u:
              v18 = v12 + 14;
              if (v12 + 14 > v11)
                goto LABEL_14;
              v19 = bswap32(*(unsigned __int16 *)(v12 + 12)) >> 16;
              v20 = v18 + 2 * v19;
              v21 = v12 + 16 <= v11 ? (v11 - v18) >> 1 : 0;
              v22 = v20 <= v11 && v20 >= v18;
              if (!v22 && v21 != v19)
                goto LABEL_14;
              goto LABEL_35;
            case 0xAu:
              v15 = v12 + 16;
              if (v12 + 16 > v11)
                goto LABEL_14;
              v16 = bswap32(*(unsigned __int16 *)(v12 + 10)) >> 16;
              v17 = *(unsigned __int16 *)(v12 + 14);
LABEL_31:
              v23 = v15 + (bswap32(v17) >> 16) * (unint64_t)v16;
              if (v23 < v15 || v23 > v11)
                goto LABEL_14;
LABEL_35:
              v14 = TAATPropTable::GetPropertiesForGlyph;
              break;
            default:
              goto LABEL_14;
          }
          goto LABEL_12;
        }
      }
      else if (!v13)
      {
        v14 = TAATPropTable::GetDefaultPropertiesForGlyph;
LABEL_12:
        *((_QWORD *)this + 3) = v14;
        *((_QWORD *)this + 4) = 0;
        return;
      }
    }
LABEL_14:
    CFLog();
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)a2 + 5) + 400) + 488))(*(_QWORD *)(*((_QWORD *)a2 + 5) + 400), 1886547824);
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t TCFBidiLevelsProvider::GetLevels(int64x2_t *this, CFRange a2, CTWritingDirection a3)
{
  CFIndex location;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  BOOL v9;
  CFIndex v10;
  CFIndex v11;
  BOOL v12;
  CFIndex v13;

  location = a2.location;
  v5 = this[1].i64[0];
  v6 = this[1].i64[1] + v5;
  if (a2.location + a2.length >= v6)
    v7 = this[1].i64[1] + v5;
  else
    v7 = a2.location + a2.length;
  v8 = v7 - v5;
  v9 = a2.location <= v5 && v5 < a2.location + a2.length;
  if (v9)
    v10 = this[1].i64[0];
  else
    v10 = 0;
  if (!v9)
    v8 = 0;
  v11 = v7 - a2.location;
  v12 = v5 <= a2.location && a2.location < v6;
  if (v12)
    v10 = a2.location;
  if (v12)
    v13 = v11;
  else
    v13 = v8;
  if (v10 != a2.location || v13 != a2.length)
  {
    TCFBidiLevelsProvider::Configure(this, a2, a3, 0);
    v5 = this[1].i64[0];
  }
  return this[2].i64[0] + location - v5;
}

uint64_t TRunReorder::ReorderRuns(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  TParagraphStyle **v9;
  unsigned int BaseWritingDirection;
  unsigned __int8 *v11;
  __int16 v12;
  CFRange v13;
  unsigned int v14;
  unsigned __int8 v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  unsigned __int8 v24;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = result;
    v7 = *(_QWORD *)(*(_QWORD *)v2 + 40);
    v8 = *(_QWORD *)(v7 + 160);
    if (v8 && (*(_WORD *)(v8 + 66) & 4) != 0)
    {
      BaseWritingDirection = 1;
    }
    else
    {
      v9 = *(TParagraphStyle ***)(v7 + 168);
      if (!v9
        || (BaseWritingDirection = TParagraphStyle::GetBaseWritingDirection(v9, (const void *)a2),
            (BaseWritingDirection & 0x80000000) != 0))
      {
        BaseWritingDirection = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, *(_QWORD *)(a2 + 72));
      }
    }
    result = TLine::SetTrailingWhitespaceLevel((TLine *)a2, BaseWritingDirection == 1);
    v12 = *(_WORD *)(a2 + 154);
    if ((v12 & 0x80) == 0)
    {
      v24 = -86;
      result = TRunReorder::GetLevelRange((TRunReorder *)a2, (TLine *)&v24, v11);
      v14 = v24;
      if (v24 <= result)
      {
        v15 = result;
        v16 = v4 >> 3;
        do
        {
          v13.location = 0;
          result = TRunReorder::FindRunRange((TRunReorder *)a2, (TLine *)v15, 0, v13);
          if (result < v16)
          {
            v18 = result;
            v13.location = v17;
            v12 |= 0x80u;
            do
            {
              v19 = v13.location + v18 - 1;
              if (v19 > v18)
              {
                v20 = v18;
                do
                {
                  v21 = *(_QWORD *)(a2 + 16);
                  v22 = *(_QWORD *)(v21 + 8 * v20);
                  *(_QWORD *)(v21 + 8 * v20) = *(_QWORD *)(v21 + 8 * v19);
                  *(_QWORD *)(v21 + 8 * v19) = v22;
                  ++v20;
                  --v19;
                }
                while (v19 > v20);
              }
              *(_WORD *)(a2 + 154) = v12;
              result = TRunReorder::FindRunRange((TRunReorder *)a2, (TLine *)v15, v18, v13);
              v18 = result;
              v13.location = v23;
            }
            while (result < v16);
          }
          --v15;
        }
        while (v14 <= v15);
      }
    }
    if (BaseWritingDirection == 1)
      *(_WORD *)(a2 + 152) |= 8u;
  }
  return result;
}

uint64_t TRunReorder::FindRunRange(TRunReorder *this, TLine *a2, uint64_t a3, CFRange a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 2);
  v5 = (*((_QWORD *)this + 3) - v4) >> 3;
  result = a3 + a4.location;
  if (v5 > a3 + a4.location)
  {
    v7 = (uint64_t *)(v4 + 8 * result + 8);
    while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8 * result) + 40) + 224) < a2)
    {
      ++result;
      ++v7;
      if (v5 <= result)
        return v5;
    }
    v8 = 1;
    do
    {
      if (v5 <= result + v8)
        break;
      v9 = *v7++;
      ++v8;
    }
    while (*(unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 224) >= a2);
  }
  return result;
}

uint64_t TRunReorder::GetLevelRange(TRunReorder *this, TLine *a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v10;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3) - (_QWORD)v3;
  if (v4 < 1)
  {
    result = 0;
    v8 = 63;
  }
  else
  {
    LOBYTE(result) = 0;
    v6 = (unint64_t)v4 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = 63;
    do
    {
      v9 = *v3++;
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 224);
      if (result <= v10)
        result = v10;
      else
        result = result;
      if ((v10 & (v10 < v8)) != 0)
        v8 = v10;
      --v7;
    }
    while (v7);
  }
  *(_BYTE *)a2 = v8;
  return result;
}

uint64_t TCFBidiLevelsProvider::GetDefaultParagraphDirection(int64x2_t *this, CFRange a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v7 = 0;
  a2.length = 1;
  TCFBidiLevelsProvider::Configure(this, a2, -1, &v7);
  v3 = v7 - this[1].i64[0];
  v4 = this[6].i64[0];
  if (v3 >= this[6].i64[1] - v4)
    return 0;
  else
    return *(char *)(v4 + v3);
}

void TCFBidiLevelsProvider::Configure(int64x2_t *this, CFRange a2, int a3, uint64_t *a4)
{
  CFIndex length;
  CFIndex location;
  const __CFAttributedString *v9;
  const __CFString *String;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v15;
  CFIndex v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  int64x2_t v34;
  uint64_t v35;
  const __CFAttributedString *v36;
  const __CFNumber *Attribute;
  const __CFNumber *v38;
  CFTypeID v39;
  int64x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  BOOL v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  CFIndex parEndIndex;
  CFIndex parBeginIndex;
  uint64_t valuePtr;
  int64x2_t v55;
  char *v56;
  __int8 *v57;
  CFRange v58;

  length = a2.length;
  location = a2.location;
  parEndIndex = 0xAAAAAAAAAAAAAAAALL;
  parBeginIndex = 0xAAAAAAAAAAAAAAAALL;
  v9 = (const __CFAttributedString *)atomic_load(&this->u64[1]);
  String = CFAttributedStringGetString(v9);
  v58.location = location;
  v58.length = length;
  CFStringGetParagraphBounds(String, v58, &parBeginIndex, &parEndIndex, 0);
  if (a4)
    *a4 = parBeginIndex;
  v11 = this[1].i64[0];
  v12 = this[1].i64[1] + v11;
  if (location + length >= v12)
    v13 = this[1].i64[1] + v11;
  else
    v13 = location + length;
  if (v11 <= location && location < v12)
  {
    v16 = v13 - location;
    v15 = location;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    if (location <= v11 && v11 < location + length)
    {
      v16 = v13 - v11;
      v15 = this[1].i64[0];
    }
  }
  if (v15 != location || v16 != length)
  {
    v17 = parEndIndex - parBeginIndex;
    this[1].i64[0] = parBeginIndex;
    this[1].i64[1] = v17;
    v19 = this[2].i64[0];
    v18 = (char *)this[2].i64[1];
    v20 = &v18[-v19];
    v21 = v17 - (_QWORD)&v18[-v19];
    if (v17 <= (unint64_t)&v18[-v19])
    {
      if (v17 < (unint64_t)&v18[-v19])
        this[2].i64[1] = v19 + v17;
    }
    else
    {
      v22 = this[3].i64[0];
      if (v22 - (uint64_t)v18 >= v21)
      {
        v27 = v17 + v19;
        bzero(v18, v17 - (_QWORD)&v18[-v19]);
        this[2].i64[1] = v27;
      }
      else
      {
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_70;
        v23 = v22 - v19;
        v24 = 2 * v23;
        if (2 * v23 <= v17)
          v24 = v17;
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v57 = &this[3].i8[8];
        v26 = this[5].i64[1];
        if (v26 + v25 <= (unint64_t)this[5].u64 + 6)
          this[5].i64[1] = v26 + v25;
        else
          v26 = (uint64_t)operator new(v25);
        v28 = &v20[v26];
        v29 = (char *)(v26 + v25);
        v56 = v29;
        v30 = (char *)(v26 + v17);
        bzero(v28, v21);
        v55.i64[1] = (uint64_t)v30;
        v32 = this[2].i64[0];
        v31 = this[2].u64[1];
        if (v31 == v32)
        {
          v34 = vdupq_n_s64(v31);
        }
        else
        {
          do
          {
            v33 = *(_BYTE *)--v31;
            *--v28 = v33;
          }
          while (v31 != v32);
          v34 = this[2];
          v30 = (char *)v55.i64[1];
          v29 = v56;
        }
        this[2].i64[0] = (uint64_t)v28;
        this[2].i64[1] = (uint64_t)v30;
        v55 = v34;
        v35 = this[3].i64[0];
        this[3].i64[0] = (uint64_t)v29;
        v56 = (char *)v35;
        valuePtr = v34.i64[0];
        std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&valuePtr);
      }
    }
    if (a3 != -1)
    {
LABEL_68:
      atomic_load(&this->u64[1]);
      CFAttributedStringGetBidiLevelsAndResolvedDirections();
      return;
    }
    v36 = (const __CFAttributedString *)atomic_load(&this->u64[1]);
    Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(v36, this[1].i64[0], CFSTR("CTFallbackWritingDirection"), 0);
    v38 = Attribute;
    if (Attribute)
    {
      v39 = CFGetTypeID(Attribute);
      if (v39 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = -1431655766;
        CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
        LODWORD(v38) = valuePtr;
      }
      else
      {
        LODWORD(v38) = 0;
      }
    }
    v40 = (int64x2_t *)this[6].i64[0];
    v41 = this[7].u64[0];
    if (v41 - (unint64_t)v40 >= v17)
    {
      v42 = this[6].i64[1];
      v43 = v42 - (_QWORD)v40;
      if (v42 - (uint64_t)v40 >= v17)
        v44 = v17;
      else
        v44 = v42 - (_QWORD)v40;
      if (v44)
        memset(v40, (int)v38, v44);
      v45 = v17 >= v43;
      v46 = v17 - v43;
      if (v46 != 0 && v45)
      {
        v47 = (char *)this[6].i64[1];
        memset(v47, (int)v38, v46);
        v48 = &v47[v46];
      }
      else
      {
        v48 = (char *)(this[6].i64[0] + v17);
      }
      goto LABEL_67;
    }
    if (v40)
    {
      this[6].i64[1] = (uint64_t)v40;
      if (&this[7].u64[1] > (unint64_t *)v40 || &this[9].u16[3] <= (unsigned __int16 *)v40)
      {
        operator delete(v40);
      }
      else if (v41 == this[9].i64[1])
      {
        this[9].i64[1] = (uint64_t)v40;
      }
      v41 = 0;
      this[6].i64[0] = 0;
      this[6].i64[1] = 0;
      this[7].i64[0] = 0;
    }
    if ((v17 & 0x8000000000000000) == 0)
    {
      v49 = 2 * v41;
      if (2 * v41 <= v17)
        v49 = v17;
      v50 = v41 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v49;
      if ((v50 & 0x8000000000000000) == 0)
      {
        v51 = (char *)this[9].i64[1];
        if (&v51[v50] <= &this[9].i8[6])
          this[9].i64[1] = (uint64_t)&v51[v50];
        else
          v51 = (char *)operator new(v50);
        this[6].i64[0] = (uint64_t)v51;
        this[7].i64[0] = (uint64_t)&v51[v50];
        memset(v51, (int)v38, v17);
        v48 = &v51[v17];
LABEL_67:
        this[6].i64[1] = (uint64_t)v48;
        goto LABEL_68;
      }
    }
LABEL_70:
    abort();
  }
}

uint64_t std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v2)
    *(_QWORD *)(a1 + 16) = v2;
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 <= (unint64_t)v3 && v4 + 30 > (unint64_t)v3)
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(v4 + 32))
        *(_QWORD *)(v4 + 32) = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t TLine::SetTrailingWhitespaceLevel(TLine *this, char a2)
{
  uint64_t result;
  CFRange v5;
  CFIndex v6[3];

  result = TLine::GetTrailingWhitespace((uint64_t)this, (double *)v6);
  v5.length = v6[0];
  if (v6[0])
  {
    v5.location = *((_QWORD *)this + 9) - v6[0] + *((_QWORD *)this + 10);
    return TLine::SetLevelRange(this, v5, a2, 1);
  }
  return result;
}

void TLine::ResetLine(TLine *this, const TCharStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t RenderingStyle;
  uint64_t v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (unint64_t)v4 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5) + 48);
      if ((*(_WORD *)(v8 + 178) & 0x40) == 0)
      {
        v9 = atomic_load((unint64_t *)(v8 + 56));
        v10 = *(_QWORD *)(v9 + 40);
        RenderingStyle = TAttributes::GetRenderingStyle((TAttributes *)(v8 + 40));
        TStorageRange::ResetAdvances(v8 + 192, v10, RenderingStyle);
        v12 = *(_QWORD *)(v8 + 312);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 56);
          if (v13 != *(_QWORD *)(v12 + 64))
            *(_QWORD *)(v12 + 64) = v13;
        }
      }
      ++v5;
    }
    while (v7 != v5);
  }
  TKerningEngine::PositionGlyphs(this, a2, (const TCharStream *)4);
  TLine::SyncWithRuns(this);
}

void TStorageRange::ResetAdvances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  CGSize v17;

  v4 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 33) & 4) != 0)
  {
    if (v4 < 1)
      return;
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend(*(id *)(a1 + 24), "customAdvanceForIndex:", i + *(_QWORD *)(a1 + 8));
      v17.height = 0.0;
      TStorageRange::SetAdvance((TStorageRange *)a1, i, v17);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD **)(a1 + 24);
    v8 = v7[3];
    if (v8)
    {
      v9 = (double *)(v8 + 8 * v6);
      v10 = a2;
      v11 = v7[2] + 2 * v6;
      v12 = 1;
    }
    else
    {
      v9 = (double *)(v7[4] + 16 * v6);
      v10 = a2;
      v11 = v7[2] + 2 * v6;
      v12 = 2;
    }
    TFont::GetAdvancesForGlyphs(v10, v11, v9, v12, v4, 0, a3, 0);
    *(_QWORD *)a1 = v14;
  }
  if ((*(_BYTE *)(a1 + 33) & 0x10) != 0 && v4 >= 1)
  {
    v15 = 0;
    v16 = (double *)MEMORY[0x1E0C9D538];
    do
      objc_msgSend(*(id *)(a1 + 24), "setOrigin:atIndex:", v15++, *v16, v16[1]);
    while (v4 != v15);
  }
}

void TLine::InsertLastRun(TLine *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  const TRun *v5;
  uint64_t v6;
  unint64_t v7;

  v7 = 0xAAAAAAAAAAAAAAAALL;
  do
    v4 = __ldaxr(a3);
  while (__stlxr(0, a3));
  v7 = v4;
  v5 = *(const TRun **)(v4 + 48);
  v6 = *((_QWORD *)a1 + 12);
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = v5;
    *((_QWORD *)a1 + 12) = v5;
    *((_QWORD *)v5 + 3) = 0;
    *((_QWORD *)v5 + 4) = v6;
  }
  std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert((uint64_t)a1 + 16, (char *)(*((_QWORD *)a1 + 2) + 8 * a2), (char *)&v7);
  TLine::UpdateCachedMetricsForRun(a1, v5);
}

char *std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    v29 = 0xAAAAAAAAAAAAAAAALL;
    if (v13 >> 61)
      abort();
    v14 = __src - v12;
    v15 = (__src - v12) >> 3;
    v16 = v7 - (_QWORD)v12;
    if (v16 >> 2 > v13)
      v13 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v13;
    v31 = a1 + 24;
    if (v17)
      v18 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 24, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v15];
    v27 = v18;
    v28 = v19;
    v20 = &v18[8 * v17];
    v30 = v20;
    if (v15 == v17)
    {
      if (v14 < 1)
      {
        if (v12 == v4)
          v22 = 1;
        else
          v22 = v14 >> 2;
        v36 = a1 + 24;
        v23 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate(a1 + 24, v22);
        v24 = &v23[8 * (v22 >> 2)];
        v27 = v23;
        v28 = v24;
        v32 = v18;
        v33 = &v18[8 * v15];
        v30 = &v23[8 * v22];
        v34 = v33;
        v35 = v20;
        std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v32);
        v19 = v24;
      }
      else
      {
        v21 = v15 + 2;
        if (v15 >= -1)
          v21 = v15 + 1;
        v19 -= 8 * (v21 >> 1);
        v28 = v19;
      }
    }
    *(_QWORD *)v19 = *(_QWORD *)a3;
    v29 = (unint64_t)(v19 + 8);
    v4 = std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v27, v4);
    std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)&v27);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v8 = __src + 8;
    v9 = v6 - 8;
    v10 = *(_QWORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      v9 += 8;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-8 * ((v6 - v8) >> 3)], __src, v6 - v8);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

BOOL TLine::SplitRun(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  TRun *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  char *v16;
  id v18;
  id v19;

  v6 = a1 + 16;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  v8 = *(TRun **)(v7 + 48);
  v9 = *((_QWORD *)v8 + 1);
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(v7 + 64))(&v18);
  v10 = atomic_load((unint64_t *)&v18);
  v11 = *(_QWORD **)(v10 + 48);
  v12 = v11[26];
  if (v12 >= 1)
  {
    v13 = *((_QWORD *)v8 + 4);
    v14 = (_QWORD *)(a1 + 88);
    if (v13)
      v14 = (_QWORD *)(v13 + 24);
    *v14 = v11;
    v11[3] = v8;
    v11[4] = v13;
    *((_QWORD *)v8 + 4) = v11;
    v15 = (void *)atomic_load((unint64_t *)&v18);
    v16 = (char *)(*(_QWORD *)(a1 + 16) + 8 * a2);
    v19 = v15;
    std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(v6, v16, &v19);
    TRun::TruncateBeginToChar(v8, v9 + a3);
  }

  return v12 > 0;
}

void TRun::TruncateBeginToChar(TRun *this, uint64_t a2)
{
  uint64_t NextChar;
  uint64_t GlyphIndexForChar;
  CFRange v5;
  uint64_t v6;
  uint64_t v7;

  NextChar = a2;
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2);
  v7 = GlyphIndexForChar;
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * GlyphIndexForChar) >= NextChar)
  {
    v5.location = GlyphIndexForChar;
  }
  else
  {
    NextChar = TRun::GetNextChar(this, NextChar, &v7);
    v5.location = v7;
  }
  if ((*((_BYTE *)this + 224) & 1) != 0)
  {
    v5.length = v5.location + 1;
    v5.location = 0;
  }
  else
  {
    v5.length = *((_QWORD *)this + 26) - v5.location;
  }
  TRun::TruncateStorageRange(this, v5);
  v6 = *((_QWORD *)this + 1) - NextChar + *((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = NextChar;
  *((_QWORD *)this + 2) = v6;
}

CTRunDelegateRef CTRunDelegateCreate(const CTRunDelegateCallbacks *callbacks, void *refCon)
{
  uint64_t Instance;
  __int128 v5;
  CTRunDelegateGetWidthCallback getWidth;
  void *v7;
  void *v8;
  const __CTRunDelegate *v9;
  id v11;
  id v12;
  id v13;

  if (!callbacks || callbacks->version > 2uLL)
    return 0;
  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  if (TCFBase<TRunDelegate>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRunDelegate>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRunDelegate>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = CTRunDelegate::Destruct;
    *(_QWORD *)(Instance + 24) = 0;
    *(_QWORD *)(Instance + 32) = 0;
    *(_QWORD *)(Instance + 40) = Instance + 48;
    v5 = *(_OWORD *)&callbacks->getAscent;
    getWidth = callbacks->getWidth;
    *(_OWORD *)(Instance + 48) = *(_OWORD *)&callbacks->version;
    *(_OWORD *)(Instance + 64) = v5;
    *(_QWORD *)(Instance + 80) = getWidth;
    *(_QWORD *)(Instance + 88) = refCon;
    v13 = (id)Instance;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    v11 = v7;

  }
  else
  {
    v11 = 0;
  }
  do
    v8 = (void *)__ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));
  v12 = v8;

  do
    v9 = (const __CTRunDelegate *)__ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));

  return v9;
}

uint64_t TAATMorphSubtable::DoSwashSubtable(_QWORD *a1, TRunGlue *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _DWORD *a7)
{
  _QWORD *v11;
  uint64_t GlyphID;
  uint64_t (*v13)(_QWORD *, uint64_t, unint64_t *);
  uint64_t v14;
  _QWORD *v15;
  _WORD *v16;
  uint64_t v18;
  BOOL v19;
  TRunGlue *v21;
  uint64_t v22;
  unint64_t v23;

  v21 = a2;
  v22 = a3;
  if (a3 != a5)
  {
    v11 = a1 + 3;
    do
    {
      if (!TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v21))
      {
        GlyphID = TRunGlue::GetGlyphID(v21, v22);
        v23 = 0xAAAAAAAAAAAAAAAALL;
        v13 = (uint64_t (*)(_QWORD *, uint64_t, unint64_t *))a1[3];
        v14 = a1[4];
        v15 = (_QWORD *)((char *)v11 + (v14 >> 1));
        if ((v14 & 1) != 0)
          v13 = *(uint64_t (**)(_QWORD *, uint64_t, unint64_t *))(*v15 + v13);
        v16 = (_WORD *)v13(v15, GlyphID, &v23);
        if (v16)
        {
          if ((unint64_t)v16 >= a6 && (unint64_t)(v16 + 1) <= a1[12])
          {
            v18 = __rev16((unsigned __int16)*v16);
            if (*v16)
              v19 = (_DWORD)v18 == (_DWORD)GlyphID;
            else
              v19 = 1;
            if (!v19)
            {
              TRunGlue::SetGlyphID<true>(v21, v22, v18);
              *a7 = 1;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != a5);
  }
  return 1;
}

uint64_t TAATLookupTable::LookupSimpleArray(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
    return 0;
  *a3 = 2;
  return *((_QWORD *)this + 2) + 2 * a2;
}

void TSplicedFont::CopyVariationAxes(TSplicedFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v4;
  const __CFDictionary *v5;
  void *Value;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;

  v4 = (unint64_t *)((char *)this + 600);
  if (TSplicedFontDict::ComponentHasVariations((TSplicedFont *)((char *)this + 600)))
  {
    v5 = (const __CFDictionary *)atomic_load(v4);
    if (v5 && (Value = (void *)CFDictionaryGetValue(v5, CFSTR("variationAxes"))) != 0)
    {
      v10 = Value;
      do
        v7 = __ldaxr((unint64_t *)&v10);
      while (__stlxr(0, (unint64_t *)&v10));
      *a2 = v7;

    }
    else
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
      if ((*(_DWORD *)(v8 + 16) & 0x80000000) == 0)
        TDescriptor::InitBaseFont((TDescriptor *)v8, 0, 0.0);
      v9 = atomic_load((unint64_t *)(v8 + 32));
      (*(void (**)(unint64_t))(*(_QWORD *)v9 + 120))(v9);
    }
  }
  else
  {
    *a2 = 0;
  }
}

__CFString *TDescriptorSource::GetNameForSystemFontOfWeight(const __CFString *this, const __CFString *a2, double a3, int a4, _QWORD *a5, const __CFString **a6)
{
  int v8;
  unsigned int v11;
  __CFString **v12;
  __CFString **v13;
  uint64_t v14;
  __CFString **v15;
  unsigned int v16;
  __CFString *result;

  v8 = (int)a2;
  v11 = IndexesBracketing<double const*,double>(kCTFontDefaultWeights, (double *)&kCTFontWeightRegular, a3, 0.001);
  if (CFSTR("NSCTFontUIFontDesignDefault") == this
    || this && CFSTR("NSCTFontUIFontDesignDefault") && CFEqual(this, CFSTR("NSCTFontUIFontDesignDefault")))
  {
    v12 = off_1E15E3660;
    v13 = off_1E15E36A8;
    goto LABEL_6;
  }
  if (CFSTR("NSCTFontUIFontDesignRounded") == this
    || this && CFSTR("NSCTFontUIFontDesignRounded") && CFEqual(this, CFSTR("NSCTFontUIFontDesignRounded")))
  {
    v12 = kSystemUIFontRoundNames;
    goto LABEL_27;
  }
  if (CFSTR("NSCTFontUIFontDesignCompactRounded") == this
    || this && CFSTR("NSCTFontUIFontDesignCompactRounded") && CFEqual(this, CFSTR("NSCTFontUIFontDesignCompactRounded")))
  {
    v12 = kSystemUIFontCompactRoundNames;
    goto LABEL_27;
  }
  if (CFSTR("NSCTFontUIFontDesignSerif") == this
    || this && CFSTR("NSCTFontUIFontDesignSerif") && CFEqual(this, CFSTR("NSCTFontUIFontDesignSerif")))
  {
    v11 = IndexesBracketing<double const*,double>(&kCTFontDefaultWeights[3], (double *)&kCTFontWeightRegular, a3, 0.001);
    v14 = 6;
    if (!a4)
      v14 = 0;
    v15 = kSystemUIFontSerifNames;
LABEL_26:
    v12 = &v15[v14];
    goto LABEL_27;
  }
  if (CFSTR("NSCTFontUIFontDesignCompact") == this
    || this && CFSTR("NSCTFontUIFontDesignCompact") && CFEqual(this, CFSTR("NSCTFontUIFontDesignCompact")))
  {
    v12 = off_1E15E36F0;
    v13 = off_1E15E3738;
    goto LABEL_6;
  }
  if (CFSTR("NSCTFontUIFontDesignCore") == this
    || this && CFSTR("NSCTFontUIFontDesignCore") && CFEqual(this, CFSTR("NSCTFontUIFontDesignCore")))
  {
    v12 = off_1E15E3780;
    v13 = off_1E15E37C8;
LABEL_6:
    if (a4)
      v12 = v13;
    goto LABEL_27;
  }
  if (CFSTR("NSCTFontUIFontDesignMonospaced") == this
    || this && CFSTR("NSCTFontUIFontDesignMonospaced") && CFEqual(this, CFSTR("NSCTFontUIFontDesignMonospaced")))
  {
    v11 = IndexesBracketing<double const*,double>(&kCTFontDefaultWeights[2], &kCTFontDefaultWeights[8], a3, 0.001);
    v14 = 6;
    if (!a4)
      v14 = 0;
    v15 = kSystemUIFontMonospacedNames;
    goto LABEL_26;
  }
  if (CFSTR("NSCTFontUIFontDesignSoft") == this
    || this && CFSTR("NSCTFontUIFontDesignSoft") && CFEqual(this, CFSTR("NSCTFontUIFontDesignSoft")))
  {
    v12 = kSystemUIFontSoftNames;
  }
  else
  {
    if (CFSTR("NSCTFontUIFontDesignCompactSoft") != this)
    {
      result = 0;
      if (!this || !CFSTR("NSCTFontUIFontDesignCompactSoft"))
        return result;
      if (!CFEqual(this, CFSTR("NSCTFontUIFontDesignCompactSoft")))
        return 0;
    }
    v12 = kSystemUIFontCompactSoftNames;
  }
LABEL_27:
  v16 = HIWORD(v11);
  if (v8)
  {
    result = v12[v16];
    if (a5 && (unsigned __int16)v11 != v16)
    {
      v16 = (unsigned __int16)v11;
LABEL_33:
      *a5 = v12[v16];
    }
  }
  else
  {
    result = v12[(unsigned __int16)v11];
    if (a5 && (unsigned __int16)v11 != v16)
      goto LABEL_33;
  }
  return result;
}

uint64_t IndexesBracketing<double const*,double>(double *a1, double *a2, double a3, double a4)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  double *v7;
  double v8;

  if ((char *)a2 - (char *)a1 >= 16 && *a1 <= a3)
  {
    if (*(a2 - 1) <= a3)
    {
      v4 = ((unint64_t)((char *)a2 - (char *)a1) >> 3) - 1;
    }
    else
    {
      v7 = a1 + 1;
      if (a1 + 1 == a2)
      {
        v4 = 0;
        v5 = 1;
        return v4 | (v5 << 16);
      }
      v4 = 0;
      v5 = 1;
      while (1)
      {
        v8 = *(v7 - 1);
        if (vabdd_f64(a3, v8) < a4)
          break;
        if (vabdd_f64(a3, *v7) < a4)
        {
          v4 = v5;
          return v4 | (v5 << 16);
        }
        if (v8 >= a3 || *v7 <= a3)
        {
          ++v4;
          ++v5;
          if (++v7 != a2)
            continue;
        }
        return v4 | (v5 << 16);
      }
    }
    v5 = v4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (v5 << 16);
}

void CopySecondaryScaleRecipeInternal(unint64_t *a1, TBaseFont ***a2, TFont **a3, uint64_t a4, unsigned __int8 a5)
{
  int v10;
  BOOL v11;
  const __CFArray *v12;
  const void *ValueAtIndex;
  const void *v14;
  unint64_t v15;
  id v16;
  TFont *v17;
  const void *v18;
  os_unfair_lock_s *v19;
  void *v20;
  const __CFDictionary *Value;
  const __CFDictionary *v22;
  unint64_t v23;
  double v25;
  __int128 v26;
  __CFString *v27;
  double RoundedWeight;
  uint64_t v29;
  double v30;
  const __CFAllocator *v31;
  __CFDictionary *v32;
  const void *v33;
  __CFDictionary *v34;
  const void *v35;
  __CFDictionary *v36;
  const void *v37;
  TFont *v38;
  const void *v39;
  const void *v40;
  os_unfair_lock_s *v41;
  unint64_t *v42;
  void *v43;
  __CFDictionary *v44;
  unint64_t v45;
  void *v46;
  __int128 v47;
  __CFString *v48;
  double v49;
  uint64_t v50;
  double v51;
  void *v52;
  void *v53;
  unint64_t v54;
  CFArrayRef v55;
  void *v56;
  unint64_t v57;
  id Mutable;
  id v59[2];
  __int128 v60;
  unint64_t v61;
  id v62;
  id v63;
  void *values;
  id keys[2];
  unint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v10 = a5;
  if (a5)
    v11 = 1;
  else
    v11 = a2 != (TBaseFont ***)a3;
  if (v11)
    goto LABEL_15;
  do
    v12 = (const __CFArray *)__ldaxr(&sPreviousSecondaryScaleFontsAndRecipe);
  while (__stlxr(0, &sPreviousSecondaryScaleFontsAndRecipe));
  if (!v12)
  {
LABEL_15:
    v63 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyPhysicalFamilyName((const __CTFont *)&v63, (const __CTFont *)a2);
    if (v10 || a2 == (TBaseFont ***)a3)
    {
      v62 = (id)0xAAAAAAAAAAAAAAAALL;
      CopyPhysicalFamilyName((const __CTFont *)&v62, (const __CTFont *)a3);
      if (!a3)
      {
        v25 = 0.0;
LABEL_25:
        *(_QWORD *)&v26 = -1;
        *((_QWORD *)&v26 + 1) = -1;
        *(_OWORD *)v59 = v26;
        v60 = v26;
        v61 = 0xAAAAAAAAAAAAAAAALL;
        v27 = (__CFString *)atomic_load((unint64_t *)&v63);
        RoundedWeight = GetRoundedWeight(a2[5]);
        v29 = atomic_load((unint64_t *)&v62);
        SecondaryScaleRecipeForFont((uint64_t)v59, (uint64_t)a2, v27, v29, a4, a5, RoundedWeight, v25);
        if ((_BYTE)v61)
        {
          values = (void *)0xAAAAAAAAAAAAAAAALL;
          v30 = *(double *)v59 / 100.0;
          if (v10)
            v30 = *(double *)&a4;
          CreateCopyOfFontWithSizeAndWeightClass((const __CTFont *)&values, v25 * v30, *(double *)&v59[1], a2, *((double *)&v60 + 1) != 0.0);
          v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v32 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
          v33 = (const void *)atomic_load((unint64_t *)&values);
          CFDictionarySetValue(v32, CFSTR("NSFont"), v33);
          TCFNumber::TCFNumber<double>((unint64_t *)keys, *(double *)&v60);
          v34 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
          v35 = (const void *)atomic_load((unint64_t *)keys);
          CFDictionarySetValue(v34, CFSTR("CTBaselineOffset"), v35);

          TCFNumber::TCFNumber<double>((unint64_t *)keys, *((double *)&v60 + 1));
          v36 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
          v37 = (const void *)atomic_load((unint64_t *)keys);
          CFDictionarySetValue(v36, CFSTR("CTTracking"), v37);

          if (v11)
          {
            if (!v10)
            {
              v38 = a3[5];
              v39 = (const void *)atomic_load((unint64_t *)&v63);
              v40 = (const void *)atomic_load((unint64_t *)&Mutable);
              v41 = (os_unfair_lock_s *)((char *)v38 + 368);
              os_unfair_lock_lock_with_options();
              keys[0] = (id)0xAAAAAAAAAAAAAAAALL;
              v42 = (unint64_t *)((char *)v38 + 376);
              v43 = (void *)atomic_load(v42);
              TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)keys, v43);
              v44 = (__CFDictionary *)atomic_load((unint64_t *)keys);
              CFDictionarySetValue(v44, v39, v40);
              do
                v45 = __ldaxr((unint64_t *)keys);
              while (__stlxr(0, (unint64_t *)keys));
              do
                v46 = (void *)__ldaxr(v42);
              while (__stlxr(v45, v42));

              os_unfair_lock_unlock(v41);
            }
          }
          else
          {
            keys[1] = a2;
            v66 = 0xAAAAAAAAAAAAAAAALL;
            keys[0] = a2;
            v54 = atomic_load((unint64_t *)&Mutable);
            v66 = v54;
            v55 = CFArrayCreate(v31, (const void **)keys, 3, MEMORY[0x1E0C9B378]);
            do
              v56 = (void *)__ldaxr(&sPreviousSecondaryScaleFontsAndRecipe);
            while (__stlxr((unint64_t)v55, &sPreviousSecondaryScaleFontsAndRecipe));

          }
          do
            v57 = __ldaxr((unint64_t *)&Mutable);
          while (__stlxr(0, (unint64_t *)&Mutable));
          *a1 = v57;

          v53 = values;
        }
        else
        {
          if (!TFont::IsSystemUIFontAndForShaping(a3[5], (BOOL *)v59))
            goto LABEL_45;
          *(_QWORD *)&v47 = -1;
          *((_QWORD *)&v47 + 1) = -1;
          *(_OWORD *)v59 = v47;
          v60 = v47;
          v61 = 0xAAAAAAAAAAAAAAAALL;
          v48 = (__CFString *)atomic_load((unint64_t *)&v62);
          v49 = GetRoundedWeight((TBaseFont **)a3[5]);
          v50 = atomic_load((unint64_t *)&v62);
          SecondaryScaleRecipeForFont((uint64_t)v59, (uint64_t)a3, v48, v50, a4, a5, v49, v25);
          if (!(_BYTE)v61)
          {
LABEL_45:
            *a1 = 0;
            goto LABEL_46;
          }
          Mutable = (id)0xAAAAAAAAAAAAAAAALL;
          v51 = *(double *)v59 / 100.0;
          if (v10)
            v51 = *(double *)&a4;
          CreateCopyOfFontWithSizeAndWeightClass((const __CTFont *)&Mutable, v25 * v51, *(double *)&v59[1], a2, 0);
          v52 = (void *)atomic_load((unint64_t *)&Mutable);
          values = v52;
          keys[0] = CFSTR("NSFont");
          *a1 = (unint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v53 = Mutable;
        }

LABEL_46:
LABEL_47:
        v16 = v63;
        goto LABEL_48;
      }
    }
    else
    {
      *a1 = 0xAAAAAAAAAAAAAAAALL;
      v17 = a3[5];
      v18 = (const void *)atomic_load((unint64_t *)&v63);
      v19 = (os_unfair_lock_s *)((char *)v17 + 368);
      os_unfair_lock_lock_with_options();
      v20 = (void *)atomic_load((unint64_t *)v17 + 47);
      Value = v20;
      v22 = Value;
      if (Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v18);
      v59[0] = Value;
      do
        v23 = __ldaxr((unint64_t *)v59);
      while (__stlxr(0, (unint64_t *)v59));
      *a1 = v23;

      os_unfair_lock_unlock(v19);
      if (atomic_load(a1))
        goto LABEL_47;

      v62 = (id)0xAAAAAAAAAAAAAAAALL;
      CopyPhysicalFamilyName((const __CTFont *)&v62, (const __CTFont *)a3);
    }
    v25 = *((double *)a3[5] + 2);
    goto LABEL_25;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v12, 0);
  if (!CFEqual(ValueAtIndex, a2) || (v14 = CFArrayGetValueAtIndex(v12, 1), !CFEqual(v14, a2)))
  {
    CFRelease(v12);
    goto LABEL_15;
  }
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v59[0] = (id)(id)CFArrayGetValueAtIndex(v12, 2);
  do
    v15 = __ldaxr((unint64_t *)v59);
  while (__stlxr(0, (unint64_t *)v59));
  *a1 = v15;

  do
    v16 = (id)__ldaxr(&sPreviousSecondaryScaleFontsAndRecipe);
  while (__stlxr((unint64_t)v12, &sPreviousSecondaryScaleFontsAndRecipe));
LABEL_48:

}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  const __CTFontDescriptor *v2;
  void *v3;
  const __CTFontDescriptor *v5;
  id v6;
  id v7;
  CFDictionaryRef v8;

  v2 = original;
  v8 = attributes;
  if (!original)
    return v2;
  if (attributes && CFDictionaryGetCount(attributes))
  {
    v7 = (id)0xAAAAAAAAAAAAAAAALL;
    v5 = v2;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&v5, &v8, (unint64_t *)&v6);
    do
      v3 = (void *)__ldaxr((unint64_t *)&v6);
    while (__stlxr(0, (unint64_t *)&v6));
    v7 = v3;

    do
      v2 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));

    return v2;
  }
  return v2;
}

void CopyPhysicalFamilyName(const __CTFont *a1, const __CTFont *a2)
{
  unint64_t v4;
  void *v5;
  CFStringRef v6;
  id v7;

  v4 = CTFontCopyPhysicalFont((uint64_t)a2);
  if (v4)
  {
    v5 = (void *)v4;
    (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**(_QWORD **)(*(_QWORD *)(v4 + 40) + 400)
                                                                         + 72))(&v7, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 400), CFSTR("CTFontFamilyName"));
    do
      v6 = (CFStringRef)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));

  }
  else
  {

    v6 = CTFontCopyFamilyName(a2);
  }
  *(_QWORD *)a1 = v6;
}

CFStringRef CTFontCopyFamilyName(CTFontRef font)
{
  const __CFString *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**(_QWORD **)(*((_QWORD *)font + 5) + 400)
                                                                       + 72))(&v3, *(_QWORD *)(*((_QWORD *)font + 5) + 400), CFSTR("CTFontFamilyName"));
  do
    v1 = (const __CFString *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

uint64_t TOpenTypeMorph::CompareRuns(TOpenTypeMorph *this, const TRun *a2, const TRun *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  const void *v10;
  const void *v11;
  const void *AATSettingOfType;
  const void *v13;
  BOOL v14;

  if (*((unsigned __int8 *)this + 224) != *((unsigned __int8 *)a2 + 224))
    return 0;
  v5 = atomic_load((unint64_t *)this + 7);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = atomic_load((unint64_t *)a2 + 7);
  v8 = *(_QWORD *)(v7 + 40);
  result = TFont::Compare((TFont *)v6, (const TFont *)v8, 1);
  if ((_DWORD)result == 1)
  {
    AATSettingOfType = TFontFeatureSettingList::GetAATSettingOfType((TFontFeatureSettingList *)(v6 + 168), 0x16u);
    v13 = TFontFeatureSettingList::GetAATSettingOfType((TFontFeatureSettingList *)(v8 + 168), 0x16u);
    if (AATSettingOfType == v13)
      return 1;
    if (AATSettingOfType)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      return CFEqual(AATSettingOfType, v13) != 0;
    return 0;
  }
  if ((_DWORD)result == 2)
  {
    v10 = (const void *)atomic_load((unint64_t *)this + 8);
    v11 = (const void *)atomic_load((unint64_t *)a2 + 8);
    if (v10 == v11)
      return 1;
    result = 0;
    if (v10)
    {
      if (v11)
      {
        result = CFEqual(v10, v11);
        if ((_DWORD)result)
          return 1;
      }
    }
  }
  return result;
}

uint64_t TFont::Compare(TFont *this, const TFont *a2, int a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t result;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  BOOL v25;
  int ShapingType;
  int v27;
  TBaseFont *v28;
  const void *CommonTable;
  const void *v30;
  const void *v31;
  const void *v32;
  BOOL v33;
  const void *v34;
  const void *v35;
  __int128 v36;
  const __CFData *v37;
  __int128 v38;
  const __CFData *v39;
  __int128 *FeatureTableSubstitutions;
  __int128 *v41;
  id v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  id v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  id v53[11];

  if (this == a2)
    return 2;
  v53[9] = v3;
  v53[10] = v4;
  if (*((double *)this + 2) != *((double *)a2 + 2) || ((*(unsigned __int8 *)this ^ *(unsigned __int8 *)a2) & 1) != 0)
    return 0;
  v8 = *((_QWORD *)this + 5);
  v9 = *((_QWORD *)a2 + 5);
  if (v8 != v9)
  {
    v10 = (const void *)(v8 ? *((_QWORD *)this + 5) : MEMORY[0x1E0C9BAA8]);
    v11 = (const void *)(v9 ? *((_QWORD *)a2 + 5) : MEMORY[0x1E0C9BAA8]);
    if (memcmp(v10, v11, 0x30uLL))
      return 0;
  }
  v12 = (const void *)atomic_load((unint64_t *)this + 1);
  v13 = (const void *)atomic_load((unint64_t *)a2 + 1);
  if (v12 == v13)
    return TFont::CompareExtras(this, a2);
  if (!v12 || !v13)
  {
    if (!a3)
      return 0;
LABEL_21:
    v15 = (void *)atomic_load((unint64_t *)(*((_QWORD *)this + 50) + 96));
    v16 = v15;
    v17 = (void *)atomic_load((unint64_t *)(*((_QWORD *)a2 + 50) + 96));
    v18 = v17;
    v19 = v16;
    v20 = v18;
    if (v19 == v20)
    {

    }
    else
    {
      v21 = v20;
      if (!v19 || !v20)
      {

        goto LABEL_28;
      }
      v22 = CFEqual(v19, v20);

      if (!v22)
      {
LABEL_28:
        v47[0] = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**((_QWORD **)this + 50) + 72))(v47, *((_QWORD *)this + 50), CFSTR("CTFontFamilyName"));
        v42[0] = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**((_QWORD **)a2 + 50) + 72))(v42, *((_QWORD *)a2 + 50), CFSTR("CTFontFamilyName"));
        v23 = (void *)atomic_load((unint64_t *)v47);
        v53[0] = v23;
        v24 = (void *)atomic_load((unint64_t *)v42);
        v52 = v24;
        v25 = StringEqual<TCFRef<__CFString const*>,TCFRef<__CFString const*>>((unint64_t *)v53, (unint64_t *)&v52);

        if (!v25)
          goto LABEL_49;
      }
    }
    ShapingType = TBaseFont::GetShapingType(*((TBaseFont **)this + 50));
    if (ShapingType)
    {
      v27 = ShapingType;
      if (ShapingType == TBaseFont::GetShapingType(*((TBaseFont **)a2 + 50)))
      {
        v28 = (TBaseFont *)*((_QWORD *)this + 50);
        if (v27 == 1)
        {
          CommonTable = (const void *)TBaseFont::GetCommonTable(v28, 1819566439, 0);
          v30 = (const void *)TBaseFont::GetCommonTable(*((TBaseFont **)a2 + 50), 1819566439, 0);
          if (CommonTable == v30 || CommonTable && v30 && CFEqual(CommonTable, v30))
          {
            v31 = (const void *)TBaseFont::GetCommonTable(*((TBaseFont **)this + 50), 1836020344, 0);
            v32 = (const void *)TBaseFont::GetCommonTable(*((TBaseFont **)a2 + 50), 1836020344, 0);
            if (v31 == v32)
            {

              return TFont::CompareExtras(this, a2);
            }
            if (v31 && v32)
            {
              v33 = CFEqual(v31, v32) != 0;
              goto LABEL_54;
            }
          }
          goto LABEL_49;
        }
        v34 = (const void *)TBaseFont::GetCommonTable(v28, 1196643650, 0);
        v35 = (const void *)TBaseFont::GetCommonTable(*((TBaseFont **)a2 + 50), 1196643650, 0);
        if (v34 == v35 || v34 && v35 && CFEqual(v34, v35))
        {
          *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v50 = v36;
          v51 = v36;
          v48 = v36;
          v49 = v36;
          *(_OWORD *)v47 = v36;
          v37 = (const __CFData *)TBaseFont::GetCommonTable(*((TBaseFont **)this + 50), 1195656518, 0);
          OTL::GDEF::GDEF((OTL::GDEF *)v47, v37);
          *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v45 = v38;
          v46 = v38;
          v43 = v38;
          v44 = v38;
          *(_OWORD *)v42 = v38;
          v39 = (const __CFData *)TBaseFont::GetCommonTable(*((TBaseFont **)a2 + 50), 1195656518, 0);
          OTL::GDEF::GDEF((OTL::GDEF *)v42, v39);
          if ((_QWORD)v48 != (_QWORD)v43)
          {
            v33 = 0;
            if ((_QWORD)v48 && (_QWORD)v43)
            {
              if (OTL::ClassDefTable::operator==((unsigned __int16 *)v48, (unsigned __int16 *)v43))
                goto LABEL_48;
              v33 = 0;
            }
LABEL_54:

            if (v33)
              return TFont::CompareExtras(this, a2);
            return 0;
          }
LABEL_48:
          FeatureTableSubstitutions = TFont::GetFeatureTableSubstitutions((TBaseFont **)this, 0);
          v41 = TFont::GetFeatureTableSubstitutions((TBaseFont **)a2, 0);
          v33 = std::operator==[abi:nn180100]<unsigned short,OTL::FeatureTable const*,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short const,OTL::FeatureTable const*>>>((uint64_t)FeatureTableSubstitutions, v41);
          goto LABEL_54;
        }
      }
    }
LABEL_49:

    return 0;
  }
  result = CFEqual(v12, v13);
  if (!(_DWORD)result && (a3 & 1) != 0)
    goto LABEL_21;
  if ((_DWORD)result)
    return TFont::CompareExtras(this, a2);
  return result;
}

CFStringRef CTFontCopyPostScriptName(CTFontRef font)
{
  const __CFString *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, const __CFString *))(**(_QWORD **)(*((_QWORD *)font + 5) + 400)
                                                                       + 72))(&v3, *(_QWORD *)(*((_QWORD *)font + 5) + 400), CFSTR("CTFontPostScriptName"));
  do
    v1 = (const __CFString *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

void TTenuousComponentFont::CopyName(TTenuousComponentFont *this@<X0>, const __CFString *cf1@<X1>, const __CFDictionary **a3@<X8>)
{
  void *SyntheticName;
  _BOOL4 v7;
  char v8;
  _BOOL4 v9;
  __CFString *v10;
  const __CFDictionary *v11;
  const __CFArray *Value;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  id v18;
  void *v19;
  id v20;
  void *v21;
  int v22;
  const __CFDictionary *v23;

  if (CFSTR("CTFontPostScriptName") == cf1
    || cf1 && CFSTR("CTFontPostScriptName") && CFEqual(cf1, CFSTR("CTFontPostScriptName")))
  {
    SyntheticName = (void *)atomic_load((unint64_t *)this + 12);
LABEL_6:
    *a3 = (const __CFDictionary *)SyntheticName;
    return;
  }
  if (CFSTR("CTFontSyntheticFamilyName") == cf1)
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    if (cf1 && CFSTR("CTFontSyntheticFamilyName"))
      v7 = CFEqual(cf1, CFSTR("CTFontSyntheticFamilyName")) != 0;
    if (!v7 && (*((_DWORD *)this + 178) & 0x8000) == 0)
    {
      v8 = 0;
      v9 = 0;
LABEL_30:
      v10 = (__CFString *)cf1;
      goto LABEL_31;
    }
  }
  if (CFSTR("CTFontFullName") == cf1 || cf1 && CFSTR("CTFontFullName") && CFEqual(cf1, CFSTR("CTFontFullName")))
  {
    v9 = 0;
    v8 = 0;
    v10 = (__CFString *)cf1;
    if (!v7)
      goto LABEL_31;
  }
  else
  {
    if (CFSTR("CTFontMarketingName") == cf1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 1;
      if (cf1 && CFSTR("CTFontMarketingName"))
        v9 = CFEqual(cf1, CFSTR("CTFontMarketingName")) == 0;
    }
    if (!v7)
    {
      v8 = 0;
      goto LABEL_30;
    }
  }
  v8 = 1;
  v10 = CFSTR("familyName");
LABEL_31:
  if (v10 == CFSTR("CTFontSyntheticName")
    || v10 && CFSTR("CTFontSyntheticName") && CFEqual(v10, CFSTR("CTFontSyntheticName")))
  {
    if ((*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 856))(this))
    {
      SyntheticName = TComponentFont::GetSyntheticName(this);
      if (SyntheticName)
        goto LABEL_6;
    }
    goto LABEL_61;
  }
  if (!v9)
    goto LABEL_63;
  if ((v8 & 1) != 0
    || CFSTR("CTFontFamilyName") == cf1
    || cf1 && CFSTR("CTFontFamilyName") && CFEqual(cf1, CFSTR("CTFontFamilyName")))
  {
    if ((*(unsigned int (**)(TTenuousComponentFont *))(*(_QWORD *)this + 840))(this))
    {
      v11 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
      if (v11)
      {
        Value = (const __CFArray *)CFDictionaryGetValue(v11, CFSTR("Components"));
        if (Value)
        {
          v13 = Value;
          Count = CFArrayGetCount(Value);
          if (Count)
          {
            v15 = Count;
            v16 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16);
              v18 = (id)CFDictionaryGetValue(ValueAtIndex, CFSTR("name"));
              v19 = (void *)atomic_load((unint64_t *)this + 12);
              v20 = v19;
              if (v20 == v18)
                break;
              v21 = v20;
              if (v18 && v20)
              {
                v22 = CFEqual(v18, v20);

                if (v22)
                  goto LABEL_55;
              }
              else
              {

              }
LABEL_58:
              if (v15 == ++v16)
                goto LABEL_59;
            }

LABEL_55:
            SyntheticName = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("familyName"));
            if (SyntheticName)
              goto LABEL_6;
            goto LABEL_58;
          }
        }
      }
    }
LABEL_59:
    v23 = (const __CFDictionary *)atomic_load((unint64_t *)this + 90);
    if (v23)
    {
      SyntheticName = (void *)CFDictionaryGetValue(v23, CFSTR("familyName"));
      if (SyntheticName)
        goto LABEL_6;
    }
  }
LABEL_61:
  *a3 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  TSplicedFontDict::CopyName((TTenuousComponentFont *)((char *)this + 720), v10, a3);
  if (atomic_load((unint64_t *)a3))
    return;

LABEL_63:
  if (((*(uint64_t (**)(TTenuousComponentFont *))(*(_QWORD *)this + 896))(this) & 1) != 0)
    TBaseFont::CopyName(this, v10, (unint64_t *)a3);
  else
    *a3 = 0;
}

BOOL StringEqual<TCFRef<__CFString const*>,TCFRef<__CFString const*>>(unint64_t *a1, unint64_t *a2)
{
  const void *v2;
  const void *v3;
  BOOL v4;

  v2 = (const void *)atomic_load(a1);
  v3 = (const void *)atomic_load(a2);
  if (v2 == v3)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && CFEqual(v2, v3) != 0;
}

const void *TFontFeatureSettingList::GetAATSettingOfType(TFontFeatureSettingList *this, unsigned int a2)
{
  char **v2;
  char **v3;
  unsigned int v4;
  BOOL v5;
  char **v6;
  CFIndex v7;
  const __CFArray *v8;

  v2 = (char **)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = (char **)((char *)this + 16);
  do
  {
    v4 = *((unsigned __int16 *)v2 + 16);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (char **)*v6;
  }
  while (*v6);
  if (v3 == (char **)((char *)this + 16))
    return 0;
  if (*((unsigned __int16 *)v3 + 16) > a2)
    return 0;
  v7 = (CFIndex)v3[6];
  if (v7 == -1)
    return 0;
  v8 = (const __CFArray *)atomic_load((unint64_t *)this);
  return CFArrayGetValueAtIndex(v8, v7);
}

BOOL OTL::ClassDefTable::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3
    && ((v4 = __rev16(v3), v5 = __rev16(v2), v5 == 2)
      ? (v6 = 6 * (bswap32(a1[1]) >> 16) + 4)
      : v5 != 1
      ? (v6 = 0)
      : (v6 = 2 * (bswap32(a1[2]) >> 16) + 6),
        v4 == 2
      ? (v7 = 6 * (bswap32(a2[1]) >> 16) + 4)
      : v4 != 1
      ? (v7 = 0)
      : (v7 = 2 * (bswap32(a2[2]) >> 16) + 6),
        v6 == v7))
  {
    return memcmp(a1, a2, v6) == 0;
  }
  else
  {
    return 0;
  }
}

void TSplicedFont::CopyName(TSplicedFont *this@<X0>, __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFString *v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  const void *v16;
  const void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;

  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontNames"), &v22);
  do
    v6 = (void *)__ldaxr((unint64_t *)&v22);
  while (__stlxr(0, (unint64_t *)&v22));

  Value = v6;
  v8 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
  v22 = Value;

  if (atomic_load((unint64_t *)&v22))
    goto LABEL_16;
  if (CFSTR("CTFontSyntheticFamilyName") == a2
    || (v10 = a2) != 0
    && (v10 = a2, CFSTR("CTFontSyntheticFamilyName"))
    && (v11 = CFEqual(a2, CFSTR("CTFontSyntheticFamilyName")), v10 = a2, v11))
  {
    v10 = CFSTR("CTFontFamilyName");
  }
  v12 = FontNameCodeForKey(v10);
  v21 = TSplicedFontDict::FindFontName((TSplicedFont *)((char *)this + 600), v12, 0);
  do
    v13 = __ldaxr((unint64_t *)&v21);
  while (__stlxr(0, (unint64_t *)&v21));
  do
    v14 = (void *)__ldaxr((unint64_t *)&v22);
  while (__stlxr(v13, (unint64_t *)&v22));

  if (atomic_load((unint64_t *)&v22))
  {
    v16 = (const void *)atomic_load((unint64_t *)&v22);
    NamesWithUpdatedName((const __CFDictionary *)&v21, (CFDictionaryRef)v6, a2, v16);
    v17 = (const void *)atomic_load((unint64_t *)&v21);
    TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v17, CFSTR("CTFontNames"));

    do
LABEL_16:
      v18 = __ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
    *a3 = v18;
    goto LABEL_18;
  }
  v19 = *(_QWORD *)(*((_QWORD *)this + 76) + 40);
  if ((*(_DWORD *)(v19 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont((TDescriptor *)v19, 0, 0.0);
  v20 = atomic_load((unint64_t *)(v19 + 32));
  (*(void (**)(unint64_t, __CFString *))(*(_QWORD *)v20 + 72))(v20, a2);
LABEL_18:

}

void NamesWithUpdatedName(const __CFDictionary *a1, CFDictionaryRef theDict, __CFString *a3, const void *a4)
{
  __CFDictionary *v7;
  unint64_t v8;
  const void *v9;
  id keys;

  if (theDict)
  {
    keys = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    v7 = (__CFDictionary *)atomic_load((unint64_t *)&keys);
    CFDictionarySetValue(v7, a3, a4);
    do
      v8 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    *(_QWORD *)a1 = v8;

  }
  else
  {
    v9 = a4;
    keys = a3;
    *(_QWORD *)a1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, &v9, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
}

void TInstanceFont::CopyName(TInstanceFont *this@<X0>, const __CFString *a2@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  unint64_t *v7;
  unint64_t v10;
  int v12;
  CGFont *v13;
  void *v14;
  void *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  void *Value;
  unint64_t v20;
  const __CFAllocator *v22;
  const __CFString *v23;
  __CFString *v26;
  unint64_t v27;
  const void *v28;
  __CFDictionary *v29;
  const void *v30;
  unint64_t v31;
  id v32;
  id v33;
  id MutableCopy;
  id v35;
  id v36;

  v36 = 0;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontNames"), &v35);
  do
    v6 = (void *)__ldaxr((unint64_t *)&v35);
  while (__stlxr(0, (unint64_t *)&v35));

  if (CFSTR("CTFontSubFamilyName") != a2
    && (!a2 || !CFSTR("CTFontSubFamilyName") || !CFEqual(a2, CFSTR("CTFontSubFamilyName")))
    && CFSTR("CTFontPreferredSubFamilyName") != a2
    && (!a2 || !CFSTR("CTFontPreferredSubFamilyName") || !CFEqual(a2, CFSTR("CTFontPreferredSubFamilyName"))))
  {
    if (CFSTR("CTFontFullName") == a2 || a2 && CFSTR("CTFontFullName") && CFEqual(a2, CFSTR("CTFontFullName")))
    {
      v13 = (CGFont *)atomic_load((unint64_t *)this + 13);
      if ((IsNamedInstance(v13) & 1) == 0)
      {
        v16 = v6;
        v17 = v16;
        if (v16)
          Value = (void *)CFDictionaryGetValue(v16, a2);
        else
          Value = 0;
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v36, Value);

        if (atomic_load((unint64_t *)&v36))
        {
          do
            v20 = __ldaxr((unint64_t *)&v36);
          while (__stlxr(0, (unint64_t *)&v36));
          *a3 = v20;
          goto LABEL_31;
        }
        v35 = (id)0xAAAAAAAAAAAAAAAALL;
        TBaseFont::CopyName(this, CFSTR("CTFontFamilyName"), (unint64_t *)&v35);
        if (atomic_load((unint64_t *)&v35))
        {
          MutableCopy = (id)0xAAAAAAAAAAAAAAAALL;
          v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v23 = (const __CFString *)atomic_load((unint64_t *)&v35);
          MutableCopy = CFStringCreateMutableCopy(v22, 0, v23);
          if (atomic_load((unint64_t *)&MutableCopy))
          {
            v33 = (id)0xAAAAAAAAAAAAAAAALL;
            (*(void (**)(id *__return_ptr, TInstanceFont *, const __CFString *))(*(_QWORD *)this + 72))(&v33, this, CFSTR("CTFontSubFamilyName"));
            if (atomic_load((unint64_t *)&v33))
            {
              v26 = (__CFString *)atomic_load((unint64_t *)&MutableCopy);
              v27 = atomic_load((unint64_t *)&v33);
              CFStringAppendFormat(v26, 0, CFSTR(" %@"), v27);
              v32 = (id)0xAAAAAAAAAAAAAAAALL;
              TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v32, (CFDictionaryRef)v6);
              v28 = (const void *)atomic_load((unint64_t *)&MutableCopy);
              v29 = (__CFDictionary *)atomic_load((unint64_t *)&v32);
              CFDictionarySetValue(v29, a2, v28);
              v30 = (const void *)atomic_load((unint64_t *)&v32);
              TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, v30, CFSTR("CTFontNames"));

            }
            do
              v31 = __ldaxr((unint64_t *)&MutableCopy);
            while (__stlxr(0, (unint64_t *)&MutableCopy));
            *a3 = v31;

            goto LABEL_31;
          }

        }
      }
    }
    TBaseFont::CopyName(this, a2, a3);
    goto LABEL_31;
  }
  v7 = (unint64_t *)((char *)this + 608);
  if (!atomic_load((unint64_t *)this + 76))
  {
    v35 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::CopyName(this, CFSTR("CTFontSubFamilyName"), (unint64_t *)&v35);
    if (atomic_load((unint64_t *)&v35))
    {
      do
        v10 = __ldaxr((unint64_t *)&v35);
      while (__stlxr(0, (unint64_t *)&v35));
      do
      {
        if (__ldaxr(v7))
        {
          v12 = 0;
          __clrex();
          goto LABEL_25;
        }
      }
      while (__stlxr(v10, v7));
      v12 = 1;
LABEL_25:
      if (v12)
        v14 = 0;
      else
        v14 = (void *)v10;

    }
  }
  v15 = (void *)atomic_load(v7);
  *a3 = (unint64_t)v15;
LABEL_31:

}

unint64_t CTFontCopyPhysicalFont(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CTFontDescriptor *v4;
  void *v5;
  unint64_t v6;
  const __CTFontDescriptor *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 400);
  if (!v2)
    return 0;
  v12 = *(_QWORD *)(v1 + 16);
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v2 + 520))(&v11);
  if (!atomic_load((unint64_t *)&v11))
  {

    return 0;
  }
  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  v4 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v11);
  v8 = v4;
  TCFBase_NEW<CTFont,__CTFontDescriptor const*,double &,decltype(nullptr),decltype(nullptr)>(&v8, (double *)&v12, (unint64_t *)&v9);
  do
    v5 = (void *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  v10 = v5;

  do
    v6 = __ldaxr((unint64_t *)&v10);
  while (__stlxr(0, (unint64_t *)&v10));

  return v6;
}

void TBaseFont::CopyWeightAxisValue(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  const __CFDictionary *v8;
  void *Value;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  void *v15;
  void *v16;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontWeightAxisValueAttribute"), &v22);
  if (atomic_load((unint64_t *)&v22))
  {
    v5 = atomic_load((unint64_t *)&v22);
    if (*MEMORY[0x1E0C9B0D0] == v5)
    {
      v6 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v21 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 112))(&v21, this);
    if (atomic_load((unint64_t *)&v21))
    {
      v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v21);
      Value = (void *)CFDictionaryGetValue(v8, &unk_1E16170E0);
      if (Value)
      {
        TCFRef<__CTFont const*>::Retain((unint64_t *)&v22, Value);
      }
      else
      {
        v20 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 120))(&v20, this);
        v10 = (const __CFArray *)atomic_load((unint64_t *)&v20);
        if (v10)
        {
          Count = CFArrayGetCount(v10);
          if (Count)
          {
            v12 = Count;
            v13 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
              v15 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
              if (v15 == &unk_1E16170E0 || v15 && CFEqual(v15, &unk_1E16170E0))
                break;
              if (v12 == ++v13)
                goto LABEL_16;
            }
            v16 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisDefaultValue"));
            TCFRef<__CTFont const*>::Retain((unint64_t *)&v22, v16);
          }
        }
LABEL_16:

      }
    }

    if (atomic_load((unint64_t *)&v22))
    {
      v18 = (void *)atomic_load((unint64_t *)&v22);
      v19 = v18;
      TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v19, CFSTR("CTFontWeightAxisValueAttribute"));

    }
    else
    {
      TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, (const void *)*MEMORY[0x1E0C9B0D0], CFSTR("CTFontWeightAxisValueAttribute"));
    }
  }
  do
    v6 = __ldaxr((unint64_t *)&v22);
  while (__stlxr(0, (unint64_t *)&v22));
LABEL_21:
  *a2 = v6;

}

double TextScaleRecipeForSize(CFDictionaryRef theDict, uint64_t a2, char a3, double a4)
{
  double v6;
  const __CFArray *Value;
  const __CFNumber *ValueAtIndex;
  double v9;
  const __CFNumber *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CFArrayRef theArray;
  CFArrayRef v26;
  double v27;
  double valuePtr;

  if (a3)
    v6 = *(double *)&a2 * 100.0;
  else
    v6 = 0.0;
  if (v6 == 0.0)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("auto"));
    theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    v26 = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    v27 = NAN;
    tuplesBracketingValue((const __CFArray *)&theArray, Value, a4, 0);
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, 1);
    valuePtr = NAN;
    CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
    v9 = valuePtr;
    v10 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 1);
    valuePtr = NAN;
    CFNumberGetValue(v10, kCFNumberDoubleType, &valuePtr);
    v6 = std::__lerp[abi:nn180100]<double>(v9, valuePtr, v27);
  }
  v11 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("recipes"));
  theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  v26 = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  v27 = NAN;
  tuplesBracketingValue((const __CFArray *)&theArray, v11, a4, 0);
  v12 = theArray;
  v13 = TextScaleRecipeForSize(__CFDictionary const*,double,std::optional<double>)::$_0::operator()(theArray, v6);
  v15 = v14;
  v17 = v16;
  if (v12 != v26)
  {
    v18 = TextScaleRecipeForSize(__CFDictionary const*,double,std::optional<double>)::$_0::operator()(v26, v6);
    v20 = v19;
    v22 = v21;
    v23 = v27;
    std::__lerp[abi:nn180100]<double>(v13, v18, v27);
    std::__lerp[abi:nn180100]<double>(v15, v20, v23);
    std::__lerp[abi:nn180100]<double>(v17, v22, v23);
  }
  return v6;
}

void tuplesBracketingValue(const __CFArray *a1, CFArrayRef theArray, double a3, CFIndex a4)
{
  __int128 v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const __CFArray *ValueAtIndex;
  const __CFNumber *v12;
  void **v13;
  void **v14;
  double *v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void ***v22;
  void **v23;
  double *v24;
  uint64_t v25;
  void **v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  const void *v30;
  const void *v31;
  double v32;
  double v33;
  double v34;
  void **valuePtr[5];
  double *v37;
  void ***v38;
  void **v39;
  _OWORD v40[15];
  _OWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[14] = v7;
  v40[13] = v7;
  v40[12] = v7;
  v40[11] = v7;
  v40[10] = v7;
  v40[9] = v7;
  v40[8] = v7;
  v40[7] = v7;
  v40[6] = v7;
  v40[5] = v7;
  v40[4] = v7;
  v40[3] = v7;
  v40[2] = v7;
  v40[1] = v7;
  v40[0] = v7;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v41 = v40;
  Count = CFArrayGetCount(theArray);
  if (Count <= a4)
  {
    v15 = (double *)v38;
  }
  else
  {
    v9 = Count;
    v10 = a4;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v10);
      v12 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      valuePtr[0] = (void **)-1;
      CFNumberGetValue(v12, kCFNumberDoubleType, valuePtr);
      v13 = valuePtr[0];
      v14 = (void **)v38;
      if (v38 >= (void ***)v39)
      {
        v16 = (void **)v37;
        v17 = ((char *)v38 - (char *)v37) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          abort();
        v19 = (char *)v39 - (char *)v37;
        if (((char *)v39 - (char *)v37) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        valuePtr[4] = (void **)v40;
        if (v20)
        {
          v21 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v40, v20);
          v16 = (void **)v37;
          v14 = (void **)v38;
        }
        else
        {
          v21 = 0;
        }
        v22 = (void ***)&v21[8 * v17];
        *v22 = v13;
        if (v14 == v16)
        {
          v24 = (double *)&v21[8 * v17];
        }
        else
        {
          v23 = v14;
          v24 = (double *)&v21[8 * v17];
          do
          {
            v25 = (uint64_t)*--v23;
            *((_QWORD *)v24-- - 1) = v25;
          }
          while (v23 != v16);
        }
        v15 = (double *)(v22 + 1);
        v37 = v24;
        v38 = v22 + 1;
        v26 = v39;
        v39 = (void **)&v21[8 * v20];
        valuePtr[2] = v14;
        valuePtr[3] = v26;
        valuePtr[0] = v16;
        valuePtr[1] = v16;
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v38 = valuePtr[0];
        v15 = (double *)(v14 + 1);
      }
      v38 = (void ***)v15;
      ++v10;
    }
    while (v10 != v9);
  }
  v27 = IndexesBracketing<std::__wrap_iter<double *>,double>(v37, v15, a3);
  v28 = HIWORD(v27);
  v29 = (unsigned __int16)v27;
  v30 = CFArrayGetValueAtIndex(theArray, (unsigned __int16)v27 + a4);
  v31 = CFArrayGetValueAtIndex(theArray, v28 + a4);
  v32 = v37[v29];
  v33 = v37[v28];
  v34 = 0.0;
  if (v32 != v33)
    v34 = (a3 - v32) / (v33 - v32);
  *(_QWORD *)a1 = v30;
  *((_QWORD *)a1 + 1) = v31;
  *((double *)a1 + 2) = v34;
  valuePtr[0] = (void **)&v37;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](valuePtr);
}

void std::vector<double,TInlineBufferAllocator<double,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[5];

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (uint64_t)(a1 + 3);
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v4 - v7;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v20[4] = a1 + 3;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v6, v12);
      v7 = *a1;
      v5 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    if (v5 != v7)
    {
      v17 = v5;
      do
      {
        v18 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v17 != v7);
    }
    *a1 = v14;
    a1[1] = v16;
    v19 = a1[2];
    a1[2] = v15;
    v20[2] = v5;
    v20[3] = v19;
    v20[0] = v7;
    v20[1] = v7;
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v20);
  }
}

uint64_t IndexesBracketing<std::__wrap_iter<double *>,double>(double *a1, double *a2, double a3)
{
  unsigned __int16 v3;
  unsigned __int16 v4;
  double *v6;
  double v7;

  if ((char *)a2 - (char *)a1 >= 16 && *a1 <= a3)
  {
    if (*(a2 - 1) <= a3)
    {
      v3 = ((unint64_t)((char *)a2 - (char *)a1) >> 3) - 1;
    }
    else
    {
      v6 = a1 + 1;
      if (a1 + 1 == a2)
      {
        v3 = 0;
        v4 = 1;
        return v3 | (v4 << 16);
      }
      v3 = 0;
      v4 = 1;
      while (1)
      {
        v7 = *(v6 - 1);
        if (vabdd_f64(a3, v7) < 2.22044605e-16)
          break;
        if (vabdd_f64(a3, *v6) < 2.22044605e-16)
        {
          v3 = v4;
          return v3 | (v4 << 16);
        }
        if (v7 >= a3 || *v6 <= a3)
        {
          ++v3;
          ++v4;
          if (++v6 != a2)
            continue;
        }
        return v3 | (v4 << 16);
      }
    }
    v4 = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v3 | (v4 << 16);
}

CTFontRef CreateBestFontForCSS<`anonymous namespace'::ValuesAreDescriptors>(id a1, CFArrayRef theArray, unsigned int a3, int a4, CGFloat a5)
{
  const __CFArray *v7;
  CFIndex Count;
  const __CTFontDescriptor *ValueAtIndex;
  __int128 v12;
  CFIndex v13;
  double v14;
  double v15;
  double v16;
  double v17;
  const __CTFontDescriptor *v18;
  CTFontRef v19;
  const __CFNumber *v20;
  char v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  double v26;
  double v27;
  const __CTFontDescriptor *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  const __CTFontDescriptor **v36;
  _OWORD *v37;
  _OWORD *v38;
  const __CTFontDescriptor **v39;
  char *v40;
  unint64_t v41;
  _BOOL4 v43;
  _BOOL4 v44;
  BOOL v45;
  double v46;
  const __CTFontDescriptor *v47;
  const __CTFontDescriptor *v48;
  const __CTFontDescriptor *v49;
  BOOL v50;
  const __CTFontDescriptor *v51;
  char *v52;
  double *v53;
  CTFontRef v54;
  const __CTFontDescriptor *v55;
  const __CTFontDescriptor *v56;
  CTFontDescriptorRef descriptor;
  const __CTFontDescriptor *v58;
  const __CTFontDescriptor *v59;
  const __CTFontDescriptor *v60;
  unsigned int v61;
  CFIndex v62;
  const __CFArray *v63;
  double valuePtr;
  id v66;
  void *__p;
  char *v68;
  unint64_t v69;
  _OWORD v70[30];
  _QWORD v71[3];

  v7 = theArray;
  v71[1] = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(theArray);
  if (Count == 1)
  {
    ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v7, 0);
    return CTFontCreateWithFontDescriptor(ValueAtIndex, a5, 0);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70[28] = v12;
  v70[29] = v12;
  v70[26] = v12;
  v70[27] = v12;
  v70[24] = v12;
  v70[25] = v12;
  v70[22] = v12;
  v70[23] = v12;
  v70[20] = v12;
  v70[21] = v12;
  v70[18] = v12;
  v70[19] = v12;
  v70[16] = v12;
  v70[17] = v12;
  v70[15] = v12;
  v70[14] = v12;
  v70[13] = v12;
  v70[12] = v12;
  v70[11] = v12;
  v70[10] = v12;
  v70[9] = v12;
  v70[8] = v12;
  v70[7] = v12;
  v70[6] = v12;
  v70[5] = v12;
  v70[4] = v12;
  v70[3] = v12;
  v70[2] = v12;
  v70[1] = v12;
  v70[0] = v12;
  __p = 0;
  v68 = 0;
  v69 = 0;
  v71[0] = v70;
  if (Count < 1)
    return 0;
  descriptor = 0;
  v13 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = a3;
  v14 = (double)a3;
  v15 = -500.0;
  v16 = 500.0;
  v17 = INFINITY;
  v62 = Count;
  v63 = v7;
  do
  {
    v18 = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v7, v13);
    valuePtr = 0.0;
    v19 = CTFontCreateWithFontDescriptor(v18, a5, 0);
    v66 = (id)CTFontCopyAttribute(v19, CFSTR("CTFontCSSWeightAttribute"));
    do
      v20 = (const __CFNumber *)__ldaxr((unint64_t *)&v66);
    while (__stlxr(0, (unint64_t *)&v66));

    if (v19)
    {
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v19 + 5) + 400) + 160))(*(_QWORD *)(*((_QWORD *)v19 + 5) + 400));
      if (!v20)
        goto LABEL_11;
    }
    else
    {
      v21 = 0;
      if (!v20)
      {
LABEL_11:
        valuePtr = 400.0;
        goto LABEL_12;
      }
    }
    CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
LABEL_12:
    v66 = (id)CTFontDescriptorCopyAttribute(v18, CFSTR("NSCTFontPostScriptNameAttribute"));
    do
      v22 = (void *)__ldaxr((unint64_t *)&v66);
    while (__stlxr(0, (unint64_t *)&v66));

    v23 = v22;
    if (v23 == a1)
    {

LABEL_20:
      if (v61 < 0x258 || (v21 & 2) != 0)
      {
        v54 = CTFontCreateWithFontDescriptor(v18, a5, 0);

        goto LABEL_101;
      }
      goto LABEL_24;
    }
    v24 = v23;
    if (!a1 || !v23)
    {

      goto LABEL_24;
    }
    v25 = CFEqual(v23, a1);

    if (v25)
      goto LABEL_20;
LABEL_24:
    v26 = valuePtr;
    v27 = valuePtr - v14;
    if ((v21 & 0x61) == a4)
    {
      if (fabs(v27) >= 0.001)
      {
        v29 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v31 = (v68 - (_BYTE *)__p) >> 4;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60)
            abort();
          v33 = v69 - (_QWORD)__p;
          if ((uint64_t)(v69 - (_QWORD)__p) >> 3 > v32)
            v32 = v33 >> 3;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
            v34 = 0xFFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)v71[0];
            if (v71[0] + 16 * v34 <= (unint64_t)v71)
            {
              v71[0] += 16 * v34;
            }
            else
            {
              if (v34 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v35 = (char *)operator new(16 * v34);
            }
          }
          else
          {
            v35 = 0;
          }
          v36 = (const __CTFontDescriptor **)&v35[16 * v31];
          *v36 = v18;
          *((double *)v36 + 1) = v26;
          v38 = __p;
          v37 = v68;
          v39 = v36;
          if (v68 != __p)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *(v37 - 1);
              v39 -= 2;
              --v37;
            }
            while (v37 != v38);
            v37 = __p;
          }
          v40 = &v35[16 * v34];
          v30 = (char *)(v36 + 2);
          __p = v39;
          v68 = (char *)(v36 + 2);
          v41 = v69;
          v69 = (unint64_t)v40;
          if (v37)
          {
            if (v70 <= v37 && v71 > (_QWORD *)v37)
            {
              if (v41 == v71[0])
                v71[0] = v37;
            }
            else
            {
              operator delete(v37);
            }
          }
        }
        else
        {
          *(_QWORD *)v68 = v18;
          *((double *)v29 + 1) = v26;
          v30 = v29 + 16;
        }
        v68 = v30;
        v43 = v27 < 0.0;
        v44 = v27 > v15;
        v45 = !v43 || !v44;
        if (v43 && v44)
          v46 = v27;
        else
          v46 = v15;
        v47 = v58;
        v48 = v59;
        if (v45)
          v49 = v58;
        else
          v49 = v18;
        v50 = v27 > 0.0 && v27 < v16;
        if (v50)
          v16 = v27;
        else
          v15 = v46;
        if (v50)
          v48 = v18;
        else
          v47 = v49;
        v58 = v47;
        v59 = v48;
      }
      else
      {
        v28 = v60;
        if (!v60)
          v28 = v18;
        v60 = v28;
      }
    }
    else if (__p == v68 && fabs(v27) < fabs(v17))
    {
      v17 = valuePtr - v14;
      descriptor = v18;
    }

    ++v13;
    v7 = v63;
  }
  while (v13 != v62);
  v51 = v60;
  if (!v60)
  {
    v52 = (char *)__p;
    if (__p == v68)
    {
      v55 = descriptor;
      if (!descriptor)
      {
        v54 = 0;
        goto LABEL_102;
      }
    }
    else
    {
      if (v61 != 400)
      {
        if (v61 == 500)
        {
          v53 = (double *)__p;
          while (fabs(v53[1] + -400.0) >= 0.001)
          {
            v53 += 2;
            if (v53 == (double *)v68)
              goto LABEL_92;
          }
          goto LABEL_90;
        }
        goto LABEL_92;
      }
      v53 = (double *)__p;
      while (fabs(v53[1] + -500.0) >= 0.001)
      {
        v53 += 2;
        if (v53 == (double *)v68)
          goto LABEL_92;
      }
LABEL_90:
      if (v53 != (double *)v68)
      {
        v51 = *(const __CTFontDescriptor **)v53;
        goto LABEL_100;
      }
LABEL_92:
      if (v61 < 0x1F5)
      {
        v56 = v58;
        v55 = v59;
        if (v58)
          goto LABEL_97;
        if (!v59)
        {
LABEL_107:
          v51 = *(const __CTFontDescriptor **)__p;
          goto LABEL_100;
        }
      }
      else
      {
        v56 = v58;
        v55 = v59;
        if (!v59)
        {
          if (!v58)
            goto LABEL_107;
LABEL_97:
          v51 = v56;
          goto LABEL_100;
        }
      }
    }
    v51 = v55;
  }
LABEL_100:
  v54 = CTFontCreateWithFontDescriptor(v51, a5, 0);
LABEL_101:
  v52 = (char *)__p;
LABEL_102:
  if (v52)
  {
    v68 = v52;
    if (v70 > (_OWORD *)v52 || v71 <= (_QWORD *)v52)
      operator delete(v52);
  }
  return v54;
}

CFTypeRef CTFontCopyAttribute(CTFontRef font, CFStringRef attribute)
{
  TFont *v3;
  const void *FontAttributeID;
  const void *v5;
  id v7;

  if (!font)
    return 0;
  v3 = (TFont *)*((_QWORD *)font + 5);
  FontAttributeID = GetFontAttributeID(attribute);
  TFont::CopyAttribute(v3, attribute, (uint64_t)FontAttributeID, (unint64_t *)&v7);
  do
    v5 = (const void *)__ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));

  return v5;
}

void TFont::CopyAttribute(TFont *this@<X0>, const __CFString *key@<X2>, uint64_t a3@<X1>, unint64_t *a4@<X8>)
{
  void *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  unint64_t v10;
  void *v11;
  CFNumberRef v12;
  __int128 v13;
  CFDataRef v14;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  const __CFDictionary *Value;
  const __CFDictionary *v21;
  unint64_t v22;
  void *v23;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  int v31;
  unint64_t v32;
  TBaseFont *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41[2];
  __int128 v42;
  __int128 v43;
  CFNumberRef valuePtr;

  *a4 = 0;
  switch(a3)
  {
    case 8:
      v41[0] = *((id *)this + 2);
      valuePtr = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, v41);
      do
        v17 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v18 = (void *)__ldaxr(a4);
      while (__stlxr(v17, a4));
      goto LABEL_63;
    case 9:
      v19 = (void *)atomic_load((unint64_t *)this + 20);
      Value = v19;
      v21 = Value;
      if (Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("NSCTFontOpticalSizeAttribute"));
      v41[0] = Value;
      do
        v22 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v23 = (void *)__ldaxr(a4);
      while (__stlxr(v22, a4));

      if (atomic_load(a4))
        return;
      if (atomic_load((unint64_t *)this + 1))
      {
        v26 = atomic_load((unint64_t *)this + 1);
        if ((*(_DWORD *)(*(_QWORD *)(v26 + 40) + 16) & 0x8000) != 0)
        {
          v41[0] = CFSTR("auto");
          do
            v40 = __ldaxr((unint64_t *)v41);
          while (__stlxr(0, (unint64_t *)v41));
          do
            v30 = (void *)__ldaxr(a4);
          while (__stlxr(v40, a4));
          goto LABEL_67;
        }
      }
      v41[0] = *((id *)this + 3);
      valuePtr = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, v41);
      do
        v27 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v18 = (void *)__ldaxr(a4);
      while (__stlxr(v27, a4));
LABEL_63:

      v12 = valuePtr;
      break;
    case 10:
    case 14:
    case 17:
    case 20:
    case 21:
    case 48:
    case 49:
    case 51:
      goto LABEL_2;
    case 11:
      v41[0] = COERCE_ID(TFont::GetUnscaledTrackAmount(this));
      valuePtr = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, v41);
      do
        v28 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v18 = (void *)__ldaxr(a4);
      while (__stlxr(v28, a4));
      goto LABEL_63;
    case 12:
    case 13:
      *(_QWORD *)&v13 = -1;
      *((_QWORD *)&v13 + 1) = -1;
      v42 = v13;
      v43 = v13;
      *(_OWORD *)v41 = v13;
      TFont::GetEffectiveMatrix(this, (uint64_t)v41);
      v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v41, 48);
      do
        v12 = (CFNumberRef)__ldaxr(a4);
      while (__stlxr((unint64_t)v14, a4));
      break;
    case 15:
    case 16:
    case 18:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 32:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 52:
    case 53:
      goto LABEL_12;
    case 19:
      (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 136))(v41, *((_QWORD *)this + 50), 1);
      do
        v29 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v30 = (void *)__ldaxr(a4);
      while (__stlxr(v29, a4));
      goto LABEL_67;
    case 22:
      if ((*(_DWORD *)this & 1) != 0)
        v31 = 2;
      else
        v31 = 1;
      LODWORD(valuePtr) = v31;
      v41[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      do
        v32 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v30 = (void *)__ldaxr(a4);
      while (__stlxr(v32, a4));
      goto LABEL_67;
    case 28:
      v33 = (TBaseFont *)*((_QWORD *)this + 50);
      if ((*((_DWORD *)v33 + 46) & 0x400) == 0)
        TBaseFont::DetermineFontFlags(v33, 1024);
      LODWORD(valuePtr) = (*((_DWORD *)v33 + 45) >> 10) & 1;
      v41[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      do
        v34 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v30 = (void *)__ldaxr(a4);
      while (__stlxr(v34, a4));
      goto LABEL_67;
    case 33:
      v35 = *((_QWORD *)this + 50);
      if (!v35)
        return;
      (*(void (**)(id *__return_ptr))(*(_QWORD *)v35 + 200))(v41);
      do
        v36 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v30 = (void *)__ldaxr(a4);
      while (__stlxr(v36, a4));
      goto LABEL_67;
    case 43:
      LODWORD(valuePtr) = ((*(_DWORD *)this >> 1) & 1) == 0;
      v41[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      do
        v37 = __ldaxr((unint64_t *)v41);
      while (__stlxr(0, (unint64_t *)v41));
      do
        v30 = (void *)__ldaxr(a4);
      while (__stlxr(v37, a4));
      goto LABEL_67;
    case 54:
      v41[0] = (id)(((unint64_t)*(unsigned int *)this >> 6) & 7);
      valuePtr = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, v41);
      do
        v38 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v18 = (void *)__ldaxr(a4);
      while (__stlxr(v38, a4));
      goto LABEL_63;
    default:
      if (a3 == 64)
      {
LABEL_2:
        v7 = (void *)atomic_load((unint64_t *)this + 20);
        v8 = v7;
        v9 = v8;
        if (v8)
          v8 = (const __CFDictionary *)CFDictionaryGetValue(v8, key);
        v41[0] = v8;
        do
          v10 = __ldaxr((unint64_t *)v41);
        while (__stlxr(0, (unint64_t *)v41));
        do
          v11 = (void *)__ldaxr(a4);
        while (__stlxr(v10, a4));

        v12 = v9;
      }
      else
      {
LABEL_12:
        if (atomic_load((unint64_t *)this + 1))
        {
          v16 = atomic_load((unint64_t *)this + 1);
          TDescriptor::CopyAttribute(*(TDescriptor **)(v16 + 40), key, a3, v41);
        }
        else
        {
          v41[0] = 0;
        }
        do
          v39 = __ldaxr((unint64_t *)v41);
        while (__stlxr(0, (unint64_t *)v41));
        do
          v30 = (void *)__ldaxr(a4);
        while (__stlxr(v39, a4));
LABEL_67:

        v12 = (CFNumberRef)v41[0];
      }
      break;
  }

}

double CTFontGetCapHeightForSystemFontOfSize(double a1)
{
  return (double)*((int *)kFont2X + 8) * a1 / *((double *)kFont2X + 1);
}

char *ConvertToMorxSync(TBaseFont const*)::{lambda(void *)#1}::__invoke()
{
  char *result;

  result = getenv("CT_SKIP_MORX_CONVERSION");
  _MergedGlobals_168 = result != 0;
  return result;
}

void TFramesetterAttrString::~TFramesetterAttrString(id *this)
{
  char *v2;

  *this = &off_1E15DE400;
  v2 = (char *)(this + 31);

  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)v2);
  TLine::~TLine((TLine *)(this + 1));
}

{
  TFramesetterAttrString::~TFramesetterAttrString(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TCFBase<TFramesetter>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  return (***(uint64_t (****)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40));
}

_QWORD *CTRunGetStretchFactors(_QWORD *result, uint64_t a2, uint64_t a3, _OWORD *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result && __dst)
  {
    v4 = result[5];
    if ((*(_BYTE *)(v4 + 225) & 8) != 0)
    {
      v9 = *(_QWORD *)(v4 + 264);
      v22[0] = &off_1E15DC9C8;
      v22[1] = v4;
      v22[2] = __dst;
      v23 = v22;
      v10 = *(_QWORD *)(v4 + 208);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 16) + 2 * *(_QWORD *)(v4 + 200);
      if (a3)
        v12 = a3;
      else
        v12 = *(_QWORD *)(v4 + 208);
      v13 = 0;
      if (v10 >= 1 && a2 >= 1)
      {
        v15 = 0;
        do
        {
          if (v9 == v13 || *(__int16 *)(v11 + 2 * v13) != -1)
            ++v15;
          ++v13;
        }
        while (v13 < v10 && v15 < a2);
      }
      result = v22;
      v17 = 4;
      if (v13 < v10 && v12 >= 1)
      {
        v18 = 0;
        do
        {
          if (v9 == v13 || *(unsigned __int16 *)(v11 + 2 * v13) != 0xFFFF)
          {
            v20 = v18;
            v21 = v13;
            if (!v23)
              std::__throw_bad_function_call[abi:nn180100]();
            (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v23 + 48))(v23, &v21, &v20);
            ++v18;
          }
          ++v13;
        }
        while (v13 < v10 && v18 < v12);
        result = v23;
        if (v23 == v22)
        {
          v17 = 4;
          result = v22;
        }
        else
        {
          if (!v23)
            return result;
          v17 = 5;
        }
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
    }
    else if ((a2 & 0x8000000000000000) == 0)
    {
      v5 = *(_QWORD *)(v4 + 208);
      if (a2 + a3 <= v5)
      {
        v6 = v5 - a2;
        if (a3)
          v6 = a3;
        v7 = *(_QWORD *)(v4 + 312);
        if (!v7 || (v8 = *(_QWORD *)(v7 + 56), v8 == *(_QWORD *)(v7 + 64)))
        {
          if (v6 >= 1)
          {
            v19 = v6 + 1;
            do
            {
              *__dst++ = kUnitSize;
              --v19;
            }
            while (v19 > 1);
          }
        }
        else if (v6)
        {
          return memmove(__dst, (const void *)(v8 + 16 * a2), 16 * v6);
        }
      }
    }
  }
  return result;
}

uint64_t TDescriptor::GetSystemUIFontOptions(void)::$_0::__invoke()
{
  uint64_t result;

  _MergedGlobals_13 = 1024;
  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
    _MergedGlobals_13 |= 2u;
  return result;
}

void CTRunGetAdvances(CTRunRef run, CFRange range, CGSize *buffer)
{
  CGSize *v3;
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v23;
  uint64_t (**v25)();
  CFIndex v26;
  uint64_t v27;
  CGFloat *v28;
  uint64_t v29;
  CGFloat v30;
  CFIndex v31;
  uint64_t v32;

  if (run)
  {
    v3 = buffer;
    if (buffer)
    {
      length = range.length;
      location = range.location;
      v6 = *((_QWORD *)run + 5);
      if ((*(_BYTE *)(v6 + 225) & 0x18) != 0)
      {
        v7 = *(_QWORD **)(v6 + 216);
        v8 = v7[4];
        if (v8 || (v16 = v7[3]) == 0)
        {
          v9 = *(_QWORD *)(v6 + 200);
          v10 = (uint64_t (**)())(v8 + 16 * v9);
          v11 = 2;
        }
        else
        {
          v9 = *(_QWORD *)(v6 + 200);
          v10 = (uint64_t (**)())(v16 + 8 * v9);
          v11 = 1;
        }
        v17 = *(_QWORD *)(v6 + 264);
        v18 = (uint64_t (***)())operator new(0x28uLL);
        *v18 = &off_1E15DEFC0;
        v18[1] = (uint64_t (**)())v3;
        v18[2] = (uint64_t (**)())v11;
        v18[3] = v10;
        v18[4] = (uint64_t (**)())(v6 + 192);
        v19 = *(_QWORD *)(v6 + 208);
        v20 = v7[2] + 2 * v9;
        if (!length)
          length = v19;
        v21 = 0;
        if (v19 >= 1 && location >= 1)
        {
          v23 = 0;
          do
          {
            if (v17 == v21 || *(__int16 *)(v20 + 2 * v21) != -1)
              ++v23;
            ++v21;
          }
          while (v21 < v19 && v23 < location);
        }
        v25 = &off_1E15DEFC0;
        if (v21 < v19 && length >= 1)
        {
          v26 = 0;
          do
          {
            if (v17 == v21 || *(unsigned __int16 *)(v20 + 2 * v21) != 0xFFFF)
            {
              v31 = v26;
              v32 = v21;
              ((void (*)(uint64_t (***)(), uint64_t *, CFIndex *))(*v18)[6])(v18, &v32, &v31);
              ++v26;
            }
            ++v21;
          }
          while (v21 < v19 && v26 < length);
          v25 = *v18;
        }
        ((void (*)(uint64_t (***)()))v25[5])(v18);
      }
      else if ((range.location & 0x8000000000000000) == 0)
      {
        v12 = *(_QWORD *)(v6 + 208);
        if (range.location + range.length <= v12)
        {
          v13 = v12 - range.location;
          if (range.length)
            v13 = range.length;
          v14 = *(_QWORD *)(v6 + 216);
          v15 = *(_QWORD *)(v14 + 32);
          if (v15 || (v27 = *(_QWORD *)(v14 + 24)) == 0)
          {
            if (v13)
              memmove(buffer, (const void *)(v15 + 16 * *(_QWORD *)(v6 + 200) + 16 * range.location), 16 * v13);
          }
          else if (v13)
          {
            v28 = (CGFloat *)(v27 + 8 * *(_QWORD *)(v6 + 200) + 8 * range.location);
            v29 = 8 * v13;
            do
            {
              v30 = *v28++;
              v3->width = v30;
              v3->height = 0.0;
              ++v3;
              v29 -= 8;
            }
            while (v29);
          }
        }
      }
    }
  }
}

CFTypeID CTFontDescriptorGetTypeID(void)
{
  if (TCFBase<TDescriptor>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TDescriptor>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TDescriptor>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TDescriptor>::fTypeID;
}

uint64_t ScriptCodeForLongCharacter(unsigned int a1)
{
  uint64_t Script;
  uint64_t result;

  Script = uscript_getScript();
  result = 54;
  if ((int)Script > 21)
  {
    if ((Script - 102) < 2)
      return 0;
    if ((_DWORD)Script == 22)
      return result;
    return Script;
  }
  if (Script >= 2)
  {
    if ((_DWORD)Script == 20)
      return result;
    return Script;
  }
  if (a1 < 0x1D000)
    return 0;
  if (a1 < 0x1D100)
    return 201;
  if (a1 >= 0x1D200)
    return 0;
  return 202;
}

double CTRunGetInitialAdvance(uint64_t a1)
{
  uint64_t v1;
  double *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;

  if (!a1)
    return *MEMORY[0x1E0C9D820];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = (double *)MEMORY[0x1E0C9D820];
  if (*(_QWORD *)(v1 + 312))
    v2 = *(double **)(v1 + 312);
  v3 = *v2;
  if ((*(_BYTE *)(v1 + 225) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(v1 + 208);
    if (v4 >= 1)
    {
      v5 = 0;
      v6 = *(_QWORD **)(v1 + 216);
      v7 = *(_QWORD *)(v1 + 200);
      while (*(__int16 *)(v6[2] + 2 * v7 + 2 * v5) == -1 && v5 != *(_QWORD *)(v1 + 264))
      {
        if (v4 == ++v5)
          return v3;
      }
      objc_msgSend(v6, "originAtIndex:", v7 + v5);
      return v3 + v8;
    }
  }
  return v3;
}

__n128 TRun::GetPositions(__n128 *this, CGSize *a2)
{
  unint64_t *i;
  uint64_t v6;
  __n128 result;

  for (i = &this[17].n128_u64[1]; !atomic_load(i); i = &this[17].n128_u64[1])
  {
    v6 = this[17].n128_i64[0];
    if (!v6)
      break;
    TLine::CachePositions(v6);
  }
  if (a2)
  {
    result = this[18];
    *a2 = (CGSize)result;
  }
  return result;
}

void TAttributes::ApplyOverrides(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  void *ForegroundColor;
  void *v6;
  CFTypeID v7;
  CFTypeID TypeID;
  unint64_t *v9;
  void *v10;
  char v11;
  const __CFString *Value;
  const __CFString *v13;
  uint64_t v14;
  CFTypeID v15;
  SInt32 *v16;
  char v17;
  CFTypeID v18;
  SInt32 IntValue;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  CFTypeID v23;
  SInt32 *v24;
  char v25;
  CFTypeID v26;
  SInt32 v27;
  void *v28;
  const __CFString **v29;
  void *v30;
  CFTypeID v31;
  CFTypeID v32;
  unint64_t *v33;
  void *v34;
  char v35;
  const void *BackgroundColor;
  const void *v37;
  CFTypeID v38;
  CFTypeID v39;
  void *v40;
  unint64_t v41;
  const __CFAllocator *v42;
  const __CFDictionary *v43;
  unint64_t v44;
  void *v45;
  __CFDictionary *v46;
  char v47;
  const __CFAllocator *v48;
  const __CFDictionary *v49;
  unint64_t v50;
  void *v51;
  __CFDictionary *v52;
  const void *v53;
  const __CFString **v54;
  const void *v55;
  CFTypeID v56;
  CFTypeID v57;
  unint64_t v58;
  const __CFAllocator *v59;
  const __CFDictionary *v60;
  unint64_t v61;
  void *v62;
  __CFDictionary *v63;
  char v64;
  const __CFAllocator *v65;
  const __CFDictionary *v66;
  unint64_t v67;
  void *v68;
  __CFDictionary *v69;
  const void *StrokeColor;
  const __CFString **v71;
  const void *v72;
  CFTypeID v73;
  CFTypeID v74;
  void *v75;
  unint64_t v76;
  const __CFAllocator *v77;
  const __CFDictionary *v78;
  unint64_t v79;
  void *v80;
  __CFDictionary *v81;
  const __CFAllocator *v82;
  const __CFDictionary *v83;
  unint64_t v84;
  void *v85;
  __CFDictionary *v86;
  const void *UnderlineColor;
  const __CFString **v88;
  const void *v89;
  CFTypeID v90;
  CFTypeID v91;
  void *v92;
  unint64_t v93;
  const __CFAllocator *v94;
  const __CFDictionary *v95;
  unint64_t v96;
  void *v97;
  __CFDictionary *v98;
  const __CFAllocator *v99;
  const __CFDictionary *v100;
  unint64_t v101;
  void *v102;
  __CFDictionary *v103;
  const void *StrikethroughColor;
  const void *v105;
  CFTypeID v106;
  CFTypeID v107;
  void *v108;
  unint64_t v109;
  const __CFAllocator *v110;
  const __CFDictionary *v111;
  unint64_t v112;
  void *v113;
  __CFDictionary *v114;
  const __CFAllocator *v115;
  const __CFDictionary *v116;
  unint64_t v117;
  void *v118;
  __CFDictionary *v119;
  const void *v120;
  const void *v121;
  uint64_t v122;
  const __CFAllocator *v124;
  const __CFDictionary *v125;
  unint64_t v126;
  void *v127;
  __CFDictionary *v128;
  unint64_t v130;
  void *v131;
  void *key;
  id v133;
  id MutableCopy;

  ForegroundColor = (void *)TAttributes::GetForegroundColor(a2, a2, a3);
  if (ForegroundColor)
  {
    v6 = ForegroundColor;
    v7 = CFGetTypeID(ForegroundColor);
    TypeID = CFNullGetTypeID();
    v9 = (unint64_t *)((char *)this + 32);
    if (v7 == TypeID)
    {
      do
        v10 = (void *)__ldaxr(v9);
      while (__stlxr(0, v9));

      v11 = *((_BYTE *)this + 136) & 0xFD;
    }
    else
    {
      TCFRef<__CTFont const*>::Retain(v9, v6);
      v11 = *((_BYTE *)this + 136) | 2;
    }
    *((_BYTE *)this + 136) = v11;
  }
  Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("NSUnderline"));
  if (Value)
  {
    v13 = Value;
    v14 = TAttributes::EnsureRareData(this);
    v15 = CFGetTypeID(v13);
    v16 = (SInt32 *)(v14 + 56);
    if (v15 == CFNullGetTypeID())
    {
      *v16 = 0;
      v17 = *((_BYTE *)this + 137) & 0xFB;
LABEL_15:
      *((_BYTE *)this + 137) = v17;
      goto LABEL_16;
    }
    v18 = CFGetTypeID(v13);
    if (v18 == CFNumberGetTypeID() || v18 == CFBooleanGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v13, kCFNumberIntType, v16);
      LOBYTE(IntValue) = *(_BYTE *)v16;
LABEL_13:
      if (!(_BYTE)IntValue)
        goto LABEL_16;
      v17 = *((_BYTE *)this + 137) | 4;
      goto LABEL_15;
    }
    if (v18 == CFStringGetTypeID())
    {
      IntValue = CFStringGetIntValue(v13);
      *v16 = IntValue;
      goto LABEL_13;
    }
  }
LABEL_16:
  v20 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("NSStrikethrough"));
  if (!v20)
    goto LABEL_25;
  v21 = v20;
  v22 = TAttributes::EnsureRareData(this);
  v23 = CFGetTypeID(v21);
  v24 = (SInt32 *)(v22 + 60);
  if (v23 == CFNullGetTypeID())
  {
    *v24 = 0;
    v25 = *((_BYTE *)this + 137) & 0xEF;
LABEL_24:
    *((_BYTE *)this + 137) = v25;
    goto LABEL_25;
  }
  v26 = CFGetTypeID(v21);
  if (v26 == CFNumberGetTypeID() || v26 == CFBooleanGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)v21, kCFNumberIntType, v24);
    LOBYTE(v27) = *(_BYTE *)v24;
LABEL_22:
    if (!(_BYTE)v27)
      goto LABEL_25;
    v25 = *((_BYTE *)this + 137) | 0x10;
    goto LABEL_24;
  }
  if (v26 == CFStringGetTypeID())
  {
    v27 = CFStringGetIntValue(v21);
    *v24 = v27;
    goto LABEL_22;
  }
LABEL_25:
  v28 = (void *)CFDictionaryGetValue(a2, CFSTR("NSShadow"));
  if (v28)
  {
    v30 = v28;
    v31 = CFGetTypeID(v28);
    v32 = CFNullGetTypeID();
    v33 = (unint64_t *)((char *)this + 40);
    if (v31 == v32)
    {
      do
        v34 = (void *)__ldaxr(v33);
      while (__stlxr(0, v33));

      v35 = *((_BYTE *)this + 136) & 0xF7;
    }
    else
    {
      TCFRef<__CTFont const*>::Retain(v33, v30);
      v35 = *((_BYTE *)this + 136) | 8;
    }
    *((_BYTE *)this + 136) = v35;
  }
  key = (void *)0xAAAAAAAAAAAAAAAALL;
  v133 = 0;
  BackgroundColor = TAttributes::GetBackgroundColor(a2, (const __CFDictionary *)&key, v29);
  if (BackgroundColor)
  {
    v37 = BackgroundColor;
    v38 = CFGetTypeID(BackgroundColor);
    v39 = CFNullGetTypeID();
    v40 = key;
    v41 = atomic_load((unint64_t *)&v133);
    if (v38 == v39)
    {
      if (!v41)
      {
        v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v43 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v42, 0, v43);
        do
          v44 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v45 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v44, (unint64_t *)&v133));

      }
      v46 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionaryRemoveValue(v46, v40);
      v47 = *((_BYTE *)this + 137) & 0xFE;
    }
    else
    {
      if (!v41)
      {
        v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v49 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v48, 0, v49);
        do
          v50 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v51 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v50, (unint64_t *)&v133));

      }
      v52 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionarySetValue(v52, v40, v37);
      v47 = *((_BYTE *)this + 137) | 1;
    }
    *((_BYTE *)this + 137) = v47;
  }
  v53 = CFDictionaryGetValue(a2, CFSTR("NSStrokeWidth"));
  if (v53)
  {
    v55 = v53;
    v56 = CFGetTypeID(v53);
    v57 = CFNullGetTypeID();
    v58 = atomic_load((unint64_t *)&v133);
    if (v56 == v57)
    {
      if (!v58)
      {
        v59 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v60 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v59, 0, v60);
        do
          v61 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v62 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v61, (unint64_t *)&v133));

      }
      v63 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionaryRemoveValue(v63, CFSTR("NSStrokeWidth"));
      v64 = *((_BYTE *)this + 136) & 0xFB;
    }
    else
    {
      if (!v58)
      {
        v65 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v66 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v65, 0, v66);
        do
          v67 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v68 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v67, (unint64_t *)&v133));

      }
      v69 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionarySetValue(v69, CFSTR("NSStrokeWidth"), v55);
      v64 = *((_BYTE *)this + 136) | 4;
    }
    *((_BYTE *)this + 136) = v64;
  }
  StrokeColor = TAttributes::GetStrokeColor(a2, (const __CFDictionary *)&key, v54);
  if (StrokeColor)
  {
    v72 = StrokeColor;
    v73 = CFGetTypeID(StrokeColor);
    v74 = CFNullGetTypeID();
    v75 = key;
    v76 = atomic_load((unint64_t *)&v133);
    if (v73 == v74)
    {
      if (!v76)
      {
        v77 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v78 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v77, 0, v78);
        do
          v79 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v80 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v79, (unint64_t *)&v133));

      }
      v81 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionaryRemoveValue(v81, v75);
    }
    else
    {
      if (!v76)
      {
        v82 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v83 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v82, 0, v83);
        do
          v84 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v85 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v84, (unint64_t *)&v133));

      }
      v86 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionarySetValue(v86, v75, v72);
    }
  }
  UnderlineColor = TAttributes::GetUnderlineColor(a2, (const __CFDictionary *)&key, v71);
  if (UnderlineColor)
  {
    v89 = UnderlineColor;
    v90 = CFGetTypeID(UnderlineColor);
    v91 = CFNullGetTypeID();
    v92 = key;
    v93 = atomic_load((unint64_t *)&v133);
    if (v90 == v91)
    {
      if (!v93)
      {
        v94 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v95 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v94, 0, v95);
        do
          v96 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v97 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v96, (unint64_t *)&v133));

      }
      v98 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionaryRemoveValue(v98, v92);
    }
    else
    {
      if (!v93)
      {
        v99 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v100 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v99, 0, v100);
        do
          v101 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v102 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v101, (unint64_t *)&v133));

      }
      v103 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionarySetValue(v103, v92, v89);
    }
  }
  StrikethroughColor = TAttributes::GetStrikethroughColor(a2, (const __CFDictionary *)&key, v88);
  if (StrikethroughColor)
  {
    v105 = StrikethroughColor;
    v106 = CFGetTypeID(StrikethroughColor);
    v107 = CFNullGetTypeID();
    v108 = key;
    v109 = atomic_load((unint64_t *)&v133);
    if (v106 == v107)
    {
      if (!v109)
      {
        v110 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v111 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v110, 0, v111);
        do
          v112 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v113 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v112, (unint64_t *)&v133));

      }
      v114 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionaryRemoveValue(v114, v108);
    }
    else
    {
      if (!v109)
      {
        v115 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v116 = (const __CFDictionary *)atomic_load((unint64_t *)this);
        MutableCopy = CFDictionaryCreateMutableCopy(v115, 0, v116);
        do
          v117 = __ldaxr((unint64_t *)&MutableCopy);
        while (__stlxr(0, (unint64_t *)&MutableCopy));
        do
          v118 = (void *)__ldaxr((unint64_t *)&v133);
        while (__stlxr(v117, (unint64_t *)&v133));

      }
      v119 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
      CFDictionarySetValue(v119, v108, v105);
    }
  }
  v120 = CFDictionaryGetValue(a2, CFSTR("NSTextEffectsContext"));
  if (v120)
  {
    v121 = v120;
    v122 = TAttributes::EnsureRareData(this);
    if (!atomic_load((unint64_t *)&v133))
    {
      v124 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v125 = (const __CFDictionary *)atomic_load((unint64_t *)this);
      MutableCopy = CFDictionaryCreateMutableCopy(v124, 0, v125);
      do
        v126 = __ldaxr((unint64_t *)&MutableCopy);
      while (__stlxr(0, (unint64_t *)&MutableCopy));
      do
        v127 = (void *)__ldaxr((unint64_t *)&v133);
      while (__stlxr(v126, (unint64_t *)&v133));

    }
    v128 = (__CFDictionary *)atomic_load((unint64_t *)&v133);
    CFDictionarySetValue(v128, CFSTR("NSTextEffectsContext"), v121);
    *(_QWORD *)(v122 + 32) = v121;
  }
  if (atomic_load((unint64_t *)&v133))
  {
    do
      v130 = __ldaxr((unint64_t *)&v133);
    while (__stlxr(0, (unint64_t *)&v133));
    do
      v131 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr(v130, (unint64_t *)this));

  }
}

const void *TAttributes::GetStrikethroughColor(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  const __CFString *v5;
  const void *result;

  v5 = CFSTR("CTStrikethroughColor");
  result = CFDictionaryGetValue(this, CFSTR("CTStrikethroughColor"));
  if (a2 && result
    || !result
    && (v5 = CFSTR("NSStrikethroughColor"), result = CFDictionaryGetValue(this, CFSTR("NSStrikethroughColor")), a2)
    && result)
  {
    *(_QWORD *)a2 = v5;
  }
  return result;
}

const void *TAttributes::GetUnderlineColor(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  const __CFString *v5;
  const void *result;

  v5 = CFSTR("CTUnderlineColor");
  result = CFDictionaryGetValue(this, CFSTR("CTUnderlineColor"));
  if (a2 && result
    || !result
    && (v5 = CFSTR("NSUnderlineColor"), result = CFDictionaryGetValue(this, CFSTR("NSUnderlineColor")), a2)
    && result)
  {
    *(_QWORD *)a2 = v5;
  }
  return result;
}

const void *TAttributes::GetStrokeColor(TAttributes *this, const __CFDictionary *a2, const __CFString **a3)
{
  const __CFString *v5;
  const void *result;

  v5 = CFSTR("CTStrokeColor");
  result = CFDictionaryGetValue(this, CFSTR("CTStrokeColor"));
  if (a2 && result
    || !result
    && (v5 = CFSTR("NSStrokeColor"), result = CFDictionaryGetValue(this, CFSTR("NSStrokeColor")), a2)
    && result)
  {
    *(_QWORD *)a2 = v5;
  }
  return result;
}

void TRun::DrawGlyphsAtPositionsInternal(TRun *this, CGContextRef c, CFRange a3, const CGPoint *a4, int a5, const TAttributes *a6, char a7)
{
  CFIndex length;
  CFIndex location;
  TRun *v11;
  const TAttributes *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  double *v25;
  double *v26;
  CGFloat *v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  __int128 v35;
  CTFontRef v36;
  CGFloat v37;
  CGFloat v38;
  __int128 v39;
  uint64_t v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  const CGPoint *v45;
  float64x2_t *v46;
  double x;
  double y;
  const CGPoint *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  const __CTFont *font;
  CGAffineTransform v56;
  CGAffineTransform v57;
  CGAffineTransform v58;
  CGAffineTransform matrix;
  CGAffineTransform v60;
  CGAffineTransform v61;
  CGAffineTransform t2;
  _BYTE t1[56];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE *v92;
  uint64_t v93;

  length = a3.length;
  location = a3.location;
  v11 = this;
  v93 = *MEMORY[0x1E0C80C00];
  if (a6)
    v12 = a6;
  else
    v12 = (TRun *)((char *)this + 40);
  if (a5)
    TRun::DrawBackground(this, c, a3, v12, 1);
  v13 = *(_QWORD *)(*((_QWORD *)v11 + 27) + 16);
  v14 = *((_QWORD *)v11 + 25);
  v15 = atomic_load((unint64_t *)v11 + 7);
  font = (const __CTFont *)v15;
  if (!v15)
    return;
  v16 = TAttributes::SetContextAttributes(v12, c, a7);
  v17 = v16;
  v18 = *((_QWORD *)v12 + 15);
  if (v18)
    v54 = *(_QWORD *)(v18 + 32);
  else
    v54 = 0;
  v53 = v13 + 2 * v14;
  v19 = *((_QWORD *)v11 + 39);
  if (!v19 || *(_QWORD *)(v19 + 56) == *(_QWORD *)(v19 + 64))
  {
    CTFontDrawGlyphsAtPositionsInternal((uint64_t)font, (const CGGlyph *)(v53 + 2 * location), &a4[location], length, c, (uint64_t)v11, v54);
    if (!v17)
      return;
    goto LABEL_40;
  }
  v50 = v16;
  *(_QWORD *)&v20 = -1;
  *((_QWORD *)&v20 + 1) = -1;
  *(_OWORD *)&v61.c = v20;
  *(_OWORD *)&v61.tx = v20;
  *(_OWORD *)&v61.a = v20;
  CGContextGetTextMatrix(&v61, c);
  *(_QWORD *)&v21 = -1;
  *((_QWORD *)&v21 + 1) = -1;
  *(_OWORD *)&v60.c = v21;
  *(_OWORD *)&v60.tx = v21;
  *(_OWORD *)&v60.a = v21;
  v22 = (_OWORD *)((char *)v11 + 96);
  if (!*((_BYTE *)v11 + 144))
    v22 = (_OWORD *)MEMORY[0x1E0C9BAA8];
  v23 = v22[1];
  *(_OWORD *)&t2.a = *v22;
  *(_OWORD *)&t2.c = v23;
  *(_OWORD *)&t2.tx = v22[2];
  *(CGAffineTransform *)t1 = v61;
  CGAffineTransformConcat(&v60, (CGAffineTransform *)t1, &t2);
  if (length)
  {
    v24 = 0;
    v25 = (double *)(*(_QWORD *)(*((_QWORD *)v11 + 39) + 56) + 16 * location);
    v26 = &v25[2 * length];
    v51 = (uint64_t)v11;
    do
    {
      v27 = v25;
      v28 = *v25;
      v29 = v25[1];
      v30 = v25 + 2;
      while (v30 != v26)
      {
        v31 = *v30;
        v32 = v30[1];
        v30 += 2;
        if (v31 != v28 || v32 != v29)
        {
          v25 = v30 - 2;
          goto LABEL_24;
        }
      }
      v25 = v26;
LABEL_24:
      location += v24;
      v24 = ((char *)v25 - (char *)v27) >> 4;
      if (v28 == 1.0 && v29 == 1.0)
      {
        CTFontDrawGlyphsAtPositionsInternal((uint64_t)font, (const CGGlyph *)(v53 + 2 * location), &a4[location], ((char *)v25 - (char *)v27) >> 4, c, (uint64_t)v11, v54);
      }
      else
      {
        *(_QWORD *)&v35 = -1;
        *((_QWORD *)&v35 + 1) = -1;
        *(_OWORD *)&matrix.c = v35;
        *(_OWORD *)&matrix.tx = v35;
        *(_OWORD *)&matrix.a = v35;
        CGAffineTransformMakeScale(&matrix, *v27, v27[1]);
        v36 = CTFontCreateCopyWithAttributes(font, 0.0, &matrix, 0);
        v37 = *v27;
        v38 = v27[1];
        *(CGAffineTransform *)t1 = v60;
        CGAffineTransformScale(&t2, (CGAffineTransform *)t1, v37, v38);
        *(_OWORD *)&v58.a = *(_OWORD *)&t2.a;
        *(_OWORD *)&v58.c = *(_OWORD *)&t2.c;
        *(_OWORD *)&v58.tx = *(_OWORD *)&v61.tx;
        CGContextSetTextMatrix(c, &v58);
        *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v90 = v39;
        v91 = v39;
        v88 = v39;
        v89 = v39;
        v86 = v39;
        v87 = v39;
        v84 = v39;
        v85 = v39;
        v82 = v39;
        v83 = v39;
        v80 = v39;
        v81 = v39;
        v78 = v39;
        v79 = v39;
        v76 = v39;
        v77 = v39;
        v74 = v39;
        v75 = v39;
        v72 = v39;
        v73 = v39;
        v70 = v39;
        v71 = v39;
        v68 = v39;
        v69 = v39;
        v66 = v39;
        v67 = v39;
        v64 = v39;
        v65 = v39;
        *(_OWORD *)&t1[24] = v39;
        *(_OWORD *)&t1[40] = v39;
        memset(t1, 0, 24);
        v92 = &t1[24];
        if (v25 == v27)
        {
          v41 = 0;
        }
        else
        {
          std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)t1, ((char *)v25 - (char *)v27) >> 4);
          v40 = *(_QWORD *)&t1[8];
          bzero(*(void **)&t1[8], ((char *)v25 - (char *)v27) & 0xFFFFFFFFFFFFFFF0);
          *(_QWORD *)&t1[8] = v40 + 16 * v24;
          v41 = *(float64x2_t **)t1;
        }
        t2 = matrix;
        CGAffineTransformInvert(&v57, &t2);
        if (v25 != v27)
        {
          v42 = *(float64x2_t *)&v57.a;
          v43 = *(float64x2_t *)&v57.c;
          v44 = *(float64x2_t *)&v57.tx;
          v45 = &a4[location];
          v46 = v41;
          do
          {
            x = v45->x;
            y = v45->y;
            ++v45;
            *v46++ = vaddq_f64(v44, vmlaq_n_f64(vmulq_n_f64(v43, y), v42, x));
          }
          while (v45 != &a4[v24 + location]);
        }
        v49 = (const CGPoint *)v41;
        v11 = (TRun *)v51;
        CTFontDrawGlyphsAtPositionsInternal((uint64_t)v36, (const CGGlyph *)(v53 + 2 * location), v49, ((char *)v25 - (char *)v27) >> 4, c, v51, v54);
        v56 = v61;
        CGContextSetTextMatrix(c, &v56);
        *(_QWORD *)&t2.a = t1;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&t2);

      }
    }
    while (v25 != v26);
  }
  if (v50)
LABEL_40:
    CGContextRestoreGState(c);
}

void TRun::DrawGlyphsAtPositions(TRun *a1, CGContext *a2, CFRange a3, const CGPoint *a4, const TAttributes **a5)
{
  TRun::DrawGlyphsAtPositionsInternal(a1, a2, a3, a4, *(unsigned __int8 *)a5, a5[1], *((_BYTE *)a5 + 16));
}

void TAttributes::TAttributes(TAttributes *this, const TAttributes *a2, const __CFDictionary *a3)
{
  const __CFString **v5;

  *(_WORD *)((char *)this + 49) = 0;
  *((_BYTE *)this + 51) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  TAttributes::operator=((uint64_t)this, (uint64_t)a2);
  if (a3)
    TAttributes::ApplyOverrides(this, a3, v5);
}

__n128 CTFontDrawGlyphsAtPositionsInternal(uint64_t a1, const CGGlyph *a2, const CGPoint *a3, uint64_t a4, CGContext *a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[6];
  __int128 v11;
  uint64_t v12;

  if (a1 && a2 && a3 && a4)
  {
    if (a5)
    {
      v11 = xmmword_184930060;
      v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v10[0] = *MEMORY[0x1E0C9BAA8];
      v10[1] = v8;
      v10[2] = v7;
      v10[3] = v10[0];
      v10[4] = v8;
      v10[5] = v7;
      *(_QWORD *)&v11 = a6;
      BYTE8(v11) = 0;
      HIDWORD(v11) = 13;
      v12 = a7;
      DrawGlyphsAtPositions(*(TBaseFont ***)(a1 + 40), a2, a3, a4, a5, (uint64_t)v10);
    }
  }
  return result;
}

unint64_t *TRun::CopyPositions(unint64_t *this, CFRange a2, CGPoint *__dst)
{
  CFIndex length;
  CFIndex location;
  unint64_t v6;
  unint64_t *v7;

  length = a2.length;
  location = a2.location;
  v6 = atomic_load(this + 35);
  if (v6)
  {
LABEL_5:
    if (length)
      return (unint64_t *)memmove(__dst, (const void *)(v6 + 16 * location), 16 * length);
  }
  else
  {
    v7 = this;
    while (1)
    {
      this = (unint64_t *)v7[34];
      if (!this)
        break;
      this = (unint64_t *)TLine::CachePositions((uint64_t)this);
      v6 = atomic_load(v7 + 35);
      if (v6)
        goto LABEL_5;
    }
  }
  return this;
}

uint64_t TLine::CachePositions(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  if (!*(_BYTE *)(this + 156))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 16);
    v3 = *(_QWORD *)(this + 24) - v2;
    if (v3 >= 1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
      v10 = 0;
      v11 = 0.0;
      TLine::GetLeftHangersGlyphCountAndWidth((TLine *)this, 0);
      if (v5 != 0.0)
        v11 = 0.0 - v5;
      this = (*(uint64_t (**)(uint64_t, double *, uint64_t *))(*(_QWORD *)v4 + 112))(v4, &v11, &v10);
      if ((unint64_t)v3 >= 9)
      {
        v6 = v3 >> 3;
        if (v3 >> 3 <= 2)
          v6 = 2;
        v7 = 8 * v6;
        v8 = 8;
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + v8) + 40);
          this = (*(uint64_t (**)(uint64_t, double *, uint64_t *))(*(_QWORD *)v9 + 112))(v9, &v11, &v10);
          v8 += 8;
        }
        while (v7 != v8);
      }
    }
    *(_BYTE *)(v1 + 156) = 1;
  }
  return this;
}

void TRun::CacheGlyphPositions(TRun *this, double *a2, double *a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v7;
  double v8;
  double *v9;
  float64x2_t *v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double v27;
  double v28;
  double v29;
  CGFloat v30;
  __int128 v31;
  uint64_t v32;
  double *v33;
  CGFloat *p_b;
  uint64_t v35;
  double v36;
  double v37;
  CGFloat v38;
  uint64_t v39;
  double *v40;
  CGFloat *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  BOOL v48;
  unint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  double *v62;
  double v63;
  double *v64;
  double *v65;
  uint64_t v66;
  __int128 v67;
  TFont *v68;
  uint64_t v69;
  double *v70;
  CGAffineTransform v71;
  CGAffineTransform v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 26);
  if ((unint64_t)v3 >> 60)
    return;
  v4 = a3;
  v5 = a2;
  v7 = *a2;
  v8 = *a3;
  v9 = (double *)malloc_type_realloc(0, 16 * v3, 0xFE0C88B4uLL);
  if (!v9)
    return;
  v10 = (float64x2_t *)v9;
  *((double *)this + 36) = v7;
  *((double *)this + 37) = v8;
  v11 = (double *)*((_QWORD *)this + 39);
  if (!v11)
    v11 = (double *)MEMORY[0x1E0C9D820];
  v12 = *v11;
  v13 = v8 + v11[1];
  v14 = *((_QWORD *)this + 20);
  if (v14)
    v15 = *(double *)(v14 + 48);
  else
    v15 = 0.0;
  v16 = v7 + v12;
  v17 = v13 + v15;
  if (*((_BYTE *)this + 90) || *((_BYTE *)this + 144))
  {
    v65 = v4;
    v18 = (_QWORD *)*((_QWORD *)this + 27);
    v19 = *((_QWORD *)this + 25);
    v20 = v18[4];
    if (v20 || (v23 = v18[3]) == 0)
    {
      v21 = 0;
      v22 = v20 + 16 * v19;
    }
    else
    {
      v22 = v23 + 8 * v19;
      v21 = 1;
    }
    v64 = v5;
    v24 = v18[2];
    v25 = atomic_load((unint64_t *)this + 7);
    v68 = *(TFont **)(v25 + 40);
    v26 = (char *)this + 96;
    if (!*((_BYTE *)this + 144))
      v26 = (char *)MEMORY[0x1E0C9BAA8];
    v27 = *(double *)v26;
    v28 = *((double *)v26 + 1);
    v29 = *((double *)v26 + 2);
    v30 = *((double *)v26 + 5);
    *(_QWORD *)&v31 = -1;
    *((_QWORD *)&v31 + 1) = -1;
    *(_OWORD *)&v71.c = v31;
    *(_OWORD *)&v71.tx = v31;
    *(_OWORD *)&v71.a = v31;
    v72.a = v27;
    v72.b = v28;
    v72.c = v29;
    v67 = *(_OWORD *)(v26 + 24);
    *(_OWORD *)&v72.d = v67;
    v72.ty = v30;
    CGAffineTransformInvert(&v71, &v72);
    v71.ty = -v71.ty;
    if (v3)
    {
      v32 = 0;
      v33 = (double *)MEMORY[0x1E0C9D538];
      v66 = v24 + 2 * v19;
      do
      {
        v69 = v3;
        if ((unint64_t)v3 >= 0x40)
          v3 = 64;
        bzero(&v72, 0x400uLL);
        if ((*(_BYTE *)v68 & 1) != 0)
        {
          TFont::GetUnscaledVerticalTranslationsForGlyphs(v68, (const unsigned __int16 *)(v66 + 2 * v32), (CGSize *)&v72, v3);
          p_b = &v72.b;
          v35 = v3;
          do
          {
            v36 = *(p_b - 1);
            v37 = v29 * *p_b + v27 * v36;
            v38 = *(double *)&v67 * *p_b + v28 * v36;
            *(p_b - 1) = v37;
            *p_b = v38;
            p_b += 2;
            --v35;
          }
          while (v35);
        }
        v39 = v3 + v32;
        v40 = (double *)(v22 + 16 * v32);
        v41 = &v72.b;
        do
        {
          v42 = *(v41 - 1);
          v43 = *v41;
          if ((*((_BYTE *)this + 225) & 0x10) != 0)
          {
            objc_msgSend(*((id *)this + 27), "originAtIndex:", v32 + *((_QWORD *)this + 25));
          }
          else
          {
            v44 = *v33;
            v45 = v33[1];
          }
          v10[v32] = vaddq_f64(*(float64x2_t *)&v71.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v71.c, v17 + v43 + v45), *(float64x2_t *)&v71.a, v16 + v42 + v44));
          if (v21)
          {
            v46 = (double *)(v22 + 8 * v32);
            v47 = 0.0;
          }
          else
          {
            v47 = v40[1];
            v46 = v40;
          }
          v16 = v16 + *v46;
          v17 = v17 + v47;
          ++v32;
          v41 += 2;
          v40 += 2;
        }
        while (v32 < v39);
        v48 = __OFSUB__(v69, v3);
        v3 = v69 - v3;
      }
      while (!((v3 < 0) ^ v48 | (v3 == 0)));
    }
    v5 = v64;
    v4 = v65;
  }
  else
  {
    v51 = *((_QWORD *)this + 27);
    v52 = *(_QWORD *)(v51 + 32);
    if (v52 || (v54 = *(_QWORD *)(v51 + 24)) == 0)
    {
      v53 = 0;
      v70 = (double *)(v52 + 16 * *((_QWORD *)this + 25));
      if (!v3)
        goto LABEL_34;
    }
    else
    {
      v70 = (double *)(v54 + 8 * *((_QWORD *)this + 25));
      v53 = 1;
      if (!v3)
        goto LABEL_34;
    }
    v55 = v3;
    v56 = 0;
    v57 = v9 + 1;
    v58 = (double *)MEMORY[0x1E0C9D538];
    v59 = v70;
    do
    {
      if ((*((_BYTE *)this + 225) & 0x10) != 0)
      {
        objc_msgSend(*((id *)this + 27), "originAtIndex:", v56 + *((_QWORD *)this + 25));
      }
      else
      {
        v60 = *v58;
        v61 = v58[1];
      }
      *(v57 - 1) = v16 + v60;
      *v57 = v17 + v61;
      if (v53)
      {
        v62 = &v70[v56];
        v63 = 0.0;
      }
      else
      {
        v63 = v59[1];
        v62 = v59;
      }
      v16 = v16 + *v62;
      v17 = v17 + v63;
      ++v56;
      v59 += 2;
      v57 += 2;
    }
    while (v55 != v56);
  }
LABEL_34:
  v49 = (unint64_t *)((char *)this + 280);
  while (!__ldaxr(v49))
  {
    if (!__stlxr((unint64_t)v10, v49))
      goto LABEL_39;
  }
  __clrex();
  free(v10);
LABEL_39:
  *v5 = v16;
  *v4 = v17 - v15;
}

void CreateStringByDeletingLongCharactersPassingTest(__CFString *a1@<X0>, uint64_t a2@<X1>, __CFString **a3@<X8>)
{
  uint64_t Length;
  __int128 v6;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  CFIndex v9;
  const __CFAllocator *v10;
  CFIndex v11;
  UniChar *v12;
  CFIndex v13;
  UniChar v14;
  int v15;
  CFIndex v16;
  CFIndex v17;
  uint64_t v18;
  CFMutableStringRef MutableCopy;
  void *v21;
  __CFString *v22;
  const __CFString *v23;
  const UniChar *v24;
  const char *v25;
  int64_t v26;
  CFIndex v27;
  UniChar *v28;
  int64_t v29;
  UniChar v30;
  CFIndex v31;
  CFIndex v32;
  BOOL v33;
  int v34;
  CFIndex v35;
  CFIndex v36;
  __CFString *v38;
  _BOOL8 v39;
  CGPoint *v40;
  UniChar buffer[8];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  CFStringRef theString;
  UniChar *v51;
  const char *v52;
  uint64_t v53;
  CFIndex v54;
  CFIndex v55;
  CFIndex v56;
  id v57;
  int v58;
  _QWORD v59[3];
  CFRange v60;
  CFRange v61;
  CFRange v62;
  CFRange v63;

  if (!a1)
  {
    *a3 = 0;
    return;
  }
  Length = CFStringGetLength(a1);
  v57 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = v6;
  v49 = v6;
  v46 = v6;
  v47 = v6;
  v44 = v6;
  v45 = v6;
  *(_OWORD *)buffer = v6;
  v43 = v6;
  theString = a1;
  v53 = 0;
  v54 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  v51 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v55 = 0;
  v56 = 0;
  v52 = CStringPtr;
  if (Length >= 1)
  {
    v9 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      if (v9 < 0 || (v11 = v54, v54 <= v9))
      {
        v15 = 0;
LABEL_12:
        v16 = 1;
        v17 = v9;
        goto LABEL_13;
      }
      v12 = v51;
      if (v51)
      {
        v13 = v53 + v9;
      }
      else
      {
        if (v52)
        {
          v14 = v52[v53 + v9];
          goto LABEL_26;
        }
        if (v56 <= v9 || (v31 = v55, v55 > v9))
        {
          v32 = v9 - 4;
          if ((unint64_t)v9 < 4)
            v32 = 0;
          if (v32 + 64 < v54)
            v11 = v32 + 64;
          v55 = v32;
          v56 = v11;
          v61.location = v53 + v32;
          v61.length = v11 - v32;
          CFStringGetCharacters(theString, v61, buffer);
          v31 = v55;
        }
        v13 = v9 - v31;
        v12 = buffer;
      }
      v14 = v12[v13];
LABEL_26:
      v15 = v14;
      if (v14 >> 10 != 54)
        goto LABEL_12;
      v26 = v9 + 1;
      if (v9 + 1 >= Length)
        goto LABEL_12;
      v27 = v54;
      if (v54 <= v26)
        goto LABEL_12;
      v28 = v51;
      if (v51)
      {
        v29 = v53 + v26;
      }
      else
      {
        if (v52)
        {
          v30 = v52[v53 + v26];
          goto LABEL_42;
        }
        if (v56 <= v26 || (v35 = v55, v55 > v26))
        {
          v36 = v9 - 3;
          if ((unint64_t)v26 < 4)
            v36 = 0;
          if (v36 + 64 < v54)
            v27 = v36 + 64;
          v55 = v36;
          v56 = v27;
          v62.location = v53 + v36;
          v62.length = v27 - v36;
          CFStringGetCharacters(theString, v62, buffer);
          v35 = v55;
        }
        v29 = v26 - v35;
        v28 = buffer;
      }
      v30 = v28[v29];
LABEL_42:
      v33 = v30 >> 10 == 55;
      v34 = (v15 << 10) + v30 - 56613888;
      if (v33)
        v16 = 2;
      else
        v16 = 1;
      if (v33)
        v15 = v34;
      if (v33)
        v17 = v9 + 1;
      else
        v17 = v9;
LABEL_13:
      v18 = *(_QWORD *)(a2 + 24);
      v59[0] = v9;
      v59[1] = v16;
      v58 = v15;
      if (!v18)
      {
        v39 = std::__throw_bad_function_call[abi:nn180100]();
        CTFrameGetLineOrigins((CTFrameRef)v39, v63, v40);
        return;
      }
      if ((*(unsigned int (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v18 + 48))(v18, v59, &v58))
      {
        if (!atomic_load((unint64_t *)&v57))
        {
          MutableCopy = CFStringCreateMutableCopy(v10, Length, a1);
          do
            v21 = (void *)__ldaxr((unint64_t *)&v57);
          while (__stlxr((unint64_t)MutableCopy, (unint64_t *)&v57));

        }
        v22 = (__CFString *)atomic_load((unint64_t *)&v57);
        v60.location = v9;
        v60.length = v16;
        CFStringDelete(v22, v60);
        Length -= v16;
        v23 = (const __CFString *)atomic_load((unint64_t *)&v57);
        theString = v23;
        v53 = 0;
        v54 = Length;
        v24 = CFStringGetCharactersPtr(v23);
        v25 = 0;
        v51 = (UniChar *)v24;
        if (!v24)
          v25 = CFStringGetCStringPtr(v23, 0x600u);
        v52 = v25;
        v17 -= v16;
        v55 = 0;
        v56 = 0;
      }
      v9 = v17 + 1;
    }
    while (v17 + 1 < Length);
  }
  if (atomic_load((unint64_t *)&v57))
  {
    do
      v38 = (__CFString *)__ldaxr((unint64_t *)&v57);
    while (__stlxr(0, (unint64_t *)&v57));
  }
  else
  {
    v38 = a1;
  }
  *a3 = v38;

}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;

  if (frame)
  {
    length = range.length;
    location = range.location;
    v6 = *((_QWORD *)frame + 5);
    v7 = (const __CFArray *)atomic_load((unint64_t *)(v6 + 104));
    Count = CFArrayGetCount(v7);
    if (location + length <= Count)
    {
      v9 = Count - location;
      if (length)
        v9 = length;
      if (v9)
        memmove(origins, (const void *)(*(_QWORD *)(v6 + 112) + 16 * location), 16 * v9);
    }
  }
}

uint64_t ___Z26GetDefaultWritingDirectionv_block_invoke()
{
  Class v0;
  uint64_t result;

  v0 = NSClassFromString(CFSTR("NSParagraphStyle"));
  if (v0)
    result = (uint64_t)-[objc_class defaultWritingDirectionForLanguage:](v0, sel_defaultWritingDirectionForLanguage_, 0);
  else
    result = 255;
  _MergedGlobals_10 = result;
  return result;
}

Class _CTFontDescriptorEnableBridging()
{
  Class result;

  result = objc_lookUpClass("UICTFontDescriptor");
  if (result)
    return (Class)_CFRuntimeBridgeClasses();
  return result;
}

Class _CTFontEnableBridging()
{
  Class result;

  result = objc_lookUpClass("UICTFont");
  if (result)
    return (Class)_CFRuntimeBridgeClasses();
  return result;
}

double CTFontDescriptorGetWeight(uint64_t a1)
{
  double v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t TraitsValues;

  v1 = 0.0;
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if ((*(_DWORD *)(v2 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(a1 + 40), 0, 0.0);
    v3 = (unint64_t *)atomic_load((unint64_t *)(v2 + 32));
    if (v3)
    {
      TraitsValues = atomic_load(v3 + 30);
      if (TraitsValues)
        return *(double *)(TraitsValues + 8);
      TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v3);
      if (TraitsValues)
        return *(double *)(TraitsValues + 8);
    }
  }
  return v1;
}

void TAATMorphTableMorx::TAATMorphTableMorx(TAATMorphTableMorx *this, TRunGlue *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;

  TAATMorphTable::TAATMorphTable(this, a2, 1634561906);
  *(_QWORD *)v3 = off_1E15DDB28;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v4 + 616);
  v6 = *(_BYTE *)(v3 + 24);
  v7 = *(_BYTE *)(v3 + 25);
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)(v3 + 120) = v5;
  *(_BYTE *)(v3 + 128) = v7;
  *(_QWORD *)(v3 + 64) = off_1E15DDAE8;
  *(_QWORD *)(v3 + 160) = TAATLookupTable::BadTable;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_WORD *)(v3 + 208) = -1;
  *(_BYTE *)(v3 + 216) = v6;
  *(_QWORD *)(v3 + 136) = &off_1E15DDED0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 664) = v3 + 280;
  v8 = *(_QWORD *)(v3 + 40);
  if (v8)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = v8 + 8;
    if (v8 + 8 > v9)
    {
      v12 = TFont::DebugDescription(*(TFont **)(v4 + 616));
      CFLog();

      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 616) + 400);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 488))(v11, 1836020344);
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    else
    {
      *((_QWORD *)this + 9) = v8;
      *((_QWORD *)this + 10) = v9;
      *((_QWORD *)this + 11) = v10;
      *((_QWORD *)this + 12) = v10;
    }
  }
}

void TAATMorphTable::TAATMorphTable(TAATMorphTable *this, TRunGlue *a2, uint64_t a3)
{
  const __CFData *CommonTable;
  const UInt8 *BytePtr;
  const UInt8 *v6;
  CFIndex Length;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  TRunGlue *v14;
  uint64_t v15;
  unint64_t v16;
  TFont *v17;
  unint64_t v18;
  uint64_t v19;
  __CFString *v20;
  __CFString *v21;
  char cStr[4];
  char v23;
  CFRange v24;

  *(_QWORD *)this = off_1E15DD348;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 634);
  *((_BYTE *)this + 25) = 0;
  *((_DWORD *)this + 7) = a3;
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)a2 + 77) + 400), a3, (unsigned int *)this + 7);
  *((_QWORD *)this + 4) = CommonTable;
  if (CommonTable)
  {
    BytePtr = CFDataGetBytePtr(CommonTable);
    *((_QWORD *)this + 5) = BytePtr;
    *((_BYTE *)this + 56) = 1;
    if (BytePtr)
    {
      v6 = BytePtr;
      Length = CFDataGetLength(*((CFDataRef *)this + 4));
      *((_QWORD *)this + 6) = &v6[Length];
      if (*((_QWORD *)this + 5) + 4 > (unint64_t)&v6[Length])
      {
        *(_DWORD *)cStr = bswap32(*((_DWORD *)this + 7));
        v23 = 0;
        v20 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
        v21 = TFont::DebugDescription(*(TFont **)(*((_QWORD *)this + 1) + 616));
        CFLog();

        v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 616) + 400);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 488))(v19, *((unsigned int *)this + 7));
        *((_QWORD *)this + 4) = 0;
        *((_QWORD *)this + 5) = 0;

      }
      else
      {
        v8 = *((_QWORD *)this + 1);
        v9 = *(_QWORD *)(v8 + 16);
        if (v9 < 1)
        {
          *((_BYTE *)this + 25) = *(_BYTE *)(v8 + 593);
        }
        else
        {
          v10 = *(_QWORD *)(v8 + 8);
          v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 8 * v10) + 48);
          *((_BYTE *)this + 25) = *(_BYTE *)(v11 + 260) & 1;
          if (v9 != 1)
          {
            v12 = v9 + v10;
            v13 = 1;
            while (1)
            {
              v14 = (TRunGlue *)*((_QWORD *)this + 1);
              v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 8 * v10 + 8 * v13) + 48);
              if (*(unsigned __int8 *)(v11 + 224) != *(unsigned __int8 *)(v15 + 224))
                break;
              v16 = atomic_load((unint64_t *)(v11 + 56));
              v17 = *(TFont **)(v16 + 40);
              v18 = atomic_load((unint64_t *)(v15 + 56));
              if (!TFont::Compare(v17, *(const TFont **)(v18 + 40), 1))
              {
                v14 = (TRunGlue *)*((_QWORD *)this + 1);
                break;
              }
              *((_BYTE *)this + 25) |= *(_BYTE *)(v15 + 260) & 1;
              *((_BYTE *)this + 56) = 0;
              ++v13;
              if (v10 + v13 >= v12)
                return;
            }
            v24.location = v10;
            v24.length = v13;
            TRunGlue::SetRunRange(v14, v24);
          }
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
    *((_BYTE *)this + 56) = 1;
  }
}

uint64_t TypesetterSuggestClusterBreak(const __CTTypesetter *a1, CFIndex a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = *((_QWORD *)a1 + 5);
  v10 = 0;
  v5 = TTypesetter::SuggestClusterBreak(v4, a2, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v7 = 5;
LABEL_6:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  const __CFAttributedString *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v7;
  id v8;
  id v9;

  v1 = attrString;
  if (attrString)
  {
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    v2 = (_QWORD *)TCFBase<TFramesetter>::Allocate();
    if (v2)
    {
      v3 = v2;
      v2[2] = 0;
      v2[3] = 0;
      v2[6] = &off_1E15DE400;
      v2[4] = 0;
      v2[5] = v2 + 6;
      TTypesetterAttrString::TTypesetterAttrString((TTypesetterAttrString *)(v2 + 7), v1, 0, 0);
      v3[41] = 0;
      v9 = v3;
      do
        v4 = (void *)__ldaxr((unint64_t *)&v9);
      while (__stlxr(0, (unint64_t *)&v9));
      v7 = v4;

    }
    else
    {
      v7 = 0;
    }
    do
      v5 = (void *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));
    v8 = v5;

    do
      v1 = (const __CFAttributedString *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));

  }
  return v1;
}

uint64_t TCFBase<TFramesetter>::Allocate()
{
  if (_MergedGlobals_8 != -1)
    dispatch_once_f(&_MergedGlobals_8, 0, (dispatch_function_t)TCFBase<TFramesetter>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

Class TCFBase<TFont>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  TCFBase<TFont>::CreateTypeID();
  return _CTFontEnableBridging();
}

uint64_t TCFBase<TFont>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TFont>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE7378 = "CTFont";
    qword_1ECDE7380 = 0;
    unk_1ECDE7388 = 0;
    qword_1ECDE7390 = (uint64_t)TCFBase<TFont>::ClassDestruct;
    unk_1ECDE7398 = TCFBase<TFont>::ClassEqual;
    qword_1ECDE73A0 = (uint64_t)TCFBase<TFont>::ClassHash;
    unk_1ECDE73A8 = 0;
    qword_1ECDE73B0 = (uint64_t)TCFBase<TFont>::ClassDebug;
    unk_1ECDE73B8 = 0;
    qword_1ECDE73C0 = 0;
    unk_1ECDE73C8 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TFont>::fTypeID = result;
  return result;
}

Class TCFBase<TDescriptor>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  TCFBase<TDescriptor>::CreateTypeID();
  return _CTFontDescriptorEnableBridging();
}

uint64_t TCFBase<TDescriptor>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TDescriptor>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE72F8 = "CTFontDescriptor";
    qword_1ECDE7300 = 0;
    unk_1ECDE7308 = 0;
    qword_1ECDE7310 = (uint64_t)TCFBase<TDescriptor>::ClassDestruct;
    unk_1ECDE7318 = TCFBase<TDescriptor>::ClassEqual;
    qword_1ECDE7320 = (uint64_t)TCFBase<TDescriptor>::ClassHash;
    unk_1ECDE7328 = 0;
    qword_1ECDE7330 = (uint64_t)TCFBase<TDescriptor>::ClassDebug;
    unk_1ECDE7338 = 0;
    qword_1ECDE7340 = 0;
    unk_1ECDE7348 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TDescriptor>::fTypeID = result;
  return result;
}

CFTypeID CTFontGetTypeID(void)
{
  if (TCFBase<TFont>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TFont>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFont>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TFont>::fTypeID;
}

double TLine::GetHangingWidth(TLine *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
  v3 = v2;
  TLine::GetRightHangersGlyphCountAndWidth(this, 0);
  v5 = v4;
  if ((*((_WORD *)this + 76) & 8) != 0)
    TLine::GetLeftWhitespaceGlyphCountAndWidth(this);
  else
    TLine::GetRightWhitespaceGlyphCountAndWidth(this);
  return v3 + v5 - v6;
}

double TLine::GetVisibleGlyphRangeAndWidth@<D0>(TLine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t LeftWhitespaceGlyphCountAndWidth;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if ((*((_WORD *)this + 76) & 8) != 0)
  {
    LeftWhitespaceGlyphCountAndWidth = TLine::GetLeftWhitespaceGlyphCountAndWidth(this);
    v6 = LeftWhitespaceGlyphCountAndWidth;
  }
  else
  {
    LeftWhitespaceGlyphCountAndWidth = TLine::GetRightWhitespaceGlyphCountAndWidth(this);
    v6 = 0;
  }
  v7 = *((_QWORD *)this + 18) - LeftWhitespaceGlyphCountAndWidth;
  result = *((double *)this + 13) - v5;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t TLine::GetRightWhitespaceGlyphCountAndWidth(TLine *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  TRun *v7;
  uint64_t RightWhitespaceGlyphCountAndWidth;
  double v9;

  v1 = 0;
  v2 = *((_QWORD *)this + 2);
  v3 = (*((_QWORD *)this + 3) - v2) >> 3;
  v4 = v2 - 8;
  v5 = 0.0;
  do
  {
    v6 = v3 - 1;
    if (v3 < 1)
      break;
    v7 = *(TRun **)(*(_QWORD *)(v4 + 8 * v3) + 40);
    RightWhitespaceGlyphCountAndWidth = TRun::GetRightWhitespaceGlyphCountAndWidth(v7);
    v1 += RightWhitespaceGlyphCountAndWidth;
    v5 = v5 + v9;
    v3 = v6;
  }
  while (RightWhitespaceGlyphCountAndWidth >= *((_QWORD *)v7 + 26));
  return v1;
}

void TBaseFont::CreateFallbacks(TBaseFont *a1@<X0>, int a2@<W1>, char a3@<W2>, const __CFCharacterSet **a4@<X3>, const __CFArray *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v12;
  const __CFString *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  const __CFString *CSSFamily;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;

  *a6 = 0;
  if ((a3 & 1) != 0)
  {
    if (a2)
    {
      v12 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)a1 + 560))(a1);
      if (v12)
      {
        v13 = (const __CFString *)v12;
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v23);
        TDescriptorSource::CreatePresetFallbacks(v13, a4, a5, a3, &v24);
        do
          v14 = __ldaxr((unint64_t *)&v24);
        while (__stlxr(0, (unint64_t *)&v24));
        do
          v15 = (void *)__ldaxr(a6);
        while (__stlxr(v14, a6));

      }
    }
    v16 = (void *)atomic_load(a6);
    v17 = v16;
    if (v17)
    {
      v18 = v17;
      Count = CFArrayGetCount(v17);

      if (Count)
        return;
    }
    else
    {

    }
    CSSFamily = TBaseFont::GetCSSFamily(a1, a2);
    TBaseFont::CreateSystemDefaultFallbacks((uint64_t)a1, CSSFamily, (const __CFString *)a5, a2, (const __CFArray **)&v24);
    do
      v21 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));
    do
      v22 = (void *)__ldaxr(a6);
    while (__stlxr(v21, a6));

  }
}

unint64_t TBaseFont::GetPresetFallbacksKey(TBaseFont *this)
{
  return atomic_load((unint64_t *)this + 12);
}

void TDescriptorSource::ProcessFallbackList(const __CFArray *a1, TDescriptorSource *a2, int a3, const __CFArray *a4)
{
  const __CFArray *v7;
  CFIndex v8;
  __CFString *ValueAtIndex;
  CFTypeID v10;
  const __CFString *v11;
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex i;
  const void *v16;
  void *Value;
  CFIndex v18;
  CFIndex v19;
  CFIndex j;
  const void *v21;
  const __CFArray *v22;
  CFIndex v23;
  const __CFArray *v24;
  const __CFArray *v25;
  const void *v26;
  const __CFArray *v27;
  __CFArray *v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex k;
  void *v33;
  const __CFArray *v34;
  CFIndex Count;
  id v36;

  v7 = a1;
  Count = CFArrayGetCount(a1);
  if (Count)
  {
    v8 = 0;
    v34 = v7;
    do
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v7, v8);
      v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != CFStringGetTypeID())
      {
        if (v10 == CFDictionaryGetTypeID())
        {
          if (a4)
          {
            v13 = CFArrayGetCount(a4);
            if (v13)
            {
              v14 = v13;
              for (i = 0; i != v14; ++i)
              {
                v16 = CFArrayGetValueAtIndex(a4, i);
                if (ValueAtIndex)
                {
                  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v16);
                  if (Value)
                    TDescriptorSource::ProcessFallbackComponent(a2, Value, 0, a3);
                }
              }
            }
          }
        }
        else if (v10 == CFArrayGetTypeID())
        {
          v36 = (id)0xAAAAAAAAAAAAAAAALL;
          TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v36, (CFArrayRef)ValueAtIndex);
          if (a4)
          {
            v18 = CFArrayGetCount(a4);
            if (v18)
            {
              v19 = v18;
              for (j = 0; j != v19; ++j)
              {
                v21 = CFArrayGetValueAtIndex(a4, j);
                v22 = (const __CFArray *)atomic_load((unint64_t *)&v36);
                if (CFArrayGetCount(v22) >= 1)
                {
                  v23 = 0;
                  while (1)
                  {
                    v24 = (const __CFArray *)atomic_load((unint64_t *)&v36);
                    v25 = (const __CFArray *)CFArrayGetValueAtIndex(v24, v23);
                    v26 = CFArrayGetValueAtIndex(v25, 0);
                    if (v26 == v21 || v21 && v26 && CFEqual(v26, v21))
                      break;
                    ++v23;
                    v27 = (const __CFArray *)atomic_load((unint64_t *)&v36);
                    if (v23 >= CFArrayGetCount(v27))
                      goto LABEL_38;
                  }
                  TDescriptorSource::ProcessFallbackComponent(a2, v25, 1, a3);
                  v28 = (__CFArray *)atomic_load((unint64_t *)&v36);
                  CFArrayRemoveValueAtIndex(v28, v23);
                }
LABEL_38:
                ;
              }
            }
          }
          v29 = (const __CFArray *)atomic_load((unint64_t *)&v36);
          if (v29)
          {
            v30 = CFArrayGetCount(v29);
            if (v30)
            {
              v31 = v30;
              for (k = 0; k != v31; ++k)
              {
                v33 = (void *)CFArrayGetValueAtIndex(v29, k);
                TDescriptorSource::ProcessFallbackComponent(a2, v33, 1, a3);
              }
            }
          }

          v7 = v34;
        }
        goto LABEL_23;
      }
      if (a3 == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0)
        {
          v11 = _CTGetEmojiFontName(1);
          if (v11 == ValueAtIndex)
            goto LABEL_10;
          v12 = 1024;
          if (!ValueAtIndex || !v11)
            goto LABEL_22;
          if (CFEqual(ValueAtIndex, v11))
LABEL_10:
            ValueAtIndex = (__CFString *)_CTGetEmojiFontName(0);
        }
        v12 = 1024;
      }
      else
      {
        v12 = 65537;
      }
LABEL_22:
      TDescriptorSource::AppendFontDescriptorFromName(a2, (TCFMutableArray *)ValueAtIndex, (const __CFString *)v12);
LABEL_23:
      ++v8;
    }
    while (v8 != Count);
  }
}

void TDescriptorSource::CreatePresetFallbacks(const __CFString *a1@<X1>, const __CFCharacterSet **a2@<X2>, const __CFArray *a3@<X3>, char a4@<W4>, id *a5@<X8>)
{
  uint64_t CTPresetFallbacksDictionary;
  const __CFDictionary *v12;
  void *OrderedLanguages;
  const __CFArray *Value;
  const __CFArray *v15;
  CFTypeID v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex i;
  __CFString *ValueAtIndex;
  CFTypeID v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex j;
  const void *v25;
  TCFMutableArray *v26;
  const __CFString *v27;
  uint64_t v28;
  unint64_t v29;
  id Mutable;

  CTPresetFallbacksDictionary = GetCTPresetFallbacksDictionary();
  if (!CTPresetFallbacksDictionary)
    goto LABEL_38;
  v12 = (const __CFDictionary *)CTPresetFallbacksDictionary;
  OrderedLanguages = (void *)CreateOrderedLanguages(a3);
  if (!OrderedLanguages)
  {
LABEL_37:

LABEL_38:
    *a5 = 0;
    return;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(v12, a1);
  if (Value && (v15 = Value, v16 = CFGetTypeID(Value), v16 == CFArrayGetTypeID()))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    Count = CFArrayGetCount(v15);
    if (Count)
    {
      v18 = Count;
      for (i = 0; i != v18; ++i)
      {
        ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v15, i);
        v21 = CFGetTypeID(ValueAtIndex);
        if (v21 == CFDictionaryGetTypeID())
        {
          v22 = CFArrayGetCount((CFArrayRef)OrderedLanguages);
          if (v22)
          {
            v23 = v22;
            for (j = 0; j != v23; ++j)
            {
              v25 = CFArrayGetValueAtIndex((CFArrayRef)OrderedLanguages, j);
              if (ValueAtIndex)
              {
                v26 = (TCFMutableArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v25);
                if (v26)
                  TDescriptorSource::AppendFontDescriptorFromName((TDescriptorSource *)&Mutable, v26, (const __CFString *)0x400);
              }
            }
          }
        }
        else
        {
          if ((dyld_program_sdk_at_least() & 1) == 0)
          {
            v27 = _CTGetEmojiFontName(1);
            if (v27 == ValueAtIndex || ValueAtIndex && v27 && CFEqual(ValueAtIndex, v27))
              ValueAtIndex = (__CFString *)_CTGetEmojiFontName(0);
          }
          if ((a4 & 4) != 0
            && (ValueAtIndex == CFSTR(".AppleThaiFont")
             || ValueAtIndex && CFStringHasPrefix(ValueAtIndex, CFSTR(".AppleThaiFont"))))
          {
            v28 = objc_msgSend(&unk_1E16054A0, "objectForKeyedSubscript:", ValueAtIndex);
            if (v28)
              ValueAtIndex = (__CFString *)v28;
          }
          TDescriptorSource::AppendFontDescriptorFromName((TDescriptorSource *)&Mutable, (TCFMutableArray *)ValueAtIndex, (const __CFString *)0x400);
        }
      }
    }
    do
      v29 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));

  }
  else
  {
    v29 = 0;
  }
  *a5 = (id)v29;
  if (!atomic_load((unint64_t *)a5))
  {

    goto LABEL_37;
  }
  if (a2)
    *a2 = TDescriptorSource::CopyPredefinedCharacterSet((TDescriptorSource *)CFSTR("CTFontDefaultFallbacksComboCharacterSet"), 0);

}

void TDescriptorSource::AppendFontDescriptorFromName(TDescriptorSource *this, TCFMutableArray *a2, const __CFString *a3)
{
  int v3;
  CFDictionaryRef v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  id v13;
  __CFArray *v14;
  id v15;
  void *keys;

  v3 = (int)a3;
  v15 = a2;
  keys = CFSTR("NSFontNameAttribute");
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = TCFBase<TDescriptor>::Allocate();
  if (v6)
  {
    v7 = (void *)v6;
    *(_DWORD *)(v6 + 64) = v3 & 0x7FFFFFFF;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = TDescriptor::Hash;
    *(_QWORD *)(v6 + 48) = &off_1E15DCAF0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    v8 = v6 + 64;
    *(_QWORD *)(v6 + 56) = 0;
    v9 = (unint64_t *)(v6 + 56);
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if ((v3 & 0x40000000) != 0)
    {
      do
        v10 = __ldxr((unsigned int *)v8);
      while (__stxr(v10 | 0x80000000, (unsigned int *)v8));
    }
    TCFRef<__CTFont const*>::Retain(v9, v5);
    keys = v7;
    do
      v11 = (void *)__ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));

  if (v12)
  {
    v13 = v12;
    v14 = (__CFArray *)atomic_load((unint64_t *)this);
    CFArrayAppendValue(v14, v13);

  }
}

uint64_t ___ZL28GetCTCharacterSetsDictionaryb_block_invoke()
{
  uint64_t result;

  result = CTFontGetPlistFromGSFontCache(CFSTR("CTCharacterSets.plist"), 0);
  qword_1ECDE77A0 = result;
  return result;
}

uint64_t ___ZL23DetermineTypeStylesSpecv_block_invoke()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)CTFontGetPlistFromGSFontCache(CFSTR("CoreTextConfig.plist"), 0), "objectForKey:", CFSTR("AppleSwitch")), "BOOLValue");
  if ((_DWORD)result)
  {
    kFont2X = &kFont2XCompact;
    _MergedGlobals_88[0] = 1;
    _MergedGlobals_2 = &kTypeHierarchySpecWatch;
    qword_1ECDE6F68 = (uint64_t)kFontSoftCompact;
    off_1ECDE6F70[0] = &kFontJapaneseWatch;
    qword_1ECDE6F78 = (uint64_t)&kFontKoreanWatch;
    off_1ECDE6F80[0] = kFontCompactRounded;
    qword_1ECDE6F88 = (uint64_t)kFallbacksCompact;
    gDisableLooseFontNameMatchingOverride = 1;
  }
  return result;
}

uint64_t ___ZL23GetCTFontInfoDictionaryv_block_invoke()
{
  uint64_t result;

  result = CTFontGetPlistFromGSFontCache(CFSTR("CTFontInfo.plist"), 0);
  qword_1ECDE7DD0 = result;
  return result;
}

uint64_t CTFontGetPlistFromGSFontCache(const __CFString *a1, char a2)
{
  if ((a2 & 1) != 0)
    return GSFontCacheGetData();
  if (qword_1ECDE7D98 != -1)
    dispatch_once(&qword_1ECDE7D98, &__block_literal_global_6);
  if (_MergedGlobals_31)
    return GSFontCacheGetData();
  else
    return 0;
}

CFCharacterSetRef TDescriptorSource::CopyPredefinedCharacterSet(TDescriptorSource *this, const __CFString *a2)
{
  const __CFData *PlistFromGSFontCache;

  if ((_DWORD)a2)
  {
    PlistFromGSFontCache = (const __CFData *)CTFontGetPlistFromGSFontCache(CFSTR("CTCharacterSets.plist"), 1);
    if (!PlistFromGSFontCache)
      return CreateCharacterSetWithCompressedBitmapRepresentation(PlistFromGSFontCache);
    goto LABEL_7;
  }
  if (qword_1ECDE77A8 != -1)
    dispatch_once(&qword_1ECDE77A8, &__block_literal_global_494);
  PlistFromGSFontCache = (const __CFData *)qword_1ECDE77A0;
  if (qword_1ECDE77A0)
LABEL_7:
    PlistFromGSFontCache = (const __CFData *)CFDictionaryGetValue(PlistFromGSFontCache, this);
  return CreateCharacterSetWithCompressedBitmapRepresentation(PlistFromGSFontCache);
}

uint64_t GetCTPresetFallbacksDictionary(void)
{
  if (getenv("CT_PRESET_FALLBACKS_AND_COMBO_CHARSETS_GENERATION"))
    return 0;
  else
    return CTFontGetPlistFromGSFontCache(CFSTR("CTPresetFallbacks.plist"), 0);
}

unint64_t CreateOrderedLanguages(const __CFArray *a1)
{
  CFArrayRef v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex FirstIndexOfValue;
  __CFArray *v13;
  __CFArray *v14;
  const __CFArray *v15;
  __CFArray *v16;
  CFRange v17;
  unint64_t v18;
  id v20;
  id Mutable;
  id v22;
  CFRange v23;
  CFRange v24;

  if (qword_1ECDE7798 != -1)
    dispatch_once_f(&qword_1ECDE7798, 0, (dispatch_function_t)GetOrderedLanguages(void)::$_0::__invoke);
  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v22, (CFArrayRef)qword_1ECDE7790);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v2 = CFLocaleCopyPreferredLanguages();
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateArrayOfNormalizedLanguagesWithOrder(v2, a1, 0, (unint64_t *)&v20);
  v3 = (const __CFArray *)atomic_load((unint64_t *)&v20);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
        v8 = (const __CFArray *)atomic_load((unint64_t *)&v22);
        v9 = (const __CFArray *)atomic_load((unint64_t *)&v22);
        v23.length = CFArrayGetCount(v9);
        v23.location = 0;
        if (CFArrayContainsValue(v8, v23, ValueAtIndex))
        {
          v10 = (const __CFArray *)atomic_load((unint64_t *)&v22);
          v11 = (const __CFArray *)atomic_load((unint64_t *)&v22);
          v24.length = CFArrayGetCount(v11);
          v24.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v10, v24, ValueAtIndex);
          v13 = (__CFArray *)atomic_load((unint64_t *)&v22);
          CFArrayRemoveValueAtIndex(v13, FirstIndexOfValue);
          v14 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v14, ValueAtIndex);
        }
      }
    }
  }
  v15 = (const __CFArray *)atomic_load((unint64_t *)&v22);
  v16 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
  if (v15)
    v17.length = CFArrayGetCount(v15);
  else
    v17.length = 0;
  v17.location = 0;
  CFArrayAppendArray(v16, v15, v17);
  do
    v18 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));

  return v18;
}

void CreateOrderedArray(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[24];
  _BYTE *v23;
  _OWORD v24[2];
  _OWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25 = (_OWORD *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v7;
  v24[1] = v7;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v22, a3);
  TCFUniqueRemappingArray::TCFUniqueRemappingArray((TCFUniqueRemappingArray *)v24, a1, (uint64_t)v22);
  v8 = v23;
  if (v23 == v22)
  {
    v9 = 4;
    v8 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(a2);
        TCFUniqueRemappingArray::AppendUnique((TCFUniqueRemappingArray *)v24, *(objc_object **)(*((_QWORD *)&v17 + 1) + 8 * i));
      }
      v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v11);
  }
  do
    v14 = __ldaxr((unint64_t *)v24);
  while (__stlxr(0, (unint64_t *)v24));
  *a4 = v14;
  v15 = v25;
  if (v25 == (_OWORD *)((char *)v24 + 8))
  {
    v16 = 4;
    v15 = (_QWORD *)v24 + 1;
    goto LABEL_18;
  }
  if (v25)
  {
    v16 = 5;
LABEL_18:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

}

TCFUniqueRemappingArray *TCFUniqueRemappingArray::TCFUniqueRemappingArray(TCFUniqueRemappingArray *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)a1 + 8, a3);
  if (a2)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v12;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(a2);
          TCFUniqueRemappingArray::AppendUnique(a1, *(objc_object **)(*((_QWORD *)&v11 + 1) + 8 * v9++));
        }
        while (v7 != v9);
        v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v7);
    }
  }
  return a1;
}

uint64_t TCFUniqueRemappingArray::AppendUnique(TCFUniqueRemappingArray *this, objc_object *a2)
{
  uint64_t v3;
  const void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  int v7;
  __CFArray *v8;
  _BOOL8 v10;
  objc_object *v11;
  CFRange v12;

  v11 = a2;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (const void *)(*(uint64_t (**)(uint64_t, objc_object **))(*(_QWORD *)v3 + 48))(v3, &v11);
    v5 = (const __CFArray *)atomic_load((unint64_t *)this);
    v6 = (const __CFArray *)atomic_load((unint64_t *)this);
    v12.length = CFArrayGetCount(v6);
    v12.location = 0;
    v7 = CFArrayContainsValue(v5, v12, v4);
    if (!v7)
    {
      v8 = (__CFArray *)atomic_load((unint64_t *)this);
      CFArrayAppendValue(v8, v4);
    }
    return v7 == 0;
  }
  else
  {
    v10 = std::__throw_bad_function_call[abi:nn180100]();
    return NormalizeLanguage(v10);
  }
}

id NormalizeLanguage(__CFString *a1, unsigned int a2)
{
  void *v2;
  id v3;
  id v5;

  v5 = (id)0xAAAAAAAAAAAAAAAALL;
  LanguageIdentifierByNormalizing(a1, a2, (unint64_t *)&v5);
  do
    v2 = (void *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  v3 = v2;

  return v3;
}

void TDescriptorSource::ProcessFallbackComponent(TDescriptorSource *a1, void *cf, CFIndex a3, int a4)
{
  CFTypeID v8;
  uint64_t v9;
  CFIndex Count;
  CFIndex v11;
  TCFMutableArray *ValueAtIndex;

  v8 = CFGetTypeID(cf);
  if (a4 == 1)
    v9 = 1024;
  else
    v9 = 65537;
  if (v8 == CFStringGetTypeID())
  {
    TDescriptorSource::AppendFontDescriptorFromName(a1, (TCFMutableArray *)cf, (const __CFString *)v9);
  }
  else if (v8 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count > a3)
    {
      v11 = Count;
      do
      {
        ValueAtIndex = (TCFMutableArray *)CFArrayGetValueAtIndex((CFArrayRef)cf, a3);
        if (ValueAtIndex)
          TDescriptorSource::AppendFontDescriptorFromName(a1, ValueAtIndex, (const __CFString *)v9);
        ++a3;
      }
      while (v11 != a3);
    }
  }
}

_QWORD *std::vector<CGSize>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<CGSize>::__vallocate[abi:nn180100](a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t TCFBase<TNativeParagraphStyle>::ClassDestruct(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(void (**)(uint64_t))(a1 + 16);
  if (v2)
    v2(a1);
  v3 = *(uint64_t **)(a1 + 40);

  v4 = v3[1];
  v3[1] = 0;
  if (v4)
    MEMORY[0x186DC03AC](v4, 0x1000C40FA0F61DDLL);
  result = *v3;
  *v3 = 0;
  if (result)
    JUMPOUT(0x186DC03ACLL);
  return result;
}

unint64_t CTLineCreateJustifiedLineWithOptions(uint64_t a1, const TLine *a2, double a3, double a4)
{
  unint64_t v4;
  double v5;
  BOOL v6;
  double v7;
  id v9;

  v4 = 0;
  if (a1 && a4 >= 0.0)
  {
    v5 = 1.0;
    if (a3 <= 1.0)
      v5 = a3;
    v6 = a3 < 0.0;
    v7 = 0.0;
    if (!v6)
      v7 = v5;
    TJustEngine::CreateJustifiedLine(*(const TCharStream ***)(a1 + 40), a2, v7, a4, (unint64_t *)&v9);
    v4 = ExternalizeLine((unint64_t *)&v9);

  }
  return v4;
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  CFIndex length;
  CFIndex location;
  double v10;
  double width;
  double height;
  uint64_t v13;
  uint64_t v14;
  CGPathRef v15;
  TFramesetter *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  TCharStream **v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex v27;
  int v28;
  double v29;
  double v30;
  _QWORD *LineAtIndex;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 IsParagraphSeparator;
  TParagraphStyle **v37;
  TParagraphStyle ***v38;
  TParagraphStyle **v39;
  TParagraphStyle **v40;
  const void *v41;
  double FirstLineHeadIndent;
  double v43;
  const void *v44;
  double TailIndent;
  TParagraphStyle **v46;
  double v47;
  unsigned int LineBreakMode;
  double v49;
  double v50;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56[3];
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  CGSize result;

  if (!framesetter)
  {
    v50 = *MEMORY[0x1E0C9D820];
    v29 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    goto LABEL_66;
  }
  length = stringRange.length;
  location = stringRange.location;
  v10 = 10000000.0;
  if (constraints.width <= 10000000.0)
    width = constraints.width;
  else
    width = 10000000.0;
  if (constraints.width <= 0.0)
    width = 10000000.0;
  if (constraints.height <= 10000000.0)
    height = constraints.height;
  else
    height = 10000000.0;
  if (constraints.height > 0.0)
    v10 = height;
  v13 = 0;
  v14 = 0;
  v15 = CGPathCreateWithRect(*(CGRect *)(&v10 - 3), 0);
  v16 = (TFramesetter *)*((_QWORD *)framesetter + 5);
  v17 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(TFramesetter *))(*(_QWORD *)v16 + 16))(v16) + 216) + 16);
  if (location + length > v17)
  {
    v50 = *MEMORY[0x1E0C9D820];
    v29 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    goto LABEL_65;
  }
  v18 = v17 - location;
  if (length)
    v19 = length;
  else
    v19 = v18;
  v61 = NAN;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v57 = (id)0xAAAAAAAAAAAAAAAALL;
  TFramesetter::CreateFrame(v16, location, v19, v15, frameAttributes, &v61, (uint64_t)&v58, (unint64_t *)&v57);
  if (!atomic_load((unint64_t *)&v57))
    goto LABEL_55;
  v21 = atomic_load((unint64_t *)&v57);
  v22 = *(_QWORD *)(v21 + 40);
  if (fitRange)
    *fitRange = *(CFRange *)(v22 + 16);
  v23 = (TCharStream **)(*(uint64_t (**)(TFramesetter *))(*(_QWORD *)v16 + 16))(v16);
  v24 = (const __CFArray *)atomic_load((unint64_t *)(v22 + 104));
  Count = CFArrayGetCount(v24);
  if (Count <= 0)
  {
LABEL_55:
    v50 = *MEMORY[0x1E0C9D820];
    v29 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    goto LABEL_64;
  }
  v26 = Count;
  v27 = 0;
  v28 = *(_DWORD *)(v22 + 144);
  v30 = *MEMORY[0x1E0C9D820];
  v29 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  do
  {
    LineAtIndex = TFrame::GetLineAtIndex((TFrame *)v22, v27);
    v33 = LineAtIndex[5];
    v34 = *(_QWORD *)(v33 + 72);
    if (*(_QWORD *)(v33 + 24) == *(_QWORD *)(v33 + 16))
    {
      v35 = 0;
      if (!v34)
      {
LABEL_27:
        v40 = *(TParagraphStyle ***)(v35 + 128);
        v38 = (TParagraphStyle ***)(v35 + 128);
        v37 = v40;
        if (!v40)
          goto LABEL_38;
        goto LABEL_28;
      }
    }
    else
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 16)
                                  + 8 * TLine::FindRunWithCharIndex((TLine *)LineAtIndex[5], *(_QWORD *)(v33 + 72), 1))
                      + 40)
          + 40;
      if (!v34)
        goto LABEL_27;
    }
    IsParagraphSeparator = TCharStream::IsParagraphSeparator(*v23, v34 - 1);
    v39 = *(TParagraphStyle ***)(v35 + 128);
    v38 = (TParagraphStyle ***)(v35 + 128);
    v37 = v39;
    if (IsParagraphSeparator)
    {
      if (!v37)
        goto LABEL_38;
LABEL_28:
      FirstLineHeadIndent = TParagraphStyle::GetFirstLineHeadIndent(v37, v32);
      goto LABEL_31;
    }
    if (!v37)
    {
LABEL_38:
      v43 = 0.0;
LABEL_39:
      v47 = 0.0;
LABEL_40:
      v49 = v43 + *(double *)(v33 + 104) - v47;
LABEL_41:
      TLine::GetTrailingWhitespace(v33, v56);
      v49 = v49 - v56[2];
      goto LABEL_42;
    }
    FirstLineHeadIndent = TParagraphStyle::GetHeadIndent(v37, v32);
LABEL_31:
    v43 = FirstLineHeadIndent;
    if (!*v38)
      goto LABEL_39;
    TailIndent = TParagraphStyle::GetTailIndent(*v38, v41);
    v46 = *v38;
    if (TailIndent <= 0.0)
      v47 = TailIndent;
    else
      v47 = 0.0;
    if (!v46)
      goto LABEL_40;
    LineBreakMode = TParagraphStyle::GetLineBreakMode(v46, v44);
    v49 = v43 + *(double *)(v33 + 104) - v47;
    if (LineBreakMode != 1)
      goto LABEL_41;
LABEL_42:
    if (v49 >= v30)
      v50 = v49;
    else
      v50 = v30;
    if (!v28)
      v30 = v50;
    if (v49 >= v29 && v28 != 0)
      v29 = v49;
    ++v27;
  }
  while (v26 != v27);
  if (v28)
  {
    v50 = v61 + *(double *)(v33 + 112);
  }
  else if (*(_BYTE *)(v22 + 160))
  {
    v29 = v61;
  }
  else
  {
    v29 = v61 + *((double *)&v60 + 1);
    if (!*(_BYTE *)(v22 + 161))
      v29 = v29 + *(double *)&v59;
  }
  if (*(_BYTE *)(v22 + 162))
  {
    v52 = ceil(v50);
    v53 = ceil(v29);
    if (*(_DWORD *)(v22 + 144))
      v50 = v52;
    else
      v29 = v53;
  }
LABEL_64:

LABEL_65:
LABEL_66:
  v54 = v50;
  v55 = v29;
  result.height = v55;
  result.width = v54;
  return result;
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  const __CTFrame *v4;
  CFIndex length;
  CFIndex location;
  TFramesetter *v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  _OWORD v15[3];
  uint64_t v16;

  v4 = 0;
  if (framesetter && path)
  {
    length = stringRange.length;
    location = stringRange.location;
    v9 = (TFramesetter *)*((_QWORD *)framesetter + 5);
    v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(TFramesetter *))(*(_QWORD *)v9 + 16))(v9) + 216) + 16);
    if (location + length > v10)
    {
      return 0;
    }
    else
    {
      v11 = v10 - location;
      v16 = -1;
      memset(&v15[1], 0, 32);
      if (length)
        v12 = length;
      else
        v12 = v11;
      v15[0] = 0uLL;
      TFramesetter::CreateFrame(v9, location, v12, path, frameAttributes, (double *)&v16, (uint64_t)v15, (unint64_t *)&v14);
      do
        v4 = (const __CTFrame *)__ldaxr((unint64_t *)&v14);
      while (__stlxr(0, (unint64_t *)&v14));

    }
  }
  return v4;
}

void TFramesetter::CreateFrame(TFramesetter *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, const __CFDictionary *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  unint64_t v14;
  unint64_t v15;
  TFrame *v16;
  id v17;
  const __CFDictionary *v18;
  void *v19;
  CFRange v20;

  v18 = a5;
  v19 = a4;
  *a6 = 0.0;
  v17 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTFrame,CGPath const*&,__CFDictionary const*&>(&v19, &v18, (unint64_t *)&v17);
  v14 = atomic_load((unint64_t *)&v17);
  if (v14)
  {
    v15 = atomic_load((unint64_t *)&v17);
    v16 = *(TFrame **)(v15 + 40);
    if (*((_BYTE *)v16 + 32))
    {
      TFramesetter::FrameInRect((uint64_t)a1, (uint64_t)v16, a2, a3, a6, a7);
    }
    else
    {
      v20.location = a2;
      v20.length = a3;
      TFramesetter::FrameInPath(a1, v16, v20);
    }
    do
      v14 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
  }
  *a8 = v14;

}

void TCFBase_NEW<CTFrame,CGPath const*&,__CFDictionary const*&>(void **a1@<X0>, const __CFDictionary **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  const __CFDictionary *v9;
  TFrame *v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TFrame>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = *a1;
    v9 = *a2;
    v10 = (TFrame *)(v6 + 48);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = v10;
    TFrame::TFrame(v10, v8, v9);
    v12 = v7;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TCFBase<TFrame>::Allocate()
{
  if (TCFBase<TFrame>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TFrame>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFrame>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return _CFRuntimeCreateInstance();
}

void TFrame::TFrame(TFrame *this, id a2, const __CFDictionary *a3)
{
  double *v5;
  const __CFDictionary *v6;
  unint64_t *v7;
  unsigned __int8 v8;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFDictionary *v12;
  const __CFNumber *v13;
  const __CFDictionary *v14;
  const __CFNumber *v15;
  const __CFDictionary *v16;
  void *v17;
  void *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex Count;
  const __CFDictionary *v23;
  const void *v24;
  const void *v25;
  CFTypeID v26;
  const __CFAllocator *v27;
  CFDictionaryRef v28;
  CFArrayRef v29;
  const __CFDictionary *v30;
  const __CFNumber *v31;
  const __CFDictionary *v32;
  const __CFBoolean *v33;
  const __CFDictionary *v34;
  const __CFBoolean *v35;
  const __CFDictionary *v36;
  const __CFBoolean *v37;
  const __CFDictionary *v38;
  const __CFBoolean *v39;
  void *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  BOOL IsRect;
  const CGPath *v44;
  const CGPath *v45;
  const void *v46;
  const __CFString *valuePtr;

  *((_DWORD *)this + 9) = 0;
  *((_QWORD *)this + 5) = 0;
  v5 = (double *)((char *)this + 40);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 10) = a2;
  v6 = a3;
  *((_QWORD *)this + 19) = -1;
  *((_QWORD *)this + 11) = v6;
  *((_OWORD *)this + 6) = 0u;
  v7 = (unint64_t *)((char *)this + 96);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((_WORD *)this + 80) = 256;
  v8 = atomic_load((unsigned __int8 *)&qword_1ECDE74A0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE74A0))
  {
    _MergedGlobals_7 = 1;
    __cxa_guard_release(&qword_1ECDE74A0);
  }
  *((_BYTE *)this + 162) = _MergedGlobals_7;
  *((_BYTE *)this + 163) = 0;
  if (atomic_load((unint64_t *)this + 11))
  {
    v10 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    Value = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("CTFrameProgression"));
    if (Value)
    {
      LODWORD(valuePtr) = -1431655766;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      *((_DWORD *)this + 36) = (_DWORD)valuePtr;
    }
    v12 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v13 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("CTFramePathFillRule"));
    if (v13)
    {
      LODWORD(valuePtr) = -1431655766;
      CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
      *((_DWORD *)this + 9) = (_DWORD)valuePtr;
    }
    v14 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v15 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("CTFramePathWidth"));
    if (v15)
    {
      CFNumberGetValue(v15, kCFNumberDoubleType, v5);
      if (*v5 < 0.0)
        *v5 = 0.0;
    }
    v16 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v17 = (void *)CFDictionaryGetValue(v16, CFSTR("CTFrameClippingPaths"));
    TCFRef<__CTFont const*>::Retain((unint64_t *)this + 12, v17);
    if (!atomic_load((unint64_t *)this + 12))
    {
      v23 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
      v24 = CFDictionaryGetValue(v23, CFSTR("CTFramePathClippingPath"));
      if (v24)
      {
        v25 = v24;
        v26 = CFGetTypeID(v24);
        if (v26 == CGPathGetTypeID())
        {
          v46 = v25;
          valuePtr = CFSTR("CTFramePathClippingPath");
          v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v28 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&valuePtr, &v46, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          valuePtr = (const __CFString *)v28;
          v29 = CFArrayCreate(v27, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
          TCFRef<__CTFont const*>::Retain((unint64_t *)this + 12, v29);

        }
        else
        {
          CFLog();
        }
      }
    }
    v19 = (void *)atomic_load(v7);
    v20 = v19;
    if (v20)
    {
      v21 = v20;
      Count = CFArrayGetCount(v20);

      if (Count >= 1)
        *((_BYTE *)this + 32) = 0;
    }
    else
    {

    }
    v30 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v31 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("CTFrameMaximumNumberOfLines"));
    if (v31)
      CFNumberGetValue(v31, kCFNumberLongType, (char *)this + 152);
    v32 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v33 = (const __CFBoolean *)CFDictionaryGetValue(v32, CFSTR("CTFrameHangingDescenders"));
    if (v33)
      *((_BYTE *)this + 160) = CFBooleanGetValue(v33) != 0;
    v34 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v35 = (const __CFBoolean *)CFDictionaryGetValue(v34, CFSTR("CTFrameHangingLeading"));
    if (v35)
      *((_BYTE *)this + 161) = CFBooleanGetValue(v35) != 0;
    v36 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v37 = (const __CFBoolean *)CFDictionaryGetValue(v36, CFSTR("CTFrameIntegerLineMetrics"));
    if (v37)
      *((_BYTE *)this + 162) = CFBooleanGetValue(v37) != 0;
    v38 = (const __CFDictionary *)atomic_load((unint64_t *)this + 11);
    v39 = (const __CFBoolean *)CFDictionaryGetValue(v38, CFSTR("CTFrameForceNonRectPath"));
    if (v39)
      *((_BYTE *)this + 163) = CFBooleanGetValue(v39) != 0;
  }
  v40 = (void *)atomic_load(v7);
  v41 = v40;
  v42 = v41;
  if (v41 && CFArrayGetCount(v41) || *((_BYTE *)this + 163))
  {
    IsRect = 0;
  }
  else
  {
    v44 = (const CGPath *)atomic_load((unint64_t *)this + 10);
    IsRect = CGPathIsRect(v44, (CGRect *)((char *)this + 48));
  }
  *((_BYTE *)this + 32) = IsRect;

  if (!*((_BYTE *)this + 32))
  {
    v45 = (const CGPath *)atomic_load((unint64_t *)this + 10);
    *(CGRect *)((char *)this + 48) = CGPathGetBoundingBox(v45);
  }
}

const void *TFrame::GetLineAtIndex(TFrame *this, CFIndex a2)
{
  void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v3 = (void *)atomic_load((unint64_t *)this + 13);
  v4 = v3;
  v5 = v4;
  if (v4)
    ValueAtIndex = CFArrayGetValueAtIndex(v4, a2);
  else
    ValueAtIndex = 0;

  return ValueAtIndex;
}

void TJustEngine::GenerateMaximaList(TLine *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t *a7, uint64_t *a8, double a9)
{
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  int Maximas;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  TFont *v62;
  uint64_t TrackingFloor;
  char v64;
  char v65;
  double v66;
  double v67;
  double *v68;
  double v69;
  double v70;
  double v71;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v81;
  char v84;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  id v92;
  _OWORD v93[4];
  unint64_t v94;
  _QWORD v95[2];
  _OWORD v96[3];
  __int128 v97;
  unint64_t v98;
  BOOL v99;
  id v100[2];
  uint64_t *v101;
  char *v102;
  uint64_t v103;

  v9 = a7;
  v12 = (uint64_t)a1;
  v13 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  if (v13 == v14)
  {
    v15 = 0;
    v16 = *((_QWORD *)a1 + 2);
  }
  else
  {
    v15 = 0;
    v16 = *((_QWORD *)a1 + 2);
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 40) + 208);
      if (a3 < v17)
        break;
      v15 += v17;
      v16 += 8;
      a3 -= v17;
      if (v16 == v14)
        return;
    }
  }
  v99 = 0;
  if (v16 != v14)
  {
    v79 = v13;
    v84 = 0;
    v88 = 0;
    v77 = (uint64_t)(a8 + 3);
    v81 = v14;
    while (1)
    {
      v18 = *(unint64_t **)(*(_QWORD *)v16 + 40);
      v19 = a3 & ~(a3 >> 63);
      v90 = a3;
      v91 = v18[26];
      v20 = a3 + a4;
      if (a3 + a4 >= v91)
        v20 = v18[26];
      v21 = v20 < v19;
      v22 = v20 - v19;
      if (v21)
        v23 = 0;
      else
        v23 = v22;
      if (v21)
        v24 = 0;
      else
        v24 = a3 & ~(a3 >> 63);
      if (v23 < 1)
      {
LABEL_79:
        if ((v84 & 1) != 0)
        {
          v74 = *v9;
          v75 = v9[1];
          if (*v9 != v75)
          {
            v76 = *v9;
            while (!*(_BYTE *)(v76 + 18))
            {
              v76 += 24;
              if (v76 == v75)
                goto LABEL_86;
            }
            if (v76 != v75)
              return;
            do
            {
LABEL_86:
              if (!*(_WORD *)(v74 + 16))
                *(_BYTE *)(v74 + 18) = 1;
              v74 += 24;
            }
            while (v74 != v75);
          }
        }
        return;
      }
      v98 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v96[2] = v25;
      v97 = v25;
      v96[0] = v25;
      v96[1] = v25;
      TAATJustEngine::TAATJustEngine((TAATJustEngine *)v96, (const TRun *)v18);
      v89 = v24;
      if (TAATJustEngine::GenerateMaximas(v96, v12, (uint64_t)a2, v24, v23, v9, v15, a9 > 0.0, a5))
      {
        if ((_QWORD)v97)
        {
          v26 = (v16 - v79) >> 3;
          TAATJustEngine::PostcompTable((TAATJustEngine *)v96, (unint64_t *)v100);
          v27 = (uint64_t *)a8[1];
          v28 = a8[2];
          v12 = (uint64_t)a1;
          if ((unint64_t)v27 >= v28)
          {
            v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *a8) >> 3);
            v46 = v45 + 1;
            if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_90;
            v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a8) >> 3);
            if (2 * v47 > v46)
              v46 = 2 * v47;
            if (v47 >= 0x555555555555555)
              v48 = 0xAAAAAAAAAAAAAAALL;
            else
              v48 = v46;
            *(_QWORD *)&v93[2] = v77;
            if (v48)
              v49 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate(v77, v48);
            else
              v49 = 0;
            v50 = (uint64_t *)&v49[24 * v45];
            *(_QWORD *)&v93[0] = v49;
            *((_QWORD *)&v93[0] + 1) = v50;
            *(_QWORD *)&v93[1] = v50;
            *((_QWORD *)&v93[1] + 1) = &v49[24 * v48];
            *v50 = v26;
            v51 = v98;
            v98 = 0;
            v50[1] = v51;
            do
              v52 = __ldaxr((unint64_t *)v100);
            while (__stlxr(0, (unint64_t *)v100));
            v50[2] = v52;
            *(_QWORD *)&v93[1] += 24;
            v32 = a8;
            std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__swap_out_circular_buffer(a8, v93);
            v31 = (_QWORD *)a8[1];
            std::__split_buffer<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul> &>::~__split_buffer((uint64_t)v93);
          }
          else
          {
            *v27 = v26;
            v29 = v98;
            v98 = 0;
            v27[1] = v29;
            do
              v30 = __ldaxr((unint64_t *)v100);
            while (__stlxr(0, (unint64_t *)v100));
            v27[2] = v30;
            v31 = v27 + 3;
            v32 = a8;
          }
          v32[1] = (uint64_t)v31;

          v88 = 0;
          v9 = a7;
          v34 = v81;
        }
        else
        {
          v88 = 0;
          v12 = (uint64_t)a1;
          v34 = v81;
        }
        goto LABEL_67;
      }
      v95[0] = &off_1E15DDBB8;
      v95[1] = v18;
      TGenericJustEngine::GenerateMaximas((uint64_t)v95, a1, a2, v24, v23, v9, v15, a9 > 0.0, a5, &v99);
      if ((_QWORD)v97)
      {
        Maximas = 0;
        v12 = (uint64_t)a1;
        v34 = v81;
      }
      else
      {
        v94 = 0xAAAAAAAAFFFFFFFFLL;
        memset(v93, 170, sizeof(v93));
        TArabicJustEngine::TArabicJustEngine((TArabicJustEngine *)v93, (const TRun *)v18);
        Maximas = TArabicJustEngine::GenerateMaximas((uint64_t)v93, (uint64_t)a1, a2, v24, v23, v9, v15, a9 > 0.0);
        if (Maximas)
        {
          v38 = (v16 - v79) >> 3;
          TArabicJustEngine::PostcompTable((TArabicJustEngine *)v93, (unint64_t *)&v92);
          v39 = (uint64_t *)a8[1];
          v40 = a8[2];
          if ((unint64_t)v39 >= v40)
          {
            v53 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *a8) >> 3);
            v54 = v53 + 1;
            if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_90:
              abort();
            v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a8) >> 3);
            if (2 * v55 > v54)
              v54 = 2 * v55;
            if (v55 >= 0x555555555555555)
              v56 = 0xAAAAAAAAAAAAAAALL;
            else
              v56 = v54;
            v103 = v77;
            if (v56)
              v57 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate(v77, v56);
            else
              v57 = 0;
            v58 = (uint64_t *)&v57[24 * v53];
            v100[0] = v57;
            v100[1] = v58;
            v101 = v58;
            v102 = &v57[24 * v56];
            *v58 = v38;
            v59 = *((_QWORD *)&v93[1] + 1);
            *((_QWORD *)&v93[1] + 1) = 0;
            v58[1] = v59;
            do
              v60 = __ldaxr((unint64_t *)&v92);
            while (__stlxr(0, (unint64_t *)&v92));
            v58[2] = v60;
            v101 += 3;
            v44 = a8;
            std::vector<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul>>::__swap_out_circular_buffer(a8, v100);
            v43 = (_QWORD *)a8[1];
            std::__split_buffer<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,TInlineBufferAllocator<std::tuple<long,std::unique_ptr<std::vector<unsigned short>>,TCFRef<__CFData const*>>,30ul> &>::~__split_buffer((uint64_t)v100);
          }
          else
          {
            *v39 = v38;
            v41 = *((_QWORD *)&v93[1] + 1);
            *((_QWORD *)&v93[1] + 1) = 0;
            v39[1] = v41;
            do
              v42 = __ldaxr((unint64_t *)&v92);
            while (__stlxr(0, (unint64_t *)&v92));
            v39[2] = v42;
            v43 = v39 + 3;
            v44 = a8;
          }
          v44[1] = (uint64_t)v43;

          v9 = a7;
        }
        TArabicJustEngine::~TArabicJustEngine((TArabicJustEngine *)v93);
        v12 = (uint64_t)a1;
        v34 = v81;
        if ((Maximas & 1) != 0)
          goto LABEL_66;
      }
      if (((v88 ^ 1) & 1) == 0)
      {
        if (v89 + v23)
        {
          v35 = 24 * (v89 + v23);
          v36 = (_WORD *)(*v9 + 24 * v15 + 16);
          do
          {
            v37 = (unsigned __int16)*v36;
            if (v37 <= 2)
              *v36 = v37 + 1;
            v36 += 12;
            v35 -= 24;
          }
          while (v35);
        }
        Maximas = 1;
      }
LABEL_66:
      v84 |= Maximas;
      v88 = Maximas;
LABEL_67:
      if ((a6 & 1) != 0)
      {
        v61 = atomic_load(v18 + 7);
        v62 = *(TFont **)(v61 + 40);
        TrackingFloor = TFont::GetTrackingFloor(v62);
        v65 = v64;
        v66 = *(double *)&TrackingFloor;
        v67 = TFont::GetEffectiveSize(v62) * -0.03;
        if (v65)
          v67 = v66;
        v68 = (double *)(*v9 + 24 * (v89 + v15) + 8);
        do
        {
          v70 = *(v68 - 1);
          v69 = *v68;
          v71 = v70 + *v68;
          if (v71 != 0.0 && v71 < v67)
          {
            v73 = v67 / v71;
            *(v68 - 1) = v70 * v73;
            *v68 = v69 * v73;
          }
          v68 += 3;
          --v23;
        }
        while (v23);
      }
      a3 = v90 - v91;
      v15 += v91;
      TAATJustEngine::~TAATJustEngine((TAATJustEngine *)v96);
      v16 += 8;
      if (v16 == v34)
        goto LABEL_79;
    }
  }
}

uint64_t TFont::GetTrackingFloor(TFont *this)
{
  double UnscaledTrackAmount;
  TAATTrakTable *v4;
  double v5;
  double v6;
  double v7;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(&v9, *((_QWORD *)this + 50), 1953653099);
  if (atomic_load((unint64_t *)&v9))
  {
    UnscaledTrackAmount = TFont::GetUnscaledTrackAmount(this);
    v4 = (TAATTrakTable *)atomic_load((unint64_t *)&v9);
    v5 = TAATTrakTable::UnscaledTrackAmountForSize(v4, (const __CFData *)(*(_DWORD *)this & 1), *((double *)this + 2), -1.79769313e308)- UnscaledTrackAmount;
    TFont::GetScaleFactor((double *)this);
    v7 = v5 * v6;
  }
  else
  {
    v7 = 0.0;
  }

  return *(_QWORD *)&v7;
}

double TAATTrakTable::UnscaledTrackAmountForSize(TAATTrakTable *this, const __CFData *a2, double a3, double a4)
{
  double v4;
  int v6;
  const UInt8 *BytePtr;
  const UInt8 *v10;
  const UInt8 *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  const UInt8 *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  BOOL v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v27;
  signed int v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned int v31;
  int v32;
  signed int v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  float v39;
  float v40;
  const UInt8 *v41;
  unint64_t v42;
  BOOL v43;
  BOOL v44;
  float v46;
  float v47;
  double v48;
  const UInt8 *v49;
  unint64_t v50;
  BOOL v51;
  double v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  uint64_t v57;
  signed int v58;
  signed int v59;
  unsigned int *v61;
  unsigned int v62;
  unsigned __int16 v63;
  unsigned __int16 v64;
  uint64_t v65;
  signed int v66;
  signed int v67;

  v4 = 0.0;
  if (!this)
    return v4;
  v6 = (int)a2;
  BytePtr = CFDataGetBytePtr(this);
  if (!BytePtr)
    return v4;
  v10 = BytePtr;
  v11 = CFDataGetBytePtr(this);
  if (!v11)
    return v4;
  v12 = (unint64_t)&v11[CFDataGetLength(this)];
  if ((unint64_t)(v10 + 10) > v12 || *(_WORD *)v10 != 256)
    return v4;
  v13 = 6;
  if (v6)
    v13 = 8;
  v14 = *(unsigned __int16 *)&v10[v13];
  if (!v14)
    return v4;
  v15 = &v10[__rev16(v14)];
  v16 = (unsigned int *)(v15 + 16);
  if ((unint64_t)(v15 + 16) > v12)
    return v4;
  v17 = (unsigned int *)(v15 + 8);
  if (!*(_WORD *)v15)
    return v4;
  v18 = __rev16(*(unsigned __int16 *)v15);
  v19 = &v17[2 * v18];
  v20 = v19 < v17 || (unint64_t)v19 > v12;
  if (v20 && v18 != (v12 - (unint64_t)v17) >> 3)
    return v4;
  v21 = *((unsigned __int16 *)v15 + 1);
  if (!*((_WORD *)v15 + 1))
    return v4;
  v22 = (unsigned int *)&v10[bswap32(*((_DWORD *)v15 + 1))];
  v23 = __rev16(v21);
  v24 = &v22[v23];
  if ((v24 < v22 || (unint64_t)v24 > v12)
    && ((unint64_t)(v22 + 1) > v12 || (v12 - (unint64_t)v22) >> 2 != v23))
  {
    return v4;
  }
  v27 = vcvtd_n_s64_f64(a3, 0x10uLL);
  if (a3 * 65536.0 < 2147483650.0)
    v28 = v27;
  else
    v28 = 0x7FFFFFFF;
  if (a3 * 65536.0 <= -2147483650.0)
    v28 = 0x80000000;
  if (v23 < 2 || (int)bswap32(*v22) > v28)
  {
    v29 = 0;
    v30 = 0;
    goto LABEL_36;
  }
  if ((int)bswap32(v22[v23 - 1]) <= v28)
  {
    v29 = v23 - 1;
  }
  else
  {
    if (v21 == 256)
    {
      v29 = 0;
      v30 = 1;
      goto LABEL_36;
    }
    v29 = 0;
    v61 = v22 + 1;
    v62 = (4 * v23 + 262136) >> 2;
    v63 = v62 + 1;
    v64 = v62 + 2;
    v65 = 4 * v23 - 4;
    v30 = 1;
    while (1)
    {
      v66 = bswap32(*(v61 - 1));
      if (v66 == v28)
        break;
      v67 = bswap32(*v61);
      if (v66 < v28 && v67 > v28)
        goto LABEL_36;
      ++v29;
      ++v30;
      ++v61;
      v65 -= 4;
      if (!v65)
      {
        v29 = v63;
        v30 = v64;
        goto LABEL_36;
      }
    }
  }
  v30 = v29;
LABEL_36:
  v31 = vcvtd_n_s64_f64(a4, 0x10uLL);
  if (a4 * 65536.0 < 2147483650.0)
    v32 = v31;
  else
    v32 = 0x7FFFFFFF;
  if (a4 * 65536.0 <= -2147483650.0)
    v33 = 0x80000000;
  else
    v33 = v32;
  if (v18 >= 2 && (int)bswap32(*v17) <= v33)
  {
    v53 = &v17[2 * v18];
    if ((int)bswap32(*(v53 - 2)) <= v33)
    {
      v34 = v18 - 1;
    }
    else
    {
      if (v16 == v53)
      {
        v34 = 0;
        v35 = 1;
        goto LABEL_45;
      }
      v34 = 0;
      v54 = (8 * v18 + 524272) >> 3;
      v55 = v54 + 1;
      v56 = v54 + 2;
      v57 = 8 * v18 - 8;
      v35 = 1;
      while (1)
      {
        v58 = bswap32(*(v16 - 2));
        if (v58 == v33)
          break;
        v59 = bswap32(*v16);
        if (v58 < v33 && v59 > v33)
          goto LABEL_45;
        ++v34;
        ++v35;
        v16 += 2;
        v57 -= 8;
        if (!v57)
        {
          v34 = v55;
          v35 = v56;
          goto LABEL_45;
        }
      }
    }
    v35 = v34;
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
LABEL_45:
  v36 = *(_QWORD *)&v17[2 * v34];
  v37 = *(_QWORD *)&v17[2 * v35];
  v38 = 0.0;
  if (v29 != v30)
  {
    v39 = (float)(int)bswap32(v22[v29]) * 0.000015259;
    v40 = (float)(int)bswap32(v22[v30]) * 0.000015259;
    if (v39 != v40)
      v38 = (a3 - v39) / (v40 - v39);
  }
  v41 = &v10[__rev16(HIWORD(v36))];
  v42 = (unint64_t)&v41[2 * v23];
  v43 = v42 < (unint64_t)v41 || v42 > v12;
  if (!v43 || ((unint64_t)(v41 + 2) <= v12 ? (v44 = (v12 - (unint64_t)v41) >> 1 == v23) : (v44 = 0), v44))
  {
    v4 = (double)((int)bswap32(*(unsigned __int16 *)&v41[2 * v29]) >> 16);
    if (v29 != v30)
      v4 = std::__lerp[abi:nn180100]<double>(v4, (double)((int)bswap32(*(unsigned __int16 *)&v41[2 * v30]) >> 16), v38);
  }
  else
  {
    v4 = 0.0;
  }
  if ((_DWORD)v36 == (_DWORD)v37)
    return v4;
  v46 = (float)(int)bswap32(v36) * 0.000015259;
  v47 = (float)(int)bswap32(v37) * 0.000015259;
  v48 = 0.0;
  if (v46 != v47)
    v48 = (a4 - v46) / (v47 - v46);
  v49 = &v10[__rev16(HIWORD(v37))];
  v50 = (unint64_t)&v49[2 * v23];
  v51 = v50 < (unint64_t)v49 || v50 > v12;
  if (!v51 || (v52 = 0.0, (unint64_t)(v49 + 2) <= v12) && (v12 - (unint64_t)v49) >> 1 == v23)
  {
    v52 = (double)((int)bswap32(*(unsigned __int16 *)&v49[2 * v29]) >> 16);
    if (v29 != v30)
      v52 = std::__lerp[abi:nn180100]<double>(v52, (double)((int)bswap32(*(unsigned __int16 *)&v49[2 * v30]) >> 16), v38);
  }
  return std::__lerp[abi:nn180100]<double>(v4, v52, v48);
}

uint64_t TGenericJustEngine::GenerateMaximas(uint64_t a1, TLine *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8, int a9, BOOL *a10)
{
  unint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL *v32;
  uint64_t v33;
  _BOOL4 v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  double v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  UChar32 FullChar;
  unsigned int IntPropertyValue;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v83;
  uint64_t v86;
  BOOL v87;
  char v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _OWORD v109[15];
  _QWORD v110[3];

  v110[1] = *MEMORY[0x1E0C80C00];
  v15 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 56));
  v16 = *(double *)(*(_QWORD *)(v15 + 40) + 16);
  v17 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 56));
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 400);
  if (v18)
    v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 376))(v18);
  else
    v89 = 0;
  v19 = *(_QWORD *)(a1 + 8);
  if (a9)
  {
    v80 = 0;
    v81 = 0;
    if (a8)
      v20 = 1.0;
    else
      v20 = -1.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = v20;
  }
  else
  {
    if (a8)
      v21 = 0.5;
    else
      v21 = -0.04296875;
    if (a8)
      v22 = 0.14453125;
    else
      v22 = -0.04296875;
    v81 = 2;
    v80 = 1;
    v20 = v21;
    v23 = v22;
  }
  v24 = *(_WORD *)(v19 + 178);
  v25 = *a6;
  v88 = *(_BYTE *)(v19 + 224);
  v26 = v109;
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v109[14] = v27;
  v109[13] = v27;
  v109[12] = v27;
  v109[11] = v27;
  v109[10] = v27;
  v109[9] = v27;
  v109[8] = v27;
  v109[7] = v27;
  v109[6] = v27;
  v109[5] = v27;
  v109[4] = v27;
  v109[3] = v27;
  v109[2] = v27;
  v109[1] = v27;
  v109[0] = v27;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v110[0] = v109;
  v83 = a4;
  v28 = a4 + a5;
  if (a4 + a5)
  {
    if ((v28 & 0x8000000000000000) != 0)
      abort();
    v29 = (v28 - 1) >> 6;
    if ((_QWORD *)((char *)v109 + 8 * v29 + 8) <= v110)
      v110[0] = (char *)v109 + 8 * v29 + 8;
    else
      v26 = operator new(8 * (v29 + 1));
    v107 = v28;
    v108 = v29 + 1;
    v106 = v26;
    if (v28 >= 0x41)
      v30 = (v28 - 1) >> 6;
    else
      v30 = 0;
    *((_QWORD *)v26 + v30) = 0;
    v31 = v28 >> 6;
    if (v28 >= 0x40)
      bzero(v26, 8 * v31);
    if ((v28 & 0x3F) != 0)
      *((_QWORD *)v26 + v31) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v28 & 0x3F));
  }
  else
  {
    v26 = 0;
  }
  v32 = a10;
  v91 = 0;
  v92 = a3;
  v103 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v33 = a3[2];
  v104 = 0;
  *(_QWORD *)&v103 = v33;
  v34 = *a10;
  v90 = 0;
  v35 = v34;
  if (a5)
  {
    v87 = v34;
    v36 = v16 * v22;
    v37 = v16 * v23;
    v38 = v16 * v21;
    v39 = v25 + 24 * a7;
    v86 = a7;
    v40 = v83;
    v41 = 24 * (v83 + a7) - 8;
    v42 = v24 & 0x40;
    v43 = v16 * v20;
    while (1)
    {
      v44 = *(_QWORD **)(v19 + 216);
      v45 = *(_QWORD *)(v19 + 200);
      if (*(__int16 *)(v44[2] + 2 * v45 + 2 * v40) != -1)
      {
        v46 = *(_DWORD *)(v44[5] + 4 * v45 + 4 * v40);
        if (!(v46 & 0x20 | v42))
        {
          v47 = v44[6] + 8 * v45;
          v48 = *(_QWORD *)(v47 + 8 * v40);
          if ((v46 & 1) != 0)
          {
            v105 = *(_QWORD *)(v47 + 8 * v40);
            FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v92, &v105, 0);
            IntPropertyValue = u_getIntPropertyValue(FullChar, UCHAR_EAST_ASIAN_WIDTH);
            if (IntPropertyValue > 5 || ((1 << IntPropertyValue) & 0x2C) == 0)
            {
              v56 = v39 + 24 * v40;
              *(double *)v56 = v38;
              *(double *)(v56 + 8) = v43;
              *(_QWORD *)(v56 + 16) = v80;
              if (v87)
              {
                v57 = *a6;
                v58 = (unsigned __int16 *)(*a6 + v41);
                v59 = v40 + v86;
                while (v59-- >= 1)
                {
                  v61 = *v58;
                  v58 -= 12;
                  if (v61 != 4)
                    goto LABEL_70;
                }
                if (((((v40 + v86) & ((uint64_t)(v40 + v86) >> 63)) - 1) & 0x8000000000000000) != 0)
                  goto LABEL_71;
                v59 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_70:
                v87 = 0;
                *(_QWORD *)(v57 + 24 * v59 + 8) = 0;
                *(_QWORD *)(v57 + 24 * (v40 + v86)) = 0;
              }
              else
              {
LABEL_71:
                v87 = 0;
              }
              goto LABEL_39;
            }
          }
          else
          {
            FullChar = 0;
          }
          if (!v89)
          {
            if (a9)
              goto LABEL_42;
            if (a8)
            {
              if (!FullChar)
              {
                v105 = v48;
                FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v92, &v105, 0);
              }
              if (u_getIntPropertyValue(FullChar, UCHAR_SCRIPT) != 2)
                goto LABEL_42;
            }
            else
            {
              if (!FullChar)
              {
                v105 = v48;
                FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v92, &v105, 0);
              }
              v62 = u_getIntPropertyValue(FullChar, UCHAR_SCRIPT);
              if (v62 > 0x11
                || ((1 << v62) & 0x20414) == 0
                && (v62
                 || (v63 = u_getIntPropertyValue(FullChar, UCHAR_EAST_ASIAN_WIDTH), v63 > 5)
                 || ((1 << v63) & 0x2C) == 0))
              {
LABEL_42:
                v51 = v40 + v86;
                v52 = v90;
                if (v90 > (uint64_t)(v40 + v86) || (v53 = v91, v91 + v90 <= v51))
                {
                  TLine::GetClusterRange(a2, a3, v48, 2, &v90, 0, 0);
                  v52 = v90;
                  v53 = v91;
                }
                v54 = v53 - 1;
                if ((v88 & 1) == 0)
                  v54 = 0;
                if (v51 == v54 + v52)
                {
                  v55 = v39 + 24 * v40;
                  *(double *)v55 = v36;
                  *(double *)(v55 + 8) = v37;
                  *(_QWORD *)(v55 + 16) = v81;
                  v87 = 1;
                }
                else
                {
                  *(_QWORD *)((char *)v106 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
                }
                goto LABEL_39;
              }
            }
          }
        }
      }
      *(_WORD *)(v39 + 24 * v40 + 16) = 4;
LABEL_39:
      ++v40;
      v41 += 24;
      if (v40 == v28)
      {
        v26 = v106;
        a7 = v86;
        v32 = a10;
        v35 = v87;
        break;
      }
    }
  }
  v64 = (unint64_t *)v26;
  v65 = v107;
  if (v107 < 0x40)
  {
LABEL_76:
    if (v65)
    {
      v66 = __clz(__rbit64(*v64 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v65)));
      if ((*v64 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v65)) != 0)
        LODWORD(v65) = v66;
    }
  }
  else
  {
    v64 = (unint64_t *)v26;
    v65 = v107;
    while (!*v64)
    {
      ++v64;
      v65 -= 64;
      if (v65 <= 0x3F)
        goto LABEL_76;
    }
    LODWORD(v65) = __clz(__rbit64(*v64));
  }
  if (v64 != (unint64_t *)((char *)v26 + 8 * (v107 >> 6)) || (v107 & 0x3F) != (_DWORD)v65)
  {
    v68 = v83 - 1;
    v69 = v28 - 1;
    if ((v88 & 1) == 0)
    {
      v68 = v28;
      v69 = v83;
    }
    if (v69 != v68)
    {
      v70 = 1;
      if ((v88 & 1) != 0)
        v70 = -1;
      v71 = 24 * (v69 + a7);
      v72 = -1;
      do
      {
        v73 = a7 + v69;
        v74 = *a6;
        if (((*(_QWORD *)((char *)v106 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v69) & 1) == 0 || v72 == -1)
        {
          if (*(_WORD *)(v74 + v71 + 16) == 4)
            v73 = v72;
        }
        else
        {
          v75 = (__int128 *)(v74 + 24 * v72);
          v76 = v74 + v71;
          v77 = *v75;
          *(_QWORD *)(v76 + 16) = *((_QWORD *)v75 + 2);
          *(_OWORD *)v76 = v77;
          v78 = *a6;
          if ((v88 & 1) != 0)
          {
            *(_QWORD *)(v78 + v71 + 8) = 0;
            *(_QWORD *)(v78 + 24 * v72) = 0;
          }
          else
          {
            *(_QWORD *)(v78 + 24 * v72 + 8) = 0;
            *(_QWORD *)(v78 + v71) = 0;
          }
        }
        v69 += v70;
        v71 += 24 * v70;
        v72 = v73;
      }
      while (v68 != v69);
      v26 = v106;
    }
  }
  *v32 = v35;
  if (v26 && (v109 > v26 || v110 <= (_QWORD *)v26))
    operator delete(v26);
  return 1;
}

uint64_t TBaseFont::HasCursiveAttachment(TBaseFont *this)
{
  unsigned int *v2;
  unint64_t v3;
  _BOOL4 v4;
  unsigned int *v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;
  id v12;
  BOOL v13;

  if ((*((_DWORD *)this + 46) & 0x1000000) != 0)
    return HIBYTE(*((_DWORD *)this + 45)) & 1;
  v2 = (unsigned int *)((char *)this + 184);
  v13 = 0;
  CopyFeatureSettingForTag(CFSTR("curs"), this, &v13, 0, 1, &v12);
  v3 = atomic_load((unint64_t *)&v12);
  v4 = v13;

  v5 = (unsigned int *)((char *)this + 180);
  if (v3)
    v6 = 0;
  else
    v6 = !v4;
  if (v6)
  {
    do
      v10 = __ldxr(v5);
    while (__stxr(v10, v5));
    do
      v11 = __ldxr(v2);
    while (__stxr(v11 | 0x1000000, v2));
    return 0;
  }
  else
  {
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 | 0x1000000, v5));
    do
      v8 = __ldxr(v2);
    while (__stxr(v8 | 0x1000000, v2));
    return 1;
  }
}

void CopyFeatureSettingForTag(const __CFString *a1@<X0>, const TBaseFont *a2@<X2>, BOOL *a3@<X3>, unsigned int *a4@<X4>, uint64_t a5@<X1>, _QWORD *a6@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t *MasterFeatureMapEntry;
  BOOL v15;
  int v16;
  uint64_t *v17;
  __int128 v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  void *v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int16 v34;
  unsigned int v35;
  const __CFAllocator *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFDictionaryRef v40;
  uint64_t v41;
  uint64_t v42;
  CTFeatureSetting *v43;
  uint64_t v44;
  uint64_t v45;
  const __CFString *v46;
  NSNumber *v47;
  uint64_t *i;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  void *values[4];
  const void *valuePtr[3];
  _OWORD v54[7];
  unint64_t v55;
  _OWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v12 = FourCharCodeFromString(a1);
  v51 = v12;
  if (!v12)
  {
    *a6 = 0;
    return;
  }
  v13 = v12;
  MasterFeatureMapEntry = FindMasterFeatureMapEntry(v12);
  if (a2)
    v15 = a3 == 0;
  else
    v15 = 1;
  v16 = !v15;
  if (!MasterFeatureMapEntry)
  {
    if (v16)
    {
      memset(valuePtr, 170, sizeof(valuePtr));
      CustomOTFeatures(a2, 0, valuePtr);
      v26 = (void *)valuePtr[0];
      if (valuePtr[1] == valuePtr[0])
        goto LABEL_53;
      v27 = ((char *)valuePtr[1] - (char *)valuePtr[0]) >> 2;
      v28 = (unsigned int *)valuePtr[0];
      do
      {
        v29 = v27 >> 1;
        v30 = &v28[v27 >> 1];
        v32 = *v30;
        v31 = v30 + 1;
        v27 += ~(v27 >> 1);
        if (v32 < v13)
          v28 = v31;
        else
          v27 = v29;
      }
      while (v27);
      if (v28 == valuePtr[1])
LABEL_53:
        v33 = 0;
      else
        v33 = v13 >= *v28;
      *a3 = v33;
      if (v26)
      {
        valuePtr[1] = v26;
        operator delete(v26);
      }
    }
    if (a4)
      *a4 = 0;
    v50 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5);
    v43 = [CTFeatureSetting alloc];
    v44 = 0;
    v45 = 0;
    v46 = a1;
    v47 = (NSNumber *)v50;
LABEL_59:
    *a6 = -[CTFeatureSetting initWithType:selector:tag:value:](v43, v44, v45, (uint64_t)v46, v47);
    return;
  }
  v17 = MasterFeatureMapEntry;
  if (!v16)
  {
LABEL_37:
    v34 = *((_WORD *)v17 + 3);
    v35 = *((_DWORD *)v17 + 2);
    if ((v35 & 1) != 0)
    {
      if (v17[1] & 2 | a5)
      {
        if ((v35 & 0x40) != 0)
          v34 = a5;
      }
      else
      {
              i != v49;
              i = (uint64_t *)((char *)i + 12))
        {
          if ((i[1] & 2) != 0)
          {
            v34 = *((_WORD *)i + 3);
            break;
          }
        }
      }
    }
    else if ((_DWORD)a5)
    {
      v34 &= ~1u;
    }
    else
    {
      v34 |= 1u;
    }
    if (a4)
    {
      *a4 = (v35 >> 1) & 1;
      v35 = *((_DWORD *)v17 + 2);
    }
    if ((v35 & 8) == 0)
    {
      valuePtr[0] = (const void *)a5;
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v37 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, valuePtr);
      LODWORD(valuePtr[0]) = *((unsigned __int16 *)v17 + 2);
      v38 = CFNumberCreate(v36, kCFNumberIntType, valuePtr);
      LODWORD(valuePtr[0]) = v34;
      v39 = CFNumberCreate(v36, kCFNumberIntType, valuePtr);
      valuePtr[0] = CFSTR("CTFeatureOpenTypeTag");
      valuePtr[1] = CFSTR("CTFeatureOpenTypeValue");
      valuePtr[2] = CFSTR("CTFeatureTypeIdentifier");
      *(_QWORD *)&v54[0] = CFSTR("CTFeatureSelectorIdentifier");
      values[0] = (void *)a1;
      values[1] = v37;
      values[2] = v38;
      values[3] = v39;
      v40 = CFDictionaryCreate(v36, valuePtr, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *a6 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v40);

      return;
    }
    v41 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *((unsigned __int16 *)v17 + 2));
    v42 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v34);
    v43 = [CTFeatureSetting alloc];
    v44 = v41;
    v45 = v42;
    v46 = 0;
    v47 = 0;
    goto LABEL_59;
  }
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54[6] = v18;
  v54[5] = v18;
  v54[4] = v18;
  v54[3] = v18;
  v54[2] = v18;
  v54[1] = v18;
  v54[0] = v18;
  memset(valuePtr, 0, sizeof(valuePtr));
  v55 = 0xAAAAAAAAAAAAAAAALL;
  v56 = v54;
  MergeOTFeaturesFromTable<TInlineVector<unsigned int,30ul>>(valuePtr, a2, 1196643650);
  MergeOTFeaturesFromTable<TInlineVector<unsigned int,30ul>>(valuePtr, a2, 1196445523);
  v19 = (unsigned int *)valuePtr[0];
  if (valuePtr[1] == valuePtr[0])
    goto LABEL_35;
  v20 = ((char *)valuePtr[1] - (char *)valuePtr[0]) >> 2;
  do
  {
    v21 = v20 >> 1;
    v22 = &v19[v20 >> 1];
    v24 = *v22;
    v23 = v22 + 1;
    v20 += ~(v20 >> 1);
    if (v24 < v13)
      v19 = v23;
    else
      v20 = v21;
  }
  while (v20);
  if (v19 == valuePtr[1])
  {
LABEL_35:
    *a3 = 0;
LABEL_36:
    values[0] = valuePtr;
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)values);
    goto LABEL_37;
  }
  v25 = v13 >= *v19;
  *a3 = v25;
  if (!v25
    || a5 < 2
    || (v17[1] & 0x8000) == 0
    || NumberOfGlyphVariants(a2, v13) < a5)
  {
    goto LABEL_36;
  }
  if (a4)
    *a4 = 0;
  *a6 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], 0, 0, (uint64_t)a1, (NSNumber *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5));
  values[0] = valuePtr;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)values);
}

void MergeOTFeaturesFromTable<TInlineVector<unsigned int,30ul>>(_QWORD *a1, TBaseFont *this, uint64_t a3)
{
  const __CFData *CommonTable;
  const __CFData *v5;
  const UInt8 *BytePtr;
  const UInt8 *v7;
  const UInt8 *v8;
  unint64_t v9;
  const UInt8 *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unsigned int *v36;
  char *v37;
  char *v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;

  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(this, a3, 0);
  if (CommonTable)
  {
    v5 = CommonTable;
    BytePtr = CFDataGetBytePtr(CommonTable);
    if (BytePtr)
    {
      v7 = BytePtr;
      v8 = CFDataGetBytePtr(v5);
      if (v8)
      {
        v9 = (unint64_t)&v8[CFDataGetLength(v5)];
        if ((unint64_t)(v7 + 10) <= v9
          && bswap32(*(unsigned __int16 *)v7) >> 16 <= 1
          && (!*((_WORD *)v7 + 1) || (unint64_t)(v7 + 14) <= v9))
        {
          if (*((_WORD *)v7 + 3))
          {
            v10 = &v7[__rev16(*((unsigned __int16 *)v7 + 3))];
            v11 = (unsigned int *)(v10 + 2);
            if ((unint64_t)(v10 + 2) <= v9)
            {
              v12 = *(unsigned __int16 *)v10;
              v13 = __rev16(v12);
              v14 = (char *)v11 + 6 * v13;
              v15 = v14 < (char *)v11 || (unint64_t)v14 > v9;
              if (!v15
                || ((unint64_t)(v10 + 8) <= v9 ? (v16 = (v9 - (unint64_t)v11) / 6) : (v16 = 0),
                    v16 == v13))
              {
                v17 = (char *)a1[1];
                v18 = (uint64_t)&v17[-*a1] >> 2;
                v19 = v13 + v18;
                if (v13 + v18 > (unint64_t)((uint64_t)(a1[2] - *a1) >> 2))
                {
                  if (v19 >> 62)
LABEL_47:
                    abort();
                  v48 = a1 + 3;
                  v20 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), v13 + v18);
                  v22 = (char *)*a1;
                  v21 = (char *)a1[1];
                  v23 = &v20[4 * v18];
                  if (v21 != (char *)*a1)
                  {
                    v24 = (char *)a1[1];
                    v23 = &v20[4 * v18];
                    do
                    {
                      v25 = *((_DWORD *)v24 - 1);
                      v24 -= 4;
                      *((_DWORD *)v23 - 1) = v25;
                      v23 -= 4;
                    }
                    while (v24 != v22);
                  }
                  *a1 = v23;
                  a1[1] = &v20[4 * v18];
                  v26 = a1[2];
                  a1[2] = &v20[4 * v19];
                  v46 = v21;
                  v47 = v26;
                  v44 = v22;
                  v45 = v22;
                  std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v44);
                  v17 = (char *)a1[1];
                }
                v43 = v18;
                if (v12)
                {
                  v27 = (unsigned int *)((char *)v11 + 6 * v13);
                  do
                  {
                    v28 = bswap32(*v11);
                    v29 = a1[2];
                    if ((unint64_t)v17 >= v29)
                    {
                      v30 = (char *)*a1;
                      v31 = (uint64_t)&v17[-*a1] >> 2;
                      v32 = v31 + 1;
                      if ((unint64_t)(v31 + 1) >> 62)
                        goto LABEL_47;
                      v33 = v29 - (_QWORD)v30;
                      if (v33 >> 1 > v32)
                        v32 = v33 >> 1;
                      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                        v34 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v34 = v32;
                      v48 = a1 + 3;
                      if (v34)
                      {
                        v35 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), v34);
                        v30 = (char *)*a1;
                        v17 = (char *)a1[1];
                      }
                      else
                      {
                        v35 = 0;
                      }
                      v36 = (unsigned int *)&v35[4 * v31];
                      *v36 = v28;
                      if (v17 == v30)
                      {
                        v38 = &v35[4 * v31];
                      }
                      else
                      {
                        v37 = v17;
                        v38 = &v35[4 * v31];
                        do
                        {
                          v39 = *((_DWORD *)v37 - 1);
                          v37 -= 4;
                          *((_DWORD *)v38 - 1) = v39;
                          v38 -= 4;
                        }
                        while (v37 != v30);
                      }
                      v40 = (char *)(v36 + 1);
                      *a1 = v38;
                      a1[1] = v36 + 1;
                      v41 = a1[2];
                      a1[2] = &v35[4 * v34];
                      v46 = v17;
                      v47 = v41;
                      v44 = v30;
                      v45 = v30;
                      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer((uint64_t)&v44);
                      v17 = v40;
                    }
                    else
                    {
                      *(_DWORD *)v17 = v28;
                      v17 += 4;
                    }
                    a1[1] = v17;
                    v11 = (unsigned int *)((char *)v11 + 6);
                  }
                  while (v11 != v27);
                }
                v42 = (char *)*a1;
                LOBYTE(v44) = -86;
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                std::__inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__less<void,void> &>(v42, &v42[4 * v43], v17);
              }
            }
          }
        }
      }
    }
  }
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned int *>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _DWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _DWORD *v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unint64_t v74;
  int *v75;
  unsigned int v76;
  _BOOL4 v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;

  if (a5)
  {
    v7 = a5;
    v11 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = *(_DWORD *)a2;
      v14 = -a4;
      while (1)
      {
        v15 = *(_DWORD *)&v11[v12];
        if (v13 < v15)
          break;
        v12 += 4;
        v73 = __CFADD__(v14++, 1);
        if (v73)
          return result;
      }
      v16 = &v11[v12];
      if (-v14 >= v7)
      {
        if (v14 == -1)
        {
          *(_DWORD *)&v11[v12] = v13;
          *(_DWORD *)a2 = v15;
          return result;
        }
        if (v14 <= 0)
          v27 = -v14;
        else
          v27 = 1 - v14;
        v26 = v27 >> 1;
        v20 = &v11[4 * (v27 >> 1) + v12];
        v19 = a2;
        if (a2 != a3)
        {
          v28 = (a3 - a2) >> 2;
          v19 = a2;
          do
          {
            v29 = v28 >> 1;
            v30 = &v19[4 * (v28 >> 1)];
            v32 = *(_DWORD *)v30;
            v31 = v30 + 4;
            v28 += ~(v28 >> 1);
            if (v32 < *(_DWORD *)v20)
              v19 = v31;
            else
              v28 = v29;
          }
          while (v28);
        }
        v18 = (v19 - a2) >> 2;
      }
      else
      {
        if (v7 >= 0)
          v17 = v7;
        else
          v17 = v7 + 1;
        v18 = v17 >> 1;
        v19 = &a2[4 * (v17 >> 1)];
        v20 = a2;
        if (a2 - v11 != v12)
        {
          v21 = (a2 - v11 - v12) >> 2;
          v20 = &v11[v12];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[4 * (v21 >> 1)];
            v25 = *(_DWORD *)v23;
            v24 = v23 + 4;
            v21 += ~(v21 >> 1);
            if (*(_DWORD *)v19 < v25)
              v21 = v22;
            else
              v20 = v24;
          }
          while (v21);
        }
        v26 = (v20 - v11 - v12) >> 2;
      }
      if (v20 == a2)
      {
        a2 = v19;
      }
      else
      {
        v33 = v19 - a2;
        if (v19 == a2)
        {
          a2 = v20;
        }
        else
        {
          v34 = v20 + 4;
          if (v20 + 4 == a2)
          {
            v79 = *(_DWORD *)v20;
            v85 = a6;
            v87 = a7;
            v39 = a3;
            v81 = v18;
            v83 = v26;
            memmove(v20, a2, v19 - a2);
            v18 = v81;
            v26 = v83;
            v16 = &v11[v12];
            a6 = v85;
            a7 = v87;
            a3 = v39;
            a2 = &v20[v33];
            *(_DWORD *)&v20[v33] = v79;
          }
          else
          {
            v35 = a2 + 4;
            if (a2 + 4 == v19)
            {
              v40 = *((_DWORD *)v19 - 1);
              a2 = v20 + 4;
              if (v19 - 4 != v20)
              {
                v86 = a6;
                v88 = a7;
                v41 = a3;
                v82 = v18;
                v84 = v26;
                v80 = *((_DWORD *)v19 - 1);
                memmove(v20 + 4, v20, v19 - 4 - v20);
                v40 = v80;
                v18 = v82;
                v26 = v84;
                v16 = &v11[v12];
                a6 = v86;
                a7 = v88;
                a3 = v41;
              }
              *(_DWORD *)v20 = v40;
            }
            else
            {
              v36 = (a2 - v20) >> 2;
              if (v36 == v33 >> 2)
              {
                do
                {
                  v37 = *((_DWORD *)v34 - 1);
                  *((_DWORD *)v34 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v37;
                  if (v34 == a2)
                    break;
                  v34 += 4;
                  v38 = v35 == v19;
                  v35 += 4;
                }
                while (!v38);
              }
              else
              {
                v42 = v33 >> 2;
                v43 = (a2 - v20) >> 2;
                do
                {
                  v44 = v43;
                  v43 = v42;
                  v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  v45 = &v20[4 * v43];
                  do
                  {
                    v47 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    v46 = v47;
                    v48 = &v45[4 * v36];
                    v49 = v45;
                    do
                    {
                      v50 = v48;
                      *(_DWORD *)v49 = *(_DWORD *)v48;
                      v51 = &v48[4 * v36];
                      v52 = __OFSUB__(v36, (v19 - v48) >> 2);
                      v54 = v36 - ((v19 - v48) >> 2);
                      v53 = (v54 < 0) ^ v52;
                      v48 = &v20[4 * v54];
                      if (v53)
                        v48 = v51;
                      v49 = v50;
                    }
                    while (v48 != v45);
                    *(_DWORD *)v50 = v46;
                  }
                  while (v45 != v20);
                }
                a2 = &v20[4 * (v33 >> 2)];
              }
            }
          }
        }
      }
      a4 = -(v26 + v14);
      v55 = v7 - v18;
      if (v26 + v18 >= v7 - (v26 + v18) - v14)
      {
        v61 = a2;
        v62 = v19;
        v63 = v26;
        v64 = -(v26 + v14);
        v65 = v18;
        v66 = v7 - v18;
        v57 = a6;
        v58 = a7;
        v67 = v16;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned int *>>(a2, v62, a3, v64, v66);
        v60 = v67;
        a2 = v20;
        v55 = v65;
        a4 = v63;
        a3 = v61;
      }
      else
      {
        v56 = &v11[v12];
        v57 = a6;
        v58 = a7;
        v59 = a3;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned int *>>(v56, v20, a2, v26, v18);
        a3 = v59;
        v60 = a2;
        a2 = v19;
      }
      v7 = v55;
      v11 = v60;
      a6 = v57;
      a7 = v58;
      if (!v55)
        return result;
    }
    if (a4 <= v7)
    {
      if (v11 != a2)
      {
        v74 = 0;
        do
        {
          a6[v74 / 4] = *(_DWORD *)&v11[v74];
          v74 += 4;
        }
        while (&v11[v74] != a2);
        if (v74)
        {
          v75 = a6;
          while (a2 != a3)
          {
            v76 = *(_DWORD *)a2;
            v77 = *(_DWORD *)a2 >= *v75;
            if (*(_DWORD *)a2 >= *v75)
              v76 = *v75;
            a2 += 4 * (*(_DWORD *)a2 < *v75);
            v75 += v77;
            *(_DWORD *)v11 = v76;
            v11 += 4;
            if (&a6[v74 / 4] == v75)
              return result;
          }
          return (char *)memmove(v11, v75, (char *)a6 - (char *)v75 + v74);
        }
      }
    }
    else if (a3 != a2)
    {
      v68 = 0;
      do
      {
        a6[v68] = *(_DWORD *)&a2[v68 * 4];
        ++v68;
      }
      while (&a2[v68 * 4] != a3);
      if (v68 * 4)
      {
        v69 = &a6[v68];
        v70 = a3 - 4;
        while (a2 != v11)
        {
          v71 = *(v69 - 1);
          v72 = *((_DWORD *)a2 - 1);
          v73 = v71 >= v72;
          if (v71 <= v72)
            v71 = *((_DWORD *)a2 - 1);
          if (v73)
            --v69;
          else
            a2 -= 4;
          *(_DWORD *)v70 = v71;
          v70 -= 4;
          if (v69 == a6)
            return result;
        }
        v78 = 0;
        do
        {
          *(_DWORD *)&v70[v78 * 4] = v69[v78 - 1];
          --v78;
        }
        while (&v69[v78] != a6);
      }
    }
  }
  return result;
}

void TArabicJustEngine::~TArabicJustEngine(TArabicJustEngine *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E15DD9E8;
  std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)this + 32);
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)this + 24, v2);
}

{
  TArabicJustEngine::~TArabicJustEngine(this);
  JUMPOUT(0x186DC03ACLL);
}

void TArabicJustEngine::TArabicJustEngine(TArabicJustEngine *this, const TRun *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  double v6;
  __int16 v7;
  __int16 v8;

  *(_QWORD *)this = &off_1E15DD9E8;
  *((_QWORD *)this + 1) = a2;
  *((_WORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  v3 = atomic_load((unint64_t *)a2 + 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 400);
  if (v4)
  {
    v8 = 1600;
    v7 = -21846;
    if ((*(uint64_t (**)(uint64_t, __int16 *, __int16 *, uint64_t))(*(_QWORD *)v4 + 664))(v4, &v8, &v7, 1))
    {
      v6 = NAN;
      if ((*(unsigned int (**)(uint64_t, __int16 *, double *, uint64_t, uint64_t))(*(_QWORD *)v4 + 512))(v4, &v7, &v6, 1, 1))
      {
        if (v6 > 0.0)
        {
          v5 = v7;
          if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v4 + 376))(v4, v6) & 1) == 0)
            *((_WORD *)this + 8) = v5;
        }
      }
    }
  }
}

uint64_t TArabicJustEngine::GenerateMaximas(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, int a8)
{
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 Run;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  void *v42;
  char *v43;
  char *v44;
  double v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  unsigned int v57;
  int v58;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  char v64;
  int v65;
  BOOL v66;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  _QWORD *v76;
  float v77;
  float v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  unsigned int v83;
  _QWORD *v84;
  size_t prime;
  _QWORD *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  size_t v91;
  uint8x8_t v92;
  unint64_t v93;
  uint8x8_t v94;
  uint64_t v95;
  _QWORD *v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  void *v102;
  _QWORD *v103;
  int *v104;
  double v105;
  double v106;
  int64x2_t v107;
  uint64_t v108;
  int v109;
  int v110;
  _QWORD *v111;
  double v112;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  _QWORD *v118;
  uint64_t v119;
  _WORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  double v129;
  void **p_dst;
  void *__dst;
  void *v132;
  uint64_t v133;
  _OWORD v134[4];
  _OWORD *v135;
  _QWORD v136[3];
  _OWORD v137[4];
  _OWORD *v138;
  void *__p;
  void *v140;
  char *v141;
  _OWORD v142[7];
  unint64_t v143;
  char *v144;
  _QWORD v145[3];
  _BYTE v146[24];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[15];
  _OWORD *v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (!*(_WORD *)(a1 + 16))
    return 0;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v161[14] = v14;
  v161[13] = v14;
  v161[12] = v14;
  v161[11] = v14;
  v161[10] = v14;
  v161[9] = v14;
  v161[8] = v14;
  v161[7] = v14;
  v161[6] = v14;
  v161[5] = v14;
  v161[4] = v14;
  v161[3] = v14;
  v161[2] = v14;
  v161[1] = v14;
  v161[0] = v14;
  v160 = v14;
  v159 = v14;
  v158 = v14;
  v157 = v14;
  v156 = v14;
  v155 = v14;
  v154 = v14;
  v153 = v14;
  v152 = v14;
  v151 = v14;
  v150 = v14;
  v149 = v14;
  v148 = v14;
  v147 = v14;
  *(_OWORD *)&v146[8] = v14;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(v15 + 8);
  v145[0] = *(_QWORD *)(v15 + 16) + v16;
  v145[1] = v16;
  v146[16] = 0;
  *(_QWORD *)v146 = 0;
  v145[2] = 0;
  *(_QWORD *)&v146[5] = 0;
  *(_QWORD *)&v147 = a2;
  *((_QWORD *)&v147 + 1) = a3;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  v17 = a3[2];
  v159 = 0uLL;
  *(_QWORD *)&v158 = v17;
  v160 = 0uLL;
  v162 = v161;
  Run = TScriptRun::NextRun((uint64_t)v145, 0);
  v19 = *(_DWORD *)&v146[8] == 1634885986 && Run;
  if ((_DWORD)v19 == 1)
  {
    v116 = a8;
    v20 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 56));
    v129 = *(double *)(*(_QWORD *)(v20 + 40) + 16);
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)(v21 + 216);
    v127 = *(_QWORD *)(v22 + 16);
    v122 = v21;
    v123 = a4;
    v23 = *(_QWORD *)(v21 + 200);
    v124 = *(_QWORD *)(v22 + 48);
    v24 = (_QWORD *)operator new();
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    v25 = *(_QWORD *)(a1 + 24);
    __p = 0;
    *(_QWORD *)(a1 + 24) = v24;
    if (v25)
    {
      std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100](a1 + 24, v25);
      v26 = __p;
      __p = 0;
      if (v26)
        std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)&__p, (uint64_t)v26);
    }
    v27 = *(_QWORD *)(a1 + 24);
    LOWORD(__p) = 0;
    std::vector<unsigned short>::resize(v27, a5, &__p);
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(_BYTE *)(v28 + 224);
    v30 = 1;
    if ((v29 & 1) != 0)
      v30 = -1;
    v121 = v30;
    v115 = *a6;
    *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v142[6] = v31;
    v142[5] = v31;
    v142[4] = v31;
    v142[3] = v31;
    v142[2] = v31;
    v142[1] = v31;
    v142[0] = v31;
    v143 = 0xAAAAAAAAAAAAAAAALL;
    v144 = (char *)v142;
    v140 = 0;
    v141 = 0;
    __p = 0;
    if (a5)
    {
      v32 = v142;
      if (a5 >> 62)
        abort();
      if ((char **)((char *)v142 + 4 * a5) <= &v144)
      {
        v144 = (char *)v142 + 4 * a5;
        v33 = 4 * a5;
      }
      else
      {
        v33 = 4 * a5;
        v32 = operator new(4 * a5);
      }
      v34 = (char *)v32 + 4 * a5;
      __p = v32;
      v141 = v34;
      bzero(v32, v33);
      v140 = v34;
    }
    if ((v29 & 1) != 0)
      v35 = a5 - 1;
    else
      v35 = 0;
    v36 = **(_WORD ***)(a1 + 24);
    v37 = *(_QWORD *)(v28 + 8);
    v38 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v137[3] = v39;
    v137[2] = v39;
    v137[1] = v39;
    v137[0] = v39;
    memset(v136, 0, sizeof(v136));
    v138 = v137;
    v126 = v37;
    v120 = (_WORD *)TCharStream::LazyCopyChars(a3, v37, v38);
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134[3] = v40;
    v134[2] = v40;
    v134[1] = v40;
    v134[0] = v40;
    v132 = 0;
    v133 = 0;
    __dst = 0;
    v135 = v134;
    if (v38)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&__dst, v38);
      v41 = (char *)v132;
      bzero(v132, 2 * v38);
      v132 = &v41[2 * v38];
    }
    LODWORD(p_dst) = 0;
    u_shapeArabic();
    v42 = __dst;
    if (*(_WORD *)__dst == 32 && *v120 != 32)
    {
      v43 = (char *)__dst + 2;
      if ((char *)__dst + 2 != v132)
      {
        v44 = (char *)((_BYTE *)v132 - v43);
        memmove(__dst, v43, (_BYTE *)v132 - v43);
        *(_WORD *)&v44[(_QWORD)v42] = 32;
      }
    }
    v45 = v129;
    if (a5)
    {
      v46 = 0;
      v47 = v123;
      v48 = v127 + 2 * v23 + 2 * v123;
      v125 = v124 + 8 * v23 + 8 * v123;
      v49 = &v36[v35];
      v118 = (_QWORD *)(a1 + 48);
      v119 = v48;
      v50 = a5;
      v52 = v121;
      v51 = v122;
      while (1)
      {
        v53 = *(_QWORD *)(v51 + 216);
        v54 = *(_QWORD *)(v51 + 200);
        if (*(__int16 *)(*(_QWORD *)(v53 + 16) + 2 * v54 + 2 * (v35 + v47)) == -1
          || (*(_DWORD *)(*(_QWORD *)(v53 + 40) + 4 * v54 + 4 * (v35 + v47)) & 0x320) != 0)
        {
          goto LABEL_31;
        }
        v60 = *(_QWORD *)(v125 + 8 * v35) - v126;
        v61 = *((unsigned __int16 *)__dst + v60);
        if (v61 == 32)
        {
          if (v120[v60] != 32)
          {
            *((_DWORD *)__p + v35) = 0;
LABEL_31:
            v55 = 1;
            goto LABEL_32;
          }
LABEL_43:
          v55 = 0;
          goto LABEL_80;
        }
        v55 = 2;
        if (*((unsigned __int16 *)__dst + v60) > 0xFD87u)
        {
          v62 = 8;
          switch(v61)
          {
            case 65136:
            case 65140:
            case 65142:
            case 65144:
            case 65146:
            case 65148:
            case 65150:
              goto LABEL_62;
            case 65137:
            case 65138:
            case 65139:
            case 65141:
            case 65143:
            case 65145:
            case 65147:
            case 65149:
            case 65151:
            case 65152:
            case 65153:
            case 65155:
            case 65157:
            case 65159:
            case 65161:
            case 65165:
            case 65167:
            case 65171:
            case 65173:
            case 65177:
            case 65181:
            case 65185:
            case 65189:
            case 65193:
            case 65195:
            case 65197:
            case 65199:
            case 65201:
            case 65205:
            case 65209:
            case 65213:
            case 65217:
            case 65221:
            case 65225:
            case 65229:
            case 65233:
            case 65237:
            case 65241:
            case 65245:
            case 65249:
            case 65253:
            case 65257:
            case 65261:
            case 65263:
            case 65265:
            case 65269:
            case 65271:
            case 65273:
            case 65275:
              goto LABEL_43;
            case 65154:
            case 65156:
            case 65158:
            case 65160:
            case 65162:
            case 65166:
            case 65172:
            case 65182:
            case 65186:
            case 65190:
            case 65202:
            case 65206:
            case 65210:
            case 65214:
            case 65226:
            case 65230:
            case 65234:
            case 65238:
            case 65242:
            case 65254:
            case 65258:
            case 65262:
              goto LABEL_46;
            case 65163:
            case 65169:
            case 65175:
            case 65179:
            case 65211:
            case 65215:
            case 65219:
            case 65223:
            case 65227:
            case 65231:
            case 65235:
            case 65239:
            case 65243:
            case 65247:
            case 65251:
            case 65255:
            case 65267:
              goto LABEL_79;
            case 65164:
            case 65170:
            case 65176:
            case 65180:
            case 65268:
              goto LABEL_72;
            case 65168:
            case 65174:
            case 65178:
            case 65264:
            case 65266:
            case 65270:
            case 65272:
            case 65274:
            case 65276:
              goto LABEL_73;
            case 65183:
            case 65187:
            case 65191:
              goto LABEL_80;
            case 65184:
            case 65188:
            case 65192:
              goto LABEL_78;
            case 65194:
            case 65196:
            case 65198:
            case 65200:
            case 65218:
            case 65222:
            case 65246:
              goto LABEL_52;
            case 65203:
            case 65207:
            case 65259:
              v55 = 3;
              goto LABEL_80;
            case 65204:
            case 65208:
            case 65260:
              goto LABEL_59;
            case 65212:
            case 65216:
            case 65228:
            case 65232:
            case 65236:
            case 65240:
            case 65244:
            case 65256:
              goto LABEL_68;
            case 65220:
            case 65224:
            case 65248:
              v55 = 7;
              goto LABEL_80;
            case 65250:
              v62 = 12;
              break;
            case 65252:
              break;
            default:
              if (v61 != 64904)
                goto LABEL_43;
              goto LABEL_80;
          }
          *((_DWORD *)__p + v35) = 1;
          v55 = v62;
LABEL_105:
          v69 = *(unsigned __int16 *)(v119 + 2 * v35);
          v70 = *(_QWORD *)(a1 + 40);
          v128 = v46;
          if (v70)
          {
            v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.u32[0] > 1uLL)
            {
              v72 = *(unsigned __int16 *)(v119 + 2 * v35);
              if (v70 <= v69)
                v72 = v69 % v70;
            }
            else
            {
              v72 = ((_DWORD)v70 - 1) & v69;
            }
            v73 = *(uint64_t ****)(*(_QWORD *)(a1 + 32) + 8 * v72);
            if (v73)
            {
              v74 = *v73;
              if (v74)
              {
                v45 = v129;
                do
                {
                  v75 = (unint64_t)v74[1];
                  if (v75 == v69)
                  {
                    if (*((unsigned __int16 *)v74 + 8) == (_DWORD)v69)
                    {
                      v51 = v122;
                      v47 = v123;
                      v52 = v121;
                      goto LABEL_32;
                    }
                  }
                  else
                  {
                    if (v71.u32[0] > 1uLL)
                    {
                      if (v75 >= v70)
                        v75 %= v70;
                    }
                    else
                    {
                      v75 &= v70 - 1;
                    }
                    if (v75 != v72)
                      break;
                  }
                  v74 = (uint64_t **)*v74;
                }
                while (v74);
              }
            }
          }
          else
          {
            v72 = 0xAAAAAAAAAAAAAAAALL;
          }
          v76 = operator new(0x18uLL);
          *v76 = 0;
          v76[1] = v69;
          *((_WORD *)v76 + 8) = v69;
          v77 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
          v78 = *(float *)(a1 + 64);
          if (v70 && (float)(v78 * (float)v70) >= v77)
          {
            v45 = v129;
            goto LABEL_176;
          }
          v79 = (v70 & (v70 - 1)) != 0;
          if (v70 < 3)
            v79 = 1;
          v80 = v79 | (2 * v70);
          v81 = vcvtps_u32_f32(v77 / v78);
          if (v80 <= v81)
            v82 = v81;
          else
            v82 = v80;
          if (v82 == 1)
          {
            v82 = 2;
          }
          else if ((v82 & (v82 - 1)) != 0)
          {
            v84 = v76;
            prime = std::__next_prime(v82);
            v76 = v84;
            v82 = prime;
            v70 = *(_QWORD *)(a1 + 40);
          }
          v45 = v129;
          if (v82 <= v70)
          {
            if (v82 < v70)
            {
              v93 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
              if (v70 < 3 || (v94 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v94.i16[0] = vaddlv_u8(v94), v94.u32[0] > 1uLL))
              {
                v114 = v76;
                v93 = std::__next_prime(v93);
                v76 = v114;
                v45 = v129;
              }
              else
              {
                v95 = 1 << -(char)__clz(v93 - 1);
                if (v93 >= 2)
                  v93 = v95;
              }
              if (v82 <= v93)
                v82 = v93;
              if (v82 >= v70)
              {
                v70 = *(_QWORD *)(a1 + 40);
              }
              else
              {
                if (v82)
                  goto LABEL_142;
                v102 = *(void **)(a1 + 32);
                *(_QWORD *)(a1 + 32) = 0;
                if (v102)
                {
                  v103 = v76;
                  operator delete(v102);
                  v76 = v103;
                  v45 = v129;
                }
                v70 = 0;
                *(_QWORD *)(a1 + 40) = 0;
              }
            }
          }
          else
          {
LABEL_142:
            if (v82 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v86 = v76;
            v87 = operator new(8 * v82);
            v88 = *(void **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v87;
            if (v88)
              operator delete(v88);
            v89 = 0;
            *(_QWORD *)(a1 + 40) = v82;
            v76 = v86;
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v89++) = 0;
            while (v82 != v89);
            v90 = (_QWORD *)*v118;
            v45 = v129;
            if (*v118)
            {
              v91 = v90[1];
              v92 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
              v92.i16[0] = vaddlv_u8(v92);
              if (v92.u32[0] > 1uLL)
              {
                if (v91 >= v82)
                  v91 %= v82;
              }
              else
              {
                v91 &= v82 - 1;
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v91) = v118;
              v96 = (_QWORD *)*v90;
              if (*v90)
              {
                do
                {
                  v97 = v96[1];
                  if (v92.u32[0] > 1uLL)
                  {
                    if (v97 >= v82)
                      v97 %= v82;
                  }
                  else
                  {
                    v97 &= v82 - 1;
                  }
                  if (v97 != v91)
                  {
                    v98 = *(_QWORD *)(a1 + 32);
                    if (!*(_QWORD *)(v98 + 8 * v97))
                    {
                      *(_QWORD *)(v98 + 8 * v97) = v90;
                      goto LABEL_167;
                    }
                    *v90 = *v96;
                    *v96 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v97);
                    **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v97) = v96;
                    v96 = v90;
                  }
                  v97 = v91;
LABEL_167:
                  v90 = v96;
                  v96 = (_QWORD *)*v96;
                  v91 = v97;
                }
                while (v96);
              }
            }
            v70 = v82;
          }
          if ((v70 & (v70 - 1)) != 0)
          {
            if (v70 <= v69)
              v72 = v69 % v70;
            else
              v72 = v69;
          }
          else
          {
            v72 = ((_DWORD)v70 - 1) & v69;
          }
LABEL_176:
          v99 = *(_QWORD *)(a1 + 32);
          v100 = *(_QWORD **)(v99 + 8 * v72);
          if (v100)
          {
            *v76 = *v100;
            v46 = v128;
            goto LABEL_184;
          }
          *v76 = *v118;
          *v118 = v76;
          *(_QWORD *)(v99 + 8 * v72) = v118;
          v46 = v128;
          if (*v76)
          {
            v101 = *(_QWORD *)(*v76 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v101 >= v70)
                v101 %= v70;
            }
            else
            {
              v101 &= v70 - 1;
            }
            v100 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v101);
LABEL_184:
            *v100 = v76;
          }
          ++*(_QWORD *)(a1 + 56);
          v51 = v122;
          v47 = v123;
          v52 = v121;
          goto LABEL_32;
        }
        if (*((unsigned __int16 *)__dst + v60) > 0xFB9Eu)
        {
          if (*((unsigned __int16 *)__dst + v60) > 0xFC9Eu)
          {
            v64 = v61 + 97;
            if ((v61 - 64671) > 0x3E)
              goto LABEL_43;
            if (((1 << v64) & 0x81C000000000CLL) == 0)
            {
              if (((1 << v64) & 0x4044200000000021) == 0)
                goto LABEL_43;
LABEL_79:
              v55 = 4;
            }
          }
          else
          {
            v63 = (v61 - 64606);
            if (v63 <= 0x36)
            {
              if (((1 << (v61 - 94)) & 0x1F) != 0)
                goto LABEL_62;
              if (((1 << (v61 - 94)) & 0x40000000208000) != 0)
                goto LABEL_73;
              if (v63 == 47)
              {
LABEL_46:
                v55 = 14;
                goto LABEL_80;
              }
            }
            switch(v61)
            {
              case 64423:
              case 64431:
                goto LABEL_46;
              case 64424:
                goto LABEL_79;
              case 64425:
LABEL_59:
                v55 = 6;
                break;
              case 64426:
              case 64427:
              case 64428:
              case 64429:
              case 64430:
                goto LABEL_43;
              default:
                v68 = 64415;
LABEL_198:
                if (v61 != v68)
                  goto LABEL_43;
                goto LABEL_46;
            }
          }
        }
        else if (*((unsigned __int16 *)__dst + v60) <= 0xFB66u)
        {
          if (*((unsigned __int16 *)__dst + v60) <= 0xFB56u)
          {
            if ((v61 - 1611) >= 8)
            {
              if (v61 == 1600)
              {
                v55 = 16;
LABEL_102:
                v65 = 0;
                goto LABEL_103;
              }
              goto LABEL_43;
            }
LABEL_62:
            v55 = 15;
            goto LABEL_80;
          }
          if (v61 == 64343)
          {
LABEL_73:
            v55 = 13;
            goto LABEL_80;
          }
          if (v61 == 64344)
            goto LABEL_79;
          if (v61 != 64345)
            goto LABEL_43;
LABEL_72:
          v55 = 9;
        }
        else if (*((unsigned __int16 *)__dst + v60) <= 0xFB7Bu)
        {
          switch(*((_WORD *)__dst + v60))
          {
            case 0xFB67:
              goto LABEL_73;
            case 0xFB68:
            case 0xFB6C:
              goto LABEL_79;
            case 0xFB69:
              goto LABEL_72;
            case 0xFB6A:
              goto LABEL_43;
            case 0xFB6B:
              goto LABEL_46;
            case 0xFB6D:
LABEL_68:
              v55 = 10;
              break;
            default:
              v68 = 64379;
              goto LABEL_198;
          }
        }
        else
        {
          switch(*((_WORD *)__dst + v60))
          {
            case 0xFB89:
            case 0xFB8D:
LABEL_52:
              v55 = 11;
              break;
            case 0xFB8A:
            case 0xFB8C:
            case 0xFB8E:
            case 0xFB8F:
            case 0xFB90:
            case 0xFB91:
            case 0xFB92:
              goto LABEL_43;
            case 0xFB8B:
            case 0xFB93:
              goto LABEL_46;
            case 0xFB94:
              goto LABEL_79;
            case 0xFB95:
              goto LABEL_68;
            default:
              if (v61 == 64380)
                goto LABEL_79;
              if (v61 != 64381)
                goto LABEL_43;
LABEL_78:
              v55 = 5;
              break;
          }
        }
LABEL_80:
        v65 = 1;
        if (v61 <= 64620)
        {
          v66 = (v61 - 64343) > 0x3E || ((1 << (v61 - 87)) & 0x5054005000550005) == 0;
          if (v66 && ((v61 - 64415) > 0x10 || ((1 << (v61 + 97)) & 0x10501) == 0))
          {
            if (v61 == 32)
            {
              *((_DWORD *)__p + v35) = 2;
              goto LABEL_32;
            }
            goto LABEL_102;
          }
        }
        else
        {
          switch(v61)
          {
            case 65154:
            case 65156:
            case 65158:
            case 65160:
            case 65162:
            case 65164:
            case 65166:
            case 65168:
            case 65170:
            case 65172:
            case 65174:
            case 65176:
            case 65178:
            case 65180:
            case 65182:
            case 65184:
            case 65186:
            case 65188:
            case 65190:
            case 65192:
            case 65194:
            case 65196:
            case 65198:
            case 65200:
            case 65202:
            case 65204:
            case 65206:
            case 65208:
            case 65210:
            case 65212:
            case 65214:
            case 65216:
            case 65218:
            case 65220:
            case 65222:
            case 65224:
            case 65226:
            case 65228:
            case 65230:
            case 65232:
            case 65234:
            case 65236:
            case 65238:
            case 65240:
            case 65242:
            case 65244:
            case 65246:
            case 65248:
            case 65250:
            case 65252:
            case 65254:
            case 65256:
            case 65258:
            case 65260:
            case 65262:
            case 65264:
            case 65266:
            case 65268:
            case 65270:
            case 65272:
            case 65274:
            case 65276:
              break;
            case 65155:
            case 65157:
            case 65159:
            case 65161:
            case 65163:
            case 65165:
            case 65167:
            case 65169:
            case 65171:
            case 65173:
            case 65175:
            case 65177:
            case 65179:
            case 65181:
            case 65183:
            case 65185:
            case 65187:
            case 65189:
            case 65191:
            case 65193:
            case 65195:
            case 65197:
            case 65199:
            case 65201:
            case 65203:
            case 65205:
            case 65207:
            case 65209:
            case 65211:
            case 65213:
            case 65215:
            case 65217:
            case 65219:
            case 65221:
            case 65223:
            case 65225:
            case 65227:
            case 65229:
            case 65231:
            case 65233:
            case 65235:
            case 65237:
            case 65239:
            case 65241:
            case 65243:
            case 65245:
            case 65247:
            case 65249:
            case 65251:
            case 65253:
            case 65255:
            case 65257:
            case 65259:
            case 65261:
            case 65263:
            case 65265:
            case 65267:
            case 65269:
            case 65271:
            case 65273:
            case 65275:
              goto LABEL_102;
            default:
              if ((v61 - 64621) > 0x27 || ((1 << (v61 - 109)) & 0x8100000041) == 0)
                goto LABEL_102;
              break;
          }
        }
LABEL_103:
        *((_DWORD *)__p + v35) = v65;
        if (v61 > 65153)
        {
          switch(v61)
          {
            case 65154:
            case 65156:
            case 65158:
            case 65160:
            case 65162:
            case 65164:
            case 65166:
            case 65168:
            case 65170:
            case 65172:
            case 65174:
            case 65176:
            case 65178:
            case 65180:
            case 65182:
            case 65184:
            case 65186:
            case 65188:
            case 65190:
            case 65192:
            case 65194:
            case 65196:
            case 65198:
            case 65200:
            case 65202:
            case 65204:
            case 65206:
            case 65208:
            case 65210:
            case 65212:
            case 65214:
            case 65216:
            case 65218:
            case 65220:
            case 65222:
            case 65224:
            case 65226:
            case 65228:
            case 65230:
            case 65232:
            case 65234:
            case 65236:
            case 65238:
            case 65240:
            case 65242:
            case 65244:
            case 65246:
            case 65248:
            case 65250:
            case 65252:
            case 65254:
            case 65256:
            case 65258:
            case 65260:
            case 65262:
            case 65264:
            case 65266:
            case 65268:
            case 65270:
            case 65272:
            case 65274:
            case 65276:
              goto LABEL_105;
            default:
              goto LABEL_32;
          }
          goto LABEL_32;
        }
        if ((v61 - 64343) <= 0x3E && ((1 << (v61 - 87)) & 0x5054005000550005) != 0)
          goto LABEL_105;
        if ((v61 - 64415) <= 0x10 && ((1 << (v61 + 97)) & 0x10501) != 0)
          goto LABEL_105;
        v83 = v61 - 64621;
        if (v83 <= 0x27 && ((1 << v83) & 0x8100000041) != 0)
          goto LABEL_105;
LABEL_32:
        v56 = (unsigned __int16 *)((char *)&unk_184950634 + 4 * word_184950546[v55 + 17 * v46]);
        v46 = *v56;
        v57 = v56[1];
        if ((v57 & 0x7F) != 0)
          v36[v35] = v57 & 0x7F;
        v58 = (v57 >> 7) & 0x7F;
        if (v58)
          *v49 = v58;
        if ((v57 & 0x8000u) != 0)
          v49 = &v36[v35];
        v35 += v52;
        if (v50-- <= 1)
        {
          v104 = (int *)__p;
          v105 = 0.5;
          if (!v116)
            v105 = -0.5;
          v106 = 0.8;
          if (!v116)
            v106 = 0.0;
          v107 = vdupq_lane_s64(*(uint64_t *)&v105, 0);
          v108 = 24 * a7 + 24 * v47 + v115 + 16;
          while (1)
          {
            v110 = *v104++;
            v109 = v110;
            if (v110 == 2)
              break;
            if (v109 == 1)
            {
              if (*v36 == 1)
              {
                *(_QWORD *)(v108 - 16) = 0;
                *(double *)(v108 - 8) = v106;
                *(_WORD *)v108 = 0;
              }
              else if (!*v36)
              {
                v112 = 0.0;
                if (v116)
                {
                  *(_BYTE *)(v108 + 2) = 1;
                  v112 = 0.5;
                }
                *(_QWORD *)(v108 - 16) = 0;
                *(double *)(v108 - 8) = v112;
                *(_WORD *)v108 = 1;
              }
              goto LABEL_213;
            }
            if (!v109)
            {
              v111 = (_QWORD *)(v108 - 16);
              *v111 = 0;
              v111[1] = 0;
LABEL_212:
              *(_WORD *)v108 = 2;
            }
LABEL_213:
            *(float64x2_t *)(v108 - 16) = vmulq_n_f64(*(float64x2_t *)(v108 - 16), v45);
            v108 += 24;
            ++v36;
            if (!--a5)
              goto LABEL_221;
          }
          *(int64x2_t *)(v108 - 16) = v107;
          goto LABEL_212;
        }
      }
    }
LABEL_221:
    p_dst = &__dst;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&p_dst);
    __dst = v136;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__dst);
    if (__p)
    {
      v140 = __p;
      if (v142 > __p || &v144 <= __p)
        operator delete(__p);
    }
    v19 = 1;
  }
  __p = (char *)&v159 + 8;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  return v19;
}

void TAATJustEngine::~TAATJustEngine(TAATJustEngine *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E15DD318;
  v4 = *((_QWORD *)this + 8);
  v2 = (_QWORD *)((char *)this + 64);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)v2, v3);

}

{
  TAATJustEngine::~TAATJustEngine(this);
  JUMPOUT(0x186DC03ACLL);
}

void TAATJustEngine::TAATJustEngine(TAATJustEngine *this, const TRun *a2)
{
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  const __CFData *v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  void *v9;
  id v10;
  const __CFData *v11;
  const __CFData *v12;
  const UInt8 *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  _WORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __int16 v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  _WORD *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unsigned __int16 *v37;
  BOOL v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char *v41;
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char *v55;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  __int16 v68;

  *(_QWORD *)this = &off_1E15DD318;
  *((_QWORD *)this + 1) = a2;
  v3 = (unint64_t *)((char *)this + 16);
  v4 = atomic_load((unint64_t *)a2 + 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 40) + 400) + 480))(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 400), 1786082164);
  v5 = (void *)atomic_load(v3);
  v6 = v5;
  v7 = v6;
  if (v6)
    BytePtr = CFDataGetBytePtr(v6);
  else
    BytePtr = 0;

  *((_QWORD *)this + 3) = BytePtr;
  v9 = (void *)atomic_load(v3);
  v10 = v9;
  v11 = (const __CFData *)v10;
  if (!v11)
  {

    goto LABEL_8;
  }
  v12 = v11;
  v13 = CFDataGetBytePtr(v11);

  if (!v13)
  {
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  v14 = (unint64_t)&v13[CFDataGetLength((CFDataRef)v10)];
LABEL_9:

  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 4) = v14;
  *(_OWORD *)((char *)this + 56) = 0u;
  v15 = (_DWORD *)*((_QWORD *)this + 3);
  if (!v15)
    return;
  if ((unint64_t)v15 + 10 > v14 || *v15 != 256)
    goto LABEL_75;
  v16 = *((_QWORD *)this + 1);
  v17 = 8;
  if (!*(_BYTE *)(v16 + 90))
    v17 = 6;
  v18 = *(unsigned __int16 *)((char *)v15 + v17);
  if (!v18)
    return;
  v19 = (unsigned __int16 *)((char *)v15 + __rev16(v18));
  *((_QWORD *)this + 5) = v19;
  if ((unint64_t)(v19 + 12) > v14)
    goto LABEL_75;
  v20 = (char *)v15 + (bswap32(v19[1]) >> 16);
  *((_QWORD *)this + 7) = v20;
  if ((unint64_t)(v20 + 1) > v14)
    goto LABEL_75;
  if (v19[2])
  {
    v21 = (char *)v15 + __rev16(v19[2]);
    *((_QWORD *)this + 6) = v21;
    if ((unint64_t)(v21 + 18) > v14)
      goto LABEL_75;
  }
  v22 = (uint64_t *)((char *)this + 64);
  if (!*v19)
  {
    v65 = (_QWORD *)operator new();
    v65[1] = 0;
    v65[2] = 0;
    *v65 = 0;
    v66 = *v22;
    *v22 = (uint64_t)v65;
    if (v66)
      std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)v22, v66);
    return;
  }
  v23 = (_WORD *)((char *)v15 + __rev16(*v19));
  if ((unint64_t)(v23 + 13) > v14)
    goto LABEL_75;
  v24 = *(_QWORD *)(v16 + 208);
  v25 = *(_QWORD *)(*(_QWORD *)(v16 + 216) + 16);
  v26 = *(_QWORD *)(v16 + 200);
  v27 = (_QWORD *)operator new();
  v27[1] = 0;
  v27[2] = 0;
  *v27 = 0;
  v28 = *v22;
  *v22 = (uint64_t)v27;
  if (v28)
  {
    std::default_delete<std::vector<unsigned short>>::operator()[abi:nn180100]((uint64_t)v22, v28);
    v27 = (_QWORD *)*v22;
  }
  v68 = 0;
  std::vector<unsigned short>::resize((uint64_t)v27, v24, &v68);
  v29 = v23[1];
  v30 = (v29 & 0x40) == 0;
  if ((v29 & 0x40) != 0)
    v31 = v24 - 1;
  else
    v31 = 0;
  v32 = 1;
  if (!v30)
    v32 = -1;
  v33 = v23 + 4;
  v34 = *((_QWORD *)this + 3);
  v35 = *((_QWORD *)this + 4);
  v36 = v34 > (unint64_t)(v23 + 4) || (unint64_t)(v23 + 8) > v35;
  if (v36
    || ((v37 = (_WORD *)((char *)v33 + (bswap32((unsigned __int16)v23[5]) >> 16)), v34 <= (unint64_t)v37)
      ? (v38 = (unint64_t)(v37 + 3) > v35)
      : (v38 = 1),
        v38))
  {
LABEL_75:
    v67 = atomic_load((unint64_t *)(*((_QWORD *)this + 1) + 56));
    CFLog();
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v67 + 40) + 400) + 488))(*(_QWORD *)(*(_QWORD *)(v67 + 40) + 400), 1786082164);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 6) = 0;
    return;
  }
  v39 = v37 + 2;
  v40 = bswap32(v37[1]) >> 16;
  v41 = (char *)v37 + v40 + 4;
  if ((unint64_t)v41 <= v35 && v41 >= (char *)v39)
    v43 = v40;
  else
    v43 = v35 - ((_WORD)v37 + 4);
  if ((v24 & 0x8000000000000000) == 0)
  {
    v44 = v25 + 2 * v26;
    v45 = **((_QWORD **)this + 8);
    v46 = (_WORD *)(v45 + 2 * v31);
    v47 = bswap32(*v37) >> 16;
    v48 = (char *)v33 + (bswap32((unsigned __int16)v23[7]) >> 16);
    v49 = bswap32((unsigned __int16)v23[6]) >> 16;
    while (1)
    {
      if (v24)
      {
        v50 = *(_QWORD *)(v16 + 216);
        v51 = *(_QWORD *)(v16 + 200);
        if (*(__int16 *)(*(_QWORD *)(v50 + 16) + 2 * v51 + 2 * v31) == -1
          || (*(_DWORD *)(*(_QWORD *)(v50 + 40) + 4 * v51 + 4 * v31) & 0x20) != 0)
        {
          v52 = 2;
        }
        else if (v34 > (unint64_t)v39)
        {
          v52 = 1;
        }
        else
        {
          v52 = 1;
          if (v43 > (unsigned __int16)(*(_WORD *)(v44 + 2 * v31) - v47))
            v52 = *((unsigned __int8 *)v39 + (unsigned __int16)(*(_WORD *)(v44 + 2 * v31) - v47));
        }
      }
      else
      {
        v52 = 0;
      }
      v53 = (unsigned __int8 *)v33 + v52 + (unsigned __int16)v49;
      if (v34 > (unint64_t)v53 || (unint64_t)(v53 + 1) > v35)
        break;
      v55 = &v48[4 * *v53];
      if (v34 > (unint64_t)v55 || (unint64_t)(v55 + 4) > v35)
        break;
      v57 = *(unsigned __int16 *)v55;
      v58 = bswap32(*((unsigned __int16 *)v55 + 1));
      v59 = HIWORD(v58) & 0x7F;
      if (v59)
        *(_WORD *)(v45 + 2 * v31) = v59;
      v60 = v58 >> 16;
      v61 = (v60 >> 7) & 0x7F;
      if (v61)
        *v46 = v61;
      v49 = bswap32(v57) >> 16;
      if (v60 < 0)
        v46 = (_WORD *)(v45 + 2 * v31);
      v62 = (v60 & 0x4000) == 0;
      v63 = v24 > 1;
      v24 -= v62;
      if ((v63 & v62) != 0)
        v64 = v32;
      else
        v64 = 0;
      v31 += v64;
      if ((v24 & 0x8000000000000000) != 0)
        return;
    }
    goto LABEL_75;
  }
}

uint64_t TAATJustEngine::GenerateMaximas(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8, int a9)
{
  uint64_t v9;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  SFNTLookupTable *v21;
  const SFNTLookupTable *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(TAATLookupTable *, unsigned __int16, unint64_t *);
  TAATLookupTable *v33;
  float64x2_t *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  BOOL v46;
  int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  float32x2_t v53;
  uint64_t v54;
  double v56;
  char v57;
  uint64_t (*v58)(TAATLookupTable *, unsigned __int16, unint64_t *);
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;

  v9 = a1[3];
  if (v9)
  {
    v9 = a1[5];
    if (v9)
    {
      v15 = *a6;
      v16 = atomic_load((unint64_t *)(a1[1] + 56));
      v56 = *(double *)(*(_QWORD *)(v16 + 40) + 16);
      v17 = a1[1];
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 216) + 16);
      v19 = *(_QWORD *)(v17 + 200);
      *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v60 = v20;
      v61 = v20;
      v21 = (SFNTLookupTable *)a1[4];
      v22 = (const SFNTLookupTable *)(a1[5] + 6);
      v58 = TAATLookupTable::BadTable;
      v59 = 0;
      *((_QWORD *)&v61 + 1) = 0;
      v62 = 0xAAAAAAAAAAAAFFFFLL;
      TAATLookupTable::SetTable((uint64_t)&v58, v22, v21);
      if (a5)
      {
        v57 = 0;
        v23 = v15 + 24 * a7;
        v24 = v18 + 2 * v19;
        v25 = a4 + a5;
        if (a8)
          v26 = 1.0;
        else
          v26 = -1.0;
        if (a8)
          v27 = 1.0;
        else
          v27 = 0.0;
        v28 = (float32x2_t)vdup_n_s32(0x37800000u);
        do
        {
          v29 = *(_QWORD *)(v17 + 216);
          v30 = *(_QWORD *)(v17 + 200);
          if (*(__int16 *)(*(_QWORD *)(v29 + 16) + 2 * v30 + 2 * a4) == -1
            || (*(_DWORD *)(*(_QWORD *)(v29 + 40) + 4 * v30 + 4 * a4) & 0x20) != 0)
          {
            *(_WORD *)(v23 + 24 * a4 + 16) = 4;
          }
          else
          {
            v31 = *(unsigned __int16 *)(v24 + 2 * a4);
            v63 = 0xAAAAAAAAAAAAAAAALL;
            v32 = v58;
            v33 = (TAATLookupTable *)((char *)&v58 + (v59 >> 1));
            if ((v59 & 1) != 0)
              v32 = *(uint64_t (**)(TAATLookupTable *, unsigned __int16, unint64_t *))(*(_QWORD *)v33 + v58);
            v34 = (float64x2_t *)(v23 + 24 * a4);
            v35 = (unsigned __int16 *)v32(v33, v31, &v63);
            if (!v35)
              goto LABEL_34;
            v36 = bswap32(*v35) >> 16;
            v37 = a1[7];
            v38 = (unsigned int *)(v37 + v36);
            v39 = a1[4];
            v40 = a1[3] > (unint64_t)(v37 + v36) || v37 + v36 + 28 > v39;
            if (!v40
              && ((v41 = (_QWORD *)a1[8], *v41 == v41[1]) ? (v42 = 0) : (v42 = *(unsigned __int16 *)(*v41 + 2 * a4)),
                  (v43 = v38 + 1,
                   v44 = bswap32(*v38),
                   v45 = (unint64_t)&v43[6 * v44],
                   v45 >= (unint64_t)v43)
                ? (v46 = v45 > v39)
                : (v46 = 1),
                  v46 ? (v47 = (v39 - (unint64_t)v43) / 0x18) : (v47 = v44),
                  v47))
            {
              v48 = (unsigned __int16 *)(v37 + v36 + 26);
              while (v42 != bswap32(*(_DWORD *)(v48 - 11)))
              {
                v48 += 12;
                if (!--v47)
                  goto LABEL_34;
              }
              if (a8)
              {
                v50 = bswap32(*(v48 - 1)) >> 16;
                v51 = bswap32(*(_DWORD *)(v48 - 9));
                v52 = (unsigned int *)(v48 - 5);
              }
              else
              {
                v50 = bswap32(*v48) >> 16;
                v51 = bswap32(*(_DWORD *)(v48 - 7));
                v52 = (unsigned int *)(v48 - 3);
              }
              v53 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(bswap32(*v52), v51)), v28);
              if (v53.f32[0] != 0.0 || v53.f32[1] != 0.0)
              {
                *v34 = vmulq_n_f64(vcvtq_f64_f32(v53), v56);
                v57 = 1;
              }
              v54 = v23 + 24 * a4;
              *(_WORD *)(v54 + 16) = v50 & 3;
              *(_BYTE *)(v54 + 18) = (v50 & 0x1000) != 0;
            }
            else
            {
LABEL_34:
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 216) + 40)
                              + 4 * *(_QWORD *)(a1[1] + 200)
                              + 4 * a4) & 1) != 0)
              {
                v34->f64[0] = v26;
                v49 = v23 + 24 * a4;
                *(double *)(v49 + 8) = v27;
                *(_WORD *)(v49 + 16) = 1;
              }
              *(_BYTE *)(v23 + 24 * a4 + 18) = 0;
            }
          }
          ++a4;
        }
        while (a4 != v25);
      }
      else
      {
        v57 = 0;
      }
      LOBYTE(v9) = (a9 == 0) | v57;
    }
  }
  return v9 & 1;
}

uint64_t TCFBase<TLine>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TLine>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE7298 = "CTLine";
    qword_1ECDE72A0 = 0;
    unk_1ECDE72A8 = 0;
    qword_1ECDE72B0 = (uint64_t)TCFBase<TLine>::ClassDestruct;
    unk_1ECDE72B8 = TCFBase<TLine>::ClassEqual;
    qword_1ECDE72C0 = (uint64_t)TCFBase<TLine>::ClassHash;
    unk_1ECDE72C8 = 0;
    qword_1ECDE72D0 = (uint64_t)TCFBase<TLine>::ClassDebug;
    unk_1ECDE72D8 = 0;
    qword_1ECDE72E0 = 0;
    unk_1ECDE72E8 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TLine>::fTypeID = result;
  return result;
}

uint64_t TCFBase<TRun>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TRun>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE7238 = "CTRun";
    qword_1ECDE7240 = 0;
    unk_1ECDE7248 = 0;
    qword_1ECDE7250 = (uint64_t)TCFBase<TRun>::ClassDestruct;
    unk_1ECDE7258 = TCFBase<TRun>::ClassEqual;
    qword_1ECDE7260 = (uint64_t)TCFBase<TRun>::ClassHash;
    unk_1ECDE7268 = 0;
    qword_1ECDE7270 = (uint64_t)TCFBase<TRun>::ClassDebug;
    unk_1ECDE7278 = 0;
    qword_1ECDE7280 = 0;
    unk_1ECDE7288 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TRun>::fTypeID = result;
  return result;
}

void TLine::LinkRunsWithOrder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  char *v48;
  _OWORD *v49;
  int64x2_t v50;
  char *v51;
  _OWORD v52[15];
  _QWORD v53[5];

  v53[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  v3 = a1[3];
  v4 = (v3 - v2) >> 3;
  if (v4 == (a2[1] - *a2) >> 3)
  {
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v52[14] = v7;
    v52[13] = v7;
    v52[12] = v7;
    v52[11] = v7;
    v52[10] = v7;
    v52[9] = v7;
    v52[8] = v7;
    v52[7] = v7;
    v52[6] = v7;
    v52[5] = v7;
    v52[4] = v7;
    v52[3] = v7;
    v52[2] = v7;
    v52[1] = v7;
    v52[0] = v7;
    v51 = 0;
    v50 = 0uLL;
    v53[0] = v52;
    v44 = (v3 - v2) >> 3;
    v45 = v3 - v2;
    if (v3 != v2)
    {
      if (v3 - v2 < 0)
LABEL_49:
        abort();
      v49 = v52;
      v8 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v52, (v3 - v2) >> 3);
      v9 = v50.i64[1];
      v10 = v50.i64[0];
      if (v50.i64[1] == v50.i64[0])
      {
        v13 = vdupq_n_s64(v50.u64[1]);
        v11 = v8;
      }
      else
      {
        v11 = v8;
        do
        {
          v12 = *(_QWORD *)(v9 - 8);
          v9 -= 8;
          *((_QWORD *)v11 - 1) = v12;
          v11 -= 8;
        }
        while (v9 != v10);
        v13 = v50;
      }
      v50.i64[0] = (uint64_t)v11;
      v50.i64[1] = (uint64_t)v8;
      v47 = v13;
      v14 = v51;
      v51 = &v8[8 * v4];
      v48 = v14;
      v46 = v13.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v46);
      v2 = a1[2];
      v3 = a1[3];
    }
    if (v2 != v3)
    {
      v15 = (char *)v50.i64[1];
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v2 + 48);
        if (v15 >= v51)
        {
          v17 = (uint64_t)&v15[-v50.i64[0]] >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_49;
          v18 = (uint64_t)&v51[-v50.i64[0]] >> 2;
          if (v18 <= v17 + 1)
            v18 = v17 + 1;
          if ((unint64_t)&v51[-v50.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v49 = v52;
          if (v19)
            v20 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v52, v19);
          else
            v20 = 0;
          v21 = &v20[8 * v17];
          v22 = &v20[8 * v19];
          v48 = v22;
          *(_QWORD *)v21 = v16;
          v15 = v21 + 8;
          v47.i64[1] = (uint64_t)(v21 + 8);
          v23 = v50.i64[1];
          v24 = v50.i64[0];
          if (v50.i64[1] == v50.i64[0])
          {
            v26 = vdupq_n_s64(v50.u64[1]);
          }
          else
          {
            do
            {
              v25 = *(_QWORD *)(v23 - 8);
              v23 -= 8;
              *((_QWORD *)v21 - 1) = v25;
              v21 -= 8;
            }
            while (v23 != v24);
            v26 = v50;
            v15 = (char *)v47.i64[1];
            v22 = v48;
          }
          v50.i64[0] = (uint64_t)v21;
          v50.i64[1] = (uint64_t)v15;
          v47 = v26;
          v27 = v51;
          v51 = v22;
          v48 = v27;
          v46 = v26.i64[0];
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *(_QWORD *)v15 = v16;
          v15 += 8;
        }
        v50.i64[1] = (uint64_t)v15;
        v2 += 8;
      }
      while (v2 != v3);
    }
    if (v45 >= 1)
    {
      v28 = 0;
      v29 = v44;
      if (v44 <= 1)
        v29 = 1;
      v30 = *a2;
      do
      {
        v31 = *(_QWORD *)(v30 + 8 * v28);
        v32 = v28;
        while (v28 != v31)
        {
          v33 = v32;
          v32 = v31;
          v34 = v50.i64[0];
          v35 = *(_QWORD *)(v50.i64[0] + 8 * v33);
          *(_QWORD *)(v50.i64[0] + 8 * v33) = *(_QWORD *)(v50.i64[0] + 8 * v32);
          *(_QWORD *)(v34 + 8 * v32) = v35;
          v30 = *a2;
          *(_QWORD *)(*a2 + 8 * v33) = v33;
          v31 = *(_QWORD *)(v30 + 8 * v32);
        }
        *(_QWORD *)(v30 + 8 * v32) = v32;
        ++v28;
      }
      while (v28 != v29);
    }
    v36 = v50;
    if (v50.i64[0] != v50.i64[1])
    {
      v37 = a1 + 12;
      v38 = a1[11];
      v39 = (uint64_t *)v50.i64[0];
      while (1)
      {
        v40 = *v39;
        if (v38)
          break;
        v41 = 0;
        v42 = 0;
        a1[11] = v40;
        v38 = v40;
        v43 = a1 + 12;
        if (v40)
          goto LABEL_42;
LABEL_43:
        *v43 = 0;
        ++v39;
        v38 = v42;
        if (v39 == (uint64_t *)v36.i64[1])
          goto LABEL_44;
      }
      v41 = *v37;
      *(_QWORD *)(*v37 + 24) = v40;
LABEL_42:
      *(_QWORD *)(v40 + 32) = v41;
      *v37 = v40;
      v43 = (_QWORD *)(v40 + 24);
      v42 = v38;
      goto LABEL_43;
    }
LABEL_44:
    if (v36.i64[0])
    {
      v50.i64[1] = v36.i64[0];
      if ((unint64_t)v52 > v36.i64[0] || (unint64_t)v53 <= v36.i64[0])
        operator delete((void *)v36.i64[0]);
    }
  }
}

uint64_t TRun::DeleteGlyphs(TRun *this, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (*((_DWORD *)this + 64))
  {
    if ((*((_BYTE *)this + 224) & 1) != 0)
      v7 = TRun::SetAttachmentsRightToLeft<false>((uint64_t)this, a2, a3, a4);
    else
      v7 = TRun::SetAttachmentsLeftToRight<false>((uint64_t)this, a2, a3, a4);
  }
  else if ((*((_BYTE *)this + 224) & 1) != 0)
  {
    v7 = TRun::SetAttachmentsRightToLeft<true>(this, a2, (uint64_t *)a3, a4);
  }
  else
  {
    v7 = TRun::SetAttachmentsLeftToRight<true>((uint64_t)this, a2, (uint64_t)a3, a4);
  }
  v8 = v7;
  TStorageRange::DeleteGlyphs((uint64_t)this + 192, a2, (const uint64_t *)a3);
  return v8;
}

uint64_t TRun::SetAttachmentsLeftToRight<true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  char *v25;
  uint64_t NextGlyphIndex;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  _BYTE v47[32];
  __int128 v48;

  *((_QWORD *)&v48 + 1) = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48) + 8 * *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v47[16] = v9;
  *(_OWORD *)v47 = v9;
  v46 = v9;
  *(_OWORD *)&v45[16] = v9;
  *(_OWORD *)v45 = v9;
  v44 = v9;
  *(_OWORD *)&v43[16] = v9;
  *(_OWORD *)v43 = v9;
  v42 = v9;
  v40 = v9;
  v41 = v9;
  v38 = v9;
  v39 = v9;
  v36 = v9;
  v37 = v9;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v48 = &v36;
  if (a2 < 2)
  {
    v15 = a2 - 1;
  }
  else
  {
    for (i = a2; i > 1; --i)
    {
      v11 = *(_QWORD *)(a3 - 8 + 8 * i);
      v12 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v11);
      v13 = v11 < 1;
      v14 = v11 - 1;
      if (!v13)
        objc_msgSend(*(id *)(a1 + 216), "setAttachmentCount:atIndex:", v12 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v14) + 1, *(_QWORD *)(a1 + 200) + v14);
    }
    v15 = 0;
  }
  v16 = *(void ***)(a3 + 8 * v15);
  v17 = *(_QWORD *)(v8 + 8 * (_QWORD)v16);
  v18 = *(_QWORD *)(a1 + 8);
  if (v17 <= a4)
  {
    v23 = *(_QWORD *)(a1 + 16) + v18;
    v32 = v16;
    v24 = v16;
    while (1)
    {
      if (*(int *)(a1 + 256) > 1)
      {
        NextGlyphIndex = TRun::FindNextGlyphIndex((TRun *)a1, v17, (uint64_t *)&v32);
      }
      else
      {
        if ((*(_BYTE *)(a1 + 224) & 1) != 0)
        {
          v25 = (char *)v24 - 1;
          v32 = (void **)((char *)v24 - 1);
          if ((uint64_t)v24 <= 0)
          {
LABEL_15:
            NextGlyphIndex = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
            goto LABEL_19;
          }
        }
        else
        {
          v25 = (char *)v24 + 1;
          v32 = (void **)((char *)v24 + 1);
          if ((uint64_t)v24 + 1 >= *(_QWORD *)(a1 + 208))
            goto LABEL_15;
        }
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 48)
                                   + 8 * *(_QWORD *)(a1 + 200)
                                   + 8 * (_QWORD)v25);
      }
LABEL_19:
      if (NextGlyphIndex >= v23)
      {
        v30 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", (char *)v16 + *(_QWORD *)(a1 + 200)) + 1;
        goto LABEL_27;
      }
      v24 = v32;
      v27 = *(_QWORD **)(a1 + 216);
      v28 = *(_QWORD *)(a1 + 200);
      if (a2 < 2
        || *(__int16 *)(v27[2] + 2 * v28 + 2 * (_QWORD)v32) != -1
        && (*(_DWORD *)(v27[5] + 4 * v28 + 4 * (_QWORD)v32) & 0x20) == 0)
      {
        objc_msgSend(v27, "setStringIndex:atIndex:", v17, (char *)v32 + v28, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, *(_QWORD *)v43, *(_OWORD *)&v43[8], *(_QWORD *)&v43[24], v44,
          *(_QWORD *)v45,
          *(_OWORD *)&v45[8],
          *(_QWORD *)&v45[24],
          v46,
          *(_QWORD *)v47,
          *(_OWORD *)&v47[8],
          *(_QWORD *)&v47[24],
          v48);
        v29 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", (char *)v16 + *(_QWORD *)(a1 + 200));
        v20 = v29 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", (char *)v24 + *(_QWORD *)(a1 + 200)) + 1;
        v21 = *(void **)(a1 + 216);
        v22 = (uint64_t)v24 + *(_QWORD *)(a1 + 200);
        goto LABEL_24;
      }
    }
  }
  v19 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", (char *)v16 + *(_QWORD *)(a1 + 200));
  if (v17 <= v18)
  {
    v30 = v19 + 1;
  }
  else
  {
    v20 = v19 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", (char *)v16 + *(_QWORD *)(a1 + 200) - 1) + 1;
    v21 = *(void **)(a1 + 216);
    v22 = (uint64_t)v16 + *(_QWORD *)(a1 + 200) - 1;
LABEL_24:
    objc_msgSend(v21, "setAttachmentCount:atIndex:", v20, v22);
    v30 = 0;
  }
LABEL_27:
  v32 = (void **)&v33;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v32);
  return v30;
}

uint64_t TStorageRange::DeleteGlyphs(uint64_t this, uint64_t a2, const uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v5 = this;
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 24);
  v8 = *(_QWORD *)(v7 + 32);
  if (v8 || (v11 = *(_QWORD *)(v7 + 24)) == 0)
  {
    v9 = 0;
    v10 = v8 + 16 * v6;
  }
  else
  {
    v10 = v11 + 8 * v6;
    v9 = 1;
  }
  v12 = *a3;
  if (a2 < 2)
  {
    v21 = 0;
  }
  else
  {
    v13 = 0;
    v14 = v6 + v12;
    v24 = a2 - 1;
    v15 = 1 - a2;
    v16 = a3 + 1;
    do
    {
      v17 = *(_QWORD *)(v5 + 8);
      if (v9)
        v18 = 3;
      else
        v18 = 4;
      v19 = *v16++;
      *(double *)v5 = *(double *)v5 - *(double *)(v10 + ((v14 - v17) << v18));
      v20 = v19 + v17;
      this = objc_msgSend(*(id *)(v5 + 24), "moveGlyphsFromRange:toIndex:", v14 + 1, v19 + v17 - v14, v14 + v13--);
      v14 = v20;
    }
    while (v15 != v13);
    v21 = v24;
    v12 = a3[v24];
    v6 = *(_QWORD *)(v5 + 8);
  }
  v22 = 3;
  if (!v9)
    v22 = 4;
  *(double *)v5 = *(double *)v5 - *(double *)(v10 + (v12 << v22));
  v23 = *(_QWORD *)(v5 + 16);
  if (v23 - 1 > v12)
  {
    this = objc_msgSend(*(id *)(v5 + 24), "moveGlyphsFromRange:toIndex:", v12 + v6 + 1, v23 - 1 - v12, v12 + v6 - v21);
    v23 = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)(v5 + 16) = v23 - a2;
  return this;
}

CFArrayRef CTFontCopyAvailableTables(CTFontRef font, CTFontTableOptions options)
{
  const __CFArray *v2;
  id v4;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 464))(&v4);
  do
    v2 = (const __CFArray *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

void TBaseFont::CopyAvailableTables(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  CGFont *InitializedGraphicsFont;
  void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  uint64_t Count;
  int v9;
  const __CFAllocator *v10;
  unint64_t v11;
  const __CFArray *v12;
  int ValueAtIndex;
  const __CFArray *v15;
  CFMutableArrayRef MutableCopy;
  void *v17;
  void *v19;
  id v20;
  __CFArray *v21;
  unint64_t v23;
  id v24;
  id v25;

  InitializedGraphicsFont = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  v25 = CGFontCopyTableTags(InitializedGraphicsFont);
  v5 = (void *)atomic_load((unint64_t *)&v25);
  v6 = v5;
  if (!v6)
  {

    goto LABEL_16;
  }
  v7 = v6;
  Count = CFArrayGetCount(v6);

  if (!Count)
  {
LABEL_16:
    *a2 = 0;
    goto LABEL_17;
  }
  v24 = 0;
  v9 = *((_DWORD *)this + 44);
  if (Count >= 1)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = Count;
    while (1)
    {
      v12 = (const __CFArray *)atomic_load((unint64_t *)&v25);
      ValueAtIndex = CFArrayGetValueAtIndex(v12, v11 - 1);
      if ((TableFlagForIdentifier(ValueAtIndex) & v9) != 0)
      {
        if (!atomic_load((unint64_t *)&v24))
        {
          v15 = (const __CFArray *)atomic_load((unint64_t *)&v25);
          MutableCopy = CFArrayCreateMutableCopy(v10, Count, v15);
          do
            v17 = (void *)__ldaxr((unint64_t *)&v24);
          while (__stlxr((unint64_t)MutableCopy, (unint64_t *)&v24));

          if (!atomic_load((unint64_t *)&v24))
            goto LABEL_13;
          v19 = (void *)atomic_load((unint64_t *)&v24);
          v20 = v19;
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v25, v20);

        }
        v21 = (__CFArray *)atomic_load((unint64_t *)&v24);
        CFArrayRemoveValueAtIndex(v21, v11 - 1);
      }
      if (v11-- <= 1)
        goto LABEL_13;
    }
  }
  do
LABEL_13:
    v23 = __ldaxr((unint64_t *)&v25);
  while (__stlxr(0, (unint64_t *)&v25));
  *a2 = v23;

LABEL_17:
}

void `anonymous namespace'::PathObserver::HandleIntersectionAt(_QWORD *a1, int a2, int a3, double a4)
{
  double *v8;
  unint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  unint64_t v17;
  char *v18;

  v8 = (double *)a1[9];
  v9 = a1[10];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (double *)a1[8];
    v12 = ((char *)v8 - (char *)v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    if ((uint64_t)(v9 - (_QWORD)v11) >> 3 > v13)
      v13 = (uint64_t)(v9 - (_QWORD)v11) >> 3;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v16 = (double *)(a1 + 19);
    v15 = (char *)a1[19];
    v17 = (unint64_t)&v15[16 * v14];
    if (v17 <= (unint64_t)(a1 + 19))
    {
      *(_QWORD *)v16 = v17;
    }
    else
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(16 * v14);
    }
    v18 = &v15[16 * v12];
    *(double *)v18 = a4;
    *((_DWORD *)v18 + 2) = a2;
    *((_DWORD *)v18 + 3) = a3;
    v10 = (double *)(v18 + 16);
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
        v18 -= 16;
        v8 -= 2;
      }
      while (v8 != v11);
      v8 = (double *)a1[8];
      v9 = a1[10];
    }
    a1[8] = v18;
    a1[9] = v10;
    a1[10] = &v15[16 * v14];
    if (v8)
    {
      if (a1 + 11 <= (_QWORD *)v8 && v16 > v8)
      {
        if (v9 == *(_QWORD *)v16)
          *(_QWORD *)v16 = v8;
      }
      else
      {
        operator delete(v8);
      }
    }
  }
  else
  {
    *v8 = a4;
    v10 = v8 + 2;
    *((_DWORD *)v8 + 2) = a2;
    *((_DWORD *)v8 + 3) = a3;
  }
  a1[9] = v10;
}

BOOL TCFBase<TRunDelegate>::ClassEqual(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = *(_QWORD **)(a2 + 40);
  return !memcmp(v2, v3, 0x28uLL) && v2[5] == v3[5];
}

_QWORD *CTFontCreateForCharactersWithLanguageAndOption(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, __CFString *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;

  if (!a1)
    return 0;
  v12 = a1[5];
  (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 400) + 816))(*(_QWORD *)(v12 + 400));
  if (v13 != a3)
  {
    v24 = (id)0xAAAAAAAAAAAAAAAALL;
    v25 = 0;
    v15 = TCFBase<TFont>::Allocate();
    if (v15)
    {
      v16 = (_QWORD *)v15;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = TFont::Hash;
      v17 = v15 + 48;
      v16[4] = 0;
      v16[5] = v17;
      TFont::TFont(v17, (unsigned int *)v12, a2, a3, a4, a5, a6 == 0, &v25);
      v26 = v16;
      do
        v18 = (void *)__ldaxr((unint64_t *)&v26);
      while (__stlxr(0, (unint64_t *)&v26));
      v23 = v18;

    }
    else
    {
      v23 = 0;
    }
    do
      v19 = (void *)__ldaxr((unint64_t *)&v23);
    while (__stlxr(0, (unint64_t *)&v23));
    v24 = v19;

    v20 = v25;
    if (a6)
    {
      *a6 = v25;
      if (!v20)
        goto LABEL_16;
    }
    else if (v25 < a3)
    {
      do
LABEL_16:
        v21 = (void *)__ldaxr((unint64_t *)&v24);
      while (__stlxr(0, (unint64_t *)&v24));

      goto LABEL_18;
    }
    do
LABEL_18:
      v22 = __ldaxr((unint64_t *)&v24);
    while (__stlxr(0, (unint64_t *)&v24));

    return (_QWORD *)v22;
  }
  if (a6)
    *a6 = a3;
  return a1;
}

uint64_t TBaseFont::CharacterRangeCovered(TBaseFont *this, const unsigned __int16 *a2, uint64_t a3)
{
  unint64_t *CharacterSetInternal;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFCharacterSet *v11;
  uint64_t v12;
  uint64_t v14;

  if (a3 < 1)
    return 0;
  CharacterSetInternal = (unint64_t *)TBaseFont::GetCharacterSetInternal(this);
  if (!atomic_load(CharacterSetInternal))
    return 0;
  v7 = CharacterSetInternal;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v14 = 0;
  do
  {
    v11 = (const __CFCharacterSet *)atomic_load(v7);
    if (IsCharCovered(v11, a2, a3, &v14))
    {
      if (!v10)
        v9 = v8;
      v12 = v10 - v8;
      v8 = v14;
      v10 = v12 + v14;
    }
    else
    {
      if (v10)
        return v9;
      v8 = v14;
    }
  }
  while (v8 < a3);
  return v9;
}

BOOL IsCharCovered(const __CFCharacterSet *a1, const unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  UTF32Char v7;
  int v9;

  v5 = *a4;
  v6 = *a4 + 1;
  *a4 = v6;
  v7 = a2[v5];
  if ((v7 & 0xFC00) == 0xD800 && v6 != a3)
  {
    v9 = a2[v6];
    if ((v9 & 0xFC00) == 0xDC00)
    {
      *a4 = v5 + 2;
      v7 = v9 + (v7 << 10) - 56613888;
    }
  }
  return CFCharacterSetIsLongCharacterMember(a1, v7) != 0;
}

uint64_t TFont::TFont(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4, __CFString *a5, unint64_t a6, char a7, uint64_t *a8)
{
  unint64_t *v16;
  const __CTFontDescriptor *v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const __CFArray *CascadeListForFallbackStage;
  const __CFArray *v23;
  const __CFArray *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  void *v33;
  const __CFArray *v34;
  UChar32 v35;
  const __CFArray *v36;
  int v37;
  UChar32 v38;
  const __CFArray *v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  void *v43;
  void *v45;
  void *v46;
  TDescriptor **v47;
  TDescriptor **v48;
  TDescriptor *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const __CTFontDescriptor *v58;
  void *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFArray *Value;
  uint64_t *v64;
  uint64_t v65;
  const __CFArray *v66;
  TBaseFont *v67;
  int v68;
  id v69;
  id v70;
  int v71;
  TPurgeableCache *v72;
  const __CFArray *v73;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v16 = (unint64_t *)(a1 + 8);
  v71 = -1431655766;
  TFont::DefaultDescriptor((unint64_t *)(a1 + 8), (TFont *)a2, &v71);
  if (atomic_load(v16))
  {
    *(_DWORD *)a1 |= 8u;
    goto LABEL_78;
  }
  v70 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::UserFallbacksForLanguage((unint64_t *)&v70, (uint64_t)a2, a5, 0);
  if (a6 == -1)
    v19 = ((unint64_t)*a2 >> 6) & 7;
  else
    v19 = a6;
  v20 = atomic_load((unint64_t *)&v70);
  v66 = (const __CFArray *)v20;
  if (!a3)
  {
    v69 = 0;
    goto LABEL_70;
  }
  v64 = a8;
  v65 = v19;
  v21 = 0;
  v68 = v71;
  v67 = (TBaseFont *)*((_QWORD *)a2 + 50);
  while (2)
  {
    if (!v19 && v21)
    {
      v69 = 0;
      a8 = v64;
      goto LABEL_70;
    }
    CascadeListForFallbackStage = TBaseFont::GetCascadeListForFallbackStage(v67, v21, v66, v68, v19, a3, a4);
    if (!CascadeListForFallbackStage)
      goto LABEL_58;
    v69 = 0;
    if (!a4)
    {
      TBaseFont::DefaultFallbackDescriptor(CascadeListForFallbackStage, v68, (unint64_t *)&v73);
      do
        v32 = __ldaxr((unint64_t *)&v73);
      while (__stlxr(0, (unint64_t *)&v73));
      do
        v33 = (void *)__ldaxr((unint64_t *)&v69);
      while (__stlxr(v32, (unint64_t *)&v69));

      v34 = v73;
      goto LABEL_56;
    }
    v23 = CascadeListForFallbackStage;
    v24 = v23;
    v25 = 0;
    while (v25 < a4)
    {
      v26 = v25 + 1;
      v27 = a3[v25];
      v28 = (v27 & 0xFC00) != 0xD800 || v26 == a4;
      if (v28 || (v29 = a3[v26], (v29 & 0xFC00) != 0xDC00))
      {
        if (v27 < 0xFE0E)
        {
          v30 = 0;
          goto LABEL_24;
        }
        if (v27 >> 4 <= 0xFE0)
        {
          if (v27 == 65038)
            v31 = 1;
          else
            v31 = 2;
          goto LABEL_47;
        }
      }
      else
      {
        v26 = v25 + 2;
        v27 = (v27 << 10) - 56613888 + v29;
      }
      v30 = v27 - 127995 < 5;
LABEL_24:
      v25 = v26;
      v31 = 2;
      if (v27 == 8205 || v30)
        goto LABEL_47;
    }
    if (v21 != 2)
      goto LABEL_46;
    v35 = *a3;
    v36 = v23;
    if (a4 != 1 && (v35 & 0xFC00) == 0xD800)
    {
      v37 = a3[1];
      v28 = (v37 & 0xFC00) == 56320;
      v38 = (v35 << 10) - 56613888 + v37;
      if (v28)
        v35 = v38;
    }
    if (u_hasBinaryProperty(v35, UCHAR_EMOJI_PRESENTATION))
    {
      v31 = 2;
      v24 = v36;
      goto LABEL_47;
    }
    v24 = v36;
    if (v35 == 9792 || v35 == 9877 || v35 == 9794)
      v31 = 1;
    else
LABEL_46:
      v31 = 0;
LABEL_47:
    v39 = v24;
    TBaseFont::FindFallbackDescriptorForCharacters((uint64_t)v67, v24, a3, a4, v64, v31, v68, v21, (unint64_t *)&v73, a7);
    do
      v40 = __ldaxr((unint64_t *)&v73);
    while (__stlxr(0, (unint64_t *)&v73));
    do
      v41 = (void *)__ldaxr((unint64_t *)&v69);
    while (__stlxr(v40, (unint64_t *)&v69));

    if (v21 == 1)
    {
      TDescriptorSource::CopyPossibleSystemUIFontDescriptor((unint64_t *)&v69, v68, (unint64_t *)&v73);
      do
        v42 = __ldaxr((unint64_t *)&v73);
      while (__stlxr(0, (unint64_t *)&v73));
      do
        v43 = (void *)__ldaxr((unint64_t *)&v69);
      while (__stlxr(v42, (unint64_t *)&v69));

    }
    v34 = v39;
LABEL_56:

    if (!atomic_load((unint64_t *)&v69))
    {

LABEL_58:
      ++v21;
      v19 = v65;
      if (v21 == 3)
      {
        v73 = (const __CFArray *)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v72);
        TDescriptorSource::CopySystemWideFallbackDescriptorForCharacters(&v72, (uint64_t)v67, (uint64_t)a3, a4, v68, v65, (unint64_t *)&v73);
        v45 = (void *)atomic_load((unint64_t *)&v73);
        if (v45)
        {
          v46 = (void *)atomic_load((unint64_t *)&v73);
          v47 = v46;
          v48 = v47;
          v49 = v47[5];
          a8 = v64;
          if ((*((_DWORD *)v49 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(v47[5], 0, 0.0);
          v50 = atomic_load((unint64_t *)v49 + 4);
          *v64 = (*(uint64_t (**)(unint64_t, unsigned __int16 *, uint64_t, _QWORD))(*(_QWORD *)v50
                                                                                                  + 808))(v50, a3, a4, 0);

          *(_DWORD *)a1 |= 8u;
          do
            v45 = (void *)__ldaxr((unint64_t *)&v73);
          while (__stlxr(0, (unint64_t *)&v73));
        }
        else
        {
          a8 = v64;
          *v64 = 0;
        }
        v69 = v45;

        goto LABEL_70;
      }
      continue;
    }
    break;
  }
  a8 = v64;
  if ((v21 & 0x7FFFFFFFFFFFFFFDLL) == 0)
    *(_DWORD *)a1 |= 8u;
  do
LABEL_70:
    v51 = __ldaxr((unint64_t *)&v69);
  while (__stlxr(0, (unint64_t *)&v69));
  do
    v52 = (void *)__ldaxr(v16);
  while (__stlxr(v51, v16));

  if (!TFont::DerivedOpticalFont((unint64_t *)a2, v16, (unsigned int *)a1, *((double *)a2 + 2)))
  {
    *a8 = 0;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v72);
    TDescriptorSource::CopyLastResort((unint64_t *)&v73);
    do
      v53 = __ldaxr((unint64_t *)&v73);
    while (__stlxr(0, (unint64_t *)&v73));
    do
      v54 = (void *)__ldaxr(v16);
    while (__stlxr(v53, v16));

    *(_DWORD *)a1 |= 8u;
  }

LABEL_78:
  *(double *)(a1 + 16) = TFont::InitSize(0, *((double *)a2 + 2), v17);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0x80000000;
  TFont::InitMatrix(*((TFont **)a2 + 5), 0, (_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v55 = *MEMORY[0x1E0C9D648];
  v56 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 88) = *MEMORY[0x1E0C9D538];
  *(_OWORD *)(a1 + 104) = v55;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = v56;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = TFont::InitBaseFont(v57, v16);
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  v58 = (const __CTFontDescriptor *)atomic_load((unint64_t *)(a1 + 8));
  v59 = (void *)atomic_load((unint64_t *)a2 + 20);
  v60 = v59;
  v61 = v60;
  if (v60)
    Value = (const __CFArray *)CFDictionaryGetValue(v60, CFSTR("CTFontOriginalFeatureSettingsAttribute"));
  else
    Value = 0;

  TFont::SetExtras((TFont *)a1, v58, Value);
  *(_DWORD *)a1 = *a2 | 0xC0;
  TFont::SetOpticalSize((TFont *)a1, 0);
  TFont::AddFontSpecificFeatureSettings((TFont *)a1);
  return a1;
}

const __CFArray *TBaseFont::GetCascadeListForFallbackStage(TBaseFont *a1, int a2, const __CFArray *DefaultFallbacks, int a4, char a5, const unsigned __int16 *a6, uint64_t a7)
{
  id v15;

  if (a2 == 2)
  {
    DefaultFallbacks = (const __CFArray *)TBaseFont::GetDefaultFallbacks(a1, a4, a5);
  }
  else if (a2 != 1)
  {
    if (a2)
    {
      DefaultFallbacks = 0;
    }
    else
    {
      (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)a1 + 504))(&v15, a1);
      DefaultFallbacks = (const __CFArray *)atomic_load((unint64_t *)&v15);

    }
  }
  if (TBaseFont::ShouldSkipCascadeList(a1, a2, DefaultFallbacks, a4, a5, a6, a7))
    return 0;
  else
    return DefaultFallbacks;
}

uint64_t TBaseFont::ShouldSkipCascadeList(TBaseFont *a1, int a2, CFArrayRef theArray, int a4, char a5, const unsigned __int16 *a6, uint64_t a7)
{
  const __CFCharacterSet *DefaultComposite;
  _BOOL4 v14;
  uint64_t v16;

  if (!theArray)
    return 1;
  if (CFArrayGetCount(theArray))
  {
    if (a2 != 2)
      return 0;
    DefaultComposite = (const __CFCharacterSet *)TBaseFont::GetDefaultComposite(a1, a4, a5);
    v16 = 0;
    do
      v14 = IsCharCovered(DefaultComposite, a6, a7, &v16);
    while (!v14 && v16 < a7);
    if (v14)
      return 0;
  }
  return 1;
}

unint64_t TBaseFont::GetDefaultComposite(TBaseFont *a1, int a2, char a3)
{
  const __CFArray *DefaultFallbacks;
  uint64_t v4;
  unint64_t *v5;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  void *v15;
  void *v16;
  const __CFCharacterSet *v17;
  __CFCharacterSet *v18;
  unint64_t v19;
  int v21;
  void *v22;
  id Mutable;
  id v25;
  id v26;

  if ((a3 & 1) == 0)
    return 0;
  v4 = 1;
  if ((a3 & 4) != 0)
    v4 = 2;
  if (a2 != 1)
    v4 = 0;
  v5 = (unint64_t *)((char *)a1 + 8 * v4 + 152);
  if (atomic_load(v5))
    return atomic_load(v5);
  DefaultFallbacks = (const __CFArray *)TBaseFont::GetDefaultFallbacks(a1, a2, a3);
  if (DefaultFallbacks)
  {
    Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    Count = CFArrayGetCount(DefaultFallbacks);
    if (Count)
    {
      v8 = Count;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(DefaultFallbacks, i);
        v11 = *((_QWORD *)ValueAtIndex + 5);
        if ((*(_DWORD *)(v11 + 16) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(*((TDescriptor **)ValueAtIndex + 5), 0, 0.0);
        v12 = atomic_load((unint64_t *)(v11 + 32));
        if (v12)
        {
          v26 = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v12 + 176))(&v26, v12);
          if (!atomic_load((unint64_t *)&v26))
          {
            (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v12 + 768))(&v25, v12);
            do
              v14 = __ldaxr((unint64_t *)&v25);
            while (__stlxr(0, (unint64_t *)&v25));
            do
              v15 = (void *)__ldaxr((unint64_t *)&v26);
            while (__stlxr(v14, (unint64_t *)&v26));

          }
          v16 = (void *)atomic_load((unint64_t *)&v26);
          v17 = v16;
          if (v17)
          {
            v18 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
            CFCharacterSetUnion(v18, v17);
          }

        }
      }
    }
    do
      v19 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    _CFCharacterSetCompact();
    while (!__ldaxr(v5))
    {
      if (!__stlxr(v19, v5))
      {
        v21 = 1;
        goto LABEL_30;
      }
    }
    v21 = 0;
    __clrex();
LABEL_30:
    if (v21)
      v22 = 0;
    else
      v22 = (void *)v19;

    DefaultFallbacks = (const __CFArray *)atomic_load(v5);
  }
  return (unint64_t)DefaultFallbacks;
}

uint64_t TBaseFont::CopyLogicalCharacterSet(TBaseFont *this)
{
  return (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 184))(this);
}

void TBaseFont::CopyRepertoireRange(unint64_t *a1@<X8>)
{
  unint64_t v2;
  id v3;

  v3 = 0;
  do
    v2 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));
  *a1 = v2;

}

void TBaseFont::FindFallbackDescriptorForCharacters(uint64_t a1@<X0>, const __CFArray *a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, unsigned int a7@<W6>, unsigned int a8@<W7>, unint64_t *a9@<X8>, char a10)
{
  const __CFArray *v12;
  CFIndex Count;
  const __CFArray *v15;
  unsigned __int8 v16;
  unsigned int v17;
  TDescriptorSource *v18;
  unint64_t v19;
  CharRangeToDescriptorMap *v20;
  CharRangeToDescriptorMap *v21;
  unint64_t DescriptorIndexForChar;
  unint64_t v23;
  TDescriptor **v24;
  TDescriptor *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex v36;
  TDescriptor **ValueAtIndex;
  TDescriptor **v38;
  unint64_t v39;
  void *v40;
  void *v42;
  TDescriptor **v43;
  TDescriptor **v44;
  TDescriptor *v45;
  unint64_t v46;
  TDescriptor *v47;
  unint64_t v48;
  unint64_t v50;
  void *v51;
  void *v53;
  TDescriptor **v54;
  TDescriptor **v55;
  TDescriptor *v56;
  unint64_t v57;
  TDescriptor *v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v67;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  int v72;
  int v74;
  int v75;
  unsigned int v76;
  char v77;
  int v78;
  uint64_t v79;
  unint64_t *v80;
  unsigned int v81;
  const __CFArray *v84;
  const __CFArray *theArray;
  id v89;
  TPurgeableCache *v90;
  TDescriptor **v91;

  v12 = a2;
  v89 = 0;
  Count = CFArrayGetCount(a2);
  v81 = a8;
  if (a8 == 1)
    v15 = v12;
  else
    v15 = 0;
  theArray = v15;
  if ((a6 + 1) <= 1)
  {
    v16 = atomic_load((unsigned __int8 *)&qword_1EDD17200);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EDD17200))
    {
      qword_1EDD171F8 = objc_opt_class();
      __cxa_guard_release(&qword_1EDD17200);
    }
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (v12)
      {
        v17 = *a3;
        if ((unsigned __int16)(v17 + 24627) >= 0x9033u)
        {
          v18 = (TDescriptorSource *)os_unfair_lock_lock_with_options();
          v19 = *((_QWORD *)v12 + 7);
          TDescriptorSource::EnsureFontFallbacksCache(v18);
          TFontFallbacks::GetCharRangeMapForKey((TFontFallbacks *)TDescriptorSource::sFontFallbacksCache, v19);
          v21 = v20;
          os_unfair_lock_lock_with_options();
          DescriptorIndexForChar = CharRangeToDescriptorMap::GetDescriptorIndexForChar(v21, v17);
          os_unfair_lock_unlock((os_unfair_lock_t)v12 + 2);
          os_unfair_lock_unlock(&TDescriptorSource::sFontFallbacksLock);
          if (DescriptorIndexForChar != -1)
          {
            v23 = *((_QWORD *)v12 + 4);
            if (DescriptorIndexForChar >= v23)
            {
              if (DescriptorIndexForChar / 0x64 < v23)
              {
                v29 = objc_msgSend(*((id *)v12 + 6), "objectAtIndex:", DescriptorIndexForChar / 0x64);
                if (v29 != objc_msgSend(MEMORY[0x1E0C99E38], "null"))
                {
                  v30 = *(_QWORD *)(v29 + 40);
                  if ((*(_DWORD *)(v30 + 16) & 0x80000000) == 0)
                    TDescriptor::InitBaseFont((TDescriptor *)v30, 0, 0.0);
                  v31 = atomic_load((unint64_t *)(v30 + 32));
                  if (v31
                    && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v31 + 16))(v31) == 1414743620
                    && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v31 + 840))(v31) & 1) == 0)
                  {
                    v32 = DescriptorIndexForChar % 0x64;
                    v91 = (TDescriptor **)0xAAAAAAAAAAAAAAAALL;
                    (*(void (**)(TDescriptor ***__return_ptr, unint64_t))(*(_QWORD *)v31 + 504))(&v91, v31);
                    v33 = (void *)atomic_load((unint64_t *)&v91);
                    v24 = v32 >= objc_msgSend(v33, "count")
                        ? 0
                        : (TDescriptor **)objc_msgSend(v33, "objectAtIndex:", v32);

                    if (v24)
                    {
LABEL_13:
                      v25 = v24[5];
                      if ((*((_DWORD *)v25 + 4) & 0x80000000) == 0)
                        TDescriptor::InitBaseFont(v24[5], 0x8000, 0.0);
                      v26 = atomic_load((unint64_t *)v25 + 4);
                      if (v26)
                      {
                        LOBYTE(v90) = 0;
                        v27 = (*(uint64_t (**)(unint64_t, unsigned __int16 *, uint64_t, TPurgeableCache **))(*(_QWORD *)v26 + 808))(v26, a3, a4, &v90);
                        if (v27 == a4 || a10 != 1 && (_BYTE)v90)
                        {
                          *a5 = v27;
                          v91 = v24;
                          do
                            v28 = __ldaxr((unint64_t *)&v91);
                          while (__stlxr(0, (unint64_t *)&v91));
                          *a9 = v28;

                          goto LABEL_109;
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v24 = (TDescriptor **)objc_msgSend(*((id *)v12 + 6), "objectAtIndex:", DescriptorIndexForChar);
              if (v24 != (TDescriptor **)objc_msgSend(MEMORY[0x1E0C99E38], "null") && v24)
                goto LABEL_13;
            }
          }
        }
      }
    }
  }
  v34 = 0;
  HIDWORD(v79) = v81 & 0xFFFFFFFD;
  v35 = a7;
  v84 = v12;
  v80 = a9;
  while (1)
  {
    if (v34 < Count)
    {
      do
      {
        v36 = v34++;
        ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(v12, v36);
        v38 = ValueAtIndex;
        if (a6 != 2 || v36)
        {
          v47 = ValueAtIndex[5];
          if ((*((_DWORD *)v47 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(ValueAtIndex[5], 0x8000, 0.0);
          v48 = atomic_load((unint64_t *)v47 + 4);
          if (v48 && (a6 != 1 || !(*(unsigned int (**)(unint64_t))(*(_QWORD *)v48 + 712))(v48)))
            goto LABEL_62;
        }
        else
        {
          TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v90);
          TDescriptorSource::CopyEmojiFontDescriptor(theArray, &v90, v35, (unint64_t *)&v91);
          do
            v39 = __ldaxr((unint64_t *)&v91);
          while (__stlxr(0, (unint64_t *)&v91));
          do
            v40 = (void *)__ldaxr((unint64_t *)&v89);
          while (__stlxr(v39, (unint64_t *)&v89));

          if (atomic_load((unint64_t *)&v89))
          {
            v42 = (void *)atomic_load((unint64_t *)&v89);
            v43 = v42;
            v44 = v43;
            v45 = v43[5];
            if ((*((_DWORD *)v45 + 4) & 0x80000000) == 0)
              TDescriptor::InitBaseFont(v43[5], 0x8000, 0.0);
            v46 = atomic_load((unint64_t *)v45 + 4);

            if (v46)
            {
              v34 = 1;
              goto LABEL_61;
            }
          }
        }
      }
      while (v34 != Count);
      v34 = Count;
    }
    if (a6)
      goto LABEL_108;
    if (atomic_load((unint64_t *)&v89))
      goto LABEL_108;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v90);
    TDescriptorSource::CopyEmojiFontDescriptor(theArray, &v90, v35, (unint64_t *)&v91);
    do
      v50 = __ldaxr((unint64_t *)&v91);
    while (__stlxr(0, (unint64_t *)&v91));
    do
      v51 = (void *)__ldaxr((unint64_t *)&v89);
    while (__stlxr(v50, (unint64_t *)&v89));

    if (!atomic_load((unint64_t *)&v89))
      goto LABEL_108;
    v53 = (void *)atomic_load((unint64_t *)&v89);
    v54 = v53;
    v55 = v54;
    v56 = v54[5];
    if ((*((_DWORD *)v56 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v54[5], 0x8000, 0.0);
    v57 = atomic_load((unint64_t *)v56 + 4);

    if (!v57)
    {
LABEL_108:
      *a9 = 0;
      break;
    }
LABEL_61:
    v38 = (TDescriptor **)atomic_load((unint64_t *)&v89);
    if (!v38)
      goto LABEL_108;
LABEL_62:
    v58 = v38[5];
    if ((*((_DWORD *)v58 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v38[5], 0x8000, 0.0);
    v59 = atomic_load((unint64_t *)v58 + 4);
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v59 + 16))(v59) == 1414743620
      && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v59 + 840))(v59) & 1) == 0)
    {
      v91 = (TDescriptor **)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(TDescriptor ***__return_ptr, unint64_t))(*(_QWORD *)v59 + 504))(&v91, v59);
      if (atomic_load((unint64_t *)&v91))
      {
        *a9 = 0xAAAAAAAAAAAAAAAALL;
        v67 = atomic_load((unint64_t *)&v91);
        LOBYTE(v79) = a10;
        TBaseFont::FindFallbackDescriptorForCharacters(a1, v67, a3, a4, a5, 0xFFFFFFFFLL, v35, v81, v79);
        if (atomic_load(a9))
        {
          v64 = 1;
LABEL_104:

          goto LABEL_105;
        }

      }
      v64 = 2;
      goto LABEL_104;
    }
    v60 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v59 + 32))(v59, a1);
    if (a6 || (v60 & 1) == 0)
    {
      LOBYTE(v90) = 0;
      v61 = (*(uint64_t (**)(unint64_t, unsigned __int16 *, uint64_t, TPurgeableCache **))(*(_QWORD *)v59 + 808))(v59, a3, a4, &v90);
      v62 = a4;
      v63 = v61;
      if (v61 != a4)
      {
        v64 = 0;
        if (a10 == 1 || !(_BYTE)v90)
          goto LABEL_78;
      }
      if (HIDWORD(v79))
        goto LABEL_72;
      v69 = 0;
      v70 = a3;
      while (1)
      {
        v71 = v69 + 1;
        v72 = v70[v69];
        if ((v72 & 0xFC00) == 0xD800 && v71 != v62)
        {
          v74 = v70[v71];
          if ((v74 & 0xFC00) == 0xDC00)
            break;
        }
        if ((unsigned __int16)((unsigned __int16)(v72 + 0x2000) >> 11) < 3u)
          goto LABEL_92;
LABEL_99:
        v69 = v71;
        if (v71 >= v62 || v63 <= 0)
          goto LABEL_72;
      }
      v71 = v69 + 2;
      v75 = v74 + (v72 << 10);
      v72 = v75 - 56613888;
      if ((v75 - 56613888) < 0xF0000 || (v75 - 57727998) > 0xFFFFFC01)
        goto LABEL_99;
LABEL_92:
      v76 = v72 - 57345;
      if (v72 == 1051575 || v76 <= 0x536)
      {
        if (v76 > 0x536)
          goto LABEL_99;
        v77 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v59 + 712))(v59);
        v70 = a3;
        v62 = a4;
        if ((v77 & 1) != 0)
          goto LABEL_99;
      }
      --v63;
      if (a10 == 1)
        goto LABEL_72;
      if (v69 || !(_BYTE)v90)
        goto LABEL_99;
      LOBYTE(v90) = 0;
LABEL_72:
      a9 = v80;
      if (v63 == v62 || (v64 = 0, a10 != 1) && (_BYTE)v90)
      {
        *a5 = v63;
        v91 = v38;
        do
          v65 = __ldaxr((unint64_t *)&v91);
        while (__stlxr(0, (unint64_t *)&v91));
        *v80 = v65;

        v64 = 1;
      }
LABEL_78:
      v35 = a7;
LABEL_105:
      v78 = v64 | 2;
      v12 = v84;
      if (v78 != 2)
        break;
    }
  }
LABEL_109:

}

BOOL TBaseFont::Equal(TBaseFont *this, const TBaseFont *a2)
{
  int v4;
  const void *v5;
  const void *v6;
  _BOOL8 result;

  if (this == a2)
    return 1;
  v4 = (*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 16))(this);
  if (v4 != (*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  v5 = (const void *)atomic_load((unint64_t *)this + 10);
  v6 = (const void *)atomic_load((unint64_t *)a2 + 10);
  if (v5 == v6)
    return 1;
  result = 0;
  if (v5)
  {
    if (v6)
      return CFEqual(v5, v6) != 0;
  }
  return result;
}

double TBaseFont::TraitsDistance(TBaseFont *this, const TTraitsValues *a2)
{
  unint64_t TraitsValues;
  float64x2_t v5;

  TraitsValues = atomic_load((unint64_t *)this + 30);
  if (!TraitsValues)
  {
    TraitsValues = TBaseFont::CreateTraitsValues(this);
    if (!TraitsValues)
      return INFINITY;
  }
  v5 = vsubq_f64(*(float64x2_t *)(TraitsValues + 8), *(float64x2_t *)&a2->var1);
  return vaddvq_f64(vmulq_f64(v5, v5))
       + (*(double *)(TraitsValues + 24) - a2->var3) * (*(double *)(TraitsValues + 24) - a2->var3);
}

void TFontFallbacks::GetCharRangeMapForKey(TFontFallbacks *this, unint64_t a2)
{
  void ***v2;
  CharRangeToDescriptorMap *v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v2 = (void ***)(std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)this + 3, &v6, (uint64_t)&std::piecewise_construct, &v7)+ 3);
  if (!*v2)
  {
    v3 = (CharRangeToDescriptorMap *)operator new();
    CharRangeToDescriptorMap::CharRangeToDescriptorMap(v3);
    v4 = *v2;
    *v2 = v5;
    if (v4)
      std::default_delete<CharRangeToDescriptorMap>::operator()[abi:nn180100]((uint64_t)v2, v4);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;

  v6 = *a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v6 >= v7)
        v9 = v6 % v7;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
    v10 = *(_QWORD ***)(*a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  else
  {
    v9 = 0xAAAAAAAAAAAAAAAALL;
  }
  v13 = a1 + 2;
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v13;
          if (*v13)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v24) = v13;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v30))
                  {
                    *(_QWORD *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*a1 + 8 * v30);
                  **(_QWORD **)(*a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = (void *)*a1;
        *a1 = 0;
        if (v35)
          operator delete(v35);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
  }
  v31 = *a1;
  v32 = *(_QWORD **)(*a1 + 8 * v9);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v31 + 8 * v9) = v13;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (_QWORD *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

uint64_t CharRangeToDescriptorMap::AddRangesForDescriptorIndex(uint64_t this, const __CFCharacterSet *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *j;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned int v42;
  unsigned __int16 v43;
  UTF32Char v44;
  unsigned __int16 v45;
  unsigned int v46;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  CFCharacterSetRef theSet[2];
  __int128 v63;

  if (!a2)
    return this;
  v4 = this;
  v5 = *(_QWORD *)(this + 528);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a3;
      if (v5 <= a3)
        v7 = a3 % v5;
    }
    else
    {
      v7 = (v5 - 1) & a3;
    }
    v9 = *(_QWORD *)(this + 520);
    v10 = *(_QWORD **)(v9 + 8 * v7);
    if (v10)
    {
      for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == a3)
        {
          if (i[2] == a3)
            return this;
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v12 >= v5)
              v12 %= v5;
          }
          else
          {
            v12 &= v5 - 1;
          }
          if (v12 != v7)
            break;
        }
      }
    }
    if (v6.u32[0] > 1uLL)
    {
      v8 = a3;
      if (v5 <= a3)
        v8 = a3 % v5;
    }
    else
    {
      v8 = (v5 - 1) & a3;
    }
    v13 = *(_QWORD **)(v9 + 8 * v8);
    if (v13)
    {
      for (j = (_QWORD *)*v13; j; j = (_QWORD *)*j)
      {
        v15 = j[1];
        if (v15 == a3)
        {
          if (j[2] == a3)
            goto LABEL_90;
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v15 >= v5)
              v15 %= v5;
          }
          else
          {
            v15 &= v5 - 1;
          }
          if (v15 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = a3;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(v4 + 544) + 1);
  v18 = *(float *)(v4 + 552);
  if (!v5 || (float)(v18 * (float)v5) < v17)
  {
    v19 = 1;
    if (v5 >= 3)
      v19 = (v5 & (v5 - 1)) != 0;
    v20 = v19 | (2 * v5);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(v4 + 528);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_46;
    if (*(_QWORD *)&prime < v5)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 544) / *(float *)(v4 + 552));
      if (v5 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v5)
      {
        v5 = *(_QWORD *)(v4 + 528);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)(v4 + 520);
          *(_QWORD *)(v4 + 520) = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(v4 + 528) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v4 + 520) + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = *(_QWORD **)(v4 + 536);
          if (v26)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v4 + 520) + 8 * v27) = v4 + 536;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  v34 = *(_QWORD *)(v4 + 520);
                  if (!*(_QWORD *)(v34 + 8 * v33))
                  {
                    *(_QWORD *)(v34 + 8 * v33) = v26;
                    goto LABEL_71;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)(v4 + 520) + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)(v4 + 520) + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_71:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v5 = (unint64_t)prime;
          goto LABEL_75;
        }
        v59 = *(void **)(v4 + 520);
        *(_QWORD *)(v4 + 520) = 0;
        if (v59)
          operator delete(v59);
        v5 = 0;
        *(_QWORD *)(v4 + 528) = 0;
      }
    }
LABEL_75:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= a3)
        v8 = a3 % v5;
      else
        v8 = a3;
    }
    else
    {
      v8 = (v5 - 1) & a3;
    }
  }
  v35 = *(_QWORD *)(v4 + 520);
  v36 = *(_QWORD **)(v35 + 8 * v8);
  if (v36)
  {
    *v16 = *v36;
  }
  else
  {
    *v16 = *(_QWORD *)(v4 + 536);
    *(_QWORD *)(v4 + 536) = v16;
    *(_QWORD *)(v35 + 8 * v8) = v4 + 536;
    if (!*v16)
      goto LABEL_89;
    v37 = *(_QWORD *)(*v16 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v37 >= v5)
        v37 %= v5;
    }
    else
    {
      v37 &= v5 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)(v4 + 520) + 8 * v37);
  }
  *v36 = v16;
LABEL_89:
  ++*(_QWORD *)(v4 + 544);
LABEL_90:
  *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)theSet = v38;
  v63 = v38;
  this = CFCharacterSetInitInlineBuffer();
  v39 = *(char **)v4;
  v40 = *(_QWORD *)(v4 + 16) - *(_QWORD *)v4;
  v41 = 12288;
LABEL_91:
  while (2)
  {
    v42 = *(unsigned __int16 *)v39;
    if (v42 > v41)
    {
      v43 = 0;
      v44 = v41;
      v45 = v41;
      while (1)
      {
        v46 = (uint64_t)theSet[1] & 4;
        if (HIDWORD(theSet[1]) <= v44 && v63 > v44)
        {
          if (((uint64_t)theSet[1] & 2) != 0)
          {
            this = CFCharacterSetIsLongCharacterMember(theSet[0], v44);
            if ((_DWORD)this)
              goto LABEL_108;
          }
          else if (*((_QWORD *)&v63 + 1))
          {
            if (((uint64_t)theSet[1] & 1) != 0)
            {
              v54 = v46 >> 2;
              v55 = *(unsigned __int8 *)(*((_QWORD *)&v63 + 1) + ((unint64_t)v44 >> 8));
              if (*(_BYTE *)(*((_QWORD *)&v63 + 1) + ((unint64_t)v44 >> 8)))
              {
                if ((_DWORD)v55 == 255)
                {
                  v54 = v46 == 0;
                }
                else
                {
                  v56 = v46 == 0;
                  if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v63 + 1)
                                                              + 32 * v55
                                                              + (v44 >> 3)
                                                              + 224) >> (v44 & 7)) & 1) != 0)
                    v54 = v56;
                }
              }
              if (v54)
              {
LABEL_108:
                if (v43)
                {
                  ++v43;
                }
                else
                {
                  v45 = v44;
                  v43 = v44 + 1;
                }
                goto LABEL_112;
              }
            }
            else
            {
              v48 = v46 != 0;
              v49 = v46 == 0;
              if ((((unint64_t)*(unsigned __int8 *)(*((_QWORD *)&v63 + 1) + ((unint64_t)v44 >> 3)) >> (v44 & 7)) & 1) != 0)
                v48 = v49;
              if (v48)
                goto LABEL_108;
            }
          }
          else
          {
            v50 = v46 == 0;
            v51 = v46 != 0;
            v52 = v50;
            if (((uint64_t)theSet[1] & 1) != 0)
              v53 = v51;
            else
              v53 = v52;
            if ((v53 & 1) != 0)
              goto LABEL_108;
          }
        }
        else if (((uint64_t)theSet[1] & 4) != 0)
        {
          goto LABEL_108;
        }
        if (v43)
        {
          v60 = v45 | ((unint64_t)v43 << 16);
          v61 = a3;
          this = (uint64_t)std::vector<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul>>::emplace<std::tuple<unsigned short,unsigned short,long>>((char **)v4, (uint64_t)v39, (__int16 *)&v60);
          v43 = 0;
          v39 = (char *)(this + 16);
        }
        else
        {
          v43 = 0;
        }
LABEL_112:
        if (v42 == ++v44)
        {
          v41 = v42;
          if (v43)
          {
            v60 = v45 | ((unint64_t)v43 << 16);
            v61 = a3;
            this = (uint64_t)std::vector<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul>>::emplace<std::tuple<unsigned short,unsigned short,long>>((char **)v4, (uint64_t)v39, (__int16 *)&v60);
            v39 = (char *)(this + 16);
            v41 = v42;
          }
          goto LABEL_91;
        }
      }
    }
    v41 = *((_WORD *)v39 + 1);
    v39 += 16;
    if (v39 != *(char **)(v4 + 8))
      continue;
    break;
  }
  v57 = 30;
  if ((unint64_t)(v40 >> 4) <= 0x1E)
    v58 = 30;
  else
    v58 = v40 >> 4;
  if ((unint64_t)((uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)v4) >> 4) > 0x1E)
    v57 = (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)v4) >> 4;
  if (v57 != v58)
    *(_QWORD *)(v4 + 512) = *(_QWORD *)v4;
  return this;
}

char *std::vector<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul>>::emplace<std::tuple<unsigned short,unsigned short,long>>(char **a1, uint64_t a2, __int16 *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v17 = ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
    if (v17 >> 60)
      abort();
    v18 = v7 >> 4;
    v19 = v9 - (_QWORD)v5;
    v20 = v19 >> 3;
    if (v19 >> 3 <= v17)
      v20 = v17;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    v43 = a1 + 3;
    if (v21)
      v22 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(a1 + 3), v21);
    else
      v22 = 0;
    v26 = &v22[16 * v18];
    v27 = &v22[16 * v21];
    v42 = v27;
    if (v18 == v21)
    {
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF0) < 1)
      {
        if ((unint64_t)v7 < 0x10)
          v29 = 1;
        else
          v29 = (v7 >> 3) & 0xFFFFFFFFFFFFFFFELL;
        v48 = a1 + 3;
        v44 = v22;
        v45 = &v22[16 * v18];
        v39 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(a1 + 3), v29);
        v42 = &v39[16 * v29];
        v46 = v45;
        v47 = v27;
        std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v44);
        v26 = &v39[16 * (v29 >> 2)];
      }
      else
      {
        v28 = v18 + 2;
        if (v18 >= -1)
          v28 = v18 + 1;
        v26 -= 16 * (v28 >> 1);
      }
    }
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v30 = v26 + 16;
    v41 = v26 + 16;
    v31 = *a1;
    if (*a1 == (char *)v8)
    {
      v33 = v26;
    }
    else
    {
      v32 = v8;
      v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *(_OWORD *)(v32 - 16);
        v33 -= 16;
        v32 -= 16;
      }
      while ((char *)v32 != v31);
      v30 = v41;
    }
    v40 = v33;
    v34 = a1[1];
    if (v34 != (char *)v8)
    {
      do
      {
        v35 = *(_OWORD *)v8;
        v8 += 16;
        *(_OWORD *)v30 = v35;
        v30 += 16;
      }
      while ((char *)v8 != v34);
      v33 = v40;
      v8 = (unint64_t)a1[1];
    }
    v36 = *a1;
    *a1 = v33;
    a1[1] = v30;
    v37 = a1[2];
    a1[2] = v42;
    v41 = (char *)v8;
    v42 = v37;
    v39 = v36;
    v40 = v36;
    std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)&v39);
    return v26;
  }
  else if (v8 == v6)
  {
    *(_OWORD *)v8 = *(_OWORD *)a3;
    a1[1] = (char *)(v8 + 16);
  }
  else
  {
    v10 = *a3;
    v11 = a3[1];
    v12 = *((_QWORD *)a3 + 1);
    v13 = v8 + 16;
    v14 = (__int128 *)(v6 - 16);
    v15 = a1[1];
    while ((unint64_t)v14 < v6)
    {
      v16 = *v14++;
      *(_OWORD *)v15 = v16;
      v15 += 16;
    }
    a1[1] = v15;
    if (v6 != v13)
    {
      v23 = (uint64_t)(v6 - v13) >> 4;
      v24 = (_QWORD *)(v6 - 8);
      v25 = 16 * v23;
      do
      {
        *((_WORD *)v24 - 4) = *(_WORD *)(v8 + v25 - 16);
        *((_WORD *)v24 - 3) = *(_WORD *)(v8 + v25 - 14);
        *v24 = *(_QWORD *)(v8 + v25 - 8);
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
    }
    *(_WORD *)v8 = v10;
    *(_WORD *)(v8 + 2) = v11;
    *(_QWORD *)(v8 + 8) = v12;
  }
  return (char *)v8;
}

void TDescriptorSource::CopyPossibleSystemUIFontDescriptor(unint64_t *a1@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  TDescriptor *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;

  v4 = atomic_load(a1);
  if (a2 == 1 && v4)
  {
    v5 = atomic_load(a1);
    v6 = TCFBase<TDescriptor>::Allocate();
    if (v6)
    {
      v7 = (_QWORD *)v6;
      v8 = (TDescriptor *)(v6 + 48);
      v7[2] = 0;
      v7[3] = TDescriptor::Hash;
      v7[4] = 0;
      v7[5] = v8;
      TDescriptor::TDescriptor(v8, *(const TDescriptor **)(v5 + 40), 1024);
      v13 = v7;
      do
        v9 = (void *)__ldaxr((unint64_t *)&v13);
      while (__stlxr(0, (unint64_t *)&v13));
      v12 = v9;

    }
    else
    {
      v12 = 0;
    }
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    do
      v10 = __ldaxr(a1);
    while (__stlxr(0, a1));
    *a3 = v10;
  }
}

void TDescriptorSource::EnsureFontFallbacksCache(TDescriptorSource *this)
{
  _DWORD *v1;
  int v2;
  TFontFallbacks *v3;
  uint64_t v4;

  v1 = (_DWORD *)TDescriptorSource::sFontFallbacksCache;
  if (!TDescriptorSource::sFontFallbacksCache
    || (v2 = *(_DWORD *)(TDescriptorSource::sFontFallbacksCache + 4), v2 != GetLocaleChangedCount())
    || *v1 != TGenerationSeed::sGeneration)
  {
    v3 = (TFontFallbacks *)operator new();
    TFontFallbacks::TFontFallbacks(v3);
    v4 = TDescriptorSource::sFontFallbacksCache;
    if (TDescriptorSource::sFontFallbacksCache)
    {
      std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<CharRangeToDescriptorMap>>>>::~__hash_table(TDescriptorSource::sFontFallbacksCache + 24);

      MEMORY[0x186DC03AC](v4, 0x10E0C400A71E039);
    }
    TDescriptorSource::sFontFallbacksCache = (uint64_t)v3;
  }
}

BOOL TFont::DerivedOpticalFont(unint64_t *a1, unint64_t *a2, unsigned int *a3, double a4)
{
  unint64_t v4;
  void *v9;
  TDescriptor **v10;
  TDescriptor **v11;
  TDescriptor *v12;
  TSplicedFont *v13;
  TDescriptor **v14;
  unint64_t v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  unint64_t *v20;
  const __CFDictionary *v21;
  CFAllocatorRef *v22;
  const void *Value;
  void *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  void *v27;
  CFDictionaryRef v28;
  void *v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  const __CFAllocator *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  uint64_t v36;
  _QWORD *v37;
  TDescriptor *v38;
  void *v39;
  unint64_t v40;
  void *v41;
  double v42;
  char v43;
  void *v44;
  CFDictionaryRef v45;
  void *v46;
  unint64_t v47;
  void *v48;
  id v50;
  id v51;
  void *values;
  void *keys;

  v4 = atomic_load(a2);
  if (!v4)
    return v4 != 0;
  v9 = (void *)atomic_load(a2);
  v10 = v9;
  v11 = v10;
  v12 = v10[5];
  if ((*((_DWORD *)v12 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v10[5], 0x8000, 0.0);
  v13 = (TSplicedFont *)atomic_load((unint64_t *)v12 + 4);

  v51 = (id)0xAAAAAAAAAAAAAAAALL;
  v14 = (TDescriptor **)atomic_load(a2);
  DerivedOpticalFontDescriptor((const __CTFontDescriptor *)&v51, v14, a4, v13);
  if (atomic_load((unint64_t *)&v51))
  {
    do
      v16 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0, (unint64_t *)&v51));
    do
      v17 = (void *)__ldaxr(a2);
    while (__stlxr(v16, a2));

  }
  v18 = (void *)atomic_load(a2);
  v19 = v18;
  v20 = (unint64_t *)(v19[5] + 8);
  atomic_load(v20);
  v21 = (const __CFDictionary *)atomic_load(v20);
  v22 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v21)
  {
    Value = CFDictionaryGetValue(v21, CFSTR("NSCTFontFeatureSettingsAttribute"));

    if (Value)
      goto LABEL_20;
  }
  else
  {

  }
  v24 = (void *)atomic_load(a1 + 20);
  v25 = v24;
  if (!v25)
  {
    v28 = 0;
LABEL_19:

    goto LABEL_20;
  }
  v26 = v25;
  v27 = (void *)CFDictionaryGetValue(v25, CFSTR("CTFontOriginalFeatureSettingsAttribute"));

  if (v27)
  {
    values = v27;
    keys = CFSTR("NSCTFontFeatureSettingsAttribute");
    v28 = CFDictionaryCreate(*v22, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v29 = (void *)atomic_load(a2);
    values = v29;
    v50 = v28;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&values, (const __CFDictionary **)&v50, (unint64_t *)&keys);
    do
      v30 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v31 = (void *)__ldaxr(a2);
    while (__stlxr(v30, a2));

    goto LABEL_19;
  }
LABEL_20:
  if (TFont::ShouldPropagateFeatureSetting((TFont *)a1, (const TFontFeatureSettingList *)(a1 + 21)))
  {
    *a3 = *a3 & 0xFFFFFFF3 | 4;
    v32 = atomic_load(a2);
    LODWORD(values) = 35;
    v33 = *v22;
    keys = CFNumberCreate(*v22, kCFNumberIntType, &values);
    do
      v34 = (const __CFNumber *)__ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));

    LODWORD(values) = 14;
    keys = CFNumberCreate(v33, kCFNumberIntType, &values);
    do
      v35 = (const __CFNumber *)__ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));

    v36 = TCFBase<TDescriptor>::Allocate();
    if (v36)
    {
      v37 = (_QWORD *)v36;
      v38 = (TDescriptor *)(v36 + 48);
      v37[2] = 0;
      v37[3] = TDescriptor::Hash;
      v37[4] = 0;
      v37[5] = v38;
      TDescriptor::TDescriptor(v38, *(const TDescriptor **)(v32 + 40), v34, v35);
      keys = v37;
      do
        v39 = (void *)__ldaxr((unint64_t *)&keys);
      while (__stlxr(0, (unint64_t *)&keys));
      values = v39;

    }
    else
    {
      values = 0;
    }
    do
      v40 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    do
      v41 = (void *)__ldaxr(a2);
    while (__stlxr(v40, a2));

  }
  v42 = COERCE_DOUBLE(TFont::GetEmojiMLUpscalingTimeout((TFont *)a1));
  if (v43)
  {
    *a3 &= ~8u;
    TCFNumber::TCFNumber<double>((unint64_t *)&v50, v42);
    v44 = (void *)atomic_load((unint64_t *)&v50);
    values = v44;
    keys = CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute");
    v45 = CFDictionaryCreate(*v22, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);

    v46 = (void *)atomic_load(a2);
    values = v46;
    v50 = v45;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&values, (const __CFDictionary **)&v50, (unint64_t *)&keys);
    do
      v47 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v48 = (void *)__ldaxr(a2);
    while (__stlxr(v47, a2));

  }
  return v4 != 0;
}

void TFont::DefaultDescriptor(unint64_t *a1, TFont *this, int *a3)
{
  uint64_t v6;
  BOOL v7;

  *a3 = TFont::IsSystemUIFontAndForShaping(this, &v7);
  if (*((_QWORD *)this + 50))
  {
    *a1 = 0;
  }
  else
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v6);
    TDescriptorSource::CreateDefaultDescriptor(*a3, a1);
  }
}

uint64_t std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 480);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

id TTenuousComponentFont::CopyRepertoireRange@<X0>(TTenuousComponentFont *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)this + 95);
  result = v3;
  *a2 = result;
  return result;
}

unint64_t TFontCascade::InitEmojiFont(TFontCascade *this)
{
  uint64_t v2;
  unint64_t v3;
  const __CFAllocator *v4;
  const __CFArray *v5;
  CFMutableArrayRef MutableCopy;
  void *v7;
  __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CTFontDescriptor *v11;
  const __CTFontDescriptor *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  id v18;
  id v19;
  id v20;
  CFRange v21;

  v2 = 88;
  if (*((uint64_t *)this + 10) > 0)
    v2 = 72;
  v3 = atomic_load((unint64_t *)((char *)this + v2));
  v20 = 0;
  if (*((uint64_t *)this + 10) >= 1 && *((uint64_t *)this + 12) >= 1)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const __CFArray *)atomic_load((unint64_t *)this + 9);
    MutableCopy = CFArrayCreateMutableCopy(v4, 0, v5);
    do
      v7 = (void *)__ldaxr((unint64_t *)&v20);
    while (__stlxr((unint64_t)MutableCopy, (unint64_t *)&v20));

    v8 = (__CFArray *)atomic_load((unint64_t *)&v20);
    v9 = (const __CFArray *)atomic_load((unint64_t *)this + 11);
    v21.length = *((_QWORD *)this + 12);
    v21.location = 0;
    CFArrayAppendArray(v8, v9, v21);
    v3 = atomic_load((unint64_t *)&v20);
  }
  v19 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v18);
  if (*((uint64_t *)this + 12) <= 0)
    v10 = 0;
  else
    v10 = (const __CFArray *)v3;
  v11 = (const __CTFontDescriptor *)atomic_load((unint64_t *)this + 1);
  TDescriptorSource::CopyEmojiFontDescriptor((TDescriptorSource *)&v18, v10, v11, (unint64_t *)&v19);
  v12 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v19);
  TFontCascade::CreateFallbackFromDescriptor(this, v12, 8, (unint64_t *)&v18);
  v13 = (unint64_t *)((char *)this + 40);
  do
    v14 = __ldaxr((unint64_t *)&v18);
  while (__stlxr(0, (unint64_t *)&v18));
  do
    v15 = (void *)__ldaxr(v13);
  while (__stlxr(v14, v13));

  v16 = atomic_load(v13);
  return v16;
}

void TDescriptorSource::CopyEmojiFontDescriptor(CFArrayRef theArray@<X1>, TPurgeableCache **a2@<X0>, int a3@<W2>, unint64_t *a4@<X8>)
{
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const __CTFontDescriptor *ValueAtIndex;
  const __CFCharacterSet *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  id v19;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v9 = Count;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(theArray, i);
        if ((CTFontDescriptorGetSymbolicTraits((uint64_t)ValueAtIndex) & 0x2000) != 0)
        {
          v19 = (id)CTFontDescriptorCopyAttribute(ValueAtIndex, CFSTR("NSCTFontCharacterSetAttribute"));
          do
            v12 = (const __CFCharacterSet *)__ldaxr((unint64_t *)&v19);
          while (__stlxr(0, (unint64_t *)&v19));

          if (CFCharacterSetIsCharacterMember(v12, 0xFE0Fu))
          {
            *a4 = (unint64_t)ValueAtIndex;
            v17 = v12;
            goto LABEL_30;
          }

        }
      }
    }
  }
  v13 = _CTGetEmojiFontName(a3 == 1);
  if (a3 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
      v14 = _CTGetEmojiFontName(1);
      if (v14 == v13 || v13 && v14 && CFEqual(v13, v14))
        v13 = _CTGetEmojiFontName(0);
    }
    v15 = (void *)atomic_load(&TDescriptorSource::CopyEmojiFontDescriptor(__CFArray const*,UIFontFlag)const::sEmojiUIFont);
    if (!v15)
    {
      v19 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::CopySystemFontDescriptorByName(a2, v13, 1, 0, (unint64_t *)&v19);
      v16 = atomic_load((unint64_t *)&v19);
      do
      {
        v15 = (void *)__ldaxr(&TDescriptorSource::CopyEmojiFontDescriptor(__CFArray const*,UIFontFlag)const::sEmojiUIFont);
        if (v15)
        {
          __clrex();
          goto LABEL_26;
        }
      }
      while (__stlxr(v16, &TDescriptorSource::CopyEmojiFontDescriptor(__CFArray const*,UIFontFlag)const::sEmojiUIFont));
      do
        v15 = (void *)__ldaxr((unint64_t *)&v19);
      while (__stlxr(0, (unint64_t *)&v19));
LABEL_26:

    }
    v19 = v15;
    do
      v18 = __ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    *a4 = v18;
    v17 = v19;
LABEL_30:

  }
  else
  {
    TDescriptorSource::CopySystemFontDescriptorByName(a2, v13, a3, 0, a4);
  }
}

void TDescriptorSource::CopySystemFontDescriptorByName(TPurgeableCache **a1@<X0>, const __CFString *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v8;
  const void *v9;
  unint64_t v11;
  void *v12;
  id v13;

  if (a3 == 1)
    v8 = 1031;
  else
    v8 = 7;
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  v9 = (const void *)*MEMORY[0x1E0C9AE40];
  TDescriptorSource::CopyFontDescriptorPerPostScriptName(a1, a2, v8, a4 | 7, 0, 0, 0, -1, a5, (const void *)*MEMORY[0x1E0C9AE40]);
  if (!atomic_load(a5))
  {
    TDescriptorSource::CopyFontDescriptorPerPostScriptName(a1, a2, v8 & 0xFFFFFFFFFFFFFC03, 0, 0, 0, 0, -1, (unint64_t *)&v13, v9);
    do
      v11 = __ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    do
      v12 = (void *)__ldaxr(a5);
    while (__stlxr(v11, a5));

  }
}

uint64_t TCFBase<TNativeParagraphStyle>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  unsigned __int8 v0;
  uint64_t result;

  v0 = atomic_load((unsigned __int8 *)&qword_1ECDE7928);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE7928))
  {
    qword_1ECDE7930 = 0;
    unk_1ECDE7938 = "CTParagraphStyle";
    qword_1ECDE7940 = 0;
    unk_1ECDE7948 = 0;
    qword_1ECDE7950 = (uint64_t)TCFBase<TNativeParagraphStyle>::ClassDestruct;
    unk_1ECDE7958 = TCFBase<TNativeParagraphStyle>::ClassEqual;
    qword_1ECDE7960 = (uint64_t)TCFBase<TNativeParagraphStyle>::ClassHash;
    unk_1ECDE7968 = 0;
    qword_1ECDE7970 = (uint64_t)TCFBase<TNativeParagraphStyle>::ClassDebug;
    unk_1ECDE7978 = 0;
    qword_1ECDE7980 = 0;
    unk_1ECDE7988 = 0;
    __cxa_guard_release(&qword_1ECDE7928);
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TNativeParagraphStyle>::fTypeID = result;
  return result;
}

double CTFontGetTransformedAdvancesForGlyphsAndStyle(uint64_t a1, int a2, unsigned int a3, double *a4, _WORD *a5, uint64_t a6, unint64_t a7)
{
  double v7;
  double v10;
  uint64_t v15;
  __int128 v16;
  double v17;
  void **v19;
  double v20[3];
  _OWORD v21[30];
  _OWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = 0.0;
  if (a1 && a5)
  {
    v10 = *(double *)&a6;
    if (a4 || a7 != 1)
    {
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v21[28] = v16;
      v21[29] = v16;
      v21[26] = v16;
      v21[27] = v16;
      v21[24] = v16;
      v21[25] = v16;
      v21[22] = v16;
      v21[23] = v16;
      v21[20] = v16;
      v21[21] = v16;
      v21[18] = v16;
      v21[19] = v16;
      v21[16] = v16;
      v21[17] = v16;
      v21[15] = v16;
      v21[14] = v16;
      v21[13] = v16;
      v21[12] = v16;
      v21[11] = v16;
      v21[10] = v16;
      v21[9] = v16;
      v21[8] = v16;
      v21[7] = v16;
      v21[6] = v16;
      v21[4] = v16;
      v21[5] = v16;
      v21[2] = v16;
      v21[3] = v16;
      v21[0] = v16;
      v21[1] = v16;
      memset(v20, 0, sizeof(v20));
      v22 = v21;
      if (*(double *)&a6 == 0.0)
      {
        std::vector<CGSize,TInlineBufferAllocator<CGSize,30ul>>::resize((uint64_t)v20, a7);
        v10 = v20[0];
      }
      TFont::GetAdvancesForGlyphs(*(_QWORD *)(a1 + 40), (uint64_t)a5, *(double **)&v10, 2, a7, a2, a3 | 0x100000000, a4);
      v7 = v17;
      v19 = (void **)v20;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](&v19);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 40);
      LOWORD(v19) = *a5;
      v20[0] = NAN;
      TFont::GetUnsummedAdvancesForGlyphs(v15, (uint64_t)&v19, v20, 1, 1, a2, a3 | 0x100000000);
      v7 = v20[0];
      if (v10 != 0.0)
      {
        **(_QWORD **)&v10 = *(_QWORD *)&v20[0];
        *(_QWORD *)(*(_QWORD *)&v10 + 8) = 0;
      }
    }
  }
  return v7;
}

uint64_t TFont::GetSystemUIFontOptions(void)::$_0::__invoke()
{
  uint64_t result;

  _MergedGlobals_12 = 1024;
  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
    _MergedGlobals_12 |= 2uLL;
  return result;
}

uint64_t CTFontTransformGlyphs(const __CTFont *a1, unsigned __int16 *a2, CGSize *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char v10;
  TFont *v11;
  int ShapingType;
  _BOOL8 HasAvailable;
  uint64_t v14;
  size_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v20[8200];
  void **v21;
  int v22;
  _QWORD v23[83];

  v5 = 0;
  v23[82] = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    if (a4 >= 1)
    {
      if (a5)
        v10 = a5;
      else
        v10 = 3;
      memcpy(v23, &unk_1849302A0, 0x290uLL);
      TRunGlue::TRunGlue((TRunGlue *)v23, a1, a2, a3, a4, 0, 0, 0);
      v11 = (TFont *)v23[77];
      ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(v23[77] + 400));
      HasAvailable = StackHasAvailable(0x8000uLL);
      if (HasAvailable)
      {
        MEMORY[0x1E0C80A78](HasAvailable, v14);
        memset(v20, 170, 0x2000uLL);
        if (ShapingType >= 2)
        {
          if (v23[78] <= 0x10000uLL)
            v15 = (unint64_t)(v23[78] + 7) >> 3;
          else
            v15 = 0x2000;
          bzero(v20, v15);
          TRunGlue::DetermineCoverage((uint64_t)v23, v20);
        }
        v21 = (void **)0xAAAAAAAAAAAAAA00;
        v22 = -1431655936;
        if ((v10 & 1) == 0)
          goto LABEL_24;
        if (*((_QWORD *)v11 + 40))
        {
          if (TFont::NeedsShapingForGlyphs(v11, a2, a4, 0))
          {
            v5 = TShapingEngine::ShapeGlyphs((uint64_t)v23, ShapingType, 0, (uint64_t)&v21, 0);
            if ((v10 & 2) == 0)
              goto LABEL_27;
            goto LABEL_25;
          }
LABEL_24:
          v5 = 1;
          if ((v10 & 2) == 0)
            goto LABEL_27;
LABEL_25:
          if ((_DWORD)v5)
          {
            v23[68] = 0x7FF0000000000000;
            v5 = TKerningEngine::PositionGlyphs((TRunGlue *)v23, ShapingType, (const TFont *)v21, v22, 0, 0, 1);
          }
LABEL_27:
          v17 = (_QWORD *)v23[73];
          if ((_QWORD *)v23[73] == &v23[70])
          {
            v18 = 4;
            v17 = &v23[70];
          }
          else
          {
            if (!v23[73])
            {
LABEL_32:
              v21 = (void **)&v23[46];
              std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v21);
              v21 = (void **)&v23[26];
              std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](&v21);
              v21 = (void **)&v23[7];
              std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](&v21);
              return v5;
            }
            v18 = 5;
          }
          (*(void (**)(void))(*v17 + 8 * v18))();
          goto LABEL_32;
        }
        if (TShapingEngine::ShapeGlyphs((uint64_t)v23, ShapingType, 0, (uint64_t)&v21, 0))
        {
          if (qword_1ECDE7550 != -1)
            dispatch_once_f(&qword_1ECDE7550, 0, (dispatch_function_t)GetShapingGlyphsQueue(void)::$_0::__invoke);
          v16 = qword_1ECDE7548;
          CFRetain(a1);
          dispatch_async_f(v16, a1, (dispatch_function_t)InitShapingGlyphsOnQueue(__CTFont const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::__invoke);
          goto LABEL_24;
        }
      }
      v5 = 0;
      goto LABEL_27;
    }
    return 1;
  }
  return v5;
}

CTLineRef CTLineCreateTruncatedLine(CTLineRef line, double width, CTLineTruncationType truncationType, CTLineRef truncationToken)
{
  CTLineRef v4;
  TCharStreamCFString *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t **TruncatedLine;
  id v18;
  id v19;
  id v20;

  v4 = truncationToken;
  v19 = 0;
  if (!truncationToken)
  {
    v8 = (TCharStreamCFString *)operator new();
    TCharStreamCFString::TCharStreamCFString(v8, &stru_1E15EDAC0, 0);
    v9 = (std::__shared_weak_count *)operator new();
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1740;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v10 = TCFBase<TLine>::Allocate();
    if (v10)
    {
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 48) = v8;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = v10 + 48;
      *(_QWORD *)(v10 + 56) = v9;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 72) = 0;
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 112) = v10 + 88;
      *(_BYTE *)(v10 + 232) = 0;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_QWORD *)(v10 + 197) = 0;
      *(_QWORD *)(v10 + 208) = 0;
      *(_QWORD *)(v10 + 216) = 0;
      *(_BYTE *)(v10 + 224) = 0;
      *(_QWORD *)(v10 + 248) = 0;
      *(_QWORD *)(v10 + 256) = 0;
      *(_QWORD *)(v10 + 240) = 0;
      *(_QWORD *)(v10 + 176) = 0xFFEFFFFFFFFFFFFFLL;
      v20 = (id)v10;
      do
        v11 = (void *)__ldaxr((unint64_t *)&v20);
      while (__stlxr(0, (unint64_t *)&v20));
      v18 = v11;

      v9 = 0;
    }
    else
    {
      v18 = 0;
    }
    do
      v12 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    do
      v13 = (void *)__ldaxr((unint64_t *)&v19);
    while (__stlxr(v12, (unint64_t *)&v19));

    v4 = (CTLineRef)atomic_load((unint64_t *)&v19);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (!v4)
      goto LABEL_16;
  }
  if (*(double *)(*((_QWORD *)v4 + 5) + 104) <= width)
    TruncatedLine = CreateTruncatedLine((uint64_t **)line, truncationType, v4, 0, width);
  else
LABEL_16:
    TruncatedLine = 0;

  return (CTLineRef)TruncatedLine;
}

BOOL CTFontDescriptorMatchFontDescriptorsWithProgressHandler(CFArrayRef descriptors, CFSetRef mandatoryAttributes, CTFontDescriptorProgressHandler progressBlock)
{
  return CTFontDescriptorMatchFontDescriptorsWithProgressHandlerCore(descriptors, mandatoryAttributes, 0, progressBlock);
}

uint64_t _CTFontCreateWithNameAndSymbolicTraits(const __CFString *a1, unsigned int a2, CGFloat a3)
{
  const __CFString *v5;
  uint64_t v6;
  const __CFString *v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  const void *v12;
  void *v14;
  _QWORD *v15;
  TDescriptor *v16;
  __CFString *v17;
  void *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  _BOOL4 v21;
  CFIndex v22;
  const __CTFontDescriptor *v23;
  int v24;
  const __CTFontDescriptor *v25;
  unint64_t v26;
  void *v27;
  const __CTFontDescriptor *v28;
  void *v29;
  const __CFArray *v30;
  void *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  CFIndex Count;
  const __CFString *v35;
  void *v36;
  const __CFArray *v37;
  TDescriptorSource *v38;
  unint64_t v39;
  void *v40;
  const __CTFontDescriptor *v42;
  const __CFString *v43;
  unint64_t v44;
  void *v45;
  const __CTFontDescriptor *v47;
  CTFontRef v48;
  const __CTFontDescriptor *v49;
  const __CTFontDescriptor *CopyWithSymbolicTraits;
  const __CTFontDescriptor *v51;
  id v52;
  const __CFArray *v53;
  id v55;
  id v56;
  id v57;
  TPurgeableCache *v58;
  id values;
  id keys;

  if (!a1)
    return 0;
  v5 = a1;
  if ((a2 & 2) != 0)
    v6 = 700;
  else
    v6 = 400;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v58);
  if ((a2 & 0x1000) != 0)
  {
    v8 = a2 & 0xFFFFEFFF;
    v9 = 1026;
  }
  else
  {
    v5 = TDescriptorSource::SubstituteFontNameForInvisibleFontName(v5, v7);
    v9 = 2;
    v8 = a2;
  }
  v10 = a2 & 1;
  if (v5 == CFSTR("Helvetica"))
    goto LABEL_11;
  v11 = 16;
  if (!v5)
    goto LABEL_12;
  if (CFEqual(v5, CFSTR("Helvetica")))
LABEL_11:
    v11 = 18;
  else
    v11 = 16;
LABEL_12:
  v57 = (id)0xAAAAAAAAAAAAAAAALL;
  v12 = (const void *)*MEMORY[0x1E0C9AE40];
  TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v58, v5, v9, v11, 0, 0, 0, -1, (unint64_t *)&v57, (const void *)*MEMORY[0x1E0C9AE40]);
  if (!atomic_load((unint64_t *)&v57))
  {
    v56 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::CopyMatchingDescriptorsForFamily(&v58, v5, 0, v9, (unint64_t *)&v56);
    v31 = (void *)atomic_load((unint64_t *)&v56);
    v32 = v31;
    if (v32)
    {
      v33 = v32;
      Count = CFArrayGetCount(v32);

      if (Count < 1)
        goto LABEL_39;
      if ((a2 & 0x1000) == 0)
      {
        v53 = (const __CFArray *)atomic_load((unint64_t *)&v56);
        goto LABEL_57;
      }
      TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v55, v8);
      v36 = (void *)atomic_load((unint64_t *)&v55);
      values = v36;
      keys = CFSTR("NSCTFontSymbolicTrait");
      v37 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);

      v38 = (TDescriptorSource *)atomic_load((unint64_t *)&v56);
      TDescriptorSource::CreateVariantWithTraitsMatchingDescriptors(v38, v37, (unint64_t *)&keys);
      do
        v39 = __ldaxr((unint64_t *)&keys);
      while (__stlxr(0, (unint64_t *)&keys));
      do
        v40 = (void *)__ldaxr((unint64_t *)&v57);
      while (__stlxr(v39, (unint64_t *)&v57));

      if (atomic_load((unint64_t *)&v57))
      {
        v42 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
        v6 = (uint64_t)CTFontCreateWithFontDescriptor(v42, a3, 0);

LABEL_58:
        v52 = v56;
LABEL_59:

        goto LABEL_60;
      }
    }
    else
    {
      v37 = 0;
    }

LABEL_39:
    v43 = (const __CFString *)TDescriptorSource::UIFontNameForFullName((uint64_t)v5, v35);
    if (!v43)
      goto LABEL_45;
    TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v58, v43, 0x402uLL, 1, 0, 0, 0, -1, (unint64_t *)&keys, v12);
    do
      v44 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v45 = (void *)__ldaxr((unint64_t *)&v57);
    while (__stlxr(v44, (unint64_t *)&v57));

    if (!atomic_load((unint64_t *)&v57))
    {
LABEL_45:
      v6 = 0;
      goto LABEL_58;
    }
    v47 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
    v48 = CTFontCreateWithFontDescriptor(v47, a3, 0);
LABEL_57:
    v6 = (uint64_t)v48;
    goto LABEL_58;
  }
  if ((a2 & 0x1000) != 0 || (a2 & 3) == 0)
  {
LABEL_50:
    v49 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
    if (v8)
      CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v49, v8, v8);
    else
      CopyWithSymbolicTraits = v49;
    v51 = CopyWithSymbolicTraits;
    if (!CopyWithSymbolicTraits)
      CopyWithSymbolicTraits = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
    v6 = (uint64_t)CTFontCreateWithFontDescriptor(CopyWithSymbolicTraits, a3, 0);
    v52 = v51;
    goto LABEL_59;
  }
  v14 = (void *)atomic_load((unint64_t *)&v57);
  v15 = v14;
  v16 = (TDescriptor *)v15[5];

  TDescriptor::CopyAttribute(v16, CFSTR("NSFontFamilyAttribute"), 3, &keys);
  do
    v17 = (__CFString *)__ldaxr((unint64_t *)&keys);
  while (__stlxr(0, (unint64_t *)&keys));

  keys = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyMatchingDescriptorsForFamily(&v58, v17, 0, v9, (unint64_t *)&keys);
  v18 = (void *)atomic_load((unint64_t *)&keys);
  v19 = v18;
  v20 = v19;
  v21 = v19 == 0;
  if (!v19)
    goto LABEL_47;
  v22 = CFArrayGetCount(v19);

  if (v22 >= 1)
  {
    v23 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
    values = (id)CTFontDescriptorCopyAttribute(v23, CFSTR("NSCTFontTraitsAttribute"));
    do
      v20 = (const __CFArray *)__ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));

    v24 = GetSymbolicTraitsFromTraits(v20) & 0x61;
    if (v10 != v24)
    {
      v10 |= v24;
      v25 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
      values = CTFontDescriptorCreateCopyWithSymbolicTraits(v25, v10, 0x61u);
      do
        v26 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v27 = (void *)__ldaxr((unint64_t *)&v57);
      while (__stlxr(v26, (unint64_t *)&v57));

    }
    v28 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v57);
    values = (id)CTFontDescriptorCopyAttribute(v28, CFSTR("NSCTFontPostScriptNameAttribute"));
    do
      v29 = (void *)__ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));

    v30 = (const __CFArray *)atomic_load((unint64_t *)&keys);

LABEL_47:
    goto LABEL_49;
  }
  v21 = 1;
LABEL_49:

  if (v21)
    goto LABEL_50;
LABEL_60:

  return v6;
}

const __CFString *TDescriptorSource::SubstituteFontNameForInvisibleFontName(const __CFString *this, const __CFString *a2)
{
  const __CFString *v2;

  v2 = this;
  if (TDescriptorSource::ShouldSubstituteInvisibleFontName(this, a2))
  {
    CTFontLogSystemFontNameRequest();
    return CFSTR("TimesNewRomanPSMT");
  }
  return v2;
}

void TDescriptorSource::CopyMatchingDescriptorsForFamily(TPurgeableCache **this@<X0>, const __CFString *a2@<X1>, CFComparisonResult (*a3)(const void *, const void *, void *)@<X3>, unint64_t a4@<X2>, unint64_t *a5@<X8>)
{
  CFDictionaryRef v9;
  const void *v10;
  void *keys;

  if (a2)
  {
    v10 = a2;
    keys = CFSTR("NSFontFamilyAttribute");
    v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, &v10, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    TDescriptorSource::CopyDescriptorsForRequest(a5, v9, this, 0, a3, a4, 0);

  }
  else
  {
    *a5 = 0;
  }
}

void TDescriptorSource::CopyDescriptorForRequest(TDescriptorSource *this@<X0>, const __CFDictionary *a2@<X1>, const __CFSet *a3@<X2>, const __CFDictionary *a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  const __CFSet *v8;
  int v10;
  void *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex Count;
  __CFDictionary *v16;
  const __CFDictionary *v17;
  CFIndex v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  void *v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  CFIndex v24;
  TDescriptorSource *v25;
  TDescriptorSource *v26;
  unint64_t v27;
  void *v28;
  id v29;
  const __CFArray *v30;
  const __CFDictionary *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  void *v36;
  const __CFArray *v37;
  const __CFArray *v38;
  void *ValueAtIndex;
  unint64_t v40;
  id v41;
  const __CFArray *context;
  id v43;
  id v44;
  id v45;

  v8 = a3;
  v10 = (int)this;
  v44 = 0;
  if (!a3)
  {
    if (qword_1ECDE7748 != -1)
      dispatch_once_f(&qword_1ECDE7748, 0, (dispatch_function_t)TDescriptorSource::GetMatchableNameAttributes(void)::$_0::__invoke);
    v8 = (const __CFSet *)qword_1ECDE7740;
  }
  v43 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyDescriptorsForRequest((uint64_t *)&v43, v10, a2);
  v12 = (void *)atomic_load((unint64_t *)&v43);
  v13 = v12;
  if (!v13)
    goto LABEL_38;
  v14 = v13;
  Count = CFArrayGetCount(v13);

  if (Count >= 1)
  {
    context = (const __CFArray *)0xAAAAAAAAAAAAAAAALL;
    TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&context, a2);
    if (Count != 1)
    {
      CFSetApplyFunction(v8, (CFSetApplierFunction)TDescriptorSource::CopyDescriptorForRequest(__CFDictionary const*,__CFSet const*,__CFDictionary const*,unsigned long)const::$_0::__invoke, &context);
      v16 = (__CFDictionary *)atomic_load((unint64_t *)&context);
      CFDictionaryRemoveValue(v16, CFSTR("NSFontSizeAttribute"));
    }
    v17 = (const __CFDictionary *)atomic_load((unint64_t *)&context);
    v18 = CFDictionaryGetCount(v17);
    if (Count == 1 || !v18)
    {
      if (Count != 1 && !v18)
      {
        v26 = (TDescriptorSource *)atomic_load((unint64_t *)&v43);
        TDescriptorSource::CreateVariantWithTraitsMatchingDescriptors(v26, a4, (unint64_t *)&v45);
        do
          v27 = __ldaxr((unint64_t *)&v45);
        while (__stlxr(0, (unint64_t *)&v45));
        do
          v28 = (void *)__ldaxr((unint64_t *)&v44);
        while (__stlxr(v27, (unint64_t *)&v44));

        v29 = v45;
LABEL_36:

LABEL_37:
        v13 = context;
LABEL_38:

        goto LABEL_39;
      }
    }
    else
    {
      if (a4)
      {
        v19 = (const __CFDictionary *)atomic_load((unint64_t *)&context);
        if (CFDictionaryGetCount(v19) >= 1)
        {
          v45 = (id)0xAAAAAAAAAAAAAAAALL;
          v20 = (const __CFDictionary *)atomic_load((unint64_t *)&context);
          if (qword_1ECDE7738 != -1)
            dispatch_once_f(&qword_1ECDE7738, 0, (dispatch_function_t)TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke);
          TDescriptorSource::CopyMandatoryMatchableRequest(v20, (CFSetRef)qword_1ECDE7730, (unint64_t *)&v45);
          v21 = (void *)atomic_load((unint64_t *)&v45);
          v22 = v21;
          if (v22)
          {
            v23 = v22;
            v24 = CFDictionaryGetCount(v22);

            if (v24 == 1)
            {
              v25 = (TDescriptorSource *)atomic_load((unint64_t *)&v43);
              TDescriptorSource::CreateVariantWithTraitsMatchingDescriptors(v25, a4, a6);

              goto LABEL_41;
            }
          }
          else
          {

          }
        }
      }
      v30 = (const __CFArray *)atomic_load((unint64_t *)&v43);
      v31 = (const __CFDictionary *)atomic_load((unint64_t *)&context);
      TDescriptorSource::CopyDescriptorsForRequestFromArray((TDescriptorSource *)&v45, v30, v31, 0, a5 | 3, 1);
      do
        v32 = (void *)__ldaxr((unint64_t *)&v45);
      while (__stlxr(0, (unint64_t *)&v45));
      v41 = v32;

      do
        v33 = __ldaxr((unint64_t *)&v41);
      while (__stlxr(0, (unint64_t *)&v41));
      do
        v34 = (void *)__ldaxr((unint64_t *)&v44);
      while (__stlxr(v33, (unint64_t *)&v44));

      if (atomic_load((unint64_t *)&v44))
        goto LABEL_37;
    }
    v36 = (void *)atomic_load((unint64_t *)&v43);
    v37 = v36;
    v38 = v37;
    if (v37)
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v37, 0);
    else
      ValueAtIndex = 0;
    TCFRef<__CTFont const*>::Retain((unint64_t *)&v44, ValueAtIndex);
    v29 = v38;
    goto LABEL_36;
  }
  do
LABEL_39:
    v40 = __ldaxr((unint64_t *)&v44);
  while (__stlxr(0, (unint64_t *)&v44));
  *a6 = v40;
LABEL_41:

}

unint64_t CTFontDescriptorCreateMatchingFontDescriptorsWithOptions(uint64_t a1, const __CFSet *a2, uint64_t a3)
{
  unint64_t v3;
  id v5;

  if (!a1)
    return 0;
  TDescriptor::CreateMatchingDescriptors(*(TDescriptor **)(a1 + 40), a2, a3, (unint64_t *)&v5);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));

  return v3;
}

CFArrayRef CTFontDescriptorCreateMatchingFontDescriptors(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  const __CFArray *v2;
  id v4;

  if (!descriptor)
    return 0;
  TDescriptor::CreateMatchingDescriptors(*((TDescriptor **)descriptor + 5), mandatoryAttributes, 0, (unint64_t *)&v4);
  do
    v2 = (const __CFArray *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

void TDescriptor::CreateMatchingDescriptors(TDescriptor *this@<X0>, const __CFSet *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  int v4;
  uint64_t v8;
  const __CFDictionary *Attributes;
  const __CFDictionary *v10;
  CFComparisonResult (*v11)(const void *, const void *, void *);
  void *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  id v16;
  int v17;
  void *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  void *Value;
  void *v22;
  CFTypeID v23;
  void *v24;
  void *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFIndex Count;
  const __CFArray *v29;
  CFIndex v30;
  const TDescriptor **ValueAtIndex;
  const __CFDictionary *v32;
  CTFontDescriptor *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  TDescriptor *v38;
  void *v39;
  unint64_t v40;
  void *v41;
  void *v42;
  unint64_t v43;
  void *v44;
  void *v46;
  id v47;
  __CFArray *v48;
  TDescriptorSource *v49;
  const __CFString *PostScriptNameAndAttribute;
  void *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  void *v56;
  const __CFAllocator *allocator;
  CFIndex v58;
  const __CFArray *theArray;
  id v60;
  id Mutable;
  TPurgeableCache *v62;
  void *values;
  id keys;

  v4 = a3;
  *a4 = 0;
  v8 = AsMatchingOptions(*((_DWORD *)this + 4)) | a3;
  v62 = (TPurgeableCache *)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v62);
  Attributes = (const __CFDictionary *)TDescriptor::GetAttributes(this, 1);
  if (!Attributes || !CFDictionaryGetCount(Attributes))
  {
    if ((v4 & 0x20000) != 0)
      TDescriptorSource::CopyAllDescriptorsInternal(&v62, 0, v8, (unint64_t *)&keys);
    else
      TDescriptorSource::CopyAllDescriptorsSorted(&v62, v8, &keys);
    do
      v15 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v14 = (void *)__ldaxr(a4);
    while (__stlxr(v15, a4));
    goto LABEL_16;
  }
  if ((*((_DWORD *)this + 4) & 0x40000000) == 0)
  {
    if ((*(_QWORD *)&v4 & 0x20000) != 0)
      v11 = 0;
    else
      v11 = (CFComparisonResult (*)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedence;
    v12 = (void *)atomic_load((unint64_t *)this + 1);
    TDescriptorSource::CopyDescriptorsForRequest((unint64_t *)&keys, v12, &v62, a2, v11, v8, 0);
    do
      v13 = __ldaxr((unint64_t *)&keys);
    while (__stlxr(0, (unint64_t *)&keys));
    do
      v14 = (void *)__ldaxr(a4);
    while (__stlxr(v13, a4));
LABEL_16:

    v16 = keys;
    goto LABEL_17;
  }
  v49 = (TDescriptorSource *)atomic_load((unint64_t *)this + 1);
  PostScriptNameAndAttribute = (const __CFString *)TDescriptorSource::GetPostScriptNameAndAttribute(v49, v10);
  if (!PostScriptNameAndAttribute)
    goto LABEL_18;
  values = (void *)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v62, PostScriptNameAndAttribute, v8, 1, 0, 0, 0, -1, (unint64_t *)&values, (const void *)*MEMORY[0x1E0C9AE40]);
  if (atomic_load((unint64_t *)&values))
  {
    v52 = (void *)atomic_load((unint64_t *)&values);
    keys = v52;
    Mutable = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, 1, MEMORY[0x1E0C9B378]);
    do
      v53 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    do
      v54 = (void *)__ldaxr(a4);
    while (__stlxr(v53, a4));

  }
  v16 = values;
LABEL_17:

LABEL_18:
  v17 = *((_DWORD *)this + 4) & 0x7FFFFFFF;
  v18 = (void *)atomic_load((unint64_t *)this + 1);
  v19 = v18;
  v20 = v19;
  if (v19 && (Value = (void *)CFDictionaryGetValue(v19, CFSTR("NSCTFontCharacterSetAttribute"))) != 0)
  {
    v22 = Value;
    v23 = CFGetTypeID(Value);
    if (v23 == CFCharacterSetGetTypeID())
      v24 = v22;
    else
      v24 = 0;
  }
  else
  {
    v24 = 0;
  }

  if (v24 || v17)
  {
    v25 = (void *)atomic_load(a4);
    v26 = v25;
    if (v26)
    {
      v27 = v26;
      Count = CFArrayGetCount(v26);

      if (Count < 1)
        return;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v29 = (const __CFArray *)atomic_load(a4);
      theArray = v29;
      if (v29)
      {
        v58 = CFArrayGetCount(v29);
        if (v58)
        {
          v30 = 0;
          while (1)
          {
            ValueAtIndex = (const TDescriptor **)CFArrayGetValueAtIndex(theArray, v30);
            v60 = 0;
            if (v24)
            {
              values = v24;
              keys = CFSTR("NSCTFontCharacterSetAttribute");
              v32 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v33 = (CTFontDescriptor *)TCFBase<TDescriptor>::Allocate();
              if (v33)
              {
                CTFontDescriptor::CTFontDescriptor(v33, (const CTFontDescriptor *)ValueAtIndex, v32, v17);
                keys = v34;
                do
                  v35 = (void *)__ldaxr((unint64_t *)&keys);
                while (__stlxr(0, (unint64_t *)&keys));
                values = v35;

              }
              else
              {
                values = 0;
              }
              do
                v40 = __ldaxr((unint64_t *)&values);
              while (__stlxr(0, (unint64_t *)&values));
              do
                v41 = (void *)__ldaxr((unint64_t *)&v60);
              while (__stlxr(v40, (unint64_t *)&v60));

              v42 = v32;
            }
            else
            {
              v36 = TCFBase<TDescriptor>::Allocate();
              if (v36)
              {
                v37 = (_QWORD *)v36;
                v38 = (TDescriptor *)(v36 + 48);
                v37[2] = 0;
                v37[3] = TDescriptor::Hash;
                v37[4] = 0;
                v37[5] = v38;
                TDescriptor::TDescriptor(v38, ValueAtIndex[5], v17);
                keys = v37;
                do
                  v39 = (void *)__ldaxr((unint64_t *)&keys);
                while (__stlxr(0, (unint64_t *)&keys));
                values = v39;

              }
              else
              {
                values = 0;
              }
              do
                v43 = __ldaxr((unint64_t *)&values);
              while (__stlxr(0, (unint64_t *)&values));
              do
                v44 = (void *)__ldaxr((unint64_t *)&v60);
              while (__stlxr(v43, (unint64_t *)&v60));

              v42 = values;
            }

            if (!atomic_load((unint64_t *)&v60))
              break;
            v46 = (void *)atomic_load((unint64_t *)&v60);
            v47 = v46;
            v48 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
            CFArrayAppendValue(v48, v47);

            if (++v30 == v58)
              goto LABEL_59;
          }

        }
      }
      do
LABEL_59:
        v55 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      do
        v56 = (void *)__ldaxr(a4);
      while (__stlxr(v55, a4));

      v26 = (const __CFArray *)Mutable;
    }

  }
}

void TDescriptorSource::CopyDescriptorsForRequestFromArray(TDescriptorSource *this, CFArrayRef theArray, const __CFDictionary *a3, CFComparisonResult (__cdecl *a4)(const void *, const void *, void *), unint64_t a5, int a6)
{
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v12;
  CFIndex v13;
  int v14;
  __CFArray *v15;
  const __CFArray *v16;
  unint64_t v17;
  void *v18;
  CFTypeID TypeID;
  const __CFString *Value;
  const __CFString *v21;
  const __CFString *v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  const __CFBoolean *v36;
  const __CFBoolean *v37;
  CFTypeID v38;
  const __CFBoolean *v39;
  __CFURL *v40;
  __CFURL *v41;
  CFTypeID v42;
  __CFURL *v43;
  __CFNumber *v44;
  __CFNumber *v45;
  CFTypeID v46;
  __CFNumber *v47;
  __CFNumber *v48;
  __CFNumber *v49;
  CFTypeID v50;
  __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  CFTypeID v54;
  const __CFNumber *v55;
  void *v56;
  CFTypeID v57;
  void *v58;
  void *v59;
  void *v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  CFTypeID v65;
  const __CFArray *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  void *v70;
  __CFDictionary *v71;
  __CFDictionary *v72;
  CFTypeID v73;
  __CFDictionary *v74;
  __CFCharacterSet *v75;
  __CFCharacterSet *v76;
  CFTypeID v77;
  __CFCharacterSet *v78;
  char v79;
  CFIndex v80;
  CFIndex v81;
  CFIndex v82;
  TDescriptor **v83;
  TDescriptor **ValueAtIndex;
  TDescriptor **v85;
  TDescriptor *v86;
  const TBaseFont *v87;
  const __CFArray *v89;
  const __CFArray *v91;
  void **v92;
  __CFArray *v93;
  const __CFArray *v94;
  const __CFArray *v95;
  void *v96;
  const __CFArray *v97;
  CFIndex v98;
  void *v99;
  unint64_t v100;
  CFComparisonResult (*v101)(const void *, const void *, void *);
  unint64_t v102;
  int v103;
  int IsUserInstalled;
  char v105;
  CFComparisonResult (__cdecl *v106)(const void *, const void *, void *);
  const __CFBoolean *BOOLean;
  const __CFNumber *number;
  __CFNumber *v109;
  __CFNumber *v110;
  _BOOL4 v111;
  TDescriptorSource *v112;
  __CFURL *v113;
  int v114;
  __CFDictionary *v115;
  __CFCharacterSet *v116;
  __CFString *v117;
  const __CFString *v118;
  const __CFString *v119;
  __CFString *v120;
  void *values[2];
  CFArrayRef valuePtr;
  CFArrayRef v124;
  id v125;
  id v126[2];
  id v127[2];
  CFRange v128;

  v9 = theArray;
  Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    *(_QWORD *)this = 0;
    return;
  }
  v12 = Count;
  if (a3)
    v13 = CFDictionaryGetCount(a3);
  else
    v13 = 0;
  v127[0] = 0;
  if (v12 >= 2)
  {
    v14 = v13 ? a6 : 1;
    if (a4 && v14)
    {
      v126[0] = (id)0xAAAAAAAAAAAAAAAALL;
      TCFMutableArray::TCFMutableArray((TCFMutableArray *)v126, v9);
      v15 = (__CFArray *)atomic_load((unint64_t *)v126);
      v16 = (const __CFArray *)atomic_load((unint64_t *)v126);
      v128.length = CFArrayGetCount(v16);
      v128.location = 0;
      CFArraySortValues(v15, v128, a4, 0);
      v9 = (const __CFArray *)atomic_load((unint64_t *)v126);
      do
        v17 = __ldaxr((unint64_t *)v126);
      while (__stlxr(0, (unint64_t *)v126));
      do
        v18 = (void *)__ldaxr((unint64_t *)v127);
      while (__stlxr(v17, (unint64_t *)v127));

    }
  }
  if (v13)
  {
    v112 = this;
    v126[0] = 0;
    v126[1] = 0;
    TypeID = CFStringGetTypeID();
    v106 = a4;
    if (a3)
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("NSCTFontPostScriptNameAttribute"));
      if (Value)
      {
        v21 = Value;
        if (CFGetTypeID(Value) == TypeID)
          v22 = v21;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
      v24 = (__CFString *)CFDictionaryGetValue(a3, CFSTR("NSFontNameAttribute"));
      if (v24)
      {
        v25 = v24;
        if (CFGetTypeID(v24) == TypeID)
          v26 = v25;
        else
          v26 = 0;
        v120 = v26;
      }
      else
      {
        v120 = 0;
      }
      v27 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("NSFontVisibleNameAttribute"));
      if (v27)
      {
        v28 = v27;
        if (CFGetTypeID(v27) == TypeID)
          v29 = v28;
        else
          v29 = 0;
        v119 = v29;
      }
      else
      {
        v119 = 0;
      }
      v30 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("NSFontFamilyAttribute"));
      if (v30)
      {
        v31 = v30;
        if (CFGetTypeID(v30) == TypeID)
          v32 = v31;
        else
          v32 = 0;
        v118 = v32;
      }
      else
      {
        v118 = 0;
      }
      v33 = (__CFString *)CFDictionaryGetValue(a3, CFSTR("NSFontFaceAttribute"));
      if (v33)
      {
        v34 = v33;
        if (CFGetTypeID(v33) == TypeID)
          v35 = v34;
        else
          v35 = 0;
        v117 = v35;
      }
      else
      {
        v117 = 0;
      }
      v36 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("NSCTFontUserInstalledAttribute"));
      if (v36)
      {
        v37 = v36;
        v38 = CFGetTypeID(v36);
        if (v38 == CFBooleanGetTypeID())
          v39 = v37;
        else
          v39 = 0;
        BOOLean = v39;
      }
      else
      {
        BOOLean = 0;
      }
      v40 = (__CFURL *)CFDictionaryGetValue(a3, CFSTR("NSCTFontFileURLAttribute"));
      if (v40)
      {
        v41 = v40;
        v42 = CFGetTypeID(v40);
        if (v42 == CFURLGetTypeID())
          v43 = v41;
        else
          v43 = 0;
        v113 = v43;
      }
      else
      {
        v113 = 0;
      }
      v44 = (__CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTFontFormatAttribute"));
      if (v44)
      {
        v45 = v44;
        v46 = CFGetTypeID(v44);
        if (v46 == CFNumberGetTypeID())
          v47 = v45;
        else
          v47 = 0;
        v110 = v47;
      }
      else
      {
        v110 = 0;
      }
      v48 = (__CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTFontRegistrationScopeAttribute"));
      if (v48)
      {
        v49 = v48;
        v50 = CFGetTypeID(v48);
        if (v50 == CFNumberGetTypeID())
          v51 = v49;
        else
          v51 = 0;
        v109 = v51;
      }
      else
      {
        v109 = 0;
      }
      v52 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTFontDomainAttribute"));
      if (v52)
      {
        v53 = v52;
        v54 = CFGetTypeID(v52);
        if (v54 == CFNumberGetTypeID())
          v55 = v53;
        else
          v55 = 0;
        number = v55;
      }
      else
      {
        number = 0;
      }
      v125 = (id)0xAAAAAAAAAAAAAAAALL;
      v23 = (void *)CFDictionaryGetValue(a3, CFSTR("NSCTFontDesignLanguagesAttribute"));
      if (v23)
      {
        v56 = v23;
        v57 = CFGetTypeID(v23);
        if (v57 == CFArrayGetTypeID())
          v23 = v56;
        else
          v23 = 0;
      }
    }
    else
    {
      v22 = 0;
      v120 = 0;
      v118 = 0;
      v119 = 0;
      v117 = 0;
      BOOLean = 0;
      number = 0;
      v113 = 0;
      v109 = 0;
      v110 = 0;
      v23 = 0;
      v125 = (id)0xAAAAAAAAAAAAAAAALL;
    }
    values[0] = v23;
    do
      v58 = (void *)__ldaxr((unint64_t *)values);
    while (__stlxr(0, (unint64_t *)values));
    v125 = v58;

    if (a3)
    {
      v59 = (void *)CFDictionaryGetValue(a3, CFSTR("NSCTFontDesignLanguagesAttribute"));
      if (v59)
      {
        v60 = v59;
        if (CFGetTypeID(v59) == TypeID)
        {
          values[0] = v60;
          v124 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
          do
            v61 = __ldaxr((unint64_t *)&v124);
          while (__stlxr(0, (unint64_t *)&v124));
          do
            v62 = (void *)__ldaxr((unint64_t *)&v125);
          while (__stlxr(v61, (unint64_t *)&v125));

        }
      }
      v124 = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
      v63 = (void *)CFDictionaryGetValue(a3, CFSTR("NSCTFontLanguagesAttribute"));
      if (v63)
      {
        v64 = v63;
        v65 = CFGetTypeID(v63);
        if (v65 == CFArrayGetTypeID())
          v63 = v64;
        else
          v63 = 0;
      }
    }
    else
    {
      v63 = 0;
      v124 = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    }
    values[0] = v63;
    do
      v66 = (const __CFArray *)__ldaxr((unint64_t *)values);
    while (__stlxr(0, (unint64_t *)values));
    v124 = v66;

    if (a3)
    {
      v67 = (void *)CFDictionaryGetValue(a3, CFSTR("NSCTFontLanguagesAttribute"));
      if (v67)
      {
        v68 = v67;
        if (CFGetTypeID(v67) == TypeID)
        {
          values[0] = v68;
          valuePtr = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
          do
            v69 = __ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          do
            v70 = (void *)__ldaxr((unint64_t *)&v124);
          while (__stlxr(v69, (unint64_t *)&v124));

        }
      }
      v71 = (__CFDictionary *)CFDictionaryGetValue(a3, CFSTR("NSCTFontTraitsAttribute"));
      if (v71)
      {
        v72 = v71;
        v73 = CFGetTypeID(v71);
        if (v73 == CFDictionaryGetTypeID())
          v74 = v72;
        else
          v74 = 0;
        v115 = v74;
      }
      else
      {
        v115 = 0;
      }
      v75 = (__CFCharacterSet *)CFDictionaryGetValue(a3, CFSTR("NSCTFontCharacterSetAttribute"));
      if (v75)
      {
        v76 = v75;
        v77 = CFGetTypeID(v75);
        if (v77 == CFCharacterSetGetTypeID())
          v78 = v76;
        else
          v78 = 0;
        v116 = v78;
        goto LABEL_119;
      }
    }
    else
    {
      v115 = 0;
    }
    v116 = 0;
LABEL_119:
    v114 = a6;
    if ((a5 & 8) != 0)
      v79 = a6;
    else
      v79 = 1;
    v105 = v79;
    values[0] = 0;
    values[1] = 0;
    v111 = ShouldFilterInvisibles(a3, a5);
    if (v9)
    {
      v80 = CFArrayGetCount(v9);
      if (v80)
      {
        v81 = v80;
        v82 = 0;
        v83 = (TDescriptor **)*MEMORY[0x1E0C9B0D0];
        while (1)
        {
          ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(v9, v82);
          if (ValueAtIndex == v83)
            goto LABEL_167;
          v85 = ValueAtIndex;
          v86 = ValueAtIndex[5];
          if ((*((_DWORD *)v86 + 4) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(ValueAtIndex[5], a5, 0.0);
          v87 = (const TBaseFont *)atomic_load((unint64_t *)v86 + 4);
          if (!v87 || v22 && !ComparePostScriptName(v22, v87))
            goto LABEL_167;
          if (v120 && !CompareName(v120, v87, (a5 & 0x40) != 0, (a5 & 0x200) != 0))
            goto LABEL_167;
          if ((unint64_t)v119 | (unint64_t)v118 | (unint64_t)v117
            && !CompareOtherNamesInclusive(v119, v118, v117, v87, (a5 & 0x40) != 0))
          {
            goto LABEL_167;
          }
          if (atomic_load((unint64_t *)&v125))
          {
            v89 = (const __CFArray *)atomic_load((unint64_t *)&v125);
            if (!CompareDesignLanguages(v89, v87))
              goto LABEL_167;
          }
          if (atomic_load((unint64_t *)&v124))
          {
            v91 = (const __CFArray *)atomic_load((unint64_t *)&v124);
            if (!CompareSupportedLanguages(v91, v87))
              goto LABEL_167;
          }
          if (v116 && !CompareCharSet(v116, v87))
            goto LABEL_167;
          if (v115 && !CompareTraits(v115, v87))
            goto LABEL_167;
          if (v113 && !CompareFileURL(v113, v87))
            goto LABEL_167;
          if (v110 && !CompareFormat(v110, v87))
            goto LABEL_167;
          if (v109 && !CompareScope(v109, v87))
            goto LABEL_167;
          if (number)
          {
            LODWORD(valuePtr) = -1431655766;
            CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
            v103 = (int)valuePtr;
            if (((*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v87 + 272))(v87) & v103) == 0)
              goto LABEL_167;
          }
          if (BOOLean)
          {
            IsUserInstalled = TBaseFont::IsUserInstalled(v87);
            if (CFBooleanGetValue(BOOLean) != IsUserInstalled)
              goto LABEL_167;
          }
          if (((a5 & 4) == 0 || ((*(uint64_t (**)(const TBaseFont *))(*(_QWORD *)v87 + 704))(v87) & 1) != 0)
            && (!v111
             || !(*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v87 + 696))(v87)
             || a3
             && (CFDictionaryGetValue(a3, CFSTR("NSFontNameAttribute"))
              || CFDictionaryGetValue(a3, CFSTR("NSFontFamilyAttribute"))))
            && ((a5 & 0x2000) == 0 || !(*(unsigned int (**)(const TBaseFont *))(*(_QWORD *)v87 + 688))(v87)))
          {
            break;
          }
          if (v114)
          {
            TCFLazyMutableArray::LazyCreate((TCFLazyMutableArray *)values);
            v92 = values;
LABEL_166:
            v93 = (__CFArray *)atomic_load((unint64_t *)v92);
            CFArrayAppendValue(v93, v85);
          }
LABEL_167:
          if (v81 == ++v82)
            goto LABEL_168;
        }
        if ((v114 & 1) != 0)
        {
          v96 = v85;
LABEL_173:
          *(_QWORD *)v112 = v96;
          goto LABEL_183;
        }
        TCFLazyMutableArray::LazyCreate((TCFLazyMutableArray *)v126);
        v92 = v126;
        goto LABEL_166;
      }
    }
LABEL_168:
    if (v114)
    {
      if ((a5 >> 2) & 1 | v111)
      {
        v94 = (const __CFArray *)atomic_load((unint64_t *)values);
        if (v94)
        {
          if (CFArrayGetCount(v94) >= 1)
          {
            v95 = (const __CFArray *)atomic_load((unint64_t *)values);
            v96 = (void *)CFArrayGetValueAtIndex(v95, 0);
            goto LABEL_173;
          }
        }
      }
    }
    v97 = (const __CFArray *)atomic_load((unint64_t *)v126);
    if (!v97 || (v98 = CFArrayGetCount(v97), v98 < 1))
    {
      *(_QWORD *)v112 = 0;
      goto LABEL_183;
    }
    if (v98 != 1)
    {
      if ((v105 & 1) == 0)
      {
        v101 = (CFComparisonResult (*)(const void *, const void *, void *))atomic_load((unint64_t *)v126);
        CreateDescriptorArrayFilteringDuplicates((const __CFArray *)&valuePtr, v101, v106);
        do
          v102 = __ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        *(_QWORD *)v112 = v102;

        goto LABEL_183;
      }
      if (v106)
        TCFLazyMutableArray::Sort((TCFLazyMutableArray *)v126, v106, v99);
    }
    do
      v100 = __ldaxr((unint64_t *)v126);
    while (__stlxr(0, (unint64_t *)v126));
    *(_QWORD *)v112 = v100;
LABEL_183:

    goto LABEL_184;
  }
  *(_QWORD *)this = v9;
LABEL_184:

}

void TDescriptorSource::CopyDescriptorsForRequestWithFamilyName(TDescriptorSource *this, const __CFString *a2, __CFString *a3, uint64_t a4)
{
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  const void *ValueAtIndex;
  void *v16;
  id v17;
  __CFArray *v18;
  unint64_t v19;
  id v20;
  __CFString v21;

  v21.info = 0;
  v21.data = 0;
  if ((a4 & 0x10400) != 0 || !TDescriptorSource::ShouldSubstituteInvisibleFontName(a3, a2))
  {
    v21.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    CopyPostScriptNamesForFamily(a3, (a4 & 0x200) != 0, &v21);
    v8 = (const __CFArray *)atomic_load((unint64_t *)&v21);
    if (v8)
    {
      Count = CFArrayGetCount(v8);
      if (Count)
      {
        v10 = Count;
        v11 = 0;
        v12 = a4 | 0x10;
        v13 = *MEMORY[0x1E0C9AE40];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
          v20 = (id)0xAAAAAAAAAAAAAAAALL;
          TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v20, a2, ValueAtIndex, v12, 7, 0, 0, 0, -1, v13);
          if (atomic_load((unint64_t *)&v20))
          {
            v16 = (void *)atomic_load((unint64_t *)&v20);
            v17 = v16;
            TCFLazyMutableArray::LazyCreate((TCFLazyMutableArray *)&v21.info);
            v18 = (__CFArray *)atomic_load((unint64_t *)&v21.info);
            CFArrayAppendValue(v18, v17);

          }
          ++v11;
        }
        while (v10 != v11);
      }
    }
    do
      v19 = __ldaxr((unint64_t *)&v21.info);
    while (__stlxr(0, (unint64_t *)&v21.info));
    *(_QWORD *)this = v19;

  }
  else
  {
    *(_QWORD *)this = 0;
  }

}

void TDescriptorSource::CopyDescriptorsForRequest(unint64_t *__return_ptr a1@<X8>, void *cf@<X1>, TPurgeableCache **a3@<X0>, const __CFSet *a4@<X2>, CFComparisonResult (*a5)(const void *, const void *, void *)@<X3>, unint64_t a6@<X4>, unint64_t *a7@<X5>)
{
  CFTypeID v14;
  CFTypeID TypeID;
  int v16;
  void *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFIndex Count;
  const __CFNumber *Value;
  const __CFNumber *v22;
  CFTypeID v23;
  void *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  uint64_t v31;
  const __CFDictionary *v32;
  void *v33;
  const __CFArray *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  const void *v38;
  const void *ValueAtIndex;
  const void *v40;
  __CFArray *v41;
  const __CFArray *v42;
  CFComparisonResult (__cdecl *v43)(const void *, const void *, void *);
  __CFArray *v44;
  const __CFArray *v45;
  void *v46;
  void *v47;
  const __CFDictionary *v48;
  const __CFDictionary *v49;
  int v50;
  CFTypeID v51;
  unint64_t v52;
  void *v53;
  TDescriptorSource *v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  void *v59;
  const __CFArray *v60;
  const __CFArray *v61;
  CFIndex v62;
  int v63;
  CFComparisonResult (*v64)(const void *, const void *, void *);
  _BOOL4 v65;
  int v66;
  const __CFArray *v67;
  CFIndex v68;
  CFIndex v69;
  CFIndex i;
  TDescriptor **v71;
  TDescriptor **v72;
  TDescriptor *v73;
  unint64_t v74;
  __CFArray *v75;
  unint64_t v76;
  void *v77;
  CFComparisonResult (*v78)(const void *, const void *, void *);
  unint64_t v79;
  void *v80;
  CFIndex v81;
  CFIndex v82;
  __int128 v83;
  char *v84;
  __CFSet *Mutable;
  uint64_t j;
  __CFString *v87;
  const __CFString *v88;
  const __CFNumber *v89;
  const __CFNumber *v90;
  CFTypeID v91;
  void *v92;
  const __CFDictionary *v93;
  const __CFDictionary *v94;
  CFIndex v95;
  const __CFArray *v96;
  CFIndex v97;
  CFIndex v98;
  CFIndex k;
  const __CFDictionary *v100;
  void *v101;
  id v102;
  __CFArray *v103;
  unint64_t v104;
  void *v105;
  void *v106;
  const __CFArray *v107;
  CFIndex v108;
  CFIndex v109;
  CFIndex m;
  const void *v111;
  uint64_t v112;
  unint64_t v113;
  void *v115;
  id v116;
  __CFArray *v117;
  void *v118;
  const __CFDictionary *v119;
  __CFString *v120;
  const __CFDictionary *v121;
  __CFString *v122;
  CFTypeID v123;
  __CFDictionary *v125;
  unint64_t v126;
  const __CFArray *v127;
  const __CFDictionary *v128;
  CFComparisonResult (__cdecl *v129)(const void *, const void *, void *);
  void *v130;
  unint64_t v131;
  __CFString *v132;
  __CFString *v133;
  __CFString *v134;
  void *v136;
  unint64_t v137;
  void *v138;
  unint64_t v139;
  unint64_t v140;
  const __CFArray *v141;
  void *v142;
  unint64_t v143;
  void *v144;
  _BOOL4 v145;
  CFComparisonResult (*v146)(const void *, const void *, void *);
  const __CFArray *v147;
  unint64_t v148;
  void *v149;
  void *v150;
  unint64_t v151;
  void *v152;
  const __CFDictionary *v153;
  BOOL v155;
  TDescriptorSource *v157;
  const __CFString *PostScriptNameAndAttribute;
  void *v160;
  unint64_t v161;
  void *v162;
  void *v163;
  const __CFString *v164;
  const __CFString *v165;
  CFTypeID v166;
  CGFont *v167;
  void *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  unint64_t v173;
  void *v174;
  unint64_t v176;
  void *v177;
  void *v178;
  const __CFAllocator *allocator;
  unint64_t *v180;
  CFComparisonResult (*v181)(const void *, const void *, void *);
  CFComparisonResult (*v182)(const void *, const void *, void *);
  int v183;
  int v184;
  int v185;
  int v186;
  const __CFDictionary *v187;
  int valuePtr;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  void *values;
  void *v195;
  uint64_t v196;
  _OWORD v197[15];
  _OWORD *v198;
  uint64_t v199;
  CFRange v200;

  v199 = *MEMORY[0x1E0C80C00];
  v14 = CFGetTypeID(cf);
  TypeID = CFDictionaryGetTypeID();
  *a1 = 0;
  if (v14 != TypeID)
    return;
  v189 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyMandatoryMatchableRequest((const __CFDictionary *)cf, a4, (unint64_t *)&v189);
  v180 = a7;
  if ((a6 & 0x20) != 0)
  {
    v16 = 0;
  }
  else if (dispatch_get_specific((const void *)TDescriptorSource::DoNotCacheKey))
  {
    v16 = 0;
    a6 |= 0x20uLL;
  }
  else
  {
    v33 = (void *)atomic_load((unint64_t *)&v189);
    if ((TDescriptorSource::CopyCachedDescriptors(a3, v33, (void *)a6, a1, a5) & 1) != 0)
      goto LABEL_146;
    v16 = 1;
  }
  v17 = (void *)atomic_load((unint64_t *)&v189);
  v18 = v17;
  v19 = v18;
  if (v18)
    Count = CFDictionaryGetCount(v18);
  else
    Count = 0;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NSCTFontDownloadableAttribute"));
  if (Value)
  {
    v22 = Value;
    v23 = CFGetTypeID(Value);
    if (v23 == CFNumberGetTypeID() || v23 == CFBooleanGetTypeID())
    {
      CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
      LODWORD(Value) = valuePtr;
    }
    else if (v23 == CFStringGetTypeID())
    {
      LODWORD(Value) = CFStringGetIntValue((CFStringRef)v22);
      valuePtr = (int)Value;
    }
    else
    {
      LODWORD(Value) = 0;
    }
  }
  if (Count <= 0 && !(_DWORD)Value)
  {
    *(double *)&v193 = -3.72066208e-103;
    TDescriptorSource::CreateDefaultDescriptor(0, (unint64_t *)&v193);
    if (atomic_load((unint64_t *)&v193))
    {
      v25 = (void *)atomic_load((unint64_t *)&v193);
      values = v25;
      v192 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      do
        v26 = __ldaxr((unint64_t *)&v192);
      while (__stlxr(0, (unint64_t *)&v192));
      do
        v27 = (void *)__ldaxr(a1);
      while (__stlxr(v26, a1));

    }
    goto LABEL_67;
  }
  if ((a6 & 0x10) == 0)
  {
    *(double *)&v193 = -3.72066208e-103;
    TDescriptorSource::CopySplicedDescriptorsForRequest((int)&v193, (int)a3, (CFDictionaryRef)cf, a6, 0, 0, 0, -1, *MEMORY[0x1E0C9AE40]);
    v28 = (void *)atomic_load((unint64_t *)&v193);
    v29 = v28;
    if (v29)
    {
      v30 = v29;
      v31 = CFArrayGetCount(v29);

      if (v31 >= 1
        && (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NSFontFamilyAttribute"))
         || TDescriptorSource::GetPostScriptNameAndAttribute((TDescriptorSource *)cf, v32)))
      {
        goto LABEL_33;
      }
    }
    else
    {

      v31 = 0;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NSCTFontUIUsageAttribute")))
    {
      v48 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NSCTFontTraitsAttribute"));
      if (!v48
        || (v49 = v48, v50 = v16, v51 = CFGetTypeID(v48), v155 = v51 == CFDictionaryGetTypeID(), v16 = v50, !v155)
        || !CFDictionaryGetValue(v49, CFSTR("NSCTFontUIFontDesignTrait")))
      {
        v192 = 0;
LABEL_56:

        do
          v52 = __ldaxr((unint64_t *)&v192);
        while (__stlxr(0, (unint64_t *)&v192));
        do
          v53 = (void *)__ldaxr(a1);
        while (__stlxr(v52, a1));

        if (atomic_load(a1))
          goto LABEL_146;
        LODWORD(Value) = valuePtr;
        goto LABEL_61;
      }
    }
LABEL_33:
    if (a5 && v31 >= 2)
    {
      v183 = v16;
      values = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v31, MEMORY[0x1E0C9B378]);
      v34 = (const __CFArray *)atomic_load((unint64_t *)&v193);
      if (v34)
      {
        v35 = CFArrayGetCount(v34);
        if (v35)
        {
          v36 = v35;
          v37 = 0;
          v38 = (const void *)*MEMORY[0x1E0C9B0D0];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v34, v37);
            if (ValueAtIndex != v38)
            {
              v40 = ValueAtIndex;
              v41 = (__CFArray *)atomic_load((unint64_t *)&values);
              CFArrayAppendValue(v41, v40);
            }
            ++v37;
          }
          while (v36 != v37);
        }
      }
      v42 = (const __CFArray *)atomic_load((unint64_t *)&values);
      if (CFArrayGetCount(v42) > 1)
      {
        if ((char *)a5 == (char *)CompareDescriptorsByTraitsAndPrecedence)
          v43 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily;
        else
          v43 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))a5;
        v44 = (__CFArray *)atomic_load((unint64_t *)&values);
        v45 = (const __CFArray *)atomic_load((unint64_t *)&values);
        v200.length = CFArrayGetCount(v45);
        v200.location = 0;
        CFArraySortValues(v44, v200, v43, 0);
      }
      v16 = v183;
      do
        v46 = (void *)__ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      v192 = v46;

    }
    else
    {
      v47 = (void *)atomic_load((unint64_t *)&v193);
      v192 = v47;
    }
    goto LABEL_56;
  }
LABEL_61:
  if ((a6 & 0x200) != 0 || !(_DWORD)Value)
  {
    v186 = v16;
    v119 = (const __CFDictionary *)atomic_load((unint64_t *)&v189);
    v191 = (id)0xAAAAAAAAAAAAAAAALL;
    v120 = (__CFString *)CFDictionaryGetValue(v119, CFSTR("NSFontFamilyAttribute"));
    if (v120)
    {
      v122 = v120;
      v123 = CFGetTypeID(v120);
      if (v123 == CFStringGetTypeID())
      {
        values = (void *)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopyDescriptorsForRequestWithFamilyName((TDescriptorSource *)&values, (const __CFString *)a3, v122, a6);
        if (atomic_load((unint64_t *)&values))
        {
          *(double *)&v193 = -3.72066208e-103;
          TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v193, v119);
          v125 = (__CFDictionary *)atomic_load((unint64_t *)&v193);
          CFDictionaryRemoveValue(v125, CFSTR("NSFontFamilyAttribute"));
          if (ShouldFilterInvisibles(v119, a6))
            v126 = a6;
          else
            v126 = a6 | 2;
          v127 = (const __CFArray *)atomic_load((unint64_t *)&values);
          v128 = (const __CFDictionary *)atomic_load((unint64_t *)&v193);
          if ((char *)a5 == (char *)CompareDescriptorsByTraitsAndPrecedence)
            v129 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily;
          else
            v129 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))a5;
          TDescriptorSource::CopyDescriptorsForRequestFromArray((TDescriptorSource *)&v192, v127, v128, v129, v126, 0);
          v16 = v186;
          do
            v130 = (void *)__ldaxr((unint64_t *)&v192);
          while (__stlxr(0, (unint64_t *)&v192));
          v191 = v130;

          atomic_load((unint64_t *)&v191);
          v58 = a6;
        }
        else
        {

          v191 = 0;
          atomic_load((unint64_t *)&v191);
          v58 = a6;
          v16 = v186;
        }
        goto LABEL_193;
      }
    }
    v191 = 0;
    v131 = atomic_load((unint64_t *)&v191);
    v58 = a6;
    v16 = v186;
    if (v131)
    {
      do
LABEL_193:
        v150 = (void *)__ldaxr((unint64_t *)&v191);
      while (__stlxr(0, (unint64_t *)&v191));
      values = v150;
LABEL_195:

      do
        v151 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v152 = (void *)__ldaxr(a1);
      while (__stlxr(v151, a1));

      if (atomic_load(a1))
        v155 = 0;
      else
        v155 = Count == 1;
      if (v155 && (a6 & 0x200) == 0)
      {
        v157 = (TDescriptorSource *)atomic_load((unint64_t *)&v189);
        PostScriptNameAndAttribute = (const __CFString *)TDescriptorSource::GetPostScriptNameAndAttribute(v157, v153);
        if (PostScriptNameAndAttribute)
        {
          *(double *)&v193 = -3.72066208e-103;
          TDescriptorSource::CopyFontDescriptorPerPostScriptName(a3, PostScriptNameAndAttribute, v58, 0, 0, 0, 0, -1, (unint64_t *)&v193, (const void *)*MEMORY[0x1E0C9AE40]);
          if (atomic_load((unint64_t *)&v193))
          {
            v160 = (void *)atomic_load((unint64_t *)&v193);
            values = v160;
            v192 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
            do
              v161 = __ldaxr((unint64_t *)&v192);
            while (__stlxr(0, (unint64_t *)&v192));
            do
              v162 = (void *)__ldaxr(a1);
            while (__stlxr(v161, a1));

          }
        }
      }
      goto LABEL_68;
    }
    *(double *)&v193 = 0.0;
    v133 = (__CFString *)TDescriptorSource::GetPostScriptNameAndAttribute(v119, v121);
    if (v133)
    {
      v134 = v132;
      v192 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::CopyFontDescriptorPerPostScriptName(a3, v133, a6, 1, 0, 0, 0, -1, (unint64_t *)&v192, (const void *)*MEMORY[0x1E0C9AE40]);
      if (atomic_load((unint64_t *)&v192))
      {
        v136 = (void *)atomic_load((unint64_t *)&v192);
        values = v136;
        v190 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
        do
          v137 = __ldaxr((unint64_t *)&v190);
        while (__stlxr(0, (unint64_t *)&v190));
        do
          v138 = (void *)__ldaxr((unint64_t *)&v193);
        while (__stlxr(v137, (unint64_t *)&v193));

      }
      v132 = v134;
    }
    v139 = atomic_load((unint64_t *)&v193);
    v58 = a6;
    if (v139 || (v58 = a6, (a6 & 0x200) != 0) || (v58 = a6, CFSTR("NSFontNameAttribute") != v132))
    {
LABEL_169:
      v140 = atomic_load((unint64_t *)&v193);
      v16 = v186;
      if (v140)
      {
        if (a5 || (v58 & 0x1000) == 0)
        {
          v147 = (const __CFArray *)atomic_load((unint64_t *)&v193);
          TDescriptorSource::CopyDescriptorsForRequestFromArray((TDescriptorSource *)&values, v147, v119, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))a5, v58, 0);
          do
            v148 = __ldaxr((unint64_t *)&values);
          while (__stlxr(0, (unint64_t *)&values));
          do
            v149 = (void *)__ldaxr((unint64_t *)&v191);
          while (__stlxr(v148, (unint64_t *)&v191));

        }
        else
        {
          v141 = (const __CFArray *)atomic_load((unint64_t *)&v193);
          TDescriptorSource::CopyDescriptorsForRequestFromArray((TDescriptorSource *)&values, v141, v119, 0, v58, 1);
          do
            v142 = (void *)__ldaxr((unint64_t *)&values);
          while (__stlxr(0, (unint64_t *)&values));

          if (v142)
          {
            values = v142;
            v192 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
            do
              v143 = __ldaxr((unint64_t *)&v192);
            while (__stlxr(0, (unint64_t *)&v192));
            do
              v144 = (void *)__ldaxr((unint64_t *)&v191);
            while (__stlxr(v143, (unint64_t *)&v191));

          }
          a5 = 0;
        }
      }

      goto LABEL_193;
    }
    v145 = IsLooseFontNameMatchingDisabled();
    if (v133 && v145 && CFDictionaryGetCount(v119) == 1)
    {
      v58 = a6;
      if (TDescriptorSource::AddMissedRequest((TDescriptorSource *)v133, (const void *)a6, (uint64_t)a5, v146))
      {
        CFLog();
        v58 = a6;
      }
      goto LABEL_169;
    }
    if ((a6 & 0x20) == 0
      && TDescriptorSource::CopyCachedDescriptors(a3, v119, (void *)(a6 | 0x40), (unint64_t *)&v191, a5))
    {
      do
        v163 = (void *)__ldaxr((unint64_t *)&v191);
      while (__stlxr(0, (unint64_t *)&v191));
      values = v163;
LABEL_217:
      v16 = v186;
      v58 = a6 | 0x40;

      goto LABEL_195;
    }
    v164 = (const __CFString *)CFDictionaryGetValue(v119, CFSTR("NSFontVisibleNameAttribute"));
    if (v164)
    {
      v165 = v164;
      v166 = CFGetTypeID(v164);
      if (v166 == CFStringGetTypeID())
      {
        v167 = CGFontCreateWithFontName(v165);
        if (v167)
        {
          v192 = (id)0xAAAAAAAAAAAAAAAALL;
          TDescriptorSource::CopyDescriptor(a3, v167, 0, (unint64_t *)&v192);
          if (atomic_load((unint64_t *)&v192))
          {
            v169 = (void *)atomic_load((unint64_t *)&v192);
            values = v169;
            v190 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
            do
              v170 = __ldaxr((unint64_t *)&v190);
            while (__stlxr(0, (unint64_t *)&v190));
            do
              v171 = (void *)__ldaxr((unint64_t *)&v193);
            while (__stlxr(v170, (unint64_t *)&v193));

            if (CFDictionaryGetCount(v119) == 1)
            {
              do
                v172 = (void *)__ldaxr((unint64_t *)&v193);
              while (__stlxr(0, (unint64_t *)&v193));
              values = v172;

              goto LABEL_217;
            }
          }

        }
      }
    }
    v173 = atomic_load((unint64_t *)&v193);
    if (v180 && !v173)
    {
      v174 = (void *)atomic_load(v180);
      TCFRef<__CTFont const*>::Retain((unint64_t *)&v193, v174);
    }
    if (atomic_load((unint64_t *)&v193))
    {
      v58 = a6 | 0x40;
    }
    else
    {
      TDescriptorSource::CopyAllDescriptorsInternal(a3, 0, a6 | 0x40, (unint64_t *)&values);
      do
        v176 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v177 = (void *)__ldaxr((unint64_t *)&v193);
      while (__stlxr(v176, (unint64_t *)&v193));

      v58 = a6 | 0x40;
      if (v180)
      {
        v178 = (void *)atomic_load((unint64_t *)&v193);
        TCFRef<__CTFont const*>::Retain(v180, v178);
      }
    }
    goto LABEL_169;
  }
  v55 = (TDescriptorSource *)atomic_load((unint64_t *)&v189);
  TDescriptorSource::CopyDownloadableDescriptorsForRequest(v55, (const __CFDictionary *)a6, (unint64_t *)&values);
  do
    v56 = __ldaxr((unint64_t *)&values);
  while (__stlxr(0, (unint64_t *)&values));
  do
    v57 = (void *)__ldaxr(a1);
  while (__stlxr(v56, a1));

  v16 = 0;
LABEL_67:
  v58 = a6;
LABEL_68:
  v59 = (void *)atomic_load(a1);
  v60 = v59;
  v61 = v60;
  if (v60)
    v62 = CFArrayGetCount(v60);
  else
    v62 = 0;
  v63 = valuePtr;

  if (v62 >= 2 && !v63)
  {
    v65 = ShouldFilterInvisibles((CFDictionaryRef)cf, v58);
    v66 = (v58 >> 2) & 1 | v65;
    if ((v58 & 8) != 0 || v66)
    {
      values = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (v66)
      {
        v184 = v16;
        v181 = a5;
        v67 = (const __CFArray *)atomic_load(a1);
        if (v67)
        {
          v68 = CFArrayGetCount(v67);
          if (v68)
          {
            v69 = v68;
            for (i = 0; i != v69; ++i)
            {
              v71 = (TDescriptor **)CFArrayGetValueAtIndex(v67, i);
              v72 = v71;
              v73 = v71[5];
              if ((*((_DWORD *)v73 + 4) & 0x80000000) == 0)
                TDescriptor::InitBaseFont(v71[5], 0, 0.0);
              v74 = atomic_load((unint64_t *)v73 + 4);
              if (v74
                && (!v65 || ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v74 + 696))(v74) & 1) == 0)
                && ((v58 & 4) == 0 || (*(unsigned int (**)(unint64_t))(*(_QWORD *)v74 + 704))(v74)))
              {
                v75 = (__CFArray *)atomic_load((unint64_t *)&values);
                CFArrayAppendValue(v75, v72);
              }
            }
          }
        }
        do
          v76 = __ldaxr((unint64_t *)&values);
        while (__stlxr(0, (unint64_t *)&values));
        a5 = v181;
        v16 = v184;
        do
          v77 = (void *)__ldaxr(a1);
        while (__stlxr(v76, a1));

      }
      if ((v58 & 8) != 0)
      {
        v78 = (CFComparisonResult (*)(const void *, const void *, void *))atomic_load(a1);
        CreateDescriptorArrayFilteringDuplicates((const __CFArray *)&v193, v78, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))a5);
        do
          v79 = __ldaxr((unint64_t *)&v193);
        while (__stlxr(0, (unint64_t *)&v193));
        do
          v80 = (void *)__ldaxr(a1);
        while (__stlxr(v79, a1));

      }
    }
  }
  if (!cf)
    goto LABEL_132;
  if ((v58 & 0x100) == 0)
    goto LABEL_132;
  v81 = CFDictionaryGetCount((CFDictionaryRef)cf);
  if (v81 < 1)
    goto LABEL_132;
  v82 = v81;
  v185 = v16;
  v182 = a5;
  *(_QWORD *)&v83 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v197[14] = v83;
  v197[13] = v83;
  v197[12] = v83;
  v197[11] = v83;
  v197[10] = v83;
  v197[9] = v83;
  v197[8] = v83;
  v197[7] = v83;
  v197[6] = v83;
  v197[5] = v83;
  v197[4] = v83;
  v197[3] = v83;
  v197[2] = v83;
  v197[1] = v83;
  v197[0] = v83;
  v195 = 0;
  v196 = 0;
  values = 0;
  v198 = v197;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, v81);
  v84 = (char *)v195;
  bzero(v195, 8 * v82);
  v195 = &v84[8 * v82];
  CFDictionaryGetKeysAndValues((CFDictionaryRef)cf, (const void **)values, 0);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  for (j = 0; j != v82; ++j)
  {
    v87 = (__CFString *)*((_QWORD *)values + j);
    v88 = CFSTR("NSFontSizeAttribute");
    if (v87 != CFSTR("NSFontSizeAttribute"))
    {
      if (!CFSTR("NSFontSizeAttribute") || !v87 || !CFEqual(v87, CFSTR("NSFontSizeAttribute")))
      {
LABEL_110:
        CFSetAddValue(Mutable, *((const void **)values + j));
        continue;
      }
      v88 = (const __CFString *)*((_QWORD *)values + j);
    }
    v89 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, v88);
    if (!v89)
      goto LABEL_110;
    v90 = v89;
    v91 = CFGetTypeID(v89);
    if (v91 == CFNumberGetTypeID())
    {
      *(double *)&v193 = NAN;
      CFNumberGetValue(v90, kCFNumberDoubleType, &v193);
      if (*(double *)&v193 != 0.0)
        goto LABEL_110;
    }
  }
  if (qword_1ECDE7738 != -1)
    dispatch_once_f(&qword_1ECDE7738, 0, (dispatch_function_t)TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke);
  v16 = v185;
  if (qword_1ECDE7730)
    -[__CFSet minusSet:](Mutable, "minusSet:");
  if (CFSetGetCount(Mutable))
  {
    *(double *)&v193 = -3.72066208e-103;
    CreateCopyOfDictionaryFilteredByKeys((const __CFDictionary *)cf, Mutable, (unint64_t *)&v193);
    v92 = (void *)atomic_load((unint64_t *)&v193);
    v93 = v92;
    if (!v93)
      goto LABEL_129;
    v94 = v93;
    v95 = CFDictionaryGetCount(v93);

    if (v95 >= 1)
    {
      v192 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      v96 = (const __CFArray *)atomic_load(a1);
      if (v96)
      {
        v97 = CFArrayGetCount(v96);
        if (v97)
        {
          v98 = v97;
          for (k = 0; k != v98; ++k)
          {
            v190 = (id)CFArrayGetValueAtIndex(v96, k);
            v100 = (const __CFDictionary *)atomic_load((unint64_t *)&v193);
            v187 = v100;
            TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFDictionary const*&>((uint64_t *)&v190, &v187, (unint64_t *)&v191);
            do
              v101 = (void *)__ldaxr((unint64_t *)&v191);
            while (__stlxr(0, (unint64_t *)&v191));

            v102 = v101;
            v103 = (__CFArray *)atomic_load((unint64_t *)&v192);
            CFArrayAppendValue(v103, v102);

          }
        }
      }
      do
        v104 = __ldaxr((unint64_t *)&v192);
      while (__stlxr(0, (unint64_t *)&v192));
      a5 = v182;
      v16 = v185;
      do
        v105 = (void *)__ldaxr(a1);
      while (__stlxr(v104, a1));

      v93 = (const __CFDictionary *)v192;
LABEL_129:

    }
  }

  *(double *)&v193 = COERCE_DOUBLE(&values);
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v193);
LABEL_132:
  if (v16)
  {
    v106 = (void *)atomic_load((unint64_t *)&v189);
    v107 = (const __CFArray *)atomic_load(a1);
    if (v107 && CFArrayGetCount(v107))
    {
      values = 0;
      v195 = 0;
      v108 = CFArrayGetCount(v107);
      if (v108)
      {
        v109 = v108;
        for (m = 0; m != v109; ++m)
        {
          v111 = CFArrayGetValueAtIndex(v107, m);
          v112 = *((_QWORD *)v111 + 5);
          if ((*(_DWORD *)(v112 + 16) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(*((TDescriptor **)v111 + 5), 0, 0.0);
          v113 = atomic_load((unint64_t *)(v112 + 32));
          if (v113)
          {
            *(double *)&v193 = -3.72066208e-103;
            (*(void (**)(id *__return_ptr))(*(_QWORD *)v113 + 200))(&v193);
            if (atomic_load((unint64_t *)&v193))
            {
              v115 = (void *)atomic_load((unint64_t *)&v193);
              v116 = v115;
              TCFLazyMutableArray::LazyCreate((TCFLazyMutableArray *)&values);
              v117 = (__CFArray *)atomic_load((unint64_t *)&values);
              CFArrayAppendValue(v117, v116);

            }
          }
        }
      }
      TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(&v193);
      v118 = (void *)atomic_load((unint64_t *)&values);
      TRequestCache::AddResultForRequest((TRequestCache *)&v193, v118, v106, v58, a5);

    }
    else
    {
      TDescriptorSource::AddMissedRequest((TDescriptorSource *)v106, (const void *)v58, (uint64_t)a5, v64);
    }
  }
LABEL_146:

}

void TCFLazyMutableArray::LazyCreate(TCFLazyMutableArray *this)
{
  const __CFArray *v3;
  const __CFAllocator *v4;
  CFMutableArrayRef MutableCopy;
  void *v6;

  if (!atomic_load((unint64_t *)this))
  {
    v3 = (const __CFArray *)*((_QWORD *)this + 1);
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v3)
      MutableCopy = CFArrayCreateMutableCopy(v4, 0, v3);
    else
      MutableCopy = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
    do
      v6 = (void *)__ldaxr((unint64_t *)this);
    while (__stlxr((unint64_t)MutableCopy, (unint64_t *)this));

  }
}

BOOL ShouldFilterInvisibles(CFDictionaryRef theDict, char a2)
{
  if ((a2 & 2) != 0)
    return 0;
  if (!theDict)
    return 1;
  if (CFDictionaryGetValue(theDict, CFSTR("NSFontNameAttribute")))
    return 0;
  return CFDictionaryGetValue(theDict, CFSTR("NSFontFamilyAttribute")) == 0;
}

uint64_t TDescriptorSource::CopyCachedDescriptors(TPurgeableCache **a1, void *a2, void *a3, unint64_t *a4, void *a5)
{
  void *v10;
  CFComparisonResult (*v11)(const void *, const void *, void *);
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  CFTypeID v15;
  void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  void *v23;
  id v24;
  __CFArray *v25;
  const __CFURL *v26;
  void *v28;
  id v29;
  __CFArray *v30;
  const __CFArray *v31;
  unint64_t v32;
  void *v33;
  id v35;
  id v36;
  id Mutable;
  id v38;

  do
    v10 = (void *)__ldaxr(a4);
  while (__stlxr(0, a4));

  if (!TDescriptorSource::HasMissedRequest((TDescriptorSource *)a2, a3, a5, v11))
  {
    v38 = 0;
    TPerThreadLRUCache<TRequestCacheNode,(ThreadSpecificKey)3,16ul>::TPerThreadLRUCache(&Mutable);
    v12 = TRequestCache::CopyResultForRequest(&Mutable, a2, (uint64_t)a3, (unint64_t *)&v38, (uint64_t)a5);
    if (!(_DWORD)v12 || (v13 = atomic_load((unint64_t *)&v38)) == 0)
    {
LABEL_23:

      return v12;
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v14 = (const void *)atomic_load((unint64_t *)&v38);
    v15 = CFGetTypeID(v14);
    if (v15 == CFArrayGetTypeID())
    {
      v16 = (void *)atomic_load((unint64_t *)&v38);
      v17 = v16;
      if (v17)
      {
        v18 = v17;
        Count = CFArrayGetCount(v17);

        if (Count)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v18, i);
            v36 = (id)0xAAAAAAAAAAAAAAAALL;
            TDescriptorSource::CopyDescriptor(a1, ValueAtIndex, 0, 0, (unint64_t *)&v36);
            v35 = (id)0xAAAAAAAAAAAAAAAALL;
            TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v36, (int)a3, 0, (unint64_t *)&v35);
            if (atomic_load((unint64_t *)&v35))
            {
              v23 = (void *)atomic_load((unint64_t *)&v35);
              v24 = v23;
              v25 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
              CFArrayAppendValue(v25, v24);

            }
          }
        }
        goto LABEL_18;
      }
    }
    else
    {
      v36 = (id)0xAAAAAAAAAAAAAAAALL;
      v26 = (const __CFURL *)atomic_load((unint64_t *)&v38);
      TDescriptorSource::CopyDescriptor(a1, v26, 0, 0, (unint64_t *)&v36);
      v35 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::CopyFontDescriptorWithOptions((unint64_t *)&v36, (int)a3, 0, (unint64_t *)&v35);
      if (atomic_load((unint64_t *)&v35))
      {
        v28 = (void *)atomic_load((unint64_t *)&v35);
        v29 = v28;
        v30 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
        CFArrayAppendValue(v30, v29);

      }
      v17 = (const __CFArray *)v36;
    }

LABEL_18:
    v31 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
    if (CFArrayGetCount(v31))
    {
      do
        v32 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      do
        v33 = (void *)__ldaxr(a4);
      while (__stlxr(v32, a4));

    }
    goto LABEL_23;
  }
  return 1;
}

void TDescriptorSource::CopyMandatoryMatchableRequest(const __CFDictionary *this@<X0>, CFSetRef theSet@<X1>, unint64_t *a3@<X8>)
{
  const __CFSet *v7;
  void *v8;
  const __CFSet *v9;
  id v10;

  if (qword_1ECDE7738 != -1)
    dispatch_once_f(&qword_1ECDE7738, 0, (dispatch_function_t)TDescriptorSource::GetMatchableAttributes(void)::$_0::__invoke);
  v7 = (const __CFSet *)qword_1ECDE7730;
  if (theSet && CFSetGetCount(theSet))
  {
    v10 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFMutableSet::TCFMutableSet((TCFMutableSet *)&v10, v7);
    v8 = (void *)atomic_load((unint64_t *)&v10);
    objc_msgSend(v8, "intersectSet:", theSet);
    v9 = (const __CFSet *)atomic_load((unint64_t *)&v10);
    CreateCopyOfDictionaryFilteredByKeys(this, v9, a3);

  }
  else
  {
    CreateCopyOfDictionaryFilteredByKeys(this, v7, a3);
  }
}

void CreateCopyOfDictionaryFilteredByKeys(const __CFDictionary *a1@<X0>, CFSetRef theSet@<X1>, unint64_t *a3@<X8>)
{
  void *v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  const __CFSet *context;
  id Mutable;

  if (a1)
  {
    if (theSet && CFSetGetCount(theSet) >= 1)
    {
      context = theSet;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)KeyFilterApplier, &context);
      do
        v6 = (void *)__ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      v9 = v6;
      do
        v7 = __ldaxr((unint64_t *)&v9);
      while (__stlxr(0, (unint64_t *)&v9));
      *a3 = v7;

    }
    else
    {
      context = a1;
      do
        v8 = __ldaxr((unint64_t *)&context);
      while (__stlxr(0, (unint64_t *)&context));
      *a3 = v8;
    }

  }
  else
  {
    *a3 = 0;
  }
}

void KeyFilterApplier(const void *value, const void *a2, unint64_t *a3)
{
  const __CFSet *v6;
  __CFDictionary *v7;

  v6 = (const __CFSet *)atomic_load(a3);
  if (CFSetContainsValue(v6, value))
  {
    v7 = (__CFDictionary *)atomic_load(a3 + 1);
    CFDictionaryAddValue(v7, value, a2);
  }
}

void TDescriptorSource::CopySplicedDescriptorsForRequest(unint64_t *a1, TPurgeableCache **a2, CFDictionaryRef theDict, uint64_t a4, __CFString *a5, const __CFNumber *a6, const __CFNumber *a7, uint64_t isa_low, const void *a9)
{
  const __CFNumber *Value;
  __CFString *v11;
  const void *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  CFTypeID v22;
  CFIndex Count;
  CFIndex v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  __CFString *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  const __CFDictionary *v32;
  void *PostScriptNameAndAttribute;
  TDescriptorSource *v34;
  const __CFString **v35;
  __CFString *FontNameForTextStyle;
  void *v38;
  TDescriptorSource *v39;
  const __CFString *v40;
  const __CFString *UIFontFamilyNameForDesign;
  unint64_t *v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const __CFNumber *v47;
  void *v49;
  id v50;
  __CFArray *v51;
  void *v52;
  __CFDictionary *v53;
  __CFDictionary *v54;
  const __CFDictionary *v55;
  unint64_t v56;
  const __CFArray *v57;
  const __CFDictionary *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v63;
  const __CFNumber *v64;
  __CFString *cf2;
  const __CFNumber *v67;
  id v69;
  id v70;
  CFMutableArrayRef Mutable;
  __CFString valuePtr;

  Value = a6;
  v11 = a5;
  if (a5)
  {
    if (a6)
      goto LABEL_3;
LABEL_13:
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CTFontLanguageAwareLineHeightRatioAttribute"));
    if (a7)
      goto LABEL_4;
LABEL_14:
    a7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CTFontLineSpacingOverrideAttribute"));
    goto LABEL_4;
  }
  v11 = (__CFString *)CFDictionaryGetValue(theDict, CFSTR("CTFontDescriptorLanguageAttribute"));
  if (!Value)
    goto LABEL_13;
LABEL_3:
  if (!a7)
    goto LABEL_14;
LABEL_4:
  v67 = Value;
  v13 = a9;
  v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CTFontLegibilityWeightAttribute"));
  v15 = v14;
  if (v14)
  {
    v16 = CFGetTypeID(v14);
    if (v16 != CFNumberGetTypeID())
      v15 = 0;
  }
  if (!a9)
  {
    v17 = CFDictionaryGetValue(theDict, CFSTR("CTFontIgnoreLegibilityWeightAttribute"));
    if (v17)
    {
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 == CFBooleanGetTypeID())
        v13 = v18;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
    }
  }
  v64 = a7;
  if (v15)
  {
    LODWORD(valuePtr.isa) = -1431655766;
    CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
    isa_low = SLODWORD(valuePtr.isa);
  }
  v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontTraitsAttribute"));
  v21 = v20;
  if (v20)
  {
    v22 = CFGetTypeID(v20);
    if (v22 != CFDictionaryGetTypeID())
    {
      v63 = 0;
      v21 = 0;
      goto LABEL_28;
    }
    Count = CFDictionaryGetCount(v21);
    if (Count)
    {
      v24 = Count;
      v25 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("NSCTFontWeightTrait"));
      v26 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("NSCTFontProportionTrait"));
      v27 = (__CFString *)CFDictionaryGetValue(v21, CFSTR("NSCTFontUIFontDesignTrait"));
      v28 = (const __CFNumber *)CFDictionaryGetValue(v21, CFSTR("NSCTFontGradeTrait"));
      v29 = v28;
      if (v24 == 1)
      {
        if (v25 || v27 || v28)
        {
          cf2 = v27;
          v21 = 0;
        }
        else
        {
          v25 = 0;
          cf2 = 0;
        }
        v63 = 1;
      }
      else
      {
        v63 = v24;
        cf2 = v27;
      }
      goto LABEL_29;
    }
  }
  v63 = 0;
LABEL_28:
  v25 = 0;
  v26 = 0;
  cf2 = 0;
  v29 = 0;
LABEL_29:
  v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontSizeCategoryAttribute"));
  v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontTextStylePlatformAttribute"));
  PostScriptNameAndAttribute = (void *)TDescriptorSource::GetPostScriptNameAndAttribute(theDict, v32);
  v34 = (TDescriptorSource *)CFDictionaryGetValue(theDict, CFSTR("NSCTFontUIUsageAttribute"));
  if (v34)
  {
    FontNameForTextStyle = TDescriptorSource::FindFontNameForTextStyle(v34, (const __CFString *)v21, 0, 0, 0, v35);
    if (!FontNameForTextStyle)
    {
LABEL_37:
      *a1 = 0;
      return;
    }
    Mutable = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::CopySplicedDescriptorForName(FontNameForTextStyle, v11, v67, v64, isa_low, v13, (unint64_t *)&Mutable, v30, cf2, v25, v26, v29, v31, 0, 0);
LABEL_34:
    if (atomic_load((unint64_t *)&Mutable))
    {
      v38 = (void *)atomic_load((unint64_t *)&Mutable);
      valuePtr.isa = v38;
      *a1 = (unint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&valuePtr.isa, 1, MEMORY[0x1E0C9B378]);

      return;
    }

    goto LABEL_37;
  }
  if (PostScriptNameAndAttribute)
  {
    Mutable = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::CopySplicedDescriptorForName(PostScriptNameAndAttribute, v11, v67, v64, isa_low, v13, (unint64_t *)&Mutable, v30, cf2, v25, v26, v29, v31, 0, 0);
    goto LABEL_34;
  }
  v39 = (TDescriptorSource *)os_unfair_lock_lock_with_options();
  TDescriptorSource::EnsureSplicedFontStash(v39);
  if (cf2)
    UIFontFamilyNameForDesign = TDescriptorSource::GetUIFontFamilyNameForDesign(cf2, v40);
  else
    UIFontFamilyNameForDesign = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("NSFontFamilyAttribute"));
  v43 = UIFontFamilyNameForDesign;
  if (!UIFontFamilyNameForDesign)
    goto LABEL_61;
  valuePtr.isa = (void *)0xAAAAAAAAAAAAAAAALL;
  v44 = TDescriptorSource::FontNamesForFamily(UIFontFamilyNameForDesign, &valuePtr, v42);
  if (v44)
  {
    v45 = v44;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFIndex)valuePtr.isa, MEMORY[0x1E0C9B378]);
    if (valuePtr.isa)
    {
      v46 = 0;
      v47 = v67;
      do
      {
        v70 = (id)0xAAAAAAAAAAAAAAAALL;
        TDescriptorSource::CopySpliceFontForName(*(id *)(v45 + 8 * (_QWORD)v46), v11, v47, v64, isa_low, v13, 0, 0, (unint64_t *)&v70, 0, 0, 0, 0, 0, 0);
        if (atomic_load((unint64_t *)&v70))
        {
          v49 = (void *)atomic_load((unint64_t *)&v70);
          v50 = v49;
          v51 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v51, v50);
          v52 = v50;
          v47 = v67;

        }
        v46 = (char *)v46 + 1;
      }
      while (v46 < valuePtr.isa);
      if (valuePtr.isa > (void *)1)
      {
        v70 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v70, theDict);
        v53 = (__CFDictionary *)atomic_load((unint64_t *)&v70);
        CFDictionaryRemoveValue(v53, CFSTR("NSFontFamilyAttribute"));
        if (v63 == 1 && cf2)
        {
          v54 = (__CFDictionary *)atomic_load((unint64_t *)&v70);
          CFDictionaryRemoveValue(v54, CFSTR("NSCTFontTraitsAttribute"));
        }
        v55 = (const __CFDictionary *)atomic_load((unint64_t *)&v70);
        if (CFDictionaryGetCount(v55))
        {
          v56 = a4 | 0x43;
          v57 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
          v58 = (const __CFDictionary *)atomic_load((unint64_t *)&v70);
          TDescriptorSource::CopyDescriptorsForRequestFromArray((TDescriptorSource *)&v69, v57, v58, 0, v56, 0);
          do
            v59 = __ldaxr((unint64_t *)&v69);
          while (__stlxr(0, (unint64_t *)&v69));
          *a1 = v59;

LABEL_65:
          goto LABEL_66;
        }

      }
    }
    do
      v60 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    *a1 = v60;
    goto LABEL_65;
  }
  if (cf2)
    TDescriptorSource::CopyMatchingDescriptorsForFamily(a2, v43, (CFComparisonResult (*)(const void *, const void *, void *))CompareDescriptorsByTraitsAndPrecedenceForSingleFamily, a4 | 0x451, a1);
  else
LABEL_61:
    *a1 = 0;
LABEL_66:
  os_unfair_lock_unlock((os_unfair_lock_t)&TDescriptorSource::sSplicedFontsLock);
}

const void *TDescriptorSource::GetPostScriptNameAndAttribute(TDescriptorSource *this, const __CFDictionary *a2)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;

  TypeID = CFStringGetTypeID();
  Value = CFDictionaryGetValue(this, CFSTR("NSCTFontPostScriptNameAttribute"));
  if (!Value || (v5 = Value, CFGetTypeID(Value) != TypeID))
  {
    v6 = CFDictionaryGetValue(this, CFSTR("NSFontNameAttribute"));
    if (v6)
    {
      v7 = v6;
      if (CFGetTypeID(v6) == TypeID)
        return v7;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t TDescriptorSource::FontNamesForFamily(CFTypeRef cf2, const __CFString *a2, unint64_t *a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  char *v7;
  CFTypeRef v8;
  uint64_t result;

  v5 = atomic_load((unsigned __int8 *)&qword_1EDD16ED0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EDD16ED0))
  {
    qword_1EDD16F88 = (uint64_t)CFSTR(".AppleSimplifiedChineseFont");
    unk_1EDD16F90 = 8;
    qword_1EDD16F98 = (uint64_t)kChineseNames;
    unk_1EDD16FA0 = CFSTR(".AppleTraditionalChineseFont");
    qword_1EDD16FA8 = 8;
    unk_1EDD16FB0 = off_1E15E5348;
    qword_1EDD16FB8 = (uint64_t)CFSTR(".AppleHongKongChineseFont");
    unk_1EDD16FC0 = 8;
    qword_1EDD16FC8 = (uint64_t)off_1E15E5388;
    unk_1EDD16FD0 = CFSTR(".AppleMacaoChineseFont");
    qword_1EDD16FD8 = 8;
    unk_1EDD16FE0 = off_1E15E53C8;
    qword_1EDD16FE8 = (uint64_t)CFSTR(".AppleJapaneseFont");
    unk_1EDD16FF0 = 9;
    qword_1EDD16FF8 = (uint64_t)kJapaneseNames;
    unk_1EDD17000 = CFSTR(".AppleKoreanFont");
    qword_1EDD17008 = 8;
    unk_1EDD17010 = kKoreanNames;
    qword_1EDD17018 = (uint64_t)CFSTR(".AppleArabicFont");
    unk_1EDD17020 = 9;
    qword_1EDD17028 = (uint64_t)kArabicNames;
    unk_1EDD17030 = CFSTR(".AppleThaiFont");
    qword_1EDD17038 = 3;
    unk_1EDD17040 = kThaiNames;
    qword_1EDD17048 = (uint64_t)CFSTR(".AppleUrduFont");
    unk_1EDD17050 = 2;
    qword_1EDD17058 = (uint64_t)kUrduNames;
    unk_1EDD17060 = CFSTR(".AppleSystemUIFont");
    qword_1EDD17068 = 29;
    unk_1EDD17070 = kSystemUIFontNames;
    qword_1EDD17078 = (uint64_t)CFSTR(".AppleSystemFallback");
    unk_1EDD17080 = 9;
    qword_1EDD17088 = (uint64_t)kSystemFallbackFontNames;
    unk_1EDD17090 = CFSTR(".AppleSystemUIFontCompact");
    qword_1EDD17098 = 18;
    unk_1EDD170A0 = kSystemUIFontCompactNames;
    qword_1EDD170A8 = (uint64_t)CFSTR(".AppleSystemUIFontCore");
    unk_1EDD170B0 = 27;
    qword_1EDD170B8 = (uint64_t)kSystemUIFontCoreNames;
    unk_1EDD170C0 = CFSTR(".AppleSystemUIFontRounded");
    qword_1EDD170C8 = 9;
    unk_1EDD170D0 = kSystemUIFontRoundNames;
    qword_1EDD170D8 = (uint64_t)CFSTR(".AppleSystemUIFontCompactRounded");
    qword_1EDD170E0 = 9;
    qword_1EDD170E8 = (uint64_t)kSystemUIFontCompactRoundNames;
    qword_1EDD170F0 = (uint64_t)CFSTR(".AppleSystemUIFontCondensed");
    qword_1EDD170F8 = 9;
    qword_1EDD17100 = (uint64_t)kSystemUIFontCondensedNames;
    qword_1EDD17108 = (uint64_t)CFSTR(".AppleSystemUIFontCoreCondensed");
    qword_1EDD17110 = 9;
    qword_1EDD17118 = (uint64_t)kSystemUIFontCoreCondensedNames;
    qword_1EDD17120 = (uint64_t)CFSTR(".AppleSystemUIFontSerif");
    qword_1EDD17130 = (uint64_t)kSystemUIFontSerifNames;
    qword_1EDD17128 = 12;
    qword_1EDD17138 = (uint64_t)CFSTR(".AppleSystemUIFontSoft");
    qword_1EDD17140 = 9;
    qword_1EDD17148 = (uint64_t)kSystemUIFontSoftNames;
    qword_1EDD17150 = (uint64_t)CFSTR(".AppleSystemUIFontCompactSoft");
    qword_1EDD17158 = 9;
    qword_1EDD17160 = (uint64_t)kSystemUIFontCompactSoftNames;
    qword_1EDD17168 = (uint64_t)CFSTR(".AppleSystemUIFontMonospaced");
    qword_1EDD17170 = 12;
    qword_1EDD17178 = (uint64_t)kSystemUIFontMonospacedNames;
    qword_1EDD17180 = (uint64_t)CFSTR(".Apple Symbols Fallback");
    qword_1EDD17188 = 1;
    qword_1EDD17190 = (uint64_t)kSymbolsFBNames;
    qword_1EDD17198 = (uint64_t)CFSTR(".Times Fallback");
    qword_1EDD171A0 = 4;
    qword_1EDD171A8 = (uint64_t)kTimesFBNames;
    __cxa_guard_release(&qword_1EDD16ED0);
  }
  v6 = 0;
  while (1)
  {
    v7 = &_MergedGlobals_88[v6];
    v8 = *(CFTypeRef *)&_MergedGlobals_88[v6 + 208];
    if (v8 == cf2 || cf2 && v8 && CFEqual(v8, cf2))
      break;
    v6 += 24;
    if (v6 == 552)
    {
      result = 0;
      a2->isa = 0;
      return result;
    }
  }
  result = *((_QWORD *)v7 + 28);
  a2->isa = (void *)*((_QWORD *)v7 + 27);
  return result;
}

void CopyPostScriptNamesForFamily(const __CFString *a1@<X0>, char a2@<W1>, __CFString *a3@<X8>)
{
  const void *v6;
  const __CFArray *v7;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v14;
  const __CFArray *v15;
  __CFArray *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  BOOL v22;
  const void *v23;
  const __CFDictionary *v24;
  const __CFDictionary *Value;
  void *v26;
  unint64_t v27;
  void *v28;
  id v29;
  __CFString v30;
  CFRange v31;

  v29 = (id)0xAAAAAAAAAAAAAAAALL;
  CopyLowercasedString(a1, (unint64_t *)&v29);
  a3->isa = (void *)0xAAAAAAAAAAAAAAAALL;
  v6 = (const void *)atomic_load((unint64_t *)&v29);
  CopyPostScriptNamesForFamilyLowercased(a3, v6);
  if (a1 != CFSTR(".") && (!a1 || !CFStringHasPrefix(a1, CFSTR("."))))
  {
    atomic_load((unint64_t *)&v29);
    v7 = (const __CFArray *)FSFontCopyFontNamesForFamily();
    if (atomic_load((unint64_t *)a3))
    {
      v30.isa = (void *)0xAAAAAAAAAAAAAAAALL;
      v9 = (const __CFArray *)atomic_load((unint64_t *)a3);
      TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v30, v9);
      if (v7)
      {
        Count = CFArrayGetCount(v7);
        if (Count)
        {
          v11 = Count;
          for (i = 0; i != v11; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
            v14 = (const __CFArray *)atomic_load((unint64_t *)&v30);
            v15 = (const __CFArray *)atomic_load((unint64_t *)&v30);
            v31.length = CFArrayGetCount(v15);
            v31.location = 0;
            if (!CFArrayContainsValue(v14, v31, ValueAtIndex))
            {
              v16 = (__CFArray *)atomic_load((unint64_t *)&v30);
              CFArrayAppendValue(v16, ValueAtIndex);
            }
          }
        }
      }
      do
        v17 = __ldaxr((unint64_t *)&v30);
      while (__stlxr(0, (unint64_t *)&v30));
      do
        v18 = (void *)__ldaxr((unint64_t *)a3);
      while (__stlxr(v17, (unint64_t *)a3));

    }
    else
    {
      TCFRef<__CTFont const*>::Retain((unint64_t *)a3, v7);
    }

  }
  v19 = (void *)atomic_load((unint64_t *)a3);
  v20 = v19;
  v21 = v20;
  if (v20)
    v22 = CFArrayGetCount(v20) != 0;
  else
    v22 = 0;

  if (!v22 && (a2 & 1) == 0)
  {
    v23 = (const void *)atomic_load((unint64_t *)&v29);
    if (qword_1ECDE7DD8 != -1)
      dispatch_once(&qword_1ECDE7DD8, &__block_literal_global_80);
    if (qword_1ECDE7DD0
      && (v24 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7DD0, CFSTR("Aliases"))) != 0)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v24, CFSTR("Families"));
      if (Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v23);
    }
    else
    {
      Value = 0;
    }
    v30.isa = Value;
    do
      v26 = (void *)__ldaxr((unint64_t *)&v30);
    while (__stlxr(0, (unint64_t *)&v30));

    if (v26)
    {
      CopyPostScriptNamesForFamilyLowercased(&v30, v26);
      do
        v27 = __ldaxr((unint64_t *)&v30);
      while (__stlxr(0, (unint64_t *)&v30));
      do
        v28 = (void *)__ldaxr((unint64_t *)a3);
      while (__stlxr(v27, (unint64_t *)a3));

    }
  }

}

void CopyPostScriptNamesForFamilyLowercased(const __CFString *a1, const void *a2)
{
  const __CFDictionary *Value;
  const __CFArray *v5;
  const __CFArray *v6;
  void *v7;
  id v8;

  if (!a2)
    goto LABEL_11;
  if (qword_1ECDE7DD8 != -1)
    dispatch_once(&qword_1ECDE7DD8, &__block_literal_global_80);
  if (qword_1ECDE7DD0
    && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7DD0, CFSTR("Families"))) != 0
    && (v5 = (const __CFArray *)CFDictionaryGetValue(Value, a2)) != 0
    && (v6 = v5, CFArrayGetCount(v5)))
  {
    v8 = v6;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    a1->isa = v7;

  }
  else
  {
LABEL_11:
    a1->isa = 0;
  }
}

void TCFLazyMutableArray::Sort(TCFLazyMutableArray *this, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), void *a3)
{
  __CFArray *v5;
  const __CFArray *v6;
  CFRange v7;

  TCFLazyMutableArray::LazyCreate(this);
  v5 = (__CFArray *)atomic_load((unint64_t *)this);
  v6 = (const __CFArray *)atomic_load((unint64_t *)this);
  if (v6)
    v7.length = CFArrayGetCount(v6);
  else
    v7.length = 0;
  v7.location = 0;
  CFArraySortValues(v5, v7, a2, 0);
}

BOOL TDescriptorSource::AddMissedRequest(TDescriptorSource *this, const void *a2, uint64_t a3, CFComparisonResult (*a4)(const void *, const void *, void *))
{
  float *MissedRequests;
  _QWORD *v8;
  _BOOL8 v9;
  const void *v10;
  CFHashCode v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  void *v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  id v46;
  __int128 v47;

  if (this)
  {
    os_unfair_lock_lock_with_options();
    MissedRequests = (float *)GetMissedRequests();
    v46 = this;
    *(_QWORD *)&v47 = a2;
    *((_QWORD *)&v47 + 1) = a3;
    v9 = v8 == 0;
    if (v8)
    {
LABEL_77:

      os_unfair_lock_unlock((os_unfair_lock_t)&sMissedRequestCacheLock);
      return v9;
    }
    v10 = (const void *)atomic_load((unint64_t *)&v46);
    v11 = CFHash(v10);
    v12 = STL::hash_val<unsigned long,unsigned long,CFComparisonResult (*)(void const*,void const*,void *)>(v11, v47, *((unint64_t *)&v47 + 1));
    v13 = v12;
    v14 = *((_QWORD *)MissedRequests + 1);
    if (v14)
    {
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v15.i16[0] = vaddlv_u8(v15);
      v16 = v15.u32[0];
      if (v15.u32[0] > 1uLL)
      {
        v17 = v12;
        if (v12 >= v14)
          v17 = v12 % v14;
      }
      else
      {
        v17 = (v14 - 1) & v12;
      }
      v18 = *(_QWORD **)(*(_QWORD *)MissedRequests + 8 * v17);
      if (v18)
      {
        v19 = (_QWORD *)*v18;
        if (*v18)
        {
          do
          {
            v20 = v19[1];
            if (v20 == v13)
            {
              {
                goto LABEL_77;
              }
            }
            else
            {
              if (v16 > 1)
              {
                if (v20 >= v14)
                  v20 %= v14;
              }
              else
              {
                v20 &= v14 - 1;
              }
              if (v20 != v17)
                break;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
    }
    else
    {
      v17 = 0xAAAAAAAAAAAAAAAALL;
    }
    v21 = (char *)operator new(0x28uLL);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = v13;
    v22 = (void *)atomic_load((unint64_t *)&v46);
    *((_QWORD *)v21 + 2) = v22;
    *(_OWORD *)(v21 + 24) = v47;
    v23 = (float)(unint64_t)(*((_QWORD *)MissedRequests + 3) + 1);
    v24 = MissedRequests[8];
    if (v14 && (float)(v24 * (float)v14) >= v23)
    {
LABEL_67:
      v40 = *(_QWORD **)MissedRequests;
      v41 = *(_QWORD **)(*(_QWORD *)MissedRequests + 8 * v17);
      if (v41)
      {
        *(_QWORD *)v21 = *v41;
      }
      else
      {
        v42 = *((_QWORD *)MissedRequests + 2);
        *(_QWORD *)v21 = v42;
        *((_QWORD *)MissedRequests + 2) = v21;
        v40[v17] = MissedRequests + 4;
        if (!v42)
        {
LABEL_76:
          ++*((_QWORD *)MissedRequests + 3);
          goto LABEL_77;
        }
        v43 = *(_QWORD *)(v42 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v43 >= v14)
            v43 %= v14;
        }
        else
        {
          v43 &= v14 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)MissedRequests + 8 * v43);
      }
      *v41 = v21;
      goto LABEL_76;
    }
    v25 = (v14 & (v14 - 1)) == 0;
    if (v14 < 3)
      v25 = 0;
    v26 = (2 * v14) | !v25;
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *((_QWORD *)MissedRequests + 1);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v14)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)MissedRequests + 3) / MissedRequests[8]);
      if (v14 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *((_QWORD *)MissedRequests + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(_QWORD **)MissedRequests;
          *(_QWORD *)MissedRequests = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *((int8x8_t *)MissedRequests + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)MissedRequests + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*((_QWORD *)MissedRequests + 2);
          if (v32)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)MissedRequests + 8 * v33) = MissedRequests + 4;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(_QWORD *)(*(_QWORD *)MissedRequests + 8 * v39))
                  {
                    *(_QWORD *)(*(_QWORD *)MissedRequests + 8 * v39) = v32;
                    goto LABEL_58;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)MissedRequests + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)MissedRequests + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_58:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_62;
        }
        v45 = *(_QWORD **)MissedRequests;
        *(_QWORD *)MissedRequests = 0;
        if (v45)
          operator delete(v45);
        v14 = 0;
        *((_QWORD *)MissedRequests + 1) = 0;
      }
    }
LABEL_62:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v17 = v13 % v14;
      else
        v17 = v13;
    }
    else
    {
      v17 = (v14 - 1) & v13;
    }
    goto LABEL_67;
  }
  return 0;
}

BOOL CompareName(__CFString *a1, const TBaseFont *a2, char a3, char a4)
{
  void *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  _BOOL8 v13;
  CFComparisonResult v14;

  v8 = (void *)atomic_load((unint64_t *)a2 + 12);
  v9 = v8;
  v10 = v9;
  v11 = v10;
  if (v11 == a1)
  {

LABEL_10:
    v13 = 1;
    goto LABEL_12;
  }
  v12 = v11;
  if (!a1 || !v11)
  {

    if ((a4 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v13 = 1;
  v14 = CFStringCompare(a1, v11, 1uLL);

  if (v14)
  {
    if ((a4 & 1) != 0)
      goto LABEL_11;
LABEL_9:
    if (IsPostScriptNameAlias(a1, v9))
      goto LABEL_10;
LABEL_11:
    v13 = CompareOtherNamesExclusive(a1, a1, a1, a2, a3);
  }
LABEL_12:

  return v13;
}

__CFString *TAttributes::HandleTextScaleAttribute(__CFString *result, uint64_t a2)
{
  if (result == CFSTR("NSTextScaleSecondary")
    || result && (result = (__CFString *)CFEqual(result, CFSTR("NSTextScaleSecondary")), (_DWORD)result))
  {
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 0x2000u;
  }
  return result;
}

BOOL _CTFontManagerRegisterActionFontsForURL(void *a1, int a2, int a3, _QWORD *a4)
{
  CFAllocatorRef *v5;
  const __CFArray *v8;
  const __CFArray *v9;
  _BOOL8 v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  char v14;
  unsigned int v15;
  void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  const __CFArray *v20;
  const void *ValueAtIndex;
  void *values;
  unint64_t v24;
  id v25;

  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
    values = a1;
    v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v9 = v8;
    if (!v8)
    {
      v10 = 0;
      v15 = 12;
      goto LABEL_19;
    }
    v24 = 0;
    v25 = 0;
    values = &v25;
    v10 = _CTFontManagerRegisterActionFontsForURLs(v8, a2, a3, &v24);
    v11 = (unint64_t *)values;
    v12 = v24;
    do
      v13 = (void *)__ldaxr(v11);
    while (__stlxr(v12, v11));

    if (a4)
      v14 = v10;
    else
      v14 = 1;
    if ((v14 & 1) != 0)
    {
      v15 = 0;
LABEL_18:

LABEL_19:
      if (!a4)
        return v10;
      goto LABEL_20;
    }
    v16 = (void *)atomic_load((unint64_t *)&v25);
    v17 = v16;
    if (v17)
    {
      v18 = v17;
      Count = CFArrayGetCount(v17);

      if (Count)
      {
        v20 = (const __CFArray *)atomic_load((unint64_t *)&v25);
        ValueAtIndex = CFArrayGetValueAtIndex(v20, 0);
        v15 = 0;
        *a4 = CFRetain(ValueAtIndex);
        goto LABEL_18;
      }
    }
    else
    {

    }
    CFLog();
    v15 = 22;
    goto LABEL_18;
  }
  v10 = 0;
  v15 = 22;
  if (!a4)
    return v10;
LABEL_20:
  if (v15)
    *a4 = CFErrorCreate(*v5, (CFErrorDomain)*MEMORY[0x1E0C9AFD0], v15, 0);
  return v10;
}

BOOL _CTFontManagerRegisterActionFontsForURLs(const __CFArray *a1, int a2, int a3, unint64_t *a4)
{
  const __CFAllocator *v8;
  CFErrorRef v9;
  unint64_t v10;
  _BOOL8 v11;
  int v12;
  int v13;
  const __CFAllocator *v14;
  const CFArrayCallBacks *v15;
  const __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex i;
  void *ValueAtIndex;
  int v21;
  int v22;
  CFArrayRef v23;
  void *v24;
  id v25;
  __CFArray *v26;
  __CFArray *v27;
  const void *v28;
  unint64_t v29;
  const __CFArray *v30;
  const __CFArray *v31;
  unint64_t *v33;
  id v34;
  id v35;
  id Mutable;
  void *values;

  if (a1 && CFArrayGetCount(a1))
  {
    v33 = a4;
    if (a2)
    {
      EnsureGSFontInitialized();
      if (a2 != 1)
      {
        CFLog();
        v12 = 0;
        v13 = 307;
        goto LABEL_15;
      }
    }
    else
    {
      if (_CTFontManagerRegisterActionFontsForURLs(__CFArray const*,CTFontManagerScope,BOOL,Action,__CFArray const**)::logOnce != -1)
        dispatch_once(&_CTFontManagerRegisterActionFontsForURLs(__CFArray const*,CTFontManagerScope,BOOL,Action,__CFArray const**)::logOnce, &__block_literal_global_8);
      EnsureGSFontInitialized();
    }
    v13 = 0;
    v12 = 1;
LABEL_15:
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v16 = CFArrayCreateMutable(v14, 0, v15);
    if (v12)
    {
      Count = CFArrayGetCount(a1);
      if (!Count)
      {
        v11 = 1;
LABEL_34:
        if (CFArrayGetCount(v16) >= 1)
        {
          if (a3)
          {
            v30 = v16;
            v31 = 0;
          }
          else
          {
            v30 = 0;
            v31 = v16;
          }
          CTFontManagerInstalledFontsChanged(v30, v31);
        }

        return v11;
      }
      v18 = Count;
      v13 = 0;
      for (i = 0; i != v18; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, i);
        if (a3 == 1)
          v21 = GSFontRegisterURL();
        else
          v21 = GSFontUnregisterURL();
        v22 = v21;
        if (v21)
        {
          v35 = (id)0xAAAAAAAAAAAAAAAALL;
          values = ValueAtIndex;
          v23 = CFArrayCreate(v14, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
          CreateErrorForFailureToActOnFontURLs((CFErrorRef *)&v35, a3, (unint64_t)v23, v22);

          v24 = (void *)atomic_load((unint64_t *)&v35);
          v25 = v24;
          v26 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v26, v25);

          if (!v13)
            v13 = v22;

        }
        else
        {
          CFArrayAppendValue(v16, ValueAtIndex);
        }
      }
    }
    else
    {
      CreateErrorForFailureToActOnFontURLs((CFErrorRef *)&v34, a3, (unint64_t)a1, v13);
      v27 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      v28 = (const void *)atomic_load((unint64_t *)&v34);
      CFArrayAppendValue(v27, v28);

    }
    v11 = v13 == 0;
    if (v33 && v13)
    {
      do
        v29 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      v11 = 0;
      *v33 = v29;
    }
    goto LABEL_34;
  }
  if (a4)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFErrorDomain)*MEMORY[0x1E0C9AFD0], 22, 0);
    values = v9;
    Mutable = CFArrayCreate(v8, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    do
      v10 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
    *a4 = v10;

  }
  return 0;
}

void EnsureGSFontInitialized(void)
{
  if (EnsureGSFontInitialized(void)::onceToken != -1)
    dispatch_once_f(&EnsureGSFontInitialized(void)::onceToken, 0, (dispatch_function_t)EnsureGSFontInitialized(void)::$_0::__invoke);
}

void CTFontManagerInstalledFontsChanged(const void *a1, CFArrayRef theArray)
{
  unsigned int v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  void *v9;
  __CFDictionary *v10;
  _QWORD block[5];
  id v12;
  id Mutable;

  do
    v4 = __ldxr((unsigned int *)&TGenerationSeed::sGeneration);
  while (__stxr(v4 + 1, (unsigned int *)&TGenerationSeed::sGeneration));
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(theArray, i);
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&Mutable);
        TDescriptorSource::PurgeFromCaches((TDescriptorSource *)&Mutable, ValueAtIndex);
      }
    }
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v9 = (void *)__ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  v12 = v9;

  do
    v10 = (__CFDictionary *)__ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));

  if (v10)
  {
    if (a1)
      CFDictionaryAddValue(v10, CFSTR("CTFontManagerAvailableFontURLsAdded"), a1);
    if (theArray)
      CFDictionaryAddValue(v10, CFSTR("CTFontManagerAvailableFontURLsRemoved"), theArray);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __CTFontManagerInstalledFontsChanged_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v10;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t TAATKernEngine::KernRuns(uint64_t a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  TRunGlue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned __int16 *v14;
  __int16 v15;
  TBaseFont *v16;
  double v17;
  unint64_t v18;
  unsigned __int16 *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  TRunGlue *v23;
  uint64_t v24;
  void (*v25)(uint64_t, _BYTE *);
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 v32;
  unsigned __int16 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int GlyphID;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int16 *v44;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unsigned __int16 v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unint64_t v67;
  TRunGlue *v69;
  uint64_t v70;
  unsigned __int16 *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  TRunGlue *v76;
  _BOOL4 v77;
  _BOOL4 v79;
  _BOOL4 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  _BOOL4 v84;
  _BOOL4 v86;
  _BOOL4 v87;
  unint64_t v88;
  __int16 v89;
  __int16 v90;
  TRunGlue *v91;
  uint64_t v92;
  unsigned __int16 *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned __int16 *v102;
  unsigned int v103;
  uint64_t v104;
  os_unfair_lock_s *v105;
  uint64_t v106;
  uint64_t InitializedGraphicsFont;
  uint64_t v108;
  _WORD *v109;
  size_t v110;
  _WORD *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned __int16 *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned __int16 *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  uint64_t result;
  uint64_t v131;
  __CFString *v132;
  uint64_t v133;
  int v134;
  unsigned __int16 v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unsigned int v138;
  unsigned __int16 *v139;
  uint64_t v140;
  uint64_t v141;
  TRunGlue *v142;
  unsigned __int16 v143;
  TRunGlue *v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unint64_t v147;
  char *v148;
  unsigned __int16 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int16 *v156;
  _WORD *v158;
  _QWORD v159[3];
  __int128 v160;
  __int128 v161;
  _QWORD v162[8];
  uint64_t v163;

  v134 = *a3;
  *a3 = 2;
  if (!TRunGlue::length(*(TRunGlue **)a1))
    return 1;
  v4 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 113))
  {
    v5 = bswap32(*(unsigned __int16 *)(v4 + 2)) >> 16;
    v6 = v4 + 4;
  }
  else
  {
    v5 = (int)bswap32(*(_DWORD *)(v4 + 4));
    v6 = v4 + 8;
  }
  v7 = *(TRunGlue **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 640);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 648);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  if (*((_BYTE *)v7 + 634))
  {
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  if (v5 >= 1)
  {
    v151 = 0;
    v10 = 0;
    v133 = v5;
    do
    {
      v6 += v10;
      v11 = v6 + 6;
      if (*(_QWORD *)(a1 + 96) > (unint64_t)(v6 + 4) || v11 > *(_QWORD *)(a1 + 104))
      {
LABEL_213:
        v132 = TFont::DebugDescription(*(TFont **)(*(_QWORD *)a1 + 616));
        CFLog();

        v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 616) + 400);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 488))(v131, 1801810542);
        result = 0;
        *(_QWORD *)(a1 + 96) = 0;
        return result;
      }
      v13 = bswap32(*(unsigned __int16 *)(v6 + 4)) >> 16;
      if (*(_BYTE *)(a1 + 113))
      {
        v10 = bswap32(*(unsigned __int16 *)(v6 + 2)) >> 16;
        if (((v13 << 11) & 0x1000) != 0)
          goto LABEL_188;
        v13 = ((v13 >> 8) & 0xFFFFA7FF | (v13 << 15) | (((v13 >> 2) & 1) << 14) | (((v13 >> 3) & 1) << 11) & 0xFFFFEFFF | (((v13 >> 1) & 1) << 12)) ^ 0xFFFF8000;
        v14 = (unsigned __int16 *)(v6 + 6);
      }
      else
      {
        v14 = (unsigned __int16 *)(v6 + 8);
        v10 = (int)bswap32(*(_DWORD *)v6);
      }
      v15 = v13;
      if (*(_BYTE *)(a1 + 112) == (unsigned __int16)v13 >> 15)
      {
        if ((v13 & 0x4000) != 0)
        {
          if (*(_BYTE *)(a1 + 112))
            goto LABEL_188;
        }
        else if (!v134)
        {
          goto LABEL_188;
        }
        if ((v13 & 0x2000) != 0)
        {
          v16 = *(TBaseFont **)(*(_QWORD *)(*(_QWORD *)a1 + 616) + 400);
          if (v16)
          {
            if (TBaseFont::GetInitializedGraphicsFont(v16)
              && CGFontGetParserFont()
              && *(_QWORD *)(a1 + 96) <= v11
              && (unint64_t)(v6 + 8) <= *(_QWORD *)(a1 + 104))
            {
              FPFontGetVariationScalar();
              if (v17 == 0.0)
                goto LABEL_188;
              *(double *)(a1 + 24) = v17;
            }
          }
        }
        v156 = v14;
        v140 = v10;
        v141 = v6;
        switch((char)v13)
        {
          case 0:
            v18 = *(_QWORD *)(a1 + 104);
            v19 = v14 + 4;
            if ((unint64_t)(v14 + 4) > v18)
              goto LABEL_213;
            *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v160 = v20;
            v161 = v20;
            v159[0] = a1;
            v159[1] = v14;
            v159[2] = v18;
            LOWORD(v160) = v13;
            v162[0] = 0;
            LODWORD(v21) = bswap32(*v14) >> 16;
            v22 = (unint64_t)&v19[3 * v21];
            if (v22 < (unint64_t)v19 || v22 > v18)
            {
              if ((unint64_t)(v14 + 7) > v18)
                LOWORD(v21) = 0;
              else
                v21 = (v18 - (unint64_t)v19) / 6;
            }
            WORD4(v161) = v21;
            v23 = *(TRunGlue **)a1;
            v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
            if (v24)
            {
              if (v24 == 1)
                v25 = TAATKernEngine::KernOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInSingleRun>;
              else
                v25 = TAATKernEngine::KernOrderedList::ProcessGlyphsT<TRunGlue::TGlyph>;
            }
            else
            {
              v25 = TAATKernEngine::KernOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInVector>;
            }
            *((_QWORD *)&v160 + 1) = v25;
            *(_QWORD *)&v161 = 0;
            v104 = *((_QWORD *)v23 + 77);
            v105 = *(os_unfair_lock_s **)(v104 + 400);
            v106 = *(_QWORD *)&v105[50]._os_unfair_lock_opaque;
            if (!v106)
            {
              InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v104 + 400));
              v106 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&v105->_os_unfair_lock_opaque
                                                                            + 872))(v105, InitializedGraphicsFont);
              if (!v106)
                goto LABEL_184;
            }
            os_unfair_lock_lock_with_options();
            v108 = *(_QWORD *)&v105[122]._os_unfair_lock_opaque;
            if (2 * v151 < (unint64_t)((*(_QWORD *)&v105[124]._os_unfair_lock_opaque - v108) >> 3)
              && (v109 = *(_WORD **)(v108 + 16 * v151)) != 0)
            {
              WORD5(v161) = *v109;
              v162[0] = v109 + 1;
            }
            else
            {
              v155 = (uint64_t)v25;
              if (v106 + 1 < 0)
                v110 = -1;
              else
                v110 = 2 * (v106 + 1);
              v111 = (_WORD *)operator new[]();
              bzero(v111, v110);
              WORD5(v161) = v106 - 1;
              *v111 = v106 - 1;
              v162[0] = v111 + 1;
              if ((_WORD)v21)
              {
                LOWORD(v112) = 0;
                do
                {
                  v112 = (unsigned __int16)v112;
                  v113 = v19[3 * (unsigned __int16)v112];
                  v114 = __rev16(v113);
                  if (v114 > (unsigned __int16)(v106 - 1))
                    break;
                  v111[v114 + 1] = v112 + 1;
                  v115 = &v156[3 * (unsigned __int16)v112 + 7];
                  do
                  {
                    if (++v112 >= (unint64_t)(unsigned __int16)v21)
                      goto LABEL_180;
                    v116 = *v115;
                    v115 += 3;
                  }
                  while (v116 == v113);
                }
                while ((unsigned __int16)v21 > (unsigned __int16)v112);
              }
LABEL_180:
              v158 = v111;
              TBaseFont::AddKerningDataAtIndex(v105, (uint64_t *)&v158, 2 * v151);
              v117 = (uint64_t)v158;
              v158 = 0;
              if (v117)
                MEMORY[0x186DC0394](v117, 0x1000C80BDFB0063);
              v25 = (void (*)(uint64_t, _BYTE *))v155;
            }
            os_unfair_lock_unlock(v105 + 111);
LABEL_184:
            v25((uint64_t)v159, a2);
            goto LABEL_185;
          case 1:
            v26 = *(_QWORD *)(a1 + 104);
            if ((unint64_t)(v14 + 5) > v26)
              goto LABEL_213;
            v27 = (unsigned __int16 *)((char *)v14 + (bswap32(v14[1]) >> 16));
            v28 = v27 + 2;
            if ((unint64_t)(v27 + 2) > v26)
              goto LABEL_213;
            *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v160 = v29;
            v161 = v29;
            v148 = (char *)v14 + (bswap32(v14[3]) >> 16);
            v30 = bswap32(v27[1]) >> 16;
            v31 = (unint64_t)v28 + v30;
            v137 = v27;
            if ((unint64_t)v27 + 5 <= v26)
              v32 = v26 - (_WORD)v28;
            else
              v32 = 0;
            if (v31 <= v26 && v31 >= (unint64_t)v28)
              v34 = v30;
            else
              v34 = v32;
            v135 = v34;
            v35 = v14[2];
            BYTE11(v161) = 0;
            memset(v162, 0, sizeof(v162));
            v163 = -1;
            v36 = bswap32(v35) >> 16;
            v142 = *(TRunGlue **)a1;
            v37 = TRunGlue::length(*(TRunGlue **)a1);
            v152 = 0;
            v38 = 0;
            v145 = v14 + 1;
            while (2)
            {
              if (v37 < 1)
              {
                if (((v37 == 0) & (v38 ^ 1)) == 0)
                  break;
LABEL_57:
                v38 = 1;
                v41 = (unsigned __int8 *)&v161 + 11;
LABEL_58:
                v42 = *v41;
                goto LABEL_59;
              }
              if ((v38 & 1) != 0)
                goto LABEL_57;
              GlyphID = TRunGlue::GetGlyphID(v142, v152);
              if (GlyphID == 0xFFFF)
              {
                v38 = 0;
                v42 = 2;
              }
              else
              {
                v40 = GlyphID - (bswap32(*v137) >> 16);
                if ((unsigned __int16)v40 < v135)
                {
                  v38 = 0;
                  v41 = (unsigned __int8 *)v137 + (unsigned __int16)v40 + 4;
                  goto LABEL_58;
                }
                v38 = 0;
                v42 = 1;
              }
LABEL_59:
              v43 = (unsigned __int8 *)v156 + v42 + (unsigned __int16)v36;
              if ((unint64_t)(v43 + 1) <= v26)
              {
                v44 = (unsigned __int16 *)&v148[4 * *v43];
                if (v44 >= v156 && (unint64_t)(v44 + 2) <= v26)
                {
                  v46 = *v44;
                  v47 = (int)bswap32(v44[1]) >> 16;
                  if (v47 < 0)
                  {
                    if (v163 <= 6)
                      v48 = v163 + 1;
                    else
                      v48 = 0;
                    v163 = v48;
                    v162[v48] = v152;
                  }
                  if ((v47 & 0x3FFF) == 0 || (v49 = v163, v163 < 0))
                  {
LABEL_81:
                    v36 = bswap32(v46) >> 16;
                    LODWORD(v54) = v38 ^ 1;
                    if ((v47 & 0x4000) != 0)
                      v54 = 0;
                    else
                      v54 = v54;
                    v152 += v54;
                    v37 -= (v47 & 0x4000) == 0;
                    continue;
                  }
                  if ((unsigned __int16 *)((char *)v156 + (v47 & 0x3FFF)) >= v156)
                  {
                    v50 = (unint64_t)v145 + (v47 & 0x3FFF);
                    while (v50 <= v26)
                    {
                      if (v49 >= 1)
                        v51 = v49 - 1;
                      else
                        v51 = 7;
                      v52 = bswap32(*(unsigned __int16 *)(v50 - 2)) >> 16;
                      if ((v52 & 0xFFFE) != 0)
                      {
                        v53 = v162[v49];
                        if ((v53 & 0x8000000000000000) == 0)
                        {
                          TAATKernEngine::HandleKern<TRunGlue::TGlyph>(a1, *(_QWORD *)a1, v53, (__int16)(v52 & 0xFFFE), v13);
                          *a2 = 1;
                        }
                      }
                      v50 += 2;
                      v49 = v51;
                      if ((v52 & 1) != 0)
                        goto LABEL_81;
                    }
                  }
                }
              }
              break;
            }
            v15 = v13;
LABEL_185:
            v5 = v133;
            v10 = v140;
            v6 = v141;
LABEL_186:
            if ((v15 & 0x2000) != 0)
              *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
            break;
          case 2:
            if ((unint64_t)(v14 + 4) > *(_QWORD *)(a1 + 104))
              goto LABEL_213;
            v55 = *(_QWORD *)(a1 + 104);
            v149 = 0;
            v153 = v6 - (_QWORD)v14;
            v56 = v6 - (_QWORD)v14 + (bswap32(v14[1]) >> 16);
            v57 = (unsigned __int16 *)((char *)v14 + v56);
            if (v56 >= 0 && (unint64_t)(v57 + 3) <= v55)
            {
              v58 = (unint64_t)(v57 + 2);
              v59 = bswap32(v57[1]) >> 16;
              v60 = (unint64_t)&v57[v59 + 2];
              if (v60 > v55 || v60 < v58)
                v59 = (v55 - ((_DWORD)v57 + 4)) >> 1;
              if (v58 >= (unint64_t)v14)
                v62 = v59;
              else
                v62 = 0;
              v149 = v62;
            }
            v146 = v57;
            v63 = v153 + (bswap32(v14[2]) >> 16);
            if (v63 < 0)
              goto LABEL_185;
            v64 = (unsigned __int16 *)((char *)v14 + v63);
            if ((unint64_t)v14 + v63 + 6 > v55)
              goto LABEL_185;
            v65 = v64 + 2;
            v66 = bswap32(v64[1]) >> 16;
            v67 = (unint64_t)&v64[v66 + 2];
            if (v67 > v55 || v67 < (unint64_t)v65)
              v66 = (v55 - ((_DWORD)v64 + 4)) >> 1;
            if (v65 < v14)
              LOWORD(v66) = 0;
            v143 = v66;
            if (!v149 || !(_WORD)v66)
              goto LABEL_185;
            v69 = *(TRunGlue **)a1;
            v70 = TRunGlue::length(*(TRunGlue **)a1);
            if (*((_QWORD *)v69 + 19))
            {
              TRunGlue::FocusOnIndex(v69, 0);
              v71 = (unsigned __int16 *)(*((_QWORD *)v69 + 22) - 2 * *((_QWORD *)v69 + 20));
            }
            else
            {
              v71 = (unsigned __int16 *)(*((_QWORD *)v69 + 22) + 2 * *((_QWORD *)v69 + 20));
            }
            if (v70 < 2)
              goto LABEL_185;
            v118 = *v71;
            v139 = v14 + 3;
            v119 = 1;
            while (2)
            {
              v120 = TRunGlue::GetGlyphID(v69, v119);
              if ((_DWORD)v120 == 0xFFFF || (v121 = v120, TRunGlue::IsDeleted(v69, v119)))
              {
                v121 = v118;
                goto LABEL_205;
              }
              v122 = bswap32(*v146);
              v123 = (unsigned __int16)(v118 - HIWORD(v122));
              v124 = v121 - (bswap32(*v64) >> 16);
              v125 = &v146[(unsigned __int16)(v118 - HIWORD(v122)) + 2];
              if (v123 >= v149)
                v125 = v139;
              if ((unsigned __int16)v124 >= v143)
                v126 = 0;
              else
                v126 = bswap32(v64[(unsigned __int16)v124 + 2]) >> 16;
              v127 = v153 + (bswap32(*v125) >> 16) + v126;
              if (v127 >= 0)
              {
                v128 = (unsigned __int16 *)((char *)v156 + v127);
                if ((unint64_t)(v128 + 1) <= v55)
                {
                  v129 = *v128;
                  if (v129)
                  {
                    TAATKernEngine::HandleKern<TRunGlue::TGlyph>(a1, (uint64_t)v69, v119, (int)bswap32(v129) >> 16, v13);
                    *a2 = 1;
                  }
LABEL_205:
                  ++v119;
                  v118 = v121;
                  if (v70 == v119)
                    goto LABEL_185;
                  continue;
                }
              }
              goto LABEL_185;
            }
          case 3:
            v72 = *(_QWORD *)(a1 + 104);
            if ((unint64_t)(v14 + 3) > v72)
              goto LABEL_213;
            v73 = bswap32(*v14) >> 16;
            v136 = v14 + 3;
            v74 = (unint64_t)&v14[*((unsigned __int8 *)v14 + 2) + 3];
            v75 = v74 + v73;
            v76 = (TRunGlue *)(v74 + v73 + v73);
            v77 = v74 >= (unint64_t)v14;
            v79 = v74 + v73 >= v74 && v75 <= v72;
            v80 = v74 + 1 <= v72;
            v150 = (uint64_t)&v14[*((unsigned __int8 *)v14 + 2) + 3];
            v81 = v72 - v74;
            if (v77 && v80)
              v82 = v81;
            else
              v82 = 0;
            if (v77 && v79)
              v83 = v73;
            else
              v83 = v82;
            v84 = v75 >= (unint64_t)v14;
            v144 = v76;
            v147 = v75;
            v86 = (unint64_t)v76 >= v75 && (unint64_t)v76 <= v72;
            v87 = v75 + 1 <= v72;
            v88 = *(_QWORD *)(a1 + 104);
            v89 = v72 - v75;
            if (v84 && v87)
              v90 = v89;
            else
              v90 = 0;
            if (!v84 || !v86)
              LOWORD(v73) = v90;
            LODWORD(v73) = (unsigned __int16)v73;
            if ((unsigned __int16)v73 >= v83)
              LODWORD(v73) = v83;
            v154 = v73;
            if (!(_DWORD)v73)
              goto LABEL_185;
            v138 = *((unsigned __int8 *)v14 + 4);
            v91 = *(TRunGlue **)a1;
            v92 = TRunGlue::length(*(TRunGlue **)a1);
            if (*((_QWORD *)v91 + 19))
            {
              TRunGlue::FocusOnIndex(v91, 0);
              v93 = (unsigned __int16 *)(*((_QWORD *)v91 + 22) - 2 * *((_QWORD *)v91 + 20));
            }
            else
            {
              v93 = (unsigned __int16 *)(*((_QWORD *)v91 + 22) + 2 * *((_QWORD *)v91 + 20));
            }
            if (v92 < 2)
              goto LABEL_185;
            v94 = *v93;
            if (v154 <= v94)
              v95 = 0;
            else
              v95 = v94;
            v96 = 1;
            while (2)
            {
              v97 = TRunGlue::GetGlyphID(v91, v96);
              if (v97 == 0xFFFF || (v98 = v97, TRunGlue::IsDeleted(v91, v96)))
              {
                v99 = v95;
                goto LABEL_161;
              }
              if (v154 <= v98)
                v99 = 0;
              else
                v99 = v98;
              v100 = (unsigned __int8 *)v144
                   + *(unsigned __int8 *)(v147 + v99)
                   + *(unsigned __int8 *)(v150 + (unsigned __int16)v95) * (unint64_t)v138;
              if (v100 >= (unsigned __int8 *)v156 && (unint64_t)(v100 + 1) <= v88)
              {
                v102 = &v136[*v100];
                if ((unint64_t)(v102 + 1) <= v88)
                {
                  v103 = *v102;
                  if (v103)
                  {
                    TAATKernEngine::HandleKern<TRunGlue::TGlyph>(a1, (uint64_t)v91, v96, (int)bswap32(v103) >> 16, v13);
                    *a2 = 1;
                  }
LABEL_161:
                  ++v96;
                  v95 = v99;
                  if (v92 == v96)
                    goto LABEL_185;
                  continue;
                }
              }
              goto LABEL_185;
            }
          default:
            goto LABEL_186;
        }
      }
LABEL_188:
      ++v151;
    }
    while (v151 != v5);
  }
  result = TKerningEngineImplementation::MergeDeltas((TRunGlue **)a1, (_QWORD *)(a1 + 32), (_QWORD *)(a1 + 56), a2, (_BYTE *)(a1 + 80));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 80))
      return TKerningEngineImplementation::TransferDeletedAdvances((TRunGlue **)a1);
    return 1;
  }
  return result;
}

uint64_t TKerningEngineImplementation::MergeDeltas(TRunGlue **a1, _QWORD *a2, _QWORD *a3, _BYTE *a4, _BYTE *a5)
{
  _QWORD *v6;
  TRunGlue *v8;
  double v9;
  double v10;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  TRunGlue *v17;
  uint64_t GlyphID;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  TRunGlue *v29;
  uint64_t v30;
  double Advance;
  double v32;
  TRunGlue *v33;
  _QWORD *v34;
  __int16 v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int64_t v39;
  BOOL IsDeleted;
  TRunGlue *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __int16 v47;
  TRun *v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  id v55[2];
  __int128 v56;
  uint64_t v57;
  CGSize v58;
  CGPoint v59;
  CGSize v60;

  v6 = a3;
  v8 = *a1;
  if (*((_BYTE *)*a1 + 634))
    v9 = *((double *)*a1 + 81);
  else
    v9 = *((double *)*a1 + 80);
  if (*((_BYTE *)*a1 + 634))
    v10 = *((double *)*a1 + 80);
  else
    v10 = *((double *)*a1 + 81);
  if (*a2 != a2[1])
  {
    v57 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v55 = v12;
    v56 = v12;
    TAATPropTable::TAATPropTable((TAATPropTable *)v55, *((const __CTFont **)v8 + 76));
    v13 = (_QWORD *)*a2;
    v14 = (_QWORD *)a2[1];
    while (v13 != v14)
    {
      v15 = *((__int16 *)v13 + 4);
      if (!*((_WORD *)v13 + 4))
        goto LABEL_29;
      v16 = *v13;
      v17 = *a1;
      GlyphID = TRunGlue::GetGlyphID(*a1, *v13);
      if ((_DWORD)GlyphID == 0xFFFF)
        goto LABEL_29;
      v19 = GlyphID;
      if (TRunGlue::IsDeleted(v17, v16))
        goto LABEL_29;
      v20 = (uint64_t (*)(_QWORD *, uint64_t))*((_QWORD *)&v56 + 1);
      v21 = (id *)((char *)v55 + (v57 >> 1));
      if ((v57 & 1) != 0)
        v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + DWORD2(v56));
      if ((v20(v21, v19) & 0x8000) != 0)
      {
LABEL_29:
        v23 = v13;
      }
      else
      {
        v22 = v15;
        v23 = v13 + 2;
        if (v13 + 2 == v14
          || *((__int16 *)v13 + 12) + v15
          || ((v24 = *v23, *v23 >= v16) ? (v25 = v16) : (v25 = *v23), (TRunGlue::GetGlyphProps(*a1, v25) & 0x1040) == 0))
        {
LABEL_27:
          v29 = *a1;
          if (v16 <= 0)
          {
            v58.width = v9 * (double)v22;
            v58.height = 0.0;
            v23 = v13;
            if ((TRunGlue::AdvanceInitialAdvance(*a1, v58) & 1) == 0)
            {

              return 0;
            }
          }
          else
          {
            v30 = v16 - 1;
            Advance = TRunGlue::GetAdvance(*a1, v30);
            TKerningEngineImplementation::SetAdvance<TRunGlue::TGlyph>(v29, v30, a5, Advance + v9 * (double)v22, v32);
            v23 = v13;
          }
        }
        else
        {
          v26 = v16;
          if (v24 >= v16)
            v26 = *v23;
          v27 = v25 + 1;
          while (v27 < v26)
          {
            if (!TRunGlue::IsDeleted(*a1, v27++))
              goto LABEL_27;
          }
          if (v16 == v26)
            v22 = *((_WORD *)v13 + 12);
          v33 = *a1;
          v59.x = TRunGlue::GetOrigin(*a1, v25) + v9 * (double)v22;
          TRunGlue::SetOrigin(v33, v25, v59);
        }
      }
      v13 = v23 + 2;
    }
    *a4 = 1;

    v6 = a3;
  }
  if (!v6[2])
    return 1;
  v34 = (_QWORD *)*v6;
  if (*(_QWORD *)(*v6 + 32))
  {
    v35 = 0;
    goto LABEL_48;
  }
  v35 = *((_WORD *)v34 + 20);
  if (!v35)
    goto LABEL_44;
  v55[0] = *a1;
  v55[1] = 0;
  if (TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)v55))
  {
    v35 = 0;
    goto LABEL_44;
  }
  v60.height = v10 * (double)v35;
  v60.width = 0.0;
  if ((TRunGlue::AdvanceInitialAdvance(*a1, v60) & 1) != 0)
  {
LABEL_44:
    v36 = (_QWORD *)v34[1];
    if (v36)
    {
      do
      {
        v34 = v36;
        v36 = (_QWORD *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v37 = v34;
        v34 = (_QWORD *)v34[2];
      }
      while ((_QWORD *)*v34 != v37);
    }
LABEL_48:
    v38 = v6 + 1;
    if (v34 != v6 + 1)
    {
      do
      {
        v39 = v34[4];
        v55[0] = *a1;
        v55[1] = (id)v39;
        IsDeleted = TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)v55);
        if ((v39 & 0x8000000000000000) == 0 && !IsDeleted)
        {
          v41 = *a1;
          v42 = v39 - 1;
          v43 = TRunGlue::GetAdvance(*a1, v42);
          v45 = v43;
          v46 = v44;
          if (*((_BYTE *)v34 + 42))
          {
            v46 = v44 + -v10 * (double)v35;
            TKerningEngineImplementation::SetAdvance<TRunGlue::TGlyph>(v41, v42, a5, v43, v46);
            v35 = 0;
          }
          v47 = *((_WORD *)v34 + 20);
          if (v47)
          {
            TKerningEngineImplementation::SetAdvance<TRunGlue::TGlyph>(v41, v42, a5, v45, v46 + v10 * (double)v47);
            v35 += v47;
            v48 = (TRun *)*((_QWORD *)*a1 + 19);
            if (v48)
              TRun::NoteCrossStreamPosition(v48, v10 * (double)v35);
          }
        }
        v49 = (_QWORD *)v34[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v34[2];
            v51 = *v50 == (_QWORD)v34;
            v34 = v50;
          }
          while (!v51);
        }
        v34 = v50;
      }
      while (v50 != v38);
    }
    return 1;
  }
  return 0;
}

void TAATKernEngine::KernOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInVector>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  TRunGlue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  TRunGlue **v22;
  __int16 v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  TRunGlue *v34;
  char *v35;
  unint64_t v36;
  TRunGlue **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  TRunGlue *v43;
  TRunGlue *v44;
  char *v45;
  uint64_t v46;
  TRunGlue **v47;
  TRunGlue **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = **(TRunGlue ***)a1;
    v6 = *((_QWORD *)v5 + 22);
    v7 = *((_QWORD *)v5 + 20);
    v8 = TRunGlue::length(v5);
    if (v8 >= 2)
    {
      v9 = v8;
      v10 = v4 + 8;
      v11 = (unsigned __int16 *)(v6 + 2 * v7);
      v12 = *v11;
      v13 = v4 + 10;
      for (i = 1; i != v9; ++i)
      {
        v15 = v11[i];
        if ((_DWORD)v15 == 0xFFFF)
        {
          v15 = v12;
          goto LABEL_16;
        }
        if (*(unsigned __int16 *)(a1 + 50) >= (unsigned __int16)v12)
        {
          if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v12))
          {
            v16 = *(unsigned __int16 *)(a1 + 48);
            if (v16 > (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v12) - 1))
            {
              v17 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v12) - 1;
              v18 = (unsigned __int16 *)(v13 + 6 * v17);
              do
              {
                v19 = bswap32(*(v18 - 1)) >> 16;
                if (v19 == (unsigned __int16)v12)
                {
                  if (v15 <= bswap32(*v18) >> 16)
                    goto LABEL_18;
                }
                else if (v19 >= (unsigned __int16)v12)
                {
LABEL_18:
                  v20 = v17;
                  v21 = (unsigned __int16 *)(v10 + 6 * v17);
                  if ((unsigned __int16)v12 == bswap32(*v21) >> 16
                    && (_DWORD)v15 == bswap32(v21[1]) >> 16
                    && *(_WORD *)(v10 + 6 * v20 + 4))
                  {
                    v22 = *(TRunGlue ***)a1;
                    v23 = *(_WORD *)(a1 + 24);
                    v24 = *(double *)(*(_QWORD *)a1 + 24)
                        * (double)((int)bswap32(*(unsigned __int16 *)(v10 + 6 * v20 + 4)) >> 16);
                    v25 = (int)v24;
                    if ((v23 & 0x4000) != 0)
                    {
                      v50 = v10;
                      v52 = i;
                      v53 = &v52;
                      v29 = (int)v24;
                      v30 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>((uint64_t **)v22 + 7, &v52, (uint64_t)&std::piecewise_construct, &v53);
                      if (v29 == -32768)
                      {
                        LOWORD(v29) = 0;
                        *((_BYTE *)v30 + 42) = 1;
                      }
                      else if ((v23 & 0x800) == 0)
                      {
                        LOWORD(v29) = *((_WORD *)v30 + 20) + v29;
                      }
                      *((_WORD *)v30 + 20) = v29;
                      v10 = v50;
                    }
                    else
                    {
                      v49 = (int)v24;
                      if ((*(_WORD *)(a1 + 24) & 0x800) != 0)
                      {
                        v26 = (uint64_t)v22[4];
                        v27 = (uint64_t)v22[5];
                        v47 = *(TRunGlue ***)a1;
                        if (v26 == v27)
                          goto LABEL_39;
                        while (*(_QWORD *)v26 != i)
                        {
                          v26 += 16;
                          if (v26 == v27)
                          {
                            v28 = v10;
                            v26 = (uint64_t)v22[5];
                            goto LABEL_40;
                          }
                        }
                        if (v26 == v27 || (v31 = v26 + 16, v26 + 16 == v27))
                        {
LABEL_39:
                          v28 = v10;
                        }
                        else
                        {
                          v28 = v10;
                          do
                          {
                            if (*(_QWORD *)v31 != i)
                            {
                              *(_QWORD *)v26 = *(_QWORD *)v31;
                              *(_WORD *)(v26 + 8) = *(_WORD *)(v31 + 8);
                              v26 += 16;
                            }
                            v31 += 16;
                          }
                          while (v31 != v27);
                        }
LABEL_40:
                        std::vector<std::pair<long,TAATDeltaXListEntry>>::erase((uint64_t)(v22 + 4), v26, v27);
                        v10 = v28;
                        v22 = v47;
                        LOWORD(v25) = v49;
                      }
                      v32 = (char *)v22[6];
                      v33 = (uint64_t *)v22[5];
                      if (v33 >= (uint64_t *)v32)
                      {
                        v51 = v10;
                        v35 = (char *)v22[4];
                        v46 = ((char *)v33 - v35) >> 4;
                        v36 = v46 + 1;
                        if ((unint64_t)(v46 + 1) >> 60)
                          abort();
                        v37 = v22;
                        v38 = v32 - v35;
                        if (v38 >> 3 > v36)
                          v36 = v38 >> 3;
                        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
                          v39 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v39 = v36;
                        v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)(v22 + 6), v39);
                        v42 = &v41[16 * v46];
                        *(_QWORD *)v42 = i;
                        *((_WORD *)v42 + 4) = v49;
                        v44 = v37[4];
                        v43 = v37[5];
                        v22 = v37;
                        v45 = v42;
                        if (v43 != v44)
                        {
                          do
                          {
                            *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                            v45 -= 16;
                            v43 = (TRunGlue *)((char *)v43 - 16);
                          }
                          while (v43 != v44);
                          v43 = v37[4];
                        }
                        v34 = (TRunGlue *)(v42 + 16);
                        v22[4] = (TRunGlue *)v45;
                        v22[5] = (TRunGlue *)(v42 + 16);
                        v22[6] = (TRunGlue *)&v41[16 * v40];
                        if (v43)
                        {
                          v48 = v22;
                          operator delete(v43);
                          v22 = v48;
                        }
                        v10 = v51;
                      }
                      else
                      {
                        *v33 = i;
                        *((_WORD *)v33 + 4) = v25;
                        v34 = (TRunGlue *)(v33 + 2);
                      }
                      v22[5] = v34;
                    }
                    *a2 = 1;
                  }
                  break;
                }
                ++v17;
                v18 += 3;
              }
              while (v16 != v17);
            }
          }
        }
LABEL_16:
        v12 = v15;
      }
    }
  }
}

void TAATKernEngine::KernOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInSingleRun>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  TRunGlue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  TRunGlue **v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  TRunGlue **v27;
  uint64_t **v28;
  __int16 v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  TRunGlue *v33;
  char *v34;
  unint64_t v35;
  TRunGlue **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  TRunGlue *v42;
  TRunGlue *v43;
  char *v44;
  uint64_t v45;
  int v46;
  TRunGlue **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = **(TRunGlue ***)a1;
    v6 = *((_QWORD *)v5 + 22);
    v7 = *((_QWORD *)v5 + 20);
    v8 = TRunGlue::length(v5);
    if (v8 >= 2)
    {
      v9 = v8;
      v48 = v4 + 8;
      v10 = (unsigned __int16 *)(v6 + 2 * v7);
      v11 = *v10;
      v12 = v4 + 10;
      for (i = 1; i != v9; ++i)
      {
        v14 = v10[i];
        if ((_DWORD)v14 == 0xFFFF || TRunGlue::IsDeleted(v5, i))
        {
          v14 = v11;
          goto LABEL_7;
        }
        if (*(unsigned __int16 *)(a1 + 50) >= (unsigned __int16)v11)
        {
          if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v11))
          {
            v15 = *(unsigned __int16 *)(a1 + 48);
            if (v15 > (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v11) - 1))
            {
              v16 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * (unsigned __int16)v11) - 1;
              v17 = (unsigned __int16 *)(v12 + 6 * v16);
              do
              {
                v18 = bswap32(*(v17 - 1)) >> 16;
                if (v18 == (unsigned __int16)v11)
                {
                  if (v14 <= bswap32(*v17) >> 16)
                    goto LABEL_19;
                }
                else if (v18 >= (unsigned __int16)v11)
                {
LABEL_19:
                  v19 = v16;
                  v20 = (unsigned __int16 *)(v48 + 6 * v16);
                  if ((unsigned __int16)v11 == bswap32(*v20) >> 16 && (_DWORD)v14 == bswap32(v20[1]) >> 16)
                  {
                    v21 = *(unsigned __int16 *)(v48 + 6 * v19 + 4);
                    if (v21)
                    {
                      v22 = *(TRunGlue ***)a1;
                      v23 = *(_WORD *)(a1 + 24);
                      v24 = (int)(*(double *)(*(_QWORD *)a1 + 24) * (double)((int)bswap32(v21) >> 16));
                      v46 = v24;
                      if ((v23 & 0x4000) != 0)
                      {
                        v49 = i;
                        v50 = &v49;
                        v28 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>((uint64_t **)v22 + 7, &v49, (uint64_t)&std::piecewise_construct, &v50);
                        v29 = v46;
                        if (v46 == -32768)
                        {
                          v29 = 0;
                          *((_BYTE *)v28 + 42) = 1;
                        }
                        else if ((v23 & 0x800) == 0)
                        {
                          v29 = *((_WORD *)v28 + 20) + v46;
                        }
                        *((_WORD *)v28 + 20) = v29;
                      }
                      else
                      {
                        if ((*(_WORD *)(a1 + 24) & 0x800) != 0)
                        {
                          v25 = (uint64_t)v22[4];
                          v26 = (uint64_t)v22[5];
                          if (v25 == v26)
                            goto LABEL_40;
                          while (*(_QWORD *)v25 != i)
                          {
                            v25 += 16;
                            if (v25 == v26)
                            {
                              v27 = *(TRunGlue ***)a1;
                              v25 = (uint64_t)v22[5];
                              goto LABEL_41;
                            }
                          }
                          if (v25 == v26 || (v30 = v25 + 16, v25 + 16 == v26))
                          {
LABEL_40:
                            v27 = *(TRunGlue ***)a1;
                          }
                          else
                          {
                            v27 = *(TRunGlue ***)a1;
                            do
                            {
                              if (*(_QWORD *)v30 != i)
                              {
                                *(_QWORD *)v25 = *(_QWORD *)v30;
                                *(_WORD *)(v25 + 8) = *(_WORD *)(v30 + 8);
                                v25 += 16;
                              }
                              v30 += 16;
                            }
                            while (v30 != v26);
                          }
LABEL_41:
                          std::vector<std::pair<long,TAATDeltaXListEntry>>::erase((uint64_t)(v22 + 4), v25, v26);
                          v22 = v27;
                          LOWORD(v24) = v46;
                        }
                        v31 = (char *)v22[6];
                        v32 = (uint64_t *)v22[5];
                        if (v32 >= (uint64_t *)v31)
                        {
                          v34 = (char *)v22[4];
                          v45 = ((char *)v32 - v34) >> 4;
                          v35 = v45 + 1;
                          if ((unint64_t)(v45 + 1) >> 60)
                            abort();
                          v36 = v22;
                          v37 = v31 - v34;
                          if (v37 >> 3 > v35)
                            v35 = v37 >> 3;
                          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
                            v38 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v38 = v35;
                          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)(v22 + 6), v38);
                          v41 = &v40[16 * v45];
                          *(_QWORD *)v41 = i;
                          *((_WORD *)v41 + 4) = v46;
                          v43 = v36[4];
                          v42 = v36[5];
                          v22 = v36;
                          v44 = v41;
                          if (v42 != v43)
                          {
                            do
                            {
                              *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
                              v44 -= 16;
                              v42 = (TRunGlue *)((char *)v42 - 16);
                            }
                            while (v42 != v43);
                            v42 = v36[4];
                          }
                          v33 = (TRunGlue *)(v41 + 16);
                          v22[4] = (TRunGlue *)v44;
                          v22[5] = (TRunGlue *)(v41 + 16);
                          v22[6] = (TRunGlue *)&v40[16 * v39];
                          if (v42)
                          {
                            v47 = v22;
                            operator delete(v42);
                            v22 = v47;
                          }
                        }
                        else
                        {
                          *v32 = i;
                          *((_WORD *)v32 + 4) = v24;
                          v33 = (TRunGlue *)(v32 + 2);
                        }
                        v22[5] = v33;
                      }
                      *a2 = 1;
                    }
                  }
                  break;
                }
                ++v16;
                v17 += 3;
              }
              while (v15 != v16);
            }
          }
        }
LABEL_7:
        v11 = v14;
      }
    }
  }
}

void TBaseFont::AddKerningDataAtIndex(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v4 = a1[61];
  if (a3 >= (a1[62] - v4) >> 3)
  {
    v8 = (int64x2_t *)(a1 + 61);
    std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::resize((uint64_t)(a1 + 61), a3);
    v10 = (_QWORD *)a1[62];
    v9 = a1[63];
    if ((unint64_t)v10 >= v9)
    {
      v13 = a1[61];
      v14 = ((uint64_t)v10 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        abort();
      v15 = v9 - v13;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v30 = a1 + 64;
      if (v17)
        v18 = (char *)TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>::allocate((uint64_t)(a1 + 64), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      v29 = v20;
      v21 = *a2;
      *a2 = 0;
      *(_QWORD *)v19 = v21;
      v12 = v19 + 8;
      v28.i64[1] = (uint64_t)(v19 + 8);
      v23 = (_QWORD *)a1[61];
      v22 = (_QWORD *)a1[62];
      if (v22 == v23)
      {
        v25 = vdupq_n_s64((unint64_t)v22);
      }
      else
      {
        do
        {
          v24 = *--v22;
          *v22 = 0;
          *((_QWORD *)v19 - 1) = v24;
          v19 -= 8;
        }
        while (v22 != v23);
        v25 = *v8;
        v12 = (_QWORD *)v28.i64[1];
        v20 = v29;
      }
      a1[61] = v19;
      a1[62] = v12;
      v28 = v25;
      v26 = (char *)a1[63];
      a1[63] = v20;
      v29 = v26;
      v27 = v25.i64[0];
      std::__split_buffer<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul> &>::~__split_buffer(&v27);
    }
    else
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
      v12 = v10 + 1;
    }
    a1[62] = v12;
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    v6 = *(_QWORD *)(v4 + 8 * a3);
    *(_QWORD *)(v4 + 8 * a3) = v5;
    if (v6)
      JUMPOUT(0x186DC0394);
  }
}

void std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__base_destruct_at_end[abi:nn180100](a1, (_QWORD *)(*(_QWORD *)a1 + 8 * a2));
  }
  else
  {
    std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__append((__int128 *)a1, a2 - v2);
  }
}

_QWORD *std::__split_buffer<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul> &>::~__split_buffer(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;

  std::__split_buffer<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul> &>::__destruct_at_end[abi:nn180100]((uint64_t)a1, a1[1]);
  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = a1[4];
    v4 = (_QWORD *)(v3 + 32);
    if (v3 <= (unint64_t)v2 && v4 > v2)
    {
      if (a1[3] == *v4)
        *v4 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
  return a1;
}

void *TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v2 = (unint64_t *)(a1 + 32);
  v3 = v4;
  v5 = v4 + 8 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    return operator new(8 * a2);
  }
}

void CreateVariationDictFromGraphicsFont(_QWORD *a1@<X8>)
{
  CGFontGetVariationAxes();
  *a1 = 0;
}

void TGlyphIterator::DoLigature(TRunGlue **this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const OTL::GDEF *a6)
{
  uint64_t v9;
  unsigned int GlyphID;
  OTL::ClassDefTable *v12;
  int v13;
  char v14;
  unsigned int GlyphProps;
  int v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  int v24;
  unsigned int v25;
  OTL::ClassDefTable *v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  TRunGlue *v37;
  char v38;
  TRunGlue *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  TRunGlue *v44;
  char v45;
  unsigned int v46;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v53;
  unsigned int v54;

  v9 = a2;
  if (a6)
  {
    GlyphID = TRunGlue::GetGlyphID(*this, a2);
    v12 = (OTL::ClassDefTable *)*((_QWORD *)a6 + 2);
    if (v12)
      v13 = OTL::ClassDefTable::ClassOf(v12, GlyphID);
    else
      v13 = 0;
  }
  else
  {
    v13 = 3;
  }
  v14 = v13 == 3;
  TRunGlue::SetGlyphID<true>(*this, v9, a3);
  GlyphProps = TRunGlue::GetGlyphProps(*this, v9);
  v16 = v13 == 1;
  v49 = a5;
  if (a5)
  {
    v50 = GlyphProps;
    v53 = v9;
    v17 = 0;
    v18 = a4;
    v19 = a5;
    do
    {
      v21 = *v18++;
      v20 = v21;
      v22 = TRunGlue::GetGlyphProps(*this, v21);
      v23 = v22;
      if ((v22 & 0x10000000) != 0)
        v24 = HIBYTE(v22) & 0xF;
      else
        LOBYTE(v24) = 1;
      if (a6)
      {
        v25 = TRunGlue::GetGlyphID(*this, v53);
        v26 = (OTL::ClassDefTable *)*((_QWORD *)a6 + 2);
        if (v26)
          LODWORD(v26) = OTL::ClassDefTable::ClassOf(v26, v25);
      }
      else
      {
        LODWORD(v26) = 3;
      }
      v17 += v24;
      v27 = (_DWORD)v26 == 3;
      TRunGlue::Delete(*this, v20, 4096);
      v16 &= v27;
      v14 &= v27;
      --v19;
    }
    while (v19);
    v9 = v53;
    GlyphProps = v50;
  }
  else
  {
    v17 = 0;
    v23 = GlyphProps;
  }
  v28 = v23 & 8 | GlyphProps & 0xFFFFFFF7;
  if ((v14 & 1) != 0)
  {
    if ((_DWORD)v28 != GlyphProps)
      TRunGlue::SetGlyphProps(*this, v9, v28);
  }
  else
  {
    v29 = GlyphProps >> 29;
    if ((GlyphProps & 0x10000000) != 0)
      v30 = HIBYTE(GlyphProps) & 0xF;
    else
      v30 = 1;
    v54 = GlyphProps >> 29;
    if ((v16 & 1) == 0)
    {
      v31 = *((_DWORD *)*this + 30);
      LODWORD(v28) = ((((_BYTE)v30 + v17) & 0xF) << 24) | (v31 << 29) | ((v23 & 8) + (GlyphProps & 0xFFFFFFF7)) & 0xFFFFFF | 0x10000000;
      do
      {
        ++v31;
        LODWORD(v28) = v28 + 0x20000000;
        v29 = v31 & 7;
      }
      while ((v31 & 7) == 0);
      *((_DWORD *)*this + 30) = v31;
    }
    v32 = v28 & 0xFFFFEFFF;
    if ((_DWORD)v32 != GlyphProps)
      TRunGlue::SetGlyphProps(*this, v9, v32);
    v33 = *((int *)this + 2) + v9;
    if (v33 >= 0 && TRunGlue::length(*this) > v33)
    {
      v34 = -v30;
      if (v49)
      {
        v35 = 0;
        v36 = v30;
        do
        {
          v37 = this[3];
          if ((TRunGlue *)v33 == v37)
            break;
          v51 = v34;
          v38 = v30 + v34;
          while (1)
          {
            v39 = *this;
            if (v33 == a4[v35])
              break;
            if (((TRunGlue::IsDeleted(v39, v33) | v16) & 1) == 0)
            {
              v40 = TRunGlue::GetGlyphProps(*this, v33);
              v41 = (v40 >> 28) & 1;
              if ((v40 & 0xF000000) == 0)
                v41 = 1;
              if (v41)
                v42 = v36;
              else
                v42 = HIBYTE(v40) & 0xF;
              if (v36 < v42)
                LOBYTE(v42) = v36;
              TRunGlue::SetGlyphProps(*this, v33, (((v38 + (_BYTE)v42) & 0xF) << 24) | (v29 << 29) | v40 & 0xFFFFFF);
            }
            v33 += *((int *)this + 2);
            if ((TRunGlue *)v33 == v37)
            {
              v33 = (uint64_t)v37;
              LOBYTE(v34) = v51;
              goto LABEL_54;
            }
          }
          v43 = TRunGlue::GetGlyphProps(v39, v33);
          v54 = v43 >> 29;
          v36 = (v43 & 0x10000000) != 0 ? HIBYTE(v43) & 0xF : 1;
          LOBYTE(v30) = v36 + v30;
          v33 += *((int *)this + 2);
          ++v35;
          v34 = -v36;
        }
        while (v35 != v49);
      }
      else
      {
        v36 = v30;
      }
LABEL_54:
      if (v54)
      {
        v44 = this[3];
        if ((TRunGlue *)v33 != v44)
        {
          v45 = v34 + v30;
          do
          {
            if (!TRunGlue::IsDeleted(*this, v33))
            {
              v46 = TRunGlue::GetGlyphProps(*this, v33);
              if (v54 != v46 >> 29 || (v46 & 0x10000000) != 0)
                return;
              v48 = HIBYTE(v46) & 0xF;
              if (v36 < v48)
                LOBYTE(v48) = v36;
              TRunGlue::SetGlyphProps(*this, v33, (((v45 + (_BYTE)v48) & 0xF) << 24) | (v29 << 29) | v46 & 0xFFFFFF);
            }
            v33 += *((int *)this + 2);
          }
          while ((TRunGlue *)v33 != v44);
        }
      }
    }
  }
}

uint64_t ScriptAndLangSysFromCanonicalLanguage(__CFString *a1)
{
  unsigned __int8 v2;
  void *v3;
  __int128 v4;
  const char *CStringPtr;
  __int128 v6;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v9;
  char *v10;
  char *v11;
  int Value;
  uint64_t v13;
  int FirstLangSysTagForISO3LanguageTag;
  int v16;
  int v17;
  __int128 v18;
  const char *v19;
  CFIndex v20;
  unint64_t v21;
  char *v22;
  char *ISO3Language;
  signed int v24;
  unsigned int v25;
  int v26;
  size_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int16 v40;
  int v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  int v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  int v47;
  unsigned __int16 v48;
  int v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  int v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  int v62;
  unsigned __int16 v63;
  int v64;
  unsigned __int16 v65;
  int v66;
  int v67;
  int v68;
  unsigned __int16 v69;
  int v70;
  int v71;
  int v72;
  int v73;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  __CFString *v75;
  __CFString *v76;
  const __CFString *v77;
  int64x2_t *v78;
  void *__p;
  char *v80;
  char *v81;
  _OWORD v82[7];
  unint64_t v83;
  char *v84;
  int64x2_t v85;
  uint64_t v86;
  _OWORD v87[2];
  _OWORD *v88;
  int64x2_t v89;
  uint64_t v90;
  _OWORD v91[2];
  _OWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ECDE79D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE79D8))
  {
    qword_1ECDE79D0 = 0xFFFFFFFFLL;
    __cxa_guard_release(&qword_1ECDE79D8);
  }
  os_unfair_lock_lock_with_options();
  v3 = (void *)qword_1ECDE79C8;
  if ((__CFString *)qword_1ECDE79C8 != a1)
  {
    qword_1ECDE79C8 = a1;

    if (!a1)
    {
      FirstLangSysTagForISO3LanguageTag = 0;
      Value = -1;
      goto LABEL_16;
    }
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v87[0] = v4;
    v87[1] = v4;
    v85 = 0uLL;
    v86 = 0;
    v88 = v87;
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (!CStringPtr)
    {
      Length = CFStringGetLength(a1);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
      v9 = MaximumSizeForEncoding + 1;
      v10 = (char *)v85.i64[0];
      if ((unint64_t)(MaximumSizeForEncoding + 1) <= v85.i64[1] - v85.i64[0])
      {
        if ((unint64_t)(MaximumSizeForEncoding + 1) < v85.i64[1] - v85.i64[0])
          v85.i64[1] = v85.i64[0] + v9;
      }
      else
      {
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v85, MaximumSizeForEncoding + 1 - (v85.i64[1] - v85.i64[0]));
        v10 = (char *)v85.i64[0];
      }
      CFStringGetCString(a1, v10, v9, 0x600u);
      *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    }
    v82[0] = v6;
    v82[1] = v6;
    v82[6] = v6;
    v82[4] = v6;
    v82[5] = v6;
    v82[2] = v6;
    v82[3] = v6;
    v83 = 0xAAAAAAAAAAAAAAAALL;
    v84 = (char *)v82 + 4;
    v80 = (char *)v82 + 4;
    v81 = (char *)v82 + 4;
    LODWORD(v82[0]) = 0;
    __p = v82;
    uscript_getCode();
    v11 = (char *)__p;
    if (__p == v80)
    {
      FirstLangSysTagForISO3LanguageTag = 0;
      Value = -1;
      if (__p)
        goto LABEL_12;
      goto LABEL_15;
    }
    Value = *(_DWORD *)__p;
    if (*(_DWORD *)__p == -1)
    {
      FirstLangSysTagForISO3LanguageTag = 0;
      goto LABEL_12;
    }
    if (!Value)
    {
      if (qword_1ECDE7A08 != -1)
        dispatch_once_f(&qword_1ECDE7A08, 0, (dispatch_function_t)ScriptAndLangSysFromScriptCode(UScriptCode,__CFString const*)::$_1::__invoke);
      if (qword_1ECDE7A00)
        Value = CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7A00, a1);
      else
        Value = 0;
    }
    if (Value <= 95)
    {
      if (!Value)
      {
        v16 = 1;
        v17 = -1;
        goto LABEL_40;
      }
      if (Value == 95)
      {
        v16 = 0;
        v17 = 34;
        Value = 1398362693;
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (Value == 96)
    {
      v16 = 0;
      Value = 1398362698;
    }
    else
    {
      if (Value != 97)
      {
LABEL_39:
        v16 = 1;
        v17 = Value;
        Value = 0;
LABEL_40:
        CFLocaleGetLanguageRegionEncodingForLocaleIdentifier();
        if (!v16)
        {
          FirstLangSysTagForISO3LanguageTag = Value;
          goto LABEL_11;
        }
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v91[1] = v18;
        v91[0] = v18;
        v89 = 0uLL;
        v90 = 0;
        v92 = v91;
        v19 = CFStringGetCStringPtr(a1, 0x600u);
        if (!v19)
        {
          v20 = CFStringGetLength(a1);
          v21 = CFStringGetMaximumSizeForEncoding(v20, 0x600u) + 1;
          v22 = (char *)v89.i64[0];
          if (v21 <= v89.i64[1] - v89.i64[0])
          {
            if (v21 < v89.i64[1] - v89.i64[0])
              v89.i64[1] = v89.i64[0] + v21;
          }
          else
          {
            std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v89, v21 - (v89.i64[1] - v89.i64[0]));
            v22 = (char *)v89.i64[0];
          }
          if (CFStringGetCString(a1, v22, v21, 0x600u))
            v19 = (const char *)v89.i64[0];
          else
            v19 = 0;
        }
        ISO3Language = (char *)uloc_getISO3Language();
        if (!ISO3Language || !*ISO3Language)
        {
          if (!v19)
            goto LABEL_842;
          v27 = strlen(v19);
          if (v27 != 3 && (v27 < 4 || v19[3] != 45))
            goto LABEL_842;
          if (*v19)
            v28 = (*v19 << 24) | (v19[1] << 16) | (v19[2] << 8) | 0x20;
          else
            v28 = 0;
          FirstLangSysTagForISO3LanguageTag = FindFirstLangSysTagForISO3LanguageTag(v28);
          if (!FirstLangSysTagForISO3LanguageTag)
          {
            v29 = TagByUppercasing(v28);
            v30 = 0xFFFFFFFFFFFFE730;
            while (*(_DWORD *)&kLanguageToLangSysMappings[v30 + 6356] != v29)
            {
              v30 += 8;
              if (!v30)
                goto LABEL_835;
            }
            FirstLangSysTagForISO3LanguageTag = Value;
            if (!v30)
              goto LABEL_835;
          }
          goto LABEL_836;
        }
        v24 = (*ISO3Language << 24) | (ISO3Language[1] << 16) | (ISO3Language[2] << 8) | 0x20;
        FirstLangSysTagForISO3LanguageTag = FindFirstLangSysTagForISO3LanguageTag(v24);
        if (FirstLangSysTagForISO3LanguageTag)
          goto LABEL_831;
        v25 = 1634885920;
        if (v24 <= 1836412959)
        {
          if (v24 > 1718973983)
          {
            if (v24 <= 1768842271)
            {
              if (v24 > 1751474463)
              {
                if (v24 > 1752003359)
                {
                  if (v24 > 1752132127)
                  {
                    if (v24 <= 1752525343)
                    {
                      if (v24 <= 1752331807)
                      {
                        if (v24 != 1752132128)
                        {
                          v26 = 1752329504;
                          goto LABEL_747;
                        }
LABEL_681:
                        v25 = 1918986784;
                        goto LABEL_829;
                      }
                      if (v24 != 1752331808)
                      {
                        v62 = 1752395296;
                        goto LABEL_785;
                      }
LABEL_617:
                      v25 = 1751282464;
                      goto LABEL_829;
                    }
                    if (v24 <= 1768645919)
                    {
                      if (v24 != 1752525344)
                      {
                        v47 = 1768186144;
                        goto LABEL_793;
                      }
LABEL_748:
                      v25 = 1752002080;
                      goto LABEL_829;
                    }
                    if (v24 != 1768645920 && v24 != 1768649760)
                      goto LABEL_830;
                    v25 = 1768650016;
LABEL_829:
                    FirstLangSysTagForISO3LanguageTag = FindFirstLangSysTagForISO3LanguageTag(v25);
                    v24 = v25;
                    if (!FirstLangSysTagForISO3LanguageTag)
                      goto LABEL_830;
LABEL_831:
                    if (FirstLangSysTagForISO3LanguageTag == 1514686496
                      || FirstLangSysTagForISO3LanguageTag == 1514689568
                      || FirstLangSysTagForISO3LanguageTag == 1514689312)
                    {
                      v29 = LangSysForChineseLocale(a1);
LABEL_835:
                      FirstLangSysTagForISO3LanguageTag = v29;
                    }
LABEL_836:
                    if (FirstLangSysTagForISO3LanguageTag)
                    {
                      if (FirstLangSysTagForISO3LanguageTag != 1297042976)
                      {
LABEL_852:
                        v78 = &v89;
                        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v78);
LABEL_11:
                        v11 = (char *)__p;
                        Value = v17;
                        if (__p)
                        {
LABEL_12:
                          v80 = v11;
                          if (v82 > (_OWORD *)v11 || &v84 <= (char **)v11)
                            operator delete(v11);
                        }
LABEL_15:
                        __p = &v85;
                        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
LABEL_16:
                        LODWORD(qword_1ECDE79D0) = Value;
                        HIDWORD(qword_1ECDE79D0) = FirstLangSysTagForISO3LanguageTag;
                        goto LABEL_17;
                      }
                      FirstLangSysTagForISO3LanguageTag = 1297042976;
                      ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
                      v75 = (__CFString *)CFDictionaryGetValue(ComponentsFromLocaleIdentifier, (const void *)*MEMORY[0x1E0C9B060]);
                      if (v75 == CFSTR("TH") || v75 && CFEqual(v75, CFSTR("TH")))
                        FirstLangSysTagForISO3LanguageTag = 1297043028;
LABEL_851:

                      goto LABEL_852;
                    }
LABEL_842:
                    FirstLangSysTagForISO3LanguageTag = 1230000193;
                    ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
                    v76 = (__CFString *)CFDictionaryGetValue(ComponentsFromLocaleIdentifier, (const void *)*MEMORY[0x1E0C9B0A8]);
                    if (v76 != CFSTR("fonipa"))
                    {
                      v77 = v76;
                      if (!v76)
                      {
LABEL_849:
                        FirstLangSysTagForISO3LanguageTag = 0;
                        goto LABEL_851;
                      }
                      if (CFStringCompare(v76, CFSTR("fonipa"), 1uLL))
                      {
                        if (v77 == CFSTR("fonnapa")
                          || CFStringCompare(v77, CFSTR("fonnapa"), 1uLL) == kCFCompareEqualTo)
                        {
                          goto LABEL_851;
                        }
                        if (v77 == CFSTR("fonupa") || CFStringCompare(v77, CFSTR("fonupa"), 1uLL) == kCFCompareEqualTo)
                        {
                          FirstLangSysTagForISO3LanguageTag = 1431326792;
                          goto LABEL_851;
                        }
                        goto LABEL_849;
                      }
                    }
                    FirstLangSysTagForISO3LanguageTag = 1230000200;
                    goto LABEL_851;
                  }
                  if (v24 > 1752005151)
                  {
                    if (v24 > 1752066591)
                    {
                      if (v24 == 1752066592)
                        goto LABEL_748;
                      v55 = 28448;
                    }
                    else
                    {
                      if (v24 == 1752005152)
                        goto LABEL_748;
                      v55 = 25632;
                    }
                    v44 = v55 | 0x686E0000;
                    goto LABEL_700;
                  }
                  if (v24 == 1752003360 || v24 == 1752004384)
                    goto LABEL_748;
                  v45 = 31008;
LABEL_746:
                  v26 = v45 | 0x686D0000;
LABEL_747:
                  if (v24 == v26)
                    goto LABEL_748;
LABEL_830:
                  FirstLangSysTagForISO3LanguageTag = TagByUppercasing(v24);
                  goto LABEL_831;
                }
                if (v24 > 1752000543)
                {
                  if (v24 <= 1752001567)
                  {
                    if (v24 == 1752000544 || v24 == 1752000800)
                      goto LABEL_748;
                    v45 = 27168;
                  }
                  else if (v24 > 1752002591)
                  {
                    if (v24 == 1752002592)
                      goto LABEL_748;
                    v45 = 28960;
                  }
                  else
                  {
                    if (v24 == 1752001568)
                      goto LABEL_748;
                    v45 = 27936;
                  }
                  goto LABEL_746;
                }
                if (v24 > 1751999263)
                {
                  if (v24 > 1751999775)
                  {
                    if (v24 == 1751999776)
                      goto LABEL_748;
                    v45 = 26400;
                  }
                  else
                  {
                    if (v24 == 1751999264)
                      goto LABEL_748;
                    v45 = 25632;
                  }
                  goto LABEL_746;
                }
                if (v24 == 1751474464)
                  goto LABEL_748;
                if (v24 != 1751804192)
                {
                  v45 = 24864;
                  goto LABEL_746;
                }
LABEL_823:
                v25 = 1836278048;
                goto LABEL_829;
              }
              if (v24 <= 1735292703)
              {
                if (v24 <= 1734631711)
                {
                  if (v24 > 1734441503)
                  {
                    if (v24 <= 1734504479)
                    {
                      if (v24 != 1734441504)
                      {
                        v38 = 1734504224;
                        goto LABEL_477;
                      }
LABEL_582:
                      v25 = 1869770016;
                      goto LABEL_829;
                    }
                    if (v24 != 1734504480)
                    {
                      v73 = 1734504736;
LABEL_630:
                      if (v24 != v73)
                        goto LABEL_830;
                    }
LABEL_740:
                    v25 = 1734500640;
                    goto LABEL_829;
                  }
                  if (v24 != 1718973984)
                  {
                    if (v24 != 1734438432)
                    {
                      if (v24 != 1734440992)
                        goto LABEL_830;
                      goto LABEL_582;
                    }
LABEL_786:
                    v25 = 2053664544;
                    goto LABEL_829;
                  }
LABEL_815:
                  v25 = 1718971424;
                  goto LABEL_829;
                }
                if (v24 > 1735030047)
                {
                  if (v24 <= 1735224607)
                  {
                    if (v24 == 1735030048)
                      goto LABEL_681;
                    if (v24 != 1735094304)
                      goto LABEL_830;
                    goto LABEL_854;
                  }
                  if (v24 == 1735224608)
                    goto LABEL_740;
                  v70 = 1735290656;
                  goto LABEL_724;
                }
                if (v24 == 1734631712)
                  goto LABEL_681;
                if (v24 != 1734697760)
                {
                  v70 = 1734831904;
LABEL_724:
                  if (v24 != v70)
                    goto LABEL_830;
                  goto LABEL_725;
                }
LABEL_530:
                v25 = 1735549472;
                goto LABEL_829;
              }
              if (v24 > 1735747871)
              {
                if (v24 > 1751213343)
                {
                  if (v24 > 1751218207)
                  {
                    if (v24 != 1751218208 && v24 != 1751412256)
                      goto LABEL_830;
                    v25 = 1751214368;
                    goto LABEL_829;
                  }
                  if (v24 != 1751213344)
                  {
                    v62 = 1751214880;
                    goto LABEL_785;
                  }
                  goto LABEL_582;
                }
                if (v24 != 1735747872 && v24 != 1735749152)
                {
                  v73 = 1736007968;
                  goto LABEL_630;
                }
                goto LABEL_678;
              }
              if (v24 > 1735554591)
              {
                if (v24 <= 1735618335)
                {
                  if (v24 == 1735554592)
                    goto LABEL_530;
                  v51 = 31008;
LABEL_476:
                  v38 = v51 | 0x67720000;
LABEL_477:
                  if (v24 != v38)
                    goto LABEL_830;
                  goto LABEL_530;
                }
                if (v24 == 1735618336)
                  goto LABEL_740;
                if (v24 != 1735747360)
                  goto LABEL_830;
LABEL_678:
                v25 = 1735552544;
                goto LABEL_829;
              }
              if (v24 == 1735292704)
                goto LABEL_678;
              if (v24 != 1735355680)
              {
                v51 = 27168;
                goto LABEL_476;
              }
LABEL_857:
              v25 = 1802464032;
              goto LABEL_829;
            }
            if (v24 > 1819437343)
            {
              if (v24 > 1835561503)
              {
                if (v24 > 1835954207)
                {
                  if (v24 <= 1836279839)
                  {
                    if (v24 <= 1836214815)
                    {
                      if (v24 == 1835954208)
                        goto LABEL_786;
                      v34 = 1836148512;
LABEL_822:
                      if (v24 != v34)
                        goto LABEL_830;
                      goto LABEL_823;
                    }
                    if (v24 != 1836214816)
                    {
                      v37 = 1836278560;
                      goto LABEL_754;
                    }
LABEL_860:
                    v25 = 1667788064;
                    goto LABEL_829;
                  }
                  if (v24 <= 1836347935)
                  {
                    if (v24 != 1836279840)
                    {
                      v34 = 1836280096;
                      goto LABEL_822;
                    }
LABEL_782:
                    v25 = 1835820832;
                    goto LABEL_829;
                  }
                  if (v24 != 1836347936)
                  {
                    v34 = 1836411168;
                    goto LABEL_822;
                  }
LABEL_824:
                  v25 = 1836544544;
                  goto LABEL_829;
                }
                if (v24 <= 1835823391)
                {
                  if (v24 != 1835561504)
                  {
                    if (v24 == 1835626016)
                      goto LABEL_823;
                    v37 = 1835758880;
                    goto LABEL_754;
                  }
                  goto LABEL_860;
                }
                if (v24 <= 1835889183)
                {
                  if (v24 != 1835823392)
                  {
                    v34 = 1835825440;
                    goto LABEL_822;
                  }
LABEL_755:
                  v25 = 1835101728;
                  goto LABEL_829;
                }
                if (v24 == 1835889184)
                  goto LABEL_748;
                v37 = 1835952928;
LABEL_754:
                if (v24 != v37)
                  goto LABEL_830;
                goto LABEL_755;
              }
              if (v24 > 1819764511)
              {
                if (v24 > 1835298591)
                {
                  if (v24 > 1835426079)
                  {
                    if (v24 == 1835426080)
                      goto LABEL_823;
                    v34 = 1835426336;
                  }
                  else
                  {
                    if (v24 == 1835298592)
                      goto LABEL_740;
                    v34 = 1835364128;
                  }
                  goto LABEL_822;
                }
                if (v24 != 1819764512)
                {
                  if (v24 == 1819961376)
                    goto LABEL_786;
                  v34 = 1835104288;
                  goto LABEL_822;
                }
                goto LABEL_794;
              }
              if (v24 > 1819567903)
              {
                if (v24 <= 1819570975)
                {
                  if (v24 != 1819567904)
                  {
                    v47 = 1819569952;
                    goto LABEL_793;
                  }
LABEL_666:
                  v25 = 1818326560;
                  goto LABEL_829;
                }
                if (v24 != 1819570976)
                {
                  if (v24 != 1819702048)
                    goto LABEL_830;
                  goto LABEL_666;
                }
LABEL_794:
                v25 = 1819638048;
                goto LABEL_829;
              }
              if (v24 == 1819437344 || v24 == 1819438368)
                goto LABEL_794;
              v47 = 1819503904;
LABEL_793:
              if (v24 != v47)
                goto LABEL_830;
              goto LABEL_794;
            }
            if (v24 <= 1802662943)
            {
              if (v24 <= 1802073375)
              {
                if (v24 > 1784772639)
                {
                  if (v24 <= 1801615647)
                  {
                    if (v24 == 1784772640)
                      goto LABEL_823;
                    v41 = 1786340640;
                    goto LABEL_654;
                  }
                  if (v24 != 1801615648)
                  {
                    if (v24 != 1802005280)
                      goto LABEL_830;
                    goto LABEL_640;
                  }
LABEL_641:
                  v25 = 1801549088;
                  goto LABEL_829;
                }
                if (v24 == 1768842272 || v24 == 1784769312)
                  goto LABEL_823;
                v44 = 1784771616;
LABEL_700:
                if (v24 != v44)
                  goto LABEL_830;
LABEL_701:
                v25 = 1818322976;
                goto LABEL_829;
              }
              if (v24 > 1802397471)
              {
                if (v24 > 1802463519)
                {
                  if (v24 != 1802463520 && v24 != 1802532384)
                    goto LABEL_830;
                  v25 = 1802464544;
                  goto LABEL_829;
                }
                if (v24 != 1802397472)
                {
                  if (v24 != 1802399264)
                    goto LABEL_830;
                  goto LABEL_857;
                }
                goto LABEL_598;
              }
              if (v24 != 1802073376)
              {
                if (v24 != 1802334752)
                {
                  if (v24 != 1802396448)
                    goto LABEL_830;
                  goto LABEL_641;
                }
LABEL_761:
                v25 = 1802859040;
                goto LABEL_829;
              }
LABEL_658:
              v25 = 2054840608;
              goto LABEL_829;
            }
            if (v24 > 1818453279)
            {
              if (v24 > 1818851103)
              {
                if (v24 > 1818980127)
                {
                  if (v24 == 1818980128)
                    goto LABEL_794;
                  v63 = 29472;
                }
                else
                {
                  if (v24 == 1818851104)
                    goto LABEL_823;
                  v63 = 25120;
                }
                v47 = v63 | 0x6C6B0000;
                goto LABEL_793;
              }
              if (v24 == 1818453280 || v24 == 1818453536)
                goto LABEL_823;
              if (v24 != 1818519840)
                goto LABEL_830;
LABEL_598:
              v25 = 1802464800;
              goto LABEL_829;
            }
            if (v24 <= 1802991903)
            {
              if (v24 != 1802662944)
              {
                if (v24 == 1802920480)
                  goto LABEL_823;
                v34 = 1802924576;
                goto LABEL_822;
              }
              goto LABEL_641;
            }
            if (v24 <= 1818389279)
            {
              if (v24 != 1802991904)
              {
                v34 = 1803052064;
                goto LABEL_822;
              }
              goto LABEL_598;
            }
            if (v24 != 1818389280)
            {
              v57 = 1818389536;
              goto LABEL_706;
            }
LABEL_690:
            v25 = 1651401504;
            goto LABEL_829;
          }
          if (v24 > 1652058911)
          {
            if (v24 > 1668968223)
            {
              if (v24 > 1701732895)
              {
                if (v24 > 1717988639)
                {
                  if (v24 > 1718969887)
                  {
                    if (v24 > 1718970655)
                    {
                      if (v24 == 1718970656)
                        goto LABEL_815;
                      v32 = 28960;
                    }
                    else
                    {
                      if (v24 == 1718969888)
                        goto LABEL_815;
                      v32 = 26656;
                    }
                  }
                  else if (v24 > 1718969119)
                  {
                    if (v24 == 1718969120)
                      goto LABEL_815;
                    v32 = 25888;
                  }
                  else
                  {
                    if (v24 == 1717988640)
                      goto LABEL_815;
                    v32 = 25120;
                  }
                  if (v24 != (v32 | 0x66750000))
                    goto LABEL_830;
                  goto LABEL_815;
                }
                if (v24 <= 1702062879)
                {
                  if (v24 == 1701732896)
                    goto LABEL_711;
                  if (v24 == 1702061856)
                    goto LABEL_725;
                  if (v24 != 1702062368)
                    goto LABEL_830;
                }
                else
                {
                  if (v24 > 1717662751)
                  {
                    v25 = 1634427168;
                    if (v24 == 1717662752)
                      goto LABEL_829;
                    v57 = 1717726240;
LABEL_706:
                    if (v24 != v57)
                      goto LABEL_830;
LABEL_707:
                    v25 = 1651075872;
                    goto LABEL_829;
                  }
                  if (v24 != 1702062880)
                  {
                    v56 = 1702457120;
                    goto LABEL_710;
                  }
                }
                v25 = 1768975136;
                goto LABEL_829;
              }
              if (v24 <= 1684633375)
              {
                if (v24 > 1684627999)
                {
                  if (v24 > 1684631583)
                  {
                    if (v24 != 1684631584)
                    {
                      if (v24 != 1684631840)
                        goto LABEL_830;
                      goto LABEL_658;
                    }
                  }
                  else if (v24 != 1684628000 && v24 != 1684630304)
                  {
                    goto LABEL_830;
                  }
LABEL_659:
                  v25 = 1684631072;
                  goto LABEL_829;
                }
                if (v24 == 1668968224)
                  goto LABEL_786;
                if (v24 != 1684500256)
                {
                  v66 = 1684562976;
                  goto LABEL_567;
                }
LABEL_855:
                v25 = 1685023008;
                goto LABEL_829;
              }
              if (v24 > 1685418015)
              {
                if (v24 <= 1701538591)
                {
                  if (v24 == 1685418016)
                    goto LABEL_823;
                  v59 = 1700948768;
                  goto LABEL_482;
                }
                if (v24 != 1701538592)
                {
                  v37 = 1701669664;
                  goto LABEL_754;
                }
                goto LABEL_865;
              }
              if (v24 == 1684633376 || v24 == 1684763424)
                goto LABEL_659;
              v72 = 1685354784;
LABEL_720:
              if (v24 == v72)
              {
                v25 = 1852141600;
                goto LABEL_829;
              }
              goto LABEL_830;
            }
            if (v24 <= 1668182559)
            {
              if (v24 <= 1667526431)
              {
                if (v24 <= 1652061471)
                {
                  if (v24 == 1652058912)
                    goto LABEL_794;
                  if (v24 != 1652059424 && v24 != 1652060704)
                    goto LABEL_830;
                  goto LABEL_431;
                }
                if (v24 <= 1667463199)
                {
                  if (v24 != 1652061472)
                  {
                    v39 = 1652187936;
                    goto LABEL_781;
                  }
LABEL_431:
                  v25 = 1651859744;
                  goto LABEL_829;
                }
                if (v24 != 1667463200)
                {
                  v64 = 1667463456;
                  goto LABEL_827;
                }
LABEL_828:
                v25 = 2053660960;
                goto LABEL_829;
              }
              if (v24 > 1667981855)
              {
                if (v24 <= 1668115999)
                {
                  if (v24 == 1667981856)
                    goto LABEL_761;
                  if (v24 != 1668047904)
                    goto LABEL_830;
LABEL_856:
                  v25 = 1937338912;
                  goto LABEL_829;
                }
                if (v24 == 1668116000)
                  goto LABEL_786;
                v62 = 1668182048;
LABEL_785:
                if (v24 != v62)
                  goto LABEL_830;
                goto LABEL_786;
              }
              if (v24 == 1667526432)
                goto LABEL_786;
              if (v24 != 1667856160)
              {
                v62 = 1667922208;
                goto LABEL_785;
              }
LABEL_775:
              v25 = 1869244704;
              goto LABEL_829;
            }
            if (v24 > 1668443167)
            {
              if (v24 <= 1668511519)
              {
                if (v24 != 1668443168 && v24 != 1668443424)
                {
                  v62 = 1668509728;
                  goto LABEL_785;
                }
              }
              else if (v24 > 1668768799)
              {
                if (v24 != 1668768800)
                {
                  v62 = 1668966432;
                  goto LABEL_785;
                }
              }
              else if (v24 != 1668511520)
              {
                v57 = 1668576032;
                goto LABEL_706;
              }
            }
            else
            {
              if (v24 <= 1668375583)
              {
                if (v24 == 1668182560)
                  goto LABEL_617;
                if (v24 != 1668243744)
                {
                  v62 = 1668315168;
                  goto LABEL_785;
                }
                goto LABEL_823;
              }
              if (v24 <= 1668442655)
              {
                if (v24 == 1668375584)
                  goto LABEL_748;
                v52 = 1668379936;
                goto LABEL_805;
              }
              if (v24 != 1668442656 && v24 != 1668442912)
                goto LABEL_830;
            }
            v25 = 1668441376;
            goto LABEL_829;
          }
          if (v24 <= 1635150879)
          {
            if (v24 <= 1634298143)
            {
              if (v24 > 1633908511)
              {
                if (v24 > 1633969695)
                {
                  if (v24 > 1634034463)
                  {
                    if (v24 == 1634034464)
                      goto LABEL_829;
                    v36 = 1634099744;
                  }
                  else
                  {
                    if (v24 == 1633969696)
                      goto LABEL_829;
                    v36 = 1634034208;
                  }
                  goto LABEL_769;
                }
                if (v24 == 1633908512 || v24 == 1633908768)
                  goto LABEL_829;
                v69 = 31008;
LABEL_625:
                v36 = v69 | 0x61630000;
                goto LABEL_769;
              }
              if (v24 > 1633839135)
              {
                if (v24 <= 1633905951)
                {
                  if (v24 == 1633839136)
                    goto LABEL_829;
                  v36 = 1633842720;
                  goto LABEL_769;
                }
                if (v24 == 1633905952)
                  goto LABEL_829;
                v69 = 28960;
                goto LABEL_625;
              }
              if (v24 != 1633772832)
              {
                if (v24 == 1633775392)
                  goto LABEL_829;
                v49 = 1633776672;
LABEL_416:
                if (v24 != v49)
                  goto LABEL_830;
                goto LABEL_671;
              }
              goto LABEL_671;
            }
            if (v24 > 1634755615)
            {
              if (v24 <= 1634890527)
              {
                if (v24 == 1634755616 || v24 == 1634886176)
                  goto LABEL_829;
                v61 = 28960;
              }
              else
              {
                if (v24 > 1634892319)
                {
                  if (v24 == 1634892320)
                    goto LABEL_829;
                  v36 = 1635088928;
                  goto LABEL_769;
                }
                if (v24 == 1634890528)
                  goto LABEL_829;
                v61 = 31008;
              }
              v36 = v61 | 0x61720000;
              goto LABEL_769;
            }
            if (v24 > 1634366751)
            {
              if (v24 <= 1634497311)
              {
                if (v24 == 1634366752)
                  goto LABEL_655;
                v49 = 1634496032;
                goto LABEL_416;
              }
              if (v24 == 1634497312)
              {
LABEL_671:
                v25 = 1936812320;
                goto LABEL_829;
              }
              v36 = 1634755360;
LABEL_769:
              if (v24 != v36)
                goto LABEL_830;
              goto LABEL_829;
            }
            if (v24 == 1634298144)
              goto LABEL_856;
            if (v24 == 1634365472)
              goto LABEL_829;
            v41 = 1634366496;
LABEL_654:
            if (v24 != v41)
              goto LABEL_830;
LABEL_655:
            v25 = 1785881120;
            goto LABEL_829;
          }
          if (v24 > 1650946079)
          {
            if (v24 > 1651275039)
            {
              if (v24 <= 1651796511)
              {
                if (v24 == 1651275040)
                  goto LABEL_748;
                if (v24 != 1651338528)
                {
                  if (v24 != 1651471136)
                    goto LABEL_830;
                  goto LABEL_617;
                }
                goto LABEL_782;
              }
              if (v24 > 1651926303)
              {
                if (v24 == 1651926304)
                  goto LABEL_823;
                v34 = 1651930400;
                goto LABEL_822;
              }
              if (v24 == 1651796512)
                goto LABEL_823;
              v57 = 1651797792;
              goto LABEL_706;
            }
            if (v24 > 1651012127)
            {
              if (v24 <= 1651142943)
              {
                if (v24 != 1651012128)
                {
                  v34 = 1651142176;
                  goto LABEL_822;
                }
                goto LABEL_782;
              }
              if (v24 == 1651142944)
                goto LABEL_782;
              v57 = 1651273248;
              goto LABEL_706;
            }
            if (v24 != 1650946080)
            {
              if (v24 == 1650946336)
                goto LABEL_681;
              v57 = 1651010336;
              goto LABEL_706;
            }
          }
          else
          {
            if (v24 <= 1635410463)
            {
              if (v24 <= 1635347487)
              {
                if (v24 == 1635150880)
                  goto LABEL_829;
                if (v24 != 1635345184)
                {
                  v43 = 26656;
LABEL_444:
                  v36 = v43 | 0x61790000;
                  goto LABEL_769;
                }
              }
              else
              {
                if (v24 <= 1635348511)
                {
                  if (v24 == 1635347488)
                    goto LABEL_829;
                  v43 = 28192;
                  goto LABEL_444;
                }
                if (v24 == 1635348512)
                  goto LABEL_829;
                if (v24 != 1635349024)
                  goto LABEL_830;
              }
              v25 = 1635347744;
              goto LABEL_829;
            }
            if (v24 <= 1650680607)
            {
              if (v24 == 1635410464 || v24 == 1635412512)
              {
                v25 = 1635411232;
                goto LABEL_829;
              }
              v36 = 1650620960;
              goto LABEL_769;
            }
            if (v24 > 1650750495)
            {
              if (v24 == 1650750496)
                goto LABEL_740;
              if (v24 != 1650945568)
                goto LABEL_830;
            }
            else if (v24 != 1650680608)
            {
              v57 = 1650682912;
              goto LABEL_706;
            }
          }
          v25 = 1650551840;
          goto LABEL_829;
        }
        if (v24 > 1952741407)
        {
          if (v24 <= 2053598495)
          {
            if (v24 > 2020504095)
            {
              if (v24 > 2053204255)
              {
                if (v24 <= 2053207583)
                {
                  if (v24 <= 2053206303)
                  {
                    if (v24 != 2053204256 && v24 != 2053205280)
                    {
                      v31 = 28448;
                      goto LABEL_751;
                    }
                  }
                  else if (v24 > 2053206815)
                  {
                    if (v24 != 2053206816)
                    {
                      v31 = 29728;
                      goto LABEL_751;
                    }
                  }
                  else if (v24 != 2053206304)
                  {
                    v31 = 29216;
                    goto LABEL_751;
                  }
LABEL_799:
                  v25 = 2053206048;
                  goto LABEL_829;
                }
                if (v24 <= 2053334047)
                {
                  if (v24 > 2053208095)
                  {
                    if (v24 != 2053208096)
                    {
                      v71 = 2053333280;
                      goto LABEL_798;
                    }
                  }
                  else if (v24 != 2053207584)
                  {
                    v31 = 30496;
LABEL_751:
                    v71 = v31 | 0x7A610000;
                    goto LABEL_798;
                  }
                  goto LABEL_799;
                }
                if (v24 <= 2053466143)
                {
                  if (v24 != 2053334048)
                  {
                    v64 = 2053335072;
                    goto LABEL_827;
                  }
                  goto LABEL_799;
                }
                if (v24 == 2053466144)
                  goto LABEL_828;
                v64 = 2053595680;
LABEL_827:
                if (v24 != v64)
                  goto LABEL_830;
                goto LABEL_828;
              }
              if (v24 > 2037736735)
              {
                if (v24 <= 2053202719)
                {
                  if (v24 == 2037736736)
                    goto LABEL_786;
                  if (v24 != 2053202208)
                  {
                    v31 = 25120;
                    goto LABEL_751;
                  }
                }
                else if (v24 > 2053203231)
                {
                  if (v24 != 2053203232)
                  {
                    v31 = 26144;
                    goto LABEL_751;
                  }
                }
                else if (v24 != 2053202720)
                {
                  v31 = 25632;
                  goto LABEL_751;
                }
                goto LABEL_799;
              }
              if (v24 > 2036622367)
              {
                if (v24 > 2036951071)
                {
                  if (v24 != 2036951072)
                  {
                    v41 = 2037736480;
                    goto LABEL_654;
                  }
                }
                else if (v24 != 2036622368)
                {
                  v41 = 2036884512;
                  goto LABEL_654;
                }
                v25 = 2036950048;
                goto LABEL_829;
              }
              if (v24 == 2020504096)
                goto LABEL_855;
              if (v24 == 2020631840)
              {
LABEL_854:
                v25 = 1802528032;
                goto LABEL_829;
              }
              if (v24 != 2020830240)
                goto LABEL_830;
LABEL_454:
              v25 = 1684368928;
              goto LABEL_829;
            }
            if (v24 > 1970957855)
            {
              if (v24 <= 2003990815)
              {
                if (v24 <= 1986751263)
                {
                  if (v24 == 1970957856 || v24 == 1970959136)
                  {
                    v25 = 1970954784;
                    goto LABEL_829;
                  }
                  v59 = 1986161440;
LABEL_482:
                  if (v24 != v59)
                    goto LABEL_830;
                  goto LABEL_690;
                }
                if (v24 <= 1987211039)
                {
                  if (v24 == 1986751264)
                    goto LABEL_823;
                  v34 = 1986753568;
                  goto LABEL_822;
                }
                if (v24 != 1987211040)
                {
                  if (v24 != 2002940448)
                    goto LABEL_830;
                  goto LABEL_681;
                }
LABEL_865:
                v25 = 1702065184;
                goto LABEL_829;
              }
              if (v24 <= 2020107551)
              {
                if (v24 != 2003990816)
                {
                  if (v24 != 2004051744)
                  {
                    v62 = 2004186400;
                    goto LABEL_785;
                  }
LABEL_725:
                  v25 = 1735355936;
                  goto LABEL_829;
                }
                goto LABEL_824;
              }
              if (v24 <= 2020439583)
              {
                if (v24 == 2020107552)
                  goto LABEL_701;
                v34 = 2020437280;
                goto LABEL_822;
              }
              if (v24 == 2020439584)
                goto LABEL_782;
              v39 = 2020439840;
            }
            else
            {
              if (v24 <= 1953855775)
              {
                if (v24 > 1953004063)
                {
                  if (v24 <= 1953330975)
                  {
                    if (v24 != 1953004064)
                    {
                      v39 = 1953195808;
                      goto LABEL_781;
                    }
LABEL_819:
                    v25 = 1953327136;
                    goto LABEL_829;
                  }
                  if (v24 == 1953330976)
                    goto LABEL_823;
                  v67 = 1953788192;
LABEL_818:
                  if (v24 != v67)
                    goto LABEL_830;
                  goto LABEL_819;
                }
                if (v24 == 1952741408)
                  goto LABEL_782;
                if (v24 != 1952801568)
                {
                  v67 = 1953003040;
                  goto LABEL_818;
                }
LABEL_711:
                v25 = 1802268192;
                goto LABEL_829;
              }
              if (v24 > 1969384479)
              {
                if (v24 > 1970171167)
                {
                  if (v24 != 1970171168)
                  {
                    v34 = 1970432800;
                    goto LABEL_822;
                  }
                }
                else
                {
                  if (v24 == 1969384480)
                    goto LABEL_707;
                  if (v24 != 1970107680)
                    goto LABEL_830;
                }
                v25 = 1684368416;
                goto LABEL_829;
              }
              if (v24 == 1953855776)
                goto LABEL_711;
              v25 = 1634427168;
              if (v24 == 1953982752)
                goto LABEL_829;
              v39 = 1954052384;
            }
LABEL_781:
            if (v24 != v39)
              goto LABEL_830;
            goto LABEL_782;
          }
          if (v24 <= 2054189855)
          {
            if (v24 > 2054186271)
            {
              if (v24 > 2054188063)
              {
                if (v24 <= 2054188831)
                {
                  if (v24 == 2054188064 || v24 == 2054188320)
                    goto LABEL_799;
                  v48 = 28192;
                }
                else if (v24 > 2054189343)
                {
                  if (v24 == 2054189344)
                    goto LABEL_799;
                  v48 = 29216;
                }
                else
                {
                  if (v24 == 2054188832)
                    goto LABEL_799;
                  v48 = 28704;
                }
              }
              else if (v24 <= 2054187039)
              {
                if (v24 == 2054186272 || v24 == 2054186528)
                  goto LABEL_799;
                v48 = 26400;
              }
              else if (v24 > 2054187551)
              {
                if (v24 == 2054187552)
                  goto LABEL_799;
                v48 = 27424;
              }
              else
              {
                if (v24 == 2054187040)
                  goto LABEL_799;
                v48 = 26912;
              }
            }
            else
            {
              if (v24 <= 2053927199)
              {
                if (v24 <= 2053664287)
                {
                  if (v24 != 2053598496 && v24 != 2053598752)
                  {
                    v64 = 2053661728;
                    goto LABEL_827;
                  }
                  goto LABEL_828;
                }
                if (v24 > 2053926175)
                {
                  if (v24 == 2053926176)
                    goto LABEL_823;
                  v42 = 28192;
                }
                else
                {
                  if (v24 == 2053664288)
                    goto LABEL_828;
                  v42 = 27168;
                }
                v64 = v42 | 0x7A6C0000;
                goto LABEL_827;
              }
              if (v24 <= 2054185247)
              {
                if (v24 == 2053927200)
                  goto LABEL_828;
                if (v24 == 2053990688)
                  goto LABEL_823;
                v71 = 2054123296;
                goto LABEL_798;
              }
              if (v24 > 2054185759)
              {
                if (v24 == 2054185760)
                  goto LABEL_799;
                v48 = 25632;
              }
              else
              {
                if (v24 == 2054185248)
                  goto LABEL_799;
                v48 = 25120;
              }
            }
          }
          else
          {
            if (v24 > 2054450207)
            {
              if (v24 > 2054452511)
              {
                if (v24 > 2054776607)
                {
                  if (v24 > 2054778399)
                  {
                    if (v24 == 2054778400)
                      goto LABEL_828;
                    v64 = 2054842912;
                    goto LABEL_827;
                  }
                  if (v24 == 2054776608)
                    goto LABEL_828;
                  v65 = 27168;
                }
                else
                {
                  if (v24 <= 2054453535)
                  {
                    if (v24 == 2054452512)
                      goto LABEL_799;
                    v35 = 30752;
                    goto LABEL_766;
                  }
                  if (v24 == 2054453536)
                    goto LABEL_799;
                  v65 = 25120;
                }
                v64 = v65 | 0x7A790000;
                goto LABEL_827;
              }
              if (v24 <= 2054451231)
              {
                if (v24 == 2054450208 || v24 == 2054450464)
                  goto LABEL_799;
                v35 = 28192;
              }
              else if (v24 > 2054451999)
              {
                if (v24 == 2054452000)
                  goto LABEL_799;
                v35 = 29728;
              }
              else
              {
                if (v24 == 2054451232)
                  goto LABEL_799;
                v35 = 28960;
              }
LABEL_766:
              v71 = v35 | 0x7A740000;
              goto LABEL_798;
            }
            if (v24 > 2054191647)
            {
              if (v24 <= 2054386207)
              {
                if (v24 != 2054191648)
                {
                  if (v24 != 2054251808)
                  {
                    v34 = 2054384928;
                    goto LABEL_822;
                  }
                  goto LABEL_828;
                }
                goto LABEL_799;
              }
              if (v24 > 2054448415)
              {
                if (v24 == 2054448416)
                  goto LABEL_799;
                v35 = 26400;
              }
              else
              {
                if (v24 == 2054386208)
                  goto LABEL_799;
                v35 = 25376;
              }
              goto LABEL_766;
            }
            if (v24 <= 2054190623)
            {
              if (v24 == 2054189856 || v24 == 2054190112)
                goto LABEL_799;
              v48 = 29984;
            }
            else if (v24 > 2054191135)
            {
              if (v24 == 2054191136)
                goto LABEL_799;
              v48 = 31008;
            }
            else
            {
              if (v24 == 2054190624)
                goto LABEL_799;
              v48 = 30496;
            }
          }
          v71 = v48 | 0x7A700000;
LABEL_798:
          if (v24 != v71)
            goto LABEL_830;
          goto LABEL_799;
        }
        if (v24 > 1903584543)
        {
          if (v24 > 1919052575)
          {
            if (v24 > 1936092447)
            {
              if (v24 > 1936876319)
              {
                if (v24 > 1937203999)
                {
                  if (v24 <= 1937208863)
                  {
                    if (v24 != 1937204000 && v24 != 1937205280)
                      goto LABEL_830;
                    v25 = 1937203488;
                    goto LABEL_829;
                  }
                  if (v24 == 1937208864)
                    goto LABEL_824;
                  v67 = 1952543008;
                  goto LABEL_818;
                }
                if (v24 > 1936879647)
                {
                  if (v24 == 1936879648)
                    goto LABEL_617;
                  v36 = 1936943136;
                  goto LABEL_769;
                }
                if (v24 == 1936876320)
                {
LABEL_760:
                  v25 = 1936876576;
                  goto LABEL_829;
                }
                v33 = 1936879392;
LABEL_759:
                if (v24 != v33)
                  goto LABEL_830;
                goto LABEL_760;
              }
              if (v24 <= 1936418591)
              {
                if (v24 == 1936092448)
                  goto LABEL_748;
                if (v24 != 1936155424)
                {
                  v36 = 1936225568;
                  goto LABEL_769;
                }
                goto LABEL_711;
              }
              if (v24 <= 1936750111)
              {
                if (v24 == 1936418592)
                  goto LABEL_782;
                v44 = 1936421408;
                goto LABEL_700;
              }
              if (v24 != 1936750112)
              {
                v56 = 1936750880;
LABEL_710:
                if (v24 != v56)
                  goto LABEL_830;
                goto LABEL_711;
              }
LABEL_862:
              v25 = 1869768992;
              goto LABEL_829;
            }
            if (v24 <= 1919776543)
            {
              if (v24 <= 1919772191)
              {
                if (v24 == 1919052576)
                  goto LABEL_690;
                if (v24 == 1919052832)
                  goto LABEL_707;
                v46 = 25376;
              }
              else if (v24 > 1919774239)
              {
                if (v24 == 1919774240)
                  goto LABEL_663;
                v46 = 28448;
              }
              else
              {
                if (v24 == 1919772192)
                  goto LABEL_663;
                v46 = 27680;
              }
              if (v24 != (v46 | 0x726D0000))
                goto LABEL_830;
LABEL_663:
              v25 = 1919905056;
              goto LABEL_829;
            }
            if (v24 > 1935897375)
            {
              if (v24 > 1935960095)
              {
                if (v24 == 1935960096)
                  goto LABEL_761;
                v60 = 28192;
              }
              else
              {
                if (v24 == 1935897376)
                  goto LABEL_454;
                v60 = 25376;
              }
              v33 = v60 | 0x73640000;
              goto LABEL_759;
            }
            if (v24 == 1919776544 || v24 == 1919777056)
              goto LABEL_663;
            v66 = 1920430624;
LABEL_567:
            if (v24 != v66)
              goto LABEL_830;
            goto LABEL_824;
          }
          if (v24 > 1903650847)
          {
            if (v24 > 1903718175)
            {
              if (v24 <= 1903719455)
              {
                if (v24 == 1903718176 || v24 == 1903718432)
                  goto LABEL_806;
                v53 = 29216;
              }
              else
              {
                if (v24 > 1903720223)
                {
                  if (v24 != 1903720224)
                  {
                    v47 = 1918986016;
                    goto LABEL_793;
                  }
                  goto LABEL_806;
                }
                if (v24 == 1903719456)
                  goto LABEL_806;
                v53 = 29984;
              }
            }
            else if (v24 <= 1903715103)
            {
              if (v24 == 1903650848 || v24 == 1903653664)
                goto LABEL_806;
              v53 = 24864;
            }
            else if (v24 > 1903717407)
            {
              if (v24 == 1903717408)
                goto LABEL_806;
              v53 = 28192;
            }
            else
            {
              if (v24 == 1903715104)
                goto LABEL_806;
              v53 = 26656;
            }
            v52 = v53 | 0x71780000;
            goto LABEL_805;
          }
          if (v24 > 1903587103)
          {
            if (v24 <= 1903589151)
            {
              if (v24 != 1903587104 && v24 != 1903587360)
              {
                v40 = 29472;
                goto LABEL_804;
              }
            }
            else if (v24 > 1903649055)
            {
              if (v24 != 1903649056)
              {
                v52 = 1903649568;
                goto LABEL_805;
              }
            }
            else if (v24 != 1903589152)
            {
              v40 = 31264;
              goto LABEL_804;
            }
          }
          else if (v24 <= 1903585823)
          {
            if (v24 != 1903584544 && v24 != 1903585312)
            {
              v40 = 26912;
              goto LABEL_804;
            }
          }
          else if (v24 > 1903586591)
          {
            if (v24 != 1903586592)
            {
              v40 = 28192;
              goto LABEL_804;
            }
          }
          else if (v24 != 1903585824)
          {
            v40 = 27680;
LABEL_804:
            v52 = v40 | 0x71760000;
LABEL_805:
            if (v24 != v52)
              goto LABEL_830;
          }
LABEL_806:
          v25 = 1903519008;
          goto LABEL_829;
        }
        if (v24 <= 1885500703)
        {
          if (v24 <= 1853449247)
          {
            if (v24 > 1851878943)
            {
              if (v24 <= 1852597535)
              {
                if (v24 == 1851878944)
                  goto LABEL_786;
                if (v24 == 1852335136)
                  goto LABEL_678;
                v56 = 1852404000;
                goto LABEL_710;
              }
              if (v24 > 1852793375)
              {
                if (v24 != 1852793376)
                {
                  v72 = 1852860704;
                  goto LABEL_720;
                }
              }
              else
              {
                if (v24 == 1852597536)
                  goto LABEL_794;
                if (v24 != 1852731168)
                  goto LABEL_830;
              }
              v25 = 1852797472;
              goto LABEL_829;
            }
            if (v24 > 1836475935)
            {
              if (v24 > 1836545823)
              {
                if (v24 == 1836545824)
                  goto LABEL_748;
                v37 = 1836675360;
                goto LABEL_754;
              }
              if (v24 != 1836475936)
              {
                v37 = 1836542752;
                goto LABEL_754;
              }
LABEL_640:
              v25 = 1836019232;
              goto LABEL_829;
            }
            if (v24 == 1836412960)
              goto LABEL_681;
            if (v24 == 1836413216)
              goto LABEL_748;
            v66 = 1836475680;
            goto LABEL_567;
          }
          if (v24 <= 1869310239)
          {
            if (v24 <= 1869243167)
            {
              if (v24 == 1853449248)
                goto LABEL_794;
              if (v24 == 1868720928)
                goto LABEL_690;
              v50 = 25120;
            }
            else if (v24 > 1869247263)
            {
              if (v24 == 1869247264)
                goto LABEL_775;
              v50 = 30496;
            }
            else
            {
              if (v24 == 1869243168)
                goto LABEL_775;
              v50 = 26400;
            }
            if (v24 != (v50 | 0x6F6A0000))
              goto LABEL_830;
            goto LABEL_775;
          }
          if (v24 <= 1869771551)
          {
            if (v24 != 1869310240)
            {
              if (v24 == 1869767456)
                goto LABEL_582;
              v34 = 1869770272;
              goto LABEL_822;
            }
            goto LABEL_711;
          }
          if (v24 <= 1869903647)
          {
            if (v24 == 1869771552)
              goto LABEL_823;
            if (v24 != 1869773088)
              goto LABEL_830;
            goto LABEL_862;
          }
          if (v24 == 1869903648)
            goto LABEL_775;
          v58 = 1885500448;
          goto LABEL_773;
        }
        if (v24 > 1903519263)
        {
          if (v24 > 1903522591)
          {
            if (v24 <= 1903524127)
            {
              if (v24 == 1903522592 || v24 == 1903523616)
                goto LABEL_806;
              v54 = 30752;
            }
            else
            {
              if (v24 > 1903583519)
              {
                if (v24 != 1903583520)
                {
                  v40 = 25376;
                  goto LABEL_804;
                }
                goto LABEL_806;
              }
              if (v24 == 1903524128)
                goto LABEL_806;
              v54 = 31264;
            }
          }
          else if (v24 <= 1903520543)
          {
            if (v24 == 1903519264 || v24 == 1903519520)
              goto LABEL_806;
            v54 = 26656;
          }
          else if (v24 > 1903521823)
          {
            if (v24 == 1903521824)
              goto LABEL_806;
            v54 = 29216;
          }
          else
          {
            if (v24 == 1903520544)
              goto LABEL_806;
            v54 = 27680;
          }
        }
        else
        {
          if (v24 <= 1886221599)
          {
            if (v24 > 1885823263)
            {
              if (v24 <= 1886088991)
              {
                if (v24 == 1885823264)
                  goto LABEL_829;
                v44 = 1885893152;
                goto LABEL_700;
              }
              if (v24 == 1886088992)
                goto LABEL_711;
              v39 = 1886155808;
              goto LABEL_781;
            }
            if (v24 == 1885500704)
            {
LABEL_774:
              v25 = 1886745376;
              goto LABEL_829;
            }
            if (v24 == 1885695008)
              goto LABEL_823;
            v68 = 1885696800;
LABEL_553:
            if (v24 == v68)
            {
              v25 = 1717662496;
              goto LABEL_829;
            }
            goto LABEL_830;
          }
          if (v24 <= 1886610719)
          {
            if (v24 == 1886221600 || v24 == 1886282272)
              goto LABEL_701;
            v68 = 1886548768;
            goto LABEL_553;
          }
          if (v24 <= 1903518239)
          {
            if (v24 == 1886610720)
              goto LABEL_823;
            v58 = 1886614560;
LABEL_773:
            if (v24 != v58)
              goto LABEL_830;
            goto LABEL_774;
          }
          if (v24 == 1903518240)
            goto LABEL_806;
          v54 = 25632;
        }
        v52 = v54 | 0x71750000;
        goto LABEL_805;
      }
      v16 = 0;
      Value = 1398362702;
    }
    v17 = 34;
    goto LABEL_40;
  }
LABEL_17:
  v13 = qword_1ECDE79D0;
  os_unfair_lock_unlock(&_MergedGlobals_24);
  return v13;
}

void MaximizedLocaleIdentifier(const __CFString *a1, const __CFString *a2)
{
  __int128 v4;
  const char *CStringPtr;
  __int128 v6;
  CFIndex Length;
  unint64_t v8;
  char *v9;
  int v10;
  UInt8 bytes[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  int64x2_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _OWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  v21 = 0;
  v20 = 0uLL;
  v23 = v22;
  CStringPtr = CFStringGetCStringPtr(a2, 0x600u);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!CStringPtr)
  {
    Length = CFStringGetLength(a2);
    v8 = CFStringGetMaximumSizeForEncoding(Length, 0x600u) + 1;
    v9 = (char *)v20.i64[0];
    if (v8 <= v20.i64[1] - v20.i64[0])
    {
      if (v8 < v20.i64[1] - v20.i64[0])
        v20.i64[1] = v20.i64[0] + v8;
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v20, v8 - (v20.i64[1] - v20.i64[0]));
      v9 = (char *)v20.i64[0];
    }
    CFStringGetCString(a2, v9, v8, 0x600u);
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  }
  *(_OWORD *)((char *)v19 + 13) = v6;
  v19[0] = v6;
  v17 = v6;
  v18 = v6;
  v15 = v6;
  v16 = v6;
  v13 = v6;
  v14 = v6;
  *(_OWORD *)bytes = v6;
  v12 = v6;
  v10 = uloc_addLikelySubtags();
  a1->isa = (void *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, v10, 0x600u, 0);
  *(_QWORD *)bytes = &v20;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)bytes);
}

char *std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(int64x2_t *a1, size_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t *v24;

  v6 = &a1->i64[1];
  result = (char *)a1->i64[1];
  v5 = v6[1];
  if (v5 - (uint64_t)result >= a2)
  {
    if (a2)
    {
      v12 = &result[a2];
      bzero(result, a2);
      result = v12;
    }
    a1->i64[1] = (uint64_t)result;
  }
  else
  {
    v7 = &result[-a1->i64[0]];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v5 - a1->i64[0];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v24 = &a1[1].i64[1];
    if (v10)
    {
      v11 = a1[3].i64[1];
      if (v11 + v10 <= (unint64_t)a1[3].u64 + 6)
        a1[3].i64[1] = v11 + v10;
      else
        v11 = (uint64_t)operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[v11];
    v14 = (char *)(v11 + v10);
    v23 = v14;
    v15 = &v13[a2];
    bzero(v13, a2);
    v22.i64[1] = (uint64_t)&v13[a2];
    v17 = a1->i64[0];
    v16 = a1->u64[1];
    if (v16 == a1->i64[0])
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_BYTE *)--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v19 = *a1;
      v15 = (char *)v22.i64[1];
      v14 = v23;
    }
    a1->i64[0] = (uint64_t)v13;
    a1->i64[1] = (uint64_t)v15;
    v22 = v19;
    v20 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v14;
    v23 = v20;
    v21 = v19.i64[0];
    return (char *)std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v21);
  }
  return result;
}

uint64_t GetTraitsFromSubfamilyName(const TBaseFont *a1, int a2, int a3, int a4, double *a5, double *a6, double *a7)
{
  const __CFString *v14;
  const __CFDictionary *v16;
  const __CFNumber *Value;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  __CFString v23;

  v23.info = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(uint64_t *__return_ptr, const TBaseFont *, const __CFString *))(*(_QWORD *)a1 + 72))(&v23.info, a1, CFSTR("CTFontSubFamilyName"));
  if (atomic_load((unint64_t *)&v23.info))
  {
    v23.isa = (void *)0xAAAAAAAAAAAAAAAALL;
    v14 = (const __CFString *)atomic_load((unint64_t *)&v23.info);
    CreateTraitsByStyleGlossaryString(&v23, v14);
    if (!atomic_load((unint64_t *)&v23))
    {
LABEL_18:

      goto LABEL_19;
    }
    if ((a2 & 1) == 0)
    {
      v16 = (const __CFDictionary *)atomic_load((unint64_t *)&v23);
      Value = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("NSCTFontWeightTrait"));
      if (!Value)
      {
        a2 = 0;
        if ((a3 & 1) != 0)
          goto LABEL_11;
LABEL_9:
        v18 = (const __CFDictionary *)atomic_load((unint64_t *)&v23);
        v19 = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("NSCTFontProportionTrait"));
        if (!v19)
        {
          a3 = 0;
          if ((a4 & 1) != 0)
          {
LABEL_16:
            a4 = 1;
            goto LABEL_18;
          }
LABEL_14:
          v20 = (const __CFDictionary *)atomic_load((unint64_t *)&v23);
          v21 = (const __CFNumber *)CFDictionaryGetValue(v20, CFSTR("NSCTFontSlantTrait"));
          if (!v21)
          {
            a4 = 0;
            goto LABEL_18;
          }
          CFNumberGetValue(v21, kCFNumberDoubleType, a7);
          goto LABEL_16;
        }
        CFNumberGetValue(v19, kCFNumberDoubleType, a6);
LABEL_11:
        a3 = 1;
        if ((a4 & 1) != 0)
          goto LABEL_16;
        goto LABEL_14;
      }
      CFNumberGetValue(Value, kCFNumberDoubleType, a5);
    }
    a2 = 1;
    if ((a3 & 1) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
LABEL_19:

  return a2 | (a3 << 8) | (a4 << 16);
}

void CreateTraitsByStyleGlossaryString(const __CFString *a1, const __CFString *a2)
{
  const __CFAllocator *v3;
  CFMutableStringRef MutableCopy;
  __int128 v5;
  char *CStringPtr;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  unint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int CString;
  CFMutableDictionaryRef Mutable;
  __CFString **v21;
  const char *isa;
  uint64_t p_data;
  const void *v24;
  const void *v25;
  __CFDictionary *v26;
  void *v27;
  id v29;
  id v30;
  void *__p;
  char *v32;
  char *v33;
  _OWORD v34[8];
  _QWORD v35[3];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    CFStringFold(MutableCopy, 1uLL, 0);
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v34[7] = v5;
    v34[6] = v5;
    v34[5] = v5;
    v34[4] = v5;
    v34[3] = v5;
    v34[2] = v5;
    v34[1] = v5;
    v34[0] = v5;
    v32 = 0;
    v33 = 0;
    __p = 0;
    v35[0] = v34;
    CStringPtr = (char *)CFStringGetCStringPtr(MutableCopy, 0x8000100u);
    if (CStringPtr)
      goto LABEL_26;
    Length = CFStringGetLength(MutableCopy);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    v9 = MaximumSizeForEncoding + 1;
    v10 = (char *)__p;
    v11 = MaximumSizeForEncoding + 1 - (v32 - (_BYTE *)__p);
    if (MaximumSizeForEncoding + 1 <= (unint64_t)(v32 - (_BYTE *)__p))
    {
      if (v9 < v32 - (_BYTE *)__p)
        v32 = (char *)__p + v9;
    }
    else
    {
      if (v33 - v32 >= v11)
      {
        bzero(v32, v9 - (v32 - (_BYTE *)__p));
        v32 = (char *)__p + v9;
      }
      else
      {
        if (MaximumSizeForEncoding <= -2)
          abort();
        v12 = 2 * (v33 - (_BYTE *)__p);
        if (v12 <= v9)
          v12 = MaximumSizeForEncoding + 1;
        v13 = (unint64_t)(v33 - (_BYTE *)__p) >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v12;
        v14 = (char *)v35[0];
        if (v35[0] + v13 <= (unint64_t)v35)
          v35[0] += v13;
        else
          v14 = (char *)operator new(v13);
        v15 = &v14[v32 - (_BYTE *)__p];
        v16 = &v14[v13];
        v17 = &v14[v9];
        bzero(v15, v11);
        __p = v15;
        v32 = v17;
        v33 = v16;
      }
      v10 = (char *)__p;
    }
    CString = CFStringGetCString(MutableCopy, v10, v9, 0x8000100u);
    CStringPtr = (char *)__p;
    if (!CString || __p == 0)
    {
      a1->isa = 0;
      if (!CStringPtr)
      {
LABEL_41:

        return;
      }
    }
    else
    {
LABEL_26:
      Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v21 = (__CFString **)CreateTraitsByStyleGlossaryString(__CFString const*)::kStyleGlossaryNameMaps;
      v30 = Mutable;
      do
      {
        isa = (const char *)(*v21)->isa;
        if (isa)
        {
          p_data = (uint64_t)&(*v21)->data;
          while (!strstr(CStringPtr, isa))
          {
            isa = *(const char **)(p_data + 8);
            p_data += 24;
            if (!isa)
              goto LABEL_33;
          }
          v29 = (id)0xAAAAAAAAAAAAAAAALL;
          TCFNumber::TCFNumber<float>((unint64_t *)&v29, *(float *)(p_data - 8));
          v24 = **(const void ***)p_data;
          v25 = (const void *)atomic_load((unint64_t *)&v29);
          v26 = (__CFDictionary *)atomic_load((unint64_t *)&v30);
          CFDictionarySetValue(v26, v24, v25);

        }
LABEL_33:
        ++v21;
      }
      while (v21 != kCTFontCSSFamilySystemUI);
      do
        v27 = (void *)__ldaxr((unint64_t *)&v30);
      while (__stlxr(0, (unint64_t *)&v30));
      a1->isa = v27;

      CStringPtr = (char *)__p;
      if (!__p)
        goto LABEL_41;
    }
    v32 = CStringPtr;
    if (v34 > (_OWORD *)CStringPtr || v35 <= (_QWORD *)CStringPtr)
      operator delete(CStringPtr);
    goto LABEL_41;
  }
  a1->isa = 0;
}

unint64_t *TCFNumber::TCFNumber<float>(unint64_t *a1, float a2)
{
  unint64_t v3;
  id v5;
  float valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  *a1 = v3;

  return a1;
}

void TBaseFont::SupportsConnectedLanguage(void)const::$_0::__invoke()
{
  unint64_t v0;
  id v1;
  const void *__dst[39];

  __dst[38] = *(const void **)MEMORY[0x1E0C80C00];
  memcpy(__dst, off_1E15E7DF8, 0x130uLL);
  v1 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __dst, 38, MEMORY[0x1E0C9B3B0]);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));
  qword_1EDD171C0 = v0;

}

CTFontRef CTFontCreateWithGraphicsFont(CGFontRef graphicsFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  uint64_t v8;
  _QWORD *v9;
  TFont *v10;
  void *v11;
  void *v12;
  const __CTFont *v13;
  id v15;
  id v16;
  id v17;

  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TFont>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (TFont *)(v8 + 48);
    v9[2] = 0;
    v9[3] = TFont::Hash;
    v9[4] = 0;
    v9[5] = v10;
    TFont::TFont(v10, graphicsFont, size, (CGAffineTransform *)matrix, attributes);
    v17 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  v16 = v12;

  do
    v13 = (const __CTFont *)__ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));

  return v13;
}

void TFont::TFont(TFont *this, CGFont *a2, double a3, CGAffineTransform *a4, const __CTFontDescriptor *a5)
{
  unint64_t *v9;
  const __CTFontDescriptor *v10;
  __int128 v11;
  uint64_t v12;

  *(_DWORD *)this = 0;
  v9 = (unint64_t *)((char *)this + 8);
  TFont::InitDescriptor(a2, a5, (unint64_t *)this + 1);
  *((double *)this + 2) = TFont::InitSize(a5, a3, v10);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0x80000000;
  TFont::InitMatrix((TFont *)a4, (const CGAffineTransform *)a5, (_QWORD *)this + 5);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  v11 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 120) = v11;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = TFont::InitBaseFont(v12, v9);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 122) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  TFont::SetExtras(this, a5, 0);
  TFont::SetFlags(this, 0, a5);
  TFont::SetOpticalSize(this, a5);
  TFont::AddFontSpecificFeatureSettings(this);
}

void TFont::InitDescriptor(TFont *this@<X0>, CTFontDescriptorRef descriptor@<X1>, unint64_t *a3@<X8>)
{
  CFTypeRef v6;
  void *v7;
  const __CFDictionary *v8;
  unint64_t v9;
  void *v10;
  unint64_t v12;
  void *v13;
  TPurgeableCache *v14;
  id v15;
  id v16;

  *a3 = 0;
  v16 = 0;
  if (descriptor)
  {
    v6 = CTFontDescriptorCopyAttribute(descriptor, CFSTR("NSCTFontVariationAttribute"));
    do
      v7 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr((unint64_t)v6, (unint64_t *)&v16));

  }
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v14);
  v8 = (const __CFDictionary *)atomic_load((unint64_t *)&v16);
  TDescriptorSource::CopyDescriptor(&v14, this, v8, (unint64_t *)&v15);
  do
    v9 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  do
    v10 = (void *)__ldaxr(a3);
  while (__stlxr(v9, a3));

  if (!atomic_load(a3))
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v14);
    TDescriptorSource::CreateDefaultDescriptor(0, (unint64_t *)&v15);
    do
      v12 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    do
      v13 = (void *)__ldaxr(a3);
    while (__stlxr(v12, a3));

  }
}

void TDescriptorSource::CopyDescriptor(TPurgeableCache **this@<X0>, CGFont *a2@<X1>, const __CFDictionary *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  const __CFDictionary *v9;
  unint64_t v10;
  unint64_t v11;
  const __CFURL *v12;
  TPurgeableCache *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  const __CFDictionary *v17;
  id v18;
  id v19;
  id v20;
  BOOL v21;
  CGFont *v22;

  v22 = a2;
  if (!a2)
  {
    TDescriptorSource::CreateDefaultDescriptor(0, a4);
    return;
  }
  v21 = -86;
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateFontURLFromFont(a2, &v21, (unint64_t *)&v20);
  v7 = atomic_load((unint64_t *)&v20);
  if (a3 && v7 && CFDictionaryGetCount(a3))
  {
    v19 = (id)0xAAAAAAAAAAAAAAAALL;
    VariationsForGraphicsFontByAddingVariation(&v19);
    if (atomic_load((unint64_t *)&v19))
    {
      v9 = (const __CFDictionary *)atomic_load((unint64_t *)&v19);
      v17 = v9;
      TCFBase_NEW<CTFontDescriptor,CGFont *&,__CFDictionary const*>(&v22, &v17, (unint64_t *)&v18);
      do
        v10 = __ldaxr((unint64_t *)&v18);
      while (__stlxr(0, (unint64_t *)&v18));
      *a4 = v10;

      goto LABEL_15;
    }

  }
  if (!v21)
  {
    *a4 = 0xAAAAAAAAAAAAAAAALL;
    v12 = (const __CFURL *)atomic_load((unint64_t *)&v20);
    TDescriptorSource::CopyDescriptorUncached(this, v12, 0, 0, 1, a4);
    v13 = *this;
    v14 = atomic_load((unint64_t *)&v20);
    v15 = atomic_load(a4);
    v16 = (void *)atomic_load((unint64_t *)v13);
    if (v15)
      objc_msgSend(v16, "setObject:forKey:", v15, v14);
    else
      objc_msgSend(v16, "removeObjectForKey:", v14);
    goto LABEL_19;
  }
  TCFBase_NEW<CTFontDescriptor,CGFont *&,is_inmemory_t const&>((void **)&v22, (unint64_t *)&v19);
  do
    v11 = __ldaxr((unint64_t *)&v19);
  while (__stlxr(0, (unint64_t *)&v19));
  *a4 = v11;
LABEL_15:

LABEL_19:
}

CTFontDescriptorRef CTFontManagerCreateFontDescriptorFromData(CFDataRef data)
{
  void *v2;
  void *v3;
  const __CTFontDescriptor *v4;
  void *v6;
  id v7;
  id v8;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  CreateFontWithData(data, (unint64_t *)&v9);
  if (atomic_load((unint64_t *)&v9))
  {
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    v2 = (void *)atomic_load((unint64_t *)&v9);
    v6 = v2;
    TCFBase_NEW<CTFontDescriptor,CGFont *&,is_inmemory_t const&>(&v6, (unint64_t *)&v7);
    do
      v3 = (void *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));
    v8 = v3;

    do
      v4 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void TCFBase_NEW<CTFontDescriptor,CGFont *&,is_inmemory_t const&>(void **a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  id v6;

  v4 = TCFBase<TDescriptor>::Allocate();
  if (v4)
  {
    v6 = (id)CTFontDescriptor::CTFontDescriptor(v4, *a1);
    do
      v5 = __ldaxr((unint64_t *)&v6);
    while (__stlxr(0, (unint64_t *)&v6));
    *a2 = v5;

  }
  else
  {
    *a2 = 0;
  }
}

uint64_t CTFontDescriptor::CTFontDescriptor(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = TDescriptor::Hash;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  v4 = operator new();
  v5 = TBaseFont::TBaseFont(v4, a2);
  *(_QWORD *)(a1 + 48) = &off_1E15DCAF0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x80000000;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t TBaseFont::TBaseFont(uint64_t a1, id a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E15DE850;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 805306368;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v4 = (_OWORD *)MEMORY[0x1E0C9D538];
  v5 = (_OWORD *)MEMORY[0x1E0C9D648];
  *(_DWORD *)(a1 + 248) = 0;
  v6 = v5[1];
  *(_OWORD *)(a1 + 304) = *v5;
  *(_OWORD *)(a1 + 320) = v6;
  *(_OWORD *)(a1 + 288) = *v4;
  *(_BYTE *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_WORD *)(a1 + 440) = -1;
  *(_QWORD *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 472;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 544) = a1 + 512;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  TBaseFont::Init((TBaseFont *)a1, (CGFont *)a2);
  return a1;
}

void CreateFontWithData(const __CFData *a1@<X0>, unint64_t *a2@<X8>)
{
  CGDataProvider *v3;
  CGDataProvider *v4;
  CGFontRef v5;
  void *v6;

  *a2 = 0;
  v3 = CGDataProviderCreateWithCFData(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CGFontCreateWithDataProvider(v3);
    do
      v6 = (void *)__ldaxr(a2);
    while (__stlxr((unint64_t)v5, a2));

    CFRelease(v4);
  }
}

void CreateFontInfoDictionaryFromFontURL(const __CFURL *a1@<X0>, unint64_t *a2@<X8>)
{
  const __CFAllocator *v4;
  CFURLRef v5;
  const __CFURL *v6;
  CFURLRef v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  CFIndex Length;
  __CFDictionary *v13;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const __CFString *ValueAtIndex;
  CFRange *v20;
  __CFString *v21;
  void *v23;
  unint64_t v24;
  void *v25;
  __CFDictionary *v26;
  const void *v27;
  CFStringRef v28;
  CFStringRef v29;
  const __CFString *v30;
  __CFDictionary *v32;
  const void *v33;
  id v34;
  __CFString *v35;
  __CFDictionary *v36;
  const void *v37;
  const __CFDictionary *v38;
  unint64_t v39;
  __CFString *v40;
  __CFString *v41;
  unint64_t *v42;
  id v43;
  id v44;
  CFRange v45[2];
  id v46;
  id Mutable;
  id v48;
  CFRange v49;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1)
  {
    v45[1].location = 0;
    v5 = CFURLGetBaseURL(a1);
    v6 = a1;
    if (v5)
    {
      v7 = CFURLCopyAbsoluteURL(a1);
      do
        v8 = (void *)__ldaxr((unint64_t *)&v45[1]);
      while (__stlxr((unint64_t)v7, (unint64_t *)&v45[1]));

      v6 = (const __CFURL *)atomic_load((unint64_t *)&v45[1]);
    }
    v9 = (__CFString *)CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);

  }
  else
  {
    v9 = 0;
  }
  v10 = v9;
  if (v10)
  {
    v11 = v10;
    Length = CFStringGetLength(v10);

    if (Length < 1)
      goto LABEL_35;
    v13 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionarySetValue(v13, CFSTR("path"), v9);
    if (a1)
    {
      v10 = (__CFString *)CFURLCopyFragment(a1, &stru_1E15EDAC0);
      if (v10)
      {
        v40 = v9;
        v41 = v10;
        v42 = a2;
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v4, v10, CFSTR(";"));
        v15 = ArrayBySeparatingStrings;
        v46 = 0;
        if (ArrayBySeparatingStrings)
        {
          Count = CFArrayGetCount(ArrayBySeparatingStrings);
          if (Count)
          {
            v17 = Count;
            v18 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
              memset(v45, 170, sizeof(v45));
              if (SplitStringAtSeparator(ValueAtIndex, (const __CFString *)&v45[1], v45, v20))
                break;
LABEL_31:
              if (++v18 == v17)
                goto LABEL_32;
            }
            v21 = (__CFString *)CFStringCreateWithSubstring(v4, ValueAtIndex, v45[1]);
            v44 = (id)0xAAAAAAAAAAAAAAAALL;
            v48 = (id)CFStringCreateWithSubstring(v4, ValueAtIndex, v45[0]);
            FindAndReplace(&v44, (unint64_t *)&v48, CFSTR("/"), CFSTR(";"));

            if (CFStringHasPrefix(v21, CFSTR("var:")))
            {
              if (!atomic_load((unint64_t *)&v46))
              {
                v48 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                do
                  v23 = (void *)__ldaxr((unint64_t *)&v48);
                while (__stlxr(0, (unint64_t *)&v48));
                v43 = v23;

                do
                  v24 = __ldaxr((unint64_t *)&v43);
                while (__stlxr(0, (unint64_t *)&v43));
                do
                  v25 = (void *)__ldaxr((unint64_t *)&v46);
                while (__stlxr(v24, (unint64_t *)&v46));

                v26 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
                v27 = (const void *)atomic_load((unint64_t *)&v46);
                CFDictionarySetValue(v26, CFSTR("variation"), v27);
              }
              v49.length = CFStringGetLength(v21) - 4;
              v49.location = 4;
              v28 = CFStringCreateWithSubstring(v4, v21, v49);
              if (!v28)
                goto LABEL_30;
              v29 = v28;
              v48 = (id)0xAAAAAAAAAAAAAAAALL;
              v30 = (const __CFString *)atomic_load((unint64_t *)&v44);
              CreateNumberFromString(v30, (CFNumberRef *)&v48);
              if (atomic_load((unint64_t *)&v48))
              {
                v32 = (__CFDictionary *)atomic_load((unint64_t *)&v46);
                v33 = (const void *)atomic_load((unint64_t *)&v48);
                CFDictionarySetValue(v32, v29, v33);
              }
              CFRelease(v29);
              v34 = v48;
            }
            else
            {
              v35 = v21;
              v36 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
              v37 = (const void *)atomic_load((unint64_t *)&v44);
              CFDictionarySetValue(v36, v35, v37);
              v34 = v35;
            }

LABEL_30:
            goto LABEL_31;
          }
        }
LABEL_32:

        v10 = v41;
        a2 = v42;
        v9 = v40;
      }
    }
    else
    {
      v10 = 0;
    }
  }

LABEL_35:
  v38 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
  if (CFDictionaryGetCount(v38) < 1)
  {
    v39 = 0;
  }
  else
  {
    do
      v39 = __ldaxr((unint64_t *)&Mutable);
    while (__stlxr(0, (unint64_t *)&Mutable));
  }
  *a2 = v39;

}

void CreateFontURLFromFont(CGFont *a1@<X0>, BOOL *a2@<X1>, unint64_t *a3@<X8>)
{
  const __CFString *v8;
  CFStringRef v9;
  void *v10;
  const __CFAllocator *v11;
  unint64_t v12;
  __CFString *v13;
  CFURLRef v14;
  void *v15;
  id v17;
  id v18;

  *a2 = 0;
  *a3 = CGFontCopyURL();
  if (!atomic_load(a3))
  {
    v18 = (id)0xAAAAAAAAAAAAAAAALL;
    v17 = (id)CGFontCopyPostScriptName(a1);
    FindAndReplace(&v18, (unint64_t *)&v17, CFSTR(";"), CFSTR("/"));

    if (atomic_load((unint64_t *)&v18))
    {
      v8 = (const __CFString *)atomic_load((unint64_t *)&v18);
      v9 = CFURLCreateStringByAddingPercentEscapes(0, v8, 0, 0, 0x8000100u);
      do
        v10 = (void *)__ldaxr((unint64_t *)&v18);
      while (__stlxr((unint64_t)v9, (unint64_t *)&v18));

      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = atomic_load((unint64_t *)&v18);
      v13 = (__CFString *)CFStringCreateWithFormat(v11, 0, CFSTR("file://iNmEmOrYcGfOnT_%p#postscript-name=%@"), a1, v12);
      v14 = CFURLCreateWithString(v11, v13, 0);
      do
        v15 = (void *)__ldaxr(a3);
      while (__stlxr((unint64_t)v14, a3));

      if (atomic_load(a3))
        *a2 = 1;

    }
  }
}

void FindAndReplace(_QWORD *a1, unint64_t *a2, const __CFString *a3, const __CFString *a4)
{
  const __CFString *v9;
  CFIndex Length;
  const __CFString *v11;
  const __CFAllocator *v12;
  const __CFString *v13;
  CFMutableStringRef MutableCopy;
  unint64_t v15;
  CFRange v16;
  CFRange v17;

  if (atomic_load(a2))
  {
    v9 = (const __CFString *)atomic_load(a2);
    Length = CFStringGetLength(v9);
    v11 = (const __CFString *)atomic_load(a2);
    v16.location = 0;
    v16.length = Length;
    if (CFStringFindWithOptions(v11, a3, v16, 0, 0))
    {
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13 = (const __CFString *)atomic_load(a2);
      MutableCopy = CFStringCreateMutableCopy(v12, 0, v13);
      v17.location = 0;
      v17.length = Length;
      CFStringFindAndReplace(MutableCopy, a3, a4, v17, 0);
      *a1 = CFStringCreateCopy(v12, MutableCopy);

      return;
    }
    do
      v15 = __ldaxr(a2);
    while (__stlxr(0, a2));
  }
  else
  {
    do
      v15 = __ldaxr(a2);
    while (__stlxr(0, a2));
  }
  *a1 = v15;
}

BOOL SplitStringAtSeparator(const __CFString *a1, const __CFString *a2, CFRange *a3, CFRange *a4)
{
  CFRange v7;
  CFIndex Length;
  CFIndex v9;

  v7 = CFStringFind(a1, CFSTR("="), 0);
  Length = CFStringGetLength(CFSTR("="));
  if (v7.length == Length)
  {
    a2->isa = 0;
    a2->info = v7.location;
    v9 = CFStringGetLength(a1);
    a3->location = v7.location + v7.length;
    a3->length = v9 - (v7.location + v7.length);
  }
  return v7.length == Length;
}

void CreateNumberFromString(const __CFString *a1@<X0>, CFNumberRef *a2@<X8>)
{
  __int128 v4;
  const char *CStringPtr;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v8;
  char *v9;
  void **v10;
  double v11;
  const __CFAllocator *v12;
  CFNumberType v13;
  char *v14;
  int64x2_t *valuePtr;
  int64x2_t v16;
  uint64_t v17;
  _OWORD v18[2];
  _OWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *a2 = 0;
    return;
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v4;
  v18[1] = v4;
  v17 = 0;
  v16 = 0uLL;
  v19 = v18;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    Length = CFStringGetLength(a1);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    v8 = MaximumSizeForEncoding + 1;
    v9 = (char *)v16.i64[0];
    if ((unint64_t)(MaximumSizeForEncoding + 1) <= v16.i64[1] - v16.i64[0])
    {
      if ((unint64_t)(MaximumSizeForEncoding + 1) < v16.i64[1] - v16.i64[0])
        v16.i64[1] = v16.i64[0] + v8;
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v16, MaximumSizeForEncoding + 1 - (v16.i64[1] - v16.i64[0]));
      v9 = (char *)v16.i64[0];
    }
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u))
      goto LABEL_14;
    CStringPtr = (const char *)v16.i64[0];
    if (!v16.i64[0])
      goto LABEL_14;
  }
  v14 = (char *)0xAAAAAAAAAAAAAAAALL;
  v10 = (void **)strtol_l(CStringPtr, &v14, 10, 0);
  if (v14 != CStringPtr && !*v14)
  {
    valuePtr = (int64x2_t *)v10;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = kCFNumberLongType;
LABEL_17:
    *a2 = CFNumberCreate(v12, v13, &valuePtr);
    goto LABEL_18;
  }
  v11 = strtod_l(CStringPtr, &v14, 0);
  if (v14 != CStringPtr && !*v14)
  {
    valuePtr = *(int64x2_t **)&v11;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = kCFNumberDoubleType;
    goto LABEL_17;
  }
LABEL_14:
  *a2 = 0;
LABEL_18:
  valuePtr = &v16;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&valuePtr);
}

void GetFontAttributeID(__CFString const*)::$_0::__invoke()
{
  unint64_t v0;
  id v1;
  const void *__dst[65];
  void *keys[66];

  keys[65] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("NSFontNameAttribute");
  keys[1] = CFSTR("NSFontVisibleNameAttribute");
  keys[2] = CFSTR("NSFontFamilyAttribute");
  keys[3] = CFSTR("NSFontFaceAttribute");
  keys[4] = CFSTR("NSCTFontTraitsAttribute");
  keys[5] = CFSTR("NSCTFontVariationAxesAttribute");
  keys[6] = CFSTR("NSCTFontVariationAttribute");
  keys[7] = CFSTR("NSFontSizeAttribute");
  keys[8] = CFSTR("NSCTFontOpticalSizeAttribute");
  keys[9] = CFSTR("NSCTFontTrackAttribute");
  keys[10] = CFSTR("NSCTFontUnscaledTrackingAttribute");
  keys[11] = CFSTR("NSCTFontMatrixAttribute");
  keys[12] = CFSTR("NSFontMatrixAttribute");
  keys[13] = CFSTR("NSCTFontCascadeListAttribute");
  keys[14] = CFSTR("NSCTFontCharacterSetAttribute");
  keys[15] = CFSTR("NSCTFontLanguagesAttribute");
  keys[16] = CFSTR("NSCTFontBaselineAdjustAttribute");
  keys[17] = CFSTR("NSCTFontMacintoshEncodingsAttribute");
  keys[18] = CFSTR("NSCTFontFeaturesAttribute");
  keys[19] = CFSTR("NSCTFontFeatureSettingsAttribute");
  keys[20] = CFSTR("NSCTFontFixedAdvanceAttribute");
  keys[21] = CFSTR("NSCTFontOrientationAttribute");
  keys[22] = CFSTR("NSCTFontDesignLanguagesAttribute");
  keys[23] = CFSTR("NSCTFontComponentListAttribute");
  keys[24] = CFSTR("NSCTFontFileURLAttribute");
  keys[25] = CFSTR("NSCTFontFormatAttribute");
  keys[26] = CFSTR("NSCTFontStringEncodingAttribute");
  keys[27] = CFSTR("CTFontIgnoreScriptAnalysisAttribute");
  keys[28] = CFSTR("NSCTFontRegistrationScopeAttribute");
  keys[29] = CFSTR("NSCTFontPriorityAttribute");
  keys[30] = CFSTR("NSCTFontDomainAttribute");
  keys[31] = CFSTR("NSCTFontEnabledAttribute");
  keys[32] = CFSTR("NSCTFontReferenceURLAttribute");
  keys[33] = CFSTR("NSCTFontPostScriptNameAttribute");
  keys[34] = CFSTR("NSCTFontDownloadableAttribute");
  keys[35] = CFSTR("NSCTFontDownloadedAttribute");
  keys[36] = CFSTR("CTFontOriginalFeatureSettingsAttribute");
  keys[37] = CFSTR("CTFontShapingGlyphsAttribute");
  keys[38] = CFSTR("CTFontVerticalShapingGlyphsAttribute");
  keys[39] = CFSTR("CTFontShapingGlyphsFFSAttribute");
  keys[40] = CFSTR("CTFontVerticalShapingGlyphsFFSAttribute");
  keys[41] = CFSTR("NSCTFontUIUsageAttribute");
  keys[42] = CFSTR("CTFontCacheGlyphImagesAttribute");
  keys[43] = CFSTR("CTFontOpticalPointSizesAttribute");
  keys[44] = CFSTR("CTFontCSSWeightAttribute");
  keys[45] = CFSTR("CTFontCSSWidthAttribute");
  keys[46] = CFSTR("NSCTFontSizeCategoryAttribute");
  keys[47] = CFSTR("CTFontPaletteAttribute");
  keys[48] = CFSTR("CTFontPaletteColorsAttribute");
  keys[49] = CFSTR("CTFontMorxConversionResultAttribute");
  keys[50] = CFSTR("CTFontDescriptorLanguageAttribute");
  keys[51] = CFSTR("CTFontPostScriptNameAliases");
  keys[52] = CFSTR("NSCTFontUserInstalledAttribute");
  keys[53] = CFSTR("NSCTFontFallbackOptionAttribute");
  keys[54] = CFSTR("NSCTFontTextStylePlatformAttribute");
  keys[55] = CFSTR("NSCTFontTextStyleTraitsAttribute");
  keys[56] = CFSTR("CTFontLanguageAwareLineHeightRatioAttribute");
  keys[57] = CFSTR("CTFontLineSpacingOverrideAttribute");
  keys[58] = CFSTR("CTFontLegibilityWeightAttribute");
  keys[59] = CFSTR("CTFontIgnoreLegibilityWeightAttribute");
  keys[60] = CFSTR("NSCTFontCodableVariationAttribute");
  keys[61] = CFSTR("CTFontDownloadableStubAttribute");
  keys[62] = CFSTR("CTFontWeightAxisValueAttribute");
  keys[63] = CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute");
  keys[64] = CFSTR("CTFontDisableColorBitmapSizeModAttribute");
  memcpy(__dst, &unk_184950020, sizeof(__dst));
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, __dst, 65, MEMORY[0x1E0C9B390], 0);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));

  GetFontAttributeID(__CFString const*)::sFontAttributes = v0;
}

CTFontRef TAttributes::GetDefaultFont(void)::{lambda(void *)#1}::__invoke(TDescriptorSource *a1)
{
  CTFontRef result;

  result = TDescriptorSource::CreateDefaultUserFont(a1);
  if (!result)
    result = CTFontCreateWithName(0, 0.0, 0);
  qword_1ECDE7860 = (uint64_t)result;
  return result;
}

CTFontRef TDescriptorSource::CreateDefaultUserFont(TDescriptorSource *this)
{
  return CTFontCreateWithName(CFSTR("Helvetica"), 12.0, 0);
}

CTFontRef CTFontCreateWithNameAndOptions(CFStringRef name, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  void *v5;
  const __CTFont *v6;
  id v7;
  int v8;
  uint64_t SystemUIFontOptions;
  int v10;
  const __CTFontDescriptor *v11;
  id v13;
  id v14;
  CTFontOptions v15;
  CGAffineTransform *v16;
  CGFloat sizea;
  __CFString *v18;

  v18 = (__CFString *)name;
  sizea = size;
  v15 = options;
  v16 = (CGAffineTransform *)matrix;
  if ((options & 0x20000000) != 0)
  {
    v8 = options & 0x85;
    SystemUIFontOptions = TFont::GetSystemUIFontOptions((TFont *)name);
    v10 = v8 | 0x400;
    if ((SystemUIFontOptions & options) == 0)
      v10 = v8;
    LODWORD(v13) = v10 | (options >> 1) & 0x10000;
    TCFBase_NEW<CTFontDescriptor,__CFString const*&,double &,unsigned int &>(&v18, &sizea, (int *)&v13, (unint64_t *)&v14);
    do
      v11 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));

    v6 = CTFontCreateWithFontDescriptorAndOptions(v11, sizea, v16, v15);
    v7 = v11;
  }
  else
  {
    v14 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTFont,__CFString const*&,double &,CGAffineTransform const*&,char const(&)[31],unsigned long &>(&v18, &sizea, &v16, "CTFontCreateWithNameAndOptions", &v15, (unint64_t *)&v13);
    do
      v5 = (void *)__ldaxr((unint64_t *)&v13);
    while (__stlxr(0, (unint64_t *)&v13));
    v14 = v5;

    do
      v6 = (const __CTFont *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    v7 = v14;
  }

  return v6;
}

void TCFBase_NEW<CTFont,__CFString const*&,double &,CGAffineTransform const*&,char const(&)[31],unsigned long &>(__CFString **a1@<X0>, double *a2@<X1>, CGAffineTransform **a3@<X2>, const char *a4@<X3>, unint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  __CFString *v14;
  double v15;
  CGAffineTransform *v16;
  unint64_t v17;
  TFont *v18;
  unint64_t v19;
  id v20;

  v12 = TCFBase<TFont>::Allocate();
  if (v12)
  {
    v13 = (_QWORD *)v12;
    v14 = *a1;
    v15 = *a2;
    v16 = *a3;
    v17 = *a5;
    v18 = (TFont *)(v12 + 48);
    v13[2] = 0;
    v13[3] = TFont::Hash;
    v13[4] = 0;
    v13[5] = v18;
    TFont::TFont(v18, v14, v15, v16, a4, v17);
    v20 = v13;
    do
      v19 = __ldaxr((unint64_t *)&v20);
    while (__stlxr(0, (unint64_t *)&v20));
    *a6 = v19;

  }
  else
  {
    *a6 = 0;
  }
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  void *v3;
  const __CTFont *v4;
  id v6;
  id v7;
  CGAffineTransform *v8;
  CGFloat v9;
  __CFString *v10;

  v10 = (__CFString *)name;
  v9 = size;
  v7 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = (CGAffineTransform *)matrix;
  TCFBase_NEW<CTFont,__CFString const*&,double &,CGAffineTransform const*&,char const(&)[21]>(&v10, &v9, &v8, "CTFontCreateWithName", (unint64_t *)&v6);
  do
    v3 = (void *)__ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));
  v7 = v3;

  do
    v4 = (const __CTFont *)__ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));

  return v4;
}

void TCFBase_NEW<CTFont,__CFString const*&,double &,CGAffineTransform const*&,char const(&)[21]>(__CFString **a1@<X0>, double *a2@<X1>, CGAffineTransform **a3@<X2>, const char *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  __CFString *v12;
  double v13;
  CGAffineTransform *v14;
  TFont *v15;
  unint64_t v16;
  id v17;

  v10 = TCFBase<TFont>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = *a1;
    v13 = *a2;
    v14 = *a3;
    v15 = (TFont *)(v10 + 48);
    v11[2] = 0;
    v11[3] = TFont::Hash;
    v11[4] = 0;
    v11[5] = v15;
    TFont::TFont(v15, v12, v13, v14, a4, 0);
    v17 = v11;
    do
      v16 = __ldaxr((unint64_t *)&v17);
    while (__stlxr(0, (unint64_t *)&v17));
    *a5 = v16;

  }
  else
  {
    *a5 = 0;
  }
}

void TFont::TFont(TFont *this, __CFString *a2, double a3, CGAffineTransform *a4, const char *a5, unint64_t a6)
{
  unint64_t *v9;
  const __CTFontDescriptor *v10;
  __int128 v11;
  uint64_t v12;

  *(_DWORD *)this = 0;
  v9 = (unint64_t *)((char *)this + 8);
  TFont::InitDescriptor(a2, a3, a6, (unint64_t *)this + 1);
  *((double *)this + 2) = TFont::InitSize(0, a3, v10);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0x80000000;
  TFont::InitMatrix((TFont *)a4, 0, (_QWORD *)this + 5);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  v11 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 120) = v11;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = TFont::InitBaseFont(v12, v9);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 122) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  *(_DWORD *)this = 192;
  TFont::SetOpticalSize(this, 0);
  TFont::AddFontSpecificFeatureSettings(this);
}

void TFont::InitDescriptor(__CFString *this@<X0>, double a2@<D0>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  TDescriptor **v13;
  TDescriptor **v14;
  TDescriptor *v15;
  unint64_t v16;
  CFDictionaryRef v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  void *v24;
  TDescriptor **v25;
  TDescriptor **v26;
  TDescriptor *v27;
  unint64_t v28;
  void *v29;
  id v30;
  TFont *v31;
  const __CFString *v32;
  TFont *v33;
  char ShouldSubstituteInvisibleFontName;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  void *keys;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46[2];
  id v47;
  void *values;

  if (this && CFStringGetLength(this) > 0)
  {
    if (qword_1ECDE75E8 != -1)
      dispatch_once_f(&qword_1ECDE75E8, 0, (dispatch_function_t)TFont::GetSystemUIFontOptions(void)::$_0::__invoke);
    v9 = a3 & 0x85;
    if ((_MergedGlobals_12 & a3) != 0)
      v9 = a3 & 0x85 | 0x400;
    v10 = (a3 >> 1) & 0x10000 | (((a3 >> 1) & 1) << 9) | v9 | 2;
    v47 = (id)0xAAAAAAAAAAAAAAAALL;
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&keys);
    TDescriptorSource::CopyFontDescriptorPerPostScriptName((TPurgeableCache **)&keys, this, v10, 0, 0, 0, 0, -1, (unint64_t *)&v47, (const void *)*MEMORY[0x1E0C9AE40]);
    v11 = atomic_load((unint64_t *)&v47);
    if (a2 <= 0.0 || !v11)
      goto LABEL_23;
    v12 = (void *)atomic_load((unint64_t *)&v47);
    v13 = v12;
    v14 = v13;
    v15 = v13[5];
    if ((*((_DWORD *)v15 + 4) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(v13[5], 0, 0.0);
    v16 = atomic_load((unint64_t *)v15 + 4);

    if (v16
      && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v16 + 16))(v16) == 1414743620
      && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v16 + 840))(v16))
    {
      keys = CFSTR("NSFontNameAttribute");
      values = this;
      v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      keys = &off_1E15DCAF0;
      v42 = 0;
      v44 = -1431655766;
      v45 = 0;
      v43 = v10;
      v46[0] = 0;
      v46[1] = 0;
      TCFRef<__CTFont const*>::Retain(&v42, v17);
      if ((v43 & 0x80000000) == 0)
        TDescriptor::InitBaseFont((TDescriptor *)&keys, v10, a2);
      v18 = atomic_load(v46);
      v19 = TCFBase<TDescriptor>::Allocate();
      if (v19)
      {
        *(_QWORD *)(v19 + 48) = &off_1E15DCAF0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = TDescriptor::Hash;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 40) = v19 + 48;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = v10 | 0x80000400;
        *(_QWORD *)(v19 + 72) = 0;
        if (v18)
        {
          v20 = (unsigned int *)(v18 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        *(_QWORD *)(v19 + 80) = v18;
        *(_QWORD *)(v19 + 88) = 0;
        values = (void *)v19;
        do
          v22 = (void *)__ldaxr((unint64_t *)&values);
        while (__stlxr(0, (unint64_t *)&values));
        v40 = v22;

      }
      else
      {
        v40 = 0;
      }
      do
        v39 = __ldaxr((unint64_t *)&v40);
      while (__stlxr(0, (unint64_t *)&v40));
      *a4 = v39;

      TDescriptor::~TDescriptor((TDescriptor *)&keys);
    }
    else
    {
LABEL_23:
      if (atomic_load((unint64_t *)&v47))
      {
        v24 = (void *)atomic_load((unint64_t *)&v47);
        v25 = v24;
        v26 = v25;
        v27 = v25[5];
        if ((*((_DWORD *)v27 + 4) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(v25[5], 0, 0.0);
        v28 = atomic_load((unint64_t *)v27 + 4);

        if (v28)
        {
          v29 = (void *)atomic_load((unint64_t *)(v28 + 96));
          v30 = v29;
          v31 = (TFont *)v30;
          v33 = v31;
          if (v31 == (TFont *)this || v31 && CFEqual(v31, this))
          {

          }
          else
          {
            ShouldSubstituteInvisibleFontName = TDescriptorSource::ShouldSubstituteInvisibleFontName(this, v32);

            if ((ShouldSubstituteInvisibleFontName & 1) == 0)
            {
              CFLog();
              if (qword_1ECDE75F0 != -1)
                dispatch_once_f(&qword_1ECDE75F0, "CTFontLogSuboptimalRequest", (dispatch_function_t)CTFontLogSuboptimalRequest::$_0::__invoke);
            }
          }

        }
      }
      if (!atomic_load((unint64_t *)&v47))
      {
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&values);
        TDescriptorSource::CreateDefaultDescriptor(0, (unint64_t *)&keys);
        do
          v36 = __ldaxr((unint64_t *)&keys);
        while (__stlxr(0, (unint64_t *)&keys));
        do
          v37 = (void *)__ldaxr((unint64_t *)&v47);
        while (__stlxr(v36, (unint64_t *)&v47));

      }
      do
        v38 = __ldaxr((unint64_t *)&v47);
      while (__stlxr(0, (unint64_t *)&v47));
      *a4 = v38;
    }

  }
  else
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&keys);
    TDescriptorSource::CreateDefaultDescriptor(0, a4);
  }
}

void TAttributes::HandleLanguageAttribute(const __CFString *a1, _QWORD *a2)
{
  CFTypeID v4;
  unint64_t *v5;
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString;
  void *v7;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      v5 = (unint64_t *)(*a2 + 24);
      CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
      do
        v7 = (void *)__ldaxr(v5);
      while (__stlxr((unint64_t)CanonicalLanguageIdentifierFromString, v5));

    }
  }
}

uint64_t TCFBase<TRunDelegate>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  unsigned __int8 v0;
  uint64_t result;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_28))
  {
    qword_1ECDE7C98 = 0;
    unk_1ECDE7CA0 = "CTRunDelegate";
    qword_1ECDE7CA8 = 0;
    unk_1ECDE7CB0 = 0;
    qword_1ECDE7CB8 = (uint64_t)TCFBase<TRunDelegate>::ClassDestruct;
    unk_1ECDE7CC0 = TCFBase<TRunDelegate>::ClassEqual;
    qword_1ECDE7CC8 = (uint64_t)TCFBase<TRunDelegate>::ClassHash;
    unk_1ECDE7CD0 = 0;
    qword_1ECDE7CD8 = (uint64_t)TCFBase<TRunDelegate>::ClassDebug;
    unk_1ECDE7CE0 = 0;
    qword_1ECDE7CE8 = 0;
    unk_1ECDE7CF0 = 0;
    __cxa_guard_release(&_MergedGlobals_28);
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TRunDelegate>::fTypeID = result;
  return result;
}

void CGFontVariationFromDictCallback(const void *a1, const __CFString *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  int *v8;
  CFTypeID v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const void *v13;
  double *v14;
  CFTypeID v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = a3[2];
  if (v3 < a3[3])
  {
    a3[2] = v3 + 1;
    v5 = a3[4];
    if (v5)
    {
      v8 = (int *)(v5 + 16 * v3);
      v9 = CFGetTypeID(a1);
      if (v9 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (void *)(v5 + 16 * v3));
      }
      else if (v9 == CFStringGetTypeID())
      {
        v10 = a3[1];
        if (v10)
        {
          v11 = (_DWORD *)(*a3 + 8);
          v12 = 40 * v10;
          while (1)
          {
            v13 = (const void *)*((_QWORD *)v11 - 1);
            if (v13 == a1 || a1 && v13 && CFEqual(a1, v13))
              break;
            v11 += 10;
            v12 -= 40;
            if (!v12)
            {
              LODWORD(v10) = 0;
              goto LABEL_15;
            }
          }
          LODWORD(v10) = *v11;
        }
LABEL_15:
        *v8 = v10;
      }
      v14 = (double *)(v5 + 16 * v3 + 8);
      if (!a2)
        goto LABEL_22;
      v15 = CFGetTypeID(a2);
      if (v15 == CFNumberGetTypeID() || v15 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, (void *)(v5 + 16 * v3 + 8));
        return;
      }
      if (v15 == CFStringGetTypeID())
      {
        *v14 = CFStringGetDoubleValue(a2);
      }
      else
      {
LABEL_22:
        v16 = a3[1];
        if (v16)
        {
          v17 = *v8;
          v18 = 40 * v16;
          v19 = (_QWORD *)(*a3 + 32);
          do
          {
            if (*((_DWORD *)v19 - 6) == v17)
              *v14 = *(double *)v19;
            v19 += 5;
            v18 -= 40;
          }
          while (v18);
        }
      }
    }
  }
}

uint64_t IsGB18030ComplianceRequired(void)::$_0::__invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  IsGB18030ComplianceRequired(void)::kGB18030ComplianceRequired = result;
  return result;
}

void CustomOTFeatures(const TBaseFont *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  TBaseFont *v4;
  __int128 v6;
  unsigned int *v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  __int128 *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  int *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unsigned int *v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _BOOL8 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  int64_t v60;
  char *v61;
  void *v62;
  TBaseFont *v63;
  uint64_t v64;
  unsigned int v65[2];
  int v66;
  _QWORD *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  _OWORD v71[7];
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;

  v4 = this;
  v74 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71[6] = v6;
  v71[5] = v6;
  v71[3] = v6;
  v71[4] = v6;
  v71[1] = v6;
  v71[2] = v6;
  v71[0] = v6;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v72 = 0xAAAAAAAAAAAAAAAALL;
  v73 = v71;
  MergeOTFeaturesFromTable<TInlineVector<unsigned int,30ul>>(&v68, this, 1196643650);
  MergeOTFeaturesFromTable<TInlineVector<unsigned int,30ul>>(&v68, v4, 1196445523);
  v7 = (unsigned int *)v68;
  v8 = v69;
  if (v68 != v69)
  {
    v9 = v68 + 1;
    while (v9 != v69)
    {
      v10 = *(v9 - 1);
      v11 = *v9++;
      if (v10 == v11)
      {
        v12 = v9 - 2;
        while (v9 != v8)
        {
          v13 = v10;
          v10 = *v9;
          if (v13 != *v9)
          {
            v12[1] = v10;
            ++v12;
          }
          ++v9;
        }
        v14 = v12 + 1;
        goto LABEL_12;
      }
    }
  }
  v14 = v69;
LABEL_12:
  if (v8 != v14)
  {
    v8 = v14;
    v69 = v14;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v67 = a3;
  if (v7 != (unsigned int *)v8)
  {
    v15 = (__int128 *)&kMasterFeatureMap;
    while (v15 != &__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf)
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 <= *v7)
      {
        v15 = (__int128 *)((char *)v15 + 12);
        if (v16 >= *v7)
          ++v7;
      }
      else
      {
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v67, v7++);
      }
      if (v7 == (unsigned int *)v8)
        goto LABEL_22;
    }
    *(_QWORD *)v65 = v67;
    while (v7 != (unsigned int *)v8)
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)v65, v7++);
  }
LABEL_22:
  if (a2)
  {
    v17 = a3 + 2;
    v18 = &kMasterFeatureMap;
    do
    {
      v66 = *((_DWORD *)v18 + 2);
      *(_QWORD *)v65 = *v18;
      if ((v66 & 0x8000) != 0)
      {
        v19 = v68;
        if (v69 != v68)
        {
          v20 = v69 - v68;
          do
          {
            v21 = v20 >> 1;
            v22 = (unsigned int *)&v19[v20 >> 1];
            v24 = *v22;
            v23 = (int *)(v22 + 1);
            v20 += ~(v20 >> 1);
            if (v24 < v65[0])
              v19 = v23;
            else
              v20 = v21;
          }
          while (v20);
          if (v19 != v69 && v65[0] >= *v19 && NumberOfGlyphVariants(v4, v65[0]) >= 2)
          {
            v26 = (char *)*a3;
            v25 = (char *)a3[1];
            v27 = (uint64_t)&v25[-*a3];
            if (v25 == (char *)*a3)
            {
              v29 = (char *)a3[1];
            }
            else
            {
              v28 = v27 >> 2;
              v29 = (char *)*a3;
              do
              {
                v30 = v28 >> 1;
                v31 = (unsigned int *)&v29[4 * (v28 >> 1)];
                v33 = *v31;
                v32 = (char *)(v31 + 1);
                v28 += ~(v28 >> 1);
                if (v33 < v65[0])
                  v29 = v32;
                else
                  v28 = v30;
              }
              while (v28);
            }
            v34 = v29 - v26;
            v35 = &v26[(v29 - v26) & 0xFFFFFFFFFFFFFFFCLL];
            v36 = *v17;
            if ((unint64_t)v25 >= *v17)
            {
              v40 = (v27 >> 2) + 1;
              if (v40 >> 62)
                abort();
              v63 = v4;
              v64 = (uint64_t)v17;
              v41 = v36 - (_QWORD)v26;
              v42 = (v36 - (uint64_t)v26) >> 1;
              if (v42 > v40)
                v40 = v42;
              if (v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v40;
              if (v43)
                v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)v17, v43);
              else
                v44 = 0;
              v47 = v34 >> 2;
              v48 = &v44[4 * (v34 >> 2)];
              v49 = &v44[4 * v43];
              if (v34 >> 2 == v43)
              {
                if (v34 < 1)
                {
                  if (v29 == v26)
                    v51 = 1;
                  else
                    v51 = v34 >> 1;
                  v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v64, v51);
                  v48 = &v52[v51 & 0xFFFFFFFFFFFFFFFCLL];
                  v49 = &v52[4 * v53];
                  if (v44)
                  {
                    v54 = &v52[4 * v53];
                    operator delete(v44);
                    v49 = v54;
                  }
                }
                else
                {
                  if (v47 >= -1)
                    v50 = v47 + 1;
                  else
                    v50 = v47 + 2;
                  v48 -= 4 * (v50 >> 1);
                }
              }
              *(_DWORD *)v48 = v65[0];
              v55 = v48 + 4;
              v56 = (char *)*a3;
              if ((char *)*a3 != v35)
              {
                v57 = v35;
                do
                {
                  v58 = *((_DWORD *)v57 - 1);
                  v57 -= 4;
                  *((_DWORD *)v48 - 1) = v58;
                  v48 -= 4;
                }
                while (v57 != v56);
              }
              v59 = (char *)a3[1];
              v60 = v59 - v35;
              if (v59 != v35)
              {
                v61 = v49;
                memmove(v55, v35, v59 - v35);
                v49 = v61;
              }
              v62 = (void *)*a3;
              *a3 = v48;
              a3[1] = &v55[v60];
              a3[2] = v49;
              v4 = v63;
              v17 = (uint64_t *)v64;
              if (v62)
                operator delete(v62);
            }
            else if (v35 == v25)
            {
              *(_DWORD *)v25 = v65[0];
              a3[1] = v25 + 4;
            }
            else
            {
              v37 = v25 - 4;
              v38 = (unsigned int *)a3[1];
              while (v37 < v25)
              {
                v39 = *(_DWORD *)v37;
                v37 += 4;
                *v38++ = v39;
              }
              a3[1] = v38;
              if (v25 != v35 + 4)
              {
                memmove(&v25[-4 * ((v25 - (v35 + 4)) >> 2)], &v26[(v29 - v26) & 0xFFFFFFFFFFFFFFFCLL], v25 - (v35 + 4));
                v38 = (unsigned int *)a3[1];
              }
              v46 = v35 <= (char *)v65 && v38 > v65;
              *(_DWORD *)v35 = *(_DWORD *)((unint64_t)v65 | (4 * v46));
            }
          }
        }
      }
      v18 = (uint64_t *)((char *)v18 + 12);
    }
    while (v18 != (uint64_t *)&__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf);
  }
  *(_QWORD *)v65 = &v68;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
}

void TBaseFont::CopyOTFontFeatureTable(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  const void **v5;
  void *v6;
  id v7;
  void *v9;
  id v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18[3];
  id v19;

  v19 = (id)0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("CTFontOTFeatures"), &v19);
  v4 = atomic_load((unint64_t *)&v19);
  v5 = (const void **)MEMORY[0x1E0C9B0D0];
  if (!v4)
  {
    memset(v18, 170, sizeof(v18));
    TFontFeatureTable::TFontFeatureTable((TFontFeatureTable *)v18, this);
    v17 = (id)0xAAAAAAAAAAAAAAAALL;
    if (LOBYTE(v18[0]))
    {
      v6 = (void *)atomic_load((unint64_t *)&v18[1]);
      v7 = v6;
    }
    else
    {
      v7 = 0;
    }
    v17 = v7;
    if (atomic_load((unint64_t *)&v17))
    {
      v9 = (void *)atomic_load((unint64_t *)&v17);
      v10 = v9;
      os_unfair_lock_lock_with_options();
      v11 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
      if (v10)
      {
        if (!v11)
          TBaseFont::InitAttributesDict(this);
        v12 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
        if (v12)
          CFDictionarySetValue(v12, CFSTR("CTFontOTFeatures"), v10);
      }
      else if (v11)
      {
        CFDictionaryRemoveValue(v11, CFSTR("CTFontOTFeatures"));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)this + 28);

      do
        v13 = __ldaxr((unint64_t *)&v17);
      while (__stlxr(0, (unint64_t *)&v17));
      do
        v14 = (void *)__ldaxr((unint64_t *)&v19);
      while (__stlxr(v13, (unint64_t *)&v19));

    }
    else
    {
      TBaseFont::SetAttributeInternal<__CFDictionary const*>((unint64_t *)this, *v5, CFSTR("CTFontOTFeatures"));
    }

  }
  v15 = atomic_load((unint64_t *)&v19);
  if (*v5 == (const void *)v15)
  {
    v16 = 0;
  }
  else
  {
    do
      v16 = __ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
  }
  *a2 = v16;

}

void TFontFeatureTable::TFontFeatureTable(TFontFeatureTable *this, const TBaseFont *a2)
{
  unint64_t *v3;
  const __CFData *v4;
  void *v5;
  const UInt8 *BytePtr;
  UInt8 *v7;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (unint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (TFontFeatureTable::LoadTableData(this, a2))
  {
    v4 = (const __CFData *)atomic_load(v3);
    if (CFDataGetLength(v4) >= 8)
    {
      v5 = (void *)atomic_load(v3);
      BytePtr = v5;
      v7 = (UInt8 *)BytePtr;
      if (BytePtr)
        BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
      *((_QWORD *)this + 2) = BytePtr;

    }
  }
}

BOOL TFontFeatureTable::LoadTableData(TFontFeatureTable *this, const TBaseFont *a2)
{
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  id v11;

  if ((*(unsigned int (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2 + 472))(a2, 1836020344))
  {
    (*(void (**)(id *__return_ptr, const TBaseFont *, uint64_t))(*(_QWORD *)a2 + 480))(&v11, a2, 1717920116);
    v4 = (unint64_t *)((char *)this + 8);
    do
      v5 = __ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
    do
      v6 = (void *)__ldaxr(v4);
    while (__stlxr(v5, v4));
LABEL_11:

    goto LABEL_12;
  }
  if (((*(uint64_t (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2 + 472))(a2, 1196643650) & 1) != 0
    || (*(unsigned int (**)(const TBaseFont *, uint64_t))(*(_QWORD *)a2 + 472))(a2, 1196445523))
  {
    *(_BYTE *)this = 1;
    v7 = (unint64_t *)((char *)this + 8);
    CreateOTFeatureTable(a2, (unint64_t *)&v11);
    do
      v8 = __ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));
    do
      v6 = (void *)__ldaxr(v7);
    while (__stlxr(v8, v7));
    goto LABEL_11;
  }
LABEL_12:
  v9 = atomic_load((unint64_t *)this + 1);
  return v9 != 0;
}

void CreateOTFeatureTable(const TBaseFont *a1@<X0>, unint64_t *a2@<X8>)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v6;
  unsigned int v7;
  unsigned int v8;
  std::vector<unsigned int>::pointer v9;
  unsigned int v10;
  unsigned int *v11;
  CFAllocatorRef *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int *v15;
  char *v16;
  __int128 *v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  const __CFData *v27;
  unsigned int v28;
  unsigned __int16 v29;
  _WORD *v30;
  id *v31;
  BOOL v32;
  __int128 *v33;
  void *v34;
  __int128 *v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  __int128 *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 *v42;
  unint64_t v43;
  unint64_t v44;
  CFIndex v45;
  const UInt8 *v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  int v50;
  unsigned __int16 *i;
  unsigned __int16 *v54;
  char *v55;
  unsigned __int16 *v56;
  size_t v57;
  unsigned int v58;
  int v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  UInt8 *v65;
  int v66;
  UInt8 *v67;
  _DWORD *v68;
  unsigned __int16 *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned __int16 *v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  uint8x8_t v80;
  unint64_t v81;
  uint64_t ***v82;
  uint64_t **j;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  const UInt8 *v92;
  unint64_t *v93;
  unsigned int *v94;
  CFIndex v95;
  std::vector<unsigned int>::pointer v96;
  id v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  id v101[2];
  __int128 v102;
  unint64_t v103;
  std::vector<unsigned int> v104;

  memset(&v104, 0, sizeof(v104));
  MergeOTFeaturesFromTable<std::vector<unsigned int>>(&v104, a1, 1196643650);
  MergeOTFeaturesFromTable<std::vector<unsigned int>>(&v104, a1, 1196445523);
  begin = v104.__begin_;
  end = v104.__end_;
  if (v104.__begin_ != v104.__end_)
  {
    v6 = v104.__begin_ + 1;
    while (v6 != v104.__end_)
    {
      v7 = *(v6 - 1);
      v8 = *v6++;
      if (v7 == v8)
      {
        v9 = v6 - 2;
        while (v6 != end)
        {
          v10 = v7;
          v7 = *v6;
          if (v10 != *v6)
          {
            v9[1] = v7;
            ++v9;
          }
          ++v6;
        }
        v11 = v9 + 1;
        goto LABEL_12;
      }
    }
  }
  v11 = v104.__end_;
LABEL_12:
  if (end != v11)
  {
    end = v11;
    v104.__end_ = v11;
  }
  v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE10];
  if (begin == end)
  {
    v45 = 0;
    v46 = 0;
  }
  else
  {
    v93 = a2;
    v13 = (unsigned __int16 *)operator new(8uLL);
    *(_QWORD *)v13 = 0x10000;
    v14 = v13 + 4;
    *(_OWORD *)v101 = 0u;
    v102 = 0u;
    v103 = 0xAAAAAAAA3F800000;
    v98 = 0u;
    v99 = 0u;
    v15 = &dword_18494E978;
    v100 = 0xAAAAAAAA3F800000;
    v16 = (char *)(v13 + 4);
    v94 = end;
    do
    {
      if (*begin == *v15)
      {
        v17 = (__int128 *)(v15 + 3);
        do
        {
          v18 = v17;
          if (v17 >= &__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf)
            break;
          v17 = (__int128 *)((char *)v17 + 12);
        }
        while (*begin == *(_DWORD *)v18);
        v96 = begin;
        if (v15 < (int *)v18)
        {
          while (1)
          {
            if ((v15[2] & 8) != 0)
            {
              v20 = v14;
            }
            else
            {
              v19 = v15 + 1;
              if (v14 >= (unsigned __int16 *)v16)
              {
                v21 = ((char *)v14 - (char *)v13) >> 3;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 61)
                  abort();
                if ((v16 - (char *)v13) >> 2 > v22)
                  v22 = (v16 - (char *)v13) >> 2;
                if ((unint64_t)(v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFF8)
                  v23 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v23 = v22;
                if (v23)
                {
                  if (v23 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v24 = (char *)operator new(8 * v23);
                }
                else
                {
                  v24 = 0;
                }
                v25 = (unsigned __int16 *)&v24[8 * v21];
                *(_QWORD *)v25 = *v19;
                v20 = v25 + 4;
                while (v14 != v13)
                {
                  v26 = *((_QWORD *)v14 - 1);
                  v14 -= 4;
                  *((_QWORD *)v25 - 1) = v26;
                  v25 -= 4;
                }
                v16 = &v24[8 * v23];
                if (v13)
                  operator delete(v13);
                v13 = v25;
              }
              else
              {
                *(_QWORD *)v14 = *v19;
                v20 = v14 + 4;
              }
              if ((v15[2] & 0x40) != 0)
              {
                LOWORD(v28) = NumberOfGlyphVariants(a1, *v15);
                v29 = *((_WORD *)v15 + 2);
                v31 = (id *)&v98;
                v30 = v15 + 1;
              }
              else
              {
                if (*(_WORD *)v19 != 35)
                  goto LABEL_47;
                v27 = FeatureParamsForTag<OTL::StylisticSetFeatureParams>(a1, *v15);
                if (!v27)
                  goto LABEL_47;
                v28 = bswap32(*((unsigned __int16 *)v27 + 1)) >> 16;
                v30 = (_WORD *)v15 + 3;
                v29 = *((_WORD *)v15 + 3);
                v31 = v101;
              }
              *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v31, v29, v30)+ 9) = v28;
            }
LABEL_47:
            v14 = v20;
            v32 = v15 >= (int *)v18 - 3;
            v15 += 3;
            if (v32)
              goto LABEL_54;
          }
        }
        v20 = v14;
LABEL_54:
        begin = v96 + 1;
        v14 = v20;
        end = v94;
      }
      else if (*begin >= *v15)
      {
        v18 = (__int128 *)(v15 + 3);
      }
      else
      {
        ++begin;
        v18 = (__int128 *)v15;
      }
      if (begin == end)
        break;
      v15 = (int *)v18;
    }
    while (v18 != &__const__ZN10TTruncator8TruncateEd20CTLineTruncationTypePK8__CTLineU13block_pointerFPK7__CTRunS3_P7CFRangePK14__CFDictionaryE_endHalf);
    if (v13 == v14)
    {
      v45 = 0;
      v46 = 0;
      a2 = v93;
      v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE10];
    }
    else
    {
      v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE10];
      if (*((_QWORD *)&v102 + 1))
      {
        v97 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr))(*(_QWORD *)a1 + 496))(&v97);
        atomic_load((unint64_t *)&v97);
        if (CGFontNameTableCreate())
        {
          v33 = (__int128 *)v102;
          if ((_QWORD)v102)
          {
            while (1)
            {
              v34 = (void *)CGFontNameTableCopyRootName();

              v35 = *(__int128 **)v33;
              if (!v34)
                break;
LABEL_90:
              v33 = v35;
              if (!v35)
                goto LABEL_91;
            }
            v36 = (unint64_t)v101[1];
            v37 = *((_QWORD *)v33 + 1);
            v38 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if ((id)v37 >= v101[1])
                v37 %= (unint64_t)v101[1];
            }
            else
            {
              v37 &= (unint64_t)v101[1] - 1;
            }
            v39 = (__int128 *)*((_QWORD *)v101[0] + v37);
            do
            {
              v40 = v39;
              v39 = *(__int128 **)v39;
            }
            while (v39 != v33);
            if (v40 == &v102)
              goto LABEL_182;
            v41 = *((_QWORD *)v40 + 1);
            if (v38.u32[0] > 1uLL)
            {
              if ((id)v41 >= v101[1])
                v41 %= (unint64_t)v101[1];
            }
            else
            {
              v41 &= (unint64_t)v101[1] - 1;
            }
            v42 = *(__int128 **)v33;
            if (v41 != v37)
            {
LABEL_182:
              if (v35)
              {
                v43 = *((_QWORD *)v35 + 1);
                if (v38.u32[0] > 1uLL)
                {
                  v44 = *((_QWORD *)v35 + 1);
                  if ((id)v43 >= v101[1])
                    v44 = v43 % (unint64_t)v101[1];
                }
                else
                {
                  v44 = v43 & ((unint64_t)v101[1] - 1);
                }
                v42 = *(__int128 **)v33;
                if (v44 == v37)
                  goto LABEL_83;
              }
              *((_QWORD *)v101[0] + v37) = 0;
              v42 = *(__int128 **)v33;
            }
            if (!v42)
            {
LABEL_89:
              *(_QWORD *)v40 = v42;
              *(_QWORD *)v33 = 0;
              --*((_QWORD *)&v102 + 1);
              operator delete(v33);
              goto LABEL_90;
            }
            v43 = *((_QWORD *)v42 + 1);
LABEL_83:
            if (v38.u32[0] > 1uLL)
            {
              if (v43 >= v36)
                v43 %= v36;
            }
            else
            {
              v43 &= v36 - 1;
            }
            if (v43 != v37)
            {
              *((_QWORD *)v101[0] + v43) = v40;
              v42 = *(__int128 **)v33;
            }
            goto LABEL_89;
          }
LABEL_91:
          CGFontNameTableRelease();
        }
        else
        {
          std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::clear(v101);
        }

      }
      v47 = ((char *)v14 - (char *)v13) >> 3;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *,false>((unint64_t)v13, v14, 126 - 2 * __clz(v47), 1);
      v48 = v13 - 4;
      a2 = v93;
      do
      {
        if (v48 + 8 == v14)
        {
          v54 = v14;
          goto LABEL_113;
        }
        v50 = v48[4];
        v48 += 4;
        LODWORD(v49) = v50;
      }
      while (v50 != v48[4] || v48[1] != v48[5]);
      for (i = v48 + 8; i != v14; i += 4)
      {
        if ((_DWORD)v49 != *i || v48[1] != i[1])
        {
          v49 = *(_QWORD *)i;
          *((_QWORD *)v48 + 1) = *(_QWORD *)i;
          v48 += 4;
          LODWORD(v49) = (unsigned __int16)v49;
        }
      }
      v54 = v48 + 4;
      v47 = ((char *)v54 - (char *)v13) >> 3;
LABEL_113:
      v55 = (char *)((char *)v14 - (char *)v54);
      if (v55)
      {
        v56 = &v13[4 * v47];
        v57 = (char *)v14 - &v55[(_QWORD)v56];
        if (v57)
          memmove(&v13[4 * v47], &v55[(_QWORD)v56], v57);
        v14 = (unsigned __int16 *)((char *)v56 + v57);
      }
      if (v13 == v14)
      {
        v58 = 0;
      }
      else
      {
        v58 = 0;
        v59 = -1;
        v60 = v13;
        do
        {
          v62 = *v60;
          v60 += 4;
          v61 = v62;
          if (v59 != v62)
            ++v58;
          v59 = v61;
        }
        while (v60 != v14);
      }
      v63 = v99;
      if ((_QWORD)v99)
      {
        v64 = 0;
        do
        {
          v64 += *(unsigned __int16 *)(v63 + 18);
          v63 = *(_QWORD *)v63;
        }
        while (v63);
        v63 = v64;
      }
      v45 = 4 * (v63 + (((char *)v14 - (char *)v13) >> 3)) + 12 * v58 + 12;
      v65 = (UInt8 *)CFAllocatorAllocate(*v12, v45, 0);
      v46 = v65;
      *(_DWORD *)v65 = 16777472;
      *((_DWORD *)v65 + 1) = bswap32(v58) >> 16;
      *((_DWORD *)v65 + 2) = 0;
      if (v13 != v14)
      {
        v95 = v45;
        v66 = 0;
        v67 = &v65[12 * v58 + 12];
        v92 = v65;
        v68 = v65 + 12;
        v69 = v13;
        v70 = 12 * v58 + 12;
        do
        {
          if ((v69[2] & 0x40) != 0)
          {
            v86 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)&v98, *v69, v69);
            v70 = 12 * v58 + 12;
            v87 = *((unsigned __int16 *)v86 + 9);
            v88 = *v69;
            *(_WORD *)v68 = __rev16(v88);
            *((_WORD *)v68 + 1) = bswap32(v87 + 1) >> 16;
            v68[1] = bswap32(v70 + 4 * (v66 + ((unint64_t)((char *)v69 - (char *)v13) >> 3)));
            *((_WORD *)v68 + 4) = 192;
            v89 = -200 * v88;
            *((_WORD *)v68 + 5) = bswap32(v89 - 200) >> 16;
            *(_WORD *)v67 = 0;
            *((_WORD *)v67 + 1) = bswap32(v89 - 201) >> 16;
            v67 += 4;
            if (v87)
            {
              v90 = 0;
              do
              {
                *(_WORD *)v67 = bswap32(++v90) >> 16;
                *((_WORD *)v67 + 1) = bswap32(v89 - 202) >> 16;
                v67 += 4;
                --v89;
              }
              while (v87 != v90);
            }
            v66 += v87;
            v68 += 3;
            v69 += 4;
          }
          else
          {
            v71 = 0;
            v72 = *v69;
            while (v72 == v69[v71])
            {
              v71 += 4;
              if (&v69[v71] == v14)
              {
                v73 = v14;
                goto LABEL_136;
              }
            }
            v73 = &v69[v71];
LABEL_136:
            *(_WORD *)v68 = __rev16(v72);
            *((_WORD *)v68 + 1) = bswap32(((_DWORD)v73 - (_DWORD)v69) >> 3) >> 16;
            v68[1] = bswap32(v70 + 4 * (v66 + ((unint64_t)((char *)v69 - (char *)v13) >> 3)));
            *((_WORD *)v68 + 5) = bswap32(-200 - 200 * v72) >> 16;
            if (v69 == v73)
            {
              v75 = 0;
            }
            else
            {
              v74 = 0;
              v75 = 0;
              do
              {
                LOWORD(v97) = v69[1];
                *(_WORD *)v67 = bswap32((unsigned __int16)v97) >> 16;
                v76 = *v69;
                v77 = (unsigned __int16)v97;
                v78 = bswap32(~(unsigned __int16)v97 - 200 * v76 - 200) >> 16;
                *((_WORD *)v67 + 1) = v78;
                v79 = *((_DWORD *)v69 + 1);
                if ((v79 & 1) != 0)
                {
                  v75 |= v74 & (v79 << 30 >> 31) | 0xFFFFC000;
                }
                else
                {
                  if ((v79 & 2) == 0)
                    *(_WORD *)v67 = __rev16(v77 ^ 1);
                  if (v76 == 35 && v101[1])
                  {
                    v80 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]);
                    v80.i16[0] = vaddlv_u8(v80);
                    if (v80.u32[0] > 1uLL)
                    {
                      v81 = (unsigned __int16)v97;
                      if (v101[1] <= (id)(unsigned __int16)v97)
                        v81 = (unsigned __int16)v97 % (unint64_t)v101[1];
                    }
                    else
                    {
                      v81 = (LODWORD(v101[1]) - 1) & (unsigned __int16)v97;
                    }
                    v82 = (uint64_t ***)*((_QWORD *)v101[0] + v81);
                    if (v82)
                    {
                      for (j = *v82; j; j = (uint64_t **)*j)
                      {
                        v84 = (unint64_t)j[1];
                        if (v84 == (unsigned __int16)v97)
                        {
                          if (*((unsigned __int16 *)j + 8) == (unsigned __int16)v97)
                          {
                            v85 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v101, (unsigned __int16)v97, &v97);
                            v70 = 12 * v58 + 12;
                            v78 = bswap32(*((unsigned __int16 *)v85 + 9)) >> 16;
                            goto LABEL_160;
                          }
                        }
                        else
                        {
                          if (v80.u32[0] > 1uLL)
                          {
                            if ((id)v84 >= v101[1])
                              v84 %= (unint64_t)v101[1];
                          }
                          else
                          {
                            v84 &= (unint64_t)v101[1] - 1;
                          }
                          if (v84 != v81)
                            break;
                        }
                      }
                    }
                  }
                  LOWORD(v78) = v78 | 0x100;
LABEL_160:
                  *((_WORD *)v67 + 1) = v78;
                }
                v67 += 4;
                ++v74;
                v69 += 4;
              }
              while (v69 != v73);
              v69 = v73;
            }
            *((_WORD *)v68 + 4) = bswap32(v75) >> 16;
            v68 += 3;
          }
        }
        while (v69 != v14);
        a2 = v93;
        v45 = v95;
        v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE10];
        v46 = v92;
      }
    }
    std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v98);
    std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v101);
    if (v13)
      operator delete(v13);
  }
  v101[0] = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v46, v45, *v12);
  do
    v91 = __ldaxr((unint64_t *)v101);
  while (__stlxr(0, (unint64_t *)v101));
  *a2 = v91;

  if (v104.__begin_)
  {
    v104.__end_ = v104.__begin_;
    operator delete(v104.__begin_);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_WORD *)v10 + 8) = *a3;
  *((_WORD *)v10 + 9) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,OTL::Lookup>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OTL::Lookup>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OTL::Lookup>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

const __CFData *FeatureParamsForTag<OTL::StylisticSetFeatureParams>(TBaseFont *a1, int a2)
{
  const __CFData *CommonTable;
  const __CFData *result;
  const __CFData *v6;

  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(a1, 1196643650, 0);
  if (!CommonTable || (result = FeatureParamsForTag<OTL::StylisticSetFeatureParams>(CommonTable, a2)) == 0)
  {
    v6 = (const __CFData *)TBaseFont::GetCommonTable(a1, 1196445523, 0);
    if (!v6)
      return 0;
    result = FeatureParamsForTag<OTL::StylisticSetFeatureParams>(v6, a2);
    if (!result)
      return 0;
  }
  return result;
}

const __CFData *FeatureParamsForTag<OTL::StylisticSetFeatureParams>(CFDataRef theData, int a2)
{
  const __CFData *v2;
  const UInt8 *BytePtr;
  unint64_t v5;
  const UInt8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  const __CFData *v36;
  void **v38;
  _QWORD v39[3];
  _OWORD v40[4];
  _OWORD *v41;
  uint64_t v42;

  v2 = theData;
  v42 = *MEMORY[0x1E0C80C00];
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr)
      return 0;
    v5 = (unint64_t)BytePtr;
    v6 = CFDataGetBytePtr(v2);
    v7 = v6 ? (unint64_t)&v6[CFDataGetLength(v2)] : 0;
    if (!*(_WORD *)(v5 + 6))
      return 0;
    v8 = __rev16(*(unsigned __int16 *)(v5 + 6));
    v9 = (unsigned __int16 *)(v5 + v8);
    v10 = v5 + v8 + 2;
    if (v10 > v7)
      return 0;
    v11 = *v9;
    v12 = __rev16(v11);
    v13 = v10 + 6 * v12;
    if (v13 < v10 || v13 > v7)
    {
      v15 = (v7 - v10) / 6;
      if ((unint64_t)(v9 + 4) > v7)
        v15 = 0;
      if (v15 != v12)
        return 0;
    }
    if (*(_WORD *)(v5 + 8)
      && (v16 = (unsigned __int16 *)(v5 + __rev16(*(unsigned __int16 *)(v5 + 8))),
          v17 = v16 + 1,
          (unint64_t)(v16 + 1) <= v7))
    {
      v2 = 0;
      v19 = bswap32(*v16) >> 16;
      v20 = (unint64_t)&v17[v19];
      if ((unint64_t)(v16 + 2) <= v7)
        v21 = (v7 - (unint64_t)v17) >> 1;
      else
        v21 = 0;
      if (v20 <= v7 && v20 >= (unint64_t)v17 || v21 == v19)
      {
        *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40[2] = v24;
        v40[3] = v24;
        v40[0] = v24;
        v40[1] = v24;
        memset(v39, 0, sizeof(v39));
        v41 = v40;
        if (!v11)
          goto LABEL_35;
        v25 = (unsigned __int16 *)(v8 + v5 + 6);
        v26 = 6 * v12;
        while (bswap32(*((_DWORD *)v25 - 1)) != a2)
        {
          v25 += 3;
          v26 -= 6;
          if (!v26)
            goto LABEL_35;
        }
        v27 = (unsigned __int16 *)((char *)v9 + (bswap32(*v25) >> 16));
        v28 = v27 + 2;
        v29 = (unint64_t)(v27 + 1) < v5 || (unint64_t)v28 > v7;
        if (!v29
          && ((v30 = bswap32(v27[1]) >> 16,
               v31 = (unint64_t)&v28[v30],
               (unint64_t)(v27 + 3) <= v7)
            ? (v32 = (v7 - (unint64_t)v28) >> 1)
            : (v32 = 0),
              v31 <= v7 ? (v33 = v31 >= (unint64_t)v28) : (v33 = 0),
              !v33 ? (v34 = v32 == v30) : (v34 = 1),
              v34))
        {
          v35 = *v27;
          v36 = (const __CFData *)((char *)v27 + __rev16(v35));
          if ((unint64_t)v36 + 4 > v7 || v35 == 0)
            v2 = 0;
          else
            v2 = v36;
        }
        else
        {
LABEL_35:
          v2 = 0;
        }
        v38 = (void **)v39;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v38);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void MergeOTFeaturesFromTable<std::vector<unsigned int>>(std::vector<unsigned int> *a1, TBaseFont *this, uint64_t a3)
{
  const __CFData *CommonTable;
  const __CFData *v5;
  const UInt8 *BytePtr;
  const UInt8 *v7;
  const UInt8 *v8;
  unint64_t v9;
  const UInt8 *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer end;
  unsigned int *v19;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int v21;
  char *v22;
  std::vector<unsigned int>::pointer begin;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  char *v31;

  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(this, a3, 0);
  if (CommonTable)
  {
    v5 = CommonTable;
    BytePtr = CFDataGetBytePtr(CommonTable);
    if (BytePtr)
    {
      v7 = BytePtr;
      v8 = CFDataGetBytePtr(v5);
      if (v8)
      {
        v9 = (unint64_t)&v8[CFDataGetLength(v5)];
        if ((unint64_t)(v7 + 10) <= v9
          && bswap32(*(unsigned __int16 *)v7) >> 16 <= 1
          && (!*((_WORD *)v7 + 1) || (unint64_t)(v7 + 14) <= v9))
        {
          if (*((_WORD *)v7 + 3))
          {
            v10 = &v7[__rev16(*((unsigned __int16 *)v7 + 3))];
            v11 = (unsigned int *)(v10 + 2);
            if ((unint64_t)(v10 + 2) <= v9)
            {
              v12 = *(unsigned __int16 *)v10;
              v13 = __rev16(v12);
              v14 = (char *)v11 + 6 * v13;
              v15 = v14 < (char *)v11 || (unint64_t)v14 > v9;
              if (!v15
                || ((unint64_t)(v10 + 8) <= v9 ? (v16 = (v9 - (unint64_t)v11) / 6) : (v16 = 0),
                    v16 == v13))
              {
                v17 = (char *)a1->__end_ - (char *)a1->__begin_;
                std::vector<unsigned int>::reserve(a1, v13 + (v17 >> 2));
                end = a1->__end_;
                if (v12)
                {
                  v19 = (unsigned int *)((char *)v11 + 6 * v13);
                  p_end_cap = &a1->__end_cap_;
                  do
                  {
                    v21 = bswap32(*v11);
                    if (end >= p_end_cap->__value_)
                    {
                      begin = a1->__begin_;
                      v24 = end - a1->__begin_;
                      v25 = v24 + 1;
                      if ((unint64_t)(v24 + 1) >> 62)
                        abort();
                      v26 = (char *)p_end_cap->__value_ - (char *)begin;
                      if (v26 >> 1 > v25)
                        v25 = v26 >> 1;
                      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                        v27 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v27 = v25;
                      if (v27)
                      {
                        v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&a1->__end_cap_, v27);
                        begin = a1->__begin_;
                        end = a1->__end_;
                      }
                      else
                      {
                        v28 = 0;
                      }
                      v29 = (unsigned int *)&v28[4 * v24];
                      *v29 = v21;
                      v22 = (char *)(v29 + 1);
                      while (end != begin)
                      {
                        v30 = *--end;
                        *--v29 = v30;
                      }
                      a1->__begin_ = v29;
                      a1->__end_ = (std::vector<unsigned int>::pointer)v22;
                      a1->__end_cap_.__value_ = (unsigned int *)&v28[4 * v27];
                      if (begin)
                        operator delete(begin);
                    }
                    else
                    {
                      *end = v21;
                      v22 = (char *)(end + 1);
                    }
                    a1->__end_ = (std::vector<unsigned int>::pointer)v22;
                    v11 = (unsigned int *)((char *)v11 + 6);
                    end = (std::vector<unsigned int>::pointer)v22;
                  }
                  while (v11 != v19);
                }
                else
                {
                  v22 = (char *)a1->__end_;
                }
                v31 = (char *)a1->__begin_;
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                std::__inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__less<void,void> &>(v31, &v31[4 * (v17 >> 2)], v22);
              }
            }
          }
        }
      }
    }
  }
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      abort();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *,false>(unint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  unsigned int v37;
  _BOOL4 v38;
  unsigned __int16 *v39;
  BOOL v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  unsigned __int16 *v48;
  unsigned int v49;
  _BOOL4 v50;
  _BOOL4 v51;
  unsigned __int16 *v52;
  unsigned int v53;
  BOOL v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  int v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unsigned int v61;
  BOOL v62;
  unsigned __int16 *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  int v68;
  unsigned __int16 *v69;
  BOOL v70;
  char v71;
  uint64_t v72;
  unsigned __int16 *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  _BOOL4 v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  BOOL v85;
  BOOL v86;
  unsigned __int16 *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  unsigned __int16 *v92;
  unsigned int v93;
  unsigned int v94;
  _BOOL4 v95;
  unsigned __int16 *v96;
  unsigned int v97;
  BOOL v98;
  uint64_t v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 v108;
  unsigned __int16 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int16 *v121;
  unsigned int v122;
  unsigned int v123;
  _BOOL4 v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int16 *v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  _BOOL4 v136;
  _BOOL4 v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int16 *v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int v143;
  BOOL v144;
  BOOL v145;

  v7 = (unsigned __int16 *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v64 = *(a2 - 4);
        v65 = *v8;
        v66 = v8[1];
        v70 = v64 == v65;
        v67 = v64 < v65;
        if (v70)
          v67 = *(a2 - 3) < v66;
        if (v67)
        {
          v68 = *((_DWORD *)v8 + 1);
          *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
          *(a2 - 4) = v65;
          *(a2 - 3) = v66;
          *((_DWORD *)a2 - 1) = v68;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v8, v8 + 4, a2 - 4);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v8, v8 + 4, v8 + 8, a2 - 4);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v8, v8 + 4, v8 + 8, v8 + 12, a2 - 4);
      default:
        if (v9 <= 191)
        {
          v69 = v8 + 4;
          v70 = v8 == a2 || v69 == a2;
          v71 = v70;
          if ((a4 & 1) != 0)
          {
            if ((v71 & 1) == 0)
            {
              v72 = 0;
              v73 = v8;
              do
              {
                v74 = v73[4];
                v75 = v73[5];
                v76 = *v73;
                v77 = v73[1];
                v73 = v69;
                v78 = v75 < v77;
                v70 = v74 == v76;
                v79 = v74 < v76;
                if (!v70)
                  v78 = v79;
                if (v78)
                {
                  v80 = *(_QWORD *)v73;
                  v81 = (unsigned __int16)*(_QWORD *)v73;
                  v82 = v72;
                  while (1)
                  {
                    v83 = (char *)v8 + v82;
                    *(_QWORD *)((char *)v8 + v82 + 8) = *(_QWORD *)((char *)v8 + v82);
                    if (!v82)
                      break;
                    v84 = *((unsigned __int16 *)v83 - 4);
                    v85 = *((unsigned __int16 *)v83 - 3) > WORD1(v80);
                    v70 = v84 == v81;
                    v86 = v84 > v81;
                    if (!v70)
                      v85 = v86;
                    v82 -= 8;
                    if (!v85)
                    {
                      v87 = (unsigned __int16 *)((char *)v8 + v82 + 8);
                      goto LABEL_105;
                    }
                  }
                  v87 = v8;
LABEL_105:
                  *(_QWORD *)v87 = v80;
                }
                v69 = v73 + 4;
                v72 += 8;
              }
              while (v73 + 4 != a2);
            }
          }
          else if ((v71 & 1) == 0)
          {
            do
            {
              v132 = v7[4];
              v133 = v7[5];
              v134 = *v7;
              v135 = v7[1];
              v7 = v69;
              v136 = v133 < v135;
              v70 = v132 == v134;
              v137 = v132 < v134;
              if (v70)
                v137 = v136;
              if (v137)
              {
                v138 = *(_QWORD *)v69;
                v139 = (unsigned __int16)*(_QWORD *)v69;
                v140 = v7;
                do
                {
                  v141 = v140;
                  v142 = *((_QWORD *)v140 - 1);
                  v140 -= 4;
                  *v141 = v142;
                  v143 = *((unsigned __int16 *)v141 - 8);
                  v144 = *((unsigned __int16 *)v141 - 7) > WORD1(v138);
                  v70 = v143 == v139;
                  v145 = v143 > v139;
                  if (!v70)
                    v144 = v145;
                }
                while (v144);
                *(_QWORD *)v140 = v138;
              }
              v69 = v7 + 4;
            }
            while (v7 + 4 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v88 = (v10 - 2) >> 1;
            v89 = v88;
            do
            {
              v90 = v89;
              if (v88 >= v89)
              {
                v91 = (2 * v89) | 1;
                v92 = &v8[4 * v91];
                if (2 * v90 + 2 >= (uint64_t)v10)
                {
                  v93 = *v92;
                }
                else
                {
                  v93 = *v92;
                  v94 = v92[4];
                  v95 = v92[1] < v92[5];
                  if (v93 != v94)
                    v95 = v93 < v94;
                  if (v95)
                  {
                    v93 = v92[4];
                    v92 += 4;
                    v91 = 2 * v90 + 2;
                  }
                }
                v96 = &v8[4 * v90];
                v97 = *v96;
                v70 = v93 == v97;
                v98 = v93 < v97;
                if (v70)
                  v98 = v92[1] < v8[4 * v90 + 1];
                if (!v98)
                {
                  v99 = *(_QWORD *)v96;
                  do
                  {
                    v100 = v92;
                    *(_QWORD *)v96 = *(_QWORD *)v92;
                    if (v88 < v91)
                      break;
                    v101 = (2 * v91) | 1;
                    v92 = &v8[4 * v101];
                    v91 = 2 * v91 + 2;
                    if (v91 >= (uint64_t)v10)
                    {
                      v102 = *v92;
                      v91 = v101;
                    }
                    else
                    {
                      v102 = *v92;
                      v103 = v92[4];
                      v104 = v92[1] < v92[5];
                      if (v102 != v103)
                        v104 = v102 < v103;
                      if (v104)
                      {
                        v102 = v92[4];
                        v92 += 4;
                      }
                      else
                      {
                        v91 = v101;
                      }
                    }
                    v70 = v102 == (unsigned __int16)v99;
                    v105 = v102 < (unsigned __int16)v99;
                    if (v70)
                      v105 = v92[1] < WORD1(v99);
                    v96 = v100;
                  }
                  while (!v105);
                  *(_QWORD *)v100 = v99;
                }
              }
              v89 = v90 - 1;
            }
            while (v90);
            v106 = (unint64_t)v9 >> 3;
            do
            {
              v107 = 0;
              v108 = *v8;
              v109 = v8[1];
              v110 = *((_DWORD *)v8 + 1);
              v111 = v106 - 2;
              if (v106 < 2)
                v111 = v106 - 1;
              v112 = v111 >> 1;
              v113 = v8;
              do
              {
                v114 = &v113[4 * v107 + 4];
                result = 2 * v107;
                v115 = (2 * v107) | 1;
                v116 = 2 * v107 + 2;
                if (v116 < v106)
                {
                  v117 = *v114;
                  v118 = v114[4];
                  v70 = v117 == v118;
                  LODWORD(result) = v117 < v118;
                  result = v70 ? v114[1] < v114[5] : result;
                  if ((_DWORD)result)
                  {
                    v114 += 4;
                    v115 = v116;
                  }
                }
                *(_QWORD *)v113 = *(_QWORD *)v114;
                v113 = v114;
                v107 = v115;
              }
              while (v115 <= v112);
              if (v114 == a2 - 4)
              {
                *v114 = v108;
                v114[1] = v109;
                *((_DWORD *)v114 + 1) = v110;
              }
              else
              {
                *(_QWORD *)v114 = *((_QWORD *)a2 - 1);
                *(a2 - 4) = v108;
                *(a2 - 3) = v109;
                *((_DWORD *)a2 - 1) = v110;
                v119 = (char *)v114 - (char *)v8 + 8;
                if (v119 >= 9)
                {
                  v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
                  v121 = &v8[4 * v120];
                  v122 = *v121;
                  v123 = *v114;
                  v70 = v122 == v123;
                  v124 = v122 < v123;
                  if (v70)
                    v124 = v121[1] < v114[1];
                  if (v124)
                  {
                    v125 = *(_QWORD *)v114;
                    v126 = (unsigned __int16)*(_QWORD *)v114;
                    do
                    {
                      v127 = v121;
                      *(_QWORD *)v114 = *(_QWORD *)v121;
                      if (!v120)
                        break;
                      v120 = (v120 - 1) >> 1;
                      v121 = &v8[4 * v120];
                      v128 = *v121;
                      v129 = v121[1] < WORD1(v125);
                      v70 = v128 == v126;
                      v130 = v128 < v126;
                      if (!v70)
                        v129 = v130;
                      v114 = v127;
                    }
                    while (v129);
                    *(_QWORD *)v127 = v125;
                  }
                }
              }
              a2 -= 4;
            }
            while (v106-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(&v7[4 * (v10 >> 1)], v7, a2 - 4);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v7, &v7[4 * (v10 >> 1)], a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v7 + 4, v12 - 4, a2 - 8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v7 + 8, &v7[4 * v11 + 4], a2 - 12);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v12 - 4, v12, &v7[4 * v11 + 4]);
          v13 = *(_DWORD *)v7;
          v14 = *((_DWORD *)v7 + 1);
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_DWORD *)v12 = v13;
          *((_DWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 4);
          v16 = *v7;
          v70 = v15 == v16;
          v17 = v15 < v16;
          if (v70)
            v17 = *(v7 - 3) < v7[1];
          if (!v17)
          {
            v41 = *(_QWORD *)v7;
            v42 = (unsigned __int16)*(_QWORD *)v7;
            v43 = WORD1(*(_QWORD *)v7);
            v44 = *(a2 - 4);
            v70 = v44 == v42;
            v45 = v44 > v42;
            if (v70)
              v45 = *(a2 - 3) > WORD1(*(_QWORD *)v7);
            if (v45)
            {
              v8 = v7;
              do
              {
                v46 = v8[4];
                v8 += 4;
                v47 = v46 > v42;
                if (v46 == v42)
                  v47 = v8[1] > v43;
              }
              while (!v47);
            }
            else
            {
              v48 = v7 + 4;
              do
              {
                v8 = v48;
                if (v48 >= a2)
                  break;
                v49 = *v48;
                v50 = v8[1] > v43;
                v70 = v49 == v42;
                v51 = v49 > v42;
                if (!v70)
                  v50 = v51;
                v48 = v8 + 4;
              }
              while (!v50);
            }
            v52 = a2;
            if (v8 < a2)
            {
              v52 = a2;
              do
              {
                v53 = *(v52 - 4);
                v52 -= 4;
                v54 = v53 > v42;
                if (v53 == v42)
                  v54 = v52[1] > v43;
              }
              while (v54);
            }
            if (v8 < v52)
            {
              v55 = *v8;
              do
              {
                v56 = v8[1];
                v57 = *((_DWORD *)v8 + 1);
                *(_QWORD *)v8 = *(_QWORD *)v52;
                *v52 = v55;
                v52[1] = v56;
                *((_DWORD *)v52 + 1) = v57;
                do
                {
                  v58 = v8[4];
                  v8 += 4;
                  v55 = v58;
                  v59 = v8[1] > v43;
                  v60 = v58 > v42;
                  if (v58 != v42)
                    v59 = v60;
                }
                while (!v59);
                do
                {
                  v61 = *(v52 - 4);
                  v52 -= 4;
                  v62 = v61 > v42;
                  if (v61 == v42)
                    v62 = v52[1] > v43;
                }
                while (v62);
              }
              while (v8 < v52);
            }
            v63 = v8 - 4;
            if (v8 - 4 != v7)
              *(_QWORD *)v7 = *(_QWORD *)v63;
            a4 = 0;
            *(_QWORD *)v63 = v41;
            continue;
          }
        }
        v18 = 0;
        v19 = *(_QWORD *)v7;
        v20 = (unsigned __int16)*(_QWORD *)v7;
        v21 = WORD1(*(_QWORD *)v7);
        do
        {
          v22 = v7[v18 + 4];
          v23 = v7[v18 + 5] < v21;
          if (v22 != v20)
            v23 = v22 < v20;
          v18 += 4;
        }
        while (v23);
        v24 = &v7[v18];
        v25 = a2;
        if (v18 == 4)
        {
          v25 = a2;
          do
          {
            if (v24 >= v25)
              break;
            v28 = *(v25 - 4);
            v25 -= 4;
            v29 = v28 < v20;
            if (v28 == v20)
              v29 = v25[1] < v21;
          }
          while (!v29);
        }
        else
        {
          do
          {
            v26 = *(v25 - 4);
            v25 -= 4;
            v27 = v26 < v20;
            if (v26 == v20)
              v27 = v25[1] < v21;
          }
          while (!v27);
        }
        if (v24 >= v25)
        {
          v39 = v24 - 4;
        }
        else
        {
          v30 = v25;
          v31 = v24;
          do
          {
            v32 = v31[1];
            v33 = *((_DWORD *)v31 + 1);
            *(_QWORD *)v31 = *(_QWORD *)v30;
            *v30 = v22;
            v30[1] = v32;
            *((_DWORD *)v30 + 1) = v33;
            do
            {
              v34 = v31[4];
              v31 += 4;
              LOWORD(v22) = v34;
              v35 = v31[1] < v21;
              v36 = v34 < v20;
              if (v34 != v20)
                v35 = v36;
            }
            while (v35);
            do
            {
              v37 = *(v30 - 4);
              v30 -= 4;
              v38 = v37 < v20;
              if (v37 == v20)
                v38 = v30[1] < v21;
            }
            while (!v38);
          }
          while (v31 < v30);
          v39 = v31 - 4;
        }
        if (v39 != v7)
          *(_QWORD *)v7 = *(_QWORD *)v39;
        *(_QWORD *)v39 = v19;
        if (v24 < v25)
        {
LABEL_44:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *,false>(v7, v39, a3, a4 & 1);
          a4 = 0;
          v8 = v39 + 4;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v7, v39);
        v8 = v39 + 4;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PseudoFeature *>(v39 + 4, a2);
        if (!(_DWORD)result)
        {
          if (v40)
            continue;
          goto LABEL_44;
        }
        a2 = v39;
        if (!v40)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t TCFBase<TTypesetter>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TTypesetter>::CreateTypeID(void)::runtimeClass = 0;
    unk_1ECDE71B0 = "CTTypesetter";
    qword_1ECDE71B8 = 0;
    unk_1ECDE71C0 = 0;
    qword_1ECDE71C8 = (uint64_t)TCFBase<TTypesetter>::ClassDestruct;
    unk_1ECDE71D0 = TCFBase<TTypesetter>::ClassEqual;
    qword_1ECDE71D8 = (uint64_t)TCFBase<TTypesetter>::ClassHash;
    unk_1ECDE71E0 = 0;
    qword_1ECDE71E8 = (uint64_t)TCFBase<TTypesetter>::ClassDebug;
    unk_1ECDE71F0 = 0;
    qword_1ECDE71F8 = 0;
    unk_1ECDE7200 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TTypesetter>::fTypeID = result;
  return result;
}

dispatch_queue_t ___ZL32CTFontDescriptorGetMatchingQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.CoreText.fontdescriptorMatching", 0);
  qword_1ECDE7E50 = (uint64_t)result;
  return result;
}

void GetLanguageAwareOutsetIndexForFontName(__CFString const*,double &,double &,double &,double &,__CFString const*)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  int64x2_t v2;
  uint64_t v3;
  int64x2_t v4;
  unint64_t v5;
  id v6;
  const void *__b[598];

  MEMORY[0x1E0C80A78](a1, a2);
  memset(__b, 170, sizeof(__b));
  v2 = (int64x2_t)xmmword_1849245B0;
  v3 = 0x1FFFFFFFFFFFFDAALL;
  v4 = vdupq_n_s64(2uLL);
  do
  {
    *(int64x2_t *)&__b[v3 + 598] = v2;
    v2 = vaddq_s64(v2, v4);
    v3 += 2;
  }
  while (v3 * 8);
  v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kPSFontNames, __b, 598, MEMORY[0x1E0C9B390], 0);
  do
    v5 = __ldaxr((unint64_t *)&v6);
  while (__stlxr(0, (unint64_t *)&v6));
  _MergedGlobals_3 = v5;

}

void CreateTraitsWithVariation(CFDictionaryRef theDict@<X0>, const __CFDictionary *a2@<X1>, const __CFArray *a3@<X2>, const TBaseFont *a4@<X3>, unint64_t *a5@<X4>, unint64_t *a6@<X5>, unint64_t *a7@<X8>)
{
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  double v13;
  double v14;
  double v15;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  double v18;
  double v19;
  double v20;
  const __CFNumber *v21;
  _BOOL4 v22;
  double v23;
  unsigned int v24;
  char v25;
  char v26;
  const __CFDictionary *v27;
  char v28;
  CGFont *v29;
  uint64_t TraitsFromSubfamilyName;
  _BOOL4 v31;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  __CFDictionary *v37;
  const void *v38;
  unsigned int v39;
  __CFDictionary *v40;
  const void *v41;
  __CFDictionary *v42;
  const void *v43;
  _BOOL4 v44;
  __CFDictionary *v45;
  const void *v46;
  unint64_t v47;
  CFDictionaryRef theDicta;
  unsigned int SymbolicTraitsFromTraits;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  double v58;
  double v59;
  id v60;
  id valuePtr[2];

  if (!a3)
  {
    *a7 = (unint64_t)theDict;
    return;
  }
  v60 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v60, theDict);
  theDicta = theDict;
  SymbolicTraitsFromTraits = GetSymbolicTraitsFromTraits(theDict);
  Count = CFArrayGetCount(a3);
  if (Count)
  {
    v11 = Count;
    v54 = 0;
    v55 = 0;
    v57 = 0;
    v12 = 0;
    v13 = NAN;
    v14 = NAN;
    v15 = NAN;
    v56 = -1431655936;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v12);
      Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
      LODWORD(valuePtr[0]) = -1431655766;
      CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
      if (SLODWORD(valuePtr[0]) > 2003072103)
      {
        if (LODWORD(valuePtr[0]) == 2003072104)
        {
          DetermineVariationValue(2003072104, a2, ValueAtIndex, 0, a6);
          v14 = v23;
          LOBYTE(v55) = 1;
        }
        else if (LODWORD(valuePtr[0]) == 2003265652)
        {
          DetermineVariationValue(2003265652, a2, ValueAtIndex, a5, 0);
          v13 = v19;
          v54 = 1;
        }
      }
      else if (LODWORD(valuePtr[0]) == 1769234796)
      {
        valuePtr[0] = (id)-1;
        v20 = 0.0;
        if (a2)
        {
          v21 = (const __CFNumber *)CFDictionaryGetValue(a2, Value);
          if (v21)
          {
            CFNumberGetValue(v21, kCFNumberDoubleType, valuePtr);
            v20 = *(double *)valuePtr;
          }
        }
        v22 = v20 <= 1.0 && v20 > 0.0;
        v56 = v22;
        v57 = 1;
      }
      else if (LODWORD(valuePtr[0]) == 1936486004)
      {
        DetermineVariationValue(1936486004, a2, ValueAtIndex, 0, 0);
        v15 = v18;
        BYTE4(v55) = 1;
      }
      ++v12;
    }
    while (v11 != v12);
  }
  else
  {
    v55 = 0;
    v54 = 0;
    v15 = NAN;
    v14 = NAN;
    v56 = -1431655936;
    v57 = 0;
    v13 = NAN;
  }
  if (((*(uint64_t (**)(const TBaseFont *))(*(_QWORD *)a4 + 704))(a4) & 1) != 0)
  {
    v24 = SymbolicTraitsFromTraits;
    v26 = v55;
    v25 = BYTE4(v55);
    v27 = theDicta;
    v28 = v54;
  }
  else
  {
    v29 = (CGFont *)(*(uint64_t (**)(const TBaseFont *))(*(_QWORD *)a4 + 568))(a4);
    v24 = SymbolicTraitsFromTraits;
    v26 = v55;
    v25 = BYTE4(v55);
    v27 = theDicta;
    v28 = v54;
    if (IsNamedInstance(v29))
    {
      if (v54 && (_BYTE)v55 && BYTE4(v55))
      {
        v26 = 1;
        v25 = 1;
        goto LABEL_58;
      }
      valuePtr[0] = (id)-1;
      v58 = NAN;
      v59 = NAN;
      TraitsFromSubfamilyName = GetTraitsFromSubfamilyName(a4, v54 != 0, v55 != 0, BYTE4(v55) != 0, (double *)valuePtr, &v59, &v58);
      if ((_BYTE)TraitsFromSubfamilyName)
        v31 = v54 != 0;
      else
        v31 = 1;
      if (!v31)
      {
        v13 = *(double *)valuePtr;
        v28 = 1;
      }
      if ((TraitsFromSubfamilyName & 0xFF00) != 0 && v55 == 0)
      {
        v14 = v59;
        v26 = 1;
      }
      if ((TraitsFromSubfamilyName & 0xFFFFFF) >= 0x10000 && BYTE4(v55) == 0)
      {
        v15 = v58;
        v25 = 1;
      }
    }
  }
  if (!v27)
    goto LABEL_57;
  if (v28)
    goto LABEL_48;
  v34 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("NSCTFontWeightTrait"));
  if (v34)
  {
    valuePtr[0] = (id)-1;
    CFNumberGetValue(v34, kCFNumberDoubleType, valuePtr);
    v13 = *(double *)valuePtr;
LABEL_48:
    v28 = 1;
    goto LABEL_49;
  }
  v28 = 0;
  v13 = 0.0;
LABEL_49:
  if (!v26)
  {
    v35 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("NSCTFontProportionTrait"));
    if (!v35)
    {
      v26 = 0;
      v14 = 0.0;
      goto LABEL_53;
    }
    valuePtr[0] = (id)-1;
    CFNumberGetValue(v35, kCFNumberDoubleType, valuePtr);
    v14 = *(double *)valuePtr;
  }
  v26 = 1;
LABEL_53:
  if (v25)
  {
LABEL_56:
    v25 = 1;
    goto LABEL_57;
  }
  v36 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("NSCTFontSlantTrait"));
  if (v36)
  {
    valuePtr[0] = (id)-1;
    CFNumberGetValue(v36, kCFNumberDoubleType, valuePtr);
    v15 = *(double *)valuePtr;
    goto LABEL_56;
  }
  v25 = 0;
  v15 = 0.0;
LABEL_57:
  if (!v28)
  {
    v39 = v24;
    goto LABEL_62;
  }
LABEL_58:
  TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v13);
  v37 = (__CFDictionary *)atomic_load((unint64_t *)&v60);
  v38 = (const void *)atomic_load((unint64_t *)valuePtr);
  CFDictionarySetValue(v37, CFSTR("NSCTFontWeightTrait"), v38);

  if (v13 <= 0.239)
    v39 = v24 & 0xFFFFFFFD;
  else
    v39 = v24 | 2;
LABEL_62:
  if (v26)
  {
    TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v14);
    v40 = (__CFDictionary *)atomic_load((unint64_t *)&v60);
    v41 = (const void *)atomic_load((unint64_t *)valuePtr);
    CFDictionarySetValue(v40, CFSTR("NSCTFontProportionTrait"), v41);

    if (v14 <= 0.15)
    {
      if (v14 < -0.15)
        v39 = v39 & 0xFFFFFF9F | 0x40;
    }
    else
    {
      v39 = v39 & 0xFFFFFF9F | 0x20;
    }
  }
  if (v25)
  {
    TCFNumber::TCFNumber<double>((unint64_t *)valuePtr, v15);
    v42 = (__CFDictionary *)atomic_load((unint64_t *)&v60);
    v43 = (const void *)atomic_load((unint64_t *)valuePtr);
    CFDictionarySetValue(v42, CFSTR("NSCTFontSlantTrait"), v43);

    v44 = v56;
    if (!v57)
      v44 = fabs(v15) > 0.000001;
    goto LABEL_71;
  }
  v44 = v56;
  if (v57)
  {
LABEL_71:
    if (v44)
      v39 |= 1u;
    else
      v39 &= ~1u;
  }
  if (v39 != v24)
  {
    TCFNumber::TCFNumber<unsigned int>((unint64_t *)valuePtr, v39);
    v45 = (__CFDictionary *)atomic_load((unint64_t *)&v60);
    v46 = (const void *)atomic_load((unint64_t *)valuePtr);
    CFDictionarySetValue(v45, CFSTR("NSCTFontSymbolicTrait"), v46);

  }
  do
    v47 = __ldaxr((unint64_t *)&v60);
  while (__stlxr(0, (unint64_t *)&v60));
  *a7 = v47;

}

void DetermineVariationValue(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, unint64_t *a4, unint64_t *a5)
{
  int v9;
  const void *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  unsigned int v16;
  double v17;
  unsigned int v18;
  float v19;
  float v20;
  double v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  uint64_t v27;
  id v28;
  double v29;
  double valuePtr;

  v9 = a1;
  v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  if (!a2 || (Value = (const __CFNumber *)CFDictionaryGetValue(a2, v10)) == 0)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTVariationAxisDefaultValue"));
    if (!Value)
      return;
  }
  valuePtr = 0.0;
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  if (v9 == 1936486004)
    return;
  v29 = NAN;
  if (a3)
    v12 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTVariationAxisMinimumValue"));
  else
    v12 = 0;
  CFNumberGetValue(v12, kCFNumberDoubleType, &v29);
  if (v9 != 2003072104)
  {
    if (v9 == 2003265652 && round(v29) > 0.0)
    {
      v13 = llround(valuePtr);
      if (a4)
      {
        LODWORD(v27) = v13;
        v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v27);
        do
          v14 = __ldaxr((unint64_t *)&v28);
        while (__stlxr(0, (unint64_t *)&v28));
        do
          v15 = (void *)__ldaxr(a4);
        while (__stlxr(v14, a4));

      }
      if (v13 >= 0x3E8)
        v16 = 1000;
      else
        v16 = v13;
      WeightOfClass(v16);
      return;
    }
LABEL_30:
    v27 = -1;
    v28 = (id)-1;
    if (a3)
    {
      v25 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTVariationAxisMaximumValue"));
      CFNumberGetValue(v25, kCFNumberDoubleType, &v28);
      v26 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("NSCTVariationAxisDefaultValue"));
    }
    else
    {
      CFNumberGetValue(0, kCFNumberDoubleType, &v28);
      v26 = 0;
    }
    CFNumberGetValue(v26, kCFNumberDoubleType, &v27);
    return;
  }
  if (round(v29) <= 0.0)
    goto LABEL_30;
  v17 = (double)llround(valuePtr);
  v18 = IndexesBracketing<float const*,double>(kWidthPercentScale, &kWidthPercentScale[11], v17, 0.001);
  v19 = kWidthPercentScale[(unsigned __int16)v18];
  v20 = kWidthPercentScale[HIWORD(v18)];
  v21 = 0.0;
  if (v19 != v20)
    v21 = (v17 - v19) / (v20 - v19);
  v22 = llround(std::__lerp[abi:nn180100]<double>((double)(unsigned __int16)v18, (double)HIWORD(v18), v21));
  if (a5)
  {
    LODWORD(v27) = v22;
    v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v27);
    do
      v23 = __ldaxr((unint64_t *)&v28);
    while (__stlxr(0, (unint64_t *)&v28));
    do
      v24 = (void *)__ldaxr(a5);
    while (__stlxr(v23, a5));

  }
}

unsigned int ClassOfWidth(double a1)
{
  unsigned int v2;
  float v3;
  float v4;
  double v5;
  float v6;

  v2 = IndexesBracketing<float const*,double>(kWidthScale, kWidthPercentScale, a1, 0.001);
  v3 = kWidthScale[(unsigned __int16)v2];
  v4 = kWidthScale[HIWORD(v2)];
  v5 = 0.0;
  if (v3 != v4)
  {
    v6 = (a1 - v3) / (v4 - v3);
    v5 = v6;
  }
  return llround(std::__lerp[abi:nn180100]<double>((double)(unsigned __int16)v2, (double)HIWORD(v2), v5));
}

uint64_t IndexesBracketing<float const*,double>(float *a1, float *a2, double a3, double a4)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  float *v7;
  double v8;
  double v9;

  if ((char *)a2 - (char *)a1 >= 8 && *a1 <= a3)
  {
    if (*(a2 - 1) <= a3)
    {
      v4 = ((unint64_t)((char *)a2 - (char *)a1) >> 2) - 1;
    }
    else
    {
      v7 = a1 + 1;
      if (a1 + 1 == a2)
      {
        v4 = 0;
        v5 = 1;
        return v4 | (v5 << 16);
      }
      v4 = 0;
      v5 = 1;
      while (1)
      {
        v8 = *(v7 - 1);
        if (vabdd_f64(a3, v8) < a4)
          break;
        v9 = *v7;
        if (vabdd_f64(a3, v9) < a4)
        {
          v4 = v5;
          return v4 | (v5 << 16);
        }
        if (v8 >= a3 || v9 <= a3)
        {
          ++v4;
          ++v5;
          if (++v7 != a2)
            continue;
        }
        return v4 | (v5 << 16);
      }
    }
    v5 = v4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (v5 << 16);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::PathObserver::Intersection *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  BOOL v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  int v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  __int128 *v83;
  int v84;
  __int128 v85;

LABEL_1:
  v8 = a2 - 1;
  v82 = (uint64_t)(a2 - 2);
  v83 = a2;
  v9 = (uint64_t)(a2 - 3);
  v10 = (__int128 *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        {
          v32 = *(_QWORD *)a1;
          v33 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *v8;
          *((_QWORD *)a2 - 2) = v32;
          *((_QWORD *)a2 - 1) = v33;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v34 = (__int128 *)(a1 + 16);
        v35 = (__int128 *)(a1 + 32);
        v36 = (__int128 *)(a1 + 48);
        {
          v37 = *(_QWORD *)(a1 + 48);
          v38 = *(_QWORD *)(a1 + 56);
          *v36 = *v8;
          *((_QWORD *)a2 - 2) = v37;
          *((_QWORD *)a2 - 1) = v38;
          {
            v39 = *(_QWORD *)(a1 + 32);
            v40 = *(_QWORD *)(a1 + 40);
            *v35 = *v36;
            *(_QWORD *)(a1 + 48) = v39;
            *(_QWORD *)(a1 + 56) = v40;
            {
              v41 = *(_QWORD *)(a1 + 16);
              v42 = *(_QWORD *)(a1 + 24);
              *v34 = *v35;
              *(_QWORD *)(a1 + 32) = v41;
              *(_QWORD *)(a1 + 40) = v42;
              {
                v43 = *(_QWORD *)a1;
                v44 = *(_QWORD *)(a1 + 8);
                *(_OWORD *)a1 = *v34;
                *(_QWORD *)(a1 + 16) = v43;
                *(_QWORD *)(a1 + 24) = v44;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 383)
        {
          v45 = a1 + 16;
          v46 = (__int128 *)a1 == a2 || v45 == (_QWORD)a2;
          v47 = v46;
          if ((a4 & 1) != 0)
          {
            if ((v47 & 1) == 0)
            {
              v48 = 0;
              v49 = (__int128 *)a1;
              do
              {
                v50 = (uint64_t)v49;
                v49 = (__int128 *)v45;
                {
                  v85 = *v49;
                  v51 = v48;
                  while (1)
                  {
                    *(_OWORD *)(a1 + v51 + 16) = *(_OWORD *)(a1 + v51);
                    if (!v51)
                      break;
                    v51 -= 16;
                    {
                      v52 = (_OWORD *)(a1 + v51 + 16);
                      goto LABEL_77;
                    }
                  }
                  v52 = (_OWORD *)a1;
LABEL_77:
                  *v52 = v85;
                  a2 = v83;
                }
                v45 = (uint64_t)(v49 + 1);
                v48 += 16;
              }
              while (v49 + 1 != a2);
            }
          }
          else if ((v47 & 1) == 0)
          {
            v78 = a1 - 16;
            do
            {
              v79 = a1;
              a1 = v45;
              {
                v85 = *(_OWORD *)a1;
                v80 = v78;
                do
                {
                  *(_OWORD *)(v80 + 32) = *(_OWORD *)(v80 + 16);
                  v80 -= 16;
                }
                while (v81);
                *(_OWORD *)(v80 + 32) = v85;
              }
              v45 = a1 + 16;
              v78 += 16;
            }
            while ((__int128 *)(a1 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v53 = (unint64_t)(v12 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (__int128 *)(a1 + 16 * v56);
                if (2 * v54 + 2 < v12
                {
                  ++v57;
                  v56 = 2 * v55 + 2;
                }
                v58 = (__int128 *)(a1 + 16 * v55);
                {
                  v85 = *v58;
                  do
                  {
                    v59 = v57;
                    *v58 = *v57;
                    if (v53 < v56)
                      break;
                    v60 = (2 * v56) | 1;
                    v57 = (__int128 *)(a1 + 16 * v60);
                    v61 = 2 * v56 + 2;
                    if (v61 < v12
                    {
                      ++v57;
                      v60 = v61;
                    }
                    v58 = v59;
                    v56 = v60;
                  }
                  *v59 = v85;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v62 = (unint64_t)v11 >> 4;
            v63 = v83;
            do
            {
              v64 = 0;
              v65 = v63;
              v66 = *(_QWORD *)a1;
              v67 = *(_DWORD *)(a1 + 12);
              v84 = *(_DWORD *)(a1 + 8);
              v68 = (_OWORD *)a1;
              do
              {
                v69 = (uint64_t)&v68[v64 + 1];
                v70 = (2 * v64) | 1;
                v71 = 2 * v64 + 2;
                if (v71 < v62
                {
                  v69 += 16;
                  v70 = v71;
                }
                *v68 = *(_OWORD *)v69;
                v68 = (_OWORD *)v69;
                v64 = v70;
              }
              while (v70 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              --v63;
              if ((__int128 *)v69 == v65 - 1)
              {
                *(_QWORD *)v69 = v66;
                *(_DWORD *)(v69 + 8) = v84;
                *(_DWORD *)(v69 + 12) = v67;
              }
              else
              {
                *(_OWORD *)v69 = *v63;
                *((_QWORD *)v65 - 2) = v66;
                *((_DWORD *)v65 - 2) = v84;
                *((_DWORD *)v65 - 1) = v67;
                v72 = v69 - a1 + 16;
                if (v72 >= 17)
                {
                  v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                  v74 = (__int128 *)(a1 + 16 * v73);
                  {
                    v75 = v63;
                    v85 = *(_OWORD *)v69;
                    do
                    {
                      v76 = v74;
                      *(_OWORD *)v69 = *v74;
                      if (!v73)
                        break;
                      v73 = (v73 - 1) >> 1;
                      v74 = (__int128 *)(a1 + 16 * v73);
                      v69 = (uint64_t)v76;
                    }
                    *v76 = v85;
                    v63 = v75;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = a1 + 16 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x801)
        {
        }
        else
        {
          v15 = *(_QWORD *)a1;
          v16 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)v14 = v15;
          *(_QWORD *)(v14 + 8) = v16;
        }
        a2 = v83;
        --a3;
        if ((a4 & 1) == 0
        {
          v85 = *(_OWORD *)a1;
          {
            v10 = (__int128 *)a1;
            do
              ++v10;
          }
          else
          {
            v26 = a1 + 16;
            do
            {
              v10 = (__int128 *)v26;
              if (v26 >= (unint64_t)v83)
                break;
              v26 = (unint64_t)(v10 + 1);
            }
            while (!v27);
          }
          v28 = (unint64_t)v83;
          if (v10 < v83)
          {
            v28 = (unint64_t)v83;
            do
              v28 -= 16;
          }
          while ((unint64_t)v10 < v28)
          {
            v29 = *(_QWORD *)v10;
            v30 = *((_QWORD *)v10 + 1);
            *v10 = *(_OWORD *)v28;
            *(_QWORD *)v28 = v29;
            *(_QWORD *)(v28 + 8) = v30;
            do
              ++v10;
            do
              v28 -= 16;
          }
          v31 = v10 - 1;
          if (v10 - 1 != (__int128 *)a1)
            *(_OWORD *)a1 = *v31;
          a4 = 0;
          *v31 = v85;
          continue;
        }
        v17 = 0;
        v85 = *(_OWORD *)a1;
        do
          v17 += 16;
        v18 = (uint64_t *)(a1 + v17);
        v19 = (unint64_t)v83;
        v46 = v17 == 16;
        a2 = v83;
        if (v46)
        {
          v19 = (unint64_t)v83;
          do
          {
            if ((unint64_t)v18 >= v19)
              break;
            v19 -= 16;
          }
        }
        else
        {
          do
            v19 -= 16;
        }
        if ((unint64_t)v18 >= v19)
        {
          v24 = (__int128 *)(v18 - 2);
        }
        else
        {
          v20 = v19;
          v21 = v18;
          do
          {
            v22 = *v21;
            v23 = v21[1];
            *(_OWORD *)v21 = *(_OWORD *)v20;
            *(_QWORD *)v20 = v22;
            *(_QWORD *)(v20 + 8) = v23;
            do
              v21 += 2;
            do
              v20 -= 16;
          }
          while ((unint64_t)v21 < v20);
          v24 = (__int128 *)(v21 - 2);
        }
        if (v24 != (__int128 *)a1)
          *(_OWORD *)a1 = *v24;
        *v24 = v85;
        if ((unint64_t)v18 < v19)
        {
LABEL_31:
          a4 = 0;
          v10 = v24 + 1;
          continue;
        }
        v10 = v24 + 1;
        {
          if (v25)
            continue;
          goto LABEL_31;
        }
        a2 = v24;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned __int16 **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v120 = *(a2 - 6);
        v121 = *(a2 - 5);
        v122 = (uint64_t)(a2 - 6);
        v123 = *a1;
        v124 = v121 - v120;
        v125 = (char *)a1[1] - (char *)*a1;
        if (v124 > v125 >> 1)
          goto LABEL_152;
        v242 = v125 >> 1;
        if (v121 == v120 || v124 < v242)
          return;
        while (1)
        {
          v244 = *v120;
          v245 = *v123;
          if (v244 != v245)
            break;
          ++v120;
          ++v123;
          if (!--v124)
            return;
        }
        if (v244 <= v245)
LABEL_152:
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        return;
      default:
        if (v9 <= 1151)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v126 = a1 + 6;
              if (a1 + 6 != a2)
              {
                v127 = a1;
                do
                {
                  v128 = v127;
                  v127 = v126;
                  v129 = v128[6];
                  v130 = v127[1];
                  v131 = (char *)*v128;
                  v132 = v130 - v129;
                  v133 = (char *)v128[1] - (char *)*v128;
                  if (v132 > v133 >> 1)
                    goto LABEL_161;
                  v146 = v133 >> 1;
                  if (v130 != v129 && v132 >= v146)
                  {
                    while (1)
                    {
                      v148 = *v129;
                      v149 = *(unsigned __int16 *)v131;
                      if (v148 != v149)
                        break;
                      ++v129;
                      v131 += 2;
                      if (!--v132)
                        goto LABEL_186;
                    }
                    if (v148 <= v149)
                    {
LABEL_161:
                      *(_QWORD *)&v134 = 0xAAAAAAAAAAAAAAAALL;
                      *((_QWORD *)&v134 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      v273 = v134;
                      v274 = v134;
                      v272 = v134;
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, v128[6], v128[7]);
                      WORD4(v274) = *((_WORD *)v128 + 44);
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v127, (char *)*v128, (uint64_t)v128[1], v128[1] - *v128);
                      *((_WORD *)v127 + 20) = *((_WORD *)v128 + 20);
                      v135 = a1;
                      if (v128 != a1)
                      {
                        v136 = v128;
                        while (1)
                        {
                          v137 = (char *)*(v136 - 6);
                          v138 = (uint64_t)*(v136 - 5);
                          v136 -= 6;
                          v139 = (unsigned __int16 *)v272;
                          v140 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                          v141 = (v138 - (uint64_t)v137) >> 1;
                          if (v140 <= v141)
                          {
                            if (*((_QWORD *)&v272 + 1) == (_QWORD)v272 || v140 < v141)
                              break;
                            v143 = v137;
                            while (1)
                            {
                              v144 = *v139;
                              v145 = *(unsigned __int16 *)v143;
                              if (v144 != v145)
                                break;
                              ++v139;
                              v143 += 2;
                              if (!--v140)
                                goto LABEL_184;
                            }
                            if (v144 > v145)
                              break;
                          }
                          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v128, v137, v138, v141);
                          *((_WORD *)v128 + 20) = *((_WORD *)v128 - 4);
                          v128 = v136;
                          if (v136 == a1)
                          {
                            v135 = a1;
                            goto LABEL_185;
                          }
                        }
LABEL_184:
                        v135 = v128;
                      }
LABEL_185:
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v135, (char *)v272, *((uint64_t *)&v272 + 1), (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1);
                      *((_WORD *)v135 + 20) = WORD4(v274);
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
                    }
                  }
LABEL_186:
                  v126 = v127 + 6;
                }
                while (v127 + 6 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
LABEL_326:
            while (a1 + 6 != a2)
            {
              v246 = a1;
              a1 += 6;
              v247 = v246[6];
              v248 = a1[1];
              v249 = *v246;
              v250 = v248 - v247;
              v251 = (char *)v246[1] - (char *)*v246;
              if (v250 <= v251 >> 1)
              {
                v266 = v251 >> 1;
                if (v248 == v247 || v250 < v266)
                  continue;
                while (1)
                {
                  v268 = *v247;
                  v269 = *v249;
                  if (v268 != v269)
                    break;
                  ++v247;
                  ++v249;
                  if (!--v250)
                    goto LABEL_326;
                }
                if (v268 > v269)
                  continue;
              }
              *(_QWORD *)&v252 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v252 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v273 = v252;
              v274 = v252;
              v272 = v252;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *a1, v246[7]);
              WORD4(v274) = *((_WORD *)v246 + 44);
              v253 = (char *)*v246;
              v254 = a1;
              do
              {
                do
                {
                  v255 = v254;
                  v254 = v246;
                  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v255, v253, (uint64_t)v246[1], ((char *)v246[1] - v253) >> 1);
                  v256 = (char *)*(v246 - 6);
                  v246 -= 6;
                  v253 = v256;
                  *((_WORD *)v255 + 20) = *((_WORD *)v246 + 44);
                  v257 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                  v258 = (char *)v246[1] - v256;
                }
                while (v257 > v258 >> 1);
                v259 = v258 >> 1;
                if (*((_QWORD *)&v272 + 1) == (_QWORD)v272 || v257 < v259)
                  break;
                v261 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                v262 = v253;
                v263 = (unsigned __int16 *)v272;
                while (1)
                {
                  v264 = *v263;
                  v265 = *(unsigned __int16 *)v262;
                  if (v264 != v265)
                    break;
                  ++v263;
                  v262 += 2;
                  if (!--v261)
                    goto LABEL_316;
                }
              }
              while (v264 <= v265);
LABEL_316:
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v254, (char *)v272, *((uint64_t *)&v272 + 1), v257);
              *((_WORD *)v254 + 20) = WORD4(v274);
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v150 = (unint64_t)(v10 - 2) >> 1;
            v151 = v150;
            do
            {
              v152 = v151;
              if (v150 >= v151)
              {
                v153 = (2 * v151) | 1;
                v154 = (char **)&a1[6 * v153];
                if (2 * v151 + 2 < v10)
                {
                  v155 = v154[6];
                  v156 = *v154;
                  v157 = v154[1];
                  v158 = (v157 - *v154) >> 1;
                  v159 = v154[7] - v155;
                  if (v158 > v159 >> 1)
                    goto LABEL_195;
                  v160 = v159 >> 1;
                  if (v157 != v156 && v158 >= v160)
                  {
                    while (1)
                    {
                      v162 = *(unsigned __int16 *)v156;
                      v163 = *(unsigned __int16 *)v155;
                      if (v162 != v163)
                        break;
                      v156 += 2;
                      v155 += 2;
                      if (!--v158)
                        goto LABEL_205;
                    }
                    if (v162 <= v163)
                    {
LABEL_195:
                      v154 += 6;
                      v153 = 2 * v151 + 2;
                    }
                  }
                }
LABEL_205:
                v164 = &a1[6 * v151];
                v165 = (unsigned __int16 *)*v154;
                v166 = (unsigned __int16 *)v154[1];
                v167 = *v164;
                v168 = ((char *)v166 - *v154) >> 1;
                v169 = (char *)v164[1] - (char *)*v164;
                if (v168 <= v169 >> 1)
                {
                  v170 = v169 >> 1;
                  if (v166 == v165 || v168 < v170)
                    goto LABEL_215;
                  while (1)
                  {
                    v172 = *v165;
                    v173 = *v167;
                    if (v172 != v173)
                      break;
                    ++v165;
                    ++v167;
                    if (!--v168)
                      goto LABEL_215;
                  }
                  if (v172 > v173)
                  {
LABEL_215:
                    *(_QWORD *)&v174 = 0xAAAAAAAAAAAAAAAALL;
                    *((_QWORD *)&v174 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    v273 = v174;
                    v274 = v174;
                    v272 = v174;
                    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *v164, v164[1]);
                    v175 = &a1[6 * v152];
                    WORD4(v274) = *((_WORD *)v175 + 20);
                    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v175, *v154, (uint64_t)v154[1], (v154[1] - *v154) >> 1);
                    *((_WORD *)v175 + 20) = *((_WORD *)v154 + 20);
                    while (v150 >= v153)
                    {
                      v176 = v154;
                      v177 = 2 * v153;
                      v153 = (2 * v153) | 1;
                      v154 = (char **)&a1[6 * v153];
                      v178 = v177 + 2;
                      if (v178 < v10)
                      {
                        v179 = v154[6];
                        v180 = *v154;
                        v181 = v154[1];
                        v182 = (v181 - *v154) >> 1;
                        v183 = v154[7] - v179;
                        if (v182 > v183 >> 1)
                          goto LABEL_219;
                        v184 = v183 >> 1;
                        if (v181 != v180 && v182 >= v184)
                        {
                          while (1)
                          {
                            v186 = *(unsigned __int16 *)v180;
                            v187 = *(unsigned __int16 *)v179;
                            if (v186 != v187)
                              break;
                            v180 += 2;
                            v179 += 2;
                            if (!--v182)
                              goto LABEL_229;
                          }
                          if (v186 <= v187)
                          {
LABEL_219:
                            v154 += 6;
                            v153 = v178;
                          }
                        }
                      }
LABEL_229:
                      v188 = *v154;
                      v189 = (uint64_t)v154[1];
                      v190 = (unsigned __int16 *)v272;
                      v191 = (v189 - (uint64_t)*v154) >> 1;
                      if (v191 > (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1)
                        goto LABEL_241;
                      if ((char *)v189 != v188 && v191 >= (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1)
                      {
                        v193 = (v189 - (uint64_t)*v154) >> 1;
                        v194 = *v154;
                        while (1)
                        {
                          v195 = *(unsigned __int16 *)v194;
                          v196 = *v190;
                          if (v195 != v196)
                            break;
                          v194 += 2;
                          ++v190;
                          if (!--v193)
                            goto LABEL_240;
                        }
                        if (v195 <= v196)
                        {
LABEL_241:
                          v154 = v176;
                          break;
                        }
                      }
LABEL_240:
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v176, v188, v189, v191);
                      *((_WORD *)v176 + 20) = *((_WORD *)v154 + 20);
                    }
                    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v154, (char *)v272, *((uint64_t *)&v272 + 1), (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1);
                    *((_WORD *)v154 + 20) = WORD4(v274);
                    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
                  }
                }
              }
              v151 = v152 - 1;
            }
            while (v152);
            v197 = v9 / 0x30uLL;
            do
            {
              v198 = a2;
              *(_QWORD *)&v199 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v199 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v270[1] = v199;
              v271 = v199;
              v270[0] = v199;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)v270, *a1, a1[1]);
              v200 = 0;
              WORD4(v271) = *((_WORD *)a1 + 20);
              v201 = (char **)a1;
              do
              {
                v202 = (char *)v201;
                v201 += 6 * v200 + 6;
                v203 = 2 * v200;
                v200 = (2 * v200) | 1;
                v204 = v203 + 2;
                if (v204 < v197)
                {
                  v205 = v201[6];
                  v206 = *v201;
                  v207 = v201[1];
                  v208 = (v207 - *v201) >> 1;
                  v209 = v201[7] - v205;
                  if (v208 > v209 >> 1)
                    goto LABEL_248;
                  v210 = v209 >> 1;
                  if (v207 != v206 && v208 >= v210)
                  {
                    while (1)
                    {
                      v212 = *(unsigned __int16 *)v206;
                      v213 = *(unsigned __int16 *)v205;
                      if (v212 != v213)
                        break;
                      v206 += 2;
                      v205 += 2;
                      if (!--v208)
                        goto LABEL_258;
                    }
                    if (v212 <= v213)
                    {
LABEL_248:
                      v201 += 6;
                      v200 = v204;
                    }
                  }
                }
LABEL_258:
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(v202, *v201, (uint64_t)v201[1], (v201[1] - *v201) >> 1);
                *((_WORD *)v202 + 20) = *((_WORD *)v201 + 20);
              }
              while (v200 <= (uint64_t)((unint64_t)(v197 - 2) >> 1));
              a2 = v198 - 6;
              if (v201 == (char **)(v198 - 6))
              {
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v201, *(char **)&v270[0], *((uint64_t *)&v270[0] + 1), (uint64_t)(*((_QWORD *)&v270[0] + 1) - *(_QWORD *)&v270[0]) >> 1);
                *((_WORD *)v201 + 20) = WORD4(v271);
              }
              else
              {
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v201, (char *)*(v198 - 6), (uint64_t)*(v198 - 5), *(v198 - 5) - *(v198 - 6));
                *((_WORD *)v201 + 20) = *((_WORD *)v198 - 4);
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v198 - 48, *(char **)&v270[0], *((uint64_t *)&v270[0] + 1), (uint64_t)(*((_QWORD *)&v270[0] + 1) - *(_QWORD *)&v270[0]) >> 1);
                *((_WORD *)v198 - 4) = WORD4(v271);
                v214 = (char *)v201 - (char *)a1 + 48;
                if (v214 >= 49)
                {
                  v215 = v214 / 0x30uLL - 2;
                  v216 = v215 >> 1;
                  v217 = &a1[6 * (v215 >> 1)];
                  v218 = (char *)*v217;
                  v219 = (char *)v217[1];
                  v220 = *v201;
                  v221 = (v219 - (char *)*v217) >> 1;
                  v222 = v201[1] - *v201;
                  if (v221 > v222 >> 1)
                    goto LABEL_262;
                  v238 = v222 >> 1;
                  if (v219 != v218 && v221 >= v238)
                  {
                    while (1)
                    {
                      v240 = *(unsigned __int16 *)v218;
                      v241 = *(unsigned __int16 *)v220;
                      if (v240 != v241)
                        break;
                      v218 += 2;
                      v220 += 2;
                      if (!--v221)
                        goto LABEL_267;
                    }
                    if (v240 <= v241)
                    {
LABEL_262:
                      *(_QWORD *)&v223 = 0xAAAAAAAAAAAAAAAALL;
                      *((_QWORD *)&v223 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      v273 = v223;
                      v274 = v223;
                      v272 = v223;
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *v201, v201[1]);
                      WORD4(v274) = *((_WORD *)v201 + 20);
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v201, (char *)*v217, (uint64_t)v217[1], v217[1] - *v217);
                      *((_WORD *)v201 + 20) = a1[6 * v216 + 5];
                      if (v215 >= 2)
                      {
                        while (1)
                        {
                          v229 = v216 - 1;
                          v216 = (v216 - 1) >> 1;
                          v224 = &a1[6 * v216];
                          v230 = v224[1];
                          v226 = *((_QWORD *)&v272 + 1);
                          v225 = (char *)v272;
                          v231 = v230 - *v224;
                          if (v231 <= (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1)
                          {
                            v227 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                            if (v230 == *v224 || v231 < v227)
                              break;
                            v233 = v230 - *v224;
                            v234 = (unsigned __int16 *)v272;
                            v235 = *v224;
                            while (1)
                            {
                              v236 = *v235;
                              v237 = *v234;
                              if (v236 != v237)
                                break;
                              ++v235;
                              ++v234;
                              if (!--v233)
                                goto LABEL_265;
                            }
                            if (v236 > v237)
                              break;
                          }
                          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v217, (char *)*v224, (uint64_t)v224[1], v230 - *v224);
                          *((_WORD *)v217 + 20) = a1[6 * v216 + 5];
                          v217 = &a1[6 * v216];
                          if (v229 < 2)
                            goto LABEL_264;
                        }
                      }
                      v224 = v217;
LABEL_264:
                      v226 = *((_QWORD *)&v272 + 1);
                      v225 = (char *)v272;
                      v227 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                      v217 = v224;
LABEL_265:
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v217, v225, v226, v227);
                      *((_WORD *)v217 + 20) = WORD4(v274);
                      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
                    }
                  }
                }
              }
LABEL_267:
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)v270);
            }
            while (v197-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[6 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x1801)
        {
        }
        else
        {
          v13 = 3 * v11;
          v14 = &a1[6 * v11];
          v15 = &a1[2 * v13 + 6];
          *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v273 = v16;
          v274 = v16;
          v272 = v16;
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *a1, a1[1]);
          WORD4(v274) = *((_WORD *)a1 + 20);
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)a1, (char *)*v12, (uint64_t)v12[1], v12[1] - *v12);
          *((_WORD *)a1 + 20) = *((_WORD *)v14 + 20);
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)v12, (char *)v272, *((uint64_t *)&v272 + 1), (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1);
          *((_WORD *)v14 + 20) = WORD4(v274);
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(a1 - 6);
          v18 = *(a1 - 5);
          v19 = *a1;
          v20 = v18 - v17;
          v21 = (char *)a1[1] - (char *)*a1;
          if (v20 <= v21 >> 1)
          {
            if (v18 == v17 || v20 < v21 >> 1)
              goto LABEL_14;
            while (1)
            {
              v22 = *v17;
              v23 = *v19;
              if (v22 != v23)
                break;
              ++v17;
              ++v19;
              if (!--v20)
                goto LABEL_14;
            }
            if (v22 > v23)
            {
LABEL_14:
              *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v273 = v24;
              v274 = v24;
              v272 = v24;
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *a1, a1[1]);
              WORD4(v274) = *((_WORD *)a1 + 20);
              v26 = *((_QWORD *)&v272 + 1);
              v25 = (char *)v272;
              v27 = *(a2 - 6);
              v28 = (uint64_t)*(a2 - 5);
              v29 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
              if (v29 > (v28 - (uint64_t)v27) >> 1)
                goto LABEL_15;
              if (*((_QWORD *)&v272 + 1) == (_QWORD)v272 || v29 < (v28 - (uint64_t)v27) >> 1)
                goto LABEL_104;
              v82 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
              v83 = *(a2 - 6);
              v84 = (unsigned __int16 *)v272;
              while (1)
              {
                v85 = *v84;
                v86 = *v83;
                if (v85 != v86)
                  break;
                ++v84;
                ++v83;
                if (!--v82)
                  goto LABEL_104;
              }
              if (v85 > v86)
              {
LABEL_104:
                v8 = (unint64_t)(a1 + 6);
                v87 = a1;
                while (v8 < (unint64_t)a2)
                {
                  v88 = v87[6];
                  v89 = v87[7];
                  v87 = (unsigned __int16 **)v8;
                  v90 = (char *)v89 - (char *)v88;
                  if (v29 > v90 >> 1)
                    break;
                  if (*((_QWORD *)&v272 + 1) != (_QWORD)v272 && v29 >= v90 >> 1)
                  {
                    v91 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                    v92 = (unsigned __int16 *)v272;
                    while (1)
                    {
                      v93 = *v92;
                      v94 = *v88;
                      if (v93 != v94)
                        break;
                      ++v92;
                      ++v88;
                      if (!--v91)
                        goto LABEL_114;
                    }
                    if (v93 <= v94)
                      break;
                  }
LABEL_114:
                  v8 += 48;
                }
              }
              else
              {
LABEL_15:
                v30 = (char *)a1[6];
                v8 = (unint64_t)(a1 + 6);
                v31 = (char *)a1[7] - v30;
                if (v29 <= v31 >> 1)
                {
                  v32 = v31 >> 1;
                  do
                  {
                    if (*((_QWORD *)&v272 + 1) != (_QWORD)v272 && v29 >= v32)
                    {
                      v33 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                      v34 = (unsigned __int16 *)v272;
                      while (1)
                      {
                        v35 = *v34;
                        v36 = *(unsigned __int16 *)v30;
                        if (v35 != v36)
                          break;
                        ++v34;
                        v30 += 2;
                        if (!--v33)
                          goto LABEL_24;
                      }
                      if (v35 <= v36)
                        break;
                    }
LABEL_24:
                    v30 = *(char **)(v8 + 48);
                    v37 = *(_QWORD *)(v8 + 56);
                    v8 += 48;
                    v38 = v37 - (_QWORD)v30;
                    v32 = (v37 - (uint64_t)v30) >> 1;
                  }
                  while (v29 <= v38 >> 1);
                }
              }
              v95 = (unint64_t)a2;
              if (v8 < (unint64_t)a2)
              {
                for (i = a2; ; i -= 6)
                {
                  v95 = (unint64_t)(i - 6);
                  v97 = v28 - (_QWORD)v27;
                  if (v29 <= v97 >> 1)
                  {
                    if (*((_QWORD *)&v272 + 1) == (_QWORD)v272 || v29 < v97 >> 1)
                      break;
                    v98 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                    v99 = (unsigned __int16 *)v272;
                    while (1)
                    {
                      v100 = *v99;
                      v101 = *v27;
                      if (v100 != v101)
                        break;
                      ++v99;
                      ++v27;
                      if (!--v98)
                        goto LABEL_144;
                    }
                    if (v100 > v101)
                      break;
                  }
                  v27 = *(i - 12);
                  v28 = (uint64_t)*(i - 11);
                }
              }
LABEL_144:
              while (v8 < v95)
              {
                v26 = *((_QWORD *)&v272 + 1);
                v25 = (char *)v272;
                v102 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                v103 = *(unsigned __int16 **)(v8 + 48);
                v104 = *(_QWORD *)(v8 + 56);
                v8 += 48;
                v105 = v104 - (_QWORD)v103;
                if (v102 <= v105 >> 1)
                {
                  v106 = v105 >> 1;
                  while (1)
                  {
                    if (*((_QWORD *)&v272 + 1) != (_QWORD)v272 && v102 >= v106)
                    {
                      v107 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                      v108 = (unsigned __int16 *)v272;
                      while (1)
                      {
                        v109 = *v108;
                        v110 = *v103;
                        if (v109 != v110)
                          break;
                        ++v108;
                        ++v103;
                        if (!--v107)
                          goto LABEL_135;
                      }
                      if (v109 <= v110)
                        break;
                    }
LABEL_135:
                    v103 = *(unsigned __int16 **)(v8 + 48);
                    v111 = *(_QWORD *)(v8 + 56);
                    v8 += 48;
                    v112 = v111 - (_QWORD)v103;
                    v106 = (v111 - (uint64_t)v103) >> 1;
                    if (v102 > v112 >> 1)
                      goto LABEL_136;
                  }
                }
                do
                {
                  do
                  {
LABEL_136:
                    v113 = *(unsigned __int16 **)(v95 - 48);
                    v114 = *(_QWORD *)(v95 - 40);
                    v95 -= 48;
                    v115 = v114 - (_QWORD)v113;
                  }
                  while (v102 > v115 >> 1);
                  if (*((_QWORD *)&v272 + 1) == (_QWORD)v272 || v102 < v115 >> 1)
                    break;
                  v116 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
                  v117 = (unsigned __int16 *)v272;
                  while (1)
                  {
                    v118 = *v117;
                    v119 = *v113;
                    if (v118 != v119)
                      break;
                    ++v117;
                    ++v113;
                    if (!--v116)
                      goto LABEL_144;
                  }
                }
                while (v118 <= v119);
              }
              if ((unsigned __int16 **)(v8 - 48) != a1)
              {
                std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)a1, *(char **)(v8 - 48), *(_QWORD *)(v8 - 40), (uint64_t)(*(_QWORD *)(v8 - 40) - *(_QWORD *)(v8 - 48)) >> 1);
                *((_WORD *)a1 + 20) = *(_WORD *)(v8 - 8);
                v26 = *((_QWORD *)&v272 + 1);
                v25 = (char *)v272;
              }
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)(v8 - 48), v25, v26, (v26 - (uint64_t)v25) >> 1);
              *(_WORD *)(v8 - 8) = WORD4(v274);
              std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
              a4 = 0;
              continue;
            }
          }
        }
        *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v273 = v39;
        v274 = v39;
        v272 = v39;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::vector<std::__wrap_iter<unsigned short const*>,0>((uint64_t)&v272, *a1, a1[1]);
        WORD4(v274) = *((_WORD *)a1 + 20);
        v41 = *((_QWORD *)&v272 + 1);
        v40 = (char *)v272;
        v42 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
        v43 = a1;
        do
        {
          do
          {
            v44 = v43;
            v45 = v43[6];
            v46 = v43[7];
            v43 += 6;
            v47 = v46 - v45;
          }
          while (v47 > v42);
          if (v46 == v45 || v47 < v42)
            break;
          v49 = (unsigned __int16 *)v272;
          while (1)
          {
            v50 = *v45;
            v51 = *v49;
            if (v50 != v51)
              break;
            ++v45;
            ++v49;
            if (!--v47)
              goto LABEL_39;
          }
        }
        while (v50 <= v51);
LABEL_39:
        if (v44 == a1)
        {
          v55 = a2;
          if (v43 < a2)
          {
            v59 = *(a2 - 6);
            v60 = *(a2 - 5);
            v61 = v60 - v59;
            v55 = a2 - 6;
            if (v61 <= v42)
            {
              v55 = a2 - 6;
              do
              {
                if (v60 == v59 || v61 < v42)
                {
LABEL_59:
                  if (v43 >= v55)
                    break;
                }
                else
                {
                  v62 = (unsigned __int16 *)v272;
                  while (1)
                  {
                    v63 = *v59;
                    v64 = *v62;
                    if (v63 != v64)
                      break;
                    ++v59;
                    ++v62;
                    if (!--v61)
                      goto LABEL_59;
                  }
                  if (v63 <= v64 || v43 >= v55)
                    break;
                }
                v59 = *(v55 - 6);
                v60 = *(v55 - 5);
                v55 -= 6;
                v61 = v60 - v59;
              }
              while (v61 <= v42);
            }
          }
        }
        else
        {
          v52 = *(a2 - 6);
          v53 = *(a2 - 5);
          v54 = v53 - v52;
          v55 = a2 - 6;
          if (v54 <= v42)
          {
            v55 = a2 - 6;
            do
            {
              if (v53 != v52 && v54 >= v42)
              {
                v56 = (unsigned __int16 *)v272;
                while (1)
                {
                  v57 = *v52;
                  v58 = *v56;
                  if (v57 != v58)
                    break;
                  ++v52;
                  ++v56;
                  if (!--v54)
                    goto LABEL_49;
                }
                if (v57 <= v58)
                  break;
              }
LABEL_49:
              v52 = *(v55 - 6);
              v53 = *(v55 - 5);
              v55 -= 6;
              v54 = v53 - v52;
            }
            while (v54 <= v42);
          }
        }
        if (v43 >= v55)
        {
          v8 = (unint64_t)v43;
        }
        else
        {
          v66 = (unint64_t)v55;
          v8 = (unint64_t)v43;
          do
          {
            v41 = *((_QWORD *)&v272 + 1);
            v40 = (char *)v272;
            v67 = (uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 1;
            do
            {
              do
              {
                v68 = *(unsigned __int16 **)(v8 + 48);
                v69 = *(unsigned __int16 **)(v8 + 56);
                v8 += 48;
                v70 = v69 - v68;
              }
              while (v70 > v67);
              if (v69 == v68 || v70 < v67)
                break;
              v72 = (unsigned __int16 *)v272;
              while (1)
              {
                v73 = *v68;
                v74 = *v72;
                if (v73 != v74)
                  break;
                ++v68;
                ++v72;
                if (!--v70)
                  goto LABEL_80;
              }
            }
            while (v73 <= v74);
            while (1)
            {
LABEL_80:
              v75 = *(unsigned __int16 **)(v66 - 48);
              v76 = *(unsigned __int16 **)(v66 - 40);
              v66 -= 48;
              v77 = v76 - v75;
              if (v77 > v67)
                break;
              if (v76 != v75 && v77 >= v67)
              {
                v78 = (unsigned __int16 *)v272;
                while (1)
                {
                  v79 = *v75;
                  v80 = *v78;
                  if (v79 != v80)
                    break;
                  ++v75;
                  ++v78;
                  if (!--v77)
                    goto LABEL_80;
                }
                if (v79 <= v80)
                  break;
              }
            }
          }
          while (v8 < v66);
        }
        if ((unsigned __int16 **)(v8 - 48) != a1)
        {
          std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)a1, *(char **)(v8 - 48), *(_QWORD *)(v8 - 40), (uint64_t)(*(_QWORD *)(v8 - 40) - *(_QWORD *)(v8 - 48)) >> 1);
          *((_WORD *)a1 + 20) = *(_WORD *)(v8 - 8);
          v41 = *((_QWORD *)&v272 + 1);
          v40 = (char *)v272;
        }
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)(v8 - 48), v40, v41, (v41 - (uint64_t)v40) >> 1);
        *(_WORD *)(v8 - 8) = WORD4(v274);
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,3ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v272);
        if (v43 < v55)
        {
LABEL_96:
          a4 = 0;
          continue;
        }
        {
          if ((v81 & 1) != 0)
            continue;
          goto LABEL_96;
        }
        a2 = (unsigned __int16 **)(v8 - 48);
        if ((v81 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t TCFBase<TFramesetter>::GetTypeID(void)::{lambda(void *)#1}::__invoke()
{
  unsigned __int8 v0;
  uint64_t result;

  v0 = atomic_load((unsigned __int8 *)&qword_1ECDE74B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDE74B8))
  {
    qword_1ECDE74C0 = 0;
    unk_1ECDE74C8 = "CTFramesetter";
    qword_1ECDE74D0 = 0;
    unk_1ECDE74D8 = 0;
    qword_1ECDE74E0 = (uint64_t)TCFBase<TFramesetter>::ClassDestruct;
    unk_1ECDE74E8 = TCFBase<TFramesetter>::ClassEqual;
    qword_1ECDE74F0 = (uint64_t)TCFBase<TFramesetter>::ClassHash;
    unk_1ECDE74F8 = 0;
    qword_1ECDE7500 = (uint64_t)TCFBase<TFramesetter>::ClassDebug;
    unk_1ECDE7508 = 0;
    qword_1ECDE7510 = 0;
    unk_1ECDE7518 = 0;
    __cxa_guard_release(&qword_1ECDE74B8);
  }
  result = _CFRuntimeRegisterClass();
  qword_1ECDE74B0 = result;
  return result;
}

uint64_t TCFBase<TFrame>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  {
    TCFBase<TFrame>::CreateTypeID(void)::runtimeClass = 0;
    *(_QWORD *)algn_1ECDE70C8 = "CTFrame";
    qword_1ECDE70D0 = 0;
    unk_1ECDE70D8 = 0;
    qword_1ECDE70E0 = (uint64_t)TCFBase<TFrame>::ClassDestruct;
    unk_1ECDE70E8 = TCFBase<TFrame>::ClassEqual;
    qword_1ECDE70F0 = (uint64_t)TCFBase<TFrame>::ClassHash;
    unk_1ECDE70F8 = 0;
    qword_1ECDE7100 = (uint64_t)TCFBase<TFrame>::ClassDebug;
    unk_1ECDE7108 = 0;
    qword_1ECDE7110 = 0;
    unk_1ECDE7118 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TFrame>::fTypeID = result;
  return result;
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  __CFString *v2;
  uint64_t v4;
  _QWORD *v5;
  TDescriptor *v6;
  void *v7;
  void *v8;
  id v10;
  id v11;
  id v12;

  v2 = (__CFString *)name;
  if (name)
  {
    v11 = (id)0xAAAAAAAAAAAAAAAALL;
    v4 = TCFBase<TDescriptor>::Allocate();
    if (v4)
    {
      v5 = (_QWORD *)v4;
      v6 = (TDescriptor *)(v4 + 48);
      v5[2] = 0;
      v5[3] = TDescriptor::Hash;
      v5[4] = 0;
      v5[5] = v6;
      TDescriptor::TDescriptor(v6, v2, size, 0);
      v12 = v5;
      do
        v7 = (void *)__ldaxr((unint64_t *)&v12);
      while (__stlxr(0, (unint64_t *)&v12));
      v10 = v7;

    }
    else
    {
      v10 = 0;
    }
    do
      v8 = (void *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    v11 = v8;

    do
      v2 = (__CFString *)__ldaxr((unint64_t *)&v11);
    while (__stlxr(0, (unint64_t *)&v11));

  }
  return (CTFontDescriptorRef)v2;
}

unint64_t CTFontDescriptorCreateWithTextStyle(__CFString *a1, const __CFString *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v8;
  id v9;

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
  TDescriptorSource::CreateDescriptorForTextStyle(a1, a2, a3, 0, (unint64_t *)&v9);
  do
    v6 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  return v6;
}

uint64_t TCFBase<TNativeTextTab>::CreateTypeID()
{
  unsigned __int8 v0;
  uint64_t result;

  if ((v0 & 1) == 0
  {
    TCFBase<TNativeTextTab>::CreateTypeID(void)::runtimeClass = 0;
    unk_1ECDE7140 = "CTTextTab";
    qword_1ECDE7148 = 0;
    unk_1ECDE7150 = 0;
    qword_1ECDE7158 = (uint64_t)TCFBase<TNativeTextTab>::ClassDestruct;
    unk_1ECDE7160 = TCFBase<TNativeTextTab>::ClassEqual;
    qword_1ECDE7168 = (uint64_t)TCFBase<TNativeTextTab>::ClassHash;
    unk_1ECDE7170 = 0;
    qword_1ECDE7178 = (uint64_t)TCFBase<TNativeTextTab>::ClassDebug;
    unk_1ECDE7180 = 0;
    qword_1ECDE7188 = 0;
    unk_1ECDE7190 = 0;
  }
  result = _CFRuntimeRegisterClass();
  TCFBase<TNativeTextTab>::fTypeID = result;
  return result;
}

const void *TAttributes::HandleStrokeWidthAttribute(const void *result, uint64_t a2)
{
  CFTypeID v3;

  if (result)
  {
    v3 = CFGetTypeID(result);
    result = (const void *)CFNumberGetTypeID();
    if ((const void *)v3 == result
      || (result = (const void *)CFBooleanGetTypeID(), (const void *)v3 == result)
      || (result = (const void *)CFStringGetTypeID(), (const void *)v3 == result))
    {
      *(_BYTE *)(*(_QWORD *)a2 + 136) |= 4u;
    }
  }
  return result;
}

void ___Z22GetMorxConversionQueuev_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreText.MorxConversion", 0);
  GetMorxConversionQueue(void)::sQueue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-2, 0);
  dispatch_set_target_queue(v0, global_queue);
  dispatch_queue_set_specific((dispatch_queue_t)GetMorxConversionQueue(void)::sQueue, (const void *)TDescriptorSource::DoNotCacheKey, (void *)1, 0);
}

uint64_t ___Z17ConvertToMorxSyncPK9TBaseFont_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = ConvertArabicPresentationFormsToMorxInternal(*(const TBaseFont **)(a1 + 40), a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ConvertArabicPresentationFormsToMorxInternal(const TBaseFont *a1, uint64_t a2)
{
  const TBaseFont *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t InitializedGraphicsFont;
  const void *v7;
  void **v8;
  void **v9;
  _BYTE *v10;
  id v12;
  id v13[3];
  id __p;
  void **v15;
  uint64_t v16;
  _BYTE v17[28320];
  _QWORD v18[2];

  v2 = (const TBaseFont *)MEMORY[0x1E0C80A78](a1, a2);
  v18[1] = *MEMORY[0x1E0C80C00];
  memset(v13, 170, sizeof(v13));
  (*(void (**)(id *__return_ptr, const TBaseFont *, uint64_t))(*(_QWORD *)v2 + 480))(&__p, v2, 1330851634);
  OS2::OS2((unint64_t *)v13, (unint64_t *)&__p);

  if ((uint64_t)v13[2] >= 78 && (*((_BYTE *)v13[1] + 44) & 0x20) != 0)
  {
    memset(v17, 170, sizeof(v17));
    __p = 0;
    v15 = 0;
    v16 = 0;
    v18[0] = v17;
    if ((_DWORD)v3)
    {
      v12 = (id)0xAAAAAAAAAAAAAAAALL;
      v5 = *((_QWORD *)v2 + 25);
      if (!v5)
      {
        InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v2);
        v5 = (*(uint64_t (**)(const TBaseFont *, uint64_t))(*(_QWORD *)v2 + 872))(v2, InitializedGraphicsFont);
      }
      v7 = (const void *)atomic_load((unint64_t *)&v12);
      TBaseFont::SetConvertedTables(v2, v7, 0);

    }
    v8 = (void **)__p;
    if (__p)
    {
      v9 = v15;
      v10 = __p;
      if (v15 != __p)
      {
        do
        {
          v9 -= 118;
        }
        while (v9 != v8);
        v10 = __p;
      }
      v15 = v8;
      if (v17 > v10 || v18 <= (_QWORD *)v10)
        operator delete(v10);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void TAttributes::GetDefaultAttributes(void)::{lambda(void *)#1}::__invoke()
{
  unint64_t v0;
  id v1;
  void *values;
  void *keys;

  if (qword_1ECDE7890 != -1)
    dispatch_once_f(&qword_1ECDE7890, 0, (dispatch_function_t)TAttributes::GetDefaultFont(void)::{lambda(void *)#1}::__invoke);
  values = (void *)qword_1ECDE7860;
  keys = CFSTR("NSFont");
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  do
    v0 = __ldaxr((unint64_t *)&v1);
  while (__stlxr(0, (unint64_t *)&v1));

  _MergedGlobals_18 = v0;
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef original, CFNumberRef featureTypeIdentifier, CFNumberRef featureSelectorIdentifier)
{
  void *v3;
  const __CTFontDescriptor *v4;
  CTFontDescriptorRef v6;
  id v7;
  id v8;
  CFNumberRef v9;
  CFNumberRef v10;

  v10 = featureTypeIdentifier;
  v9 = featureSelectorIdentifier;
  if (!original)
    return 0;
  if (featureTypeIdentifier && featureSelectorIdentifier)
  {
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    v6 = original;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFNumber const*&,__CFNumber const*&>((uint64_t *)&v6, &v10, &v9, (unint64_t *)&v7);
    do
      v3 = (void *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));
    v8 = v3;

    do
      v4 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));

    return v4;
  }
  return original;
}

void TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFNumber const*&,__CFNumber const*&>(uint64_t *a1@<X0>, const __CFNumber **a2@<X1>, const __CFNumber **a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  TDescriptor *v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TDescriptor>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a1;
    v11 = *a2;
    v12 = *a3;
    v13 = (TDescriptor *)(v8 + 48);
    v9[2] = 0;
    v9[3] = TDescriptor::Hash;
    v9[4] = 0;
    v9[5] = v13;
    TDescriptor::TDescriptor(v13, *(const TDescriptor **)(v10 + 40), v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

void TDescriptor::TDescriptor(TDescriptor *this, const TDescriptor *a2, const __CFNumber *a3, const __CFNumber *a4)
{
  unint64_t *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  const __CFDictionary *v15;
  _QWORD *v16;
  const __CFDictionary *v17;
  const __CFArray *Value;
  _QWORD *v19;
  __CFArray *v20;
  __CFDictionary *v21;
  const void *v22;
  unint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;

  *(_QWORD *)this = &off_1E15DCAF0;
  *((_QWORD *)this + 1) = 0;
  v8 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
  v9 = (unsigned int *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v10 = atomic_load((unint64_t *)a2 + 4);
  if (v10)
  {
    if ((*(_DWORD *)(v10 + 180) & 0x10000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 | 0x80000000, v9));
      v12 = (unsigned int *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  *((_QWORD *)this + 4) = v10;
  v14 = (void *)atomic_load((unint64_t *)a2 + 5);
  *((_QWORD *)this + 5) = v14;
  v27 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CopyAttributes(a2, (unint64_t *)&v27);
  v26 = (id)0xAAAAAAAAAAAAAAAALL;
  v15 = (const __CFDictionary *)atomic_load((unint64_t *)&v27);
  TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v26, v15);
  v16 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], (uint64_t)a3, (uint64_t)a4, 0, 0);
  if (v16)
  {
    v25 = (id)0xAAAAAAAAAAAAAAAALL;
    v17 = (const __CFDictionary *)atomic_load((unint64_t *)&v26);
    Value = (const __CFArray *)CFDictionaryGetValue(v17, CFSTR("NSCTFontFeatureSettingsAttribute"));
    TCFMutableArray::TCFMutableArray((TCFMutableArray *)&v25, Value);
    v19 = v16;
    v20 = (__CFArray *)atomic_load((unint64_t *)&v25);
    CFArrayAppendValue(v20, v19);

    v21 = (__CFDictionary *)atomic_load((unint64_t *)&v26);
    v22 = (const void *)atomic_load((unint64_t *)&v25);
    CFDictionarySetValue(v21, CFSTR("NSCTFontFeatureSettingsAttribute"), v22);

  }
  do
    v23 = __ldaxr((unint64_t *)&v26);
  while (__stlxr(0, (unint64_t *)&v26));
  do
    v24 = (void *)__ldaxr(v8);
  while (__stlxr(v23, v8));

}

CFTypeID TAttributes::HandleForegroundColorFromContextAttribute(CFTypeID result, uint64_t a2)
{
  const __CFNumber *v3;
  CFTypeID v4;
  unsigned int valuePtr;

  if (result)
  {
    v3 = (const __CFNumber *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFNumberGetTypeID() || v4 == CFBooleanGetTypeID())
    {
      valuePtr = -1431655766;
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      result = valuePtr;
      if (!valuePtr)
        return result;
      goto LABEL_5;
    }
    result = CFStringGetTypeID();
    if (v4 == result)
    {
      result = CFStringGetIntValue((CFStringRef)v3);
      if ((_DWORD)result)
LABEL_5:
        *(_BYTE *)(*(_QWORD *)a2 + 136) |= 1u;
    }
  }
  return result;
}

CFArrayRef CTFontCopySupportedLanguages(CTFontRef font)
{
  const __CFArray *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 336))(&v3);
  do
    v1 = (const __CFArray *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

void TComponentFont::CopyLocales(TComponentFont *this@<X0>, unint64_t *a2@<X8>)
{
  const __CFCharacterSet *v5;
  TLocaleManagerImp *v6;
  id v7;

  if ((*((_BYTE *)this + 713) & 7) != 0)
  {
    v7 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, TComponentFont *))(*(_QWORD *)this + 184))(&v7, this);
    if (atomic_load((unint64_t *)&v7))
    {
      TLocaleManager::TLocaleManager((TLocaleManager *)&v6);
      v5 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v7);
      TLocaleManagerImp::CopyLanguagesFromCharacterSet(v6, v5, 0, 0, a2);
      os_unfair_lock_unlock((os_unfair_lock_t)v6 + 6);

      return;
    }

  }
  TBaseFont::CopyLocales(this, a2);
}

void TBaseFont::CopyLocales(TBaseFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  void *v11;
  void *v14;
  const __CFSet *v15;
  const __CFAllocator *v16;
  CFMutableSetRef MutableCopy;
  unint64_t v19;
  void *v20;
  CFMutableSetRef v21;
  const __CFCharacterSet *v22;
  unint64_t v23;
  void *v24;
  unint64_t v26;
  void *v27;
  void *v28;
  __CFDictionary *v30;
  unsigned int v31;
  unsigned int v32;
  id v33;
  TLocaleManagerImp *v34;
  id v35;
  id v36;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("NSCTFontLanguagesAttribute"), &v36);
  do
    v4 = __ldaxr((unint64_t *)&v36);
  while (__stlxr(0, (unint64_t *)&v36));
  *a2 = v4;

  v5 = (unsigned int *)((char *)this + 184);
  if ((*((_DWORD *)this + 46) & 0x100000) == 0)
  {
    atomic_load((unint64_t *)this + 12);
    v6 = (unsigned int *)((char *)this + 180);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7, v6));
    do
      v8 = __ldxr(v5);
    while (__stxr(v8 | 0x100000, v5));
  }
  if ((*((_DWORD *)this + 45) & 0x100000) != 0)
  {
    if (!atomic_load(a2))
    {
      v36 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
      do
        v19 = __ldaxr((unint64_t *)&v36);
      while (__stlxr(0, (unint64_t *)&v36));
      do
        v20 = (void *)__ldaxr(a2);
      while (__stlxr(v19, a2));

    }
  }
  else
  {
    v9 = (unsigned int *)((char *)this + 180);
    TBaseFont::CopySupportedLanguagesFromMetadata((TBaseFont *)&v36, (unint64_t *)this);
    do
      v10 = __ldaxr((unint64_t *)&v36);
    while (__stlxr(0, (unint64_t *)&v36));
    do
      v11 = (void *)__ldaxr(a2);
    while (__stlxr(v10, a2));

    if (!atomic_load(a2))
    {
      v36 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TBaseFont *))(*(_QWORD *)this + 768))(&v36, this);
      if (atomic_load((unint64_t *)&v36))
      {
        TBaseFont::CopyAttributeInternal(this, CFSTR("CTCheckedLanguages"), &v35);
        do
          v14 = (void *)__ldaxr((unint64_t *)&v35);
        while (__stlxr(0, (unint64_t *)&v35));

        v15 = v14;
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (v15)
          MutableCopy = CFSetCreateMutableCopy(v16, 0, v15);
        else
          MutableCopy = CFSetCreateMutable(v16, 0, MEMORY[0x1E0C9B3B0]);
        v21 = MutableCopy;

        TLocaleManager::TLocaleManager((TLocaleManager *)&v34);
        v22 = (const __CFCharacterSet *)atomic_load((unint64_t *)&v36);
        TLocaleManagerImp::CopyLanguagesFromCharacterSet(v34, v22, 0, v21, (unint64_t *)&v35);
        do
          v23 = __ldaxr((unint64_t *)&v35);
        while (__stlxr(0, (unint64_t *)&v35));
        do
          v24 = (void *)__ldaxr(a2);
        while (__stlxr(v23, a2));

        os_unfair_lock_unlock((os_unfair_lock_t)v34 + 6);
      }

    }
    if (!atomic_load(a2))
    {
      v36 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
      do
        v26 = __ldaxr((unint64_t *)&v36);
      while (__stlxr(0, (unint64_t *)&v36));
      do
        v27 = (void *)__ldaxr(a2);
      while (__stlxr(v26, a2));

    }
    v28 = (void *)atomic_load(a2);
    v33 = v28;
    TBaseFont::SetAttributeInternal<TCFRef<__CFSet const*>>((unint64_t *)this, (unint64_t *)&v33, CFSTR("NSCTFontLanguagesAttribute"));

    os_unfair_lock_lock_with_options();
    if (!atomic_load((unint64_t *)this + 15))
      TBaseFont::InitAttributesDict(this);
    v30 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
    if (v30)
      CFDictionaryRemoveValue(v30, CFSTR("CTCheckedLanguages"));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 28);
    do
      v31 = __ldxr(v9);
    while (__stxr(v31 | 0x100000, v9));
    do
      v32 = __ldxr(v5);
    while (__stxr(v32 | 0x100000, v5));
  }
}

unint64_t CTFontDescriptorsCopyAttribute(const __CFArray *a1, void *a2)
{
  const __CFSet *v3;
  unint64_t v4;
  void *values;

  values = a2;
  v3 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B3B0]);
  v4 = CTFontDescriptorsCopyAttributesInternal(a1, v3);

  return v4;
}

unint64_t CTFontDescriptorsCopyAttributesInternal(const __CFArray *a1, const __CFSet *a2)
{
  const __CFArray *v2;
  int v3;
  char v4;
  char v5;
  const __CFSet *v6;
  const __CFSet *v7;
  const __CFAllocator **v8;
  CFMutableSetRef Mutable;
  CFIndex Count;
  __int128 v11;
  char *v12;
  const void **v13;
  __int128 v14;
  _OWORD *v15;
  size_t v16;
  __CFSet *v17;
  _OWORD *v18;
  _QWORD *v19;
  size_t v20;
  CFIndex v21;
  size_t v22;
  unint64_t v23;
  const __CFArray *v24;
  const __CTFontDescriptor *ValueAtIndex;
  const __CTFontDescriptor *v26;
  CFDictionaryRef v27;
  const void **v28;
  const void **v29;
  const void *v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  const void *Value;
  __CFDictionary *v34;
  void *v35;
  unint64_t v36;
  unint64_t v38;
  __CFSet *v39;
  const __CFSet *v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  const __CTFontDescriptor *v45;
  const __CTFontDescriptor **v46;
  CFAllocatorRef *v47;
  __CFSet *v48;
  size_t v49;
  _QWORD *v50;
  const void **v51;
  void **v52;
  void **v53;
  uint64_t v54;
  __CFSet *v55;
  unint64_t v56;
  void **v57;
  void **v58;
  void *v59;
  char v61;
  id v62;
  const __CFAllocator *v63;
  CFIndex v64;
  CFMutableSetRef v65;
  unint64_t capacity;
  const __CTFontDescriptor *v67;
  int v68;
  CFArrayRef theArray;
  id v70;
  id v71;
  void **v72;
  void **v73;
  _QWORD v74[128];
  _QWORD *v75;
  void *__base;
  void *v77;
  _QWORD *v78;
  _QWORD v79[128];
  _QWORD *v80;
  void *__p;
  void *v82;
  _OWORD *v83;
  _OWORD v84[128];
  _OWORD *v85;
  CFStringRef *v86;
  void *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 *v104;
  uint64_t v105;

  v2 = (const __CFArray *)MEMORY[0x1E0C80A78](a1, a2);
  v68 = v3;
  v5 = v4;
  v7 = v6;
  v105 = *MEMORY[0x1E0C80C00];
  theArray = v2;
  if (v2)
    capacity = CFArrayGetCount(v2);
  else
    capacity = 0;
  v8 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v61 = v5;
  if ((v5 & 1) != 0)
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B3B0]);
  else
    Mutable = 0;
  if (v7)
  {
    Count = CFSetGetCount(v7);
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v103 = v11;
    v102 = v11;
    v101 = v11;
    v100 = v11;
    v99 = v11;
    v98 = v11;
    v97 = v11;
    v96 = v11;
    v95 = v11;
    v94 = v11;
    v93 = v11;
    v92 = v11;
    v91 = v11;
    v90 = v11;
    v89 = v11;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v104 = &v89;
    if (Count)
    {
      std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&v86, Count);
      v12 = (char *)v87;
      bzero(v87, 8 * Count);
      v87 = &v12[8 * Count];
      v13 = (const void **)v86;
    }
    else
    {
      v13 = 0;
    }
    CFSetGetValues(v7, v13);
  }
  else
  {
    Count = 0;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v103 = v14;
    v102 = v14;
    v101 = v14;
    v100 = v14;
    v99 = v14;
    v98 = v14;
    v97 = v14;
    v96 = v14;
    v95 = v14;
    v94 = v14;
    v93 = v14;
    v92 = v14;
    v91 = v14;
    v90 = v14;
    v89 = v14;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v104 = &v89;
  }
  memset(v84, 170, sizeof(v84));
  __p = 0;
  v82 = 0;
  v83 = 0;
  v85 = v84;
  if (capacity)
  {
    if (!(capacity >> 60))
    {
      if (&v84[capacity] <= (_OWORD *)&v85)
      {
        v85 = &v84[capacity];
        v15 = v84;
      }
      else
      {
        v15 = operator new(16 * capacity);
      }
      v18 = &v15[capacity];
      __p = v15;
      v83 = v18;
      bzero(v15, 16 * capacity);
      v82 = v18;
      v19 = v79;
      memset(v79, 170, sizeof(v79));
      v80 = v79;
      v20 = 8 * capacity;
      v64 = Count;
      if (&v79[capacity] <= &v80)
        v80 = &v79[capacity];
      else
        v19 = operator new(v20);
      __base = v19;
      v78 = &v19[capacity];
      bzero(v19, v20);
      v21 = 0;
      v22 = 0;
      v77 = v78;
      v63 = *v8;
      v23 = capacity;
      v62 = (id)*MEMORY[0x1E0C9B0D0];
      v24 = theArray;
      v17 = Mutable;
      v65 = Mutable;
      while (1)
      {
        ValueAtIndex = (const __CTFontDescriptor *)CFArrayGetValueAtIndex(v24, v21);
        v26 = ValueAtIndex;
        v70 = (id)0xAAAAAAAAAAAAAAAALL;
        if (v68)
        {
          v71 = CFDictionaryCreateMutable(v63, v64, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v67 = v26;
          v27 = CTFontDescriptorCopyAttributes(v26);
          v28 = (const void **)v86;
          v29 = (const void **)v87;
          while (v28 != v29)
          {
            v30 = *v28;
            v31 = v27;
            if (v31)
            {
              v32 = v31;
              Value = CFDictionaryGetValue(v31, v30);

              if (Value)
              {
                v34 = (__CFDictionary *)atomic_load((unint64_t *)&v71);
                CFDictionarySetValue(v34, v30, Value);
              }
            }
            else
            {

            }
            ++v28;
          }
          do
            v35 = (void *)__ldaxr((unint64_t *)&v71);
          while (__stlxr(0, (unint64_t *)&v71));

          v17 = v65;
          v23 = capacity;
          v24 = theArray;
          v26 = v67;
        }
        else
        {
          v35 = (void *)CTFontDescriptorCopyAttribute(ValueAtIndex, *v86);
        }
        v70 = v35;
        v36 = atomic_load((unint64_t *)&v70);
        if ((v61 & 3) == 0 && !v36)
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v70, v62);
        if (atomic_load((unint64_t *)&v70))
          break;
        v16 = v22;
LABEL_48:

        ++v21;
        v22 = v16;
        if (v21 == v23)
          goto LABEL_49;
      }
      v38 = v23;
      v39 = v17;
      if (v17)
      {
        v40 = v17;
        v41 = (void *)atomic_load((unint64_t *)&v70);
        v42 = v41;
        v43 = v42;
        if (v40)
        {
          v44 = CFSetContainsValue(v40, v42);

          if (v44)
          {
            v16 = v22;
            v17 = v39;
LABEL_47:
            v23 = v38;
            v24 = theArray;
            goto LABEL_48;
          }
        }
        else
        {

        }
      }
      do
        v45 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v70);
      while (__stlxr(0, (unint64_t *)&v70));
      *((_QWORD *)__base + v22) = (char *)__p + 16 * v22;
      v16 = v22 + 1;
      v46 = (const __CTFontDescriptor **)((char *)__p + 16 * v22);
      *v46 = v26;
      v46[1] = v45;
      v17 = v39;
      if (v39)
        CFSetSetValue(v39, v45);
      goto LABEL_47;
    }
LABEL_78:
    abort();
  }
  memset(v79, 170, sizeof(v79));
  v16 = 0;
  __base = 0;
  v77 = 0;
  v78 = 0;
  v80 = v79;
  v17 = Mutable;
LABEL_49:
  if ((v61 & 2) != 0)
    qsort(__base, v16, 8uLL, (int (__cdecl *)(const void *, const void *))CTFontDescriptorsCopyAttributesInternal(__CFArray const*,__CFSet const*,unsigned int,BOOL)::$_0::__invoke);
  memset(v74, 170, sizeof(v74));
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v75 = v74;
  v47 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v16)
  {
    if (v16 >> 61)
      goto LABEL_78;
    v48 = v17;
    if (&v74[v16] <= &v75)
    {
      v75 = &v74[v16];
      v49 = 8 * v16;
      v50 = v74;
    }
    else
    {
      v49 = 8 * v16;
      v50 = operator new(8 * v16);
    }
    v53 = (void **)&v50[v16];
    v71 = v50;
    v73 = v53;
    bzero(v50, v49);
    v54 = 0;
    v72 = v53;
    do
    {
      *((_QWORD *)v71 + v54) = *(_QWORD *)(*((_QWORD *)__base + v54) + 8);
      ++v54;
    }
    while (v16 != v54);
    v51 = (const void **)v71;
    v52 = v72;
    v17 = v48;
  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
  v55 = v17;
  v70 = CFArrayCreate(*v47, v51, ((char *)v52 - (char *)v51) >> 3, MEMORY[0x1E0C9B378]);
  do
    v56 = __ldaxr((unint64_t *)&v70);
  while (__stlxr(0, (unint64_t *)&v70));

  v57 = (void **)v71;
  v58 = v72;
  if (v71 != v72)
  {
    do
    {
      v59 = *v57++;

    }
    while (v57 != v58);
    v57 = (void **)v71;
  }
  if (v57)
  {
    v72 = v57;
    if (v74 > v57 || &v75 <= (_QWORD **)v57)
      operator delete(v57);
  }
  if (__base)
  {
    v77 = __base;
    if (v79 > __base || &v80 <= __base)
      operator delete(__base);
  }
  if (__p)
  {
    v82 = __p;
    if (v84 > __p || &v85 <= __p)
      operator delete(__p);
  }
  __p = &v86;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);

  return v56;
}

dispatch_queue_t ___ZL48CTFontDescriptorGetDownloadProgressCallbackQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.CoreText.downloadProgressCallback", 0);
  qword_1ECDE7E40 = (uint64_t)result;
  return result;
}

void TDecorationRun::DrawDecorationRun<`anonymous namespace'::TRunAdapter>(CGContext *,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,double)::{lambda(CGPoint,CGPoint)#1}::operator()(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v6;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  CGContext *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const CGFloat *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  __n128 *v31;
  double v32;
  CGFloat v33;
  double v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  double *v38;
  double v39;
  CGAffineTransform v40;
  __int128 v41;
  CGAffineTransform v42;
  double *v43;
  double *v44;
  uint64_t v45;
  CGContext **v46;
  const CGFloat **v47;
  uint64_t *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  const CGFloat *v52;
  CGContext *v53;
  __int128 v54;
  _QWORD v55[2];
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;

  v6 = a4;
  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  if (!**(_BYTE **)a1)
  {
    v9 = *(double **)(a1 + 8);
    v10 = v9[1];
    v11 = v9[2];
    v12 = v9[3];
    v13 = v9[4];
    v14 = v9[5];
    v15 = v13 + a3 * v11 + *v9 * a2;
    a3 = v14 + a3 * v12 + v10 * a2;
    v6 = v13 + a5 * v11 + *v9 * a4;
    a5 = v14 + a5 * v12 + v10 * a4;
    a2 = v15;
  }
  v16 = *(double **)(a1 + 24);
  v17 = **(CGContext ***)(a1 + 16);
  v18 = *v16;
  v19 = v16[1];
  v20 = **(_QWORD **)(a1 + 32);
  v21 = **(_QWORD **)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(const CGFloat **)v22;
  v24 = (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3;
  *(double *)v55 = *v16;
  *(double *)&v55[1] = v19;
  *(double *)&v54 = a2;
  *((double *)&v54 + 1) = a3;
  v52 = v23;
  v53 = v17;
  v51 = v24;
  v25 = *(double *)(v8 + 32) * 0.75;
  v49 = *(_QWORD *)(v8 + 32);
  v50 = v25;
  if (*(_BYTE *)(v8 + 16))
  {
    a5 = a5 - a3 * 2.0;
    a3 = a3 - a3 * 2.0;
    *((double *)&v54 + 1) = a3;
  }
  v43 = &v50;
  v44 = (double *)v55;
  v45 = v8;
  v46 = &v53;
  v47 = &v52;
  v48 = &v51;
  if (*(_DWORD *)v8)
  {
    if (v6 - a2 <= v25)
      return;
    v26 = a2 + v18;
    v27 = v19 + a3;
    v28 = v6 + v18;
    v29 = v19 + a5;
    goto LABEL_19;
  }
  *(_QWORD *)&v30 = -1;
  *((_QWORD *)&v30 + 1) = -1;
  *(_OWORD *)&v42.c = v30;
  *(_OWORD *)&v42.tx = v30;
  *(_OWORD *)&v42.a = v30;
  CGContextGetTextMatrix(&v42, v17);
  v41 = v54;
  if (v20 != v21)
  {
    while (1)
    {
      v31 = *(__n128 **)(*(_QWORD *)v20 + 40);
      v40 = v42;
      v32 = *(double *)(v8 + 32) * 0.5;
      v33 = *((double *)&v54 + 1) - v32;
      v34 = *((double *)&v54 + 1) + v32;
      v35 = operator new(0x28uLL);
      *v35 = &unk_1E15E0838;
      v35[1] = &v49;
      v35[2] = &v54;
      v35[3] = &v43;
      v35[4] = &v41;
      v57 = v35;
      TDecorationRun::CalculateGlyphIntersections(v8, &v40.a, v31, (uint64_t)v56, v33, v34);
      v36 = v57;
      if (v57 == v56)
        break;
      if (v57)
      {
        v37 = 5;
LABEL_13:
        (*(void (**)(void))(*v36 + 8 * v37))();
      }
      v20 += 8;
      if (v20 == v21)
      {
        v38 = v43;
        goto LABEL_17;
      }
    }
    v36 = v56;
    v37 = 4;
    goto LABEL_13;
  }
  v38 = &v50;
LABEL_17:
  if (v6 - *(double *)&v41 > *v38)
  {
    v39 = v44[1];
    v26 = *(double *)&v41 + *v44;
    v27 = *((double *)&v41 + 1) + v39;
    v28 = v6 + *v44;
    v29 = a5 + v39;
    v17 = *v46;
    v23 = *v47;
    v24 = *v48;
LABEL_19:
    TDecorationRun::DrawLineSegment(v17, v23, *(CGPoint *)&v26, *(CGPoint *)&v28, (const double *)v24);
  }
}

uint64_t std::__split_buffer<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 960);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

double std::__function::__func<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1},std::allocator<void TDecorationRun::DrawLine<`anonymous namespace'::TRunAdapter>(CGContext *,CGPoint,`anonymous namespace'::TRunAdapter,`anonymous namespace'::TRunAdapter,CGPoint,CGPoint,double const*,unsigned long)::{lambda(double,double)#1}>,void ()(double,double)>::operator()(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v10;
  double *v11;
  double v12;
  double result;
  CGPoint v14;
  CGPoint v15;

  v3 = *a3;
  v4 = **(double **)(a1 + 8);
  v5 = *a2 - v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(double **)(a1 + 32);
  v8 = *v7;
  if (v5 - *v7 > **(double **)v6)
  {
    v10 = v7[1];
    v11 = *(double **)(v6 + 8);
    v12 = v11[1];
    v14.x = v8 + *v11;
    v14.y = v10 + v12;
    v15.x = v5 + *v11;
    v15.y = *(double *)(*(_QWORD *)(a1 + 16) + 8) + v12;
    TDecorationRun::DrawLineSegment(**(TDecorationRun ***)(v6 + 24), **(const CGFloat ***)(v6 + 32), v14, v15, **(const double ***)(v6 + 40));
    v4 = **(double **)(a1 + 8);
    v7 = *(double **)(a1 + 32);
  }
  result = v3 + v4;
  *v7 = result;
  return result;
}

uint64_t std::function<void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = a5;
  v10 = a4;
  v8 = a6;
  if (a1)
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, v11, &v10, &v9, &v8);
  v7 = std::__throw_bad_function_call[abi:nn180100]();
  return TBaseFont::GetPhysicalTraitsValues((TBaseFont *)v7);
}

unint64_t TBaseFont::GetPhysicalTraitsValues(TBaseFont *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 30);
  if (v1)
    return v1;
  else
    return TBaseFont::CreateTraitsValues(this);
}

const __CFString *TBaseFont::GetCSSFamily(TBaseFont *this, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString **v7;
  _DWORD *TraitsValues;
  __CFString **v9;
  void *v11;
  const __CFString *v12;
  __CFString *v13;
  __CFString **v14;

  v4 = CFSTR("sans-serif");
  if (a2 == 1)
  {
    v5 = (__CFString *)(*(uint64_t (**)(TBaseFont *))(*(_QWORD *)this + 536))(this);
    if (v5)
    {
      v6 = v5;
      if (v5 == CFSTR("NSCTFontUIFontDesignSerif")
        || CFSTR("NSCTFontUIFontDesignSerif") && CFEqual(v5, CFSTR("NSCTFontUIFontDesignSerif")))
      {
        v7 = kCTFontCSSFamilySerifUI;
      }
      else if (v6 == CFSTR("NSCTFontUIFontDesignMonospaced")
             || CFSTR("NSCTFontUIFontDesignMonospaced") && CFEqual(v6, CFSTR("NSCTFontUIFontDesignMonospaced")))
      {
        v7 = kCTFontCSSFamilyMonospaceUI;
      }
      else if (v6 == CFSTR("NSCTFontUIFontDesignRounded")
             || CFSTR("NSCTFontUIFontDesignRounded") && CFEqual(v6, CFSTR("NSCTFontUIFontDesignRounded"))
             || v6 == CFSTR("NSCTFontUIFontDesignCompactRounded")
             || CFSTR("NSCTFontUIFontDesignCompactRounded") && CFEqual(v6, CFSTR("NSCTFontUIFontDesignCompactRounded")))
      {
        v7 = kCTFontCSSFamilyRoundedUI;
      }
      else
      {
        v7 = kCTFontDescriptorDefaultKey;
      }
      return *v7;
    }
    v4 = CFSTR("default");
  }
  TraitsValues = (_DWORD *)atomic_load((unint64_t *)this + 30);
  if (!TraitsValues)
    TraitsValues = (_DWORD *)TBaseFont::CreateTraitsValues(this);
  if (TraitsValues)
  {
    if ((*TraitsValues & 0x400) != 0)
    {
      v7 = kCTFontCSSFamilyMonospaceUI;
      v9 = kCTFontCSSFamilyMonospace;
LABEL_15:
      if (a2 != 1)
        v7 = v9;
      return *v7;
    }
    switch((*TraitsValues >> 28) ^ 8)
    {
      case 0:
        v4 = CFSTR("sans-serif");
        if (a2 == 1)
        {
          v11 = (void *)atomic_load((unint64_t *)this + 12);
          v12 = v11;
          v13 = (__CFString *)v12;
          if (v12 == CFSTR(".SFUIRounded")
            || v12
            && (CFStringHasPrefix(v12, CFSTR(".SFUIRounded"))
             || v13 == CFSTR(".SFCompactRounded")
             || CFStringHasPrefix(v13, CFSTR(".SFCompactRounded"))))
          {
            v14 = kCTFontCSSFamilyRoundedUI;
          }
          else
          {
            v14 = kCTFontDescriptorDefaultKey;
          }
          v4 = *v14;

        }
        break;
      case 1:
        v7 = &kCTFontCSSFamilyFantasy;
        return *v7;
      case 2:
        v7 = kCTFontCSSFamilyCursive;
        return *v7;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
        v7 = kCTFontCSSFamilySerifUI;
        v9 = kCTFontCSSFamilySerif;
        goto LABEL_15;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t *TRun::GetLeadingWhitespace@<X0>(uint64_t *this@<X0>, double *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;

  if (this[26] <= 0)
  {
    *a2 = 0.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
  }
  else
  {
    v3 = this;
    v4 = this[27];
    v5 = *(_QWORD *)(v4 + 32);
    if (v5 || (v8 = *(_QWORD *)(v4 + 24)) == 0)
    {
      v6 = 0;
      v7 = v5 + 16 * this[25];
    }
    else
    {
      v7 = v8 + 8 * this[25];
      v6 = 1;
    }
    this = (uint64_t *)TRun::ResolveCharIndex((TRun *)this, this[1]);
    v9 = this;
    v20 = v10;
    v11 = (uint64_t *)v3[1];
    v12 = 0;
    v13 = 0.0;
    if ((uint64_t)v11 > (uint64_t)this || (uint64_t)v11 + v3[2] <= (uint64_t)this)
    {
      v15 = (uint64_t)this;
    }
    else
    {
      v15 = (uint64_t)this;
      do
      {
        v16 = v3[27];
        v17 = v3[25];
        if (*(__int16 *)(*(_QWORD *)(v16 + 16) + 2 * v17 + 2 * v20) != -1
          && (*(_DWORD *)(*(_QWORD *)(v16 + 40) + 4 * v17 + 4 * v20) & 0x21) == 0)
        {
          break;
        }
        ++v12;
        v18 = v6 ? 3 : 4;
        v13 = v13 + *(double *)(v7 + (v20 << v18));
        this = (uint64_t *)TRun::GetNextChar((TRun *)v3, v15, &v20);
        v15 = (uint64_t)this;
        v19 = (uint64_t *)v3[1];
        if ((uint64_t)v19 > (uint64_t)this)
          break;
      }
      while ((uint64_t)v19 + v3[2] > (uint64_t)this);
    }
    *(_QWORD *)a2 = v15 - (_QWORD)v9;
    *((_QWORD *)a2 + 1) = v12;
    a2[2] = v13;
  }
  return this;
}

void TDescriptorSource::CopyFontDescriptorFromVariationPostScriptName(TDescriptorSource *this@<X0>, CFStringRef theString@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  CFIndex Length;
  CFIndex v11;
  const __CFCharacterSet *Predefined;
  CFIndex location;
  CFIndex v14;
  const __CFAllocator *v15;
  __CFString *v16;
  void *v18;
  TDescriptor **v19;
  TDescriptor **v20;
  TDescriptor *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  __int128 v26;
  char *CStringPtr;
  CFIndex v28;
  CFIndex MaximumSizeForEncoding;
  CFIndex v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  char *v42;
  const __CFArray *v43;
  const CFDictionaryKeyCallBacks *v44;
  const CFDictionaryValueCallBacks *v45;
  CFIndex v46;
  __CFDictionary *Mutable;
  CFIndex v48;
  CFIndex v49;
  CFIndex i;
  const __CFDictionary *v51;
  const void *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  const void *v61;
  const __CFDictionary *v62;
  const void *v63;
  const void *v64;
  __CFDictionary *v65;
  int v66;
  char *v67;
  int v68;
  int v69;
  const void *v70;
  const void *v71;
  const void *v72;
  __CFDictionary *v73;
  void *v74;
  unint64_t v75;
  id v76;
  CGFont *v78;
  const __CFDictionary *v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  char *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  int v88;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int v97;
  BOOL v99;
  int v100;
  BOOL v102;
  BOOL v104;
  unint64_t v105;
  __int128 v106;
  float *v107;
  const UInt8 *BytePtr;
  const UInt8 *v109;
  const UInt8 *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  CFIndex Count;
  CFIndex v115;
  CFIndex v116;
  unsigned __int16 *v117;
  const __CFDictionary *ValueAtIndex;
  unsigned int v119;
  float v120;
  const void *Value;
  const void *v122;
  __CFDictionary *v123;
  void *v124;
  const __CFArray *theArray;
  const __CFData *theData;
  unint64_t v127;
  char *v128;
  char *__p;
  __CFString *v130;
  const __CFDictionary *v131;
  CGFont *v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  int64x2_t v138;
  uint64_t v139;
  _OWORD v140[2];
  _OWORD *v141;
  char v142[16];
  __int128 v143;
  uint64_t v144;
  CFRange v145;
  CFRange v146;

  v144 = *MEMORY[0x1E0C80C00];
  v135 = 0;
  if (!theString)
    goto LABEL_88;
  Length = CFStringGetLength(theString);
  if (!Length)
    goto LABEL_88;
  v11 = Length;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v145.location = 0;
  v145.length = v11;
  if (CFStringFindCharacterFromSet(theString, Predefined, v145, 0, 0))
    goto LABEL_88;
  location = CFStringFind(theString, CFSTR("_"), 0).location;
  if (location == -1)
    goto LABEL_88;
  v14 = location;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v146.location = 0;
  v146.length = location;
  v16 = (__CFString *)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, v146);
  v134 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::CopyFontDescriptorPerPostScriptName(&v134, this, v16, a3, a4 | 1, 0, 0, 0, -1, *MEMORY[0x1E0C9AE40]);
  if (!atomic_load((unint64_t *)&v134))
  {
LABEL_87:

LABEL_88:
    *a5 = 0;
    goto LABEL_89;
  }
  v18 = (void *)atomic_load((unint64_t *)&v134);
  v19 = v18;
  v20 = v19;
  v21 = v19[5];
  if ((*((_DWORD *)v21 + 4) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(v19[5], 0, 0.0);
  v22 = atomic_load((unint64_t *)v21 + 4);

  v133 = 0;
  if (!v22)
    goto LABEL_86;
  (*(void (**)(int64x2_t *__return_ptr, unint64_t))(*(_QWORD *)v22 + 120))(&v138, v22);
  do
    v23 = __ldaxr((unint64_t *)&v138);
  while (__stlxr(0, (unint64_t *)&v138));
  do
    v24 = (void *)__ldaxr((unint64_t *)&v133);
  while (__stlxr(v23, (unint64_t *)&v133));

  v25 = atomic_load((unint64_t *)&v133);
  if (!v25)
  {
LABEL_86:

    goto LABEL_87;
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v140[1] = v26;
  v140[0] = v26;
  v139 = 0;
  v138 = 0uLL;
  v141 = v140;
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x600u);
  if (!CStringPtr)
  {
    v28 = CFStringGetLength(theString);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v28, 0x600u);
    v30 = MaximumSizeForEncoding + 1;
    v31 = (char *)v138.i64[0];
    if ((unint64_t)(MaximumSizeForEncoding + 1) <= v138.i64[1] - v138.i64[0])
    {
      if ((unint64_t)(MaximumSizeForEncoding + 1) < v138.i64[1] - v138.i64[0])
        v138.i64[1] = v138.i64[0] + v30;
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v138, MaximumSizeForEncoding + 1 - (v138.i64[1] - v138.i64[0]));
      v31 = (char *)v138.i64[0];
    }
    if (!CFStringGetCString(theString, v31, v30, 0x600u))
      goto LABEL_85;
    CStringPtr = (char *)v138.i64[0];
    if (!v138.i64[0])
      goto LABEL_85;
  }
  v130 = v16;
  v32 = &CStringPtr[v14];
  v33 = strlen(CStringPtr) - v14;
  v34 = strchr(CStringPtr, 95);
  if (v34)
  {
    v35 = v34;
    v36 = strstr(CStringPtr, "MM");
    if (v36)
    {
      if (v36 <= v35 && v35[1] - 48 <= 9)
      {
        v136 = (id)0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(id *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v22 + 480))(&v136, v22, 1296914002);
        v37 = atomic_load((unint64_t *)&v136);
        v38 = atomic_load((unint64_t *)&v133);
        if (v33 > 0x1F || (v39 = v33 - 2, v33 < 2))
        {
          v42 = 0;
        }
        else
        {
          v127 = v22;
          v40 = v32[1];
          *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v143 = v41;
          *(_OWORD *)v142 = v41;
          if (v40 == 46 || (v40 - 48) <= 9)
          {
            theArray = (const __CFArray *)v38;
            theData = (const __CFData *)v37;
            v42 = 0;
            v83 = 0;
            v128 = 0;
            v84 = (unsigned __int8 *)(v32 + 2);
            do
            {
              __p = v42;
              v85 = 0;
              v86 = v39;
              do
              {
                v142[v85] = v40;
                v40 = v84[v85];
                v87 = (v40 - 48) <= 9 || v40 == 46;
                v88 = v85++;
              }
              while (v87 && v86 != v88);
              v142[v85] = 0;
              LODWORD(v137) = -1;
              sscanf(v142, "%f", &v137);
              if (v83 >= v128)
              {
                v90 = __p;
                v91 = (v83 - __p) >> 2;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 62)
                  abort();
                if ((v128 - __p) >> 1 > v92)
                  v92 = (v128 - __p) >> 1;
                v93 = (char *)((unint64_t)(v128 - __p) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v92);
                if (v93)
                {
                  v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((unint64_t)v93);
                  v90 = __p;
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v93[4 * v91];
                *(_DWORD *)v95 = (_DWORD)v137;
                v96 = v95 + 4;
                while (v83 != v90)
                {
                  v97 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v95 - 1) = v97;
                  v95 -= 4;
                }
                v128 = &v93[4 * v94];
                if (v90)
                {
                  v83 = v96;
                  operator delete(v90);
                  v42 = v95;
                }
                else
                {
                  v42 = v95;
                  v83 = v96;
                }
              }
              else
              {
                *(_DWORD *)v83 = (_DWORD)v137;
                v83 += 4;
                v42 = __p;
              }
              v84 += v85;
              v39 = v86 - v85;
              v99 = (v40 - 58) <= 0xFFFFFFF5 && v40 != 46 || v40 == 32;
              if (v99 && v39 + 1 > 0)
              {
                do
                {
                  v100 = *v84++;
                  v40 = v100;
                  v102 = v39-- != 0;
                  v104 = (v40 - 58) <= 0xFFFFFFF5 && v40 != 46 || v40 == 32;
                }
                while (v104 && v102);
              }
              v105 = v83 - v42;
              if ((unint64_t)(v83 - v42) > 0x10)
                break;
              if (v39 < 0)
              {
                v107 = (float *)v42;
                if (v42 == v83)
                {
                  v16 = v130;
                  goto LABEL_91;
                }
                if (CFArrayGetCount(theArray) >= v105 >> 2
                  && theData
                  && (BytePtr = CFDataGetBytePtr(theData)) != 0
                  && ((v109 = BytePtr, (v110 = CFDataGetBytePtr(theData)) == 0)
                    ? (v111 = 0)
                    : (v111 = (unint64_t)&v110[CFDataGetLength(theData)]),
                      (v112 = (unint64_t)&v109[2 * v105 + 8], v112 >= (unint64_t)(v109 + 8))
                   && v112 <= v111
                   || ((unint64_t)(v109 + 16) <= v111
                     ? (v113 = (v111 - (unint64_t)(v109 + 8)) >> 3)
                     : (v113 = 0),
                       v113 == v105 >> 2)))
                {
                  *(_QWORD *)v142 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (theArray)
                  {
                    Count = CFArrayGetCount(theArray);
                    if (Count)
                    {
                      v115 = Count;
                      v116 = 0;
                      v117 = (unsigned __int16 *)(v109 + 14);
                      do
                      {
                        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v116);
                        v119 = *v117;
                        v117 += 4;
                        v120 = v107[v116] / (float)((int)bswap32(v119) >> 16);
                        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("NSCTVariationAxisIdentifier"));
                        TCFNumber::TCFNumber<float>((unint64_t *)&v137, v120);
                        v122 = (const void *)atomic_load((unint64_t *)&v137);
                        v123 = (__CFDictionary *)atomic_load((unint64_t *)v142);
                        CFDictionarySetValue(v123, Value, v122);

                        ++v116;
                      }
                      while (v115 != v116);
                    }
                  }
                  do
                    v124 = (void *)__ldaxr((unint64_t *)v142);
                  while (__stlxr(0, (unint64_t *)v142));
                  v137 = v124;

                }
                else
                {
                  v137 = 0;
                }
                v16 = v130;
                v22 = v127;
                v42 = (char *)v107;
                if (v107)
                  goto LABEL_92;
                goto LABEL_93;
              }
              *(_QWORD *)&v106 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v106 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v143 = v106;
              *(_OWORD *)v142 = v106;
            }
            while (v40 == 46 || (v40 - 48) <= 9);
          }
          else
          {
            v42 = 0;
          }
          v16 = v130;
          if (v42)
          {
            operator delete(v42);
            v42 = 0;
          }
        }
LABEL_91:
        v137 = 0;
        if (v42)
LABEL_92:
          operator delete(v42);
        do
LABEL_93:
          v81 = __ldaxr((unint64_t *)&v137);
        while (__stlxr(0, (unint64_t *)&v137));
        do
          v82 = (void *)__ldaxr((unint64_t *)&v135);
        while (__stlxr(v81, (unint64_t *)&v135));

        v76 = v137;
        goto LABEL_81;
      }
    }
  }
  v43 = (const __CFArray *)atomic_load((unint64_t *)&v133);
  v44 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v45 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *(_QWORD *)v142 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = CFArrayGetCount(v43);
  Mutable = CFDictionaryCreateMutable(v15, v46, v44, v45);
  if (v43)
  {
    v48 = CFArrayGetCount(v43);
    if (v48)
    {
      v49 = v48;
      for (i = 0; i != v49; ++i)
      {
        v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v43, i);
        v52 = CFDictionaryGetValue(v51, CFSTR("NSCTVariationAxisIdentifier"));
        if (v52)
          CFDictionaryAddValue(Mutable, v52, v51);
      }
    }
  }
  if (!v33)
    goto LABEL_73;
  do
  {
    if (*v32 != 95)
    {
LABEL_76:
      v136 = 0;
      goto LABEL_77;
    }
    v53 = 0;
    ++v32;
    --v33;
    v54 = 4;
    do
    {
      if (!v33)
        goto LABEL_76;
      v55 = *v32;
      if (v55 == 37)
      {
        if (v33 < 3)
          goto LABEL_76;
        v56 = v32[1];
        if ((v56 - 48) >= 0xA)
        {
          if ((v56 - 97) >= 6)
          {
            if ((v56 - 65) > 5)
              goto LABEL_76;
            v57 = -55;
          }
          else
          {
            v57 = -87;
          }
        }
        else
        {
          v57 = -48;
        }
        v59 = v32[2];
        if ((v59 - 48) >= 0xA)
        {
          if ((v59 - 97) >= 6)
          {
            if ((v59 - 65) > 5)
              goto LABEL_76;
            v60 = -55;
          }
          else
          {
            v60 = -87;
          }
        }
        else
        {
          v60 = -48;
        }
        v53 = (16 * (v57 + v56)) | (v53 << 8) | (v60 + v59);
        v32 += 3;
        v58 = -3;
      }
      else
      {
        ++v32;
        v53 = v55 | (v53 << 8);
        v58 = -1;
      }
      v33 += v58;
      --v54;
    }
    while (v54);
    if (!v33 || *v32 == 95)
    {
      v137 = (id)0xAAAAAAAAAAAAAAAALL;
      TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v137, v53);
      v61 = (const void *)atomic_load((unint64_t *)&v137);
      v62 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, v61);
      if (v62)
      {
        v63 = (const void *)atomic_load((unint64_t *)&v137);
        v64 = CFDictionaryGetValue(v62, CFSTR("NSCTVariationAxisDefaultValue"));
        v65 = (__CFDictionary *)atomic_load((unint64_t *)v142);
        CFDictionarySetValue(v65, v63, v64);

        continue;
      }
LABEL_150:
      v136 = 0;

LABEL_77:
      v16 = v130;
      goto LABEL_78;
    }
    v66 = 0;
    v67 = &v32[v33];
    while (1)
    {
      v68 = *v32;
      if ((v68 - 48) >= 0xA)
        break;
      v69 = -48;
LABEL_67:
      v66 = v68 + 16 * v66 + v69;
      ++v32;
      if (!--v33)
        goto LABEL_70;
    }
    if ((v68 - 97) < 6)
    {
      v69 = -87;
      goto LABEL_67;
    }
    if ((v68 - 65) <= 5)
    {
      v69 = -55;
      goto LABEL_67;
    }
    v67 = v32;
LABEL_70:
    v137 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFNumber::TCFNumber<unsigned int>((unint64_t *)&v137, v53);
    v70 = (const void *)atomic_load((unint64_t *)&v137);
    if (!CFDictionaryContainsKey(Mutable, v70))
      goto LABEL_150;
    v71 = (const void *)atomic_load((unint64_t *)&v137);
    TCFNumber::TCFNumber<float>((unint64_t *)&v136, (float)v66 * 0.000015259);
    v72 = (const void *)atomic_load((unint64_t *)&v136);
    v73 = (__CFDictionary *)atomic_load((unint64_t *)v142);
    CFDictionarySetValue(v73, v71, v72);

    v32 = v67;
  }
  while (v33);
LABEL_73:
  v16 = v130;
  do
    v74 = (void *)__ldaxr((unint64_t *)v142);
  while (__stlxr(0, (unint64_t *)v142));
  v136 = v74;
LABEL_78:

  do
    v75 = __ldaxr((unint64_t *)&v136);
  while (__stlxr(0, (unint64_t *)&v136));
  do
    v76 = (id)__ldaxr((unint64_t *)&v135);
  while (__stlxr(v75, (unint64_t *)&v135));
LABEL_81:

  if (!atomic_load((unint64_t *)&v135))
  {
LABEL_85:
    *(_QWORD *)v142 = &v138;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v142);
    goto LABEL_86;
  }
  *(_QWORD *)v142 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(char *__return_ptr, unint64_t))(*(_QWORD *)v22 + 496))(v142, v22);
  v137 = (id)0xAAAAAAAAAAAAAAAALL;
  atomic_load((unint64_t *)v142);
  atomic_load((unint64_t *)&v135);
  VariationsForGraphicsFontByAddingVariation(&v137);
  v78 = (CGFont *)atomic_load((unint64_t *)v142);
  v79 = (const __CFDictionary *)atomic_load((unint64_t *)&v137);
  v131 = v79;
  v132 = v78;
  TCFBase_NEW<CTFontDescriptor,CGFont *,__CFDictionary const*>((unint64_t *)&v136, &v132, &v131);
  do
    v80 = __ldaxr((unint64_t *)&v136);
  while (__stlxr(0, (unint64_t *)&v136));
  *a5 = v80;

  *(_QWORD *)v142 = &v138;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v142);

LABEL_89:
}

CGFloat TSplicedFontDict::GetUnderlineThickness(TSplicedFontDict *this, double a2, const CGAffineTransform *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;

  v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v4)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FontMetrics"));
    if (Value)
    {
      v7 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v8 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("underlineThickness"));
        if (v8)
          return a3->ty + CFStringGetDoubleValue(v8) * a3->d + a3->b * 0.0;
      }
    }
  }
  return a2;
}

CGFloat TSplicedFontDict::GetUnderlinePosition(TSplicedFontDict *this, double a2, const CGAffineTransform *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;

  v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  if (v4)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FontMetrics"));
    if (Value)
    {
      v7 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v8 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("underlinePosition"));
        if (v8)
          return a3->ty + CFStringGetDoubleValue(v8) * a3->d + a3->b * 0.0;
      }
    }
  }
  return a2;
}

void TFontFallbacks::CopyFontFallbacksForLanguages(__CFString *this@<X0>, const __CFString *a2@<X1>, const __CFArray *a3@<X2>, TFontFallbacks *a4@<X8>)
{
  __CFArray *Mutable;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFIndex i;
  __CFString *ValueAtIndex;
  const void *v13;
  void *v14;
  id v15;
  const __CFString *v16;
  id v19;
  CFRange v20;

  if (a3)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (qword_1ECDE7798 != -1)
      dispatch_once_f(&qword_1ECDE7798, 0, (dispatch_function_t)GetOrderedLanguages(void)::$_0::__invoke);
    v7 = (const __CFArray *)qword_1ECDE7790;
    if (qword_1ECDE7790)
      Count = CFArrayGetCount((CFArrayRef)qword_1ECDE7790);
    else
      Count = 0;
    v9 = CFArrayGetCount(a3);
    if (v9)
    {
      v10 = v9;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a3, i);
        v19 = (id)0xAAAAAAAAAAAAAAAALL;
        LanguageIdentifierByNormalizing(ValueAtIndex, 0, (unint64_t *)&v19);
        v13 = (const void *)atomic_load((unint64_t *)&v19);
        v20.location = 0;
        v20.length = Count;
        if (CFArrayContainsValue(v7, v20, v13))
        {
          v14 = (void *)atomic_load((unint64_t *)&v19);
          v15 = v14;
          CFArrayAppendValue(Mutable, v15);

        }
      }
    }
    if (CFArrayGetCount(Mutable))
    {
      CFArrayInsertValueAtIndex(Mutable, 0, a2);
      v19 = (id)0xAAAAAAAAAAAAAAAALL;
      ArrayComponentsJoinedByString(Mutable, CFSTR(","), (unint64_t *)&v19);
      CFArrayRemoveValueAtIndex(Mutable, 0);
      v16 = (const __CFString *)atomic_load((unint64_t *)&v19);
      TFontFallbacks::CopyFontFallbacks(a4, this, v16, a2, Mutable);

    }
    else
    {
      TFontFallbacks::CopyFontFallbacks(a4, this, a2, 0, 0);
    }

  }
  else
  {
    TFontFallbacks::CopyFontFallbacks(a4, this, a2, 0, 0);
  }
}

void TFontFallbacks::CopyFontFallbacks(TFontFallbacks *this, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFArray *a5)
{
  const __CFDictionary *v10;
  unint64_t v12;
  void *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFArray *Value;
  const __CFDictionary *v17;
  CFMutableArrayRef Mutable;
  const __CFArray *OrderedLanguages;
  int v20;
  _BOOL4 v21;
  const __CFString *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  void *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFIndex Count;
  __CFDictionary *v32;
  const void *v33;
  unint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  id v40;

  v10 = (const __CFDictionary *)atomic_load((unint64_t *)&a2->info);
  v38 = (id)CFDictionaryGetValue(v10, a3);
  if (!atomic_load((unint64_t *)&v38))
  {
    v36 = (id)0xAAAAAAAAAAAAAAAALL;
    v37 = 0;
    if (!a4)
      a4 = a3;
    CopyDefaultFontFallbacks(&v36);
    v13 = (void *)atomic_load((unint64_t *)&v36);
    v14 = v13;
    if (v14)
    {
      v15 = v14;
      Value = (const __CFArray *)CFDictionaryGetValue(v14, a4);

      if (Value && CFArrayGetCount(Value) >= 1)
      {
        if (!a5)
          a5 = (const __CFArray *)atomic_load((unint64_t *)&a2->data);
        v17 = (const __CFDictionary *)atomic_load((unint64_t *)&v36);
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        v39 = 0xAAAAAAAAAAAAAAAALL;
        v40 = Mutable;
        TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v39);
        OrderedLanguages = (const __CFArray *)CreateOrderedLanguages(a5);
        if (a4 == CFSTR("default"))
        {
          v21 = 1;
        }
        else if (a4)
        {
          v20 = CFEqual(a4, CFSTR("default"));
          v21 = 1;
          if (a4 != CFSTR("ui-") && !v20)
            v21 = CFStringHasPrefix(a4, CFSTR("ui-")) != 0;
        }
        else
        {
          v21 = 0;
        }
        TDescriptorSource::ProcessFallbackList(Value, (TDescriptorSource *)&v40, v21, OrderedLanguages);
        v23 = (const __CFArray *)CFDictionaryGetValue(v17, CFSTR("common"));
        if (v23)
        {
          v24 = v23;
          if (CFArrayGetCount(v23))
            TDescriptorSource::ProcessFallbackList(v24, (TDescriptorSource *)&v40, v21, OrderedLanguages);
        }
        do
          v25 = (void *)__ldaxr((unint64_t *)&v40);
        while (__stlxr(0, (unint64_t *)&v40));
        v35 = v25;

        do
          v26 = __ldaxr((unint64_t *)&v35);
        while (__stlxr(0, (unint64_t *)&v35));
        do
          v27 = (void *)__ldaxr((unint64_t *)&v37);
        while (__stlxr(v26, (unint64_t *)&v37));

        v28 = (void *)atomic_load((unint64_t *)&v37);
        v29 = v28;
        if (v29)
        {
          v30 = v29;
          Count = CFArrayGetCount(v29);

          if (Count >= 1)
          {
            v32 = (__CFDictionary *)atomic_load((unint64_t *)&a2->info);
            v33 = (const void *)atomic_load((unint64_t *)&v37);
            CFDictionarySetValue(v32, a3, v33);
          }
        }
        else
        {

        }
        goto LABEL_38;
      }
    }
    else
    {

    }
    if (a4 == CFSTR("ui-monospace"))
      goto LABEL_20;
    if (a4)
    {
      if (CFEqual(a4, CFSTR("ui-monospace")))
      {
LABEL_20:
        v22 = CFSTR("monospace");
LABEL_21:
        TFontFallbacks::CopyFontFallbacks(this, a2, v22, 0);
LABEL_40:

        goto LABEL_41;
      }
      if (a4 == CFSTR("ui-serif") || CFEqual(a4, CFSTR("ui-serif")))
      {
        v22 = CFSTR("serif");
        goto LABEL_21;
      }
      if (a4 == CFSTR("ui-rounded") || CFEqual(a4, CFSTR("ui-rounded")))
      {
        v22 = CFSTR("default");
        goto LABEL_21;
      }
    }
    do
LABEL_38:
      v34 = __ldaxr((unint64_t *)&v37);
    while (__stlxr(0, (unint64_t *)&v37));
    *(_QWORD *)this = v34;
    goto LABEL_40;
  }
  do
    v12 = __ldaxr((unint64_t *)&v38);
  while (__stlxr(0, (unint64_t *)&v38));
  *(_QWORD *)this = v12;
LABEL_41:

}

void TDecorationRun::DrawLineSegment(TDecorationRun *this, const CGFloat *a2, CGPoint a3, CGPoint a4, const double *a5)
{
  CGFloat y;
  CGFloat x;
  CGFloat v7;
  CGFloat v8;

  y = a4.y;
  x = a4.x;
  v7 = a3.y;
  v8 = a3.x;
  CGContextSetLineDash(this, a3.x, a2, (size_t)a5);
  CGContextMoveToPoint(this, v8, v7);
  CGContextAddLineToPoint(this, x, y);
  CGContextStrokePath(this);
}

CGFloat TComponentFont::GetUnderlineThickness(TComponentFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  double v4;

  v3 = (TComponentFont *)((char *)this + 720);
  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlineThickness();
  return TSplicedFontDict::GetUnderlineThickness(v3, a2->ty + v4 * a2->d + a2->b * 0.0, a2);
}

CGFloat TComponentFont::GetUnderlinePosition(TComponentFont *this, const CGAffineTransform *a2)
{
  TSplicedFontDict *v3;
  double v4;

  v3 = (TComponentFont *)((char *)this + 720);
  TBaseFont::GetInitializedGraphicsFont(this);
  CGFontGetUnderlinePosition();
  return TSplicedFontDict::GetUnderlinePosition(v3, a2->ty + v4 * a2->d + a2->b * 0.0, a2);
}

uint64_t TAATMorphChain::FlagsForOptionalLigatures(TAATMorphChain *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *((unsigned int *)this + 11);
  if (!(_DWORD)v1)
    return 0;
  result = 0;
  v4 = *((_QWORD *)this + 6);
  v5 = 12 * v1;
  v6 = (unsigned int *)(v4 + 4);
  do
  {
    if (*((_WORD *)v6 - 2) == 256)
    {
      v7 = bswap32(*((unsigned __int16 *)v6 - 1)) >> 16;
      if (v7 >= 2 && (v7 & 1) == 0)
        result = (bswap32(*v6) | result) & bswap32(v6[1]);
    }
    v6 += 3;
    v5 -= 12;
  }
  while (v5);
  return result;
}

void TSplicedFont::CopyRepertoireRange(TSplicedFont *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  const __CFAllocator *v6;
  __CFCharacterSet *Mutable;
  void *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  const __CFArray *v12;
  const void *ValueAtIndex;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  void *v18;
  void *v19;
  const __CFCharacterSet *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  id v24;
  __CFDictionary *v25;
  __CFDictionary *v26;
  const __CFAllocator *alloc;
  id v28;
  id Copy;
  id v30;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  TBaseFont::CopyAttributeInternal(this, CFSTR("UnicodeRange"), &v30);
  do
    v4 = __ldaxr((unint64_t *)&v30);
  while (__stlxr(0, (unint64_t *)&v30));
  *a2 = v4;

  if (!atomic_load(a2))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (Mutable)
    {
      v30 = (id)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(id *__return_ptr, TSplicedFont *))(*(_QWORD *)this + 504))(&v30, this);
      v8 = (void *)atomic_load((unint64_t *)&v30);
      v9 = v8;
      alloc = v6;
      if (v9)
      {
        v10 = v9;
        Count = CFArrayGetCount(v9);

        while (Count)
        {
          --Count;
          v12 = (const __CFArray *)atomic_load((unint64_t *)&v30);
          ValueAtIndex = CFArrayGetValueAtIndex(v12, Count);
          v14 = *((_QWORD *)ValueAtIndex + 5);
          if ((*(_DWORD *)(v14 + 16) & 0x80000000) == 0)
            TDescriptor::InitBaseFont(*((TDescriptor **)ValueAtIndex + 5), 0, 0.0);
          v15 = atomic_load((unint64_t *)(v14 + 32));
          Copy = (id)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v15 + 176))(&Copy, v15);
          if (!atomic_load((unint64_t *)&Copy))
          {
            (*(void (**)(id *__return_ptr, unint64_t))(*(_QWORD *)v15 + 184))(&v28, v15);
            do
              v17 = __ldaxr((unint64_t *)&v28);
            while (__stlxr(0, (unint64_t *)&v28));
            do
              v18 = (void *)__ldaxr((unint64_t *)&Copy);
            while (__stlxr(v17, (unint64_t *)&Copy));

          }
          v19 = (void *)atomic_load((unint64_t *)&Copy);
          v20 = v19;
          if (v20)
            CFCharacterSetUnion(Mutable, v20);

        }
      }
      else
      {

      }
      Copy = CFCharacterSetCreateCopy(alloc, Mutable);
      do
        v21 = __ldaxr((unint64_t *)&Copy);
      while (__stlxr(0, (unint64_t *)&Copy));
      do
        v22 = (void *)__ldaxr(a2);
      while (__stlxr(v21, a2));

      v23 = (void *)atomic_load(a2);
      v24 = v23;
      os_unfair_lock_lock_with_options();
      v25 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
      if (v24)
      {
        if (!v25)
          TBaseFont::InitAttributesDict(this);
        v26 = (__CFDictionary *)atomic_load((unint64_t *)this + 15);
        if (v26)
          CFDictionarySetValue(v26, CFSTR("UnicodeRange"), v24);
      }
      else if (v25)
      {
        CFDictionaryRemoveValue(v25, CFSTR("UnicodeRange"));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)this + 28);

    }
  }
}

void TDelegateRun::DrawGlyphsAtPositions(double *a1, CGContext *a2, CFRange a3, const CGPoint *a4, const TAttributes **a5)
{
  if (a1[49] != 0.0)
    TRun::DrawGlyphsAtPositionsInternal((TRun *)a1, a2, a3, a4, *(unsigned __int8 *)a5, a5[1], *((_BYTE *)a5 + 16));
}

const void *TAttributes::GetUnderlineColor(TAttributes *this, uint64_t a2, const __CFString **a3)
{
  TAttributes *v4;
  const void *result;

  if ((*((_BYTE *)this + 136) & 1) != 0)
    return (const void *)*MEMORY[0x1E0C9B0D0];
  v4 = (TAttributes *)atomic_load((unint64_t *)this);
  result = TAttributes::GetUnderlineColor(v4, 0, a3);
  if (!result)
  {
    if ((*((_BYTE *)this + 136) & 2) != 0)
      return (const void *)atomic_load((unint64_t *)this + 4);
    else
      return 0;
  }
  return result;
}

uint64_t TRun::IncrementAttachCountForChar(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t GlyphIndexForChar;

  if (*(uint64_t *)(this + 208) >= 1)
  {
    v4 = this;
    GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(this, a2);
    return objc_msgSend(*(id *)(v4 + 216), "setAttachmentCount:atIndex:", objc_msgSend(*(id *)(v4 + 216), "attachmentCountAtIndex:", *(_QWORD *)(v4 + 200) + GlyphIndexForChar) + a3, *(_QWORD *)(v4 + 200) + GlyphIndexForChar);
  }
  return this;
}

void CharRangeToDescriptorMap::CharRangeToDescriptorMap(CharRangeToDescriptorMap *this)
{
  char *v2;
  uint64_t v3;
  _OWORD v4[2];
  char *v5;

  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 138) = 1065353216;
  *((_DWORD *)this + 6) = -1613914163;
  v5 = (char *)this + 24;
  v2 = (char *)this + 40;
  *((_QWORD *)this + 63) = (char *)this + 40;
  *((_QWORD *)this + 4) = -1;
  *(_QWORD *)this = (char *)this + 24;
  *((_QWORD *)this + 1) = (char *)this + 40;
  *((_QWORD *)this + 2) = (char *)this + 40;
  memset(v4, 0, sizeof(v4));
  std::__split_buffer<std::tuple<unsigned short,unsigned short,long>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,long>,30ul> &>::~__split_buffer((uint64_t)v4);
  v3 = *(_QWORD *)this;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 64) = v3;
}

void TDescriptorSource::CopyDefaultSubstitutionListForLanguages(const __CFString *this@<X0>, const __CFString *a2@<X1>, TFontFallbacks *a3@<X8>)
{
  TDescriptorSource *v7;

  v7 = (TDescriptorSource *)os_unfair_lock_lock_with_options();
  TDescriptorSource::EnsureFontFallbacksCache(v7);
  TFontFallbacks::CopyFontFallbacksForLanguages((__CFString *)TDescriptorSource::sFontFallbacksCache, this, (const __CFArray *)a2, a3);
  os_unfair_lock_unlock(&TDescriptorSource::sFontFallbacksLock);
}

void TFontFallbacks::TFontFallbacks(TFontFallbacks *this)
{
  CFArrayRef v2;

  *(_DWORD *)this = TGenerationSeed::sGeneration;
  *((_DWORD *)this + 1) = GetLocaleChangedCount();
  *((_QWORD *)this + 1) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = CFLocaleCopyPreferredLanguages();
  CreateArrayOfNormalizedLanguagesWithOrder(v2, 0, 0, (unint64_t *)this + 2);

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
}

__n128 `anonymous namespace'::PathObserver::CleanUpAfterUnclosedSubpath(_anonymous_namespace_::PathObserver *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __n128 result;

  v1 = *((_DWORD *)this + 14);
  if (*(_QWORD *)((char *)this + 52))
  {
    v2 = *((_QWORD *)this + 8);
    v3 = *((_QWORD *)this + 9);
    while (v2 != v3)
    {
      v4 = *(_DWORD *)(v2 + 12);
      if (v4 && (v4 == v1 || v4 == *((_DWORD *)this + 13)))
        *(_DWORD *)(v2 + 12) = 0;
      v2 += 16;
    }
    *((_DWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  result = *(__n128 *)MEMORY[0x1E0C9D538];
  *(_OWORD *)this = *MEMORY[0x1E0C9D538];
  *((__n128 *)this + 1) = result;
  return result;
}

uint64_t TAttributes::HandleWritingDirectionAttribute(uint64_t result, uint64_t a2)
{
  if (result)
    *(_WORD *)(*(_QWORD *)a2 + 138) |= 8u;
  return result;
}

void TAttributes::SetStrokeColor(TAttributes *this, void *cf, const void *a3)
{
  CFTypeID v5;
  CGColor *v6;
  CGContext *v7;

  if (!cf)
  {
    if (qword_1ECDE78A0 != -1)
      dispatch_once_f(&qword_1ECDE78A0, 0, (dispatch_function_t)GetBlackColor(void)::$_0::__invoke);
    v6 = (CGColor *)qword_1ECDE7898;
    v7 = this;
    goto LABEL_9;
  }
  v5 = CFGetTypeID(cf);
  if (v5 != CFNullGetTypeID())
  {
    if (v5 != CGColorGetTypeID())
    {
      SetStrokeNSColor(this, cf);
      return;
    }
    v7 = this;
    v6 = (CGColor *)cf;
LABEL_9:
    CGContextSetStrokeColorWithColor(v7, v6);
  }
}

CFIndex TTruncator::TruncateStartChars(TTruncator *this, CFIndex a2, double a3, int64x2_t *a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t RunWithCharIndex;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  double v19;
  double *v20;
  double v21;
  void *Table;
  double v23;
  double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  CFIndex length;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  CFRange v58;
  CFRange v59;

  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(_QWORD *)(v5 + 80) + v6;
  *a5 = (*(_BYTE *)(v5 + 152) & 8) != 0;
  v58.location = a2;
  v8 = v7 - a2;
  if (v7 != a2)
  {
    v56 = v7;
    v57 = v6;
    v12 = v7 - 1;
    if (v8 < 1)
    {
      v13 = 0;
      RunWithCharIndex = 0;
      v16 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (double *)MEMORY[0x1E0C9D820];
      do
      {
        RunWithCharIndex = TLine::FindRunWithCharIndex(*((TLine **)this + 3), v12, 1);
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 8 * RunWithCharIndex) + 40);
        v17 = *(_QWORD *)(v16 + 8);
        if (v17 < v58.location)
          break;
        v18 = *(_QWORD *)(v16 + 16);
        v19 = *(double *)(v16 + 192);
        v20 = *(double **)(v16 + 312);
        if (!v20)
          v20 = v14;
        v21 = *v20;
        Table = GetTable();
        v23 = 0.0002;
        if (Table)
        {
          v24 = (double *)*((_QWORD *)Table + 8);
          v23 = 0.0002;
          if (v24)
            v23 = *v24;
        }
        if (v19 + v21 - a3 > v23)
        {
          *a5 = *(_BYTE *)(v16 + 224);
          break;
        }
        v13 += v18;
        v25 = *(double **)(v16 + 312);
        if (!v25)
          v25 = v14;
        a3 = a3 - (*(double *)(v16 + 192) + *v25);
        v12 = v17 - 1;
      }
      while (v13 < v8);
    }
    v26 = v8 - v13;
    if (v8 - v13 >= 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 8 * RunWithCharIndex);
      v16 = *(_QWORD *)(v27 + 40);
      v59.location = v58.location;
      v59.length = v8 - v13;
      v28 = TRun::CountCharsInWidth((TRun *)v16, v59, a3, -1);
      if (v28 >= 1)
      {
        v29 = v28;
        TTruncator::AppendTruncatedRun((uint64_t)this, a4, v27, v12 - v28 + 1, v28, 0);
        v26 -= v29;
        v30 = a4[1].i64[0];
        if (a4[1].i64[1] - v30 >= 1)
        {
          v31 = *(void **)v30;
          v32 = *(uint64_t **)(*(_QWORD *)v30 + 40);
          TRun::GetLeadingWhitespace(v32, (double *)&v58.length);
          length = v58.length;
          if (v58.length >= 1)
          {
            v34 = v31;
            v35 = v32[1];
            v36 = v32[2];
            TLine::ClearLine((TLine *)a4);
            if (v36 > length)
              TTruncator::AppendTruncatedRun((uint64_t)this, a4, (uint64_t)v31, v35 + length, v36 - length, 0);
            v26 += length;
            TLine::SyncWithRuns((TLine *)a4);

          }
        }
      }
    }
    v37 = *(_QWORD *)(v16 + 16) + *(_QWORD *)(v16 + 8);
    if (a4[1].i64[1] == a4[1].i64[0])
    {
      v44 = *(_QWORD *)(*((_QWORD *)this + 3) + 80) + *(_QWORD *)(*((_QWORD *)this + 3) + 72);
      while (v37 < v44)
      {
        v45 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16)
                        + 8 * TLine::FindRunWithCharIndex(*((TLine **)this + 3), v37, 1));
        v46 = *(uint64_t **)(v45 + 40);
        TRun::GetLeadingWhitespace(v46, (double *)&v58.length);
        if (!v58.length)
          break;
        v26 += v58.length;
        v47 = v46[2];
        if (v47 > v58.length)
        {
          v53 = v46[1];
          TTruncator::AppendTruncatedRun((uint64_t)this, a4, v45, v53 + v58.length, v47 - v58.length, 0);
          v37 = v53 + v47;
          TLine::SyncWithRuns((TLine *)a4);
          break;
        }
        v37 += v47;
      }
    }
    v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)this + 3) + 40))(**((_QWORD **)this + 3), v26 + v58.location - 1, 2);
    if (v38 + v39 >= v56)
      v40 = v56;
    else
      v40 = v38 + v39;
    if (v57 <= v38 && v38 < v56)
    {
      v43 = v40 - v38;
    }
    else if (v38 <= v57 && v57 < v38 + v39)
    {
      v43 = v40 - v57;
      v38 = v57;
    }
    else
    {
      v38 = 0;
      v43 = 0;
    }
    v48 = v38 + v43;
    if (v26 + v58.location < v38 + v43)
    {
      if (a4[1].i64[1] - a4[1].i64[0] >= 1)
        TLine::ClearLine((TLine *)a4);
      v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16)
                      + 8 * TLine::FindRunWithCharIndex(*((TLine **)this + 3), v48, 1));
      v37 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 16) + *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
      if (v37 <= v48)
        v37 = v48;
      else
        TTruncator::AppendTruncatedRun((uint64_t)this, a4, v49, v48, v37 - v48, 0);
    }
    v50 = *(_QWORD *)(*((_QWORD *)this + 3) + 80) + *(_QWORD *)(*((_QWORD *)this + 3) + 72);
    while (v37 < v50)
    {
      v51 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16)
                      + 8 * TLine::FindRunWithCharIndex(*((TLine **)this + 3), v37, 1));
      v52 = *(_QWORD *)(v51 + 40);
      TLine::InsertPartialRun((TLine *)a4, (a4[1].i64[1] - a4[1].i64[0]) >> 3, v51, *(_QWORD *)(v52 + 8), *(_QWORD *)(v52 + 16));
      v37 += *(_QWORD *)(v52 + 16);
    }
  }
  return v58.location;
}

unint64_t TTruncator::AppendLine(unint64_t this, const TLine *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if (v2 >= 1)
  {
    v4 = this;
    v5 = 0;
    v6 = (unint64_t)v2 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v5);
      this = TLine::InsertPartialRun(*(TLine **)(v4 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 24) - *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16)) >> 3, v8, *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8), *(_QWORD *)(*(_QWORD *)(v8 + 40) + 16));
      ++v5;
    }
    while (v7 != v5);
  }
  return this;
}

id CopyDefaultFontFallbacks(_QWORD *a1)
{
  id result;

  if (qword_1ECDE77B8 != -1)
    dispatch_once_f(&qword_1ECDE77B8, 0, (dispatch_function_t)CopyDefaultFontFallbacks(void)::$_0::__invoke);
  result = (id)qword_1ECDE77B0;
  *a1 = result;
  return result;
}

uint64_t GetDecorationAttributes(unint64_t *a1, uint64_t a2, const __CFString **a3, TAttributes *this, int a5, int *a6, _QWORD *a7, double *a8, double a9, double a10, double *a11, double *a12, double *a13, BOOL *a14)
{
  uint64_t v23;
  int *v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  uint64_t result;
  const void *StrikethroughColor;
  __CFString *v30;
  void *v32;
  const __CFString *v33;
  __CFString *v34;
  void *v35;
  const __CFString *v36;
  const void *v37;
  double Width;
  double v39;
  double *v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  int *v44;
  int *inited;
  double v46;
  double v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  int v54;
  double v55;
  double v56;
  double v57;
  char v58;
  double v59;
  double v60;
  double v61;
  double v62;
  BOOL v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  BOOL v72;
  BOOL v73;
  int v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  char v81;
  double v82;
  double v83;
  double v84;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  __CFString *v91;
  int v92;
  id v94;
  double v95;
  double v96;
  id v97;
  CFRange v98;

  v23 = *((_QWORD *)this + 15);
  if (a5 != 1)
  {
    if (v23)
    {
      v24 = (int *)(v23 + 56);
      goto LABEL_6;
    }
LABEL_11:
    result = 0;
    *a6 = 0;
    return result;
  }
  if (!v23)
    goto LABEL_11;
  v24 = (int *)(v23 + 60);
LABEL_6:
  v25 = *v24;
  *a6 = *v24;
  if (!v25)
    return 0;
  if (a5 != 1 && !*a14)
  {
    v26 = atomic_load((unint64_t *)this + 2);
    if ((**(_BYTE **)(v26 + 40) & 1) == 0)
    {
      v27 = 0;
LABEL_28:
      *a14 = v27;
      goto LABEL_29;
    }
    *(double *)&v97 = -3.72066208e-103;
    v30 = (__CFString *)atomic_load((unint64_t *)this + 3);
    LanguageIdentifierByNormalizing(v30, 1u, (unint64_t *)&v97);
    if (!atomic_load((unint64_t *)&v97))
      goto LABEL_27;
    v32 = (void *)atomic_load((unint64_t *)&v97);
    v33 = v32;
    v34 = (__CFString *)v33;
    if (v33 != CFSTR("ja") && (!v33 || !CFEqual(v33, CFSTR("ja"))))
    {
      v35 = (void *)atomic_load((unint64_t *)&v97);
      v36 = v35;
      if (v36 != CFSTR("ko"))
      {
        if (v36)
        {
          v91 = (__CFString *)v36;
          v92 = CFEqual(v36, CFSTR("ko"));

          if (!v92)
            goto LABEL_27;
LABEL_25:

          v27 = 1;
          goto LABEL_28;
        }

LABEL_27:
        v27 = TAttributes::GetCompositionLanguage(this, v37) == 2;
        goto LABEL_28;
      }

    }
    goto LABEL_25;
  }
  if (a5 == 1)
  {
    StrikethroughColor = TAttributes::GetStrikethroughColor(this, a2, a3);
    goto LABEL_30;
  }
LABEL_29:
  StrikethroughColor = TAttributes::GetUnderlineColor(this, a2, a3);
LABEL_30:
  *a7 = StrikethroughColor;
  v98.location = a2;
  v98.length = (CFIndex)a3;
  Width = TStorageRange::GetWidth((TStorageRange *)(a1 + 24), v98);
  v39 = 0.0;
  if (!a2)
  {
    v40 = (double *)a1[39];
    if (!v40)
      v40 = (double *)MEMORY[0x1E0C9D820];
    v39 = *v40;
  }
  *a8 = Width + v39;
  v94 = 0;
  if (a5 == 1)
  {
    TAttributes::OriginalFont(this, (unint64_t *)&v97);
    do
      v48 = __ldaxr((unint64_t *)&v97);
    while (__stlxr(0, (unint64_t *)&v97));
    do
      v49 = (void *)__ldaxr((unint64_t *)&v94);
    while (__stlxr(v48, (unint64_t *)&v94));

    v50 = atomic_load((unint64_t *)&v94);
    v42 = *(int **)(v50 + 40);
    *a11 = TFont::GetStrikethroughPositionAndThickness((TFont *)v42);
    *(_QWORD *)a12 = v51;
    v47 = 0.0;
    if ((*(_BYTE *)v42 & 1) == 0)
      goto LABEL_46;
  }
  else
  {
    v41 = atomic_load(a1 + 7);
    v42 = *(int **)(v41 + 40);
    *a11 = TFont::GetUnderlinePositionAndThickness((TFont *)v42);
    *(_QWORD *)a12 = v43;
    if ((*(_BYTE *)v42 & 1) == 0)
      goto LABEL_46;
    v44 = v42 + 12;
    inited = v42 + 12;
    if (!v42[12])
      inited = TFont::InitStrikeMetrics((TFont *)v42);
    v46 = *((double *)inited + 1);
    if (!*v44)
      v44 = TFont::InitStrikeMetrics((TFont *)v42);
    v47 = (v46 + *((double *)v44 + 2)) * -0.5;
  }
  *a11 = v47;
LABEL_46:
  v52 = *((_QWORD *)this + 15);
  if (v52)
    v53 = *(double *)(v52 + 48);
  else
    v53 = 0.0;
  *a11 = v53 + *a11;
  if ((*(_BYTE *)v42 & 1) == 0)
  {
    v96 = NAN;
    *(double *)&v97 = NAN;
    v95 = NAN;
    TFont::GetDefaultMetrics((TFont *)v42, (double *)&v97, &v96, &v95);
    v54 = *a6;
    v55 = (double)(*a6 & 7);
    if (a5)
    {
      *a11 = *a11 * a9;
      v56 = v55 * a9 * *a12;
      *a12 = v56;
      v57 = *a11;
      if (*a11 > 1.0 && v56 > 0.35)
      {
        *a12 = ceil(v56);
        v58 = vcvtpd_s64_f64(v56);
        v59 = a9 * a10 - floor(a9 * a10);
        v60 = floor(*a11 + 0.5);
        v61 = floor(*a11) + 0.5;
        if ((v58 & 1) == 0)
          v61 = v60;
        v57 = v61 - v59;
      }
      *a11 = v57 / a9;
      v62 = *a12 / a9;
      *a12 = v62;
      v63 = (v54 & 8) == 0;
      goto LABEL_58;
    }
    v65 = (v96 + *(double *)&v97) * 0.25;
    if (v96 >= 2.0)
      v65 = v96;
    v66 = v65 * 5.3636991;
    if (v65 * 5.3636991 > v96 + *(double *)&v97)
      v66 = v96 + *(double *)&v97;
    v67 = *a11;
    if (*a11 >= 0.0)
      v67 = v66 * -0.0880554625;
    *a11 = -(a9 * v67);
    v68 = *a12 * a9;
    v69 = v65 * a9;
    v70 = v68 * v55;
    *a12 = v68 * v55;
    if ((v54 & 8) != 0)
    {
      *a12 = v70 * 0.75;
      *a11 = v70 * 0.75 * 0.5 + *a11;
      if (v69 < 4.0 || *a12 <= 0.35)
      {
        *a12 = v69 * 0.25;
        v78 = v69 * 0.25 * 2.5;
      }
      else
      {
        v80 = *a12 + -0.5;
        *a12 = ceil(v80);
        v81 = vcvtpd_s64_f64(v80);
        v82 = a9 * a10 - floor(a9 * a10);
        v83 = floor(*a11 + 0.5);
        v84 = floor(*a11) + 0.5;
        if ((v81 & 1) == 0)
          v84 = v83;
        v78 = v82 + v84;
        *a11 = v78;
        if (v78 > 1.5)
        {
          v64 = *a12;
          v79 = 3.0;
          if (*a12 < 2.0)
            goto LABEL_103;
          if (v78 >= 3.0 && (v69 < 7.0 || v78 > 3.0))
            goto LABEL_103;
        }
        v78 = v78 + 1.0;
      }
      *a11 = v78;
      v64 = *a12;
      v79 = 3.0;
    }
    else if (v69 < 2.0 || v70 <= 0.35)
    {
      v78 = *a11;
      v64 = 0.0;
      v79 = 1.0;
    }
    else
    {
      v71 = ceil(v70);
      *a12 = v71;
      if (v71 >= v69
        || (v69 <= 4.0 ? (v72 = v71 < 3.0) : (v72 = 1), !v72 || (v69 <= 2.5 ? (v73 = v71 < 2.0) : (v73 = 1), !v73)))
      {
        v71 = v71 + -1.0;
        *a12 = v71;
      }
      v74 = (int)v71;
      v75 = a9 * a10 - floor(a9 * a10);
      v76 = floor(*a11 + 0.5);
      v77 = floor(*a11) + 0.5;
      if ((v74 & 1) == 0)
        v77 = v76;
      v78 = v75 + v77;
      *a11 = v78;
      if (v78 < 1.5 || (v64 = 0.0, v79 = 1.0, v69 > 4.0) && v78 <= 1.5)
      {
        v79 = 1.0;
        v78 = v78 + 1.0;
        *a11 = v78;
        v64 = 0.0;
      }
    }
LABEL_103:
    v86 = v53 * a9;
    v87 = v79 * *a12;
    if (v69 > 0.0)
    {
      v88 = floor(v69 - v86) + v87 * -0.5;
      if (v88 < v78)
        v78 = v88;
    }
    v89 = ceil(v68 - v86) + v87 * 0.5;
    if (v78 >= v89)
      v89 = v78;
    *a11 = v89 / -a9;
    v90 = v66 * v55 * 0.0440277313;
    if (*a12 / a9 > 0.0)
      v90 = *a12 / a9;
    *a12 = v90;
    goto LABEL_61;
  }
  v62 = *a12;
  v63 = (v25 & 8) == 0;
LABEL_58:
  if (v63)
    v64 = 0.0;
  else
    v64 = v62;
LABEL_61:
  *a13 = v64;

  return 1;
}

BOOL EnumerateOverrides(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v28;
  __int16 v29;
  __int16 v30;

  if (a3)
  {
    v8 = (_QWORD *)*a3;
    v7 = (_QWORD *)a3[1];
    v9 = (_QWORD *)*a3;
    if ((_QWORD *)*a3 != v7)
    {
      v9 = (_QWORD *)*a3;
      while (*v9 == a2)
      {
        v9 += 4;
        if (v9 == v7)
        {
          v9 = (_QWORD *)a3[1];
          break;
        }
      }
    }
    if (a1 < 1)
    {
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      do
      {
        if (v8 == v9)
        {
          v29 = 0;
          v26 = a1 - v11;
          v22 = *(_QWORD *)(a4 + 24);
          v23 = (char *)&v29 + 1;
          v24 = &v29;
          v25 = v11;
          goto LABEL_26;
        }
        v12 = v8[1];
        v13 = v8[2];
        v28 = 0;
        v14 = atomic_load(v8 + 3);
        std::function<void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::operator()(*(_QWORD *)(a4 + 24), v12, v13, v14, (uint64_t)&v28 + 1, (uint64_t)&v28);
        v10 += HIBYTE(v28);
        if ((_BYTE)v28)
          break;
        v11 = v13 + v12;
        v8 += 4;
      }
      while (v13 + v12 < a1);
      if (v10)
      {
        v15 = (_QWORD *)*a3;
        v16 = a3[1];
        v17 = *a3 + 32 * v10;
        if (v17 != v16)
        {
          do
          {
            *(_OWORD *)v15 = *(_OWORD *)v17;
            v15[2] = *(_QWORD *)(v17 + 16);
            v18 = v15 + 3;
            v19 = (unint64_t *)(v17 + 24);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(0, v19));
            do
              v21 = (void *)__ldaxr(v18);
            while (__stlxr(v20, v18));

            v17 += 32;
            v15 += 4;
          }
          while (v17 != v16);
          v17 = a3[1];
        }
        for (; (_QWORD *)v17 != v15; v17 -= 32)

        a3[1] = v15;
      }
    }
    return v11 == a1;
  }
  else
  {
    v30 = 0;
    v22 = *(_QWORD *)(a4 + 24);
    v23 = (char *)&v30 + 1;
    v24 = &v30;
    v25 = 0;
    v26 = a1;
LABEL_26:
    std::function<void ()(CFRange,__CFDictionary const*,BOOL *,BOOL *)>::operator()(v22, v25, v26, 0, (uint64_t)v23, (uint64_t)v24);
    return 1;
  }
}

void EvalBezierCurve(double a1, unsigned int a2, const CGPoint *a3)
{
  __int128 v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  _OWORD v22[4];
  _OWORD __dst[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  v22[2] = v6;
  v22[3] = v6;
  v22[0] = v6;
  v22[1] = v6;
  v7 = a2 + 1;
  v8 = 16 * (a2 + 1);
  if (a2 <= 2)
    v9 = 64 - 16 * v7;
  else
    v9 = 0;
  v10 = __dst;
  memset(&__dst[v7], 255, v9);
  memcpy(__dst, a3, v8);
  v11 = a2;
  v12 = v22;
  do
  {
    v13 = 0;
    v14 = v12;
    v15 = v11 - 1;
    if (v11 <= 1)
      v16 = 1;
    else
      v16 = v11;
    do
    {
      v17 = *((double *)&v10[v13] + 1);
      v18 = *((double *)&v10[v13 + 1] + 1);
      v19 = std::__lerp[abi:nn180100]<double>(*(double *)&v10[v13], *(double *)&v10[v13 + 1], a1);
      v20 = std::__lerp[abi:nn180100]<double>(v17, v18, a1);
      v21 = (double *)&v14[v13];
      *v21 = v19;
      v21[1] = v20;
      ++v13;
      --v16;
    }
    while (v16);
    v11 = v15;
    v12 = v10;
    v10 = v14;
  }
  while ((_DWORD)v15);
}

uint64_t SolveQuadratic(double a1, double a2, double a3, double *a4)
{
  double v5;
  double v6;
  double v7;

  if (fabs(a1) < 1.0e-10)
  {
    if (fabs(a2) >= 1.0e-10)
    {
      *a4 = -a3 / a2;
      return 1;
    }
    return 0;
  }
  v5 = a1 * -4.0 * a3 + a2 * a2;
  if (v5 < 0.0)
    return 0;
  v6 = sqrt(v5);
  v7 = a1 + a1;
  *a4 = (-a2 - v6) / v7;
  a4[1] = (v6 - a2) / v7;
  return 2;
}

void CopyPostScriptNameForAliasLowercased(const __CFString *a1@<X0>, unint64_t *a2@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  unint64_t v6;
  id v7;

  if (qword_1ECDE7DD8 != -1)
    dispatch_once(&qword_1ECDE7DD8, &__block_literal_global_80);
  if (qword_1ECDE7DD0
    && (v4 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECDE7DD0, CFSTR("Aliases"))) != 0)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("Faces"));
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, a1);
  }
  else
  {
    Value = 0;
  }
  v7 = Value;
  do
    v6 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));
  *a2 = v6;

}

void SetStrokeNSColor(CGContext *a1, id a2)
{
  CGContextSetStrokeColorWithColor(a1, (CGColorRef)objc_msgSend(a2, sel_CGColor));
}

uint64_t GetInterceptsAtY(int a1, const CGPoint *a2, double a3, double *a4, double *a5)
{
  double v8;
  double v9;
  uint64_t v12;
  double y;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  long double *v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  long double *v43;
  uint64_t v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  long double v53;
  double v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 3:
      y = a2->y;
      v14 = a2[1].y;
      v15 = a2[2].y;
      v16 = v15 * -3.0 - (y - v14 * 3.0) + a2[3].y;
      v17 = v14 * -6.0 + y * 3.0 + v15 * 3.0;
      v18 = v14 * 3.0 + y * -3.0;
      v19 = y - a3;
      v54 = NAN;
      v55 = NAN;
      v53 = NAN;
      if (fabs(v16) >= 1.0e-10)
      {
        v33 = v17 / v16;
        v34 = (v18 / v16 * -3.0 + v33 * v33) / 9.0;
        v35 = (v18 / v16 * (v17 / v16 * -9.0) + v33 * (v33 + v33) * v33 + v19 / v16 * 27.0) / 54.0;
        v36 = v34 * -(v34 * v34) + v35 * v35;
        if (v36 >= 0.0)
        {
          v41 = sqrt(v36);
          v42 = cbrt(v41 - v35);
          v53 = v42 + cbrt(-v35 - v41) + v33 / -3.0;
          v20 = 1;
        }
        else
        {
          v37 = pow(v34, 1.5);
          v38 = acos(v35 / v37);
          v39 = sqrt(v34) * -2.0;
          v40 = v33 / -3.0;
          v53 = v40 + v39 * cos(v38 / 3.0);
          v54 = v40 + v39 * cos((v38 + 6.28318531) / 3.0);
          v55 = v40 + v39 * cos((v38 + -6.28318531) / 3.0);
          std::__sort<std::__less<double,double> &,double *>();
          v20 = 3;
        }
      }
      else
      {
        v20 = SolveQuadratic(v17, v18, v19, &v53);
        if (!v20)
          return 0;
      }
      v12 = 0;
      v43 = &v53;
      v44 = v20;
      do
      {
        v45 = *v43;
        if (*v43 >= 0.0 && v45 <= 1.0)
        {
          EvalBezierCurve(v45, 3u, a2);
          a4[v12] = v47;
          if (a5)
          {
            v48 = *v43;
            EvalBezierCurve(*v43, 2u, a2);
            v50 = v49;
            EvalBezierCurve(v48, 2u, a2 + 1);
            a5[v12] = (v51 - v50) * 3.0;
          }
          v12 = (v12 + 1);
        }
        ++v43;
        --v44;
      }
      while (v44);
      break;
    case 2:
      v21 = a2->y;
      v22 = a2[1].y;
      v23 = v21 + v22 * -2.0 + a2[2].y;
      v53 = NAN;
      v54 = NAN;
      v24 = SolveQuadratic(v23, v22 + v22 + v21 * -2.0, v21 - a3, &v53);
      v12 = 0;
      if (v24)
      {
        v25 = &v53;
        v26 = v24;
        do
        {
          v27 = *v25;
          if (*v25 >= 0.0 && v27 <= 1.0)
          {
            EvalBezierCurve(*v25, 2u, a2);
            a4[v12] = v29;
            if (a5)
            {
              EvalBezierCurve(v27, 1u, a2);
              v31 = v30;
              EvalBezierCurve(v27, 1u, a2 + 1);
              a5[v12] = v32 - v31 + v32 - v31;
            }
            v12 = (v12 + 1);
          }
          ++v25;
          --v26;
        }
        while (v26);
      }
      break;
    case 1:
      v8 = a2->y;
      v9 = a2[1].y;
      if ((v8 >= a3 || v9 <= a3) && (v8 <= a3 || v9 >= a3))
        return 0;
      *a4 = a2->x + (a3 - v8) * (a2[1].x - a2->x) / (v9 - v8);
      if (a5)
        *a5 = v9 - v8;
      return 1;
    default:
      return 0;
  }
  return v12;
}

void AttributedString.AdaptiveImageGlyph.init(_convertingFrom:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = objc_msgSend(a1, sel_imageContent);
  v5 = sub_1849211F0();
  v7 = v6;

  v8 = objc_msgSend(a1, sel_contentIdentifier);
  v9 = sub_184921220();
  v11 = v10;

  v12 = objc_msgSend(a1, sel_contentDescription);
  v13 = sub_184921220();
  v15 = v14;

  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v11;
  a2[4] = v13;
  a2[5] = v15;
}

void AttributedString.AdaptiveImageGlyph.init(imageContent:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = objc_allocWithZone((Class)CTAdaptiveImageGlyph);
  v7 = (void *)sub_1849211E4();
  v8 = objc_msgSend(v6, sel_initWithImageContent_, v7);

  v9 = objc_msgSend(v8, sel_imageContent);
  v20 = sub_1849211F0();
  v11 = v10;

  v12 = objc_msgSend(v8, sel_contentIdentifier);
  v13 = sub_184921220();
  v15 = v14;

  v16 = objc_msgSend(v8, sel_contentDescription);
  v17 = sub_184921220();
  v19 = v18;
  sub_18485D8A0(a1, a2);

  *a3 = v20;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v15;
  a3[4] = v17;
  a3[5] = v19;
}

uint64_t sub_18485D8A0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t AttributedString.AdaptiveImageGlyph.imageContent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_18485D914(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_18485D914(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t AttributedString.AdaptiveImageGlyph.contentIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.AdaptiveImageGlyph.contentDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void static AttributedString.AdaptiveImageGlyph.contentType.getter()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(), sel_contentType);
  sub_184921208();

}

uint64_t AttributedString.AdaptiveImageGlyph.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_18485D914(*v0, v2);
  sub_1849211FC();
  sub_18485D8A0(v1, v2);
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18492122C();
  return swift_bridgeObjectRelease();
}

BOOL sub_18485DAAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18485DAC0()
{
  sub_184921274();
  sub_184921280();
  return sub_18492128C();
}

uint64_t sub_18485DB04()
{
  return sub_184921280();
}

uint64_t sub_18485DB2C()
{
  sub_184921274();
  sub_184921280();
  return sub_18492128C();
}

uint64_t sub_18485DB6C()
{
  _BYTE *v0;
  int v1;
  unint64_t v2;

  v1 = *v0;
  v2 = 0xD000000000000011;
  if (v1 != 1)
    v2 = 0xD000000000000012;
  if (*v0)
    return v2;
  else
    return 0x6E6F436567616D69;
}

uint64_t sub_18485DBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18485F1A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18485DBF4()
{
  return 0;
}

void sub_18485DC00(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_18485DC0C()
{
  sub_18485EBBC();
  return sub_1849212B0();
}

uint64_t sub_18485DC34()
{
  sub_18485EBBC();
  return sub_1849212BC();
}

uint64_t AttributedString.AdaptiveImageGlyph.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD15208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[2];
  v14[3] = v1[3];
  v14[4] = v10;
  v11 = v1[4];
  v14[1] = v1[5];
  v14[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18485EBBC();
  sub_1849212A4();
  v15 = v9;
  v16 = v8;
  v17 = 0;
  sub_18485EC00();
  v12 = v14[5];
  sub_18492125C();
  if (!v12)
  {
    LOBYTE(v15) = 1;
    sub_184921250();
    LOBYTE(v15) = 2;
    sub_184921250();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AttributedString.AdaptiveImageGlyph.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_184921274();
  sub_18485D914(v1, v2);
  sub_1849211FC();
  sub_18485D8A0(v1, v2);
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  return sub_18492128C();
}

uint64_t AttributedString.AdaptiveImageGlyph.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD15218);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18485EBBC();
  sub_184921298();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v29 = 0;
  sub_18485EC64();
  sub_184921244();
  v11 = v27;
  v10 = v28;
  LOBYTE(v27) = 1;
  sub_18485D914(v11, v28);
  v12 = sub_184921238();
  v14 = v13;
  v24 = v12;
  v26 = v10;
  LOBYTE(v27) = 2;
  swift_bridgeObjectRetain();
  v15 = v14;
  v25 = 0;
  v16 = sub_184921238();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20 = v16;
  v19(v9, v5);
  v21 = v26;
  sub_18485D914(v11, v26);
  swift_bridgeObjectRetain();
  sub_18485D8A0(v11, v21);
  *a2 = v11;
  a2[1] = v21;
  a2[2] = v24;
  a2[3] = v15;
  a2[4] = v20;
  a2[5] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_18485D8A0(v11, v21);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18485E108@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AttributedString.AdaptiveImageGlyph.init(from:)(a1, a2);
}

uint64_t sub_18485E11C(_QWORD *a1)
{
  return AttributedString.AdaptiveImageGlyph.encode(to:)(a1);
}

uint64_t sub_18485E130()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_184921274();
  sub_18485D914(v1, v2);
  sub_1849211FC();
  sub_18485D8A0(v1, v2);
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  return sub_18492128C();
}

uint64_t sub_18485E1E8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_18485D914(*v0, v2);
  sub_1849211FC();
  sub_18485D8A0(v1, v2);
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18492122C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18485E28C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_184921274();
  sub_18485D914(v1, v2);
  sub_1849211FC();
  sub_18485D8A0(v1, v2);
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18492122C();
  swift_bridgeObjectRelease();
  return sub_18492128C();
}

id static CTAdaptiveImageGlyph._adaptiveImageGlyph(convertingFrom:)(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = objc_allocWithZone((Class)CTAdaptiveImageGlyph);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_184921214();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithContentIdentifier_, v4);

  if (!v5)
  {
    v6 = objc_allocWithZone((Class)CTAdaptiveImageGlyph);
    sub_18485D914(v1, v2);
    v7 = (void *)sub_1849211E4();
    v5 = objc_msgSend(v6, sel_initWithImageContent_, v7);
    sub_18485D8A0(v1, v2);

  }
  return v5;
}

void sub_18485E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_18485E480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x18485E664);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_18485E688(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_18485E6E4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_18485E420((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_18485D8A0(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_18485E8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1849211C0();
  v11 = result;
  if (result)
  {
    result = sub_1849211D8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1849211CC();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_18485E420(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphV2eeoiySbAF_AFtFZ_0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_18485E9B8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_18485E9EC + *((int *)qword_18485EB48 + (v0 >> 62))))();
}

uint64_t sub_18485E9FC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  if (a2 != BYTE6(v3))
    return 0;
  if (a2 >= 1)
  {
    v21 = v6;
    v22 = v9;
    v13 = v7;
    v14 = v2;
    v15 = a1;
    sub_18485D914(v4, v3);
    sub_18485E688(v5, v12);
    a1 = v15;
    v2 = v14;
    v7 = v13;
    v6 = v21;
    v9 = v22;
    if ((v16 & 1) == 0)
      return 0;
  }
  if (v11 == v8 && v10 == a1 || (v17 = v2, v18 = sub_184921268(), v2 = v17, v19 = v18, result = 0, (v19 & 1) != 0))
  {
    if (v2 == v6 && v7 == v9)
      return 1;
    else
      return sub_184921268();
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DC0AB4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_18485EBBC()
{
  unint64_t result;

  result = qword_1EDD169F0[0];
  if (!qword_1EDD169F0[0])
  {
    result = MEMORY[0x186DC0AC0](&unk_184924558, &_s18AdaptiveImageGlyphV10CodingKeysON);
    atomic_store(result, qword_1EDD169F0);
  }
  return result;
}

unint64_t sub_18485EC00()
{
  unint64_t result;

  result = qword_1EDD15210;
  if (!qword_1EDD15210)
  {
    result = MEMORY[0x186DC0AC0](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDD15210);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_18485EC64()
{
  unint64_t result;

  result = qword_1EDD15220;
  if (!qword_1EDD15220)
  {
    result = MEMORY[0x186DC0AC0](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDD15220);
  }
  return result;
}

unint64_t sub_18485ECAC()
{
  unint64_t result;

  result = qword_1EDD15228;
  if (!qword_1EDD15228)
  {
    result = MEMORY[0x186DC0AC0](&protocol conformance descriptor for AttributedString.AdaptiveImageGlyph, &type metadata for AttributedString.AdaptiveImageGlyph);
    atomic_store(result, (unint64_t *)&qword_1EDD15228);
  }
  return result;
}

uint64_t _s18AdaptiveImageGlyphVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s18AdaptiveImageGlyphVwxx(uint64_t a1)
{
  sub_18485D8A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *_s18AdaptiveImageGlyphVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_18485D914(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s18AdaptiveImageGlyphVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_18485D914(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_18485D8A0(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *_s18AdaptiveImageGlyphVwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_18485D8A0(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18AdaptiveImageGlyphVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s18AdaptiveImageGlyphVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.AdaptiveImageGlyph()
{
  return &type metadata for AttributedString.AdaptiveImageGlyph;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s18AdaptiveImageGlyphV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s18AdaptiveImageGlyphV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18485F034 + 4 * byte_1849243A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18485F068 + 4 * byte_1849243A0[v4]))();
}

uint64_t sub_18485F068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18485F070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18485F078);
  return result;
}

uint64_t sub_18485F084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18485F08CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18485F090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18485F098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18485F0A4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_18485F0B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s18AdaptiveImageGlyphV10CodingKeysOMa()
{
  return &_s18AdaptiveImageGlyphV10CodingKeysON;
}

unint64_t sub_18485F0CC()
{
  unint64_t result;

  result = qword_1EDD16D00[0];
  if (!qword_1EDD16D00[0])
  {
    result = MEMORY[0x186DC0AC0](&unk_184924530, &_s18AdaptiveImageGlyphV10CodingKeysON);
    atomic_store(result, qword_1EDD16D00);
  }
  return result;
}

unint64_t sub_18485F114()
{
  unint64_t result;

  result = qword_1EDD16E10;
  if (!qword_1EDD16E10)
  {
    result = MEMORY[0x186DC0AC0](&unk_1849244A0, &_s18AdaptiveImageGlyphV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD16E10);
  }
  return result;
}

unint64_t sub_18485F15C()
{
  unint64_t result;

  result = qword_1EDD16E18[0];
  if (!qword_1EDD16E18[0])
  {
    result = MEMORY[0x186DC0AC0](&unk_1849244C8, &_s18AdaptiveImageGlyphV10CodingKeysON);
    atomic_store(result, qword_1EDD16E18);
  }
  return result;
}

uint64_t sub_18485F1A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F436567616D69 && a2 == 0xEC000000746E6574;
  if (v2 || (sub_184921268() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000184952D50 || (sub_184921268() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000184952D70)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_184921268();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

double GetLanguageAwareAdjustRatio(void)
{
  if (qword_1ECDE7430 != -1)
    dispatch_once_f(&qword_1ECDE7430, 0, (dispatch_function_t)GetLanguageAwareAdjustRatio(void)::$_0::__invoke);
  return *(double *)&qword_1ECDE7428;
}

void *GetLanguageAwareAdjustRatio(void)::$_0::__invoke()
{
  void *result;
  double v1;
  double v2;
  BOOL v3;
  double v4;

  qword_1ECDE7428 = 0x3FD51EB851EB851FLL;
  result = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "valueForKey:", CFSTR("NSLanguageAwareAdjustmentRatio"));
  if (result)
  {
    result = (void *)objc_msgSend(result, "doubleValue");
    v2 = 1.0;
    if (v1 <= 1.0)
      v2 = v1;
    v3 = v1 < 0.0;
    v4 = 0.0;
    if (!v3)
      v4 = v2;
    qword_1ECDE7428 = *(_QWORD *)&v4;
  }
  return result;
}

__CFString *TCharStream::DebugDescription(TCharStream *this)
{
  CFRange v2;

  v2.length = *((_QWORD *)this + 2);
  v2.location = 0;
  return TCharStream::DebugDescriptionForRange(this, v2);
}

__CFString *TStorageRange::DebugDescription(TStorageRange *this)
{
  return TStorageRange::DebugDescriptionWithInfoFromRun(this, 0, *MEMORY[0x1E0C9D820], -1);
}

uint64_t ChineseCompositionRules::GetCharacterClass(UChar32 c, int a2, int a3)
{
  uint64_t result;
  int v5;
  char v6;
  BOOL v7;

  result = 8;
  if (c > 12288)
  {
    if ((c - 12289) <= 0x1E)
    {
      v5 = 1 << (c - 1);
      if ((v5 & 0x77F9FF80) != 0)
        return result;
      if ((v5 & 3) != 0)
        goto LABEL_14;
    }
    v6 = c - 1;
    if ((c - 65281) <= 0x3C)
    {
      if (((1 << v6) & 0x46000001) != 0)
      {
        v7 = a3 == 2 || a3 == 4;
        goto LABEL_31;
      }
      if (((1 << v6) & 0x1400000000000180) != 0)
        return result;
      if (((1 << v6) & 0x2800) != 0)
      {
LABEL_14:
        v7 = a3 == 4;
LABEL_31:
        if (v7)
          return 7;
        else
          return 1;
      }
    }
    if ((c - 65371) <= 5 && c != 65372)
      return result;
    goto LABEL_16;
  }
  if (c > 10628)
  {
    if ((c - 10629) < 2)
      return result;
  }
  else
  {
    switch(c)
    {
      case 40:
        return 5;
      case 41:
        return 6;
      case 8943:
        return result;
    }
  }
LABEL_16:
  if ((c - 33) > 0xD)
  {
    if ((c - 8208) < 0x18
      || (c - 58) <= 0x26 && ((1 << (c - 58)) & 0x7E0000003FLL) != 0)
    {
      return result;
    }
  }
  else if (c != 37 && c != 43)
  {
    return result;
  }
  if (!a2)
    a2 = 1 << u_charType(c);
  if ((a2 & 0xC0180D0) != 0)
    return 8;
  if ((a2 & 0x1000) != 0)
    return 2;
  if (uscript_getScript() == 18)
    return 8;
  result = 8;
  if (c && c != 8203)
  {
    if (((u_getIntPropertyValue(c, UCHAR_EAST_ASIAN_WIDTH) - 3) & 0xFFFFFFFD) != 0)
      return 4;
    else
      return 3;
  }
  return result;
}

uint64_t ChineseCompositionRules::GetCharacterSpacing(int a1, int a2, UChar32 c, int a4, UChar32 a5, int a6, unsigned int *a7)
{
  int CharacterClass;
  unsigned int v14;
  int v16;
  int v17;
  uint64_t v18;
  char v19;

  CharacterClass = a4;
  if (a4 == 9)
    CharacterClass = ChineseCompositionRules::GetCharacterClass(c, 0, a1);
  v14 = ChineseCompositionRules::GetCharacterClass(a5, a6, a1);
  *a7 = v14;
  if ((a6 & 0x6000) != 0 || a5 == 10)
    v16 = 1;
  else
    v16 = 8;
  if (CharacterClass != 1)
    v16 = CharacterClass;
  if (a5)
    v17 = v16;
  else
    v17 = CharacterClass;
  if ((c - 48) > 9 || (v18 = 5, a5 != 26085) && a5 != 26376)
  {
    if ((a5 - 48) > 9 || (v18 = 5, c != 26085) && c != 26376)
    {
      if (a1 == 4 && v17 == 1)
      {
        v18 = 0;
        if (v14 == 4)
          v19 = a2;
        else
          v19 = 0;
        if (v14 == 1 || (v19 & 1) != 0)
          return v18;
      }
      else if (a2)
      {
        v18 = 0;
        if (v17 == 4 || v14 == 4)
          return v18;
      }
      return ChineseCompositionRules::GetCharacterSpacing(CTCompositionLanguage,BOOL,unsigned int,ChineseCompositionRules::CharacterClass,unsigned int,unsigned int,ChineseCompositionRules::CharacterClass*)::kTable[9 * v17 + v14];
    }
  }
  return v18;
}

uint64_t AddSpace(uint64_t result, const TCharStream *a2, uint64_t a3, double a4, uint64_t a5, double a6)
{
  TLine *v10;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t GlyphIndexForChar;
  char v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;

  v10 = (TLine *)result;
  if ((*(_WORD *)(result + 152) & 1) != 0)
  {
    result = TLine::FindRunWithCharIndex((TLine *)result, a3, 1);
    v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * result) + 48);
    if (a5 < 0)
    {
      v22 = 0;
      v21 = 0;
    }
    else
    {
      result = TLine::FindRunWithCharIndex(v10, a5, 1);
      v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * result) + 48);
      v22 = v21 != 0;
      if (v21)
        v23 = v20 == v21;
      else
        v23 = 1;
      if (!v23)
      {
        if (*(unsigned __int8 *)(v20 + 224) != *(unsigned __int8 *)(v21 + 224))
          return result;
        v22 = 1;
      }
    }
    if (a4 != 0.0)
    {
      GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v20, a3);
      result = AddSpace(v20, GlyphIndexForChar, a4, 0);
    }
    v25 = !v22;
    if (a6 == 0.0)
      v25 = 1;
    if ((v25 & 1) == 0)
    {
      v26 = TRun::GetGlyphIndexForCharIndex<false>(v21, a5);
      return AddSpace(v21, v26, a6, 1);
    }
  }
  else
  {
    if (a4 != 0.0)
    {
      v12 = 0xAAAAAAAAAAAAAAAALL;
      v43 = 0xAAAAAAAAAAAAAAAALL;
      v44 = 0xAAAAAAAAAAAAAAAALL;
      TLine::GetClusterRange((TLine *)result, a2, a3, 2, &v43, 0, 0);
      v13 = v44 + v43;
      v14 = v44 + v43 - 1;
      v15 = *((_QWORD *)v10 + 2);
      v16 = *((_QWORD *)v10 + 3);
      if (v15 == v16)
      {
        v18 = *((_QWORD *)v10 + 2);
      }
      else
      {
        v17 = 0;
        v18 = *((_QWORD *)v10 + 2);
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 208) + v17;
          if (v19 >= v13)
          {
            v12 = v14 - v17;
            goto LABEL_24;
          }
          v18 += 8;
          v17 = v19;
        }
        while (v18 != v16);
        v12 = 0xAAAAAAAAAAAAAAAALL;
        v18 = *((_QWORD *)v10 + 3);
      }
LABEL_24:
      while (1)
      {
        v27 = v14;
        result = *(_QWORD *)(*(_QWORD *)v18 + 48);
        v28 = *(_QWORD *)(result + 216);
        v29 = *(_QWORD *)(result + 200);
        if (*(__int16 *)(*(_QWORD *)(v28 + 16) + 2 * v29 + 2 * v12) != -1
          && (*(_DWORD *)(*(_QWORD *)(v28 + 40) + 4 * v29 + 4 * v12) & 0x20) == 0)
        {
          break;
        }
        if (v43 >= v27 || v13 == 0x8000000000000000)
          goto LABEL_35;
        v14 = v27 - 1;
        v18 = *((_QWORD *)v10 + 2);
        if (v15 != v16)
        {
          v30 = 0;
          v18 = *((_QWORD *)v10 + 2);
          while (1)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 208) + v30;
            if (v31 >= v27)
              break;
            v18 += 8;
            v30 = v31;
            if (v18 == v16)
            {
              v18 = *((_QWORD *)v10 + 3);
              goto LABEL_24;
            }
          }
          v12 = v14 - v30;
        }
      }
      result = AddSpace(result, v12, a4, 0);
    }
LABEL_35:
    if (a6 != 0.0)
    {
      v32 = 0xAAAAAAAAAAAAAAAALL;
      v43 = 0xAAAAAAAAAAAAAAAALL;
      v44 = 0xAAAAAAAAAAAAAAAALL;
      TLine::GetClusterRange(v10, a2, a5, 2, &v43, 0, 0);
      v33 = *((_QWORD *)v10 + 2);
      v34 = *((_QWORD *)v10 + 3);
      if (v33 == v34)
      {
        v36 = *((_QWORD *)v10 + 2);
      }
      else
      {
        v35 = 0;
        v36 = *((_QWORD *)v10 + 2);
        while (1)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 + 40) + 208) + v35;
          if (v37 > v43)
            break;
          v36 += 8;
          v35 = v37;
          if (v36 == v34)
          {
            v32 = 0xAAAAAAAAAAAAAAAALL;
            v36 = *((_QWORD *)v10 + 3);
            goto LABEL_43;
          }
        }
        v32 = v43 - v35;
      }
LABEL_43:
      v38 = v43;
LABEL_44:
      while (1)
      {
        result = *(_QWORD *)(*(_QWORD *)v36 + 48);
        v39 = *(_QWORD *)(result + 216);
        v40 = *(_QWORD *)(result + 200);
        if (*(__int16 *)(*(_QWORD *)(v39 + 16) + 2 * v40 + 2 * v32) != -1
          && (*(_DWORD *)(*(_QWORD *)(v39 + 40) + 4 * v40 + 4 * v32) & 0x20) == 0)
        {
          return AddSpace(result, v32, a6, 1);
        }
        if (v43 > ++v38 || (uint64_t)(v44 + v43) <= v38)
          return result;
        v36 = *((_QWORD *)v10 + 2);
        if (v33 != v34)
        {
          v41 = 0;
          v36 = *((_QWORD *)v10 + 2);
          while (1)
          {
            v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 + 40) + 208) + v41;
            if (v42 > v38)
              break;
            v36 += 8;
            v41 = v42;
            if (v36 == v34)
            {
              v36 = *((_QWORD *)v10 + 3);
              goto LABEL_44;
            }
          }
          v32 = v38 - v41;
        }
      }
    }
  }
  return result;
}

BOOL CJKCompositionEngine::IsEnabled(unsigned int a1, uint64_t a2)
{
  uint64_t v3;

  if (a1 < 2)
    return 0;
  if ((*(_WORD *)(a2 + 138) & 0x1000) != 0)
    return 0;
  v3 = *(_QWORD *)(a2 + 120);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8))
      return 0;
  }
  if (CJKCompositionEngine::IsEnabled(void)::once != -1)
    dispatch_once_f(&CJKCompositionEngine::IsEnabled(void)::once, 0, (dispatch_function_t)CJKCompositionEngine::IsEnabled(void)::$_0::__invoke);
  return gCJKCompositionRulesEnabled != 0;
}

void GetOpticalBoundsAdjustment(int a1, TRun *this, CFRange a3)
{
  double ImageBounds;
  uint64_t v8;
  double v9;

  atomic_load((unint64_t *)this + 7);
  v8 = 0;
  v9 = 0.0;
  a3.length = 1;
  ImageBounds = TRun::GetImageBounds(this, 0, a3, &v9, (double *)&v8);
  if (a1)
    CGRectGetMaxX(*(CGRect *)&ImageBounds);
  else
    CGRectGetMinX(*(CGRect *)&ImageBounds);
}

uint64_t CJKCompositionEngine::ShouldIgnoreCurlyQuotes(CJKCompositionEngine *this)
{
  unint64_t v1;
  __int128 v2;
  const __CFString *v3;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v6;
  char *v7;
  int CString;
  int v9;
  char v10;
  char v11;
  int Delimiter;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void **v17[4];
  int64x2_t v18;
  uint64_t v19;
  _OWORD v20[2];
  _OWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock_with_options();
  if (dword_1ECDE743C != TGenerationSeed::sGeneration)
  {
    dword_1ECDE743C = TGenerationSeed::sGeneration;
    v16 = (id)0xAAAAAAAAAAAAAAAALL;
    CopyPreferredLanguage((unint64_t *)&v16);
    v1 = atomic_load((unint64_t *)&v16);
    if (v1)
    {
      *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v20[0] = v2;
      v20[1] = v2;
      v19 = 0;
      v18 = 0uLL;
      v21 = v20;
      v3 = (const __CFString *)atomic_load((unint64_t *)&v16);
      if (CFStringGetCStringPtr(v3, 0x600u))
        goto LABEL_10;
      Length = CFStringGetLength(v3);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
      v6 = MaximumSizeForEncoding + 1;
      v7 = (char *)v18.i64[0];
      if ((unint64_t)(MaximumSizeForEncoding + 1) <= v18.i64[1] - v18.i64[0])
      {
        if ((unint64_t)(MaximumSizeForEncoding + 1) < v18.i64[1] - v18.i64[0])
          v18.i64[1] = v18.i64[0] + v6;
      }
      else
      {
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(&v18, MaximumSizeForEncoding + 1 - (v18.i64[1] - v18.i64[0]));
        v7 = (char *)v18.i64[0];
      }
      CString = CFStringGetCString(v3, v7, v6, 0x600u);
      v9 = 0;
      if (CString)
      {
        if (v18.i64[0])
        {
LABEL_10:
          ulocdata_open();
          v10 = 0;
          v17[3] = (void **)0x200000000;
          while (1)
          {
            v11 = v10;
            memset(v17, 170, 20);
            Delimiter = ulocdata_getDelimiter();
            if (Delimiter >= 1)
              break;
LABEL_15:
            v10 = 1;
            if ((v11 & 1) != 0)
            {
              v9 = 0;
              goto LABEL_18;
            }
          }
          v13 = 0;
          while ((*(unsigned __int16 *)((char *)v17 + v13) | 4) != 0x201D)
          {
            v13 += 2;
            if (2 * Delimiter == v13)
              goto LABEL_15;
          }
          v9 = 1;
LABEL_18:
          ulocdata_close();
        }
      }
      v17[0] = (void **)&v18;
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](v17);
      LOBYTE(v1) = v9 != 0;
    }
    _MergedGlobals_4 = v1;

  }
  v14 = _MergedGlobals_4;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECDE7440);
  return v14;
}

uint64_t CJKCompositionEngine::GetCharacterClass(UChar32 c, int a2)
{
  uint64_t result;
  int v4;
  char v5;
  BOOL v6;
  unsigned int v7;

  result = 0;
  if (c <= 65287)
  {
    switch(c)
    {
      case 12289:
        goto LABEL_14;
      case 12290:
        return 6;
      case 12291:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12306:
      case 12307:
        goto LABEL_27;
      case 12296:
      case 12298:
        return 1;
      case 12297:
      case 12299:
        return 4;
      case 12300:
      case 12302:
      case 12304:
      case 12308:
      case 12310:
        return result;
      case 12301:
      case 12303:
      case 12305:
      case 12309:
      case 12311:
        goto LABEL_3;
      default:
        v5 = c - 20;
        if ((c - 8212) > 0x12)
          goto LABEL_23;
        if (((1 << v5) & 0x60001) != 0)
          return 13;
        if (((1 << v5) & 0x110) != 0)
        {
          v6 = CJKCompositionEngine::ShouldIgnoreCurlyQuotes(0) == 0;
          v7 = 2;
        }
        else
        {
          if (((1 << v5) & 0x220) == 0)
          {
LABEL_23:
            v4 = 65281;
            goto LABEL_24;
          }
          v6 = CJKCompositionEngine::ShouldIgnoreCurlyQuotes(0) == 0;
          v7 = 5;
        }
        if (v6)
          result = v7;
        else
          result = 13;
        break;
    }
    return result;
  }
  if (c > 65305)
  {
    if (c > 65370)
    {
      if (c == 65373)
        return 4;
      if (c == 65371)
        return 1;
    }
    else
    {
      if ((c - 65306) < 2)
        return 9;
      v4 = 65311;
LABEL_24:
      if (c == v4)
        return 9;
    }
LABEL_27:
    if ((c - 33) > 0xD)
    {
      if ((c - 8208) < 0x18
        || (c - 58) <= 0x26 && ((1 << (c - 58)) & 0x7E0000003FLL) != 0)
      {
        return 13;
      }
    }
    else if (c != 37 && c != 43)
    {
      return 13;
    }
    if (!a2)
      a2 = 1 << u_charType(c);
    if ((a2 & 0xC0180D0) == 0)
    {
      if ((a2 & 0x1000) != 0)
        return 12;
      if (uscript_getScript() != 18)
      {
        if (((u_getIntPropertyValue(c, UCHAR_EAST_ASIAN_WIDTH) - 3) & 0xFFFFFFFD) != 0)
          return 11;
        else
          return 14;
      }
    }
    return 13;
  }
  switch(c)
  {
    case 65288:
      return result;
    case 65289:
LABEL_3:
      result = 3;
      break;
    case 65292:
LABEL_14:
      result = 7;
      break;
    case 65294:
      result = 8;
      break;
    default:
      goto LABEL_27;
  }
  return result;
}

uint64_t CJKCompositionRules::GetCharacterClass(UChar32 a1, int a2, int a3)
{
  uint64_t result;
  int CharacterClass;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;

  if ((a2 & 0xC0180D0) != 0)
    return 7;
  CharacterClass = CJKCompositionEngine::GetCharacterClass(a1, a2);
  result = 0;
  switch(CharacterClass)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a3 == 4)
        return 7;
      else
        return 1;
    case 3:
    case 4:
      return 2;
    case 5:
      v6 = a3 == 4;
      v7 = 3;
      goto LABEL_13;
    case 6:
    case 7:
      return 4;
    case 8:
      v6 = a3 == 2;
      v7 = 7;
      v8 = 4;
      goto LABEL_14;
    case 9:
      v6 = a3 == 2;
      v7 = 4;
LABEL_13:
      v8 = 7;
LABEL_14:
      if (v6)
        result = v8;
      else
        result = v7;
      break;
    case 11:
      result = 5;
      break;
    case 12:
    case 13:
      return 7;
    default:
      result = 6;
      break;
  }
  return result;
}

uint64_t CJKAddSpace(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  TLine *v10;
  CFIndex v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  CFIndex GlyphIndexForChar;
  char v29;
  CFIndex v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  double v36;
  CFIndex v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  double v50;
  int64_t v51;
  unint64_t v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;

  v10 = (TLine *)result;
  if ((*(_WORD *)(result + 152) & 1) != 0)
  {
    result = TLine::FindRunWithCharIndex((TLine *)result, a3, 1);
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * result) + 48);
    if (a4 < 0)
    {
      v26 = 0;
      v25 = 0;
    }
    else
    {
      result = TLine::FindRunWithCharIndex(v10, a4, 1);
      v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * result) + 48);
      v26 = v25 != 0;
      if (v25)
        v27 = v24 == v25;
      else
        v27 = 1;
      if (!v27)
      {
        if (*(unsigned __int8 *)(v24 + 224) != *(unsigned __int8 *)(v25 + 224))
          return result;
        v26 = 1;
      }
    }
    if (*(double *)a5 != 0.0)
    {
      GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(v24, a3);
      v53.location = 0;
      v53.length = 0;
      result = CJKAddSpace(v24, GlyphIndexForChar, *(double *)a5, v53, 0.0, 0, 0);
    }
    v29 = !v26;
    if (*(double *)(a5 + 8) == 0.0)
      v29 = 1;
    if ((v29 & 1) == 0)
    {
      v30 = TRun::GetGlyphIndexForCharIndex<false>(v25, a4);
      v54.location = 1;
      v54.length = 0;
      return CJKAddSpace(v25, v30, *(double *)(a5 + 8), v54, 0.0, 0, 0);
    }
  }
  else
  {
    if (*(double *)a5 != 0.0 || *(_BYTE *)(a5 + 16) != 0 || *(_BYTE *)(a5 + 18) != 0)
    {
      v16 = 0xAAAAAAAAAAAAAAAALL;
      v51 = 0xAAAAAAAAAAAAAAAALL;
      v52 = 0xAAAAAAAAAAAAAAAALL;
      TLine::GetClusterRange((TLine *)result, a2, a3, 2, &v51, 0, 0);
      v17 = v52 + v51;
      v18 = v52 + v51 - 1;
      v19 = *((_QWORD *)v10 + 2);
      v20 = *((_QWORD *)v10 + 3);
      if (v19 == v20)
      {
        v22 = *((_QWORD *)v10 + 2);
      }
      else
      {
        v21 = 0;
        v22 = *((_QWORD *)v10 + 2);
        do
        {
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 40) + 208) + v21;
          if (v23 >= v17)
          {
            v16 = v18 - v21;
            goto LABEL_30;
          }
          v22 += 8;
          v21 = v23;
        }
        while (v22 != v20);
        v16 = 0xAAAAAAAAAAAAAAAALL;
        v22 = *((_QWORD *)v10 + 3);
      }
LABEL_30:
      while (1)
      {
        v31 = v18;
        result = *(_QWORD *)(*(_QWORD *)v22 + 48);
        v32 = *(_QWORD *)(result + 216);
        v33 = *(_QWORD *)(result + 200);
        if (*(__int16 *)(*(_QWORD *)(v32 + 16) + 2 * v33 + 2 * v16) != -1
          && (*(_DWORD *)(*(_QWORD *)(v32 + 40) + 4 * v33 + 4 * v16) & 0x20) == 0)
        {
          break;
        }
        if (v51 >= v31 || v17 == 0x8000000000000000)
          goto LABEL_43;
        v18 = v31 - 1;
        v22 = *((_QWORD *)v10 + 2);
        if (v19 != v20)
        {
          v34 = 0;
          v22 = *((_QWORD *)v10 + 2);
          while (1)
          {
            v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 40) + 208) + v34;
            if (v35 >= v31)
              break;
            v22 += 8;
            v34 = v35;
            if (v22 == v20)
            {
              v22 = *((_QWORD *)v10 + 3);
              goto LABEL_30;
            }
          }
          v16 = v18 - v34;
        }
      }
      v36 = -0.0416666667;
      if (!*(_BYTE *)(a5 + 18))
        v36 = 0.0;
      v55.location = 0;
      v55.length = *(unsigned __int8 *)(a5 + 16);
      result = CJKAddSpace(result, v16, *(double *)a5, v55, v36, a6, a7);
    }
LABEL_43:
    if (*(double *)(a5 + 8) != 0.0 || *(_BYTE *)(a5 + 17) != 0 || *(_BYTE *)(a5 + 19) != 0)
    {
      v39 = 0xAAAAAAAAAAAAAAAALL;
      v51 = 0xAAAAAAAAAAAAAAAALL;
      v52 = 0xAAAAAAAAAAAAAAAALL;
      TLine::GetClusterRange(v10, a2, a4, 2, &v51, 0, 0);
      v40 = *((_QWORD *)v10 + 2);
      v41 = *((_QWORD *)v10 + 3);
      if (v40 == v41)
      {
        v43 = *((_QWORD *)v10 + 2);
      }
      else
      {
        v42 = 0;
        v43 = *((_QWORD *)v10 + 2);
        while (1)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v43 + 40) + 208) + v42;
          if (v44 > v51)
            break;
          v43 += 8;
          v42 = v44;
          if (v43 == v41)
          {
            v39 = 0xAAAAAAAAAAAAAAAALL;
            v43 = *((_QWORD *)v10 + 3);
            goto LABEL_57;
          }
        }
        v39 = v51 - v42;
      }
LABEL_57:
      v45 = v51;
LABEL_58:
      while (1)
      {
        result = *(_QWORD *)(*(_QWORD *)v43 + 48);
        v46 = *(_QWORD *)(result + 216);
        v47 = *(_QWORD *)(result + 200);
        if (*(__int16 *)(*(_QWORD *)(v46 + 16) + 2 * v47 + 2 * v39) != -1
          && (*(_DWORD *)(*(_QWORD *)(v46 + 40) + 4 * v47 + 4 * v39) & 0x20) == 0)
        {
          break;
        }
        if (v51 > ++v45 || (uint64_t)(v52 + v51) <= v45)
          return result;
        v43 = *((_QWORD *)v10 + 2);
        if (v40 != v41)
        {
          v48 = 0;
          v43 = *((_QWORD *)v10 + 2);
          while (1)
          {
            v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v43 + 40) + 208) + v48;
            if (v49 > v45)
              break;
            v43 += 8;
            v48 = v49;
            if (v43 == v41)
            {
              v43 = *((_QWORD *)v10 + 3);
              goto LABEL_58;
            }
          }
          v39 = v45 - v48;
        }
      }
      v50 = -0.0416666667;
      if (!*(_BYTE *)(a5 + 19))
        v50 = 0.0;
      v56.location = 1;
      v56.length = *(unsigned __int8 *)(a5 + 17);
      return CJKAddSpace(result, v39, *(double *)(a5 + 8), v56, v50, 0, 0);
    }
  }
  return result;
}

BOOL CJKCompositionRules::ShouldGlyphImageRightFlush(int a1, uint64_t a2, UChar32 a3, BOOL *a4)
{
  int CharacterClass;
  int v7;
  BOOL v8;

  CharacterClass = CJKCompositionRules::GetCharacterClass(a3, 0, a1);
  v7 = CharacterClass;
  if (a4)
  {
    v8 = CharacterClass == 2 && CJKCompositionEngine::GetCharacterClass(a3, 0) == 4;
    *a4 = v8;
  }
  return v7 == 2 || v7 == 4;
}

BOOL CJKCompositionRules::ShouldGlyphImageLeftFlush(int a1, uint64_t a2, UChar32 a3, BOOL *a4)
{
  unsigned int CharacterClass;
  unsigned int v7;
  BOOL v8;

  CharacterClass = CJKCompositionRules::GetCharacterClass(a3, 0, a1);
  v7 = CharacterClass;
  if (a4)
  {
    if (CharacterClass)
      v8 = 0;
    else
      v8 = CJKCompositionEngine::GetCharacterClass(a3, 0) == 1;
    *a4 = v8;
  }
  return v7 < 2;
}

uint64_t AddSpace(uint64_t result, uint64_t a2, double a3, int a4)
{
  uint64_t v7;
  TStorageRange *v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if ((*(_WORD *)(result + 178) & 0x1000) == 0)
  {
    v7 = result;
    v8 = (TStorageRange *)(result + 192);
    v9 = atomic_load((unint64_t *)(v7 + 56));
    if (v9)
      v10 = *(double *)(*(_QWORD *)(v9 + 40) + 16);
    else
      v10 = 0.0;
    v11 = *(_QWORD *)(v7 + 216);
    v12 = *(_QWORD *)(v11 + 32);
    if (v12 || (v15 = *(_QWORD *)(v11 + 24)) == 0)
    {
      v13 = v12 + 16 * *(_QWORD *)(v7 + 200) + 16 * a2;
      v14 = *(_QWORD *)(v13 + 8);
    }
    else
    {
      v13 = v15 + 8 * *(_QWORD *)(v7 + 200) + 8 * a2;
      v14 = 0;
    }
    v16 = *(double *)v13 + v10 * a3;
    TStorageRange::SetAdvance(v8, a2, *(CGSize *)(&v14 - 1));
    if (a4)
    {
      v17 = (double *)MEMORY[0x1E0C9D538];
      if ((*(_BYTE *)(v7 + 225) & 0x10) != 0)
      {
        objc_msgSend(*(id *)(v7 + 216), "originAtIndex:", *(_QWORD *)(v7 + 200) + a2);
        v19 = v20;
      }
      else
      {
        v18 = *MEMORY[0x1E0C9D538];
        v19 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      }
      v21 = v18 + v10 * a3;
      objc_msgSend(*(id *)(v7 + 216), "setOrigin:atIndex:", *(_QWORD *)(v7 + 200) + a2, v21, v19);
      if (v21 != *v17 || v19 != v17[1])
        *(_BYTE *)(v7 + 225) |= 0x10u;
    }
    return objc_msgSend(*(id *)(v7 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 40) + 4 * *(_QWORD *)(v7 + 200) + 4 * a2) | 0x400u, *(_QWORD *)(v7 + 200) + a2);
  }
  return result;
}

void CJKCompositionEngine::IsEnabled(void)::$_0::__invoke()
{
  if (gCJKCompositionRulesEnabled)
    gCJKCompositionRulesEnabled = CFPreferencesGetAppBooleanValue(CFSTR("CTDisableNewCJKComposition"), (CFStringRef)*MEMORY[0x1E0C9B248], 0) == 0;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

char *std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<OTL::LookupSubtable const*,OTL::Coverage> const*>,std::__wrap_iter<std::pair<OTL::LookupSubtable const*,OTL::Coverage> const*>>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__vallocate[abi:nn180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = a2[2];
      v7[1] = a2[1];
      v7[2] = v9;
      *v7 = v8;
      v7 += 3;
      a2 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * a2];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,OTL::Lookup>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,OTL::Lookup>,void *>>>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      OTL::Lookup::~Lookup((OTL::Lookup *)(v2 + 24));
    operator delete((void *)v2);
  }
}

void std::vector<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,TInlineBufferAllocator<std::pair<OTL::LookupSubtable const*,OTL::Coverage>,4ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 27;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[27])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,BOOL ()(unsigned short,unsigned short,unsigned short)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1},std::allocator<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1}>,BOOL ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0E20;
  result[1] = v3;
  return result;
}

uint64_t std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:nn180100]<OTL::Lookup::InitCoverageUnion(void)::{lambda(unsigned short,unsigned short,unsigned short)#1} &,unsigned short,unsigned short,unsigned short>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  if (v3 <= v4 && v3 != (unsigned __int16)(v4 + 1))
  {
    do
    {
      v5 = (unsigned __int16)(v3 - *(_WORD *)(*(_QWORD *)a1 + 4)) >> 3;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + v5) |= 1 << ((v3 - *(_WORD *)(*(_QWORD *)a1 + 4)) & 7);
    }
    while (v4 != (unsigned __int16)v3++);
  }
  return 1;
}

void std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 54);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[7])
        v1[7] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t CJKAddSpace(uint64_t this, CFIndex a2, double a3, CFRange a4, double a5, int a6, char a7)
{
  char location;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;

  if ((*(_WORD *)(this + 178) & 0x1000) != 0)
    return this;
  location = a4.location;
  v12 = this;
  v13 = atomic_load((unint64_t *)(this + 56));
  v14 = *(double *)(*(_QWORD *)(v13 + 40) + 16);
  v15 = 0.0;
  if (LODWORD(a4.length))
  {
    if ((a4.location & 1) != 0)
    {
      a4.location = a2;
      GetOpticalBoundsAdjustment(0, (TRun *)this, a4);
      v17 = v16;
      goto LABEL_10;
    }
    a4.location = a2;
    GetOpticalBoundsAdjustment(1, (TRun *)this, a4);
    v15 = v19;
    if (a6 && (a7 & 1) == 0)
      v15 = v19 + v14 * -0.0416666667;
  }
  v17 = 0.0;
LABEL_10:
  v20 = *(_QWORD *)(v12 + 216);
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 || (v24 = *(_QWORD *)(v20 + 24)) == 0)
  {
    v22 = v21 + 16 * *(_QWORD *)(v12 + 200) + 16 * a2;
    v23 = *(_QWORD *)(v22 + 8);
  }
  else
  {
    v22 = v24 + 8 * *(_QWORD *)(v12 + 200) + 8 * a2;
    v23 = 0;
  }
  v25 = (a3 + a5) * v14;
  v26 = -0.0;
  if (a6)
    v26 = v15;
  v27 = v25 + v26;
  if (!a6)
    v25 = v25 - v15 - v17;
  v28 = v25 + *(double *)v22;
  TStorageRange::SetAdvance((TStorageRange *)(v12 + 192), a2, *(CGSize *)(&v23 - 1));
  if ((location & 1) != 0)
  {
    v29 = (double *)MEMORY[0x1E0C9D538];
    if ((*(_BYTE *)(v12 + 225) & 0x10) != 0)
    {
      objc_msgSend(*(id *)(v12 + 216), "originAtIndex:", *(_QWORD *)(v12 + 200) + a2);
      v31 = v32;
    }
    else
    {
      v30 = *MEMORY[0x1E0C9D538];
      v31 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    }
    v33 = v27 - v17 + v30;
    objc_msgSend(*(id *)(v12 + 216), "setOrigin:atIndex:", *(_QWORD *)(v12 + 200) + a2, v33, v31);
    if (v33 != *v29 || v31 != v29[1])
      *(_BYTE *)(v12 + 225) |= 0x10u;
  }
  else
  {
    TStorageRange::SetInterGlyphsExtraSpace((TStorageRange *)(v12 + 192), a2, v27);
  }
  return objc_msgSend(*(id *)(v12 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 216) + 40) + 4 * *(_QWORD *)(v12 + 200) + 4 * a2) | 0x400u, *(_QWORD *)(v12 + 200) + a2);
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 18;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[18])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 19;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[19])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 5;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[5])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

unsigned __int16 *std::remove_if[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> *>,std::__not_fn_t<OTL::GSUB::GetSingleSubstLookups(OTL::FeatureBuffer const&,TInlineVector<std::pair<unsigned short,unsigned short>,30ul> *)::IsSingleSubst>>(unsigned __int16 *a1, unsigned __int16 *a2, _QWORD *a3, uint64_t a4)
{
  unsigned __int16 *v7;
  uint64_t *v8;
  unsigned __int16 *i;
  uint64_t *v10;

  v7 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v8 = TBaseFont::NthLookup<OTL::GSUB>(a4, a3, *v7);
      if (!v8 || *((_WORD *)v8 + 8) != 1)
        break;
      v7 += 2;
      if (v7 == a2)
        return a2;
    }
  }
  if (v7 != a2)
  {
    for (i = v7 + 2; i != a2; i += 2)
    {
      v10 = TBaseFont::NthLookup<OTL::GSUB>(a4, a3, *i);
      if (v10 && *((_WORD *)v10 + 8) == 1)
      {
        *v7 = *i;
        v7[1] = i[1];
        v7 += 2;
      }
    }
  }
  return v7;
}

void std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 33;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[33])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *std::function<void ()(CFRange,long)>::operator=<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v7[0] = &off_1E15E0D48;
  v7[1] = v3;
  v8 = v7;
  std::__function::__value_func<void ()(CFRange,long)>::swap[abi:nn180100](v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},std::allocator<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1}>,void ()(CFRange,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1},std::allocator<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1}>,void ()(CFRange,long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0D48;
  result[1] = v3;
  return result;
}

uint64_t *std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<OTL::GSUB::ApplyLookups(TRunGlue &,int,OTL::GlyphLookups &,SyncState &,void (*)(void *,CFRange,long),void *)::{lambda(CFRange,long)#1} &,CFRange,long>(uint64_t ***a1, CFIndex *a2, uint64_t *a3)
{
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t *v8;
  CFRange v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a3;
  v9.location = *a2;
  v9.length = v5;
  result = OTL::GlyphLookups::Substituted(**a1, v9, v6);
  v8 = (*a1)[1];
  if (v8)
    return (uint64_t *)((uint64_t (*)(uint64_t *, CFIndex, CFIndex, uint64_t))v8)((*a1)[2], v4, v5, v6);
  return result;
}

_QWORD *std::__function::__value_func<void ()(CFRange,long)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t CJKCompositionEngine::SubstituteGlyphsForCJKComposition(TRunGlue &,TCharStream const&)::$_0::__invoke(uint64_t result, uint64_t a2)
{
  if (a2 == *(_QWORD *)result)
    *(_BYTE *)(result + 8) = 1;
  return result;
}

void std::vector<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void **v5;
  void **v6;
  char *v7;
  void **v8;
  void **v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = (void **)**a1;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        v7 = v4 - 104;
        v10 = (void **)(v4 - 96);
        std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v10);
        v4 = v7;
      }
      while (v7 != v2);
      v6 = *a1;
      v5 = (void **)**a1;
    }
    v1[1] = v2;
    v8 = v6 + 393;
    if (v6 + 3 <= v5 && v8 > v5)
    {
      if (v6[2] == v6[393])
        *v8 = v5;
    }
    else
    {
      operator delete(v5);
    }
  }
}

void std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 11;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[11])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *TInlineVector<CFRange,4ul>::TInlineVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[11] = a1 + 3;
  if (a3)
  {
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__vallocate[abi:nn180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 16 * a3);
    a1[1] = &v6[16 * a3];
  }
  return a1;
}

char *std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    abort();
  result = (char *)TInlineBufferAllocator<CFRange,4ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void std::__split_buffer<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,TInlineBufferAllocator<std::pair<std::pair<unsigned short,unsigned short>,TInlineVector<CFRange,4ul>>,30ul> &>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    v4 = (void **)(i - 96);
    std::vector<CFRange,TInlineBufferAllocator<CFRange,4ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
}

unint64_t TAATLookupTable::LookupVector(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  if (*((unsigned __int16 *)this + 16) > a2 || *((unsigned __int16 *)this + 17) < a2)
    return 0;
  *a3 = *((_QWORD *)this + 3);
  return *((_QWORD *)this + 2) + (a2 - (unint64_t)*((unsigned __int16 *)this + 16)) * *((_QWORD *)this + 3) + 6;
}

UInt16 *TAATLookupTable::LookupSegmentSingle(TAATLookupTable *this, unsigned int a2, unint64_t *a3)
{
  SFNTLookupSegment *Segment;

  if (a2 == 0xFFFF)
    return 0;
  Segment = FindSegment((const SFNTLookupSegmentHeader *)(*((_QWORD *)this + 2) + 2), *((_QWORD *)this + 5), a2, a3);
  if (!Segment)
    return 0;
  else
    return Segment->value;
}

uint64_t TAATLookupTable::BadTable(TAATLookupTable *this, unsigned __int16 a2, unint64_t *a3)
{
  return 0;
}

uint64_t TAATLookupTable::IterateSegmentSingle(uint64_t result, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;

  v2 = *(unsigned __int16 **)(result + 16);
  if (v2[2])
  {
    v4 = result;
    v5 = 0;
    v6 = (unint64_t)(v2 + 1);
    v7 = __rev16(v2[2]);
    v8 = bswap32(v2[1]) >> 16;
    v9 = v2 + 6;
    do
    {
      if (v6 > (unint64_t)v9)
        break;
      if ((unint64_t)(v9 + 3) > *(_QWORD *)(v4 + 40))
        break;
      result = std::function<void ()(unsigned short,unsigned short,unsigned short const*)>::operator()(a2, bswap32(v9[1]) >> 16, bswap32(*v9) >> 16, (uint64_t)(v9 + 2));
      v9 = (unsigned __int16 *)((char *)v9 + v8);
      ++v5;
    }
    while (v7 > (unsigned __int16)v5);
  }
  return result;
}

uint64_t std::function<void ()(unsigned short,unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL8 v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;

  v9 = a2;
  v8 = a3;
  v7 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return (*(uint64_t (**)(uint64_t, __int16 *, __int16 *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v9, &v8, &v7);
  v6 = std::__throw_bad_function_call[abi:nn180100]();
  return TAATLookupTable::IterateSegmentArray(v6);
}

uint64_t TAATLookupTable::IterateSegmentArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  unsigned __int16 *v14;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int16 *)(v5 + 2);
  v6 = v5 + 2;
  v8 = *(unsigned __int16 *)(v6 + 2);
  v9 = __rev16(v8);
  v10 = (unsigned __int16 *)(v6 + 10);
  v11 = bswap32(v7) >> 16;
  result = *(_QWORD *)(a2 + 24);
  if (result)
    v13 = v9 >= 2;
  else
    v13 = 0;
  if (v13)
  {
    v14 = (unsigned __int16 *)((char *)v10 + (int)(v11 * (v9 - 2)));
    if (v6 > (unint64_t)v14 || (unint64_t)(v14 + 3) > *(_QWORD *)(a1 + 40))
      return result;
    v18 = (bswap32(*v14) >> 16) + 1;
    result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)result + 48))(result, &v18);
  }
  if (v8)
  {
    v16 = 0;
    do
    {
      if (v6 > (unint64_t)v10)
        break;
      if ((unint64_t)(v10 + 3) > *(_QWORD *)(a1 + 40))
        break;
      v17 = v10[1];
      if (v17 == 0xFFFF)
        break;
      result = std::function<void ()(unsigned short,unsigned short,unsigned short const*)>::operator()(a3, __rev16(v17), bswap32(*v10) >> 16, (uint64_t)(v10 + 2));
      v10 = (unsigned __int16 *)((char *)v10 + v11);
      ++v16;
    }
    while (v9 > (unsigned __int16)v16);
  }
  return result;
}

uint64_t TAATLookupTable::IterateTrimmedArray(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  int v6;

  v2 = *(unsigned __int16 *)(result + 24);
  v3 = *(unsigned __int16 *)(result + 26);
  if (v2 <= v3 && v2 != (unsigned __int16)(v3 + 1))
  {
    v5 = result;
    do
    {
      v6 = (unsigned __int16)v2;
      result = std::function<void ()(unsigned short,unsigned short const*)>::operator()(a2, v2, *(_QWORD *)(v5 + 16) + 2 * (unsigned __int16)v2 - 2 * *(unsigned __int16 *)(v5 + 24) + 4);
      ++v2;
    }
    while (v6 != v3);
  }
  return result;
}

BOOL std::__throw_bad_function_call[abi:nn180100]()
{
  TAATMorphSubtableMorx *v0;
  unint64_t v1;
  int v2;
  int v3;
  const unsigned __int16 *v4;
  const STXEntryTwo *v5;
  uint64_t v6;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return TAATMorphSubtableMorx::MorxContextualStateNeedsAction(v0, v1, v2, v3, v4, v5, v6);
}

BOOL TAATMorphSubtableMorx::MorxContextualStateNeedsAction(TAATMorphSubtableMorx *this, unint64_t a2, int a3, int a4, const unsigned __int16 *a5, const STXEntryTwo *a6, uint64_t a7)
{
  unsigned __int16 *v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v12;
  int v13;
  BOOL v14;
  _BOOL8 result;

  v7 = (unsigned __int16 *)a6 + (a4 + a3 * (_DWORD)a5);
  v8 = v7 < (unsigned __int16 *)this || (unint64_t)(v7 + 1) > a2;
  result = 0;
  if (!v8)
  {
    v9 = bswap32(*v7) >> 16;
    v10 = (unsigned __int16 *)(a7 + 8 * v9);
    if (v10 >= (unsigned __int16 *)this && (unint64_t)(v10 + 4) <= a2)
    {
      v12 = a7 + 8 * v9;
      v13 = *v10;
      v14 = (*(_WORD *)(v12 + 2) & 0xE0) == 0 && v13 == 0;
      if (!v14 || *(__int16 *)(v12 + 4) != -1 || *(__int16 *)(a7 + 8 * v9 + 6) != -1)
        return 1;
    }
  }
  return result;
}

BOOL TAATMorphSubtableMorx::MorxInsertionStateNeedsAction(TAATMorphSubtableMorx *this, unint64_t a2, int a3, int a4, const unsigned __int16 *a5, const STXEntryTwo *a6, uint64_t a7)
{
  unsigned __int16 *v7;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v12;
  __int16 v13;
  int v14;

  v7 = (unsigned __int16 *)a6 + (a4 + a3 * (_DWORD)a5);
  if (v7 < (unsigned __int16 *)this || (unint64_t)(v7 + 1) > a2)
    return 0;
  v9 = bswap32(*v7) >> 16;
  v10 = (unsigned __int16 *)(a7 + 8 * v9);
  if (v10 < (unsigned __int16 *)this || (unint64_t)(v10 + 4) > a2)
    return 0;
  v12 = a7 + 8 * v9;
  v13 = *(_WORD *)(v12 + 2);
  v14 = *v10;
  if ((v13 & 0xE0) != 0 || v14 != 0)
    return 1;
  return (*(__int16 *)(v12 + 4) != -1 || *(__int16 *)(a7 + 8 * v9 + 6) != -1) && (v13 & 0xFF03) != 0;
}

uint64_t TAATMorphSubtableMorx::InitRearrangementState(uint64_t a1, TRunGlue *a2, _QWORD *a3)
{
  SFNTLookupTable *v5;
  unsigned int *v6;
  unsigned int *v7;
  const SFNTLookupTable *v8;
  uint64_t result;
  UInt8 *values;
  unsigned int v12;
  unsigned int nUnits;
  SFNTLookupValue *p_searchRange;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v20;
  uint64_t v22;

  v6 = *(unsigned int **)(a1 + 104);
  v5 = *(SFNTLookupTable **)(a1 + 112);
  v7 = v6 + 3;
  a3[2] = bswap32(v6[3]);
  v8 = (const SFNTLookupTable *)((char *)v6 + bswap32(v6[4]) + 12);
  if (&v8->fsHeader > (SFNTLookupFormatSpecificHeader *)v5)
    return 0;
  result = 0;
  switch(bswap32(v8->format) >> 16)
  {
    case 0u:
      goto LABEL_23;
    case 2u:
    case 4u:
    case 6u:
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      values = (UInt8 *)&v8->fsHeader.vector + 10;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.nUnits;
      goto LABEL_19;
    case 8u:
      p_searchRange = &v8->fsHeader.segment.binSearch.searchRange;
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      v15 = bswap32(v8->fsHeader.segment.binSearch.nUnits) >> 16;
      v16 = (unint64_t)&p_searchRange[v15];
      v17 = v8->fsHeader.vector.values <= (UInt8 *)v5
          ? (unint64_t)((char *)v5 - (char *)p_searchRange) >> 1
          : 0;
      v18 = v16 <= (unint64_t)v5 && v16 >= (unint64_t)p_searchRange;
      if (!v18 && v17 != v15)
        return 0;
      goto LABEL_23;
    case 0xAu:
      values = v8->fsHeader.vector.values;
      if (v8->fsHeader.vector.values > (UInt8 *)v5)
        return 0;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.searchRange;
LABEL_19:
      v20 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v12];
      if (v20 < (unint64_t)values || v20 > (unint64_t)v5)
        return 0;
LABEL_23:
      TAATLookupTable::SetTable(a1 + 24, v8, v5);
      if (*(int *)(a1 + 12) < 1)
      {
        *a3 = TRunGlue::length(a2) - 1;
        v22 = TRunGlue::length(a2) - 1;
      }
      else
      {
        v22 = 0;
        *a3 = 0;
      }
      a3[1] = v22;
      a3[3] = (char *)v7 + bswap32(v6[5]);
      a3[4] = (char *)v7 + bswap32(v6[6]);
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TAATMorphSubtableMorx::InitContextualState(uint64_t a1, TRunGlue *a2, uint64_t *a3)
{
  SFNTLookupTable *v5;
  unsigned int *v6;
  unsigned int *v7;
  const SFNTLookupTable *v8;
  uint64_t result;
  UInt8 *values;
  unsigned int v12;
  unsigned int nUnits;
  SFNTLookupValue *p_searchRange;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v20;
  uint64_t v22;

  v6 = *(unsigned int **)(a1 + 104);
  v5 = *(SFNTLookupTable **)(a1 + 112);
  v7 = v6 + 3;
  a3[1] = bswap32(v6[3]);
  v8 = (const SFNTLookupTable *)((char *)v6 + bswap32(v6[4]) + 12);
  if (&v8->fsHeader > (SFNTLookupFormatSpecificHeader *)v5)
    return 0;
  result = 0;
  switch(bswap32(v8->format) >> 16)
  {
    case 0u:
      goto LABEL_23;
    case 2u:
    case 4u:
    case 6u:
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      values = (UInt8 *)&v8->fsHeader.vector + 10;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.nUnits;
      goto LABEL_19;
    case 8u:
      p_searchRange = &v8->fsHeader.segment.binSearch.searchRange;
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      v15 = bswap32(v8->fsHeader.segment.binSearch.nUnits) >> 16;
      v16 = (unint64_t)&p_searchRange[v15];
      v17 = v8->fsHeader.vector.values <= (UInt8 *)v5
          ? (unint64_t)((char *)v5 - (char *)p_searchRange) >> 1
          : 0;
      v18 = v16 <= (unint64_t)v5 && v16 >= (unint64_t)p_searchRange;
      if (!v18 && v17 != v15)
        return 0;
      goto LABEL_23;
    case 0xAu:
      values = v8->fsHeader.vector.values;
      if (v8->fsHeader.vector.values > (UInt8 *)v5)
        return 0;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.searchRange;
LABEL_19:
      v20 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v12];
      if (v20 < (unint64_t)values || v20 > (unint64_t)v5)
        return 0;
LABEL_23:
      TAATLookupTable::SetTable(a1 + 24, v8, v5);
      if (*(int *)(a1 + 12) <= 0)
        v22 = TRunGlue::length(a2) - 1;
      else
        v22 = 0;
      *a3 = v22;
      a3[2] = (uint64_t)v7 + bswap32(v6[5]);
      a3[3] = (uint64_t)v7 + bswap32(v6[6]);
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TAATMorphSubtableMorx::InitInsertionState(uint64_t a1, TRunGlue *a2, uint64_t *a3)
{
  SFNTLookupTable *v5;
  unsigned int *v6;
  unsigned int *v7;
  const SFNTLookupTable *v8;
  uint64_t result;
  UInt8 *values;
  unsigned int v12;
  unsigned int nUnits;
  SFNTLookupValue *p_searchRange;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v20;
  uint64_t v22;

  v6 = *(unsigned int **)(a1 + 104);
  v5 = *(SFNTLookupTable **)(a1 + 112);
  v7 = v6 + 3;
  a3[1] = bswap32(v6[3]);
  v8 = (const SFNTLookupTable *)((char *)v6 + bswap32(v6[4]) + 12);
  if (&v8->fsHeader > (SFNTLookupFormatSpecificHeader *)v5)
    return 0;
  result = 0;
  switch(bswap32(v8->format) >> 16)
  {
    case 0u:
      goto LABEL_23;
    case 2u:
    case 4u:
    case 6u:
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      values = (UInt8 *)&v8->fsHeader.vector + 10;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.nUnits;
      goto LABEL_19;
    case 8u:
      p_searchRange = &v8->fsHeader.segment.binSearch.searchRange;
      if (v8->fsHeader.trimmedArray.valueArray > (SFNTLookupValue *)v5)
        return 0;
      v15 = bswap32(v8->fsHeader.segment.binSearch.nUnits) >> 16;
      v16 = (unint64_t)&p_searchRange[v15];
      v17 = v8->fsHeader.vector.values <= (UInt8 *)v5
          ? (unint64_t)((char *)v5 - (char *)p_searchRange) >> 1
          : 0;
      v18 = v16 <= (unint64_t)v5 && v16 >= (unint64_t)p_searchRange;
      if (!v18 && v17 != v15)
        return 0;
      goto LABEL_23;
    case 0xAu:
      values = v8->fsHeader.vector.values;
      if (v8->fsHeader.vector.values > (UInt8 *)v5)
        return 0;
      v12 = bswap32(v8->fsHeader.theArray.lookupValues[0]) >> 16;
      nUnits = v8->fsHeader.segment.binSearch.searchRange;
LABEL_19:
      v20 = (unint64_t)&values[(bswap32(nUnits) >> 16) * (unint64_t)v12];
      if (v20 < (unint64_t)values || v20 > (unint64_t)v5)
        return 0;
LABEL_23:
      TAATLookupTable::SetTable(a1 + 24, v8, v5);
      if (*(int *)(a1 + 12) <= 0)
        v22 = TRunGlue::length(a2) - 1;
      else
        v22 = 0;
      *a3 = v22;
      a3[2] = (uint64_t)v7 + bswap32(v6[5]);
      a3[3] = (uint64_t)v7 + bswap32(v6[6]);
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void TAATMorphSubtableMorx::DoRearrangementSubtable(uint64_t a1, TRunGlue *a2, uint64_t *a3, TRunGlue *this, uint64_t a5, uint64_t a6, unint64_t a7, int *a8)
{
  uint64_t v10;
  TRunGlue *v11;
  unsigned int Class;
  unint64_t v15;
  int GlyphID;
  unsigned __int16 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _WORD *v28;
  unsigned __int16 *v29;
  _WORD *v30;
  TRunGlue *v31;
  int *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  __int16 v42;
  int64x2_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  _QWORD *v50;
  int64x2_t v51;
  char *v52;
  _QWORD v53[5];

  v10 = a5;
  v11 = this;
  v53[4] = *MEMORY[0x1E0C80C00];
  Class = (unsigned __int16)a7;
  v15 = a7 >> 16;
  GlyphID = TRunGlue::GetGlyphID(this, a5);
  v52 = 0;
  memset(v53, 170, 24);
  v51 = 0uLL;
  v53[3] = v53;
  while (1)
  {
    while (a6 && (GlyphID == 0xFFFF || TRunGlue::IsDeleted(v11, v10)))
    {
LABEL_21:
      v51.i64[1] = v51.i64[0];
      v27 = a6 - 1;
      if (a6 > 1)
      {
        v10 += *(int *)(a1 + 12);
        v25 = v15;
        --a6;
        goto LABEL_51;
      }
      Class = 0;
      a6 = 0;
      if (v27)
        goto LABEL_53;
    }
    v17 = (unsigned __int16 *)(a3[3] + 2 * (a3[2] * (unsigned __int16)v15 + Class));
    v18 = *(_QWORD *)(a1 + 104);
    v19 = *(_QWORD *)(a1 + 112);
    if (v18 > (unint64_t)v17 || (unint64_t)(v17 + 1) > v19)
      break;
    v21 = bswap32(*v17) >> 16;
    v22 = a3[4];
    v23 = (unsigned __int16 *)(v22 + 4 * v21);
    if (v18 > (unint64_t)v23 || (unint64_t)(v23 + 2) > v19)
      break;
    v25 = bswap32(*v23) >> 16;
    v26 = bswap32(*(unsigned __int16 *)(v22 + 4 * v21 + 2)) >> 16;
    if ((v26 & 0xFFFFE00F) == 0)
      goto LABEL_20;
    if ((v26 & 0x8000) != 0)
    {
      a3[1] = v10;
      if ((v26 & 0x2000) == 0)
        goto LABEL_17;
LABEL_16:
      *a3 = v10;
      goto LABEL_17;
    }
    if ((v26 & 0x2000) != 0)
      goto LABEL_16;
LABEL_17:
    if ((v26 & 0xF) != 0 && !TAATMorphSubtable::DoRearrangement(a1, a2, v26 & 0xF, a3[1], *a3, a8))
      break;
    if ((v26 & 0x4000) == 0)
      goto LABEL_20;
    v28 = (_WORD *)v51.i64[1];
    v29 = (unsigned __int16 *)v51.i64[0];
    if (v51.i64[0] != v51.i64[1])
    {
      while (*v29 != GlyphID || v29[1] != (unsigned __int16)v15 || v29[2] != (_DWORD)v25)
      {
        v29 += 3;
        if (v29 == (unsigned __int16 *)v51.i64[1])
        {
          v29 = (unsigned __int16 *)v51.i64[1];
          break;
        }
      }
    }
    if (v29 != (unsigned __int16 *)v51.i64[1])
    {
LABEL_20:
      v15 = v25;
      goto LABEL_21;
    }
    if (v51.i64[1] >= (unint64_t)v52)
    {
      v45 = v10;
      v31 = v11;
      v32 = a8;
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v51.i64[1] - v51.i64[0]) >> 1);
      v34 = v33 + 1;
      if (v33 + 1 > 0x2AAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)&v52[-v51.i64[0]] >> 1) > v34)
        v34 = 0x5555555555555556 * ((uint64_t)&v52[-v51.i64[0]] >> 1);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51.i64[0]] >> 1) >= 0x1555555555555555)
        v35 = 0x2AAAAAAAAAAAAAAALL;
      else
        v35 = v34;
      v50 = v53;
      if (v35)
        v36 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)v53, v35);
      else
        v36 = 0;
      v37 = &v36[6 * v33];
      *(_WORD *)v37 = GlyphID;
      *((_WORD *)v37 + 1) = v15;
      *((_WORD *)v37 + 2) = v25;
      v38 = v51.i64[1];
      v39 = v51.i64[0];
      if (v51.i64[1] == v51.i64[0])
      {
        v43 = vdupq_n_s64(v51.u64[1]);
        v40 = &v36[6 * v33];
        a8 = v32;
      }
      else
      {
        v40 = &v36[6 * v33];
        a8 = v32;
        do
        {
          v41 = *(_DWORD *)(v38 - 6);
          v38 -= 6;
          v42 = *(_WORD *)(v38 + 4);
          *(_DWORD *)(v40 - 6) = v41;
          v40 -= 6;
          *((_WORD *)v40 + 2) = v42;
        }
        while (v38 != v39);
        v43 = v51;
      }
      v11 = v31;
      v30 = v37 + 6;
      v51.i64[0] = (uint64_t)v40;
      v51.i64[1] = (uint64_t)(v37 + 6);
      v48 = v43;
      v44 = v52;
      v52 = &v36[6 * v35];
      v49 = v44;
      v47 = v43.i64[0];
      std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&v47);
      v10 = v45;
    }
    else
    {
      *(_WORD *)v51.i64[1] = GlyphID;
      v28[1] = v15;
      v30 = v28 + 3;
      v28[2] = v25;
    }
    v51.i64[1] = (uint64_t)v30;
LABEL_51:
    GlyphID = TRunGlue::GetGlyphID(v11, v10);
    Class = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)a1, GlyphID);
    v15 = v25;
  }
LABEL_53:
  std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v51);
}

void TAATMorphSubtableMorx::DoInsertionSubtable(uint64_t a1, TRunGlue *a2, uint64_t *a3, TRunGlue *this, uint64_t a5, uint64_t a6, unint64_t a7, int *a8)
{
  uint64_t v8;
  TRunGlue *v9;
  unsigned int Class;
  unint64_t v11;
  int GlyphID;
  int v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  BOOL v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  TRunGlue *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  __int16 v60;
  int64x2_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  unsigned int v68;
  __int16 v69;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  _QWORD *v77;
  int64x2_t v78;
  char *v79;
  _QWORD v80[7];

  v8 = a6;
  v9 = this;
  v80[5] = *MEMORY[0x1E0C80C00];
  Class = (unsigned __int16)a7;
  v11 = a7 >> 16;
  v66 = a6 << 7;
  v73 = a5;
  GlyphID = TRunGlue::GetGlyphID(this, a5);
  v79 = 0;
  memset(v80, 170, 24);
  v78 = 0uLL;
  v80[3] = v80;
  while (1)
  {
    if (v8 && (GlyphID == 0xFFFF || TRunGlue::IsDeleted(v9, v73)))
    {
      v13 = 1;
      goto LABEL_58;
    }
    v14 = (unsigned __int16 *)(a3[2] + 2 * (a3[1] * (unsigned __int16)v11 + Class));
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(_QWORD *)(a1 + 112);
    v17 = v15 > (unint64_t)v14 || (unint64_t)(v14 + 1) > v16;
    if (v17)
      goto LABEL_89;
    v18 = bswap32(*v14) >> 16;
    v19 = a3[3];
    v20 = (unsigned __int16 *)(v19 + 8 * v18);
    if (v15 > (unint64_t)v20 || (unint64_t)(v20 + 4) > v16)
      goto LABEL_89;
    v22 = *v20;
    v23 = (unsigned __int16 *)(v19 + 8 * v18);
    v24 = bswap32(v23[1]);
    v25 = HIWORD(v24);
    v26 = v23[2];
    v27 = v23[3];
    v28 = (v24 >> 21) & 0x1F;
    if (v26 != 0xFFFF && v28 != 0)
      v29 = (v24 >> 21) & 0x1F;
    else
      LOWORD(v29) = 0;
    v30 = HIWORD(v24) & 0x1F;
    v31 = v30 != 0;
    v32 = v27 != 0xFFFF;
    v33 = v31 && v32;
    v34 = v31 && v32 ? v30 : 0;
    if (v26 != 0xFFFF && v28 != 0 || v33)
      break;
    v13 = 1;
LABEL_51:
    if ((v25 & 0x8000) != 0)
      *a3 = v73;
    v46 = bswap32(v22) >> 16;
    if ((v25 & 0x4000) != 0)
      v47 = (unsigned __int16)(v29 + v34);
    else
      v47 = 0;
    if ((v25 & 0x4000) == 0)
      goto LABEL_57;
    v48 = (_WORD *)v78.i64[1];
    v49 = (unsigned __int16 *)v78.i64[0];
    if (v78.i64[0] != v78.i64[1])
    {
      while (*v49 != GlyphID || v49[1] != (unsigned __int16)v11 || v49[2] != (_DWORD)v46)
      {
        v49 += 3;
        if (v49 == (unsigned __int16 *)v78.i64[1])
        {
          v49 = (unsigned __int16 *)v78.i64[1];
          break;
        }
      }
    }
    v8 += v47;
    if (v49 == (unsigned __int16 *)v78.i64[1])
    {
      if (v78.i64[1] >= (unint64_t)v79)
      {
        v51 = 0xAAAAAAAAAAAAAAABLL * ((v78.i64[1] - v78.i64[0]) >> 1);
        v52 = v51 + 1;
        if (v51 + 1 > 0x2AAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)&v79[-v78.i64[0]] >> 1) > v52)
          v52 = 0x5555555555555556 * ((uint64_t)&v79[-v78.i64[0]] >> 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v79[-v78.i64[0]] >> 1) >= 0x1555555555555555)
          v53 = 0x2AAAAAAAAAAAAAAALL;
        else
          v53 = v52;
        v77 = v80;
        if (v53)
          v54 = (char *)TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>::allocate((uint64_t)v80, v53);
        else
          v54 = 0;
        v55 = &v54[6 * v51];
        *(_WORD *)v55 = GlyphID;
        *((_WORD *)v55 + 1) = v11;
        *((_WORD *)v55 + 2) = v46;
        v56 = v78.i64[1];
        v57 = v78.i64[0];
        if (v78.i64[1] == v78.i64[0])
        {
          v61 = vdupq_n_s64(v78.u64[1]);
          v58 = &v54[6 * v51];
        }
        else
        {
          v58 = &v54[6 * v51];
          do
          {
            v59 = *(_DWORD *)(v56 - 6);
            v56 -= 6;
            v60 = *(_WORD *)(v56 + 4);
            *(_DWORD *)(v58 - 6) = v59;
            v58 -= 6;
            *((_WORD *)v58 + 2) = v60;
          }
          while (v56 != v57);
          v61 = v78;
        }
        v50 = v55 + 6;
        v78.i64[0] = (uint64_t)v58;
        v78.i64[1] = (uint64_t)(v55 + 6);
        v75 = v61;
        v62 = v79;
        v79 = &v54[6 * v53];
        v76 = v62;
        v74 = v61.i64[0];
        std::__split_buffer<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul> &>::~__split_buffer((uint64_t)&v74);
      }
      else
      {
        *(_WORD *)v78.i64[1] = GlyphID;
        v48[1] = v11;
        v50 = v48 + 3;
        v48[2] = v46;
      }
      v78.i64[1] = (uint64_t)v50;
      v63 = TRunGlue::GetGlyphID(v9, v73);
LABEL_87:
      GlyphID = v63;
      Class = TAATMorphSubtableMorx::FetchClass((TAATMorphSubtableMorx *)a1, v63);
      v11 = v46;
    }
    else
    {
LABEL_57:
      v11 = v46;
LABEL_58:
      v78.i64[1] = v78.i64[0];
      v17 = v8-- <= 1;
      if (!v17)
      {
        v73 += v13 * (uint64_t)*(int *)(a1 + 12);
        v46 = v11;
        v63 = TRunGlue::GetGlyphID(v9, v73);
        goto LABEL_87;
      }
      if (v8)
        goto LABEL_89;
      Class = 0;
      v73 += v13 * (uint64_t)*(int *)(a1 + 12);
    }
  }
  v69 = v34;
  v35 = v15 + bswap32(*(_DWORD *)(v15 + 28)) + 12;
  if (v26 != 0xFFFF && v28 != 0)
  {
    v65 = v29;
    v29 = v22;
    v36 = __rev16(v26);
    if (v73 < 0)
      v37 = 1;
    else
      v37 = (v25 >> 11) & 1;
    v64 = v35;
    v73 &= ~(v73 >> 63);
    if (!TAATMorphSubtable::DoGlyphInsertion(a1, a2, (unsigned __int16)v28, v37, (v25 >> 13) & 1, v35 + 2 * v36, v15, v16, v73, v73, a8))goto LABEL_89;
    if (*(int *)(a1 + 12) > 0)
      v38 = 1;
    else
      v38 = v37;
    if (v38)
      v13 = (unsigned __int16)(v28 + 1);
    else
      v13 = 1;
    v39 = a2;
    v9 = a2;
    v22 = v29;
    LOWORD(v29) = v65;
    v35 = v64;
  }
  else
  {
    v13 = 1;
    v39 = a2;
  }
  v68 = v22;
  if (v33)
  {
    v40 = __rev16(v27);
    if (v73 < 0)
      v41 = 1;
    else
      v41 = (v25 >> 10) & 1;
    v42 = v73 & ~(v73 >> 63);
    v73 = v42;
    if ((v25 & 0x1000) != 0)
      v42 = *a3;
    if (!TAATMorphSubtable::DoGlyphInsertion(a1, v39, (unsigned __int16)v30, v41, (unsigned __int16)(v25 & 0x1000) >> 12, v35 + 2 * v40, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *a3, v42, a8))goto LABEL_89;
    if (*(int *)(a1 + 12) > 0)
      v43 = 1;
    else
      v43 = v41;
    if (v43)
      v44 = (unsigned __int16)v30;
    else
      v44 = 0;
    v13 += v44;
    v39 = a2;
    v9 = a2;
  }
  v45 = TRunGlue::length(v39);
  v22 = v68;
  v34 = v69;
  if (v45 <= v66)
    goto LABEL_51;
  *a8 = 6;
LABEL_89:
  std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v78);
}

uint64_t TAATMorphSubtableMorx::DoContextualSubstitution(uint64_t a1, uint64_t a2, unsigned int a3, TRunGlue *this, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  uint64_t GlyphID;
  unsigned int *v13;
  SFNTLookupTable *v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t (*v19)(_QWORD, _QWORD, _QWORD);
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  _WORD *v24;
  unsigned int v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  double v46;
  __int16 v47;

  v11 = *(_QWORD *)(a1 + 104) + bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 104) + 28)) + 12;
  GlyphID = TRunGlue::GetGlyphID(this, a5);
  v13 = (unsigned int *)(v11 + 4 * a3);
  v14 = *(SFNTLookupTable **)(a1 + 112);
  if (*(_QWORD *)(a1 + 104) > (unint64_t)v13 || v13 + 1 > (unsigned int *)v14)
    return 0;
  v16 = GlyphID;
  v17 = bswap32(*v13);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v43 = v18;
  v41 = (unint64_t)TAATLookupTable::BadTable;
  v42 = 0;
  v45 = 0xAAAAAAAAAAAAFFFFLL;
  TAATLookupTable::SetTable((uint64_t)&v41, (const SFNTLookupTable *)(v11 + v17), v14);
  v19 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v41;
  if (v42)
    v20 = (v42 & 1 | v41) == 0;
  else
    v20 = 1;
  v21 = v20 && v41 == (_QWORD)TAATLookupTable::BadTable;
  v22 = !v21;
  if (!v21)
  {
    v46 = -3.72066208e-103;
    v23 = (unint64_t *)((char *)&v41 + (v42 >> 1));
    if ((v42 & 1) != 0)
      v19 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*v23 + v41);
    v24 = (_WORD *)v19(v23, v16, &v46);
    if (v24)
    {
      if (*(_QWORD *)(a1 + 104) <= (unint64_t)v24 && (unint64_t)(v24 + 1) <= *(_QWORD *)(a1 + 112))
      {
        v26 = (unsigned __int16)*v24;
        v27 = __rev16(v26);
        if (*v24 && (_DWORD)v27 != (_DWORD)v16)
        {
          if (v26 == 0xFFFF)
          {
            TRunGlue::Delete((_QWORD *)a2, a5, 0);
          }
          else
          {
            v29 = *(_QWORD *)(a2 + 200);
            if (v29 && *(_QWORD *)(a2 + 624) > (int64_t)v27)
              *(_BYTE *)(v29 + (v27 >> 3)) |= 1 << (v27 & 7);
            if (*(_QWORD *)(a2 + 152))
            {
              TRunGlue::FocusOnIndex((TRunGlue *)a2, a5);
              v30 = *(_QWORD *)(a2 + 152);
              v31 = a5 - *(_QWORD *)(a2 + 160);
              objc_msgSend(*(id *)(v30 + 216), "setGlyph:atIndex:", v27, *(_QWORD *)(v30 + 200) + v31);
              *(_BYTE *)(a2 + 592) = 1;
              objc_msgSend(*(id *)(v30 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 216) + 40) + 4 * *(_QWORD *)(v30 + 200) + 4 * v31) | 0x800u, *(_QWORD *)(v30 + 200) + v31);
              v32 = *(_QWORD **)(v30 + 216);
              v33 = *(_QWORD *)(v30 + 200);
              v34 = *(_DWORD *)(v32[5] + 4 * v33 + 4 * v31);
              if ((v34 & 0x40) != 0)
                objc_msgSend(v32, "setProps:atIndex:", v34 & 0xFFFFEFBF | 0x1000, v33 + v31);
            }
            else
            {
              v36 = *(_QWORD *)(a2 + 160) + a5;
              *(_WORD *)(*(_QWORD *)(a2 + 176) + 2 * v36) = v27;
              v37 = *(_QWORD *)(a2 + 616);
              v47 = v27;
              v46 = NAN;
              TFont::GetUnsummedAdvancesForGlyphs(v37, (uint64_t)&v47, &v46, 1, 1, 0, 0);
              v38 = *(_QWORD *)(a2 + 184) + 16 * v36;
              *(double *)v38 = v46;
              *(_QWORD *)(v38 + 8) = 0;
              v39 = *(_QWORD *)(a2 + 520);
              if (v39)
              {
                v40 = *(_DWORD *)(v39 + 4 * v36);
                if ((v40 & 0x1040) != 0)
                  *(_DWORD *)(v39 + 4 * v36) = v40 & 0xFFFFEFBF | 0x1000;
              }
            }
          }
          *a6 = 2;
        }
      }
    }
  }
  return v22;
}

void TAATMorphSubtableMorx::~TAATMorphSubtableMorx(TAATMorphSubtableMorx *this)
{
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TAATMorphSubtableMorx::GetEndPtr(TAATMorphSubtableMorx *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t TAATMorphSubtableMorx::GetType(TAATMorphSubtableMorx *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 13) + 7) & 0xF;
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E15E0958;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0958;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0958;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E0958;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0958;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 *a2, unsigned __int16 **a3)
{
  return std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a2, bswap32(**a3) >> 16);
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E15E09E8;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E09E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E09E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E09E8;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E09E8;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#1}>,void ()(unsigned short,unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 *a2, __int16 *a3, unsigned __int16 **a4)
{
  return std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a3, bswap32(**a4) >> 16);
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x38uLL);
  v5 = v4;
  *v4 = &off_1E15E09A0;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_OWORD *)(v5 + 5) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E09A0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E09A0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

char *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::__clone(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = a1 + 8;
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E15E09A0;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

__n128 std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E09A0;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 8, a1 + 8);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short,unsigned short const*)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 **a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2} &,unsigned short,unsigned short,unsigned short const*>(a1 + 8, a2, a3, a4);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short,unsigned short const*)#2} &,unsigned short,unsigned short,unsigned short const*>(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 **a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 32) + (bswap32(**a4) >> 16);
  v9 = v6 - v5 + 1;
  v10 = v8 + 2 * v9;
  v11 = v10 < v8 || v10 > v7;
  if (!v11 || (v8 + 2 <= v7 ? (v12 = (v7 - v8) >> 1) : (v12 = 0), v12 == v9))
  {
    if (v5 <= v6 && (_DWORD)v5 != (unsigned __int16)(v6 + 1))
    {
      v13 = v8 - 2 * v5;
      v14 = *a2;
      do
      {
        v15 = (unsigned __int16)v14;
        result = std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(v4, v14, v14, bswap32(*(unsigned __int16 *)(v13 + 2 * (unsigned __int16)v14)) >> 16);
        ++v14;
      }
      while (v15 != v6);
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E15E08C8;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E08C8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E08C8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E08C8;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E08C8;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#2}>,void ()(unsigned short,unsigned short const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t std::__function::__value_func<void ()(unsigned short,unsigned short const*)>::__value_func[abi:nn180100]<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E15E0910;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0910;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0910;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E0910;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0910;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3},std::allocator<TAATLookupTable::Iterate(std::function<void ()(unsigned short,unsigned short,unsigned short)>)::{lambda(unsigned short,unsigned short const*)#3}>,void ()(unsigned short,unsigned short const*)>::operator()(uint64_t a1, __int16 *a2, unsigned __int16 **a3)
{
  return std::function<void ()(unsigned short,unsigned short,unsigned short)>::operator()(a1 + 8, *a2, *a2, bswap32(**a3) >> 16);
}

void std::vector<std::tuple<unsigned short,unsigned short,unsigned short>,TInlineBufferAllocator<std::tuple<unsigned short,unsigned short,unsigned short>,4ul>>::__destroy_vector::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 48);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 48))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *TRunGlue::Delete(_QWORD *this, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v5 = this;
  if (this[19])
  {
    TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    v6 = v5[19];
    v7 = a2 - v5[20];
    objc_msgSend(*(id *)(v6 + 216), "setGlyph:atIndex:", 0xFFFFLL, *(_QWORD *)(v6 + 200) + v7);
    if ((*(_BYTE *)(v6 + 225) & 2) != 0)
      *(_BYTE *)(v6 + 225) |= 8u;
    TStorageRange::SetAdvance((TStorageRange *)(v6 + 192), v7, *MEMORY[0x1E0C9D820]);
    objc_msgSend(*(id *)(v6 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 216) + 40) + 4 * *(_QWORD *)(v6 + 200) + 4 * v7) | 0x20u, *(_QWORD *)(v6 + 200) + v7);
    this = *(_QWORD **)(v6 + 216);
    v8 = *(_QWORD *)(v6 + 200);
    LODWORD(v9) = *(_DWORD *)(this[5] + 4 * v8 + 4 * v7);
    if ((v9 & 0x40) != 0)
    {
      v9 = v9 & 0xFFFFEFBF | 0x1000;
      this = (_QWORD *)objc_msgSend(this, "setProps:atIndex:", v9, v8 + v7);
    }
    if ((a3 & ~(_DWORD)v9) != 0)
      return (_QWORD *)objc_msgSend(*(id *)(v6 + 216), "setProps:atIndex:", v9 | a3, *(_QWORD *)(v6 + 200) + v7);
  }
  else
  {
    v10 = this[20] + a2;
    v11 = this[23];
    *(_WORD *)(this[22] + 2 * v10) = -1;
    *(_OWORD *)(v11 + 16 * v10) = *MEMORY[0x1E0C9D820];
    v12 = this[65];
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4 * v10) | a3;
      *(_DWORD *)(v12 + 4 * v10) = v13 | 0x20;
      if ((v13 & 0x1040) != 0)
        *(_DWORD *)(v12 + 4 * v10) = v13 & 0xFFFFEF9F | 0x1020;
    }
    else
    {
      *(_BYTE *)(this[26] + v10 / 8) |= 1 << (v10 & 7);
    }
  }
  return this;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0448;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0448;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

char *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E0448;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 40), a1 + 40);
  *((_WORD *)v2 + 36) = *(_WORD *)(a1 + 72);
  return v2;
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t result;

  *(_QWORD *)a2 = &off_1E15E0448;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  result = std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 40, a1 + 40);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_0>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v15;
  unsigned __int16 *v16;
  int v18;
  unsigned __int16 *v20;
  uint64_t v22;
  _WORD *v23;

  v4 = *a4;
  v5 = *(_DWORD *)(result + 16);
  if (v5 > v4)
  {
    v6 = *a2;
    v7 = *a3;
    v8 = *(_QWORD *)(result + 8);
    v10 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(result + 32);
    v11 = *(_QWORD *)(v8 + 104);
    v12 = *(_QWORD *)(v8 + 112);
    v13 = (unsigned __int16 *)(v10 + 2 * *a4);
    if ((unint64_t)v13 >= v11 && (unint64_t)(v13 + 1) <= v12)
    {
      v15 = bswap32(*v13) >> 16;
      v16 = (unsigned __int16 *)(v9 + 4 * v15);
      if ((unint64_t)v16 >= v11 && (unint64_t)(v16 + 2) <= v12)
      {
        v18 = *v16;
        if ((*(_WORD *)(v9 + 4 * v15 + 2) & 0xFE0) != 0 || v18 != 0)
          return std::function<void ()(unsigned short,unsigned short)>::operator()(result + 40, v6, v7);
      }
    }
    if (*(_WORD *)(result + 72))
    {
      v20 = (unsigned __int16 *)(v10 + 2 * (v4 + v5 * *(unsigned __int16 *)(result + 72)));
      if ((unint64_t)v20 >= v11 && (unint64_t)(v20 + 1) <= v12)
      {
        v22 = bswap32(*v20) >> 16;
        v23 = (_WORD *)(v9 + 4 * v22);
        if ((unint64_t)v23 >= v11
          && (unint64_t)(v23 + 2) <= v12
          && ((*(_WORD *)(v9 + 4 * v22 + 2) & 0xFE0) != 0 || *v23 != 0))
        {
          return std::function<void ()(unsigned short,unsigned short)>::operator()(result + 40, v6, v7);
        }
      }
    }
  }
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0490;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0490;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

char *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E0490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 40), a1 + 40);
  *((_WORD *)v2 + 36) = *(_WORD *)(a1 + 72);
  return v2;
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t result;

  *(_QWORD *)a2 = &off_1E15E0490;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  result = std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 40, a1 + 40);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_1>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  const unsigned __int16 *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  const STXEntryTwo *v10;
  uint64_t v11;
  TAATMorphSubtableMorx *v12;
  unint64_t v13;

  v4 = *a4;
  v5 = (const unsigned __int16 *)*(unsigned int *)(result + 16);
  if (v5 > v4)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = *(_QWORD *)(result + 8);
    v10 = *(const STXEntryTwo **)(result + 24);
    v11 = *(_QWORD *)(result + 32);
    v12 = *(TAATMorphSubtableMorx **)(v9 + 104);
    v13 = *(_QWORD *)(v9 + 112);
    result = TAATMorphSubtableMorx::MorxContextualStateNeedsAction(v12, v13, 0, *a4, v5, v10, v11);
    if ((result & 1) != 0)
      return std::function<void ()(unsigned short,unsigned short)>::operator()(v6 + 40, v7, v8);
    if (*(_WORD *)(v6 + 72))
    {
      result = TAATMorphSubtableMorx::MorxContextualStateNeedsAction(v12, v13, *(unsigned __int16 *)(v6 + 72), v4, v5, v10, v11);
      if ((_DWORD)result)
        return std::function<void ()(unsigned short,unsigned short)>::operator()(v6 + 40, v7, v8);
    }
  }
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E04D8;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E04D8;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t result;

  *(_QWORD *)a2 = &off_1E15E04D8;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  result = std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 40, a1 + 40);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_2>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0520;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0520;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E15E0520;
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0520;
  return std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_3>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, _WORD *a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = (unsigned __int16)*a4;
  if (*a4)
  {
    v5 = *a3;
    v6 = *a2;
    if (v6 <= v5 && v6 != (unsigned __int16)(v5 + 1))
    {
      v7 = result + 8;
      do
      {
        if (v4 != (unsigned __int16)v6)
          result = std::function<void ()(unsigned short,unsigned short)>::operator()(v7, v6, v6);
        v8 = v5 == (unsigned __int16)v6;
        LOWORD(v6) = v6 + 1;
      }
      while (!v8);
    }
  }
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E15E0568;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E15E0568;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x186DC03ACLL);
}

char *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E0568;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)(v2 + 40), a1 + 40);
  *((_WORD *)v2 + 36) = *(_WORD *)(a1 + 72);
  return v2;
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t result;

  *(_QWORD *)a2 = &off_1E15E0568;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  result = std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100](a2 + 40, a1 + 40);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  return result;
}

_QWORD *std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4,std::allocator<TAATMorphSubtableMorx::AddShapingGlyphs(std::function<void ()(unsigned short,unsigned short)>)::$_4>,void ()(unsigned short,unsigned short,unsigned short)>::operator()(uint64_t result, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  const unsigned __int16 *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  const STXEntryTwo *v10;
  uint64_t v11;
  TAATMorphSubtableMorx *v12;
  unint64_t v13;

  v4 = *a4;
  v5 = (const unsigned __int16 *)*(unsigned int *)(result + 16);
  if (v5 > v4)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = *(_QWORD *)(result + 8);
    v10 = *(const STXEntryTwo **)(result + 24);
    v11 = *(_QWORD *)(result + 32);
    v12 = *(TAATMorphSubtableMorx **)(v9 + 104);
    v13 = *(_QWORD *)(v9 + 112);
    result = TAATMorphSubtableMorx::MorxInsertionStateNeedsAction(v12, v13, 0, *a4, v5, v10, v11);
    if ((result & 1) != 0)
      return std::function<void ()(unsigned short,unsigned short)>::operator()(v6 + 40, v7, v8);
    if (*(_WORD *)(v6 + 72))
    {
      result = TAATMorphSubtableMorx::MorxInsertionStateNeedsAction(v12, v13, *(unsigned __int16 *)(v6 + 72), v4, v5, v10, v11);
      if ((_DWORD)result)
        return std::function<void ()(unsigned short,unsigned short)>::operator()(v6 + 40, v7, v8);
    }
  }
  return result;
}

void TAATMorphSubtableMorx::DoLigatureAction<TRunGlue::TGlyphInVector>(TRunGlue&,unsigned short,TAATMorphSubtableMorx::MorxLigatureState *,MorphActionResultCode &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  TRunGlue *v2;
  int v3;
  __int128 v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  void **v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void **v18;
  void **v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *(TRunGlue **)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  if (v3 != *((_DWORD *)v2 + 6))
  {
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v44 = v4;
    v45 = v4;
    v42 = v4;
    v43 = v4;
    v40 = v4;
    v41 = v4;
    v38 = v4;
    v39 = v4;
    v36 = v4;
    v37 = v4;
    v35 = v4;
    v33 = v4;
    v34 = v4;
    v31 = v4;
    v32 = v4;
    v29 = v4;
    v30 = v4;
    std::vector<long,TInlineBufferAllocator<long,30ul>>::vector<std::__wrap_iter<long *>,0>((uint64_t)&v29, **(_BYTE ***)(a1 + 16), *(_BYTE **)(*(_QWORD *)(a1 + 16) + 8));
    v6 = (void **)*((_QWORD *)&v29 + 1);
    v5 = (void **)v29;
    if ((_QWORD)v29 != *((_QWORD *)&v29 + 1))
    {
      v7 = (_QWORD *)(*((_QWORD *)&v29 + 1) - 8);
      if (*((_QWORD *)&v29 + 1) - 8 > (unint64_t)v29)
      {
        v8 = v29 + 8;
        do
        {
          v9 = *(_QWORD *)(v8 - 8);
          *(_QWORD *)(v8 - 8) = *v7;
          *v7-- = v9;
          v10 = v8 >= (unint64_t)v7;
          v8 += 8;
        }
        while (!v10);
      }
    }
    v11 = *(void ***)(a1 + 24);
    if ((unint64_t)v6 >= (unint64_t)v30)
    {
      v13 = v6 - v5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v15 = v30 - (_QWORD)v5;
      if ((uint64_t)(v30 - (_QWORD)v5) >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      v28[4] = (void **)&v30 + 1;
      if (v16)
      {
        v17 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)&v30 + 8, v16);
        v6 = (void **)*((_QWORD *)&v29 + 1);
        v5 = (void **)v29;
      }
      else
      {
        v17 = 0;
      }
      v18 = (void **)&v17[8 * v13];
      *v18 = *v11;
      if (v6 == v5)
      {
        v20 = &v17[8 * v13];
      }
      else
      {
        v19 = v6;
        v20 = &v17[8 * v13];
        do
        {
          v21 = (uint64_t)*--v19;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        while (v19 != v5);
      }
      v12 = v18 + 1;
      *(_QWORD *)&v29 = v20;
      *((_QWORD *)&v29 + 1) = v18 + 1;
      v22 = (void **)v30;
      *(_QWORD *)&v30 = &v17[8 * v16];
      v28[2] = v6;
      v28[3] = v22;
      v28[0] = v5;
      v28[1] = v5;
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v28);
      v5 = (void **)v29;
      v11 = *(void ***)(a1 + 24);
    }
    else
    {
      *v6 = *v11;
      v12 = v6 + 1;
    }
    *((_QWORD *)&v29 + 1) = v12;
    v24 = *v5;
    v23 = v5 + 1;
    *v11 = v24;
    if (v12 != v23)
      memmove(**(void ***)(a1 + 16), v23, (char *)v12 - (char *)v23);
    v28[0] = (void **)&v29;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](v28);
    v2 = *(TRunGlue **)(a1 + 8);
    v3 = *((_DWORD *)v2 + 6);
  }
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25 = TRunGlue::length(v2);
  *(_QWORD *)&v29 = v2;
  DWORD2(v29) = v3;
  v26 = -1;
  *(_QWORD *)&v30 = -1;
  *((_QWORD *)&v30 + 1) = v25;
  *(_QWORD *)&v31 = -1;
  v27 = TRunGlue::length(v2);
  *((_QWORD *)&v31 + 1) = v27;
  *((_QWORD *)&v32 + 1) = -1;
  v33 = 0xFFFFFFFFFFFFFFFFLL;
  if (v3 < 0)
  {
    *(_QWORD *)&v30 = v25;
    *((_QWORD *)&v30 + 1) = -1;
    *(_QWORD *)&v31 = v27;
    *((_QWORD *)&v31 + 1) = -1;
    v26 = v25;
  }
  *(_QWORD *)&v32 = v26;
  TGlyphIterator::DoLigature((TRunGlue **)&v29, **(_QWORD **)(a1 + 24), **(unsigned __int16 **)(a1 + 32), **(uint64_t ***)(a1 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 3, 0);
}

char *std::vector<long,TInlineBufferAllocator<long,30ul>>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(_BYTE **)a1;
    v13 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = (__src - v12) >> 3;
    v15 = a1 + 24;
    v16 = v7 - (_QWORD)v12;
    if (v16 >> 2 > v13)
      v13 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v13;
    v24 = a1 + 24;
    if (v17)
      v18 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v15, v17);
    else
      v18 = 0;
    v20 = v18;
    v21 = &v18[8 * v14];
    v22 = v21;
    v23 = &v18[8 * v17];
    std::__split_buffer<long,TInlineBufferAllocator<long,30ul> &>::push_back((uint64_t *)&v20, a3);
    v4 = std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v20, v4);
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&v20);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v8 = __src + 8;
    v9 = v6 - 8;
    v10 = *(_QWORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      v9 += 8;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-8 * ((v6 - v8) >> 3)], __src, v6 - v8);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

uint64_t std::vector<long,TInlineBufferAllocator<long,30ul>>::vector<std::__wrap_iter<long *>,0>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 24;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100]((_QWORD *)a1, v4 >> 3);
    v7 = *(_QWORD *)(a1 + 8);
    if (a3 != a2)
      memmove(*(void **)(a1 + 8), a2, v4);
    *(_QWORD *)(a1 + 8) = v7 + 8 * (v4 >> 3);
  }
  return a1;
}

char *std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    abort();
  result = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

uint64_t *std::__split_buffer<long,TInlineBufferAllocator<long,30ul> &>::push_back(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v3 = result;
  v4 = (char *)result[2];
  if (v4 == (char *)result[3])
  {
    v5 = (char *)result[1];
    v6 = (uint64_t)&v5[-*result];
    if ((unint64_t)v5 <= *result)
    {
      v15 = (uint64_t)&v4[-*result];
      v14 = v15 == 0;
      v16 = v15 >> 2;
      if (v14)
        v17 = 1;
      else
        v17 = v16;
      v18 = result[4];
      v31[4] = v3[4];
      v19 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v18, v17);
      v20 = &v19[8 * (v17 >> 2)];
      v22 = v3[1];
      v21 = v3[2];
      v23 = v20;
      v24 = v21 - v22;
      if (v21 != v22)
      {
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFF8];
        v25 = 8 * (v24 >> 3);
        v26 = &v19[8 * (v17 >> 2)];
        v27 = (uint64_t *)v3[1];
        do
        {
          v28 = *v27++;
          *(_QWORD *)v26 = v28;
          v26 += 8;
          v25 -= 8;
        }
        while (v25);
      }
      v29 = *v3;
      *v3 = (uint64_t)v19;
      v3[1] = (uint64_t)v20;
      v31[0] = v29;
      v31[1] = v22;
      v30 = v3[3];
      v3[2] = (uint64_t)v23;
      v3[3] = (uint64_t)&v19[8 * v17];
      v31[2] = v21;
      v31[3] = v30;
      result = (uint64_t *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v31);
      v4 = (char *)v3[2];
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = &v5[-8 * (v10 >> 1)];
      v13 = v4 - v5;
      if (v4 != v5)
      {
        result = (uint64_t *)memmove(&v5[-8 * (v10 >> 1)], v5, v4 - v5);
        v4 = (char *)v3[1];
      }
      v3[1] = (uint64_t)&v4[8 * v11];
      v4 = &v12[v13];
    }
  }
  *(_QWORD *)v4 = *a2;
  v3[2] = (uint64_t)(v4 + 8);
  return result;
}

uint64_t TAATMorphSubtable::DoGlyphInsertion(int a1, TRunGlue *this, unsigned int a3, int a4, int a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, int *a11)
{
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  const unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const unsigned __int16 *v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  const unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  int v39;
  BOOL v40[8];
  const unsigned __int16 *v41;
  char *v42;
  char *v43;
  _OWORD *v44;
  const unsigned __int16 *v45;
  char *v46;
  char *v47;
  _OWORD v48[4];
  _OWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  if (a7 <= a6)
  {
    v14 = a6 + 2 * a3;
    if (v14 >= a6 && v14 <= a8)
      goto LABEL_11;
  }
  v15 = a6 + 2 > a8 || a7 > a6;
  v16 = (a8 - a6) >> 1;
  if (v15)
    v16 = 0;
  if (v16 != a3)
    return 0;
LABEL_11:
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48[3] = v17;
  v48[2] = v17;
  v48[1] = v17;
  v48[0] = v17;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v49 = v48;
  if (a3)
  {
    v38 = a4;
    v39 = a5;
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = bswap32(*(unsigned __int16 *)(a6 + 2 * v19)) >> 16;
      if (v18 >= v47)
      {
        v21 = v45;
        v22 = v18 - (char *)v45;
        if (v18 - (char *)v45 <= -3)
          abort();
        v23 = v22 >> 1;
        if (v47 - (char *)v45 <= (unint64_t)((v22 >> 1) + 1))
          v24 = v23 + 1;
        else
          v24 = v47 - (char *)v45;
        if ((unint64_t)(v47 - (char *)v45) >= 0x7FFFFFFFFFFFFFFELL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v44 = v48;
        if (v25)
        {
          v26 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v48, v25);
          v21 = v45;
          v18 = v46;
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[2 * v23];
        *(_WORD *)v27 = v20;
        if (v18 == (char *)v21)
        {
          v29 = &v26[2 * v23];
        }
        else
        {
          v28 = (const unsigned __int16 *)v18;
          v29 = &v26[2 * v23];
          do
          {
            v30 = *--v28;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }
          while (v28 != v21);
        }
        v31 = v27 + 2;
        v45 = (const unsigned __int16 *)v29;
        v46 = v27 + 2;
        v32 = v47;
        v47 = &v26[2 * v25];
        v42 = v18;
        v43 = v32;
        *(_QWORD *)v40 = v21;
        v41 = v21;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v40);
        v18 = v31;
      }
      else
      {
        *(_WORD *)v18 = v20;
        v18 += 2;
      }
      v46 = v18;
      ++v19;
    }
    while (v19 != v13);
    v33 = v45;
    a4 = v38;
    a5 = v39;
  }
  else
  {
    LODWORD(v18) = 0;
    v33 = 0;
  }
  v40[0] = 0;
  v34 = TRunGlue::DoGlyphInsertion(this, v33, (unsigned __int16)(((_DWORD)v18 - (_DWORD)v33) >> 1), a4, a5, a9, a10, 0, v40);
  v35 = v34;
  if (v40[0])
    v36 = 6;
  else
    v36 = 5;
  if ((_DWORD)v34)
    v36 = 3;
  *a11 = v36;
  *(_QWORD *)v40 = &v45;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v40);
  return v35;
}

uint64_t TAATMorphSubtable::DoRearrangement(uint64_t a1, TRunGlue *a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGFloat v32;
  id *v33;
  void **v34;
  void **v35;
  uint64_t v36;
  TRunGlue *v37;
  uint64_t v38;
  uint64_t v39;
  TRunGlue *v40;
  uint64_t v41;
  TRunGlue *v42;
  uint64_t v43;
  void **v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  TRunGlue *v48;
  uint64_t v49;
  TRunGlue *v50;
  uint64_t v51;
  uint64_t v52;
  TRunGlue *v53;
  uint64_t v54;
  TRunGlue *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGFloat v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__p[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[4];
  _OWORD v88[4];
  _OWORD v89[4];
  uint64_t v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;
  CFRange v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;
  CFRange v99;
  CFRange v100;
  CFRange v101;
  CFRange v102;
  CFRange v103;
  CFRange v104;
  CFRange v105;
  CFRange v106;
  CFRange v107;
  CFRange v108;
  CFRange v109;
  CFRange v110;
  CGSize v111;

  v90 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 12);
  if (v9 >= 0)
    v10 = a5;
  else
    v10 = a4;
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = a5;
  v12 = v10 - v11;
  v13 = a3 - 1;
  switch(a3)
  {
    case 1:
    case 2:
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_15;
      return 0;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      if (v12 < 1)
        return 0;
      goto LABEL_15;
    case 8:
    case 9:
    case 10:
    case 11:
      if (v12 < 2)
        return 0;
      goto LABEL_15;
    case 12:
    case 13:
    case 14:
    case 15:
      if (v12 < 3)
        return 0;
      goto LABEL_15;
    default:
LABEL_15:
      if (v10 >= v11)
      {
        v14 = v11;
        do
          TRunGlue::ClearGlyphCombiningMark(a2, v14++);
        while (v10 + 1 != v14);
      }
      if (!*((_QWORD *)a2 + 19))
      {
        v84 = 0u;
        v85 = 0u;
        *(_OWORD *)__p = 0u;
        switch(v13)
        {
          case 0:
            TAATMorphSubtable::push(a2, __p, v11);
            v91.location = v11 + 1;
            v91.length = v10 - v11;
            TRunGlue::MoveGlyphs(a2, v91, v11);
            goto LABEL_68;
          case 1:
            TAATMorphSubtable::push(a2, __p, v10);
            v94.location = v11;
            v94.length = v10 - v11;
            TRunGlue::MoveGlyphs(a2, v94, v11 + 1);
            goto LABEL_56;
          case 2:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v10);
            goto LABEL_62;
          case 3:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v95.location = v11 + 2;
            v95.length = v10 + ~v11;
            TRunGlue::MoveGlyphs(a2, v95, v11);
            goto LABEL_54;
          case 4:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v92.location = v11 + 2;
            v92.length = v10 + ~v11;
            TRunGlue::MoveGlyphs(a2, v92, v11);
            goto LABEL_64;
          case 5:
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            v96.length = v10 + ~v11;
            v96.location = v11;
            TRunGlue::MoveGlyphs(a2, v96, v11 + 2);
            TAATMorphSubtable::pop(a2, __p, v11 + 1);
LABEL_56:
            v10 = v11;
            goto LABEL_68;
          case 6:
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            v97.length = v10 + ~v11;
            v97.location = v11;
            TRunGlue::MoveGlyphs(a2, v97, v11 + 2);
            TAATMorphSubtable::pop(a2, __p, v11);
            v10 = v11 + 1;
            goto LABEL_68;
          case 7:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            v39 = v11 + 1;
            v98.length = v12 - 2;
            v98.location = v11 + 1;
            TRunGlue::MoveGlyphs(a2, v98, v11 + 2);
            goto LABEL_59;
          case 8:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            v99.length = v12 - 2;
            v99.location = v11 + 1;
            TRunGlue::MoveGlyphs(a2, v99, v11 + 2);
            TAATMorphSubtable::pop(a2, __p, v11 + 1);
LABEL_62:
            v42 = a2;
            v43 = v11;
            goto LABEL_65;
          case 9:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            TAATMorphSubtable::push(a2, __p, v10);
            v93.location = v11 + 2;
            v93.length = v12 - 2;
            TRunGlue::MoveGlyphs(a2, v93, v11 + 1);
            TAATMorphSubtable::pop(a2, __p, v11);
LABEL_54:
            TAATMorphSubtable::pop(a2, __p, v10--);
            goto LABEL_68;
          case 10:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            TAATMorphSubtable::push(a2, __p, v10);
            v100.location = v11 + 2;
            v100.length = v12 - 2;
            TRunGlue::MoveGlyphs(a2, v100, v11 + 1);
            TAATMorphSubtable::pop(a2, __p, v11);
LABEL_64:
            v43 = v10 - 1;
            v42 = a2;
            goto LABEL_65;
          case 11:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v36 = v10 - 1;
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::pop(a2, __p, v11 + 1);
            v37 = a2;
            v38 = v11;
            goto LABEL_67;
          case 12:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v39 = v10 - 1;
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::pop(a2, __p, v11 + 1);
LABEL_59:
            v40 = a2;
            v41 = v11;
            goto LABEL_60;
          case 13:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v36 = v10 - 1;
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::pop(a2, __p, v11);
            v37 = a2;
            v38 = v11 + 1;
LABEL_67:
            TAATMorphSubtable::pop(v37, __p, v38);
            TAATMorphSubtable::pop(a2, __p, v10);
            v10 = v36;
            goto LABEL_68;
          case 14:
            TAATMorphSubtable::push(a2, __p, v11);
            TAATMorphSubtable::push(a2, __p, v11 + 1);
            v39 = v10 - 1;
            TAATMorphSubtable::push(a2, __p, v10 - 1);
            TAATMorphSubtable::push(a2, __p, v10);
            TAATMorphSubtable::pop(a2, __p, v11);
            v40 = a2;
            v41 = v11 + 1;
LABEL_60:
            TAATMorphSubtable::pop(v40, __p, v41);
            v42 = a2;
            v43 = v39;
LABEL_65:
            TAATMorphSubtable::pop(v42, __p, v43);
LABEL_68:
            TAATMorphSubtable::pop(a2, __p, v10);
            v35 = (void **)__p[1];
            v34 = (void **)v84;
            break;
          default:
            v34 = 0;
            v35 = 0;
            break;
        }
        *a6 = 4;
        if ((unint64_t)((char *)v34 - (char *)v35) < 0x11)
        {
          v44 = v35;
        }
        else
        {
          v44 = (void **)__p[1];
          v45 = (char *)v34 - (char *)__p[1];
          do
          {
            operator delete(*v35);
            ++v44;
            v45 -= 8;
            v35 = v44;
          }
          while (v45 > 0x10);
          __p[1] = v44;
        }
        while (v44 != v34)
        {
          v46 = *v44++;
          operator delete(v46);
        }
        if (__p[0])
          operator delete(__p[0]);
        return 1;
      }
      v82 = v11;
      v15 = TRunGlue::PhysicalRunIndexWithGlyphIndex(a2, v11, &v82);
      if (v15 == -1)
        v16 = 0;
      else
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 8 * v15) + 48);
      v81 = v10;
      v17 = TRunGlue::PhysicalRunIndexWithGlyphIndex(a2, v10, &v81);
      if (v17 == -1)
        return 0;
      v18 = v17;
      result = 0;
      if (v16)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 8 * v18) + 48);
        if (v20)
        {
          if (v16 != v20)
          {
            v89[0] = xmmword_18492E280;
            v89[1] = unk_18492E290;
            v89[2] = xmmword_18492E2A0;
            v89[3] = unk_18492E2B0;
            v88[0] = xmmword_18492E240;
            v88[1] = unk_18492E250;
            v88[2] = xmmword_18492E260;
            v88[3] = unk_18492E270;
            v87[0] = xmmword_18492E200;
            v87[1] = unk_18492E210;
            v87[2] = xmmword_18492E220;
            v87[3] = unk_18492E230;
            *(_OWORD *)__p = xmmword_18492E1C0;
            v84 = unk_18492E1D0;
            v85 = xmmword_18492E1E0;
            v86 = unk_18492E1F0;
            switch(v13)
            {
              case 0:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                v101.location = v10 - v11;
                v101.length = v11;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 1), v101);
                goto LABEL_96;
              case 1:
                TAATMorphSubtable::CopyFromStorage(a2, v10, __p);
                v103.length = v11 + 1;
                v103.location = v10 - v11;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)v11, v103);
                goto LABEL_86;
              case 2:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v87);
                v48 = a2;
                v47 = v11;
                goto LABEL_95;
              case 3:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v104.location = v10 + ~v11;
                v104.length = v11;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 2), v104);
                v55 = a2;
                v56 = v10;
                goto LABEL_91;
              case 4:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v102.location = v10 + ~v11;
                v102.length = v11;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 2), v102);
                v47 = v10 - 1;
                v48 = a2;
                goto LABEL_95;
              case 5:
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v87);
                v105.location = v10 + ~v11;
                v105.length = v11 + 2;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)v11, v105);
                TAATMorphSubtable::CopyToStorage(a2, v11 + 1, (unsigned __int16 *)v87);
LABEL_86:
                v49 = v11;
                goto LABEL_99;
              case 6:
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v87);
                v106.location = v10 + ~v11;
                v106.length = v11 + 2;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)v11, v106);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v87);
                v49 = v11 + 1;
                goto LABEL_99;
              case 7:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v87);
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                v107.location = v12 - 2;
                v107.length = v11 + 2;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 1), v107);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v88);
                v48 = a2;
                v47 = v11 + 1;
                goto LABEL_95;
              case 8:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v87);
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                v108.location = v12 - 2;
                v108.length = v11 + 2;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 1), v108);
                TAATMorphSubtable::CopyToStorage(a2, v11 + 1, (unsigned __int16 *)v88);
                v48 = a2;
                v47 = v11;
                goto LABEL_95;
              case 9:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v88);
                v109.location = v12 - 2;
                v109.length = v11 + 1;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 2), v109);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v88);
                v55 = a2;
                v56 = v10;
LABEL_91:
                TAATMorphSubtable::CopyToStorage(v55, v56, (unsigned __int16 *)v87);
                v49 = v10 - 1;
                goto LABEL_99;
              case 10:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v88);
                v110.location = v12 - 2;
                v110.length = v11 + 1;
                TAATMorphSubtable::MoveInStorage(a2, (TRunGlue *)(v11 + 2), v110);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v88);
                v47 = v10 - 1;
                v48 = a2;
                goto LABEL_95;
              case 11:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v49 = v10 - 1;
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v89);
                TAATMorphSubtable::CopyToStorage(a2, v11 + 1, (unsigned __int16 *)v89);
                v50 = a2;
                v51 = v11;
                goto LABEL_98;
              case 12:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v52 = v10 - 1;
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v89);
                TAATMorphSubtable::CopyToStorage(a2, v11 + 1, (unsigned __int16 *)v89);
                v53 = a2;
                v54 = v11;
                goto LABEL_94;
              case 13:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v49 = v10 - 1;
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v89);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v89);
                v50 = a2;
                v51 = v11 + 1;
LABEL_98:
                TAATMorphSubtable::CopyToStorage(v50, v51, (unsigned __int16 *)v88);
                TAATMorphSubtable::CopyToStorage(a2, v10, (unsigned __int16 *)v87);
                goto LABEL_99;
              case 14:
                TAATMorphSubtable::CopyFromStorage(a2, v11, __p);
                TAATMorphSubtable::CopyFromStorage(a2, v11 + 1, v87);
                v52 = v10 - 1;
                TAATMorphSubtable::CopyFromStorage(a2, v10 - 1, v88);
                TAATMorphSubtable::CopyFromStorage(a2, v10, v89);
                TAATMorphSubtable::CopyToStorage(a2, v11, (unsigned __int16 *)v89);
                v53 = a2;
                v54 = v11 + 1;
LABEL_94:
                TAATMorphSubtable::CopyToStorage(v53, v54, (unsigned __int16 *)v88);
                v48 = a2;
                v47 = v52;
LABEL_95:
                TAATMorphSubtable::CopyToStorage(v48, v47, (unsigned __int16 *)v87);
LABEL_96:
                v49 = v10;
LABEL_99:
                TAATMorphSubtable::CopyToStorage(a2, v49, (unsigned __int16 *)__p);
                break;
              default:
                break;
            }
            if (v10 >= v11)
            {
              v57 = v10 + 1;
              do
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16)
                                                  + 8
                                                  * TRunGlue::PhysicalRunIndexWithGlyphIndex(a2, v11++, (uint64_t *)__p))
                                      + 48)
                          + 256) = 2;
              while (v57 != v11);
            }
LABEL_143:
            v71 = 4;
LABEL_144:
            *a6 = v71;
            return 1;
          }
          v21 = v81;
          v22 = v82;
          if (a3 == 1)
          {
            v23 = atomic_load((unint64_t *)(v16 + 56));
            if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 40) + 400) + 712))(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 400)))
            {
              v33 = (id *)(v16 + 216);
              objc_msgSend(*(id *)(v16 + 216), "initGlyphStackWithCapacity:", 4);
LABEL_44:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22 + 1, v21 - v22);
LABEL_140:
              v72 = *(_QWORD *)(v16 + 200);
LABEL_141:
              objc_msgSend(*v33, "popGlyphAtIndex:", v72 + v21);
LABEL_142:
              objc_msgSend(*(id *)(v16 + 216), "disposeGlyphStack");
              *(_DWORD *)(v16 + 256) = 2;
              goto LABEL_143;
            }
            v24 = *(_QWORD **)(v16 + 216);
            v25 = v24[2];
            v26 = *(_QWORD *)(v16 + 200);
            if (v22 + 1 >= v21)
            {
LABEL_38:
              v29 = v25 + 2 * v26;
              v30 = v24[4];
              if (v30 || (v58 = v24[3]) == 0)
              {
                v31 = v30 + 16 * v26 + 16 * v22;
                v32 = *(double *)(v31 + 8);
              }
              else
              {
                v31 = v58 + 8 * v26 + 8 * v22;
                v32 = 0.0;
              }
              v59 = *(unsigned __int16 *)(v29 + 2 * v22);
              v60 = *(double *)v31;
              v61 = *(unsigned int *)(v24[5] + 4 * v26 + 4 * v22);
              v62 = *(unsigned __int16 *)(v29 + 2 * v21);
              objc_msgSend(v24, "setGlyph:atIndex:", *(unsigned __int16 *)(v29 + 2 * v21), v26 + v22);
              v63 = *(_BYTE *)(v16 + 225);
              if (v62 == 0xFFFF && (v63 & 2) != 0)
                *(_BYTE *)(v16 + 225) = v63 | 8;
              v65 = *(_QWORD *)(v16 + 216);
              v66 = *(_QWORD *)(v65 + 32);
              if (v66 || (v69 = *(_QWORD *)(v65 + 24)) == 0)
              {
                v67 = (uint64_t *)(v66 + 16 * *(_QWORD *)(v16 + 200) + 16 * v21);
                v68 = v67[1];
              }
              else
              {
                v67 = (uint64_t *)(v69 + 8 * *(_QWORD *)(v16 + 200) + 8 * v21);
                v68 = 0;
              }
              v70 = *v67;
              TStorageRange::SetAdvance((TStorageRange *)(v16 + 192), v22, *(CGSize *)(&v68 - 1));
              objc_msgSend(*(id *)(v16 + 216), "setProps:atIndex:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v16 + 216) + 40) + 4 * *(_QWORD *)(v16 + 200) + 4 * v21), *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "setGlyph:atIndex:", v59, *(_QWORD *)(v16 + 200) + v21);
              if ((_DWORD)v59 == 0xFFFF && (*(_BYTE *)(v16 + 225) & 2) != 0)
                *(_BYTE *)(v16 + 225) |= 8u;
              v111.width = v60;
              v111.height = v32;
              TStorageRange::SetAdvance((TStorageRange *)(v16 + 192), v21, v111);
              objc_msgSend(*(id *)(v16 + 216), "setProps:atIndex:", v61, *(_QWORD *)(v16 + 200) + v21);
              v71 = 1;
              goto LABEL_144;
            }
            v27 = ~v22 + v21;
            v28 = v26 + v22 + 1;
            while (*(__int16 *)(v25 + 2 * v28) == -1 || (*(_DWORD *)(v24[5] + 4 * v28) & 0x20) != 0)
            {
              ++v28;
              if (!--v27)
                goto LABEL_38;
            }
          }
          else
          {
            v24 = *(_QWORD **)(v16 + 216);
          }
          objc_msgSend(v24, "initGlyphStackWithCapacity:", 4);
          v33 = (id *)(v16 + 216);
          switch(a3)
          {
            case 1:
              goto LABEL_44;
            case 2:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22, v21 - v22, *(_QWORD *)(v16 + 200) + v22 + 1);
              goto LABEL_123;
            case 3:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              goto LABEL_127;
            case 4:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v22 + *(_QWORD *)(v16 + 200) + 1);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22 + 2, v21 + ~v22);
              goto LABEL_129;
            case 5:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v22 + *(_QWORD *)(v16 + 200) + 1);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22 + 2, v21 + ~v22);
              goto LABEL_132;
            case 6:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v21 + *(_QWORD *)(v16 + 200) - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22, v21 + ~v22, *(_QWORD *)(v16 + 200) + v22 + 2);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", v22 + *(_QWORD *)(v16 + 200) + 1);
LABEL_123:
              v72 = *(_QWORD *)(v16 + 200);
              v21 = v22;
              goto LABEL_141;
            case 7:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v21 + *(_QWORD *)(v16 + 200) - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22, v21 + ~v22, *(_QWORD *)(v16 + 200) + v22 + 2);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              v72 = v22 + 1;
              goto LABEL_130;
            case 8:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v21 + *(_QWORD *)(v16 + 200) - 1);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22 + 1, v21 - v22 - 2, v22 + *(_QWORD *)(v16 + 200) + 2);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              v73 = *(void **)(v16 + 216);
              v74 = *(_QWORD *)(v16 + 200) + v22 + 1;
              goto LABEL_139;
            case 9:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", v21 + *(_QWORD *)(v16 + 200) - 1);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", *(_QWORD *)(v16 + 200) + v22 + 1, v21 - v22 - 2, v22 + *(_QWORD *)(v16 + 200) + 2);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
LABEL_127:
              v73 = *(void **)(v16 + 216);
              v74 = *(_QWORD *)(v16 + 200) + v22;
              goto LABEL_139;
            case 10:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", v22 + *(_QWORD *)(v16 + 200) + 2, v21 - v22 - 2, *(_QWORD *)(v16 + 200) + v22 + 1);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
LABEL_129:
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              v72 = v21 - 1;
LABEL_130:
              v21 = *(_QWORD *)(v16 + 200);
              goto LABEL_141;
            case 11:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "moveGlyphsFromRange:toIndex:", v22 + *(_QWORD *)(v16 + 200) + 2, v21 - v22 - 2, *(_QWORD *)(v16 + 200) + v22 + 1);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
LABEL_132:
              v73 = *(void **)(v16 + 216);
              v74 = v21 + *(_QWORD *)(v16 + 200) - 1;
              goto LABEL_139;
            case 12:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v75 = v21 - 1;
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21 - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v76 = *(void **)(v16 + 216);
              v77 = *(_QWORD *)(v16 + 200) + v22;
              goto LABEL_136;
            case 13:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v78 = v21 - 1;
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21 - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v79 = *(void **)(v16 + 216);
              v80 = *(_QWORD *)(v16 + 200) + v22;
              goto LABEL_138;
            case 14:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v75 = v21 - 1;
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21 - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              v76 = *(void **)(v16 + 216);
              v77 = *(_QWORD *)(v16 + 200) + v22 + 1;
LABEL_136:
              objc_msgSend(v76, "popGlyphAtIndex:", v77);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              v72 = *(_QWORD *)(v16 + 200);
              v21 = v75;
              goto LABEL_141;
            case 15:
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22 + 1);
              v78 = v21 - 1;
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21 - 1);
              objc_msgSend(*(id *)(v16 + 216), "pushGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v21);
              objc_msgSend(*(id *)(v16 + 216), "popGlyphAtIndex:", *(_QWORD *)(v16 + 200) + v22);
              v79 = *(void **)(v16 + 216);
              v80 = *(_QWORD *)(v16 + 200) + v22 + 1;
LABEL_138:
              objc_msgSend(v79, "popGlyphAtIndex:", v80);
              v73 = *(void **)(v16 + 216);
              v74 = *(_QWORD *)(v16 + 200) + v78;
LABEL_139:
              objc_msgSend(v73, "popGlyphAtIndex:", v74);
              goto LABEL_140;
            default:
              goto LABEL_142;
          }
        }
      }
      return result;
  }
}

void TAATMorphSubtable::push(TRunGlue *a1, _QWORD *a2, uint64_t a3)
{
  __int16 GlyphID;
  double Advance;
  uint64_t v8;
  uint64_t v9;
  int GlyphProps;
  double Origin;
  uint64_t v12;
  uint64_t v13;
  uint64_t StringIndex;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  __int16 v117;
  int v118;

  GlyphID = TRunGlue::GetGlyphID(a1, a3);
  Advance = TRunGlue::GetAdvance(a1, a3);
  v9 = v8;
  GlyphProps = TRunGlue::GetGlyphProps(a1, a3);
  Origin = TRunGlue::GetOrigin(a1, a3);
  v13 = v12;
  StringIndex = TRunGlue::GetStringIndex(a1, a3);
  v15 = (char *)a2[2];
  v16 = (char *)a2[1];
  v17 = (v15 - v16) >> 3;
  if (v15 == v16)
    v18 = 0;
  else
    v18 = 73 * v17 - 1;
  v19 = a2[4];
  v20 = a2[5] + v19;
  if (v18 == v20)
  {
    if (v19 >= 0x49)
    {
      a2[4] = v19 - 73;
      v23 = *(_QWORD *)v16;
      v21 = v16 + 8;
      v22 = v23;
      a2[1] = v21;
      if (v15 == (char *)a2[3])
      {
        v24 = (uint64_t)&v21[-*a2];
        if ((unint64_t)v21 <= *a2)
        {
          if (v15 == (char *)*a2)
            v51 = 1;
          else
            v51 = (uint64_t)&v15[-*a2] >> 2;
          v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v51);
          v54 = &v52[8 * (v51 >> 2)];
          v55 = (uint64_t *)a2[1];
          v15 = v54;
          v56 = a2[2] - (_QWORD)v55;
          if (v56)
          {
            v15 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
            v57 = 8 * (v56 >> 3);
            v58 = &v52[8 * (v51 >> 2)];
            do
            {
              v59 = *v55++;
              *(_QWORD *)v58 = v59;
              v58 += 8;
              v57 -= 8;
            }
            while (v57);
          }
          v60 = (char *)*a2;
          *a2 = v52;
          a2[1] = v54;
          a2[2] = v15;
          a2[3] = &v52[8 * v53];
          if (v60)
          {
            operator delete(v60);
            v15 = (char *)a2[2];
          }
        }
        else
        {
          v25 = GlyphProps;
          v26 = v24 >> 3;
          v27 = v24 >> 3 < -1;
          v28 = (v24 >> 3) + 2;
          if (v27)
            v29 = v28;
          else
            v29 = v26 + 1;
          v30 = -(v29 >> 1);
          v31 = v29 >> 1;
          v32 = &v21[-8 * v31];
          v33 = v15 - v21;
          if (v15 != v21)
          {
            memmove(&v21[-8 * v31], v21, v15 - v21);
            v15 = (char *)a2[1];
          }
          v34 = &v15[8 * v30];
          v15 = &v32[v33];
          a2[1] = v34;
          a2[2] = &v32[v33];
          GlyphProps = v25;
        }
      }
      *(_QWORD *)v15 = v22;
      a2[2] += 8;
LABEL_91:
      v16 = (char *)a2[1];
      v20 = a2[5] + a2[4];
      goto LABEL_92;
    }
    v118 = GlyphProps;
    v35 = (char *)a2[3];
    v36 = (char *)*a2;
    v37 = (uint64_t)&v35[-*a2];
    if (v17 < v37 >> 3)
    {
      v38 = operator new(0xFF8uLL);
      v39 = v38;
      if (v35 == v15)
      {
        if (v16 == v36)
        {
          if (v15 == v16)
            v61 = 1;
          else
            v61 = (v35 - v16) >> 2;
          v62 = 2 * v61;
          v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v61);
          v16 = &v63[(v62 + 6) & 0xFFFFFFFFFFFFFFF8];
          v65 = (uint64_t *)a2[1];
          v66 = v16;
          v67 = a2[2] - (_QWORD)v65;
          if (v67)
          {
            v66 = &v16[v67 & 0xFFFFFFFFFFFFFFF8];
            v68 = 8 * (v67 >> 3);
            v69 = &v63[(v62 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v70 = *v65++;
              *(_QWORD *)v69 = v70;
              v69 += 8;
              v68 -= 8;
            }
            while (v68);
          }
          v71 = (char *)*a2;
          *a2 = v63;
          a2[1] = v16;
          a2[2] = v66;
          a2[3] = &v63[8 * v64];
          if (v71)
          {
            operator delete(v71);
            v16 = (char *)a2[1];
          }
        }
        *((_QWORD *)v16 - 1) = v39;
        v72 = (char *)a2[1];
        v73 = (char *)a2[2];
        a2[1] = v72 - 8;
        v74 = *((_QWORD *)v72 - 1);
        a2[1] = v72;
        if (v73 == (char *)a2[3])
        {
          v75 = (uint64_t)&v72[-*a2];
          if ((unint64_t)v72 <= *a2)
          {
            if (v73 == (char *)*a2)
              v106 = 1;
            else
              v106 = (uint64_t)&v73[-*a2] >> 2;
            v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v106);
            v109 = &v107[8 * (v106 >> 2)];
            v110 = (uint64_t *)a2[1];
            v73 = v109;
            v111 = a2[2] - (_QWORD)v110;
            if (v111)
            {
              v73 = &v109[v111 & 0xFFFFFFFFFFFFFFF8];
              v112 = 8 * (v111 >> 3);
              v113 = &v107[8 * (v106 >> 2)];
              do
              {
                v114 = *v110++;
                *(_QWORD *)v113 = v114;
                v113 += 8;
                v112 -= 8;
              }
              while (v112);
            }
            v115 = (char *)*a2;
            *a2 = v107;
            a2[1] = v109;
            a2[2] = v73;
            a2[3] = &v107[8 * v108];
            if (v115)
            {
              operator delete(v115);
              v73 = (char *)a2[2];
            }
          }
          else
          {
            v76 = v75 >> 3;
            v27 = v75 >> 3 < -1;
            v77 = (v75 >> 3) + 2;
            if (v27)
              v78 = v77;
            else
              v78 = v76 + 1;
            v79 = -(v78 >> 1);
            v80 = v78 >> 1;
            v81 = &v72[-8 * v80];
            v82 = v73 - v72;
            if (v73 != v72)
            {
              memmove(&v72[-8 * v80], v72, v73 - v72);
              v72 = (char *)a2[1];
            }
            v73 = &v81[v82];
            a2[1] = &v72[8 * v79];
            a2[2] = &v81[v82];
          }
        }
        *(_QWORD *)v73 = v74;
      }
      else
      {
        *(_QWORD *)v15 = v38;
      }
      a2[2] += 8;
      GlyphProps = v118;
      goto LABEL_91;
    }
    v117 = GlyphID;
    v40 = v37 >> 2;
    if (v35 == v36)
      v41 = 1;
    else
      v41 = v40;
    v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v41);
    v44 = v43;
    v45 = &v42[8 * v17];
    v46 = &v42[8 * v43];
    v47 = operator new(0xFF8uLL);
    if (v17 == v44)
    {
      v48 = 8 * v17;
      if (v15 - v16 < 1)
      {
        v83 = v47;
        v84 = v48 >> 2;
        if (v15 == v16)
          v85 = 1;
        else
          v85 = v84;
        v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v85);
        v45 = &v86[8 * (v85 >> 2)];
        v46 = &v86[8 * v87];
        if (v42)
          operator delete(v42);
        v42 = v86;
        v47 = v83;
      }
      else
      {
        v49 = v48 >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v45 -= 8 * (v50 >> 1);
      }
    }
    *(_QWORD *)v45 = v47;
    v88 = v45 + 8;
    v89 = a2[2];
    if (v89 == a2[1])
    {
      v104 = v45;
      v90 = v45 + 8;
LABEL_79:
      v105 = (char *)*a2;
      *a2 = v42;
      a2[1] = v104;
      a2[2] = v90;
      a2[3] = v46;
      GlyphID = v117;
      GlyphProps = v118;
      if (v105)
        operator delete(v105);
      goto LABEL_91;
    }
    while (1)
    {
      if (v45 == v42)
      {
        if (v88 < v46)
        {
          v92 = (v46 - v88) >> 3;
          if (v92 >= -1)
            v93 = v92 + 1;
          else
            v93 = v92 + 2;
          v90 = &v88[8 * (v93 >> 1)];
          v91 = &v45[8 * (v93 >> 1)];
          if (v88 == v45)
            v45 = v88;
          else
            memmove(&v45[8 * (v93 >> 1)], v45, v88 - v45);
          goto LABEL_75;
        }
        if (v46 == v45)
          v94 = 1;
        else
          v94 = (v46 - v45) >> 2;
        v95 = 2 * v94;
        v96 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(v94);
        v42 = v96;
        v91 = &v96[(v95 + 6) & 0xFFFFFFFFFFFFFFF8];
        v90 = v91;
        v98 = v88 - v45;
        if (v88 != v45)
        {
          v90 = &v91[v98 & 0xFFFFFFFFFFFFFFF8];
          v99 = 8 * (v98 >> 3);
          v100 = v91;
          v101 = v45;
          do
          {
            v102 = *(_QWORD *)v101;
            v101 += 8;
            *(_QWORD *)v100 = v102;
            v100 += 8;
            v99 -= 8;
          }
          while (v99);
        }
        v46 = &v96[8 * v97];
        operator delete(v45);
      }
      else
      {
        v90 = v88;
        v91 = v45;
      }
      v45 = v42;
LABEL_75:
      v42 = v45;
      v103 = *(_QWORD *)(v89 - 8);
      v89 -= 8;
      *((_QWORD *)v91 - 1) = v103;
      v104 = v91 - 8;
      v88 = v90;
      v45 = v104;
      if (v89 == a2[1])
        goto LABEL_79;
    }
  }
LABEL_92:
  v116 = *(_QWORD *)&v16[8 * (v20 / 0x49)] + 56 * (v20 % 0x49);
  *(_WORD *)v116 = GlyphID;
  *(_DWORD *)(v116 + 2) = -1431655766;
  *(_WORD *)(v116 + 6) = -21846;
  *(double *)(v116 + 8) = Advance;
  *(_QWORD *)(v116 + 16) = v9;
  *(_DWORD *)(v116 + 24) = GlyphProps;
  *(_DWORD *)(v116 + 28) = -1431655766;
  *(double *)(v116 + 32) = Origin;
  *(_QWORD *)(v116 + 40) = v13;
  *(_QWORD *)(v116 + 48) = StringIndex;
  ++a2[5];
}

_QWORD *TAATMorphSubtable::pop(TRunGlue *this, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  CGSize v20;
  CGPoint v21;

  v6 = a2[1];
  v5 = a2[2];
  v7 = 73 * ((v5 - v6) >> 3) - 1;
  if (v5 == v6)
    v7 = 0;
  v8 = a2[5] - 1;
  v9 = v8 + a2[4];
  v10 = (unsigned __int16 *)(*(_QWORD *)(v6 + 8 * (v9 / 0x49)) + 56 * (v9 % 0x49));
  v11 = *v10;
  v12 = *((double *)v10 + 1);
  v13 = *((double *)v10 + 2);
  v14 = *((unsigned int *)v10 + 6);
  v15 = *((double *)v10 + 4);
  v16 = *((double *)v10 + 5);
  v17 = *((_QWORD *)v10 + 6);
  a2[5] = v8;
  if (v7 - v9 >= 0x92)
  {
    operator delete(*(void **)(v5 - 8));
    a2[2] -= 8;
  }
  TRunGlue::SetGlyphID<true>(this, a3, v11);
  v20.width = v12;
  v20.height = v13;
  TRunGlue::SetAdvance(this, a3, v20);
  TRunGlue::SetGlyphProps(this, a3, v14);
  v21.x = v15;
  v21.y = v16;
  TRunGlue::SetOrigin(this, a3, v21);
  return TRunGlue::SetStringIndex(this, a3, v17);
}

double TAATMorphSubtable::CopyFromStorage(TRunGlue *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = a2;
  v5 = TRunGlue::PhysicalRunIndexWithGlyphIndex(a1, a2, &v13);
  if (v5 == -1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * v5) + 48);
  TStorageRange::GetGlyphEntry((TStorageRange *)(v6 + 192), v13, (uint64_t)v10);
  v7 = v10[1];
  *a3 = v10[0];
  a3[1] = v7;
  result = *(double *)&v11;
  v9 = v12;
  a3[2] = v11;
  a3[3] = v9;
  return result;
}

TRunGlue *TAATMorphSubtable::MoveInStorage(TRunGlue *this, TRunGlue *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  TRunGlue *v5;
  TRunGlue *v6;
  CFIndex v7;
  unint64_t v8;
  _OWORD v9[4];

  length = a3.length;
  location = a3.location;
  v5 = a2;
  v6 = this;
  v9[0] = xmmword_18492E2C0;
  v9[1] = unk_18492E2D0;
  v9[2] = xmmword_18492E2E0;
  v9[3] = unk_18492E2F0;
  if (a3.length - (uint64_t)a2 >= (unint64_t)a3.location)
  {
    if (a3.location >= 1)
    {
      do
      {
        TAATMorphSubtable::CopyFromStorage(v6, (uint64_t)v5, v9);
        this = (TRunGlue *)TAATMorphSubtable::CopyToStorage(v6, length++, (unsigned __int16 *)v9);
        v5 = (TRunGlue *)((char *)v5 + 1);
        --location;
      }
      while (location);
    }
  }
  else
  {
    v7 = a3.location - 1;
    if (a3.location >= 1)
    {
      do
      {
        TAATMorphSubtable::CopyFromStorage(v6, (uint64_t)v5 + v7, v9);
        this = (TRunGlue *)TAATMorphSubtable::CopyToStorage(v6, length + v7, (unsigned __int16 *)v9);
        v8 = v7-- + 1;
      }
      while (v8 > 1);
    }
  }
  return this;
}

uint64_t TAATMorphSubtable::CopyToStorage(TRunGlue *a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v5 = TRunGlue::PhysicalRunIndexWithGlyphIndex(a1, a2, &v8);
  if (v5 == -1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * v5) + 48);
  return TStorageRange::SetGlyphEntry(v6 + 192, v8, a3);
}

uint64_t TStorageRange::GetGlyphEntry@<X0>(TStorageRange *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a3 = xmmword_18492E2C0;
  *(_OWORD *)(a3 + 16) = unk_18492E2D0;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 1);
  *(_WORD *)a3 = *(_WORD *)(v6[2] + 2 * v7 + 2 * a2);
  v8 = v6[4];
  if (v8 || (v11 = v6[3]) == 0)
  {
    v9 = (_QWORD *)(v8 + 16 * v7 + 16 * a2);
    v10 = v9[1];
  }
  else
  {
    v9 = (_QWORD *)(v11 + 8 * v7 + 8 * a2);
    v10 = 0;
  }
  *(_QWORD *)(a3 + 8) = *v9;
  *(_QWORD *)(a3 + 16) = v10;
  v12 = v6[6];
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v6[5] + 4 * v7 + 4 * a2);
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v12 + 8 * v7 + 8 * a2);
  result = objc_msgSend(v6, "attachmentCountAtIndex:", v7 + a2);
  *(_QWORD *)(a3 + 40) = result;
  if ((*((_BYTE *)this + 33) & 0x10) != 0)
  {
    result = objc_msgSend(*((id *)this + 3), "originAtIndex:", *((_QWORD *)this + 1) + a2);
  }
  else
  {
    v14 = *MEMORY[0x1E0C9D538];
    v15 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
  }
  *(_QWORD *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 56) = v15;
  return result;
}

uint64_t TStorageRange::SetGlyphEntry(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  char v7;
  double v9;
  double v10;
  uint64_t result;

  v6 = *a3;
  objc_msgSend(*(id *)(a1 + 24), "setGlyph:atIndex:", *a3, *(_QWORD *)(a1 + 8) + a2);
  v7 = *(_BYTE *)(a1 + 33);
  if (v6 == 0xFFFF && (v7 & 2) != 0)
    *(_BYTE *)(a1 + 33) = v7 | 8;
  TStorageRange::SetAdvance((TStorageRange *)a1, a2, *(CGSize *)(a3 + 4));
  objc_msgSend(*(id *)(a1 + 24), "setProps:atIndex:", *((unsigned int *)a3 + 6), *(_QWORD *)(a1 + 8) + a2);
  objc_msgSend(*(id *)(a1 + 24), "setStringIndex:atIndex:", *((_QWORD *)a3 + 4), *(_QWORD *)(a1 + 8) + a2);
  objc_msgSend(*(id *)(a1 + 24), "setAttachmentCount:atIndex:", *((_QWORD *)a3 + 5), *(_QWORD *)(a1 + 8) + a2);
  v9 = *((double *)a3 + 6);
  v10 = *((double *)a3 + 7);
  result = objc_msgSend(*(id *)(a1 + 24), "setOrigin:atIndex:", *(_QWORD *)(a1 + 8) + a2, v9, v10);
  if (v9 != *MEMORY[0x1E0C9D538] || v10 != *(double *)(MEMORY[0x1E0C9D538] + 8))
    *(_BYTE *)(a1 + 33) |= 0x10u;
  return result;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 84);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[11])
        v1[11] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *TRunGlue::ClearGlyphCombiningMark(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = this;
  if (this[19])
  {
    TRunGlue::FocusOnIndex((TRunGlue *)this, a2);
    v4 = v3[19];
    v5 = a2 - v3[20];
    this = *(_QWORD **)(v4 + 216);
    v6 = *(_QWORD *)(v4 + 200);
    v7 = *(_DWORD *)(this[5] + 4 * v6 + 4 * v5);
    if ((v7 & 0x40) != 0)
      return (_QWORD *)objc_msgSend(this, "setProps:atIndex:", v7 & 0xFFFFEFBF | 0x1000, v6 + v5);
  }
  else
  {
    v8 = this[65];
    if (v8)
    {
      v9 = this[20] + a2;
      v10 = *(_DWORD *)(v8 + 4 * v9);
      if ((v10 & 0x40) != 0)
        *(_DWORD *)(v8 + 4 * v9) = v10 & 0xFFFFEFBF | 0x1000;
    }
  }
  return this;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<TAATMorphSubtable::SimpleGlyphEntry *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

void *TRunGlue::MoveGlyphs(TRunGlue *this, CFRange a2, uint64_t a3)
{
  CFIndex length;
  CFIndex location;
  void *result;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  length = a2.length;
  location = a2.location;
  if (*((_QWORD *)this + 19))
  {
    TRunGlue::FocusOnIndex(this, a2.location);
    return (void *)objc_msgSend(*(id *)(*((_QWORD *)this + 19) + 216), "moveGlyphsFromRange:toIndex:", location - *((_QWORD *)this + 20) + *(_QWORD *)(*((_QWORD *)this + 19) + 200), length, a3 - *((_QWORD *)this + 20) + *(_QWORD *)(*((_QWORD *)this + 19) + 200));
  }
  else
  {
    v8 = *((_QWORD *)this + 20);
    v9 = v8 + a2.location;
    v10 = v8 + a3;
    memmove((void *)(*((_QWORD *)this + 22) + 2 * (v8 + a3)), (const void *)(*((_QWORD *)this + 22) + 2 * (v8 + a2.location)), 2 * a2.length);
    memmove((void *)(*((_QWORD *)this + 23) + 16 * v10), (const void *)(*((_QWORD *)this + 23) + 16 * v9), 16 * length);
    v11 = *((_QWORD *)this + 65);
    if (!v11)
    {
      TRunGlue::InitPropertiesFromDeletedGlyphs(this);
      v11 = *((_QWORD *)this + 65);
    }
    result = memmove((void *)(v11 + 4 * v10), (const void *)(v11 + 4 * v9), 4 * length);
    v12 = *((_QWORD *)this + 24);
    if (v12)
      result = memmove((void *)(v12 + 16 * v10), (const void *)(v12 + 16 * v9), 16 * length);
    v13 = *((_QWORD *)this + 66);
    if (v13)
      return memmove((void *)(v13 + 8 * v10), (const void *)(v13 + 8 * v9), 8 * length);
  }
  return result;
}

uint64_t TRunGlue::ActualCharRangeForStorage(TRunGlue *this, const TStorageRange *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 48) + 8 * *((_QWORD *)this + 1));
  v4 = *std::__minmax_element_impl[abi:nn180100]<long const*,long const*,std::__identity,std::__less<void,void>>(v3, &v3[*((_QWORD *)this + 2)]);
  objc_msgSend(*((id *)this + 3), "attachmentCountAtIndex:", *((_QWORD *)this + 1) + ((v5 - (uint64_t)v3) >> 3));
  return v4;
}

_QWORD *std::__minmax_element_impl[abi:nn180100]<long const*,long const*,std::__identity,std::__less<void,void>>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= *v2 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5)
        v8 = v5;
      else
        v8 = v4;
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 1 != a2)
      {
        v10 = *v7;
        v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          v11 = v9 < v8;
          if (v9 > v8)
            v8 = v7[1];
          if (!v11)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v9 < *result)
          {
            v4 = v7[1];
            result = v7 + 1;
          }
          v8 = *v6;
          if (v10 > *v6)
            v8 = *v7;
          if (v10 >= *v6)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

void TRun::TRun(TRun *this, CFRange a2, _CTGlyphStorage *a3, const TAttributes *a4)
{
  CFIndex length;
  CFIndex location;
  CFRange v8;

  length = a2.length;
  location = a2.location;
  *(_QWORD *)this = &off_1E15DE6F0;
  *(CFRange *)((char *)this + 8) = a2;
  *(_WORD *)((char *)this + 89) = 0;
  *((_BYTE *)this + 91) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  TAttributes::operator=((uint64_t)this + 40, (uint64_t)a4);
  v8.location = location;
  v8.length = length;
  TStorageRange::TStorageRange((TRun *)((char *)this + 192), a3, v8);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = -1;
  *((_OWORD *)this + 18) = *MEMORY[0x1E0C9D820];
  *((_DWORD *)this + 76) = -1;
  *((_QWORD *)this + 39) = 0;
}

void TRun::TRun(TRun *this, CFRange a2, _CTGlyphStorage *a3, const TAttributes *a4, const __CTFont *a5)
{
  CFIndex length;
  CFIndex location;
  CFRange v9;

  length = a2.length;
  location = a2.location;
  *(_QWORD *)this = &off_1E15DE6F0;
  *((_QWORD *)this + 1) = a2.location;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = a2.length;
  *((_QWORD *)this + 3) = 0;
  TAttributes::TAttributes((TRun *)((char *)this + 40), a4, a5);
  v9.location = location;
  v9.length = length;
  TStorageRange::TStorageRange((TRun *)((char *)this + 192), a3, v9);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = -1;
  *((_OWORD *)this + 18) = *MEMORY[0x1E0C9D820];
  *((_DWORD *)this + 76) = -1;
  *((_QWORD *)this + 39) = 0;
}

uint64_t TRun::IsRangeMonotonic(TRun *this, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  uint64_t GlyphIndexForChar;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*((int *)this + 64) < 2)
    return 1;
  length = a2.length;
  location = a2.location;
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, a2.location);
  v6 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, length + location - 1);
  v7 = GlyphIndexForChar >= v6 ? v6 : GlyphIndexForChar;
  v8 = GlyphIndexForChar <= v6 ? v6 : GlyphIndexForChar;
  v9 = v8 + 1;
  if (v7 == v8 + 1)
    return 1;
  v10 = *((_BYTE *)this + 224);
  v11 = *(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25);
  while (location == *(_QWORD *)(v11 + 8 * v7))
  {
    v12 = (_QWORD *)*((_QWORD *)this + 27);
    v13 = *((_QWORD *)this + 25);
    if ((*(_DWORD *)(v12[5] + 4 * v13 + 4 * v7) & 0x380) != 0)
      break;
    v14 = objc_msgSend(v12, "attachmentCountAtIndex:", v7 + v13);
    v15 = ~v14;
    if ((v10 & 1) == 0)
      v15 = v14 + 1;
    location += v15;
    if (v9 == ++v7)
      return 1;
  }
  return 0;
}

void std::vector<CGSize>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<CGSize>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TRun::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  const void *Dictionary;
  unint64_t v6;
  const void *v7;
  uint64_t result;
  double *v9;
  double *v10;

  v2 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (!v2
    || *(_DWORD *)(a1 + 256) != *(_DWORD *)(a2 + 256)
    || *(unsigned __int16 *)(a1 + 178) != *(unsigned __int16 *)(a2 + 178))
  {
    return 0;
  }
  Dictionary = (const void *)TAttributes::GetDictionary((TAttributes *)(a1 + 40));
  v6 = TAttributes::GetDictionary((TAttributes *)(a2 + 40));
  if (Dictionary == (const void *)v6
    || (v7 = (const void *)v6, result = 0, Dictionary) && v7 && (result = CFEqual(Dictionary, v7), (_DWORD)result))
  {
    result = TStorageRange::operator==(a1 + 192, a2 + 192);
    if ((_DWORD)result)
    {
      v9 = (double *)MEMORY[0x1E0C9D820];
      v10 = *(double **)(a1 + 312);
      if (!v10)
        v10 = (double *)MEMORY[0x1E0C9D820];
      if (*(_QWORD *)(a2 + 312))
        v9 = *(double **)(a2 + 312);
      if (*v10 == *v9 && v10[1] == v9[1])
        return *(_DWORD *)(a1 + 304) == *(_DWORD *)(a2 + 304);
      return 0;
    }
  }
  return result;
}

__CFString *TRun::DebugDescription(TRun *this)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  TCharStream **v5;
  __CFString *v6;
  __CFString *v7;
  TFont **v8;
  CGSize *v9;
  __CFString *v10;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = (__CFString *)CFStringCreateWithFormat(v2, 0, CFSTR("(%ld, %ld)"), *((_QWORD *)this + 1), *((_QWORD *)this + 2));
  CFStringAppendFormat(Mutable, 0, CFSTR("string range = %@, string = "), v4);

  v5 = (TCharStream **)*((_QWORD *)this + 34);
  if (v5 && *v5)
  {
    v6 = TCharStream::DebugDescriptionForRange(*v5, *(CFRange *)((char *)this + 8));
    CFStringAppendFormat(Mutable, 0, CFSTR("\"%@\""), v6);

  }
  else
  {
    CFStringAppend(Mutable, CFSTR("<not found>"));
  }
  v7 = (__CFString *)TAttributes::DebugDescription((TRun *)((char *)this + 40));
  CFStringAppendFormat(Mutable, 0, CFSTR(", attributes = %@"), v7);

  v8 = (TFont **)atomic_load((unint64_t *)this + 7);
  v9 = (CGSize *)MEMORY[0x1E0C9D820];
  if (*((_QWORD *)this + 39))
    v9 = (CGSize *)*((_QWORD *)this + 39);
  v10 = TStorageRange::DebugDescriptionWithInfoFromRun((TRun *)((char *)this + 192), v8, *v9, *((_QWORD *)this + 33));
  CFStringAppendFormat(Mutable, 0, CFSTR(", {%@}"), v10);

  return Mutable;
}

id TRun::CopyDescriptionDictionary(TRun *this, char a2)
{
  id v4;
  uint64_t v5;
  TCharStream **v6;
  __CFString *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  const __CTFont *v16;
  void *v17;
  double *v18;
  void *v19;
  uint64_t v20;
  CGGlyph v21;
  int v22;
  const __CFString *v24;
  void *v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  double *v36;
  double v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  double *v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  void *v55;
  void *v56;
  id v57;
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[4];

  v65[2] = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = *((_QWORD *)this + 26);
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5), CFSTR("numGlyphs"));
  v6 = (TCharStream **)*((_QWORD *)this + 34);
  if (v6 && *v6)
  {
    v7 = TCharStream::DebugDescriptionForRange(*v6, *(CFRange *)((char *)this + 8));
    if (v7)
      objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("string"));

  }
  v8 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 27) + 16) + 2 * *((_QWORD *)this + 25));
  v9 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if ((a2 & 1) == 0)
  {
    v10 = (void *)v9;
    v11 = a2;
    v12 = v4;
    if (v5 >= 1)
    {
      v13 = v8;
      v14 = v5;
      do
      {
        v15 = *v13++;
        objc_msgSend(v10, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v15));
        --v14;
      }
      while (v14);
    }
    v4 = v12;
    objc_msgSend(v12, "setObject:forKey:", v10, CFSTR("glyphs"));
    a2 = v11;
  }
  v16 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
  if (v16)
  {
    v17 = (void *)CTFontCopyAttribute(v16, CFSTR("NSFontNameAttribute"));
    objc_msgSend(v4, "setObject:forKey:", v17, CFSTR("fontName"));
    v18 = (double *)*((_QWORD *)v16 + 5);
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v18[2]), CFSTR("fontSize"));
    if ((a2 & 1) != 0)
    {
      v55 = v4;
      v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      if (v5 >= 1)
      {
        v20 = v5;
        do
        {
          v22 = *v8++;
          v21 = v22;
          if (v22 == 0xFFFF)
          {
            objc_msgSend(v19, "addObject:", CFSTR("DELETED"));
          }
          else
          {
            v57 = (id)0xAAAAAAAAAAAAAAAALL;
            TFont::CopyNameForGlyph((TFont *)v18, v21, (CFStringRef *)&v57);
            if (atomic_load((unint64_t *)&v57))
            {
              v24 = (const __CFString *)atomic_load((unint64_t *)&v57);
              v25 = v19;
            }
            else
            {
              v25 = v19;
              v24 = CFSTR("** No Glyph Name **");
            }
            objc_msgSend(v25, "addObject:", v24);

          }
          --v20;
        }
        while (v20);
      }
      v4 = v55;
      objc_msgSend(v55, "setObject:forKey:", v19, CFSTR("glyphNames"));
    }

  }
  if ((a2 & 2) != 0)
  {
    v26 = (double *)*((_QWORD *)this + 39);
    v27 = (double *)MEMORY[0x1E0C9D820];
    if (!v26)
      v26 = (double *)MEMORY[0x1E0C9D820];
    v28 = *v26;
    v29 = v26[1];
    v64[0] = CFSTR("width");
    *(float *)&v28 = v28;
    v65[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v28);
    v64[1] = CFSTR("height");
    *(float *)&v30 = v29;
    v65[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v30);
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 2), CFSTR("initialAdvance"));
    while (1)
    {
      v31 = atomic_load((unint64_t *)this + 35);
      if (v31)
        break;
      v32 = *((_QWORD *)this + 34);
      if (!v32)
      {
        v31 = 0;
        break;
      }
      TLine::CachePositions(v32);
    }
    v62[0] = CFSTR("width");
    v33 = *((double *)this + 36);
    *(float *)&v33 = v33;
    v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v33);
    v62[1] = CFSTR("height");
    v63[0] = v34;
    v35 = *((double *)this + 37);
    *(float *)&v35 = v35;
    v63[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v35);
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 2), CFSTR("cachedOffset"));
    v36 = (double *)*((_QWORD *)this + 39);
    if (!v36)
      v36 = v27;
    v37 = *((double *)this + 24) + *v36;
    *(float *)&v37 = v37;
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v37), CFSTR("width"));
    v38 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v56 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v39 = *((_QWORD *)this + 27);
    v40 = *(_QWORD *)(v39 + 32);
    if (v40 || (v43 = *(_QWORD *)(v39 + 24)) == 0)
    {
      v41 = 0;
      v42 = (double *)(v40 + 16 * *((_QWORD *)this + 25));
    }
    else
    {
      v42 = (double *)(v43 + 8 * *((_QWORD *)this + 25));
      v41 = 1;
    }
    if (v5 >= 1)
    {
      v44 = (double *)(v31 + 8);
      v45 = v42;
      do
      {
        v60[0] = CFSTR("x");
        if (v41)
          v46 = v42;
        else
          v46 = v45;
        v47 = *v46;
        *(float *)&v47 = *v46;
        v48 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v47);
        v60[1] = CFSTR("y");
        v61[0] = v48;
        v49 = 0.0;
        if ((v41 & 1) == 0)
          v49 = v45[1];
        *(float *)&v49 = v49;
        v61[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v49);
        objc_msgSend(v38, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v61, v60, 2));
        v58[0] = CFSTR("x");
        v50 = *(v44 - 1);
        *(float *)&v50 = v50;
        v51 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v50);
        v58[1] = CFSTR("y");
        v59[0] = v51;
        v52 = *v44;
        v44 += 2;
        HIDWORD(v53) = HIDWORD(v52);
        *(float *)&v53 = v52;
        v59[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v53);
        objc_msgSend(v56, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v59, v58, 2));
        v45 += 2;
        ++v42;
        --v5;
      }
      while (v5);
    }
    objc_msgSend(v4, "setObject:forKey:", v38, CFSTR("advances"));
    objc_msgSend(v4, "setObject:forKey:", v56, CFSTR("positions"));
  }
  return v4;
}

double TRun::GetBackgroundRect(TRun *this)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if ((*((_BYTE *)this + 177) & 8) != 0
      && *((_QWORD *)this + 2) + *((_QWORD *)this + 1) == *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72))
    {
      if ((*((_BYTE *)this + 224) & 1) != 0)
        (*(void (**)(TRun *))(*(_QWORD *)this + 80))(this);
      else
        TRun::GetRightWhitespaceGlyphCountAndWidth(this);
    }
  }
  else
  {
    (*(void (**)(TRun *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(TRun *))(*(_QWORD *)this + 64))(this);
    v3 = atomic_load((unint64_t *)this + 7);
    TFont::GetWindowsDescent(*(_QWORD *)(v3 + 40));
  }
  return 0.0;
}

void TRun::DrawRotatedGlyphsAtPositions(TRun *this, CGContextRef c, CFRange a3, CGPoint *a4, const TAttributes **a5, double a6)
{
  CFIndex length;
  CFIndex location;
  CGPoint TextPosition;
  const TAttributes *v14;
  char v15;
  CGAffineTransform v16;
  CFRange v17;
  CFRange v18;

  length = a3.length;
  location = a3.location;
  if (a6 == 0.0)
  {
    TRun::DrawGlyphsAtPositionsInternal(this, c, a3, a4, *(unsigned __int8 *)a5, a5[1], *((_BYTE *)a5 + 16));
  }
  else
  {
    TextPosition = CGContextGetTextPosition(c);
    if (a5[1])
      v14 = a5[1];
    else
      v14 = (TRun *)((char *)this + 40);
    v15 = *((_BYTE *)v14 + 137);
    if ((v15 & 1) != 0)
    {
      v17.location = location;
      v17.length = length;
      TRun::DrawBackground(this, c, v17, v14, 1);
    }
    CGContextSaveGState(c);
    *(_OWORD *)&v16.a = xmmword_18492E300;
    v16.c = -1.0;
    memset(&v16.d, 0, 24);
    CGContextConcatCTM(c, &v16);
    CGContextSetTextPosition(c, TextPosition.y + TextPosition.x * 0.0 + 0.0 + a6, TextPosition.y * 0.0 - TextPosition.x + 0.0 + a6);
    v18.location = location;
    v18.length = length;
    TRun::DrawGlyphsAtPositionsInternal(this, c, v18, a4, (v15 & 1) == 0, v14, 0);
    CGContextSetTextPosition(c, TextPosition.x, TextPosition.y);
    CGContextRestoreGState(c);
  }
}

void TRun::CopyPath(TRun *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  TFont *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double *v17;
  CGPath *v18;
  const CGPath *v19;
  unint64_t v20;
  CGAffineTransform m;
  id v23;
  id Mutable;

  Mutable = CGPathCreateMutable();
  v3 = atomic_load((unint64_t *)this + 7);
  v4 = *(TFont **)(v3 + 40);
  v5 = *(_QWORD *)(*((_QWORD *)this + 27) + 16);
  v6 = *((_QWORD *)this + 25);
  while (1)
  {
    v7 = atomic_load((unint64_t *)this + 35);
    if (v7)
      break;
    v8 = *((_QWORD *)this + 34);
    if (!v8)
    {
      v7 = 0;
      break;
    }
    TLine::CachePositions(v8);
  }
  v9 = *((_QWORD *)this + 26);
  if (v9 > 0)
  {
    v10 = 0;
    v11 = v5 + 2 * v6;
    do
    {
      v23 = (id)0xAAAAAAAAAAAAAAAALL;
      TFont::CreatePathForGlyph(v4, 0, *(unsigned __int16 *)(v11 + v10), (unint64_t *)&v23);
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      *(_OWORD *)&m.c = v12;
      *(_OWORD *)&m.tx = v12;
      *(_OWORD *)&m.a = v12;
      CGAffineTransformMakeTranslation(&m, *(CGFloat *)(v7 + 8 * v10), *(CGFloat *)(v7 + 8 * v10 + 8));
      v13 = *((_QWORD *)this + 39);
      v14 = 1.0;
      if (v13)
      {
        v15 = *(_QWORD *)(v13 + 56);
        v16 = 1.0;
        if (v15 != *(_QWORD *)(v13 + 64))
        {
          v17 = (double *)(v15 + 8 * v10);
          v16 = *v17;
          v14 = v17[1];
        }
      }
      else
      {
        v16 = 1.0;
      }
      m.a = v16 * m.a;
      m.d = v14 * m.d;
      v18 = (CGPath *)atomic_load((unint64_t *)&Mutable);
      v19 = (const CGPath *)atomic_load((unint64_t *)&v23);
      CGPathAddPath(v18, &m, v19);

      v10 += 2;
      --v9;
    }
    while (v9);
  }
  do
    v20 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a2 = v20;

}

uint64_t TRun::GetTrailingBaseChar(TRun *this)
{
  uint64_t PrevGlyphIndex;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t GlyphIndexForChar;

  PrevGlyphIndex = *((_QWORD *)this + 1) + *((_QWORD *)this + 2) - 1;
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, PrevGlyphIndex);
  v3 = *((_QWORD *)this + 1);
  while (v3 <= PrevGlyphIndex)
  {
    v4 = GlyphIndexForChar;
    v5 = (_QWORD *)*((_QWORD *)this + 27);
    v6 = *((_QWORD *)this + 25);
    if (*(__int16 *)(v5[2] + 2 * v6 + 2 * GlyphIndexForChar) != -1
      && (*(_DWORD *)(v5[5] + 4 * v6 + 4 * GlyphIndexForChar) & 0x20) == 0
      && (*(_DWORD *)(v5[5] + 4 * v6 + 4 * GlyphIndexForChar) & 0x2040) != 0x40
      && (*(_DWORD *)(v5[5] + 4 * v6 + 4 * GlyphIndexForChar) & 0x300) == 0)
    {
      break;
    }
    if (*((int *)this + 64) > 1 || (*((_BYTE *)this + 224) & 1) != 0)
    {
      PrevGlyphIndex = TRun::FindPrevGlyphIndex(this, PrevGlyphIndex, &GlyphIndexForChar);
      v3 = *((_QWORD *)this + 1);
    }
    else
    {
      --GlyphIndexForChar;
      if (v4 <= 0)
        return v3 - 1;
      PrevGlyphIndex = *(_QWORD *)(v5[6] + 8 * v6 + 8 * (v4 - 1));
    }
  }
  return PrevGlyphIndex;
}

uint64_t TRun::GetLeadingUncombinedCharCount(TRun *this)
{
  uint64_t NextChar;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t GlyphIndexForChar;

  NextChar = *((_QWORD *)this + 1);
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, NextChar);
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2) + v3;
  if (NextChar < v4)
  {
    do
    {
      v5 = *((_QWORD *)this + 27);
      v6 = *((_QWORD *)this + 25);
      if (*(__int16 *)(*(_QWORD *)(v5 + 16) + 2 * v6 + 2 * GlyphIndexForChar) != -1
        && (*(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v6 + 4 * GlyphIndexForChar) & 0x20) == 0
        && (*(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v6 + 4 * GlyphIndexForChar) & 0x2040) != 0x40
        && (*(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v6 + 4 * GlyphIndexForChar) & 0x300) == 0)
      {
        break;
      }
      NextChar = TRun::GetNextChar(this, NextChar, &GlyphIndexForChar);
    }
    while (NextChar < v4);
    v3 = *((_QWORD *)this + 1);
  }
  return NextChar - v3;
}

uint64_t TRun::AppendMappedCharsInRange(uint64_t a1, uint64_t NextChar, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t GlyphIndexForChar;
  _QWORD v31[5];

  std::vector<long,TInlineBufferAllocator<long,30ul>>::reserve((char **)a4, a3 + ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  v8 = NextChar + a3;
  GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>(a1, NextChar);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48) + 8 * *(_QWORD *)(a1 + 200);
  if (NextChar != *(_QWORD *)(v9 + 8 * GlyphIndexForChar))
    NextChar = TRun::GetNextChar((TRun *)a1, NextChar, &GlyphIndexForChar);
  while (NextChar < v8)
  {
    v10 = GlyphIndexForChar;
    v11 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 200);
    if (*(__int16 *)(*(_QWORD *)(v11 + 16) + 2 * v12 + 2 * GlyphIndexForChar) != -1
      && (*(_DWORD *)(*(_QWORD *)(v11 + 40) + 4 * v12 + 4 * GlyphIndexForChar) & 0x20) == 0)
    {
      v14 = *(char **)a4;
      v13 = *(char **)(a4 + 8);
      if (*(char **)a4 == v13 || *(_QWORD *)(v9 + 8 * GlyphIndexForChar) != *((_QWORD *)v13 - 1))
      {
        v15 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v13 >= v15)
        {
          v17 = (v13 - v14) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            abort();
          v19 = v15 - (_QWORD)v14;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
          v31[4] = a4 + 24;
          if (v20)
          {
            v21 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(a4 + 24, v20);
            v14 = *(char **)a4;
            v13 = *(char **)(a4 + 8);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = *(_QWORD *)(v9 + 8 * v10);
          if (v13 == v14)
          {
            v24 = &v21[8 * v17];
          }
          else
          {
            v23 = v13;
            v24 = &v21[8 * v17];
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v24 - 1) = v25;
              v24 -= 8;
            }
            while (v23 != v14);
          }
          v16 = v22 + 8;
          *(_QWORD *)a4 = v24;
          *(_QWORD *)(a4 + 8) = v22 + 8;
          v26 = *(_QWORD *)(a4 + 16);
          *(_QWORD *)(a4 + 16) = &v21[8 * v20];
          v31[2] = v13;
          v31[3] = v26;
          v31[0] = v14;
          v31[1] = v14;
          std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v31);
        }
        else
        {
          *(_QWORD *)v13 = *(_QWORD *)(v9 + 8 * GlyphIndexForChar);
          v16 = v13 + 8;
        }
        *(_QWORD *)(a4 + 8) = v16;
        if ((unint64_t)v16 - *(_QWORD *)a4 > 0xF0)
          return 0;
      }
    }
    if (*(int *)(a1 + 256) > 1)
    {
      NextChar = TRun::FindNextGlyphIndex((TRun *)a1, NextChar, &GlyphIndexForChar);
    }
    else
    {
      v27 = GlyphIndexForChar;
      if ((*(_BYTE *)(a1 + 224) & 1) != 0)
      {
        v28 = --GlyphIndexForChar;
        if (v27 > 0)
        {
LABEL_32:
          NextChar = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 48) + 8 * *(_QWORD *)(a1 + 200) + 8 * v28);
          continue;
        }
      }
      else
      {
        v28 = GlyphIndexForChar + 1;
        GlyphIndexForChar = v28;
        if (v28 < *(_QWORD *)(a1 + 208))
          goto LABEL_32;
      }
      NextChar = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
    }
  }
  return 1;
}

uint64_t TRun::DeleteChars(TRun *this, int64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void **v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void **v52;
  unint64_t v54;
  void *v55;
  BOOL v56;
  void **p_GlyphIndexForChar;
  void **v60;
  void **v61;
  char *v62;
  _OWORD *v63;
  uint64_t GlyphIndexForChar;
  void **v65;
  char *v66;
  _OWORD v67[15];
  _OWORD *v68;
  uint64_t v69;

  v6 = a2;
  v69 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 64))
  {
    if (a2 < 1)
    {
      return 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = *a3++;
        GlyphIndexForChar = 0xAAAAAAAAAAAAAAAALL;
        GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)this, v9);
        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48)
                       + 8 * *((_QWORD *)this + 25)
                       + 8 * GlyphIndexForChar) == v9)
          v8 += TRun::DeleteGlyphs(this, 1, (char *)&GlyphIndexForChar, a4);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v67[14] = v10;
    v67[13] = v10;
    v67[12] = v10;
    v67[11] = v10;
    v67[10] = v10;
    v67[9] = v10;
    v67[8] = v10;
    v67[7] = v10;
    v67[6] = v10;
    v67[5] = v10;
    v67[4] = v10;
    v67[3] = v10;
    v67[2] = v10;
    v67[1] = v10;
    v67[0] = v10;
    v65 = 0;
    v66 = 0;
    GlyphIndexForChar = 0;
    v68 = v67;
    std::vector<long,TInlineBufferAllocator<long,30ul>>::reserve((char **)&GlyphIndexForChar, a2);
    v11 = *((_QWORD *)this + 26);
    v12 = *(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25);
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
      if (v6 >= 1)
      {
        v33 = 0;
        v34 = v11 - 1;
        do
        {
          v35 = a3[v33];
          do
          {
            v36 = v34;
            v37 = *(_QWORD *)(v12 + 8 * v34--);
          }
          while ((v36 & 0x8000000000000000) == 0 && v37 < v35);
          v38 = v34 + 1;
          if (v37 == v35)
          {
            if ((v38 & 0x8000000000000000) != 0)
              break;
            v39 = v65;
            if (v65 >= (void **)v66)
            {
              v41 = (void **)GlyphIndexForChar;
              v42 = ((uint64_t)v65 - GlyphIndexForChar) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
LABEL_80:
                abort();
              v44 = (uint64_t)&v66[-GlyphIndexForChar];
              if ((uint64_t)&v66[-GlyphIndexForChar] >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              v63 = v67;
              if (v45)
              {
                v46 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v67, v45);
                v41 = (void **)GlyphIndexForChar;
                v39 = v65;
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = v38;
              if (v39 == v41)
              {
                v49 = (uint64_t)&v46[8 * v42];
              }
              else
              {
                v48 = v39;
                v49 = (uint64_t)&v46[8 * v42];
                do
                {
                  v50 = (uint64_t)*--v48;
                  *(_QWORD *)(v49 - 8) = v50;
                  v49 -= 8;
                }
                while (v48 != v41);
              }
              v40 = (void **)(v47 + 8);
              GlyphIndexForChar = v49;
              v65 = (void **)(v47 + 8);
              v51 = v66;
              v66 = &v46[8 * v45];
              v61 = v39;
              v62 = v51;
              p_GlyphIndexForChar = v41;
              v60 = v41;
              std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&p_GlyphIndexForChar);
            }
            else
            {
              *v65 = (void *)v38;
              v40 = v39 + 1;
            }
            v65 = v40;
          }
          else
          {
            ++v34;
          }
          ++v33;
        }
        while (v33 != v6);
      }
      v52 = v65 - 1;
      if ((void **)GlyphIndexForChar != v65 && (unint64_t)v52 > GlyphIndexForChar)
      {
        v54 = GlyphIndexForChar + 8;
        do
        {
          v55 = *(void **)(v54 - 8);
          *(_QWORD *)(v54 - 8) = *v52;
          *v52-- = v55;
          v56 = v54 >= (unint64_t)v52;
          v54 += 8;
        }
        while (!v56);
      }
    }
    else if (v6 >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = a3[v13];
        do
        {
          v16 = v14;
          v17 = *(_QWORD *)(v12 + 8 * v14++);
        }
        while (v17 < v15 && v16 < v11);
        v19 = (void *)(v14 - 1);
        if (v17 == v15)
        {
          if (v16 >= v11)
            break;
          v20 = v65;
          if (v65 >= (void **)v66)
          {
            v22 = (void **)GlyphIndexForChar;
            v23 = ((uint64_t)v65 - GlyphIndexForChar) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              goto LABEL_80;
            v25 = (uint64_t)&v66[-GlyphIndexForChar];
            if ((uint64_t)&v66[-GlyphIndexForChar] >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            v63 = v67;
            if (v26)
            {
              v27 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v67, v26);
              v22 = (void **)GlyphIndexForChar;
              v20 = v65;
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(_QWORD *)v28 = v19;
            if (v20 == v22)
            {
              v30 = (uint64_t)&v27[8 * v23];
            }
            else
            {
              v29 = v20;
              v30 = (uint64_t)&v27[8 * v23];
              do
              {
                v31 = (uint64_t)*--v29;
                *(_QWORD *)(v30 - 8) = v31;
                v30 -= 8;
              }
              while (v29 != v22);
            }
            v21 = (void **)(v28 + 8);
            GlyphIndexForChar = v30;
            v65 = (void **)(v28 + 8);
            v32 = v66;
            v66 = &v27[8 * v26];
            v61 = v20;
            v62 = v32;
            p_GlyphIndexForChar = v22;
            v60 = v22;
            std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)&p_GlyphIndexForChar);
          }
          else
          {
            *v65 = v19;
            v21 = v20 + 1;
          }
          v65 = v21;
        }
        else
        {
          --v14;
        }
        ++v13;
      }
      while (v13 != v6);
    }
    if ((void **)GlyphIndexForChar == v65)
      v8 = 0;
    else
      v8 = TRun::DeleteGlyphs(this, ((uint64_t)v65 - GlyphIndexForChar) >> 3, (char *)GlyphIndexForChar, a4);
    p_GlyphIndexForChar = (void **)&GlyphIndexForChar;
    std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&p_GlyphIndexForChar);
  }
  return v8;
}

uint64_t TRun::SetAttachmentsRightToLeft<true>(TRun *this, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NextGlyphIndex;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[3];
  _OWORD v34[15];
  _OWORD *v35;
  uint64_t v36;

  v8 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[14] = v10;
  v34[13] = v10;
  v34[12] = v10;
  v34[11] = v10;
  v34[10] = v10;
  v34[9] = v10;
  v34[8] = v10;
  v34[7] = v10;
  v34[6] = v10;
  v34[5] = v10;
  v34[4] = v10;
  v34[3] = v10;
  v34[2] = v10;
  v34[1] = v10;
  v34[0] = v10;
  memset(v33, 0, sizeof(v33));
  v35 = v34;
  if (a2 >= 2)
  {
    v8 = a2 - 1;
    v11 = a3;
    v12 = a2 - 1;
    do
    {
      v13 = *v11++;
      v14 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v13);
      v15 = v13 + 1;
      if (v13 + 1 < *((_QWORD *)this + 26))
        objc_msgSend(*((id *)this + 27), "setAttachmentCount:atIndex:", v14 + objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v15) + 1, *((_QWORD *)this + 25) + v15);
      --v12;
    }
    while (v12);
  }
  v16 = a3[v8];
  v17 = *(_QWORD *)(v9 + 8 * v16);
  v18 = *((_QWORD *)this + 1);
  if (v17 <= a4)
  {
    v23 = *((_QWORD *)this + 2) + v18;
    v32 = v16;
    v24 = v16;
    while (1)
    {
      if (*((int *)this + 64) > 1)
      {
        NextGlyphIndex = TRun::FindNextGlyphIndex(this, v17, &v32);
      }
      else
      {
        if ((*((_BYTE *)this + 224) & 1) != 0)
        {
          v25 = v24 - 1;
          v32 = v24 - 1;
          if (v24 <= 0)
          {
LABEL_13:
            NextGlyphIndex = *((_QWORD *)this + 2) + *((_QWORD *)this + 1);
            goto LABEL_17;
          }
        }
        else
        {
          v25 = v24 + 1;
          v32 = v24 + 1;
          if (v24 + 1 >= *((_QWORD *)this + 26))
            goto LABEL_13;
        }
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 48) + 8 * *((_QWORD *)this + 25) + 8 * v25);
      }
LABEL_17:
      if (NextGlyphIndex >= v23)
      {
        v30 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v16) + 1;
        goto LABEL_25;
      }
      v24 = v32;
      v27 = (_QWORD *)*((_QWORD *)this + 27);
      v28 = *((_QWORD *)this + 25);
      if (a2 < 2
        || *(__int16 *)(v27[2] + 2 * v28 + 2 * v32) != -1 && (*(_DWORD *)(v27[5] + 4 * v28 + 4 * v32) & 0x20) == 0)
      {
        objc_msgSend(v27, "setStringIndex:atIndex:", v17, v28 + v32);
        v29 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v16);
        v20 = v29 + objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v24) + 1;
        v21 = (void *)*((_QWORD *)this + 27);
        v22 = *((_QWORD *)this + 25) + v24;
        goto LABEL_22;
      }
    }
  }
  v19 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v16);
  if (v17 <= v18)
  {
    v30 = v19 + 1;
  }
  else
  {
    v20 = v19 + objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + v16 + 1) + 1;
    v21 = (void *)*((_QWORD *)this + 27);
    v22 = *((_QWORD *)this + 25) + v16 + 1;
LABEL_22:
    objc_msgSend(v21, "setAttachmentCount:atIndex:", v20, v22);
    v30 = 0;
  }
LABEL_25:
  v32 = (uint64_t)v33;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
  return v30;
}

uint64_t TRun::SetAttachmentsLeftToRight<false>(uint64_t a1, uint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t NextGlyphIndex;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  _OWORD v63[15];
  _OWORD *v64;
  uint64_t v65;

  v5 = a2;
  v65 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48);
  v8 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63[14] = v9;
  v63[13] = v9;
  v63[12] = v9;
  v63[11] = v9;
  v63[10] = v9;
  v63[9] = v9;
  v63[8] = v9;
  v63[7] = v9;
  v63[6] = v9;
  v63[5] = v9;
  v63[4] = v9;
  v63[3] = v9;
  v63[2] = v9;
  v63[1] = v9;
  v63[0] = v9;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v64 = v63;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__insert_with_size[abi:nn180100]<long const*,long const*>((uint64_t *)&v60, __src, &__src[8 * a2], a2);
  v10 = 126 - 2 * __clz(v61 - v60);
  v11 = v7 + 8 * v8;
  v58[0] = v11;
  if (v61 == v60)
    v12 = 0;
  else
    v12 = v10;
  std::__introsort<std::_ClassicAlgPolicy,LessByStringIndex &,long *,false>(v60, v61, v58, v12, 1);
  v13 = v60;
  v14 = v5 - 1;
  if (v5 >= 2)
  {
    v56 = a4;
    v57 = v5;
    v15 = 0;
    v16 = &v60[v5];
    v17 = v16 - 2;
    while (1)
    {
      v18 = v5;
      v5 = v14;
      v19 = v13;
      v20 = v13[v14];
      v59 = v20;
      v21 = *(_QWORD *)(v11 + 8 * v20);
      v22 = *(_QWORD **)(a1 + 216);
      v23 = *(_QWORD *)(a1 + 200);
      if ((*(_DWORD *)(v22[5] + 4 * v23 + 4 * v20) & 0x380) == 0)
        goto LABEL_24;
      memset(v58, 170, sizeof(v58));
      TRun::FindInsertionGroup((TRun *)v58, a1, v20);
      if (v58[1] - v58[0] < 9)
        break;
      v24 = 0;
      do
      {
        if (*(_QWORD *)(v11 + 8 * v17[v24]) != v21)
          break;
        --v24;
      }
      while (v5 + v24 > 0);
      v25 = ((unint64_t)(v58[1] - v58[0]) >> 3) + v24;
      if (v18 < v57)
      {
        v26 = v25 + v15;
        v27 = v15;
        while (*(_QWORD *)(v11 + 8 * v16[v27]) == v21)
        {
          --v25;
          if (__CFADD__(v27++, 1))
          {
            v25 = v26;
            break;
          }
        }
      }
      if (v25 <= 1)
        break;
      if (v58[0])
      {
        v58[1] = v58[0];
        operator delete((void *)v58[0]);
      }
      v13 = v19;
LABEL_30:
      --v15;
      --v17;
      v14 = v5 - 1;
      if (v5 <= 1)
      {
        v14 = 0;
        a4 = v56;
        v5 = v57;
        v31 = 1;
        goto LABEL_33;
      }
    }
    if (v58[0])
    {
      v58[1] = v58[0];
      operator delete((void *)v58[0]);
    }
    v22 = *(_QWORD **)(a1 + 216);
    v23 = *(_QWORD *)(a1 + 200);
LABEL_24:
    v29 = objc_msgSend(v22, "attachmentCountAtIndex:", v23 + v20, v56);
    if (*(int *)(a1 + 256) > 1 || (*(_BYTE *)(a1 + 224) & 1) != 0)
    {
      TRun::FindPrevGlyphIndex((TRun *)a1, v21, &v59);
      v30 = v59;
    }
    else
    {
      v30 = v20 - 1;
    }
    v13 = v19;
    if ((v30 & 0x8000000000000000) == 0)
      objc_msgSend(*(id *)(a1 + 216), "setAttachmentCount:atIndex:", v29 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v30) + 1, *(_QWORD *)(a1 + 200) + v30);
    goto LABEL_30;
  }
  v31 = v5;
LABEL_33:
  v32 = v13[v14];
  v59 = v32;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 40) + 4 * *(_QWORD *)(a1 + 200) + 4 * v32) & 0x380) == 0)
  {
    v33 = 0;
    goto LABEL_46;
  }
  memset(v58, 170, sizeof(v58));
  TRun::FindInsertionGroup((TRun *)v58, a1, v32);
  v33 = (v58[1] - v58[0]) >> 3;
  if (v58[1] - v58[0] < 9)
    goto LABEL_41;
  if (v31 < v5)
  {
    v34 = v31 - v5 + v33;
    v35 = v5 - v31;
    v36 = &v13[v31];
    while (1)
    {
      v37 = *v36++;
      if (*(_QWORD *)(v11 + 8 * v37) != *(_QWORD *)(v11 + 8 * v32))
        break;
      --v33;
      if (!--v35)
      {
        v33 = v34;
        break;
      }
    }
  }
  if (v33 <= 1)
  {
LABEL_41:
    v38 = 1;
    if (!v58[0])
      goto LABEL_43;
    goto LABEL_42;
  }
  v38 = 0;
  if (v58[0])
  {
LABEL_42:
    v58[1] = v58[0];
    operator delete((void *)v58[0]);
  }
LABEL_43:
  if (!v38)
  {
LABEL_71:
    v54 = 0;
    goto LABEL_72;
  }
LABEL_46:
  v39 = *(_QWORD *)(v11 + 8 * v32);
  v40 = *(_QWORD *)(a1 + 8);
  if (v39 <= a4)
  {
    v44 = *(_QWORD *)(a1 + 16) + v40;
    v58[0] = v32;
    v45 = v32;
    while (1)
    {
      if (*(int *)(a1 + 256) > 1)
      {
        NextGlyphIndex = TRun::FindNextGlyphIndex((TRun *)a1, v39, v58);
      }
      else
      {
        if ((*(_BYTE *)(a1 + 224) & 1) != 0)
        {
          v46 = v45 - 1;
          v58[0] = v45 - 1;
          if (v45 <= 0)
          {
LABEL_55:
            NextGlyphIndex = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
            goto LABEL_59;
          }
        }
        else
        {
          v46 = v45 + 1;
          v58[0] = v45 + 1;
          if (v45 + 1 >= *(_QWORD *)(a1 + 208))
            goto LABEL_55;
        }
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 48) + 8 * *(_QWORD *)(a1 + 200) + 8 * v46);
      }
LABEL_59:
      if (NextGlyphIndex >= v44)
      {
        v54 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v32) + 1;
        goto LABEL_72;
      }
      v45 = v58[0];
      v48 = *(_QWORD **)(a1 + 216);
      v49 = *(_QWORD *)(a1 + 200);
      if (v5 < 2
        || *(__int16 *)(v48[2] + 2 * v49 + 2 * v58[0]) != -1 && (*(_DWORD *)(v48[5] + 4 * v49 + 4 * v58[0]) & 0x20) == 0)
      {
        objc_msgSend(v48, "setStringIndex:atIndex:", v39, v49 + v58[0], v56);
        v50 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v32);
        v51 = v50 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v45) + 1;
        v52 = *(void **)(a1 + 216);
        v53 = *(_QWORD *)(a1 + 200) + v45;
        goto LABEL_70;
      }
    }
  }
  v41 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v32);
  v42 = v41;
  if (v39 > v40)
  {
    if (*(int *)(a1 + 256) > 1 || (*(_BYTE *)(a1 + 224) & 1) != 0)
    {
      TRun::FindPrevGlyphIndex((TRun *)a1, v39, &v59);
      v43 = v59;
    }
    else
    {
      v43 = v32 - 1;
    }
    v51 = v42 - v33 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v43, v56) + 1;
    v52 = *(void **)(a1 + 216);
    v53 = *(_QWORD *)(a1 + 200) + v43;
LABEL_70:
    objc_msgSend(v52, "setAttachmentCount:atIndex:", v51, v53);
    goto LABEL_71;
  }
  v54 = v41 + 1;
LABEL_72:
  v58[0] = (uint64_t)&v60;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v58);
  return v54;
}

uint64_t TRun::SetAttachmentsRightToLeft<false>(uint64_t a1, uint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t NextGlyphIndex;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  _OWORD v69[15];
  _OWORD *v70;
  uint64_t v71;

  v5 = a2;
  v71 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48);
  v8 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69[14] = v9;
  v69[13] = v9;
  v69[12] = v9;
  v69[11] = v9;
  v69[10] = v9;
  v69[9] = v9;
  v69[8] = v9;
  v69[7] = v9;
  v69[6] = v9;
  v69[5] = v9;
  v69[4] = v9;
  v69[3] = v9;
  v69[2] = v9;
  v69[1] = v9;
  v69[0] = v9;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v70 = v69;
  std::vector<long,TInlineBufferAllocator<long,30ul>>::__insert_with_size[abi:nn180100]<long const*,long const*>((uint64_t *)&v66, __src, &__src[8 * a2], a2);
  v10 = 126 - 2 * __clz(v67 - v66);
  v11 = v7 + 8 * v8;
  v64[0] = v11;
  if (v67 == v66)
    v12 = 0;
  else
    v12 = v10;
  std::__introsort<std::_ClassicAlgPolicy,LessByStringIndex &,long *,false>(v66, v67, v64, v12, 1);
  v13 = 0;
  v14 = v66;
  if (v5 >= 2)
  {
    v60 = a4;
    v61 = v5;
    v15 = 0;
    v16 = 0;
    v17 = v5 - 1;
    v62 = v5 - 1;
    v63 = v66;
    v18 = v66 - 1;
    v19 = v66 + 1;
    while (1)
    {
      v20 = v14[v16];
      v65 = v20;
      v21 = *(_QWORD *)(v11 + 8 * v20);
      v22 = *(_QWORD **)(a1 + 216);
      v23 = *(_QWORD *)(a1 + 200);
      if ((*(_DWORD *)(v22[5] + 4 * v23 + 4 * v20) & 0x380) == 0)
        goto LABEL_26;
      memset(v64, 170, sizeof(v64));
      TRun::FindInsertionGroup((TRun *)v64, a1, v20);
      v24 = v64[1] - v64[0];
      if (v64[1] - v64[0] < 9)
        break;
      v25 = v24 >> 3;
      if (v16)
      {
        v26 = 0;
        v27 = v25 + v15;
        while (*(_QWORD *)(v11 + 8 * v18[v26]) == v21)
        {
          --v26;
          if (v16 + v26 + 1 <= 1)
            goto LABEL_15;
        }
        v27 = v25 + v26;
      }
      else
      {
        v27 = v24 >> 3;
      }
LABEL_15:
      if (v16 + 1 < v61)
      {
        v28 = v19;
        v29 = v17;
        do
        {
          v30 = *v28++;
          if (*(_QWORD *)(v11 + 8 * v30) != v21)
            break;
          --v27;
          --v29;
        }
        while (v29);
      }
      if (v27 <= 1)
        break;
      if (v64[0])
      {
        v64[1] = v64[0];
        operator delete((void *)v64[0]);
      }
      v14 = v63;
LABEL_32:
      ++v16;
      --v15;
      ++v18;
      --v17;
      ++v19;
      v13 = v62;
      if (v16 == v62)
      {
        a4 = v60;
        v5 = v61;
        goto LABEL_34;
      }
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete((void *)v64[0]);
    }
    v22 = *(_QWORD **)(a1 + 216);
    v23 = *(_QWORD *)(a1 + 200);
LABEL_26:
    v31 = objc_msgSend(v22, "attachmentCountAtIndex:", v23 + v20, v60);
    if (*(int *)(a1 + 256) > 1 || (*(_BYTE *)(a1 + 224) & 1) != 0)
    {
      TRun::FindPrevGlyphIndex((TRun *)a1, v21, &v65);
      v32 = v65;
    }
    else
    {
      v32 = v20 - 1;
    }
    v14 = v63;
    if (v32 < *(_QWORD *)(a1 + 208))
      objc_msgSend(*(id *)(a1 + 216), "setAttachmentCount:atIndex:", v31 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v32) + 1, *(_QWORD *)(a1 + 200) + v32);
    goto LABEL_32;
  }
LABEL_34:
  v33 = v14[v13];
  v65 = v33;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 40) + 4 * *(_QWORD *)(a1 + 200) + 4 * v33) & 0x380) == 0)
  {
    v34 = 0;
    goto LABEL_54;
  }
  memset(v64, 170, sizeof(v64));
  TRun::FindInsertionGroup((TRun *)v64, a1, v33);
  v34 = (v64[1] - v64[0]) >> 3;
  if (v64[1] - v64[0] < 9)
    goto LABEL_49;
  v35 = *(_QWORD *)(v11 + 8 * v33);
  if (v13 >= 1)
  {
    v36 = v34 - v13;
    if (v5 <= 1)
      v37 = 1;
    else
      v37 = v5;
    while (*(_QWORD *)(v11 + 8 * v14[v37 - 2]) == v35)
    {
      --v34;
      if ((unint64_t)--v37 <= 1)
      {
        v34 = v36;
        break;
      }
    }
  }
  v38 = v5 - (v13 + 1);
  if (v5 > v13 + 1)
  {
    v39 = v13 - v5 + v34 + 1;
    v40 = &v14[v13 + 1];
    while (1)
    {
      v41 = *v40++;
      if (*(_QWORD *)(v11 + 8 * v41) != v35)
        break;
      --v34;
      if (!--v38)
      {
        v34 = v39;
        break;
      }
    }
  }
  if (v34 <= 1)
  {
LABEL_49:
    v42 = 1;
    if (!v64[0])
      goto LABEL_51;
    goto LABEL_50;
  }
  v42 = 0;
  if (v64[0])
  {
LABEL_50:
    v64[1] = v64[0];
    operator delete((void *)v64[0]);
  }
LABEL_51:
  if (!v42)
  {
LABEL_79:
    v58 = 0;
    goto LABEL_80;
  }
LABEL_54:
  v43 = *(_QWORD *)(v11 + 8 * v33);
  v44 = *(_QWORD *)(a1 + 8);
  if (v43 <= a4)
  {
    v48 = *(_QWORD *)(a1 + 16) + v44;
    v64[0] = v33;
    v49 = v33;
    while (1)
    {
      if (*(int *)(a1 + 256) > 1)
      {
        NextGlyphIndex = TRun::FindNextGlyphIndex((TRun *)a1, v43, v64);
      }
      else
      {
        if ((*(_BYTE *)(a1 + 224) & 1) != 0)
        {
          v50 = v49 - 1;
          v64[0] = v49 - 1;
          if (v49 <= 0)
          {
LABEL_63:
            NextGlyphIndex = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
            goto LABEL_67;
          }
        }
        else
        {
          v50 = v49 + 1;
          v64[0] = v49 + 1;
          if (v49 + 1 >= *(_QWORD *)(a1 + 208))
            goto LABEL_63;
        }
        NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 48) + 8 * *(_QWORD *)(a1 + 200) + 8 * v50);
      }
LABEL_67:
      if (NextGlyphIndex >= v48)
      {
        v58 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v33) + 1;
        goto LABEL_80;
      }
      v49 = v64[0];
      v52 = *(_QWORD **)(a1 + 216);
      v53 = *(_QWORD *)(a1 + 200);
      if (v5 < 2
        || *(__int16 *)(v52[2] + 2 * v53 + 2 * v64[0]) != -1 && (*(_DWORD *)(v52[5] + 4 * v53 + 4 * v64[0]) & 0x20) == 0)
      {
        objc_msgSend(v52, "setStringIndex:atIndex:", v43, v53 + v64[0], v60);
        v54 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v33);
        v55 = v54 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v49) + 1;
        v56 = *(void **)(a1 + 216);
        v57 = *(_QWORD *)(a1 + 200) + v49;
        goto LABEL_78;
      }
    }
  }
  v45 = objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v33);
  v46 = v45;
  if (v43 > v44)
  {
    if (*(int *)(a1 + 256) > 1 || (*(_BYTE *)(a1 + 224) & 1) != 0)
    {
      TRun::FindPrevGlyphIndex((TRun *)a1, v43, &v65);
      v47 = v65;
    }
    else
    {
      v47 = v33 - 1;
    }
    v55 = v46 - v34 + objc_msgSend(*(id *)(a1 + 216), "attachmentCountAtIndex:", *(_QWORD *)(a1 + 200) + v47, v60) + 1;
    v56 = *(void **)(a1 + 216);
    v57 = *(_QWORD *)(a1 + 200) + v47;
LABEL_78:
    objc_msgSend(v56, "setAttachmentCount:atIndex:", v55, v57);
    goto LABEL_79;
  }
  v58 = v45 + 1;
LABEL_80:
  v64[0] = (uint64_t)&v66;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v64);
  return v58;
}

uint64_t TRun::AbsorbFollowingRun(TRun *this, TRun *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  if (v3 + v2 != *((_QWORD *)a2 + 25))
    return 0;
  v4 = *((_QWORD *)a2 + 26);
  if (v4 < 0)
    return 0;
  v5 = v3 + v4;
  if (v5 + v2 > *(_QWORD *)(*((_QWORD *)this + 27) + 8))
    return 0;
  *((_QWORD *)this + 26) = v5;
  if ((*((_BYTE *)a2 + 225) & 1) != 0)
    *((_BYTE *)this + 225) |= 1u;
  *((double *)this + 24) = *((double *)this + 24) + *((double *)a2 + 24);
  return 1;
}

uint64_t TRun::FindNextGlyphIndex(TRun *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Glyph;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = (_QWORD *)*((_QWORD *)this + 27);
  v7 = *((_QWORD *)this + 25);
  v8 = v6[6] + 8 * v7;
  v9 = *((_QWORD *)this + 1);
  v10 = *((_QWORD *)this + 2);
  v11 = v6[5] + 4 * v7;
  if ((*(_DWORD *)(v11 + 4 * *a3) & 0x380) == 0)
  {
LABEL_14:
    v16 = v10 + v9;
    v17 = v4 - 1;
    while (1)
    {
      v18 = v17 + 2;
      if (v17 + 2 >= v16)
        break;
      Glyph = TRun::FindGlyphIndex<false>((uint64_t)this, v18, 1);
      if (*(_QWORD *)(v8 + 8 * Glyph) > ++v17)
        goto LABEL_17;
    }
    if ((*((_BYTE *)this + 224) & 1) != 0)
      v19 = -1;
    else
      v19 = *((_QWORD *)this + 26);
    *a3 = v19;
    return v18;
  }
  v12 = 1;
  if ((*((_BYTE *)this + 224) & 1) != 0)
    v12 = -1;
  Glyph = v12 + *a3;
  if ((*((_BYTE *)this + 224) & 1) != 0)
    v14 = -1;
  else
    v14 = *((_QWORD *)this + 26);
  if (Glyph == v14)
  {
LABEL_13:
    v4 = objc_msgSend(*((id *)this + 27), "attachmentCountAtIndex:", *((_QWORD *)this + 25) + TRun::FindGlyphIndex<false>((uint64_t)this, a2, 1))+ a2;
    goto LABEL_14;
  }
  v15 = v6[2] + 2 * v7;
  while (*(__int16 *)(v15 + 2 * Glyph) == -1
       || (*(_DWORD *)(v11 + 4 * Glyph) & 0x20) != 0
       || *(_QWORD *)(v8 + 8 * Glyph) != a2)
  {
    Glyph += v12;
    if (v14 == Glyph)
      goto LABEL_13;
  }
LABEL_17:
  *a3 = Glyph;
  return *(_QWORD *)(v8 + 8 * Glyph);
}

uint64_t *TRun::FindInsertionGroup(TRun *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t PrevGlyphIndex;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t NextGlyphIndex;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *result;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v6 = (uint64_t *)operator new(8uLL);
  *(_QWORD *)this = v6;
  *v6++ = a3;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 1) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 216) + 48) + 8 * *(_QWORD *)(a2 + 200);
  v8 = *(_QWORD *)(v7 + 8 * a3);
  v46 = a3;
  if (*(int *)(a2 + 256) > 1 || (*(_BYTE *)(a2 + 224) & 1) != 0)
  {
    PrevGlyphIndex = TRun::FindPrevGlyphIndex((TRun *)a2, v8, &v46);
  }
  else
  {
    v46 = a3 - 1;
    if (a3 <= 0)
      PrevGlyphIndex = *(_QWORD *)(a2 + 8) - 1;
    else
      PrevGlyphIndex = *(_QWORD *)(v7 + 8 * (a3 - 1));
  }
  if (PrevGlyphIndex == v8)
  {
    do
    {
      v11 = (uint64_t *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(uint64_t **)this;
        v14 = ((uint64_t)v11 - *(_QWORD *)this) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
LABEL_72:
          abort();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<long>>((uint64_t)this + 16, v17);
          v13 = *(uint64_t **)this;
          v11 = (uint64_t *)*((_QWORD *)this + 1);
        }
        else
        {
          v18 = 0;
        }
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v46;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)this = v19;
        *((_QWORD *)this + 1) = v12;
        *((_QWORD *)this + 2) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v46;
        v12 = v11 + 1;
      }
      *((_QWORD *)this + 1) = v12;
      if (*(int *)(a2 + 256) > 1 || (*(_BYTE *)(a2 + 224) & 1) != 0)
      {
        v23 = TRun::FindPrevGlyphIndex((TRun *)a2, v8, &v46);
      }
      else
      {
        v21 = v46;
        v22 = --v46;
        if (v21 <= 0)
          v23 = *(_QWORD *)(a2 + 8) - 1;
        else
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 216) + 48) + 8 * *(_QWORD *)(a2 + 200) + 8 * v22);
      }
    }
    while (v23 == v8);
  }
  v45 = a3;
  if (*(int *)(a2 + 256) > 1)
  {
    NextGlyphIndex = TRun::FindNextGlyphIndex((TRun *)a2, v8, &v45);
  }
  else
  {
    if ((*(_BYTE *)(a2 + 224) & 1) != 0)
    {
      v24 = a3 - 1;
      v45 = a3 - 1;
      if (a3 <= 0)
        goto LABEL_34;
    }
    else
    {
      v24 = a3 + 1;
      v45 = a3 + 1;
      if (a3 + 1 >= *(_QWORD *)(a2 + 208))
      {
LABEL_34:
        NextGlyphIndex = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8);
        goto LABEL_38;
      }
    }
    NextGlyphIndex = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 216) + 48) + 8 * *(_QWORD *)(a2 + 200) + 8 * v24);
  }
LABEL_38:
  if (NextGlyphIndex == v8)
  {
    do
    {
      v27 = (uint64_t *)*((_QWORD *)this + 1);
      v26 = *((_QWORD *)this + 2);
      if ((unint64_t)v27 >= v26)
      {
        v29 = *(uint64_t **)this;
        v30 = ((uint64_t)v27 - *(_QWORD *)this) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_72;
        v32 = v26 - (_QWORD)v29;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<long>>((uint64_t)this + 16, v33);
          v29 = *(uint64_t **)this;
          v27 = (uint64_t *)*((_QWORD *)this + 1);
        }
        else
        {
          v34 = 0;
        }
        v35 = (uint64_t *)&v34[8 * v30];
        *v35 = v45;
        v28 = v35 + 1;
        while (v27 != v29)
        {
          v36 = *--v27;
          *--v35 = v36;
        }
        *(_QWORD *)this = v35;
        *((_QWORD *)this + 1) = v28;
        *((_QWORD *)this + 2) = &v34[8 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v27 = v45;
        v28 = v27 + 1;
      }
      *((_QWORD *)this + 1) = v28;
      if (*(int *)(a2 + 256) > 1)
      {
        v39 = TRun::FindNextGlyphIndex((TRun *)a2, v8, &v45);
      }
      else
      {
        v37 = v45;
        if ((*(_BYTE *)(a2 + 224) & 1) != 0)
        {
          v38 = --v45;
          if (v37 > 0)
          {
LABEL_61:
            v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 216) + 48) + 8 * *(_QWORD *)(a2 + 200) + 8 * v38);
            continue;
          }
        }
        else
        {
          v38 = v45 + 1;
          v45 = v38;
          if (v38 < *(_QWORD *)(a2 + 208))
            goto LABEL_61;
        }
        v39 = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8);
      }
    }
    while (v39 == v8);
  }
  result = *(uint64_t **)this;
  v41 = (uint64_t *)*((_QWORD *)this + 1);
  v42 = (uint64_t)v41 - *(_QWORD *)this;
  if ((unint64_t)v42 >= 9)
  {
    if ((*(_BYTE *)(a2 + 224) & 1) != 0)
    {
      v43 = 126 - 2 * __clz(v42 >> 3);
      if (v41 == result)
        v44 = 0;
      else
        v44 = v43;
      return std::__introsort<std::_ClassicAlgPolicy,std::greater<long> &,long *,false>(result, v41, v44, 1);
    }
    else
    {
      v47 = -86;
      return (uint64_t *)std::__sort<std::__less<long,long> &,long *>();
    }
  }
  return result;
}

void TRun::InitStretchFactors(TRun *this)
{
  uint64_t v2;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(v2 + 32) = _Q1;
    *(_QWORD *)(v2 + 48) = 0xBFF0000000000000;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    v8 = *((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v2;
    if (v8)
    {
      std::default_delete<TRun::RareData>::operator()[abi:nn180100]((uint64_t)this + 312, v8);
      v2 = *((_QWORD *)this + 39);
    }
  }
  v9 = *((_QWORD *)this + 26);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = *(_QWORD *)(v2 + 64);
  v10 = v2 + 56;
  if (v9 > (v12 - v11) >> 4)
    std::vector<CGSize>::resize(v10, v9, &kUnitSize);
}

void std::vector<CGSize>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<CGSize>::__append((void **)a1, a2 - v3, a3);
  }
}

double TRun::UpdateWidth(TRun *this, TLine *a2, double a3)
{
  return 0.0;
}

uint64_t TRun::AcceptsOverhang(TRun *this)
{
  return 1;
}

void TRun::CopyEncapsulationPath(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TRun::CopyRubyAnnotationLineForPosition(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

char *std::vector<CGSize>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void std::vector<CGSize>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t *std::unique_ptr<TBaselineAttributes>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x186DC03ACLL);
  }
  return result;
}

void std::default_delete<TAttributes::RareData>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100](a2 + 80);
    JUMPOUT(0x186DC03ACLL);
  }
}

uint64_t std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

char *std::vector<CGSize,TInlineBufferAllocator<CGSize,64ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *result;
  char *v6;

  if (a2 >> 60)
    abort();
  v4 = (char *)(a1 + 131);
  result = (char *)a1[131];
  v6 = &result[16 * a2];
  if (v6 <= v4)
    *(_QWORD *)v4 = v6;
  else
    result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 63;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[63])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<long> &,long *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v115;
  uint64_t v116;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 > *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        v39 = v8[1];
        v40 = *(a2 - 1);
        if (v39 <= v40)
          v41 = *(a2 - 1);
        else
          v41 = v8[1];
        if (v39 >= v40)
          v39 = *(a2 - 1);
        *(a2 - 1) = v39;
        v8[1] = v41;
        v42 = *(a2 - 1);
        if (v42 <= *v8)
          v43 = *v8;
        else
          v43 = *(a2 - 1);
        if (v42 >= *v8)
          v42 = *v8;
        *(a2 - 1) = v42;
        v45 = *v8;
        v44 = v8[1];
        if (v43 <= v44)
          v45 = v8[1];
        if (v43 < v44)
          v44 = v43;
        *v8 = v45;
        v8[1] = v44;
        return result;
      case 4uLL:
        v47 = v8[1];
        v46 = v8[2];
        if (*v8 <= v46)
          v48 = v8[2];
        else
          v48 = *v8;
        if (*v8 < v46)
          v46 = *v8;
        v8[2] = v46;
        *v8 = v48;
        v49 = *(a2 - 1);
        if (v47 <= v49)
          v50 = *(a2 - 1);
        else
          v50 = v47;
        if (v47 < v49)
          v49 = v47;
        *(a2 - 1) = v49;
        v51 = *v8;
        if (*v8 <= v50)
          v52 = v50;
        else
          v52 = *v8;
        if (*v8 >= v50)
          v51 = v50;
        *v8 = v52;
        v8[1] = v51;
        v53 = v8[2];
        v54 = *(a2 - 1);
        if (v53 <= v54)
          v55 = *(a2 - 1);
        else
          v55 = v8[2];
        if (v53 >= v54)
          v53 = *(a2 - 1);
        *(a2 - 1) = v53;
        v56 = v8[1];
        if (v56 <= v55)
          v57 = v55;
        else
          v57 = v8[1];
        if (v56 >= v55)
          v56 = v55;
        v8[1] = v57;
        v8[2] = v56;
        return result;
      case 5uLL:
        v58 = *v8;
        v59 = v8[1];
        if (*v8 <= v59)
          v60 = v8[1];
        else
          v60 = *v8;
        if (*v8 >= v59)
          v58 = v8[1];
        *v8 = v60;
        v8[1] = v58;
        v61 = v8[3];
        v62 = *(a2 - 1);
        if (v61 <= v62)
          v63 = *(a2 - 1);
        else
          v63 = v8[3];
        if (v61 >= v62)
          v61 = *(a2 - 1);
        *(a2 - 1) = v61;
        v8[3] = v63;
        v64 = *(a2 - 1);
        v65 = v8[2];
        if (v64 <= v65)
          v66 = v8[2];
        else
          v66 = *(a2 - 1);
        if (v64 >= v65)
          v64 = v8[2];
        *(a2 - 1) = v64;
        v68 = v8[2];
        v67 = v8[3];
        v69 = v8[1];
        if (v66 <= v67)
          v68 = v8[3];
        if (v66 < v67)
          v67 = v66;
        v8[2] = v68;
        v8[3] = v67;
        v70 = *(a2 - 1);
        if (v69 <= v70)
          v71 = *(a2 - 1);
        else
          v71 = v69;
        if (v69 < v70)
          v70 = v69;
        *(a2 - 1) = v70;
        v72 = *v8;
        v74 = v8[2];
        v73 = v8[3];
        if (v73 <= *v8)
          v75 = *v8;
        else
          v75 = v8[3];
        if (v73 >= *v8)
          v73 = *v8;
        if (v75 <= v74)
          v72 = v8[2];
        if (v75 < v74)
          v74 = v75;
        if (v73 <= v71)
          v76 = v71;
        else
          v76 = v73;
        if (v73 >= v71)
          v73 = v71;
        if (v76 <= v74)
          v71 = v74;
        *v8 = v72;
        v8[1] = v71;
        if (v76 >= v74)
          v77 = v74;
        else
          v77 = v76;
        v8[2] = v77;
        v8[3] = v73;
        return result;
      default:
        if (v9 <= 191)
        {
          v78 = v8 + 1;
          v80 = v8 == a2 || v78 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 8;
              v82 = v8;
              do
              {
                v84 = *v82;
                v83 = v82[1];
                v82 = v78;
                if (v83 > v84)
                {
                  v85 = v81;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v85) = v84;
                    v86 = v85 - 8;
                    if (v85 == 8)
                      break;
                    v84 = *(uint64_t *)((char *)v8 + v85 - 16);
                    v85 -= 8;
                    if (v83 <= v84)
                    {
                      v87 = (uint64_t *)((char *)v8 + v86);
                      goto LABEL_157;
                    }
                  }
                  v87 = v8;
LABEL_157:
                  *v87 = v83;
                }
                v78 = v82 + 1;
                v81 += 8;
              }
              while (v82 + 1 != a2);
            }
          }
          else if (!v80)
          {
            do
            {
              v116 = *v7;
              v115 = v7[1];
              v7 = v78;
              if (v115 > v116)
              {
                do
                {
                  *v78 = v116;
                  v116 = *(v78 - 2);
                  --v78;
                }
                while (v115 > v116);
                *v78 = v115;
              }
              v78 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v88 = (v10 - 2) >> 1;
            v89 = v88;
            do
            {
              v90 = v89;
              if (v88 >= v89)
              {
                v91 = (2 * v89) | 1;
                v92 = &v8[v91];
                if (2 * v90 + 2 >= (uint64_t)v10)
                {
                  v93 = *v92;
                }
                else
                {
                  v93 = *v92;
                  v94 = v92[1];
                  if (*v92 >= v94)
                    v93 = v92[1];
                  if (*v92 > v94)
                  {
                    ++v92;
                    v91 = 2 * v90 + 2;
                  }
                }
                v95 = &v8[v90];
                v96 = *v95;
                if (v93 <= *v95)
                {
                  do
                  {
                    v97 = v92;
                    *v95 = v93;
                    if (v88 < v91)
                      break;
                    v98 = (2 * v91) | 1;
                    v92 = &v8[v98];
                    v91 = 2 * v91 + 2;
                    if (v91 >= (uint64_t)v10)
                    {
                      v93 = *v92;
                      v91 = v98;
                    }
                    else
                    {
                      v93 = *v92;
                      result = v92 + 1;
                      v99 = v92[1];
                      if (*v92 >= v99)
                        v93 = v92[1];
                      if (*v92 <= v99)
                        v91 = v98;
                      else
                        ++v92;
                    }
                    v95 = v97;
                  }
                  while (v93 <= v96);
                  *v97 = v96;
                }
              }
              v89 = v90 - 1;
            }
            while (v90);
            v100 = (unint64_t)v9 >> 3;
            do
            {
              v101 = 0;
              v102 = *v8;
              v103 = v8;
              do
              {
                v104 = &v103[v101 + 1];
                v105 = (2 * v101) | 1;
                v101 = 2 * v101 + 2;
                if (v101 >= v100)
                {
                  v106 = *v104;
                  v101 = v105;
                }
                else
                {
                  v106 = *v104;
                  v107 = v104[1];
                  if (*v104 >= v107)
                    v106 = v104[1];
                  if (*v104 <= v107)
                    v101 = v105;
                  else
                    ++v104;
                }
                *v103 = v106;
                v103 = v104;
              }
              while (v101 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
              if (v104 == --a2)
              {
                *v104 = v102;
              }
              else
              {
                *v104 = *a2;
                *a2 = v102;
                v108 = (char *)v104 - (char *)v8 + 8;
                if (v108 >= 9)
                {
                  v109 = (((unint64_t)v108 >> 3) - 2) >> 1;
                  v110 = &v8[v109];
                  v111 = *v110;
                  v112 = *v104;
                  if (*v110 > *v104)
                  {
                    do
                    {
                      v113 = v110;
                      *v104 = v111;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = &v8[v109];
                      v111 = *v110;
                      v104 = v113;
                    }
                    while (*v110 > v112);
                    *v113 = v112;
                  }
                }
              }
            }
            while (v100-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v14)
        {
          if (v14 <= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 <= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 <= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 > v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 <= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 > v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 > v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 <= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 <= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = v18;
          v23 = &v7[v15];
          do
          {
            *v23 = v21;
            *v22 = v16;
            do
            {
              v24 = v23[1];
              ++v23;
              v16 = v24;
            }
            while (v24 > v14);
            do
            {
              v25 = *--v22;
              v21 = v25;
            }
            while (v25 <= v14);
          }
          while (v23 < v22);
          v26 = v23 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<long> &,long *,false>(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v7, v26);
        v8 = v26 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<long> &,long *>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= *a1)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(_QWORD *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(_QWORD *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          v19 = (_QWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 8;
    if (++v12 == a2)
      return 1;
  }
}

void GetLeftHangingCharacters(void)::$_0::__invoke()
{
  uint64_t v0;
  __CFCharacterSet *v1;
  unint64_t v2;
  id Mutable;
  CFRange v4;

  v0 = 0;
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  do
  {
    if (kHangers[v0 + 2])
    {
      v4.location = *(unsigned __int16 *)&kHangers[v0];
      v1 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
      v4.length = 1;
      CFCharacterSetAddCharactersInRange(v1, v4);
    }
    v0 += 4;
  }
  while (v0 != 72);
  do
    v2 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  _CFCharacterSetCompact();
  _MergedGlobals_5 = v2;

}

void GetRightHangingCharacters(void)::$_0::__invoke()
{
  uint64_t v0;
  __CFCharacterSet *v1;
  unint64_t v2;
  id Mutable;
  CFRange v4;

  v0 = 0;
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  do
  {
    if (kHangers[v0 + 3])
    {
      v4.location = *(unsigned __int16 *)&kHangers[v0];
      v1 = (__CFCharacterSet *)atomic_load((unint64_t *)&Mutable);
      v4.length = 1;
      CFCharacterSetAddCharactersInRange(v1, v4);
    }
    v0 += 4;
  }
  while (v0 != 72);
  do
    v2 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  _CFCharacterSetCompact();
  qword_1ECDE7458 = v2;

}

void std::vector<CGSize>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      abort();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::default_delete<TRun::RareData>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {

    v3 = *(void **)(a2 + 56);
    if (v3)
    {
      *(_QWORD *)(a2 + 64) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x186DC03ACLL);
  }
}

char *std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100](char **a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    abort();
  result = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

uint64_t *std::vector<long,TInlineBufferAllocator<long,30ul>>::__insert_with_size[abi:nn180100]<long const*,long const*>(uint64_t *result, char *__src, char *a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _QWORD *v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[5];

  if (a4 < 1)
    return result;
  v5 = __src;
  v6 = (uint64_t)result;
  v8 = result[1];
  v7 = result[2];
  if (a4 > (v7 - v8) >> 3)
  {
    v9 = *result;
    v10 = a4 + ((v8 - *result) >> 3);
    if (v10 >> 61)
      abort();
    v11 = -v9 >> 3;
    v12 = (uint64_t)(result + 3);
    v13 = v7 - v9;
    if (v13 >> 2 > v10)
      v10 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v28[4] = v6 + 24;
    if (v14)
      v15 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate(v12, v14);
    else
      v15 = 0;
    v24 = &v15[8 * v11];
    v28[0] = v15;
    v28[1] = v24;
    v28[3] = &v15[8 * v14];
    v25 = 8 * a4;
    v26 = &v24[8 * a4];
    do
    {
      v27 = *(_QWORD *)v5;
      v5 += 8;
      *(_QWORD *)v24 = v27;
      v24 += 8;
      v25 -= 8;
    }
    while (v25);
    v28[2] = v26;
    std::vector<long,TInlineBufferAllocator<long,30ul>>::__swap_out_circular_buffer((void **)v6, (uint64_t)v28, 0);
    return (uint64_t *)std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)v28);
  }
  v16 = v8 >> 3;
  if (v8 >> 3 >= a4)
  {
    v17 = &__src[8 * a4];
    v19 = (_QWORD *)result[1];
LABEL_17:
    v20 = (int64_t)&v19[-a4];
    v21 = v19;
    if (v20 < (unint64_t)v8)
    {
      v22 = &v19[-a4];
      v21 = v19;
      do
      {
        v23 = *v22++;
        *v21++ = v23;
      }
      while ((unint64_t)v22 < v8);
    }
    *(_QWORD *)(v6 + 8) = v21;
    if (v19 != (_QWORD *)(8 * a4))
      result = (uint64_t *)memmove(&v19[-(v20 >> 3)], 0, v20);
    if (v17 != v5)
      return (uint64_t *)memmove(0, v5, v17 - v5);
    return result;
  }
  v17 = &__src[8 * v16];
  v18 = a3 - v17;
  if (a3 != v17)
    result = (uint64_t *)memmove((void *)result[1], &__src[8 * v16], a3 - v17);
  v19 = (_QWORD *)(v8 + v18);
  *(_QWORD *)(v6 + 8) = v8 + v18;
  if (v8 >= 1)
    goto LABEL_17;
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,LessByStringIndex &,long *,false>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v84;
  uint64_t v85;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v44 = *(a2 - 1);
        v45 = *v10;
        if (*(_QWORD *)(*a3 + 8 * v44) < *(_QWORD *)(*a3 + 8 * *v10))
        {
          *v10 = v44;
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v10, v10 + 1, a2 - 1, *a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 191)
        {
          v46 = *a3;
          v47 = v10 + 1;
          v49 = v10 == a2 || v47 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 0;
              v51 = v10;
              do
              {
                v53 = *v51;
                v52 = v51[1];
                v51 = v47;
                if (*(_QWORD *)(v46 + 8 * v52) < *(_QWORD *)(v46 + 8 * v53))
                {
                  v54 = v50;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v54 + 8) = v53;
                    if (!v54)
                      break;
                    v53 = *(uint64_t *)((char *)v10 + v54 - 8);
                    v54 -= 8;
                    if (*(_QWORD *)(v46 + 8 * v52) >= *(_QWORD *)(v46 + 8 * v53))
                    {
                      v55 = (uint64_t *)((char *)v10 + v54 + 8);
                      goto LABEL_76;
                    }
                  }
                  v55 = v10;
LABEL_76:
                  *v55 = v52;
                }
                v47 = v51 + 1;
                v50 += 8;
              }
              while (v51 + 1 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v85 = *v9;
              v84 = v9[1];
              v9 = v47;
              if (*(_QWORD *)(v46 + 8 * v84) < *(_QWORD *)(v46 + 8 * v85))
              {
                do
                {
                  *v47 = v85;
                  v85 = *(v47 - 2);
                  --v47;
                }
                while (*(_QWORD *)(v46 + 8 * v84) < *(_QWORD *)(v46 + 8 * v85));
                *v47 = v84;
              }
              v47 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v56 = (v12 - 2) >> 1;
            v57 = *a3;
            v58 = v56;
            do
            {
              v59 = v58;
              if (v56 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v10[v60];
                if (2 * v59 + 2 >= (uint64_t)v12)
                {
                  v62 = *v61;
                }
                else
                {
                  v62 = *v61;
                  if (*(_QWORD *)(v57 + 8 * *v61) < *(_QWORD *)(v57 + 8 * v61[1]))
                  {
                    v62 = v61[1];
                    ++v61;
                    v60 = 2 * v59 + 2;
                  }
                }
                result = &v10[v59];
                v63 = *result;
                if (*(_QWORD *)(v57 + 8 * v62) >= *(_QWORD *)(v57 + 8 * *result))
                {
                  do
                  {
                    v64 = v61;
                    *result = v62;
                    if (v56 < v60)
                      break;
                    v65 = (2 * v60) | 1;
                    v61 = &v10[v65];
                    v60 = 2 * v60 + 2;
                    if (v60 >= (uint64_t)v12)
                    {
                      v62 = *v61;
                      v60 = v65;
                    }
                    else
                    {
                      v62 = *v61;
                      if (*(_QWORD *)(v57 + 8 * *v61) >= *(_QWORD *)(v57 + 8 * v61[1]))
                      {
                        v60 = v65;
                      }
                      else
                      {
                        v62 = v61[1];
                        ++v61;
                      }
                    }
                    result = v64;
                  }
                  while (*(_QWORD *)(v57 + 8 * v62) >= *(_QWORD *)(v57 + 8 * v63));
                  *v64 = v63;
                  v57 = *a3;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v66 = (unint64_t)v11 >> 3;
            do
            {
              v67 = 0;
              v68 = *v10;
              v69 = *a3;
              v70 = v66 - 2;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              v72 = v10;
              do
              {
                v73 = &v72[v67 + 1];
                v74 = (2 * v67) | 1;
                v67 = 2 * v67 + 2;
                if (v67 >= v66)
                {
                  v75 = *v73;
                  v67 = v74;
                }
                else
                {
                  v75 = *v73;
                  result = *(uint64_t **)(v69 + 8 * *v73);
                  if ((uint64_t)result >= *(_QWORD *)(v69 + 8 * v73[1]))
                  {
                    v67 = v74;
                  }
                  else
                  {
                    v75 = v73[1];
                    ++v73;
                  }
                }
                *v72 = v75;
                v72 = v73;
              }
              while (v67 <= v71);
              if (v73 == --a2)
              {
                *v73 = v68;
              }
              else
              {
                *v73 = *a2;
                *a2 = v68;
                v76 = (char *)v73 - (char *)v10 + 8;
                if (v76 >= 9)
                {
                  v77 = *a3;
                  v78 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v79 = &v10[v78];
                  v80 = *v79;
                  v81 = *v73;
                  if (*(_QWORD *)(*a3 + 8 * *v79) < *(_QWORD *)(*a3 + 8 * *v73))
                  {
                    do
                    {
                      v82 = v79;
                      *v73 = v80;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &v10[v78];
                      v80 = *v79;
                      result = *(uint64_t **)(v77 + 8 * v81);
                      v73 = v82;
                    }
                    while (*(_QWORD *)(v77 + 8 * *v79) < (uint64_t)result);
                    *v82 = v81;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(&v9[v12 >> 1], v9, a2 - 1, v15);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v9, &v9[v12 >> 1], a2 - 1, v15);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v9 + 1, v14 - 1, a2 - 2, *a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v9 + 2, &v9[v13 + 1], a2 - 3, *a3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v14 - 1, v14, &v9[v13 + 1], *a3);
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *a3;
        v18 = *v9;
        if ((a5 & 1) == 0)
        {
          v19 = *(_QWORD *)(v17 + 8 * v18);
          if (*(_QWORD *)(v17 + 8 * *(v9 - 1)) < v19)
            goto LABEL_12;
          if (v19 >= *(_QWORD *)(v17 + 8 * *(a2 - 1)))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v19 >= *(_QWORD *)(v17 + 8 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v19 >= *(_QWORD *)(v17 + 8 * v34));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v19 < *(_QWORD *)(v17 + 8 * v37));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              v40 = *(_QWORD *)(v17 + 8 * v18);
              do
              {
                v41 = v10[1];
                ++v10;
                v38 = v41;
              }
              while (v40 >= *(_QWORD *)(v17 + 8 * v41));
              do
              {
                v42 = *--v36;
                v39 = v42;
              }
              while (v40 < *(_QWORD *)(v17 + 8 * v42));
            }
            while (v10 < v36);
          }
          v43 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v43;
          a5 = 0;
          *v43 = v18;
          continue;
        }
        v19 = *(_QWORD *)(v17 + 8 * v18);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(_QWORD *)(v17 + 8 * v21) < v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(_QWORD *)(v17 + 8 * v25) >= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(_QWORD *)(v17 + 8 * v24) >= v19);
        }
        if (v22 >= v23)
        {
          v32 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v23;
          v28 = v22;
          do
          {
            *v28 = v26;
            *v27 = v21;
            v29 = *(_QWORD *)(v17 + 8 * v18);
            do
            {
              v30 = v28[1];
              ++v28;
              v21 = v30;
            }
            while (*(_QWORD *)(v17 + 8 * v30) < v29);
            do
            {
              v31 = *--v27;
              v26 = v31;
            }
            while (*(_QWORD *)(v17 + 8 * v31) >= v29);
          }
          while (v28 < v27);
          v32 = v28 - 1;
        }
        if (v32 != v9)
          *v9 = *v32;
        *v32 = v18;
        if (v22 < v23)
        {
LABEL_33:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,LessByStringIndex &,long *,false>(v9, v32, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v32 + 1;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v9, v32, a3);
        v10 = v32 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(v32 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *(_QWORD *)(a4 + 8 * *a2);
  v6 = *result;
  v7 = *a3;
  v8 = *(_QWORD *)(a4 + 8 * *a3);
  if (v5 >= *(_QWORD *)(a4 + 8 * *result))
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v4;
      v9 = *result;
      if (*(_QWORD *)(a4 + 8 * *a2) < *(_QWORD *)(a4 + 8 * *result))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v4;
      *a2 = v6;
      if (*(_QWORD *)(a4 + 8 * *a3) >= *(_QWORD *)(a4 + 8 * v6))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(*a3 + 8 * v8) < *(_QWORD *)(*a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a1 + 1, a1 + 2, *a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_QWORD *)(v13 + 8 * *v11) < *(_QWORD *)(v13 + 8 * *v10))
    {
      v17 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (*(_QWORD *)(v13 + 8 * v15) >= *(_QWORD *)(v13 + 8 * v16))
        {
          v19 = (uint64_t *)((char *)a1 + v18);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a2, a3, *a5);
  v11 = *a5;
  v12 = *a3;
  if (*(_QWORD *)(*a5 + 8 * *a4) < *(_QWORD *)(*a5 + 8 * *a3))
  {
    *a3 = *a4;
    *a4 = v12;
    v13 = *a2;
    if (*(_QWORD *)(v11 + 8 * *a3) < *(_QWORD *)(v11 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_QWORD *)(v11 + 8 * *a2) < *(_QWORD *)(v11 + 8 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,LessByStringIndex &,long *>(a1, a2, a3, a4, a6);
  v13 = *a6;
  v14 = *a4;
  if (*(_QWORD *)(*a6 + 8 * *a5) < *(_QWORD *)(*a6 + 8 * *a4))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_QWORD *)(v13 + 8 * *a4) < *(_QWORD *)(v13 + 8 * *a3))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(v13 + 8 * *a3) < *(_QWORD *)(v13 + 8 * *a2))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (*(_QWORD *)(v13 + 8 * *a2) < *(_QWORD *)(v13 + 8 * *a1))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t TRun::FindGlyphIndex<true>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  int v19;
  uint64_t v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48);
  v5 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  v6 = v3 + 8 * v5;
  v7 = *(_BYTE *)(a1 + 224);
  if ((v7 & 1) != 0)
    v8 = -a3;
  else
    v8 = a3;
  v9 = v4 - 1;
  if (v8 < 0)
    v4 = -1;
  else
    v9 = 0;
  if (*(int *)(a1 + 256) >= 2)
  {
    if (v9 == v4)
    {
      LOBYTE(v11) = 1;
      v12 = v9;
    }
    else
    {
      v11 = 1;
      v12 = v9;
      while (1)
      {
        v16 = *(_QWORD *)(v6 + 8 * v9);
        if (v16 == a2)
          break;
        v17 = (v16 < a2) & ((v16 > *(_QWORD *)(v6 + 8 * v12)) | v11);
        v11 &= v17 ^ 1;
        if (v17)
          v12 = v9;
        v9 += v8;
        if (v4 == v9)
        {
          v9 = v4;
          break;
        }
      }
    }
    if (v9 == v4)
      result = v12;
    else
      result = v9;
    if (v9 == v4)
    {
      if ((v7 & 1) != 0)
        v19 = -1;
      else
        v19 = 1;
      v20 = v4 - v8;
      if (v8 == v19)
        v20 = v12;
      if ((v11 & 1) != 0)
        return v20;
    }
  }
  else
  {
    if (v9 == v4)
    {
      v10 = v9;
    }
    else
    {
      v13 = *(_QWORD *)(v6 + 8 * v9);
      if (v13 >= a2)
      {
        v15 = v9;
LABEL_36:
        if (v13 <= a2)
          v10 = v15;
        else
          v10 = v9;
      }
      else
      {
        v14 = v3 + 8 * v5 + 8 * v8;
        while (v4 - v8 != v9)
        {
          v15 = v9 + v8;
          v13 = *(_QWORD *)(v14 + 8 * v9);
          v9 = v15;
          if (v13 >= a2)
          {
            v9 = v15 - v8;
            goto LABEL_36;
          }
        }
        v10 = v4;
      }
    }
    if (v10 == v4)
      return v9;
    else
      return v10;
  }
  return result;
}

uint64_t TKerningEngine::PositionGlyphs(TKerningEngine *this, TRunGlue *a2, const TCharStream *a3)
{
  char v3;
  uint64_t result;
  TTrackingEngine *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64x2_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t CommonTable;
  int v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL RunRange;
  CFRange v27;
  char v28;
  char *v29;
  char *v30;
  char v31;
  TTrackingEngine *v33;
  _OWORD v34[4];
  _BYTE v35[56];
  int KernSetting;
  double v37;
  unsigned __int8 v38;
  _OWORD __dst[26];
  double *v40[3];
  _OWORD v41[15];
  _OWORD *v42;
  void *v43[2];
  char *v44;
  _BYTE v45[720];
  _QWORD v46[3];

  v3 = (char)a3;
  v46[1] = *MEMORY[0x1E0C80C00];
  result = TRunGlue::length(this);
  if (result)
  {
    v38 = 0;
    v7 = *(TTrackingEngine **)this;
    v9 = *(_QWORD *)(*(_QWORD *)this + 16);
    v8 = *(_QWORD *)(*(_QWORD *)this + 24);
    memset(v45, 170, sizeof(v45));
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    v46[0] = v45;
    v10 = v8 - v9;
    if (v8 != v9)
    {
      if ((unint64_t)v10 >= 0x5555555555555551)
        abort();
      v11 = v10 >> 3;
      *(_QWORD *)&__dst[2] = v45;
      v12 = TInlineBufferAllocator<std::pair<double,CFRange>,30ul>::allocate((uint64_t)v45, v10 >> 3);
      v13 = vdupq_n_s64((unint64_t)v43[1]);
      v43[0] = v12;
      v43[1] = v12;
      *(int64x2_t *)((char *)__dst + 8) = v13;
      v14 = v44;
      v44 = &v12[24 * v11];
      *((_QWORD *)&__dst[1] + 1) = v14;
      *(_QWORD *)&__dst[0] = v13.i64[0];
      std::__split_buffer<std::pair<double,CFRange>,TInlineBufferAllocator<std::pair<double,CFRange>,30ul> &>::~__split_buffer((uint64_t)__dst);
    }
    v33 = v7;
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    while (1)
    {
      v16 = *((_QWORD *)this + 19);
      CommonTable = -1;
      v37 = NAN;
      v41[13] = v15;
      v41[14] = v15;
      v41[11] = v15;
      v41[12] = v15;
      v41[9] = v15;
      v41[10] = v15;
      v41[7] = v15;
      v41[8] = v15;
      v41[5] = v15;
      v41[6] = v15;
      v41[3] = v15;
      v41[4] = v15;
      v41[1] = v15;
      v41[2] = v15;
      v41[0] = v15;
      memset(v40, 0, sizeof(v40));
      v42 = v41;
      KernSetting = -1431655766;
      KernSetting = TAttributes::GetKernSetting((TAttributes *)(v16 + 40), &v37, 0);
      v18 = *(_DWORD *)(v16 + 260);
      if ((v18 & 2) != 0)
        break;
      CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)this + 77) + 400), 1634428274, 0);
      if (!CommonTable)
        break;
      if (KernSetting != 2)
      {
        TKerningEngineImplementation::DetermineSimilarRuns((uint64_t)this, v40);
        v19 = 0;
LABEL_15:
        if (CommonTable == -1)
          CommonTable = TBaseFont::GetCommonTable(*(TBaseFont **)(*((_QWORD *)this + 77) + 400), 1634428274, 0);
        memcpy(__dst, &unk_18492E620, 0x198uLL);
        TAATKerxEngine::TAATKerxEngine((TAATKerxEngine *)__dst, this, (CFDataRef)CommonTable);
        if (*((_QWORD *)&__dst[5] + 1))
        {
          TAATKerxEngine::KernRuns((uint64_t)__dst, &v38, &KernSetting);
          v19 = *((_QWORD *)this + 2);
        }
        if (KernSetting != 2)
        {
          memset(v35, 170, sizeof(v35));
          v34[0] = xmmword_18492E7B8;
          v34[1] = unk_18492E7C8;
          memset(&v34[2], 170, 32);
          TAATKernEngine::TAATKernEngine((TAATKernEngine *)v34, this);
          if (*(_QWORD *)&v35[32])
          {
            TAATKernEngine::KernRuns((uint64_t)v34, &v38, &KernSetting);
            v19 = *((_QWORD *)this + 2);
          }
          std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)&v34[3] + 8, *(_QWORD **)v35);
          if (*(_QWORD *)&v34[2])
          {
            *((_QWORD *)&v34[2] + 1) = *(_QWORD *)&v34[2];
            operator delete(*(void **)&v34[2]);
          }
        }
        TAATKerxEngine::~TAATKerxEngine((id **)__dst);
        goto LABEL_25;
      }
      v19 = 0;
LABEL_25:
      if ((v18 & 6) != 0)
      {
        v21 = TRunGlue::FilterJoiners(this);
        v38 |= v21;
      }
      v22 = *((_QWORD *)this + 1);
      if (v19)
        v23 = v19;
      else
        v23 = *((_QWORD *)this + 2);
      AppendTrackAmountForRunIndex((unint64_t *)v43, *((_QWORD *)this + 1), v37);
      if (v23 != 1)
      {
        v24 = 0;
        v25 = v22 + 1;
        do
        {
          AppendTrackAmountForRunIndex((unint64_t *)v43, v25 + v24, v40[0][v24]);
          ++v24;
        }
        while (v23 - 1 != v24);
      }
      RunRange = TRunGlue::NextRunRange(this, v23);
      *(_QWORD *)&__dst[0] = v40;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      if (!RunRange)
      {
        if ((v3 & 4) != 0)
        {
          *(_QWORD *)&__dst[0] = this;
          *((_QWORD *)&__dst[0] + 1) = a2;
          v28 = TCombiningEngine::ResolveCombiningMarks((void ****)__dst, 2, 0, 0);
          v38 |= v28;
        }
        v29 = (char *)v43[0];
        v30 = (char *)v43[1];
        if (v43[0] == v43[1])
        {
          if (!v43[0])
            return v38;
        }
        else
        {
          do
          {
            v27.location = *((_QWORD *)v29 + 2);
            v31 = TTrackingEngine::TrackRuns(v33, a2, *((const TCharStream **)v29 + 1), v27, *(double *)v29);
            v38 |= v31;
            v29 += 24;
          }
          while (v29 != v30);
          v29 = (char *)v43[0];
          if (!v43[0])
            return v38;
        }
        v43[1] = v29;
        if (v45 > v29 || v46 <= (_QWORD *)v29)
          operator delete(v29);
        return v38;
      }
    }
    TKerningEngineImplementation::DetermineSimilarRuns((uint64_t)this, v40);
    *(_QWORD *)&__dst[15] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __dst[13] = v20;
    __dst[14] = v20;
    __dst[11] = v20;
    __dst[12] = v20;
    __dst[9] = v20;
    __dst[10] = v20;
    __dst[7] = v20;
    __dst[8] = v20;
    __dst[5] = v20;
    __dst[6] = v20;
    __dst[3] = v20;
    __dst[4] = v20;
    __dst[1] = v20;
    __dst[2] = v20;
    __dst[0] = v20;
    TOpenTypePositioningEngine::TOpenTypePositioningEngine((TOpenTypePositioningEngine *)__dst, this, a2);
    if (StackHasAvailable(0x4000uLL))
      TOpenTypePositioningEngine::PositionRuns((uint64_t)__dst, &v38, &KernSetting);
    v19 = *((_QWORD *)this + 2);
    std::__tree<std::__value_type<long,TGlyphDeltaListEntry>,std::__map_value_compare<long,std::__value_type<long,TGlyphDeltaListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TGlyphDeltaListEntry>>>::destroy(*((_QWORD **)&__dst[14] + 1));
    if (KernSetting == 2)
      goto LABEL_25;
    goto LABEL_15;
  }
  return result;
}

uint64_t TRunGlue::AdvanceInitialAdvance(TRunGlue *this, CGSize a2)
{
  double height;
  double width;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  CGFloat v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v21;
  CGFloat v22;
  CGSize v23;

  height = a2.height;
  width = a2.width;
  if (*((_QWORD *)this + 19))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16)
                               + 8 * TRunGlue::PhysicalRunIndexFromLogical(this, *((_QWORD *)this + 1)))
                   + 48);
    v5 = *(_QWORD *)(v4 + 216);
    v6 = *(_QWORD *)(v5 + 32);
    if (v6 || (v13 = *(_QWORD *)(v5 + 24)) == 0)
    {
      v7 = (double *)(v6 + 16 * *(_QWORD *)(v4 + 200));
      v8 = v7[1];
    }
    else
    {
      v7 = (double *)(v13 + 8 * *(_QWORD *)(v4 + 200));
      v8 = 0.0;
    }
    v23.width = width + *v7;
    v23.height = height + v8;
    TStorageRange::SetAdvance((TStorageRange *)(v4 + 192), 0, v23);
    v14 = (double *)MEMORY[0x1E0C9D538];
    if ((*(_BYTE *)(v4 + 225) & 0x10) != 0)
    {
      objc_msgSend(*(id *)(v4 + 216), "originAtIndex:", *(_QWORD *)(v4 + 200));
    }
    else
    {
      v15 = *MEMORY[0x1E0C9D538];
      v16 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    }
    v17 = width + v15;
    v18 = height + v16;
    objc_msgSend(*(id *)(v4 + 216), "setOrigin:atIndex:", *(_QWORD *)(v4 + 200), v17, v18);
    if (v17 != *v14 || v18 != v14[1])
      *(_BYTE *)(v4 + 225) |= 0x10u;
    return 1;
  }
  v9 = (double *)*((_QWORD *)this + 24);
  if (v9)
  {
    v10 = (double *)*((_QWORD *)this + 23);
    v11 = a2.height + v10[1];
    *v10 = a2.width + *v10;
    v10[1] = v11;
    v12 = height + v9[1];
    *v9 = a2.width + *v9;
    v9[1] = v12;
    return 1;
  }
  v21 = *((double *)this + 68);
  if (fabs(v21) != INFINITY)
  {
    v22 = a2.height + *((double *)this + 69);
    *((double *)this + 68) = width + v21;
    *((CGFloat *)this + 69) = v22;
    return 1;
  }
  return 0;
}

_QWORD *TKerningEngineImplementation::SetAdvance<TRunGlue::TGlyph>(_QWORD *a1, uint64_t a2, _BYTE *a3, double a4, double a5)
{
  _QWORD *result;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  result = TRunGlue::SetAdvance(a1, a2, *(CGSize *)&a4);
  if (a4 != *MEMORY[0x1E0C9D820] || a5 != *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    result = (_QWORD *)TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)v10);
    if ((_DWORD)result)
      *a3 = 1;
  }
  return result;
}

uint64_t TKerningEngineImplementation::TransferDeletedAdvances(TRunGlue **this)
{
  CGSize *v2;
  double height;
  double width;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v9;
  uint64_t result;
  TRunGlue *v12;
  uint64_t v13;
  CGSize v14;
  CGSize v15;

  v2 = (CGSize *)MEMORY[0x1E0C9D820];
  width = *MEMORY[0x1E0C9D820];
  height = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v5 = TRunGlue::length(*this);
  if (v5)
  {
    v6 = v5 - 1;
    do
    {
      v12 = *this;
      v13 = v6;
      if (TRunGlue::TGlyph::IsDeleted((TRunGlue::TGlyph *)&v12))
      {
        width = width + TRunGlue::GetAdvance(v12, v13);
        height = height + v7;
        TRunGlue::SetAdvance(v12, v13, *v2);
      }
      else if (width != v2->width || height != v2->height)
      {
        v14.width = width + TRunGlue::GetAdvance(v12, v13);
        v14.height = height + v9;
        TRunGlue::SetAdvance(v12, v13, v14);
        width = v2->width;
        height = v2->height;
      }
      --v6;
    }
    while (v6 != -1);
  }
  if (width == v2->width && height == v2->height)
    return 1;
  v15.width = width;
  v15.height = height;
  result = TRunGlue::AdvanceInitialAdvance(*this, v15);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t TAATKerxEngine::KernRuns(uint64_t a1, _BYTE *a2, int *a3)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  TRunGlue **v7;
  unsigned int v8;
  uint64_t v9;
  TRunGlue *v10;
  TRunGlue *v11;
  TRunGlue *v12;
  TAATKerxEngine *v13;
  uint64_t v14;
  TAATKerxEngine *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  _BOOL4 v27;
  unint64_t v28;
  unsigned int v29;
  TBaseFont *InitializedGraphicsFont;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  void *v37;
  SFNTLookupTable *v38;
  void **v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  TRunGlue *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD *, uint64_t, void ****);
  _QWORD *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned __int16 *v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t **v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  SFNTLookupTable *v75;
  unsigned int v76;
  unsigned int v77;
  _QWORD *v78;
  double *v79;
  TAATControlPointAccess *v80;
  void **v81;
  uint64_t v82;
  SFNTLookupTable *v83;
  const SFNTLookupTable *v84;
  TRunGlue *v85;
  uint64_t v86;
  unsigned __int16 *v87;
  SFNTLookupTable *v88;
  id **v89;
  TAATAnkrTable *v90;
  id *v91;
  uint64_t v92;
  TRunGlue *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(_QWORD *, uint64_t, void ****);
  _QWORD *v101;
  unsigned __int16 *v102;
  unsigned int v103;
  unsigned __int16 *v104;
  BOOL v105;
  unsigned int v106;
  unsigned __int16 *v107;
  BOOL v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned __int16 *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  double ControlPointCoordinates;
  double v125;
  double v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v135;
  unsigned int v136;
  int v137;
  double v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  TRunGlue *v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t GlyphID;
  uint64_t v159;
  uint64_t (*v160)(_QWORD *, _QWORD, void ****);
  _QWORD *v161;
  char *v162;
  void ***v163;
  char *v164;
  int v167;
  int v168;
  uint64_t (*v169)(_QWORD *, uint64_t, void ***);
  _QWORD *v170;
  char *v171;
  void **v172;
  char *v173;
  BOOL v175;
  int v176;
  int v177;
  _WORD *v178;
  uint64_t v180;
  os_unfair_lock_s *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  os_unfair_lock_s *v186;
  uint64_t v187;
  _WORD *v188;
  unint64_t v189;
  size_t v190;
  _WORD *v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned __int16 *v197;
  int v198;
  void ***v199;
  void (*v200)(_QWORD *, _BYTE *);
  _QWORD *v201;
  _BYTE *v202;
  uint64_t result;
  TAATKerxEngine *v204;
  uint64_t v205;
  __CFString *v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  TAATKerxEngine *v210;
  unint64_t v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  TRunGlue *v217;
  char v218;
  unint64_t v219;
  uint64_t v220;
  void ***v222;
  uint64_t v223;
  uint64_t v224;
  SFNTLookupTable *v225;
  unsigned int v226;
  __int16 v227;
  __int16 v228;
  _QWORD v229[2];
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _QWORD v234[3];
  __int128 v235;
  uint64_t v236;
  unint64_t v237;
  __int128 v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  _BYTE v243[248];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _BYTE *v248;
  uint64_t v249;
  CGPoint v250;

  v249 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  *a3 = 2;
  if (!TRunGlue::length(*(TRunGlue **)a1))
    return 1;
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return 1;
  v7 = (TRunGlue **)a1;
  v8 = bswap32(v6);
  v9 = v5 + 8;
  v10 = *v7;
  v11 = (TRunGlue *)*((_QWORD *)*v7 + 80);
  v12 = (TRunGlue *)*((_QWORD *)*v7 + 81);
  v7[1] = v11;
  v7[2] = v12;
  if (*((_BYTE *)v10 + 634))
  {
    v7[1] = v12;
    v7[2] = v11;
  }
  v13 = (TAATKerxEngine *)v7;
  v14 = TRunGlue::length(v10);
  v15 = v13;
  v209 = v14;
  v16 = 0;
  if (v8 <= 1)
    v17 = 1;
  else
    v17 = v8;
  v215 = v17;
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v210 = v13;
  v207 = v4;
  do
  {
    v19 = (unsigned int *)*((_QWORD *)v15 + 11);
    v20 = *((_QWORD *)v15 + 12);
    v21 = (unsigned int *)(v9 + 8);
    if ((unint64_t)v19 > v9 + 4 || (unint64_t)v21 > v20)
      goto LABEL_268;
    v23 = v9 + bswap32(*(_DWORD *)v9);
    if (v23 > v20)
      goto LABEL_268;
    v24 = bswap32(*(_DWORD *)(v9 + 4));
    if (*((_BYTE *)v15 + 104) != v24 >> 31)
      goto LABEL_258;
    if ((v24 & 0x40000000) != 0)
    {
      if (*((_BYTE *)v15 + 104))
        goto LABEL_258;
    }
    else if (!v4 && v24 != 4)
    {
      goto LABEL_258;
    }
    v25 = *((_QWORD *)v15 + 14);
    v211 = v16;
    if (v16 < (*((_QWORD *)v15 + 15) - v25) >> 3)
    {
      v26 = *(const unsigned __int8 **)(v25 + 8 * v16);
      if (v26)
      {
        v27 = TRunGlue::CoveredByBitmap(*(TRunGlue **)v15, v26, *(CFRange *)(*(_QWORD *)v15 + 8));
        v15 = v210;
        v16 = v211;
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        if (!v27)
          goto LABEL_258;
        v19 = (unsigned int *)*((_QWORD *)v210 + 11);
      }
    }
    v28 = v9 + 12;
    if (bswap32(*v19) < 0x40000)
    {
LABEL_25:
      v29 = 0;
      goto LABEL_26;
    }
    v29 = 0;
    if (v19 <= v21 && v28 <= *((_QWORD *)v15 + 12))
    {
      if (!*v21)
        goto LABEL_25;
      v29 = bswap32(*v21);
      if (!*((_QWORD *)v15 + 48))
      {
        InitializedGraphicsFont = *(TBaseFont **)(*(_QWORD *)(*(_QWORD *)v15 + 616) + 400);
        if (InitializedGraphicsFont)
        {
          InitializedGraphicsFont = (TBaseFont *)TBaseFont::GetInitializedGraphicsFont(InitializedGraphicsFont);
          if (InitializedGraphicsFont)
            InitializedGraphicsFont = (TBaseFont *)CGFontGetParserFont();
          v15 = v210;
          v16 = v211;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        }
        *((_QWORD *)v15 + 48) = InitializedGraphicsFont;
      }
    }
LABEL_26:
    if (v209 != 1)
    {
      v15 = v210;
      switch((char)v24)
      {
        case 0:
          v31 = *((_QWORD *)v210 + 12);
          v32 = v9 + 28;
          if (v9 + 28 > v31)
            goto LABEL_268;
          v246 = v18;
          v247 = v18;
          v244 = v18;
          v245 = v18;
          *(_OWORD *)&v243[216] = v18;
          *(_OWORD *)&v243[232] = v18;
          *(_OWORD *)&v243[184] = v18;
          *(_OWORD *)&v243[200] = v18;
          *(_OWORD *)&v243[152] = v18;
          *(_OWORD *)&v243[168] = v18;
          *(_OWORD *)&v243[120] = v18;
          *(_OWORD *)&v243[136] = v18;
          *(_OWORD *)&v243[88] = v18;
          *(_OWORD *)&v243[104] = v18;
          *(_OWORD *)&v243[72] = v18;
          *(_OWORD *)&v243[24] = v18;
          *(_OWORD *)&v243[8] = v18;
          v240 = (uint64_t)v210;
          v241 = v9;
          v242 = v9 + 12;
          *(_QWORD *)v243 = v31;
          *(_DWORD *)&v243[8] = v24;
          memset(&v243[40], 0, 32);
          v248 = &v243[72];
          LODWORD(v33) = bswap32(*(_DWORD *)(v9 + 12));
          v34 = v32 + 6 * v33;
          if (v34 < v32 || v34 > v31)
          {
            if (v9 + 34 > v31)
              LOWORD(v33) = 0;
            else
              v33 = (v31 - v32) / 6;
          }
          *(_WORD *)&v243[32] = v33;
          v35 = *(double *)v210;
          v36 = *(_QWORD *)(*(_QWORD *)v210 + 16);
          if (v36)
          {
            if (v36 == 1)
              v37 = TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInSingleRun>;
            else
              v37 = TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyph>;
          }
          else
          {
            v37 = TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInVector>;
          }
          *(_QWORD *)&v243[16] = v37;
          *(_QWORD *)&v243[24] = 0;
          if (v29)
          {
            std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)&v243[48], v29);
            TAATKerxEngine::GetTupleScalars(v210, v29, *(double **)&v243[48]);
            LODWORD(v16) = v211;
            v35 = *(double *)v240;
          }
          v180 = *(_QWORD *)(*(_QWORD *)&v35 + 616);
          v181 = *(os_unfair_lock_s **)(v180 + 400);
          v182 = *(_QWORD *)&v181[50]._os_unfair_lock_opaque;
          if (!v182)
          {
            v183 = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v180 + 400));
            v184 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&v181->_os_unfair_lock_opaque
                                                                          + 872))(v181, v183);
            LODWORD(v16) = v211;
            v182 = v184;
            if (!v184)
              goto LABEL_253;
          }
          v185 = (2 * v16) | 1;
          v186 = v181 + 111;
          os_unfair_lock_lock_with_options();
          v187 = *(_QWORD *)&v181[122]._os_unfair_lock_opaque;
          if (v185 < (*(_QWORD *)&v181[124]._os_unfair_lock_opaque - v187) >> 3)
          {
            v188 = *(_WORD **)(v187 + 8 * v185);
            if (v188)
            {
              *(_WORD *)&v243[34] = *v188;
              *(_QWORD *)&v243[40] = v188 + 1;
              goto LABEL_252;
            }
          }
          v189 = v185;
          if (v182 + 1 < 0)
            v190 = -1;
          else
            v190 = 2 * (v182 + 1);
          v191 = (_WORD *)operator new[]();
          bzero(v191, v190);
          *(_WORD *)&v243[34] = v182 - 1;
          *v191 = v182 - 1;
          *(_QWORD *)&v243[40] = v191 + 1;
          v192 = *(unsigned __int16 *)&v243[32];
          if (!*(_WORD *)&v243[32])
            goto LABEL_249;
          v193 = 0;
LABEL_244:
          v194 = *(unsigned __int16 *)(v32 + 6 * v193);
          v195 = __rev16(v194);
          if (v195 > (unsigned __int16)(v182 - 1))
            goto LABEL_249;
          v196 = v193;
          v191[v195 + 1] = v193 + 1;
          v197 = (unsigned __int16 *)(v9 + 34 + 6 * v193);
          while (++v196 < v192)
          {
            v198 = *v197;
            v197 += 3;
            if (v198 != v194)
            {
              v193 = (unsigned __int16)v196;
              if (v192 > (unsigned __int16)v196)
                goto LABEL_244;
              break;
            }
          }
LABEL_249:
          v222 = (void ***)v191;
          TBaseFont::AddKerningDataAtIndex(v181, (uint64_t *)&v222, v189);
          v199 = v222;
          v222 = 0;
          if (v199)
            MEMORY[0x186DC0394](v199, 0x1000C80BDFB0063);
          v186 = v181 + 111;
LABEL_252:
          os_unfair_lock_unlock(v186);
LABEL_253:
          v200 = *(void (**)(_QWORD *, _BYTE *))&v243[16];
          v201 = (uint64_t *)((char *)&v240 + (*(uint64_t *)&v243[24] >> 1));
          if ((v243[24] & 1) != 0)
            v200 = *(void (**)(_QWORD *, _BYTE *))(*v201 + *(unsigned int *)&v243[16]);
          v4 = v207;
          v200(v201, a2);
          v222 = (void ***)&v243[48];
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v222);
          goto LABEL_256;
        case 1:
          goto LABEL_48;
        case 2:
          v83 = (SFNTLookupTable *)*((_QWORD *)v210 + 12);
          if (v9 + 28 > (unint64_t)v83)
            goto LABEL_268;
          *(_QWORD *)&v243[104] = v18;
          *(_OWORD *)&v243[120] = v18;
          *(_OWORD *)&v243[88] = v18;
          *(_OWORD *)&v243[40] = v18;
          *(_QWORD *)&v243[64] = *((_QWORD *)&v18 + 1);
          *(_DWORD *)&v243[12] = DWORD1(v18);
          *(_QWORD *)&v243[32] = *((_QWORD *)&v18 + 1);
          v242 = v9 + 12;
          *(_QWORD *)v243 = v83;
          *(_DWORD *)&v243[8] = v24;
          *(_QWORD *)&v243[16] = TAATLookupTable::BadTable;
          *(_QWORD *)&v243[24] = 0;
          *(_QWORD *)&v243[56] = 0;
          *(_WORD *)&v243[64] = -1;
          *(_QWORD *)&v243[72] = TAATLookupTable::BadTable;
          *(_QWORD *)&v243[80] = 0;
          *(_QWORD *)&v243[112] = 0;
          *(_WORD *)&v243[120] = -1;
          v84 = (const SFNTLookupTable *)(v9 + bswap32(*(_DWORD *)(v9 + 16)));
          v240 = (uint64_t)v210;
          v241 = v9;
          TAATLookupTable::SetTable((uint64_t)&v243[16], v84, v83);
          TAATLookupTable::SetTable((uint64_t)&v243[72], (const SFNTLookupTable *)(v241 + bswap32(*(_DWORD *)(v9 + 20))), v83);
          *(_QWORD *)&v243[128] = v241 + bswap32(*(_DWORD *)(v9 + 24));
          v85 = *(TRunGlue **)v240;
          v86 = TRunGlue::length(*(TRunGlue **)v240);
          if (*((_QWORD *)v85 + 19))
          {
            TRunGlue::FocusOnIndex(v85, 0);
            v87 = (unsigned __int16 *)(*((_QWORD *)v85 + 22) - 2 * *((_QWORD *)v85 + 20));
          }
          else
          {
            v87 = (unsigned __int16 *)(*((_QWORD *)v85 + 22) + 2 * *((_QWORD *)v85 + 20));
          }
          v15 = v210;
          v16 = v211;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          if (v86 <= 1)
            goto LABEL_258;
          v156 = *v87;
          v157 = 1;
          break;
        case 4:
          goto LABEL_104;
        case 6:
          v88 = (SFNTLookupTable *)*((_QWORD *)v210 + 12);
          if (v9 + 36 > (unint64_t)v88)
            goto LABEL_268;
          v237 = 0xAAAAAAAAAAAAFFFFLL;
          v238 = v18;
          v234[2] = 0xAAAAAAAAAAAAAAAALL;
          v235 = v18;
          v231 = 0xAAAAAAAAAAAAAAAALL;
          v233 = 0xAAAAAAAAAAAAFFFFLL;
          v230 = v18;
          v222 = (void ***)v210;
          v223 = v9;
          v224 = v9 + 12;
          v225 = v88;
          v226 = v24;
          v229[0] = TAATLookupTable::BadTable;
          v229[1] = 0;
          v232 = 0;
          v234[0] = TAATLookupTable::BadTable;
          v234[1] = 0;
          v236 = 0;
          v227 = bswap32(*(unsigned __int16 *)(v9 + 16)) >> 16;
          v228 = bswap32(*(unsigned __int16 *)(v9 + 18)) >> 16;
          TAATLookupTable::SetTable((uint64_t)v229, (const SFNTLookupTable *)(v9 + bswap32(*(_DWORD *)(v9 + 20))), v88);
          TAATLookupTable::SetTable((uint64_t)v234, (const SFNTLookupTable *)(v223 + bswap32(*(_DWORD *)(v9 + 24))), v88);
          *(_QWORD *)&v238 = v223 + bswap32(*(_DWORD *)(v9 + 28));
          *((_QWORD *)&v238 + 1) = v223 + bswap32(*(_DWORD *)(v9 + 32));
          if (v29 > 3)
          {
            *(_QWORD *)&v155 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v155 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v243[208] = v155;
            *(_OWORD *)&v243[224] = v155;
            *(_OWORD *)&v243[176] = v155;
            *(_OWORD *)&v243[192] = v155;
            *(_OWORD *)&v243[144] = v155;
            *(_OWORD *)&v243[160] = v155;
            *(_OWORD *)&v243[112] = v155;
            *(_OWORD *)&v243[128] = v155;
            *(_OWORD *)&v243[80] = v155;
            *(_OWORD *)&v243[96] = v155;
            *(_OWORD *)&v243[48] = v155;
            *(_OWORD *)&v243[64] = v155;
            *(_OWORD *)&v243[16] = v155;
            *(_OWORD *)&v243[32] = v155;
            *(_OWORD *)v243 = v155;
            v241 = 0;
            v242 = 0;
            v240 = 0;
            *(_QWORD *)&v243[240] = v243;
            std::vector<double,TInlineBufferAllocator<double,30ul>>::resize((uint64_t)&v240, v29);
            TAATKerxEngine::ProcessKerxIndexArrayWithTupleScalars(v210, v9 + 12, &v222, v29, (double *)v240, a2);
            v239 = (void **)&v240;
            std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&v239);
          }
          else
          {
            v241 = -1;
            v242 = -1;
            v240 = -1;
            TAATKerxEngine::ProcessKerxIndexArrayWithTupleScalars(v210, v9 + 12, &v222, v29, (double *)&v240, a2);
          }
          v16 = v211;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v15 = v210;
          goto LABEL_258;
        default:
          goto LABEL_258;
      }
      while (1)
      {
        GlyphID = TRunGlue::GetGlyphID(v85, v157);
        if ((_DWORD)GlyphID == 0xFFFF || (v159 = GlyphID, TRunGlue::IsDeleted(v85, v157)))
        {
          v159 = v156;
          v16 = v211;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        }
        else
        {
          v222 = (void ***)0xAAAAAAAAAAAAAAAALL;
          v160 = *(uint64_t (**)(_QWORD *, _QWORD, void ****))&v243[16];
          v161 = &v243[(*(uint64_t *)&v243[24] >> 1) + 16];
          if ((v243[24] & 1) != 0)
            v160 = *(uint64_t (**)(_QWORD *, _QWORD, void ****))(*v161 + *(unsigned int *)&v243[16]);
          v162 = (char *)v160(v161, (unsigned __int16)v156, &v222);
          if (!v162)
            goto LABEL_206;
          v163 = v222;
          v164 = &v162[(_QWORD)v222];
          if (v242 > (unint64_t)v162 || v164 < v162 || (unint64_t)v164 > *(_QWORD *)v243)
            goto LABEL_256;
          if (v222)
          {
            v167 = 0;
            do
            {
              v168 = *v162++;
              v167 = v168 | (v167 << 8);
              v163 = (void ***)((char *)v163 - 1);
            }
            while (v163);
          }
          else
          {
LABEL_206:
            v167 = 0;
          }
          v239 = (void **)0xAAAAAAAAAAAAAAAALL;
          v169 = *(uint64_t (**)(_QWORD *, uint64_t, void ***))&v243[72];
          v170 = &v243[(*(uint64_t *)&v243[80] >> 1) + 72];
          if ((v243[80] & 1) != 0)
            v169 = *(uint64_t (**)(_QWORD *, uint64_t, void ***))(*v170 + *(unsigned int *)&v243[72]);
          v171 = (char *)v169(v170, v159, &v239);
          if (v171)
          {
            v172 = v239;
            v173 = &v171[(_QWORD)v239];
            v175 = v242 > (unint64_t)v171 || v173 < v171 || (unint64_t)v173 > *(_QWORD *)v243;
            *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            if (v175)
            {
LABEL_261:
              v16 = v211;
              goto LABEL_257;
            }
            v176 = 0;
            if (v239)
            {
              do
              {
                v177 = *v171++;
                v176 = v177 | (v176 << 8);
                v172 = (void **)((char *)v172 - 1);
              }
              while (v172);
            }
          }
          else
          {
            v176 = 0;
            *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          }
          v178 = (_WORD *)(*(_QWORD *)&v243[128] + (v176 + v167));
          if (v242 > (unint64_t)v178 || (unint64_t)(v178 + 1) > *(_QWORD *)v243)
            goto LABEL_261;
          if (*v178)
          {
            TAATKerxEngine::HandleKern<TRunGlue::TGlyph>((_QWORD *)v240, (uint64_t)v85, v157, (int)bswap32((unsigned __int16)*v178) >> 16, *(int *)&v243[8]);
            *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *a2 = 1;
          }
          v16 = v211;
        }
        v15 = v210;
        ++v157;
        v156 = v159;
        if (v157 == v86)
          goto LABEL_258;
      }
    }
    if (v24 == 1)
    {
LABEL_48:
      v38 = (SFNTLookupTable *)*((_QWORD *)v15 + 12);
      if (v9 + 32 > (unint64_t)v38)
      {
LABEL_268:
        v204 = v15;
        v206 = TFont::DebugDescription(*(TFont **)(*(_QWORD *)v15 + 616));
        CFLog();

        v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v204 + 616) + 400);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v205 + 488))(v205, 1801810552);
        result = 0;
        *((_QWORD *)v204 + 11) = 0;
        return result;
      }
      *(_OWORD *)&v243[136] = v18;
      *(_OWORD *)&v243[152] = v18;
      *(_OWORD *)&v243[104] = v18;
      *(_OWORD *)&v243[120] = v18;
      *(_QWORD *)&v243[80] = *((_QWORD *)&v18 + 1);
      *(_OWORD *)&v243[88] = v18;
      *(_QWORD *)&v243[48] = *((_QWORD *)&v18 + 1);
      *(_OWORD *)&v243[56] = v18;
      *(_OWORD *)&v243[8] = v18;
      *(_QWORD *)&v243[24] = v18;
      v240 = (uint64_t)v15;
      v241 = v9;
      v242 = v9 + 12;
      *(_QWORD *)v243 = v38;
      *(_DWORD *)&v243[8] = v24;
      *(_QWORD *)&v243[32] = TAATLookupTable::BadTable;
      *(_QWORD *)&v243[40] = 0;
      *(_QWORD *)&v243[72] = 0;
      *(_WORD *)&v243[80] = -1;
      *(_WORD *)&v243[88] = bswap32(*(_DWORD *)(v9 + 12));
      *(_QWORD *)&v243[16] = v28 + bswap32(*(_DWORD *)(v9 + 20));
      *(_QWORD *)&v243[24] = v28 + bswap32(*(_DWORD *)(v9 + 24));
      TAATLookupTable::SetTable((uint64_t)&v243[32], (const SFNTLookupTable *)(v28 + bswap32(*(_DWORD *)(v9 + 16))), v38);
      v39 = 0;
      *(_WORD *)&v243[90] = 0;
      memset(&v243[96], 0, 64);
      *(_QWORD *)&v243[160] = -1;
      v40 = v242;
      v41 = *(_DWORD *)(v242 + 16);
      if ((*(_DWORD *)&v243[8] & 0x10000000) != 0)
        v42 = -1;
      else
        v42 = 1;
      v43 = *(TRunGlue **)v240;
      v217 = *(TRunGlue **)v240;
      if ((*(_DWORD *)&v243[8] & 0x10000000) != 0)
      {
        v39 = (void **)(TRunGlue::length(v217) - 1);
        v43 = *(TRunGlue **)v240;
      }
      v219 = v40 + bswap32(v41);
      v44 = TRunGlue::length(v43);
      v45 = 0;
      LOWORD(v46) = 0;
      *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      while (2)
      {
        if (v44 < 1)
        {
          if (((v44 == 0) & (v45 ^ 1)) == 0)
            goto LABEL_112;
        }
        else if ((v45 & 1) == 0)
        {
          v47 = TRunGlue::GetGlyphID(v217, (uint64_t)v39);
          if ((_DWORD)v47 == 0xFFFF)
          {
            v45 = 0;
            v52 = 2;
          }
          else
          {
            v48 = v47;
            v222 = (void ***)0xAAAAAAAAAAAAAAAALL;
            v49 = *(uint64_t (**)(_QWORD *, uint64_t, void ****))&v243[32];
            v50 = &v243[(*(uint64_t *)&v243[40] >> 1) + 32];
            if ((v243[40] & 1) != 0)
              v49 = *(uint64_t (**)(_QWORD *, uint64_t, void ****))(*v50 + *(unsigned int *)&v243[32]);
            v51 = (unsigned __int16 *)v49(v50, v48, &v222);
            v45 = 0;
            if (v51)
              v52 = bswap32(*v51) >> 16;
            else
              v52 = 1;
          }
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          goto LABEL_67;
        }
        v45 = 1;
        v52 = *(unsigned __int16 *)&v243[90];
LABEL_67:
        v53 = (unsigned __int16 *)(*(_QWORD *)&v243[16]
                                 + 2 * (*(unsigned __int16 *)&v243[88] * (unint64_t)(unsigned __int16)v46 + v52));
        v54 = v242 > (unint64_t)v53 || (unint64_t)(v53 + 1) > *(_QWORD *)v243;
        if (v54
          || ((v55 = bswap32(*v53) >> 16,
               v56 = *(_QWORD *)&v243[24],
               v57 = (unsigned __int16 *)(*(_QWORD *)&v243[24] + 6 * v55),
               v242 <= (unint64_t)v57)
            ? (v58 = (unint64_t)(v57 + 3) > *(_QWORD *)v243)
            : (v58 = 1),
              v58))
        {
LABEL_112:
          v4 = v207;
          v16 = v211;
          goto LABEL_257;
        }
        v59 = *v57;
        v60 = bswap32(*(unsigned __int16 *)(*(_QWORD *)&v243[24] + 6 * v55 + 2));
        if ((v60 & 0x80000000) != 0)
        {
          if (*(uint64_t *)&v243[160] <= 6)
            v61 = *(_QWORD *)&v243[160] + 1;
          else
            v61 = 0;
          *(_QWORD *)&v243[160] = v61;
          *(_QWORD *)&v243[8 * v61 + 96] = v39;
        }
        v62 = HIWORD(v60);
        if ((v60 & 0x20000000) != 0)
        {
          v239 = v39;
          v222 = &v239;
          v63 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>((uint64_t **)(v240 + 48), (uint64_t *)&v239, (uint64_t)&std::piecewise_construct, &v222);
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_BYTE *)v63 + 42) = 1;
          *((_WORD *)v63 + 20) = 0;
        }
        v64 = *(unsigned __int16 *)(v56 + 6 * v55 + 4);
        if (v64 != 0xFFFF)
        {
          v65 = *(_QWORD *)&v243[160];
          if ((*(_QWORD *)&v243[160] & 0x8000000000000000) == 0)
          {
            v66 = v219 + 2 * __rev16(v64);
            v67 = v242;
            v68 = *(_QWORD *)v243;
            v69 = v66 + 2;
            if (v242 > v66 || v69 > *(_QWORD *)v243)
              goto LABEL_112;
            while (1)
            {
              v71 = *(unsigned __int16 *)(v69 - 2);
              if (v71 == 0xFFFF)
                break;
              if (v65 >= 1)
                v72 = v65 - 1;
              else
                v72 = 7;
              if (*(_WORD *)(v69 - 2))
              {
                v73 = *(_QWORD *)&v243[8 * v65 + 96];
                if ((v73 & 0x8000000000000000) == 0)
                {
                  TAATKerxEngine::HandleKern<TRunGlue::TGlyph>((_QWORD *)v240, *(_QWORD *)v240, v73, (__int16)__rev16(v71), *(int *)&v243[8]);
                  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
                  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  *a2 = 1;
                  v67 = v242;
                  v68 = *(_QWORD *)v243;
                }
              }
              if (v67 <= v69)
              {
                v69 += 2;
                v65 = v72;
                if (v69 <= v68)
                  continue;
              }
              goto LABEL_112;
            }
          }
        }
        v46 = bswap32(v59) >> 16;
        if (v45)
          v74 = 0;
        else
          v74 = v42;
        if ((v62 & 0x4000) != 0)
          v74 = 0;
        v39 = (void **)((char *)v39 + v74);
        v44 -= (v62 & 0x4000) == 0;
        continue;
      }
    }
    if (v24 == 4)
    {
LABEL_104:
      v75 = (SFNTLookupTable *)*((_QWORD *)v15 + 12);
      if (v9 + 32 > (unint64_t)v75)
        goto LABEL_268;
      *(_QWORD *)&v243[80] = 0xAAAAAAAAAAAAFFFFLL;
      *(_OWORD *)&v243[88] = v18;
      *(_QWORD *)&v243[48] = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v243[56] = v18;
      *(_OWORD *)&v243[8] = v18;
      *(_QWORD *)&v243[24] = 0xAAAAAAAAAAAAAAAALL;
      v240 = (uint64_t)v15;
      v241 = v9;
      v242 = v9 + 12;
      *(_QWORD *)v243 = v75;
      *(_DWORD *)&v243[8] = v24;
      *(_QWORD *)&v243[32] = TAATLookupTable::BadTable;
      *(_QWORD *)&v243[40] = 0;
      *(_QWORD *)&v243[72] = 0;
      *(_WORD *)&v243[88] = bswap32(*(_DWORD *)(v9 + 12));
      *(_QWORD *)&v243[16] = v28 + bswap32(*(_DWORD *)(v9 + 20));
      *(_QWORD *)&v243[24] = v28 + bswap32(*(_DWORD *)(v9 + 24));
      TAATLookupTable::SetTable((uint64_t)&v243[32], (const SFNTLookupTable *)(v28 + bswap32(*(_DWORD *)(v9 + 16))), v75);
      *(_WORD *)&v243[90] = 0;
      *(_QWORD *)&v243[96] = -1;
      v76 = bswap32(*(_DWORD *)(v242 + 16));
      v77 = v76 & 0xC0000000;
      if ((v76 & 0xC0000000) == 0x40000000)
      {
        v89 = (id **)v240;
        if (*(_QWORD *)(v240 + 400))
          goto LABEL_123;
        v90 = (TAATAnkrTable *)operator new(0x58uLL, MEMORY[0x1E0DE4E10]);
        v91 = (id *)v90;
        if (v90)
          TAATAnkrTable::TAATAnkrTable(v90, (const TFont *)(*v89)[77]);
        std::unique_ptr<TAATAnkrTable>::reset[abi:nn180100](v89 + 50, v91);
        v16 = v211;
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        if (v89[50])
        {
LABEL_123:
          v92 = 1;
          if ((*(_DWORD *)&v243[8] & 0x10000000) != 0)
            v92 = -1;
          v220 = v92;
          v93 = *(TRunGlue **)v240;
          v212 = *(_DWORD *)&v243[8];
          v208 = v23;
          if ((*(_DWORD *)&v243[8] & 0x10000000) != 0)
            v94 = TRunGlue::length(v93) - 1;
          else
            v94 = 0;
          v214 = v76 & 0xFFFFFF;
          v95 = TRunGlue::length(*(TRunGlue **)v240);
          v96 = 0;
          LOWORD(v97) = 0;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v213 = v76 & 0xC0000000;
          while (2)
          {
            if (v95 < 1)
            {
              if ((v95 != 0) | v96 & 1)
                goto LABEL_183;
            }
            else if ((v96 & 1) == 0)
            {
              v98 = TRunGlue::GetGlyphID(v93, v94);
              if ((_DWORD)v98 == 0xFFFF)
              {
                v96 = 0;
                v103 = 2;
              }
              else
              {
                v99 = v98;
                v222 = (void ***)0xAAAAAAAAAAAAAAAALL;
                v100 = *(uint64_t (**)(_QWORD *, uint64_t, void ****))&v243[32];
                v101 = &v243[(*(uint64_t *)&v243[40] >> 1) + 32];
                if ((v243[40] & 1) != 0)
                  v100 = *(uint64_t (**)(_QWORD *, uint64_t, void ****))(*v101 + *(unsigned int *)&v243[32]);
                v102 = (unsigned __int16 *)v100(v101, v99, &v222);
                v96 = 0;
                if (v102)
                  v103 = bswap32(*v102) >> 16;
                else
                  v103 = 1;
              }
              *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
LABEL_141:
              v104 = (unsigned __int16 *)(*(_QWORD *)&v243[16]
                                        + 2
                                        * (*(unsigned __int16 *)&v243[88] * (unint64_t)(unsigned __int16)v97
                                         + v103));
              v105 = v242 > (unint64_t)v104 || (unint64_t)(v104 + 1) > *(_QWORD *)v243;
              if (v105
                || ((v106 = bswap32(*v104) >> 16,
                     v107 = (unsigned __int16 *)(*(_QWORD *)&v243[24] + 6 * v106),
                     v242 <= (unint64_t)v107)
                  ? (v108 = (unint64_t)(v107 + 3) > *(_QWORD *)v243)
                  : (v108 = 1),
                    v108))
              {
LABEL_183:
                v15 = v210;
                v16 = v211;
                v4 = v207;
                v23 = v208;
                goto LABEL_258;
              }
              v109 = *v107;
              v110 = (int)bswap32(*(unsigned __int16 *)(*(_QWORD *)&v243[24] + 6 * v106 + 2)) >> 16;
              if (v110 < 0)
                *(_QWORD *)&v243[96] = v94;
              v111 = *(unsigned __int16 *)(*(_QWORD *)&v243[24] + 6 * v106 + 4);
              if (v111 == 0xFFFF || *(_QWORD *)&v243[96] == -1)
                goto LABEL_180;
              v112 = __rev16(v111);
              v216 = v109;
              v218 = v96;
              if (v77 == 0x40000000)
              {
                v118 = v242 + v214;
                v119 = (unsigned __int16 *)(v242 + v214 + 4 * v112);
                if (v242 > (unint64_t)v119 || (unint64_t)(v119 + 2) > *(_QWORD *)v243)
                  goto LABEL_183;
                v121 = v240;
                v122 = bswap32(*v119) >> 16;
                v123 = TRunGlue::GetGlyphID(*(TRunGlue **)v240, *(uint64_t *)&v243[96]);
                ControlPointCoordinates = TAATAnkrTable::GetControlPointCoordinates(*(TAATAnkrTable **)(v121 + 400), v123, v122);
                v126 = v125;
                v127 = bswap32(*(unsigned __int16 *)(v118 + 4 * v112 + 2)) >> 16;
                v128 = v240;
                v129 = TRunGlue::GetGlyphID(v93, v94);
                v130 = TAATAnkrTable::GetControlPointCoordinates(*(TAATAnkrTable **)(v128 + 400), v129, v127);
              }
              else
              {
                if (v77)
                {
                  if (v77 != 0x80000000)
                    goto LABEL_183;
                  v113 = (unsigned __int16 *)(v242 + v214 + 8 * v112);
                  if (v242 > (unint64_t)v113 || (unint64_t)(v113 + 4) > *(_QWORD *)v243)
                    goto LABEL_183;
                  v115 = (unsigned __int16 *)(v242 + v214 + 8 * v112);
                  v116 = (bswap32(*v113) >> 16) - (bswap32(v115[2]) >> 16);
                  v117 = (bswap32(v115[1]) >> 16) - (bswap32(v115[3]) >> 16);
LABEL_172:
                  v142 = v240;
                  v143 = *(TRunGlue **)v240;
                  v144 = *(_QWORD *)&v243[96];
                  v145 = TRunGlue::GetOrigin(*(TRunGlue **)v240, *(uint64_t *)&v243[96])
                       + *(double *)(v142 + 8) * (double)(__int16)v116;
                  v147 = v146 + *(double *)(v142 + 16) * (double)(__int16)v117;
                  TRunGlue::ClearGlyphCombiningMark(v93, v94);
                  if ((v212 & 0x10000000) != 0)
                  {
                    if (v94 != v144)
                    {
                      v151 = v94;
                      do
                      {
                        v145 = v145 + TRunGlue::GetAdvance(v93, v151);
                        v147 = v147 + v152;
                        ++v151;
                      }
                      while (v144 != v151);
                    }
                  }
                  else
                  {
                    v148 = *MEMORY[0x1E0C9D820];
                    v149 = *(double *)(MEMORY[0x1E0C9D820] + 8);
                    if (v144 < v94)
                    {
                      do
                      {
                        v148 = v148 + TRunGlue::GetAdvance(v143, v144);
                        v149 = v149 + v150;
                        ++v144;
                      }
                      while (v94 != v144);
                    }
                    v145 = v145 - v148;
                    v147 = v147 - v149;
                  }
                  v250.x = v145;
                  v250.y = v147;
                  TRunGlue::SetOrigin(v93, v94, v250);
                  *a2 = 1;
                  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
                  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  v77 = v213;
                  v109 = v216;
                  v96 = v218;
LABEL_180:
                  v97 = bswap32(v109) >> 16;
                  v153 = (v110 & 0x4000) == 0;
                  v154 = v220;
                  if ((((unint64_t)v95 > 1) & v153) == 0)
                    v154 = 0;
                  v94 += v154;
                  v95 -= v153;
                  continue;
                }
                v132 = v242 + v214;
                v133 = (unsigned __int16 *)(v242 + v214 + 4 * v112);
                if (v242 > (unint64_t)v133 || (unint64_t)(v133 + 2) > *(_QWORD *)v243)
                  goto LABEL_183;
                v135 = v240;
                v136 = bswap32(*v133) >> 16;
                v137 = TRunGlue::GetGlyphID(*(TRunGlue **)v240, *(uint64_t *)&v243[96]);
                ControlPointCoordinates = TAATControlPointAccess::GetControlPointCoordinates(*(TAATControlPointAccess **)(v135 + 392), v137, v136);
                v126 = v138;
                v139 = bswap32(*(unsigned __int16 *)(v132 + 4 * v112 + 2)) >> 16;
                v140 = v240;
                v141 = TRunGlue::GetGlyphID(v93, v94);
                v130 = TAATControlPointAccess::GetControlPointCoordinates(*(TAATControlPointAccess **)(v140 + 392), v141, v139);
              }
              v116 = (int)(ControlPointCoordinates - v130);
              v117 = (int)(v126 - v131);
              goto LABEL_172;
            }
            break;
          }
          v96 = 1;
          v103 = *(unsigned __int16 *)&v243[90];
          goto LABEL_141;
        }
      }
      else
      {
        if (v77)
          goto LABEL_123;
        v78 = (_QWORD *)v240;
        if (*(_QWORD *)(v240 + 392))
          goto LABEL_123;
        v79 = (double *)(v240 + 392);
        v80 = (TAATControlPointAccess *)operator new(0x448uLL, MEMORY[0x1E0DE4E10]);
        if (v80)
        {
          TAATControlPointAccess::TAATControlPointAccess(v80, *(const TBaseFont **)(*(_QWORD *)(*v78 + 616) + 400));
          v81 = (void **)v78[49];
          v78[49] = v82;
          if (!v81)
            goto LABEL_123;
          std::default_delete<TAATControlPointAccess>::operator()[abi:nn180100]((uint64_t)(v78 + 49), v81);
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v16 = v211;
          if (*(_QWORD *)v79)
            goto LABEL_123;
        }
        else
        {
          *v79 = 0.0;
LABEL_256:
          v16 = v211;
          *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        }
      }
LABEL_257:
      v15 = v210;
    }
LABEL_258:
    ++v16;
    v9 = v23;
  }
  while (v16 != v215);
  v202 = (char *)v15 + 72;
  result = TKerningEngineImplementation::MergeDeltas((TRunGlue **)v15, (_QWORD *)v15 + 3, (_QWORD *)v15 + 6, a2, (_BYTE *)v15 + 72);
  if ((_DWORD)result)
  {
    if (*v202)
      return TKerningEngineImplementation::TransferDeletedAdvances((TRunGlue **)v210);
    return 1;
  }
  return result;
}

void TAATKerxEngine::GetTupleScalars(TAATKerxEngine *this, uint64_t a2, double *a3)
{
  uint64_t v5;
  os_unfair_lock_s *v6;
  unint64_t v7;
  const void *v8;
  const void **v9;

  *a3 = 1.0;
  v5 = *(_QWORD *)(*(_QWORD *)this + 616);
  v6 = (os_unfair_lock_s *)(v5 + 416);
  os_unfair_lock_lock_with_options();
  v7 = a2 - 1;
  v8 = *(const void **)(v5 + 424);
  if (v7 > (uint64_t)(*(_QWORD *)(v5 + 432) - (_QWORD)v8) >> 3)
  {
    v9 = (const void **)(v5 + 424);
    std::vector<double>::resize((uint64_t)v9, v7);
    FPFontGetVariationScalars();
    v8 = *v9;
LABEL_4:
    memmove(a3 + 1, v8, 8 * v7);
    goto LABEL_5;
  }
  if (v7)
    goto LABEL_4;
LABEL_5:
  os_unfair_lock_unlock(v6);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void TAATKerxEngine::ProcessKerxIndexArrayWithTupleScalars(TAATKerxEngine *a1, uint64_t a2, _QWORD ***a3, unsigned int a4, double *a5, _BYTE *a6)
{
  BOOL v10;
  char v11;
  TRunGlue *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  TRunGlue *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  unsigned __int16 *v39;
  _QWORD **v40;
  unint64_t v41;
  _BOOL4 v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  BOOL v46;
  BOOL v48;
  unint64_t v49;
  unsigned int v50;
  double *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t GlyphID;
  uint64_t v60;
  _QWORD **v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  int v68;
  _QWORD **v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  unint64_t v73;
  int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  _QWORD **v78;
  _QWORD **v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  BOOL v85;
  BOOL v87;
  unint64_t v88;
  unsigned int v89;
  double *v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  double v94;
  unsigned __int16 *v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v101;
  unint64_t v102;

  if (a4)
  {
    v99 = a4;
    TAATKerxEngine::GetTupleScalars(a1, a4, a5);
  }
  else
  {
    v99 = 0;
  }
  if (*((_WORD *)a3 + 18))
    v10 = *((unsigned __int16 *)a3 + 19) == 0;
  else
    v10 = 1;
  v11 = v10;
  if ((*(_BYTE *)(a2 + 3) & 1) != 0)
  {
    if ((v11 & 1) == 0)
    {
      v15 = (TRunGlue *)**a3;
      v16 = TRunGlue::length(v15);
      if (*((_QWORD *)v15 + 19))
      {
        TRunGlue::FocusOnIndex(v15, 0);
        v17 = (unsigned __int16 *)(*((_QWORD *)v15 + 22) - 2 * *((_QWORD *)v15 + 20));
      }
      else
      {
        v17 = (unsigned __int16 *)(*((_QWORD *)v15 + 22) + 2 * *((_QWORD *)v15 + 20));
      }
      if (v16 >= 2)
      {
        v56 = *v17;
        v57 = v99;
        if (v99 <= 1)
          v57 = 1;
        v98 = v57;
        for (i = 1; i != v16; ++i)
        {
          GlyphID = TRunGlue::GetGlyphID(v15, i);
          if ((_DWORD)GlyphID == 0xFFFF || (v60 = GlyphID, TRunGlue::IsDeleted(v15, i)))
          {
            v60 = v56;
          }
          else
          {
            v102 = 0xAAAAAAAAAAAAAAAALL;
            v61 = a3[5];
            v62 = (uint64_t)a3[6];
            v63 = (_QWORD ***)((char *)a3 + (v62 >> 1) + 40);
            if ((v62 & 1) != 0)
              v61 = *(_QWORD ***)(*v63 + v61);
            v64 = (unsigned __int8 *)((uint64_t (*)(_QWORD *, _QWORD, unint64_t *))v61)(v63, (unsigned __int16)v56, &v102);
            v65 = v102;
            v66 = 0;
            if (v64)
              v67 = v102 == 0;
            else
              v67 = 1;
            if (!v67)
            {
              do
              {
                v68 = *v64++;
                v66 = v68 | (v66 << 8);
                --v65;
              }
              while (v65);
            }
            v101 = 0xAAAAAAAAAAAAAAAALL;
            v69 = a3[12];
            v70 = (uint64_t)a3[13];
            v71 = (_QWORD ***)((char *)a3 + (v70 >> 1) + 96);
            if ((v70 & 1) != 0)
              v69 = *(_QWORD ***)(*v71 + v69);
            v72 = (unsigned __int8 *)((uint64_t (*)(_QWORD *, uint64_t, unint64_t *))v69)(v71, v60, &v101);
            v73 = v101;
            v74 = 0;
            if (v72)
              v75 = v101 == 0;
            else
              v75 = 1;
            if (!v75)
            {
              do
              {
                v76 = *v72++;
                v74 = v76 | (v74 << 8);
                --v73;
              }
              while (v73);
            }
            v77 = (v74 + v66);
            if (v74 + v66)
            {
              v78 = a3[19];
              v79 = a3[2];
              v80 = (unint64_t)a3[3];
              if (a4)
              {
                v81 = (unsigned int *)v78 + v77;
                if (v79 > (_QWORD **)v81 || (unint64_t)(v81 + 1) > v80)
                  return;
                v83 = (unsigned __int16 *)((char *)a3[20] + bswap32(*v81));
                v84 = &v83[v99];
                v85 = v79 <= (_QWORD **)v83 && v84 >= v83;
                if (!v85 || (unint64_t)v84 > v80)
                {
                  v87 = (unint64_t)(v83 + 1) > v80 || v79 > (_QWORD **)v83;
                  v88 = (v80 - (unint64_t)v83) >> 1;
                  if (v87)
                    v88 = 0;
                  if (v88 != v99)
                    return;
                }
                LOWORD(v89) = 0;
                v90 = a5;
                v91 = v98;
                do
                {
                  v92 = *v83++;
                  v93 = bswap32(v92);
                  v94 = *v90++;
                  v89 = (int)(round(v94 * (double)(v93 >> 16)) + (double)(__int16)v89);
                  --v91;
                }
                while (v91);
              }
              else
              {
                v95 = (unsigned __int16 *)v78 + v77;
                if (v79 > (_QWORD **)v95 || (unint64_t)(v95 + 1) > v80)
                  return;
                v89 = bswap32(*v95) >> 16;
              }
              if ((_WORD)v89)
              {
                TAATKerxEngine::HandleKern<TRunGlue::TGlyph>(*a3, (uint64_t)v15, i, (__int16)v89, *((_DWORD *)a3 + 8));
                *a6 = 1;
              }
            }
          }
          v56 = v60;
        }
      }
    }
  }
  else if ((v11 & 1) == 0)
  {
    v12 = (TRunGlue *)**a3;
    v13 = TRunGlue::length(v12);
    if (*((_QWORD *)v12 + 19))
    {
      TRunGlue::FocusOnIndex(v12, 0);
      v14 = (unsigned __int16 *)(*((_QWORD *)v12 + 22) - 2 * *((_QWORD *)v12 + 20));
    }
    else
    {
      v14 = (unsigned __int16 *)(*((_QWORD *)v12 + 22) + 2 * *((_QWORD *)v12 + 20));
    }
    if (v13 >= 2)
    {
      v18 = *v14;
      v19 = v99;
      if (v99 <= 1)
        v19 = 1;
      v97 = v19;
      for (j = 1; j != v13; ++j)
      {
        v21 = TRunGlue::GetGlyphID(v12, j);
        if ((_DWORD)v21 == 0xFFFF || (v22 = v21, TRunGlue::IsDeleted(v12, j)))
        {
          v22 = v18;
        }
        else
        {
          v102 = 0xAAAAAAAAAAAAAAAALL;
          v23 = a3[5];
          v24 = (uint64_t)a3[6];
          v25 = (_QWORD ***)((char *)a3 + (v24 >> 1) + 40);
          if ((v24 & 1) != 0)
            v23 = *(_QWORD ***)(*v25 + v23);
          v26 = (unsigned __int8 *)((uint64_t (*)(_QWORD *, _QWORD, unint64_t *))v23)(v25, (unsigned __int16)v18, &v102);
          v27 = v102;
          v28 = 0;
          if (v26)
            v29 = v102 == 0;
          else
            v29 = 1;
          if (!v29)
          {
            do
            {
              v30 = *v26++;
              v28 = v30 | (v28 << 8);
              --v27;
            }
            while (v27);
          }
          v101 = 0xAAAAAAAAAAAAAAAALL;
          v31 = a3[12];
          v32 = (uint64_t)a3[13];
          v33 = (_QWORD ***)((char *)a3 + (v32 >> 1) + 96);
          if ((v32 & 1) != 0)
            v31 = *(_QWORD ***)(*v33 + v31);
          v34 = (unsigned __int8 *)((uint64_t (*)(_QWORD *, uint64_t, unint64_t *))v31)(v33, v22, &v101);
          v35 = v101;
          v36 = 0;
          if (v34)
            v37 = v101 == 0;
          else
            v37 = 1;
          if (!v37)
          {
            do
            {
              v38 = *v34++;
              v36 = v38 | (v36 << 8);
              --v35;
            }
            while (v35);
          }
          if (v36 + v28)
          {
            v39 = (unsigned __int16 *)a3[19] + (v36 + v28);
            v40 = a3[2];
            v41 = (unint64_t)a3[3];
            v43 = v40 <= (_QWORD **)v39 && (unint64_t)(v39 + 1) <= v41;
            if (a4)
            {
              if (!v43)
                return;
              v44 = (unsigned __int16 *)((char *)a3[20] + (bswap32(*v39) >> 16));
              v45 = &v44[v99];
              v46 = v40 <= (_QWORD **)v44 && v45 >= v44;
              if (!v46 || (unint64_t)v45 > v41)
              {
                v48 = (unint64_t)(v44 + 1) > v41 || v40 > (_QWORD **)v44;
                v49 = (v41 - (unint64_t)v44) >> 1;
                if (v48)
                  v49 = 0;
                if (v49 != v99)
                  return;
              }
              LOWORD(v50) = 0;
              v51 = a5;
              v52 = v97;
              do
              {
                v53 = *v44++;
                v54 = bswap32(v53);
                v55 = *v51++;
                v50 = (int)(round(v55 * (double)(v54 >> 16)) + (double)(__int16)v50);
                --v52;
              }
              while (v52);
            }
            else
            {
              if (!v43)
                return;
              v50 = bswap32(*v39) >> 16;
            }
            if ((_WORD)v50)
            {
              TAATKerxEngine::HandleKern<TRunGlue::TGlyph>(*a3, (uint64_t)v12, j, (__int16)v50, *((_DWORD *)a3 + 8));
              *a6 = 1;
            }
          }
        }
        v18 = v22;
      }
    }
  }
}

void TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInVector>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  TRunGlue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  double *v23;
  double *v24;
  unsigned int v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  double v38;
  TRunGlue **v39;
  char *v40;
  uint64_t *v41;
  TRunGlue *v42;
  uint64_t **v43;
  void *v44;
  uint64_t **v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  TRunGlue *v53;
  TRunGlue *v54;
  char *v55;
  void *v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;

  if (!*(_QWORD *)(a1 + 64))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(TRunGlue ***)a1;
  v6 = *((_QWORD *)v5 + 22);
  v7 = *((_QWORD *)v5 + 20);
  v8 = TRunGlue::length(v5);
  if (v8 < 2)
    return;
  v9 = v8;
  v10 = v4 + 16;
  v11 = (unsigned __int16 *)(v6 + 2 * v7);
  v12 = *v11;
  v13 = v4 + 18;
  v14 = 1;
  v15 = &std::piecewise_construct;
  while (1)
  {
    v16 = v11[v14];
    if ((_DWORD)v16 == 0xFFFF)
    {
      v16 = v12;
      goto LABEL_16;
    }
    if (*(unsigned __int16 *)(a1 + 58) >= (unsigned __int16)v12)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v12))
      {
        v17 = *(unsigned __int16 *)(a1 + 56);
        if (v17 > (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v12) - 1))
          break;
      }
    }
LABEL_16:
    ++v14;
    v12 = v16;
    if (v14 == v9)
      return;
  }
  v18 = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v12) - 1;
  v19 = (unsigned __int16 *)(v13 + 6 * v18);
  while (1)
  {
    v20 = bswap32(*(v19 - 1)) >> 16;
    if (v20 != (unsigned __int16)v12)
      break;
    if (v16 <= bswap32(*v19) >> 16)
      goto LABEL_18;
LABEL_13:
    ++v18;
    v19 += 3;
    if (v17 == v18)
      goto LABEL_16;
  }
  if (v20 < (unsigned __int16)v12)
    goto LABEL_13;
LABEL_18:
  v21 = v18;
  v22 = (unsigned __int16 *)(v10 + 6 * v18);
  if ((unsigned __int16)v12 != bswap32(*v22) >> 16 || (_DWORD)v16 != bswap32(v22[1]) >> 16)
    goto LABEL_16;
  v23 = *(double **)(a1 + 72);
  v24 = *(double **)(a1 + 80);
  v25 = bswap32(*(unsigned __int16 *)(v10 + 6 * v21 + 4)) >> 16;
  if (v23 == v24)
    goto LABEL_39;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = (char *)(*(_QWORD *)(a1 + 8) + v25);
  v28 = (char *)v24 - (char *)v23;
  v29 = v24 - v23;
  v30 = *(_QWORD *)(a1 + 24);
  v31 = &v27[v28 >> 2];
  if (v26 <= (unint64_t)v27 && v31 >= v27 && (unint64_t)v31 <= v30)
    goto LABEL_36;
  v34 = (unint64_t)(v27 + 2) > v30 || v26 > (unint64_t)v27;
  v35 = (v30 - (unint64_t)v27) >> 1;
  if (v34)
    v35 = 0;
  if (v35 == v29)
  {
LABEL_36:
    LOWORD(v25) = 0;
    if (v29 <= 1)
      v29 = 1;
    do
    {
      v36 = *(unsigned __int16 *)v27;
      v27 += 2;
      v37 = bswap32(v36);
      v38 = *v23++;
      v25 = (int)(round(v38 * (double)(v37 >> 16)) + (double)(__int16)v25);
      --v29;
    }
    while (v29);
LABEL_39:
    if ((_WORD)v25)
    {
      v39 = *(TRunGlue ***)a1;
      if ((*(_BYTE *)(a1 + 35) & 0x40) != 0)
      {
        v59 = v10;
        v43 = (uint64_t **)(v39 + 6);
        v61 = v14;
        v62 = &v61;
        if ((unsigned __int16)v25 == 0x8000)
        {
          v44 = v15;
          v45 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(v43, &v61, (uint64_t)v15, &v62);
          v15 = v44;
          *((_BYTE *)v45 + 42) = 1;
          *((_WORD *)v45 + 20) = 0;
        }
        else
        {
          v56 = v15;
          v57 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(v43, &v61, (uint64_t)v15, &v62);
          v15 = v56;
          *((_WORD *)v57 + 20) += v25;
        }
        v10 = v59;
      }
      else
      {
        v40 = (char *)v39[5];
        v41 = (uint64_t *)v39[4];
        if (v41 >= (uint64_t *)v40)
        {
          v46 = (char *)v39[3];
          v58 = ((char *)v41 - v46) >> 4;
          v60 = v10;
          v47 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60)
            abort();
          v48 = v40 - v46;
          if (v48 >> 3 > v47)
            v47 = v48 >> 3;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
            v49 = 0xFFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)(v39 + 5), v49);
          v52 = &v51[16 * v58];
          *(_QWORD *)v52 = v14;
          *((_WORD *)v52 + 4) = v25;
          v54 = v39[3];
          v53 = v39[4];
          v55 = v52;
          if (v53 != v54)
          {
            do
            {
              *((_OWORD *)v55 - 1) = *((_OWORD *)v53 - 1);
              v55 -= 16;
              v53 = (TRunGlue *)((char *)v53 - 16);
            }
            while (v53 != v54);
            v53 = v39[3];
          }
          v42 = (TRunGlue *)(v52 + 16);
          v39[3] = (TRunGlue *)v55;
          v39[4] = (TRunGlue *)(v52 + 16);
          v39[5] = (TRunGlue *)&v51[16 * v50];
          if (v53)
            operator delete(v53);
          v10 = v60;
          v15 = &std::piecewise_construct;
        }
        else
        {
          *v41 = v14;
          *((_WORD *)v41 + 4) = v25;
          v42 = (TRunGlue *)(v41 + 2);
        }
        v39[4] = v42;
      }
      *a2 = 1;
    }
    goto LABEL_16;
  }
}

void TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyphInSingleRun>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  TRunGlue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned __int16 *v19;
  double *v20;
  double *v21;
  unsigned int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  double v35;
  TRunGlue **v36;
  char *v37;
  uint64_t *v38;
  TRunGlue *v39;
  uint64_t **v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  TRunGlue *v48;
  TRunGlue *v49;
  char *v50;
  uint64_t v51;
  TRunGlue **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;

  if (!*(_QWORD *)(a1 + 64))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(TRunGlue ***)a1;
  v6 = *((_QWORD *)v5 + 22);
  v7 = *((_QWORD *)v5 + 20);
  v8 = TRunGlue::length(v5);
  if (v8 < 2)
    return;
  v9 = v8;
  v53 = v4 + 16;
  v10 = (unsigned __int16 *)(v6 + 2 * v7);
  v11 = *v10;
  v12 = v4 + 18;
  v13 = 1;
  while (1)
  {
    v14 = v10[v13];
    if ((_DWORD)v14 == 0xFFFF || TRunGlue::IsDeleted(v5, v13))
    {
      v14 = v11;
      goto LABEL_7;
    }
    if (*(unsigned __int16 *)(a1 + 58) >= (unsigned __int16)v11)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v11))
      {
        v15 = *(unsigned __int16 *)(a1 + 56);
        if (v15 > (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v11) - 1))
          break;
      }
    }
LABEL_7:
    ++v13;
    v11 = v14;
    if (v13 == v9)
      return;
  }
  v16 = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2 * (unsigned __int16)v11) - 1;
  v17 = (unsigned __int16 *)(v12 + 6 * v16);
  while (1)
  {
    v18 = bswap32(*(v17 - 1)) >> 16;
    if (v18 != (unsigned __int16)v11)
      break;
    if (v14 <= bswap32(*v17) >> 16)
      goto LABEL_19;
LABEL_17:
    ++v16;
    v17 += 3;
    if (v15 == v16)
      goto LABEL_7;
  }
  if (v18 < (unsigned __int16)v11)
    goto LABEL_17;
LABEL_19:
  v19 = (unsigned __int16 *)(v53 + 6 * v16);
  if ((unsigned __int16)v11 != bswap32(*v19) >> 16 || (_DWORD)v14 != bswap32(v19[1]) >> 16)
    goto LABEL_7;
  v20 = *(double **)(a1 + 72);
  v21 = *(double **)(a1 + 80);
  v22 = bswap32(*(unsigned __int16 *)(v53 + 6 * v16 + 4)) >> 16;
  if (v20 == v21)
    goto LABEL_40;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = (char *)(*(_QWORD *)(a1 + 8) + v22);
  v25 = (char *)v21 - (char *)v20;
  v26 = v21 - v20;
  v27 = *(_QWORD *)(a1 + 24);
  v28 = &v24[v25 >> 2];
  if (v23 <= (unint64_t)v24 && v28 >= v24 && (unint64_t)v28 <= v27)
    goto LABEL_37;
  v31 = (unint64_t)(v24 + 2) > v27 || v23 > (unint64_t)v24;
  v32 = (v27 - (unint64_t)v24) >> 1;
  if (v31)
    v32 = 0;
  if (v32 == v26)
  {
LABEL_37:
    LOWORD(v22) = 0;
    if (v26 <= 1)
      v26 = 1;
    do
    {
      v33 = *(unsigned __int16 *)v24;
      v24 += 2;
      v34 = bswap32(v33);
      v35 = *v20++;
      v22 = (int)(round(v35 * (double)(v34 >> 16)) + (double)(__int16)v22);
      --v26;
    }
    while (v26);
LABEL_40:
    if ((_WORD)v22)
    {
      v36 = *(TRunGlue ***)a1;
      if ((*(_BYTE *)(a1 + 35) & 0x40) != 0)
      {
        v54 = v13;
        v55 = &v54;
        v40 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>((uint64_t **)v36 + 6, &v54, (uint64_t)&std::piecewise_construct, &v55);
        if ((unsigned __int16)v22 == 0x8000)
        {
          *((_BYTE *)v40 + 42) = 1;
          *((_WORD *)v40 + 20) = 0;
        }
        else
        {
          *((_WORD *)v40 + 20) += v22;
        }
      }
      else
      {
        v37 = (char *)v36[5];
        v38 = (uint64_t *)v36[4];
        if (v38 >= (uint64_t *)v37)
        {
          v41 = (char *)v36[3];
          v51 = ((char *)v38 - v41) >> 4;
          v52 = *(TRunGlue ***)a1;
          v42 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 60)
            abort();
          v43 = v37 - v41;
          if (v43 >> 3 > v42)
            v42 = v43 >> 3;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)(v36 + 5), v44);
          v36 = v52;
          v47 = &v46[16 * v51];
          *(_QWORD *)v47 = v13;
          *((_WORD *)v47 + 4) = v22;
          v49 = v52[3];
          v48 = v52[4];
          v50 = v47;
          if (v48 != v49)
          {
            do
            {
              *((_OWORD *)v50 - 1) = *((_OWORD *)v48 - 1);
              v50 -= 16;
              v48 = (TRunGlue *)((char *)v48 - 16);
            }
            while (v48 != v49);
            v48 = v52[3];
          }
          v39 = (TRunGlue *)(v47 + 16);
          v52[3] = (TRunGlue *)v50;
          v52[4] = (TRunGlue *)(v47 + 16);
          v52[5] = (TRunGlue *)&v46[16 * v45];
          if (v48)
          {
            operator delete(v48);
            v36 = v52;
          }
        }
        else
        {
          *v38 = v13;
          *((_WORD *)v38 + 4) = v22;
          v39 = (TRunGlue *)(v38 + 2);
        }
        v36[4] = v39;
      }
      *a2 = 1;
    }
    goto LABEL_7;
  }
}

void TAATKerxEngine::KerxOrderedList::ProcessGlyphsT<TRunGlue::TGlyph>(_QWORD **a1, _BYTE *a2)
{
  _QWORD *v4;
  TRunGlue *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t GlyphID;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 v15;
  char *v16;
  unsigned int v17;
  unsigned __int16 *v18;
  double *v19;
  double *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  double v34;

  if (!a1[8])
    return;
  v4 = a1[2];
  v5 = (TRunGlue *)**a1;
  v6 = TRunGlue::length(v5);
  if (*((_QWORD *)v5 + 19))
  {
    TRunGlue::FocusOnIndex(v5, 0);
    v7 = (unsigned __int16 *)(*((_QWORD *)v5 + 22) - 2 * *((_QWORD *)v5 + 20));
  }
  else
  {
    v7 = (unsigned __int16 *)(*((_QWORD *)v5 + 22) + 2 * *((_QWORD *)v5 + 20));
  }
  if (v6 < 2)
    return;
  v8 = v4 + 2;
  v9 = (char *)v4 + 18;
  v10 = *v7;
  v11 = 1;
  while (1)
  {
    GlyphID = TRunGlue::GetGlyphID(v5, v11);
    if ((_DWORD)GlyphID == 0xFFFF || (v13 = GlyphID, TRunGlue::IsDeleted(v5, v11)))
    {
      v13 = v10;
      goto LABEL_10;
    }
    if (*((unsigned __int16 *)a1 + 29) >= (unsigned __int16)v10)
    {
      if (*((_WORD *)a1[8] + (unsigned __int16)v10))
      {
        v14 = *((unsigned __int16 *)a1 + 28);
        if (v14 > (unsigned __int16)(*((_WORD *)a1[8] + (unsigned __int16)v10) - 1))
          break;
      }
    }
LABEL_10:
    ++v11;
    v10 = v13;
    if (v11 == v6)
      return;
  }
  v15 = *((_WORD *)a1[8] + (unsigned __int16)v10) - 1;
  v16 = &v9[6 * v15];
  while (1)
  {
    v17 = bswap32(*((unsigned __int16 *)v16 - 1)) >> 16;
    if (v17 != (unsigned __int16)v10)
      break;
    if (v13 <= bswap32(*(unsigned __int16 *)v16) >> 16)
      goto LABEL_22;
LABEL_20:
    ++v15;
    v16 += 6;
    if (v14 == v15)
      goto LABEL_10;
  }
  if (v17 < (unsigned __int16)v10)
    goto LABEL_20;
LABEL_22:
  v18 = (unsigned __int16 *)v8 + 3 * v15;
  if ((unsigned __int16)v10 != bswap32(*v18) >> 16 || (_DWORD)v13 != bswap32(v18[1]) >> 16)
    goto LABEL_10;
  v19 = (double *)a1[9];
  v20 = (double *)a1[10];
  v21 = bswap32(*((unsigned __int16 *)v8 + 3 * v15 + 2)) >> 16;
  if (v19 == v20)
    goto LABEL_43;
  v22 = (char *)a1[2];
  v23 = (char *)a1[1] + v21;
  v24 = (char *)v20 - (char *)v19;
  v25 = v20 - v19;
  v26 = (unint64_t)a1[3];
  v27 = &v23[v24 >> 2];
  if (v22 <= v23 && v27 >= v23 && (unint64_t)v27 <= v26)
    goto LABEL_40;
  v30 = (unint64_t)(v23 + 2) > v26 || v22 > v23;
  v31 = (v26 - (unint64_t)v23) >> 1;
  if (v30)
    v31 = 0;
  if (v31 == v25)
  {
LABEL_40:
    LOWORD(v21) = 0;
    if (v25 <= 1)
      v25 = 1;
    do
    {
      v32 = *(unsigned __int16 *)v23;
      v23 += 2;
      v33 = bswap32(v32);
      v34 = *v19++;
      v21 = (int)(round(v34 * (double)(v33 >> 16)) + (double)(__int16)v21);
      --v25;
    }
    while (v25);
LABEL_43:
    if ((_WORD)v21)
    {
      TAATKerxEngine::HandleKern<TRunGlue::TGlyph>(*a1, (uint64_t)v5, v11, (__int16)v21, *((_DWORD *)a1 + 8));
      *a2 = 1;
    }
    goto LABEL_10;
  }
}

id **std::unique_ptr<TAATAnkrTable>::reset[abi:nn180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x186DC03ACLL);
  }
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      abort();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__append(__int128 *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v5 = (_QWORD *)*((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(*((void **)a1 + 1), 8 * a2);
      v5 += a2;
    }
    *((_QWORD *)a1 + 1) = v5;
  }
  else
  {
    v6 = (uint64_t)a1 + 24;
    v7 = *(_QWORD **)a1;
    v8 = (uint64_t)v5 - *(_QWORD *)a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v23 = (uint64_t)a1 + 24;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>::allocate(v6, v12);
      v7 = *(_QWORD **)a1;
      v5 = (_QWORD *)*((_QWORD *)a1 + 1);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    v22 = v15;
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    *((_QWORD *)&v21 + 1) = v16;
    if (v5 != v7)
    {
      do
      {
        v17 = *--v5;
        *v5 = 0;
        *((_QWORD *)v14 - 1) = v17;
        v14 -= 8;
      }
      while (v5 != v7);
      v16 = (char *)*((_QWORD *)&v21 + 1);
      v15 = v22;
    }
    v18 = *a1;
    *(_QWORD *)a1 = v14;
    *((_QWORD *)a1 + 1) = v16;
    v21 = v18;
    v19 = (char *)*((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v15;
    v22 = v19;
    v20 = v18;
    std::__split_buffer<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul> &>::~__split_buffer(&v20);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul> &>::__destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x186DC0394](result, 0x1000C80BDFB0063);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::vector<std::unique_ptr<unsigned short const[]>,TInlineBufferAllocator<std::unique_ptr<unsigned short const[]>,4ul>>::__base_destruct_at_end[abi:nn180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x186DC0394](result, 0x1000C80BDFB0063);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void TAATKerxEngine::HandleKern<TRunGlue::TGlyph>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  __int16 v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;

  v5 = a4;
  if ((a5 & 0x40000000) != 0)
  {
    v12 = (uint64_t **)(a1 + 6);
    if (a4 == -32768)
    {
      v26 = a3;
      v27 = &v26;
      v13 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(v12, &v26, (uint64_t)&std::piecewise_construct, &v27);
      *((_BYTE *)v13 + 42) = 1;
      *((_WORD *)v13 + 20) = 0;
    }
    else
    {
      v26 = a3;
      v27 = &v26;
      v25 = std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(v12, &v26, (uint64_t)&std::piecewise_construct, &v27);
      *((_WORD *)v25 + 20) += v5;
    }
  }
  else
  {
    v8 = (uint64_t)(a1 + 5);
    v9 = a1[5];
    v10 = a1[4];
    if (v10 >= v9)
    {
      v14 = a1[3];
      v15 = (uint64_t)(v10 - v14) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        abort();
      v17 = v9 - v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>(v8, v18);
      v20 = &v19[16 * v15];
      v22 = &v19[16 * v21];
      *(_QWORD *)v20 = a3;
      *((_WORD *)v20 + 4) = v5;
      v11 = v20 + 16;
      v24 = (char *)a1[3];
      v23 = (char *)a1[4];
      if (v23 != v24)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v23 - 1);
          v20 -= 16;
          v23 -= 16;
        }
        while (v23 != v24);
        v23 = (char *)a1[3];
      }
      a1[3] = v20;
      a1[4] = v11;
      a1[5] = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v10 = a3;
      *(_WORD *)(v10 + 8) = a4;
      v11 = (char *)(v10 + 16);
    }
    a1[4] = v11;
  }
}

uint64_t **std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::default_delete<TAATControlPointAccess>::operator()[abi:nn180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {

    v4 = a2 + 2;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,64ul>>::__destroy_vector::operator()[abi:nn180100](&v4);
    return MEMORY[0x186DC03AC](a2, 0x10E0C40A1378614);
  }
  return result;
}

void std::vector<CGPoint,TInlineBufferAllocator<CGPoint,64ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 131;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[131])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t TShapingEngine::ShapeGlyphs(TShapingEngine *this, TRunGlue *a2, const TCharStream *a3)
{
  uint64_t result;
  _BYTE *v6;
  TBaseFont **v7;
  int ShapingType;
  int v9;
  _BOOL8 HasAvailable;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  _BYTE v25[15];
  unsigned __int8 v26;
  void **v27;
  uint64_t v28[93];

  v28[91] = *MEMORY[0x1E0C80C00];
  result = TRunGlue::length(this);
  if (result)
  {
    v6 = 0;
    v26 = 0;
    while (1)
    {
      v7 = (TBaseFont **)*((_QWORD *)this + 77);
      ShapingType = TBaseFont::GetShapingType(v7[50]);
      if (ShapingType)
        break;
      v14 = 1;
LABEL_35:
      if (!TRunGlue::NextRunRange(this, v14))
      {
        *((_QWORD *)this + 25) = 0;
        return v26;
      }
    }
    v9 = ShapingType;
    if (ShapingType != 2
      && (ShapingType != 3 || (FontRequiresOpenTypeShaping((const TFont *)v7) & 1) == 0))
    {
      memset(v28, 170, 0x2A0uLL);
      TAATMorphTableMorx::TAATMorphTableMorx((TAATMorphTableMorx *)v28, this);
      if (v28[5])
      {
        TAATMorphTable::ShapeGlyphs(v28, &v26, 0);
        v14 = *((_QWORD *)this + 2);
        if (v14 >= 1)
        {
          v19 = *((_QWORD *)this + 1);
          v20 = v14 + v19;
          v21 = *(_QWORD *)(*(_QWORD *)this + 16);
          do
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8 * v19) + 48);
            v23 = *(_DWORD *)(v22 + 260) & 0xFFFFFFF9;
            *(_DWORD *)(v22 + 260) = v23;
            if (v9 == 1)
              v24 = 4;
            else
              v24 = 2;
            *(_DWORD *)(v22 + 260) = v24 | v23;
            ++v19;
          }
          while (v19 < v20);
        }
      }
      else
      {
        v14 = 1;
      }
      v27 = (void **)&v28[32];
      v28[0] = (uint64_t)off_1E15DDB28;
      v28[8] = (uint64_t)off_1E15DDAE8;
      std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v27);
      goto LABEL_34;
    }
    memset(v28, 170, 0x2D8uLL);
    TOpenTypeMorph::TOpenTypeMorph((TOpenTypeMorph *)v28, this, a2);
    if (v28[68])
    {
      if (v6)
      {
LABEL_11:
        v12 = *((_QWORD *)this + 78);
        if (v12 <= 0x10000)
          v13 = (v12 + 7) >> 3;
        else
          v13 = 0x2000;
        bzero(v6, v13);
        TRunGlue::DetermineCoverage((uint64_t)this, v6);
        TOpenTypeMorph::ShapeGlyphs((uint64_t)v28, (uint64_t)&v26);
        v14 = *((_QWORD *)this + 2);
        if (v14 >= 1)
        {
          v15 = *((_QWORD *)this + 1);
          v16 = v14 + v15;
          v17 = *(_QWORD *)(*(_QWORD *)this + 16);
          do
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v15) + 48);
            *(_DWORD *)(v18 + 260) = *(_DWORD *)(v18 + 260) & 0xFFFFFFF9 | 2;
            ++v15;
          }
          while (v15 < v16);
        }
        goto LABEL_33;
      }
      HasAvailable = StackHasAvailable(0x8000uLL);
      if (HasAvailable)
      {
        MEMORY[0x1E0C80A78](HasAvailable, v11);
        v6 = &v25[-8192];
        memset(&v25[-8192], 170, 0x2000uLL);
        goto LABEL_11;
      }
      v6 = 0;
    }
    v14 = 1;
LABEL_33:
    std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&v28[4]);
LABEL_34:
    TRunGlue::UpdateAdvancesIfNeeded(this);
    goto LABEL_35;
  }
  return result;
}

BOOL TShapingEngine::ApplyVerticalForms(TShapingEngine *this, const UniChar *a2, CGGlyph *a3, CFIndex a4)
{
  int ShapingType;
  __int128 v10;
  char *v11;
  CGGlyph *v12;
  _CTGlyphStorage *v13;
  CGGlyph *glyphs;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 v18;
  int64_t v19;
  const int64_t *stringIndices;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  const __CFDictionary *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  TRun *v30;
  void *v31;
  __int16 *v32;
  unsigned __int16 *v33;
  __int16 *v34;
  __int16 v35;
  __int128 v36;
  char *v37;
  CGSize *v38;
  const TFont *v39;
  unint64_t InitialScriptAndLangSys;
  int64x2_t *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  void **v49;
  const TCharStream *v50;
  void ***v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  id v56;
  id v57;
  CFRange v58;
  const __CFDictionary *v59;
  id v60;
  id v61;
  void **__b[91];
  int64x2_t __dst[41];
  void *keys;
  void *v65;
  const __CFString *v66;
  _OWORD v67[30];
  _OWORD *v68;
  void *values;
  char *v70;
  unint64_t v71;
  _OWORD v72[4];
  _OWORD *v73;
  uint64_t v74;
  CFRange v75;
  CFRange v76;

  v74 = *MEMORY[0x1E0C80C00];
  ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(*((_QWORD *)this + 5) + 400));
  if (ShapingType == 2)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v72[3] = v10;
    v72[2] = v10;
    v72[1] = v10;
    v72[0] = v10;
    values = 0;
    v70 = 0;
    v71 = 0;
    v73 = v72;
    if (a4)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](&values, a4);
      v11 = v70;
      bzero(v70, 2 * a4);
      v70 = &v11[2 * a4];
      v12 = (CGGlyph *)values;
    }
    else
    {
      v12 = 0;
    }
    CTFontGetGlyphsForCharacters(this, a2, v12, a4);
    v33 = (unsigned __int16 *)values;
    v32 = (__int16 *)v70;
    if (values != v70)
    {
      v34 = (__int16 *)values;
      do
      {
        v35 = *v34;
        if (!*v34)
          v35 = -1;
        *v34++ = v35;
      }
      while (v34 != v32);
    }
    *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v67[28] = v36;
    v67[29] = v36;
    v67[26] = v36;
    v67[27] = v36;
    v67[24] = v36;
    v67[25] = v36;
    v67[22] = v36;
    v67[23] = v36;
    v67[20] = v36;
    v67[21] = v36;
    v67[18] = v36;
    v67[19] = v36;
    v67[16] = v36;
    v67[17] = v36;
    v67[15] = v36;
    v67[14] = v36;
    v67[13] = v36;
    v67[12] = v36;
    v67[11] = v36;
    v67[10] = v36;
    v67[9] = v36;
    v67[8] = v36;
    v67[7] = v36;
    v67[6] = v36;
    v67[5] = v36;
    v67[4] = v36;
    v67[3] = v36;
    v67[2] = v36;
    v67[1] = v36;
    v67[0] = v36;
    v65 = 0;
    keys = 0;
    v66 = 0;
    v68 = v67;
    if (a4)
    {
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)&keys, a4);
      v37 = (char *)v65;
      bzero(v65, 16 * a4);
      v65 = &v37[16 * a4];
      v33 = (unsigned __int16 *)values;
      v38 = (CGSize *)keys;
    }
    else
    {
      v38 = 0;
    }
    memcpy(__dst, &unk_18492E840, sizeof(__dst));
    TRunGlue::TRunGlue((TRunGlue *)__dst, this, v33, v38, a4, 0, 0, 0);
    InitialScriptAndLangSys = TOpenTypeMorph::GetInitialScriptAndLangSys(0, *((__CFString **)this + 5), v39);
    v58.location = 0;
    v58.length = a4;
    memset(__b, 170, sizeof(__b));
    TOpenTypeMorph::TOpenTypeMorph((uint64_t *)__b, (uint64_t)__dst, 0, InitialScriptAndLangSys, &v58);
    TOpenTypeMorph::ApplyVerticalGlyphs((TOpenTypeMorph *)__b);
    std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&__b[4]);
    v41 = (int64x2_t *)__dst[36].i64[1];
    if ((int64x2_t *)__dst[36].i64[1] == &__dst[35])
    {
      v42 = 4;
      v41 = &__dst[35];
    }
    else
    {
      if (!__dst[36].i64[1])
      {
LABEL_33:
        __b[0] = (void **)&__dst[23];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](__b);
        __b[0] = (void **)&__dst[13];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100](__b);
        __b[0] = (void **)&__dst[3].i64[1];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100](__b);
        __b[0] = &keys;
        std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](__b);
        v43 = (char *)values;
        v44 = v70;
        v45 = 1;
        if (values != v70)
        {
          do
          {
            v47 = *(unsigned __int16 *)v43;
            v43 += 2;
            v46 = v47;
            if (v47 == 0xFFFF)
              v46 = 0;
            if (!v46)
              v45 = 0;
            *a3++ = v46;
          }
          while (v43 != v44);
        }
        __b[0] = &values;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](__b);
        return v45 != 0;
      }
      v42 = 5;
    }
    (*(void (**)(void))(v41->i64[0] + 8 * v42))();
    goto LABEL_33;
  }
  if (!ShapingType)
    return CTFontGetGlyphsForCharacters(this, a2, a3, a4);
  v13 = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", a4, a4);
  glyphs = (CGGlyph *)v13->_glyphs;
  CTFontGetGlyphsForCharacters(this, a2, glyphs, a4);
  v15 = 2 * a4;
  if (a4)
  {
    v16 = 2 * a4;
    v17 = (__int16 *)glyphs;
    do
    {
      v18 = *v17;
      if (!*v17)
        v18 = -1;
      *v17++ = v18;
      v16 -= 2;
    }
    while (v16);
    v19 = 0;
    stringIndices = v13->_stringIndices;
    v21 = 8 * a4;
    do
    {
      stringIndices[v19] = v19;
      ++v19;
      v21 -= 8;
    }
    while (v21);
  }
  v60 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFNumber::TCFNumber<int>((unint64_t *)&v60, 0);
  keys = CFSTR("NSFont");
  v65 = CFSTR("CTVerticalForms");
  v66 = CFSTR("NSLigature");
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (char *)*MEMORY[0x1E0C9AE50];
  values = this;
  v70 = v22;
  v23 = atomic_load((unint64_t *)&v60);
  v71 = v23;
  v24 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v58.location = (CFIndex)a2;
  v58.length = a4;
  v59 = v24;
  v25 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v25->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15B8;
  TCharStreamUniChar::TCharStreamUniChar((TCharStreamUniChar *)&v25[1], (const unsigned __int16 *(*)(uint64_t, uint64_t *, const __CFDictionary **, void *))Provider, 0, &v58);
  __dst[8] = (int64x2_t)xmmword_18492EB50;
  memset(&__dst[9], 170, 32);
  __dst[11] = (int64x2_t)unk_18492EB80;
  __dst[6] = (int64x2_t)xmmword_18492EB30;
  __dst[7] = (int64x2_t)unk_18492EB40;
  memset(__dst, 170, 96);
  do
    v27 = __ldxr(p_shared_owners);
  while (__stxr(v27 + 1, p_shared_owners));
  __dst[0].i64[0] = (uint64_t)&v25[1];
  __dst[0].i64[1] = (uint64_t)v25;
  memset(&__dst[1], 0, 24);
  __dst[4].i64[0] = (uint64_t)&__dst[2].i64[1];
  __dst[11].i8[8] = 0;
  *(int64x2_t *)((char *)&__dst[4] + 8) = 0u;
  *(int64x2_t *)((char *)&__dst[5] + 8) = 0u;
  *(int64x2_t *)((char *)&__dst[6] + 8) = 0u;
  __dst[7].i64[1] = 0;
  *(int64x2_t *)((char *)&__dst[8] + 8) = 0u;
  *(uint64_t *)((char *)__dst[9].i64 + 5) = 0;
  memset(&__dst[12], 0, 24);
  memset(&__dst[10], 0, 17);
  __dst[8].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  v57 = (id)0xAAAAAAAAAAAAAAAALL;
  v76.location = 0;
  v76.length = 0;
  TAttributes::TAttributes((TAttributes *)__b, v24, 0, v76, 0);
  v28 = TCFBase<TRun>::Allocate();
  if (v28)
  {
    v29 = (_QWORD *)v28;
    v30 = (TRun *)(v28 + 72);
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = 0;
    v29[5] = v30;
    v29[6] = v30;
    v29[7] = CTGlyphRun::CloneEntire;
    v29[8] = CTGlyphRun::CloneRange;
    v75.location = 0;
    v75.length = a4;
    TRun::TRun(v30, v75, v13, (const TAttributes *)__b);
    v61 = v29;
    do
      v31 = (void *)__ldaxr((unint64_t *)&v61);
    while (__stlxr(0, (unint64_t *)&v61));
    v56 = v31;

  }
  else
  {
    v56 = 0;
  }
  do
    v48 = (void *)__ldaxr((unint64_t *)&v56);
  while (__stlxr(0, (unint64_t *)&v56));
  v57 = v48;

  TAttributes::~TAttributes((TAttributes *)__b);
  do
    v49 = (void **)__ldaxr((unint64_t *)&v57);
  while (__stlxr(0, (unint64_t *)&v57));
  __b[0] = v49;
  TLine::AppendRun(__dst, (unint64_t *)__b);

  memcpy(__b, &unk_18492E840, 0x290uLL);
  TRunGlue::TRunGlue((TRunGlue *)__b, (TLine *)__dst);
  TShapingEngine::ShapeGlyphs((TShapingEngine *)__b, (TRunGlue *)&v25[1], v50);
  v51 = (void ***)__b[73];
  if ((void ***)__b[73] == &__b[70])
  {
    v52 = 4;
    v51 = &__b[70];
  }
  else
  {
    if (!__b[73])
      goto LABEL_49;
    v52 = 5;
  }
  ((void (*)(void))(*v51)[v52])();
LABEL_49:
  v61 = &__b[46];
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v61);
  v61 = &__b[26];
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v61);
  v61 = &__b[7];
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v61);

  TLine::~TLine((TLine *)__dst);
  do
    v53 = __ldaxr(p_shared_owners);
  while (__stlxr(v53 - 1, p_shared_owners));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }

  if (a4)
  {
    v45 = 1;
    do
    {
      v55 = *glyphs++;
      v54 = v55;
      if (v55 == 0xFFFF)
        v54 = 0;
      if (!v54)
        v45 = 0;
      *a3++ = v54;
      v15 -= 2;
    }
    while (v15);
  }
  else
  {
    v45 = 1;
  }

  return v45 != 0;
}

uint64_t Provider(uint64_t a1, uint64_t *a2, const __CFDictionary **a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a1 < 0)
    return 0;
  v4 = a4[1];
  v5 = v4 <= a1;
  v6 = v4 - a1;
  if (v5)
    return 0;
  *a2 = v6;
  *a3 = (const __CFDictionary *)a4[2];
  return *a4 + 2 * a1;
}

void std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 51;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[51])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 504);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 504))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

char *std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__vallocate[abi:nn180100](_QWORD *a1, size_t __sz)
{
  char *result;
  char *v5;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  v5 = (char *)(a1 + 19);
  result = (char *)a1[19];
  if (&result[__sz] <= v5)
    *(_QWORD *)v5 = &result[__sz];
  else
    result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  char *result;

  if (a2 < 0)
    abort();
  result = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

void std::__shared_ptr_emplace<TCharStreamUniChar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TCharStreamUniChar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__shared_ptr_emplace<TCharStreamUniChar>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t TCFBase<TRun>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TRun::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

_QWORD *TCFBase<TRun>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

__CFString *TCFBase<TRun>::ClassDebug(uint64_t a1)
{
  __CFString *result;
  __CFString *v3;
  CFStringRef v4;

  result = TRun::DebugDescription(*(TRun **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTRun", a1, result);
    CFRelease(v3);
    return (__CFString *)v4;
  }
  return result;
}

unint64_t emoji_compression_decode_scratch_buffer_size(int a1)
{
  return (7 * HIWORD(a1) + 18) * (unint64_t)(unsigned __int16)a1
       + HIWORD(a1)
       + compression_decode_scratch_buffer_size(COMPRESSION_LZFSE)
       + 4096;
}

unint64_t emoji_compression_decode(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5, uint8_t *a6, _WORD *a7)
{
  unint64_t v7;
  unint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v16;
  size_t v17;
  uint64_t v18;
  _QWORD v20[4];

  v7 = a2 - 12;
  if (a2 < 0xC)
    return 0;
  v9 = 0;
  if (*(_DWORD *)a1 == 829058405 && *(_WORD *)(a1 + 4) == 256)
  {
    v11 = *(unsigned __int16 *)(a1 + 6);
    v12 = *(unsigned __int16 *)(a1 + 8);
    v13 = *(unsigned __int16 *)(a1 + 10);
    *a7 = v12;
    a7[1] = v13;
    v9 = (4 * v12 * v13);
    if (a3)
    {
      if (v9 > a4)
        return 0;
      if ((v11 - 41217) > 1)
        return 0;
      v16 = a6;
      if (!a6)
      {
        v17 = compression_decode_scratch_buffer_size(COMPRESSION_LZFSE);
        v16 = (uint8_t *)malloc_type_malloc(v13 + (7 * (int)v13 + 18) * (uint64_t)(int)v12 + v17 + 4096, 0x4D4BE486uLL);
        if (!v16)
          return 0;
      }
      v20[0] = a3;
      v20[1] = v13;
      v20[2] = v12;
      v20[3] = 4 * v12;
      v18 = vImageCompressionDecode_BGRA8888(a1 + 12, v7, v20, a5, v16);
      if (!a6)
        free(v16);
      if (v18)
        return 0;
    }
  }
  return v9;
}

uint64_t TBMPDataCache::Iterator::GetDataForCharacter@<X0>(TBMPDataCache::Iterator *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  unsigned int v6;
  uint64_t result;
  int v8;
  float v9;

  v3 = a2;
  v6 = a2 & 0xFFFFFF00;
  if ((a2 & 0xFFFFFF00) == *((_DWORD *)this + 4))
  {
    result = *((_QWORD *)this + 1);
LABEL_5:
    v8 = *(unsigned __int16 *)(*(_QWORD *)(result + 1568)
                             + 2
                             * ((v3 & 7)
                              + *(unsigned __int8 *)(result + ((unint64_t)v3 >> 3) + 1536)));
    v9 = *(float *)(result + 4 * v3 + 512);
    *(_WORD *)a3 = *(_WORD *)(result + 2 * v3);
    *(double *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = v8;
    return result;
  }
  result = TBMPDataCache::PageForCharacter(*(os_unfair_lock_s **)this, a2);
  if (result)
  {
    *((_QWORD *)this + 1) = result;
    *((_DWORD *)this + 4) = v6;
    goto LABEL_5;
  }
  *(_WORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t TCharStream::LazyCopyChars(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  result = 0;
  v5 = a1[1];
  v6 = a1[2] + v5;
  if (a2 + a3 >= v6)
    v7 = a1[2] + v5;
  else
    v7 = a2 + a3;
  v8 = v7 - v5;
  v9 = a2 <= v5 && v5 < a2 + a3;
  if (v9)
    v10 = a1[1];
  else
    v10 = 0;
  if (!v9)
    v8 = 0;
  v11 = v5 <= a2 && a2 < v6;
  v12 = v7 - a2;
  if (v11)
    v10 = a2;
  if (!v11)
    v12 = v8;
  if (v10 == a2 && v12 == a3)
  {
    v13 = a1[3];
    if (v13)
      return v13 + 2 * a2 - 2 * v5;
    else
      return (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  }
  return result;
}

uint64_t *std::unique_ptr<TUnicodeDataCachePage>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 1568);
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (uint64_t *)MEMORY[0x186DC03AC](v2, 0x1010C40E4D70334);
  }
  return result;
}

uint64_t TGlyphEncoder::RunUnicodeEncoderRecursively(TCharStream **a1, unsigned int a2, unint64_t *a3, _WORD **a4, uint64_t a5, uint64_t a6, char **a7, int a8, TFontCascade **a9, __CFString *a10, int a11, BOOL a12)
{
  unint64_t *v15;
  unint64_t v18;
  TRun *v19;
  uint64_t NextUnmappedCharRange;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFIndex ClusterRange;
  CFIndex v30;
  CFIndex v31;
  TCharStreamIterator *v32;
  TRun *v33;
  const __CTFont *v34;
  unsigned __int8 v35;
  TFontCascade *v36;
  char *v37;
  TFontCascade *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  int Char;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  __CTFont *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFIndex v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  UChar32 FullChar;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  CFHashCode v71;
  CFHashCode v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint8x8_t v79;
  unint64_t v80;
  CFIndex v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *i;
  unint64_t v86;
  BOOL v87;
  uint64_t **v88;
  uint64_t *j;
  unint64_t v90;
  BOOL v91;
  char *v92;
  float v93;
  float v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  int8x8_t prime;
  int8x8_t *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint8x8_t v105;
  unint64_t v106;
  uint8x8_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  int8x8_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  CFIndex v117;
  int v118;
  int v119;
  CFIndex v120;
  const TAttributes *v121;
  BOOL v122;
  unint64_t v123;
  const __CTFont *v124;
  char v125;
  const __CTFont *v126;
  __CFString *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  CFIndex v131;
  unint64_t *v132;
  const __CTFont *inited;
  uint64_t v135;
  const __CFString *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  CFIndex v142;
  const __CFString *v143;
  CFRange *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const __CFString *v151;
  CFRange *v152;
  uint64_t v153;
  CFIndex v154;
  uint64_t v155;
  const __CTFont *v156;
  int v157;
  int v158;
  TFontCascade *v159;
  const __CFString *v160;
  unint64_t v161;
  void *v162;
  unint64_t *v164;
  void *v166;
  void *v167;
  const __CFString *Length;
  __CFString *v169;
  const __CTFont *v170;
  unint64_t v171;
  CFIndex location;
  CFIndex v173;
  CFIndex v174;
  uint64_t v175;
  CFIndex v176;
  CFIndex v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  const __CTFont *v182;
  int64x2_t *v183;
  unint64_t v184;
  CFIndex v185;
  int v186;
  void *v188;
  const __CTFont *v189;
  void *v190;
  void *v191;
  int64x2_t *v192;
  CFIndex v193;
  unsigned int *v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  unint64_t *v204;
  CFIndex v205;
  unsigned int v206;
  uint64_t v208;
  __CTFont *v209;
  __CTFont *v210;
  __CTFont *v211;
  uint64_t v212;
  unsigned int *v213;
  double *v214;
  unsigned __int16 *v215;
  uint64_t v217;
  CFIndex v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const __CTFont *v225;
  uint64_t v226;
  TRun *v227;
  TCharStream **v228;
  double v229;
  char **v230;
  int v231;
  __CFString *v232;
  int v233;
  char v234;
  BOOL v235;
  id v236;
  const __CTFont *v237;
  id v238;
  uint64_t v239;
  _BYTE v240[24];
  _BYTE *v241;
  CFRange v242;
  uint64_t *v243;
  CFRange *v244;
  uint64_t v245;
  CFRange v246;
  CFRange v247;
  CFRange v248;
  CFRange v249;
  CFRange v250;
  CFRange v251;

  v15 = a3;
  v245 = *MEMORY[0x1E0C80C00];
  v18 = atomic_load(a3);
  v19 = *(TRun **)(v18 + 48);
  v230 = a7;
  v227 = v19;
  v228 = a1 + 1;
  v214 = (double *)*((_QWORD *)*a1 + 3);
  v215 = (unsigned __int16 *)*((_QWORD *)*a1 + 2);
  v213 = (unsigned int *)*((_QWORD *)*a1 + 5);
  NextUnmappedCharRange = TRun::GetNextUnmappedCharRange(v19, a5);
  if (a5 > NextUnmappedCharRange)
  {
    LOBYTE(v22) = 0;
    goto LABEL_323;
  }
  v23 = NextUnmappedCharRange;
  v24 = v21;
  v22 = 0;
  v25 = 0;
  v206 = a2 + 1;
  v26 = a5 + a6;
  if (a12)
    v27 = 2654435770;
  else
    v27 = 2654435769;
  v199 = v27;
  v197 = a1 + 28;
  v224 = a5;
  v204 = v15;
  v219 = (uint64_t)a1;
  v198 = a8;
  v212 = a5;
  v208 = a5 + a6;
  do
  {
    if (v26 <= v23)
      break;
    v28 = v26 - v224;
    ClusterRange = TGlyphEncoder::GetClusterRange((uint64_t)a1, a11, v23, v24, v224, v26 - v224);
    v31 = v30;
    v33 = v227;
    v32 = (TCharStreamIterator *)v228;
    v229 = *((double *)v227 + 24);
    v34 = (const __CTFont *)atomic_load((unint64_t *)v227 + 7);
    v251.location = ClusterRange;
    v251.length = v31;
    v35 = TUnicodeEncoder::Encode(&v230, v34, a10, v32, v251, v215, v214, v213, &v229, a12);
    *((double *)v33 + 24) = v229;
    if ((v35 & 4) != 0)
      *((_DWORD *)v227 + 65) |= 1u;
    if ((v35 & 0x10) != 0)
      *((_BYTE *)v227 + 225) |= 8u;
    v22 |= v35;
    if (a8 || (v22 & 8) == 0)
      goto LABEL_60;
    v36 = *a9;
    if (a2 || v36)
      goto LABEL_20;
    if ((*a4[5] & 0x1C0) == 0)
      goto LABEL_60;
    v37 = (char *)operator new(0xC8uLL, MEMORY[0x1E0DE4E10]);
    if (!v37)
    {
      *a9 = 0;
LABEL_60:
      v67 = ClusterRange + v31;
      v68 = v212;
      goto LABEL_61;
    }
    *(_QWORD *)v37 = a4;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = a10;
    *((_QWORD *)v37 + 3) = 0;
    *((_QWORD *)v37 + 4) = 0;
    *((_QWORD *)v37 + 5) = 0;
    *((_DWORD *)v37 + 12) = 0;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 88) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *(_OWORD *)(v37 + 168) = 0u;
    *(_OWORD *)(v37 + 184) = 0u;
    v38 = *a9;
    *a9 = (TFontCascade *)v37;
    if (v38)
    {
      TFontCascade::~TFontCascade(v38);
      MEMORY[0x186DC03AC]();
      v36 = *a9;
LABEL_20:
      if (!v36)
        goto LABEL_60;
      if (a2 >= 0x20)
      {
        do
          v39 = __ldaxr((unsigned int *)&TGlyphEncoder::RunUnicodeEncoderRecursively(unsigned int,TCFRef<CTRun *> &&,__CTFont const*,CFRange,TInlineVector<long,30ul> &,TGlyphEncoder::Fallbacks,std::unique_ptr<TFontCascade const,TGlyphEncoder::Fallbacks::default_delete<TFontCascade>> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::sLogCount);
        while (__stlxr(v39 + 1, (unsigned int *)&TGlyphEncoder::RunUnicodeEncoderRecursively(unsigned int,TCFRef<CTRun *> &&,__CTFont const*,CFRange,TInlineVector<long,30ul> &,TGlyphEncoder::Fallbacks,std::unique_ptr<TFontCascade const,TGlyphEncoder::Fallbacks::default_delete<TFontCascade>> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::sLogCount));
        if (v39 <= 9)
        {
          v246.location = ClusterRange;
          v246.length = v31;
          v195 = (unsigned int *)TCharStream::DebugDescriptionForRange(*v228, v246);
          CFLog();

        }
        goto LABEL_60;
      }
    }
    v40 = TRun::GetNextUnmappedCharRange(v227, ClusterRange);
    v42 = v40;
    v223 = v41;
    if (a11)
      v43 = v40 == ClusterRange;
    else
      v43 = 0;
    v44 = !v43;
    v226 = v40;
    v205 = v31;
    if (!v43
      && v41 == 1
      && (Char = TCharStreamIterator::GetChar((TCharStreamIterator *)v228, v40), v42 = v226, Char == 32))
    {
      v44 = 0;
      v217 = v226;
      v46 = 1;
      v47 = v226;
      v48 = 1;
    }
    else
    {
      if (a11 == 3 && v42 != ClusterRange)
      {
        v49 = atomic_load((unint64_t *)v227 + 7);
        v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v49 + 40) + 400) + 712))(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 400));
        v42 = v226;
        v44 &= v50 ^ 1;
      }
      if (v44)
      {
        v217 = v42;
        v46 = v223;
        v47 = v42;
        v48 = v223;
        if (v223 >= 1)
        {
          v51 = TGlyphEncoder::GetClusterRange((uint64_t)a1, 2, v226, v223, v224, v28);
          v46 = (uint64_t)v52;
          v53 = ClusterRange + v205;
          v220 = v51;
          v54 = v51;
          v209 = v52;
          while (1)
          {
            v217 = v54;
            v55 = v46 + v54;
            v242.location = v46 + v54;
            v56 = TRun::GetNextUnmappedCharRange(v227, v46 + v54);
            v58 = v56 + v57 >= v53 ? ClusterRange + v205 : v56 + v57;
            v59 = ClusterRange <= v56 && v56 < v53;
            v60 = v56;
            if (!v59)
            {
              if (v56 > ClusterRange)
                break;
              v60 = ClusterRange;
              if (ClusterRange >= v56 + v57)
                break;
            }
            if (v58 <= v60)
              break;
            v61 = TGlyphEncoder::GetClusterRange(v219, 2, v56, v57, v224, v28);
            if (v62 < 1)
              break;
            v63 = v61;
            if (v61 > v55)
              break;
            v64 = v62;
            FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)v228, &v242.location, 0);
            if (((1 << u_charType(FullChar)) & 0x30000000) != 0)
              break;
            v54 = v217;
            if (v63 < v217)
              v54 = v63;
            v66 = v63 + v64;
            if (v55 > v63 + v64)
              v66 = v55;
            v46 = v66 - v54;
          }
          v44 = 1;
          v15 = v204;
          a1 = (TCharStream **)v219;
          v47 = v220;
          v48 = (uint64_t)v209;
        }
      }
      else
      {
        v217 = v42;
        v48 = v223;
        v46 = v223;
        v47 = v42;
      }
    }
    v202 = v44;
    v200 = v22 & 0xFFFFFFF7;
    v70 = (const void *)atomic_load((unint64_t *)v227 + 7);
    v71 = CFHash(v70);
    v72 = v71;
    v73 = (v48 + 2654435769 + (v47 << 6) + (v47 >> 2)) ^ v47;
    v74 = (v71 + 2654435769u + (v73 << 6) + (v73 >> 2)) ^ v73;
    v75 = (v199 + (v74 << 6) + (v74 >> 2)) ^ v74;
    v76 = (unint64_t)a1[27];
    v221 = v47;
    v210 = (__CTFont *)v48;
    if (v76)
    {
      v77 = v47;
      v78 = v48;
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
      v79.i16[0] = vaddlv_u8(v79);
      if (v79.u32[0] > 1uLL)
      {
        v80 = (v199 + (v74 << 6) + (v74 >> 2)) ^ v74;
        v81 = v205;
        if (v75 >= v76)
          v80 = v75 % v76;
      }
      else
      {
        v80 = v75 & (v76 - 1);
        v81 = v205;
      }
      v83 = *(_QWORD *)(v219 + 208);
      v84 = *(uint64_t ***)(v83 + 8 * v80);
      if (v84)
      {
        for (i = *v84; i; i = (uint64_t *)*i)
        {
          v86 = i[1];
          if (v86 == v75)
          {
            v87 = i[2] == v47 && i[3] == v78;
            if (v87 && i[4] == v71 && *((_BYTE *)i + 40) == a12)
            {
              if (v223 >= 1)
              {
                a1 = (TCharStream **)v219;
                v117 = v226;
                TGlyphEncoder::AppendRunClone(v219, v15, v224, v226);
                v119 = 0;
                v46 = v223;
                v120 = v212;
                goto LABEL_175;
              }
LABEL_316:
              v67 = ClusterRange + v81;
              v22 = v200;
              a1 = (TCharStream **)v219;
              v68 = v212;
              goto LABEL_317;
            }
          }
          else
          {
            if (v79.u32[0] > 1uLL)
            {
              if (v86 >= v76)
                v86 %= v76;
            }
            else
            {
              v86 &= v76 - 1;
            }
            if (v86 != v80)
              break;
          }
        }
      }
      if (v79.u32[0] > 1uLL)
      {
        v82 = (v199 + (v74 << 6) + (v74 >> 2)) ^ v74;
        if (v75 >= v76)
          v82 = v75 % v76;
      }
      else
      {
        v82 = v75 & (v76 - 1);
      }
      v88 = *(uint64_t ***)(v83 + 8 * v82);
      if (v88)
      {
        for (j = *v88; j; j = (uint64_t *)*j)
        {
          v90 = j[1];
          if (v90 == v75)
          {
            v91 = j[2] == v77 && j[3] == v78;
            if (v91 && j[4] == v71 && *((_BYTE *)j + 40) == a12)
              goto LABEL_166;
          }
          else
          {
            if (v79.u32[0] > 1uLL)
            {
              if (v90 >= v76)
                v90 %= v76;
            }
            else
            {
              v90 &= v76 - 1;
            }
            if (v90 != v82)
              break;
          }
        }
      }
    }
    else
    {
      v82 = 0xAAAAAAAAAAAAAAAALL;
      v81 = v205;
    }
    v92 = (char *)operator new(0x30uLL);
    *(_QWORD *)v92 = 0;
    *((_QWORD *)v92 + 1) = v75;
    *((_QWORD *)v92 + 2) = v221;
    *((_QWORD *)v92 + 3) = v210;
    *((_QWORD *)v92 + 4) = v72;
    v92[40] = a12;
    *(_DWORD *)(v92 + 41) = -1431655766;
    *((_DWORD *)v92 + 11) = -1431655766;
    v93 = (float)(unint64_t)(*(_QWORD *)(v219 + 232) + 1);
    v94 = *(float *)(v219 + 240);
    if (!v76 || (float)(v94 * (float)v76) < v93)
    {
      v95 = (v76 & (v76 - 1)) != 0;
      if (v76 < 3)
        v95 = 1;
      v96 = v95 | (2 * v76);
      v97 = vcvtps_u32_f32(v93 / v94);
      if (v96 <= v97)
        prime = (int8x8_t)v97;
      else
        prime = (int8x8_t)v96;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v76 = *(_QWORD *)(v219 + 216);
      }
      if (*(_QWORD *)&prime > v76)
      {
        v99 = (int8x8_t *)v219;
LABEL_122:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v100 = operator new(8 * *(_QWORD *)&prime);
        v101 = (void *)v99[26];
        v99[26] = (int8x8_t)v100;
        if (v101)
          operator delete(v101);
        v102 = 0;
        v99[27] = prime;
        do
          *(_QWORD *)(*(_QWORD *)&v99[26] + 8 * v102++) = 0;
        while (*(_QWORD *)&prime != v102);
        v103 = (_QWORD *)*v197;
        if (*v197)
        {
          v104 = v103[1];
          v105 = (uint8x8_t)vcnt_s8(prime);
          v105.i16[0] = vaddlv_u8(v105);
          if (v105.u32[0] > 1uLL)
          {
            if (v104 >= *(_QWORD *)&prime)
              v104 %= *(_QWORD *)&prime;
          }
          else
          {
            v104 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)&v99[26] + 8 * v104) = v197;
          v109 = (_QWORD *)*v103;
          if (*v103)
          {
            do
            {
              v110 = v109[1];
              if (v105.u32[0] > 1uLL)
              {
                if (v110 >= *(_QWORD *)&prime)
                  v110 %= *(_QWORD *)&prime;
              }
              else
              {
                v110 &= *(_QWORD *)&prime - 1;
              }
              if (v110 != v104)
              {
                v111 = v99[26];
                if (!*(_QWORD *)(*(_QWORD *)&v111 + 8 * v110))
                {
                  *(_QWORD *)(*(_QWORD *)&v111 + 8 * v110) = v103;
                  goto LABEL_147;
                }
                *v103 = *v109;
                *v109 = **(_QWORD **)(*(_QWORD *)&v99[26] + 8 * v110);
                **(_QWORD **)(*(_QWORD *)&v99[26] + 8 * v110) = v109;
                v109 = v103;
              }
              v110 = v104;
LABEL_147:
              v103 = v109;
              v109 = (_QWORD *)*v109;
              v104 = v110;
            }
            while (v109);
          }
        }
        v76 = (unint64_t)prime;
        goto LABEL_151;
      }
      if (*(_QWORD *)&prime < v76)
      {
        v106 = vcvtps_u32_f32((float)*(unint64_t *)(v219 + 232) / *(float *)(v219 + 240));
        if (v76 < 3 || (v107 = (uint8x8_t)vcnt_s8((int8x8_t)v76), v107.i16[0] = vaddlv_u8(v107), v107.u32[0] > 1uLL))
        {
          v106 = std::__next_prime(v106);
        }
        else
        {
          v108 = 1 << -(char)__clz(v106 - 1);
          if (v106 >= 2)
            v106 = v108;
        }
        if (*(_QWORD *)&prime <= v106)
          prime = (int8x8_t)v106;
        if (*(_QWORD *)&prime >= v76)
        {
          v76 = *(_QWORD *)(v219 + 216);
        }
        else
        {
          v99 = (int8x8_t *)v219;
          if (prime)
            goto LABEL_122;
          v190 = *(void **)(v219 + 208);
          *(_QWORD *)(v219 + 208) = 0;
          if (v190)
            operator delete(v190);
          v76 = 0;
          *(_QWORD *)(v219 + 216) = 0;
        }
      }
LABEL_151:
      if ((v76 & (v76 - 1)) != 0)
      {
        if (v75 >= v76)
          v82 = v75 % v76;
        else
          v82 = v75;
      }
      else
      {
        v82 = (v76 - 1) & v75;
      }
    }
    v112 = *(_QWORD *)(v219 + 208);
    v113 = *(_QWORD **)(v112 + 8 * v82);
    if (v113)
    {
      *(_QWORD *)v92 = *v113;
    }
    else
    {
      *(_QWORD *)v92 = *v197;
      *v197 = v92;
      *(_QWORD *)(v112 + 8 * v82) = v197;
      if (!*(_QWORD *)v92)
        goto LABEL_165;
      v114 = *(_QWORD *)(*(_QWORD *)v92 + 8);
      if ((v76 & (v76 - 1)) != 0)
      {
        if (v114 >= v76)
          v114 %= v76;
      }
      else
      {
        v114 &= v76 - 1;
      }
      v113 = (_QWORD *)(*(_QWORD *)(v219 + 208) + 8 * v114);
    }
    *v113 = v92;
LABEL_165:
    ++*(_QWORD *)(v219 + 232);
LABEL_166:
    if (v46 <= 0)
      goto LABEL_316;
    a1 = (TCharStream **)v219;
    TGlyphEncoder::AppendRunClone(v219, v15, v224, v217);
    if (v202)
    {
      v115 = v226 + v223;
      if (v226 + v223 >= (uint64_t)v210 + v221)
        v116 = (char *)v210 + v221;
      else
        v116 = (char *)(v226 + v223);
      v117 = v217;
      if (v221 > v226 || v226 >= (uint64_t)v210 + v221)
      {
        v223 = 0;
        v118 = 1;
        if (v226 > v221 || v221 >= v115)
        {
          v226 = 0;
        }
        else
        {
          v223 = (uint64_t)&v116[-v221];
          v226 = v221;
        }
      }
      else
      {
        v223 = (uint64_t)&v116[-v226];
        v118 = 1;
      }
    }
    else
    {
      v119 = 1;
      v120 = v212;
      v117 = v217;
LABEL_175:
      if (v117 == v120)
      {
        v118 = 0;
        v117 = v120;
      }
      else if (v46 + v117 == v208)
      {
        v118 = v119;
      }
      else
      {
        v118 = 0;
      }
    }
    v121 = 0;
    v218 = v117;
    v122 = a12;
    v203 = v118;
    while (2)
    {
      v123 = atomic_load(v15);
      v222 = *(_QWORD *)(v123 + 48);
      v124 = (const __CTFont *)a4;
      if ((v118 & 1) == 0)
        v124 = (const __CTFont *)atomic_load((unint64_t *)(v222 + 56));
      v225 = v124;
      if (!v124
        || (v125 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v124 + 5) + 400) + 688))(*(_QWORD *)(*((_QWORD *)v124 + 5) + 400)),
            v124 = v225,
            (v125 & 1) == 0))
      {
        if ((*(_WORD *)(v222 + 178) & 0x40) == 0)
        {
          v237 = (const __CTFont *)0xAAAAAAAAAAAAAAAALL;
          v126 = v124;
          v236 = (id)0xAAAAAAAAAAAAAAAALL;
          v237 = v126;
          (*(void (**)(id *__return_ptr, TCharStream *, uint64_t, uint64_t))(*(_QWORD *)*v228 + 16))(&v236, *v228, v226, v223);
          v235 = v226 > v117;
          v234 = 0;
          v233 = 0;
          v232 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
          v127 = (__CFString *)atomic_load((unint64_t *)&v236);
          v128 = operator new(0x20uLL);
          *v128 = &off_1E15E0058;
          v128[1] = &v235;
          v128[2] = &v234;
          v128[3] = &v233;
          v241 = v128;
          CreateStringByDeletingLongCharactersPassingTest(v127, (uint64_t)v240, &v232);
          v129 = v241;
          if (v241 == v240)
          {
            v129 = v240;
            v130 = 4;
LABEL_194:
            (*(void (**)(void))(*v129 + 8 * v130))();
          }
          else if (v241)
          {
            v130 = 5;
            goto LABEL_194;
          }
          v211 = (__CTFont *)(v222 + 40);
          if (v233)
            LODWORD(v131) = v118;
          else
            LODWORD(v131) = 0;
          if ((_DWORD)v131 != 1)
          {
            v135 = (uint64_t)*a9;
            v136 = (const __CFString *)atomic_load((unint64_t *)&v232);
            TFontCascade::CreateFallback(v136, v135, v225, v233, (unint64_t *)&v242);
            do
              v137 = __ldaxr((unint64_t *)&v242);
            while (__stlxr(0, (unint64_t *)&v242));
            do
              v138 = (void *)__ldaxr((unint64_t *)&v237);
            while (__stlxr(v137, (unint64_t *)&v237));

            goto LABEL_261;
          }
          if ((uint64_t)v121 >= 1)
          {
            v242.location = 0xAAAAAAAAAAAAAAAALL;
            v132 = (unint64_t *)((char *)*a9 + 32);
            if (atomic_load(v132))
              inited = (const __CTFont *)atomic_load(v132);
            else
              inited = (const __CTFont *)TFontCascade::InitLastResort(*a9);
            v247.location = (CFIndex)a1;
            v247.length = v218;
            TGlyphEncoder::CreateRun((TGlyphEncoder *)&v242, v247, v121, v211, inited);
            BYTE4(v196) = v122;
            LODWORD(v196) = 1;
            TGlyphEncoder::RunUnicodeEncoderRecursively(a1, v206, &v242, v225, v218, v121, a7, 0, a9, a10, v196);

          }
          v140 = (*(uint64_t (**)(TCharStream *, CFIndex, uint64_t))(*(_QWORD *)*v228 + 40))(*v228, v117, 2);
          v141 = v139;
          v142 = v140 + v139;
          if (v140 + v139 > v223 + v226)
          {
            v239 = (uint64_t)&v233;
            v235 = 0;
            (*(void (**)(id *__return_ptr, TCharStream *, uint64_t, uint64_t))(*(_QWORD *)*v228 + 16))(&v238, *v228, v140, v139);
            v143 = (const __CFString *)atomic_load((unint64_t *)&v238);
            v242.location = (CFIndex)&unk_1E15E1450;
            v242.length = (CFIndex)&v235;
            v243 = &v239;
            v244 = &v242;
            EnumerateCharactersInRange(v143, 0, v141, (uint64_t)&v242);
            v144 = v244;
            if (v244 == &v242)
            {
              v144 = &v242;
              v145 = 4;
LABEL_213:
              (*(void (**)(void))(v144->location + 8 * v145))();
            }
            else if (v244)
            {
              v145 = 5;
              goto LABEL_213;
            }

          }
          v146 = v117 + v46;
LABEL_216:
          if (v117 > v142 || v146 <= v142)
          {
LABEL_231:
            v154 = v141 + v140;
            if (v141 + v140 >= v146)
              v155 = v146;
            else
              v155 = v141 + v140;
            if (v117 > v140 || v140 >= v146)
            {
              v131 = 0;
              v156 = v225;
              v46 = 0;
              if (v140 > v117)
              {
                a1 = (TCharStream **)v219;
              }
              else
              {
                a1 = (TCharStream **)v219;
                if (v117 < v154)
                {
                  v46 = v155 - v117;
                  v131 = v117;
                }
              }
            }
            else
            {
              v46 = v155 - v140;
              v131 = v140;
              a1 = (TCharStream **)v219;
              v156 = v225;
            }
            v157 = v233;
            if (!v156)
            {
              v15 = v204;
              v118 = v203;
              if (v233 == 2)
              {
LABEL_246:
                v242.location = 0xAAAAAAAAAAAAAAAALL;
                (*(void (**)(CFRange *__return_ptr, TCharStream *, CFIndex, uint64_t))(*(_QWORD *)*v228 + 16))(&v242, *v228, v131, v46);
                v159 = *a9;
                v160 = (const __CFString *)atomic_load((unint64_t *)&v242);
                TFontCascade::CreateFallback(v160, (uint64_t)v159, v225, v233, (unint64_t *)&v239);
                do
                  v161 = __ldaxr((unint64_t *)&v239);
                while (__stlxr(0, (unint64_t *)&v239));
                do
                  v162 = (void *)__ldaxr((unint64_t *)&v237);
                while (__stlxr(v161, (unint64_t *)&v237));

                if (!atomic_load((unint64_t *)&v237))
                {
                  v164 = (unint64_t *)((char *)*a9 + 32);
                  if (atomic_load(v164))
                    v166 = (void *)atomic_load(v164);
                  else
                    v166 = (void *)TFontCascade::InitLastResort(*a9);
                  TCFRef<__CTFont const*>::Retain((unint64_t *)&v237, v166);
                }

                goto LABEL_255;
              }
LABEL_259:
              v122 = 0;
              goto LABEL_260;
            }
            v158 = v233 == 2;
            v43 = v158 == (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v156 + 5) + 400) + 712))(*(_QWORD *)(*((_QWORD *)v156 + 5) + 400));
            v15 = v204;
            v118 = v203;
            if (!v43)
              goto LABEL_246;
LABEL_255:
            if (v157 != 2)
              goto LABEL_259;
            v167 = (void *)atomic_load((unint64_t *)&v232);
            Length = v167;
            v169 = (__CFString *)Length;
            if (Length)
              Length = (const __CFString *)CFStringGetLength(Length);
            v122 = (uint64_t)Length > 0;

LABEL_260:
            v242.location = 0xAAAAAAAAAAAAAAAALL;
            v170 = (const __CTFont *)atomic_load((unint64_t *)&v237);
            v248.location = (CFIndex)a1;
            v248.length = v131;
            TGlyphEncoder::CreateRun((TGlyphEncoder *)&v242, v248, (const TAttributes *)v46, v211, v170);
            BYTE4(v196) = v122;
            LODWORD(v196) = 3;
            v201 = TGlyphEncoder::RunUnicodeEncoderRecursively(a1, v206, &v242, v225, v131, v46, a7, 0, a9, a10, v196);

            v117 = v131;
            LOBYTE(v131) = 1;
LABEL_261:

            if ((v131 & 1) != 0)
            {
              v68 = v212;
              v186 = v201;
LABEL_303:

              goto LABEL_304;
            }
            v171 = atomic_load((unint64_t *)&v237);
            if (v171 || v226 != v117)
              goto LABEL_331;
            v239 = v226;
            v242.location = 0xAAAAAAAAAAAAAAAALL;
            v242.length = 0xAAAAAAAAAAAAAAAALL;
            TCharStreamIterator::GetFullChar((TCharStreamIterator *)v228, &v239, &v242);
            location = v226;
            v173 = v226 + v46;
            if (v242.length + v242.location >= v226 + v46)
              v174 = v226 + v46;
            else
              v174 = v242.length + v242.location;
            if (v226 > v242.location || v242.location >= v173)
            {
              v176 = v174 - v226;
              if (v226 < v242.length + v242.location && v242.location <= v226)
                v175 = v176;
              else
                v175 = 0;
            }
            else
            {
              v175 = v174 - v242.location;
            }
            v117 = v175 + v226;
            if (v223 < v46)
            {
              v239 = v175 + v226;
              v242.location = 0xAAAAAAAAAAAAAAAALL;
              v242.length = 0xAAAAAAAAAAAAAAAALL;
              TCharStreamIterator::GetFullChar((TCharStreamIterator *)v228, &v239, &v242);
              location = v226;
              if (v242.length + v242.location >= v173)
                v178 = v226 + v46;
              else
                v178 = v242.length + v242.location;
              if (v226 > v242.location || v242.location >= v173)
              {
                if (v242.location > v226)
                {
                  location = 0;
                  v223 = 0;
                }
                else
                {
                  v179 = v178 - v226;
                  if (v226 >= v242.length + v242.location)
                  {
                    location = 0;
                    v179 = 0;
                  }
                  v223 = v179;
                }
              }
              else
              {
                v223 = v178 - v242.location;
                location = v242.location;
              }
            }
            v121 = (const TAttributes *)((char *)v121 + v175);
            v59 = v46 <= v175;
            v46 -= v175;
            if (v59)
            {
LABEL_331:
              if ((uint64_t)v121 < 1)
                goto LABEL_299;
              v242.location = 0xAAAAAAAAAAAAAAAALL;
              v180 = (unint64_t *)((char *)*a9 + 32);
              v181 = atomic_load(v180);
              v182 = (const __CTFont *)(v181 ? atomic_load(v180) : TFontCascade::InitLastResort(*a9));
              v249.location = (CFIndex)a1;
              v249.length = v218;
              TGlyphEncoder::CreateRun((TGlyphEncoder *)&v242, v249, v121, v211, v182);
              BYTE4(v196) = v122;
              LODWORD(v196) = v118;
              v186 = TGlyphEncoder::RunUnicodeEncoderRecursively(a1, v206, &v242, v225, v218, v121, a7, 0, a9, a10, v196);

              if (v46 >= 1)
              {
LABEL_299:
                if (!atomic_load((unint64_t *)&v237))
                {
                  v188 = (void *)atomic_load((unint64_t *)(v222 + 56));
                  TCFRef<__CTFont const*>::Retain((unint64_t *)&v237, v188);
                }
                v242.location = 0xAAAAAAAAAAAAAAAALL;
                v189 = (const __CTFont *)atomic_load((unint64_t *)&v237);
                v250.location = (CFIndex)a1;
                v250.length = v117;
                TGlyphEncoder::CreateRun((TGlyphEncoder *)&v242, v250, (const TAttributes *)v46, v211, v189);
                BYTE4(v196) = v122;
                LODWORD(v196) = v118;
                v186 = TGlyphEncoder::RunUnicodeEncoderRecursively(a1, v206, &v242, v225, v117, v46, a7, 0, a9, a10, v196);

              }
              v68 = v212;
              goto LABEL_303;
            }
            v226 = location;

            continue;
          }
          v148 = (*(uint64_t (**)(TCharStream *, CFIndex, uint64_t))(*(_QWORD *)*v228 + 40))(*v228, v142, 2);
          v150 = v149;
          v231 = 0;
          v239 = (uint64_t)&v231;
          v235 = 0;
          (*(void (**)(id *__return_ptr, TCharStream *, uint64_t, uint64_t))(*(_QWORD *)*v228 + 16))(&v238, *v228, v148, v149);
          v151 = (const __CFString *)atomic_load((unint64_t *)&v238);
          v242.location = (CFIndex)&unk_1E15E1450;
          v242.length = (CFIndex)&v235;
          v243 = &v239;
          v244 = &v242;
          EnumerateCharactersInRange(v151, 0, v150, (uint64_t)&v242);
          v152 = v244;
          if (v244 == &v242)
          {
            v152 = &v242;
            v153 = 4;
LABEL_224:
            (*(void (**)(void))(v152->location + 8 * v153))();
          }
          else if (v244)
          {
            v153 = 5;
            goto LABEL_224;
          }

          if (v231 != v233)
            goto LABEL_231;
          if (v148 < v140)
            v140 = v148;
          if (v142 <= v148 + v150)
            v142 = v148 + v150;
          v141 = v142 - v140;
          goto LABEL_216;
        }
      }
      break;
    }
    v183 = (int64x2_t *)a1[25];
    v184 = atomic_load(v15);
    (*(void (**)(uint64_t *__return_ptr))(v184 + 64))(&v239);
    do
      v185 = __ldaxr((unint64_t *)&v239);
    while (__stlxr(0, (unint64_t *)&v239));
    v242.location = v185;
    TLine::AppendRun(v183, (unint64_t *)&v242);

    v186 = 0;
    v68 = v212;
LABEL_304:
    v67 = v117 + v46;
    v22 = v186 | v200;
    v224 = v67;
LABEL_317:
    a8 = v198;
    if (a11 == 2)
    {
      v26 = v208;
      goto LABEL_320;
    }
    v25 = 1;
LABEL_61:
    v23 = TRun::GetNextUnmappedCharRange(v227, v67);
    v24 = v69;
    v26 = v208;
  }
  while (v68 <= v23);
  if ((v25 & 1) == 0)
  {
LABEL_323:
    v192 = (int64x2_t *)a1[25];
    do
      v193 = __ldaxr(v15);
    while (__stlxr(0, v15));
    v242.location = v193;
    TLine::AppendRun(v192, (unint64_t *)&v242);
    v191 = (void *)v242.location;
    goto LABEL_326;
  }
LABEL_320:
  TGlyphEncoder::AppendRunClone((uint64_t)a1, v15, v224, v26);
  do
    v191 = (void *)__ldaxr(v15);
  while (__stlxr(0, v15));
LABEL_326:

  return (char)v22;
}

void TCFBase_NEW<CTRubyRun,CTRun *&,BOOL>(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TRun>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = *a1;
    v9 = *a2;
    v10 = v6 + 72;
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = v10;
    v7[6] = v10;
    v7[7] = CTRubyRun::CloneEntire;
    v7[8] = CTRubyRun::CloneRange;
    TRubyRun::TRubyRun(v10, v8, v9);
    v12 = v7;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    *a3 = 0;
  }
}

void TCFBase_NEW<CTTateChuYokoRun,CTRun *&>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = *a1;
    v7 = v4 + 72;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v7;
    v5[6] = v7;
    v5[7] = CTTateChuYokoRun::CloneEntire;
    v5[8] = CTTateChuYokoRun::CloneRange;
    TTateChuYokoRun::TTateChuYokoRun(v7, v6);
    v9 = v5;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a2 = v8;

  }
  else
  {
    *a2 = 0;
  }
}

void TCFBase_NEW<CTTextEncapsulationRun,CTRun *&>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = *a2;
    v7 = v4 + 72;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v7;
    v5[6] = v7;
    v5[7] = CTTextEncapsulationRun::CloneEntire;
    v5[8] = CTTextEncapsulationRun::CloneRange;
    TTextEncapsulationRun::TTextEncapsulationRun(v7, v6);
    v9 = v5;
    do
      v8 = __ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));
    *a1 = v8;

  }
  else
  {
    *a1 = 0;
  }
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  JUMPOUT(0x184870C00);
}

void std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E15E1450;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E15E1450;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1},std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_1::operator() const(CFRange,CTEmojiPolicy *)::{lambda(CFRange,unsigned int,BOOL *)#1}>,void ()(CFRange,unsigned int,BOOL *)>::operator()(uint64_t result, _QWORD *a2, UChar32 *a3, _BYTE **a4)
{
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  int v9;

  v4 = result;
  v5 = *a3;
  if (*a2)
  {
    v6 = *a4;
    if (v5 >= 0xFE0E && **(_BYTE **)(result + 8) != 0 && (v5 >> 4 < 0xFE1 || v5 - 127995 <= 4))
    {
      if (v5 == 65038)
        v9 = 1;
      else
        v9 = 2;
      ***(_DWORD ***)(result + 16) = v9;
    }
    *v6 = 1;
  }
  else
  {
    result = u_hasBinaryProperty(*a3, UCHAR_EMOJI);
    **(_BYTE **)(v4 + 8) = (_DWORD)result != 0;
    if ((_DWORD)result)
    {
      result = u_hasBinaryProperty(v5, UCHAR_EMOJI_PRESENTATION);
      if ((_DWORD)result)
        ***(_DWORD ***)(v4 + 16) = 2;
    }
  }
  return result;
}

void TFontCascade::~TFontCascade(TFontCascade *this)
{
  NSFreeMapTable(*((NSMapTable **)this + 24));
  *((_QWORD *)this + 24) = 0;

}

void CTEmojiImageRun::CloneEntire(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TRun *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTEmojiImageRun::CloneEntire;
    v5[8] = CTEmojiImageRun::CloneRange;
    TRun::TRun(v6, (const TRun *)(a1 + 9));
    v5[9] = &off_1E15DD708;
    v5[49] = a1[49];
    v5[50] = a1[50];
    v10 = v5;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    v9 = v7;

  }
  else
  {
    v9 = 0;
  }
  do
    v8 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  *a2 = v8;

}

void CTEmojiImageRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  id v16;

  v10 = TCFBase<TRun>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = v10 + 72;
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = CTEmojiImageRun::CloneEntire;
    v11[8] = CTEmojiImageRun::CloneRange;
    TRun::TRun(v12, a1 + 72, a2, a3, a4);
    v11[9] = &off_1E15DD708;
    v11[49] = *(_QWORD *)(a1 + 392);
    v11[50] = *(_QWORD *)(a1 + 400);
    v16 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    v15 = v13;

  }
  else
  {
    v15 = 0;
  }
  do
    v14 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  *a5 = v14;

}

void CTMetricsDelegateRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TRun *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTMetricsDelegateRun::CloneEntire;
    v5[8] = CTMetricsDelegateRun::CloneRange;
    TRun::TRun(v6, (const TRun *)(a1 + 72));
    v5[9] = &off_1E15DDD08;
    v10 = v5;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    v9 = v7;

  }
  else
  {
    v9 = 0;
  }
  do
    v8 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  *a2 = v8;

}

void CTMetricsDelegateRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  id v16;

  v10 = TCFBase<TRun>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = v10 + 72;
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = CTMetricsDelegateRun::CloneEntire;
    v11[8] = CTMetricsDelegateRun::CloneRange;
    TRun::TRun(v12, a1 + 72, a2, a3, a4);
    v11[9] = &off_1E15DDD08;
    v16 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    v15 = v13;

  }
  else
  {
    v15 = 0;
  }
  do
    v14 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  *a5 = v14;

}

void CTRubyRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  TCFBase_NEW<CTRubyRun,TRubyRun const&>((const TRubyRun *)(a1 + 72), (unint64_t *)&v4);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

void CTRubyRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v6;
  id v7;
  int v8;
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8 = a4;
  TCFBase_NEW<CTRubyRun,TRubyRun const&,CFRange &,TRun::SubrangingStyle &>(a1 + 72, v9, &v8, (unint64_t *)&v7);
  do
    v6 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));
  *a5 = v6;

}

void TCFBase_NEW<CTRubyRun,TRubyRun const&>(const TRubyRun *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TRubyRun *v6;
  unint64_t v7;
  id v8;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TRubyRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTRubyRun::CloneEntire;
    v5[8] = CTRubyRun::CloneRange;
    TRubyRun::TRubyRun(v6, a1);
    v8 = v5;
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

void TCFBase_NEW<CTRubyRun,TRubyRun const&,CFRange &,TRun::SubrangingStyle &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  CFIndex v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TRun>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a2;
    v11 = a2[1];
    v12 = *a3;
    v13 = v8 + 72;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v13;
    v9[6] = v13;
    v9[7] = CTRubyRun::CloneEntire;
    v9[8] = CTRubyRun::CloneRange;
    TRubyRun::TRubyRun(v13, a1, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

void CTTateChuYokoRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;
  id v4;

  TCFBase_NEW<CTTateChuYokoRun,TTateChuYokoRun const&>((const TTateChuYokoRun *)(a1 + 72), (unint64_t *)&v4);
  do
    v3 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  *a2 = v3;

}

void CTTateChuYokoRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v6;
  id v7;
  int v8;
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8 = a4;
  TCFBase_NEW<CTTateChuYokoRun,TTateChuYokoRun const&,CFRange &,TRun::SubrangingStyle &>(a1 + 72, v9, &v8, (unint64_t *)&v7);
  do
    v6 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));
  *a5 = v6;

}

void TCFBase_NEW<CTTateChuYokoRun,TTateChuYokoRun const&>(const TTateChuYokoRun *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TTateChuYokoRun *v6;
  unint64_t v7;
  id v8;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TTateChuYokoRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTTateChuYokoRun::CloneEntire;
    v5[8] = CTTateChuYokoRun::CloneRange;
    TTateChuYokoRun::TTateChuYokoRun(v6, a1);
    v8 = v5;
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a2 = v7;

  }
  else
  {
    *a2 = 0;
  }
}

void TCFBase_NEW<CTTateChuYokoRun,TTateChuYokoRun const&,CFRange &,TRun::SubrangingStyle &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  CFIndex v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TRun>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a2;
    v11 = a2[1];
    v12 = *a3;
    v13 = v8 + 72;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v13;
    v9[6] = v13;
    v9[7] = CTTateChuYokoRun::CloneEntire;
    v9[8] = CTTateChuYokoRun::CloneRange;
    TTateChuYokoRun::TTateChuYokoRun(v13, a1, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

void CTTextEncapsulationRun::CloneEntire(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TTextEncapsulationRun *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;

  v4 = TCFBase<TRun>::Allocate();
  if (v4)
  {
    v5 = (_QWORD *)v4;
    v6 = (TTextEncapsulationRun *)(v4 + 72);
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v6;
    v5[6] = v6;
    v5[7] = CTTextEncapsulationRun::CloneEntire;
    v5[8] = CTTextEncapsulationRun::CloneRange;
    TTextEncapsulationRun::TTextEncapsulationRun(v6, (const TTextEncapsulationRun *)(a1 + 72));
    v10 = v5;
    do
      v7 = (void *)__ldaxr((unint64_t *)&v10);
    while (__stlxr(0, (unint64_t *)&v10));
    v9 = v7;

  }
  else
  {
    v9 = 0;
  }
  do
    v8 = __ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));
  *a2 = v8;

}

void CTTextEncapsulationRun::CloneRange(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  id v16;

  v10 = TCFBase<TRun>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = v10 + 72;
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = CTTextEncapsulationRun::CloneEntire;
    v11[8] = CTTextEncapsulationRun::CloneRange;
    TTextEncapsulationRun::TTextEncapsulationRun(v12, a1 + 72, a2, a3, a4);
    v16 = v11;
    do
      v13 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(0, (unint64_t *)&v16));
    v15 = v13;

  }
  else
  {
    v15 = 0;
  }
  do
    v14 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  *a5 = v14;

}

void std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0,std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0>,BOOL ()(CFRange,unsigned int)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0,std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0>,BOOL ()(CFRange,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E15E0058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0,std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0>,BOOL ()(CFRange,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E0058;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0,std::allocator<TGlyphEncoder::AppendUnmappedCharRun(unsigned int,TCFRef<CTRun *> &,__CTFont const*,CFRange &,CFRange,TInlineVector<long,30ul> &,std::unique_ptr<TFontCascade const> &,__CFString const*,TGlyphEncoder::ClusterMatching,BOOL)::$_0>,BOOL ()(CFRange,unsigned int)>::operator()(uint64_t a1, uint64_t a2, UChar32 *a3)
{
  unsigned int v4;
  int v7;
  _BYTE *v10;
  int v11;
  uint64_t result;

  v4 = *a3;
  if (!**(_BYTE **)(a1 + 8))
  {
    if (u_hasBinaryProperty(*a3, UCHAR_EMOJI_PRESENTATION))
    {
      v7 = 2;
    }
    else
    {
      if (v4 != 9792 && v4 != 9794 && v4 != 9877)
        goto LABEL_26;
      v7 = 1;
    }
LABEL_25:
    **(_DWORD **)(a1 + 24) = v7;
    goto LABEL_26;
  }
  if (v4 >= 0xFE0E && **(_BYTE **)(a1 + 16) == 0 && (v4 >> 4 < 0xFE1 || v4 - 127995 <= 4))
  {
    if (v4 == 65038)
      v7 = 1;
    else
      v7 = 2;
    goto LABEL_25;
  }
LABEL_26:
  v10 = *(_BYTE **)(a1 + 8);
  v11 = *v10;
  *v10 = 1;
  if (v11)
    **(_BYTE **)(a1 + 16) = 1;
  result = u_hasBinaryProperty(v4, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
  if ((_DWORD)result)
    return !IsVisibleFormatter(v4);
  return result;
}

uint64_t TTypesetter::CanLayout(TTypesetter *this)
{
  char CanLayout;
  uint64_t result;

  if ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >= 8)
  {
    CanLayout = TTypesetter::CanLayout((TTypesetter *)*((unsigned __int8 *)this + 256), *(_QWORD *)(*((_QWORD *)this + 27) + 16));
    result = 1;
    if ((CanLayout & 1) != 0)
      return result;
    *((_BYTE *)this + 257) = 1;
  }
  return 0;
}

void TTypesetter::RelayoutRun(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  const __CFString *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFIndex v15;
  TCharStream *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  TCompositionEngine **v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  TCharStream *v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[6];
  unint64_t v42;
  id v43;
  TCompositionEngine **v44;
  TCompositionEngine *__dst[82];
  _BYTE v46[128];
  _OWORD v47[3];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 16))
  {
    TTypesetter::RelayoutRunUsingCallback(a1, a2, a3, a4);
    return;
  }
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  v43 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t, CFIndex))(**(_QWORD **)(a1 + 8) + 16))(&v43, *(_QWORD *)(a1 + 8), v8, v9);
  if (atomic_load((unint64_t *)&v43))
  {
    v27 = a3;
    v11 = (const __CFString *)atomic_load((unint64_t *)&v43);
    v12 = (std::__shared_weak_count *)operator new(0x48uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
    TCharStreamCFString::TCharStreamCFString((TCharStreamCFString *)&v12[1], v11, 0);
    v47[0] = xmmword_18492EFB8;
    memset(&v47[1], 170, 32);
    v48 = unk_18492EFE8;
    *(_OWORD *)&v46[96] = xmmword_18492EF98;
    *(_OWORD *)&v46[112] = unk_18492EFA8;
    memset(v46, 170, 96);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)v46 = v12 + 1;
    *(_QWORD *)&v46[8] = v12;
    memset(&v46[16], 0, 24);
    *(_QWORD *)&v46[64] = &v46[40];
    BYTE8(v48) = 0;
    memset(&v46[72], 0, 56);
    *(_OWORD *)((char *)v47 + 8) = 0u;
    *(_QWORD *)((char *)&v47[1] + 5) = 0;
    v47[2] = 0uLL;
    LOBYTE(v48) = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    *(_QWORD *)&v47[0] = 0xFFEFFFFFFFFFFFFFLL;
    if (v9 <= *(_QWORD *)(v7 + 208))
      v15 = *(_QWORD *)(v7 + 208);
    else
      v15 = v9;
    v16 = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", v9, v15);
    memset(v41, 170, sizeof(v41));
    v42 = 0xAAAAAAAAFFFFFFFFLL;
    v29[0] = v16;
    v29[1] = (TCharStream *)&v12[1];
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_QWORD *)&v40 = v12[1].__shared_weak_owners_;
    v41[0] = 0;
    v41[1] = v46;
    memset(&v41[2], 0, 32);
    LODWORD(v42) = 1065353216;
    v17 = TGlyphEncoder::EncodeChars(v29, 0, v9, v7 + 40, 1);
    v28 = v17;

    *(_QWORD *)&v46[72] = v8;
    *(_QWORD *)&v46[80] = v9;
    v19 = *(uint64_t **)&v46[24];
    v18 = *(uint64_t **)&v46[16];
    while (v18 != v19)
    {
      v20 = *v18++;
      v21 = *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v21 + 8) += v8;
      objc_msgSend(*(id *)(v21 + 216), "puntStringIndicesInRange:by:", *(_QWORD *)(v21 + 200), *(_QWORD *)(v21 + 208), v8);
    }
    if (*(_BYTE *)(v7 + 224))
    {
      v28 = v17 | 2;
      memcpy(__dst, &unk_18492ECA8, sizeof(__dst));
      TRunGlue::TRunGlue((TRunGlue *)__dst, (TLine *)v46);
    }
    else
    {
      memcpy(__dst, &unk_18492ECA8, sizeof(__dst));
      TRunGlue::TRunGlue((TRunGlue *)__dst, (TLine *)v46);
      if (!v17)
      {
        v23 = 0;
        v22 = 0;
LABEL_16:
        TTypesetter::FinishLayout(a1, __dst, (const TCharStream *)v23, v22);
        if (*(_QWORD *)&v46[24] != *(_QWORD *)&v46[16])
          TLine::ReplaceRun(v27, a4, (uint64_t)v46);
        v24 = (TCompositionEngine **)__dst[73];
        if ((TCompositionEngine **)__dst[73] == &__dst[70])
        {
          v25 = 4;
          v24 = &__dst[70];
        }
        else
        {
          if (!__dst[73])
            goto LABEL_23;
          v25 = 5;
        }
        (*((void (**)(void))*v24 + v25))();
LABEL_23:
        v44 = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v44);
        v44 = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v44);
        v44 = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v44);
        std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v41[2]);
        TLine::~TLine((TLine *)v46);
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_27;
      }
    }
    v22 = TTypesetter::FinishEncoding(a1, (TShapingEngine *)__dst, (const TCharStream *)&v28);
    v23 = v28;
    goto LABEL_16;
  }
LABEL_27:

}

uint64_t TTypesetter::FinishEncoding(uint64_t a1, TShapingEngine *this, const TCharStream *a3)
{
  TShapingEngine *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  TLine *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const __CFDictionary *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  const __CTFont *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  TBaseFont *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  TTypesetter *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t GlyphIndexForChar;
  uint64_t NextChar;
  uint64_t v37;
  uint64_t v38;
  TRun *v39;
  unsigned int v40;
  uint64_t v41;
  TTypesetter *v42;
  TRun *v43;
  uint64_t i;
  const __CTFont *v45;
  uint64_t v46;
  uint64_t v47;
  TTypesetter *v48;
  uint64_t v49;
  unint64_t v50;
  TTypesetter *v51;
  void *v52;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  TAttributes *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t RenderingStyle;
  TTypesetter *v62;
  TRun *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  TRun *v67;
  uint64_t v68;
  TAttributes *v69;
  const __CTFont *v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int ShapingType;
  unsigned int v87;
  int v88;
  const __CTFont *v93;
  char v94;
  uint64_t v95;
  int64_t v96;
  char v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  id CopyWithAttributes;
  TTypesetter **v102;
  CFIndex *p_GlyphCount;
  id *v104;
  id v105;
  id v106;
  id v107;
  TTypesetter *v108;
  uint64_t v109;
  id v110;
  id v111;
  id v112;
  CFIndex GlyphCount;
  uint64_t v114;
  void ***v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[112];
  __int128 v120;
  uint64_t v121;
  _BYTE v122[160];
  _BYTE v123[192];
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;

  v3 = this;
  v4 = a1;
  v126 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)a3;
  v6 = (v5 >> 4) & 1;
  v7 = *(TLine **)this;
  if ((*(_WORD *)(*(_QWORD *)this + 154) & 0x100) == 0)
    goto LABEL_77;
  v115 = *(void ****)(a1 + 8);
  v121 = 0;
  v120 = 0u;
  memset(v119, 0, sizeof(v119));
  v117 = 0u;
  v118 = 0u;
  v116 = 0u;
  *(_QWORD *)&v120 = v115[2];
  v8 = *((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2);
  v112 = 0;
  GlyphCount = 0;
  v110 = 0;
  v111 = 0;
  if (v8 < 1)
  {
    v71 = 0;
  }
  else
  {
    v94 = 0;
    v93 = 0;
    v9 = 0;
    v96 = (unint64_t)v8 >> 3;
    v95 = (uint64_t)v7;
    do
    {
      v109 = 0xAAAAAAAAAAAAAAAALL;
      v109 = *(_QWORD *)(*((_QWORD *)v7 + 2) + 8 * v9);
      v108 = *(TTypesetter **)(v109 + 48);
      v10 = atomic_load((unint64_t *)v108 + 5);
      if (!v10
        || (v11 = (const __CFDictionary *)atomic_load((unint64_t *)v108 + 5),
            !CFDictionaryContainsKey(v11, CFSTR("CTVerticalForms"))))
      {
        v107 = (id)0xAAAAAAAAAAAAAAAALL;
        v12 = (void *)atomic_load((unint64_t *)&v112);
        v13 = v12;
        v106 = (id)0xAAAAAAAAAAAAAAAALL;
        v107 = v13;
        v14 = (void *)atomic_load((unint64_t *)&v111);
        v15 = v14;
        v105 = (id)0xAAAAAAAAAAAAAAAALL;
        v106 = v15;
        v16 = (void *)atomic_load((unint64_t *)&v110);
        v105 = v16;
        v17 = (const __CTFont *)atomic_load((unint64_t *)v108 + 7);
        if (v93 != v17)
        {
          GlyphCount = CTFontGetGlyphCount(v17);
          VerticalCopyOf(v17, (CTFontRef *)&CopyWithAttributes);
          do
            v18 = __ldaxr((unint64_t *)&CopyWithAttributes);
          while (__stlxr(0, (unint64_t *)&CopyWithAttributes));
          do
            v19 = (void *)__ldaxr((unint64_t *)&v107);
          while (__stlxr(v18, (unint64_t *)&v107));

          v20 = (void *)atomic_load((unint64_t *)&v107);
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v112, v20);

          v21 = atomic_load((unint64_t *)&v107);
          if (qword_1ECDE7480 != -1)
            dispatch_once_f(&qword_1ECDE7480, 0, (dispatch_function_t)VerticalFormsFeature(void)::$_0::__invoke);
          CopyWithAttributes = CTFontCopyGlyphCoverageForFeature(v21, (CFDictionaryRef)qword_1ECDE7478);
          do
            v22 = __ldaxr((unint64_t *)&CopyWithAttributes);
          while (__stlxr(0, (unint64_t *)&CopyWithAttributes));
          do
            v23 = (void *)__ldaxr((unint64_t *)&v106);
          while (__stlxr(v22, (unint64_t *)&v106));

          v24 = (void *)atomic_load((unint64_t *)&v106);
          TCFRef<__CTFont const*>::Retain((unint64_t *)&v111, v24);

          if (v17 && (v25 = *(TBaseFont **)(*((_QWORD *)v17 + 5) + 400)) != 0 && TBaseFont::HasFeature(v25, 4, 2))
          {
            if (qword_1ECDE7490 != -1)
              dispatch_once_f(&qword_1ECDE7490, 0, (dispatch_function_t)RotationCopyOf(__CTFont const*)::$_0::__invoke);
            CopyWithAttributes = CTFontCreateCopyWithAttributes(v17, 0.0, 0, (CTFontDescriptorRef)qword_1ECDE7488);
            do
              v26 = __ldaxr((unint64_t *)&CopyWithAttributes);
            while (__stlxr(0, (unint64_t *)&CopyWithAttributes));
            do
              v27 = (void *)__ldaxr((unint64_t *)&v105);
            while (__stlxr(v26, (unint64_t *)&v105));

            v28 = (void *)atomic_load((unint64_t *)&v105);
            TCFRef<__CTFont const*>::Retain((unint64_t *)&v110, v28);

          }
          else
          {
            do
              v29 = (void *)__ldaxr((unint64_t *)&v105);
            while (__stlxr(0, (unint64_t *)&v105));

            v30 = (void *)atomic_load((unint64_t *)&v105);
            TCFRef<__CTFont const*>::Retain((unint64_t *)&v110, v30);
          }
          v93 = v17;
        }
        CopyWithAttributes = &v115;
        v102 = &v108;
        p_GlyphCount = &GlyphCount;
        v104 = &v106;
        v31 = v108;
        v32 = *((_QWORD *)v108 + 2);
        if (v32 >= 1)
        {
          v33 = *((_QWORD *)v108 + 1);
          v34 = v32 + v33;
          while (1)
          {
            GlyphIndexForChar = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v31, v33);
            NextChar = v33;
            if (GlyphIndexForChar < *((_QWORD *)v31 + 26))
            {
              v37 = *((_QWORD *)v31 + 27);
              v38 = *((_QWORD *)v31 + 25);
              if (*(__int16 *)(*(_QWORD *)(v37 + 16) + 2 * v38 + 2 * GlyphIndexForChar) == -1
                || (NextChar = v33, (*(_DWORD *)(*(_QWORD *)(v37 + 40) + 4 * v38 + 4 * GlyphIndexForChar) & 0x20) != 0))
              {
                v39 = v108;
                v99 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v108, v33);
                NextChar = TRun::GetNextChar(v39, v33, &v99);
                if (NextChar >= v34)
                {
                  v69 = (TTypesetter *)((char *)v108 + 40);
                  v70 = (const __CTFont *)atomic_load((unint64_t *)&v107);
                  TAttributes::SetVerticalFont(v69, v70);
                  v7 = (TLine *)v95;
                  break;
                }
              }
            }
            v99 = 0xAAAAAAAAAAAAAAAALL;
            v100 = 0xAAAAAAAAAAAAAAAALL;
            v40 = TTypesetter::ApplyVerticalLayout(TLine &,TCharStream const*,signed char *)::$_0::operator()((_QWORD **)&CopyWithAttributes, NextChar, &v99);
            v41 = v99 + v100 - 1;
            v42 = v108;
            v114 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v108, v41);
            v43 = v42;
            for (i = v41; ; i = v47)
            {
              v46 = TRun::GetNextChar(v43, i, &v114);
              if (v46 >= v34
                || v40 < 2 == TTypesetter::ApplyVerticalLayout(TLine &,TCharStream const*,signed char *)::$_0::operator()((_QWORD **)&CopyWithAttributes, v46, &v99) > 1)
              {
                break;
              }
              v47 = v99 + v100 - 1;
              v48 = v108;
              v114 = TRun::GetGlyphIndexForCharIndex<false>((uint64_t)v108, v47);
              v43 = v48;
            }
            if (v46 >= v34)
            {
              v7 = (TLine *)v95;
            }
            else
            {
              v49 = v46 - v33;
              v7 = (TLine *)v95;
              ++v96;
              TLine::SplitRun(v95, v9, v49);
              v109 = *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * v9);
              v108 = *(TTypesetter **)(v109 + 48);
            }
            if (v40 - 2 < 2)
            {
              v62 = v108;
              v63 = (TRun *)atomic_load((unint64_t *)&v107);
              TTypesetter::SetVerticalFont(v62, v63, v45);
            }
            else
            {
              if (v40 > 1)
                goto LABEL_55;
              v50 = atomic_load((unint64_t *)&v105);
              v51 = v108;
              if (v50)
              {
                v52 = (void *)atomic_load((unint64_t *)&v105);
                v114 = v52;
                if (atomic_load((unint64_t *)&v114))
                {
                  v54 = (unint64_t *)((char *)v51 + 56);
                  do
                    v55 = __ldaxr((unint64_t *)&v114);
                  while (__stlxr(0, (unint64_t *)&v114));
                  do
                    v56 = (void *)__ldaxr(v54);
                  while (__stlxr(v55, v54));

                  *((_BYTE *)v51 + 88) = 1;
                }
                v57 = (TTypesetter *)((char *)v51 + 40);

                v58 = (char *)v108 + 192;
                v59 = atomic_load((unint64_t *)v108 + 7);
                v60 = *(_QWORD *)(v59 + 40);
                RenderingStyle = TAttributes::GetRenderingStyle(v57);
                TStorageRange::ResetAdvances((uint64_t)v58, v60, RenderingStyle);
                v7 = (TLine *)v95;
              }
              else
              {
                v66 = *((_QWORD *)v108 + 20);
                if (!v66 || !*(_WORD *)(v66 + 64))
                  goto LABEL_55;
                v67 = (TRun *)atomic_load((unint64_t *)&v107);
                TTypesetter::SetVerticalFont(v108, v67, v45);
                if ((*((_WORD *)v108 + 89) & 0x1000) != 0)
                {
                  TCFBase_NEW<CTTateChuYokoRun,CTRun *&>(&v109, (unint64_t *)&v98);
                  do
                    v68 = __ldaxr((unint64_t *)&v98);
                  while (__stlxr(0, (unint64_t *)&v98));
                  v114 = v68;
                  TLine::ReplaceRun(v7, v9, (unint64_t *)&v114);

                  v109 = *(_QWORD *)(*((_QWORD *)v7 + 2) + 8 * v9);
                  v108 = *(TTypesetter **)(v109 + 48);
                }
              }
            }
            if ((*((_WORD *)v108 + 89) & 0x800) != 0)
            {
              v97 = 1;
              TCFBase_NEW<CTRubyRun,CTRun *&,BOOL>(&v98, &v109, &v97);
              do
                v64 = __ldaxr((unint64_t *)&v98);
              while (__stlxr(0, (unint64_t *)&v98));
              v114 = v64;
              TLine::ReplaceRun(v7, v9, (unint64_t *)&v114);

            }
            v94 = 1;
LABEL_55:
            if (v46 >= v34)
              break;
            if (++v9 >= v96)
            {
              v31 = v108;
            }
            else
            {
              v65 = *(_QWORD *)(*((_QWORD *)v7 + 2) + 8 * v9);
              v31 = *(TTypesetter **)(v65 + 48);
              v108 = v31;
              v109 = v65;
            }
            v33 = v46;
          }
        }

      }
      ++v9;
    }
    while (v9 < v96);
    v71 = v94;
    LODWORD(v6) = (v5 >> 4) & 1;
    LOBYTE(v5) = v5 | v94 & 1;
    v3 = this;
  }

  v6 = v6 | v71 & 1;
  TRunGlue::TRunGlue((TRunGlue *)&v115, v7);
  TRunGlue::operator=((uint64_t)v3, (__int128 *)&v115);
  v72 = v125;
  if (v125 == v124)
  {
    v73 = 4;
    v72 = v124;
    v4 = a1;
    goto LABEL_75;
  }
  v4 = a1;
  if (v125)
  {
    v73 = 5;
LABEL_75:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  CopyWithAttributes = v123;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&CopyWithAttributes);
  CopyWithAttributes = v122;
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&CopyWithAttributes);
  CopyWithAttributes = v119;
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&CopyWithAttributes);
LABEL_77:
  if (v5 & 2 | *(_DWORD *)(v4 + 40))
    v74 = (*(_DWORD *)(v4 + 40) & 1) == 0;
  else
    v74 = 0;
  if (!v74)
    goto LABEL_92;
  CopyWithAttributes = (id)0xAAAAAAAAAAAAAAAALL;
  v102 = (TTypesetter **)0xAAAAAAAAAAAAAAAALL;
  TTypesetter::GetLevelsProvider(v4, (uint64_t *)&CopyWithAttributes);
  v75 = *(_QWORD *)(v4 + 8);
  v99 = (uint64_t)CopyWithAttributes;
  v100 = v75;
  TBidiEngine::ReorderGlyphs((uint64_t)&v99, v7);
  TRunGlue::TRunGlue((TRunGlue *)&v115, v7);
  TRunGlue::operator=((uint64_t)v3, (__int128 *)&v115);
  v76 = v125;
  if (v125 == v124)
  {
    v77 = 4;
    v76 = v124;
    goto LABEL_86;
  }
  if (v125)
  {
    v77 = 5;
LABEL_86:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v114 = (uint64_t)v123;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v114);
  v114 = (uint64_t)v122;
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v114);
  v114 = (uint64_t)v119;
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v114);
  v78 = (std::__shared_weak_count *)v102;
  if (v102)
  {
    v79 = (unint64_t *)(v102 + 1);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_92:
  if ((v5 & 4) != 0)
  {
    v81 = *(_QWORD *)(v4 + 8);
    v115 = (void ***)v3;
    *(_QWORD *)&v116 = v81;
    LOBYTE(CopyWithAttributes) = -86;
    LOBYTE(v99) = 0;
    v6 = v6 | TCombiningEngine::ResolveCombiningMarks(&v115, 0, &CopyWithAttributes, (char *)&v99);
    if ((_BYTE)CopyWithAttributes)
      *(_BYTE *)a3 &= ~4u;
    LOBYTE(v5) = v99 | v5;
  }
  if ((v5 & 1) != 0)
  {
    v6 = TShapingEngine::ShapeGlyphs(v3, *(TRunGlue **)(v4 + 8), a3) | v6;
  }
  else
  {
    v82 = *((_QWORD *)v7 + 2);
    v83 = *((_QWORD *)v7 + 3);
    while (v82 != v83)
    {
      v84 = *(_QWORD *)(*(_QWORD *)v82 + 48);
      v85 = atomic_load((unint64_t *)(v84 + 56));
      ShapingType = TBaseFont::GetShapingType(*(TBaseFont **)(*(_QWORD *)(v85 + 40) + 400));
      v87 = *(_DWORD *)(v84 + 260) & 0xFFFFFFF9;
      *(_DWORD *)(v84 + 260) = v87;
      if (ShapingType)
      {
        if (ShapingType == 1)
          v88 = 4;
        else
          v88 = 2;
        *(_DWORD *)(v84 + 260) = v88 | v87;
      }
      v82 += 8;
    }
  }
  if (*((_BYTE *)v3 + 633))
    *((_BYTE *)v3 + 633) = 0;
  return v6;
}

void TTypesetter::FinishLayout(uint64_t a1, TCompositionEngine **this, const TCharStream *a3, char a4)
{
  TCompositionEngine *v5;
  TRunGlue *v6;
  char v7;
  const TCharStream *v8;
  char v9;
  const TCharStream *v10;
  char v11;

  v5 = *this;
  v6 = *(TRunGlue **)(a1 + 8);
  v7 = TKerningEngine::PositionGlyphs((TKerningEngine *)this, v6, a3);
  v9 = TCompositionEngine::AdjustSpacing(v5, v6, v8);
  v11 = TBaselineEngine::AlignBaselines(v5, v6, v10);
  if ((*((_WORD *)v5 + 76) & 0x20) != 0 || (v7 | a4) | (v9 | v11))
    TLine::SyncWithRuns(v5);
}

uint64_t TRunGlue::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::pair<UScriptCode,long> const*>,std::__wrap_iter<std::pair<UScriptCode,long> const*>>((char *)(a1 + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 4);
  v7 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  v8 = *(__int128 *)((char *)a2 + 152);
  v9 = *(__int128 *)((char *)a2 + 168);
  v10 = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)(a1 + 208), *((char **)a2 + 26), *((char **)a2 + 27), *((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26));
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((_QWORD *)(a1 + 368), *((char **)a2 + 46), *((_QWORD *)a2 + 47), (uint64_t)(*((_QWORD *)a2 + 47) - *((_QWORD *)a2 + 46)) >> 2);
  v11 = *(__int128 *)((char *)a2 + 520);
  v12 = *(__int128 *)((char *)a2 + 536);
  *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 69);
  *(_OWORD *)(a1 + 520) = v11;
  *(_OWORD *)(a1 + 536) = v12;
  std::function<BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator=((_QWORD *)(a1 + 560), (uint64_t)(a2 + 35));
  v13 = a2[40];
  v15 = a2[37];
  v14 = a2[38];
  *(_OWORD *)(a1 + 624) = a2[39];
  *(_OWORD *)(a1 + 640) = v13;
  *(_OWORD *)(a1 + 592) = v15;
  *(_OWORD *)(a1 + 608) = v14;
  return a1;
}

uint64_t TTypesetter::ApplyVerticalLayout(TLine &,TCharStream const*,signed char *)::$_0::operator()(_QWORD **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  unsigned int FullChar;
  uint64_t IntPropertyValue;
  UChar32 v19;
  CFIndex v20;
  const __CFBitVector *v21;
  uint64_t v23;

  v23 = a2;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 40))(**a1);
  v8 = v6;
  v9 = *a1[1];
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = v11 + v10;
  if (v6 + v7 >= v11 + v10)
    v13 = v11 + v10;
  else
    v13 = v6 + v7;
  if (v10 <= v6 && v6 < v12)
  {
    v16 = v13 - v6;
  }
  else if (v6 <= v10 && v10 < v6 + v7)
  {
    v16 = v13 - v10;
    v8 = v10;
  }
  else
  {
    v8 = 0;
    v16 = 0;
  }
  FullChar = TCharStreamIterator::GetFullChar((TCharStreamIterator *)*a1, &v23, 0);
  IntPropertyValue = u_getIntPropertyValue(FullChar, UCHAR_VERTICAL_ORIENTATION);
  if ((~FullChar & 0x2C0) != 0
    || (unsigned __int16)FullChar - 711 > 0x24
    || ((1 << (FullChar + 57)) & 0x180004001DLL) == 0)
  {
    if (FullChar >= 0xE000 && (FullChar >> 11 < 0x1F || FullChar >= 0xF0000 && FullChar - 1114110 <= 0xFFFFFC01))
      IntPropertyValue = 1;
  }
  else
  {
    IntPropertyValue = 2;
  }
  while (++v23 < v8 + v16)
  {
    v19 = TCharStreamIterator::GetFullChar((TCharStreamIterator *)*a1, &v23, 0);
    if (u_charType(v19) == 7)
    {
      IntPropertyValue = 3;
      goto LABEL_32;
    }
  }
  if ((IntPropertyValue - 1) <= 1)
  {
    v20 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*a1[1] + 216) + 16)
                              + 2 * *(_QWORD *)(*a1[1] + 200)
                              + 2 * TRun::GetGlyphIndexForCharIndex<false>(*a1[1], a2));
    if (*a1[2] > v20)
    {
      v21 = (const __CFBitVector *)atomic_load(a1[3]);
      if (CFBitVectorGetBitAtIndex(v21, v20))
        IntPropertyValue = 3;
      else
        IntPropertyValue = IntPropertyValue;
    }
  }
LABEL_32:
  *a3 = v8;
  a3[1] = v16;
  return IntPropertyValue;
}

void TTypesetter::SetVerticalFont(TTypesetter *this, TRun *a2, const __CTFont *a3)
{
  TAttributes *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t RenderingStyle;

  v4 = (TTypesetter *)((char *)this + 40);
  TAttributes::SetVerticalFont((TTypesetter *)((char *)this + 40), a2);
  v5 = (char *)this + 192;
  v6 = atomic_load((unint64_t *)this + 7);
  v7 = *(_QWORD *)(v6 + 40);
  RenderingStyle = TAttributes::GetRenderingStyle(v4);
  TStorageRange::ResetAdvances((uint64_t)v5, v7, RenderingStyle);
}

char *CheckForUnboundedLayout(BOOL)::$_0::__invoke()
{
  char *result;

  result = getenv("CTDisallowUnboundedLayout");
  byte_1ECDE7469 = result != 0;
  return result;
}

char *std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<std::pair<UScriptCode,long> const*>,std::__wrap_iter<std::pair<UScriptCode,long> const*>>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  __int128 *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v7 = result;
  v8 = *(_QWORD *)result;
  if (a4 > (uint64_t)(*((_QWORD *)result + 2) - *(_QWORD *)result) >> 4)
  {
    std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__vdeallocate((uint64_t)result);
    if (a4 >> 60)
      abort();
    v9 = *((_QWORD *)v7 + 2) - *(_QWORD *)v7;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__vallocate[abi:nn180100](v7, v11);
    v14 = (char *)*((_QWORD *)v7 + 1);
    v13 = v7 + 8;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
LABEL_18:
    v21 = (char *)(v15 - v12);
    goto LABEL_23;
  }
  v13 = result + 8;
  v12 = (char *)*((_QWORD *)result + 1);
  v17 = (uint64_t)&v12[-v8] >> 4;
  if (v17 < a4)
  {
    v18 = &a2[v17];
    if (v12 != (char *)v8)
    {
      do
      {
        *(_DWORD *)v8 = *(_DWORD *)v6;
        *(_QWORD *)(v8 + 8) = *((_QWORD *)v6++ + 1);
        v8 += 16;
      }
      while (v6 != v18);
    }
    v15 = v12;
    if (v18 != a3)
    {
      v19 = v12;
      do
      {
        v20 = *v18++;
        *(_OWORD *)v19 = v20;
        v19 += 16;
        v15 += 16;
      }
      while (v18 != a3);
    }
    goto LABEL_18;
  }
  v22 = *(_QWORD *)result;
  if (a2 != a3)
  {
    v23 = *(_QWORD *)result;
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v6;
      *(_QWORD *)(v23 + 8) = *((_QWORD *)v6 + 1);
      v22 += 16;
      ++v6;
      v23 += 16;
    }
    while (v6 != a3);
  }
  v21 = (char *)(v22 - v8);
  v12 = (char *)v8;
LABEL_23:
  *v13 = &v21[(_QWORD)v12];
  return result;
}

void std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__vdeallocate(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 40);
    if (a1 + 24 <= (unint64_t)v2 && v3 > v2)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 40))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

char *std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    abort();
  result = (char *)TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

_QWORD *std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  size_t v15;

  v7 = result;
  v8 = (char *)*result;
  if (result[2] - *result < a4)
  {
    std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__vdeallocate((uint64_t)result);
    if ((a4 & 0x8000000000000000) != 0)
      abort();
    v9 = v7[2] - *v7;
    v10 = 2 * v9;
    if (2 * v9 <= a4)
      v10 = a4;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__vallocate[abi:nn180100](v7, v11);
    v8 = (char *)v7[1];
    goto LABEL_15;
  }
  v12 = (_BYTE *)result[1];
  if (v12 - v8 >= a4)
  {
LABEL_15:
    v15 = a3 - __src;
    if (v15)
      result = memmove(v8, __src, v15);
    v14 = &v8[v15];
    goto LABEL_18;
  }
  v13 = &__src[v12 - v8];
  if (v12 != v8)
  {
    result = memmove((void *)*result, __src, v12 - v8);
    v8 = (char *)v7[1];
  }
  if (a3 != v13)
    result = memmove(v8, v13, a3 - v13);
  v14 = &v8[a3 - v13];
LABEL_18:
  v7[1] = v14;
  return result;
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__vdeallocate(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 152);
    if (a1 + 24 <= (unint64_t)v2 && v3 > v2)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 152))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_QWORD *std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(_QWORD *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 2)
  {
    std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vdeallocate((uint64_t)result);
    if (a4 >> 62)
      abort();
    v9 = v7[2] - *v7;
    v10 = v9 >> 1;
    if (v9 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (char **)(v7 + 1);
    v8 = v13;
LABEL_14:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v8;
      v19 = __src;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v12 = (char **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v8) >> 2;
  if (v15 >= a4)
    goto LABEL_14;
  v16 = &__src[4 * v15];
  if (v14 != v8)
  {
    result = memmove((void *)*result, __src, 4 * v15);
    v8 = *v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v8;
    v19 = v16;
LABEL_16:
    result = memmove(v18, v19, v17);
  }
LABEL_17:
  *v12 = &v8[v17];
  return result;
}

char *std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    abort();
  result = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void VerticalFormsFeature(void)::$_0::__invoke()
{
  uint64_t v0;
  unint64_t v1;
  id v2;

  v0 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 4);
  v2 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], v0, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 0), 0, 0);
  do
    v1 = __ldaxr((unint64_t *)&v2);
  while (__stlxr(0, (unint64_t *)&v2));
  qword_1ECDE7478 = v1;

}

void RotationCopyOf(__CTFont const*)::$_0::__invoke()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 4);
  v1 = -[CTFeatureSetting initWithType:selector:tag:value:]([CTFeatureSetting alloc], v0, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 2), 0, 0);
  v2 = v1;
  v3 = CFSTR("NSCTFontFeatureSettingsAttribute");
  v4[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v2, 1);
  qword_1ECDE7488 = (uint64_t)CTFontDescriptorCreateWithAttributes((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1));

}

void std::__shared_ptr_emplace<TCallbackBidiLevelsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TCallbackBidiLevelsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__shared_ptr_emplace<TCallbackBidiLevelsProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TCharStreamCFString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TCharStreamCFString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

void std::__shared_ptr_pointer<TBidiLevelsProvider  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

CFTypeID CTLineGetTypeID(void)
{
  if (TCFBase<TLine>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TLine>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TLine>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TLine>::fTypeID;
}

const __CFArray *CTLineCreateWithRunArray(CFArrayRef theArray)
{
  const __CFArray *v1;
  uint64_t v2;
  _QWORD *v3;
  TLine *v4;
  void *v5;
  id v7;
  id v8;

  v1 = theArray;
  if (theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      return 0;
    }
    else
    {
      v2 = TCFBase<TLine>::Allocate();
      if (v2)
      {
        v3 = (_QWORD *)v2;
        v4 = (TLine *)(v2 + 48);
        v3[2] = 0;
        v3[3] = 0;
        v3[4] = 0;
        v3[5] = v4;
        TLine::TLine(v4, v1);
        v8 = v3;
        do
          v5 = (void *)__ldaxr((unint64_t *)&v8);
        while (__stlxr(0, (unint64_t *)&v8));
        v7 = v5;

      }
      else
      {
        v7 = 0;
      }
      do
        v1 = (const __CFArray *)__ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));

    }
  }
  return v1;
}

unint64_t CTLineCreateWithUniCharProvider(const unsigned __int16 *(*a1)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a2)(const unsigned __int16 *, void *), void *a3)
{
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  id v13;
  uint64_t __dst[35];

  __dst[34] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  memcpy(__dst, &unk_18492F098, 0x110uLL);
  TTypesetterUniChar::TTypesetterUniChar((TTypesetterUniChar *)__dst, a1, a2, a3);
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(__dst, (unint64_t *)&v13);
  if (atomic_load((unint64_t *)&v13))
  {
    v7 = atomic_load((unint64_t *)&v13);
    TTypesetter::FillLine((TTypesetter *)__dst, *(TLine **)(v7 + 40), 1.79769313e308, 0.0);
    v8 = ExternalizeLine((unint64_t *)&v13);
  }
  else
  {
    v8 = 0;
  }

  v9 = (std::__shared_weak_count *)__dst[31];
  if (__dst[31])
  {
    v10 = (unint64_t *)(__dst[31] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  TLine::~TLine((TLine *)__dst);
  return v8;
}

uint64_t **CreateTruncatedLine(uint64_t **a1, unsigned __int32 a2, void *a3, const void *a4, double a5)
{
  unint64_t v5;
  uint64_t *v11;
  void *Table;
  double v13;
  double *v14;
  unint64_t v16;
  TLine *v17;
  __int128 v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  id v23;

  v5 = 0;
  if (a1 && a5 > 0.0)
  {
    v11 = a1[5];
    Table = GetTable();
    v13 = 0.0002;
    if (Table)
    {
      v14 = (double *)*((_QWORD *)Table + 8);
      if (v14)
        v13 = *v14;
    }
    if (v13 + a5 >= *((double *)v11 + 13))
      return a1;
    v23 = (id)0xAAAAAAAAAAAAAAAALL;
    TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(a1[5], (unint64_t *)&v23);
    if (!atomic_load((unint64_t *)&v23))
      goto LABEL_11;
    v16 = atomic_load((unint64_t *)&v23);
    v17 = *(TLine **)(v16 + 40);
    v20 = -1;
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21 = v18;
    v22 = v18;
    TTruncator::TTruncator((uint64_t)&v20, (uint64_t)a1, (uint64_t)v17);
    TLine::SetTruncationInfo((uint64_t)v17, a2, a3, a4, a5);
    TTruncator::Truncate((uint64_t **)&v20, a2, (__CTLine *)a3, (uint64_t)a4, a5);
    if (*((_QWORD *)v17 + 3) == *((_QWORD *)v17 + 2))
    {
LABEL_11:
      v5 = 0;
    }
    else
    {
      TLine::UpdateWidth(v17, 0.0);
      v5 = ExternalizeLine((unint64_t *)&v23);
    }

  }
  return (uint64_t **)v5;
}

CTLineRef CTLineCreateJustifiedLine(CTLineRef line, CGFloat justificationFactor, double justificationWidth)
{
  const __CTLine *v3;
  double v4;
  BOOL v5;
  double v6;
  id v8;

  v3 = 0;
  if (line && justificationWidth >= 0.0)
  {
    v4 = 1.0;
    if (justificationFactor <= 1.0)
      v4 = justificationFactor;
    v5 = justificationFactor < 0.0;
    v6 = 0.0;
    if (!v5)
      v6 = v4;
    TJustEngine::CreateJustifiedLine(*((const TCharStream ***)line + 5), 0, v6, justificationWidth, (unint64_t *)&v8);
    v3 = (const __CTLine *)ExternalizeLine((unint64_t *)&v8);

  }
  return v3;
}

uint64_t TLine::GetNonDeletedGlyphCount(TLine *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 18);
  if (v1 && (*((_WORD *)this + 77) & 8) != 0)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 2);
    v3 = (uint64_t *)*((_QWORD *)this + 3);
    if (v2 == v3)
    {
      return 0;
    }
    else
    {
      v1 = 0;
      do
      {
        v4 = *v2++;
        v1 += TRun::GetNonDeletedGlyphCount(*(TRun **)(v4 + 40));
      }
      while (v2 != v3);
    }
  }
  return v1;
}

uint64_t CTLineGetRunCount(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(*(_QWORD *)(result + 40) + 24) - *(_QWORD *)(*(_QWORD *)(result + 40) + 16)) >> 3;
  return result;
}

uint64_t CTLineGetRunAtIndex(uint64_t result, uint64_t a2)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 16) + 8 * a2);
  return result;
}

CFIndex CTLineGetStringIndexForPosition(CTLineRef line, CGPoint position)
{
  if (line)
    return TLine::PositionToCharIndex(*((__n128 **)line + 5), position);
  else
    return -1;
}

unint64_t CTLineCopyCaretPathForStringIndex(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  id v4;

  if (!a1)
    return 0;
  TLine::CopyCaretPath(*(TLine **)(a1 + 40), a2, (unint64_t *)&v4);
  do
    v2 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

unint64_t CTLineCopyHighlightPathForStringRange(uint64_t a1, CFRange a2)
{
  unint64_t v2;
  id v4;

  if (!a1)
    return 0;
  TLine::CopyHighlightPath(*(TLine **)(a1 + 40), a2, (unint64_t *)&v4);
  do
    v2 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

void CTLineEnumerateCaretOffsets(CTLineRef line, void *block)
{
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (line && block)
  {
    v2 = (__n128 *)*((_QWORD *)line + 5);
    v5[0] = &off_1E15DEF30;
    v5[1] = _Block_copy(block);
    v6 = v5;
    TLine::EnumerateCaretOffsets(v2, (uint64_t)v5);
    v3 = v6;
    if (v6 == v5)
    {
      v4 = 4;
      v3 = v5;
    }
    else
    {
      if (!v6)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
}

CFIndex CTLineGetRangeOfCharacterClusterAtIndex(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  TLine *v5;
  _QWORD *v6;
  CFIndex ClusterRange;
  const __CFAllocator *v10;
  CGMutablePathRef v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  __n128 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  int64_t v28;
  int v29;
  int v30;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  TFont *v35;
  uint64_t v36;
  CGFloat *v37;
  int64_t v38;
  __int128 v40;
  CGPath *v41;
  const CGPath *v42;
  unint64_t v43;
  unint64_t v44;
  __int16 *v45;
  int v46;
  const void *v48;
  __CFArray *v49;
  unint64_t v50;
  unint64_t v51;
  const __CFArray *v53;
  CFIndex Count;
  unint64_t v55;
  const __CFArray *v56;
  const void *ValueAtIndex;
  __CFArray *v58;
  unint64_t v59;
  const __CFAllocator *allocator;
  CFIndex v61;
  TLine *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  CGAffineTransform m;
  id v70;
  id v71;
  CFMutableArrayRef Mutable;
  int v73[5];
  _QWORD v74[4];

  v74[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return -1;
  v5 = *(TLine **)(a1 + 40);
  v6 = (_QWORD *)*((_QWORD *)v5 + 9);
  if ((uint64_t)v6 > a2 || (uint64_t)v6 + *((_QWORD *)v5 + 10) <= a2)
    return -1;
  memset(v73, 170, sizeof(v73));
  ClusterRange = TLine::GetClusterRange(v5, *(_QWORD **)v5, a2, 2, &v73[1], 0, v73);
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v71 = 0;
    if (a4)
    {
      v11 = CGPathCreateMutable();
      do
        v12 = (void *)__ldaxr((unint64_t *)&v71);
      while (__stlxr((unint64_t)v11, (unint64_t *)&v71));

    }
    v13 = (_QWORD *)*((_QWORD *)v5 + 2);
    v14 = (_QWORD *)*((_QWORD *)v5 + 3);
    v61 = ClusterRange;
    allocator = v10;
    if (v13 == v14)
    {
      v18 = 0xAAAAAAAAAAAAAAAALL;
      v16 = (_QWORD *)*((_QWORD *)v5 + 2);
    }
    else
    {
      v15 = 0;
      v16 = (_QWORD *)*((_QWORD *)v5 + 2);
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*v16 + 40) + 208) + v15;
        if (v17 > *(uint64_t *)&v73[1])
          break;
        ++v16;
        v15 = v17;
        if (v16 == v14)
        {
          v18 = 0xAAAAAAAAAAAAAAAALL;
          v16 = (_QWORD *)*((_QWORD *)v5 + 3);
          goto LABEL_18;
        }
      }
      v18 = *(_QWORD *)&v73[1] - v15;
    }
LABEL_18:
    v19 = *(_QWORD *)&v73[3];
    if (*(uint64_t *)&v73[3] < 1)
      goto LABEL_52;
    v20 = v16 - v13;
    v62 = v5;
    v63 = a4;
    while (1)
    {
      v21 = (void *)MEMORY[0x186DC070C]();
      v22 = (_QWORD *)*((_QWORD *)v5 + 2);
      if (v20 >= (uint64_t)(*((_QWORD *)v5 + 3) - (_QWORD)v22) >> 3)
      {
        objc_autoreleasePoolPop(v21);
LABEL_52:
        ClusterRange = v61;
        if (a3)
        {
          if ((v73[0] & 0x80000000) == 0)
          {
            do
              v50 = __ldaxr((unint64_t *)&Mutable);
            while (__stlxr(0, (unint64_t *)&Mutable));
            *a3 = v50;
            goto LABEL_56;
          }
          *(_QWORD *)&m.a = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          v53 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
          Count = CFArrayGetCount(v53);
          if (Count >= 1)
          {
            v55 = Count + 1;
            do
            {
              v56 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
              ValueAtIndex = CFArrayGetValueAtIndex(v56, v55 - 2);
              v58 = (__CFArray *)atomic_load((unint64_t *)&m);
              CFArrayAppendValue(v58, ValueAtIndex);
              --v55;
            }
            while (v55 > 1);
          }
          do
            v59 = __ldaxr((unint64_t *)&m);
          while (__stlxr(0, (unint64_t *)&m));
          *a3 = v59;

          if (!a4)
          {
LABEL_59:

            return ClusterRange;
          }
        }
        else
        {
LABEL_56:
          if (!a4)
            goto LABEL_59;
        }
        do
          v51 = __ldaxr((unint64_t *)&v71);
        while (__stlxr(0, (unint64_t *)&v71));
        *a4 = v51;
        goto LABEL_59;
      }
      v67 = v21;
      v23 = *(__n128 **)(v22[v20] + 40);
      v24 = v23[16].n128_u64[1];
      v25 = v23[13].n128_i64[0];
      v65 = v24;
      v66 = *(_QWORD *)(v23[13].n128_u64[1] + 16);
      v64 = v23[12].n128_u64[1];
      v26 = v25 - v18;
      if (v25 >= v18)
        v25 = v18;
      if (v25 < 1)
      {
        v28 = v18;
      }
      else
      {
        v27 = (__int16 *)(v66 + 2 * v64);
        v28 = v18;
        do
        {
          v30 = *v27++;
          v29 = v30;
          v32 = v24-- != 0;
          v33 = v29 == -1 && v32;
          v28 -= v33;
          --v25;
        }
        while (v25);
      }
      if (v26 >= v19)
        v26 = v19;
      v68 = v26;
      if (!a4)
        goto LABEL_42;
      v34 = atomic_load(&v23[3].n128_u64[1]);
      v35 = *(TFont **)(v34 + 40);
      TRun::GetPositions(v23, 0);
      if (v68 >= 1)
        break;
LABEL_51:
      v19 -= v68;
      ++v20;
      objc_autoreleasePoolPop(v67);
      v18 = 0;
      v5 = v62;
      a4 = v63;
      if (v19 <= 0)
        goto LABEL_52;
    }
    v37 = (CGFloat *)(v36 + 16 * v18 + 8);
    v38 = v18;
    do
    {
      v70 = (id)0xAAAAAAAAAAAAAAAALL;
      TFont::CreatePathForGlyph(v35, 0, *(unsigned __int16 *)(v66 + 2 * v64 + 2 * v38), (unint64_t *)&v70);
      if (atomic_load((unint64_t *)&v70))
      {
        *(_QWORD *)&v40 = -1;
        *((_QWORD *)&v40 + 1) = -1;
        *(_OWORD *)&m.c = v40;
        *(_OWORD *)&m.tx = v40;
        *(_OWORD *)&m.a = v40;
        CGAffineTransformMakeTranslation(&m, *(v37 - 1), *v37);
        v41 = (CGPath *)atomic_load((unint64_t *)&v71);
        v42 = (const CGPath *)atomic_load((unint64_t *)&v70);
        CGPathAddPath(v41, &m, v42);
      }

      ++v38;
      v37 += 2;
    }
    while (v38 < v68 + v18);
LABEL_42:
    if (v68 >= 1)
    {
      v43 = v68 + 1;
      v44 = v65 - v18;
      v45 = (__int16 *)(v66 + 2 * v18 + 2 * v64);
      do
      {
        v46 = *v45++;
        if (v46 != -1 || v44 == 0)
        {
          v74[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v20);
          v74[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v28);
          v48 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 2);
          v49 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
          CFArrayAppendValue(v49, v48);
          ++v28;
        }
        --v43;
        --v44;
      }
      while (v43 > 1);
    }
    goto LABEL_51;
  }
  return ClusterRange;
}

void CTLineDrawAttributedString(const __CFAttributedString *a1, CGContext *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[28];
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD __dst[35];

  __dst[34] = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_18492F098, 0x110uLL);
  TTypesetterAttrString::TTypesetterAttrString((TTypesetterAttrString *)__dst, a1, 0, 0);
  v19 = unk_18492F244;
  v21 = unk_18492F258;
  memset(&v12[8], 170, 24);
  *(_QWORD *)v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v13 = &v12[8];
  BYTE8(v21) = 0;
  v17 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(&v18[8], 0, 20);
  v20 = 0uLL;
  LOBYTE(v21) = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  *(_QWORD *)v18 = 0xFFEFFFFFFFFFFFFFLL;
  TTypesetter::FillLine((TTypesetter *)__dst, (TLine *)&v10, 1.79769313e308, 0.0);
  v4 = (uint64_t *)v11;
  if ((uint64_t)(*((_QWORD *)&v11 + 1) - v11) >= 1)
  {
    v5 = (*((_QWORD *)&v11 + 1) - (_QWORD)v11) >> 3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v6 = *v4++;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 272) = &v10;
      --v5;
    }
    while (v5);
  }
  TLine::DrawGlyphs((TLine *)&v10, a2);
  TLine::~TLine((TLine *)&v10);
  v7 = (std::__shared_weak_count *)__dst[31];
  if (__dst[31])
  {
    v8 = (unint64_t *)(__dst[31] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  TLine::~TLine((TLine *)__dst);
}

void *CTLineCreateCopyWithAttributeOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFIndex v4;
  CFIndex v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFAllocator *v10;
  const __CFAttributedString *v11;
  const __CFAttributedString *MutableCopy;
  __CFAttributedString *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  CFIndex v22;
  CFIndex v23;
  uint64_t v26;
  CTLineRef v27;
  uint64_t *v28;
  unint64_t v30;
  CFIndex *v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  unint64_t HyphenatedLineWithOffset;
  void *v37;
  uint64_t v38;
  double v39;
  unsigned __int32 v40;
  void *v41;
  const void *v42;
  uint64_t **TruncatedLine;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __CFString *v50;
  std::__shared_weak_count *v51;
  id v52;
  _QWORD v53[4];
  id v54;
  __int128 v55;
  id v56;
  _QWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70[4];
  _QWORD v71[3];
  _OWORD __dst[17];
  uint64_t v73;
  CFRange v74;
  CFRange v75;

  v73 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(_QWORD *)(v3 + 80);
  v6 = *(_QWORD **)v3;
  v7 = *(std::__shared_weak_count **)(v3 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v69 = 0;
  v68 = 0u;
  *(_QWORD *)&v68 = v6[2];
  v56 = (id)0xAAAAAAAAAAAAAAAALL;
  v57 = v6;
  (*(void (**)(id *__return_ptr))(*v6 + 32))(&v56);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = (const __CFAttributedString *)atomic_load((unint64_t *)&v56);
  MutableCopy = CFAttributedStringCreateMutableCopy(v10, 0, v11);
  v13 = MutableCopy;
  v14 = *(_QWORD *)(v3 + 96);
  v51 = v7;
  if (v14 && (v15 = *(_QWORD *)(v14 + 312)) != 0 && (v16 = atomic_load((unint64_t *)(v15 + 80))) != 0)
  {
    v50 = (__CFString *)v16;
    v17 = *(_QWORD *)(v14 + 8);
    v74.length = CFAttributedStringGetLength(MutableCopy) - v17;
    v74.location = v17;
    CFAttributedStringReplaceString(v13, v74, &stru_1E15EDAC0);
  }
  else
  {
    v50 = 0;
  }
  v70[0] = v4;
  if (v5 >= 1)
  {
    v18 = v5 + v4;
    v19 = MEMORY[0x1E0C809B0];
    v20 = v4;
    do
    {
      __dst[0] = (unint64_t)v20;
      v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(a2 + 16))(a2, v20, __dst);
      v22 = *(_QWORD *)&__dst[0];
      if (v18 >= *((_QWORD *)&__dst[0] + 1) + *(_QWORD *)&__dst[0])
        v23 = *((_QWORD *)&__dst[0] + 1) + *(_QWORD *)&__dst[0];
      else
        v23 = v5 + v4;
      if (*(uint64_t *)&__dst[0] <= v4 && v4 < *((_QWORD *)&__dst[0] + 1) + *(_QWORD *)&__dst[0])
      {
        v26 = v23 - v4;
        v22 = v4;
      }
      else if (v4 <= *(uint64_t *)&__dst[0] && *(_QWORD *)&__dst[0] < v18)
      {
        v26 = v23 - *(_QWORD *)&__dst[0];
      }
      else
      {
        v22 = 0;
        v26 = 0;
      }
      *(_QWORD *)&__dst[0] = v22;
      *((_QWORD *)&__dst[0] + 1) = v26;
      if (v26 < 1)
      {
        TCharStreamIterator::GetFullChar((TCharStreamIterator *)&v57, v70, 0);
        v20 = ++v70[0];
      }
      else
      {
        v53[0] = v19;
        v53[1] = 3321888768;
        v53[2] = __CTLineCreateCopyWithAttributeOverrides_block_invoke;
        v53[3] = &__block_descriptor_56_8_32c36_ZTS6TCFRefIP20__CFAttributedStringE_e15_v32__0_8_16_B24l;
        v54 = v13;
        v55 = __dst[0];
        objc_msgSend(v21, "enumerateKeysAndObjectsUsingBlock:", v53);
        v20 = *((_QWORD *)&__dst[0] + 1) + *(_QWORD *)&__dst[0];
        v70[0] = *((_QWORD *)&__dst[0] + 1) + *(_QWORD *)&__dst[0];

      }
    }
    while (v20 < v18);
  }
  memcpy(__dst, &unk_18492F098, sizeof(__dst));
  TTypesetterAttrString::TTypesetterAttrString((TTypesetterAttrString *)__dst, v13, 0, 0);
  v27 = CTLineCreateWithAttributedString(v13);
  v28 = (uint64_t *)*((_QWORD *)v27 + 5);
  v52 = (id)0xAAAAAAAAAAAAAAAALL;
  TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>((uint64_t *)__dst, (unint64_t *)&v52);
  if (atomic_load((unint64_t *)&v52))
  {
    v30 = atomic_load((unint64_t *)&v52);
    v31 = *(CFIndex **)(v30 + 40);
    if (*(_BYTE *)(v3 + 184))
      v32 = *(double *)(v3 + 176);
    else
      v32 = 0.0;
    v33 = *v28;
    v70[0] = (uint64_t)v28;
    v70[1] = v33;
    v70[2] = 0;
    v70[3] = 0;
    v71[0] = 0;
    *(_QWORD *)((char *)v71 + 6) = 0;
    v71[2] = 0;
    v75.location = v4;
    v75.length = v5;
    TTypesetter::FillLine((const TLine **)v70, (TLine *)v31, v75, 1.79769313e308, v32);
    v34 = ExternalizeLine((unint64_t *)&v52);
    v35 = (void *)v34;
    if (v50)
    {
      HyphenatedLineWithOffset = CTLineCreateHyphenatedLineWithOffset(v34, v31[9], v31[10], v50, v32);
      if (HyphenatedLineWithOffset)
      {
        v37 = (void *)HyphenatedLineWithOffset;
        CFRelease(v35);
        v35 = v37;
      }
    }
    v38 = *(_QWORD *)(v3 + 192);
    if (v38)
    {
      v39 = *(double *)v38;
      v40 = *(_DWORD *)(v38 + 8);
      v41 = (void *)atomic_load((unint64_t *)(v38 + 16));
      v42 = (const void *)atomic_load((unint64_t *)(v38 + 24));
      TruncatedLine = CreateTruncatedLine((uint64_t **)v35, v40, v41, v42, v39);

      v35 = TruncatedLine;
    }
  }
  else
  {
    v35 = 0;
  }

  v44 = (std::__shared_weak_count *)*((_QWORD *)&__dst[15] + 1);
  if (*((_QWORD *)&__dst[15] + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&__dst[15] + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  TLine::~TLine((TLine *)__dst);

  if (v51)
  {
    v47 = (unint64_t *)&v51->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v35;
}

id __copy_helper_block_8_32c36_ZTS6TCFRefIP20__CFAttributedStringE(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)(a2 + 32));
  result = v3;
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c36_ZTS6TCFRefIP20__CFAttributedStringE(uint64_t a1)
{

}

void _CTLineEnumerateDecorations(uint64_t a1, CGContext *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD v5[5];
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v7 = 0xAAAAAAAA00000000;
    v8 = a4;
    v6 = -1;
    v5[0] = xmmword_18492F040;
    memset(&v5[1], 255, 64);
    TLineDrawContext::TLineDrawContext((TLineDrawContext *)v5, a2);
    TLine::DrawGlyphsWithAttributeOverrides(v4, (uint64_t)v5);
  }
}

void CTLineDecorationApplyWithBlock(uint64_t a1, __int128 *a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  unint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v14 = 0xAAAAAAAA00000001;
    v15 = a7;
    v8 = a2[1];
    v10 = *a2;
    v11 = v8;
    v12 = a2[2];
    v9[0] = 0xAAAAAAAA00000001;
    v9[1] = 0;
    *(double *)&v9[2] = a3;
    *(double *)&v9[3] = a4;
    v13 = a5;
    TLine::DrawGlyphsWithAttributeOverrides(v7, (uint64_t)v9);
  }
}

uint64_t **CTLineCreateTruncatedLineWithTokenCallback(uint64_t **a1, unsigned __int32 a2, uint64_t a3, uint64_t a4, double a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  if (a3)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CTLineCreateTruncatedLineWithTokenCallback_block_invoke;
    v7[3] = &__block_descriptor_48_e58_____CTRun__32__0____CTLine__8____qq_16____CFDictionary__24l;
    v7[4] = a3;
    v7[5] = a4;
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  return CreateTruncatedLine(a1, a2, 0, v5, a5);
}

void CTLineSyncWithRuns(uint64_t a1)
{
  if (a1)
    TLine::SyncWithRuns(*(TLine **)(a1 + 40));
}

CFIndex CTLineSuggestLineBreakWithOffset(CFIndex result, const TLine *a2, double a3, double a4, uint64_t a5, uint64_t *a6)
{
  if (result)
    return TTypesetter::SuggestLineBreak(*(TTypesetter **)(result + 40), a2, 0, a3, a4, a6);
  return result;
}

CFIndex TTypesetter::SuggestLineBreak(TTypesetter *this, const TLine *a2, uint64_t a3, double a4, double a5, uint64_t *a6)
{
  uint64_t v6;
  CFIndex v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11[4];
  _QWORD v12[3];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  v11[0] = (uint64_t)this;
  v11[1] = v6;
  v11[2] = 0;
  v11[3] = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 6) = 0;
  v12[2] = a3;
  v14 = 0;
  v7 = TTypesetter::SuggestLineBreak(v11, (CFIndex)a2, (uint64_t)v13, a4, a5);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

uint64_t CTLineSuggestClusterBreakWithOffset(uint64_t result, const TLine *a2, double a3, double a4, uint64_t a5, uint64_t *a6)
{
  if (result)
    return TTypesetter::SuggestClusterBreak(*(TTypesetter **)(result + 40), a2, 0, a3, a4, a6);
  return result;
}

CFIndex CTLineSuggestLineBreakWithTabOverflow(CFIndex result, const TLine *a2, uint64_t *a3, uint64_t *a4, double a5, double a6)
{
  TTypesetter *v7;
  uint64_t v8;

  if (result)
  {
    v7 = *(TTypesetter **)(result + 40);
    v8 = -1;
    result = TTypesetter::SuggestLineBreak(v7, a2, (uint64_t)&v8, a5, a6, a4);
    if (a3)
      *a3 = v8;
  }
  return result;
}

void TLine::SetTruncationInfo(uint64_t a1, int a2, id a3, const void *a4, double a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  id v16;

  v16 = a3;
  v15 = _Block_copy(a4);
  v9 = operator new();
  *(double *)v9 = a5;
  *(_DWORD *)(v9 + 8) = a2;
  do
    v10 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));
  *(_QWORD *)(v9 + 16) = v10;
  do
    v11 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  *(_QWORD *)(v9 + 24) = v11;
  v14 = *(_QWORD *)(a1 + 192);
  v13 = (uint64_t *)(a1 + 192);
  v12 = v14;
  *v13 = v9;
  if (v14)
    std::default_delete<TLine::TruncationInfo>::operator()[abi:nn180100]((uint64_t)v13, v12);

}

void std::default_delete<TLine::TruncationInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    JUMPOUT(0x186DC03ACLL);
  }
}

void TLineDrawContext::TLineDrawContext(TLineDrawContext *this, CGContextRef c)
{
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  CGAffineTransform v9;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = c;
  *((_OWORD *)this + 1) = *MEMORY[0x1E0C9D538];
  v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v3 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *((_OWORD *)this + 2) = *MEMORY[0x1E0C9BAA8];
  *((_OWORD *)this + 3) = v4;
  *((_OWORD *)this + 4) = v3;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)&v9.c = v3;
  *(_OWORD *)&v9.tx = v3;
  *(_OWORD *)&v9.a = v3;
  CGContextGetCTM(&v9, c);
  v5 = fabs(v9.a * v9.d - v9.b * v9.c);
  v6 = sqrt(v5);
  v7 = v5 <= 0.001;
  v8 = 1.0;
  if (!v7)
    v8 = v6;
  *((double *)this + 10) = v8;
}

uint64_t TRun::EnsureRareData(TRun *this)
{
  uint64_t result;
  char *v3;
  uint64_t v9;

  result = *((_QWORD *)this + 39);
  if (!result)
  {
    v3 = (char *)this + 312;
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(result + 32) = _Q1;
    *(_QWORD *)(result + 48) = 0xBFF0000000000000;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    v9 = *(_QWORD *)v3;
    *(_QWORD *)v3 = result;
    if (v9)
    {
      std::default_delete<TRun::RareData>::operator()[abi:nn180100]((uint64_t)v3, v9);
      return *(_QWORD *)v3;
    }
  }
  return result;
}

uint64_t TCFBase<TLine>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TLine::operator==(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40));
}

_QWORD *TCFBase<TLine>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

__CFString *TCFBase<TLine>::ClassDebug(uint64_t a1)
{
  __CFString *result;
  __CFString *v3;
  CFStringRef v4;

  result = TLine::DebugDescription(*(TLine **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTLine", a1, result);
    CFRelease(v3);
    return (__CFString *)v4;
  }
  return result;
}

void std::__shared_ptr_pointer<TCharStreamCFString  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__shared_ptr_pointer<TCharStreamCFString  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void std::__function::__func<void({block_pointer})(double,long,BOOL,BOOL *),std::allocator<void({block_pointer})(double,long,BOOL,BOOL *)>,void ()(double,long,BOOL,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

uint64_t std::__function::__func<void({block_pointer})(double,long,BOOL,BOOL *),std::allocator<void({block_pointer})(double,long,BOOL,BOOL *)>,void ()(double,long,BOOL,BOOL *)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(double,long,BOOL,BOOL *),std::allocator<void({block_pointer})(double,long,BOOL,BOOL *)>,void ()(double,long,BOOL,BOOL *)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E15DEF30;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(double,long,BOOL,BOOL *),std::allocator<void({block_pointer})(double,long,BOOL,BOOL *)>,void ()(double,long,BOOL,BOOL *)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(double,long,BOOL,BOOL *),std::allocator<void({block_pointer})(double,long,BOOL,BOOL *)>,void ()(double,long,BOOL,BOOL *)>::operator()(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 8) + 16))(*a2);
}

void TLine::TLine(TLine *this, const __CFArray *a2)
{
  uint64_t i;
  _QWORD *v4;
  TCharStreamCFString *v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  __int128 v15;
  __int128 v16;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_WORD *)this + 77) = 1;
  TLine::SetRunArray((int64x2_t *)this, a2);
  for (i = *((_QWORD *)this + 2); ; i += 8)
  {
    if (i == *((_QWORD *)this + 3))
    {
      v5 = (TCharStreamCFString *)operator new();
      TCharStreamCFString::TCharStreamCFString(v5, &stru_1E15EDAC0, 0);
      *(_QWORD *)&v15 = v6;
      v7 = (_QWORD *)operator new();
      *v7 = &off_1E15E1740;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = v5;
      *((_QWORD *)&v15 + 1) = v7;
      std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)this, &v15);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (!*((_QWORD *)&v15 + 1))
        return;
      v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_15;
    }
    v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)i + 40) + 272);
    if (v4)
      break;
  }
  v11 = v4[1];
  *(_QWORD *)&v16 = *v4;
  *((_QWORD *)&v16 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::shared_ptr<TCharStream const>::operator=[abi:nn180100]((uint64_t)this, &v16);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
LABEL_15:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t TLine::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a1[9] != a2[9] || a1[10] != a2[10])
    return 0;
  if (a1[18] != a2[18])
    return 0;
  v5 = a1[2];
  v6 = a1[3] - v5;
  v7 = v6 >> 3;
  v8 = a2[2];
  if (v6 >> 3 != (a2[3] - v8) >> 3)
    return 0;
  if (v6 < 8)
    return 1;
  if (v7 <= 1)
    v10 = 1;
  else
    v10 = v6 >> 3;
  result = TRun::operator==(*(_QWORD *)(*(_QWORD *)v5 + 40), *(_QWORD *)(*(_QWORD *)v8 + 40));
  if ((_DWORD)result)
  {
    v11 = 1;
    do
    {
      v12 = v11;
      if (v10 == v11)
        break;
      v13 = TRun::operator==(*(_QWORD *)(*(_QWORD *)(a1[2] + 8 * v11) + 40), *(_QWORD *)(*(_QWORD *)(a2[2] + 8 * v11) + 40));
      v11 = v12 + 1;
    }
    while ((v13 & 1) != 0);
    return v12 >= v7;
  }
  return result;
}

__CFString *TLine::DebugDescription(TLine *this)
{
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  uint64_t NonDeletedGlyphCount;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;

  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  v3 = v2 >> 3;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  NonDeletedGlyphCount = TLine::GetNonDeletedGlyphCount(this);
  v7 = (__CFString *)CFStringCreateWithFormat(v4, 0, CFSTR("(%ld, %ld)"), *((_QWORD *)this + 9), *((_QWORD *)this + 10));
  CFStringAppendFormat(Mutable, 0, CFSTR("run count = %ld, string range = %@, width = %lg, A/D/L = %g/%g/%g, glyph count = %ld, runs = (\n"), v2 >> 3, v7, *((_QWORD *)this + 13), *((_QWORD *)this + 14), *((_QWORD *)this + 15), *((_QWORD *)this + 16), NonDeletedGlyphCount);

  if (v2 >= 1)
  {
    v8 = 0;
    if (v3 <= 1)
      v9 = 1;
    else
      v9 = v3;
    v10 = 8 * v9;
    do
    {
      CFStringAppend(Mutable, CFSTR("\n"));
      if (*(_QWORD *)(*((_QWORD *)this + 2) + v8))
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("%@"), *(_QWORD *)(*((_QWORD *)this + 2) + v8));
        v11 = CFSTR("\n\n");
      }
      else
      {
        v11 = CFSTR("<null CTRun?!>\n\n");
      }
      CFStringAppend(Mutable, v11);
      v8 += 8;
    }
    while (v10 != v8);
  }
  CFStringAppend(Mutable, CFSTR(")\n"));
  return Mutable;
}

id TLine::CopyDescriptionDictionary(TLine *this, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  v7 = v6 >> 3;
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6 >> 3), CFSTR("numRuns"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *((_QWORD *)this + 18)), CFSTR("numGlyphs"));
  if (v6 >= 1)
  {
    v8 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    v10 = 8 * v9;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + v8) + 40);
      v12 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
      objc_msgSend(v5, "addObject:", v12);
      CFRelease(v12);
      v8 += 8;
    }
    while (v10 != v8);
  }
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("runs"));
  if ((a2 & 2) != 0)
  {
    v14[0] = CFSTR("ascent");
    v15[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 14));
    v14[1] = CFSTR("descent");
    v15[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 15));
    v14[2] = CFSTR("leading");
    v15[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 16));
    v14[3] = CFSTR("width");
    v15[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 13));
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 4), CFSTR("lineMetrics"));
  }
  return v4;
}

uint64_t TLine::PositionToCharIndex(__n128 *this, CGPoint a2)
{
  double x;
  double v4;
  double v5;
  uint64_t result;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11[24];
  double *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!this->n128_u64[0] || this[1].n128_u64[1] == this[1].n128_u64[0])
    return -1;
  x = a2.x;
  TLine::GetLeftHangersGlyphCountAndWidth((TLine *)this, 0);
  v5 = v4;
  if (v4 == 0.0)
    v5 = -0.0;
  if (x + v5 < 0.0)
  {
    result = this[4].n128_i64[1];
    if ((this[9].n128_u16[4] & 8) == 0)
      return result;
LABEL_11:
    result += this[5].n128_i64[0];
    return result;
  }
  v9 = 0xFFEFFFFFFFFFFFFFLL;
  v10 = -1;
  v8 = -1;
  v7 = (double *)operator new(0x30uLL);
  *(_QWORD *)v7 = &off_1E15E1258;
  *((_QWORD *)v7 + 1) = &v10;
  *((_QWORD *)v7 + 2) = &v9;
  *((_QWORD *)v7 + 3) = &v8;
  v7[4] = x;
  *((_QWORD *)v7 + 5) = this;
  v12 = v7;
  TLine::EnumerateCaretOffsets(this, (uint64_t)v11);
  (*(void (**)(double *))(*(_QWORD *)v7 + 40))(v7);
  result = v10;
  if (v10 == -1)
  {
    result = this[4].n128_i64[1];
    if ((this[9].n128_u16[4] & 8) == 0)
      goto LABEL_11;
  }
  return result;
}

void TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)const::$_0::operator()(uint64_t a1, unint64_t a2, int a3, __n128 a4)
{
  _QWORD *v4;
  double *v5;
  double *v6;
  double *v7;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  double *v12;
  double *v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;

  v5 = *(double **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  if (a3 < 0)
  {
    v6 = &v5[2 * a2];
    v7 = &v5[2 * *v4 - 2];
    if (*v4 != a2 && v7 > v6)
    {
      v9 = (unint64_t)(v6 + 2);
      do
      {
        a4 = *(__n128 *)(v9 - 16);
        *(_OWORD *)(v9 - 16) = *(_OWORD *)v7;
        *(__n128 *)v7 = a4;
        v7 -= 2;
        v10 = v9 >= (unint64_t)v7;
        v9 += 16;
      }
      while (!v10);
      v5 = *(double **)a1;
      v4 = *(_QWORD **)(a1 + 8);
    }
  }
  v11 = a2 >> 1;
  v12 = &v5[4 * (a2 >> 1)];
  v13 = &v5[4 * (*v4 >> 1)];
  if ((char *)v13 - (char *)v12 <= 4096)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>((uint64_t)&v5[4 * (a2 >> 1)], &v5[4 * (*v4 >> 1)], ((char *)v13 - (char *)v12) >> 5, 0, 0, a4);
  }
  else
  {
    v14 = std::get_temporary_buffer[abi:nn180100]<TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair>(((char *)v13 - (char *)v12) >> 5);
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>((uint64_t)v12, v13, ((char *)v13 - (char *)v12) >> 5, (uint64_t)v14, v15, v16);
    if (v14)
      operator delete(v14);
  }
  if (((char *)v13 - (char *)v12) >> 5 >= v11)
    v17 = v11;
  else
    v17 = ((char *)v13 - (char *)v12) >> 5;
  v18 = (double *)std::get_temporary_buffer[abi:nn180100]<TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair>(v17);
  std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(v5, v12, v13, v11, ((char *)v13 - (char *)v12) >> 5, v18, v19);
  if (v18)
    operator delete(v18);
}

void TLine::CopyCaretPath(TLine *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGPath *v13;
  double v14;
  double v15;
  CGPath *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id Mutable;

  if (!*(_QWORD *)this || *((_QWORD *)this + 3) == *((_QWORD *)this + 2))
  {
    *a3 = 0;
  }
  else
  {
    Mutable = CGPathCreateMutable();
    v6 = atomic_load((unint64_t *)&Mutable);
    if (v6)
    {
      v7 = *((double *)this + 14);
      v8 = *((double *)this + 15);
      TLine::CharIndexToOffsets((uint64_t)this, a2);
      if (v9 == v10)
      {
        v11 = -v8;
        v12 = v7 + v8;
        v13 = (CGPath *)atomic_load((unint64_t *)&Mutable);
      }
      else
      {
        v14 = v10;
        v12 = (v7 + v8) * 0.5;
        v11 = -v8;
        v15 = v12 - v8;
        v16 = (CGPath *)atomic_load((unint64_t *)&Mutable);
        v17 = 1.0;
        v18 = v12;
        CGPathAddRect(v16, 0, *(CGRect *)&v9);
        v13 = (CGPath *)atomic_load((unint64_t *)&Mutable);
        v9 = v14;
      }
      v19 = 1.0;
      v20 = v11;
      v21 = v12;
      CGPathAddRect(v13, 0, *(CGRect *)&v9);
      do
        v6 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
    }
    *a3 = v6;

  }
}

void TLine::CopyHighlightPath(TLine *this@<X0>, CFRange a2@<0:X1, 8:X2>, unint64_t *a3@<X8>)
{
  CFIndex location;
  CFIndex v6;
  uint64_t v7;
  CFIndex v8;
  CFIndex v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CFIndex v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  CGFloat *v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex *v36;
  CGFloat *v37;
  CFIndex v38;
  CFIndex v39;
  CGFloat *v40;
  double v41;
  CGPath *v43;
  unint64_t *v44;
  uint64_t v45;
  id Mutable;
  CGRect v47;

  if (!*(_QWORD *)this)
    goto LABEL_46;
  location = a2.location;
  v6 = *((_QWORD *)this + 9);
  v7 = *((_QWORD *)this + 10);
  v8 = v7 + v6;
  v9 = a2.location + a2.length >= v7 + v6 ? v7 + v6 : a2.location + a2.length;
  if (v6 <= a2.location && a2.location < v8)
  {
    v12 = v9 - a2.location;
  }
  else if (a2.location <= v6 && v6 < a2.location + a2.length)
  {
    v12 = v9 - v6;
    location = *((_QWORD *)this + 9);
  }
  else
  {
    location = 0;
    v12 = 0;
  }
  if (v12 <= 0 || (v14 = *((_QWORD *)this + 2), v13 = *((_QWORD *)this + 3), v15 = v13 - v14, v13 == v14))
  {
LABEL_46:
    *a3 = 0;
  }
  else
  {
    Mutable = CGPathCreateMutable();
    v16 = atomic_load((unint64_t *)&Mutable);
    if (v16)
    {
      v44 = a3;
      v17 = *(double **)(*(_QWORD *)(**((_QWORD **)this + 2) + 40) + 312);
      if (!v17)
        v17 = (double *)MEMORY[0x1E0C9D820];
      v18 = *v17;
      TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
      if (v15 > 0)
      {
        v20 = 0;
        v21 = v15 >> 3;
        v22 = *((double *)this + 15);
        v23 = -v22;
        v24 = v22 + *((double *)this + 14);
        v25 = v19;
        if (v19 == 0.0)
          v25 = 0.0;
        v26 = v18 - v25;
        v27 = location + v12;
        if (v21 <= 1)
          v21 = 1;
        v45 = v21;
        do
        {
          v28 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v20) + 40);
          v29 = (_QWORD *)v28[27];
          v30 = v29[4];
          if (v30 || (v34 = v29[3]) == 0)
          {
            v31 = 0;
            v32 = v28[25];
            v33 = (CGFloat *)(v30 + 16 * v32);
          }
          else
          {
            v32 = v28[25];
            v33 = (CGFloat *)(v34 + 8 * v32);
            v31 = 1;
          }
          v35 = v28[26];
          if (v35 >= 1)
          {
            v36 = (CFIndex *)(v29[6] + 8 * v32);
            v37 = v33;
            do
            {
              v39 = *v36++;
              v38 = v39;
              if (v31)
                v40 = v33;
              else
                v40 = v37;
              v41 = *v40;
              if (location <= v38 && v27 > v38)
              {
                v43 = (CGPath *)atomic_load((unint64_t *)&Mutable);
                v47.origin.x = v26;
                v47.origin.y = v23;
                v47.size.width = *v40;
                v47.size.height = v24;
                CGPathAddRect(v43, 0, v47);
              }
              v26 = v26 + v41;
              v37 += 2;
              ++v33;
              --v35;
            }
            while (v35);
          }
          ++v20;
        }
        while (v20 != v45);
      }
      do
        v16 = __ldaxr((unint64_t *)&Mutable);
      while (__stlxr(0, (unint64_t *)&Mutable));
      a3 = v44;
    }
    *a3 = v16;

  }
}

void TLine::DrawTransformedGlyphs(TLine *this, CGContextRef c)
{
  __int128 v4;
  const __CFString **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGColor *v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 *v23;
  __n128 v24;
  __n128 Positions;
  uint64_t v26;
  CGFloat tx;
  CGFloat ty;
  __int128 v29;
  float64x2_t v30;
  float64x2_t v31;
  int64x2_t v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  const CGPath *v48;
  unint64_t v49;
  int v50;
  CGFloat v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  double a;
  CGFloat v58;
  double b;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double d;
  CGFloat v64;
  CGAffineTransform v65;
  CGAffineTransform v66;
  CGAffineTransform v67;
  CGAffineTransform v68;
  CGAffineTransform v69;
  CGAffineTransform v70;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  CFRange v76;

  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&v70.c = v4;
  *(_OWORD *)&v70.tx = v4;
  *(_OWORD *)&v70.a = v4;
  CGContextGetTextMatrix(&v70, c);
  TLine::DrawBackground(this, c);
  v7 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v8 = v6 - v7;
  if (v6 == v7)
  {
LABEL_8:
    v13 = 1;
    goto LABEL_9;
  }
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v7 + 40);
    v10 = *(_QWORD *)(v9 + 312);
    if (!v10 || *(_QWORD *)(v10 + 56) == *(_QWORD *)(v10 + 64))
      goto LABEL_7;
    t1.a = -3.72066208e-103;
    TAttributes::CopyForegroundColorForContext((TAttributes *)(v9 + 40), c, v5, &t1);
    if (atomic_load((unint64_t *)&t1))
    {
      v12 = (CGColor *)atomic_load((unint64_t *)&t1);
      if (CGColorGetAlpha(v12) < 1.0)
        break;
    }

LABEL_7:
    v7 += 8;
    if (v7 == v6)
      goto LABEL_8;
  }

  v13 = 0;
LABEL_9:
  if (v8 < 1)
  {
    v16 = 0;
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v8 >> 3;
    if (v8 >> 3 <= 1)
      v17 = 1;
    v18 = 8 * v17;
    v56 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
    do
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 2) + v14);
      v20 = *(__n128 **)(v19 + 40);
      v21 = v20[13].n128_u64[0];
      if ((v13 & 1) != 0)
      {
        *(_QWORD *)&v22 = -1;
        *((_QWORD *)&v22 + 1) = -1;
        *(_OWORD *)&v69.c = v22;
        *(_OWORD *)&v69.tx = v22;
        *(_OWORD *)&v69.a = v22;
        v23 = v20 + 6;
        if (!v20[9].n128_u8[0])
          v23 = (__n128 *)MEMORY[0x1E0C9BAA8];
        v24 = v23[1];
        *(__n128 *)&t2.a = *v23;
        *(__n128 *)&t2.c = v24;
        *(__n128 *)&t2.tx = v23[2];
        t1 = v70;
        CGAffineTransformConcat(&v69, &t1, &t2);
        *(_OWORD *)&v66.a = *(_OWORD *)&v69.a;
        *(_OWORD *)&v66.c = *(_OWORD *)&v69.c;
        *(_OWORD *)&v66.tx = *(_OWORD *)&v70.tx;
        CGContextSetTextMatrix(c, &v66);
        Positions = TRun::GetPositions(v20, 0);
        t1.a = -3.72066208e-103;
        t1.b = 0.0;
        t1.c = -3.72066208e-103;
        (*(void (**)(__n128 *, CGContextRef, _QWORD, unint64_t, uint64_t, CGAffineTransform *, __n128))(v20->n128_u64[0] + 40))(v20, c, 0, v21, v26, &t1, Positions);
      }
      else
      {
        v76.location = 0;
        v76.length = v20[13].n128_i64[0];
        TRun::DrawBackground(*(TRun **)(v19 + 40), c, v76, 0, 1);
        a = v70.a;
        b = v70.b;
        v61 = v70.c;
        tx = v70.tx;
        d = v70.d;
        ty = v70.ty;
        *(_QWORD *)&v29 = -1;
        *((_QWORD *)&v29 + 1) = -1;
        *(_OWORD *)&v69.c = v29;
        *(_OWORD *)&v69.tx = v29;
        *(_OWORD *)&v69.a = v29;
        CGContextGetCTM(&v69, c);
        v30.f64[0] = a;
        v30.f64[1] = b;
        v31.f64[0] = v61;
        v31.f64[1] = d;
        v32 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v56, vabsq_f64(vaddq_f64(v31, (float64x2_t)xmmword_18492F290))), (int8x16_t)vcgeq_f64(v56, vabsq_f64(vaddq_f64(v30, (float64x2_t)xmmword_18492F280))));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v32, 1), (int8x16_t)v32).u64[0] & 0x8000000000000000) != 0)
        {
          v64 = v69.ty;
          v62 = v69.tx;
          v60 = v69.d;
          v40 = v69.b;
          v58 = v69.c;
          v41 = v69.a;
          CGAffineTransformMakeTranslation(&t1, tx, ty);
        }
        else
        {
          v33 = hypot(v61 + a * 0.0, d + b * 0.0);
          v34 = 1.0;
          if (v33 <= 1.0)
          {
            v37 = a;
            v36 = b;
            v39 = v61;
            v38 = d;
          }
          else
          {
            v35 = v33;
            t1.a = a;
            t1.b = b;
            t1.c = v61;
            t1.d = d;
            t1.tx = tx;
            t1.ty = ty;
            CGAffineTransformScale(&t2, &t1, 1.0 / v33, 1.0 / v33);
            v37 = t2.a;
            v36 = t2.b;
            v39 = t2.c;
            v38 = t2.d;
            v34 = v35;
            tx = t2.tx;
            ty = t2.ty;
          }
          t1.a = v37;
          t1.b = v36;
          t1.c = v39;
          t1.d = v38;
          t1.tx = tx;
          t1.ty = ty;
          t2 = v69;
          CGAffineTransformConcat(&v68, &t1, &t2);
          v41 = v68.a;
          v40 = v68.b;
          v58 = v68.c;
          v60 = v68.d;
          v62 = v68.tx;
          v64 = v68.ty;
          CGAffineTransformMakeScale(&t1, v34, v34);
        }
        v42 = t1.a;
        v43 = t1.b;
        v44 = t1.c;
        v45 = t1.d;
        v47 = t1.tx;
        v46 = t1.ty;
        CGContextSaveGState(c);
        CGContextBeginTransparencyLayer(c, 0);
        t1.a = v42;
        t1.b = v43;
        t1.c = v44;
        t1.d = v45;
        t1.tx = v47;
        t1.ty = v46;
        t2.a = v41;
        t2.b = v40;
        t2.c = v58;
        t2.d = v60;
        t2.tx = v62;
        t2.ty = v64;
        CGAffineTransformConcat(&v67, &t1, &t2);
        CGContextSetCTM();
        t1.a = -3.72066208e-103;
        (*(void (**)(CGAffineTransform *__return_ptr, __n128 *))(v20->n128_u64[0] + 32))(&t1, v20);
        v48 = (const CGPath *)atomic_load((unint64_t *)&t1);
        CGContextAddPath(c, v48);
        TAttributes::SetContextAttributes((TAttributes *)&v20[2].n128_i8[8], c, 0);
        CGContextFillPath(c);
        CGContextEndTransparencyLayer(c);

        CGContextRestoreGState(c);
      }
      v49 = v20[10].n128_u64[0];
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 56);
        LODWORD(v49) = *(_DWORD *)(v49 + 60);
        v15 |= v50 != 0;
      }
      v16 |= (_DWORD)v49 != 0;
      v65 = v70;
      CGContextSetTextMatrix(c, &v65);
      v14 += 8;
    }
    while (v18 != v14);
  }
  v52 = v70.tx;
  v51 = v70.ty;
  TLine::GetLeftHangersGlyphCountAndWidth(this, 0);
  v54 = v53;
  if (v53 == 0.0)
    v54 = 0.0;
  v55 = v52 - v54;
  if ((v15 & 1) != 0)
  {
    CGContextSetTextPosition(c, v55, v51);
    t2.a = -3.72066066e-103;
    t2.b = 0.0;
    t1 = *(CGAffineTransform *)__const__ZN10TDecorator14DrawDecorationEP9CGContextRK5TLinePK13TInlineVectorI18DecorationOverrideLm30EE_c;
    v73 = unk_18494CD20;
    v74 = xmmword_18494CD30;
    v75 = -1;
    TLineDrawContext::TLineDrawContext((TLineDrawContext *)&t1, c);
    TDecorator::DrawDecoration((uint64_t)&t2, (uint64_t)&t1, this, 0);
  }
  if ((v16 & 1) != 0)
  {
    CGContextSetTextPosition(c, v55, v51);
    t2.a = -3.72066066e-103;
    t2.b = 0.0;
    t1 = *(CGAffineTransform *)__const__ZN10TDecorator14DrawDecorationEP9CGContextRK5TLinePK13TInlineVectorI18DecorationOverrideLm30EE_c;
    v73 = unk_18494CD20;
    v74 = xmmword_18494CD30;
    v75 = -1;
    TLineDrawContext::TLineDrawContext((TLineDrawContext *)&t1, c);
    TDecorator::DrawDecoration((uint64_t)&t2, (uint64_t)&t1, this, 0);
  }
}

void TLine::DrawUnderlines(TLine *this, CGContext *a2)
{
  _QWORD v3[2];
  _OWORD v4[5];
  uint64_t v5;

  v3[0] = 0xAAAAAAAA00000000;
  v3[1] = 0;
  v5 = -1;
  v4[0] = *(_OWORD *)__const__ZN10TDecorator14DrawDecorationEP9CGContextRK5TLinePK13TInlineVectorI18DecorationOverrideLm30EE_c;
  memset(&v4[1], 255, 64);
  TLineDrawContext::TLineDrawContext((TLineDrawContext *)v4, a2);
  TDecorator::DrawDecoration((uint64_t)v3, (uint64_t)v4, this, 0);
}

void TLine::DrawStrikethroughs(TLine *this, CGContext *a2)
{
  _QWORD v3[2];
  _OWORD v4[5];
  uint64_t v5;

  v3[0] = 0xAAAAAAAA00000001;
  v3[1] = 0;
  v5 = -1;
  v4[0] = *(_OWORD *)__const__ZN10TDecorator14DrawDecorationEP9CGContextRK5TLinePK13TInlineVectorI18DecorationOverrideLm30EE_c;
  memset(&v4[1], 255, 64);
  TLineDrawContext::TLineDrawContext((TLineDrawContext *)v4, a2);
  TDecorator::DrawDecoration((uint64_t)v3, (uint64_t)v4, this, 0);
}

uint64_t TLine::DeleteChars(uint64_t this, uint64_t a2, const uint64_t *a3)
{
  TLine *v3;
  uint64_t v6;
  const uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t RunWithCharIndex;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >= 1)
  {
    v3 = (TLine *)this;
    if (*(_QWORD *)(this + 24) != *(_QWORD *)(this + 16))
    {
      v6 = 0;
      v7 = a3 + 1;
      do
      {
        v8 = v6;
        v9 = (uint64_t *)&a3[v6];
        RunWithCharIndex = TLine::FindRunWithCharIndex(v3, *v9, 1);
        v11 = RunWithCharIndex;
        v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * RunWithCharIndex) + 48);
        v13 = v12[26];
        if (a2 <= v6 + 1)
          v14 = v6 + 1;
        else
          v14 = a2;
        v15 = v6;
        while (v14 - 1 != v15)
        {
          v6 = v15 + 1;
          v16 = v7[v15++];
          if (v16 >= v12[2] + v12[1])
            goto LABEL_12;
        }
        v6 = v14;
LABEL_12:
        this = TRun::DeleteChars(*(TRun **)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * RunWithCharIndex) + 48), v6 - v8, v9, *((_QWORD *)v3 + 9));
        *((_QWORD *)v3 + 18) += v12[26] - v13;
        if (this >= 1)
          this = TLine::AttachToPreviousRun(v3, v11, this);
      }
      while (v6 < a2);
    }
  }
  return this;
}

BOOL TLine::AttachToPreviousRun(TLine *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t RunWithCharIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 48);
  v6 = v5[26];
  if (v6)
  {
    v7 = v5[1];
    if (v7 > *((_QWORD *)this + 9))
    {
      v9 = v5[2];
      RunWithCharIndex = TLine::FindRunWithCharIndex(this, v7 - 1, 1);
      if (RunWithCharIndex != a2)
      {
        v5[1] = v7 + a3;
        v5[2] = v9 - a3;
        v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * RunWithCharIndex) + 48);
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v11 + 16);
        TRun::IncrementAttachCountForChar(v11, v7 - 1, a3);
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v11 + 16) = v13 + a3;
      }
    }
  }
  else
  {
    TLine::DeleteRun(this, a2);
  }
  return v6 == 0;
}

uint64_t TLine::GetMappedCharsInRange(TLine *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a4[1] = *a4;
  v7 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * TLine::FindRunWithCharIndex(a1, a2, 1)) + 40);
  v8 = v7[1];
  v9 = v7[2];
  v10 = v9 + v8;
  if (v9 + v8 >= a2 + a3)
    v11 = a2 + a3;
  else
    v11 = v9 + v8;
  if (a2 <= v8 && v8 < a2 + a3)
  {
    v14 = v11 - v8;
  }
  else if (v8 <= a2 && a2 < v10)
  {
    v14 = v11 - a2;
    v8 = a2;
  }
  else
  {
    v8 = 0;
    v14 = 0;
  }
  result = TRun::AppendMappedCharsInRange((uint64_t)v7, v8, v14, (uint64_t)a4);
  v16 = a3 - v14;
  if ((_DWORD)result)
    v17 = v16 < 1;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v7 = (uint64_t *)v7[3];
      if (!v7)
        break;
      v18 = v7[2] >= v16 ? v16 : v7[2];
      result = TRun::AppendMappedCharsInRange((uint64_t)v7, v7[1], v18, (uint64_t)a4);
      v16 -= v18;
    }
    while ((_DWORD)result && v16 > 0);
  }
  return result;
}

void TLine::ReplaceRun(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 48);
  v9 = a1 + 2;
  v10 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8 * a2) + 40);
  v11 = *(_QWORD *)(v10 + 32);
  if (v11)
  {
    *(_QWORD *)(v11 + 24) = v7;
  }
  else
  {
    a1[11] = v7;
    if (!v7)
      goto LABEL_5;
  }
  *(_QWORD *)(v7 + 32) = v11;
LABEL_5:
  v12 = v5 - v6;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
  {
    *(_QWORD *)(v8 + 24) = v13;
    *(_QWORD *)(v13 + 32) = v8;
  }
  else
  {
    a1[12] = v8;
    if (v8)
      *(_QWORD *)(v8 + 24) = 0;
  }
  TLine::SimpleRunDelete((TLine *)a1, a2);
  if (v12 >= 1)
  {
    v14 = (v12 >> 3) - 1;
    do
    {
      v15 = (char *)(*v9 + 8 * a2);
      v17 = *(id *)(*(_QWORD *)(a3 + 16) + 8 * v14);
      std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert((uint64_t)v9, v15, &v17);
      v16 = v14-- + 1;
    }
    while (v16 > 1);
  }
}

uint64_t TLine::AbsorbRunFollowing(TLine *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  TRun *v5;
  TRun *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2 + 1;
  v3 = *((_QWORD *)this + 2);
  if (a2 + 1 >= (*((_QWORD *)this + 3) - v3) >> 3)
    return 0;
  v5 = *(TRun **)(*(_QWORD *)(v3 + 8 * a2) + 48);
  v6 = *(TRun **)(*(_QWORD *)(v3 + 8 * v2) + 48);
  v7 = *((_QWORD *)v6 + 1);
  v8 = *((_QWORD *)v6 + 2);
  result = TRun::AbsorbFollowingRun(v5, v6);
  if ((_DWORD)result)
  {
    v10 = *((_QWORD *)v5 + 1);
    if (v7 >= v10)
      v11 = *((_QWORD *)v5 + 1);
    else
      v11 = v7;
    v12 = *((_QWORD *)v5 + 2) + v10;
    if (v12 <= v8 + v7)
      v12 = v8 + v7;
    *((_QWORD *)v5 + 1) = v11;
    *((_QWORD *)v5 + 2) = v12 - v11;
    TLine::SimpleRunDelete(this, v2);
    return 1;
  }
  return result;
}

uint64_t TLine::SeparateCharWithGlyphIndex(TLine *this, uint64_t *a2, CFIndex a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  TRun *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  TRun **v50;
  char *v51;
  char *v52;
  char *v53;
  TRun *v54;
  int64x2_t v55;
  char *v56;
  unint64_t v57;
  TRun *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  TRun **v70;
  char *v71;
  char *v72;
  char *v73;
  TRun *v74;
  int64x2_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  _OWORD v98[2];
  uint64_t *v99;
  void *__p[2];
  char *v101;
  uint64_t v102;
  _QWORD v103[2];
  _QWORD v104[4];
  CFRange v105;
  CFRange v106;
  CFRange v107;

  v104[2] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 2);
  v94 = (_QWORD *)((char *)this + 16);
  if (*a2 >= (*((_QWORD *)this + 3) - v3) >> 3)
    return 0;
  v93 = *(_QWORD *)(v3 + 8 * *a2);
  v5 = *(_QWORD *)(v93 + 48);
  v6 = *(_QWORD **)(v5 + 216);
  v7 = *(_QWORD *)(v5 + 200);
  if ((*(_DWORD *)(v6[5] + 4 * v7 + 4 * a3) & 0x380) != 0)
    return 0;
  v8 = *(_QWORD *)(v6[6] + 8 * v7 + 8 * a3);
  v9 = objc_msgSend(v6, "attachmentCountAtIndex:", v7 + a3) + 1;
  v95 = v9;
  if (a3 < 1)
  {
    v12 = 0;
    v13 = -1;
  }
  else
  {
    v10 = *(_QWORD **)(v5 + 216);
    v11 = *(_QWORD *)(v10[6] + 8 * *(_QWORD *)(v5 + 200));
    v12 = objc_msgSend(v10, "attachmentCountAtIndex:") + 1;
    if (a3 != 1)
    {
      v14 = v9 + v8;
      v15 = 1;
      while (1)
      {
        v16 = *(_QWORD **)(v5 + 216);
        v17 = *(_QWORD *)(v5 + 200);
        v18 = *(_QWORD *)(v16[6] + 8 * v17 + 8 * v15);
        if (v8 <= v18 && v14 > v18)
          break;
        v20 = objc_msgSend(v16, "attachmentCountAtIndex:", v15 + v17);
        if (v18 >= v11)
          v13 = v11;
        else
          v13 = v18;
        v21 = v11 + v12;
        if (v11 + v12 <= v18 + v20 + 1)
          v21 = v18 + v20 + 1;
        v12 = v21 - v13;
        ++v15;
        v11 = v13;
        if (a3 == v15)
          goto LABEL_19;
      }
    }
    v13 = v11;
  }
LABEL_19:
  v96 = v8;
  v22 = a3 + 1;
  if (a3 + 1 >= *(_QWORD *)(v5 + 208))
  {
    v26 = 0;
    v34 = -1;
  }
  else
  {
    v23 = *(_QWORD **)(v5 + 216);
    v24 = *(_QWORD *)(v5 + 200);
    v25 = *(_QWORD *)(v23[6] + 8 * v24 + 8 * v22);
    v26 = objc_msgSend(v23, "attachmentCountAtIndex:", v24 + v22) + 1;
    v27 = a3 + 2;
    if (a3 + 2 < *(_QWORD *)(v5 + 208))
    {
      v28 = v95 + v8;
      while (1)
      {
        v29 = *(_QWORD **)(v5 + 216);
        v30 = *(_QWORD *)(v5 + 200);
        v31 = *(_QWORD *)(v29[6] + 8 * v30 + 8 * v27);
        if (v96 <= v31 && v28 > v31)
          break;
        v33 = objc_msgSend(v29, "attachmentCountAtIndex:", v27 + v30);
        if (v31 >= v25)
          v34 = v25;
        else
          v34 = v31;
        v35 = v25 + v26;
        if (v25 + v26 <= v31 + v33 + 1)
          v35 = v31 + v33 + 1;
        v26 = v35 - v34;
        ++v27;
        v25 = v34;
        if (v27 >= *(_QWORD *)(v5 + 208))
          goto LABEL_36;
      }
    }
    v34 = v25;
  }
LABEL_36:
  if (!(v12 | v26))
    return 0;
  v103[0] = 0xAAAAAAAAAAAAAAAALL;
  v103[1] = 0xAAAAAAAAAAAAAAAALL;
  v99 = &v102;
  v104[0] = v103;
  __p[0] = &v102;
  __p[1] = v103;
  v101 = (char *)v103;
  v102 = v5;
  memset(v98, 0, sizeof(v98));
  std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)v98);
  __p[1] = v103;
  v90 = *(_BYTE *)(v5 + 224);
  if (v12 >= 1)
  {
    v97 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr))(v93 + 56))(&v97);
    v36 = atomic_load((unint64_t *)&v97);
    v37 = *(TRun **)(v36 + 48);
    *((_QWORD *)v37 + 1) = v13;
    *((_QWORD *)v37 + 2) = v12;
    v105.location = 0;
    v105.length = a3;
    TRun::TruncateStorageRange(v37, v105);
    v38 = (void *)atomic_load((unint64_t *)&v97);
    v39 = *a2;
    v40 = *a2 + 1;
    if ((v90 & 1) != 0)
    {
      v41 = (uint64_t)v94;
      v42 = (char *)(*v94 + 8 * v40);
    }
    else
    {
      *a2 = v40;
      v41 = (uint64_t)v94;
      v42 = (char *)(*v94 + 8 * v39);
    }
    *(_QWORD *)&v98[0] = v38;
    std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(v41, v42, v98);
    v44 = (char *)__p[1];
    if (__p[1] >= v101)
    {
      v46 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        goto LABEL_100;
      v47 = (v101 - (char *)__p[0]) >> 2;
      if (v47 <= v46 + 1)
        v47 = v46 + 1;
      if ((unint64_t)(v101 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      v99 = &v102;
      if (v48)
        v49 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate((uint64_t)&v102, v48);
      else
        v49 = 0;
      v50 = (TRun **)&v49[8 * v46];
      v51 = &v49[8 * v48];
      *((_QWORD *)&v98[1] + 1) = v51;
      *v50 = v37;
      v45 = v50 + 1;
      *(_QWORD *)&v98[1] = v50 + 1;
      v53 = (char *)__p[0];
      v52 = (char *)__p[1];
      if (__p[1] == __p[0])
      {
        v55 = vdupq_n_s64((unint64_t)__p[1]);
      }
      else
      {
        do
        {
          v54 = (TRun *)*((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v50 = v54;
        }
        while (v52 != v53);
        v55 = *(int64x2_t *)__p;
        v51 = (char *)*((_QWORD *)&v98[1] + 1);
        v45 = *(void **)&v98[1];
      }
      __p[0] = v50;
      __p[1] = v45;
      *(int64x2_t *)((char *)v98 + 8) = v55;
      v56 = v101;
      v101 = v51;
      *((_QWORD *)&v98[1] + 1) = v56;
      *(_QWORD *)&v98[0] = v55.i64[0];
      std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)v98);
    }
    else
    {
      *(_QWORD *)__p[1] = v37;
      v45 = v44 + 8;
    }
    __p[1] = v45;

  }
  if (v26 < 1)
    goto LABEL_80;
  v97 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(v93 + 56))(&v97);
  v57 = atomic_load((unint64_t *)&v97);
  v58 = *(TRun **)(v57 + 48);
  v106.location = a3 + 1;
  v106.length = *(_QWORD *)(v5 + 208) - (a3 + 1);
  *((_QWORD *)v58 + 1) = v34;
  *((_QWORD *)v58 + 2) = v26;
  TRun::TruncateStorageRange(v58, v106);
  v59 = (void *)atomic_load((unint64_t *)&v97);
  v60 = *a2;
  v61 = *a2 + 1;
  if ((v90 & 1) != 0)
  {
    *a2 = v61;
    v62 = (uint64_t)v94;
    v63 = (char *)(*v94 + 8 * v60);
  }
  else
  {
    v62 = (uint64_t)v94;
    v63 = (char *)(*v94 + 8 * v61);
  }
  *(_QWORD *)&v98[0] = v59;
  std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::insert(v62, v63, v98);
  v64 = (char *)__p[1];
  if (__p[1] >= v101)
  {
    v66 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    if (!((unint64_t)(v66 + 1) >> 61))
    {
      v67 = (v101 - (char *)__p[0]) >> 2;
      if (v67 <= v66 + 1)
        v67 = v66 + 1;
      if ((unint64_t)(v101 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      v99 = &v102;
      if (v68)
        v69 = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate((uint64_t)&v102, v68);
      else
        v69 = 0;
      v70 = (TRun **)&v69[8 * v66];
      v71 = &v69[8 * v68];
      *((_QWORD *)&v98[1] + 1) = v71;
      *v70 = v58;
      v65 = v70 + 1;
      *(_QWORD *)&v98[1] = v70 + 1;
      v73 = (char *)__p[0];
      v72 = (char *)__p[1];
      if (__p[1] == __p[0])
      {
        v75 = vdupq_n_s64((unint64_t)__p[1]);
      }
      else
      {
        do
        {
          v74 = (TRun *)*((_QWORD *)v72 - 1);
          v72 -= 8;
          *--v70 = v74;
        }
        while (v72 != v73);
        v75 = *(int64x2_t *)__p;
        v71 = (char *)*((_QWORD *)&v98[1] + 1);
        v65 = *(void **)&v98[1];
      }
      __p[0] = v70;
      __p[1] = v65;
      *(int64x2_t *)((char *)v98 + 8) = v75;
      v76 = v101;
      v101 = v71;
      *((_QWORD *)&v98[1] + 1) = v76;
      *(_QWORD *)&v98[0] = v75.i64[0];
      std::__split_buffer<CTRun *,TInlineBufferAllocator<CTRun *,3ul> &>::~__split_buffer((uint64_t)v98);
      goto LABEL_79;
    }
LABEL_100:
    abort();
  }
  *(_QWORD *)__p[1] = v58;
  v65 = v64 + 8;
LABEL_79:
  __p[1] = v65;

LABEL_80:
  *(_QWORD *)(v5 + 8) = v96;
  *(_QWORD *)(v5 + 16) = v95;
  v107.location = a3;
  v107.length = 1;
  TRun::TruncateStorageRange((TRun *)v5, v107);
  v77 = 126 - 2 * __clz(((char *)__p[1] - (char *)__p[0]) >> 3);
  if (__p[1] == __p[0])
    v78 = 0;
  else
    v78 = v77;
  std::__introsort<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **,false>((uint64_t)__p[0], (uint64_t *)__p[1], v78, 1);
  v79 = *(_QWORD *)(v5 + 32);
  v80 = (uint64_t *)__p[0];
  v81 = *(_QWORD *)__p[0];
  if (v79)
  {
    *(_QWORD *)(v79 + 24) = v81;
    v81 = *v80;
  }
  else
  {
    *((_QWORD *)this + 11) = v81;
    if (!v81)
      goto LABEL_87;
  }
  *(_QWORD *)(v81 + 32) = v79;
LABEL_87:
  v82 = *(_QWORD *)(v5 + 24);
  v83 = (char *)__p[1];
  v84 = *((_QWORD *)__p[1] - 1);
  if (v82)
  {
    *(_QWORD *)(v82 + 32) = v84;
    v84 = *((_QWORD *)v83 - 1);
LABEL_90:
    *(_QWORD *)(v84 + 24) = v82;
    goto LABEL_91;
  }
  *((_QWORD *)this + 12) = v84;
  if (v84)
    goto LABEL_90;
LABEL_91:
  if ((unint64_t)(v83 - (char *)v80) >= 9)
  {
    v85 = (v83 - (char *)v80) >> 3;
    if (v85 <= 2)
      v85 = 2;
    v86 = v85 - 1;
    v87 = v80 + 1;
    do
    {
      v88 = *(v87 - 1);
      v89 = *v87;
      *(_QWORD *)(v88 + 24) = *v87;
      *(_QWORD *)(v89 + 32) = v88;
      ++v87;
      --v86;
    }
    while (v86);
  }
  __p[1] = v80;
  if (&v102 > v80 || v104 <= v80)
    operator delete(v80);
  return 1;
}

uint64_t TLine::GetLeftWhitespaceGlyphCountAndWidth(TLine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;

  v2 = 0;
  v3 = 0;
  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  v5 = 8 * (((unint64_t)v4 >> 3) & ~(v4 >> 63));
  v6 = 0.0;
  do
  {
    if (v5 == v2)
      break;
    v7 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + v2) + 40);
    v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    v3 += v8;
    v6 = v6 + v9;
    v2 += 8;
  }
  while (v8 >= v7[26]);
  return v3;
}

uint64_t TLine::GetLeftPartialHangingGlyphCountAndWidth(TLine *this, const unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  TRun *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t LeftPartialHangingGlyphCountAndWidth;

  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = (unint64_t)v2 >> 3;
  if (v7 <= 1)
    v7 = 1;
  v8 = v7 - 1;
  v9 = 0.0;
  do
  {
    v10 = *(TRun **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5) + 40);
    v11 = *((_QWORD *)v10 + 26);
    if (*(double *)&a2 == 0.0)
    {
      v13 = (id *)*((_QWORD *)v10 + 21);
      if (v13)
        LOBYTE(v12) = TParagraphStyle::GetLineBoundsOptions(v13, a2);
      else
        LOBYTE(v12) = 0;
    }
    else
    {
      v12 = *a2;
    }
    LeftPartialHangingGlyphCountAndWidth = TRun::GetLeftPartialHangingGlyphCountAndWidth(v10, 0, v12, *(const TCharStream **)this);
    v6 += LeftPartialHangingGlyphCountAndWidth;
    v9 = v9 + *(double *)&a2;
  }
  while (LeftPartialHangingGlyphCountAndWidth >= v11 && v8 != v5++);
  return v6;
}

void TLine::DrawGlyphsWithAttributeOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  CGFloat v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v25;
  char v26;
  const __CFString **v27;
  char *v28;
  char *v29;
  const __CFString **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  const __CFString **v35;
  char *v36;
  char *v37;
  const __CFString **v38;
  char *v39;
  char *v40;
  CGFloat ty;
  double tx;
  double v43;
  double v44;
  __n128 **v45;
  __n128 **v46;
  CGFloat v47;
  CFIndex v48;
  CFIndex v49;
  __n128 *v50;
  __int128 v51;
  __n128 *v52;
  __n128 v53;
  CGContext *v54;
  __n128 **v55;
  char v56;
  int v57;
  double v58;
  __n128 *v59;
  __n128 *v60;
  __n128 *v61;
  __int128 v62;
  __n128 *v63;
  __n128 v64;
  CGContext *v65;
  __n128 Positions;
  uint64_t v67;
  char *v68;
  char *v69;
  _BYTE *v70;
  char *v71;
  uint64_t v73;
  double v74;
  uint64_t v75;
  TLine *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  void *v81;
  uint64_t v82;
  CGAffineTransform v83;
  CGAffineTransform t1;
  uint64_t v85;
  CGAffineTransform v86;
  CGAffineTransform t2;
  char **v88;
  char *v89;
  unint64_t v90;
  _BYTE v91[960];
  _BYTE *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  _BYTE v96[960];
  _BYTE *v97;
  void *__p;
  __n128 **v99;
  uint64_t v100;
  _BYTE v101[5280];
  _QWORD v102[3];
  CFRange v103;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v74 = v4;
  v6 = v5;
  v7 = v3;
  v76 = (TLine *)v2;
  v102[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_OWORD *)&v83.c = v8;
  *(_OWORD *)&v83.tx = v8;
  *(_OWORD *)&v83.a = v8;
  if (*(_DWORD *)v3)
  {
    v9 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)&v83.a = *(_OWORD *)(v3 + 32);
    *(_OWORD *)&v83.c = v9;
    *(_OWORD *)&v83.tx = *(_OWORD *)(v3 + 64);
  }
  else
  {
    CGContextGetTextMatrix(&v83, *(CGContextRef *)(v3 + 8));
  }
  memset(v101, 170, sizeof(v101));
  __p = 0;
  v99 = 0;
  v100 = 0;
  v102[0] = v101;
  memset(v96, 170, sizeof(v96));
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v97 = v96;
  memset(v91, 170, sizeof(v91));
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v92 = v91;
  v10 = *((_QWORD *)v76 + 3) - *((_QWORD *)v76 + 2);
  v82 = 0;
  v73 = v7;
  if (v10 < 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v75 = v10 >> 3;
    v78 = v6;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v76 + 2) + 8 * v11) + 40);
      v14 = *(_QWORD *)(v13 + 208);
      if (v14 >= 1)
      {
        v15 = *(_QWORD **)(v13 + 216);
        v16 = *(_QWORD *)(v13 + 200);
        v17 = (uint64_t *)(v15[6] + 8 * v16);
        v18 = *v17;
        v86.a = -3.72066208e-103;
        v86.b = -3.72066208e-103;
        if (v6)
        {
          v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, CGAffineTransform *))(v6 + 16))(v6, v18, &v86);
          v15 = *(_QWORD **)(v13 + 216);
          v16 = *(_QWORD *)(v13 + 200);
        }
        else
        {
          v19 = 0;
        }
        v79 = v12;
        v81 = v19;
        v80 = xmmword_18492F2A0;
        objc_msgSend(v15, "attachmentCountAtIndex:", v16);
        if ((unint64_t)v14 < 2)
        {
          v20 = 0.0;
          v21 = 1;
        }
        else
        {
          v77 = v11;
          v20 = 0.0;
          v21 = 1;
          for (i = 1; i != v14; ++i)
          {
            v23 = v17[i];
            if (*(uint64_t *)&v86.a > v23 || *(_QWORD *)&v86.b + *(_QWORD *)&v86.a <= v23)
            {
              t2.a = v20;
              *(_QWORD *)&t2.b = v21;
              v85 = v13;
              TAttributes::TAttributes((TAttributes *)&t1, (const TAttributes *)(v13 + 40), (const __CFDictionary *)v19);
              v25 = std::vector<std::tuple<TRun const*,CFRange,TAttributes>,TInlineBufferAllocator<std::tuple<TRun const*,CFRange,TAttributes>,30ul>>::emplace_back<TRun const*&,CFRange&,TAttributes>((char **)&__p, &v85, (__int128 *)&t2, (uint64_t)&t1);
              TAttributes::~TAttributes((TAttributes *)&t1);
              v26 = *(_BYTE *)(v25 + 161);
              if (v19)
              {
                if (CFDictionaryGetValue((CFDictionaryRef)v19, CFSTR("NSUnderline"))
                  || TAttributes::GetUnderlineColor((TAttributes *)v19, 0, v27))
                {
                  v28 = v94;
                  if ((unint64_t)v94 >= v95)
                  {
                    v29 = std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange &,__CFDictionary const*&>(&v93, &v82, &v80, &v81);
                  }
                  else
                  {
                    *(_QWORD *)v94 = v77;
                    *((CGFloat *)v28 + 1) = v20;
                    *((_QWORD *)v28 + 2) = v21;
                    *((_QWORD *)v28 + 3) = v19;
                    v29 = v28 + 32;
                  }
                  v94 = v29;
                  v6 = v78;
                }
                if (CFDictionaryGetValue((CFDictionaryRef)v19, CFSTR("NSStrikethrough"))
                  || TAttributes::GetStrikethroughColor((TAttributes *)v19, 0, v30))
                {
                  v31 = v89;
                  if ((unint64_t)v89 >= v90)
                  {
                    v32 = std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange &,__CFDictionary const*&>((char **)&v88, &v82, &v80, &v81);
                  }
                  else
                  {
                    *(_QWORD *)v89 = v77;
                    *((CGFloat *)v31 + 1) = v20;
                    *((_QWORD *)v31 + 2) = v21;
                    *((_QWORD *)v31 + 3) = v19;
                    v32 = v31 + 32;
                  }
                  v89 = v32;
                  v6 = v78;
                }
              }
              if (v6)
                v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, CGAffineTransform *))(v6 + 16))(v6, v23, &v86);
              else
                v19 = 0;
              v79 |= v26 & 1;
              v81 = v19;
              *(_QWORD *)&v80 = i;
              v20 = *(double *)&i;
              v21 = 1;
            }
            else
            {
              ++v21;
            }
            *((_QWORD *)&v80 + 1) = v21;
            objc_msgSend(*(id *)(v13 + 216), "attachmentCountAtIndex:", i + *(_QWORD *)(v13 + 200));
          }
        }
        t2.a = v20;
        *(_QWORD *)&t2.b = v21;
        v85 = v13;
        TAttributes::TAttributes((TAttributes *)&t1, (const TAttributes *)(v13 + 40), (const __CFDictionary *)v19);
        v33 = std::vector<std::tuple<TRun const*,CFRange,TAttributes>,TInlineBufferAllocator<std::tuple<TRun const*,CFRange,TAttributes>,30ul>>::emplace_back<TRun const*&,CFRange&,TAttributes>((char **)&__p, &v85, (__int128 *)&t2, (uint64_t)&t1);
        TAttributes::~TAttributes((TAttributes *)&t1);
        v34 = *(_BYTE *)(v33 + 161);
        if (v19)
        {
          if (CFDictionaryGetValue((CFDictionaryRef)v19, CFSTR("NSUnderline"))
            || TAttributes::GetUnderlineColor((TAttributes *)v19, 0, v35))
          {
            v36 = v94;
            if ((unint64_t)v94 >= v95)
            {
              v37 = std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange &,__CFDictionary const*&>(&v93, &v82, &v80, &v81);
            }
            else
            {
              *(_QWORD *)v94 = v82;
              *((CGFloat *)v36 + 1) = v20;
              *((_QWORD *)v36 + 2) = v21;
              *((_QWORD *)v36 + 3) = v19;
              v37 = v36 + 32;
            }
            v94 = v37;
          }
          if (CFDictionaryGetValue((CFDictionaryRef)v19, CFSTR("NSStrikethrough"))
            || TAttributes::GetStrikethroughColor((TAttributes *)v19, 0, v38))
          {
            v39 = v89;
            if ((unint64_t)v89 >= v90)
            {
              v40 = std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange &,__CFDictionary const*&>((char **)&v88, &v82, &v80, &v81);
            }
            else
            {
              *(_QWORD *)v89 = v82;
              *((CGFloat *)v39 + 1) = v20;
              *((_QWORD *)v39 + 2) = v21;
              *((_QWORD *)v39 + 3) = v19;
              v40 = v39 + 32;
            }
            v89 = v40;
          }
        }
        v12 = v34 & 1 | v79;
        v11 = v82;
      }
      v82 = ++v11;
    }
    while (v11 < v75);
  }
  tx = v83.tx;
  ty = v83.ty;
  TLine::GetLeftHangersGlyphCountAndWidth(v76, 0);
  if (v43 == 0.0)
    v44 = 0.0;
  else
    v44 = v43;
  v45 = (__n128 **)__p;
  if (v12)
  {
    v46 = v99;
    v47 = v74;
    if (__p != v99)
    {
      do
      {
        if (v47 == 0.0)
        {
          v49 = (CFIndex)v45[1];
          v48 = (CFIndex)v45[2];
          v50 = *v45;
          *(_QWORD *)&v51 = -1;
          *((_QWORD *)&v51 + 1) = -1;
          *(_OWORD *)&v86.c = v51;
          *(_OWORD *)&v86.tx = v51;
          *(_OWORD *)&v86.a = v51;
          v52 = v50 + 6;
          if (!v50[9].n128_u8[0])
            v52 = (__n128 *)MEMORY[0x1E0C9BAA8];
          t1 = v83;
          v53 = v52[1];
          *(__n128 *)&t2.a = *v52;
          *(__n128 *)&t2.c = v53;
          *(__n128 *)&t2.tx = v52[2];
          CGAffineTransformConcat(&v86, &t1, &t2);
          v54 = *(CGContext **)(v73 + 8);
          *(_OWORD *)&t1.a = *(_OWORD *)&v86.a;
          *(_OWORD *)&t1.c = *(_OWORD *)&v86.c;
          *(_OWORD *)&t1.tx = *(_OWORD *)&v83.tx;
          CGContextSetTextMatrix(v54, &t1);
          v103.location = v49;
          v103.length = v48;
          TRun::DrawBackground((TRun *)v50, v54, v103, (const TAttributes *)(v45 + 3), 1);
          t2 = v83;
          CGContextSetTextMatrix(v54, &t2);
          v47 = v74;
        }
        v45 += 22;
      }
      while (v45 != v46);
      v45 = (__n128 **)__p;
    }
  }
  else
  {
    v47 = v74;
  }
  v55 = v99;
  if (v45 != v99)
  {
    v56 = 0;
    v57 = 0;
    v58 = tx - v44;
    do
    {
      if (v47 == 0.0)
      {
        v60 = v45[1];
        v59 = v45[2];
        v61 = *v45;
        *(_QWORD *)&v62 = -1;
        *((_QWORD *)&v62 + 1) = -1;
        *(_OWORD *)&v86.c = v62;
        *(_OWORD *)&v86.tx = v62;
        *(_OWORD *)&v86.a = v62;
        v63 = v61 + 6;
        if (!v61[9].n128_u8[0])
          v63 = (__n128 *)MEMORY[0x1E0C9BAA8];
        t1 = v83;
        v64 = v63[1];
        *(__n128 *)&t2.a = *v63;
        *(__n128 *)&t2.c = v64;
        *(__n128 *)&t2.tx = v63[2];
        CGAffineTransformConcat(&v86, &t1, &t2);
        v65 = *(CGContext **)(v73 + 8);
        *(_OWORD *)&t1.a = *(_OWORD *)&v86.a;
        *(_OWORD *)&t1.c = *(_OWORD *)&v86.c;
        *(_OWORD *)&t1.tx = *(_OWORD *)&v83.tx;
        CGContextSetTextMatrix(v65, &t1);
        Positions = TRun::GetPositions(v61, 0);
        t2.a = -3.72066208e-103;
        *(_QWORD *)&t2.b = v45 + 3;
        t2.c = -3.72066208e-103;
        (*(void (**)(__n128 *, CGContext *, __n128 *, __n128 *, uint64_t, CGAffineTransform *, __n128))(v61->n128_u64[0] + 40))(v61, v65, v60, v59, v67, &t2, Positions);
        t2 = v83;
        CGContextSetTextMatrix(v65, &t2);
        v47 = v74;
      }
      if ((*((_BYTE *)v45 + 161) & 4) != 0)
        v57 = 1;
      if ((*((_BYTE *)v45 + 161) & 0x10) != 0)
        v56 = 1;
      v45 += 22;
    }
    while (v45 != v55);
    if (v57)
    {
      if (v47 == 0.0)
      {
        CGContextSetTextPosition(*(CGContextRef *)(v73 + 8), v58, ty);
        v47 = v74;
      }
      t1.a = -3.72066066e-103;
      t1.b = v47;
      TDecorator::DrawDecoration((uint64_t)&t1, v73, v76, (uint64_t)&v93);
      v47 = v74;
    }
    if (v56)
    {
      if (v47 == 0.0)
      {
        CGContextSetTextPosition(*(CGContextRef *)(v73 + 8), v58, ty);
        v47 = v74;
      }
      t1.a = -3.72066066e-103;
      t1.b = v47;
      TDecorator::DrawDecoration((uint64_t)&t1, v73, v76, (uint64_t)&v88);
    }
  }
  *(_QWORD *)&t1.a = &v88;
  std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&t1);
  v88 = &v93;
  std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  v68 = (char *)__p;
  if (__p)
  {
    v69 = (char *)v99;
    v70 = __p;
    if (v99 != __p)
    {
      do
      {
        v71 = v69 - 176;
        TAttributes::~TAttributes((TAttributes *)(v69 - 152));
        v69 = v71;
      }
      while (v71 != v68);
      v70 = __p;
    }
    v99 = (__n128 **)v68;
    if (v101 > v70 || v102 <= (_QWORD *)v70)
      operator delete(v70);
  }
}

void TLine::CopyPath(TLine *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  TRun *v8;
  CGPath *v9;
  const CGPath *v10;
  unint64_t v11;
  id v12;
  id Mutable;

  Mutable = CGPathCreateMutable();
  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v4 > 0)
  {
    v5 = 0;
    v6 = (unint64_t)v4 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v8 = *(TRun **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5) + 40);
      v12 = (id)0xAAAAAAAAAAAAAAAALL;
      TRun::CopyPath(v8, (unint64_t *)&v12);
      v9 = (CGPath *)atomic_load((unint64_t *)&Mutable);
      v10 = (const CGPath *)atomic_load((unint64_t *)&v12);
      CGPathAddPath(v9, 0, v10);

      ++v5;
    }
    while (v7 != v5);
  }
  do
    v11 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a2 = v11;

}

void TLine::DoGlyphFixups(TLine *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double *v48;
  double v49;
  double v50;
  TStorageRange *v52;
  CGSize v53;
  CGSize v54;
  CGSize v55;

  v1 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v1 >= 1)
  {
    v3 = 0;
    v4 = (unint64_t)v1 >> 3;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    v6 = (double *)MEMORY[0x1E0C9D820];
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v3) + 48);
      v9 = *(_QWORD *)(v7 + 208);
      v8 = *(_QWORD **)(v7 + 216);
      v10 = v8[2];
      v11 = *(_QWORD *)(v7 + 200);
      if ((*(_BYTE *)(v7 + 225) & 0x10) != 0 && (objc_msgSend(v8, "implementsOrigins") & 1) == 0)
        break;
      if (v9 >= 1)
      {
        v12 = 0;
        v13 = v10 + 2 * v11;
        do
        {
          if (*(__int16 *)(v13 + 2 * v12) == -1)
            objc_msgSend(*(id *)(v7 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 40) + 4 * *(_QWORD *)(v7 + 200) + 4 * v12) | 0x20u, v12 + *(_QWORD *)(v7 + 200));
          ++v12;
        }
        while (v9 != v12);
      }
LABEL_59:
      if (++v3 == v5)
        return;
    }
    v14 = objc_msgSend(*(id *)(v7 + 216), "copyWithRange:", *(_QWORD *)(v7 + 200), *(_QWORD *)(v7 + 208));

    *(_QWORD *)(v7 + 216) = v14;
    *(_QWORD *)(v7 + 200) = 0;
    v15 = *v6;
    v16 = v6[1];
    if (v9 < 1)
    {
LABEL_49:
      if (v15 != *v6 || v16 != v6[1])
      {
        v48 = (double *)MEMORY[0x1E0C9D538];
        v49 = *MEMORY[0x1E0C9D538];
        v50 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        objc_msgSend(*(id *)(v7 + 216), "setOrigin:atIndex:", *(_QWORD *)(v7 + 200), *MEMORY[0x1E0C9D538], v50);
        if (v49 != *v48 || v50 != v48[1])
          *(_BYTE *)(v7 + 225) |= 0x10u;
        v55.width = v15;
        v55.height = v16;
        TRun::AdvanceInitialAdvance((TRun *)v7, v55);
      }
      goto LABEL_59;
    }
    v52 = (TStorageRange *)(v7 + 192);
    v17 = v10 + 2 * v11 - 2;
    while (1)
    {
      v18 = 16 * v9 - 8;
      v19 = 8 * v9 - 8;
      v20 = v9;
      while (1)
      {
        v9 = v20 - 1;
        if (*(__int16 *)(v17 + 2 * v20) != -1)
          break;
        objc_msgSend(*(id *)(v7 + 216), "setProps:atIndex:", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 40) + 4 * *(_QWORD *)(v7 + 200) + 4 * v20 - 4) | 0x20u, v20 + *(_QWORD *)(v7 + 200) - 1);
        v18 -= 16;
        v19 -= 8;
        --v20;
        if ((unint64_t)(v9 + 1) <= 1)
          goto LABEL_49;
      }
      if (v15 != *v6 || v16 != v6[1])
        break;
LABEL_30:
      if ((*(_BYTE *)(v7 + 225) & 0x10) != 0)
      {
        objc_msgSend(*(id *)(v7 + 216), "originAtIndex:", *(_QWORD *)(v7 + 200) + v20 - 1);
        v32 = v34;
        v33 = v35;
        v30 = *MEMORY[0x1E0C9D538];
        v31 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      }
      else
      {
        v30 = *MEMORY[0x1E0C9D538];
        v31 = *(double *)(MEMORY[0x1E0C9D538] + 8);
        v32 = *MEMORY[0x1E0C9D538];
        v33 = v31;
      }
      if (v32 != v30 || v33 != v31)
      {
        v37 = *(_QWORD **)(v7 + 216);
        v38 = v37[4];
        if (v38)
        {
          v39 = *(_QWORD *)(v7 + 200);
          goto LABEL_39;
        }
        v44 = v37[3];
        v39 = *(_QWORD *)(v7 + 200);
        if (v44)
        {
          v41 = (double *)(v44 + 8 * v39 + v19);
          v43 = 0.0;
        }
        else
        {
LABEL_39:
          v40 = (double *)(v38 + 16 * v39 + v18);
          v42 = *v40;
          v41 = v40 - 1;
          v43 = v42;
        }
        v45 = *v41;
        objc_msgSend(v37, "setOrigin:atIndex:", v39 + v20 - 1, v30, v31);
        if (v30 != *MEMORY[0x1E0C9D538] || v31 != *(double *)(MEMORY[0x1E0C9D538] + 8))
          *(_BYTE *)(v7 + 225) |= 0x10u;
        v54.width = v45 - v32;
        v54.height = v43 - v33;
        TStorageRange::SetAdvance(v52, v20 - 1, v54);
        v15 = v15 + v32;
        v16 = v16 + v33;
      }
      if (v20 <= 1)
        goto LABEL_49;
    }
    v22 = *(_QWORD *)(v7 + 216);
    v23 = *(_QWORD *)(v22 + 32);
    if (v23)
    {
      v24 = *(_QWORD *)(v7 + 200);
    }
    else
    {
      v29 = *(_QWORD *)(v22 + 24);
      v24 = *(_QWORD *)(v7 + 200);
      if (v29)
      {
        v26 = (double *)(v29 + 8 * v24 + v19);
        v28 = 0.0;
        goto LABEL_29;
      }
    }
    v25 = (double *)(v23 + 16 * v24 + v18);
    v27 = *v25;
    v26 = v25 - 1;
    v28 = v27;
LABEL_29:
    v53.width = v15 + *v26;
    v53.height = v16 + v28;
    TStorageRange::SetAdvance(v52, v20 - 1, v53);
    v15 = *v6;
    v16 = v6[1];
    goto LABEL_30;
  }
}

double TRun::AdvanceInitialAdvance(TRun *this, CGSize a2)
{
  double height;
  double width;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v12;
  double result;
  double v14;

  height = a2.height;
  width = a2.width;
  v5 = *((_QWORD *)this + 39);
  if (!v5)
  {
    v6 = (uint64_t *)((char *)this + 312);
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(v5 + 32) = _Q1;
    *(_QWORD *)(v5 + 48) = 0xBFF0000000000000;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    v12 = *v6;
    *v6 = v5;
    if (v12)
    {
      std::default_delete<TRun::RareData>::operator()[abi:nn180100]((uint64_t)v6, v12);
      v5 = *v6;
    }
  }
  result = width + *(double *)v5;
  v14 = height + *(double *)(v5 + 8);
  *(double *)v5 = result;
  *(double *)(v5 + 8) = v14;
  return result;
}

uint64_t std::shared_ptr<TCharStream const>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

char *std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    abort();
  result = (char *)TInlineBufferAllocator<CTRun *,3ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

char *std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__assign_with_size[abi:nn180100]<std::__wrap_iter<CTRun * const*>,std::__wrap_iter<CTRun * const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  _BYTE *v13;
  void **v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  v10 = (v8 - *(_QWORD *)result) >> 3;
  if (v10 < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      v11 = (void **)(result + 48);
      if (result + 24 <= v9 && v11 > (void **)v9)
      {
        if (&v9[8 * v10] == *v11)
          *v11 = v9;
      }
      else
      {
        operator delete(v9);
      }
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v20 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v20 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    result = std::vector<CTRun *,TInlineBufferAllocator<CTRun *,3ul>>::__vallocate[abi:nn180100](v7, v21);
    v22 = (char *)v7[1];
    v14 = (void **)(v7 + 1);
    v9 = v22;
LABEL_23:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v14 = (void **)(result + 8);
  v13 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v13 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_23;
  v16 = &__src[8 * v15];
  if (v13 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 8 * v15);
    v9 = (char *)*v14;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_25:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_26:
  *v14 = &v9[v17];
  return result;
}

void *std::get_temporary_buffer[abi:nn180100]<TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x3FFFFFFFFFFFFFFLL)
    v1 = 0x3FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(32 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(uint64_t a1, double *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  double *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  double *v29;
  double *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2 - 4;
      if (*(a2 - 4) < *(double *)a1)
      {
        v10 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v11 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *((_OWORD *)a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v23 = a4;
      v24 = a3 >> 1;
      v25 = (double *)(a1 + 32 * (a3 >> 1));
      v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v27 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>((double *)a1, v25, v26, a4, a6);
        v28 = v23 + 32 * v24;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>((double *)(v7 + 32 * (a3 >> 1)), a2, a3 - (a3 >> 1), v28, v27);
        v29 = (double *)(v23 + 32 * a3);
        v30 = (double *)v28;
        while (v30 != v29)
        {
          if (*v30 >= *(double *)v23)
          {
            v31 = *(_OWORD *)v23;
            v32 = *(_OWORD *)(v23 + 16);
            v23 += 32;
          }
          else
          {
            v31 = *(_OWORD *)v30;
            v32 = *((_OWORD *)v30 + 1);
            v30 += 4;
          }
          *(_OWORD *)v7 = v31;
          *(_OWORD *)(v7 + 16) = v32;
          v7 += 32;
          if (v23 == v28)
          {
            if (v30 != v29)
            {
              v33 = 0;
              do
              {
                v34 = (_OWORD *)(v7 + v33 * 8);
                v35 = *(_OWORD *)&v30[v33 + 2];
                *v34 = *(_OWORD *)&v30[v33];
                v34[1] = v35;
                v33 += 4;
              }
              while (&v30[v33] != v29);
            }
            return;
          }
        }
        if (v23 != v28)
        {
          v36 = 0;
          do
          {
            v37 = (_OWORD *)(v7 + v36);
            v38 = *(_OWORD *)(v23 + v36 + 16);
            *v37 = *(_OWORD *)(v23 + v36);
            v37[1] = v38;
            v36 += 32;
          }
          while (v23 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(a1, v25, v26, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(v7 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v23, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>((double *)v7, (double *)(v7 + 32 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (double *)v23, a5);
      }
    }
    else if ((double *)a1 != a2)
    {
      v13 = a1 + 32;
      if ((double *)(a1 + 32) != a2)
      {
        v14 = 0;
        v15 = a1;
        do
        {
          v16 = v13;
          v17 = *(double *)(v15 + 32);
          if (v17 < *(double *)v15)
          {
            v39 = *(_OWORD *)(v15 + 40);
            v40 = *(_QWORD *)(v15 + 56);
            v18 = v14;
            while (1)
            {
              v19 = a1 + v18;
              v20 = *(_OWORD *)(a1 + v18 + 16);
              *(_OWORD *)(v19 + 32) = *(_OWORD *)(a1 + v18);
              *(_OWORD *)(v19 + 48) = v20;
              if (!v18)
                break;
              v18 -= 32;
              if (v17 >= *(double *)(v19 - 32))
              {
                v21 = a1 + v18 + 32;
                goto LABEL_15;
              }
            }
            v21 = a1;
LABEL_15:
            *(double *)v21 = v17;
            *(_OWORD *)(v21 + 8) = v39;
            *(_QWORD *)(v21 + 24) = v40;
          }
          v13 = v16 + 32;
          v14 += 32;
          v15 = v16;
        }
        while ((double *)(v16 + 32) != a2);
      }
    }
  }
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(double *a1, double *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __int128 v9;
  __n128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  double v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  __n128 *v29;
  __n128 v30;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = (__n128 *)a1;
    if (a3 == 2)
    {
      v10 = (__n128 *)(a2 - 4);
      if (*(a2 - 4) >= *a1)
      {
        v24 = *((_OWORD *)a1 + 1);
        *(_OWORD *)a4 = *(_OWORD *)a1;
        *(_OWORD *)(a4 + 16) = v24;
        result = *v10;
        v12 = *((_OWORD *)a2 - 1);
      }
      else
      {
        v11 = *((_OWORD *)a2 - 1);
        *(__n128 *)a4 = *v10;
        *(_OWORD *)(a4 + 16) = v11;
        result = *(__n128 *)a1;
        v12 = *((_OWORD *)a1 + 1);
      }
      *(__n128 *)(a4 + 32) = result;
      *(_OWORD *)(a4 + 48) = v12;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_OWORD *)(a4 + 16) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v25 = (__n128 *)&a1[4 * (a3 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(a1, v25, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(&v8[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v26 = &v8[2 * (a3 >> 1)];
      while (v26 != (__n128 *)a2)
      {
        if (v26->n128_f64[0] >= v8->n128_f64[0])
        {
          result = *v8;
          v27 = v8[1];
          v8 += 2;
        }
        else
        {
          result = *v26;
          v27 = v26[1];
          v26 += 2;
        }
        *v5 = result;
        v5[1] = v27;
        v5 += 2;
        if (v8 == v25)
        {
          if (v26 != (__n128 *)a2)
          {
            v28 = 0;
            do
            {
              v29 = &v5[v28];
              result = v26[v28];
              v30 = v26[v28 + 1];
              *v29 = result;
              v29[1] = v30;
              v28 += 2;
            }
            while (&v26[v28] != (__n128 *)a2);
          }
          return result;
        }
      }
      if (v8 != v25)
      {
        v31 = 0;
        do
        {
          v32 = &v5[v31];
          result = v8[v31];
          v33 = v8[v31 + 1];
          *v32 = result;
          v32[1] = v33;
          v31 += 2;
        }
        while (&v8[v31] != v25);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v13 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_OWORD *)(a4 + 16) = v13;
      v14 = a1 + 4;
      if (a1 + 4 != a2)
      {
        v15 = 0;
        v16 = (_OWORD *)a4;
        do
        {
          v17 = v16;
          v18 = *(double *)v16;
          v16 += 2;
          v19 = v16;
          if (*v14 < v18)
          {
            v20 = v17[1];
            *v16 = *v17;
            v16[1] = v20;
            v19 = (_OWORD *)a4;
            if (v17 != (_OWORD *)a4)
            {
              v21 = v15;
              while (1)
              {
                v19 = (_OWORD *)(a4 + v21);
                if (*v14 >= *(double *)(a4 + v21 - 32))
                  break;
                v22 = *(_OWORD *)(a4 + v21 - 16);
                *v19 = *(_OWORD *)(a4 + v21 - 32);
                v19[1] = v22;
                v21 -= 32;
                if (!v21)
                {
                  v19 = (_OWORD *)a4;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v14;
          v23 = *((_OWORD *)v14 + 1);
          v14 += 4;
          *v19 = result;
          v19[1] = v23;
          v15 += 32;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

double *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(double *result, double *a2, double *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  __int128 v36;
  int64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  __int128 v46;
  __int128 v47;
  double *v48;
  double *v49;
  double *v50;
  __int128 v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  unint64_t v63;
  double *v64;
  __int128 v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  BOOL v70;
  double *v71;
  __int128 v72;
  unint64_t v73;
  double *v74;
  __int128 v75;
  double *v76;
  __int128 v77;
  __int128 v78;
  double *v79;
  __int128 v80;
  unint64_t v81;
  double *v82;
  __int128 v83;
  double *v84;
  double *v85;
  double *v86;
  double *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*a2 >= result[v11])
      {
        v11 += 4;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      v15 = &result[v11];
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          v79 = &result[v11];
          v91 = *(_OWORD *)v79;
          v96 = *((_OWORD *)v79 + 1);
          v80 = *((_OWORD *)a2 + 1);
          *(_OWORD *)v79 = *(_OWORD *)a2;
          *((_OWORD *)v79 + 1) = v80;
          *(_OWORD *)a2 = v91;
          *((_OWORD *)a2 + 1) = v96;
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v25 = v14 >> 1;
        v19 = &result[4 * (v14 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v26 = ((char *)a3 - (char *)a2) >> 5;
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v18[4 * (v26 >> 1)];
            v30 = *v28;
            v29 = v28 + 4;
            v26 += ~(v26 >> 1);
            if (v30 >= *v19)
              v26 = v27;
            else
              v18 = v29;
          }
          while (v26);
        }
        v17 = ((char *)v18 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v16 = v8;
        else
          v16 = v8 + 1;
        v17 = v16 >> 1;
        v18 = &a2[4 * (v16 >> 1)];
        v19 = a2;
        if (v15 != a2)
        {
          v20 = ((char *)a2 - (char *)result - v11 * 8) >> 5;
          v19 = &result[v11];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[4 * (v20 >> 1)];
            v24 = *v22;
            v23 = v22 + 4;
            v20 += ~(v20 >> 1);
            if (*v18 < v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = ((char *)v19 - (char *)result - v11 * 8) >> 5;
      }
      v31 = v18;
      if (v19 != a2)
      {
        v31 = v19;
        if (a2 != v18)
        {
          if (v19 + 4 == a2)
          {
            v89 = *(_OWORD *)v19;
            v93 = *((_OWORD *)v19 + 1);
            v37 = (char *)v18 - (char *)a2;
            v84 = a6;
            v86 = v15;
            v38 = a3;
            v39 = v17;
            memmove(v19, a2, (char *)v18 - (char *)a2);
            v17 = v39;
            a6 = v84;
            v15 = v86;
            a3 = v38;
            v31 = (double *)((char *)v19 + v37);
            *(_OWORD *)v31 = v89;
            *((_OWORD *)v31 + 1) = v93;
          }
          else if (a2 + 4 == v18)
          {
            v31 = v19 + 4;
            v90 = *((_OWORD *)v18 - 2);
            v94 = *((_OWORD *)v18 - 1);
            if (v18 - 4 != v19)
            {
              v85 = a6;
              v87 = v15;
              v40 = a3;
              v41 = v17;
              memmove(v19 + 4, v19, (char *)(v18 - 4) - (char *)v19);
              v17 = v41;
              a6 = v85;
              v15 = v87;
              a3 = v40;
            }
            *(_OWORD *)v19 = v90;
            *((_OWORD *)v19 + 1) = v94;
          }
          else
          {
            v32 = ((char *)a2 - (char *)v19) >> 5;
            if (v32 == ((char *)v18 - (char *)a2) >> 5)
            {
              v33 = 0;
              do
              {
                v34 = &a2[v33];
                v35 = &v19[v33];
                v88 = *(_OWORD *)&v19[v33];
                v92 = *(_OWORD *)&v19[v33 + 2];
                v36 = *(_OWORD *)&a2[v33 + 2];
                *(_OWORD *)v35 = *(_OWORD *)&a2[v33];
                *((_OWORD *)v35 + 1) = v36;
                *(_OWORD *)v34 = v88;
                *((_OWORD *)v34 + 1) = v92;
                if (&v19[v33 + 4] == a2)
                  break;
                v33 += 4;
              }
              while (v34 + 4 != v18);
              v31 = a2;
            }
            else
            {
              v42 = ((char *)v18 - (char *)a2) >> 5;
              v43 = ((char *)a2 - (char *)v19) >> 5;
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v19[4 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 2);
                  v47 = *((_OWORD *)v45 - 1);
                  v45 -= 4;
                  v95 = v47;
                  v48 = &v45[4 * v32];
                  v49 = v45;
                  do
                  {
                    v50 = v49;
                    v49 = v48;
                    v51 = *((_OWORD *)v48 + 1);
                    *(_OWORD *)v50 = *(_OWORD *)v48;
                    *((_OWORD *)v50 + 1) = v51;
                    v52 = __OFSUB__(v32, ((char *)v18 - (char *)v48) >> 5);
                    v54 = v32 - (((char *)v18 - (char *)v48) >> 5);
                    v53 = (v54 < 0) ^ v52;
                    v48 = &v19[4 * v54];
                    if (v53)
                      v48 = &v49[4 * v32];
                  }
                  while (v48 != v45);
                  *(_OWORD *)v49 = v46;
                  *((_OWORD *)v49 + 1) = v95;
                }
                while (v45 != v19);
              }
              v31 = &v19[4 * (((char *)v18 - (char *)a2) >> 5)];
            }
          }
        }
      }
      a4 = -(v25 + v12);
      v55 = v8 - v17;
      if (v17 + v25 >= v8 - (v17 + v25) - v12)
      {
        v59 = -(v25 + v12);
        v60 = v17;
        v61 = v8 - v17;
        v57 = a6;
        v62 = v15;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(v31, v18, a3, v59, v61, a6, a7);
        result = v62;
        v18 = v19;
        v55 = v60;
        a4 = v25;
        a3 = v31;
      }
      else
      {
        v56 = v25;
        v57 = a6;
        v58 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_0::operator() const(unsigned long,int)::CaretPair *>(v15, v19, v31, v56, v17, a6, a7);
        a3 = v58;
        result = v31;
      }
      v8 = v55;
      a2 = v18;
      a6 = v57;
      if (!v55)
        return result;
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        v73 = 0;
        do
        {
          v74 = &a6[v73];
          v75 = *(_OWORD *)&result[v73 + 2];
          *(_OWORD *)v74 = *(_OWORD *)&result[v73];
          *((_OWORD *)v74 + 1) = v75;
          v73 += 4;
        }
        while (&result[v73] != a2);
        if (v73 * 8)
        {
          v76 = a6;
          while (a2 != a3)
          {
            if (*a2 >= *v76)
            {
              v77 = *(_OWORD *)v76;
              v78 = *((_OWORD *)v76 + 1);
              v76 += 4;
            }
            else
            {
              v77 = *(_OWORD *)a2;
              v78 = *((_OWORD *)a2 + 1);
              a2 += 4;
            }
            *(_OWORD *)result = v77;
            *((_OWORD *)result + 1) = v78;
            result += 4;
            if (&a6[v73] == v76)
              return result;
          }
          return (double *)memmove(result, v76, (char *)a6 - (char *)v76 + v73 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v63 = 0;
      do
      {
        v64 = &a6[v63];
        v65 = *(_OWORD *)&a2[v63 + 2];
        *(_OWORD *)v64 = *(_OWORD *)&a2[v63];
        *((_OWORD *)v64 + 1) = v65;
        v63 += 4;
      }
      while (&a2[v63] != a3);
      if (v63 * 8)
      {
        v66 = &a6[v63];
        v67 = a3 - 4;
        while (a2 != result)
        {
          v68 = *(v66 - 4);
          v69 = *(a2 - 4);
          v70 = v68 < v69;
          if (v68 >= v69)
            v71 = v66 - 4;
          else
            v71 = a2 - 4;
          if (v68 < v69)
            a2 -= 4;
          v72 = *((_OWORD *)v71 + 1);
          if (!v70)
            v66 -= 4;
          *(_OWORD *)v67 = *(_OWORD *)v71;
          *((_OWORD *)v67 + 1) = v72;
          v67 -= 4;
          if (v66 == a6)
            return result;
        }
        v81 = 0;
        do
        {
          v82 = &v67[v81];
          v83 = *(_OWORD *)&v66[v81 - 2];
          *(_OWORD *)v82 = *(_OWORD *)&v66[v81 - 4];
          *((_OWORD *)v82 + 1) = v83;
          v81 -= 4;
        }
        while (&v66[v81] != a6);
      }
    }
  }
  return result;
}

void std::vector<std::pair<CFRange,double>,TInlineBufferAllocator<std::pair<CFRange,double>,30ul>>::__destroy_vector::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 744);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 744))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_QWORD *)(v38 + 8) < *(_QWORD *)(*v8 + 8))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_QWORD *)(v43 + 8) < *(_QWORD *)(v44 + 8))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_QWORD *)(*v42 + 8);
          if (v47 < *(_QWORD *)(*v41 + 8))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_QWORD *)(*v40 + 8))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_QWORD *)(*v8 + 8))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_QWORD *)(v55 + 8);
                if (v57 < *(_QWORD *)(v56 + 8))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *(_QWORD *)(v56 + 8))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v91 = *v7;
              v90 = v7[1];
              v7 = v50;
              v92 = *(_QWORD *)(v90 + 8);
              if (v92 < *(_QWORD *)(v91 + 8))
              {
                do
                {
                  *v50 = v91;
                  v91 = *(v50 - 2);
                  --v50;
                }
                while (v92 < *(_QWORD *)(v91 + 8));
                *v50 = v90;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  result = *(_QWORD *)(v66 + 8);
                  if (result < *(_QWORD *)(v65[1] + 8))
                  {
                    v66 = v65[1];
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v67 = &v8[v63];
                v68 = *v67;
                v69 = *(_QWORD *)(*v67 + 8);
                if (*(_QWORD *)(v66 + 8) >= v69)
                {
                  do
                  {
                    v70 = v65;
                    *v67 = v66;
                    if (v61 < v64)
                      break;
                    result = (2 * v64) | 1;
                    v65 = &v8[result];
                    v71 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v71 < (uint64_t)v10 && *(_QWORD *)(v66 + 8) < *(_QWORD *)(v65[1] + 8))
                    {
                      v66 = v65[1];
                      ++v65;
                      result = v71;
                    }
                    v67 = v70;
                    v64 = result;
                  }
                  while (*(_QWORD *)(v66 + 8) >= v69);
                  *v70 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v72 = (unint64_t)v9 >> 3;
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = v76[1];
                v77 = v76 + 1;
                v78 = v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v72)
                {
                  result = *(_QWORD *)(v78 + 8);
                  if (result < *(_QWORD *)(v77[1] + 8))
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  v87 = *(_QWORD *)(*v77 + 8);
                  if (*(_QWORD *)(*v84 + 8) < v87)
                  {
                    do
                    {
                      v88 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v88;
                    }
                    while (*(_QWORD *)(*v84 + 8) < v87);
                    *v88 = v86;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (*(_QWORD *)(*(v7 - 1) + 8) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 8))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_QWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v29 + 8));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_QWORD *)(v32 + 8));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_QWORD *)(v35 + 8));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_QWORD *)(v36 + 8));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 8) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 8) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 8) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = v19;
          v24 = &v7[v16];
          do
          {
            *v24 = v22;
            *v23 = v17;
            do
            {
              v25 = v24[1];
              ++v24;
              v17 = v25;
            }
            while (*(_QWORD *)(v25 + 8) < v15);
            do
            {
              v26 = *--v23;
              v22 = v26;
            }
            while (*(_QWORD *)(v26 + 8) >= v15);
          }
          while (v24 < v23);
          v27 = v24 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 8);
  v6 = *(_QWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 8) < *(_QWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 8) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 8) < *(_QWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 8) < *(_QWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 8);
        if (v25 < *(_QWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 8);
    if (v14 < *(_QWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TLine::SeparateCharWithGlyphIndex(long *,long)::$_0 &,TRun **>(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 8) < *(_QWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 8) < *(_QWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 8) < *(_QWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::tuple<TRun const*,CFRange,TAttributes>,TInlineBufferAllocator<std::tuple<TRun const*,CFRange,TAttributes>,30ul>>::emplace_back<TRun const*&,CFRange&,TAttributes>(char **a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char **v31;

  v9 = (unint64_t)a1[1];
  v8 = (unint64_t)a1[2];
  if (v9 < v8)
  {
    *(_QWORD *)v9 = *a2;
    v10 = *a3;
    *(_OWORD *)(v9 + 24) = 0u;
    v11 = v9 + 24;
    *(_OWORD *)(v11 - 16) = v10;
    *(_WORD *)(v11 + 49) = 0;
    *(_BYTE *)(v11 + 51) = 0;
    *(_BYTE *)(v11 + 56) = 0;
    *(_BYTE *)(v11 + 104) = 0;
    *(_QWORD *)(v11 + 144) = 0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_QWORD *)(v11 + 120) = 0;
    *(_QWORD *)(v11 + 128) = 0;
    TAttributes::operator=(v11, a4);
    v12 = v11 + 152;
    goto LABEL_28;
  }
  v13 = (char *)(a1 + 3);
  v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (_QWORD)*a1) >> 4);
  if ((unint64_t)(v14 + 1) > 0x1745D1745D1745DLL)
    abort();
  v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (_QWORD)*a1) >> 4);
  v16 = 2 * v15;
  if (2 * v15 <= v14 + 1)
    v16 = v14 + 1;
  if (v15 >= 0xBA2E8BA2E8BA2ELL)
    v17 = 0x1745D1745D1745DLL;
  else
    v17 = v16;
  if (v17)
  {
    v18 = a1[663];
    v19 = (unint64_t)&v18[176 * v17];
    if (v19 <= (unint64_t)(a1 + 663))
    {
      a1[663] = (char *)v19;
    }
    else
    {
      if (v17 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = (char *)operator new(176 * v17);
    }
  }
  else
  {
    v18 = 0;
  }
  v20 = &v18[176 * v14];
  *(_QWORD *)v20 = *a2;
  v21 = &v18[176 * v17];
  *(_OWORD *)(v20 + 8) = *a3;
  *(_WORD *)(v20 + 73) = 0;
  v20[75] = 0;
  v20[80] = 0;
  v20[128] = 0;
  *((_QWORD *)v20 + 21) = 0;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *((_QWORD *)v20 + 18) = 0;
  *((_QWORD *)v20 + 19) = 0;
  TAttributes::operator=((uint64_t)(v20 + 24), a4);
  v12 = (uint64_t)(v20 + 176);
  v23 = *a1;
  v22 = a1[1];
  if (v22 == *a1)
  {
    *a1 = v20;
    a1[1] = (char *)v12;
    v29 = a1[2];
    a1[2] = v21;
    if (!v22)
      goto LABEL_28;
    goto LABEL_23;
  }
  v24 = 0;
  do
  {
    v25 = &v20[v24];
    *((_QWORD *)v25 - 22) = *(_QWORD *)&v22[v24 - 176];
    v26 = *(_OWORD *)&v22[v24 - 168];
    *(_OWORD *)(v25 - 152) = 0u;
    v27 = (uint64_t)&v20[v24 - 152];
    *(_OWORD *)(v27 - 16) = v26;
    *(_WORD *)(v27 + 49) = 0;
    *(_BYTE *)(v27 + 51) = 0;
    *(_BYTE *)(v27 + 56) = 0;
    *(_BYTE *)(v27 + 104) = 0;
    *(_QWORD *)(v27 + 144) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_QWORD *)(v27 + 120) = 0;
    *(_QWORD *)(v27 + 128) = 0;
    TAttributes::operator=(v27, (uint64_t)&v22[v24 - 152]);
    v24 -= 176;
  }
  while (&v22[v24] != v23);
  v22 = *a1;
  v28 = a1[1];
  *a1 = &v20[v24];
  a1[1] = (char *)v12;
  v29 = a1[2];
  a1[2] = v21;
  if (v28 != v22)
  {
    do
    {
      v30 = v28 - 176;
      TAttributes::~TAttributes((TAttributes *)(v28 - 152));
      v28 = v30;
    }
    while (v30 != v22);
  }
  if (v22)
  {
LABEL_23:
    if (v13 > v22 || (v31 = a1 + 663, a1 + 663 <= (char **)v22))
    {
      operator delete(v22);
    }
    else if (v29 == *v31)
    {
      *v31 = v22;
    }
  }
LABEL_28:
  a1[1] = (char *)v12;
  return v12 - 176;
}

char *std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__emplace_back_slow_path<long &,CFRange &,__CFDictionary const*&>(char **a1, _QWORD *a2, __int128 *a3, void **a4)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  __int128 v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int64x2_t v27;
  char *v28;
  char *v30;
  int64x2_t v31;
  char *v32;
  uint64_t v33;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v11 = (uint64_t)(a1 + 3);
  v12 = a1[2] - v4;
  if (v12 >> 4 > v6)
    v6 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v6;
  v33 = v11;
  if (v13)
    v14 = TInlineBufferAllocator<DecorationOverride,30ul>::allocate(v11, v13);
  else
    v14 = 0;
  v15 = &v14[32 * v5];
  v30 = v14;
  v31.i64[0] = (uint64_t)v15;
  v16 = &v14[32 * v13];
  v32 = v16;
  v17 = *a4;
  v18 = *a3;
  *(_QWORD *)v15 = *a2;
  *(_OWORD *)(v15 + 8) = v18;
  *((_QWORD *)v15 + 3) = v17;
  v19 = v15 + 32;
  v31.i64[1] = (uint64_t)(v15 + 32);
  v20 = *a1;
  v21 = (unint64_t)a1[1];
  if ((char *)v21 == *a1)
  {
    v27 = vdupq_n_s64(v21);
  }
  else
  {
    do
    {
      v22 = v15 - 32;
      v23 = *(_OWORD *)(v21 - 32);
      v24 = *(_QWORD *)(v21 - 16);
      v25 = (unint64_t *)(v21 - 8);
      v21 -= 32;
      *((_QWORD *)v15 - 2) = v24;
      *((_OWORD *)v15 - 2) = v23;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(0, v25));
      *((_QWORD *)v15 - 1) = v26;
      v15 -= 32;
    }
    while ((char *)v21 != v20);
    v27 = *(int64x2_t *)a1;
    v15 = v22;
    v19 = (char *)v31.i64[1];
    v16 = v32;
  }
  *a1 = v15;
  a1[1] = v19;
  v31 = v27;
  v28 = a1[2];
  a1[2] = v16;
  v32 = v28;
  v30 = (char *)v27.i64[0];
  std::__split_buffer<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul> &>::~__split_buffer((uint64_t)&v30);
  return v19;
}

void std::vector<DecorationOverride,TInlineBufferAllocator<DecorationOverride,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void **v5;
  void **v6;
  id *v7;
  void **v8;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = (void **)**a1;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        v7 = v4 - 4;

        v4 = v7;
      }
      while (v7 != v2);
      v6 = *a1;
      v5 = (void **)**a1;
    }
    v1[1] = v2;
    v8 = v6 + 123;
    if (v6 + 3 <= v5 && v8 > v5)
    {
      if (v6[2] == v6[123])
        *v8 = v5;
    }
    else
    {
      operator delete(v5);
    }
  }
}

void std::__function::__func<TLine::PositionToCharIndex(CGPoint)::$_0,std::allocator<TLine::PositionToCharIndex(CGPoint)::$_0>,void ()(double,long,BOOL,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TLine::PositionToCharIndex(CGPoint)::$_0,std::allocator<TLine::PositionToCharIndex(CGPoint)::$_0>,void ()(double,long,BOOL,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15E1258;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<TLine::PositionToCharIndex(CGPoint)::$_0,std::allocator<TLine::PositionToCharIndex(CGPoint)::$_0>,void ()(double,long,BOOL,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15E1258;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TLine::PositionToCharIndex(CGPoint)::$_0,std::allocator<TLine::PositionToCharIndex(CGPoint)::$_0>,void ()(double,long,BOOL,BOOL *)>::operator()(uint64_t a1, double *a2, uint64_t *a3, _BYTE *a4, _BYTE **a5)
{
  double v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  _BYTE *v10;
  TLine *v11;
  uint64_t result;
  int v13;
  double *v14;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  v9 = *a4 != 0;
  v10 = *a5;
  v11 = *(TLine **)(a1 + 40);
  result = TLine::FindRunWithCharIndex(v11, *a3, 1);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 2) + 8 * result) + 40) + 224);
  if (((v9 ^ ((v13 & 1) == 0)) & 1) == 0)
  {
    v14 = *(double **)(a1 + 16);
    if (*v14 < v6 && *(double *)(a1 + 32) >= v6)
    {
      *v14 = v6;
      if (v8)
        v16 = v7;
      else
        v16 = v7 + 1;
      **(_QWORD **)(a1 + 24) = v16;
    }
  }
  if ((((v8 != 0) ^ v13) & 1) == 0)
  {
    v17 = *(double *)(a1 + 32);
    if (v17 <= v6)
    {
      if (v17 >= **(double **)(a1 + 16) + (v6 - **(double **)(a1 + 16)) * 0.5)
      {
        if (v8)
          v18 = v7;
        else
          v18 = v7 + 1;
      }
      else
      {
        v18 = **(_QWORD **)(a1 + 24);
      }
      **(_QWORD **)(a1 + 8) = v18;
      *v10 = 1;
    }
  }
  return result;
}

void std::__function::__func<TLine::CharIndexToOffsets(long)::$_0,std::allocator<TLine::CharIndexToOffsets(long)::$_0>,void ()(double,long,BOOL,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TLine::CharIndexToOffsets(long)::$_0,std::allocator<TLine::CharIndexToOffsets(long)::$_0>,void ()(double,long,BOOL,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15E1210;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<TLine::CharIndexToOffsets(long)::$_0,std::allocator<TLine::CharIndexToOffsets(long)::$_0>,void ()(double,long,BOOL,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15E1210;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TLine::CharIndexToOffsets(long)::$_0,std::allocator<TLine::CharIndexToOffsets(long)::$_0>,void ()(double,long,BOOL,BOOL *)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4, _BYTE **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (*(unsigned __int8 *)(result + 24) != *a4)
  {
    v5 = *a2;
    v6 = *a3;
    v7 = *(_QWORD *)(result + 32);
    if (v7 == *a3)
    {
      **a5 = 1;
LABEL_7:
      **(_QWORD **)(result + 16) = v5;
      return result;
    }
    if (v7 < *a3)
    {
      v8 = *(_QWORD **)(result + 8);
      if (*v8 > v6)
      {
        *v8 = v6;
        goto LABEL_7;
      }
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  double *v7;
  __n128 *v8;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  __n128 *v17;
  double *v19;
  unint64_t v20;
  __n128 *v21;
  unint64_t v22;
  __n128 v23;
  __n128 *v24;
  double *v25;
  __n128 *v26;
  __n128 v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;

  if (a3 >= 2)
  {
    v7 = (double *)a1;
    if (a3 == 2)
    {
      v8 = a2 - 1;
      result.n128_u64[0] = a2[-1].n128_u64[0];
      if (result.n128_f64[0] < a1->n128_f64[0])
      {
        result = *a1;
        *a1 = *v8;
        *v8 = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (double *)a4;
      v20 = a3 >> 1;
      v21 = &a1[a3 >> 1];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v23 = std::__stable_sort_move<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(a1, v21, v22, a4, result);
        v24 = (__n128 *)&v19[2 * v20];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>((__n128 *)&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24, v23).n128_u64[0];
        v25 = &v19[2 * a3];
        v26 = v24;
        while (v26 != (__n128 *)v25)
        {
          if (v26->n128_f64[0] >= *v19)
          {
            v28 = *(__n128 *)v19;
            v19 += 2;
            result = v28;
          }
          else
          {
            v27 = *v26++;
            result = v27;
          }
          *(__n128 *)v7 = result;
          v7 += 2;
          if (v19 == (double *)v24)
          {
            if (v26 != (__n128 *)v25)
            {
              v29 = 0;
              do
              {
                result = v26[v29 / 0x10];
                *(__n128 *)&v7[v29 / 8] = result;
                v29 += 16;
              }
              while (&v26[v29 / 0x10] != (__n128 *)v25);
            }
            return result;
          }
        }
        if (v19 != (double *)v24)
        {
          v30 = 0;
          do
          {
            result = *(__n128 *)&v19[v30];
            *(__n128 *)&v7[v30] = result;
            v30 += 2;
          }
          while (&v19[v30] != (double *)v24);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v7, &v7[2 * (a3 >> 1)], a2->n128_f64, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v13 = v10;
          result.n128_u64[0] = v12[1].n128_u64[0];
          if (result.n128_f64[0] < v12->n128_f64[0])
          {
            v14 = v12[1].n128_u64[1];
            v15 = v11;
            while (1)
            {
              *(__n128 *)((char *)a1 + v15 + 16) = *(__n128 *)((char *)a1 + v15);
              if (!v15)
                break;
              v16 = *(double *)((char *)a1[-1].n128_f64 + v15);
              v15 -= 16;
              if (result.n128_f64[0] >= v16)
              {
                v17 = (__n128 *)((char *)a1 + v15 + 16);
                goto LABEL_15;
              }
            }
            v17 = a1;
LABEL_15:
            v17->n128_u64[0] = result.n128_u64[0];
            v17->n128_u64[1] = v14;
          }
          v10 = v13 + 1;
          v11 += 16;
          v12 = v13;
        }
        while (&v13[1] != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  double *n128_f64;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  uint64_t v16;
  __int128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_f64[0] >= a1->n128_f64[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v18 = &a1[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(a1, v18, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v19 = &v8[a3 >> 1];
      while (v19 != a2)
      {
        if (v19->n128_f64[0] >= v8->n128_f64[0])
        {
          v21 = *v8++;
          result = v21;
        }
        else
        {
          v20 = *v19++;
          result = v20;
        }
        *v5++ = result;
        if (v8 == v18)
        {
          if (v19 != a2)
          {
            v22 = 0;
            do
            {
              result = v19[v22];
              v5[v22++] = result;
            }
            while (&v19[v22] != a2);
          }
          return result;
        }
      }
      if (v8 != v18)
      {
        v23 = 0;
        do
        {
          result = v8[v23];
          v5[v23++] = result;
        }
        while (&v8[v23] != v18);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      n128_f64 = a1[1].n128_f64;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = (double *)a4;
        do
        {
          v13 = v12;
          v14 = *v12;
          v12 += 2;
          v15 = v12;
          if (*n128_f64 < v14)
          {
            *(_OWORD *)v12 = *(_OWORD *)v13;
            v15 = (double *)a4;
            if (v13 != (double *)a4)
            {
              v16 = v11;
              while (1)
              {
                v15 = (double *)((char *)a4->n128_f64 + v16);
                if (*n128_f64 >= *(double *)((char *)a4[-1].n128_f64 + v16))
                  break;
                *(__n128 *)v15 = *(__n128 *)((char *)a4 + v16 - 16);
                v16 -= 16;
                if (!v16)
                {
                  v15 = (double *)a4;
                  break;
                }
              }
            }
          }
          v17 = *(_OWORD *)n128_f64;
          n128_f64 += 2;
          result.n128_u64[0] = v17;
          *(_OWORD *)v15 = v17;
          v11 += 16;
        }
        while (n128_f64 != (double *)a2);
      }
    }
  }
  return result;
}

double *std::__inplace_merge<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(double *result, double *a2, double *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  __int128 v46;
  double *v47;
  double *v48;
  double *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  double v64;
  double *v65;
  uint64_t v66;
  double *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  double *v72;
  double *v73;
  double *v74;
  double *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*a2 >= result[v11])
      {
        v11 += 2;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      v15 = &result[v11];
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          v79 = *(_OWORD *)&result[v11];
          *(_OWORD *)&result[v11] = *(_OWORD *)a2;
          *(_OWORD *)a2 = v79;
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v25 = v14 >> 1;
        v19 = &result[2 * (v14 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v26 = ((char *)a3 - (char *)a2) >> 4;
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v18[2 * (v26 >> 1)];
            v30 = *v28;
            v29 = v28 + 2;
            v26 += ~(v26 >> 1);
            if (v30 >= *v19)
              v26 = v27;
            else
              v18 = v29;
          }
          while (v26);
        }
        v17 = ((char *)v18 - (char *)a2) >> 4;
      }
      else
      {
        if (v8 >= 0)
          v16 = v8;
        else
          v16 = v8 + 1;
        v17 = v16 >> 1;
        v18 = &a2[2 * (v16 >> 1)];
        v19 = a2;
        if (v15 != a2)
        {
          v20 = ((char *)a2 - (char *)result - v11 * 8) >> 4;
          v19 = &result[v11];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[2 * (v20 >> 1)];
            v24 = *v22;
            v23 = v22 + 2;
            v20 += ~(v20 >> 1);
            if (*v18 < v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = ((char *)v19 - (char *)result - v11 * 8) >> 4;
      }
      v31 = v18;
      if (v19 != a2)
      {
        v31 = v19;
        if (a2 != v18)
        {
          if (v19 + 2 == a2)
          {
            v77 = *(_OWORD *)v19;
            v37 = (char *)v18 - (char *)a2;
            v72 = a6;
            v74 = v15;
            v38 = a3;
            v39 = v17;
            memmove(v19, a2, (char *)v18 - (char *)a2);
            v17 = v39;
            a6 = v72;
            v15 = v74;
            a3 = v38;
            v31 = (double *)((char *)v19 + v37);
            *(_OWORD *)v31 = v77;
          }
          else if (a2 + 2 == v18)
          {
            v31 = v19 + 2;
            v78 = *((_OWORD *)v18 - 1);
            if (v18 - 2 != v19)
            {
              v73 = a6;
              v75 = v15;
              v40 = a3;
              v41 = v17;
              memmove(v19 + 2, v19, (char *)(v18 - 2) - (char *)v19);
              v17 = v41;
              a6 = v73;
              v15 = v75;
              a3 = v40;
            }
            *(_OWORD *)v19 = v78;
          }
          else
          {
            v32 = ((char *)a2 - (char *)v19) >> 4;
            if (v32 == ((char *)v18 - (char *)a2) >> 4)
            {
              v33 = 0;
              do
              {
                v76 = *(_OWORD *)&v19[v33];
                *(_OWORD *)&v19[v33] = *(_OWORD *)&a2[v33];
                v34 = (uint64_t)&v19[v33 + 2];
                *(_OWORD *)&a2[v33] = v76;
                v35 = (uint64_t)&a2[v33 + 2];
                v33 += 2;
              }
              while ((double *)v34 != a2 && v35 != (_QWORD)v18);
              v31 = a2;
            }
            else
            {
              v42 = ((char *)v18 - (char *)a2) >> 4;
              v43 = ((char *)a2 - (char *)v19) >> 4;
              do
              {
                v44 = v43;
                v43 = v42;
                v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                v45 = &v19[2 * v43];
                do
                {
                  v46 = *((_OWORD *)v45 - 1);
                  v45 -= 2;
                  v47 = &v45[2 * v32];
                  v48 = v45;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *(_OWORD *)v49 = *(_OWORD *)v47;
                    v50 = __OFSUB__(v32, ((char *)v18 - (char *)v47) >> 4);
                    v52 = v32 - (((char *)v18 - (char *)v47) >> 4);
                    v51 = (v52 < 0) ^ v50;
                    v47 = &v19[2 * v52];
                    if (v51)
                      v47 = &v48[2 * v32];
                  }
                  while (v47 != v45);
                  *(_OWORD *)v48 = v46;
                }
                while (v45 != v19);
              }
              v31 = &v19[2 * (((char *)v18 - (char *)a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v25 + v12);
      v53 = v8 - v17;
      if (v17 + v25 >= v8 - (v17 + v25) - v12)
      {
        v56 = -(v25 + v12);
        v57 = v17;
        v58 = v8 - v17;
        v54 = a6;
        v59 = v15;
        std::__inplace_merge<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v31, v18, a3, v56, v58, a6, a7);
        result = v59;
        v18 = v19;
        v53 = v57;
        a4 = v25;
        a3 = v31;
      }
      else
      {
        v54 = a6;
        v55 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,TLine::EnumerateCaretOffsets(std::function<void ()(double,long,BOOL,BOOL *)>)::$_2 &,TLine::CaretInfo *>(v15, v19, v31, v25, v17, a6, a7);
        a3 = v55;
        result = v31;
      }
      v8 = v53;
      a2 = v18;
      a6 = v54;
      if (!v53)
        return result;
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        v66 = 0;
        do
        {
          *(_OWORD *)&a6[v66] = *(_OWORD *)&result[v66];
          v66 += 2;
        }
        while (&result[v66] != a2);
        if (v66 * 8)
        {
          v67 = a6;
          while (a2 != a3)
          {
            if (*a2 >= *v67)
            {
              v70 = *(_OWORD *)v67;
              v67 += 2;
              v69 = v70;
            }
            else
            {
              v68 = *(_OWORD *)a2;
              a2 += 2;
              v69 = v68;
            }
            *(_OWORD *)result = v69;
            result += 2;
            if (&a6[v66] == v67)
              return result;
          }
          return (double *)memmove(result, v67, (char *)a6 - (char *)v67 + v66 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v60 = 0;
      do
      {
        *(_OWORD *)&a6[v60] = *(_OWORD *)&a2[v60];
        v60 += 2;
      }
      while (&a2[v60] != a3);
      if (v60 * 8)
      {
        v61 = &a6[v60];
        v62 = a3 - 2;
        while (a2 != result)
        {
          v63 = *(v61 - 2);
          v64 = *(a2 - 2);
          if (v63 >= v64)
            v65 = v61 - 2;
          else
            v65 = a2 - 2;
          if (v63 >= v64)
            v61 -= 2;
          else
            a2 -= 2;
          *(_OWORD *)v62 = *(_OWORD *)v65;
          v62 -= 2;
          if (v61 == a6)
            return result;
        }
        v71 = 0;
        do
        {
          *(_OWORD *)&v62[v71] = *(_OWORD *)&v61[v71 - 2];
          v71 -= 2;
        }
        while (&v61[v71] != a6);
      }
    }
  }
  return result;
}

uint64_t TFrame::operator==(uint64_t a1, unint64_t *a2)
{
  const void *v4;
  const void *v5;
  uint64_t result;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (*(_QWORD *)(a1 + 16) != a2[2]
    || *(_QWORD *)(a1 + 24) != a2[3]
    || *(_QWORD *)a1 != *a2
    || *(_QWORD *)(a1 + 8) != a2[1])
  {
    return 0;
  }
  v4 = (const void *)atomic_load((unint64_t *)(a1 + 80));
  v5 = (const void *)atomic_load(a2 + 10);
  if (v4 == v5 || (result = 0, v4) && v5 && (result = CFEqual(v4, v5), (_DWORD)result))
  {
    v7 = (const void *)atomic_load((unint64_t *)(a1 + 88));
    v8 = (const void *)atomic_load(a2 + 11);
    if (v7 == v8 || (result = 0, v7) && v8 && (result = CFEqual(v7, v8), (_DWORD)result))
    {
      v9 = (const void *)atomic_load((unint64_t *)(a1 + 104));
      v10 = (const void *)atomic_load(a2 + 13);
      if (v9 == v10 || (result = 0, v9) && v10 && (result = CFEqual(v9, v10), (_DWORD)result))
      {
        result = std::operator==[abi:nn180100]<CGPoint,std::allocator<CGPoint>>((double **)(a1 + 112), (uint64_t)(a2 + 14));
        if ((_DWORD)result)
          return !operator!=((unint64_t *)(a1 + 136), a2 + 17);
      }
    }
  }
  return result;
}

BOOL operator!=(unint64_t *a1, unint64_t *a2)
{
  const void *v2;
  const void *v3;
  BOOL v4;

  v2 = (const void *)atomic_load(a1);
  v3 = (const void *)atomic_load(a2);
  if (v2 == v3)
    return 0;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return v4 || CFEqual(v2, v3) == 0;
}

BOOL std::operator==[abi:nn180100]<CGPoint,std::allocator<CGPoint>>(double **a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(double **)a2;
  if ((char *)v2 - (char *)*a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    v5 = *v3;
    v6 = v3[1];
    v3 += 2;
    v7 = *v4;
    v8 = v4[1];
    v4 += 2;
    result = v6 == v8 && v5 == v7;
  }
  while (result && v3 != v2);
  return result;
}

__CFString *TFrame::DebugDescription(TFrame *this)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = (__CFString *)CFStringCreateWithFormat(v2, 0, CFSTR("(%ld, %ld)"), *((_QWORD *)this + 2), *((_QWORD *)this + 3));
  v5 = atomic_load((unint64_t *)this + 10);
  v6 = atomic_load((unint64_t *)this + 11);
  v7 = atomic_load((unint64_t *)this + 13);
  CFStringAppendFormat(Mutable, 0, CFSTR("visible string range = %@, path = %@, attributes = %@, lines = %@"), v4, v5, v6, v7);

  return Mutable;
}

id TFrame::CopyDescriptionDictionary(TFrame *this, uint64_t a2)
{
  id v4;
  void *v5;
  unint64_t *v6;
  void *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex i;
  TLine **ValueAtIndex;
  id v16;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (unint64_t *)((char *)this + 104);
  v7 = (void *)atomic_load((unint64_t *)this + 13);
  v8 = v7;
  v9 = v8;
  if (v8)
    Count = CFArrayGetCount(v8);
  else
    Count = 0;

  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", Count), CFSTR("numLines"));
  v11 = (const __CFArray *)atomic_load(v6);
  if (v11)
  {
    v12 = CFArrayGetCount(v11);
    if (v12)
    {
      v13 = v12;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = (TLine **)CFArrayGetValueAtIndex(v11, i);
        v16 = TLine::CopyDescriptionDictionary(ValueAtIndex[5], a2);
        objc_msgSend(v5, "addObject:", (id)CFMakeCollectable(v16));
      }
    }
  }
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("lines"));
  return v4;
}

void TFrame::CopyVisibleString(TFrame *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  const __CFArray *v8;
  _QWORD ***ValueAtIndex;

  v4 = (void *)atomic_load((unint64_t *)this + 13);
  v5 = v4;
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);

    if (Count > 0)
    {
      v8 = (const __CFArray *)atomic_load((unint64_t *)this + 13);
      ValueAtIndex = (_QWORD ***)CFArrayGetValueAtIndex(v8, 0);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**ValueAtIndex[5] + 16))(*ValueAtIndex[5], *((_QWORD *)this + 2), *((_QWORD *)this + 3));
      return;
    }
  }
  else
  {

  }
  *a2 = 0;
}

void TFrame::DrawFrame(TFrame *this, CGContext *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex v8;
  double v9;
  double v10;
  TLine *v11;
  const __CFBitVector *v13;
  const __CFBitVector *v14;
  CFBit BitAtIndex;
  const CGPath *v16;
  CGRect BoundingBox;

  if (*((_DWORD *)this + 36))
  {
    TFrame::DrawFrameVertical(this, a2);
    return;
  }
  v4 = (const __CFArray *)atomic_load((unint64_t *)this + 13);
  Count = CFArrayGetCount(v4);
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    v8 = 0;
    v9 = *((double *)this + 6);
    v10 = *((double *)this + 7);
    while (1)
    {
      v11 = (TLine *)*((_QWORD *)TFrame::GetLineAtIndex(this, v8) + 5);
      if (!atomic_load((unint64_t *)this + 17))
        break;
      v13 = (const __CFBitVector *)atomic_load((unint64_t *)this + 17);
      if (CFBitVectorGetCount(v13) <= v8)
        break;
      v14 = (const __CFBitVector *)atomic_load((unint64_t *)this + 17);
      BitAtIndex = CFBitVectorGetBitAtIndex(v14, v8);
      CGContextSetTextPosition(a2, v9 + *(double *)(*((_QWORD *)this + 14) + v7), v10 + *(double *)(*((_QWORD *)this + 14) + v7 + 8));
      if (!BitAtIndex)
        goto LABEL_10;
      CGContextSaveGState(a2);
      v16 = (const CGPath *)atomic_load((unint64_t *)this + 10);
      BoundingBox = CGPathGetBoundingBox(v16);
      CGContextClipToRect(a2, BoundingBox);
      TLine::DrawGlyphs(v11, a2);
      CGContextRestoreGState(a2);
LABEL_11:
      ++v8;
      v7 += 16;
      if (v6 == v8)
        return;
    }
    CGContextSetTextPosition(a2, v9 + *(double *)(*((_QWORD *)this + 14) + v7), v10 + *(double *)(*((_QWORD *)this + 14) + v7 + 8));
LABEL_10:
    TLine::DrawGlyphs(v11, a2);
    goto LABEL_11;
  }
}

CFIndex TFrame::DrawFrameVertical(TFrame *this, CGContext *a2)
{
  const __CFArray *v4;
  CFIndex result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  CFIndex i;
  TLine *v11;
  double *v12;
  double v13;
  CGAffineTransform transform;
  CGAffineTransform v15;
  CGContext *v16;
  CGAffineTransform v17;
  CGAffineTransform v18;

  v4 = (const __CFArray *)atomic_load((unint64_t *)this + 13);
  result = CFArrayGetCount(v4);
  if (result)
  {
    v6 = result;
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *(_OWORD *)&v17.tx = v7;
    *(_OWORD *)&v17.c = v7;
    *(_OWORD *)&v17.a = v7;
    v16 = a2;
    CGContextGetCTM(&v17, a2);
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    *(_OWORD *)&v15.c = v8;
    *(_OWORD *)&v15.tx = v8;
    *(_OWORD *)&v15.a = v8;
    *(_OWORD *)&v18.a = xmmword_18492F2C0;
    v18.c = 1.0;
    memset(&v18.d, 0, 24);
    CGAffineTransformInvert(&v15, &v18);
    *(_OWORD *)&transform.a = xmmword_18492F2C0;
    transform.c = 1.0;
    memset(&transform.d, 0, 24);
    CGContextConcatCTM(a2, &transform);
    if (v6 >= 1)
    {
      v9 = 0;
      for (i = 0; i != v6; ++i)
      {
        v11 = (TLine *)*((_QWORD *)TFrame::GetLineAtIndex(this, i) + 5);
        v12 = (double *)(*((_QWORD *)this + 14) + v9);
        v13 = v12[1] + *((double *)this + 7);
        CGContextSetTextPosition(a2, v15.tx + v13 * v15.c + v15.a * (*v12 + *((double *)this + 6)), v15.ty + v13 * v15.d + v15.b * (*v12 + *((double *)this + 6)));
        TLine::DrawGlyphs(v11, a2);
        v9 += 16;
      }
    }
    v18 = v17;
    return CGContextSetCTM();
  }
  return result;
}

char *std::vector<CGPoint>::__assign_with_size[abi:nn180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGSize>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void TextEncapsulationData::TextEncapsulationData(TextEncapsulationData *this, const __CFDictionary *a2)
{
  double *v4;
  CFTypeID TypeID;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  unsigned int IntValue;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeID v12;
  unsigned int v13;
  const __CFString *v14;
  const __CFString *v15;
  CFTypeID v16;
  unsigned int v17;
  const __CFString *v18;
  const __CFString *v19;
  CFTypeID v20;
  unsigned int v21;
  const __CFString *v22;
  const __CFString *v23;
  CFTypeID v24;
  double DoubleValue;
  double v26;
  int valuePtr;

  *(_DWORD *)this = 65537;
  *((_QWORD *)this + 1) = 0;
  v4 = (double *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x3FF0000000000000;
  *((_WORD *)this + 20) = 400;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  TypeID = CFNumberGetTypeID();
  Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationScale"));
  if (Value && (v7 = Value, CFGetTypeID(Value) == TypeID))
  {
    valuePtr = -1431655766;
    v8 = CFGetTypeID(v7);
    if (v8 == CFNumberGetTypeID() || v8 == CFBooleanGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v7, kCFNumberIntType, &valuePtr);
      IntValue = valuePtr;
    }
    else
    {
      if (v8 != CFStringGetTypeID())
        goto LABEL_9;
      IntValue = CFStringGetIntValue(v7);
      valuePtr = IntValue;
    }
    if (IntValue <= 2)
      *(_BYTE *)this = IntValue;
  }
  else
  {
    valuePtr = -1431655766;
  }
LABEL_9:
  v10 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationPlatterSize"));
  if (v10)
  {
    v11 = v10;
    if (CFGetTypeID(v10) == TypeID)
    {
      v12 = CFGetTypeID(v11);
      if (v12 == CFNumberGetTypeID() || v12 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v11, kCFNumberIntType, &valuePtr);
        v13 = valuePtr;
      }
      else
      {
        if (v12 != CFStringGetTypeID())
          goto LABEL_20;
        v13 = CFStringGetIntValue(v11);
        valuePtr = v13;
      }
      if (v13 <= 1)
        *((_BYTE *)this + 1) = v13;
    }
  }
LABEL_20:
  v14 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationShape"));
  if (v14)
  {
    v15 = v14;
    if (CFGetTypeID(v14) == TypeID)
    {
      v16 = CFGetTypeID(v15);
      if (v16 == CFNumberGetTypeID() || v16 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, &valuePtr);
        v17 = valuePtr;
      }
      else
      {
        if (v16 != CFStringGetTypeID())
          goto LABEL_29;
        v17 = CFStringGetIntValue(v15);
        valuePtr = v17;
      }
      if (v17 <= 2)
        *((_BYTE *)this + 2) = v17;
    }
  }
LABEL_29:
  v18 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationStyle"));
  if (v18)
  {
    v19 = v18;
    if (CFGetTypeID(v18) == TypeID)
    {
      v20 = CFGetTypeID(v19);
      if (v20 == CFNumberGetTypeID() || v20 == CFBooleanGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v19, kCFNumberIntType, &valuePtr);
        v21 = valuePtr;
      }
      else
      {
        if (v20 != CFStringGetTypeID())
          goto LABEL_38;
        v21 = CFStringGetIntValue(v19);
        valuePtr = v21;
      }
      if (v21 <= 1)
        *((_BYTE *)this + 3) = v21;
    }
  }
LABEL_38:
  v22 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationLineWidth"));
  if (v22 && (v23 = v22, CFGetTypeID(v22) == TypeID))
  {
    v26 = NAN;
    v24 = CFGetTypeID(v23);
    if (v24 == CFNumberGetTypeID() || v24 == CFBooleanGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v23, kCFNumberDoubleType, &v26);
      DoubleValue = v26;
    }
    else
    {
      if (v24 != CFStringGetTypeID())
        goto LABEL_45;
      DoubleValue = CFStringGetDoubleValue(v23);
      v26 = DoubleValue;
    }
    *v4 = DoubleValue;
  }
  else
  {
    v26 = NAN;
  }
LABEL_45:
  *((_QWORD *)this + 3) = CFDictionaryGetValue(a2, CFSTR("CTTextEncapsulationEnclosureColor"));
}

void TextEncapsulationData::TextEncapsulationData(TextEncapsulationData *this, NSTextEncapsulation *a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)this = 65537;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x3FF0000000000000;
  *((_WORD *)this + 20) = 400;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  v4 = -[NSTextEncapsulation scale](a2, "scale");
  if (v4 <= 2)
    *(_BYTE *)this = 0x20001u >> (8 * v4);
  v5 = -[NSTextEncapsulation platterSize](a2, "platterSize");
  if (v5)
  {
    if (v5 != 1)
      goto LABEL_8;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)this + 1) = v6;
LABEL_8:
  v7 = -[NSTextEncapsulation shape](a2, "shape");
  if (v7 <= 2)
    *((_BYTE *)this + 2) = 0x20001u >> (8 * v7);
  v8 = -[NSTextEncapsulation style](a2, "style");
  if (!v8)
  {
    v9 = 0;
    goto LABEL_14;
  }
  if (v8 == 1)
  {
    v9 = 1;
LABEL_14:
    *((_BYTE *)this + 3) = v9;
  }
  -[NSTextEncapsulation lineWeight](a2, "lineWeight");
  *((_QWORD *)this + 1) = v10;
  *((_QWORD *)this + 3) = -[NSTextEncapsulation color](a2, "color");
  -[NSTextEncapsulation minimumWidth](a2, "minimumWidth");
  *((_QWORD *)this + 2) = v11;
}

CFTypeID CTRunGetTypeID(void)
{
  if (TCFBase<TRun>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TRun>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TRun>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TRun>::fTypeID;
}

uint64_t CTRunGetScript(uint64_t result)
{
  if (result)
    return ScriptTagForScriptCode(*(_DWORD *)(*(_QWORD *)(result + 40) + 304));
  return result;
}

const CGGlyph *__cdecl CTRunGetGlyphsPtr(const CGGlyph *run)
{
  uint64_t v1;

  if (run)
  {
    v1 = *((_QWORD *)run + 5);
    if ((*(_BYTE *)(v1 + 225) & 8) != 0)
      return 0;
    else
      return (const CGGlyph *)(*(_QWORD *)(*(_QWORD *)(v1 + 216) + 16) + 2 * *(_QWORD *)(v1 + 200));
  }
  return run;
}

const CGSize *__cdecl CTRunGetAdvancesPtr(const CGSize *run)
{
  CGFloat height;
  uint64_t v2;
  uint64_t v3;

  if (run)
  {
    height = run[2].height;
    if ((*(_BYTE *)(*(_QWORD *)&height + 225) & 0x18) != 0)
      return 0;
    v2 = *(_QWORD *)(*(_QWORD *)&height + 216);
    v3 = *(_QWORD *)(v2 + 32);
    if (!v3 && *(_QWORD *)(v2 + 24))
      return 0;
    else
      return (const CGSize *)(v3 + 16 * *(_QWORD *)(*(_QWORD *)&height + 200));
  }
  return run;
}

const CFIndex *__cdecl CTRunGetStringIndicesPtr(const CFIndex *run)
{
  CFIndex v1;

  if (run)
  {
    v1 = run[5];
    if ((*(_BYTE *)(v1 + 225) & 8) != 0)
      return 0;
    else
      return (const CFIndex *)(*(_QWORD *)(*(_QWORD *)(v1 + 216) + 48) + 8 * *(_QWORD *)(v1 + 200));
  }
  return run;
}

void CTRunGetMetrics(uint64_t a1, double *a2, double *a3, double *a4)
{
  uint64_t v6;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (a2)
      *a2 = (*(double (**)(_QWORD))(*(_QWORD *)v6 + 56))(*(_QWORD *)(a1 + 40));
    if (a3)
      *a3 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    if (a4)
      *a4 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  }
}

CGRect CTRunGetImageBounds(CTRunRef run, CGContextRef context, CFRange range)
{
  CFIndex location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v11;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  CFIndex length;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double *v31;
  double x;
  double v33;
  CGFloat y;
  double v35;
  CGFloat width;
  double v37;
  CGFloat height;
  CGPoint TextPosition;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  CGRect v47;
  CGRect v48;
  CGRect result;

  if (!run)
    goto LABEL_56;
  location = range.location;
  v5 = *((_QWORD *)run + 5);
  if ((*(_BYTE *)(v5 + 225) & 8) != 0)
  {
    v7 = *(_QWORD *)(v5 + 264);
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 216) + 16);
    v9 = *(_QWORD *)(v5 + 200);
    v6 = *(_QWORD *)(v5 + 208);
    if (v6 < 1 || range.location < 1)
    {
      location = 0;
    }
    else
    {
      v11 = range.location;
      location = 0;
      do
      {
        v13 = v7 == location || *(__int16 *)(v8 + 2 * v9 + 2 * location) != -1;
        if (++location >= v6)
          break;
        v11 -= v13;
      }
      while (v11);
    }
    if (range.length)
    {
      v14 = 0;
      if (v6 > location && range.length >= 1)
      {
        v14 = 0;
        v15 = v7 - location;
        v16 = v8 + 2 * location + 2 * v9;
        do
        {
          v18 = v15 == v14 || *(__int16 *)(v16 + 2 * v14) != -1;
          v19 = location + 1 + v14++;
          if (v19 >= v6)
            break;
          range.length -= v18;
        }
        while (range.length);
      }
    }
    else
    {
      v14 = v6 - location;
    }
    range.length = v14;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 208);
  }
  if (location < 0 || location + range.length > v6)
    goto LABEL_56;
  v20 = v6 - location;
  if (range.length)
    length = range.length;
  else
    length = v20;
  if (!length)
  {
    v40 = (double *)MEMORY[0x1E0C9D648];
LABEL_54:
    x = *v40;
    y = v40[1];
    width = v40[2];
    height = v40[3];
    goto LABEL_55;
  }
  v22 = *(_QWORD *)(v5 + 312);
  v23 = (double *)MEMORY[0x1E0C9D820];
  if (!v22)
    v22 = MEMORY[0x1E0C9D820];
  v24 = *(double *)v22;
  v45 = *(_QWORD *)(v22 + 8);
  v46 = v24;
  if (!dyld_program_sdk_at_least())
    goto LABEL_51;
  v25 = *(_QWORD *)(v5 + 272);
  if (!v25)
  {
LABEL_56:
    v40 = (double *)MEMORY[0x1E0C9D628];
    goto LABEL_54;
  }
  TLine::GetLeftHangersGlyphCountAndWidth(*(TLine **)(v5 + 272), 0);
  if (v26 != 0.0)
  {
    v24 = v24 - v26;
    v46 = v24;
  }
  v27 = *(_QWORD *)(v25 + 16);
  v28 = *(_QWORD *)(v25 + 24);
  while (v27 != v28)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v27 + 40);
    if (v29 == v5)
      break;
    v30 = *(double *)(v29 + 192);
    v31 = *(double **)(v29 + 312);
    if (!v31)
      v31 = v23;
    v24 = v24 + v30 + *v31;
    v46 = v24;
    v27 += 8;
  }
LABEL_51:
  x = (*(double (**)(uint64_t, CGContextRef, CFIndex, CFIndex, double *, uint64_t *))(*(_QWORD *)v5 + 104))(v5, context, location, length, &v46, &v45);
  y = v33;
  width = v35;
  height = v37;
  if (context)
  {
    TextPosition = CGContextGetTextPosition(context);
    v47.origin.x = x;
    v47.origin.y = y;
    v47.size.width = width;
    v47.size.height = height;
    v48 = CGRectOffset(v47, TextPosition.x, TextPosition.y);
    x = v48.origin.x;
    y = v48.origin.y;
    width = v48.size.width;
    height = v48.size.height;
  }
LABEL_55:
  v41 = x;
  v42 = y;
  v43 = width;
  v44 = height;
  result.size.height = v44;
  result.size.width = v43;
  result.origin.y = v42;
  result.origin.x = v41;
  return result;
}

double CTRunGetBackgroundBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t i;
  uint64_t v29;
  double v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double *v35;
  uint64_t v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  unint64_t v41;
  int *v42;
  int *inited;
  uint64_t v44;
  double *v45;
  double v46;
  double *v47;
  double *v48;
  double v50;
  double v51;
  double v52;

  if (!a1)
    return *MEMORY[0x1E0C9D628];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 272);
  if (!v4)
    return *MEMORY[0x1E0C9D628];
  v5 = a2;
  if ((*(_BYTE *)(v3 + 225) & 8) != 0)
  {
    v7 = *(_QWORD *)(v3 + 264);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 16);
    v9 = *(_QWORD *)(v3 + 200);
    v6 = *(_QWORD *)(v3 + 208);
    if (v6 < 1 || a2 < 1)
    {
      v5 = 0;
    }
    else
    {
      v11 = a2;
      v5 = 0;
      do
      {
        v13 = v7 == v5 || *(__int16 *)(v8 + 2 * v9 + 2 * v5) != -1;
        if (++v5 >= v6)
          break;
        v11 -= v13;
      }
      while (v11);
    }
    if (a3)
    {
      v14 = 0;
      if (v6 > v5 && a3 >= 1)
      {
        v14 = 0;
        v15 = v7 - v5;
        v16 = v8 + 2 * v5 + 2 * v9;
        do
        {
          v18 = v15 == v14 || *(__int16 *)(v16 + 2 * v14) != -1;
          v19 = v5 + 1 + v14++;
          if (v19 >= v6)
            break;
          a3 -= v18;
        }
        while (a3);
      }
    }
    else
    {
      v14 = v6 - v5;
    }
    a3 = v14;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 208);
  }
  if (v5 < 0 || v5 + a3 > v6)
    return *MEMORY[0x1E0C9D628];
  v20 = v6 - v5;
  if (a3)
    v21 = a3;
  else
    v21 = v20;
  v22 = *(double **)(v3 + 312);
  v23 = (double *)MEMORY[0x1E0C9D820];
  if (!v22)
    v22 = (double *)MEMORY[0x1E0C9D820];
  v24 = *v22;
  TLine::GetLeftHangersGlyphCountAndWidth(*(TLine **)(v3 + 272), 0);
  v26 = v25;
  if (v25 == 0.0)
    v26 = 0.0;
  v27 = v24 - v26;
  for (i = *(_QWORD *)(v4 + 16); i != *(_QWORD *)(v4 + 24); i += 8)
  {
    v29 = *(_QWORD *)(*(_QWORD *)i + 40);
    if (v29 == v3)
      break;
    v30 = *(double *)(v29 + 192);
    v31 = *(double **)(v29 + 312);
    if (!v31)
      v31 = v23;
    v27 = v27 + v30 + *v31;
  }
  v32 = *(_QWORD *)(v3 + 216);
  v33 = *(_QWORD *)(v32 + 32);
  if (v33 || (v36 = *(_QWORD *)(v32 + 24)) == 0)
  {
    v34 = 0;
    v35 = (double *)(v33 + 16 * *(_QWORD *)(v3 + 200));
  }
  else
  {
    v35 = (double *)(v36 + 8 * *(_QWORD *)(v3 + 200));
    v34 = 1;
  }
  if (v5 >= 1)
  {
    v37 = v35;
    v38 = v35;
    v39 = v5;
    do
    {
      if (v34)
        v40 = v37;
      else
        v40 = v38;
      v27 = v27 + *v40;
      v38 += 2;
      ++v37;
      --v39;
    }
    while (v39);
  }
  v41 = atomic_load((unint64_t *)(v3 + 56));
  v42 = *(int **)(v41 + 40);
  v51 = NAN;
  v52 = NAN;
  if ((*(_WORD *)(v4 + 154) & 0x100) != 0)
  {
    inited = v42 + 12;
    if (!v42[12])
      inited = TFont::InitStrikeMetrics((TFont *)v42);
    v52 = *((double *)inited + 1);
    if (!v42[12])
      TFont::InitStrikeMetrics((TFont *)v42);
  }
  else
  {
    TFont::GetDefaultMetrics((TFont *)v42, &v52, &v51, &v50);
    TFont::GetWindowsDescent((uint64_t)v42);
  }
  TRun::GetCrossStreamMinMax((TRun *)v3);
  if (v21 >= 1)
  {
    v44 = v21 + v5;
    v45 = &v35[2 * v5];
    v46 = 0.0;
    v47 = &v35[v5];
    do
    {
      if (v34)
        v48 = v47;
      else
        v48 = v45;
      v46 = v46 + *v48;
      ++v5;
      v45 += 2;
      ++v47;
    }
    while (v5 < v44);
  }
  return v27;
}

void CTRunDraw(CTRunRef run, CGContextRef context, CFRange range)
{
  CFIndex length;
  CFIndex location;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  CFIndex v12;
  uint64_t v14;
  CFIndex v15;
  unint64_t v16;
  CFIndex v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 Positions;
  CGPoint TextPosition;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  CFRange v33;
  CFRange v34;

  if (run)
  {
    length = range.length;
    location = range.location;
    v6 = (__n128 *)*((_QWORD *)run + 5);
    if ((v6[14].n128_u8[1] & 8) != 0)
    {
      v8 = v6[16].n128_u64[1];
      v7 = v6[13].n128_i64[0];
      v9 = *(_QWORD *)(v6[13].n128_u64[1] + 16);
      v10 = v6[12].n128_u64[1];
      if (v7 < 1 || range.location < 1)
      {
        location = 0;
      }
      else
      {
        v12 = range.location;
        location = 0;
        do
        {
          v14 = v8 == location || *(__int16 *)(v9 + 2 * v10 + 2 * location) != -1;
          if (++location >= v7)
            break;
          v12 -= v14;
        }
        while (v12);
      }
      if (range.length)
      {
        v15 = 0;
        if (v7 > location && range.length >= 1)
        {
          v15 = 0;
          v16 = v8 - location;
          v17 = v9 + 2 * location + 2 * v10;
          do
          {
            v19 = v16 == v15 || *(__int16 *)(v17 + 2 * v15) != -1;
            v20 = location + 1 + v15++;
            if (v20 >= v7)
              break;
            length -= v19;
          }
          while (length);
        }
      }
      else
      {
        v15 = v7 - location;
      }
      length = v15;
    }
    else
    {
      v7 = v6[13].n128_i64[0];
    }
    if ((location & 0x8000000000000000) == 0 && location + length <= v7)
    {
      Positions = TRun::GetPositions((__n128 *)*((_QWORD *)run + 5), 0);
      if (v21)
      {
        if (!length)
          length = v7 - location;
        v27 = 0xAAAAAAAAAAAAAA01;
        *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAA00;
        (*(void (**)(__n128 *, CGContextRef, CFIndex, CFIndex, uint64_t, __int128 *, __n128))(v6->n128_u64[0] + 40))(v6, context, location, length, v21, &v27, Positions);
        if ((dyld_program_sdk_at_least() & 1) == 0)
        {
          TextPosition = CGContextGetTextPosition(context);
          v24 = v6[11].n128_u8[1];
          if ((v24 & 4) != 0)
          {
            v25 = 0;
            v26 = 0;
            v29 = xmmword_18494CCB8;
            v30 = unk_18494CCC8;
            v31 = xmmword_18494CCD8;
            v32 = -1;
            v27 = __const__ZN10TDecorator14DrawDecorationEP9CGContextRK4TRun7CFRange7CGPoint_c;
            v28 = unk_18494CCA8;
            TLineDrawContext::TLineDrawContext((TLineDrawContext *)&v27, context);
            v33.location = location;
            v33.length = length;
            TDecorator::DrawDecoration((TDecorator *)&v25, (const TLineDrawContext *)&v27, v6, v33, TextPosition);
            v24 = v6[11].n128_u8[1];
          }
          if ((v24 & 0x10) != 0)
          {
            v25 = 1;
            v26 = 0;
            v29 = xmmword_18494CCB8;
            v30 = unk_18494CCC8;
            v31 = xmmword_18494CCD8;
            v32 = -1;
            v27 = __const__ZN10TDecorator14DrawDecorationEP9CGContextRK4TRun7CFRange7CGPoint_c;
            v28 = unk_18494CCA8;
            TLineDrawContext::TLineDrawContext((TLineDrawContext *)&v27, context);
            v34.location = location;
            v34.length = length;
            TDecorator::DrawDecoration((TDecorator *)&v25, (const TLineDrawContext *)&v27, v6, v34, TextPosition);
          }
        }
      }
    }
  }
}

void CTRunDrawDecorations(uint64_t a1, CGContextRef c, uint64_t a3, uint64_t a4)
{
  CFIndex v4;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  CFIndex v17;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  CGPoint TextPosition;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  CFRange v33;
  CFRange v34;

  if (a1)
  {
    v4 = a3;
    v6 = *(__n128 **)(a1 + 40);
    if ((v6[14].n128_u8[1] & 8) != 0)
    {
      v8 = v6[16].n128_u64[1];
      v9 = *(_QWORD *)(v6[13].n128_u64[1] + 16);
      v10 = v6[12].n128_u64[1];
      v7 = v6[13].n128_i64[0];
      if (v7 < 1 || a3 < 1)
      {
        v4 = 0;
      }
      else
      {
        v12 = a3;
        v4 = 0;
        do
        {
          v14 = v8 == v4 || *(__int16 *)(v9 + 2 * v10 + 2 * v4) != -1;
          if (++v4 >= v7)
            break;
          v12 -= v14;
        }
        while (v12);
      }
      if (a4)
      {
        v15 = 0;
        if (v7 > v4 && a4 >= 1)
        {
          v15 = 0;
          v16 = v8 - v4;
          v17 = v9 + 2 * v4 + 2 * v10;
          do
          {
            v19 = v16 == v15 || *(__int16 *)(v17 + 2 * v15) != -1;
            v20 = v4 + 1 + v15++;
            if (v20 >= v7)
              break;
            a4 -= v19;
          }
          while (a4);
        }
      }
      else
      {
        v15 = v7 - v4;
      }
      a4 = v15;
    }
    else
    {
      v7 = v6[13].n128_i64[0];
    }
    if ((v4 & 0x8000000000000000) == 0 && v4 + a4 <= v7)
    {
      v21 = v7 - v4;
      if (a4)
        v22 = a4;
      else
        v22 = v21;
      TextPosition = CGContextGetTextPosition(c);
      v24 = v6[11].n128_u8[1];
      if ((v24 & 4) != 0)
      {
        v25 = 0;
        v26 = 0;
        v29 = xmmword_18494CCB8;
        v30 = unk_18494CCC8;
        v31 = xmmword_18494CCD8;
        v32 = -1;
        v27 = __const__ZN10TDecorator14DrawDecorationEP9CGContextRK4TRun7CFRange7CGPoint_c;
        v28 = unk_18494CCA8;
        TLineDrawContext::TLineDrawContext((TLineDrawContext *)&v27, c);
        v33.location = v4;
        v33.length = v22;
        TDecorator::DrawDecoration((TDecorator *)&v25, (const TLineDrawContext *)&v27, v6, v33, TextPosition);
        v24 = v6[11].n128_u8[1];
      }
      if ((v24 & 0x10) != 0)
      {
        v25 = 1;
        v26 = 0;
        v29 = xmmword_18494CCB8;
        v30 = unk_18494CCC8;
        v31 = xmmword_18494CCD8;
        v32 = -1;
        v27 = __const__ZN10TDecorator14DrawDecorationEP9CGContextRK4TRun7CFRange7CGPoint_c;
        v28 = unk_18494CCA8;
        TLineDrawContext::TLineDrawContext((TLineDrawContext *)&v27, c);
        v34.location = v4;
        v34.length = v22;
        TDecorator::DrawDecoration((TDecorator *)&v25, (const TLineDrawContext *)&v27, v6, v34, TextPosition);
      }
    }
  }
}

double CTRunGetInitialBaseAdvance(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C9D820];
  if (a1 && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 312))
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 312);
  return *(double *)v1;
}

_QWORD *CTRunGetAttachmentCounts(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v4 = a4;
    if (a4)
    {
      v5 = a2;
      v6 = result[5];
      if ((*(_BYTE *)(v6 + 225) & 8) != 0)
      {
        v10 = *(_QWORD *)(v6 + 264);
        v22[0] = &off_1E15DCA10;
        v22[1] = a4;
        v22[2] = v6 + 192;
        v23 = v22;
        v11 = *(_QWORD *)(v6 + 208);
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 216) + 16) + 2 * *(_QWORD *)(v6 + 200);
        if (a3)
          v13 = a3;
        else
          v13 = v11;
        v14 = 0;
        if (v11 >= 1 && a2 >= 1)
        {
          v16 = 0;
          do
          {
            if (v10 == v14 || *(__int16 *)(v12 + 2 * v14) != -1)
              ++v16;
            ++v14;
          }
          while (v14 < v11 && v16 < a2);
        }
        result = v22;
        v18 = 4;
        if (v14 < v11 && v13 >= 1)
        {
          v19 = 0;
          do
          {
            if (v10 == v14 || *(unsigned __int16 *)(v12 + 2 * v14) != 0xFFFF)
            {
              v20 = v19;
              v21 = v14;
              if (!v23)
                std::__throw_bad_function_call[abi:nn180100]();
              (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v23 + 48))(v23, &v21, &v20);
              ++v19;
            }
            ++v14;
          }
          while (v14 < v11 && v19 < v13);
          result = v23;
          if (v23 == v22)
          {
            v18 = 4;
            result = v22;
          }
          else
          {
            if (!v23)
              return result;
            v18 = 5;
          }
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
      }
      else if ((a2 & 0x8000000000000000) == 0)
      {
        v7 = *(_QWORD *)(v6 + 208);
        if (a2 + a3 <= v7)
        {
          v8 = v7 - a2;
          if (a3)
            v9 = a3;
          else
            v9 = v8;
          if (v9 >= 1)
          {
            do
            {
              result = (_QWORD *)objc_msgSend(*(id *)(v6 + 216), "attachmentCountAtIndex:", v5 + *(_QWORD *)(v6 + 200));
              *v4++ = result;
              ++v5;
              --v9;
            }
            while (v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t CTRunGetAttachmentCountsPtr(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 40);
    if ((*(_BYTE *)(v1 + 225) & 2) != 0)
      return *(_QWORD *)(*(_QWORD *)(v1 + 216) + 56);
    else
      return 0;
  }
  return result;
}

uint64_t CTRunGetPropertiesPtr(uint64_t a1)
{
  uint64_t v1;
  const UInt8 *BytePtr;
  uint64_t NonDeletedGlyphCount;
  __CFData *Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(v1 + 225) & 8) == 0)
    return *(_QWORD *)(*(_QWORD *)(v1 + 216) + 40) + 4 * *(_QWORD *)(v1 + 200);
  NonDeletedGlyphCount = TRun::GetNonDeletedGlyphCount(*(TRun **)(a1 + 40));
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  BytePtr = (const UInt8 *)Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 4 * NonDeletedGlyphCount);
    CFAutorelease(BytePtr);
    BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
    v6 = *(_QWORD *)(v1 + 208);
    v5 = *(_QWORD *)(v1 + 216);
    v7 = *(_QWORD *)(v1 + 200);
    v8 = *(_QWORD *)(v5 + 40) + 4 * v7;
    v9 = *(_QWORD *)(v1 + 264);
    v19[0] = &off_1E15DF0E0;
    v19[1] = BytePtr;
    v10 = v19;
    v19[2] = v8;
    v20 = v19;
    if (!NonDeletedGlyphCount)
      NonDeletedGlyphCount = v6;
    if (v6 < 1 || NonDeletedGlyphCount < 1)
    {
      v12 = 4;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)(v5 + 16) + 2 * v7;
      do
      {
        if (v9 == v14 || *(unsigned __int16 *)(v15 + 2 * v14) != 0xFFFF)
        {
          v17 = v13;
          v18 = v14;
          if (!v20)
            std::__throw_bad_function_call[abi:nn180100]();
          (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v20 + 48))(v20, &v18, &v17);
          ++v13;
        }
        ++v14;
      }
      while (v14 < v6 && v13 < NonDeletedGlyphCount);
      v10 = v20;
      if (v20 == v19)
      {
        v12 = 4;
        v10 = v19;
      }
      else
      {
        if (!v20)
          return (uint64_t)BytePtr;
        v12 = 5;
      }
    }
    (*(void (**)(void))(*v10 + 8 * v12))();
  }
  return (uint64_t)BytePtr;
}

void CTRunGetBaseAdvancesAndOrigins(CTRunRef runRef, CFRange range, CGSize *advancesBuffer, CGPoint *originsBuffer)
{
  CFIndex length;
  CFIndex location;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v21;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFIndex v29;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFIndex v36;
  CFIndex v38;
  uint64_t v39;
  CFIndex v40;
  uint64_t v41;

  if (runRef)
  {
    length = range.length;
    location = range.location;
    v8 = *((_QWORD *)runRef + 5);
    v9 = *(_QWORD **)(v8 + 216);
    v10 = v9[4];
    if (v10 || (v14 = v9[3]) == 0)
    {
      v11 = *(_QWORD *)(v8 + 200);
      v12 = v10 + 16 * v11;
      v13 = 2;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 200);
      v12 = v14 + 8 * v11;
      v13 = 1;
    }
    v39 = v13;
    if (advancesBuffer && originsBuffer)
    {
      v15 = *(_QWORD *)(v8 + 264);
      if ((*(_BYTE *)(v8 + 225) & 0x10) != 0)
      {
        v16 = operator new(0x30uLL);
        *v16 = &off_1E15DF368;
        v16[1] = advancesBuffer;
        v16[2] = v39;
        v16[3] = v12;
        v16[4] = originsBuffer;
        v16[5] = v8 + 192;
        v32 = *(_QWORD *)(v8 + 208);
        v33 = v9[2] + 2 * v11;
        if (!length)
          length = *(_QWORD *)(v8 + 208);
        v34 = 0;
        if (v32 >= 1 && location >= 1)
        {
          v36 = 0;
          do
          {
            if (v15 == v34 || *(__int16 *)(v33 + 2 * v34) != -1)
              ++v36;
            ++v34;
          }
          while (v34 < v32 && v36 < location);
        }
        if (v34 < v32 && length >= 1)
        {
          v38 = 0;
          do
          {
            if (v15 == v34 || *(unsigned __int16 *)(v33 + 2 * v34) != 0xFFFF)
            {
              v40 = v38;
              v41 = v34;
              (*(void (**)(_QWORD *, uint64_t *, CFIndex *))(*v16 + 48))(v16, &v41, &v40);
              ++v38;
            }
            ++v34;
          }
          while (v34 < v32 && v38 < length);
        }
      }
      else
      {
        v16 = operator new(0x28uLL);
        *v16 = &off_1E15DF3B0;
        v16[1] = advancesBuffer;
        v16[2] = v39;
        v16[3] = v12;
        v16[4] = originsBuffer;
        v17 = *(_QWORD *)(v8 + 208);
        v18 = v9[2] + 2 * v11;
        if (!length)
          length = *(_QWORD *)(v8 + 208);
        v19 = 0;
        if (v17 >= 1 && location >= 1)
        {
          v21 = 0;
          do
          {
            if (v15 == v19 || *(__int16 *)(v18 + 2 * v19) != -1)
              ++v21;
            ++v19;
          }
          while (v19 < v17 && v21 < location);
        }
        if (v19 < v17 && length >= 1)
        {
          v23 = 0;
          do
          {
            if (v15 == v19 || *(unsigned __int16 *)(v18 + 2 * v19) != 0xFFFF)
            {
              v40 = v23;
              v41 = v19;
              (*(void (**)(_QWORD *, uint64_t *, CFIndex *))(*v16 + 48))(v16, &v41, &v40);
              ++v23;
            }
            ++v19;
          }
          while (v19 < v17 && v23 < length);
        }
      }
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 264);
      v16 = operator new(0x30uLL);
      *v16 = &off_1E15DF3F8;
      v16[1] = advancesBuffer;
      v16[2] = v39;
      v16[3] = v12;
      v16[4] = originsBuffer;
      v16[5] = v8 + 192;
      v25 = *(_QWORD *)(v8 + 208);
      v26 = v9[2] + 2 * v11;
      if (!length)
        length = *(_QWORD *)(v8 + 208);
      v27 = 0;
      if (v25 >= 1 && location >= 1)
      {
        v29 = 0;
        do
        {
          if (v24 == v27 || *(__int16 *)(v26 + 2 * v27) != -1)
            ++v29;
          ++v27;
        }
        while (v27 < v25 && v29 < location);
      }
      if (v27 < v25 && length >= 1)
      {
        v31 = 0;
        do
        {
          if (v24 == v27 || *(unsigned __int16 *)(v26 + 2 * v27) != 0xFFFF)
          {
            v40 = v31;
            v41 = v27;
            (*(void (**)(_QWORD *, uint64_t *, CFIndex *))(*v16 + 48))(v16, &v41, &v40);
            ++v31;
          }
          ++v27;
        }
        while (v27 < v25 && v31 < length);
      }
    }
    (*(void (**)(_QWORD *))(*v16 + 40))(v16);
  }
}

double CTRunSyncWithStorage(uint64_t a1)
{
  double result;

  if (a1)
    return TStorageRange::SyncWithStorage((TStorageRange *)(*(_QWORD *)(a1 + 48) + 192));
  return result;
}

CGAffineTransform *__cdecl CTRunGetTextMatrix(CGAffineTransform *__return_ptr retstr, CGAffineTransform *run)
{
  _OWORD *v2;
  CGFloat ty;
  __int128 v4;

  v2 = (_OWORD *)MEMORY[0x1E0C9BAA8];
  if (run)
  {
    ty = run->ty;
    if (*(_BYTE *)(*(_QWORD *)&ty + 144))
      v2 = (_OWORD *)(*(_QWORD *)&ty + 96);
  }
  v4 = v2[1];
  *(_OWORD *)&retstr->a = *v2;
  *(_OWORD *)&retstr->c = v4;
  *(_OWORD *)&retstr->tx = v2[2];
  return run;
}

unint64_t CTRunCopyRubyAnnotationLineForPosition(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(a1 + 40) + 136))(&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

unint64_t CTRunCopyEncapsulationPath(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(a1 + 40) + 128))(&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

void std::__function::__func<CTRunGetGlyphs::$_0,std::allocator<CTRunGetGlyphs::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetGlyphs::$_0,std::allocator<CTRunGetGlyphs::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DEF78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetGlyphs::$_0,std::allocator<CTRunGetGlyphs::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DEF78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<CTRunGetAdvances::$_1,std::allocator<CTRunGetAdvances::$_1>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetAdvances::$_1,std::allocator<CTRunGetAdvances::$_1>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15DEFC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetAdvances::$_1,std::allocator<CTRunGetAdvances::$_1>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DEFC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<CTRunGetAdvances::$_1,std::allocator<CTRunGetAdvances::$_1>,void ()(long,long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  double result;
  double v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double *v20;
  double v21;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v7 = (uint64_t *)(v6 + 8 * v4);
    v8 = 0;
  }
  else
  {
    v7 = (uint64_t *)(v6 + 16 * v4);
    v8 = v7[1];
  }
  v9 = *v7;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v5);
  *v10 = v9;
  v10[1] = v8;
  v11 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v11 + 33) & 0x10) != 0)
  {
    objc_msgSend(*(id *)(v11 + 24), "originAtIndex:", *(_QWORD *)(v11 + 8) + v4);
    v12 = *MEMORY[0x1E0C9D538];
    v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  else
  {
    v12 = *MEMORY[0x1E0C9D538];
    v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    result = *MEMORY[0x1E0C9D538];
    v15 = v13;
  }
  if (result != v12 || v15 != v13)
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (v5 >= 1)
    {
      v18 = v17 + 16 * v5;
      v19 = v15 + *(double *)(v18 - 8);
      *(double *)(v18 - 16) = result + *(double *)(v18 - 16);
      *(double *)(v18 - 8) = v19;
    }
    v20 = (double *)(v17 + 16 * v5);
    result = *v20 - result;
    v21 = v20[1] - v15;
    *v20 = result;
    v20[1] = v21;
  }
  return result;
}

void std::__function::__func<CTRunGetPositions::$_0,std::allocator<CTRunGetPositions::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetPositions::$_0,std::allocator<CTRunGetPositions::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF050;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetPositions::$_0,std::allocator<CTRunGetPositions::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF050;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetPositions::$_0,std::allocator<CTRunGetPositions::$_0>,void ()(long,long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a1 + 16) + 16 * *a2);
  *(__n128 *)(*(_QWORD *)(a1 + 8) + 16 * *a3) = result;
  return result;
}

void std::__function::__func<CTRunGetStringIndices::$_0,std::allocator<CTRunGetStringIndices::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetStringIndices::$_0,std::allocator<CTRunGetStringIndices::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetStringIndices::$_0,std::allocator<CTRunGetStringIndices::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetStringIndices::$_0,std::allocator<CTRunGetStringIndices::$_0>,void ()(long,long)>::operator()(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * *a3) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *a2);
  return result;
}

void std::__function::__func<CTRunGetAttachmentCounts::$_0,std::allocator<CTRunGetAttachmentCounts::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetAttachmentCounts::$_0,std::allocator<CTRunGetAttachmentCounts::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DCA10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetAttachmentCounts::$_0,std::allocator<CTRunGetAttachmentCounts::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DCA10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetAttachmentCounts::$_0,std::allocator<CTRunGetAttachmentCounts::$_0>,void ()(long,long)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a3;
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 24), "attachmentCountAtIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + *a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = result;
  return result;
}

void std::__function::__func<CTRunGetPropertiesPtr::$_0,std::allocator<CTRunGetPropertiesPtr::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetPropertiesPtr::$_0,std::allocator<CTRunGetPropertiesPtr::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF0E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetPropertiesPtr::$_0,std::allocator<CTRunGetPropertiesPtr::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF0E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetPropertiesPtr::$_0,std::allocator<CTRunGetPropertiesPtr::$_0>,void ()(long,long)>::operator()(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 4 * *a3) = *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * *a2);
  return result;
}

void std::__function::__func<CTRunGetStretchFactors::$_0,std::allocator<CTRunGetStretchFactors::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetStretchFactors::$_0,std::allocator<CTRunGetStretchFactors::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DC9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetStretchFactors::$_0,std::allocator<CTRunGetStretchFactors::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DC9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetStretchFactors::$_0,std::allocator<CTRunGetStretchFactors::$_0>,void ()(long,long)>::operator()(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 312);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 56), v4 == *(_QWORD *)(v3 + 64)))
    v5 = kUnitSize;
  else
    v5 = *(_OWORD *)(v4 + 16 * *a2);
  *(_OWORD *)(*(_QWORD *)(result + 16) + 16 * *a3) = v5;
  return result;
}

void std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_0,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_0>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_0,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_0>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15DF368;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_0,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_0>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15DF368;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_0,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_0>,void ()(long,long)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = result;
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(result + 16) == 1)
  {
    v7 = (uint64_t *)(v6 + 8 * v4);
    v8 = 0;
  }
  else
  {
    v7 = (uint64_t *)(v6 + 16 * v4);
    v8 = v7[1];
  }
  v9 = *v7;
  v10 = (_QWORD *)(*(_QWORD *)(result + 8) + 16 * v5);
  *v10 = v9;
  v10[1] = v8;
  v11 = *(_QWORD *)(result + 40);
  if ((*(_BYTE *)(v11 + 33) & 0x10) != 0)
  {
    result = objc_msgSend(*(id *)(v11 + 24), "originAtIndex:", *(_QWORD *)(v11 + 8) + v4);
  }
  else
  {
    v12 = *MEMORY[0x1E0C9D538];
    v13 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
  }
  v14 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 16 * v5);
  *v14 = v12;
  v14[1] = v13;
  return result;
}

void std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_1,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_1>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_1,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_1>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E15DF3B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_1,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_1>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF3B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_1,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_1>,void ()(long,long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __n128 result;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v6 = (uint64_t *)(v5 + 8 * v3);
    v7 = 0;
  }
  else
  {
    v6 = (uint64_t *)(v5 + 16 * v3);
    v7 = v6[1];
  }
  v8 = *v6;
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v4);
  *v9 = v8;
  v9[1] = v7;
  result = *(__n128 *)MEMORY[0x1E0C9D538];
  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v4) = *MEMORY[0x1E0C9D538];
  return result;
}

void std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_2,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_2>,void ()(long,long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_2,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_2>,void ()(long,long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E15DF3F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_2,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_2>,void ()(long,long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E15DF3F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTRunGetBaseAdvancesAndOrigins::$_2,std::allocator<CTRunGetBaseAdvancesAndOrigins::$_2>,void ()(long,long)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = result;
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(result + 24);
    if (*(_DWORD *)(result + 16) == 1)
    {
      v8 = (_QWORD *)(v7 + 8 * v4);
      v9 = 0;
    }
    else
    {
      v8 = (_QWORD *)(v7 + 16 * v4);
      v9 = v8[1];
    }
    v10 = (_QWORD *)(v6 + 16 * v5);
    *v10 = *v8;
    v10[1] = v9;
  }
  v11 = *(_QWORD *)(result + 32);
  if (v11)
  {
    v12 = *(_QWORD *)(result + 40);
    if ((*(_BYTE *)(v12 + 33) & 0x10) != 0)
    {
      result = objc_msgSend(*(id *)(v12 + 24), "originAtIndex:", *(_QWORD *)(v12 + 8) + v4);
      v11 = *(_QWORD *)(v3 + 32);
    }
    else
    {
      v13 = *MEMORY[0x1E0C9D538];
      v14 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
    }
    v15 = (_QWORD *)(v11 + 16 * v5);
    *v15 = v13;
    v15[1] = v14;
  }
  return result;
}

CFTypeID CTFrameGetTypeID(void)
{
  if (TCFBase<TFrame>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TFrame>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TFrame>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TFrame>::fTypeID;
}

CFRange CTFrameGetStringRange(CTFrameRef frame)
{
  uint64_t v1;
  CFIndex v2;
  CFRange result;

  if (frame)
  {
    v1 = *((_QWORD *)frame + 5);
    frame = *(CTFrameRef *)v1;
    v2 = *(_QWORD *)(v1 + 8);
  }
  else
  {
    v2 = 0;
  }
  result.length = v2;
  result.location = (CFIndex)frame;
  return result;
}

CFRange CTFrameGetVisibleStringRange(CTFrameRef frame)
{
  uint64_t v1;
  CFIndex v2;
  CFRange result;

  if (frame)
  {
    v1 = *((_QWORD *)frame + 5);
    frame = *(CTFrameRef *)(v1 + 16);
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = 0;
  }
  result.length = v2;
  result.location = (CFIndex)frame;
  return result;
}

unint64_t CTFrameCopyVisibleString(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  TFrame::CopyVisibleString(*(TFrame **)(a1 + 40), &v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFDictionaryRef CTFrameGetFrameAttributes(CFDictionaryRef frame)
{
  if (frame)
    return (CFDictionaryRef)atomic_load((unint64_t *)(*((_QWORD *)frame + 5) + 88));
  return frame;
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  if (frame)
  {
    if (context)
      TFrame::DrawFrame(*((TFrame **)frame + 5), context);
  }
}

uint64_t TCFBase<TFrame>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return TFrame::operator==(*(_QWORD *)(a1 + 40), *(unint64_t **)(a2 + 40));
}

_QWORD *TCFBase<TFrame>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

__CFString *TCFBase<TFrame>::ClassDebug(uint64_t a1)
{
  __CFString *result;
  __CFString *v3;
  CFStringRef v4;

  result = TFrame::DebugDescription(*(TFrame **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTFrame", a1, result);
    CFRelease(v3);
    return (__CFString *)v4;
  }
  return result;
}

void std::__destroy_at[abi:nn180100]<TFrame,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }

}

CFTypeID CTTypesetterGetTypeID(void)
{
  if (TCFBase<TTypesetter>::GetTypeID(void)::once != -1)
    dispatch_once_f(&TCFBase<TTypesetter>::GetTypeID(void)::once, 0, (dispatch_function_t)TCFBase<TTypesetter>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return TCFBase<TTypesetter>::fTypeID;
}

unint64_t CTTypesetterCreateWithUniCharProvider(const unsigned __int16 *(*a1)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a2)(const unsigned __int16 *, void *), void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  TTypesetterUniChar *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  id v13;
  id v14;
  id v15;

  if (!a1)
    return 0;
  v14 = (id)0xAAAAAAAAAAAAAAAALL;
  v6 = TCFBase<TTypesetter>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = (TTypesetterUniChar *)(v6 + 48);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = v8;
    TTypesetterUniChar::TTypesetterUniChar(v8, a1, a2, a3);
    v15 = v7;
    do
      v9 = (void *)__ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    v13 = v9;

  }
  else
  {
    v13 = 0;
  }
  do
    v10 = (void *)__ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));
  v14 = v10;

  do
    v11 = __ldaxr((unint64_t *)&v14);
  while (__stlxr(0, (unint64_t *)&v14));

  return v11;
}

unint64_t CTTypesetterCreateWithUniCharProviderAndOptions(const unsigned __int16 *(*a1)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a2)(const unsigned __int16 *, void *), void *a3, const __CFDictionary *a4)
{
  uint64_t v8;
  _QWORD *v9;
  TTypesetterUniChar *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v17;
  id v18;
  id v19;

  if (!a1)
    return 0;
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TTypesetter>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (TTypesetterUniChar *)(v8 + 48);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = v10;
    TTypesetterUniChar::TTypesetterUniChar(v10, a1, a2, a3, a4);
    v19 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v19);
    while (__stlxr(0, (unint64_t *)&v19));
    v17 = v11;

  }
  else
  {
    v17 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v17);
  while (__stlxr(0, (unint64_t *)&v17));
  v18 = v12;

  v13 = atomic_load((unint64_t *)&v18);
  if (v13 && (v14 = atomic_load((unint64_t *)&v18), *(_BYTE *)(*(_QWORD *)(v14 + 40) + 257)))
  {
    v15 = 0;
  }
  else
  {
    do
      v15 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
  }

  return v15;
}

BOOL TCFBase<TTypesetter>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

_QWORD *TCFBase<TTypesetter>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TCFBase<TTypesetter>::ClassDebug()
{
  return 0;
}

CFTypeID CTFramesetterGetTypeID(void)
{
  if (_MergedGlobals_8 != -1)
    dispatch_once_f(&_MergedGlobals_8, 0, (dispatch_function_t)TCFBase<TFramesetter>::GetTypeID(void)::{lambda(void *)#1}::__invoke);
  return qword_1ECDE74B0;
}

CTFramesetterRef CTFramesetterCreateWithTypesetter(CTTypesetterRef typesetter)
{
  CTTypesetterRef v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  id v7;
  id v8;
  id v9;

  v1 = typesetter;
  if (typesetter)
  {
    v8 = (id)0xAAAAAAAAAAAAAAAALL;
    v2 = (_QWORD *)TCFBase<TFramesetter>::Allocate();
    if (v2)
    {
      v3 = v2;
      v2[2] = 0;
      v2[3] = 0;
      v2[6] = &off_1E15DD968;
      v2[4] = 0;
      v2[5] = v2 + 6;
      v2[7] = v1;
      v9 = v3;
      do
        v4 = (void *)__ldaxr((unint64_t *)&v9);
      while (__stlxr(0, (unint64_t *)&v9));
      v7 = v4;

    }
    else
    {
      v7 = 0;
    }
    do
      v5 = (void *)__ldaxr((unint64_t *)&v7);
    while (__stlxr(0, (unint64_t *)&v7));
    v8 = v5;

    do
      v1 = (CTTypesetterRef)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));

  }
  return v1;
}

unint64_t CTFramesetterCreateWithUniCharProvider(const unsigned __int16 *(*a1)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a2)(const unsigned __int16 *, void *), void *a3)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  id v12;
  id v13;
  id v14;

  if (!a1)
    return 0;
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  v6 = (_QWORD *)TCFBase<TFramesetter>::Allocate();
  if (v6)
  {
    v7 = v6;
    v6[2] = 0;
    v6[3] = 0;
    v6[6] = &off_1E15DDCD8;
    v6[4] = 0;
    v6[5] = v6 + 6;
    TTypesetterUniChar::TTypesetterUniChar((TTypesetterUniChar *)(v6 + 7), a1, a2, a3);
    v14 = v7;
    do
      v8 = (void *)__ldaxr((unint64_t *)&v14);
    while (__stlxr(0, (unint64_t *)&v14));
    v12 = v8;

  }
  else
  {
    v12 = 0;
  }
  do
    v9 = (void *)__ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));
  v13 = v9;

  do
    v10 = __ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));

  return v10;
}

CTTypesetterRef CTFramesetterGetTypesetter(CTTypesetterRef framesetter)
{
  if (framesetter)
    return (CTTypesetterRef)(*(uint64_t (**)(_QWORD))(**((_QWORD **)framesetter + 5) + 24))(*((_QWORD *)framesetter + 5));
  return framesetter;
}

BOOL TCFBase<TFramesetter>::ClassEqual(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

_QWORD *TCFBase<TFramesetter>::ClassHash(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _QWORD *v6;

  v1 = result[3];
  v2 = result[4];
  if (v2)
    v3 = (result[4] & 1 | v1) == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (v1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (_QWORD *)(result[5] + (v2 >> 1));
    if ((v2 & 1) != 0)
      v1 = *(_QWORD *)(*v6 + v1);
    return (_QWORD *)((uint64_t (*)(_QWORD *))v1)(v6);
  }
  return result;
}

uint64_t TCFBase<TFramesetter>::ClassDebug()
{
  return 0;
}

void TFramesetter::FrameInPath(TFramesetter *this, TFrame *a2, CFRange a3)
{
  uint64_t length;
  CFIndex location;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  const __CFArray *v10;
  BOOL v11;
  int v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  double Width;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t *v23;
  char *v24;
  CFIndex v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  TFramesetter::TPathFrameLinesetter *v32;
  char *v33;
  CFIndex v34;
  _QWORD *v35;
  uint64_t v36;
  const __CFArray *v37;
  uint64_t Count;
  uint64_t v39;
  const __CFArray *v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  const __CFBitVector *v52;
  CFMutableBitVectorRef Mutable;
  void *v55;
  __CFBitVector *v56;
  CFIndex i;
  __CFBitVector *v58;
  CFBit BitAtIndex;
  double v60;
  void *v61;
  const __CFAllocator *allocator;
  double v63;
  __CFArray *theArray;
  int v65;
  int v66;
  CGPath *v67;
  double v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  BOOL IsParagraphSeparator;
  const TAttributes *v75;
  unsigned int v76;
  char v77;
  double v78;
  double v79;
  double v80;
  char v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  id v91;
  char *v92;
  char *v93;
  char *v94;
  _BYTE v95[24];
  _BYTE *v96;
  _BYTE v97[24];
  _BYTE *v98;
  _OWORD v99[13];
  uint64_t v100;
  CFRange v101;
  CFRange v102;
  CFRange v103;
  CGRect v104;
  CGRect v105;

  length = a3.length;
  location = a3.location;
  v100 = *MEMORY[0x1E0C80C00];
  v76 = *((_DWORD *)a2 + 36);
  v6 = v76 != 0;
  v7 = (*(uint64_t (**)(TFramesetter *))(*(_QWORD *)this + 16))(this);
  v8 = atomic_load((unint64_t *)a2 + 10);
  v67 = (CGPath *)v8;
  v69 = *((double *)a2 + 5);
  v66 = *((_DWORD *)a2 + 9);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v99[11] = v9;
  v99[12] = v9;
  v99[9] = v9;
  v99[10] = v9;
  v99[7] = v9;
  v99[8] = v9;
  v99[5] = v9;
  v99[6] = v9;
  v99[3] = v9;
  v99[4] = v9;
  v99[1] = v9;
  v99[2] = v9;
  v99[0] = v9;
  v10 = (const __CFArray *)atomic_load((unint64_t *)a2 + 12);
  TClippingPathInfo::TClippingPathInfo((TClippingPathInfo *)v99, v10, v6);
  v72 = *((double *)a2 + 7);
  v73 = *((double *)a2 + 6);
  v70 = *((double *)a2 + 9);
  v71 = *((double *)a2 + 8);
  if (location)
    IsParagraphSeparator = TCharStream::IsParagraphSeparator(*(TCharStream **)v7, location - 1);
  else
    IsParagraphSeparator = 1;
  if (v76)
    v11 = 1;
  else
    v11 = *((_BYTE *)a2 + 162) == 0;
  v12 = !v11;
  v65 = v12;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v91 = 0;
  v14 = v72;
  v13 = v73;
  v16 = v70;
  v15 = v71;
  if (v76)
    Width = CGRectGetWidth(*(CGRect *)&v13);
  else
    Width = CGRectGetHeight(*(CGRect *)&v13);
  v63 = Width;
  if (length >= 1)
  {
    if (v76 <= 1)
      v18 = Width - v69 * 0.5;
    else
      v18 = v69 * 0.5;
    if (*(_QWORD *)(v7 + 24) == *(_QWORD *)(v7 + 16))
      v75 = 0;
    else
      v75 = (const TAttributes *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16)
                                                        + 8 * TLine::FindRunWithCharIndex((TLine *)v7, location, 1))
                                            + 40)
                                + 40);
    TFramesetter::GetCharMetricsForLine((TFramesetter *)&v84, (uint64_t)this, location, location, (const void *)1, IsParagraphSeparator, v65);
    v19 = v85;
    v20 = v86;
    v88 = v86;
    v89 = v85;
    v21 = v84 + v87;
    v90 = v21;
    v83 = v85;
    v84 = v84 + v87;
    v82 = v86;
    v81 = 0;
    v22 = v18 - v21 - v85;
    v23 = (unint64_t *)operator new();
    v104.size.height = v70;
    v104.origin.y = v72;
    v104.origin.x = v73;
    v104.size.width = v71;
    v102.location = location;
    v102.length = length;
    TFramesetter::TPathFrameLinesetter::TPathFrameLinesetter((TFramesetter::TPathFrameLinesetter *)v23, this, v67, v69, v66 == 0, (const TClippingPathInfo *)v99, v65, v104, v18, v22, v102, v75, 1, IsParagraphSeparator, v76 != 0);
    v24 = (char *)operator new(0x50uLL);
    *(_QWORD *)v24 = &off_1E15E07A8;
    *((_QWORD *)v24 + 1) = this;
    *((_QWORD *)v24 + 2) = &v84;
    *((_QWORD *)v24 + 3) = &v83;
    *((_QWORD *)v24 + 4) = &v82;
    *((_QWORD *)v24 + 5) = location;
    v24[48] = 1;
    v24[49] = IsParagraphSeparator;
    v24[50] = v65;
    *(_DWORD *)(v24 + 51) = -1431655766;
    v24[55] = -86;
    *((double *)v24 + 7) = v21;
    *((double *)v24 + 8) = v19;
    *((double *)v24 + 9) = v20;
    v98 = v24;
    v25 = TFramesetter::TPathFrameLinesetter::LayoutLines(v23, (uint64_t)v97, &v81, &v90, &v89, &v88);
    v26 = v98;
    if (v98 == v97)
    {
      v26 = v97;
      v27 = 4;
    }
    else
    {
      if (!v98)
        goto LABEL_25;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_25:
    if (!v25)
    {
      v89 = v19;
      v90 = v21;
      v88 = v20;
    }
    if ((v81 & 0x20) != 0)
    {
      v29 = v83;
      v28 = v84;
      v79 = v83;
      v80 = v84;
      v30 = v82;
      v78 = v82;
      v77 = 0;
      v31 = v18 - v84 - v83;
      v32 = (TFramesetter::TPathFrameLinesetter *)operator new();
      v105.size.height = v70;
      v105.origin.y = v72;
      v105.origin.x = v73;
      v105.size.width = v71;
      v103.location = location;
      v103.length = length;
      TFramesetter::TPathFrameLinesetter::TPathFrameLinesetter(v32, this, v67, v69, v66 == 0, (const TClippingPathInfo *)v99, v65, v105, v18, v31, v103, v75, 1, IsParagraphSeparator, v76 != 0);
      v33 = (char *)operator new(0x50uLL);
      *(_QWORD *)v33 = &off_1E15E07F0;
      *((_QWORD *)v33 + 1) = this;
      *((_QWORD *)v33 + 2) = &v84;
      *((_QWORD *)v33 + 3) = &v83;
      *((_QWORD *)v33 + 4) = &v82;
      *((_QWORD *)v33 + 5) = location;
      v33[48] = 1;
      v33[49] = IsParagraphSeparator;
      v33[50] = v65;
      *(_DWORD *)(v33 + 51) = -1431655766;
      v33[55] = -86;
      *((double *)v33 + 7) = v28;
      *((double *)v33 + 8) = v29;
      *((double *)v33 + 9) = v30;
      v96 = v33;
      v34 = TFramesetter::TPathFrameLinesetter::LayoutLines(v32, (uint64_t)v95, &v77, &v80, &v79, &v78);
      v35 = v96;
      if (v96 == v95)
      {
        v35 = v95;
        v36 = 4;
      }
      else
      {
        if (!v96)
          goto LABEL_33;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_33:
      if (v34 > v25)
        std::default_delete<TFramesetter::TPathFrameLinesetter>::operator()[abi:nn180100]((uint64_t)v23);
      std::default_delete<TFramesetter::TPathFrameLinesetter>::operator()[abi:nn180100]((uint64_t)v32);
    }
    v37 = (const __CFArray *)atomic_load(v23 + 15);
    Count = CFArrayGetCount(v37);
    if (Count >= 1)
    {
      v39 = Count;
      v40 = (const __CFArray *)atomic_load(v23 + 15);
      v101.location = 0;
      v101.length = Count;
      CFArrayAppendArray(theArray, v40, v101);
      v41 = 0;
      v42 = v93;
      do
      {
        v43 = (_OWORD *)(v23[16] + 16 * v41);
        if (v42 >= v94)
        {
          v44 = (v42 - v92) >> 4;
          if ((unint64_t)(v44 + 1) >> 60)
            abort();
          v45 = (v94 - v92) >> 3;
          if (v45 <= v44 + 1)
            v45 = v44 + 1;
          if ((unint64_t)(v94 - v92) >= 0x7FFFFFFFFFFFFFF0)
            v46 = 0xFFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGSize>>((uint64_t)&v94, v46);
          else
            v47 = 0;
          v48 = &v47[16 * v44];
          *(_OWORD *)v48 = *v43;
          v50 = v92;
          v49 = v93;
          v51 = v48;
          if (v93 != v92)
          {
            do
            {
              *((_OWORD *)v51 - 1) = *((_OWORD *)v49 - 1);
              v51 -= 16;
              v49 -= 16;
            }
            while (v49 != v50);
            v49 = v92;
          }
          v42 = v48 + 16;
          v92 = v51;
          v93 = v48 + 16;
          v94 = &v47[16 * v46];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_OWORD *)v42 = *v43;
          v42 += 16;
        }
        v93 = v42;
        ++v41;
      }
      while (v41 != v39);
      v52 = (const __CFBitVector *)atomic_load(v23 + 19);
      if (v52)
      {
        if (!atomic_load((unint64_t *)&v91))
        {
          Mutable = CFBitVectorCreateMutable(allocator, 0);
          do
            v55 = (void *)__ldaxr((unint64_t *)&v91);
          while (__stlxr((unint64_t)Mutable, (unint64_t *)&v91));

        }
        v56 = (__CFBitVector *)atomic_load((unint64_t *)&v91);
        CFBitVectorSetCount(v56, v39 + 1);
        for (i = 0; i != v39; ++i)
        {
          v58 = (__CFBitVector *)atomic_load((unint64_t *)&v91);
          BitAtIndex = CFBitVectorGetBitAtIndex(v52, i);
          CFBitVectorSetBitAtIndex(v58, i, BitAtIndex);
        }
      }
    }
    v60 = v90 + v89 + v88;
    if (v76 <= 1)
    {
      if (v18 - v60 <= 0.0)
        goto LABEL_67;
    }
    else if (v18 + v60 >= v63)
    {
LABEL_67:
      std::default_delete<TFramesetter::TPathFrameLinesetter>::operator()[abi:nn180100]((uint64_t)v23);
    }
    std::default_delete<TFramesetter::TPathFrameLinesetter>::operator()[abi:nn180100]((uint64_t)v23);
  }
  if (v76)
    v61 = 0;
  else
    v61 = (void *)atomic_load((unint64_t *)&v91);
  TFrame::SetLines((uint64_t)a2, theArray, (uint64_t)&v92, v61, location, length, location, 0);

  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }

  TClippingPathInfo::~TClippingPathInfo((TClippingPathInfo *)v99);
}

TFramesetter::TPathFrameLinesetter *TFramesetter::TPathFrameLinesetter::TPathFrameLinesetter(TFramesetter::TPathFrameLinesetter *this, const TFramesetter *a2, const CGPath *a3, double a4, char a5, const TClippingPathInfo *a6, char a7, CGRect a8, double a9, double a10, CFRange a11, const TAttributes *a12, BOOL a13, BOOL a14, BOOL a15)
{
  TParagraphStyle **v17;
  unsigned int v18;
  const void *v19;
  uint64_t v20;
  double TailIndent;
  TParagraphStyle **v22;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((double *)this + 2) = a4;
  *((_BYTE *)this + 24) = a5;
  *((_QWORD *)this + 4) = a6;
  *(CGRect *)((char *)this + 40) = a8;
  *(CFRange *)((char *)this + 72) = a11;
  *((double *)this + 11) = a9;
  *((double *)this + 12) = a10;
  *((_QWORD *)this + 13) = a12;
  if (a12)
  {
    v17 = (TParagraphStyle **)*((_QWORD *)a12 + 16);
    if (v17)
      LOBYTE(v17) = TParagraphStyle::GetLineBreakMode(v17, a2);
  }
  else
  {
    LOBYTE(v17) = 0;
  }
  *((_BYTE *)this + 112) = (_BYTE)v17;
  *((_BYTE *)this + 113) = a13;
  *((_BYTE *)this + 114) = a14;
  *((_BYTE *)this + 115) = a15;
  *((_QWORD *)this + 15) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 161) = a7;
  v18 = *((unsigned __int8 *)this + 112);
  *((_BYTE *)this + 162) = v18 != 1;
  *((_BYTE *)this + 163) = v18 > 1;
  *((double *)this + 21) = TFramesetter::GetHeadIndent(*((TFramesetter **)this + 13), (const TAttributes *)*((unsigned __int8 *)this + 114));
  v20 = *((_QWORD *)this + 13);
  TailIndent = 0.0;
  if (v20)
  {
    v22 = *(TParagraphStyle ***)(v20 + 128);
    if (v22)
      TailIndent = TParagraphStyle::GetTailIndent(v22, v19);
  }
  *((double *)this + 22) = TailIndent;
  return this;
}

CFIndex TFramesetter::TPathFrameLinesetter::LayoutLines(_QWORD *a1, uint64_t a2, _BYTE *a3, double *a4, _QWORD *a5, double *a6)
{
  double *v8;
  uint64_t v9;
  int v10;
  const void *v11;
  double v12;
  uint64_t *v13;
  BOOL v14;
  __CFArray *RectArrayFromPathVertical;
  const __CFArray *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  double MaxY;
  double v25;
  double v26;
  double v27;
  uint64_t *v28;
  CFIndex v29;
  _BOOL4 v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex v33;
  CGSize v34;
  BOOL v35;
  CFIndex v36;
  const __CFDictionary *ValueAtIndex;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v42;
  CGFloat v43;
  double v44;
  double v45;
  CGFloat v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  double v57;
  double v58;
  double v59;
  CFIndex v60;
  char v61;
  _BYTE *v62;
  char v63;
  uint64_t v64;
  const __CFArray *v65;
  _BYTE *v66;
  CFIndex v67;
  unint64_t v69;
  unsigned __int16 *v70;
  const TCharStream *v71;
  unsigned int v72;
  uint64_t v73;
  double v74;
  double v75;
  int v76;
  double *v77;
  const __CFArray *v78;
  _QWORD *v79;
  CFIndex v80;
  char v81;
  uint64_t v82;
  CFIndex v83;
  int v86;
  CFIndex v87;
  int v88;
  double *v89;
  unint64_t *v92;
  _BOOL4 v93;
  CFIndex v94;
  char v95;
  const TLine **v97;
  int v98;
  uint64_t v99;
  CFIndex v100;
  BOOL v101;
  _QWORD v102[6];
  id v103;
  id v104;
  CGRect rect;
  _QWORD v106[3];
  _QWORD *v107;
  _BYTE v108[24];
  _BYTE *v109;
  _BYTE v110[24];
  _BYTE *v111;
  uint64_t v112;
  CFRange v113;

  v112 = *MEMORY[0x1E0C80C00];
  a1[23] = *(_QWORD *)a4;
  v8 = (double *)(a1 + 23);
  *a4 = 0.0;
  *a5 = 0;
  *a6 = 0.0;
  v9 = a1[10];
  v100 = a1[9];
  v10 = *((unsigned __int8 *)a1 + 115);
  v11 = (const void *)a1[1];
  v12 = *(v8 - 21);
  v89 = v8;
  v13 = (uint64_t *)*((_QWORD *)v8 - 19);
  v14 = *((_BYTE *)v8 - 160) != 0;
  if (v10)
    RectArrayFromPathVertical = CreateRectArrayFromPathVertical((uint64_t)v11, v14, v13, v12, *((double *)a1 + 5) + *((double *)a1 + 12), *((double *)a1 + 5) + *((double *)a1 + 11));
  else
    RectArrayFromPathVertical = CreateRectArrayFromPath(v11, v14, v13, 0, v12, *((double *)a1 + 6) + *((double *)a1 + 11), *((double *)a1 + 6) + *((double *)a1 + 12));
  v16 = RectArrayFromPathVertical;
  v17 = RectArrayFromPathVertical;
  if (v17)
  {
    v18 = v17;
    Count = CFArrayGetCount(v17);

    if (Count)
    {
      v20 = 0;
      v92 = a1 + 15;
      v21 = 1;
      v22 = v9;
      while (1)
      {
        v88 = v21;
        std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v106, a2);
        v23 = *((double *)a1 + 22);
        MaxY = CGRectGetMaxY(*(CGRect *)(a1 + 5));
        if (*((_BYTE *)a1 + 115))
        {
          v25 = MaxY - *((double *)a1 + 21);
          if (v23 > 0.0)
            goto LABEL_18;
          v26 = CGRectGetMinY(*(CGRect *)(a1 + 5)) - v23;
        }
        else
        {
          if (v20)
            v27 = *((double *)a1 + 21);
          else
            v27 = v23;
          if (v20)
            v25 = v23;
          else
            v25 = *((double *)a1 + 21);
          if (v27 > 0.0)
          {
            v23 = v27;
LABEL_18:
            if (*((_BYTE *)a1 + 115))
              v26 = MaxY - v23;
            else
              v26 = v23;
            goto LABEL_22;
          }
          v26 = v27 + CGRectGetWidth(*(CGRect *)(a1 + 5));
        }
LABEL_22:
        v28 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
        v29 = CFArrayGetCount(v16);
        LOBYTE(v30) = 0;
        v87 = v100;
        v86 = v20;
        if (v22 < 1 || (v94 = v29, v31 = v29 - 1, v29 < 1))
        {
          v98 = v88;
          v95 = 0;
          goto LABEL_92;
        }
        v30 = 0;
        v95 = 0;
        v101 = 0;
        v32 = 0;
        v98 = v88;
        v33 = v29;
        v97 = (const TLine **)v28;
        while (1)
        {
          v34.width = NAN;
          v34.height = NAN;
          rect.origin = (CGPoint)v34;
          rect.size = v34;
          v35 = v20 && *((_BYTE *)a1 + 115) == 0;
          v36 = v35 ? v31 : v32;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v36);
          CGRectMakeWithDictionaryRepresentation(ValueAtIndex, &rect);
          x = rect.origin.x;
          if (*((_BYTE *)a1 + 115))
          {
            y = rect.origin.y;
            width = rect.size.width;
            height = rect.size.height;
            v42 = CGRectGetMaxY(*(CGRect *)&x);
            v43 = rect.origin.y;
            if (rect.origin.y >= v25)
              goto LABEL_87;
            v44 = v42;
            v45 = rect.size.height;
            if (v42 > v25)
            {
              v45 = rect.size.height - (v42 - v25);
              rect.size.height = v45;
            }
            if (rect.origin.y < v26)
            {
              v45 = v45 - (v26 - rect.origin.y);
              rect.size.height = v45;
              rect.origin.y = v26;
              v43 = v26;
            }
            v46 = rect.origin.x;
            v47 = rect.size.width;
            v48 = CGRectGetHeight(*(CGRect *)(&v43 - 1));
          }
          else
          {
            v44 = rect.origin.x - *((double *)a1 + 5);
            v49 = rect.origin.y;
            v50 = rect.size.width;
            v51 = rect.size.height;
            v52 = v44 + CGRectGetWidth(*(CGRect *)&x);
            if (v52 <= v25)
              goto LABEL_87;
            v53 = rect.size.width;
            if (v44 < v25)
            {
              v53 = rect.size.width - (v25 - v44);
              rect.size.width = v53;
              rect.origin.x = v25;
              v44 = v25;
            }
            if (v52 > v26)
            {
              v53 = v53 - (v52 - v26);
              rect.size.width = v53;
            }
            v54 = rect.origin.x;
            v55 = rect.origin.y;
            v56 = rect.size.height;
            v48 = CGRectGetWidth(*(CGRect *)(&v53 - 2));
          }
          v57 = v48;
          if (v48 > 0.0)
            break;
LABEL_87:
          if (!v101 && v22 >= 1)
          {
            ++v32;
            --v31;
            if (v32 < v33)
              continue;
          }
          goto LABEL_92;
        }
        if (*((_BYTE *)a1 + 163))
          v58 = 1.79769313e308;
        else
          v58 = v48;
        if (*((_BYTE *)a1 + 115))
          v59 = MaxY - v44;
        else
          v59 = v44;
        v99 = v22;
        v93 = v30;
        if (*((_BYTE *)a1 + 162))
        {
          if (v107)
          {
            if (v107 == v106)
            {
              v111 = v110;
              (*(void (**)(_QWORD *, _BYTE *))(v106[0] + 24))(v106, v110);
            }
            else
            {
              v111 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v107 + 16))(v107);
            }
          }
          else
          {
            v111 = 0;
          }
          v60 = TTypesetter::SuggestLineBreak((uint64_t)v28, v100, (uint64_t)v110, v58, v59);
          *a3 = v61;
          v62 = v111;
          if (v111 == v110)
          {
            v62 = v110;
            goto LABEL_68;
          }
        }
        else
        {
          if (v107)
          {
            if (v107 == v106)
            {
              v109 = v108;
              (*(void (**)(_QWORD *, _BYTE *))(v106[0] + 24))(v106, v108);
            }
            else
            {
              v109 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v107 + 16))(v107);
            }
          }
          else
          {
            v109 = 0;
          }
          v60 = TTypesetter::SuggestClusterBreak((uint64_t)v28, v100, (uint64_t)v108, v58, v59);
          *a3 = v63;
          v62 = v109;
          if (v109 == v108)
          {
            v62 = v108;
LABEL_68:
            v64 = 4;
LABEL_69:
            (*(void (**)(void))(*(_QWORD *)v62 + 8 * v64))();
            goto LABEL_70;
          }
        }
        if (v62)
        {
          v64 = 5;
          goto LABEL_69;
        }
LABEL_70:
        if (!v60)
        {
          v78 = (const __CFArray *)atomic_load(v92);
          if (CFArrayGetCount(v78))
          {
            v30 = v93;
LABEL_86:
            v33 = v94;
            goto LABEL_87;
          }
        }
        v65 = v16;
        v66 = a3;
        v101 = *a3 != 0;
        if (v60 >= v22)
          v67 = v22;
        else
          v67 = v60;
        v104 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFBase_NEW<CTLine,std::shared_ptr<TCharStream const> const&>(v28, (unint64_t *)&v104);
        if (atomic_load((unint64_t *)&v104))
        {
          v69 = atomic_load((unint64_t *)&v104);
          v70 = *(unsigned __int16 **)(v69 + 40);
          v113.location = v100;
          v113.length = v67;
          TTypesetter::FillLine((TTypesetter *)v28, (TLine *)v70, v113, v58, v59);
          v103 = (id)0xAAAAAAAAAAAAAAAALL;
          v103 = (id)ExternalizeLine((unint64_t *)&v104);
          if (v98)
          {
            v72 = v70[76];
            v20 = (v72 >> 3) & 1;
            if ((v72 & 8) != 0 && !*((_BYTE *)a1 + 115))
              goto LABEL_103;
          }
          v30 = TFramesetter::ParagraphEndsWith((TFramesetter *)v70, *v97, v71);
          TFramesetter::GetLineMetrics((uint64_t)v102, (TLine *)v70, (const void *)*((unsigned __int8 *)a1 + 113), *((unsigned __int8 *)a1 + 114), v30, *((unsigned __int8 *)a1 + 161));
          v73 = v102[1];
          *a4 = *(double *)v102;
          *a5 = v73;
          v74 = *(double *)&v102[3];
          *a6 = *(double *)&v102[2];
          v75 = *(double *)&v102[4];
          *a4 = v74 + *a4;
          *a6 = v75 + *a6;
          v76 = *((unsigned __int8 *)a1 + 115);
          if (*((_BYTE *)a1 + 115))
          {
            v44 = CGRectGetMaxY(rect) - *((double *)a1 + 6);
            v76 = *((unsigned __int8 *)a1 + 115);
          }
          v77 = a4;
          if (v67 <= 0)
            v77 = v89;
          if ((TFramesetter::AppendLine(a1[13], v76 == 0, v20 != 0, v30, *((unsigned __int8 *)a1 + 112), v32, (unint64_t *)&v103, v92, v57, v44, *((double *)a1 + 11) - *v77, (uint64_t)(a1 + 16), a1 + 19) & 1) == 0)
          {
            v95 = 1;
LABEL_103:

            v98 = 0;
            a3 = v66;
            v16 = v65;
            v22 = v99;
            goto LABEL_104;
          }
          v22 = v99 - v67;
          v100 += v67;

          v98 = 0;
          v95 = 1;
          a3 = v66;
          v16 = v65;
          v28 = (uint64_t *)v97;
          goto LABEL_86;
        }

        a3 = v66;
        v16 = v65;
LABEL_104:
        LOBYTE(v30) = v93;
LABEL_92:
        *((_BYTE *)a1 + 160) = v30;
        v79 = v107;
        if (v107 == v106)
        {
          v79 = v106;
          v82 = 4;
          v80 = v87;
          v21 = v98;
          v81 = v95;
LABEL_96:
          (*(void (**)(void))(*v79 + 8 * v82))();
        }
        else
        {
          v80 = v87;
          v21 = v98;
          v81 = v95;
          if (v107)
          {
            v82 = 5;
            goto LABEL_96;
          }
        }
        if ((v81 & 1) != 0)
        {
          v80 = v100;
          goto LABEL_109;
        }
        if (v80 == v100 && v86 == v20 && v88 == v21)
        {
LABEL_109:
          v83 = v80 - a1[9];
          goto LABEL_110;
        }
      }
    }
  }
  else
  {

  }
  v83 = 0;
LABEL_110:

  return v83;
}

uint64_t TFramesetter::GetCharMetricsForLine(TFramesetter *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, int a6, int a7)
{
  TLine *v13;
  uint64_t v14;
  unint64_t v15;
  const __CFDictionary *v16;
  _QWORD *v17;
  double (*v18)(_QWORD, double);
  double v19;
  double v20;
  double (*v21)(_QWORD);
  uint64_t v22;

  v13 = (TLine *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 2) + 8 * TLine::FindRunWithCharIndex(v13, a4, 1)) + 40);
  if ((*(_WORD *)(v14 + 178) & 0x40) != 0)
  {
    v16 = (const __CFDictionary *)atomic_load((unint64_t *)(v14 + 40));
    v17 = (_QWORD *)*((_QWORD *)CFDictionaryGetValue(v16, CFSTR("CTRunDelegate")) + 5);
    v18 = (double (*)(_QWORD, double))v17[2];
    v19 = 0.0;
    v20 = 0.0;
    if (v18)
      v20 = v18(v17[5], 0.0);
    *(double *)this = v20;
    v21 = (double (*)(_QWORD))v17[3];
    if (v21)
      v19 = v21(v17[5]);
    *((double *)this + 1) = v19;
  }
  else
  {
    v15 = atomic_load((unint64_t *)(v14 + 56));
    TFont::GetDefaultMetrics(*(TFont **)(v15 + 40), (double *)this, (double *)this + 1, (double *)this + 2);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 2) + 8 * TLine::FindRunWithCharIndex(v13, a3, 1)) + 40) + 40;
  return ApplyParagraphStyleSettings(v22, a5, a6, 0, a7, (float64x2_t *)this, 0);
}

uint64_t TFramesetterBase::Typesetter(TFramesetterBase *this)
{
  return *(_QWORD *)((*(uint64_t (**)(TFramesetterBase *))(*(_QWORD *)this + 24))(this) + 40);
}

unint64_t TFramesetterBase::GetTypesetter(TFramesetterBase *this)
{
  return atomic_load((unint64_t *)this + 1);
}

void TFramesetterBase::~TFramesetterBase(id *this)
{
  *this = &off_1E15DD968;

}

{
  *this = &off_1E15DD968;

  JUMPOUT(0x186DC03ACLL);
}

void TClippingPathInfo::~TClippingPathInfo(TClippingPathInfo *this)
{
  void **v2;

  v2 = (void **)((char *)this + 152);
  std::vector<CTFramePathFillRule,TInlineBufferAllocator<CTFramePathFillRule,5ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = (void **)((char *)this + 80);
  std::vector<double,TInlineBufferAllocator<double,5ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<TCFRef<CGPath const*>,TInlineBufferAllocator<TCFRef<CGPath const*>,5ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

void std::vector<CTFramePathFillRule,TInlineBufferAllocator<CTFramePathFillRule,5ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 44);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[6])
        v1[6] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<double,TInlineBufferAllocator<double,5ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 8;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[8])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<TCFRef<CGPath const*>,TInlineBufferAllocator<TCFRef<CGPath const*>,5ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void **v5;
  void **v6;
  id *v7;
  void **v8;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = (void **)**a1;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        v7 = v4 - 1;

        v4 = v7;
      }
      while (v7 != v2);
      v6 = *a1;
      v5 = (void **)**a1;
    }
    v1[1] = v2;
    v8 = v6 + 8;
    if (v6 + 3 <= v5 && v8 > v5)
    {
      if (v6[2] == v6[8])
        *v8 = v5;
    }
    else
    {
      operator delete(v5);
    }
  }
}

void std::default_delete<TFramesetter::TPathFrameLinesetter>::operator()[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x186DC03ACLL);
}

void std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0>,unsigned char ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0>,unsigned char ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E07A8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0>,unsigned char ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E07A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_0>,unsigned char ()(long)>::operator()(uint64_t a1, uint64_t *a2)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double v10;
  uint64_t result;
  double v13[3];
  double v14;

  TFramesetter::GetCharMetricsForLine((TFramesetter *)v13, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 40), *a2, (const void *)*(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
  v3 = v13[1];
  v4 = v13[2];
  v5 = v13[0] + v14;
  v6 = *(double **)(a1 + 16);
  if (v13[0] + v14 < *v6)
    v5 = *v6;
  *v6 = v5;
  v7 = *(double **)(a1 + 24);
  v8 = *v7;
  if (v3 >= *v7)
    v8 = v3;
  *v7 = v8;
  v9 = *(double **)(a1 + 32);
  v10 = *v9;
  if (v4 >= *v9)
    v10 = v4;
  *v9 = v10;
  result = 32;
  if (*(double *)(a1 + 56) >= *v6)
  {
    if (*(double *)(a1 + 72) < v10 || *(double *)(a1 + 64) < *v7)
      return 32;
    else
      return 0;
  }
  return result;
}

void std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1>,unsigned char ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1>,unsigned char ()(long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E15E07F0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1>,unsigned char ()(long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E15E07F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1,std::allocator<TFramesetter::FrameInPath(TFrame &,CFRange)::$_1>,unsigned char ()(long)>::operator()(uint64_t a1, uint64_t *a2)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double v10;
  uint64_t result;
  double v13[3];
  double v14;

  TFramesetter::GetCharMetricsForLine((TFramesetter *)v13, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 40), *a2, (const void *)*(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
  v3 = v13[1];
  v4 = v13[2];
  v5 = v13[0] + v14;
  v6 = *(double **)(a1 + 16);
  if (v13[0] + v14 < *v6)
    v5 = *v6;
  *v6 = v5;
  v7 = *(double **)(a1 + 24);
  v8 = *v7;
  if (v3 >= *v7)
    v8 = v3;
  *v7 = v8;
  v9 = *(double **)(a1 + 32);
  v10 = *v9;
  if (v4 >= *v9)
    v10 = v4;
  *v9 = v10;
  result = 32;
  if (*(double *)(a1 + 56) >= *v6)
  {
    if (*(double *)(a1 + 72) < v10 || *(double *)(a1 + 64) < *v7)
      return 32;
    else
      return 0;
  }
  return result;
}

CFBundleRef _CTGetFrameworkBundleForLocalization()
{
  CFBundleRef result;

  result = (CFBundleRef)sBundleForLocalization;
  if (!sBundleForLocalization)
    return CFBundleGetBundleWithIdentifier(CFSTR("com.apple.CoreText"));
  return result;
}

CFTypeRef _CTSetFrameworkBundleForLocalization(CFTypeRef cf)
{
  CFTypeRef result;

  if (sBundleForLocalization)
    CFRelease((CFTypeRef)sBundleForLocalization);
  if (cf)
    result = CFRetain(cf);
  else
    result = 0;
  sBundleForLocalization = (uint64_t)result;
  return result;
}

void CTCopyLocalizedString(CFStringRef key@<X0>, CFStringRef tableName@<X1>, unint64_t *a3@<X8>)
{
  __CFBundle *BundleWithIdentifier;
  unint64_t v7;
  id v8;

  BundleWithIdentifier = (__CFBundle *)sBundleForLocalization;
  if (sBundleForLocalization
    || (BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.CoreText"))) != 0)
  {
    v8 = (id)CFBundleCopyLocalizedString(BundleWithIdentifier, key, 0, tableName);
    do
      v7 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    *a3 = v7;

  }
  else
  {
    *a3 = 0;
  }
}

void TTypesetterUniChar::TTypesetterUniChar(TTypesetterUniChar *this, const unsigned __int16 *(*a2)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a3)(const unsigned __int16 *, void *), void *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15B8;
  TCharStreamUniChar::TCharStreamUniChar((TCharStreamUniChar *)&v8[1], a2, a3, a4);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  *(_QWORD *)this = v10;
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)((char *)this + 149) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 16) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = v10;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_WORD *)this + 128) = 0;
  *((_WORD *)this + 77) = 1;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  TTypesetterUniChar::Initialize(this);
}

uint64_t TTypesetterUniChar::Initialize(TTypesetterUniChar *this)
{
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  CFIndex v8;
  int64_t v9;
  uint64_t v10;
  const TCharStream *v11;
  uint64_t v12;
  CFIndex v13;
  int v14;
  char v15;
  TCompositionEngine **v16;
  uint64_t v17;
  TTypesetterUniChar *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE v26[240];
  unint64_t v27;
  char v28;
  TCompositionEngine **v29;
  TCompositionEngine *__dst[83];
  CFRange v31;

  __dst[82] = *(TCompositionEngine **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 27) + 16);
  v28 = 0;
  v3 = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", v2, v2);
  v27 = 0xAAAAAAAAFFFFFFFFLL;
  memset(&v26[80], 170, 160);
  memset(v26, 170, 32);
  v4 = (_QWORD *)*((_QWORD *)this + 27);
  memset(&v26[16], 0, 184);
  *(_QWORD *)&v26[176] = v4[2];
  *(_QWORD *)&v26[200] = this;
  memset(&v26[208], 0, 32);
  LODWORD(v27) = 1065353216;
  v5 = v4[7] - v4[6];
  *(_QWORD *)v26 = v3;
  *(_QWORD *)&v26[8] = v4;
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v5 / 0x18uLL;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    do
    {
      v11 = (const TCharStream *)*((_QWORD *)this + 27);
      v12 = *((_QWORD *)v11 + 6) + v6;
      v13 = *(_QWORD *)v12;
      v31.location = v8;
      v31.length = *(_QWORD *)v12;
      TAttributes::TAttributes((TAttributes *)__dst, *(const __CFDictionary **)(v12 + 16), v11, v31, 0);
      v7 |= TGlyphEncoder::EncodeChars((TCharStream **)v26, v8, v13, (uint64_t)__dst, 0);
      v28 = v7;
      TAttributes::~TAttributes((TAttributes *)__dst);
      v8 += v13;
      v6 += 24;
      --v10;
    }
    while (v10);
  }

  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = v2;
  TLine::LinkRuns(this);
  if ((TTypesetter::CanLayout(this) & 1) != 0)
  {
    v19 = this;
    v20 = *(_OWORD *)((char *)this + 216);
    v21 = *((_QWORD *)this + 29);
    v22 = (char *)this + 240;
    v14 = *((_DWORD *)this + 65);
    v24 = -1431655766;
    v25 = 0;
    v23 = v14;
    LOBYTE(v24) = *((_BYTE *)this + 264);
    BYTE1(v24) = *((_BYTE *)this + 257);
    memcpy(__dst, &unk_18492F7F0, 0x290uLL);
    TRunGlue::TRunGlue((TRunGlue *)__dst, this);
    v15 = TTypesetter::FinishEncoding((uint64_t)&v19, (TShapingEngine *)__dst, (const TCharStream *)&v28);
    TTypesetter::FinishLayout((uint64_t)&v19, __dst, (const TCharStream *)v28, v15);
    v16 = (TCompositionEngine **)__dst[73];
    if ((TCompositionEngine **)__dst[73] == &__dst[70])
    {
      v17 = 4;
      v16 = &__dst[70];
    }
    else
    {
      if (!__dst[73])
      {
LABEL_12:
        v29 = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
        v29 = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
        v29 = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
        return std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v26[208]);
      }
      v17 = 5;
    }
    (*((void (**)(void))*v16 + v17))();
    goto LABEL_12;
  }
  return std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)&v26[208]);
}

void TTypesetterUniChar::TTypesetterUniChar(TTypesetterUniChar *this, const unsigned __int16 *(*a2)(uint64_t, uint64_t *, const __CFDictionary **, void *), void (*a3)(const unsigned __int16 *, void *), void *a4, const __CFDictionary *a5)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v10 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E15B8;
  TCharStreamUniChar::TCharStreamUniChar((TCharStreamUniChar *)&v10[1], a2, a3, a4);
  v15 = v11;
  v16 = v10;
  TTypesetter::TTypesetter(this, &v15, a5);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  TTypesetterUniChar::Initialize(this);
}

void TTypesetterAttrString::TTypesetterAttrString(TTypesetterAttrString *this, const __CFAttributedString *a2, const __CFDictionary *a3, char a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1660;
  TCharStreamCFAttrString::TCharStreamCFAttrString((TCharStreamCFAttrString *)&v8[1], a2);
  v13 = v9;
  v14 = v8;
  TTypesetter::TTypesetter(this, &v13, a3);
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  TTypesetterAttrString::Initialize(this, a2, a4);
}

id TTypesetterAttrString::Initialize(TTypesetterAttrString *this, const __CFAttributedString *a2, char a3)
{
  TTypesetterAttrString *v4;
  CFIndex v5;
  id result;
  id v7;
  uint64_t v8;
  int v9;
  unint64_t **Table;
  unint64_t *v11;
  CFIndex v12;
  unint64_t v13;
  unint64_t v14;
  CFIndex location;
  CFIndex length;
  const __CFDictionary *Attributes;
  CFIndex v18;
  CFDictionaryRef v19;
  unint64_t v20;
  TAttributes *v21;
  int v22;
  const void *Value;
  int *v24;
  __int128 v25;
  CFStringRef String;
  int v27;
  int v28;
  const __CFString *AltUrduUIFontNameForSymbolicTraits;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  int64x2_t v34;
  const CGAffineTransform *v35;
  const __CTFont *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  int v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  CFIndex v48;
  CFIndex v49;
  int v50;
  uint64_t v51;
  char v52;
  id *v53;
  uint64_t v54;
  TTypesetterAttrString *v55;
  void *v56;
  const __CTFont *v57;
  int v58;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[3];
  __int128 v66;
  unint64_t v67;
  TAttributes *v68;
  _OWORD v69[10];
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  _QWORD v73[5];
  _OWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  CFRange effectiveRange;
  CFRange v84;
  _BYTE v85[176];
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD v89[2];
  unint64_t v90;
  char v91;
  id __dst[85];

  v4 = this;
  __dst[82] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*((_QWORD *)this + 27) + 16);
  result = +[_CTNativeGlyphStorage newWithCount:capacity:](_CTNativeGlyphStorage, "newWithCount:capacity:", v5, v5);
  if (result)
  {
    v7 = result;
    v91 = 0;
    memset(v89, 170, sizeof(v89));
    v90 = 0xAAAAAAAAFFFFFFFFLL;
    memset(v85, 170, 32);
    v8 = *((_QWORD *)v4 + 27);
    *(_QWORD *)v85 = result;
    *(_QWORD *)&v85[8] = v8;
    memset(&v85[16], 0, 160);
    v86 = 0u;
    v88 = 0xAAAAAAAAAAAAAAAALL;
    v87 = 0;
    *(_QWORD *)&v86 = *(_QWORD *)(v8 + 16);
    v88 = (unint64_t)v4;
    memset(v89, 0, sizeof(v89));
    LODWORD(v90) = 1065353216;
    v9 = ShouldCheckForKnownUrduSequences();
    Table = (unint64_t **)GetTable();
    v56 = v7;
    if (Table)
      v11 = *Table;
    else
      v11 = 0;
    v84.length = 0;
    v84.location = 0;
    if (v5 >= 1)
    {
      v12 = 0;
      v66 = xmmword_18492FBF8;
      memset(v65, 170, sizeof(v65));
      v63 = unk_18492FBC8;
      v64 = xmmword_18492FBB8;
      v61 = unk_18492FBE8;
      v62 = xmmword_18492FBD8;
      memset(v60, 170, sizeof(v60));
      v13 = 0xAAAAAAAAAAAAAA00;
      v14 = 0xAAAAAAAAAAAAAA00;
      v55 = v4;
      v58 = v9;
      do
      {
        effectiveRange.length = 0xAAAAAAAAAAAAAAAALL;
        effectiveRange.location = 0xAAAAAAAAAAAAAAAALL;
        if ((_BYTE)v13)
        {
          location = v84.location;
          length = v84.length;
          v84.length = 0;
          v84.location = 0;
          effectiveRange.location = location;
          effectiveRange.length = length;
          Attributes = (const __CFDictionary *)v14;
          v13 = 0xAAAAAAAAAAAAAA00;
        }
        else
        {
          Attributes = CFAttributedStringGetAttributes(a2, v12, &effectiveRange);
          location = effectiveRange.location;
          length = effectiveRange.length;
        }
        v18 = location + length;
        if (location + length < v5)
        {
          while (1)
          {
            v19 = CFAttributedStringGetAttributes(a2, v18, &v84);
            if (v19 != Attributes)
              break;
            effectiveRange.length += v84.length;
            v18 = effectiveRange.location + effectiveRange.length;
            if (effectiveRange.location + effectiveRange.length >= v5)
            {
              v14 = (unint64_t)Attributes;
              goto LABEL_15;
            }
          }
          v14 = (unint64_t)v19;
LABEL_15:
          v13 = 0xAAAAAAAAAAAAAA01;
        }
        v79 = v66;
        v80 = v65[2];
        v81 = v65[1];
        v82 = v65[0];
        v75 = v64;
        v76 = v63;
        v77 = v62;
        v78 = v61;
        v74[0] = v60[1];
        v74[1] = v60[0];
        LOBYTE(v74[0]) = 0;
        BYTE8(v82) = 0;
        if (v11 && (v20 = atomic_load(v11), Attributes == (const __CFDictionary *)v20))
        {
          v21 = (TAttributes *)(v11 + 1);
        }
        else
        {
          TAttributes::TAttributes((TAttributes *)__dst, Attributes, *((const TCharStream **)v4 + 27), effectiveRange, 0);
          if (BYTE8(v82))
          {
            TAttributes::operator=((uint64_t)v74, (uint64_t)__dst);
          }
          else
          {
            *(_WORD *)((char *)&v76 + 1) = 0;
            BYTE3(v76) = 0;
            BYTE8(v76) = 0;
            BYTE8(v79) = 0;
            *(_QWORD *)&v82 = 0;
            memset(v74, 0, sizeof(v74));
            v75 = 0u;
            *((_QWORD *)&v80 + 1) = 0;
            *(_QWORD *)&v81 = 0;
            TAttributes::operator=((uint64_t)v74, (uint64_t)__dst);
            BYTE8(v82) = 1;
          }
          TAttributes::~TAttributes((TAttributes *)__dst);
          if (!BYTE8(v82))
            std::__throw_bad_optional_access[abi:nn180100]();
          v21 = (TAttributes *)v74;
        }
        v67 = v13;
        v68 = v21;
        if (Attributes)
          v22 = v9;
        else
          v22 = 0;
        if (v22 != 1)
          goto LABEL_45;
        Value = CFDictionaryGetValue(Attributes, CFSTR("NSFont"));
        if (!Value)
          goto LABEL_45;
        v24 = (int *)*((_QWORD *)Value + 5);
        if (!v24 || !TFont::IsSystemUIFontAndForShaping(*((TFont **)Value + 5), (BOOL *)__dst))
        {
          v9 = v58;
LABEL_45:
          v43 = TGlyphEncoder::EncodeChars(v85, effectiveRange.location, effectiveRange.length, v68, 0);
          v91 |= v43;
          goto LABEL_46;
        }
        __dst[0] = 0;
        __dst[1] = __dst;
        __dst[2] = (id)0x23012000000;
        __dst[3] = __Block_byref_object_copy_;
        __dst[4] = __Block_byref_object_dispose_;
        *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__dst[9] = v25;
        *(_OWORD *)&__dst[11] = v25;
        *(_OWORD *)&__dst[13] = v25;
        *(_OWORD *)&__dst[15] = v25;
        *(_OWORD *)&__dst[17] = v25;
        *(_OWORD *)&__dst[19] = v25;
        *(_OWORD *)&__dst[21] = v25;
        *(_OWORD *)&__dst[23] = v25;
        *(_OWORD *)&__dst[25] = v25;
        *(_OWORD *)&__dst[27] = v25;
        *(_OWORD *)&__dst[29] = v25;
        *(_OWORD *)&__dst[31] = v25;
        *(_OWORD *)&__dst[33] = v25;
        *(_OWORD *)&__dst[35] = v25;
        *(_OWORD *)&__dst[37] = v25;
        *(_OWORD *)&__dst[39] = v25;
        *(_OWORD *)&__dst[41] = v25;
        *(_OWORD *)&__dst[43] = v25;
        *(_OWORD *)&__dst[45] = v25;
        *(_OWORD *)&__dst[47] = v25;
        *(_OWORD *)&__dst[49] = v25;
        *(_OWORD *)&__dst[51] = v25;
        *(_OWORD *)&__dst[53] = v25;
        *(_OWORD *)&__dst[55] = v25;
        *(_OWORD *)&__dst[57] = v25;
        *(_OWORD *)&__dst[59] = v25;
        *(_OWORD *)&__dst[61] = v25;
        *(_OWORD *)&__dst[63] = v25;
        *(_OWORD *)&__dst[65] = v25;
        *(_OWORD *)&__dst[67] = v25;
        memset(&__dst[5], 0, 32);
        __dst[69] = &__dst[9];
        String = CFAttributedStringGetString(a2);
        v73[0] = MEMORY[0x1E0C809B0];
        v73[1] = 3221225472;
        v73[2] = ___ZN21TTypesetterAttrString10InitializeEPK20__CFAttributedStringb_block_invoke;
        v73[3] = &unk_1E15E1C10;
        v73[4] = __dst;
        EnumerateKnownUrduSequencesInString((uint64_t)String, effectiveRange.location, effectiveRange.length, (uint64_t)v73);
        if (*((_QWORD *)__dst[1] + 6) == *((_QWORD *)__dst[1] + 7))
        {
          v9 = v58;
        }
        else
        {
          v27 = *v24;
          v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v24 + 50) + 160))(*((_QWORD *)v24 + 50));
          AltUrduUIFontNameForSymbolicTraits = (const __CFString *)GetAltUrduUIFontNameForSymbolicTraits(v28 | ((v27 & 1) << 11));
          v30.f64[0] = NAN;
          v30.f64[1] = NAN;
          v71 = v30;
          v72 = v30;
          v70 = v30;
          v31 = (float64x2_t *)*((_QWORD *)v24 + 5);
          if (!v31)
            v31 = (float64x2_t *)MEMORY[0x1E0C9BAA8];
          v33 = v31[1];
          v32 = v31[2];
          v70 = *v31;
          v71 = v33;
          v72 = v32;
          v34 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v70, (float64x2_t)xmmword_18492FA90), vandq_s8((int8x16_t)vceqq_f64(v33, (float64x2_t)xmmword_18492E300), (int8x16_t)vceqzq_f64(v32)));
          if (vandq_s8((int8x16_t)v34, (int8x16_t)vdupq_laneq_s64(v34, 1)).i64[0] >= 0)
            v35 = (const CGAffineTransform *)&v70;
          else
            v35 = 0;
          v36 = CTFontCreateWithNameAndOptions(AltUrduUIFontNameForSymbolicTraits, *((CGFloat *)v24 + 2), v35, 0x20000400uLL);
          if (v36)
          {
            v69[6] = xmmword_18492FC98;
            memset(&v69[7], 170, 40);
            v69[3] = unk_18492FC68;
            memset(&v69[4], 255, 32);
            memset(v69, 170, 48);
            v57 = v36;
            TAttributes::TAttributes((TAttributes *)v69, v68, v36);
            v37 = (uint64_t *)*((_QWORD *)__dst[1] + 6);
            v38 = (uint64_t *)*((_QWORD *)__dst[1] + 7);
            while (v37 != v38)
            {
              v40 = *v37;
              v39 = v37[1];
              if (*v37 <= v12)
              {
                v42 = v91;
              }
              else
              {
                v41 = TGlyphEncoder::EncodeChars(v85, v12, *v37 - v12, v68, 0);
                v42 = v91 | v41;
              }
              v91 = TGlyphEncoder::EncodeChars(v85, v40, v39, v69, 0) | v42;
              v12 = v39 + v40;
              v37 += 2;
            }
            TAttributes::~TAttributes((TAttributes *)v69);
            v4 = v55;
            v36 = v57;
          }

          v49 = effectiveRange.location - v12 + effectiveRange.length;
          effectiveRange.location = v12;
          effectiveRange.length = v49;
          v9 = v58;
          if (v49 < 1)
          {
            v50 = 0;
            goto LABEL_66;
          }
        }
        v50 = 1;
LABEL_66:
        _Block_object_dispose(__dst, 8);
        std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100]((uint64_t)&__dst[6]);
        if (v50)
          goto LABEL_45;
LABEL_46:
        v44 = BYTE8(v82);
        if (BYTE8(v82) && (a3 & 1) == 0)
        {
          if (v11)
          {
            v45 = (char *)v11;
            TCFRef<__CTFont const*>::Retain(v11, Attributes);
            TAttributes::operator=((uint64_t)(v11 + 1), (uint64_t)v68);
          }
          else
          {
            v45 = (char *)operator new(0xA0uLL, MEMORY[0x1E0DE4E10]);
            if (v45)
            {
              __dst[0] = Attributes;
              do
                v46 = __ldaxr((unint64_t *)__dst);
              while (__stlxr(0, (unint64_t *)__dst));
              *(_QWORD *)v45 = v46;
              *(_WORD *)(v45 + 57) = 0;
              v45[59] = 0;
              v45[64] = 0;
              v45[112] = 0;
              *((_QWORD *)v45 + 19) = 0;
              *(_OWORD *)(v45 + 24) = 0u;
              *(_OWORD *)(v45 + 40) = 0u;
              *(_OWORD *)(v45 + 8) = 0u;
              *((_QWORD *)v45 + 16) = 0;
              *((_QWORD *)v45 + 17) = 0;
              TAttributes::operator=((uint64_t)(v45 + 8), (uint64_t)v68);

            }
            v47 = GetTable();
            if (v47)
            {
              *v47 = v45;
              v47[1] = TTypesetter::DestroyAttributesCache;
            }
          }
          v11 = (unint64_t *)v45;
          v44 = BYTE8(v82);
        }
        v48 = effectiveRange.length;
        if (v44)
          TAttributes::~TAttributes((TAttributes *)v74);
        v12 += v48;
        v13 = v67;
      }
      while (v12 < v5);
    }

    *((_QWORD *)v4 + 9) = 0;
    *((_QWORD *)v4 + 10) = v5;
    TLine::LinkRuns(v4);
    if ((TTypesetter::CanLayout(v4) & 1) == 0)
      return (id)std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v89);
    *(_OWORD *)((char *)v74 + 8) = *(_OWORD *)((char *)v4 + 216);
    v51 = *((_QWORD *)v4 + 29);
    *(_QWORD *)&v74[0] = v4;
    *((_QWORD *)&v74[1] + 1) = v51;
    *((_QWORD *)&v75 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v75 = (char *)v4 + 240;
    DWORD2(v75) = *((_DWORD *)v4 + 65);
    BYTE12(v75) = *((_BYTE *)v4 + 264);
    BYTE13(v75) = *((_BYTE *)v4 + 257);
    *(_QWORD *)&v76 = 0;
    memcpy(__dst, &unk_18492FCD0, 0x290uLL);
    TRunGlue::TRunGlue((TRunGlue *)__dst, v4);
    v52 = TTypesetter::FinishEncoding((uint64_t)v74, (TShapingEngine *)__dst, (const TCharStream *)&v91);
    TTypesetter::FinishLayout((uint64_t)v74, (TCompositionEngine **)__dst, (const TCharStream *)v91, v52);
    v53 = (id *)__dst[73];
    if (__dst[73] == &__dst[70])
    {
      v54 = 4;
      v53 = &__dst[70];
    }
    else
    {
      if (!__dst[73])
      {
LABEL_74:
        *(_QWORD *)&v69[0] = &__dst[46];
        std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v69);
        *(_QWORD *)&v69[0] = &__dst[26];
        std::vector<unsigned char,TInlineBufferAllocator<unsigned char,128ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v69);
        *(_QWORD *)&v69[0] = &__dst[7];
        std::vector<std::pair<UScriptCode,long>,TInlineBufferAllocator<std::pair<UScriptCode,long>,1ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)v69);
        return (id)std::__hash_table<EncoderAttempt,std::hash<EncoderAttempt>,std::equal_to<EncoderAttempt>,std::allocator<EncoderAttempt>>::~__hash_table((uint64_t)v89);
      }
      v54 = 5;
    }
    (*((void (**)(void))*v53 + v54))();
    goto LABEL_74;
  }
  return result;
}

void *__Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  void *result;
  int64_t v6;
  char *v7;
  char *v8;

  v4 = *(_BYTE **)(a2 + 48);
  v3 = *(_BYTE **)(a2 + 56);
  result = a1 + 9;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[69] = result;
  v6 = v3 - v4;
  if (v3 != v4)
  {
    if (v6 < 0)
      abort();
    v7 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)result, v6 >> 4);
    a1[6] = v7;
    a1[7] = v7;
    v8 = &v7[16 * (v6 >> 4)];
    a1[8] = v8;
    result = memmove(v7, v4, v6);
    a1[7] = v8;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::vector<TGlyphAuxDataListEntry,TInlineBufferAllocator<TGlyphAuxDataListEntry,30ul>>::__destroy_vector::operator()[abi:nn180100](a1 + 48);
}

void ___ZN21TTypesetterAttrString10InitializeEPK20__CFAttributedStringb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (char *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)v5[6];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(v5 + 9), v13);
      v9 = (char *)v5[6];
      v7 = (char *)v5[7];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v16 = v15;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      v9 = (char *)v5[6];
    }
    v8 = v15 + 16;
    v5[6] = v16;
    v5[7] = v15 + 16;
    v17 = v5[8];
    v5[8] = &v14[16 * v13];
    if (v9)
    {
      v18 = (char *)(v5 + 69);
      if (v5 + 9 <= (_QWORD *)v9 && v18 > v9)
      {
        if (v17 == *(_QWORD *)v18)
          *(_QWORD *)v18 = v9;
      }
      else
      {
        operator delete(v9);
      }
    }
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = v7 + 16;
  }
  v5[7] = v8;
}

void std::__shared_ptr_emplace<TCharStreamCFAttrString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TCharStreamCFAttrString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E15E1660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DC03ACLL);
}

unint64_t TFramesetterAttrString::GetTypesetter(TFramesetterAttrString *this)
{
  unint64_t *v1;
  uint64_t v3;
  const __CFAttributedString *v4;
  uint64_t v5;
  _QWORD *v6;
  TTypesetterAttrString *v7;
  void *v8;
  unint64_t v9;
  int v11;
  void *v12;
  id v14;
  id v15;
  id v16;

  v1 = (unint64_t *)((char *)this + 280);
  if (!atomic_load((unint64_t *)this + 35))
  {
    v3 = *((_QWORD *)this + 28);
    v15 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v3 + 32))(&v14);
    v4 = (const __CFAttributedString *)atomic_load((unint64_t *)&v14);
    v5 = TCFBase<TTypesetter>::Allocate();
    if (v5)
    {
      v6 = (_QWORD *)v5;
      v7 = (TTypesetterAttrString *)(v5 + 48);
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = 0;
      v6[5] = v7;
      TTypesetterAttrString::TTypesetterAttrString(v7, v4, 0, 0);
      v16 = v6;
      do
        v8 = (void *)__ldaxr((unint64_t *)&v16);
      while (__stlxr(0, (unint64_t *)&v16));
      v15 = v8;

    }
    else
    {
      v15 = 0;
    }

    do
      v9 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    while (!__ldaxr(v1))
    {
      if (!__stlxr(v9, v1))
      {
        v11 = 1;
        goto LABEL_13;
      }
    }
    v11 = 0;
    __clrex();
LABEL_13:
    if (v11)
      v12 = 0;
    else
      v12 = (void *)v9;

  }
  return atomic_load(v1);
}

uint64_t TFramesetterUniChar::Typesetter(TFramesetterUniChar *this)
{
  return (uint64_t)this + 8;
}

uint64_t TFramesetterUniChar::GetTypesetter(TFramesetterUniChar *this)
{
  return 0;
}

void TFramesetterUniChar::~TFramesetterUniChar(TFramesetterUniChar *this)
{
  *(_QWORD *)this = &off_1E15DDCD8;
  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)this + 248);
  TLine::~TLine((TFramesetterUniChar *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E15DDCD8;
  std::shared_ptr<TextEncapsulationData>::~shared_ptr[abi:nn180100]((uint64_t)this + 248);
  TLine::~TLine((TFramesetterUniChar *)((char *)this + 8));
  JUMPOUT(0x186DC03ACLL);
}

void std::__function::__func<TASCIIDataCache::InitProps(void)::$_0,std::allocator<TASCIIDataCache::InitProps(void)::$_0>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TASCIIDataCache::InitProps(void)::$_0,std::allocator<TASCIIDataCache::InitProps(void)::$_0>,void ()(long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TASCIIDataCache::InitProps(void)::$_0,std::allocator<TASCIIDataCache::InitProps(void)::$_0>,void ()(long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0328;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TASCIIDataCache::InitProps(void)::$_1,std::allocator<TASCIIDataCache::InitProps(void)::$_1>,void ()(long)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TASCIIDataCache::InitProps(void)::$_1,std::allocator<TASCIIDataCache::InitProps(void)::$_1>,void ()(long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15E0370;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TASCIIDataCache::InitProps(void)::$_1,std::allocator<TASCIIDataCache::InitProps(void)::$_1>,void ()(long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15E0370;
  a2[1] = v2;
  return result;
}

uint64_t TAATMorphTable::AddCoveredGlyphs(TBaseFont **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t CommonTable;
  const __CFData *v9;
  BOOL v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v13;
  char v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  TBaseFont *v26;
  uint64_t v27;
  uint64_t InitializedGraphicsFont;
  uint64_t i;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  CFArrayRef v42;
  id v43;
  _QWORD *v44[4];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  void *values[3];
  const UInt8 *v50;
  const UInt8 *v51;
  _QWORD v52[73];

  v52[71] = *MEMORY[0x1E0C80C00];
  CommonTable = TBaseFont::GetCommonTable(a1[50], 1634561906, 0);
  if (!CommonTable)
    return 0;
  v9 = (const __CFData *)CommonTable;
  values[0] = a2;
  v10 = 1;
  v42 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
  BytePtr = CFDataGetBytePtr(v9);
  Length = CFDataGetLength(v9);
  v13 = &BytePtr[Length];
  if (BytePtr + 8 > &BytePtr[Length])
  {
    v35 = *(_QWORD *)(a4 + 24);
    if (!v35)
      goto LABEL_44;
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
    v10 = 0;
LABEL_38:

    return v10;
  }
  memset(v52, 170, 0x230uLL);
  v14 = *(_BYTE *)a1;
  LOBYTE(v52[3]) = 1;
  LOWORD(v52[13]) = -1;
  v52[7] = TAATLookupTable::BadTable;
  v52[8] = 0;
  v52[12] = 0;
  LOBYTE(v52[14]) = v14 & 1;
  v52[4] = &off_1E15DDED0;
  memset(&v52[19], 0, 24);
  v52[70] = &v52[22];
  values[0] = off_1E15DDAE8;
  values[1] = (void *)BytePtr;
  values[2] = (void *)v13;
  v50 = BytePtr + 8;
  v52[2] = a1;
  v51 = BytePtr + 8;
  v15 = *((_DWORD *)BytePtr + 1);
  if (!v15)
    goto LABEL_37;
  v37 = a4;
  v10 = 0;
  v16 = 0;
  v17 = bswap32(*(_DWORD *)BytePtr);
  v18 = bswap32(v15);
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = v18;
  v38 = v19;
  v39 = v18;
  v41 = HIWORD(v17);
  while (1)
  {
    if ((TAATMorphChainMorx::NextChain((TAATMorphChainMorx *)values, v41) & 1) == 0)
    {
      v33 = *(_QWORD *)(v37 + 24);
      if (!v33)
        goto LABEL_44;
LABEL_36:
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
LABEL_37:
      values[0] = off_1E15DDAE8;
      v43 = &v52[19];
      std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
      goto LABEL_38;
    }
    v40 = v10;
    TFontFeatureSettingList::TFontFeatureSettingList((TFontFeatureSettingList *)&v43, v42);
    v20 = TAATMorphChain::ResolveFlags((TAATMorphChain *)values, 0, (const TFontFeatureSettingList *)&v43, 0, 0);
    std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v46);
    std::__hash_table<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<TInlineVector<std::pair<unsigned short,unsigned short>,30ul>,KerningStatus>>>>::~__hash_table((uint64_t)&v45);
    std::__tree<std::__value_type<long,TAATDeltaYListEntry>,std::__map_value_compare<long,std::__value_type<long,TAATDeltaYListEntry>,std::less<long>,true>,std::allocator<std::__value_type<long,TAATDeltaYListEntry>>>::destroy((uint64_t)v44, v44[1]);

    v21 = *((_DWORD *)v50 + 3);
    if (v21)
      break;
LABEL_32:
    v10 = ++v16 >= v39;
    if (v16 == v38)
    {
      v10 = 1;
      goto LABEL_37;
    }
  }
  v22 = 0;
  v23 = bswap32(v21);
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  while (((*(uint64_t (**)(TAATMorphSubtableMorx *))(v52[4] + 16))((TAATMorphSubtableMorx *)&v52[4]) & 1) != 0)
  {
    if ((v52[5] & v20) == 0)
      goto LABEL_31;
    if (v22 < (uint64_t)(v52[20] - v52[19]) >> 3)
    {
      v25 = *(_QWORD *)(v52[19] + 8 * v22);
      if (v25)
      {
        v26 = a1[50];
        v27 = *((_QWORD *)v26 + 25);
        if (!v27)
        {
          InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(a1[50]);
          v27 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v26 + 872))(v26, InitializedGraphicsFont);
        }
        if (v27 >= 1)
        {
          for (i = 0; i != v27; ++i)
          {
            if (((*(unsigned __int8 *)(v25 + ((unsigned __int16)i >> 3)) >> (i & 7)) & 1) != 0)
              std::function<void ()(unsigned short,unsigned short)>::operator()(a3, i, i);
          }
        }
        goto LABEL_31;
      }
    }
    std::__function::__value_func<BOOL ()(unsigned short,unsigned short,unsigned short)>::__value_func[abi:nn180100]((uint64_t)v47, a3);
    v30 = TAATMorphSubtableMorx::AddShapingGlyphs((uint64_t)&v52[4], (uint64_t)v47);
    v31 = v48;
    if (v48 == v47)
    {
      v31 = v47;
      v32 = 4;
    }
    else
    {
      if (!v48)
        goto LABEL_30;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_30:
    if ((v30 & 1) == 0)
      break;
LABEL_31:
    if (++v22 == v24)
      goto LABEL_32;
  }
  v33 = *(_QWORD *)(v37 + 24);
  v10 = v40;
  if (v33)
    goto LABEL_36;
LABEL_44:
  v36 = std::__throw_bad_function_call[abi:nn180100]();
  return TAATMorphTable::AddShapingLanguages(v36);
}

BOOL TAATMorphTable::AddShapingLanguages(TBaseFont *a1, uint64_t a2)
{
  uint64_t CommonTable;
  const __CFDictionary *v6;
  CFIndex Count;
  __int128 v8;
  char *v9;
  const __CFDictionary *v10;
  uint64_t i;
  uint64_t v12;
  id v14;
  void ***p_keys;
  void **keys;
  void *v17;
  uint64_t v18;
  _OWORD v19[15];
  _OWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  CommonTable = TBaseFont::GetCommonTable(a1, 1634561906, 0);
  if (CommonTable)
  {
    v14 = (id)0xAAAAAAAAAAAAAAAALL;
    TAATLtagTable::TAATLtagTable((TAATLtagTable *)&keys, a1);
    TAATLtagTable::CopyLanguageTags((TAATLtagTable *)&keys, (unint64_t *)&v14);
    if (atomic_load((unint64_t *)&v14))
    {
      v6 = (const __CFDictionary *)atomic_load((unint64_t *)&v14);
      Count = CFDictionaryGetCount(v6);
      *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v19[14] = v8;
      v19[13] = v8;
      v19[12] = v8;
      v19[11] = v8;
      v19[10] = v8;
      v19[9] = v8;
      v19[8] = v8;
      v19[7] = v8;
      v19[6] = v8;
      v19[4] = v8;
      v19[5] = v8;
      v19[2] = v8;
      v19[3] = v8;
      v19[0] = v8;
      v19[1] = v8;
      v17 = 0;
      v18 = 0;
      keys = 0;
      v20 = v19;
      if (Count)
      {
        std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&keys, Count);
        v9 = (char *)v17;
        bzero(v17, 8 * Count);
        v17 = &v9[8 * Count];
      }
      v10 = (const __CFDictionary *)atomic_load((unint64_t *)&v14);
      CFDictionaryGetKeysAndValues(v10, (const void **)keys, 0);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          p_keys = (void ***)keys[i];
          v12 = *(_QWORD *)(a2 + 24);
          if (!v12)
            std::__throw_bad_function_call[abi:nn180100]();
          (*(void (**)(uint64_t, void ****))(*(_QWORD *)v12 + 48))(v12, &p_keys);
        }
      }
      p_keys = &keys;
      std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_keys);
    }

  }
  return CommonTable != 0;
}

void std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0>,BOOL ()(TRunGlue::TGlyph)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0>,BOOL ()(TRunGlue::TGlyph)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15E00E8;
  return result;
}

void std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_0>,BOOL ()(TRunGlue::TGlyph)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E00E8;
}

void std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1>,BOOL ()(TRunGlue::TGlyph)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1>,BOOL ()(TRunGlue::TGlyph)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15E0130;
  return result;
}

void std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1>,BOOL ()(TRunGlue::TGlyph)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0130;
}

BOOL std::__function::__func<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1,std::allocator<TAATMorphTable::ShapeGlyphs(SyncState &,__CFString const*)::$_1>,BOOL ()(TRunGlue::TGlyph)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return TRunGlue::TGlyph::IsIgnorable((TRunGlue::TGlyph *)&v3);
}

void std::__function::__func<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0,std::allocator<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0>,BOOL ()(TRunGlue::TGlyph)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0,std::allocator<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0>,BOOL ()(TRunGlue::TGlyph)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E15E0178;
  return result;
}

void std::__function::__func<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0,std::allocator<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0>,BOOL ()(TRunGlue::TGlyph)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E15E0178;
}

BOOL std::__function::__func<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0,std::allocator<TAATMorphTable::ShapeGlyphsWithMultipleFeatureSettings(SyncState &)::$_0>,BOOL ()(TRunGlue::TGlyph)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return TRunGlue::TGlyph::IsIgnorable((TRunGlue::TGlyph *)&v3);
}

void TAATMorphTableMorx::~TAATMorphTableMorx(TAATMorphTableMorx *this)
{
  void **v1;

  *(_QWORD *)this = off_1E15DDB28;
  *((_QWORD *)this + 8) = off_1E15DDAE8;
  v1 = (void **)((char *)this + 256);
  std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E15DDB28;
  *((_QWORD *)this + 8) = off_1E15DDAE8;
  v2 = (void **)((char *)this + 256);
  std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x186DC03AC](this, 0x10F3C406B59EFBDLL);
}

void TAATMorphChainMorx::~TAATMorphChainMorx(TAATMorphChainMorx *this)
{
  void **v1;

  *(_QWORD *)this = off_1E15DDAE8;
  v1 = (void **)((char *)this + 192);
  std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E15DDAE8;
  v2 = (void **)((char *)this + 192);
  std::vector<unsigned char const*,TInlineBufferAllocator<unsigned char const*,48ul>>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x186DC03AC](this, 0x10F3C4076A4214ELL);
}

BOOL TAATMorphChainMorx::HasCoverage(TAATMorphChainMorx *this)
{
  return *((_QWORD *)this + 24) != *((_QWORD *)this + 25);
}

uint64_t TTateChuYokoRun::TTateChuYokoRun(uint64_t a1, uint64_t a2)
{
  TRun *v3;

  TRun::TRun((TRun *)a1, *(const TRun **)(a2 + 40));
  *(_QWORD *)v3 = &off_1E15DD820;
  *(double *)(a1 + 320) = TRun::GetAscent(v3);
  *(double *)(a1 + 328) = TRun::GetDescent((TRun *)a1);
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void TTateChuYokoRun::TTateChuYokoRun(TTateChuYokoRun *this, const TTateChuYokoRun *a2)
{
  TRun *v3;

  TRun::TRun(this, a2);
  *(_QWORD *)v3 = &off_1E15DD820;
  *((double *)this + 40) = TRun::GetAscent(v3);
  *((double *)this + 41) = TRun::GetDescent(this);
  *((_QWORD *)this + 42) = 0;
}

uint64_t TTateChuYokoRun::TTateChuYokoRun(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  TRun *v6;

  v6 = (TRun *)TRun::TRun(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = &off_1E15DD820;
  *(double *)(a1 + 320) = TRun::GetAscent(v6);
  *(double *)(a1 + 328) = TRun::GetDescent((TRun *)a1);
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void TTateChuYokoRun::CacheGlyphPositions(double **this, double *a2, double *a3)
{
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double *v9;

  v4 = *a2;
  v5 = *a3;
  TRun::CacheGlyphPositions((TRun *)this, a2, a3);
  v6 = this[39];
  if (!v6)
    v6 = (double *)MEMORY[0x1E0C9D820];
  v7 = *((double *)this + 24) + *v6;
  v8 = *((double *)this + 40) + *((double *)this + 41);
  if (v8 > v7 || vabdd_f64(v8, v7) < 0.001)
  {
    TRun::GetPositions((__n128 *)this, 0);
    *((double *)this + 42) = *v9 - v4 - v5;
  }
}

void TTateChuYokoRun::DrawGlyphsAtPositions(double *a1, CGContext *a2, CFRange a3, CGPoint *a4, const TAttributes **a5)
{
  TRun::DrawRotatedGlyphsAtPositions((TRun *)a1, a2, a3, a4, a5, a1[42]);
}

void TTateChuYokoRun::GetImageBounds(__n128 *this, CGContext *a2, CFRange a3, double *a4, double *a5)
{
  CFIndex length;
  CFIndex location;
  double v11;
  double v12;
  double ImageBounds;
  double v14;
  uint64_t v15;
  double v17;
  double v18;
  double v19;
  CGAffineTransform v20;
  CGSize v21;
  CFRange v22;

  length = a3.length;
  location = a3.location;
  v21.width = NAN;
  v21.height = NAN;
  TRun::GetPositions(this, &v21);
  v11 = *a4;
  v12 = *a5;
  v22.location = location;
  v22.length = length;
  ImageBounds = TRun::GetImageBounds((TRun *)this, a2, v22, a4, a5);
  v17 = this[21].n128_f64[0];
  if (v17 != 0.0)
  {
    v18 = ImageBounds - (v12 + v11 * 0.0 + 0.0 - v17);
    v19 = v14 - (v12 * 0.0 - v11 + 0.0 - v17);
    v20 = *(CGAffineTransform *)kRotateLeftTransform;
    CGRectApplyAffineTransform(*(CGRect *)(&v15 - 2), &v20);
  }
}

void TTateChuYokoRun::~TTateChuYokoRun(void **this)
{
  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TTateChuYokoRun::FindBreak@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const TCharStream *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t result;

  *(_OWORD *)a5 = xmmword_18492FFA0;
  *(_QWORD *)(a5 + 16) = -1;
  result = TRun::FindBreak(a1, a2, a3, a4, a5, a6);
  *(_BYTE *)a5 |= 8u;
  return result;
}

double TTateChuYokoRun::GetAscent(TTateChuYokoRun *this)
{
  return *((double *)this + 40);
}

double TTateChuYokoRun::GetDescent(TTateChuYokoRun *this)
{
  return *((double *)this + 41);
}

double TTateChuYokoRun::GetLeading(TTateChuYokoRun *this)
{
  return 0.0;
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithVariation(CTFontDescriptorRef original, CFNumberRef variationIdentifier, CGFloat variationValue)
{
  void *v3;
  const __CTFontDescriptor *v4;
  int v6;
  CTFontDescriptorRef v7;
  id v8;
  id v9;
  CGFloat v10;
  CFNumberRef v11;

  v11 = variationIdentifier;
  v10 = variationValue;
  if (!original)
    return 0;
  if (variationIdentifier)
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    v7 = original;
    v6 = 0;
    TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFNumber const*&,double &,int>((uint64_t *)&v7, &v11, &v10, &v6, (unint64_t *)&v8);
    do
      v3 = (void *)__ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    v9 = v3;

    do
      v4 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v9);
    while (__stlxr(0, (unint64_t *)&v9));

    return v4;
  }
  return original;
}

void TCFBase_NEW<CTFontDescriptor,CTFontDescriptor*,__CFNumber const*&,double &,int>(uint64_t *a1@<X0>, const __CFNumber **a2@<X1>, double *a3@<X2>, int *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const __CFNumber *v13;
  double v14;
  int v15;
  TDescriptor *v16;
  unint64_t v17;
  id v18;

  v10 = TCFBase<TDescriptor>::Allocate();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = *a1;
    v13 = *a2;
    v14 = *a3;
    v15 = *a4;
    v16 = (TDescriptor *)(v10 + 48);
    v11[2] = 0;
    v11[3] = TDescriptor::Hash;
    v11[4] = 0;
    v11[5] = v16;
    TDescriptor::TDescriptor(v16, *(const TDescriptor **)(v12 + 40), v13, v14, v15);
    v18 = v11;
    do
      v17 = __ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    *a5 = v17;

  }
  else
  {
    *a5 = 0;
  }
}

CFTypeRef CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute, CFStringRef *language)
{
  const void *v3;
  id v5;

  v3 = 0;
  if (descriptor && attribute)
  {
    TDescriptor::CopyLocalizedAttribute(*((TDescriptor **)descriptor + 5), attribute, language, (unint64_t *)&v5);
    do
      v3 = (const void *)__ldaxr((unint64_t *)&v5);
    while (__stlxr(0, (unint64_t *)&v5));

  }
  return v3;
}

unint64_t CTFontDescriptorsCopyLocalizedAttribute(const __CFArray *a1, const __CFString *a2)
{
  CFIndex Count;
  CFMutableArrayRef Mutable;
  CFIndex v6;
  CFIndex v7;
  CFIndex i;
  TDescriptor **ValueAtIndex;
  __CFArray *v10;
  const void *v11;
  unint64_t v12;
  id v14;
  id v15;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    v6 = CFArrayGetCount(a1);
    v15 = Mutable;
    if (v6)
    {
      v7 = v6;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = (TDescriptor **)CFArrayGetValueAtIndex(a1, i);
        TDescriptor::CopyLocalizedAttribute(ValueAtIndex[5], a2, 0, (unint64_t *)&v14);
        v10 = (__CFArray *)atomic_load((unint64_t *)&v15);
        v11 = (const void *)atomic_load((unint64_t *)&v14);
        CFArrayAppendValue(v10, v11);

      }
    }
  }
  else
  {
    v15 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  }
  do
    v12 = __ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));

  return v12;
}

unint64_t CTFontDescriptorsCopyAttributes(const __CFArray *a1, const __CFSet *a2)
{
  return CTFontDescriptorsCopyAttributesInternal(a1, a2);
}

uint64_t CTFontDescriptorIsValid(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 40);
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(result + 40), 0, 0.0);
    v2 = atomic_load((unint64_t *)(v1 + 32));
    if (v2)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 744))(v2);
    else
      return 1;
  }
  return result;
}

uint64_t CTFontDescriptorIsVisible(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 40);
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(result + 40), 0, 0.0);
    v2 = atomic_load((unint64_t *)(v1 + 32));
    if (v2)
      return (*(unsigned int (**)(unint64_t))(*(_QWORD *)v2 + 696))(v2) ^ 1;
    else
      return 1;
  }
  return result;
}

uint64_t CTFontDescriptorIsAppleFont(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(a1 + 40), 0, 0.0);
  v2 = atomic_load((unint64_t *)(v1 + 32));
  if (v2)
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 704))(v2);
  else
    return 0;
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithFamily(CTFontDescriptorRef original, CFStringRef family)
{
  uint64_t v3;
  unint64_t v4;
  const __CTFontDescriptor *v5;
  id v7;

  if (!original)
    return 0;
  v3 = *((_QWORD *)original + 5);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*((TDescriptor **)original + 5), 0, 0.0);
  v4 = atomic_load((unint64_t *)(v3 + 32));
  if (!v4)
    return 0;
  (*(void (**)(id *__return_ptr, unint64_t, CFStringRef))(*(_QWORD *)v4 + 752))(&v7, v4, family);
  do
    v5 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));

  return v5;
}

double CTFontDescriptorGetLanguageAwareTextStyleSize(TDescriptorSource *a1, const __CFString *a2, uint64_t *a3, const __CFString **a4, double *a5, const __CFString *a6)
{
  return TDescriptorSource::GetTextStyleSize(a1, a2, a3, a4, a5, 1, a6);
}

BOOL CTFontDescriptorHasPostScriptNameAlias(uint64_t a1, __CFString *a2)
{
  uint64_t v3;
  TBaseFont *v4;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v3 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(a1 + 40), 0, 0.0);
  v4 = (TBaseFont *)atomic_load((unint64_t *)(v3 + 32));
  return v4 && TBaseFont::HasPostScriptNameAlias(v4, a2);
}

unint64_t CTFontDescriptorCreateForCSSFamily(const __CFString *a1, __CFString *a2)
{
  unint64_t v4;
  TPurgeableCache *v6;
  id v7;

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v6);
  TDescriptorSource::CreateDescriptorForCSSFamily(&v6, a1, a2, (unint64_t *)&v7);
  do
    v4 = __ldaxr((unint64_t *)&v7);
  while (__stlxr(0, (unint64_t *)&v7));

  return v4;
}

unint64_t CTFontDescriptorCreateLastResort()
{
  unint64_t v0;
  uint64_t v2;
  id v3;

  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v2);
  TDescriptorSource::CopyLastResort((unint64_t *)&v3);
  do
    v0 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v0;
}

unint64_t CTFontDescriptorCopyName(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  id v7;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if ((*(_DWORD *)(v4 + 16) & 0x80000000) == 0)
      TDescriptor::InitBaseFont(*(TDescriptor **)(a1 + 40), 0, 0.0);
    v5 = atomic_load((unint64_t *)(v4 + 32));
    if (v5)
    {
      (*(void (**)(id *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v5 + 72))(&v7, v5, a2);
      do
        v2 = __ldaxr((unint64_t *)&v7);
      while (__stlxr(0, (unint64_t *)&v7));

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id CTFontDescriptorGetClientObject(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v5;

  if (!a1)
    return 0;
  v1 = (void *)atomic_load((unint64_t *)(*(_QWORD *)(a1 + 40) + 40));
  v5 = v1;
  do
    v2 = (void *)__ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  v3 = v2;

  return v3;
}

void CTFontDescriptorSetClientObject(uint64_t a1, void *a2)
{
  if (a1)
    TCFRef<__CTFont const*>::Retain((unint64_t *)(*(_QWORD *)(a1 + 40) + 40), a2);
}

unint64_t CTFontDescriptorCopyDefaultCascadeListForLanguages(uint64_t a1, __CFArray *a2)
{
  return CTFontDescriptorCopyDefaultCascadeListForLanguagesWithOption(a1, a2, -1);
}

unint64_t CTFontDescriptorCopyDefaultCascadeListForLanguagesWithOption(uint64_t a1, __CFArray *a2, uint64_t a3)
{
  uint64_t v4;
  TBaseFont *v5;
  void *v6;
  id v7;
  void *v8;
  const __CFNumber *v9;
  unint64_t v10;
  TDescriptor *CanonicalLanguages;
  int v12;
  _BOOL4 v13;
  char v14;
  const __CFArray *v15;
  id v17;
  id v18;
  uint64_t valuePtr;

  valuePtr = a3;
  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v4 + 16) & 0x80000000) == 0)
    TDescriptor::InitBaseFont(*(TDescriptor **)(a1 + 40), 0, 0.0);
  v5 = (TBaseFont *)atomic_load((unint64_t *)(v4 + 32));
  if (!v5)
    return 0;
  if (valuePtr == -1)
  {
    TDescriptor::CopyAttribute((TDescriptor *)v4, CFSTR("NSCTFontFallbackOptionAttribute"), 54, &v18);
    do
      v6 = (void *)__ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));

    v7 = v6;
    v8 = v7;
    if (v7)
    {
      v9 = (const __CFNumber *)v7;
      CFNumberGetValue(v9, kCFNumberLongType, &valuePtr);

    }
    else
    {
      valuePtr = 3;
    }

  }
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  CanonicalLanguages = (TDescriptor *)CreateCanonicalLanguages(a2, (unint64_t *)&v18);
  v12 = *(_DWORD *)(v4 + 16);
  v13 = (TDescriptor::GetSystemUIFontOptions(CanonicalLanguages) & v12) != 0;
  v14 = valuePtr;
  v15 = (const __CFArray *)atomic_load((unint64_t *)&v18);
  TBaseFont::CreateFallbacks(v5, v13, v14, 0, v15, (unint64_t *)&v17);
  do
    v10 = __ldaxr((unint64_t *)&v17);
  while (__stlxr(0, (unint64_t *)&v17));

  return v10;
}

CFComparisonResult CTFontDescriptorsCopyAttributesInternal(__CFArray const*,__CFSet const*,unsigned int,BOOL)::$_0::__invoke(_QWORD ***a1, _QWORD ***a2)
{
  return CompareLocalizedDescriptorsByTraitsAndPrecedence(**a1, **a2, 0, 1, 1, 1);
}

void TCFMutableDictionary::TCFMutableDictionary(TCFMutableDictionary *this, CFDictionaryRef theDict)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)this = MutableCopy;
}

uint64_t TCFBase<TDescriptor>::ClassDebug(uint64_t a1)
{
  uint64_t result;
  const void *v3;
  CFStringRef v4;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = (const void *)result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTFontDescriptor", a1, result);
    CFRelease(v3);
    return (uint64_t)v4;
  }
  return result;
}

void TCFBase_NEW<CTFontDescriptor,__CFString const*&,double &,unsigned int &>(__CFString **a1@<X0>, double *a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  __CFString *v10;
  double v11;
  int v12;
  TDescriptor *v13;
  unint64_t v14;
  id v15;

  v8 = TCFBase<TDescriptor>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = *a1;
    v11 = *a2;
    v12 = *a3;
    v13 = (TDescriptor *)(v8 + 48);
    v9[2] = 0;
    v9[3] = TDescriptor::Hash;
    v9[4] = 0;
    v9[5] = v13;
    TDescriptor::TDescriptor(v13, v10, v11, v12);
    v15 = v9;
    do
      v14 = __ldaxr((unint64_t *)&v15);
    while (__stlxr(0, (unint64_t *)&v15));
    *a4 = v14;

  }
  else
  {
    *a4 = 0;
  }
}

CTFontRef CTFontCreateWithFontDescriptorAndOptions(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  TDescriptor *v7;
  int v8;
  uint64_t SystemUIFontOptions;
  uint64_t v10;
  uint64_t v11;
  int v13;
  TDescriptor *v14;
  _BOOL4 v15;
  unint64_t v16;
  void *v17;
  const __CTFontDescriptor *v18;
  void *v19;
  const __CTFont *v20;
  void *v21;
  const __CTFontDescriptor *v22;
  const __CTFontDescriptor *v24;
  id v25;
  id v26;
  id v27;
  CGAffineTransform *matrixa;
  CGFloat sizea;
  CTFontDescriptorRef v30;

  v30 = descriptor;
  sizea = size;
  matrixa = (CGAffineTransform *)matrix;
  if (!descriptor)
    return 0;
  v7 = (TDescriptor *)*((_QWORD *)descriptor + 5);
  v8 = *((_DWORD *)v7 + 4);
  SystemUIFontOptions = TDescriptor::GetSystemUIFontOptions(descriptor);
  if ((SystemUIFontOptions & v8) == 0)
  {
    SystemUIFontOptions = TFont::GetSystemUIFontOptions((TFont *)SystemUIFontOptions);
    if ((SystemUIFontOptions & options) != 0)
    {
      v27 = (id)0xAAAAAAAAAAAAAAAALL;
      v25 = descriptor;
      do
        v21 = (void *)__ldaxr((unint64_t *)&v25);
      while (__stlxr(0, (unint64_t *)&v25));
      v26 = v21;
      TDescriptorSource::CopyPossibleSystemUIFontDescriptor((unint64_t *)&v26, 1, (unint64_t *)&v27);

      v22 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v27);
      v20 = CTFontCreateWithFontDescriptorAndOptions(v22, sizea, matrixa, options);
      goto LABEL_21;
    }
  }
  v10 = TFont::GetSystemUIFontOptions((TFont *)SystemUIFontOptions);
  v11 = options & 0x85 | 0x400;
  if ((v10 & options) == 0)
    v11 = options & 0x85;
  v27 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptor::CreateMatchingDescriptor(v7, 0, size, (options >> 1) & 0x10000 | (((options >> 1) & 1) << 9) | v11, (TDescriptor *)&v27);
  if (atomic_load((unint64_t *)&v27))
    goto LABEL_11;
  if ((options & 0x20000000) == 0)
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v25);
    v13 = *((_DWORD *)v7 + 4);
    v15 = (TDescriptor::GetSystemUIFontOptions(v14) & v13) != 0;
    TDescriptorSource::CreateDefaultDescriptor(v15, (unint64_t *)&v26);
    do
      v16 = __ldaxr((unint64_t *)&v26);
    while (__stlxr(0, (unint64_t *)&v26));
    do
      v17 = (void *)__ldaxr((unint64_t *)&v27);
    while (__stlxr(v16, (unint64_t *)&v27));

LABEL_11:
    v26 = (id)0xAAAAAAAAAAAAAAAALL;
    v18 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v27);
    v24 = v18;
    TCFBase_NEW<CTFont,__CTFontDescriptor const*,double &,CGAffineTransform const*&,__CTFontDescriptor const*&>(&v24, &sizea, &matrixa, &v30, (unint64_t *)&v25);
    do
      v19 = (void *)__ldaxr((unint64_t *)&v25);
    while (__stlxr(0, (unint64_t *)&v25));
    v26 = v19;

    do
      v20 = (const __CTFont *)__ldaxr((unint64_t *)&v26);
    while (__stlxr(0, (unint64_t *)&v26));

    goto LABEL_21;
  }
  v20 = 0;
LABEL_21:

  return v20;
}

CTFontRef CTFontCreateCopyWithSymbolicTraits(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  uint64_t v5;
  const __CTFontDescriptor *v10;
  const __CTFontDescriptor *CopyWithSymbolicTraits;
  const __CTFontDescriptor *v12;
  const __CTFont *v13;
  id v15;

  if (!font)
    return 0;
  v5 = *((_QWORD *)font + 5);
  if (!*(_QWORD *)(v5 + 400))
    return 0;
  v15 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CopyDescriptor((TFont *)v5, 0, (unint64_t *)&v15);
  v10 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v15);
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v10, symTraitValue, symTraitMask);
  v12 = CopyWithSymbolicTraits;
  if (CopyWithSymbolicTraits)
  {
    if (size == 0.0)
      size = *(double *)(v5 + 16);
    v13 = CTFontCreateWithFontDescriptor(CopyWithSymbolicTraits, size, matrix);
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

CTFontRef CTFontCreateCopyWithFamily(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CFStringRef family)
{
  uint64_t v4;
  uint64_t v5;
  const __CTFontDescriptor *v9;
  const __CTFont *v10;
  id v12;

  if (!font)
    return 0;
  v4 = *((_QWORD *)font + 5);
  v5 = *(_QWORD *)(v4 + 400);
  if (!v5)
    return 0;
  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t, CFStringRef))(*(_QWORD *)v5 + 752))(&v12, v5, family);
  if (atomic_load((unint64_t *)&v12))
  {
    if (size == 0.0)
      size = *(double *)(v4 + 16);
    v9 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v12);
    v10 = CTFontCreateWithFontDescriptor(v9, size, matrix);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

CTFontRef CTFontCreateForString(CTFontRef currentFont, CFStringRef string, CFRange range)
{
  return CTFontCreateForStringWithLanguage(currentFont, string, range, 0);
}

CTFontRef CTFontCreateForStringWithLanguage(CTFontRef currentFont, CFStringRef string, CFRange range, CFStringRef language)
{
  const __CTFont *v4;
  CFIndex length;
  CFIndex location;
  uint64_t v10;
  __int128 v11;
  const UniChar *CharactersPtr;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  UniChar *buffer[3];
  _OWORD v31[4];
  _OWORD *v32;
  uint64_t v33;
  CFRange v34;

  v4 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  if (currentFont && string)
  {
    length = range.length;
    location = range.location;
    if (range.location + range.length > CFStringGetLength(string))
    {
      return 0;
    }
    else
    {
      v10 = *((_QWORD *)currentFont + 5);
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v31[2] = v11;
      v31[3] = v11;
      v31[0] = v11;
      v31[1] = v11;
      memset(buffer, 0, sizeof(buffer));
      v32 = v31;
      CharactersPtr = CFStringGetCharactersPtr(string);
      if (CharactersPtr)
      {
        v13 = (unsigned __int16 *)&CharactersPtr[location];
      }
      else
      {
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize((uint64_t)buffer, length);
        v34.location = location;
        v34.length = length;
        CFStringGetCharacters(string, v34, buffer[0]);
        v13 = buffer[0];
      }
      v14 = (*(uint64_t (**)(_QWORD, unsigned __int16 *, CFIndex))(**(_QWORD **)(v10 + 400) + 816))(*(_QWORD *)(v10 + 400), v13, length);
      if (v14)
        v16 = 0;
      else
        v16 = v15 == length;
      if (v16
        || ((v17 = v15, v14 + location == CFStringGetRangeOfCharacterClusterAtIndex()) ? (v19 = v17 == v18) : (v19 = 0),
            v19))
      {
        v4 = currentFont;
      }
      else
      {
        v27 = (id)0xAAAAAAAAAAAAAAAALL;
        v28 = 0;
        v20 = TCFBase<TFont>::Allocate();
        if (v20)
        {
          v21 = (_QWORD *)v20;
          v22 = v20 + 48;
          v21[2] = 0;
          v21[3] = TFont::Hash;
          v21[4] = 0;
          v21[5] = v22;
          TFont::TFont(v22, (unsigned int *)v10, v13, length, (__CFString *)language, 0xFFFFFFFFFFFFFFFFLL, 0, &v28);
          v29 = v21;
          do
            v23 = (void *)__ldaxr((unint64_t *)&v29);
          while (__stlxr(0, (unint64_t *)&v29));
          v26 = v23;

        }
        else
        {
          v26 = 0;
        }
        do
          v24 = (void *)__ldaxr((unint64_t *)&v26);
        while (__stlxr(0, (unint64_t *)&v26));
        v27 = v24;

        do
          v4 = (const __CTFont *)__ldaxr((unint64_t *)&v27);
        while (__stlxr(0, (unint64_t *)&v27));

      }
      v29 = buffer;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
    }
  }
  return v4;
}

_QWORD *CTFontCreateForCharacters(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  return CTFontCreateForCharactersWithLanguageAndOption(a1, a2, a3, 0, 0xFFFFFFFFFFFFFFFFLL, a4);
}

void TCFBase_NEW<CTFont,__CTFontDescriptor const*,double &,decltype(nullptr),decltype(nullptr)>(const __CTFontDescriptor **a1@<X0>, double *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  const __CTFontDescriptor *v8;
  double v9;
  TFont *v10;
  unint64_t v11;
  id v12;

  v6 = TCFBase<TFont>::Allocate();
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = *a1;
    v9 = *a2;
    v10 = (TFont *)(v6 + 48);
    v7[2] = 0;
    v7[3] = TFont::Hash;
    v7[4] = 0;
    v7[5] = v10;
    TFont::TFont(v10, v8, v9, 0, 0);
    v12 = v7;
    do
      v11 = __ldaxr((unint64_t *)&v12);
    while (__stlxr(0, (unint64_t *)&v12));
    *a3 = v11;

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t CTFontGetPhysicalSymbolicTraits(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 528))(v1);
  else
    return 0;
}

unint64_t CTFontCreateForCharacterRange(uint64_t a1, const unsigned __int16 *a2, uint64_t a3, CFRange *a4)
{
  const TFont *v7;
  uint64_t v8;
  _QWORD *v9;
  TFont *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  id v15;
  id v16;
  CFRange v17;
  id v18;

  if (!a1)
    return 0;
  v7 = *(const TFont **)(a1 + 40);
  v17.location = 0;
  v17.length = 0;
  v16 = (id)0xAAAAAAAAAAAAAAAALL;
  v8 = TCFBase<TFont>::Allocate();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (TFont *)(v8 + 48);
    v9[2] = 0;
    v9[3] = TFont::Hash;
    v9[4] = 0;
    v9[5] = v10;
    TFont::TFont(v10, v7, a2, a3, &v17);
    v18 = v9;
    do
      v11 = (void *)__ldaxr((unint64_t *)&v18);
    while (__stlxr(0, (unint64_t *)&v18));
    v15 = v11;

  }
  else
  {
    v15 = 0;
  }
  do
    v12 = (void *)__ldaxr((unint64_t *)&v15);
  while (__stlxr(0, (unint64_t *)&v15));
  v16 = v12;

  if (a4)
    *a4 = v17;
  do
    v13 = __ldaxr((unint64_t *)&v16);
  while (__stlxr(0, (unint64_t *)&v16));

  return v13;
}

CFDictionaryRef CTFontCopyTraits(CTFontRef font)
{
  const __CFDictionary *v1;
  id v3;

  if (!font)
    return 0;
  TBaseFont::CopyTraits(*(TBaseFont **)(*((_QWORD *)font + 5) + 400), **((_DWORD **)font + 5) & 1, (unint64_t *)&v3);
  do
    v1 = (const __CFDictionary *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

double CTFontGetWidth(uint64_t a1)
{
  double v1;
  unint64_t *v2;
  unint64_t TraitsValues;

  v1 = 0.0;
  if (a1)
  {
    v2 = *(unint64_t **)(*(_QWORD *)(a1 + 40) + 400);
    if (v2)
    {
      TraitsValues = atomic_load(v2 + 30);
      if (TraitsValues)
        return *(double *)(TraitsValues + 16);
      TraitsValues = TBaseFont::CreateTraitsValues((TBaseFont *)v2);
      if (TraitsValues)
        return *(double *)(TraitsValues + 16);
    }
  }
  return v1;
}

uint64_t CTFontCopyQuickdrawInstances()
{
  return 0;
}

CFStringRef CTFontCopyDisplayName(CTFontRef font)
{
  const __CFString *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, const __CFString *, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)font + 5) + 400)
                                                                                       + 88))(&v3, *(_QWORD *)(*((_QWORD *)font + 5) + 400), CFSTR("CTFontFullName"), 0, 0);
  do
    v1 = (const __CFString *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFStringRef CTFontCopyName(CTFontRef font, CFStringRef nameKey)
{
  const __CFString *v2;
  id v4;

  v2 = 0;
  if (font && nameKey)
  {
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 72))(&v4);
    do
      v2 = (const __CFString *)__ldaxr((unint64_t *)&v4);
    while (__stlxr(0, (unint64_t *)&v4));

  }
  return v2;
}

unint64_t CTFontCopyOTName(uint64_t a1, int a2)
{
  unint64_t v2;
  id v4;

  v2 = 0;
  if (a1 && a2 < 0)
  {
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 80))(&v4);
    do
      v2 = __ldaxr((unint64_t *)&v4);
    while (__stlxr(0, (unint64_t *)&v4));

  }
  return v2;
}

CFStringRef CTFontCopyLocalizedName(CTFontRef font, CFStringRef nameKey, CFStringRef *actualLanguage)
{
  const __CFString *v3;
  id v5;

  v3 = 0;
  if (font && nameKey)
  {
    (*(void (**)(id *__return_ptr, _QWORD, CFStringRef, _QWORD, CFStringRef *))(**(_QWORD **)(*((_QWORD *)font + 5) + 400)
                                                                                         + 88))(&v5, *(_QWORD *)(*((_QWORD *)font + 5) + 400), nameKey, 0, actualLanguage);
    do
      v3 = (const __CFString *)__ldaxr((unint64_t *)&v5);
    while (__stlxr(0, (unint64_t *)&v5));

  }
  return v3;
}

unint64_t CTFontCopyLocalizedNameWithLanguages(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  id v5;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 88))(&v5);
    do
      v3 = __ldaxr((unint64_t *)&v5);
    while (__stlxr(0, (unint64_t *)&v5));

  }
  return v3;
}

unint64_t CTFontCopyLocalizedNameByIDWithLanguages(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  id v5;

  v3 = 0;
  if (a1 && a3)
  {
    (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 96))(&v5);
    do
      v3 = __ldaxr((unint64_t *)&v5);
    while (__stlxr(0, (unint64_t *)&v5));

  }
  return v3;
}

unint64_t CTFontCopyLogicalCharacterSet(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 768))(&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFStringEncoding CTFontGetStringEncoding(CTFontRef font)
{
  if (font)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 416))(*(_QWORD *)(*((_QWORD *)font + 5) + 400));
  else
    return 256;
}

uint64_t CTFontGetGlyphsForCharacterRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400);
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 672))(result, a3, a4, a2);
      return 1;
    }
  }
  return result;
}

unint64_t CTFontGetGlyphsAndAdvancesForCharacterRange(uint64_t a1, _WORD *a2, double *a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  _WORD *v7;
  double *v8;
  uint64_t v9;
  TBaseFont *v10;
  uint64_t v11;
  uint64_t v12;
  double UnscaledTrackAmount;
  double a;
  os_unfair_lock_s *v15;
  int8x16_t *v16;
  double v17;
  int32x2_t v18;
  int64x2_t v19;
  __int16 v20;
  double v21;
  CGAffineTransform v22;

  result = 0;
  if (a1)
  {
    v7 = a2;
    if (a2)
    {
      v8 = a3;
      if (a3)
      {
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(TBaseFont **)(v9 + 400);
        if (v10)
        {
          v11 = a5;
          v12 = a4;
          if (a4 + a5 < 257 || *(_BYTE *)(v9 + 392))
            goto LABEL_9;
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v10 + 712))(*(_QWORD *)(v9 + 400)))
          {
            v10 = *(TBaseFont **)(v9 + 400);
LABEL_9:
            (*(void (**)(TBaseFont *, uint64_t, uint64_t, _WORD *))(*(_QWORD *)v10 + 672))(v10, v12, v11, v7);
            TFont::GetAdvancesForGlyphs(v9, (uint64_t)v7, v8, 2, v11, 0, 0, 0);
            return 1;
          }
          UnscaledTrackAmount = TFont::GetUnscaledTrackAmount((TFont *)v9);
          TFont::GetScaledMatrix((TFont *)v9, &v22);
          a = v22.a;
          result = TBaseFont::AcquireBMPDataCache(v10);
          if (result)
          {
            v15 = (os_unfair_lock_s *)result;
            v22.b = 0.0;
            v22.c = -3.72066279e-103;
            *(_QWORD *)&v22.a = result;
            if (v11 >= 1)
            {
              v16 = (int8x16_t *)MEMORY[0x1E0C9D820];
              do
              {
                TBMPDataCache::Iterator::GetDataForCharacter((TBMPDataCache::Iterator *)&v22, v12, (uint64_t)&v20);
                v17 = v21;
                *v7++ = v20;
                v18 = vdup_n_s32(v17 != 0.0);
                v19.i64[0] = v18.u32[0];
                v19.i64[1] = v18.u32[1];
                *(int8x16_t *)v8 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL)), (int8x16_t)COERCE_UNSIGNED_INT64(a * (UnscaledTrackAmount + v17)), *v16);
                v8 += 2;
                LODWORD(v12) = v12 + 1;
                --v11;
              }
              while (v11);
            }
            os_unfair_lock_unlock(v15 + 2);
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL CTFontGetVerticalGlyphsForCharacters(TShapingEngine *a1, const UniChar *a2, CGGlyph *a3, CFIndex a4)
{
  return a1 && a2 && a3 && TShapingEngine::ApplyVerticalForms(a1, a2, a3, a4);
}

__CFString *CTFontCopyStringForGlyph(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  id v5;

  if (!a1)
    return &stru_1E15EDAC0;
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400);
  if (!v1)
    return &stru_1E15EDAC0;
  v5 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v1 + 680))(&v5);
  if (!atomic_load((unint64_t *)&v5))
  {

    return &stru_1E15EDAC0;
  }
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));

  return (__CFString *)v3;
}

CFIndex CTFontGetGlyphCount(CFIndex font)
{
  uint64_t v1;
  CFIndex *v2;
  uint64_t InitializedGraphicsFont;

  if (font)
  {
    v1 = *(_QWORD *)(font + 40);
    v2 = *(CFIndex **)(v1 + 400);
    font = v2[25];
    if (!font)
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*(TBaseFont **)(v1 + 400));
      return (*(uint64_t (**)(CFIndex *, uint64_t))(*v2 + 872))(v2, InitializedGraphicsFont);
    }
  }
  return font;
}

uint64_t TFont::GetGlyphCount(TFont *this)
{
  TBaseFont *v1;
  uint64_t result;
  uint64_t InitializedGraphicsFont;

  v1 = (TBaseFont *)*((_QWORD *)this + 50);
  result = *((_QWORD *)v1 + 25);
  if (!result)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v1);
    return (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v1 + 872))(v1, InitializedGraphicsFont);
  }
  return result;
}

CGFloat CTFontGetSlantAngle(CTFontRef font)
{
  TFont *v1;
  uint64_t v2;
  CGFloat result;
  CGAffineTransform v4;

  if (!font)
    return 0.0;
  v1 = (TFont *)*((_QWORD *)font + 5);
  v2 = *((_QWORD *)v1 + 50);
  TFont::GetScaledMatrix(v1, &v4);
  (*(void (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v2 + 616))(v2, &v4);
  return result;
}

double CTFontGetDefaultAscent(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  if (!a1)
    return 0.0;
  v4 = NAN;
  TFont::GetDefaultMetrics(*(TFont **)(a1 + 40), &v4, &v3, &v2);
  return v4;
}

double CTFontGetMaximumAdvance(uint64_t a1)
{
  TFont *v1;
  uint64_t v2;
  double result;
  CGAffineTransform v4;

  if (!a1)
    return 0.0;
  v1 = *(TFont **)(a1 + 40);
  v2 = *((_QWORD *)v1 + 50);
  TFont::GetScaledMatrix(v1, &v4);
  (*(void (**)(uint64_t, CGAffineTransform *, _QWORD))(*(_QWORD *)v2 + 624))(v2, &v4, *(_DWORD *)v1 & 1);
  return result;
}

uint64_t CTFontGetClippingMetrics(uint64_t result, double *a2, double *a3)
{
  if (result)
    return TFont::GetWinMetrics(*(TBaseFont ***)(result + 40), a2, a3);
  return result;
}

uint64_t CTFontGetTypographicMetrics(uint64_t a1, double *a2, double *a3, double *a4, _BYTE *a5)
{
  TBaseFont **v6;
  uint64_t TypoMetrics;
  uint64_t v8;

  if (!a1)
    return 0;
  v6 = *(TBaseFont ***)(a1 + 40);
  TypoMetrics = TFont::GetTypoMetrics(v6, a2, a3, a4);
  v8 = TypoMetrics;
  if (!(_DWORD)TypoMetrics)
  {
    if (a5)
      goto LABEL_6;
    return 0;
  }
  if (!a5)
    return 1;
  LOBYTE(TypoMetrics) = TFont::UseTypoMetrics((TFont *)v6);
LABEL_6:
  *a5 = TypoMetrics;
  return v8;
}

uint64_t CTFontShouldAntiAlias()
{
  return 1;
}

uint64_t CTFontSupportsConnectedLanguage(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 392))(v1);
  else
    return 0;
}

double CTFontGetTrackingFloor(uint64_t a1)
{
  double result;
  char v2;

  if (!a1)
    return 0.0;
  result = COERCE_DOUBLE(TFont::GetTrackingFloor(*(TFont **)(a1 + 40)));
  if (!v2)
    return -1.79769313e308;
  return result;
}

CGGlyph CTFontGetGlyphWithName(CTFontRef font, CFStringRef glyphName)
{
  if (font && glyphName)
    return TFont::GetGlyphWithName(*((TFont **)font + 5), glyphName);
  else
    return 0;
}

CFStringRef CTFontCopyNameForGlyph(CTFontRef font, CGGlyph glyph)
{
  const __CFString *v2;
  id v4;

  if (!font)
    return 0;
  TFont::CopyNameForGlyph(*((TFont **)font + 5), glyph, (CFStringRef *)&v4);
  do
    v2 = (const __CFString *)__ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));

  return v2;
}

double CTFontGetTransformedBoundingRectsForGlyphsAndStyle(uint64_t a1, unsigned __int32 a2, char a3, CGAffineTransform *a4, const unsigned __int16 *a5, CGRect *a6, unint64_t a7)
{
  double v14;
  double v15;
  char **v17;
  char *v18[3];
  _BYTE v19[960];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a5)
    return *MEMORY[0x1E0C9D628];
  memset(v19, 170, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  v20 = v19;
  if (!a6)
  {
    std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::resize(v18, a7);
    a6 = (CGRect *)v18[0];
  }
  TFont::GetBoundingBoxesForGlyphs(*(TBaseFont ***)(a1 + 40), a4, a3, a5, a6, a7, a2);
  v15 = v14;
  v17 = v18;
  std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v17);
  return v15;
}

void std::vector<CGSize,TInlineBufferAllocator<CGSize,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<CGSize,TInlineBufferAllocator<CGSize,30ul>>::__append((char **)a1, a2 - v2);
  }
}

void CTFontGetVerticalTranslationsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGSize *translations, CFIndex count)
{
  if (font && glyphs && translations && count >= 1)
    TFont::GetVerticalTranslationsForGlyphs(*((TFont **)font + 5), glyphs, (float64x2_t *)translations, count);
}

CFIndex CTFontGetLigatureCaretPositions(CTFontRef font, CGGlyph glyph, CGFloat *positions, CFIndex maxPositions)
{
  if (font && (positions || !maxPositions))
    return (CFIndex)TFont::GetLigatureCaretPositionsForGlyph(*((TFont **)font + 5), glyph, positions, maxPositions);
  else
    return 0;
}

CGRect CTFontGetOpticalBoundsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count, CFOptionFlags options)
{
  CGRect *v7;
  __int128 v9;
  size_t v10;
  double OpticalBoundsForGlyphs;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGRect *__p;
  _OWORD v23[2];
  _QWORD v24[2];
  CGRect result;

  v24[1] = *MEMORY[0x1E0C80C00];
  if (font && glyphs && count > 0)
  {
    v7 = boundingRects;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[0] = v9;
    v23[1] = v9;
    __p = 0;
    v24[0] = v23;
    if (!boundingRects)
    {
      if ((unint64_t)count >> 59)
        abort();
      if (&v23[2 * count] <= (_OWORD *)v24)
      {
        v24[0] = &v23[2 * count];
        v10 = 32 * count;
        v7 = (CGRect *)v23;
      }
      else
      {
        v10 = 32 * count;
        v7 = (CGRect *)operator new(32 * count);
      }
      bzero(v7, v10);
      __p = v7;
    }
    OpticalBoundsForGlyphs = TFont::GetOpticalBoundsForGlyphs(*((TFont **)font + 5), glyphs, v7, count);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    if (__p && (v23 > (_OWORD *)__p || v24 <= (_QWORD *)__p))
      operator delete(__p);
  }
  else
  {
    OpticalBoundsForGlyphs = *MEMORY[0x1E0C9D628];
    v13 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v15 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v17 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  v18 = OpticalBoundsForGlyphs;
  v19 = v13;
  v20 = v15;
  v21 = v17;
  result.size.height = v21;
  result.size.width = v20;
  result.origin.y = v19;
  result.origin.x = v18;
  return result;
}

unint64_t CTFontCopyVariationAxesInternal(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 120))(&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFDictionaryRef CTFontCopyVariation(CTFontRef font)
{
  const __CFDictionary *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 112))(&v3);
  do
    v1 = (const __CFDictionary *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFArrayRef CTFontCopyFeatures(CTFontRef font)
{
  const __CFArray *v1;
  id v3;

  if (!font)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)font + 5) + 400) + 136))(&v3, *(_QWORD *)(*((_QWORD *)font + 5) + 400), 1);
  do
    v1 = (const __CFArray *)__ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

unint64_t CTFontCopyFeaturesInternal(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 136))(&v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400), 0);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

CFArrayRef CTFontCopyFeatureSettings(CFArrayRef font)
{
  void *v1;

  if (font)
  {
    v1 = (void *)atomic_load((unint64_t *)(*((_QWORD *)font + 5) + 168));
    return (CFArrayRef)v1;
  }
  return font;
}

BOOL CTFontHasFeatureWithTypeAndSelector(uint64_t a1, int a2, int a3)
{
  TBaseFont *v3;

  return a1 && (v3 = *(TBaseFont **)(*(_QWORD *)(a1 + 40) + 400)) != 0 && TBaseFont::HasFeature(v3, a2, a3);
}

unint64_t CTFontCopyOTFontFeatureTable(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (!a1)
    return 0;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 144))(&v3);
  do
    v1 = __ldaxr((unint64_t *)&v3);
  while (__stlxr(0, (unint64_t *)&v3));

  return v1;
}

__CFDictionary *CTFontCopyConvertedTables(uint64_t a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;
  uint64_t v5;
  const void *v7;
  const void *v9;
  id v11;
  id v12;
  id v13;

  if (!a1)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  v12 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 400);
  v13 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 480))(&v13, v3, 1196643650);
  if (atomic_load((unint64_t *)&v13))
  {
    v5 = atomic_load((unint64_t *)&v13);
    CopyConvertedMorxFromGSUB(v3, v5);

  }
  else
  {

    v11 = 0;
  }
  if (atomic_load((unint64_t *)&v11))
  {
    v7 = (const void *)atomic_load((unint64_t *)&v11);
    CFDictionaryAddValue(Mutable, CFSTR("amor"), v7);
    if (atomic_load((unint64_t *)&v12))
    {
      v9 = (const void *)atomic_load((unint64_t *)&v12);
      CFDictionaryAddValue(Mutable, CFSTR("ltag"), v9);
    }
  }

  return Mutable;
}

unint64_t CTFontCopySampleLettersWithLanguages(uint64_t a1, unsigned int a2, const __CFArray *a3, void **a4)
{
  void *v8;
  unint64_t v9;
  unint64_t *v11;
  id v12;
  id v13;

  if (!a1)
    return 0;
  TSampleManager::TSampleManager((TSampleManager *)&v11);
  TSampleManagerImp::Copy(v11, 0, *(unint64_t **)(*(_QWORD *)(a1 + 40) + 400), a2, a3, a4, (unint64_t *)&v13);
  do
    v8 = (void *)__ldaxr((unint64_t *)&v13);
  while (__stlxr(0, (unint64_t *)&v13));
  v12 = v8;

  do
    v9 = __ldaxr((unint64_t *)&v12);
  while (__stlxr(0, (unint64_t *)&v12));

  return v9;
}

unint64_t CTFontCopySampleString(uint64_t a1, unsigned int a2)
{
  return CTFontCopySampleStringWithLanguages(a1, a2, MEMORY[0x1E0C9AA60], 0);
}

unint64_t CTFontCopySampleStringWithLanguages(uint64_t a1, unsigned int a2, const __CFArray *a3, void **a4)
{
  unint64_t v8;
  unint64_t *v10;
  id v11;

  if (!a1)
    return 0;
  TSampleManager::TSampleManager((TSampleManager *)&v10);
  TSampleManager::CopySampleString(&v10, *(unint64_t **)(*(_QWORD *)(a1 + 40) + 400), a2, a3, a4, (unint64_t *)&v11);
  do
    v8 = __ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));

  return v8;
}

unint64_t CTCopySampleStringForLanguage(void *a1, unsigned int a2)
{
  TSampleManager *v4;
  const __CFArray *v5;
  unint64_t v6;
  id v8;
  id v9;

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TSampleManager::TSampleManager((TSampleManager *)&v8);
  TSampleManagerImp::CopySampleLettersForLanguage(a1, (unint64_t *)v8, a2, (unint64_t *)&v9);
  v4 = (TSampleManager *)atomic_load((unint64_t *)&v9);
  TSampleManager::CreateStringWithLetters(v4, v5, (unint64_t *)&v8);
  do
    v6 = __ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));

  return v6;
}

unsigned int *CTFontSwapEmojiPolicy(unsigned int a1)
{
  unsigned int *result;
  unsigned int *v3;

  result = (unsigned int *)GetTable();
  if (result)
  {
    v3 = result;
    result = (unsigned int *)result[28];
    *((_QWORD *)v3 + 14) = a1;
    *((_QWORD *)v3 + 15) = ThreadSpecificNullDestructor<CTEmojiPolicy>;
  }
  return result;
}

void CTFontEnumerateOverlappingGlyphs(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a1 && a2 && a3)
  {
    if (a4)
      EnumerateOverlappingGlyphs(*(TBaseFont **)(*(_QWORD *)(a1 + 40) + 400), a2, a3, a4, a6);
  }
}

uint64_t CTFontGetDescriptorOptions(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (void *)atomic_load((unint64_t *)(*(_QWORD *)(a1 + 40) + 8));
  v2 = v1;
  v3 = *(unsigned int *)(v2[5] + 16);

  return v3;
}

BOOL CTFontHasDerivedOpticalSize(_BOOL8 result)
{
  if (result)
    return TFont::HasDerivedOpticalSize(*(TFont **)(result + 40));
  return result;
}

void CTFontDrawGlyphsAtPoint(uint64_t a1, const CGGlyph *a2, unint64_t a3, CGContext *a4)
{
  CGContext *v7;
  __int128 v8;
  CGFloat v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  CGAffineTransform v16;
  float64x2_t v17[3];
  CGAffineTransform t2;
  float64x2_t v19;
  __int128 v20;
  float64x2_t v21;
  __int128 v22;
  uint64_t v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGAffineTransform v26;
  _BYTE t1[56];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    if (a4)
    {
      v7 = *(CGContext **)(a1 + 40);
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      *(_OWORD *)&v26.c = v8;
      *(_OWORD *)&v26.tx = v8;
      *(_OWORD *)&v26.a = v8;
      GetFontScaleTransform(&v26, v7);
      CGContextGetCharacterSpacing();
      CGAffineTransformMakeTranslation(&v24, v9, v9);
      *(CGAffineTransform *)t1 = v26;
      t2 = v24;
      CGAffineTransformConcat(&v25, (CGAffineTransform *)t1, &t2);
      v26 = v25;
      *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v54 = v10;
      v55 = v10;
      v52 = v10;
      v53 = v10;
      v50 = v10;
      v51 = v10;
      v48 = v10;
      v49 = v10;
      v46 = v10;
      v47 = v10;
      v44 = v10;
      v45 = v10;
      v42 = v10;
      v43 = v10;
      v41 = v10;
      v40 = v10;
      v39 = v10;
      v38 = v10;
      v37 = v10;
      v36 = v10;
      v35 = v10;
      v34 = v10;
      v33 = v10;
      v32 = v10;
      v31 = v10;
      v30 = v10;
      v29 = v10;
      v28 = v10;
      *(_OWORD *)&t1[40] = v10;
      *(_OWORD *)&t1[24] = v10;
      memset(t1, 0, 24);
      v56 = &t1[24];
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100]((char **)t1, a3);
      v11 = *(_QWORD *)&t1[8];
      bzero(*(void **)&t1[8], 16 * a3);
      *(_QWORD *)&t1[8] = v11 + 16 * a3;
      TFont::GetUnsummedAdvancesForGlyphs((uint64_t)v7, (uint64_t)a2, *(double **)t1, 2, a3, 0, 0);
      memset(&t2, 255, sizeof(t2));
      v20 = xmmword_184930040;
      v21 = (float64x2_t)unk_184930050;
      v22 = xmmword_184930060;
      v19 = (float64x2_t)unk_184930030;
      v12 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&t2.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&t2.c = v12;
      v14 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
      v13 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&t2.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v19 = v14;
      v15 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
      v20 = (__int128)v13;
      v21 = v15;
      *(_QWORD *)&v22 = 0;
      BYTE8(v22) = 0;
      HIDWORD(v22) = 13;
      v23 = 0;
      v17[0] = v14;
      v17[1] = v13;
      v17[2] = v15;
      v16 = v26;
      DrawGlyphsWithAdvancesAndTransform((TBaseFont **)v7, a2, *(uint64_t *)t1, a3, a4, v17, &v16.a, (uint64_t)&t2);
      *(_QWORD *)&t2.a = t1;
      std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&t2);
    }
  }
}

CGAffineTransform *GetFontScaleTransform(CGAffineTransform *a1, CGContext *a2)
{
  double v4;
  double v5;
  int *inited;
  unsigned int v7;
  CGFloat v8;

  CGContextGetFontSize();
  v5 = v4;
  if (*((_DWORD *)a2 + 12))
    inited = (int *)((char *)a2 + 48);
  else
    inited = TFont::InitStrikeMetrics(a2);
  v7 = *inited;
  v8 = v5 * (TFont::GetEffectiveSize(a2) / *((double *)a2 + 2)) / (double)v7;
  return CGAffineTransformMakeScale(a1, v8, v8);
}

double CTFontGetSbixImageSizeForGlyph(uint64_t a1, unsigned int a2, CGContext *a3)
{
  double ContentsScale;

  if (!a3)
    return 0.0;
  ContentsScale = GetContentsScale(a3);
  return CTFontGetSbixImageSizeForGlyphAndContentsScale(a1, a2, ContentsScale);
}

long double GetContentsScale(CGContext *a1)
{
  unsigned int Type;
  __int128 v4;
  CGAffineTransform v5;

  Type = CGContextGetType();
  if (Type <= 6 && ((1 << Type) & 0x46) != 0)
    return 300.0;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&v5.c = v4;
  *(_OWORD *)&v5.tx = v4;
  *(_OWORD *)&v5.a = v4;
  CGContextGetUserSpaceToDeviceSpaceTransform(&v5, a1);
  return hypot(v5.c, v5.d);
}

double CTFontGetSbixImageSizeForGlyphAndContentsScale(uint64_t a1, unsigned int a2, double a3)
{
  TBaseFont **v5;
  void *v7;
  TBaseFont *v8;
  uint64_t InitializedGraphicsFont;
  __int128 v10;
  double ColorBitmapFontTranslate;
  double v12;
  CGFloat v13;
  double v14;
  _QWORD v16[2];
  id v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  id v21[3];
  id v22;
  CGPoint v23;

  if (!a1)
    return 0.0;
  v5 = *(TBaseFont ***)(a1 + 40);
  v22 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v5[50] + 480))(&v22, v5[50], 1935829368);
  if (atomic_load((unint64_t *)&v22))
  {
    memset(v21, 170, sizeof(v21));
    v7 = (void *)atomic_load((unint64_t *)&v22);
    v8 = v5[50];
    if (!*((_QWORD *)v8 + 25))
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v5[50]);
      (*(void (**)(TBaseFont *, uint64_t))(*(_QWORD *)v8 + 872))(v8, InitializedGraphicsFont);
    }
    TsbixContext::TsbixContext((TsbixContext *)v21, v7);
    v16[0] = -1;
    v16[1] = -1;
    v17 = (id)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    v18 = v10;
    v19 = v10;
    *(double *)&v20 = NAN;
    ColorBitmapFontTranslate = TFont::GetColorBitmapFontTranslate((TFont *)v5);
    v13 = v12;
    v23.x = ColorBitmapFontTranslate;
    v23.y = v13;
    v14 = *(double *)&v20;

  }
  else
  {
    v14 = 0.0;
  }

  return v14;
}

_anonymous_namespace_::TCGImageData *`anonymous namespace'::TCGImageData::TCGImageData(_anonymous_namespace_::TCGImageData *this, TBaseFont **context, unsigned int a3, unint64_t a4, double a5, CGPoint a6)
{
  unint64_t *v11;
  CGContextRef v12;
  TBaseFont *v13;
  uint64_t v14;
  uint64_t InitializedGraphicsFont;
  unsigned __int16 *BytesPerRow;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  unint64_t v22;
  double v23;
  CGImage *v24;
  unint64_t v25;
  void *v26;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  const void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  CGImage *v36;
  const __CFNumber *v38;
  double a;
  unint64_t v40;
  void *v41;
  CGImage *v42;
  double v43;
  double Width;
  size_t Height;
  CGImageRef v46;
  void *v47;
  CGImage *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  const void *v57;
  void *v58;
  CGFloat v59;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  double v64;
  size_t v65;
  int v67;
  unsigned int v69;
  int v70;
  const void *v71;
  unsigned __int8 v72;
  uint8_t *v73;
  size_t v74;
  int v75;
  void *v76;
  CGDataProviderRef v77;
  void *v78;
  CGDataProvider *v79;
  unint64_t v80;
  void *v81;
  id v82;
  size_t v83;
  CGDataProviderRef v84;
  void *v85;
  CGColorSpace *v86;
  CGDataProvider *v87;
  CGImageRef v88;
  unint64_t v89;
  double v90;
  size_t v91;
  void *v92;
  unint64_t v93;
  void *v94;
  BOOL v96;
  unint64_t v97;
  size_t BitsPerComponent;
  CGColorSpace *ColorSpace;
  unint64_t v100;
  void *v101;
  unint64_t v103;
  void *v104;
  int v106;
  uint64_t EmojiMLUpscalingTimeout;
  char v108;
  double v109;
  void *v110;
  CGImageRef v111;
  void *v112;
  objc_class *v113;
  id v114;
  CGFloat v115;
  double v116;
  NSObject *v117;
  CGColorSpace *v118;
  CGImageRef v119;
  unint64_t v120;
  unint64_t v121;
  CGColorSpace *DeviceRGB;
  CGContext *v123;
  CGImageRef v124;
  uint64_t v125;
  double v126;
  double v127;
  BOOL v128;
  double v129;
  dispatch_time_t v130;
  unint64_t v131;
  void *v132;
  void *v133;
  unint64_t v134;
  void *v135;
  double v136;
  CGImage *v137;
  double v138;
  double v139;
  size_t v140;
  void *v141;
  uint64_t v143;
  const TsbixContext *v144;
  uint64_t v145;
  CGImage *v146;
  CGFloat v147;
  id v148;
  uint64_t v149;
  unint64_t v150;
  id v151;
  id v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  id v157;
  uint64_t v158;
  CGAffineTransform valuePtr;
  uint64_t v160;
  CGImageRef *v161;
  id *v162;
  CGImageRef v163;
  CGImageRef Image;
  CGImageRef *p_Image;
  uint64_t v166;
  void *v167;
  void (*v168)(uint64_t);
  uint64_t v169;
  id v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  CGImageRef *v175;
  _QWORD v176[3];
  CGRect v177;
  CGRect v178;

  v176[1] = *MEMORY[0x1E0C80C00];
  *(CGPoint *)this = a6;
  *((_QWORD *)this + 2) = 0;
  v11 = (unint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0C9D538];
  v12 = (CGContextRef)MEMORY[0x1E0C9D820];
  *(_OWORD *)((char *)this + 40) = *MEMORY[0x1E0C9D820];
  *((_QWORD *)this + 7) = 0;
  if (qword_1ECDE7558 != -1)
    dispatch_once_f(&qword_1ECDE7558, context, (dispatch_function_t)GetGlyphAfterHiding(TFont const*,unsigned short)::$_0::__invoke);
  if ((unsigned __int16)_MergedGlobals_11 == a3)
  {
    if (IsGB18030ComplianceRequired(void)::once != -1)
      dispatch_once_f(&IsGB18030ComplianceRequired(void)::once, 0, (dispatch_function_t)IsGB18030ComplianceRequired(void)::$_0::__invoke);
    if (IsGB18030ComplianceRequired(void)::kGB18030ComplianceRequired || CurrentLocaleIsChina())
      a3 = (unsigned __int16)word_1ECDE7542;
  }
  v13 = context[50];
  v14 = *((_QWORD *)v13 + 25);
  if (!v14)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(context[50]);
    v14 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v13 + 872))(v13, InitializedGraphicsFont);
  }
  if (v14 > a3)
  {
    v156 = 0xAAAAAAAAAAAAAAAALL;
    v153 = xmmword_184930530;
    v154 = unk_184930540;
    v155 = xmmword_184930550;
    TFont::FindColorBitmapForGlyph((TFont *)context, a3, a4, (uint64_t)&v153, a5);
    if ((_BYTE)v156)
    {
      BytesPerRow = (unsigned __int16 *)v153;
      v17 = *((double *)&v154 + 1);
      *((_QWORD *)this + 7) = v155;
      v18 = v17 * a5;
      v19 = (double)((int)bswap32(*BytesPerRow) >> 16) / (v17 * a5);
      v20 = (double)((int)bswap32(BytesPerRow[1]) >> 16) / (v17 * a5);
      *((double *)this + 3) = v19;
      *((double *)this + 4) = v20;
      if ((*(unsigned int (**)(TBaseFont *))(*(_QWORD *)context[50] + 712))(context[50])
        && (TFont::GetEmojiMLUpscalingTimeout((TFont *)context), v21))
      {
        v22 = 0;
        v23 = *((double *)this + 7);
        LODWORD(v24) = v23 / *((double *)&v154 + 1) > v23 && v23 == 160.0;
        v152 = 0;
        if ((*(_BYTE *)context & 2) == 0 && (_DWORD)v24)
        {
          v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (unint64_t)v154 ^ -(uint64_t)SBYTE9(v155));
          TBaseFont::RetainedObject((os_unfair_lock_s *)context[50], 0, (const void *)1, &valuePtr);
          do
            v25 = __ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          do
            v26 = (void *)__ldaxr((unint64_t *)&v152);
          while (__stlxr(v25, (unint64_t *)&v152));

          if (!atomic_load((unint64_t *)&v152))
          {
            *(_QWORD *)&valuePtr.a = objc_opt_new();
            do
              v28 = __ldaxr((unint64_t *)&valuePtr);
            while (__stlxr(0, (unint64_t *)&valuePtr));
            do
              v29 = (void *)__ldaxr((unint64_t *)&v152);
            while (__stlxr(v28, (unint64_t *)&v152));

            v30 = (void *)atomic_load((unint64_t *)&v152);
            objc_msgSend(v30, "setName:", CFSTR("com.apple.CoreText.UpscaledGlyphs"));
            v31 = (void *)atomic_load((unint64_t *)&v152);
            objc_msgSend(v31, "setEvictsObjectsWithDiscardedContent:", 0);
            v32 = (const void *)atomic_load((unint64_t *)&v152);
            TBaseFont::SetObject((os_unfair_lock_s *)context[50], 0, (const void *)1, v32);
          }
          v33 = (void *)atomic_load((unint64_t *)&v152);
          v34 = objc_msgSend(v33, "objectForKey:", v22);
          if (v34)
          {
            v35 = (void *)v34;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              Image = (CGImageRef)0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&valuePtr.a = (id)objc_msgSend(v35, "valueForKey:", CFSTR("image"));
              do
                v36 = (CGImage *)__ldaxr((unint64_t *)&valuePtr);
              while (__stlxr(0, (unint64_t *)&valuePtr));
              Image = v36;

              if (atomic_load((unint64_t *)&Image))
              {
                v38 = (const __CFNumber *)objc_msgSend(v35, "valueForKey:", CFSTR("scaleFactor"));
                valuePtr.a = NAN;
                CFNumberGetValue(v38, kCFNumberDoubleType, &valuePtr);
                a = valuePtr.a;
                do
                  v40 = __ldaxr((unint64_t *)&Image);
                while (__stlxr(0, (unint64_t *)&Image));
                do
                  v41 = (void *)__ldaxr(v11);
                while (__stlxr(v40, v11));

                v42 = (CGImage *)atomic_load((unint64_t *)this + 2);
                v43 = v18 * a;
                Width = (double)CGImageGetWidth(v42);
                Height = CGImageGetHeight(v42);
                *((double *)this + 5) = Width / v43;
                *((double *)this + 6) = (double)Height / v43;
                v46 = Image;
                goto LABEL_151;
              }

            }
          }
          LODWORD(v24) = 1;
        }
      }
      else
      {
        LODWORD(v24) = 0;
        v22 = 0;
        v152 = 0;
      }
      v147 = *(double *)&v22;
      v47 = (void *)atomic_load((unint64_t *)&v152);
      v48 = v47;
      v49 = 0;
      v151 = 0;
      if ((*(_BYTE *)context & 2) == 0)
      {
        v49 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (unint64_t)v154 ^ -(uint64_t)SBYTE9(v155));
        TBaseFont::RetainedObject((os_unfair_lock_s *)context[50], 0, 0, &valuePtr);
        do
          v50 = __ldaxr((unint64_t *)&valuePtr);
        while (__stlxr(0, (unint64_t *)&valuePtr));
        do
          v51 = (void *)__ldaxr((unint64_t *)&v151);
        while (__stlxr(v50, (unint64_t *)&v151));

        v22 = (unint64_t)&v151;
        if (!atomic_load((unint64_t *)&v151))
        {
          *(_QWORD *)&valuePtr.a = objc_opt_new();
          do
            v53 = __ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          do
            v54 = (void *)__ldaxr((unint64_t *)&v151);
          while (__stlxr(v53, (unint64_t *)&v151));

          v55 = (void *)atomic_load((unint64_t *)&v151);
          objc_msgSend(v55, "setName:", CFSTR("com.apple.CoreText.GlyphImages"));
          v56 = (void *)atomic_load((unint64_t *)&v151);
          objc_msgSend(v56, "setEvictsObjectsWithDiscardedContent:", 0);
          v57 = (const void *)atomic_load((unint64_t *)&v151);
          TBaseFont::SetObject((os_unfair_lock_s *)context[50], 0, 0, v57);
          v12 = (CGContextRef)MEMORY[0x1E0C9D820];
        }
        valuePtr.a = -3.72066208e-103;
        v58 = (void *)atomic_load((unint64_t *)&v151);
        Image = (CGImageRef)(id)objc_msgSend(v58, "objectForKey:", v49);
        do
          v59 = COERCE_DOUBLE(__ldaxr((unint64_t *)&Image));
        while (__stlxr(0, (unint64_t *)&Image));
        valuePtr.a = v59;

        if (atomic_load((unint64_t *)&valuePtr))
        {
          v61 = atomic_load((unint64_t *)&valuePtr);
          if (*MEMORY[0x1E0C9B0D0] != v61)
          {
            do
              v62 = __ldaxr((unint64_t *)&valuePtr);
            while (__stlxr(0, (unint64_t *)&valuePtr));
            do
              v63 = (void *)__ldaxr(v11);
            while (__stlxr(v62, v11));

            v22 = atomic_load((unint64_t *)this + 2);
            v64 = (double)CGImageGetWidth((CGImageRef)v22);
            v65 = CGImageGetHeight((CGImageRef)v22);
            *((double *)this + 5) = v64 / v18;
            *((double *)this + 6) = (double)v65 / v18;
          }
        }

      }
      if (atomic_load(v11))
        v67 = (int)v24;
      else
        v67 = 1;
      if (v67 != 1)
      {
LABEL_150:

        v46 = v48;
LABEL_151:

        return this;
      }
      v146 = v48;
      if (atomic_load(v11))
        goto LABEL_114;
      if ((BYTE8(v155) & 1) == 0)
        goto LABEL_114;
      v22 = *((_QWORD *)&v153 + 1);
      if ((unint64_t)(*((_QWORD *)&v153 + 1) - 11) > 0xFFFFFFFFFFFFFFF8)
        goto LABEL_114;
      v69 = *((_DWORD *)BytesPerRow + 1);
      if (v69 == 1667919205
        && !(*(unsigned int (**)(TBaseFont *))(*(_QWORD *)context[50] + 712))(context[50]))
      {
        goto LABEL_114;
      }
      v70 = bswap32(v69);
      v71 = (const void *)atomic_load((unint64_t *)a4);
      valuePtr.a = 0.0;
      Image = 0;
      if (v70 == 1885627936)
        goto LABEL_97;
      a4 = v22 - 8;
      v22 = (unint64_t)(BytesPerRow + 4);
      if (v70 != 1701669475)
      {
        v76 = (void *)CFRetain(v71);
        v77 = CGDataProviderCreateWithData(v76, BytesPerRow + 4, a4, (CGDataProviderReleaseDataCallback)CopyEmojiImage(unsigned int,void const*,unsigned long,double,double,__CFData const*,CGSize *)::$_1::__invoke);
        do
          v78 = (void *)__ldaxr((unint64_t *)&valuePtr);
        while (__stlxr((unint64_t)v77, (unint64_t *)&valuePtr));

        v79 = (CGDataProvider *)atomic_load((unint64_t *)&valuePtr);
        CreateImageWithDataProvider((CGDataProvider *)&v171, v79, v70);
        do
          v80 = __ldaxr((unint64_t *)&v171);
        while (__stlxr(0, (unint64_t *)&v171));
        do
          v81 = (void *)__ldaxr((unint64_t *)&Image);
        while (__stlxr(v80, (unint64_t *)&Image));

        v82 = v171;
        goto LABEL_96;
      }
      v72 = atomic_load((unsigned __int8 *)&qword_1ECDE7578);
      if ((v72 & 1) == 0)
        goto LABEL_155;
      while (1)
      {
        v143 = v22;
        if (qword_1ECDE7580 != -1)
          dispatch_once(&qword_1ECDE7580, &__block_literal_global);
        v22 = (unint64_t)&qword_1ECDE7560;
        do
          v73 = (uint8_t *)__ldaxr(&qword_1ECDE7560);
        while (__stlxr(0, &qword_1ECDE7560));
        LODWORD(v148) = 0;
        v144 = (const TsbixContext *)a4;
        if (a4 < 0xC)
        {
          v74 = 0;
        }
        else
        {
          v74 = 0;
          if (*((_DWORD *)BytesPerRow + 2) == 829058405 && BytesPerRow[6] == 256)
          {
            v75 = BytesPerRow[9];
            LOWORD(v148) = BytesPerRow[8];
            WORD1(v148) = v75;
            v74 = 4 * v75 * (unsigned __int16)v148;
          }
        }
        if (v73 && emoji_compression_decode_scratch_buffer_size((int)v148) > qword_1ECDE7570)
        {
          atomic_store((unint64_t)v73, &qword_1ECDE7560);
          v73 = 0;
        }
        BytesPerRow = (unsigned __int16 *)malloc_type_malloc(v74, 0x2DEE3412uLL);
        a4 = emoji_compression_decode(v143, (unint64_t)v144, (uint64_t)BytesPerRow, v74, 1, v73, &v148);
        if (v73)
          atomic_store((unint64_t)v73, &qword_1ECDE7560);
        v83 = (unsigned __int16)v148;
        if ((_WORD)v148 && (v22 = WORD1(v148), WORD1(v148)))
        {
          v84 = CGDataProviderCreateWithData(0, BytesPerRow, a4, (CGDataProviderReleaseDataCallback)CopyEmojiImage(unsigned int,void const*,unsigned long,double,double,__CFData const*,CGSize *)::$_0::__invoke);
          do
            v85 = (void *)__ldaxr((unint64_t *)&valuePtr);
          while (__stlxr((unint64_t)v84, (unint64_t *)&valuePtr));

          v86 = (CGColorSpace *)qword_1ECDE7568;
          v87 = (CGDataProvider *)atomic_load((unint64_t *)&valuePtr);
          v88 = CGImageCreate(v83, v22, 8uLL, 0x20uLL, a4 / v22, v86, 0x2002u, v87, 0, 1, kCGRenderingIntentDefault);
          do
            v89 = __ldaxr((unint64_t *)&Image);
          while (__stlxr((unint64_t)v88, (unint64_t *)&Image));
          v82 = (id)v89;
LABEL_96:

          a4 = atomic_load((unint64_t *)&Image);
          v90 = (double)CGImageGetWidth((CGImageRef)a4);
          v91 = CGImageGetHeight((CGImageRef)a4);
          *((double *)this + 5) = v90 / v18;
          *((double *)this + 6) = (double)v91 / v18;
          do
LABEL_97:
            v92 = (void *)__ldaxr((unint64_t *)&Image);
          while (__stlxr(0, (unint64_t *)&Image));
          v171 = v92;
        }
        else
        {
          *(_OWORD *)((char *)this + 40) = *(_OWORD *)v12;
          v171 = 0;
        }

        do
          v93 = __ldaxr((unint64_t *)&v171);
        while (__stlxr(0, (unint64_t *)&v171));
        do
          v94 = (void *)__ldaxr(v11);
        while (__stlxr(v93, v11));

        if (atomic_load(v11))
          v96 = BYTE9(v155) == 0;
        else
          v96 = 1;
        if (!v96)
        {
          a4 = atomic_load(v11);
          v22 = CGImageGetWidth((CGImageRef)a4);
          v97 = CGImageGetHeight((CGImageRef)a4);
          BitsPerComponent = CGImageGetBitsPerComponent((CGImageRef)a4);
          BytesPerRow = (unsigned __int16 *)CGImageGetBytesPerRow((CGImageRef)a4);
          ColorSpace = CGImageGetColorSpace((CGImageRef)a4);
          v12 = CGBitmapContextCreate(0, v22, v97, BitsPerComponent, (size_t)BytesPerRow, ColorSpace, 2u);
          CGContextClear();
          valuePtr.a = -1.0;
          valuePtr.b = 0.0;
          valuePtr.c = 0.0;
          valuePtr.d = 1.0;
          valuePtr.tx = (double)v22;
          valuePtr.ty = 0.0;
          CGContextConcatCTM(v12, &valuePtr);
          v177.origin.x = 0.0;
          v177.origin.y = 0.0;
          v177.size.width = (double)v22;
          v177.size.height = (double)v97;
          CGContextDrawImage(v12, v177, (CGImageRef)a4);
          Image = CGBitmapContextCreateImage(v12);

          do
            v100 = __ldaxr((unint64_t *)&Image);
          while (__stlxr(0, (unint64_t *)&Image));
          do
            v101 = (void *)__ldaxr(v11);
          while (__stlxr(v100, v11));

        }
        if (atomic_load(v11))
          v103 = atomic_load(v11);
        else
          v103 = *MEMORY[0x1E0C9B0D0];
        v104 = (void *)atomic_load((unint64_t *)&v151);
        objc_msgSend(v104, "setObject:forKey:", v103, v49);
LABEL_114:
        if (atomic_load(v11))
          v106 = (int)v24;
        else
          v106 = 0;
        v48 = v146;
        if (v106 != 1)
          goto LABEL_150;
        v49 = 0xAAAAAAAAAAAAAAAALL;
        v148 = (id)0xAAAAAAAAAAAAAAAALL;
        *(double *)&v149 = NAN;
        v150 = 0xAAAAAAAAAAAAAAAALL;
        v24 = (CGImage *)atomic_load(v11);
        EmojiMLUpscalingTimeout = TFont::GetEmojiMLUpscalingTimeout((TFont *)context);
        if (v108)
          break;
        std::__throw_bad_optional_access[abi:nn180100]();
LABEL_155:
        if (__cxa_guard_acquire(&qword_1ECDE7578))
        {
          qword_1ECDE7570 = compression_decode_scratch_buffer_size(COMPRESSION_LZFSE) + 186336;
          __cxa_guard_release(&qword_1ECDE7578);
        }
      }
      v109 = *(double *)&EmojiMLUpscalingTimeout;
      v110 = (void *)MEMORY[0x1E0C809B0];
      *(_QWORD *)&valuePtr.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&valuePtr.b = 3321888768;
      *(_QWORD *)&valuePtr.c = ___ZZN12_GLOBAL__N_112TCGImageDataC1EPK5TFonttRK12TsbixContextd7CGPointENKUlP7CGImagedE_cvU13block_pointerFvS9_dEEv_block_invoke;
      *(_QWORD *)&valuePtr.d = &__block_descriptor_48_8_32c87_ZTSKZN12_GLOBAL__N_112TCGImageDataC1EPK5TFonttRK12TsbixContextd7CGPointEUlP7CGImagedE__e21_v24__0__CGImage__8d16l;
      *(_QWORD *)&valuePtr.tx = v146;
      valuePtr.ty = v147;
      v145 = objc_msgSend((id)objc_msgSend(&valuePtr, "copy"), "autorelease");

      Image = 0;
      p_Image = &Image;
      v166 = 0x3052000000;
      v167 = __Block_byref_object_copy__38;
      v168 = __Block_byref_object_dispose__39;
      v111 = (CGImageRef)qword_1ECDE75B8;
      v169 = qword_1ECDE75B8;
      if (!qword_1ECDE75B8)
      {
        v171 = v110;
        v172 = 3221225472;
        v173 = (uint64_t)___ZL18getMADServiceClassv_block_invoke;
        v174 = &unk_1E15E20C0;
        v175 = &Image;
        ___ZL18getMADServiceClassv_block_invoke((uint64_t)&v171);
        v111 = p_Image[5];
      }
      _Block_object_dispose(&Image, 8);
      v112 = (void *)-[CGImage service](v111, "service");
      Image = 0;
      p_Image = &Image;
      v166 = 0x3052000000;
      v167 = __Block_byref_object_copy__38;
      v168 = __Block_byref_object_dispose__39;
      v113 = (objc_class *)qword_1ECDE75C8;
      v169 = qword_1ECDE75C8;
      if (!qword_1ECDE75C8)
      {
        v171 = v110;
        v172 = 3221225472;
        v173 = (uint64_t)___ZL27getMADMLScalingRequestClassv_block_invoke;
        v174 = &unk_1E15E20C0;
        v175 = &Image;
        ___ZL27getMADMLScalingRequestClassv_block_invoke((uint64_t)&v171);
        v113 = p_Image[5];
      }
      _Block_object_dispose(&Image, 8);
      v114 = (id)objc_msgSend([v113 alloc], "initWithScaledImageWidth:scaledImageHeight:", 320, 320);
      if (v114)
      {
        v115 = *(double *)&v114;
        v116 = v109;
        v117 = dispatch_group_create();
        Image = 0;
        p_Image = &Image;
        v166 = 0x3812000000;
        v167 = __Block_byref_object_copy__0;
        v168 = __Block_byref_object_dispose__0;
        v169 = 0;
        v170 = 0;
        v171 = 0;
        v172 = (uint64_t)&v171;
        v173 = 0x2020000000;
        v174 = 0;
        v118 = CGImageGetColorSpace(v24);
        v119 = 0;
        if (CGColorSpaceGetModel(v118) != kCGColorSpaceModelRGB)
        {
          v120 = CGImageGetWidth(v24);
          v121 = CGImageGetHeight(v24);
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          v123 = CGBitmapContextCreate(0, v120, v121, 8uLL, 0, DeviceRGB, 2u);
          CGContextClear();
          v178.size.width = (double)v120;
          v178.size.height = (double)v121;
          v110 = (void *)MEMORY[0x1E0C809B0];
          v178.origin.x = 0.0;
          v178.origin.y = 0.0;
          CGContextDrawImage(v123, v178, v24);
          v119 = CGBitmapContextCreateImage(v123);

        }
        if (v119)
          v124 = v119;
        else
          v124 = v24;
        dispatch_group_enter(v117);
        *(CGFloat *)v176 = v115;
        v125 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v176, 1);
        *(_QWORD *)&valuePtr.a = v110;
        *(_QWORD *)&valuePtr.b = 3221225472;
        *(_QWORD *)&valuePtr.c = ___ZL22GetMLUpscaledImageDataP7CGImagemmdU13block_pointerFvS0_dE_block_invoke;
        *(_QWORD *)&valuePtr.d = &unk_1E15E2080;
        valuePtr.tx = v115;
        *(_QWORD *)&valuePtr.ty = v117;
        v162 = &v171;
        v163 = v124;
        v161 = &Image;
        v160 = v145;
        objc_msgSend(v112, "performRequests:onCGImage:withOrientation:andIdentifier:completionHandler:", v125, v124, 1, 0, &valuePtr);
        if (v116 >= 0.0)
        {
          v126 = 0.5;
          if (v116 != 0.0)
            v126 = v116;
          v127 = v126 * 1000000000.0;
          v128 = v126 <= 2.0;
          v129 = 2000000000.0;
          if (v128)
            v129 = v127;
          v130 = dispatch_time(0, (uint64_t)v129);
          dispatch_group_wait(v117, v130);
          dispatch_release(v117);
          v131 = atomic_load((unint64_t *)p_Image + 6);
          if (v131 && *(double *)(v172 + 24) > 2.22044605e-16)
          {
            v132 = (void *)atomic_load((unint64_t *)p_Image + 6);
            v157 = v132;
            v158 = *(_QWORD *)(v172 + 24);
            do
              v133 = (void *)__ldaxr((unint64_t *)&v157);
            while (__stlxr(0, (unint64_t *)&v157));
            v148 = v133;
            v149 = v158;
            LOBYTE(v150) = 1;

            _Block_object_dispose(&v171, 8);
            _Block_object_dispose(&Image, 8);

            do
              v134 = __ldaxr((unint64_t *)&v148);
            while (__stlxr(0, (unint64_t *)&v148));
            v48 = v146;
            do
              v135 = (void *)__ldaxr(v11);
            while (__stlxr(v134, v11));

            v136 = *(double *)&v149;
            v137 = (CGImage *)atomic_load((unint64_t *)this + 2);
            v138 = v18 * v136;
            v139 = (double)CGImageGetWidth(v137);
            v140 = CGImageGetHeight(v137);
            *((double *)this + 5) = v139 / v138;
            *((double *)this + 6) = (double)v140 / v138;
LABEL_148:
            if ((_BYTE)v150)

            goto LABEL_150;
          }
        }
        else
        {
          dispatch_release(v117);
        }
        LOBYTE(v148) = 0;
        LOBYTE(v150) = 0;

        _Block_object_dispose(&v171, 8);
        _Block_object_dispose(&Image, 8);

      }
      else
      {
        LOBYTE(v148) = 0;
        LOBYTE(v150) = 0;
      }
      v141 = (void *)atomic_load((unint64_t *)&v152);
      objc_msgSend(v141, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99E38], "null"), *(_QWORD *)&v147);
      v48 = v146;
      goto LABEL_148;
    }
  }
  return this;
}

CGFont *TFont::HasBBoxes(TFont *this, const unsigned __int16 *a2, size_t a3, CGRect *a4)
{
  CGFont *result;

  result = (CGFont *)TBaseFont::GetInitializedGraphicsFont(this);
  if (result)
    return (CGFont *)CGFontGetGlyphBBoxes(result, a2, a3, a4);
  return result;
}

void `anonymous namespace'::TCGImageData::DrawAtPoint(_anonymous_namespace_::TCGImageData *this, CGContextRef c, CGPoint a3)
{
  double y;
  double x;
  double v7;
  double v8;
  CGPoint TextPosition;
  __int128 v10;
  double v12;
  double v13;
  CGImage *v14;
  CGAffineTransform v15;
  CGRect v16;

  y = a3.y;
  x = a3.x;
  v7 = *((double *)this + 5);
  v8 = *((double *)this + 6);
  TextPosition = CGContextGetTextPosition(c);
  *(_QWORD *)&v10 = -1;
  *((_QWORD *)&v10 + 1) = -1;
  *(_OWORD *)&v15.c = v10;
  *(_OWORD *)&v15.tx = v10;
  *(_OWORD *)&v15.a = v10;
  CGContextGetUserSpaceToDeviceSpaceTransform(&v15, c);
  if (atomic_load((unint64_t *)this + 2))
  {
    v12 = v15.b + v15.d;
    v13 = 1.0;
    if (v15.b * v15.c == 0.0)
      v13 = v15.c + v15.a;
    else
      v12 = 1.0;
    v16.origin.y = round(v12 * (*((double *)this + 4) + y + TextPosition.y + *((double *)this + 1))) / v12
                 - TextPosition.y;
    v16.origin.x = round(v13 * (*((double *)this + 3) + x + TextPosition.x + *(double *)this)) / v13 - TextPosition.x;
    v16.size.height = round(v8 * v12) / v12;
    v16.size.width = round(v7 * v13) / v13;
    v14 = (CGImage *)atomic_load((unint64_t *)this + 2);
    CGContextDrawImage(c, v16, v14);
  }
}

void DrawInvisibleGlyph(CGContext *a1, CGGlyph a2, CGPoint a3, const CGAffineTransform *a4, const CGAffineTransform *a5)
{
  CGFloat y;
  CGFloat x;
  double v11;
  CGFloat v12;
  CGPoint v13;

  y = a3.y;
  x = a3.x;
  CGContextGetAlpha();
  v12 = v11;
  CGContextSetAlpha(a1, 0.0);
  v13.x = x;
  v13.y = y;
  DrawVisibleGlyph(a1, a2, v13, a4, a5);
  CGContextSetAlpha(a1, v12);
}

void DrawVisibleGlyph(CGContextRef c, CGGlyph a2, CGPoint a3, const CGAffineTransform *a4, const CGAffineTransform *a5)
{
  int64x2_t v6;
  __int128 v9;
  CGPoint v10;
  __int128 v11;
  __int128 v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGGlyph glyphs;
  CGPoint Lpositions;
  CGAffineTransform t2;
  CGAffineTransform t1;

  Lpositions = a3;
  glyphs = a2;
  v6 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)&a4->a, (float64x2_t)xmmword_18492FA90), vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)&a4->c, (float64x2_t)xmmword_18492E300), (int8x16_t)vceqzq_f64(*(float64x2_t *)&a4->tx)));
  if ((vandq_s8((int8x16_t)v6, (int8x16_t)vdupq_laneq_s64(v6, 1)).u64[0] & 0x8000000000000000) != 0)
  {
    CGContextShowGlyphsAtPositions(c, &glyphs, &Lpositions, 1uLL);
  }
  else
  {
    *(_QWORD *)&v9 = -1;
    *((_QWORD *)&v9 + 1) = -1;
    *(_OWORD *)&v16.c = v9;
    *(_OWORD *)&v16.tx = v9;
    *(_OWORD *)&v16.a = v9;
    CGContextGetTextMatrix(&v16, c);
    v10 = (CGPoint)vaddq_f64(*(float64x2_t *)&a5->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a5->c, Lpositions.y), *(float64x2_t *)&a5->a, Lpositions.x));
    *(_QWORD *)&v11 = -1;
    *((_QWORD *)&v11 + 1) = -1;
    *(_OWORD *)&v15.c = v11;
    *(_OWORD *)&v15.tx = v11;
    *(_OWORD *)&v15.a = v11;
    v12 = *(_OWORD *)&a4->c;
    *(_OWORD *)&t1.a = *(_OWORD *)&a4->a;
    *(_OWORD *)&t1.c = v12;
    *(_OWORD *)&t1.tx = *(_OWORD *)&a4->tx;
    Lpositions = v10;
    t2 = v16;
    CGAffineTransformConcat(&v15, &t1, &t2);
    v14 = v15;
    CGContextSetTextMatrix(c, &v14);
    CGContextShowGlyphsAtPositions(c, &glyphs, &Lpositions, 1uLL);
    v13 = v16;
    CGContextSetTextMatrix(c, &v13);
  }
}

double CTFontDrawGlyphsAtPositions(uint64_t a1, const CGGlyph *a2, const CGPoint *a3, uint64_t a4, CGContext *a5)
{
  double result;

  *(_QWORD *)&result = CTFontDrawGlyphsAtPositionsInternal(a1, a2, a3, a4, a5, 0, 0).n128_u64[0];
  return result;
}

CFArrayRef CTFontCopyDefaultCascadeList()
{
  const __CTFontDescriptor *v0;
  const __CFArray *DefaultFallbacks;
  CFArrayRef Copy;
  _BYTE __dst[552];

  v0 = (const __CTFontDescriptor *)CTFontDescriptorCreateForUIType(0, 0, 0.0);
  memcpy(__dst, &unk_184930078, sizeof(__dst));
  TFont::TFont((TFont *)__dst, v0, 0.0, 0, 0, 0);
  DefaultFallbacks = (const __CFArray *)TFont::GetDefaultFallbacks((TFont *)__dst);
  if (DefaultFallbacks)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DefaultFallbacks);
  else
    Copy = 0;
  TFont::~TFont((TFont *)__dst);

  return Copy;
}

CFArrayRef CTFontCopyDefaultCascadeListForLanguages(CTFontRef font, CFArrayRef languagePrefList)
{
  const __CFAllocator *v3;
  const __CFArray *v4;
  const __CFArray *Copy;
  id v7;

  if (!font)
    return 0;
  v7 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::CreateDefaultCascadeList(*((TFont **)font + 5), languagePrefList, (unint64_t *)&v7);
  if (atomic_load((unint64_t *)&v7))
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = (const __CFArray *)atomic_load((unint64_t *)&v7);
    Copy = CFArrayCreateCopy(v3, v4);
  }
  else
  {
    Copy = 0;
  }

  return Copy;
}

void CTFontInitializeShapingGlyphs(uint64_t a1)
{
  TFont *v1;

  if (a1)
  {
    v1 = *(TFont **)(a1 + 40);
    if (!*((_QWORD *)v1 + 40))
      TFont::InitShapingGlyphs(v1);
  }
}

uint64_t GetShapingGlyphsQueue(void)
{
  if (qword_1ECDE7550 != -1)
    dispatch_once_f(&qword_1ECDE7550, 0, (dispatch_function_t)GetShapingGlyphsQueue(void)::$_0::__invoke);
  return qword_1ECDE7548;
}

unint64_t CTFontCopyColorGlyphCoverage(const void *a1)
{
  const void *v1;
  TBaseFont **v2;
  TBaseFont *v3;
  CFIndex v4;
  uint64_t InitializedGraphicsFont;
  __CFBitVector *Mutable;
  unint64_t v8;
  void *v9;
  void *v11;
  __CFBitVector *v14;
  unint64_t v15;
  void *v16;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  void *v21;
  __CFBitVector *v22;
  __CFBitVector *v25;
  unint64_t v26;
  void *v27;
  const __CFData *v29;
  void *v30;
  unint64_t v31;
  _QWORD v33[5];
  id v34;
  id v35[6];
  id v36;
  id v37;
  CFRange v38;

  v1 = _CTFontEnsureFontRef(a1);
  if (!v1)
    return 0;
  v2 = (TBaseFont **)*((_QWORD *)v1 + 5);
  v3 = v2[50];
  v4 = *((_QWORD *)v3 + 25);
  if (!v4)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v2[50]);
    v4 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v3 + 872))(v3, InitializedGraphicsFont);
  }
  v37 = 0;
  if (TFont::ensureSVGTableObject((TFont *)v2))
  {
    if (!atomic_load((unint64_t *)&v37))
    {
      Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
      if (Mutable)
      {
        v8 = (unint64_t)Mutable;
        CFBitVectorSetCount(Mutable, v4);
        do
          v9 = (void *)__ldaxr((unint64_t *)&v37);
        while (__stlxr(v8, (unint64_t *)&v37));

      }
    }
    if (atomic_load((unint64_t *)&v37))
    {
      v35[1] = (id)MEMORY[0x1E0C809B0];
      v35[2] = (id)3321888768;
      v35[3] = __CTFontCopyColorGlyphCoverage_block_invoke;
      v35[4] = &__block_descriptor_48_8_40c29_ZTS6TCFRefIP13__CFBitVectorE_e13_v24__0___qq_8l;
      v35[5] = (id)v4;
      v11 = (void *)atomic_load((unint64_t *)&v37);
      v36 = v11;
      OTSVGTableEnumerateGlyphs();

    }
  }
  v35[0] = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v2[50] + 480))(v35, v2[50], 1935829368);
  if (atomic_load((unint64_t *)v35))
  {
    if (!atomic_load((unint64_t *)&v37))
    {
      v14 = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
      if (v14)
      {
        v15 = (unint64_t)v14;
        CFBitVectorSetCount(v14, v4);
        do
          v16 = (void *)__ldaxr((unint64_t *)&v37);
        while (__stlxr(v15, (unint64_t *)&v37));

      }
    }
    if (atomic_load((unint64_t *)&v37))
    {
      v18 = 0xFFFFLL;
      if (v4 < 0xFFFF)
        v18 = v4;
      if (v18 >= 1)
      {
        v19 = 0;
        v20 = v18 & ~(v18 >> 63);
        do
        {
          v21 = (void *)atomic_load((unint64_t *)v35);
          if (TFont::HasColorBitmapForGlyph((TFont *)v2, (unsigned __int16)v19, v21))
          {
            v22 = (__CFBitVector *)atomic_load((unint64_t *)&v37);
            v38.location = v19;
            v38.length = 1;
            CFBitVectorSetBits(v22, v38, 1u);
          }
          ++v19;
        }
        while (v20 != v19);
      }
    }
  }

  v35[0] = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v2[50] + 480))(v35, v2[50], 1129270354);
  if (atomic_load((unint64_t *)v35))
  {
    if (!atomic_load((unint64_t *)&v37))
    {
      v25 = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
      if (v25)
      {
        v26 = (unint64_t)v25;
        CFBitVectorSetCount(v25, v4);
        do
          v27 = (void *)__ldaxr((unint64_t *)&v37);
        while (__stlxr(v26, (unint64_t *)&v37));

      }
    }
    if (atomic_load((unint64_t *)&v37))
    {
      v29 = (const __CFData *)atomic_load((unint64_t *)v35);
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3321888768;
      v33[2] = __CTFontCopyColorGlyphCoverage_block_invoke_16;
      v33[3] = &__block_descriptor_48_8_40c29_ZTS6TCFRefIP13__CFBitVectorE_e13_v24__0___qq_8l;
      v33[4] = v4;
      v30 = (void *)atomic_load((unint64_t *)&v37);
      v34 = v30;
      EnumerateGlyphsWithLayerRecords(v29, (uint64_t)v33);

    }
  }

  do
    v31 = __ldaxr((unint64_t *)&v37);
  while (__stlxr(0, (unint64_t *)&v37));

  return v31;
}

id __copy_helper_block_8_40c29_ZTS6TCFRefIP13__CFBitVectorE(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = (void *)atomic_load((unint64_t *)(a2 + 40));
  result = v3;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_8_40c29_ZTS6TCFRefIP13__CFBitVectorE(uint64_t a1)
{

}

CFBitVectorRef CTFontCopyGlyphCoverageForFeature(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFDictionary *v2;
  const __CFAllocator *v4;
  unint64_t v5;
  void *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  TFont *v9;
  CTFeatureSetting *v10;
  CFBitVectorRef v11;
  const __CFAllocator *v13;
  CFIndex GlyphCount;
  id MutableCopy;
  id v16;

  if (!a1)
    return CFBitVectorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v2 = theDict;
  if (!theDict)
    return CFBitVectorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v16 = 0;
  if (CFDictionaryGetValue(theDict, CFSTR("CTFeatureOpenTypeTag"))
    && !CFDictionaryGetValue(v2, CFSTR("CTFeatureOpenTypeValue")))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v2);
    do
      v5 = __ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));
    do
      v6 = (void *)__ldaxr((unint64_t *)&v16);
    while (__stlxr(v5, (unint64_t *)&v16));

    v7 = (__CFDictionary *)atomic_load((unint64_t *)&v16);
    LODWORD(MutableCopy) = 1;
    v8 = CFNumberCreate(v4, kCFNumberIntType, &MutableCopy);
    CFDictionarySetValue(v7, CFSTR("CTFeatureOpenTypeValue"), v8);

    v2 = (const __CFDictionary *)atomic_load((unint64_t *)&v16);
  }
  v9 = *(TFont **)(a1 + 40);
  v10 = -[CTFeatureSetting initWithDictionary:]([CTFeatureSetting alloc], "initWithDictionary:", v2);
  if (v10)
  {
    MutableCopy = (id)0xAAAAAAAAAAAAAAAALL;
    TFont::CoverageForFeatureSetting(v9, v10, (unint64_t *)&MutableCopy);
    do
      v11 = (CFBitVectorRef)__ldaxr((unint64_t *)&MutableCopy);
    while (__stlxr(0, (unint64_t *)&MutableCopy));

  }
  else
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    GlyphCount = TFont::GetGlyphCount(v9);
    v11 = CFBitVectorCreate(v13, 0, GlyphCount);
  }

  return v11;
}

unint64_t CTFontCopyShapingLanguages(uint64_t a1)
{
  unint64_t v1;
  id v3;

  if (a1)
  {
    v3 = (id)0xAAAAAAAAAAAAAAAALL;
    TFont::ShapingLanguages(*(TFont **)(a1 + 40), (unint64_t *)&v3);
    do
      v1 = __ldaxr((unint64_t *)&v3);
    while (__stlxr(0, (unint64_t *)&v3));
  }
  else
  {
    v3 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3B0]);
    do
      v1 = __ldaxr((unint64_t *)&v3);
    while (__stlxr(0, (unint64_t *)&v3));
  }

  return v1;
}

unint64_t CTFontCopyVariantsOfGlyph(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  id v4;

  if (a1)
  {
    v4 = (id)0xAAAAAAAAAAAAAAAALL;
    TFont::CopyVariantsOfGlyph(*(TFont **)(a1 + 40), a2, (unint64_t *)&v4);
    do
      v2 = __ldaxr((unint64_t *)&v4);
    while (__stlxr(0, (unint64_t *)&v4));
  }
  else
  {
    v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
      v2 = __ldaxr((unint64_t *)&v4);
    while (__stlxr(0, (unint64_t *)&v4));
  }

  return v2;
}

id CTFontCopyTallestTextStyleLanguageForString(const __CFString *a1)
{
  __int128 v2;
  CFIndex Length;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  const __CFAllocator *v7;
  __CFArray *Mutable;
  _DWORD *v9;
  uint64_t ShortName;
  __CFString *v11;
  void *v13;
  const __CFString *v14;
  __CFString *v15;
  int v16;
  void *v17;
  id v18;
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  id v24;
  _OWORD v25[2];
  void *v26[2];
  void *__p[2];
  unint64_t v28;
  BOOL v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (qword_1ECDE75D8 != -1)
    dispatch_once_f(&qword_1ECDE75D8, 0, (dispatch_function_t)GetExcessiveLineHeightCharacterSet(void)::$_0::__invoke);
  if (!qword_1ECDE75D0)
    return 0;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)__p = 0u;
  v28 = 0xAAAAAAAA3F800000;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v2;
  v25[1] = v2;
  CFCharacterSetInitInlineBuffer();
  if (a1)
    Length = CFStringGetLength(a1);
  else
    Length = 0;
  v30[0] = &off_1E15DF4D0;
  v30[1] = v25;
  v30[2] = v26;
  v31 = v30;
  EnumerateCharactersInRange(a1, 0, Length, (uint64_t)v30);
  v4 = v31;
  if (v31 == v30)
  {
    v5 = 4;
    v4 = v30;
    goto LABEL_11;
  }
  if (v31)
  {
    v5 = 5;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  LOBYTE(v24) = -86;
  _ExuberatedGroupForPreferredLanguages((BOOL *)&v24, 0);
  v6 = v24;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = __p[0];
  if (__p[0])
  {
    do
    {
      if (v9[4] == 25)
      {
        CFArrayAppendValue(Mutable, CFSTR("vi"));
      }
      else
      {
        ShortName = uscript_getShortName();
        if (ShortName)
        {
          v11 = (__CFString *)CFStringCreateWithFormat(v7, 0, CFSTR("und-%s"), ShortName);
          v24 = (id)0xAAAAAAAAAAAAAAAALL;
          LanguageIdentifierByNormalizing(v11, 0, (unint64_t *)&v24);
          if (atomic_load((unint64_t *)&v24))
          {
            if (!v6)
              goto LABEL_25;
            v13 = (void *)atomic_load((unint64_t *)&v24);
            v14 = v13;
            if (v14 == CFSTR("ar"))
            {

            }
            else
            {
              v15 = (__CFString *)v14;
              if (!v14)
              {

                goto LABEL_25;
              }
              v16 = CFEqual(v14, CFSTR("ar"));

              if (!v16)
              {
LABEL_25:
                v17 = (void *)atomic_load((unint64_t *)&v24);
                v18 = v17;
                CFArrayAppendValue(Mutable, v18);

                goto LABEL_26;
              }
            }
            CFArrayAppendValue(Mutable, CFSTR("ur"));
          }
LABEL_26:

        }
      }
      v9 = *(_DWORD **)v9;
    }
    while (v9);
  }
  v24 = 0;
  v29 = -86;
  _ExuberatedGroupForPreferredLanguages(&v29, 0);
  _LargestExuberatedGroupForLanguages(Mutable, (const __CFString **)&v24, !v29, 0);
  v19 = v24;

  v20 = __p[0];
  if (__p[0])
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = v26[0];
  v26[0] = 0;
  if (v22)
    operator delete(v22);
  return v19;
}

CFCharacterSetRef _CTFontCopyPredefinedCharacterSet(TDescriptorSource *a1)
{
  return TDescriptorSource::CopyPredefinedCharacterSet(a1, (const __CFString *)1);
}

void *CTFontStrikeMetricsCreateDictionaryRepresentation(uint64_t a1)
{
  TBaseFont *v1;

  if (a1 && (v1 = *(TBaseFont **)(*(_QWORD *)(a1 + 40) + 400)) != 0)
    return TBaseFont::CreateStrikeMetricsDictionaryRepresentation(v1);
  else
    return 0;
}

id CTFontCopyCharacterSetOfDefaultCascadeListForSystemUIFonts(uint64_t a1)
{
  TFont *v1;
  TBaseFont *v2;
  BOOL v4;

  if (a1
    && (v1 = *(TFont **)(a1 + 40), TFont::IsSystemUIFontAndForShaping(v1, &v4))
    && (v2 = (TBaseFont *)*((_QWORD *)v1 + 50)) != 0)
  {
    return (id)TBaseFont::GetDefaultComposite(v2, 1, 3);
  }
  else
  {
    return 0;
  }
}

CTFontRef CTFontCreateEmojiFontForFont(TFont **a1)
{
  TFont *v2;
  const __CTFontDescriptor *v4;
  const __CTFontDescriptor *v6;
  CTFontRef v7;
  uint64_t v8;
  id v9;

  if (!a1)
    return 0;
  v2 = a1[5];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v2 + 50) + 712))(*((_QWORD *)v2 + 50)))
    return (CTFontRef)a1;
  TFont::CopyDescriptor(a1[5], 0, (unint64_t *)&v9);
  do
    v4 = (const __CTFontDescriptor *)__ldaxr((unint64_t *)&v9);
  while (__stlxr(0, (unint64_t *)&v9));

  v9 = (id)0xAAAAAAAAAAAAAAAALL;
  TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v8);
  TDescriptorSource::CopyEmojiFontDescriptor((TDescriptorSource *)&v8, 0, v4, (unint64_t *)&v9);
  if (atomic_load((unint64_t *)&v9))
  {
    v6 = (const __CTFontDescriptor *)atomic_load((unint64_t *)&v9);
    v7 = CTFontCreateWithFontDescriptor(v6, *((CGFloat *)v2 + 2), 0);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

CGImageRef CTFontCopyImageForGlyph(const void *a1, unsigned int a2, float64x2_t *a3, float64x2_t *a4, double a5)
{
  const void *v9;
  TBaseFont **v10;
  void *v12;
  TBaseFont *v13;
  uint64_t InitializedGraphicsFont;
  float64x2_t v15;
  double ColorBitmapFontTranslate;
  double v17;
  CGFloat v18;
  CGImage *v19;
  CGImageRef v20;
  float64x2_t v22;
  id v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  id v27[3];
  id v28;
  CGPoint v29;

  v9 = _CTFontEnsureFontRef(a1);
  if (!v9)
    return 0;
  v10 = (TBaseFont **)*((_QWORD *)v9 + 5);
  v28 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, TBaseFont *, uint64_t))(*(_QWORD *)v10[50] + 480))(&v28, v10[50], 1935829368);
  if (atomic_load((unint64_t *)&v28))
  {
    memset(v27, 170, sizeof(v27));
    v12 = (void *)atomic_load((unint64_t *)&v28);
    v13 = v10[50];
    if (!*((_QWORD *)v13 + 25))
    {
      InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v10[50]);
      (*(void (**)(TBaseFont *, uint64_t))(*(_QWORD *)v13 + 872))(v13, InitializedGraphicsFont);
    }
    TsbixContext::TsbixContext((TsbixContext *)v27, v12);
    v22.f64[0] = NAN;
    v22.f64[1] = NAN;
    v23 = (id)0xAAAAAAAAAAAAAAAALL;
    v15.f64[0] = NAN;
    v15.f64[1] = NAN;
    v24 = v15;
    v25 = v15;
    v26 = -1;
    ColorBitmapFontTranslate = TFont::GetColorBitmapFontTranslate((TFont *)v10);
    v18 = v17;
    v29.x = ColorBitmapFontTranslate;
    v29.y = v18;
    v19 = (CGImage *)atomic_load((unint64_t *)&v23);
    v20 = CGImageRetain(v19);
    if (v20)
    {
      if (a3)
        *a3 = vaddq_f64(v24, v22);
      if (a4)
        *a4 = v25;
    }

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

double CTFontGetTypographicBoundsForAdaptiveImageProvider(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  TFont *v4;
  double v6;
  __int16 v7;

  v1 = EmojiFontForFont(a1);
  v2 = v1;
  if (v1)
  {
    v3 = v1[5];
    v7 = *(_WORD *)TBaseFont::GetCachedSpaceAndJoinerGlyphs(*(TBaseFont **)(v3 + 400), 0);
    v6 = NAN;
    TFont::GetUnsummedAdvancesForGlyphs(v3, (uint64_t)&v7, &v6, 1, 1, 0, 0);
    v4 = (TFont *)v2[5];
    if (!*((_DWORD *)v4 + 12))
    {
      TFont::InitStrikeMetrics(v4);
      v4 = (TFont *)v2[5];
    }
    if (!*((_DWORD *)v4 + 12))
      TFont::InitStrikeMetrics(v4);
  }
  return 0.0;
}

_QWORD *EmojiFontForFont(_QWORD *object)
{
  const void *AssociatedObject;
  const void *v3;
  id v4;

  if (object
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(object[5] + 400) + 712))(*(_QWORD *)(object[5] + 400)) & 1) != 0)
  {
    return object;
  }
  AssociatedObject = objc_getAssociatedObject(object, (const void *)EmojiFontForFont(__CTFont const*)::sEmojiFontAssociationKey);
  if (!AssociatedObject)
  {
    AssociatedObject = CTFontCreateEmojiFontForFont((TFont **)object);
    v3 = (const void *)EmojiFontForFont(__CTFont const*)::sEmojiFontAssociationKey;
    v4 = (id)CFMakeCollectable(AssociatedObject);
    objc_setAssociatedObject(object, v3, v4, (void *)0x301);
  }
  return AssociatedObject;
}

CGImageRef CTFontCopyImageFromAdaptiveImageProvider(const __CTFont *a1, void *a2, float64x2_t *a3, double a4)
{
  float64x2_t v5;
  float64x2_t v6;
  CGImage *v7;
  CGImageRef v8;
  float64x2_t v10;
  id v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;

  if (!a1)
    return 0;
  v10.f64[0] = NAN;
  v10.f64[1] = NAN;
  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  v5.f64[0] = NAN;
  v5.f64[1] = NAN;
  v12 = v5;
  v13 = v5;
  v14 = -1;
  if (a3)
  {
    v6 = v13;
    *a3 = vaddq_f64(v12, v10);
    a3[1] = v6;
  }
  v7 = (CGImage *)atomic_load((unint64_t *)&v11);
  v8 = CGImageRetain(v7);

  return v8;
}

_anonymous_namespace_::TCGImageData *`anonymous namespace'::TCGImageData::TCGImageData(_anonymous_namespace_::TCGImageData *this, const __CTFont *a2, void *a3, double a4)
{
  _OWORD *v8;
  __int128 v9;
  unint64_t *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  double *v14;
  double v15;
  double v16;
  _QWORD *v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v26;
  unint64_t v27;
  id v29;

  v8 = (_OWORD *)MEMORY[0x1E0C9D538];
  v9 = *MEMORY[0x1E0C9D538];
  *((_QWORD *)this + 2) = 0;
  v10 = (unint64_t *)((char *)this + 16);
  *(_OWORD *)this = v9;
  v11 = (char *)this + 24;
  *(_OWORD *)((char *)this + 24) = *v8;
  v12 = (char *)this + 40;
  *(_OWORD *)((char *)this + 40) = *MEMORY[0x1E0C9D820];
  *((_QWORD *)this + 7) = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v13 = EmojiFontForFont(a2);
    if (v13)
    {
      v14 = (double *)v13[5];
      v15 = v14[2];
      if (v15 <= 16.0)
      {
        v16 = v15 * 0.25;
      }
      else
      {
        v16 = 0.0;
        if (v15 < 24.0)
          v16 = (24.0 - v15) * 0.5;
      }
      v29 = (id)objc_msgSend(a3, "imageForProposedSize:scaleFactor:imageOffset:imageSize:", v11, v12, v15 + v16, v15 + v16, a4);
      if (!atomic_load((unint64_t *)&v29))
        goto LABEL_25;
      *(double *)this = TFont::GetColorBitmapFontTranslate((TFont *)v14);
      *((_QWORD *)this + 1) = v22;
      do
        v23 = __ldaxr((unint64_t *)&v29);
      while (__stlxr(0, (unint64_t *)&v29));
      do
        v24 = (void *)__ldaxr(v10);
      while (__stlxr(v23, v10));
LABEL_24:

LABEL_25:
    }
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v17 = EmojiFontForFont(a2);
    if (v17)
    {
      v18 = (double *)v17[5];
      v19 = v18[2];
      if (v19 <= 16.0)
      {
        v20 = v19 * 0.25;
      }
      else
      {
        v20 = 0.0;
        if (v19 < 24.0)
          v20 = (24.0 - v19) * 0.5;
      }
      v29 = (id)objc_msgSend(a3, "imageForPointSize:scaleFactor:imageOffset:imageSize:", v11, v12, v19 + v20, a4);
      if (!atomic_load((unint64_t *)&v29))
        goto LABEL_25;
      *(double *)this = TFont::GetColorBitmapFontTranslate((TFont *)v18);
      *((_QWORD *)this + 1) = v26;
      do
        v27 = __ldaxr((unint64_t *)&v29);
      while (__stlxr(0, (unint64_t *)&v29));
      do
        v24 = (void *)__ldaxr(v10);
      while (__stlxr(v27, v10));
      goto LABEL_24;
    }
  }
  return this;
}

void CTFontDrawImageFromAdaptiveImageProviderAtPoint(const __CTFont *a1, void *a2, CGContext *a3, CGFloat a4, CGFloat a5)
{
  __int128 v10;
  double ContentsScale;
  _QWORD v12[2];
  id v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  CGPoint v17;

  if (a1)
  {
    v12[0] = -1;
    v12[1] = -1;
    v13 = (id)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    v14 = v10;
    v15 = v10;
    v16 = -1;
    ContentsScale = GetContentsScale(a3);
    v17.x = a4;
    v17.y = a5;

  }
}

double CTFontGetTypographicBoundsForEmojiImageProvider(_QWORD *a1, uint64_t a2, CGFloat *a3, CGFloat *a4)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MaxX;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  v12.origin.x = CTFontGetTypographicBoundsForAdaptiveImageProvider(a1);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  MaxX = CGRectGetMaxX(v12);
  if (a3)
  {
    v13.origin.x = x;
    v13.origin.y = y;
    v13.size.width = width;
    v13.size.height = height;
    *a3 = CGRectGetMaxY(v13);
  }
  if (a4)
  {
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    *a4 = -CGRectGetMinY(v14);
  }
  return MaxX;
}

float64_t CTFontCopyImageFromEmojiImageProvider(const __CTFont *a1, void *a2, float64x2_t *a3, float64x2_t *a4, double a5)
{
  float64x2_t v7;
  float64_t result;
  float64x2_t v9;
  float64x2_t v10;

  v7.f64[0] = NAN;
  v7.f64[1] = NAN;
  v9 = v7;
  v10 = v7;
  CTFontCopyImageFromAdaptiveImageProvider(a1, a2, &v9, a5);
  if (a3)
  {
    result = v9.f64[0];
    *a3 = v9;
  }
  if (a4)
  {
    result = v10.f64[0];
    *a4 = v10;
  }
  return result;
}

uint64_t TEmojiImageRun::TEmojiImageRun(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *CachedSpaceAndJoinerGlyphs;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v17;
  __int16 v18;
  CGSize v19;

  TRun::TRun((TRun *)a1, *(const TRun **)(a2 + 40));
  *v3 = &off_1E15DD708;
  *(_QWORD *)(a1 + 320) = TAttributes::GetEmojiImageProvider((TAttributes *)(v3 + 5));
  v4 = (unint64_t *)(a1 + 56);
  v5 = (_QWORD *)atomic_load((unint64_t *)(a1 + 56));
  v17 = EmojiFontForFont(v5);
  if (atomic_load((unint64_t *)&v17))
  {
    if (atomic_load((unint64_t *)&v17))
    {
      do
        v8 = __ldaxr((unint64_t *)&v17);
      while (__stlxr(0, (unint64_t *)&v17));
      do
        v9 = (void *)__ldaxr(v4);
      while (__stlxr(v8, v4));

      *(_BYTE *)(a1 + 88) = 1;
    }
  }

  v10 = atomic_load(v4);
  v11 = *(_QWORD *)(v10 + 40);
  CachedSpaceAndJoinerGlyphs = (unsigned __int16 *)TBaseFont::GetCachedSpaceAndJoinerGlyphs(*(TBaseFont **)(v11 + 400), 0);
  v13 = *CachedSpaceAndJoinerGlyphs;
  v18 = *CachedSpaceAndJoinerGlyphs;
  v17 = (id)-1;
  TFont::GetUnsummedAdvancesForGlyphs(v11, (uint64_t)&v18, (double *)&v17, 1, 1, 0, 0);
  *(_QWORD *)(a1 + 328) = v17;
  v14 = *(_QWORD *)(a1 + 208);
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      objc_msgSend(*(id *)(a1 + 216), "setGlyph:atIndex:", v13, i + *(_QWORD *)(a1 + 200));
      if ((_DWORD)v13 == 0xFFFF && (*(_BYTE *)(a1 + 225) & 2) != 0)
        *(_BYTE *)(a1 + 225) |= 8u;
      v19.width = *(CGFloat *)(a1 + 328);
      v19.height = 0.0;
      TStorageRange::SetAdvance((TStorageRange *)(a1 + 192), i, v19);
    }
  }
  return a1;
}

const void *TAttributes::GetEmojiImageProvider(TAttributes *this)
{
  const __CFDictionary *v2;
  const void *result;
  const __CFDictionary *v4;

  v2 = (const __CFDictionary *)atomic_load((unint64_t *)this);
  result = CFDictionaryGetValue(v2, CFSTR("CTEmojiImageProvider"));
  if (!result)
  {
    v4 = (const __CFDictionary *)atomic_load((unint64_t *)this);
    return CFDictionaryGetValue(v4, CFSTR("CTAdaptiveImageProvider"));
  }
  return result;
}

void TEmojiImageRun::DrawGlyphs(TEmojiImageRun *this, CGContextRef c, CFRange a3)
{
  CFIndex location;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  BOOL v9;
  CGPoint TextPosition;
  double *v11;
  void *v12;
  double v13;
  double v14;
  __int128 v15;
  const __CTFont *v16;
  double ContentsScale;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  CFIndex v25;
  CFIndex v26;
  double *v27;
  double *v28;
  double v29;
  _QWORD v30[2];
  id v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  CGPoint v35;

  location = a3.location;
  v6 = *((_QWORD *)this + 26);
  if (a3.location + a3.length >= v6)
    v7 = *((_QWORD *)this + 26);
  else
    v7 = a3.location + a3.length;
  if (a3.location < 0 || a3.location >= v6)
  {
    v9 = a3.location + a3.length > 0 && a3.location < 1;
    location = 0;
    if (v9)
      v8 = v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = v7 - a3.location;
  }
  if (v8 >= 1)
  {
    TextPosition = CGContextGetTextPosition(c);
    v11 = (double *)*((_QWORD *)this + 39);
    v12 = (void *)*((_QWORD *)this + 40);
    if (!v11)
      v11 = (double *)MEMORY[0x1E0C9D820];
    v13 = *v11;
    v14 = v11[1];
    v30[0] = -1;
    v30[1] = -1;
    v31 = (id)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v15 = -1;
    *((_QWORD *)&v15 + 1) = -1;
    v32 = v15;
    v33 = v15;
    v34 = -1;
    v16 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
    ContentsScale = GetContentsScale(c);
    v18 = *((_QWORD *)this + 27);
    v19 = *(_QWORD *)(v18 + 32);
    if (v19 || (v22 = *(_QWORD *)(v18 + 24)) == 0)
    {
      v20 = 0;
      v21 = (double *)(v19 + 16 * *((_QWORD *)this + 25));
    }
    else
    {
      v21 = (double *)(v22 + 8 * *((_QWORD *)this + 25));
      v20 = 1;
    }
    v23 = TextPosition.x + v13;
    v24 = TextPosition.y + v14;
    if (v6 >= 1)
    {
      v25 = 0;
      v26 = location + v8;
      v27 = v21;
      do
      {
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 40) + 4 * *((_QWORD *)this + 25) + 4 * v25) & 0x20) == 0)
        {
          if (location <= v25 && v26 > v25)
          {
            v35.x = v23;
            v35.y = v24;
          }
          if (v20)
          {
            v28 = &v21[v25];
            v29 = 0.0;
          }
          else
          {
            v29 = v27[1];
            v28 = v27;
          }
          v23 = v23 + *v28;
          v24 = v24 + v29;
        }
        ++v25;
        v27 += 2;
      }
      while (v6 != v25);
    }
    CGContextSetTextPosition(c, v23, v24);

  }
}

void TEmojiImageRun::DrawGlyphsAtPositions(unint64_t *a1, CGContext *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  const __CTFont *v14;
  void *v15;
  double ContentsScale;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  id v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v6 = a3;
  v9 = a1[26];
  if (a3 + a4 >= v9)
    v10 = a1[26];
  else
    v10 = a3 + a4;
  if (a3 < 0 || a3 >= v9)
  {
    v12 = a3 + a4 > 0 && a3 < 1;
    v6 = 0;
    if (v12)
      v11 = v10;
    else
      v11 = 0;
  }
  else
  {
    v11 = v10 - a3;
  }
  if (v11 >= 1)
  {
    v19[0] = -1;
    v19[1] = -1;
    v20 = (id)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    v21 = v13;
    v22 = v13;
    v23 = -1;
    v14 = (const __CTFont *)atomic_load(a1 + 7);
    v15 = (void *)a1[40];
    ContentsScale = GetContentsScale(a2);
    v17 = a5 + 16 * v6 + 8;
    v18 = 4 * v6;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1[27] + 40) + 4 * a1[25] + v18) & 0x20) == 0)
      v17 += 16;
      v18 += 4;
      --v11;
    }
    while (v11);

  }
}

double TEmojiImageRun::GetImageBounds(TEmojiImageRun *this, CGContext *a2, CFRange a3, double *a4, double *a5)
{
  CFIndex location;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  BOOL v12;
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  float64x2_t v17;
  const __CTFont *v18;
  void *v19;
  double ContentsScale;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double *v30;
  float64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  float64x2_t v39;
  float64x2_t v40;
  id v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  CGRect v45;
  CGRect v46;

  location = a3.location;
  v9 = *((_QWORD *)this + 26);
  if (a3.location + a3.length >= v9)
    v10 = *((_QWORD *)this + 26);
  else
    v10 = a3.location + a3.length;
  if (a3.location < 0 || a3.location >= v9)
  {
    v12 = a3.location + a3.length > 0 && a3.location < 1;
    location = 0;
    if (v12)
      v11 = v10;
    else
      v11 = 0;
  }
  else
  {
    v11 = v10 - a3.location;
  }
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if (v11 >= 1)
  {
    v40.f64[0] = NAN;
    v40.f64[1] = NAN;
    v41 = (id)0xAAAAAAAAAAAAAAAALL;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    v42 = v17;
    v43 = v17;
    v44 = -1;
    v18 = (const __CTFont *)atomic_load((unint64_t *)this + 7);
    v19 = (void *)*((_QWORD *)this + 40);
    ContentsScale = GetContentsScale(a2);
    v21 = vaddq_f64(v42, v40);
    v23 = *((_QWORD *)this + 27);
    v24 = *(_QWORD *)(v23 + 32);
    if (v24 || (v27 = *(_QWORD *)(v23 + 24)) == 0)
    {
      v25 = 0;
      v26 = v24 + 16 * *((_QWORD *)this + 25);
    }
    else
    {
      v26 = v27 + 8 * *((_QWORD *)this + 25);
      v25 = 1;
    }
    v28 = v43;
    v22.f64[1] = *a5;
    v22.f64[0] = *a4;
    v29 = vaddq_f64(v21, v22);
    v30 = (double *)(v26 + 16 * location + 8);
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 27) + 40) + 4 * *((_QWORD *)this + 25) + 4 * location) & 0x20) == 0)
      {
        v31 = v29.f64[1];
        v45.origin.x = x;
        v45.origin.y = y;
        v45.size.width = width;
        v45.size.height = height;
        v39 = v29;
        v33 = *(_OWORD *)&v28 >> 64;
        v32 = (uint64_t)v28;
        v46 = CGRectUnion(v45, *(CGRect *)v29.f64);
        x = v46.origin.x;
        y = v46.origin.y;
        width = v46.size.width;
        height = v46.size.height;
        v34 = *a4;
        if (v25)
        {
          v35 = *(double *)(v26 + 8 * location);
          *a4 = v35 + v34;
          v36 = (float64x2_t)*(unint64_t *)&v35;
          v37 = 0.0;
        }
        else
        {
          v36 = *(float64x2_t *)(v30 - 1);
          *a4 = v36.f64[0] + v34;
          v37 = *v30;
        }
        v29 = vaddq_f64(v39, v36);
        *a5 = v37 + *a5;
      }
      ++location;
      v30 += 2;
      --v11;
    }
    while (v11);

  }
  return x;
}

uint64_t _CTFontGetBaseFontType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 400) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 400));
}

CFArrayRef _CTFontGetPaletteColors(const void *a1)
{
  TFont **v1;

  v1 = (TFont **)_CTFontEnsureFontRef(a1);
  if (v1)
    return (CFArrayRef)TFont::GetPaletteColors(v1[5]);
  else
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
}

void TEmojiImageRun::~TEmojiImageRun(void **this)
{
  TRun::~TRun(this);
  JUMPOUT(0x186DC03ACLL);
}

uint64_t TEmojiImageRun::CanUpdateWidth(TEmojiImageRun *this)
{
  return 0;
}

void std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 123;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[123])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<CGSize,TInlineBufferAllocator<CGSize,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (unint64_t)(a1 + 3);
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v7 >> 4;
    v10 = v4 - *a1;
    if (v10 >> 3 > v8)
      v8 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    if (v11)
      v12 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(a1 + 3), v11);
    else
      v12 = 0;
    v13 = &v12[16 * v9];
    v14 = &v12[16 * v11];
    bzero(v13, 16 * a2);
    v15 = &v13[16 * a2];
    v17 = *a1;
    v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    v18 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      v19 = (char *)(a1 + 63);
      if (v6 <= (unint64_t)v16 && v19 > v16)
      {
        if (v18 == *(char **)v19)
          *(_QWORD *)v19 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

uint64_t GetGlyphAfterHiding(TFont const*,unsigned short)::$_0::__invoke(TFont *a1)
{
  uint64_t result;

  _MergedGlobals_11 = TFont::GetGlyphWithName(a1, CFSTR("u1F1F9_u1F1FC"));
  result = TFont::GetGlyphWithName(a1, CFSTR("hiddenglyph"));
  word_1ECDE7542 = result;
  return result;
}

CGColorSpaceRef ___ZL14CopyEmojiImagejPKvmddPK8__CFDataP6CGSize_block_invoke()
{
  CGColorSpaceRef result;

  atomic_store((unint64_t)malloc_type_malloc(qword_1ECDE7570, 0x1BA38830uLL), &qword_1ECDE7560);
  result = CGColorSpaceCreateDeviceRGB();
  qword_1ECDE7568 = (uint64_t)result;
  return result;
}

void CreateImageWithDataProvider(CGDataProvider *a1, CGDataProviderRef provider, int a3)
{
  uint64_t *v5;
  const __CFDictionary *v6;
  CGImageSource *v7;
  CGImageSource *v8;
  CGImageRef ImageAtIndex;
  void *v10;
  dispatch_once_t *v11;
  unint64_t (*v12)();

  *(_QWORD *)a1 = 0;
  if (!provider)
    return;
  switch(a3)
  {
    case 1785751328:
      if (qword_1ECDE7598 == -1)
      {
        v5 = &qword_1ECDE75A0;
        goto LABEL_11;
      }
      v11 = &qword_1ECDE7598;
      v12 = GetImageHintDict::$_1::__invoke;
      break;
    case 1953064550:
      if (qword_1ECDE75A8 == -1)
      {
        v5 = &qword_1ECDE75B0;
        goto LABEL_11;
      }
      v11 = &qword_1ECDE75A8;
      v12 = GetImageHintDict::$_2::__invoke;
      break;
    case 1886283552:
      if (qword_1ECDE7588 == -1)
      {
        v5 = &qword_1ECDE7590;
        goto LABEL_11;
      }
      v11 = &qword_1ECDE7588;
      v12 = GetImageHintDict::$_0::__invoke;
      break;
    default:
      return;
  }
  dispatch_once_f(v11, 0, (dispatch_function_t)v12);
  v5 = v11 + 1;
LABEL_11:
  v6 = (const __CFDictionary *)*v5;
  if (*v5)
  {
    v7 = CGImageSourceCreateWithDataProvider(provider, (CFDictionaryRef)*v5);
    v8 = v7;
    if (v7)
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, v6);
      do
        v10 = (void *)__ldaxr((unint64_t *)a1);
      while (__stlxr((unint64_t)ImageAtIndex, (unint64_t *)a1));

    }
  }
}

void CopyEmojiImage(unsigned int,void const*,unsigned long,double,double,__CFData const*,CGSize *)::$_0::__invoke(int a1, void *a2)
{
  free(a2);
}

unint64_t GetImageHintDict(unsigned int)::$_0::__invoke()
{
  unint64_t result;

  result = CreateOptionsForImageSourceType((const __CFString *)*MEMORY[0x1E0CA5C10]);
  qword_1ECDE7590 = result;
  return result;
}

unint64_t CreateOptionsForImageSourceType(const __CFString *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  _QWORD *v6;
  const void **v7;
  const void **v8;
  unint64_t v9;
  id v11;

  v2 = *MEMORY[0x1E0CBD2A8];
  v3 = *MEMORY[0x1E0CBD240];
  v4 = operator new(0x10uLL);
  *v4 = v2;
  v4[1] = v3;
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  v6 = operator new(0x10uLL);
  *v6 = a1;
  v6[1] = v5;
  v7 = (const void **)operator new(0x20uLL);
  v7[2] = (const void *)*MEMORY[0x1E0CBD288];
  *(_OWORD *)v7 = *(_OWORD *)v4;
  operator delete(v4);
  v8 = (const void **)operator new(0x20uLL);
  v8[2] = v5;
  *(_OWORD *)v8 = *(_OWORD *)v6;
  operator delete(v6);
  v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, v8, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
    v9 = __ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));

  operator delete(v8);
  operator delete(v7);
  return v9;
}

unint64_t GetImageHintDict(unsigned int)::$_1::__invoke()
{
  unint64_t result;

  result = CreateOptionsForImageSourceType((const __CFString *)*MEMORY[0x1E0CA5BA8]);
  qword_1ECDE75A0 = result;
  return result;
}

unint64_t GetImageHintDict(unsigned int)::$_2::__invoke()
{
  unint64_t result;

  result = CreateOptionsForImageSourceType((const __CFString *)*MEMORY[0x1E0CA5C80]);
  qword_1ECDE75B0 = result;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)(a2 + 48);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  *(_QWORD *)(result + 48) = v3;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void ___ZL22GetMLUpscaledImageDataP7CGImagemmdU13block_pointerFvS0_dE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  CGImage *v6;
  __CFData *Mutable;
  CGImageDestination *v8;
  CGDataProvider *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  CGImage *v13;
  CGImage *v14;
  double Width;
  double v16;
  uint64_t v17;
  unint64_t v18;
  id v19;

  if (a3 | objc_msgSend(*(id *)(a1 + 32), "error"))
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    v4 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "results"), "firstObject");
    if (v4)
    {
      v5 = v4;
      if (objc_msgSend(v4, "image"))
      {
        v6 = (CGImage *)objc_msgSend(v5, "image");
        Mutable = CFDataCreateMutable(0, 0);
        v8 = CGImageDestinationCreateWithData(Mutable, (CFStringRef)*MEMORY[0x1E0CA5C10], 1uLL, 0);
        CGImageDestinationAddImage(v8, v6, 0);
        CGImageDestinationFinalize(v8);
        v9 = CGDataProviderCreateWithCFData(Mutable);

        CreateImageWithDataProvider((CGDataProvider *)&v19, v9, 1886283552);
        v10 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
        do
          v11 = __ldaxr((unint64_t *)&v19);
        while (__stlxr(0, (unint64_t *)&v19));
        do
          v12 = (void *)__ldaxr(v10);
        while (__stlxr(v11, v10));

        v13 = *(CGImage **)(a1 + 72);
        v14 = (CGImage *)atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
        Width = (double)CGImageGetWidth(v13);
        CGImageGetHeight(v13);
        v16 = (double)CGImageGetWidth(v14);
        CGImageGetHeight(v14);
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v16 / Width;
        v17 = *(_QWORD *)(a1 + 48);
        if (v17)
        {
          v18 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
          (*(void (**)(uint64_t, unint64_t, double))(v17 + 16))(v17, v18, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
        }

      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class ___ZL18getMADServiceClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECDE75C0)
    qword_1ECDE75C0 = _sl_dlopen();
  result = objc_getClass("MADService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  qword_1ECDE75B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class ___ZL27getMADMLScalingRequestClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!qword_1ECDE75C0)
    qword_1ECDE75C0 = _sl_dlopen();
  result = objc_getClass("MADMLScalingRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  qword_1ECDE75C8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t ___ZZN12_GLOBAL__N_112TCGImageDataC1EPK5TFonttRK12TsbixContextd7CGPointENKUlP7CGImagedE_cvU13block_pointerFvS9_dEEv_block_invoke(uint64_t result, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v2 = (void *)atomic_load((unint64_t *)(result + 32));
  if (v2)
  {
    v3 = result;
    v4[0] = CFSTR("image");
    v4[1] = CFSTR("scaleFactor");
    v5[0] = a2;
    v5[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
    return objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2), *(_QWORD *)(v3 + 40));
  }
  return result;
}

id __copy_helper_block_8_32c87_ZTSKZN12_GLOBAL__N_112TCGImageDataC1EPK5TFonttRK12TsbixContextd7CGPointEUlP7CGImagedE_(uint64_t a1, uint64_t a2)
{
  void *v4;
  id result;
  uint64_t v6;

  v4 = (void *)atomic_load((unint64_t *)(a2 + 32));
  result = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v6;
  return result;
}

void __destroy_helper_block_8_32c87_ZTSKZN12_GLOBAL__N_112TCGImageDataC1EPK5TFonttRK12TsbixContextd7CGPointEUlP7CGImagedE_(uint64_t a1)
{

}

void DrawGlyphsAtPositions(TFont const*,unsigned short const*,CGPoint const*,unsigned long,CGContext *,`anonymous namespace'::DrawGlyphsConfiguration const&)::$_0::operator()(uint64_t a1, float64x2_t *a2)
{
  __int128 v3;
  unint64_t v4;
  size_t v6;
  _OWORD *v7;
  char *v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  _WORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void **v26;
  char *v27;
  __int16 v28;
  void **v29;
  char **v30;
  _OWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v47;
  char *v48;
  uint64_t v49;
  BOOL v50;
  char *v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void **v58[5];
  char *v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 *v92;
  void *__p;
  char *v94;
  char *v95;
  _OWORD v96[15];
  _QWORD v97[3];

  v97[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v96[14] = v3;
  v96[13] = v3;
  v96[12] = v3;
  v96[11] = v3;
  v96[10] = v3;
  v96[9] = v3;
  v96[8] = v3;
  v96[7] = v3;
  v96[6] = v3;
  v96[5] = v3;
  v96[4] = v3;
  v96[3] = v3;
  v96[2] = v3;
  v96[1] = v3;
  v96[0] = v3;
  v4 = *(_QWORD *)(a1 + 24);
  __p = 0;
  v94 = 0;
  v95 = 0;
  v97[0] = v96;
  if (v4)
  {
    if (v4 >> 61)
LABEL_79:
      abort();
    if ((_QWORD *)((char *)v96 + 8 * v4) <= v97)
    {
      v97[0] = (char *)v96 + 8 * v4;
      v6 = 8 * v4;
      v7 = v96;
    }
    else
    {
      v6 = 8 * v4;
      v7 = operator new(8 * v4);
    }
    v8 = (char *)v7 + 8 * v4;
    __p = v7;
    v95 = v8;
    bzero(v7, v6);
    v94 = v8;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v90 = v9;
    v91 = v9;
    v88 = v9;
    v89 = v9;
    v86 = v9;
    v87 = v9;
    v84 = v9;
    v85 = v9;
    v82 = v9;
    v83 = v9;
    v80 = v9;
    v81 = v9;
    v78 = v9;
    v79 = v9;
    v77 = v9;
    v76 = v9;
    v75 = v9;
    v74 = v9;
    v73 = v9;
    v72 = v9;
    v71 = v9;
    v70 = v9;
    v69 = v9;
    v68 = v9;
    v67 = v9;
    v66 = v9;
    v65 = v9;
    v64 = v9;
    v63 = v9;
    v62 = v9;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v92 = &v62;
    std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__vallocate[abi:nn180100](&v59, v4);
    v10 = (char *)v60;
    bzero(v60, 16 * v4);
    v60 = &v10[16 * v4];
    if (*(_QWORD *)(a1 + 24))
    {
      v11 = 0;
      do
      {
        v12 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v11);
        if (OTSVGTableGetDocumentIndexForGlyph() != -1 && OTSVGDocumentCreate())
        {
          v13 = OTSVGGlyphRecordingCreate();
          if (v13)
          {
            *((_QWORD *)__p + v11) = v13;
            *(float64x2_t *)&v59[16 * v11] = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], *(double *)(*(_QWORD *)(a1 + 48) + 16 * v11 + 8)), *a2, *(double *)(*(_QWORD *)(a1 + 48) + 16 * v11)));
          }
          OTSVGDocumentRelease();
        }
        if (!*((_QWORD *)__p + v11))
        {
          v14 = *(_QWORD *)(a1 + 8);
          v15 = *(void ***)(v14 + 8);
          v16 = *(_QWORD *)(v14 + 16);
          if ((unint64_t)v15 >= v16)
          {
            v18 = *(void ***)v14;
            v19 = (uint64_t)v15 - *(_QWORD *)v14;
            if (v19 <= -3)
              goto LABEL_79;
            v20 = v19 >> 1;
            v21 = v16 - (_QWORD)v18;
            if (v21 <= (v19 >> 1) + 1)
              v22 = v20 + 1;
            else
              v22 = v21;
            if (v21 >= 0x7FFFFFFFFFFFFFFELL)
              v23 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            v58[4] = (void **)(v14 + 24);
            if (v23)
            {
              v24 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v14 + 24, v23);
              v18 = *(void ***)v14;
              v15 = *(void ***)(v14 + 8);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[2 * v20];
            *(_WORD *)v25 = v12;
            if (v15 == v18)
            {
              v27 = &v24[2 * v20];
            }
            else
            {
              v26 = v15;
              v27 = &v24[2 * v20];
              do
              {
                v28 = *((_WORD *)v26 - 1);
                v26 = (void **)((char *)v26 - 2);
                *((_WORD *)v27 - 1) = v28;
                v27 -= 2;
              }
              while (v26 != v18);
            }
            v17 = v25 + 2;
            *(_QWORD *)v14 = v27;
            v58[0] = v18;
            v58[1] = v18;
            *(_QWORD *)(v14 + 8) = v25 + 2;
            v58[2] = v15;
            v29 = *(void ***)(v14 + 16);
            *(_QWORD *)(v14 + 16) = &v24[2 * v23];
            v58[3] = v29;
            std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v58);
          }
          else
          {
            *(_WORD *)v15 = v12;
            v17 = (_WORD *)v15 + 1;
          }
          *(_QWORD *)(v14 + 8) = v17;
          v30 = *(char ***)(a1 + 16);
          v31 = (_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
          v33 = v30[1];
          v32 = (unint64_t)v30[2];
          if ((unint64_t)v33 >= v32)
          {
            v35 = (v33 - *v30) >> 4;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 60)
              goto LABEL_79;
            v37 = v32 - (_QWORD)*v30;
            if (v37 >> 3 > v36)
              v36 = v37 >> 3;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
              v38 = 0xFFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
              v39 = TInlineBufferAllocator<CGPoint,30ul>::allocate((uint64_t)(v30 + 3), v38);
            else
              v39 = 0;
            v40 = &v39[16 * v35];
            *(_OWORD *)v40 = *v31;
            v42 = *v30;
            v41 = v30[1];
            v43 = v40;
            if (v41 != *v30)
            {
              do
              {
                *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
                v43 -= 16;
                v41 -= 16;
              }
              while (v41 != v42);
              v41 = *v30;
            }
            v34 = v40 + 16;
            *v30 = v43;
            v30[1] = v40 + 16;
            v44 = v30[2];
            v30[2] = &v39[16 * v38];
            if (v41)
            {
              v45 = (char *)(v30 + 63);
              if (v30 + 3 <= (char **)v41 && v45 > v41)
              {
                if (v44 == *(char **)v45)
                  *(_QWORD *)v45 = v41;
              }
              else
              {
                operator delete(v41);
              }
            }
          }
          else
          {
            *(_OWORD *)v33 = *v31;
            v34 = v33 + 16;
          }
          v30[1] = v34;
        }
        ++v11;
      }
      while (v11 < *(_QWORD *)(a1 + 24));
    }
  }
  else
  {
    v76 = v3;
    v75 = v3;
    v74 = v3;
    v73 = v3;
    v72 = v3;
    v71 = v3;
    v70 = v3;
    v69 = v3;
    v68 = v3;
    v67 = v3;
    v66 = v3;
    v90 = v3;
    v91 = v3;
    v88 = v3;
    v89 = v3;
    v86 = v3;
    v87 = v3;
    v84 = v3;
    v85 = v3;
    v82 = v3;
    v83 = v3;
    v80 = v3;
    v81 = v3;
    v78 = v3;
    v79 = v3;
    v77 = v3;
    v65 = v3;
    v64 = v3;
    v63 = v3;
    v62 = v3;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v92 = &v62;
  }
  if ((*(_DWORD *)(a1 + 56) & 0x80000000) != 0)
  {
    if (__p != v94)
    {
      v47 = v94 - 8;
      if (v94 - 8 > __p)
      {
        v48 = (char *)__p + 8;
        do
        {
          v49 = *((_QWORD *)v48 - 1);
          *((_QWORD *)v48 - 1) = *(_QWORD *)v47;
          *(_QWORD *)v47 = v49;
          v47 -= 8;
          v50 = v48 >= v47;
          v48 += 8;
        }
        while (!v50);
      }
    }
    v51 = v59;
    v52 = (char *)v60 - 16;
    if (v59 != v60 && v52 > v59)
    {
      do
      {
        v54 = *(_QWORD *)v51;
        v55 = *((_QWORD *)v51 + 1);
        *(_OWORD *)v51 = *(_OWORD *)v52;
        v51 += 16;
        *(_QWORD *)v52 = v54;
        *((_QWORD *)v52 + 1) = v55;
        v52 -= 16;
      }
      while (v51 < v52);
    }
  }
  OTSVGGlyphRecordingPlaybackRecordingsAtPositions();
  if (*(_QWORD *)(a1 + 24))
  {
    v56 = 0;
    do
    {
      OTSVGGlyphRecordingRelease();
      ++v56;
    }
    while (v56 < *(_QWORD *)(a1 + 24));
  }
  v58[0] = (void **)&v59;
  std::vector<CGPoint,TInlineBufferAllocator<CGPoint,30ul>>::__destroy_vector::operator()[abi:nn180100](v58);
  if (__p)
  {
    v94 = (char *)__p;
    if (v96 > __p || v97 <= __p)
      operator delete(__p);
  }
}

void DrawGlyphsAtPositions(TFont const*,unsigned short const*,CGPoint const*,unsigned long,CGContext *,`anonymous namespace'::DrawGlyphsConfiguration const&)::$_1::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double *v8;
  double v9;
  double v10;
  unsigned int v11;
  __int128 v12;
  double *v14;
  CGPoint v15;
  CGFloat y;
  const CGAffineTransform *v17;
  const CGAffineTransform *v18;
  _QWORD v19[2];
  id v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CGPoint v24;
  CGPoint v25;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 0)
    v4 = -1;
  else
    v4 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)(a1 + 16) - 1;
  if (v5 != v4)
  {
    v17 = (const CGAffineTransform *)(a1 + 200);
    v18 = (const CGAffineTransform *)(a1 + 152);
    do
    {
      v8 = (double *)(*(_QWORD *)(a1 + 32) + 16 * v5);
      v10 = *v8;
      v9 = v8[1];
      v11 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v5);
      v19[0] = -1;
      v19[1] = -1;
      v20 = (id)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      v21 = v12;
      v22 = v12;
      v23 = -1;
      if (atomic_load((unint64_t *)&v20))
      {
        if (!*(_BYTE *)(a1 + 80))
        {
          v14 = (double *)(**(_QWORD **)a1 + 32 * v5);
          v15 = (CGPoint)vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], v9 + *(double *)(a1 + 128) + v14[1] * *(double *)(a1 + 112) + *(double *)(a1 + 96) * *v14), *a3, v10 + *(double *)(a1 + 120) + v14[1] * *(double *)(a1 + 104) + *(double *)(a1 + 88) * *v14));
          y = v15.y;
        }
        if (!*(_BYTE *)(a1 + 144))
        {
          v24.x = v10;
          v24.y = v9;
          DrawInvisibleGlyph(*(CGContext **)(a1 + 136), v11, v24, v18, v17);
        }
      }
      else if (!*(_BYTE *)(a1 + 144))
      {
        CGContextSetCTM();
        v25.x = v10 + *(double *)(a1 + 64);
        v25.y = v9 + *(double *)(a1 + 72);
        DrawVisibleGlyph(*(CGContextRef *)(a1 + 136), v11, v25, v18, v17);
        CGContextSetCTM();
      }

      v5 += *(int *)(a1 + 24);
    }
    while (v5 != v4);
  }
}

id __copy_helper_block_8_64c27_ZTS6TCFRefIPK10__CFStringE88c31_ZTS6TCFRefIPK14__CFDictionaryE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id result;

  v4 = (void *)atomic_load((unint64_t *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = v4;
  v5 = (void *)atomic_load((unint64_t *)(a2 + 88));
  result = v5;
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_8_64c27_ZTS6TCFRefIPK10__CFStringE88c31_ZTS6TCFRefIPK14__CFDictionaryE(uint64_t a1)
{

}

void GetShapingGlyphsQueue(void)::$_0::__invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreText.InitShapingGlyphs", 0);
  qword_1ECDE7548 = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-2, 0);
  dispatch_set_target_queue(v0, global_queue);
}

void InitShapingGlyphsOnQueue(__CTFont const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::__invoke(_QWORD *cf)
{
  TFont *v2;

  if (cf)
  {
    v2 = (TFont *)cf[5];
    if (!*((_QWORD *)v2 + 40))
      TFont::InitShapingGlyphs(v2);
  }
  CFRelease(cf);
}

CFCharacterSetRef GetExcessiveLineHeightCharacterSet(void)::$_0::__invoke()
{
  CFCharacterSetRef result;

  result = TDescriptorSource::CopyPredefinedCharacterSet((TDescriptorSource *)CFSTR("CTFontUIFontExuberatedCharacterSet"), 0);
  qword_1ECDE75D0 = (uint64_t)result;
  return result;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;
  _QWORD v20[5];

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(a1[1], 2 * a2);
      v5 += 2 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (uint64_t)(a1 + 3);
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = a2 + (v8 >> 1);
    if (v9 < 0)
      abort();
    v10 = v8 >> 1;
    v11 = v4 - v7;
    if (v11 > v9)
      v9 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v20[4] = a1 + 3;
    if (v12)
    {
      v13 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate(v6, v12);
      v7 = *a1;
      v5 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v10];
    v15 = &v13[2 * v12];
    bzero(v14, 2 * a2);
    v16 = &v14[2 * a2];
    if (v5 != v7)
    {
      v17 = v5;
      do
      {
        v18 = *((_WORD *)v17 - 1);
        v17 -= 2;
        *((_WORD *)v14 - 1) = v18;
        v14 -= 2;
      }
      while (v17 != v7);
    }
    *a1 = v14;
    a1[1] = v16;
    v19 = a1[2];
    a1[2] = v15;
    v20[2] = v5;
    v20[3] = v19;
    v20[0] = v7;
    v20[1] = v7;
    std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v20);
  }
}

__CFString *TCFBase<TFont>::ClassDebug(uint64_t a1)
{
  __CFString *result;
  __CFString *v3;
  CFStringRef v4;

  result = TFont::DebugDescription(*(TFont **)(a1 + 40));
  if (result)
  {
    v3 = result;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s: %p>{%@}"), "CTFont", a1, result);
    CFRelease(v3);
    return (__CFString *)v4;
  }
  return result;
}

char *std::vector<CGRect,TInlineBufferAllocator<CGRect,30ul>>::__vallocate[abi:nn180100](char **a1, unint64_t a2)
{
  char *result;

  if (a2 >> 59)
    abort();
  result = TInlineBufferAllocator<DecorationOverride,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

void std::__function::__func<CTFontTransformGlyphsWithLanguage::$_0,std::allocator<CTFontTransformGlyphsWithLanguage::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

_QWORD *std::__function::__func<CTFontTransformGlyphsWithLanguage::$_0,std::allocator<CTFontTransformGlyphsWithLanguage::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E15DF440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CTFontTransformGlyphsWithLanguage::$_0,std::allocator<CTFontTransformGlyphsWithLanguage::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E15DF440;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CTFontTransformGlyphsWithLanguage::$_0,std::allocator<CTFontTransformGlyphsWithLanguage::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(a1 + 8), *a2, a2[1], *a3, *a4);
  return v4 != 0;
}

void std::__function::__func<CTFontShapeGlyphs::$_0,std::allocator<CTFontShapeGlyphs::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTFontShapeGlyphs::$_0,std::allocator<CTFontShapeGlyphs::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTFontShapeGlyphs::$_0,std::allocator<CTFontShapeGlyphs::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CTFontShapeGlyphs::$_0,std::allocator<CTFontShapeGlyphs::$_0>,BOOL ()(CFRange,unsigned short **,CGSize **,CGPoint **,long **)>::operator()(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  _QWORD *v4;

  v4 = *a3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  **(_QWORD **)(a1 + 16) = *v4;
  return 1;
}

void std::__function::__func<CTFontCopyTallestTextStyleLanguageForString::$_0,std::allocator<CTFontCopyTallestTextStyleLanguageForString::$_0>,void ()(CFRange,unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x186DC03ACLL);
}

__n128 std::__function::__func<CTFontCopyTallestTextStyleLanguageForString::$_0,std::allocator<CTFontCopyTallestTextStyleLanguageForString::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E15DF4D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CTFontCopyTallestTextStyleLanguageForString::$_0,std::allocator<CTFontCopyTallestTextStyleLanguageForString::$_0>,void ()(CFRange,unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E15DF4D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<CTFontCopyTallestTextStyleLanguageForString::$_0,std::allocator<CTFontCopyTallestTextStyleLanguageForString::$_0>,void ()(CFRange,unsigned int,BOOL *)>::operator()(uint64_t a1, uint64_t a2, UTF32Char *a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int Script;
  int v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t **v19;
  uint64_t *i;
  unint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _BOOL4 v49;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = v6 & 4;
  if (*(_DWORD *)(v5 + 12) > v4 || *(_DWORD *)(v5 + 16) <= v4)
  {
    if ((v6 & 4) == 0)
      return;
LABEL_10:
    Script = uscript_getScript();
    if (!Script)
      return;
    v10 = Script;
    v11 = *(float **)(a1 + 16);
    v12 = Script;
    v13 = *((_QWORD *)v11 + 1);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = Script;
        if (v13 <= Script)
          v15 = Script % v13;
      }
      else
      {
        v15 = (v13 - 1) & Script;
      }
      v19 = *(uint64_t ***)(*(_QWORD *)v11 + 8 * v15);
      if (v19)
      {
        for (i = *v19; i; i = (uint64_t *)*i)
        {
          v21 = i[1];
          if (v21 == Script)
          {
            if (*((_DWORD *)i + 4) == Script)
              return;
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v21 >= v13)
                v21 %= v13;
            }
            else
            {
              v21 &= v13 - 1;
            }
            if (v21 != v15)
              break;
          }
        }
      }
    }
    else
    {
      v15 = 0xAAAAAAAAAAAAAAAALL;
    }
    v22 = operator new(0x18uLL);
    *v22 = 0;
    v22[1] = v12;
    *((_DWORD *)v22 + 4) = v10;
    v23 = (float)(unint64_t)(*((_QWORD *)v11 + 3) + 1);
    v24 = v11[8];
    if (v13 && (float)(v24 * (float)v13) >= v23)
    {
LABEL_93:
      v44 = *(_QWORD **)v11;
      v45 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v15);
      if (v45)
      {
        *v22 = *v45;
      }
      else
      {
        v46 = *((_QWORD *)v11 + 2);
        *v22 = v46;
        *((_QWORD *)v11 + 2) = v22;
        v44[v15] = v11 + 4;
        if (!v46)
        {
LABEL_102:
          ++*((_QWORD *)v11 + 3);
          return;
        }
        v47 = *(_QWORD *)(v46 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v47 >= v13)
            v47 %= v13;
        }
        else
        {
          v47 &= v13 - 1;
        }
        v45 = (_QWORD *)(*(_QWORD *)v11 + 8 * v47);
      }
      *v45 = v22;
      goto LABEL_102;
    }
    v25 = 1;
    if (v13 >= 3)
      v25 = (v13 & (v13 - 1)) != 0;
    v26 = v25 | (2 * v13);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v13 = *((_QWORD *)v11 + 1);
    }
    if (*(_QWORD *)&prime > v13)
      goto LABEL_49;
    if (*(_QWORD *)&prime < v13)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)v11 + 3) / v11[8]);
      if (v13 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *((_QWORD *)v11 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_49:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(_QWORD **)v11;
          *(_QWORD *)v11 = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *((int8x8_t *)v11 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*((_QWORD *)v11 + 2);
          if (v32)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v33) = v11 + 4;
            v42 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v43 = v42[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v33)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v11 + 8 * v43))
                  {
                    *(_QWORD *)(*(_QWORD *)v11 + 8 * v43) = v32;
                    goto LABEL_84;
                  }
                  *v32 = *v42;
                  *v42 = **(_QWORD **)(*(_QWORD *)v11 + 8 * v43);
                  **(_QWORD **)(*(_QWORD *)v11 + 8 * v43) = v42;
                  v42 = v32;
                }
                v43 = v33;
LABEL_84:
                v32 = v42;
                v42 = (_QWORD *)*v42;
                v33 = v43;
              }
              while (v42);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_88;
        }
        v48 = *(_QWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (v48)
          operator delete(v48);
        v13 = 0;
        *((_QWORD *)v11 + 1) = 0;
      }
    }
LABEL_88:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v15 = v12 % v13;
      else
        v15 = v12;
    }
    else
    {
      v15 = (v13 - 1) & v12;
    }
    goto LABEL_93;
  }
  if (WORD1(v4))
    v8 = 0;
  else
    v8 = (v6 & 2) == 0;
  if (!v8)
  {
    if (!CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)v5, *a3))
      return;
    goto LABEL_10;
  }
  v16 = *(_QWORD *)(v5 + 24);
  if (v16)
  {
    if ((v6 & 1) != 0)
    {
      v40 = v7 >> 2;
      v41 = *(unsigned __int8 *)(v16 + (v4 >> 8));
      if (*(_BYTE *)(v16 + (v4 >> 8)))
      {
        if ((_DWORD)v41 == 255)
        {
          v40 = v7 == 0;
        }
        else
        {
          v49 = v7 == 0;
          if (((*(unsigned __int8 *)(v16 + 32 * v41 + (v4 >> 3) + 224) >> (v4 & 7)) & 1) != 0)
            v40 = v49;
        }
      }
      if (v40)
        goto LABEL_10;
    }
    else
    {
      v8 = v7 == 0;
      v17 = v7 != 0;
      v18 = v8;
      if (((*(unsigned __int8 *)(v16 + (v4 >> 3)) >> (v4 & 7)) & 1) != 0)
        v17 = v18;
      if (v17)
        goto LABEL_10;
    }
  }
  else
  {
    v8 = v7 == 0;
    v38 = v7 != 0;
    v39 = v8;
    if ((v6 & 1) == 0)
      v38 = v39;
    if (v38)
      goto LABEL_10;
  }
}

uint64_t TFont::GetSystemUIFontOptions(TFont *this)
{
  if (qword_1ECDE75E8 != -1)
    dispatch_once_f(&qword_1ECDE75E8, 0, (dispatch_function_t)TFont::GetSystemUIFontOptions(void)::$_0::__invoke);
  return _MergedGlobals_12;
}

void TFont::SetExtras(TFont *this, const __CTFontDescriptor *a2, const __CFArray *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *v7;
  uint64_t v8;
  char v9;
  const __CFArray *Value;
  void *v12;
  const __CFArray *v13;
  __CFSet *Mutable;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  CTFeatureSetting *ValueAtIndex;
  __CFArray *v19;
  void *v20;
  void *v21;
  unint64_t *v22;
  void *v24;
  uint64_t *v25;
  void *v26;
  uint64_t *v27;
  char v28;
  const __CFDictionary *v29;
  const __CTFontDescriptor *v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  void *v34;
  _QWORD *v35;
  unint64_t *v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  uint64_t v39;
  __CFDictionary *v40;
  id v41;
  id v42;
  id v43[2];

  if (a2 && (a3 || (*(_DWORD *)this & 8) == 0))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v43[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
      v7 = (__CFDictionary *)__ldaxr((unint64_t *)v43);
    while (__stlxr(0, (unint64_t *)v43));

    if (!v7)
      goto LABEL_56;
    v8 = *((_QWORD *)a2 + 5);
    v9 = CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontOpticalSizeAttribute"), 3);
    Value = a3;
    if (a3
      || (atomic_load((unint64_t *)(v8 + 8)),
          (v29 = (const __CFDictionary *)atomic_load((unint64_t *)(v8 + 8))) != 0)
      && (Value = (const __CFArray *)CFDictionaryGetValue(v29, CFSTR("NSCTFontFeatureSettingsAttribute"))) != 0)
    {
      v42 = (id)0xAAAAAAAAAAAAAAAALL;
      CreateFeatureSettingsByConverting(Value, (unint64_t *)&v42);
      if (atomic_load((unint64_t *)&v42))
      {
        v12 = (void *)atomic_load((unint64_t *)&v42);
        TFont::UpdateFeatureSettings((uint64_t)this, v7, v12, 0);
        *(_DWORD *)this &= ~8u;
        if (!a3)
        {
          if (TFont::IsSystemUIFontAndForShaping(this, (BOOL *)v43))
          {
            v13 = (const __CFArray *)atomic_load((unint64_t *)&v42);
            v43[0] = 0;
            v43[1] = 0;
            if (v13)
            {
              Mutable = CFSetCreateMutable(v6, 0, MEMORY[0x1E0C9B3B0]);
              Count = CFArrayGetCount(v13);
              if (Count)
              {
                v16 = Count;
                for (i = 0; i != v16; ++i)
                {
                  ValueAtIndex = (CTFeatureSetting *)CFArrayGetValueAtIndex(v13, i);
                  if ((IsFontSpecificFeatureSetting(ValueAtIndex) & 1) == 0
                    && !CFSetContainsValue(Mutable, ValueAtIndex))
                  {
                    TCFLazyMutableArray::LazyCreate((TCFLazyMutableArray *)v43);
                    v19 = (__CFArray *)atomic_load((unint64_t *)v43);
                    CFArrayAppendValue(v19, ValueAtIndex);
                    CFSetAddValue(Mutable, ValueAtIndex);
                  }
                }
              }

            }
            do
              v20 = (void *)__ldaxr((unint64_t *)v43);
            while (__stlxr(0, (unint64_t *)v43));
            v41 = v20;

            do
              v21 = (void *)__ldaxr((unint64_t *)&v41);
            while (__stlxr(0, (unint64_t *)&v41));

            if (v21)
              CFDictionaryAddValue(v7, CFSTR("CTFontOriginalFeatureSettingsAttribute"), v21);

          }
        }
      }

    }
    v22 = (unint64_t *)((char *)this + 8);
    if (atomic_load((unint64_t *)this + 1))
    {
      v24 = (void *)atomic_load(v22);
      v25 = v24;
      *((_BYTE *)this + 392) = CopyAttributeToExtras(v25[5], v7, CFSTR("NSCTFontFixedAdvanceAttribute"), 2);

      v26 = (void *)atomic_load(v22);
      v27 = v26;
      v28 = CopyAttributeToExtras(v27[5], v7, CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute"), 2);

    }
    else
    {
      v28 = 0;
    }
    v30 = (const __CTFontDescriptor *)atomic_load(v22);
    if (v30 == a2)
    {
LABEL_54:
      if (CFDictionaryGetCount(v7))
      {
        v40 = v7;
        TCFRef<__CTFont const*>::Retain((unint64_t *)this + 20, v40);

      }
LABEL_56:

      return;
    }
    atomic_load((unint64_t *)(v8 + 8));
    v31 = (const __CFDictionary *)atomic_load((unint64_t *)(v8 + 8));
    if (v31)
      v31 = (const __CFDictionary *)CFDictionaryGetValue(v31, CFSTR("NSCTFontCascadeListAttribute"));
    v32 = v31;
    if (v32)
    {
      if (atomic_load((unint64_t *)this + 1))
      {
        v34 = (void *)atomic_load((unint64_t *)this + 1);
        v35 = v34;
        v36 = (unint64_t *)(v35[5] + 8);
        atomic_load(v36);
        v37 = (const __CFDictionary *)atomic_load(v36);
        if (v37)
          v37 = (const __CFDictionary *)CFDictionaryGetValue(v37, CFSTR("NSCTFontCascadeListAttribute"));
        v38 = v37;

        if (v38 != v32 && (!v38 || !CFEqual(v38, v32)))
          CFDictionarySetValue(v7, CFSTR("NSCTFontCascadeListAttribute"), v32);

      }
    }
    CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontBaselineAdjustAttribute"), 2);
    if (*((_BYTE *)this + 392))
    {
      if ((v9 & 1) != 0)
        goto LABEL_50;
    }
    else
    {
      *((_BYTE *)this + 392) = CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontFixedAdvanceAttribute"), 2);
      if ((v9 & 1) != 0)
      {
LABEL_50:
        CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontTrackAttribute"), 2);
LABEL_51:
        CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontUnscaledTrackingAttribute"), 2);
        CopyAttributeToExtras(v8, v7, CFSTR("CTFontPaletteAttribute"), 2);
        CopyAttributeToExtras(v8, v7, CFSTR("CTFontPaletteColorsAttribute"), 0);
        CopyAttributeToExtras(v8, v7, CFSTR("CTFontDescriptorLanguageAttribute"), 4);
        CopyAttributeToExtras(v8, v7, CFSTR("NSCTFontVariationAttribute"), 0);
        if ((v28 & 1) == 0)
          CopyAttributeToExtras(v8, v7, CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute"), 2);

        goto LABEL_54;
      }
    }
    v39 = *((_QWORD *)this + 50);
    if (!v39 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 840))(v39))
      goto LABEL_51;
    goto LABEL_50;
  }
}

void TFont::UserFallbacksForLanguage(unint64_t *a1, uint64_t a2, __CFString *a3, int *a4)
{
  void *v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const __CFString *v11;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFString *v16;
  void *v17;
  const __CFArray *v18;
  unint64_t v19;
  void *v20;
  int EmojiPolicyFromLocale;
  int v22;
  const __CFArray *v24;
  unint64_t v25;
  void *v26;
  const __CFArray *v27;
  int IsSystemUIFontAndForShaping;
  int v29;
  void *v30;
  id v31;
  __CFArray *v32;
  unint64_t v33;
  void *v34;
  const __CFArray *v35;
  const void *v36;
  __CFArray *v37;
  unint64_t v38;
  void *v39;
  TPurgeableCache *v40;
  id v41;
  id v42;
  void *values;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (void *)atomic_load((unint64_t *)(a2 + 160));
  Value = v8;
  v10 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("NSCTFontCascadeListAttribute"));
  *a1 = (unint64_t)Value;

  v42 = (id)0xAAAAAAAAAAAAAAAALL;
  if (a3)
  {
    LanguageIdentifierByNormalizing(a3, 0, (unint64_t *)&v42);
  }
  else
  {
    v12 = (void *)atomic_load((unint64_t *)(a2 + 160));
    v13 = v12;
    v14 = v13;
    if (v13)
      v13 = (const __CFDictionary *)CFDictionaryGetValue(v13, CFSTR("CTFontDescriptorLanguageAttribute"));
    LanguageIdentifierByNormalizing((__CFString *)v13, 0, (unint64_t *)&v42);

  }
  if (!atomic_load(a1))
  {
    v16 = (const __CFString *)atomic_load((unint64_t *)&v42);
    if (TDescriptorSource::CanLanguageAffectCascadeList(v16, v11))
    {
      v17 = (void *)atomic_load((unint64_t *)&v42);
      values = v17;
      v18 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      TFont::CreateDefaultCascadeList((TFont *)a2, v18, (unint64_t *)&values);
      do
        v19 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v20 = (void *)__ldaxr(a1);
      while (__stlxr(v19, a1));

    }
  }
  EmojiPolicyFromLocale = GetEmojiPolicyFromLocale(a3);
  v22 = EmojiPolicyFromLocale;
  if (a4)
  {
    *a4 = EmojiPolicyFromLocale;
    v22 = -1431655766;
  }
  if (EmojiPolicyFromLocale)
  {
    if (atomic_load(a1))
    {
      v24 = 0;
    }
    else
    {
      TFont::CreateDefaultCascadeList((TFont *)a2, 0, (unint64_t *)&values);
      do
        v25 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v26 = (void *)__ldaxr(a1);
      while (__stlxr(v25, a1));

      v24 = (const __CFArray *)atomic_load(a1);
    }
    values = (void *)0xAAAAAAAAAAAAAAAALL;
    v27 = (const __CFArray *)atomic_load(a1);
    TCFMutableArray::TCFMutableArray((TCFMutableArray *)&values, v27);
    IsSystemUIFontAndForShaping = TFont::IsSystemUIFontAndForShaping((TFont *)a2, (BOOL *)&v41);
    v41 = (id)0xAAAAAAAAAAAAAAAALL;
    v29 = v22;
    if (a4)
      v29 = *a4;
    if (v29 == 2)
    {
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v40);
      TDescriptorSource::CopyEmojiFontDescriptor(v24, &v40, IsSystemUIFontAndForShaping, (unint64_t *)&v41);
    }
    else
    {
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v40);
      TDescriptorSource::CopySystemFontDescriptorByName(&v40, CFSTR("Menlo-Regular"), IsSystemUIFontAndForShaping, 0, (unint64_t *)&v41);
    }
    v30 = (void *)atomic_load((unint64_t *)&v41);
    v31 = v30;
    v32 = (__CFArray *)atomic_load((unint64_t *)&values);
    CFArrayInsertValueAtIndex(v32, 0, v31);

    do
      v33 = __ldaxr((unint64_t *)&values);
    while (__stlxr(0, (unint64_t *)&values));
    do
      v34 = (void *)__ldaxr(a1);
    while (__stlxr(v33, a1));

  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 400) + 160))(*(_QWORD *)(a2 + 400)) & 0x2000) != 0)
  {
    if (a4)
      v22 = *a4;
    if (v22 != 1)
    {
      values = (void *)0xAAAAAAAAAAAAAAAALL;
      v35 = (const __CFArray *)atomic_load(a1);
      TCFMutableArray::TCFMutableArray((TCFMutableArray *)&values, v35);
      v36 = (const void *)atomic_load((unint64_t *)(a2 + 8));
      v37 = (__CFArray *)atomic_load((unint64_t *)&values);
      CFArrayInsertValueAtIndex(v37, 0, v36);
      do
        v38 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v39 = (void *)__ldaxr(a1);
      while (__stlxr(v38, a1));

    }
  }

}

void TFont::CreateDefaultCascadeList(TFont *this@<X0>, const __CFArray *a2@<X1>, unint64_t *a3@<X8>)
{
  TBaseFont *v4;
  int IsSystemUIFontAndForShaping;
  unint64_t v7;
  const __CFArray *v8;
  id v9;
  BOOL v10;

  v4 = (TBaseFont *)*((_QWORD *)this + 50);
  if (v4)
  {
    v9 = (id)0xAAAAAAAAAAAAAAAALL;
    CreateCanonicalLanguages(a2, (unint64_t *)&v9);
    IsSystemUIFontAndForShaping = TFont::IsSystemUIFontAndForShaping(this, &v10);
    v7 = ((unint64_t)*(unsigned int *)this >> 6) & 7;
    v8 = (const __CFArray *)atomic_load((unint64_t *)&v9);
    TBaseFont::CreateFallbacks(v4, IsSystemUIFontAndForShaping, v7, 0, v8, a3);

  }
  else
  {
    *a3 = 0;
  }
}

uint64_t TFont::GetEmojiMLUpscalingTimeout(TFont *this)
{
  void *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  uint64_t valuePtr;

  v1 = (void *)atomic_load((unint64_t *)this + 20);
  v2 = v1;
  if (v2)
  {
    v3 = v2;
    Value = (const __CFNumber *)CFDictionaryGetValue(v2, CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute"));

    if (Value)
    {
      valuePtr = -1;
      CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }
  else
  {

  }
  return 0;
}

void TFont::TFont(TFont *this, const TFont *a2, const unsigned __int16 *a3, uint64_t a4, CFRange *a5)
{
  const TFont *v8;
  unint64_t *v10;
  const __CTFontDescriptor *v11;
  const __CFArray *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  TBaseFont *v17;
  const __CFArray *CascadeListForFallbackStage;
  void *v20;
  void *v21;
  TDescriptor **v22;
  TDescriptor **v23;
  TDescriptor *v24;
  unint64_t v25;
  CFIndex v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  const __CTFontDescriptor *v33;
  const TFont *v34;
  CFRange *v35;
  id v36;
  id v37;
  int v38;
  TPurgeableCache *v39;
  id v40;

  v8 = a2;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = (unint64_t *)((char *)this + 8);
  v38 = -1431655766;
  TFont::DefaultDescriptor((unint64_t *)this + 1, a2, &v38);
  if (atomic_load(v10))
  {
    *(_DWORD *)this |= 8u;
    goto LABEL_33;
  }
  v37 = (id)0xAAAAAAAAAAAAAAAALL;
  TFont::UserFallbacksForLanguage((unint64_t *)&v37, (uint64_t)v8, 0, 0);
  v13 = (const __CFArray *)atomic_load((unint64_t *)&v37);
  if (!a3)
  {
    v36 = 0;
    goto LABEL_25;
  }
  v34 = v8;
  v35 = a5;
  v14 = 0;
  v15 = v38;
  v16 = ((unint64_t)*(unsigned int *)v8 >> 6) & 7;
  v17 = (TBaseFont *)*((_QWORD *)v8 + 50);
  while (1)
  {
    if (!(_DWORD)v16 && v14)
    {
      v36 = 0;
      v8 = v34;
      goto LABEL_25;
    }
    CascadeListForFallbackStage = TBaseFont::GetCascadeListForFallbackStage(v17, v14, v13, v15, v16, a3, a4);
    if (!CascadeListForFallbackStage)
      goto LABEL_13;
    v36 = (id)0xAAAAAAAAAAAAAAAALL;
    if (a4)
      TBaseFont::FindFallbackDescriptorForCharacterRange(v17, CascadeListForFallbackStage, a3, v35, a4, (unint64_t *)&v36);
    else
      TBaseFont::DefaultFallbackDescriptor(CascadeListForFallbackStage, 0, (unint64_t *)&v36);
    if (atomic_load((unint64_t *)&v36))
      break;

LABEL_13:
    if (++v14 == 3)
    {
      v40 = (id)0xAAAAAAAAAAAAAAAALL;
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v39);
      TDescriptorSource::CopySystemWideFallbackDescriptorForCharacters(&v39, (uint64_t)v17, (uint64_t)a3, a4, v15, v16, (unint64_t *)&v40);
      v20 = (void *)atomic_load((unint64_t *)&v40);
      if (v20)
      {
        v21 = (void *)atomic_load((unint64_t *)&v40);
        v22 = v21;
        v23 = v22;
        v24 = v22[5];
        v8 = v34;
        if ((*((_DWORD *)v24 + 4) & 0x80000000) == 0)
          TDescriptor::InitBaseFont(v22[5], 0, 0.0);
        v25 = atomic_load((unint64_t *)v24 + 4);
        v35->location = (*(uint64_t (**)(unint64_t, const unsigned __int16 *, uint64_t))(*(_QWORD *)v25 + 816))(v25, a3, a4);
        v35->length = v26;

        *(_DWORD *)this |= 8u;
        do
          v20 = (void *)__ldaxr((unint64_t *)&v40);
        while (__stlxr(0, (unint64_t *)&v40));
      }
      else
      {
        v8 = v34;
      }
      v36 = v20;

      goto LABEL_25;
    }
  }
  v8 = v34;
  if ((v14 & 0x7FFFFFFFFFFFFFFDLL) == 0)
    *(_DWORD *)this |= 8u;
  do
LABEL_25:
    v27 = __ldaxr((unint64_t *)&v36);
  while (__stlxr(0, (unint64_t *)&v36));
  do
    v28 = (void *)__ldaxr(v10);
  while (__stlxr(v27, v10));

  if (!TFont::DerivedOpticalFont((unint64_t *)v8, v10, (unsigned int *)this, *((double *)v8 + 2)))
  {
    TDescriptorSource::TDescriptorSource((TDescriptorSource *)&v39);
    TDescriptorSource::CopyLastResort((unint64_t *)&v40);
    do
      v29 = __ldaxr((unint64_t *)&v40);
    while (__stlxr(0, (unint64_t *)&v40));
    do
      v30 = (void *)__ldaxr(v10);
    while (__stlxr(v29, v10));

    *(_DWORD *)this |= 8u;
  }

LABEL_33:
  *((double *)this + 2) = TFont::InitSize(0, *((double *)v8 + 2), v11);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0x80000000;
  TFont::InitMatrix(*((TFont **)v8 + 5), 0, (_QWORD *)this + 5);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  v31 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 120) = v31;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = TFont::InitBaseFont(v32, v10);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 122) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  v33 = (const __CTFontDescriptor *)atomic_load((unint64_t *)this + 1);
  TFont::SetExtras(this, v33, 0);
  *(_DWORD *)this = *(_DWORD *)v8 | 0xC0;
  TFont::SetOpticalSize(this, 0);
  TFont::AddFontSpecificFeatureSettings(this);
}

void TFont::CoverageForFeatureSetting(TFont *this@<X0>, CTFeatureSetting *a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v5;
  void *v6;
  uint64_t InitializedGraphicsFont;
  __CFBitVector *v8;
  const TBaseFont *v9;
  void *v10;
  const __CFArray *v11;
  CFIndex v12;
  void *ValueAtIndex;
  void *v14;
  id v15;
  void *v16;
  id v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  CFIndex Count;
  const __CFArray *theArray;
  id v38[2];
  id v39;
  id v40[2];
  id v41;
  id v42;
  id v43;
  id Mutable;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v5 = (_QWORD *)*((_QWORD *)this + 50);
  v6 = (void *)v5[25];
  if (!v6)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(*((TBaseFont **)this + 50));
    v6 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 872))(v5, InitializedGraphicsFont);
  }
  v8 = (__CFBitVector *)atomic_load((unint64_t *)&Mutable);
  CFBitVectorSetCount(v8, (CFIndex)v6);
  v9 = (const TBaseFont *)*((_QWORD *)this + 50);
  if (v9)
  {
    v43 = (id)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(id *__return_ptr, const TBaseFont *, _QWORD))(*(_QWORD *)v9 + 136))(&v42, v9, 0);
    do
      v10 = (void *)__ldaxr((unint64_t *)&v42);
    while (__stlxr(0, (unint64_t *)&v42));
    v43 = v10;

    v42 = (id)0xAAAAAAAAAAAAAAAALL;
    TFontFeatures::SettingsByNormalizing((TFontFeatures *)&v43, v9, (uint64_t)a2, 0, &v42);
    v11 = (const __CFArray *)atomic_load((unint64_t *)&v42);
    theArray = v11;
    if (v11)
    {
      Count = CFArrayGetCount(v11);
      if (Count)
      {
        v12 = 0;
        while (1)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v12);
          v14 = (void *)atomic_load((unint64_t *)&Mutable);
          v15 = v14;
          v16 = (void *)atomic_load((unint64_t *)&Mutable);
          v17 = v16;
          v40[1] = v6;
          v41 = v15;
          v52 = 0;
          v18 = operator new(0x18uLL);
          *v18 = &off_1E15E1060;
          v18[1] = v6;
          do
            v19 = __ldaxr((unint64_t *)&v41);
          while (__stlxr(0, (unint64_t *)&v41));
          v18[2] = v19;
          v52 = v18;
          v40[0] = v17;
          v50 = 0;
          v20 = operator new(0x10uLL);
          *v20 = &off_1E15E10A8;
          do
            v21 = __ldaxr((unint64_t *)v40);
          while (__stlxr(0, (unint64_t *)v40));
          v20[1] = v21;
          v50 = v20;
          if ((TAATMorphTable::AddCoveredGlyphs((TBaseFont **)this, ValueAtIndex, (uint64_t)v51, (uint64_t)v49) & 1) == 0)
            break;
LABEL_29:
          v30 = v50;
          if (v50 == v49)
          {
            v30 = v49;
            v31 = 4;
          }
          else
          {
            if (!v50)
              goto LABEL_34;
            v31 = 5;
          }
          (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_34:

          v32 = v52;
          if (v52 == v51)
          {
            v32 = v51;
            v33 = 4;
            goto LABEL_38;
          }
          if (v52)
          {
            v33 = 5;
LABEL_38:
            (*(void (**)(void))(*v32 + 8 * v33))();
          }

          if (++v12 == Count)
            goto LABEL_40;
        }
        v38[1] = v6;
        v39 = v15;
        v48 = 0;
        v22 = operator new(0x18uLL);
        *v22 = &off_1E15E1060;
        v22[1] = v6;
        do
          v23 = __ldaxr((unint64_t *)&v39);
        while (__stlxr(0, (unint64_t *)&v39));
        v22[2] = v23;
        v48 = v22;
        v38[0] = v17;
        v46 = 0;
        v24 = operator new(0x10uLL);
        *v24 = &off_1E15E10A8;
        do
          v25 = __ldaxr((unint64_t *)v38);
        while (__stlxr(0, (unint64_t *)v38));
        v24[1] = v25;
        v46 = v24;
        TOpenTypeMorph::AddCoveredGlyphs((uint64_t)this, (uint64_t)a2, (uint64_t)v47, (uint64_t)v45);
        v26 = v46;
        if (v46 == v45)
        {
          v26 = v45;
          v27 = 4;
        }
        else
        {
          if (!v46)
            goto LABEL_23;
          v27 = 5;
        }
        (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_23:

        v28 = v48;
        if (v48 == v47)
        {
          v28 = v47;
          v29 = 4;
        }
        else
        {
          if (!v48)
          {
LABEL_28:

            goto LABEL_29;
          }
          v29 = 5;
        }
        (*(void (**)(void))(*v28 + 8 * v29))();
        goto LABEL_28;
      }
    }
LABEL_40:

  }
  do
    v34 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  *a3 = v34;

}

void TFont::ShapingLanguages(TFont *this@<X0>, unint64_t *a2@<X8>)
{
  TBaseFont *v3;
  const __CFArray *v5;
  id v6;

  v3 = (TBaseFont *)*((_QWORD *)this + 50);
  if (v3)
  {
    v6 = (id)0xAAAAAAAAAAAAAAAALL;
    TBaseFont::ShapingLanguages(v3, 0, (unint64_t *)&v6);
    if (atomic_load((unint64_t *)&v6))
    {
      v5 = (const __CFArray *)atomic_load((unint64_t *)&v6);
      CreateSetWithArray(v5, a2);

      return;
    }

  }
  *a2 = 0;
}

uint64_t TFont::CompareExtras(TFont *this, const TFont *a2)
{
  const void *v4;
  const void *v5;
  BOOL v6;
  uint64_t v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  unint64_t *v15;
  const __CFArray *v17;
  const __CFArray *v18;
  const void *v19;
  const void *v20;
  int v21;
  id v23;
  id v24;
  id v25;
  id v26;

  v4 = (const void *)atomic_load((unint64_t *)this + 20);
  v5 = (const void *)atomic_load((unint64_t *)a2 + 20);
  if (v4 != v5)
  {
    v6 = !v4 || v5 == 0;
    if (v6 || !CFEqual(v4, v5))
    {
      v26 = (id)0xAAAAAAAAAAAAAAAALL;
      v8 = (const __CFDictionary *)atomic_load((unint64_t *)this + 20);
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v26, v8);
      v25 = (id)0xAAAAAAAAAAAAAAAALL;
      v9 = (const __CFDictionary *)atomic_load((unint64_t *)a2 + 20);
      TCFMutableDictionary::TCFMutableDictionary((TCFMutableDictionary *)&v25, v9);
      v10 = (__CFDictionary *)atomic_load((unint64_t *)&v26);
      CFDictionaryRemoveValue(v10, CFSTR("NSCTFontFeatureSettingsAttribute"));
      v11 = (__CFDictionary *)atomic_load((unint64_t *)&v25);
      CFDictionaryRemoveValue(v11, CFSTR("NSCTFontFeatureSettingsAttribute"));
      v12 = (const void *)atomic_load((unint64_t *)&v26);
      v13 = (const void *)atomic_load((unint64_t *)&v25);
      if (v12 == v13)
        goto LABEL_12;
      v7 = 0;
      if (!v12 || !v13)
        goto LABEL_24;
      if (CFEqual(v12, v13))
      {
LABEL_12:
        if (!atomic_load((unint64_t *)this + 21))
          goto LABEL_23;
        v15 = (unint64_t *)((char *)a2 + 168);
        if (!atomic_load(v15))
          goto LABEL_23;
        v24 = (id)0xAAAAAAAAAAAAAAAALL;
        v17 = (const __CFArray *)atomic_load((unint64_t *)this + 21);
        CreateSetWithArray(v17, (unint64_t *)&v24);
        v23 = (id)0xAAAAAAAAAAAAAAAALL;
        v18 = (const __CFArray *)atomic_load(v15);
        CreateSetWithArray(v18, (unint64_t *)&v23);
        v19 = (const void *)atomic_load((unint64_t *)&v24);
        v20 = (const void *)atomic_load((unint64_t *)&v23);
        if (v19 == v20)
        {

        }
        else
        {
          if (!v19 || !v20)
          {

LABEL_23:
            v7 = 1;
            goto LABEL_24;
          }
          v21 = CFEqual(v19, v20);

          if (!v21)
            goto LABEL_23;
        }
        v7 = 2;
      }
      else
      {
        v7 = 0;
      }
LABEL_24:

      return v7;
    }
  }
  return 2;
}

BOOL std::operator==[abi:nn180100]<unsigned short,OTL::FeatureTable const*,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short const,OTL::FeatureTable const*>>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 *v3;
  _BOOL8 v4;
  uint64_t **v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (unsigned __int16 *)(a1 + 16);
  do
  {
    v3 = *(unsigned __int16 **)v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = std::__hash_table<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,OTL::FeatureTable const*>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,OTL::FeatureTable const*>>>::find<unsigned short>(a2, v3 + 8);
    if (!v5)
      break;
  }
  while (v3[8] == *((unsigned __int16 *)v5 + 8) && *((_QWORD *)v3 + 3) == (_QWORD)v5[3]);
  return v4;
}

BOOL TFont::UseTypoMetrics(TFont *this)
{
  uint64_t v1;
  _BOOL8 v2;
  id v4;
  id v5[3];

  v1 = *((_QWORD *)this + 50);
  memset(v5, 170, sizeof(v5));
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v1 + 480))(&v4, v1, 1330851634);
  OS2::OS2((unint64_t *)v5, (unint64_t *)&v4);

  v2 = (uint64_t)v5[2] >= 78 && *((__int16 *)v5[1] + 31) < 0;
  return v2;
}

uint64_t TFont::GetTypoMetrics(TBaseFont **this, double *a2, double *a3, double *a4)
{
  uint64_t result;
  int *inited;
  double v10;

  result = TBaseFont::GetInitializedGraphicsFont(this[50]);
  if (result)
  {
    result = CGFontGetParserFont();
    if (result)
    {
      result = FPFontGetTypoMetrics();
      if ((_DWORD)result)
      {
        if (*((_DWORD *)this + 12))
          inited = (int *)(this + 6);
        else
          inited = TFont::InitStrikeMetrics((TFont *)this);
        v10 = *((double *)inited + 6);
        if (a2)
          *a2 = v10 * *a2;
        if (a3)
          *a3 = v10 * *a3;
        if (a4)
          *a4 = v10 * *a4;
        return 1;
      }
    }
  }
  return result;
}

double TFont::GetHorizontalAscentDescent(TBaseFont **this)
{
  int *inited;
  _OWORD v3[6];

  if ((*(_BYTE *)this & 1) != 0)
  {
    v3[5] = unk_184930778;
    v3[0] = __const__ZNK5TFont26GetHorizontalAscentDescentEv_metrics;
    memset(&v3[1], 255, 64);
    TFont::GetStrikeMetrics(this, 0, (uint64_t)v3);
    return *((double *)v3 + 1);
  }
  else
  {
    if (*((_DWORD *)this + 12))
      inited = (int *)(this + 6);
    else
      inited = TFont::InitStrikeMetrics((TFont *)this);
    return *((double *)inited + 1);
  }
}

void TFont::GetControlPoints(TBaseFont **this@<X0>, unsigned int a2@<W2>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  __int128 v7;
  double *v8;
  void *v9;
  float64x2_t v10;
  float64x2_t v11;
  double *v12;
  float64x2_t v13;
  uint64_t v14;
  CGAffineTransform v15;
  unsigned int v16;
  void *__p;
  double *v18;
  uint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (!TBaseFont::GetInitializedGraphicsFont(this[50]) || !CGFontGetParserFont())
  {
    v14 = 0;
    v8 = 0;
    v9 = 0;
LABEL_13:
    *a3 = v9;
    a3[1] = v8;
    a3[2] = v14;
    return;
  }
  v16 = 0;
  if ((FPFontGetControlPoints() & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v6 = v16;
  if (a2 && v16 > a2)
  {
    v16 = a2;
    v6 = a2;
  }
  std::vector<CGSize>::resize((uint64_t)&__p, v6);
  if (FPFontGetControlPoints())
  {
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *(_OWORD *)&v15.c = v7;
    *(_OWORD *)&v15.tx = v7;
    *(_OWORD *)&v15.a = v7;
    TFont::GetScaledMatrix((TFont *)this, &v15);
    v9 = __p;
    v8 = v18;
    if (__p != v18)
    {
      v10 = *(float64x2_t *)&v15.a;
      v11 = *(float64x2_t *)&v15.c;
      v12 = (double *)__p;
      v13 = *(float64x2_t *)&v15.tx;
      do
      {
        *(float64x2_t *)v12 = vaddq_f64(v13, vmlaq_n_f64(vmulq_n_f64(v11, v12[1]), v10, *v12));
        v12 += 2;
      }
      while (v12 != v8);
    }
    v14 = v19;
    goto LABEL_13;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (__p)
  {
    v18 = (double *)__p;
    operator delete(__p);
  }
}

void TFont::GetControlPointPositions(TBaseFont **this, unsigned __int16 a2, const __int16 *a3, double *a4, unint64_t a5)
{
  const __int16 *v7;
  const __int16 *v8;
  const __int16 *v9;
  int v10;
  int v11;
  const __int16 *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  void *v21;
  int64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *__dst;
  uint64_t v30;
  _QWORD v31[3];

  v7 = a3;
  v8 = a3;
  if (a5 >= 2)
  {
    v9 = a3 + 1;
    v10 = a3[1];
    v11 = *a3;
    v8 = v10 >= v11 ? a3 + 1 : a3;
    if (a5 != 2)
    {
      v12 = a3 + 2;
      if (v10 >= v11)
        v9 = a3;
      if (v10 <= v11)
        LOWORD(v13) = *a3;
      else
        LOWORD(v13) = a3[1];
      if (v10 <= v11)
        LOWORD(v11) = a3[1];
      v14 = 2 * a5 - 6;
      while (v14)
      {
        v15 = v12[1];
        v16 = *v12;
        if (v15 >= v16)
        {
          if (v16 < (__int16)v11)
          {
            LOWORD(v11) = *v12;
            v9 = v12;
          }
          v18 = v15 < (__int16)v13;
          if (v15 > (__int16)v13)
            LOWORD(v13) = v12[1];
          if (!v18)
            v8 = v12 + 1;
        }
        else
        {
          v11 = *v9;
          if (v15 < v11)
          {
            LOWORD(v11) = v12[1];
            v9 = v12 + 1;
          }
          v13 = *v8;
          v17 = v16 < v13;
          if (v16 > v13)
            LOWORD(v13) = *v12;
          if (!v17)
            v8 = v12;
        }
        v12 += 2;
        v14 -= 4;
        if (v14 == -2)
          goto LABEL_34;
      }
      v19 = *v12;
      if (v19 >= *v9 && v19 >= *v8)
        v8 = v12;
    }
  }
LABEL_34:
  v20 = *v8 + 1;
  memset(v31, 170, sizeof(v31));
  TFont::GetControlPoints(this, v20, v31);
  v21 = (void *)v31[0];
  v22 = v31[1] - v31[0];
  if (v31[1] != v31[0])
  {
    v28 = 0;
    __dst = 0;
    v30 = 0;
    std::vector<CGSize>::__vallocate[abi:nn180100](&v28, v22 >> 4);
    v23 = (char *)__dst;
    memmove(__dst, v21, v22);
    __dst = &v23[v22];
    v24 = v28;
    v25 = 2 * a5;
    do
    {
      v26 = 0;
      if ((*v7 & 0x80000000) == 0)
      {
        v27 = *(unsigned __int16 *)v7;
        if (v22 >> 4 > v27)
          v26 = v24[2 * v27];
      }
      *(_QWORD *)a4++ = v26;
      ++v7;
      v25 -= 2;
    }
    while (v25);
    if (v24)
    {
      __dst = v24;
      operator delete(v24);
    }
  }
  if (v21)
    operator delete(v21);
}

unsigned __int16 *TFont::GetLigatureCaretPositionsForGlyph(TFont *this, uint64_t a2, double *a3, uint64_t a4)
{
  double v4;
  uint64_t v5;
  double *v6;
  BOOL v9;
  char v10;
  void *v11;
  const __CFData *v12;
  const __CFData *v13;
  const UInt8 *BytePtr;
  void *v15;
  id v16;
  const __CFData *v17;
  const __CFData *v18;
  const UInt8 *v19;
  unint64_t v20;
  unsigned __int16 *LigatureCaretCount;
  __int128 v22;
  size_t v23;
  _BYTE *v24;
  uint64_t LigatureCaretPositions;
  __int16 *v26;
  double a;
  double tx;
  double v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  const __CFData *CommonTable;
  __int128 v35;
  char *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  double *v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v44;
  char *v45;
  unsigned int v46;
  char v47;
  unsigned __int16 *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unsigned int v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *VariationValues;
  _QWORD v58[2];
  unint64_t v59;
  CGAffineTransform v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  unsigned __int16 *v64;
  unsigned __int16 v65[4];
  __int16 v66;
  double *v67;
  uint64_t v68;
  void *__p[2];
  _BYTE v70[72];
  _BYTE *v71;
  uint64_t v72;

  v5 = a4;
  v6 = a3;
  v72 = *MEMORY[0x1E0C80C00];
  if (a3)
    v9 = a4 < 1;
  else
    v9 = 1;
  v10 = v9;
  v63 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(&v63, *((_QWORD *)this + 50), 1818452338);
  v11 = (void *)atomic_load((unint64_t *)&v63);
  v12 = v11;
  v13 = v12;
  if (v12)
    BytePtr = CFDataGetBytePtr(v12);
  else
    BytePtr = 0;

  v61 = 0xAAAAAAAAAAAAAAAALL;
  v62 = 0xAAAAAAAAAAAAAAAALL;
  v15 = (void *)atomic_load((unint64_t *)&v63);
  v16 = v15;
  v17 = (const __CFData *)v16;
  if (!v17)
  {

    goto LABEL_14;
  }
  v18 = v17;
  v19 = CFDataGetBytePtr(v17);

  if (!v19)
  {
LABEL_14:
    v20 = 0;
    goto LABEL_15;
  }
  v20 = (unint64_t)&v19[CFDataGetLength((CFDataRef)v16)];
LABEL_15:
  v61 = (unint64_t)BytePtr;
  v62 = v20;
  if (BytePtr && (unint64_t)(BytePtr + 6) > v20)
  {
    v61 = 0;

  }
  else
  {

    if (BytePtr)
    {
      if ((v10 & 1) != 0)
      {
        LigatureCaretCount = TLCARTable::GetLigatureCaretCount((TLCARTable *)&v61, a2);
      }
      else
      {
        *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v70[56] = v22;
        *(_OWORD *)&v70[40] = v22;
        *(_OWORD *)&v70[24] = v22;
        *(_OWORD *)&v70[8] = v22;
        v71 = &v70[8];
        if (&v70[2 * v5 + 8] <= &v70[68])
        {
          v71 = &v70[2 * v5 + 8];
          v23 = 2 * v5;
          v24 = &v70[8];
        }
        else
        {
          v23 = 2 * v5;
          v24 = operator new(2 * v5);
        }
        __p[0] = v24;
        *(_QWORD *)v70 = &v24[2 * v5];
        bzero(v24, v23);
        __p[1] = &v24[2 * v5];
        v65[0] = 0;
        LigatureCaretPositions = TLCARTable::GetLigatureCaretPositions((TLCARTable *)&v61, a2, (__int16 *)v24, v5, v65);
        LigatureCaretCount = (unsigned __int16 *)LigatureCaretPositions;
        if (LigatureCaretPositions >= 1)
        {
          if (v65[0] == 1)
          {
            if (LigatureCaretPositions >= v5)
              v32 = v5;
            else
              v32 = LigatureCaretPositions;
            TFont::GetControlPointPositions((TBaseFont **)this, a2, (const __int16 *)__p[0], v6, v32);
          }
          else if (v65[0])
          {
            LigatureCaretCount = 0;
          }
          else
          {
            v26 = (__int16 *)__p[0];
            if (LigatureCaretPositions < v5)
              v5 = LigatureCaretPositions;
            TFont::GetScaledMatrix(this, &v60);
            a = v60.a;
            tx = v60.tx;
            v29 = v60.c * 0.0;
            v30 = 2 * v5;
            do
            {
              v31 = *v26++;
              *v6++ = tx + v29 + a * (double)v31;
              v30 -= 2;
            }
            while (v30);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          if (&v70[8] > __p[0] || &v70[68] <= __p[0])
            operator delete(__p[0]);
        }
      }
      goto LABEL_52;
    }
  }
  CommonTable = (const __CFData *)TBaseFont::GetCommonTable(*((TBaseFont **)this + 50), 1195656518, 0);
  if (!CommonTable)
    goto LABEL_51;
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v70[32] = v35;
  *(_OWORD *)&v70[48] = v35;
  *(_OWORD *)v70 = v35;
  *(_OWORD *)&v70[16] = v35;
  *(_OWORD *)__p = v35;
  OTL::GDEF::GDEF((OTL::GDEF *)__p, CommonTable);
  v36 = (char *)__p[0];
  if (!__p[0])
    goto LABEL_51;
  if (!*((_WORD *)__p[0] + 4))
    goto LABEL_51;
  v37 = (unsigned __int16 *)__p[1];
  v38 = __rev16(*((unsigned __int16 *)__p[0] + 4));
  v39 = (unsigned __int16 *)((char *)__p[0] + v38);
  if ((char *)__p[0] + v38 + 4 > __p[1])
    goto LABEL_51;
  OTL::Coverage::Coverage((OTL::Coverage *)v65, (unsigned __int16 *)((char *)v39 + (bswap32(*v39) >> 16)), (unint64_t)__p[1], 0);
  v40 = v67;
  v41 = (_QWORD *)((char *)v65 + (v68 >> 1));
  if ((v68 & 1) != 0)
    v40 = *(double **)(*v41 + v67);
  v42 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v41, a2);
  if (!v42 || v42 > bswap32(v39[1]) >> 16)
  {
LABEL_51:
    LigatureCaretCount = 0;
    goto LABEL_52;
  }
  v44 = bswap32(v39[v42 + 1]) >> 16;
  v45 = (char *)v39 + v44;
  v46 = *(unsigned __int16 *)((char *)v39 + v44);
  LigatureCaretCount = (unsigned __int16 *)__rev16(v46);
  if (v46)
    v47 = v10;
  else
    v47 = 1;
  if ((v47 & 1) == 0)
  {
    v56 = v44;
    v59 = 0xAAAAAAAAAAAAAAAALL;
    VariationValues = (__int16 *)TFont::GetVariationValues(this, (id *)&v59);
    v48 = (uint64_t)LigatureCaretCount >= v5 ? (unsigned __int16 *)v5 : LigatureCaretCount;
    if (v48)
    {
      v49 = v59;
      v50 = &v36[v56 + 2 + v38];
      v51 = v59;
      while (1)
      {
        v52 = *(unsigned __int16 *)v50;
        v50 += 2;
        v53 = &v45[bswap32(v52) >> 16];
        *(_QWORD *)v65 = this;
        v66 = a2;
        v67 = v6;
        v54 = bswap32(*(unsigned __int16 *)v53) >> 16;
        if (v54 == 3)
          break;
        if (v54 != 2)
        {
          if (v54 != 1 || v53 + 4 > (char *)v37)
          {
LABEL_73:
            v55 = 0;
            goto LABEL_74;
          }
          v4 = (double)((int)bswap32(*((unsigned __int16 *)v53 + 1)) >> 16);
          goto LABEL_70;
        }
        if (v53 + 4 > (char *)v37)
          goto LABEL_73;
        *(_QWORD *)&v4 = bswap32(*((unsigned __int16 *)v53 + 1)) >> 16;
        v55 = 2;
LABEL_74:
        *(double *)v58 = v4;
        v58[1] = v55;
        v64 = v65;
        ((void (*)(unsigned __int16 **, _QWORD *))off_1E15E2100[v55])(&v64, v58);
        ++v6;
        v48 = (unsigned __int16 *)((char *)v48 - 1);
        v49 = v51;
        if (!v48)
          goto LABEL_52;
      }
      if (v53 + 6 > (char *)v37)
        goto LABEL_73;
      v4 = (double)((int)bswap32(*((unsigned __int16 *)v53 + 1)) >> 16);
      if (v49)
        v4 = OTL::GDEF::DeltaValue((OTL::GDEF *)__p, v53, (unint64_t)v37, bswap32(*((unsigned __int16 *)v53 + 2)) >> 16, v49, VariationValues)+ v4;
LABEL_70:
      v55 = 1;
      goto LABEL_74;
    }
  }
LABEL_52:

  return LigatureCaretCount;
}

void TFont::FindColorBitmapForGlyph(TFont *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v10;
  double EffectiveSize;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  double v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned __int16 *v35;
  BOOL v36;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v43;
  unsigned int v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  char v48;

  v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
    goto LABEL_48;
  LOWORD(v8) = a2;
  v10 = *(unsigned __int16 *)(v6 + 6) << 16;
  EffectiveSize = TFont::GetEffectiveSize(a1);
  if (!v10)
    goto LABEL_48;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = round(EffectiveSize * a5);
  v17 = bswap32(v10);
  v19 = *(_QWORD *)(a3 + 8);
  v18 = *(_QWORD *)(a3 + 16);
  v20 = (unsigned int *)(v6 + 8);
  v21 = 0.0;
  do
  {
    v22 = *v20++;
    v23 = bswap32(v22);
    v24 = (unsigned __int16 *)(v6 + v23);
    v25 = v19 > v6 + v23 || v6 + v23 + 8 > v18;
    v26 = (uint64_t)&v24[2 * (unsigned __int16)v8 + 2];
    v27 = v26 + 4;
    v28 = v26 + 8;
    if (v25 || v19 > v27 || v28 > v18)
      goto LABEL_15;
    v31 = &v24[2 * (unsigned __int16)v8];
    v32 = *((_DWORD *)v31 + 1);
    v33 = *((_DWORD *)v31 + 2);
    if (v33 == v32)
      goto LABEL_15;
    v34 = bswap32(v32);
    v14 = bswap32(v33) - v34;
    v15 = (char *)v24 + v34;
    v35 = (unsigned __int16 *)(v15 + 8);
    v36 = v19 > (unint64_t)(v15 + 4) || (unint64_t)(v15 + 5) > v18;
    if (v36 || (unint64_t)v35 > v18)
      goto LABEL_15;
    v38 = bswap32(*((_DWORD *)v15 + 1));
    if (v38 != 1685418085)
    {
      if (v38 != 1718380912)
        goto LABEL_40;
      v12 = 1;
    }
    v8 = bswap32(*v35) >> 16;
    v39 = (uint64_t)&v24[2 * v8 + 2];
    v40 = v39 + 4;
    v41 = v39 + 8;
    if (v19 > v40 || v41 > v18)
    {
      v15 = 0;
    }
    else
    {
      v43 = &v24[2 * v8];
      v44 = *((_DWORD *)v43 + 1);
      LODWORD(v43) = *((_DWORD *)v43 + 2);
      v34 = bswap32(v44);
      v45 = bswap32(v43) - v34;
      v46 = (_DWORD)v43 == v44;
      v15 = (_DWORD)v43 == v44 ? 0 : (char *)v24 + v34;
      if (!v46)
        v14 = v45;
    }
LABEL_40:
    v13 = v34 + v23;
    v21 = (double)((int)bswap32(*v24) >> 16) * (double)((int)bswap32(v24[1]) >> 16) / 72.0;
    if (v21 >= v16)
      break;
LABEL_15:
    --v17;
  }
  while (v17);
  if (!v15
    || v19 > (unint64_t)v15
    || (unint64_t)(v15 + 6) > v18
    || !v14
    || v19 > (unint64_t)&v15[v14 - 1]
    || (unint64_t)&v15[v14] > v18)
  {
LABEL_48:
    v48 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_49;
  }
  v47 = *(_BYTE *)(v6 + 3);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = v13;
  *(double *)(a4 + 24) = v21 / v16;
  *(double *)(a4 + 32) = v21;
  *(_BYTE *)(a4 + 40) = v47;
  *(_BYTE *)(a4 + 41) = v12;
  *(_DWORD *)(a4 + 42) = 0;
  *(_WORD *)(a4 + 46) = 0;
  v48 = 1;
LABEL_49:
  *(_BYTE *)(a4 + 48) = v48;
}

BOOL TFont::HasColorBitmapForGlyph(TFont *this, unsigned int a2, id a3)
{
  __int16 v4;
  uint64_t v6;
  TBaseFont *v7;
  uint64_t v8;
  uint64_t InitializedGraphicsFont;
  _QWORD *v10;
  uint64_t v11;
  _BOOL8 v12;
  id v14[3];
  _BYTE v15[56];

  v4 = a2;
  v6 = a2;
  v7 = (TBaseFont *)*((_QWORD *)this + 50);
  v8 = *((_QWORD *)v7 + 25);
  if (!v8)
  {
    InitializedGraphicsFont = TBaseFont::GetInitializedGraphicsFont(v7);
    v8 = (*(uint64_t (**)(TBaseFont *, uint64_t))(*(_QWORD *)v7 + 872))(v7, InitializedGraphicsFont);
  }
  if (v8 <= v6)
    return 0;
  v10 = (_QWORD *)*((_QWORD *)this + 50);
  if (!v10[25])
  {
    v11 = TBaseFont::GetInitializedGraphicsFont(*((TBaseFont **)this + 50));
    (*(void (**)(_QWORD *, uint64_t))(*v10 + 872))(v10, v11);
  }
  TsbixContext::TsbixContext((TsbixContext *)v14, a3);
  TFont::FindColorBitmapForGlyph(this, v4, (uint64_t)v14, (uint64_t)v15, 1.0);
  v12 = v15[48] != 0;

  return v12;
}

void OTL::GCommon::GetLookups(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  int *v5;
  int *v6;
  char v7;
  void **v8;
  int *v9;
  int *v10;
  uint64_t v11;
  _OWORD v12[7];
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[6] = v4;
  v12[5] = v4;
  v12[4] = v4;
  v12[3] = v4;
  v12[2] = v4;
  v12[1] = v4;
  v12[0] = v4;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = v12;
  if (OTL::GCommon::GetLookups(a1, a2, (uint64_t)&v9, 0))
  {
    v5 = v9;
    v6 = v10;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 144) = a3 + 24;
    std::vector<std::pair<unsigned short,unsigned short>,TInlineBufferAllocator<std::pair<unsigned short,unsigned short>,30ul>>::__init_with_size[abi:nn180100]<std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>,std::__wrap_iter<std::pair<unsigned short,unsigned short> const*>>((char *)a3, v5, v6, v6 - v5);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 152) = v7;
  v8 = (void **)&v9;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100](&v8);
}

uint64_t OTL::GPOS::GetSinglePosAdjustments(OTL::GPOS *a1, unsigned __int16 **a2, uint64_t a3, double *a4, double *a5)
{
  os_unfair_lock_s *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  uint64_t v14;

  v10 = *(os_unfair_lock_s **)(*((_QWORD *)a1 + 2) + 400);
  os_unfair_lock_lock_with_options();
  v12 = *a2;
  v11 = a2[1];
  while (1)
  {
    if (v12 == v11)
    {
      v14 = 0;
      goto LABEL_8;
    }
    v13 = TBaseFont::NthLookup<OTL::GPOS>((uint64_t)v10, a1, *v12);
    if (v13)
    {
      if ((OTL::GPOS::GetSinglePosAdjustmentsForLookup(a1, (const OTL::Lookup *)v13, a3, a4, a5) & 1) != 0)
        break;
    }
    v12 += 2;
  }
  v14 = 1;
LABEL_8:
  os_unfair_lock_unlock(v10 + 89);
  return v14;
}

uint64_t GetUnscaledAdvances(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v6;
  int v7;
  __int128 v11;
  char *v12;
  char *v13;
  uint64_t GlyphVerticalAdvances;
  uint64_t v15;
  int *v16;
  double *v17;
  int v18;
  id v19;
  int *v20;
  char *v21;
  char *v22;
  _OWORD v23[7];
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;

  v6 = a5;
  v7 = a4;
  v26 = *MEMORY[0x1E0C80C00];
  if (a6 != 2 && (a6 || (*(_BYTE *)a1 & 1) == 0))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 400)
                                                                                          + 512))(*(_QWORD *)(a1 + 400), a2, a3, a4, a5);
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[6] = v11;
  v23[5] = v11;
  v23[4] = v11;
  v23[3] = v11;
  v23[2] = v11;
  v23[1] = v11;
  v23[0] = v11;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = v23;
  if (a5)
  {
    if (a5 >> 62)
      abort();
    v12 = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)v23, a5);
    v13 = &v12[4 * v6];
    v20 = (int *)v12;
    v22 = v13;
    bzero(v12, 4 * v6);
    v21 = v13;
  }
  v19 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(**(_QWORD **)(a1 + 400) + 496))(&v19);
  atomic_load((unint64_t *)&v19);
  GlyphVerticalAdvances = CGFontGetGlyphVerticalAdvances();
  v15 = GlyphVerticalAdvances;
  if (v6 && (_DWORD)GlyphVerticalAdvances)
  {
    v16 = v20;
    v17 = (double *)(a3 + 8);
    do
    {
      v18 = *v16++;
      *(v17 - 1) = (double)v18;
      if (v7 >= 2)
        bzero(v17, 8 * (v7 - (unint64_t)(((v7 - 1) & 0x1FFFFFFFFFFFFFFFLL) != 0)));
      v17 += v7;
      --v6;
    }
    while (v6);
  }

  v19 = &v20;
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
  return v15;
}

double ApplyFixedAdvances(const __CFDictionary *a1, int a2, uint64_t a3, double *a4, int a5)
{
  const __CFNumber *Value;
  double v10;
  double result;
  double valuePtr;

  valuePtr = NAN;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("NSCTFontFixedAdvanceAttribute"));
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  if (a2)
    valuePtr = round(valuePtr);
  if (a3 < 1)
    return 0.0;
  v10 = valuePtr;
  result = 0.0;
  do
  {
    if (*a4 != 0.0)
    {
      *a4 = v10;
      result = v10 + result;
    }
    a4 += a5;
    --a3;
  }
  while (a3);
  return result;
}

uint64_t TFont::GetUnscaledVerticalTranslationsForGlyphs(TFont *this, const unsigned __int16 *a2, CGSize *a3, uint64_t a4)
{
  uint64_t GlyphVerticalOffsets;
  uint64_t v8;
  uint64_t v10;
  id v11;

  v11 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 496))(&v11);
  atomic_load((unint64_t *)&v11);
  GlyphVerticalOffsets = CGFontGetGlyphVerticalOffsets();
  if ((_DWORD)GlyphVerticalOffsets)
  {
    TFont::GetScaleFactor((double *)this);
    v10 = v8;
    vDSP_vsmulD(&a3->width, 1, (const double *)&v10, &a3->width, 1, 2 * a4);
  }

  return GlyphVerticalOffsets;
}

void TFont::GetBoundingBoxesForGlyphs(TBaseFont **this, CGAffineTransform *a2, char a3, const unsigned __int16 *a4, CGRect *a5, uint64_t a6, unsigned __int32 a7)
{
  int64x2_t v13;
  CGAffineTransform *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int BoundingBoxesForSVGGlyphs;
  __int128 v19;
  double EffectiveSize;
  __int128 v21;
  CGFloat v22;
  CGFloat v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  char *v27;
  CGFloat v28;
  double BoundingBoxesForGlyphs;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  CGSize *p_size;
  __int128 v35;
  __int128 v36;
  double v37;
  __int128 v38;
  CGRect *v39;
  __int128 v40;
  double ColorBitmapFontTranslate;
  double v42;
  CGFloat v43;
  CGFloat v44;
  CGSize *v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v52;
  CGFloat v53;
  CGFloat v54;
  CGAffineTransform v55;
  CGAffineTransform v56;
  uint64_t ParserFont;
  CGRect *v58;
  const unsigned __int16 *v59;
  __int128 v60;
  __int128 v61;
  CGAffineTransform t2;
  CGAffineTransform t1;
  char v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  _BYTE v68[56];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE *v82;
  uint64_t v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v83 = *MEMORY[0x1E0C80C00];
  v58 = a5;
  v59 = a4;
  if (a2)
  {
    v13 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)&a2->a, (float64x2_t)xmmword_18492FA90), (int8x16_t)vceqq_f64(*(float64x2_t *)&a2->c, (float64x2_t)xmmword_18492E300)), (int8x16_t)vceqzq_f64(*(float64x2_t *)&a2->tx));
    if (vandq_s8((int8x16_t)v13, (int8x16_t)vdupq_laneq_s64(v13, 1)).i64[0] >= 0)
      v14 = a2;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  if (a7 == 2)
  {
    v15 = 1;
  }
  else if (a7)
  {
    v15 = 0;
  }
  else
  {
    v15 = *(_BYTE *)this & 1;
  }
  if (TBaseFont::GetInitializedGraphicsFont(this[50]))
  {
    ParserFont = CGFontGetParserFont();
    if (ParserFont)
    {
      v16 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
      v60 = *MEMORY[0x1E0C9D648];
      v61 = v16;
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v81 = v17;
      v80 = v17;
      v79 = v17;
      v78 = v17;
      v77 = v17;
      v76 = v17;
      v75 = v17;
      v74 = v17;
      v73 = v17;
      v72 = v17;
      v71 = v17;
      v70 = v17;
      v69 = v17;
      *(_OWORD *)&v68[40] = v17;
      *(_OWORD *)&v68[24] = v17;
      memset(v68, 0, 24);
      v82 = &v68[24];
      BoundingBoxesForSVGGlyphs = TFont::GetBoundingBoxesForSVGGlyphs((TFont *)this, v14, (uint64_t)a4, (uint64_t)a5, a6, a7, (double *)v68, (CGFloat *)&v60);
      *(_QWORD *)&v19 = -1;
      *((_QWORD *)&v19 + 1) = -1;
      *(_OWORD *)&v56.c = v19;
      *(_OWORD *)&v56.tx = v19;
      *(_OWORD *)&v56.a = v19;
      if ((a3 & 1) != 0)
      {
        TFont::GetScaledMatrix((TFont *)this, &v56);
        if (!v14)
        {
LABEL_18:
          if (v15)
          {
            t1 = *(CGAffineTransform *)kRotateLeftTransform;
            t2 = v56;
            CGAffineTransformConcat(&v55, &t1, &t2);
            v56 = v55;
          }
          t1.a = TFont::GetColorBitmapFontTranslate((TFont *)this);
          t1.b = v22;
          if ((a3 & 1) != 0)
          {
            v28 = MEMORY[0x1E0D22538];
            if (v15)
              v28 = MEMORY[0x1E0D22548];
            t2.a = v28;
            v24 = operator new(0x40uLL);
            *v24 = &off_1E15E10F0;
            v24[1] = &v58;
            v24[2] = &t2;
            v24[3] = &ParserFont;
            v24[4] = &v59;
            v24[5] = &v56;
            v24[6] = &t1;
            v24[7] = &v60;
            v67 = v24;
            v26 = *(uint64_t **)&v68[8];
            v25 = *(uint64_t **)v68;
            v27 = &v66;
          }
          else
          {
            v23 = MEMORY[0x1E0D22520];
            if (v15)
              v23 = MEMORY[0x1E0D22528];
            t2.a = v23;
            v24 = operator new(0x40uLL);
            *v24 = &off_1E15E1138;
            v24[1] = &v58;
            v24[2] = &t2;
            v24[3] = &ParserFont;
            v24[4] = &v56;
            v24[5] = &v59;
            v24[6] = &t1;
            v24[7] = &v60;
            v65 = v24;
            v26 = *(uint64_t **)&v68[8];
            v25 = *(uint64_t **)v68;
            v27 = &v64;
          }
          ForEachIndex(a6, BoundingBoxesForSVGGlyphs ^ 1, v25, v26, (uint64_t)v27);
          (*(void (**)(_QWORD *))(*v24 + 40))(v24);
          *(_QWORD *)&t1.a = v68;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&t1);
          return;
        }
      }
      else
      {
        TFont::GetEffectiveMatrix((TFont *)this, (uint64_t)&t2);
        EffectiveSize = TFont::GetEffectiveSize((TFont *)this);
        t1 = t2;
        CGAffineTransformScale(&v56, &t1, EffectiveSize, EffectiveSize);
        if (!v14)
          goto LABEL_18;
      }
      t1 = v56;
      v21 = *(_OWORD *)&v14->c;
      *(_OWORD *)&t2.a = *(_OWORD *)&v14->a;
      *(_OWORD *)&t2.c = v21;
      *(_OWORD *)&t2.tx = *MEMORY[0x1E0C9D538];
      CGAffineTransformConcat(&v55, &t1, &t2);
      v56 = v55;
      goto LABEL_18;
    }
  }
  else
  {
    ParserFont = 0;
  }
  if (v15)
  {
    BoundingBoxesForGlyphs = TFont::GetBoundingBoxesForGlyphs((TFont *)this, a4, a5, a6, (CTFontOrientation)a7);
    *(double *)&v60 = BoundingBoxesForGlyphs;
    *((_QWORD *)&v60 + 1) = v30;
    *(_QWORD *)&v61 = v31;
    *((_QWORD *)&v61 + 1) = v32;
    if (v14)
    {
      v33 = *(_OWORD *)&v14->c;
      *(_OWORD *)v68 = *(_OWORD *)&v14->a;
      *(_OWORD *)&v68[16] = v33;
      *(_OWORD *)&v68[32] = *(_OWORD *)&v14->tx;
      v84 = CGRectApplyAffineTransform(*(CGRect *)&BoundingBoxesForGlyphs, (CGAffineTransform *)v68);
      *(CGFloat *)&v60 = v84.origin.x;
      *((_QWORD *)&v60 + 1) = *(_QWORD *)&v84.origin.y;
      *(CGFloat *)&v61 = v84.size.width;
      *((_QWORD *)&v61 + 1) = *(_QWORD *)&v84.size.height;
      if (a6)
      {
        p_size = &a5->size;
        do
        {
          v85 = *(CGRect *)&p_size[-1].width;
          v35 = *(_OWORD *)&v14->c;
          *(_OWORD *)v68 = *(_OWORD *)&v14->a;
          *(_OWORD *)&v68[16] = v35;
          *(_OWORD *)&v68[32] = *(_OWORD *)&v14->tx;
          *(CGRect *)&p_size[-1].width = CGRectApplyAffineTransform(v85, (CGAffineTransform *)v68);
          p_size += 2;
          --a6;
        }
        while (a6);
      }
    }
  }
  else
  {
    *(_QWORD *)&v36 = -1;
    *((_QWORD *)&v36 + 1) = -1;
    *(_OWORD *)&t2.c = v36;
    *(_OWORD *)&t2.tx = v36;
    *(_OWORD *)&t2.a = v36;
    TFont::GetEffectiveMatrix((TFont *)this, (uint64_t)&t1);
    v37 = TFont::GetEffectiveSize((TFont *)this);
    *(CGAffineTransform *)v68 = t1;
    CGAffineTransformScale(&t2, (CGAffineTransform *)v68, v37, v37);
    if (v14)
    {
      *(CGAffineTransform *)v68 = t2;
      v38 = *(_OWORD *)&v14->c;
      *(_OWORD *)&t1.a = *(_OWORD *)&v14->a;
      *(_OWORD *)&t1.c = v38;
      *(_OWORD *)&t1.tx = *MEMORY[0x1E0C9D538];
      CGAffineTransformConcat(&v56, (CGAffineTransform *)v68, &t1);
      t2 = v56;
    }
    *(_QWORD *)v68 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)this[50] + 496))(v68);
    atomic_load((unint64_t *)v68);
    v39 = v58;
    if (CGFontGetGlyphBBoxesForStyle())
    {
      v40 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
      v60 = *MEMORY[0x1E0C9D648];
      v61 = v40;
      ColorBitmapFontTranslate = TFont::GetColorBitmapFontTranslate((TFont *)this);
      v53 = v42;
      v54 = ColorBitmapFontTranslate;
      if (a6 >= 1)
      {
        v43 = *((double *)&v60 + 1);
        v44 = *(double *)&v60;
        v45 = &v39->size;
        v47 = *((double *)&v61 + 1);
        v46 = *(double *)&v61;
        do
        {
          v86 = CGRectOffset(*(CGRect *)&v45[-1].width, v54, v53);
          x = v86.origin.x;
          y = v86.origin.y;
          width = v86.size.width;
          height = v86.size.height;
          *(CGRect *)&v45[-1].width = v86;
          v86.origin.x = v44;
          v86.origin.y = v43;
          v86.size.width = v46;
          v86.size.height = v47;
          if (CGRectIsEmpty(v86))
          {
            v44 = x;
            v43 = y;
            v46 = width;
            v47 = height;
          }
          else
          {
            v87.origin.x = x;
            v87.origin.y = y;
            v87.size.width = width;
            v87.size.height = height;
            if (!CGRectIsEmpty(v87))
            {
              v88.origin.x = v44;
              v88.origin.y = v43;
              v88.size.width = v46;
              v88.size.height = v47;
              v90.origin.x = x;
              v90.origin.y = y;
              v90.size.width = width;
              v90.size.height = height;
              v89 = CGRectUnion(v88, v90);
              v44 = v89.origin.x;
              v43 = v89.origin.y;
              v46 = v89.size.width;
              v47 = v89.size.height;
            }
          }
          *(CGFloat *)&v60 = v44;
          *((CGFloat *)&v60 + 1) = v43;
          v45 += 2;
          *(CGFloat *)&v61 = v46;
          *((CGFloat *)&v61 + 1) = v47;
          --a6;
        }
        while (a6);
      }
    }
    else
    {
      v52 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v60 = *MEMORY[0x1E0C9D628];
      v61 = v52;
    }

  }
}

unint64_t TFont::GetPaletteColors(TFont *this)
{
  unint64_t *v1;
  unint64_t v2;
  const __CFNumber *v4;
  const __CFDictionary *v5;
  int v6;
  int v7;
  unint64_t PaletteWithFlags;
  const __CFData *v9;
  unint64_t v10;
  char *v11;
  char *i;
  const void *v13;
  void *Value;
  void *v15;
  CFTypeID v16;
  void *v17;
  __CFArray *v19;
  const void *v20;
  unint64_t v21;
  int v23;
  void *v24;
  id v26;
  id valuePtr[3];
  id v28[3];
  id Mutable;
  id v30;
  id v31;

  v1 = (unint64_t *)((char *)this + 496);
  v2 = atomic_load((unint64_t *)this + 62);
  if (v2)
    return v2;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  memset(v28, 170, sizeof(v28));
  (*(void (**)(id *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 50) + 480))(valuePtr, *((_QWORD *)this + 50), 1129333068);
  ColorPaletteTable::ColorPaletteTable((unint64_t *)v28, (unint64_t *)valuePtr);

  if (v28[2])
  {
    TFont::CopyAttribute(this, CFSTR("CTFontPaletteAttribute"), 48, (unint64_t *)valuePtr);
    do
      v4 = (const __CFNumber *)__ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));

    TFont::CopyAttribute(this, CFSTR("CTFontPaletteColorsAttribute"), 49, (unint64_t *)valuePtr);
    do
      v5 = (const __CFDictionary *)__ldaxr((unint64_t *)valuePtr);
    while (__stlxr(0, (unint64_t *)valuePtr));

    if (v4)
    {
      valuePtr[0] = (id)0xAAAAAAAAAAAAAAAALL;
      CFNumberGetValue(v4, kCFNumberLongType, valuePtr);
      if (valuePtr[0] == (id)-2)
      {
        v6 = 2;
        v7 = 2;
      }
      else
      {
        if (valuePtr[0] != (id)-1)
        {
          PaletteWithFlags = (unint64_t)valuePtr[0] & ~((uint64_t)valuePtr[0] >> 63);
          goto LABEL_15;
        }
        v6 = 1;
        v7 = 1;
      }
      PaletteWithFlags = (unint64_t)ColorPaletteTable::IndexOfFirstPaletteWithFlags((const UInt8 **)v28, v6, v7);
    }
    else
    {
      PaletteWithFlags = 0;
    }
LABEL_15:
    memset(valuePtr, 170, sizeof(valuePtr));
    v9 = (const __CFData *)atomic_load((unint64_t *)v28);
    ColorPaletteTable::Palette::Palette((ColorPaletteTable::Palette *)valuePtr, v9, PaletteWithFlags);
    v11 = (char *)valuePtr[2];
    if (valuePtr[2])
    {
      for (i = 0; i != v11; ++i)
      {
        if (!v5)
          goto LABEL_27;
        v31 = (id)0xAAAAAAAAAAAAAAAALL;
        TCFNumber::TCFNumber<int>((unint64_t *)&v31, (unsigned __int16)i);
        v13 = (const void *)atomic_load((unint64_t *)&v31);
        Value = (void *)CFDictionaryGetValue(v5, v13);
        if (!Value)
          goto LABEL_26;
        v15 = Value;
        v16 = CFGetTypeID(Value);
        if (v16 == CGColorGetTypeID())
        {
          v30 = v15;
          do
            v17 = (void *)__ldaxr((unint64_t *)&v30);
          while (__stlxr(0, (unint64_t *)&v30));
          v26 = v17;

        }
        else
        {
          v26 = CopyCGColor(v15);
          if (!atomic_load((unint64_t *)&v26))
          {

LABEL_26:
LABEL_27:
            ColorPaletteTable::Palette::ColorForPaletteEntry((unint64_t *)valuePtr, (unsigned __int16)i, (unint64_t **)&v26, v10);
            goto LABEL_28;
          }
        }

LABEL_28:
        v19 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
        v20 = (const void *)atomic_load((unint64_t *)&v26);
        CFArrayAppendValue(v19, v20);

      }
    }

    goto LABEL_30;
  }
  do
LABEL_30:
    v21 = __ldaxr((unint64_t *)&Mutable);
  while (__stlxr(0, (unint64_t *)&Mutable));
  do
  {
    if (__ldaxr(v1))
    {
      v23 = 0;
      __clrex();
      goto LABEL_36;
    }
  }
  while (__stlxr(v21, v1));
  v23 = 1;
LABEL_36:
  if (v23)
    v24 = 0;
  else
    v24 = (void *)v21;

  v2 = atomic_load(v1);
  return v2;
}

void std::vector<long,TInlineBufferAllocator<long,30ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long,TInlineBufferAllocator<long,30ul>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t TFont::GetVerticalTranslationsForGlyphs(TFont *this, const unsigned __int16 *a2, float64x2_t *a3, uint64_t a4)
{
  uint64_t GlyphVerticalOffsets;
  float64x2_t v8;
  float64x2_t v9;
  CGAffineTransform v11;
  id v12;

  v12 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 496))(&v12);
  atomic_load((unint64_t *)&v12);
  GlyphVerticalOffsets = CGFontGetGlyphVerticalOffsets();
  if ((_DWORD)GlyphVerticalOffsets)
  {
    TFont::GetScaledMatrix(this, &v11);
    if (a4)
    {
      v8 = *(float64x2_t *)&v11.a;
      v9 = *(float64x2_t *)&v11.c;
      do
      {
        *a3 = vmlaq_n_f64(vmulq_n_f64(v9, a3->f64[1]), v8, a3->f64[0]);
        ++a3;
        --a4;
      }
      while (a4);
    }
  }

  return GlyphVerticalOffsets;
}

void TFont::CopyNameForGlyph(TFont *this@<X0>, CGGlyph a2@<W1>, CFStringRef *a3@<X8>)
{
  CGFont *v5;
  id v6;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 496))(&v6);
  v5 = (CGFont *)atomic_load((unint64_t *)&v6);
  *a3 = CGFontCopyGlyphNameForGlyph(v5, a2);

}

uint64_t TFont::GetGlyphWithName(TFont *this, const __CFString *a2)
{
  CGFont *v3;
  uint64_t GlyphWithGlyphName;
  id v6;

  v6 = (id)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(id *__return_ptr))(**((_QWORD **)this + 50) + 496))(&v6);
  v3 = (CGFont *)atomic_load((unint64_t *)&v6);
  GlyphWithGlyphName = CGFontGetGlyphWithGlyphName(v3, a2);

  return GlyphWithGlyphName;
}

void TFont::CopyDescriptor(TFont *this@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  unint64_t *v6;
  void *v7;
  const __CTFontDescriptor *v9;
  CFDictionaryRef v10;
  __int128 v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFNumber *Value;
  void **v15;
  void **v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  int64x2_t v26;
  void **v27;
  void *v28;
  void *v29;
  void **v30;
  void **v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void **v36;
  void **v37;
  void **v38;
  void **v39;
  void *v40;
  int64x2_t v41;
  void **v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  const __CFData *v45;
  const UInt8 *BytePtr;
  CFDataRef v47;
  void *v48;
  void **v49;
  void **v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void *v59;
  int64x2_t v60;
  void **v61;
  void *v62;
  void **v63;
  void **v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  void **v69;
  void **v70;
  void **v71;
  void **v72;
  void *v73;
  int64x2_t v74;
  void **v75;
  void *v77;
  const __CFDictionary *v78;
  const __CFDictionary *v79;
  void *v80;
  void **v81;
  void **v82;
  int64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  void **v87;
  void **v88;
  void **v89;
  void **v90;
  void *v91;
  int64x2_t v92;
  void **v93;
  void **v94;
  void **v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void **v100;
  void **v101;
  void **v102;
  void **v103;
  void *v104;
  int64x2_t v105;
  void **v106;
  void *v107;
  const __CFDictionary *v108;
  const __CFDictionary *v109;
  void *v110;
  void **v111;
  void **v112;
  int64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  void **v117;
  void **v118;
  void **v119;
  void **v120;
  void *v121;
  int64x2_t v122;
  void **v123;
  void **v124;
  void **v125;
  int64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  void **v130;
  void **v131;
  void **v132;
  void **v133;
  void *v134;
  int64x2_t v135;
  void **v136;
  void *v137;
  const __CFDictionary *v138;
  const __CFDictionary *v139;
  void *v140;
  void **v141;
  void **v142;
  int64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  void **v147;
  void **v148;
  void **v149;
  void **v150;
  void *v151;
  int64x2_t v152;
  void **v153;
  void **v154;
  void **v155;
  int64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  void **v160;
  void **v161;
  void **v162;
  void **v163;
  void *v164;
  int64x2_t v165;
  void **v166;
  void *v167;
  const __CFDictionary *v168;
  const __CFDictionary *v169;
  void *v170;
  void **v171;
  void **v172;
  int64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  void **v177;
  void **v178;
  void **v179;
  void **v180;
  void *v181;
  int64x2_t v182;
  void **v183;
  void **v184;
  void **v185;
  int64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  void **v190;
  void **v191;
  void **v192;
  void **v193;
  void *v194;
  int64x2_t v195;
  void **v196;
  void *v197;
  const __CFDictionary *v198;
  const __CFDictionary *v199;
  void *v200;
  void **v201;
  void **v202;
  int64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  void **v207;
  void **v208;
  void **v209;
  void **v210;
  void *v211;
  int64x2_t v212;
  void **v213;
  void **v214;
  void **v215;
  int64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  void **v220;
  void **v221;
  void **v222;
  void **v223;
  void *v224;
  int64x2_t v225;
  void **v226;
  void *v227;
  const __CFDictionary *v228;
  const __CFDictionary *v229;
  void *v230;
  void **v231;
  void **v232;
  int64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  void **v237;
  void **v238;
  void **v239;
  void **v240;
  void *v241;
  int64x2_t v242;
  void **v243;
  void **v244;
  void **v245;
  int64_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  void **v250;
  void **v251;
  void **v252;
  void **v253;
  void *v254;
  int64x2_t v255;
  void **v256;
  void *v257;
  const __CFDictionary *v258;
  const __CFDictionary *v259;
  void *v260;
  void **v261;
  void **v262;
  int64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  void **v267;
  void **v268;
  void **v269;
  void **v270;
  void *v271;
  int64x2_t v272;
  void **v273;
  void **v274;
  void **v275;
  int64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  void **v280;
  void **v281;
  void **v282;
  void **v283;
  void *v284;
  int64x2_t v285;
  void **v286;
  void *v287;
  const __CFDictionary *v288;
  const __CFDictionary *v289;
  void *v290;
  void **v291;
  void **v292;
  int64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  void **v297;
  void **v298;
  void **v299;
  void **v300;
  void *v301;
  int64x2_t v302;
  void **v303;
  void **v304;
  void **v305;
  int64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  void **v310;
  void **v311;
  void **v312;
  void **v313;
  void *v314;
  int64x2_t v315;
  void **v316;
  void *v317;
  const __CFDictionary *v318;
  const __CFDictionary *v319;
  void *v320;
  void **v321;
  void **v322;
  int64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  void **v327;
  void **v328;
  void **v329;
  void **v330;
  void *v331;
  int64x2_t v332;
  void **v333;
  void **v334;
  void **v335;
  int64_t v336;
  unint64_t v337;
  unint64_t v338;
  char *v339;
  void **v340;
  void **v341;
  void **v342;
  void **v343;
  void *v344;
  int64x2_t v345;
  void **v346;
  void *v347;
  const __CFDictionary *v348;
  const __CFDictionary *v349;
  void *v350;
  void **v351;
  void **v352;
  int64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  void **v357;
  void **v358;
  void **v359;
  void **v360;
  void *v361;
  int64x2_t v362;
  void **v363;
  void **v364;
  void **v365;
  int64_t v366;
  unint64_t v367;
  unint64_t v368;
  char *v369;
  void **v370;
  void **v371;
  void **v372;
  void **v373;
  void *v374;
  int64x2_t v375;
  void **v376;
  void *v377;
  const __CFDictionary *v378;
  const __CFDictionary *v379;
  void *v380;
  void **v381;
  void **v382;
  int64_t v383;
  unint64_t v384;
  unint64_t v385;
  char *v386;
  void **v387;
  void **v388;
  void **v389;
  void **v390;
  void *v391;
  int64x2_t v392;
  void **v393;
  void **v394;
  void **v395;
  int64_t v396;
  unint64_t v397;
  unint64_t v398;
  char *v399;
  void **v400;
  void **v401;
  void **v402;
  void **v403;
  void *v404;
  int64x2_t v405;
  void **v406;
  void *v407;
  const __CFDictionary *v408;
  const __CFDictionary *v409;
  void *v410;
  void **v411;
  void **v412;
  int64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  void **v417;
  void **v418;
  void **v419;
  void **v420;
  void *v421;
  int64x2_t v422;
  void **v423;
  void **v424;
  void **v425;
  int64_t v426;
  unint64_t v427;
  unint64_t v428;
  char *v429;
  void **v430;
  void **v431;
  void **v432;
  void **v433;
  void *v434;
  int64x2_t v435;
  void **v436;
  void *v437;
  const __CFDictionary *v438;
  const __CFDictionary *v439;
  void *v440;
  void **v441;
  void **v442;
  int64_t v443;
  unint64_t v444;
  unint64_t v445;
  char *v446;
  void **v447;
  void **v448;
  void **v449;
  void **v450;
  void *v451;
  int64x2_t v452;
  void **v453;
  void **v454;
  void **v455;
  int64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  void **v460;
  void **v461;
  void **v462;
  void **v463;
  void *v464;
  int64x2_t v465;
  void **v466;
  unsigned int v467;
  CFNumberRef v468;
  void **v469;
  void **v470;
  int64_t v471;
  unint64_t v472;
  unint64_t v473;
  char *v474;
  void **v475;
  void **v476;
  void **v477;
  void **v478;
  void *v479;
  int64x2_t v480;
  void **v481;
  void **v482;
  void **v483;
  int64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  void **v488;
  void **v489;
  void **v490;
  void **v491;
  void *v492;
  int64x2_t v493;
  void **v494;
  uint64_t v495;
  CFNumberRef v496;
  void **v497;
  void **v498;
  int64_t v499;
  unint64_t v500;
  unint64_t v501;
  char *v502;
  void **v503;
  void **v504;
  void **v505;
  void **v506;
  void *v507;
  int64x2_t v508;
  void **v509;
  void **v510;
  void **v511;
  int64_t v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  void **v516;
  void **v517;
  void **v518;
  void **v519;
  void *v520;
  int64x2_t v521;
  void **v522;
  void *v523;
  void *v524;
  void *v525;
  void *v526;
  void *v527;
  __int128 v528;
  void *v529;
  void **v530;
  void **v531;
  void **v532;
  void *v533;
  void **v534;
  const void *v535;
  const void *v536;
  BOOL v537;
  const void *v538;
  const void *v539;
  BOOL v540;
  const void *v541;
  const void *v542;
  BOOL v543;
  void *v544;
  void *v545;
  const __CFDictionary *v547;
  const __CFDictionary *v548;
  CFIndex Count;
  __int128 v550;
  uint64_t v551;
  __int128 v552;
  char *v553;
  const __CFDictionary *v554;
  const __CFDictionary *v555;
  const void *v556;
  void **v557;
  void **v558;
  unint64_t v559;
  unint64_t v560;
  __CFString *v561;
  int v562;
  void **v563;
  unint64_t v564;
  void **v565;
  unint64_t v566;
  CFDictionaryRef v567;
  unint64_t v568;
  const TBaseFont *v569;
  uint64_t v570;
  _QWORD *v571;
  TDescriptor *v572;
  void **v573;
  unint64_t v574;
  void *v575;
  void *v577;
  void *v578;
  void *v579;
  const __CTFontDescriptor *v580;
  __int128 v581;
  void **v582;
  void *v583;
  void **v584;
  unint64_t *v585;
  void *v586;
  void *v587;
  void **v588;
  _QWORD *v589;
  void *v590;
  void *v591;
  unint64_t v592;
  int v594;
  void *v595;
  void **v596;
  CFDictionaryRef v597;
  id v598;
  void ***p_values;
  void **values;
  void *v601;
  uint64_t v602;
  _OWORD v603[15];
  _OWORD *v604;
  _BYTE valuePtr[56];
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  _BYTE *v619;
  void **v620[2];
  void **v621;
  _OWORD v622[15];
  _OWORD *v623;
  void **keys[2];
  void **v625;
  _OWORD v626[15];
  _OWORD *v627;
  uint64_t v628;

  v628 = *MEMORY[0x1E0C80C00];
  if (a2 && TFont::IsSystemUIFontAndForShaping(this, (BOOL *)keys))
    v6 = (unint64_t *)((char *)this + 544);
  else
    v6 = (unint64_t *)((char *)this + 536);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  v7 = (void *)atomic_load(v6);
  *a3 = (unint64_t)v7;
  if (atomic_load(a3))
    return;
  v9 = (const __CTFontDescriptor *)atomic_load((unint64_t *)this + 1);
  v10 = CTFontDescriptorCopyAttributes(v9);
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v626[14] = v11;
  v626[13] = v11;
  v626[12] = v11;
  v626[11] = v11;
  v626[10] = v11;
  v626[9] = v11;
  v626[8] = v11;
  v626[7] = v11;
  v626[6] = v11;
  v626[5] = v11;
  v626[4] = v11;
  v626[3] = v11;
  v626[2] = v11;
  v626[1] = v11;
  v626[0] = v11;
  keys[0] = 0;
  keys[1] = 0;
  v625 = 0;
  v627 = v626;
  v622[14] = v11;
  v622[13] = v11;
  v622[12] = v11;
  v622[11] = v11;
  v622[10] = v11;
  v622[9] = v11;
  v622[8] = v11;
  v622[7] = v11;
  v622[6] = v11;
  v622[5] = v11;
  v622[4] = v11;
  v622[3] = v11;
  v622[2] = v11;
  v622[1] = v11;
  v622[0] = v11;
  v620[0] = 0;
  v620[1] = 0;
  v621 = 0;
  v623 = v622;
  v597 = v10;
  v12 = v10;
  if (v12)
  {
    v13 = v12;
    Value = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("NSFontSizeAttribute"));

    if (Value)
    {
      *(_QWORD *)valuePtr = -1;
      CFNumberGetValue(Value, kCFNumberDoubleType, valuePtr);
      if (*(double *)valuePtr == *((double *)this + 2))
        goto LABEL_44;
    }
  }
  else
  {

  }
  v15 = keys[1];
  if (keys[1] >= v625)
  {
    v17 = keys[1] - keys[0];
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_706;
    v18 = ((char *)v625 - (char *)keys[0]) >> 2;
    if (v18 <= v17 + 1)
      v18 = v17 + 1;
    if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    *(_QWORD *)&valuePtr[32] = v626;
    if (v19)
      v20 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v19);
    else
      v20 = 0;
    v21 = (void **)&v20[8 * v17];
    v22 = (void **)&v20[8 * v19];
    *(_QWORD *)&valuePtr[24] = v22;
    *v21 = CFSTR("NSFontSizeAttribute");
    v16 = v21 + 1;
    *(_QWORD *)&valuePtr[16] = v21 + 1;
    v23 = keys[1];
    v24 = keys[0];
    if (keys[1] == keys[0])
    {
      v26 = vdupq_n_s64((unint64_t)keys[1]);
    }
    else
    {
      do
      {
        v25 = *--v23;
        *--v21 = v25;
      }
      while (v23 != v24);
      v26 = *(int64x2_t *)keys;
      v16 = *(void ***)&valuePtr[16];
      v22 = *(void ***)&valuePtr[24];
    }
    keys[0] = v21;
    keys[1] = v16;
    *(int64x2_t *)&valuePtr[8] = v26;
    v27 = v625;
    v625 = v22;
    *(_QWORD *)&valuePtr[24] = v27;
    *(_QWORD *)valuePtr = v26.i64[0];
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
  }
  else
  {
    *keys[1] = CFSTR("NSFontSizeAttribute");
    v16 = v15 + 1;
  }
  keys[1] = v16;
  v28 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 2));
  v29 = v28;
  v30 = v620[1];
  if (v620[1] >= v621)
  {
    v32 = v620[1] - v620[0];
    if ((unint64_t)(v32 + 1) >> 61)
      goto LABEL_706;
    v33 = ((char *)v621 - (char *)v620[0]) >> 2;
    if (v33 <= v32 + 1)
      v33 = v32 + 1;
    if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    *(_QWORD *)&valuePtr[32] = v622;
    if (v34)
      v35 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v34);
    else
      v35 = 0;
    v36 = (void **)&v35[8 * v32];
    v37 = (void **)&v35[8 * v34];
    *(_QWORD *)&valuePtr[24] = v37;
    *v36 = v29;
    v31 = v36 + 1;
    *(_QWORD *)&valuePtr[16] = v36 + 1;
    v38 = v620[1];
    v39 = v620[0];
    if (v620[1] == v620[0])
    {
      v41 = vdupq_n_s64((unint64_t)v620[1]);
    }
    else
    {
      do
      {
        v40 = *--v38;
        *--v36 = v40;
      }
      while (v38 != v39);
      v41 = *(int64x2_t *)v620;
      v31 = *(void ***)&valuePtr[16];
      v37 = *(void ***)&valuePtr[24];
    }
    v620[0] = v36;
    v620[1] = v31;
    *(int64x2_t *)&valuePtr[8] = v41;
    v42 = v621;
    v621 = v37;
    *(_QWORD *)&valuePtr[24] = v42;
    *(_QWORD *)valuePtr = v41.i64[0];
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
  }
  else
  {
    *v620[1] = v28;
    v31 = v30 + 1;
  }
  v620[1] = v31;
LABEL_44:
  v598 = 0;
  if (!*((_QWORD *)this + 5))
    goto LABEL_86;
  v43 = v597;
  if (v43)
  {
    v44 = v43;
    v45 = (const __CFData *)CFDictionaryGetValue(v43, CFSTR("NSCTFontMatrixAttribute"));

    if (v45)
    {
      BytePtr = CFDataGetBytePtr(v45);
      if (BytePtr)
      {
        if (!memcmp(BytePtr, *((const void **)this + 5), 0x30uLL))
          goto LABEL_86;
      }
    }
  }
  else
  {

  }
  v47 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((const UInt8 **)this + 5), 48);
  do
    v48 = (void *)__ldaxr((unint64_t *)&v598);
  while (__stlxr((unint64_t)v47, (unint64_t *)&v598));

  v49 = keys[1];
  if (keys[1] >= v625)
  {
    v51 = keys[1] - keys[0];
    if ((unint64_t)(v51 + 1) >> 61)
      goto LABEL_706;
    v52 = ((char *)v625 - (char *)keys[0]) >> 2;
    if (v52 <= v51 + 1)
      v52 = v51 + 1;
    if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    *(_QWORD *)&valuePtr[32] = v626;
    if (v53)
      v54 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v53);
    else
      v54 = 0;
    v55 = (void **)&v54[8 * v51];
    v56 = (void **)&v54[8 * v53];
    *(_QWORD *)&valuePtr[24] = v56;
    *v55 = CFSTR("NSCTFontMatrixAttribute");
    v50 = v55 + 1;
    *(_QWORD *)&valuePtr[16] = v55 + 1;
    v57 = keys[1];
    v58 = keys[0];
    if (keys[1] == keys[0])
    {
      v60 = vdupq_n_s64((unint64_t)keys[1]);
    }
    else
    {
      do
      {
        v59 = *--v57;
        *--v55 = v59;
      }
      while (v57 != v58);
      v60 = *(int64x2_t *)keys;
      v50 = *(void ***)&valuePtr[16];
      v56 = *(void ***)&valuePtr[24];
    }
    keys[0] = v55;
    keys[1] = v50;
    *(int64x2_t *)&valuePtr[8] = v60;
    v61 = v625;
    v625 = v56;
    *(_QWORD *)&valuePtr[24] = v61;
    *(_QWORD *)valuePtr = v60.i64[0];
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
  }
  else
  {
    *keys[1] = CFSTR("NSCTFontMatrixAttribute");
    v50 = v49 + 1;
  }
  keys[1] = v50;
  v62 = (void *)atomic_load((unint64_t *)&v598);
  v63 = v620[1];
  if (v620[1] >= v621)
  {
    v65 = v620[1] - v620[0];
    if ((unint64_t)(v65 + 1) >> 61)
      goto LABEL_706;
    v66 = ((char *)v621 - (char *)v620[0]) >> 2;
    if (v66 <= v65 + 1)
      v66 = v65 + 1;
    if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    *(_QWORD *)&valuePtr[32] = v622;
    if (v67)
      v68 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v67);
    else
      v68 = 0;
    v69 = (void **)&v68[8 * v65];
    v70 = (void **)&v68[8 * v67];
    *(_QWORD *)&valuePtr[24] = v70;
    *v69 = v62;
    v64 = v69 + 1;
    *(_QWORD *)&valuePtr[16] = v69 + 1;
    v71 = v620[1];
    v72 = v620[0];
    if (v620[1] == v620[0])
    {
      v74 = vdupq_n_s64((unint64_t)v620[1]);
    }
    else
    {
      do
      {
        v73 = *--v71;
        *--v69 = v73;
      }
      while (v71 != v72);
      v74 = *(int64x2_t *)v620;
      v64 = *(void ***)&valuePtr[16];
      v70 = *(void ***)&valuePtr[24];
    }
    v620[0] = v69;
    v620[1] = v64;
    *(int64x2_t *)&valuePtr[8] = v74;
    v75 = v621;
    v621 = v70;
    *(_QWORD *)&valuePtr[24] = v75;
    *(_QWORD *)valuePtr = v74.i64[0];
    std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
  }
  else
  {
    *v620[1] = v62;
    v64 = v63 + 1;
  }
  v620[1] = v64;
LABEL_86:
  if (!atomic_load((unint64_t *)this + 20))
    goto LABEL_557;
  v77 = (void *)atomic_load((unint64_t *)this + 20);
  v78 = v77;
  if (v78)
  {
    v79 = v78;
    v80 = (void *)CFDictionaryGetValue(v78, CFSTR("NSCTFontOpticalSizeAttribute"));

    if (v80)
    {
      v81 = keys[1];
      if (keys[1] >= v625)
      {
        v83 = keys[1] - keys[0];
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_706;
        v84 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v84 <= v83 + 1)
          v84 = v83 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v85 = v84;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v85)
          v86 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v85);
        else
          v86 = 0;
        v87 = (void **)&v86[8 * v83];
        v88 = (void **)&v86[8 * v85];
        *(_QWORD *)&valuePtr[24] = v88;
        *v87 = CFSTR("NSCTFontOpticalSizeAttribute");
        v82 = v87 + 1;
        *(_QWORD *)&valuePtr[16] = v87 + 1;
        v89 = keys[1];
        v90 = keys[0];
        if (keys[1] == keys[0])
        {
          v92 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v91 = *--v89;
            *--v87 = v91;
          }
          while (v89 != v90);
          v92 = *(int64x2_t *)keys;
          v82 = *(void ***)&valuePtr[16];
          v88 = *(void ***)&valuePtr[24];
        }
        keys[0] = v87;
        keys[1] = v82;
        *(int64x2_t *)&valuePtr[8] = v92;
        v93 = v625;
        v625 = v88;
        *(_QWORD *)&valuePtr[24] = v93;
        *(_QWORD *)valuePtr = v92.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontOpticalSizeAttribute");
        v82 = v81 + 1;
      }
      keys[1] = v82;
      v94 = v620[1];
      if (v620[1] >= v621)
      {
        v96 = v620[1] - v620[0];
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_706;
        v97 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v97 <= v96 + 1)
          v97 = v96 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v98)
          v99 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v98);
        else
          v99 = 0;
        v100 = (void **)&v99[8 * v96];
        v101 = (void **)&v99[8 * v98];
        *(_QWORD *)&valuePtr[24] = v101;
        *v100 = v80;
        v95 = v100 + 1;
        *(_QWORD *)&valuePtr[16] = v100 + 1;
        v102 = v620[1];
        v103 = v620[0];
        if (v620[1] == v620[0])
        {
          v105 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v104 = *--v102;
            *--v100 = v104;
          }
          while (v102 != v103);
          v105 = *(int64x2_t *)v620;
          v95 = *(void ***)&valuePtr[16];
          v101 = *(void ***)&valuePtr[24];
        }
        v620[0] = v100;
        v620[1] = v95;
        *(int64x2_t *)&valuePtr[8] = v105;
        v106 = v621;
        v621 = v101;
        *(_QWORD *)&valuePtr[24] = v106;
        *(_QWORD *)valuePtr = v105.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v80;
        v95 = v94 + 1;
      }
      v620[1] = v95;
    }
  }
  else
  {

  }
  v107 = (void *)atomic_load((unint64_t *)this + 20);
  v108 = v107;
  if (v108)
  {
    v109 = v108;
    v110 = (void *)CFDictionaryGetValue(v108, CFSTR("NSCTFontTrackAttribute"));

    if (v110)
    {
      v111 = keys[1];
      if (keys[1] >= v625)
      {
        v113 = keys[1] - keys[0];
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_706;
        v114 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v114 <= v113 + 1)
          v114 = v113 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v115)
          v116 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v115);
        else
          v116 = 0;
        v117 = (void **)&v116[8 * v113];
        v118 = (void **)&v116[8 * v115];
        *(_QWORD *)&valuePtr[24] = v118;
        *v117 = CFSTR("NSCTFontTrackAttribute");
        v112 = v117 + 1;
        *(_QWORD *)&valuePtr[16] = v117 + 1;
        v119 = keys[1];
        v120 = keys[0];
        if (keys[1] == keys[0])
        {
          v122 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v121 = *--v119;
            *--v117 = v121;
          }
          while (v119 != v120);
          v122 = *(int64x2_t *)keys;
          v112 = *(void ***)&valuePtr[16];
          v118 = *(void ***)&valuePtr[24];
        }
        keys[0] = v117;
        keys[1] = v112;
        *(int64x2_t *)&valuePtr[8] = v122;
        v123 = v625;
        v625 = v118;
        *(_QWORD *)&valuePtr[24] = v123;
        *(_QWORD *)valuePtr = v122.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontTrackAttribute");
        v112 = v111 + 1;
      }
      keys[1] = v112;
      v124 = v620[1];
      if (v620[1] >= v621)
      {
        v126 = v620[1] - v620[0];
        if ((unint64_t)(v126 + 1) >> 61)
          goto LABEL_706;
        v127 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v127 <= v126 + 1)
          v127 = v126 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v128 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v128 = v127;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v128)
          v129 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v128);
        else
          v129 = 0;
        v130 = (void **)&v129[8 * v126];
        v131 = (void **)&v129[8 * v128];
        *(_QWORD *)&valuePtr[24] = v131;
        *v130 = v110;
        v125 = v130 + 1;
        *(_QWORD *)&valuePtr[16] = v130 + 1;
        v132 = v620[1];
        v133 = v620[0];
        if (v620[1] == v620[0])
        {
          v135 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v134 = *--v132;
            *--v130 = v134;
          }
          while (v132 != v133);
          v135 = *(int64x2_t *)v620;
          v125 = *(void ***)&valuePtr[16];
          v131 = *(void ***)&valuePtr[24];
        }
        v620[0] = v130;
        v620[1] = v125;
        *(int64x2_t *)&valuePtr[8] = v135;
        v136 = v621;
        v621 = v131;
        *(_QWORD *)&valuePtr[24] = v136;
        *(_QWORD *)valuePtr = v135.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v110;
        v125 = v124 + 1;
      }
      v620[1] = v125;
    }
  }
  else
  {

  }
  v137 = (void *)atomic_load((unint64_t *)this + 20);
  v138 = v137;
  if (v138)
  {
    v139 = v138;
    v140 = (void *)CFDictionaryGetValue(v138, CFSTR("NSCTFontUnscaledTrackingAttribute"));

    if (v140)
    {
      v141 = keys[1];
      if (keys[1] >= v625)
      {
        v143 = keys[1] - keys[0];
        if ((unint64_t)(v143 + 1) >> 61)
          goto LABEL_706;
        v144 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v144 <= v143 + 1)
          v144 = v143 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v145 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v145 = v144;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v145)
          v146 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v145);
        else
          v146 = 0;
        v147 = (void **)&v146[8 * v143];
        v148 = (void **)&v146[8 * v145];
        *(_QWORD *)&valuePtr[24] = v148;
        *v147 = CFSTR("NSCTFontUnscaledTrackingAttribute");
        v142 = v147 + 1;
        *(_QWORD *)&valuePtr[16] = v147 + 1;
        v149 = keys[1];
        v150 = keys[0];
        if (keys[1] == keys[0])
        {
          v152 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v151 = *--v149;
            *--v147 = v151;
          }
          while (v149 != v150);
          v152 = *(int64x2_t *)keys;
          v142 = *(void ***)&valuePtr[16];
          v148 = *(void ***)&valuePtr[24];
        }
        keys[0] = v147;
        keys[1] = v142;
        *(int64x2_t *)&valuePtr[8] = v152;
        v153 = v625;
        v625 = v148;
        *(_QWORD *)&valuePtr[24] = v153;
        *(_QWORD *)valuePtr = v152.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontUnscaledTrackingAttribute");
        v142 = v141 + 1;
      }
      keys[1] = v142;
      v154 = v620[1];
      if (v620[1] >= v621)
      {
        v156 = v620[1] - v620[0];
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_706;
        v157 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v157 <= v156 + 1)
          v157 = v156 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v158 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v158 = v157;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v158)
          v159 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v158);
        else
          v159 = 0;
        v160 = (void **)&v159[8 * v156];
        v161 = (void **)&v159[8 * v158];
        *(_QWORD *)&valuePtr[24] = v161;
        *v160 = v140;
        v155 = v160 + 1;
        *(_QWORD *)&valuePtr[16] = v160 + 1;
        v162 = v620[1];
        v163 = v620[0];
        if (v620[1] == v620[0])
        {
          v165 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v164 = *--v162;
            *--v160 = v164;
          }
          while (v162 != v163);
          v165 = *(int64x2_t *)v620;
          v155 = *(void ***)&valuePtr[16];
          v161 = *(void ***)&valuePtr[24];
        }
        v620[0] = v160;
        v620[1] = v155;
        *(int64x2_t *)&valuePtr[8] = v165;
        v166 = v621;
        v621 = v161;
        *(_QWORD *)&valuePtr[24] = v166;
        *(_QWORD *)valuePtr = v165.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v140;
        v155 = v154 + 1;
      }
      v620[1] = v155;
    }
  }
  else
  {

  }
  v167 = (void *)atomic_load((unint64_t *)this + 20);
  v168 = v167;
  if (v168)
  {
    v169 = v168;
    v170 = (void *)CFDictionaryGetValue(v168, CFSTR("NSCTFontFeatureSettingsAttribute"));

    if (v170)
    {
      v171 = keys[1];
      if (keys[1] >= v625)
      {
        v173 = keys[1] - keys[0];
        if ((unint64_t)(v173 + 1) >> 61)
          goto LABEL_706;
        v174 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v174 <= v173 + 1)
          v174 = v173 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v175 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v175 = v174;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v175)
          v176 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v175);
        else
          v176 = 0;
        v177 = (void **)&v176[8 * v173];
        v178 = (void **)&v176[8 * v175];
        *(_QWORD *)&valuePtr[24] = v178;
        *v177 = CFSTR("NSCTFontFeatureSettingsAttribute");
        v172 = v177 + 1;
        *(_QWORD *)&valuePtr[16] = v177 + 1;
        v179 = keys[1];
        v180 = keys[0];
        if (keys[1] == keys[0])
        {
          v182 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v181 = *--v179;
            *--v177 = v181;
          }
          while (v179 != v180);
          v182 = *(int64x2_t *)keys;
          v172 = *(void ***)&valuePtr[16];
          v178 = *(void ***)&valuePtr[24];
        }
        keys[0] = v177;
        keys[1] = v172;
        *(int64x2_t *)&valuePtr[8] = v182;
        v183 = v625;
        v625 = v178;
        *(_QWORD *)&valuePtr[24] = v183;
        *(_QWORD *)valuePtr = v182.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontFeatureSettingsAttribute");
        v172 = v171 + 1;
      }
      keys[1] = v172;
      v184 = v620[1];
      if (v620[1] >= v621)
      {
        v186 = v620[1] - v620[0];
        if ((unint64_t)(v186 + 1) >> 61)
          goto LABEL_706;
        v187 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v187 <= v186 + 1)
          v187 = v186 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v188 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v188 = v187;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v188)
          v189 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v188);
        else
          v189 = 0;
        v190 = (void **)&v189[8 * v186];
        v191 = (void **)&v189[8 * v188];
        *(_QWORD *)&valuePtr[24] = v191;
        *v190 = v170;
        v185 = v190 + 1;
        *(_QWORD *)&valuePtr[16] = v190 + 1;
        v192 = v620[1];
        v193 = v620[0];
        if (v620[1] == v620[0])
        {
          v195 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v194 = *--v192;
            *--v190 = v194;
          }
          while (v192 != v193);
          v195 = *(int64x2_t *)v620;
          v185 = *(void ***)&valuePtr[16];
          v191 = *(void ***)&valuePtr[24];
        }
        v620[0] = v190;
        v620[1] = v185;
        *(int64x2_t *)&valuePtr[8] = v195;
        v196 = v621;
        v621 = v191;
        *(_QWORD *)&valuePtr[24] = v196;
        *(_QWORD *)valuePtr = v195.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v170;
        v185 = v184 + 1;
      }
      v620[1] = v185;
      if (!a2)
        goto LABEL_269;
      goto LABEL_233;
    }
  }
  else
  {

  }
  if (!a2)
    goto LABEL_269;
LABEL_233:
  v197 = (void *)atomic_load((unint64_t *)this + 20);
  v198 = v197;
  if (v198)
  {
    v199 = v198;
    v200 = (void *)CFDictionaryGetValue(v198, CFSTR("CTFontOriginalFeatureSettingsAttribute"));

    if (v200)
    {
      v201 = keys[1];
      if (keys[1] >= v625)
      {
        v203 = keys[1] - keys[0];
        if ((unint64_t)(v203 + 1) >> 61)
          goto LABEL_706;
        v204 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v204 <= v203 + 1)
          v204 = v203 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v205 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v205 = v204;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v205)
          v206 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v205);
        else
          v206 = 0;
        v207 = (void **)&v206[8 * v203];
        v208 = (void **)&v206[8 * v205];
        *(_QWORD *)&valuePtr[24] = v208;
        *v207 = CFSTR("CTFontOriginalFeatureSettingsAttribute");
        v202 = v207 + 1;
        *(_QWORD *)&valuePtr[16] = v207 + 1;
        v209 = keys[1];
        v210 = keys[0];
        if (keys[1] == keys[0])
        {
          v212 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v211 = *--v209;
            *--v207 = v211;
          }
          while (v209 != v210);
          v212 = *(int64x2_t *)keys;
          v202 = *(void ***)&valuePtr[16];
          v208 = *(void ***)&valuePtr[24];
        }
        keys[0] = v207;
        keys[1] = v202;
        *(int64x2_t *)&valuePtr[8] = v212;
        v213 = v625;
        v625 = v208;
        *(_QWORD *)&valuePtr[24] = v213;
        *(_QWORD *)valuePtr = v212.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("CTFontOriginalFeatureSettingsAttribute");
        v202 = v201 + 1;
      }
      keys[1] = v202;
      v214 = v620[1];
      if (v620[1] >= v621)
      {
        v216 = v620[1] - v620[0];
        if ((unint64_t)(v216 + 1) >> 61)
          goto LABEL_706;
        v217 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v217 <= v216 + 1)
          v217 = v216 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v218)
          v219 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v218);
        else
          v219 = 0;
        v220 = (void **)&v219[8 * v216];
        v221 = (void **)&v219[8 * v218];
        *(_QWORD *)&valuePtr[24] = v221;
        *v220 = v200;
        v215 = v220 + 1;
        *(_QWORD *)&valuePtr[16] = v220 + 1;
        v222 = v620[1];
        v223 = v620[0];
        if (v620[1] == v620[0])
        {
          v225 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v224 = *--v222;
            *--v220 = v224;
          }
          while (v222 != v223);
          v225 = *(int64x2_t *)v620;
          v215 = *(void ***)&valuePtr[16];
          v221 = *(void ***)&valuePtr[24];
        }
        v620[0] = v220;
        v620[1] = v215;
        *(int64x2_t *)&valuePtr[8] = v225;
        v226 = v621;
        v621 = v221;
        *(_QWORD *)&valuePtr[24] = v226;
        *(_QWORD *)valuePtr = v225.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v200;
        v215 = v214 + 1;
      }
      v620[1] = v215;
    }
  }
  else
  {

  }
LABEL_269:
  v227 = (void *)atomic_load((unint64_t *)this + 20);
  v228 = v227;
  if (v228)
  {
    v229 = v228;
    v230 = (void *)CFDictionaryGetValue(v228, CFSTR("NSCTFontCascadeListAttribute"));

    if (v230)
    {
      v231 = keys[1];
      if (keys[1] >= v625)
      {
        v233 = keys[1] - keys[0];
        if ((unint64_t)(v233 + 1) >> 61)
          goto LABEL_706;
        v234 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v234 <= v233 + 1)
          v234 = v233 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v235 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v235)
          v236 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v235);
        else
          v236 = 0;
        v237 = (void **)&v236[8 * v233];
        v238 = (void **)&v236[8 * v235];
        *(_QWORD *)&valuePtr[24] = v238;
        *v237 = CFSTR("NSCTFontCascadeListAttribute");
        v232 = v237 + 1;
        *(_QWORD *)&valuePtr[16] = v237 + 1;
        v239 = keys[1];
        v240 = keys[0];
        if (keys[1] == keys[0])
        {
          v242 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v241 = *--v239;
            *--v237 = v241;
          }
          while (v239 != v240);
          v242 = *(int64x2_t *)keys;
          v232 = *(void ***)&valuePtr[16];
          v238 = *(void ***)&valuePtr[24];
        }
        keys[0] = v237;
        keys[1] = v232;
        *(int64x2_t *)&valuePtr[8] = v242;
        v243 = v625;
        v625 = v238;
        *(_QWORD *)&valuePtr[24] = v243;
        *(_QWORD *)valuePtr = v242.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontCascadeListAttribute");
        v232 = v231 + 1;
      }
      keys[1] = v232;
      v244 = v620[1];
      if (v620[1] >= v621)
      {
        v246 = v620[1] - v620[0];
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_706;
        v247 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v247 <= v246 + 1)
          v247 = v246 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v248 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v248 = v247;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v248)
          v249 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v248);
        else
          v249 = 0;
        v250 = (void **)&v249[8 * v246];
        v251 = (void **)&v249[8 * v248];
        *(_QWORD *)&valuePtr[24] = v251;
        *v250 = v230;
        v245 = v250 + 1;
        *(_QWORD *)&valuePtr[16] = v250 + 1;
        v252 = v620[1];
        v253 = v620[0];
        if (v620[1] == v620[0])
        {
          v255 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v254 = *--v252;
            *--v250 = v254;
          }
          while (v252 != v253);
          v255 = *(int64x2_t *)v620;
          v245 = *(void ***)&valuePtr[16];
          v251 = *(void ***)&valuePtr[24];
        }
        v620[0] = v250;
        v620[1] = v245;
        *(int64x2_t *)&valuePtr[8] = v255;
        v256 = v621;
        v621 = v251;
        *(_QWORD *)&valuePtr[24] = v256;
        *(_QWORD *)valuePtr = v255.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v230;
        v245 = v244 + 1;
      }
      v620[1] = v245;
    }
  }
  else
  {

  }
  v257 = (void *)atomic_load((unint64_t *)this + 20);
  v258 = v257;
  if (v258)
  {
    v259 = v258;
    v260 = (void *)CFDictionaryGetValue(v258, CFSTR("CTFontDescriptorLanguageAttribute"));

    if (v260)
    {
      v261 = keys[1];
      if (keys[1] >= v625)
      {
        v263 = keys[1] - keys[0];
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_706;
        v264 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v264 <= v263 + 1)
          v264 = v263 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v265)
          v266 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v265);
        else
          v266 = 0;
        v267 = (void **)&v266[8 * v263];
        v268 = (void **)&v266[8 * v265];
        *(_QWORD *)&valuePtr[24] = v268;
        *v267 = CFSTR("CTFontDescriptorLanguageAttribute");
        v262 = v267 + 1;
        *(_QWORD *)&valuePtr[16] = v267 + 1;
        v269 = keys[1];
        v270 = keys[0];
        if (keys[1] == keys[0])
        {
          v272 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v271 = *--v269;
            *--v267 = v271;
          }
          while (v269 != v270);
          v272 = *(int64x2_t *)keys;
          v262 = *(void ***)&valuePtr[16];
          v268 = *(void ***)&valuePtr[24];
        }
        keys[0] = v267;
        keys[1] = v262;
        *(int64x2_t *)&valuePtr[8] = v272;
        v273 = v625;
        v625 = v268;
        *(_QWORD *)&valuePtr[24] = v273;
        *(_QWORD *)valuePtr = v272.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("CTFontDescriptorLanguageAttribute");
        v262 = v261 + 1;
      }
      keys[1] = v262;
      v274 = v620[1];
      if (v620[1] >= v621)
      {
        v276 = v620[1] - v620[0];
        if ((unint64_t)(v276 + 1) >> 61)
          goto LABEL_706;
        v277 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v277 <= v276 + 1)
          v277 = v276 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v278 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v278 = v277;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v278)
          v279 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v278);
        else
          v279 = 0;
        v280 = (void **)&v279[8 * v276];
        v281 = (void **)&v279[8 * v278];
        *(_QWORD *)&valuePtr[24] = v281;
        *v280 = v260;
        v275 = v280 + 1;
        *(_QWORD *)&valuePtr[16] = v280 + 1;
        v282 = v620[1];
        v283 = v620[0];
        if (v620[1] == v620[0])
        {
          v285 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v284 = *--v282;
            *--v280 = v284;
          }
          while (v282 != v283);
          v285 = *(int64x2_t *)v620;
          v275 = *(void ***)&valuePtr[16];
          v281 = *(void ***)&valuePtr[24];
        }
        v620[0] = v280;
        v620[1] = v275;
        *(int64x2_t *)&valuePtr[8] = v285;
        v286 = v621;
        v621 = v281;
        *(_QWORD *)&valuePtr[24] = v286;
        *(_QWORD *)valuePtr = v285.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v260;
        v275 = v274 + 1;
      }
      v620[1] = v275;
    }
  }
  else
  {

  }
  v287 = (void *)atomic_load((unint64_t *)this + 20);
  v288 = v287;
  if (v288)
  {
    v289 = v288;
    v290 = (void *)CFDictionaryGetValue(v288, CFSTR("NSCTFontBaselineAdjustAttribute"));

    if (v290)
    {
      v291 = keys[1];
      if (keys[1] >= v625)
      {
        v293 = keys[1] - keys[0];
        if ((unint64_t)(v293 + 1) >> 61)
          goto LABEL_706;
        v294 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v294 <= v293 + 1)
          v294 = v293 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v295)
          v296 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v295);
        else
          v296 = 0;
        v297 = (void **)&v296[8 * v293];
        v298 = (void **)&v296[8 * v295];
        *(_QWORD *)&valuePtr[24] = v298;
        *v297 = CFSTR("NSCTFontBaselineAdjustAttribute");
        v292 = v297 + 1;
        *(_QWORD *)&valuePtr[16] = v297 + 1;
        v299 = keys[1];
        v300 = keys[0];
        if (keys[1] == keys[0])
        {
          v302 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v301 = *--v299;
            *--v297 = v301;
          }
          while (v299 != v300);
          v302 = *(int64x2_t *)keys;
          v292 = *(void ***)&valuePtr[16];
          v298 = *(void ***)&valuePtr[24];
        }
        keys[0] = v297;
        keys[1] = v292;
        *(int64x2_t *)&valuePtr[8] = v302;
        v303 = v625;
        v625 = v298;
        *(_QWORD *)&valuePtr[24] = v303;
        *(_QWORD *)valuePtr = v302.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontBaselineAdjustAttribute");
        v292 = v291 + 1;
      }
      keys[1] = v292;
      v304 = v620[1];
      if (v620[1] >= v621)
      {
        v306 = v620[1] - v620[0];
        if ((unint64_t)(v306 + 1) >> 61)
          goto LABEL_706;
        v307 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v307 <= v306 + 1)
          v307 = v306 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v307;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v308)
          v309 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v308);
        else
          v309 = 0;
        v310 = (void **)&v309[8 * v306];
        v311 = (void **)&v309[8 * v308];
        *(_QWORD *)&valuePtr[24] = v311;
        *v310 = v290;
        v305 = v310 + 1;
        *(_QWORD *)&valuePtr[16] = v310 + 1;
        v312 = v620[1];
        v313 = v620[0];
        if (v620[1] == v620[0])
        {
          v315 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v314 = *--v312;
            *--v310 = v314;
          }
          while (v312 != v313);
          v315 = *(int64x2_t *)v620;
          v305 = *(void ***)&valuePtr[16];
          v311 = *(void ***)&valuePtr[24];
        }
        v620[0] = v310;
        v620[1] = v305;
        *(int64x2_t *)&valuePtr[8] = v315;
        v316 = v621;
        v621 = v311;
        *(_QWORD *)&valuePtr[24] = v316;
        *(_QWORD *)valuePtr = v315.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v290;
        v305 = v304 + 1;
      }
      v620[1] = v305;
    }
  }
  else
  {

  }
  v317 = (void *)atomic_load((unint64_t *)this + 20);
  v318 = v317;
  if (v318)
  {
    v319 = v318;
    v320 = (void *)CFDictionaryGetValue(v318, CFSTR("NSCTFontFixedAdvanceAttribute"));

    if (v320)
    {
      v321 = keys[1];
      if (keys[1] >= v625)
      {
        v323 = keys[1] - keys[0];
        if ((unint64_t)(v323 + 1) >> 61)
          goto LABEL_706;
        v324 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v324 <= v323 + 1)
          v324 = v323 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v325 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v325 = v324;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v325)
          v326 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v325);
        else
          v326 = 0;
        v327 = (void **)&v326[8 * v323];
        v328 = (void **)&v326[8 * v325];
        *(_QWORD *)&valuePtr[24] = v328;
        *v327 = CFSTR("NSCTFontFixedAdvanceAttribute");
        v322 = v327 + 1;
        *(_QWORD *)&valuePtr[16] = v327 + 1;
        v329 = keys[1];
        v330 = keys[0];
        if (keys[1] == keys[0])
        {
          v332 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v331 = *--v329;
            *--v327 = v331;
          }
          while (v329 != v330);
          v332 = *(int64x2_t *)keys;
          v322 = *(void ***)&valuePtr[16];
          v328 = *(void ***)&valuePtr[24];
        }
        keys[0] = v327;
        keys[1] = v322;
        *(int64x2_t *)&valuePtr[8] = v332;
        v333 = v625;
        v625 = v328;
        *(_QWORD *)&valuePtr[24] = v333;
        *(_QWORD *)valuePtr = v332.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontFixedAdvanceAttribute");
        v322 = v321 + 1;
      }
      keys[1] = v322;
      v334 = v620[1];
      if (v620[1] >= v621)
      {
        v336 = v620[1] - v620[0];
        if ((unint64_t)(v336 + 1) >> 61)
          goto LABEL_706;
        v337 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v337 <= v336 + 1)
          v337 = v336 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v338 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v338 = v337;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v338)
          v339 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v338);
        else
          v339 = 0;
        v340 = (void **)&v339[8 * v336];
        v341 = (void **)&v339[8 * v338];
        *(_QWORD *)&valuePtr[24] = v341;
        *v340 = v320;
        v335 = v340 + 1;
        *(_QWORD *)&valuePtr[16] = v340 + 1;
        v342 = v620[1];
        v343 = v620[0];
        if (v620[1] == v620[0])
        {
          v345 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v344 = *--v342;
            *--v340 = v344;
          }
          while (v342 != v343);
          v345 = *(int64x2_t *)v620;
          v335 = *(void ***)&valuePtr[16];
          v341 = *(void ***)&valuePtr[24];
        }
        v620[0] = v340;
        v620[1] = v335;
        *(int64x2_t *)&valuePtr[8] = v345;
        v346 = v621;
        v621 = v341;
        *(_QWORD *)&valuePtr[24] = v346;
        *(_QWORD *)valuePtr = v345.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v320;
        v335 = v334 + 1;
      }
      v620[1] = v335;
    }
  }
  else
  {

  }
  v347 = (void *)atomic_load((unint64_t *)this + 20);
  v348 = v347;
  if (v348)
  {
    v349 = v348;
    v350 = (void *)CFDictionaryGetValue(v348, CFSTR("CTFontPaletteAttribute"));

    if (v350)
    {
      v351 = keys[1];
      if (keys[1] >= v625)
      {
        v353 = keys[1] - keys[0];
        if ((unint64_t)(v353 + 1) >> 61)
          goto LABEL_706;
        v354 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v354 <= v353 + 1)
          v354 = v353 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v355 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v355 = v354;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v355)
          v356 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v355);
        else
          v356 = 0;
        v357 = (void **)&v356[8 * v353];
        v358 = (void **)&v356[8 * v355];
        *(_QWORD *)&valuePtr[24] = v358;
        *v357 = CFSTR("CTFontPaletteAttribute");
        v352 = v357 + 1;
        *(_QWORD *)&valuePtr[16] = v357 + 1;
        v359 = keys[1];
        v360 = keys[0];
        if (keys[1] == keys[0])
        {
          v362 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v361 = *--v359;
            *--v357 = v361;
          }
          while (v359 != v360);
          v362 = *(int64x2_t *)keys;
          v352 = *(void ***)&valuePtr[16];
          v358 = *(void ***)&valuePtr[24];
        }
        keys[0] = v357;
        keys[1] = v352;
        *(int64x2_t *)&valuePtr[8] = v362;
        v363 = v625;
        v625 = v358;
        *(_QWORD *)&valuePtr[24] = v363;
        *(_QWORD *)valuePtr = v362.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("CTFontPaletteAttribute");
        v352 = v351 + 1;
      }
      keys[1] = v352;
      v364 = v620[1];
      if (v620[1] >= v621)
      {
        v366 = v620[1] - v620[0];
        if ((unint64_t)(v366 + 1) >> 61)
          goto LABEL_706;
        v367 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v367 <= v366 + 1)
          v367 = v366 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v368 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v368 = v367;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v368)
          v369 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v368);
        else
          v369 = 0;
        v370 = (void **)&v369[8 * v366];
        v371 = (void **)&v369[8 * v368];
        *(_QWORD *)&valuePtr[24] = v371;
        *v370 = v350;
        v365 = v370 + 1;
        *(_QWORD *)&valuePtr[16] = v370 + 1;
        v372 = v620[1];
        v373 = v620[0];
        if (v620[1] == v620[0])
        {
          v375 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v374 = *--v372;
            *--v370 = v374;
          }
          while (v372 != v373);
          v375 = *(int64x2_t *)v620;
          v365 = *(void ***)&valuePtr[16];
          v371 = *(void ***)&valuePtr[24];
        }
        v620[0] = v370;
        v620[1] = v365;
        *(int64x2_t *)&valuePtr[8] = v375;
        v376 = v621;
        v621 = v371;
        *(_QWORD *)&valuePtr[24] = v376;
        *(_QWORD *)valuePtr = v375.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v350;
        v365 = v364 + 1;
      }
      v620[1] = v365;
    }
  }
  else
  {

  }
  v377 = (void *)atomic_load((unint64_t *)this + 20);
  v378 = v377;
  if (v378)
  {
    v379 = v378;
    v380 = (void *)CFDictionaryGetValue(v378, CFSTR("CTFontPaletteColorsAttribute"));

    if (v380)
    {
      v381 = keys[1];
      if (keys[1] >= v625)
      {
        v383 = keys[1] - keys[0];
        if ((unint64_t)(v383 + 1) >> 61)
          goto LABEL_706;
        v384 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v384 <= v383 + 1)
          v384 = v383 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v385 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v385 = v384;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v385)
          v386 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v385);
        else
          v386 = 0;
        v387 = (void **)&v386[8 * v383];
        v388 = (void **)&v386[8 * v385];
        *(_QWORD *)&valuePtr[24] = v388;
        *v387 = CFSTR("CTFontPaletteColorsAttribute");
        v382 = v387 + 1;
        *(_QWORD *)&valuePtr[16] = v387 + 1;
        v389 = keys[1];
        v390 = keys[0];
        if (keys[1] == keys[0])
        {
          v392 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v391 = *--v389;
            *--v387 = v391;
          }
          while (v389 != v390);
          v392 = *(int64x2_t *)keys;
          v382 = *(void ***)&valuePtr[16];
          v388 = *(void ***)&valuePtr[24];
        }
        keys[0] = v387;
        keys[1] = v382;
        *(int64x2_t *)&valuePtr[8] = v392;
        v393 = v625;
        v625 = v388;
        *(_QWORD *)&valuePtr[24] = v393;
        *(_QWORD *)valuePtr = v392.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("CTFontPaletteColorsAttribute");
        v382 = v381 + 1;
      }
      keys[1] = v382;
      v394 = v620[1];
      if (v620[1] >= v621)
      {
        v396 = v620[1] - v620[0];
        if ((unint64_t)(v396 + 1) >> 61)
          goto LABEL_706;
        v397 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v397 <= v396 + 1)
          v397 = v396 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v398 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v398 = v397;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v398)
          v399 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v398);
        else
          v399 = 0;
        v400 = (void **)&v399[8 * v396];
        v401 = (void **)&v399[8 * v398];
        *(_QWORD *)&valuePtr[24] = v401;
        *v400 = v380;
        v395 = v400 + 1;
        *(_QWORD *)&valuePtr[16] = v400 + 1;
        v402 = v620[1];
        v403 = v620[0];
        if (v620[1] == v620[0])
        {
          v405 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v404 = *--v402;
            *--v400 = v404;
          }
          while (v402 != v403);
          v405 = *(int64x2_t *)v620;
          v395 = *(void ***)&valuePtr[16];
          v401 = *(void ***)&valuePtr[24];
        }
        v620[0] = v400;
        v620[1] = v395;
        *(int64x2_t *)&valuePtr[8] = v405;
        v406 = v621;
        v621 = v401;
        *(_QWORD *)&valuePtr[24] = v406;
        *(_QWORD *)valuePtr = v405.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v380;
        v395 = v394 + 1;
      }
      v620[1] = v395;
    }
  }
  else
  {

  }
  v407 = (void *)atomic_load((unint64_t *)this + 20);
  v408 = v407;
  if (v408)
  {
    v409 = v408;
    v410 = (void *)CFDictionaryGetValue(v408, CFSTR("NSCTFontVariationAttribute"));

    if (v410)
    {
      v411 = keys[1];
      if (keys[1] >= v625)
      {
        v413 = keys[1] - keys[0];
        if ((unint64_t)(v413 + 1) >> 61)
          goto LABEL_706;
        v414 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v414 <= v413 + 1)
          v414 = v413 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v415 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v415 = v414;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v415)
          v416 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v415);
        else
          v416 = 0;
        v417 = (void **)&v416[8 * v413];
        v418 = (void **)&v416[8 * v415];
        *(_QWORD *)&valuePtr[24] = v418;
        *v417 = CFSTR("NSCTFontVariationAttribute");
        v412 = v417 + 1;
        *(_QWORD *)&valuePtr[16] = v417 + 1;
        v419 = keys[1];
        v420 = keys[0];
        if (keys[1] == keys[0])
        {
          v422 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v421 = *--v419;
            *--v417 = v421;
          }
          while (v419 != v420);
          v422 = *(int64x2_t *)keys;
          v412 = *(void ***)&valuePtr[16];
          v418 = *(void ***)&valuePtr[24];
        }
        keys[0] = v417;
        keys[1] = v412;
        *(int64x2_t *)&valuePtr[8] = v422;
        v423 = v625;
        v625 = v418;
        *(_QWORD *)&valuePtr[24] = v423;
        *(_QWORD *)valuePtr = v422.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("NSCTFontVariationAttribute");
        v412 = v411 + 1;
      }
      keys[1] = v412;
      v424 = v620[1];
      if (v620[1] >= v621)
      {
        v426 = v620[1] - v620[0];
        if ((unint64_t)(v426 + 1) >> 61)
          goto LABEL_706;
        v427 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v427 <= v426 + 1)
          v427 = v426 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v428 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v428 = v427;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v428)
          v429 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v428);
        else
          v429 = 0;
        v430 = (void **)&v429[8 * v426];
        v431 = (void **)&v429[8 * v428];
        *(_QWORD *)&valuePtr[24] = v431;
        *v430 = v410;
        v425 = v430 + 1;
        *(_QWORD *)&valuePtr[16] = v430 + 1;
        v432 = v620[1];
        v433 = v620[0];
        if (v620[1] == v620[0])
        {
          v435 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v434 = *--v432;
            *--v430 = v434;
          }
          while (v432 != v433);
          v435 = *(int64x2_t *)v620;
          v425 = *(void ***)&valuePtr[16];
          v431 = *(void ***)&valuePtr[24];
        }
        v620[0] = v430;
        v620[1] = v425;
        *(int64x2_t *)&valuePtr[8] = v435;
        v436 = v621;
        v621 = v431;
        *(_QWORD *)&valuePtr[24] = v436;
        *(_QWORD *)valuePtr = v435.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v410;
        v425 = v424 + 1;
      }
      v620[1] = v425;
    }
  }
  else
  {

  }
  v437 = (void *)atomic_load((unint64_t *)this + 20);
  v438 = v437;
  if (v438)
  {
    v439 = v438;
    v440 = (void *)CFDictionaryGetValue(v438, CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute"));

    if (v440)
    {
      v441 = keys[1];
      if (keys[1] >= v625)
      {
        v443 = keys[1] - keys[0];
        if ((unint64_t)(v443 + 1) >> 61)
          goto LABEL_706;
        v444 = ((char *)v625 - (char *)keys[0]) >> 2;
        if (v444 <= v443 + 1)
          v444 = v443 + 1;
        if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
          v445 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v445 = v444;
        *(_QWORD *)&valuePtr[32] = v626;
        if (v445)
          v446 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v445);
        else
          v446 = 0;
        v447 = (void **)&v446[8 * v443];
        v448 = (void **)&v446[8 * v445];
        *(_QWORD *)&valuePtr[24] = v448;
        *v447 = CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute");
        v442 = v447 + 1;
        *(_QWORD *)&valuePtr[16] = v447 + 1;
        v449 = keys[1];
        v450 = keys[0];
        if (keys[1] == keys[0])
        {
          v452 = vdupq_n_s64((unint64_t)keys[1]);
        }
        else
        {
          do
          {
            v451 = *--v449;
            *--v447 = v451;
          }
          while (v449 != v450);
          v452 = *(int64x2_t *)keys;
          v442 = *(void ***)&valuePtr[16];
          v448 = *(void ***)&valuePtr[24];
        }
        keys[0] = v447;
        keys[1] = v442;
        *(int64x2_t *)&valuePtr[8] = v452;
        v453 = v625;
        v625 = v448;
        *(_QWORD *)&valuePtr[24] = v453;
        *(_QWORD *)valuePtr = v452.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *keys[1] = CFSTR("CTFontEmojiMLUpscalingTimeoutAttribute");
        v442 = v441 + 1;
      }
      keys[1] = v442;
      v454 = v620[1];
      if (v620[1] >= v621)
      {
        v456 = v620[1] - v620[0];
        if ((unint64_t)(v456 + 1) >> 61)
          goto LABEL_706;
        v457 = ((char *)v621 - (char *)v620[0]) >> 2;
        if (v457 <= v456 + 1)
          v457 = v456 + 1;
        if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
          v458 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v458 = v457;
        *(_QWORD *)&valuePtr[32] = v622;
        if (v458)
          v459 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v458);
        else
          v459 = 0;
        v460 = (void **)&v459[8 * v456];
        v461 = (void **)&v459[8 * v458];
        *(_QWORD *)&valuePtr[24] = v461;
        *v460 = v440;
        v455 = v460 + 1;
        *(_QWORD *)&valuePtr[16] = v460 + 1;
        v462 = v620[1];
        v463 = v620[0];
        if (v620[1] == v620[0])
        {
          v465 = vdupq_n_s64((unint64_t)v620[1]);
        }
        else
        {
          do
          {
            v464 = *--v462;
            *--v460 = v464;
          }
          while (v462 != v463);
          v465 = *(int64x2_t *)v620;
          v455 = *(void ***)&valuePtr[16];
          v461 = *(void ***)&valuePtr[24];
        }
        v620[0] = v460;
        v620[1] = v455;
        *(int64x2_t *)&valuePtr[8] = v465;
        v466 = v621;
        v621 = v461;
        *(_QWORD *)&valuePtr[24] = v466;
        *(_QWORD *)valuePtr = v465.i64[0];
        std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      }
      else
      {
        *v620[1] = v440;
        v455 = v454 + 1;
      }
      v620[1] = v455;
    }
  }
  else
  {

  }
LABEL_557:
  v467 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 1) != 0)
  {
    *(_DWORD *)valuePtr = 2;
    v468 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, valuePtr);
    v469 = keys[1];
    if (keys[1] >= v625)
    {
      v471 = keys[1] - keys[0];
      if ((unint64_t)(v471 + 1) >> 61)
        goto LABEL_706;
      v472 = ((char *)v625 - (char *)keys[0]) >> 2;
      if (v472 <= v471 + 1)
        v472 = v471 + 1;
      if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
        v473 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v473 = v472;
      *(_QWORD *)&valuePtr[32] = v626;
      if (v473)
        v474 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v473);
      else
        v474 = 0;
      v475 = (void **)&v474[8 * v471];
      v476 = (void **)&v474[8 * v473];
      *(_QWORD *)&valuePtr[24] = v476;
      *v475 = CFSTR("NSCTFontOrientationAttribute");
      v470 = v475 + 1;
      *(_QWORD *)&valuePtr[16] = v475 + 1;
      v477 = keys[1];
      v478 = keys[0];
      if (keys[1] == keys[0])
      {
        v480 = vdupq_n_s64((unint64_t)keys[1]);
      }
      else
      {
        do
        {
          v479 = *--v477;
          *--v475 = v479;
        }
        while (v477 != v478);
        v480 = *(int64x2_t *)keys;
        v470 = *(void ***)&valuePtr[16];
        v476 = *(void ***)&valuePtr[24];
      }
      keys[0] = v475;
      keys[1] = v470;
      *(int64x2_t *)&valuePtr[8] = v480;
      v481 = v625;
      v625 = v476;
      *(_QWORD *)&valuePtr[24] = v481;
      *(_QWORD *)valuePtr = v480.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
    }
    else
    {
      *keys[1] = CFSTR("NSCTFontOrientationAttribute");
      v470 = v469 + 1;
    }
    keys[1] = v470;
    v482 = v620[1];
    if (v620[1] >= v621)
    {
      v484 = v620[1] - v620[0];
      if ((unint64_t)(v484 + 1) >> 61)
        goto LABEL_706;
      v485 = ((char *)v621 - (char *)v620[0]) >> 2;
      if (v485 <= v484 + 1)
        v485 = v484 + 1;
      if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
        v486 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v486 = v485;
      *(_QWORD *)&valuePtr[32] = v622;
      if (v486)
        v487 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v486);
      else
        v487 = 0;
      v488 = (void **)&v487[8 * v484];
      v489 = (void **)&v487[8 * v486];
      *(_QWORD *)&valuePtr[24] = v489;
      *v488 = v468;
      v483 = v488 + 1;
      *(_QWORD *)&valuePtr[16] = v488 + 1;
      v490 = v620[1];
      v491 = v620[0];
      if (v620[1] == v620[0])
      {
        v493 = vdupq_n_s64((unint64_t)v620[1]);
      }
      else
      {
        do
        {
          v492 = *--v490;
          *--v488 = v492;
        }
        while (v490 != v491);
        v493 = *(int64x2_t *)v620;
        v483 = *(void ***)&valuePtr[16];
        v489 = *(void ***)&valuePtr[24];
      }
      v620[0] = v488;
      v620[1] = v483;
      *(int64x2_t *)&valuePtr[8] = v493;
      v494 = v621;
      v621 = v489;
      *(_QWORD *)&valuePtr[24] = v494;
      *(_QWORD *)valuePtr = v493.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
    }
    else
    {
      *v620[1] = v468;
      v483 = v482 + 1;
    }
    v620[1] = v483;

    v467 = *(_DWORD *)this;
  }
  v495 = (v467 >> 6) & 7;
  if ((_DWORD)v495 != 3)
  {
    *(_QWORD *)valuePtr = v495;
    v496 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, valuePtr);
    v497 = keys[1];
    if (keys[1] >= v625)
    {
      v499 = keys[1] - keys[0];
      if ((unint64_t)(v499 + 1) >> 61)
        goto LABEL_706;
      v500 = ((char *)v625 - (char *)keys[0]) >> 2;
      if (v500 <= v499 + 1)
        v500 = v499 + 1;
      if ((unint64_t)((char *)v625 - (char *)keys[0]) >= 0x7FFFFFFFFFFFFFF8)
        v501 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v501 = v500;
      *(_QWORD *)&valuePtr[32] = v626;
      if (v501)
        v502 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v626, v501);
      else
        v502 = 0;
      v503 = (void **)&v502[8 * v499];
      v504 = (void **)&v502[8 * v501];
      *(_QWORD *)&valuePtr[24] = v504;
      *v503 = CFSTR("NSCTFontFallbackOptionAttribute");
      v498 = v503 + 1;
      *(_QWORD *)&valuePtr[16] = v503 + 1;
      v505 = keys[1];
      v506 = keys[0];
      if (keys[1] == keys[0])
      {
        v508 = vdupq_n_s64((unint64_t)keys[1]);
      }
      else
      {
        do
        {
          v507 = *--v505;
          *--v503 = v507;
        }
        while (v505 != v506);
        v508 = *(int64x2_t *)keys;
        v498 = *(void ***)&valuePtr[16];
        v504 = *(void ***)&valuePtr[24];
      }
      keys[0] = v503;
      keys[1] = v498;
      *(int64x2_t *)&valuePtr[8] = v508;
      v509 = v625;
      v625 = v504;
      *(_QWORD *)&valuePtr[24] = v509;
      *(_QWORD *)valuePtr = v508.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
    }
    else
    {
      *keys[1] = CFSTR("NSCTFontFallbackOptionAttribute");
      v498 = v497 + 1;
    }
    keys[1] = v498;
    v510 = v620[1];
    if (v620[1] < v621)
    {
      *v620[1] = v496;
      v511 = v510 + 1;
LABEL_624:
      v620[1] = v511;

      goto LABEL_625;
    }
    v512 = v620[1] - v620[0];
    if (!((unint64_t)(v512 + 1) >> 61))
    {
      v513 = ((char *)v621 - (char *)v620[0]) >> 2;
      if (v513 <= v512 + 1)
        v513 = v512 + 1;
      if ((unint64_t)((char *)v621 - (char *)v620[0]) >= 0x7FFFFFFFFFFFFFF8)
        v514 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v514 = v513;
      *(_QWORD *)&valuePtr[32] = v622;
      if (v514)
        v515 = (char *)TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>::allocate((uint64_t)v622, v514);
      else
        v515 = 0;
      v516 = (void **)&v515[8 * v512];
      v517 = (void **)&v515[8 * v514];
      *(_QWORD *)&valuePtr[24] = v517;
      *v516 = v496;
      v511 = v516 + 1;
      *(_QWORD *)&valuePtr[16] = v516 + 1;
      v518 = v620[1];
      v519 = v620[0];
      if (v620[1] == v620[0])
      {
        v521 = vdupq_n_s64((unint64_t)v620[1]);
      }
      else
      {
        do
        {
          v520 = *--v518;
          *--v516 = v520;
        }
        while (v518 != v519);
        v521 = *(int64x2_t *)v620;
        v511 = *(void ***)&valuePtr[16];
        v517 = *(void ***)&valuePtr[24];
      }
      v620[0] = v516;
      v620[1] = v511;
      *(int64x2_t *)&valuePtr[8] = v521;
      v522 = v621;
      v621 = v517;
      *(_QWORD *)&valuePtr[24] = v522;
      *(_QWORD *)valuePtr = v521.i64[0];
      std::__split_buffer<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul> &>::~__split_buffer((uint64_t)valuePtr);
      goto LABEL_624;
    }
LABEL_706:
    abort();
  }
LABEL_625:
  if (keys[0] == keys[1])
  {
    v525 = (void *)atomic_load((unint64_t *)this + 1);
    TCFRef<__CTFont const*>::Retain(a3, v525);
  }
  else
  {
    if ((void **)((char *)keys[1] - (char *)keys[0]) == (void **)8)
    {
      v523 = (void *)atomic_load((unint64_t *)this + 1);
      if (dispatch_get_specific((const void *)TDescriptorSource::DoNotCacheKey))
      {
        v524 = 0;
      }
      else
      {
        v526 = *v620[0];
        v527 = *keys[0];
        *(_QWORD *)&v528 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v528 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&valuePtr[16] = v528;
        *(_OWORD *)&valuePtr[32] = v528;
        *(_OWORD *)valuePtr = v528;
        v529 = 0;
        v530 = values;
        v531 = values + 1;
        v532 = values + 3;
        v596 = values + 1;
        while (1)
        {
          v533 = *v531;
          v534 = &v532[6 * (_QWORD)*v531];
          v535 = (const void *)atomic_load((unint64_t *)v534 + 2);
          v536 = (const void *)atomic_load((unint64_t *)&valuePtr[16]);
          if (v535 == v536 || (v535 ? (v537 = v536 == 0) : (v537 = 1), !v537 && CFEqual(v535, v536)))
          {
            v538 = (const void *)atomic_load((unint64_t *)&v532[6 * (_QWORD)v533 + 3]);
            v539 = (const void *)atomic_load((unint64_t *)&valuePtr[24]);
            if (v538 == v539 || (v538 ? (v540 = v539 == 0) : (v540 = 1), !v540 && CFEqual(v538, v539)))
            {
              v541 = (const void *)atomic_load((unint64_t *)&v532[6 * (_QWORD)v533 + 4]);
              v542 = (const void *)atomic_load((unint64_t *)&valuePtr[32]);
              if (v541 == v542)
                break;
              v543 = !v541 || v542 == 0;
              if (!v543 && CFEqual(v541, v542))
                break;
            }
          }
          if (v533 == v530[2])
          {
            v524 = 0;
            goto LABEL_657;
          }
          v531 = v534 + 1;
          v529 = v533;
        }
        v544 = *v596;
        if (v533 != *v596)
        {
          v532[6 * (_QWORD)v529 + 1] = v534[1];
          v545 = v530[2];
          if (v533 == v545)
          {
            v530[2] = v529;
            v545 = v529;
          }
          v534[1] = v544;
          *v596 = v533;
          v532[6 * (_QWORD)v545 + 1] = v533;
        }
        v524 = (void *)atomic_load((unint64_t *)&v532[6 * (_QWORD)v533 + 5]);
LABEL_657:
        *(_QWORD *)valuePtr = &off_1E15DEC08;

      }
      TCFRef<__CTFont const*>::Retain(a3, v524);
    }
    if (!atomic_load(a3))
    {
      v547 = v597;
      if (v547)
      {
        v548 = v547;
        Count = CFDictionaryGetCount(v547);

        if (Count)
        {
          *(_QWORD *)&v550 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v550 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v618 = v550;
          v617 = v550;
          v616 = v550;
          v615 = v550;
          v614 = v550;
          v613 = v550;
          v612 = v550;
          v611 = v550;
          v610 = v550;
          v609 = v550;
          v608 = v550;
          v607 = v550;
          v606 = v550;
          *(_OWORD *)&valuePtr[40] = v550;
          *(_OWORD *)&valuePtr[24] = v550;
          memset(valuePtr, 0, 24);
          v619 = &valuePtr[24];
          std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](valuePtr, Count);
          v551 = *(_QWORD *)&valuePtr[8];
          bzero(*(void **)&valuePtr[8], 8 * Count);
          *(_QWORD *)&valuePtr[8] = v551 + 8 * Count;
          *(_QWORD *)&v552 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v552 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v603[14] = v552;
          v603[13] = v552;
          v603[12] = v552;
          v603[11] = v552;
          v603[10] = v552;
          v603[9] = v552;
          v603[8] = v552;
          v603[7] = v552;
          v603[6] = v552;
          v603[5] = v552;
          v603[4] = v552;
          v603[3] = v552;
          v603[2] = v552;
          v603[1] = v552;
          v603[0] = v552;
          v601 = 0;
          v602 = 0;
          values = 0;
          v604 = v603;
          std::vector<long,TInlineBufferAllocator<long,30ul>>::__vallocate[abi:nn180100](&values, Count);
          v553 = (char *)v601;
          bzero(v601, 8 * Count);
          v601 = &v553[8 * Count];
          CFDictionaryGetKeysAndValues(v597, *(const void ***)valuePtr, (const void **)values);
          std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<void const**>,std::__wrap_iter<void const**>>((char **)keys, (uint64_t)keys[1], *(char **)valuePtr, *(char **)&valuePtr[8], (uint64_t)(*(_QWORD *)&valuePtr[8] - *(_QWORD *)valuePtr) >> 3);
          std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<void const**>,std::__wrap_iter<void const**>>((char **)v620, (uint64_t)v620[1], (char *)values, (char *)v601, ((_BYTE *)v601 - (_BYTE *)values) >> 3);
          p_values = &values;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)&p_values);
          values = (void **)valuePtr;
          std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](&values);
        }
      }
      else
      {

      }
      v554 = v597;
      if (v554)
      {
        v555 = v554;
        v556 = CFDictionaryGetValue(v554, CFSTR("NSCTFontUIUsageAttribute"));

        if (v556)
        {
          v557 = keys[1];
          v558 = keys[0];
          if (keys[1] != keys[0])
          {
            v559 = 0;
            v560 = 1;
            while (1)
            {
              v561 = (__CFString *)v558[v560 - 1];
              if (v561 == CFSTR("NSFontNameAttribute"))
                break;
              if (CFSTR("NSFontNameAttribute"))
              {
                if (v561)
                {
                  v562 = CFEqual(v561, CFSTR("NSFontNameAttribute"));
                  v558 = keys[0];
                  v557 = keys[1];
                  if (v562)
                    break;
                }
              }
              ++v559;
              ++v560;
              if (v559 >= v557 - v558)
                goto LABEL_680;
            }
            v563 = &v558[v560];
            v564 = (char *)v557 - (char *)v558 - v560 * 8;
            if (&v558[v560] != v557)
              memmove(v563 - 1, &v558[v560], (char *)v557 - (char *)v558 - v560 * 8);
            keys[1] = (void **)((char *)v563 + (v564 & 0xFFFFFFFFFFFFFFF8) - 8);
            v565 = &v620[0][v560];
            v566 = (char *)v620[1] - (char *)v620[0] - v560 * 8;
            if (&v620[0][v560] != v620[1])
              memmove(v565 - 1, &v620[0][v560], (char *)v620[1] - (char *)v620[0] - v560 * 8);
            v620[1] = (void **)((char *)v565 + (v566 & 0xFFFFFFFFFFFFFFF8) - 8);
          }
        }
      }
      else
      {

      }
LABEL_680:
      v567 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys[0], (const void **)v620[0], keys[1] - keys[0], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v568 = atomic_load((unint64_t *)this + 1);
      v569 = (const TBaseFont *)*((_QWORD *)this + 50);
      v570 = TCFBase<TDescriptor>::Allocate();
      if (v570)
      {
        v571 = (_QWORD *)v570;
        v572 = (TDescriptor *)(v570 + 48);
        v571[2] = 0;
        v571[3] = TDescriptor::Hash;
        v571[4] = 0;
        v571[5] = v572;
        TDescriptor::TDescriptor(v572, *(const TDescriptor **)(v568 + 40), v569, v567);
        *(_QWORD *)valuePtr = v571;
        do
          v573 = (void **)__ldaxr((unint64_t *)valuePtr);
        while (__stlxr(0, (unint64_t *)valuePtr));
        values = v573;

      }
      else
      {
        values = 0;
      }
      do
        v574 = __ldaxr((unint64_t *)&values);
      while (__stlxr(0, (unint64_t *)&values));
      do
        v575 = (void *)__ldaxr(a3);
      while (__stlxr(v574, a3));

      if (atomic_load(a3))
      {
        if ((void **)((char *)keys[1] - (char *)keys[0]) == (void **)8)
        {
          v577 = (void *)atomic_load((unint64_t *)this + 1);
          v578 = *keys[0];
          v579 = *v620[0];
          v580 = (const __CTFontDescriptor *)atomic_load(a3);
          if (!dispatch_get_specific((const void *)TDescriptorSource::DoNotCacheKey))
          {
            *(_QWORD *)&v581 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v581 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&valuePtr[16] = v581;
            *(_OWORD *)&valuePtr[32] = v581;
            *(_OWORD *)valuePtr = v581;
            v582 = values;
            v583 = values[2];
            v584 = values + 3;
            v586 = v582[1];
            do
            {
              v587 = v586;
              v588 = &v584[6 * (_QWORD)v586];
              v590 = v588[1];
              v589 = v588 + 1;
              v586 = v590;
            }
            while (v590 != v582[2]);
            v585[1] = (unint64_t)v582[1];
            v582[1] = v583;
            v582[2] = v587;
            *v589 = v583;
            *(_QWORD *)valuePtr = &off_1E15DEC08;

          }
        }
      }

    }
  }
  *(_QWORD *)valuePtr = 0xAAAAAAAAAAAAAAAALL;
  v591 = (void *)atomic_load(a3);
  *(_QWORD *)valuePtr = v591;
  do
    v592 = __ldaxr((unint64_t *)valuePtr);
  while (__stlxr(0, (unint64_t *)valuePtr));
  do
  {
    if (__ldaxr(v6))
    {
      v594 = 0;
      __clrex();
      goto LABEL_701;
    }
  }
  while (__stlxr(v592, v6));
  v594 = 1;
LABEL_701:
  if (v594)
    v595 = 0;
  else
    v595 = (void *)v592;

  *(_QWORD *)valuePtr = v620;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100]((void ***)valuePtr);
  v620[0] = (void **)keys;
  std::vector<std::pair<unsigned int,unsigned int>,TInlineBufferAllocator<std::pair<unsigned int,unsigned int>,30ul>>::__destroy_vector::operator()[abi:nn180100](v620);

}

