void ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponse26SendSessionCompletionEvent_block_invoke_9(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  os_log_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(os_log_t **)(a1 + 40);
  v6 = *v5;
  v7 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v8 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109634;
      v16 = v8;
      v17 = 1024;
      v18 = v3;
      v19 = 2080;
      v20 = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response with BB Session ID: %d resulted in error with code %d - %s", (uint8_t *)&v15, 0x18u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 0;
  }
  else
  {
    if (v7)
    {
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109120;
      v16 = v14;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response with BB Session ID: %d resulted in success", (uint8_t *)&v15, 8u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 1;
  }
  QMI_STK_CommandDriver::sendStkSessionEvent(v11, v12, v9, v10, 2, v13);
}

void QMI_STK_CommandDriver::sendTerminalResponse(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  os_log_t *v16;
  char *v17;
  char v18;
  char *v19;
  int QMINotificationResponse;
  uint64_t v21;
  unint64_t v22;
  int QMINotificationAdditionalResponse;
  NSObject *v24;
  int v25;
  void *v26;
  int v27;
  _QWORD v28[6];
  unsigned int v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *aBlock;
  _OWORD v37[2];
  uint8_t buf[8];
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v16 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  {
    memset(v37, 0, sizeof(v37));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v37);
    v27 = a8;
    v17 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v37, 20);
    if (a2 >= 4)
      v18 = 0;
    else
      v18 = a2;
    *v17 = v18;
    v19 = qmi::MutableMessageBase::getTLV<cat::tlv::TerminalResponse>(v37);
    *(_DWORD *)v19 = a3;
    v19[4] = a4;
    v19[5] = getQMI_ProactiveCommand_TerminalResponse(a5);
    QMINotificationResponse = getQMINotificationResponse(a6);
    v21 = *((_QWORD *)v19 + 2);
    *((_DWORD *)v19 + 2) = QMINotificationResponse;
    v22 = *((_QWORD *)v19 + 3) - v21;
    if (v22)
    {
      if (v22 >= 2)
        *((_QWORD *)v19 + 3) = v21 + 1;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)v19 + 2, 1uLL);
    }
    QMINotificationAdditionalResponse = getQMINotificationAdditionalResponse(a7);
    **((_BYTE **)v19 + 2) = QMINotificationAdditionalResponse;
    v24 = *v16;
    if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      v25 = v19[5];
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = a3;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = a4;
      HIWORD(v39) = 1024;
      LODWORD(v40) = v25;
      WORD2(v40) = 1024;
      *(_DWORD *)((char *)&v40 + 6) = QMINotificationResponse;
      WORD5(v40) = 1024;
      HIDWORD(v40) = QMINotificationAdditionalResponse;
      _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response to SIM card with UIM Reference ID: %d, Baseband Session ID: %d, Proactive Command: %d, Notification Response: %d, and Additional Response: %d", buf, 0x20u);
    }
    v32 = a1 + 72;
    v33 = QMIServiceMsg::create();
    v34 = 25000;
    v35 = 0;
    aBlock = 0;
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 0x40000000;
    v28[2] = ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponse30NotificationAdditionalResponse26SendSessionCompletionEvent_block_invoke;
    v28[3] = &__block_descriptor_tmp_11_0;
    v28[4] = a1;
    v28[5] = v16;
    v31 = a4;
    v29 = a2;
    v30 = v27;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v39 = 0x40000000;
    *(_QWORD *)&v40 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
    *((_QWORD *)&v40 + 1) = &unk_24D5C7FB0;
    v41 = v28;
    v26 = _Block_copy(buf);
    aBlock = v26;
    if (v33)
    {
      qmi::Client::send();
      v26 = aBlock;
    }
    if (v26)
      _Block_release(v26);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v37);
  }
  else
  {
    QMI_STK_CommandDriver::sendStkSessionEvent(a1, v16, a2, a8, 2, 0);
  }
}

void sub_2168FD7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponse30NotificationAdditionalResponse26SendSessionCompletionEvent_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  os_log_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(os_log_t **)(a1 + 40);
  v6 = *v5;
  v7 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v8 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109634;
      v16 = v8;
      v17 = 1024;
      v18 = v3;
      v19 = 2080;
      v20 = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending terminal response with BB Session ID: %d resulted in error with code %d - %s", (uint8_t *)&v15, 0x18u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 0;
  }
  else
  {
    if (v7)
    {
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109120;
      v16 = v14;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response with BB Session ID: %d resulted in success", (uint8_t *)&v15, 8u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 1;
  }
  QMI_STK_CommandDriver::sendStkSessionEvent(v11, v12, v9, v10, 2, v13);
}

void QMI_STK_CommandDriver::sendTerminalResponse(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, unsigned __int8 a7, uint64_t a8, int a9)
{
  os_log_t *v16;
  char *v17;
  char v18;
  char *v19;
  int QMINotificationResponse;
  NSObject *v21;
  int v22;
  const void **v23;
  const void **v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  os_log_t v41;
  _BYTE *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  os_log_t v46;
  uint64_t v47;
  const std::string::value_type *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  char *v63;
  int v64;
  const char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  void *v73;
  _QWORD v75[6];
  unsigned int v76;
  int v77;
  char v78;
  void *__p[2];
  __int128 v80;
  _BYTE v81[22];
  uint64_t v82;
  void *aBlock;
  _BYTE buf[32];
  _QWORD *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v16 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  {
    QMI_STK_CommandDriver::sendStkSessionEvent(a1, v16, a2, a9, 2, 0);
    return;
  }
  *(_OWORD *)__p = 0u;
  v80 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v17 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(__p, 20);
  if (a2 >= 4)
    v18 = 0;
  else
    v18 = a2;
  *v17 = v18;
  v19 = qmi::MutableMessageBase::getTLV<cat::tlv::TerminalResponse>(__p);
  *(_DWORD *)v19 = a3;
  v19[4] = a4;
  v19[5] = getQMI_ProactiveCommand_TerminalResponse(a5);
  QMINotificationResponse = getQMINotificationResponse(a6);
  *((_DWORD *)v19 + 2) = QMINotificationResponse;
  v21 = *v16;
  if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v19[5];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a4;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v22;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = QMINotificationResponse;
    _os_log_impl(&dword_216897000, v21, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response to SIM card with UIM Reference ID: %d, Baseband Session ID: %d, Proactive Command: %d, Notification Response: %d", buf, 0x1Au);
  }
  if (a5 == 14)
  {
    memset(buf, 0, 24);
    if (*(char *)(a8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)a8;
      *(_QWORD *)&buf[16] = *(_QWORD *)(a8 + 16);
    }
    stk::truncateLanguageIfNeeded();
    v37 = buf[23];
    if (buf[23] < 0)
      v37 = *(_QWORD *)&buf[8];
    if (v37 == 2)
    {
      v38 = qmi::MutableMessageBase::getTLV<cat::tlv::LanguageInfo>(__p, 19);
      if (buf[23] >= 0)
        v39 = buf;
      else
        v39 = *(char **)buf;
      *v38 = *v39;
      if (buf[23] >= 0)
        v40 = buf;
      else
        v40 = *(_BYTE **)buf;
      v38[1] = v40[1];
      v41 = *v16;
      if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_53:
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_96;
      }
      if (buf[23] >= 0)
        v42 = buf;
      else
        v42 = *(_BYTE **)buf;
      *(_DWORD *)v81 = 136315138;
      *(_QWORD *)&v81[4] = v42;
      v43 = "#I Adding local information on language: %s";
      v44 = v41;
      v45 = 12;
    }
    else
    {
      v46 = *v16;
      if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_53;
      v47 = *(unsigned __int8 *)(a8 + 23);
      if ((v47 & 0x80u) == 0)
        v48 = (const std::string::value_type *)a8;
      else
        v48 = *(const std::string::value_type **)a8;
      if ((v47 & 0x80u) != 0)
        v47 = *(_QWORD *)(a8 + 8);
      *(_DWORD *)v81 = 136315394;
      *(_QWORD *)&v81[4] = v48;
      *(_WORD *)&v81[12] = 2048;
      *(_QWORD *)&v81[14] = v47;
      v43 = "#I Language string provided for local information is more than 2 characters long, %s, with length %ld";
      v44 = v46;
      v45 = 22;
    }
    _os_log_impl(&dword_216897000, v44, OS_LOG_TYPE_DEFAULT, v43, v81, v45);
    goto LABEL_53;
  }
  if (a5 == 2)
  {
    v23 = (const void **)__p[1];
    if (__p[1] != (void *)v80)
    {
      while (*((_BYTE *)*v23 + 8) != 18)
      {
        if (++v23 == (const void **)v80)
          goto LABEL_26;
      }
    }
    if (v23 == (const void **)v80)
    {
LABEL_26:
      v29 = operator new();
      v30 = v29;
      *(_BYTE *)(v29 + 8) = 18;
      *(_QWORD *)v29 = off_24D5C9240;
      *(_DWORD *)(v29 + 16) = 0;
      v26 = (char *)(v29 + 16);
      *(_WORD *)(v29 + 20) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      v31 = v80;
      if ((unint64_t)v80 >= *((_QWORD *)&v80 + 1))
      {
        v49 = (uint64_t)(v80 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v50 = (uint64_t)(*((_QWORD *)&v80 + 1) - (unint64_t)__p[1]) >> 2;
        if (v50 <= v49 + 1)
          v50 = v49 + 1;
        if (*((_QWORD *)&v80 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v80 + 8, v51);
        else
          v52 = 0;
        v57 = (uint64_t *)&v52[8 * v49];
        v58 = &v52[8 * v51];
        *v57 = v30;
        v32 = v57 + 1;
        v60 = (char *)__p[1];
        v59 = (char *)v80;
        if ((void *)v80 != __p[1])
        {
          do
          {
            v61 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *--v57 = v61;
          }
          while (v59 != v60);
          v59 = (char *)__p[1];
        }
        __p[1] = v57;
        *(_QWORD *)&v80 = v32;
        *((_QWORD *)&v80 + 1) = v58;
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_QWORD *)v80 = v29;
        v32 = (_QWORD *)(v31 + 8);
      }
      *(_QWORD *)&v80 = v32;
    }
    else
    {
      if (!v25)
        __cxa_bad_cast();
      v26 = v25 + 16;
    }
    *(_DWORD *)v26 = -1;
    v26[4] = 0;
    v26[5] = getQMIDataCodingScheme(a7);
    std::string::operator=((std::string *)(v26 + 8), (const std::string *)a8);
    v62 = *v16;
    if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_96;
    if (v26[31] >= 0)
      v63 = v26 + 8;
    else
      v63 = (char *)*((_QWORD *)v26 + 1);
    v64 = v26[5];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v63;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v64;
    v65 = "#I Adding Get Inkey Extra Info with text: %s, encoded with %d";
  }
  else
  {
    v24 = (const void **)__p[1];
    if (__p[1] != (void *)v80)
    {
      while (*((_BYTE *)*v24 + 8) != 16)
      {
        if (++v24 == (const void **)v80)
          goto LABEL_28;
      }
    }
    if (v24 == (const void **)v80)
    {
LABEL_28:
      v33 = operator new();
      v34 = v33;
      *(_BYTE *)(v33 + 8) = 16;
      *(_QWORD *)v33 = off_24D5C92E0;
      *(_BYTE *)(v33 + 16) = 0;
      v28 = (unsigned __int8 *)(v33 + 16);
      *(_QWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      v35 = v80;
      if ((unint64_t)v80 >= *((_QWORD *)&v80 + 1))
      {
        v53 = (uint64_t)(v80 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v54 = (uint64_t)(*((_QWORD *)&v80 + 1) - (unint64_t)__p[1]) >> 2;
        if (v54 <= v53 + 1)
          v54 = v53 + 1;
        if (*((_QWORD *)&v80 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v80 + 8, v55);
        else
          v56 = 0;
        v66 = (uint64_t *)&v56[8 * v53];
        v67 = &v56[8 * v55];
        *v66 = v34;
        v36 = v66 + 1;
        v69 = (char *)__p[1];
        v68 = (char *)v80;
        if ((void *)v80 != __p[1])
        {
          do
          {
            v70 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *--v66 = v70;
          }
          while (v68 != v69);
          v68 = (char *)__p[1];
        }
        __p[1] = v66;
        *(_QWORD *)&v80 = v36;
        *((_QWORD *)&v80 + 1) = v67;
        if (v68)
          operator delete(v68);
      }
      else
      {
        *(_QWORD *)v80 = v33;
        v36 = (_QWORD *)(v35 + 8);
      }
      *(_QWORD *)&v80 = v36;
    }
    else
    {
      if (!v27)
        __cxa_bad_cast();
      v28 = (unsigned __int8 *)(v27 + 16);
    }
    *v28 = getQMIDataCodingScheme(a7);
    std::string::operator=((std::string *)(v28 + 8), (const std::string *)a8);
    v62 = *v16;
    if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_96;
    if ((v28[31] & 0x80u) == 0)
      v71 = v28 + 8;
    else
      v71 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
    v72 = *v28;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v71;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v72;
    v65 = "#I Adding Text: %s, encoded with %d";
  }
  _os_log_impl(&dword_216897000, v62, OS_LOG_TYPE_DEFAULT, v65, buf, 0x12u);
LABEL_96:
  *(_QWORD *)v81 = a1 + 72;
  *(_QWORD *)&v81[8] = QMIServiceMsg::create();
  *(_DWORD *)&v81[16] = 25000;
  v82 = 0;
  aBlock = 0;
  v75[0] = MEMORY[0x24BDAC760];
  v75[1] = 0x40000000;
  v75[2] = ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponse16DataCodingSchemeRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE26SendSessionCompletionEvent_block_invoke;
  v75[3] = &__block_descriptor_tmp_12_0;
  v75[4] = a1;
  v75[5] = v16;
  v78 = a4;
  v76 = a2;
  v77 = a9;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  *(_QWORD *)&buf[24] = &unk_24D5C7FB0;
  v85 = v75;
  v73 = _Block_copy(buf);
  aBlock = v73;
  if (*(_QWORD *)&v81[8])
  {
    qmi::Client::send();
    v73 = aBlock;
  }
  if (v73)
    _Block_release(v73);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2168FE158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponse16DataCodingSchemeRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE26SendSessionCompletionEvent_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  os_log_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(os_log_t **)(a1 + 40);
  v6 = *v5;
  v7 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v8 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109634;
      v16 = v8;
      v17 = 1024;
      v18 = v3;
      v19 = 2080;
      v20 = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending terminal response with BB Session ID: %d resulted in error with code %d - %s", (uint8_t *)&v15, 0x18u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 0;
  }
  else
  {
    if (v7)
    {
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109120;
      v16 = v14;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response with BB Session ID: %d resulted in success", (uint8_t *)&v15, 8u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 1;
  }
  QMI_STK_CommandDriver::sendStkSessionEvent(v11, v12, v9, v10, 2, v13);
}

void QMI_STK_CommandDriver::sendTerminalResponse(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, unsigned __int8 a7, int a8)
{
  os_log_t *v16;
  char *v17;
  char v18;
  char *v19;
  int QMINotificationResponse;
  NSObject *v21;
  int v22;
  NSObject *v23;
  void *v24;
  _QWORD v25[6];
  unsigned int v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *aBlock;
  _OWORD v34[2];
  uint8_t buf[8];
  uint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v16 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  {
    memset(v34, 0, sizeof(v34));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v34);
    v17 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v34, 20);
    if (a2 >= 4)
      v18 = 0;
    else
      v18 = a2;
    *v17 = v18;
    v19 = qmi::MutableMessageBase::getTLV<cat::tlv::TerminalResponse>(v34);
    *(_DWORD *)v19 = a3;
    v19[4] = a4;
    v19[5] = getQMI_ProactiveCommand_TerminalResponse(a5);
    QMINotificationResponse = getQMINotificationResponse(a6);
    *((_DWORD *)v19 + 2) = QMINotificationResponse;
    v21 = *v16;
    if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v19[5];
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = a3;
      LOWORD(v36) = 1024;
      *(_DWORD *)((char *)&v36 + 2) = a4;
      HIWORD(v36) = 1024;
      LODWORD(v37) = v22;
      WORD2(v37) = 1024;
      *(_DWORD *)((char *)&v37 + 6) = QMINotificationResponse;
      _os_log_impl(&dword_216897000, v21, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response to SIM card with UIM Reference ID: %d, Baseband Session ID: %d, Proactive Command: %d, Notification Response: %d", buf, 0x1Au);
    }
    *qmi::MutableMessageBase::getTLV<cat::tlv::ItemIdentifier>(v34, 17) = a7;
    v23 = *v16;
    if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a7;
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I Adding Index information: %d", buf, 8u);
    }
    v29 = a1 + 72;
    v30 = QMIServiceMsg::create();
    v31 = 25000;
    v32 = 0;
    aBlock = 0;
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 0x40000000;
    v25[2] = ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponsej26SendSessionCompletionEvent_block_invoke;
    v25[3] = &__block_descriptor_tmp_13_0;
    v25[4] = a1;
    v25[5] = v16;
    v28 = a4;
    v26 = a2;
    v27 = a8;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v36 = 0x40000000;
    *(_QWORD *)&v37 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
    *((_QWORD *)&v37 + 1) = &unk_24D5C7FB0;
    v38 = v25;
    v24 = _Block_copy(buf);
    aBlock = v24;
    if (v30)
    {
      qmi::Client::send();
      v24 = aBlock;
    }
    if (v24)
      _Block_release(v24);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v34);
  }
  else
  {
    QMI_STK_CommandDriver::sendStkSessionEvent(a1, v16, a2, a8, 2, 0);
  }
}

void sub_2168FE5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver20sendTerminalResponseE14STKSimSlotInfojh16ProactiveCommand20NotificationResponsej26SendSessionCompletionEvent_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  os_log_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(os_log_t **)(a1 + 40);
  v6 = *v5;
  v7 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v8 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109634;
      v16 = v8;
      v17 = 1024;
      v18 = v3;
      v19 = 2080;
      v20 = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending terminal response with BB Session ID: %d resulted in error with code %d - %s", (uint8_t *)&v15, 0x18u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 0;
  }
  else
  {
    if (v7)
    {
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = 67109120;
      v16 = v14;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Terminal Response with BB Session ID: %d resulted in success", (uint8_t *)&v15, 8u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = v4;
    v12 = v5;
    v13 = 1;
  }
  QMI_STK_CommandDriver::sendStkSessionEvent(v11, v12, v9, v10, 2, v13);
}

void QMI_STK_CommandDriver::envelopeMenuSelection(uint64_t a1, unsigned int a2, unsigned __int8 a3, int a4)
{
  os_log_t *v8;
  char *v9;
  char v10;
  NSObject *v11;
  NSObject *v12;
  const void **v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  _QWORD v31[6];
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *aBlock;
  void *__p[2];
  __int128 v37;
  uint8_t buf[8];
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  void *v41;
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v9 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(__p, 19);
  if (a2 >= 4)
    v10 = 0;
  else
    v10 = a2;
  *v9 = v10;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(__p) = 1;
  v11 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Adding menu selection with command type: %d", buf, 8u);
  }
  *qmi::MutableMessageBase::getTLV<cat::tlv::ItemIdentifier>(__p, 16) = a3;
  v12 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Adding selected index: %d", buf, 8u);
  }
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v37)
  {
    while (*((_BYTE *)*v13 + 8) != 17)
    {
      if (++v13 == (const void **)v37)
        goto LABEL_15;
    }
  }
  if (v13 == (const void **)v37)
  {
LABEL_15:
    v16 = operator new();
    v17 = v16;
    *(_BYTE *)(v16 + 8) = 17;
    *(_QWORD *)v16 = &off_24D5C93D0;
    *(_DWORD *)(v16 + 12) = 0;
    v15 = (_DWORD *)(v16 + 12);
    v18 = v37;
    if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
    {
      v20 = (uint64_t)(v37 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v21 = (uint64_t)(*((_QWORD *)&v37 + 1) - (unint64_t)__p[1]) >> 2;
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      if (*((_QWORD *)&v37 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v37 + 8, v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v20];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v19 = v24 + 1;
      v27 = (char *)__p[1];
      v26 = (char *)v37;
      if ((void *)v37 != __p[1])
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = (char *)__p[1];
      }
      __p[1] = v24;
      *(_QWORD *)&v37 = v19;
      *((_QWORD *)&v37 + 1) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v37 = v16;
      v19 = (_QWORD *)(v18 + 8);
    }
    *(_QWORD *)&v37 = v19;
  }
  else
  {
    if (!v14)
      __cxa_bad_cast();
    v15 = v14 + 12;
  }
  *v15 = a4;
  v29 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a4;
    _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I Adding help requested: %d", buf, 8u);
  }
  v31[5] = a1 + 72;
  v32 = QMIServiceMsg::create();
  v33 = 25000;
  v34 = 0;
  aBlock = 0;
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 0x40000000;
  v31[2] = ___ZN21QMI_STK_CommandDriver21envelopeMenuSelectionE14STKSimSlotInfojb_block_invoke;
  v31[3] = &__block_descriptor_tmp_14_0;
  v31[4] = v8;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v39 = 0x40000000;
  v40 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v41 = &unk_24D5C7FB0;
  v42 = v31;
  v30 = _Block_copy(buf);
  aBlock = v30;
  if (v32)
  {
    qmi::Client::send();
    v30 = aBlock;
  }
  if (v30)
    _Block_release(v30);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2168FEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver21envelopeMenuSelectionE14STKSimSlotInfojb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending Menu Selection resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending Menu Selection resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::envelopeLanguageSelection(uint64_t a1, unsigned int a2, char *a3)
{
  os_log_t *v6;
  char *v7;
  char v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  os_log_t v15;
  char *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  os_log_t v20;
  char *v21;
  void *v22;
  _QWORD v23[6];
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *aBlock;
  _OWORD v28[2];
  _BYTE buf[24];
  void *v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v28, 0, sizeof(v28));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v7 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v28, 19);
  if (a2 >= 4)
    v8 = 0;
  else
    v8 = a2;
  *v7 = v8;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v28) = 2;
  v9 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 2;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Adding language selection with command type: %d", buf, 8u);
  }
  v10 = a3[23];
  if (v10 >= 0)
    v11 = a3[23];
  else
    v11 = *((_QWORD *)a3 + 1);
  if (v11 != 2)
  {
    v20 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_26;
    v21 = *(char **)a3;
    if (v10 >= 0)
      v21 = a3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v11;
    v17 = "#I Language string has to be 2 bytes, given string %s is %ld long";
    v18 = v20;
    v19 = 22;
    goto LABEL_25;
  }
  v12 = qmi::MutableMessageBase::getTLV<cat::tlv::LanguageInfo>(v28, 18);
  if (a3[23] >= 0)
    v13 = a3;
  else
    v13 = *(char **)a3;
  *v12 = *v13;
  if (a3[23] >= 0)
    v14 = a3;
  else
    v14 = *(char **)a3;
  v12[1] = v14[1];
  v15 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0)
      v16 = a3;
    else
      v16 = *(char **)a3;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    v17 = "#I Adding local information on language: %s";
    v18 = v15;
    v19 = 12;
LABEL_25:
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
  }
LABEL_26:
  v23[5] = a1 + 72;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  aBlock = 0;
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 0x40000000;
  v23[2] = ___ZN21QMI_STK_CommandDriver25envelopeLanguageSelectionE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_15_2;
  v23[4] = v6;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v30 = &unk_24D5C7FB0;
  v31 = v23;
  v22 = _Block_copy(buf);
  aBlock = v22;
  if (v24)
  {
    qmi::Client::send();
    v22 = aBlock;
  }
  if (v22)
    _Block_release(v22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_2168FEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_2168FEF30()
{
  JUMPOUT(0x2168FEF28);
}

void sub_2168FEF38(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2168FEF28);
}

void ___ZN21QMI_STK_CommandDriver25envelopeLanguageSelectionE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    v4 = **(NSObject ***)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109378;
      v6[1] = v3;
      v7 = 2080;
      v8 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Sending Language Selection resulted in error with code %d - %s", (uint8_t *)v6, 0x12u);
    }
  }
  v5 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Language Selection resulted in success", (uint8_t *)v6, 2u);
  }
}

void QMI_STK_CommandDriver::envelopeUserActivity(uint64_t a1, unsigned int a2)
{
  os_log_t *v4;
  char *v5;
  char v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[6];
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *aBlock;
  _OWORD v14[2];
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v14, 0, sizeof(v14));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
  v5 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v14, 19);
  if (a2 >= 4)
    v6 = 0;
  else
    v6 = a2;
  *v5 = v6;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v14) = 3;
  v7 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 3;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Adding User Activity with command type: %d", buf, 8u);
  }
  v9[5] = a1 + 72;
  v10 = QMIServiceMsg::create();
  v11 = 25000;
  v12 = 0;
  aBlock = 0;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN21QMI_STK_CommandDriver20envelopeUserActivityE14STKSimSlotInfo_block_invoke;
  v9[3] = &__block_descriptor_tmp_16_1;
  v9[4] = v4;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v16 = 0x40000000;
  v17 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v18 = &unk_24D5C7FB0;
  v19 = v9;
  v8 = _Block_copy(buf);
  aBlock = v8;
  if (v10)
  {
    qmi::Client::send();
    v8 = aBlock;
  }
  if (v8)
    _Block_release(v8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_2168FF1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_2168FF210()
{
  JUMPOUT(0x2168FF208);
}

void sub_2168FF218(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2168FF208);
}

void ___ZN21QMI_STK_CommandDriver20envelopeUserActivityE14STKSimSlotInfo_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending User Activity resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending User Activity resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::envelopeIdleScreenAvailable(uint64_t a1, unsigned int a2)
{
  os_log_t *v4;
  char *v5;
  char v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[6];
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *aBlock;
  _OWORD v14[2];
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v14, 0, sizeof(v14));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
  v5 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v14, 19);
  if (a2 >= 4)
    v6 = 0;
  else
    v6 = a2;
  *v5 = v6;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v14) = 4;
  v7 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 4;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Adding Idle Screen with command type: %d", buf, 8u);
  }
  v9[5] = a1 + 72;
  v10 = QMIServiceMsg::create();
  v11 = 25000;
  v12 = 0;
  aBlock = 0;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN21QMI_STK_CommandDriver27envelopeIdleScreenAvailableE14STKSimSlotInfo_block_invoke;
  v9[3] = &__block_descriptor_tmp_17_1;
  v9[4] = v4;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v16 = 0x40000000;
  v17 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v18 = &unk_24D5C7FB0;
  v19 = v9;
  v8 = _Block_copy(buf);
  aBlock = v8;
  if (v10)
  {
    qmi::Client::send();
    v8 = aBlock;
  }
  if (v8)
    _Block_release(v8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_2168FF4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_2168FF4D4()
{
  JUMPOUT(0x2168FF4CCLL);
}

void sub_2168FF4DC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2168FF4CCLL);
}

void ___ZN21QMI_STK_CommandDriver27envelopeIdleScreenAvailableE14STKSimSlotInfo_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending Idle Screen resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending Idle Screen resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::envelopeSmsPPDataDownload(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  os_log_t *v11;
  char *v12;
  char v13;
  NSObject *v14;
  char *v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  const void **v19;
  char *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const void **v37;
  char *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *__p[2];
  __int128 v62;
  _QWORD v63[5];
  _BYTE v64[24];
  _BYTE *v65;
  __int128 buf;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 aBlock;
  void (*v76)(uint64_t, QMIServiceMsg *);
  void *v77;
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v11 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(__p, 19);
  if (a2 >= 4)
    v13 = 0;
  else
    v13 = a2;
  *v12 = v13;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(__p) = 8;
  v14 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&buf = 0x804000100;
    _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Performing SMS PP-Data download with command type: %d", (uint8_t *)&buf, 8u);
  }
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  buf = 0u;
  v67 = 0u;
  MEMORY[0x2199FD7BC](&buf, a3);
  v15 = qmi::MutableMessageBase::getTLV<cat::tlv::Address>(__p);
  getAddressTlvFromCSIPhoneNumber<cat::tlv::Address>((CSIPhoneNumber *)&buf, (uint64_t)v15);
  v16 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    LODWORD(aBlock) = 136315138;
    *(_QWORD *)((char *)&aBlock + 4) = v17;
    _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I Adding Address: %s", (uint8_t *)&aBlock, 0xCu);
  }
  v18 = *(unsigned __int8 *)(a4 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a4 + 8);
  if (v18)
  {
    v19 = (const void **)__p[1];
    if (__p[1] != (void *)v62)
    {
      while (*((_BYTE *)*v19 + 8) != 28)
      {
        if (++v19 == (const void **)v62)
          goto LABEL_21;
      }
    }
    if (v19 == (const void **)v62)
    {
LABEL_21:
      v22 = operator new();
      v23 = v22;
      *(_BYTE *)(v22 + 8) = 28;
      *(_QWORD *)(v22 + 16) = 0;
      v21 = (std::string *)(v22 + 16);
      *(_QWORD *)v22 = off_24D5C9470;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      v24 = v62;
      if ((unint64_t)v62 >= *((_QWORD *)&v62 + 1))
      {
        v26 = (uint64_t)(v62 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v27 = (uint64_t)(*((_QWORD *)&v62 + 1) - (unint64_t)__p[1]) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if (*((_QWORD *)&v62 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v62 + 8, v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v26];
        v31 = &v29[8 * v28];
        *v30 = v23;
        v25 = v30 + 1;
        v33 = (char *)__p[1];
        v32 = (char *)v62;
        if ((void *)v62 != __p[1])
        {
          do
          {
            v34 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *--v30 = v34;
          }
          while (v32 != v33);
          v32 = (char *)__p[1];
        }
        __p[1] = v30;
        *(_QWORD *)&v62 = v25;
        *((_QWORD *)&v62 + 1) = v31;
        if (v32)
          operator delete(v32);
      }
      else
      {
        *(_QWORD *)v62 = v22;
        v25 = (_QWORD *)(v24 + 8);
      }
      *(_QWORD *)&v62 = v25;
    }
    else
    {
      if (!v20)
        __cxa_bad_cast();
      v21 = (std::string *)(v20 + 16);
    }
    std::string::operator=(v21, (const std::string *)a4);
    v35 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *(unsigned __int8 *)(a4 + 23);
      if ((v36 & 0x80u) != 0)
        v36 = *(_QWORD *)(a4 + 8);
      LODWORD(aBlock) = 134217984;
      *(_QWORD *)((char *)&aBlock + 4) = v36;
      _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#I Adding SMS TPDU - Size: %ld", (uint8_t *)&aBlock, 0xCu);
    }
  }
  v37 = (const void **)__p[1];
  if (__p[1] != (void *)v62)
  {
    while (*((_BYTE *)*v37 + 8) != 29)
    {
      if (++v37 == (const void **)v62)
        goto LABEL_49;
    }
  }
  if (v37 == (const void **)v62)
  {
LABEL_49:
    v40 = operator new();
    v41 = v40;
    *(_BYTE *)(v40 + 8) = 29;
    *(_QWORD *)v40 = &off_24D5C94C0;
    *(_DWORD *)(v40 + 12) = 0;
    v39 = (_DWORD *)(v40 + 12);
    v42 = v62;
    if ((unint64_t)v62 >= *((_QWORD *)&v62 + 1))
    {
      v44 = (uint64_t)(v62 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v45 = (uint64_t)(*((_QWORD *)&v62 + 1) - (unint64_t)__p[1]) >> 2;
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if (*((_QWORD *)&v62 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v62 + 8, v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[8 * v44];
      v49 = &v47[8 * v46];
      *v48 = v41;
      v43 = v48 + 1;
      v51 = (char *)__p[1];
      v50 = (char *)v62;
      if ((void *)v62 != __p[1])
      {
        do
        {
          v52 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v48 = v52;
        }
        while (v50 != v51);
        v50 = (char *)__p[1];
      }
      __p[1] = v48;
      *(_QWORD *)&v62 = v43;
      *((_QWORD *)&v62 + 1) = v49;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *(_QWORD *)v62 = v40;
      v43 = (_QWORD *)(v42 + 8);
    }
    *(_QWORD *)&v62 = v43;
  }
  else
  {
    if (!v38)
      __cxa_bad_cast();
    v39 = v38 + 12;
  }
  *v39 = a5;
  v53 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    v54 = "3GPP";
    if (a5)
      v54 = "3GPP2";
    LODWORD(aBlock) = 136315138;
    *(_QWORD *)((char *)&aBlock + 4) = v54;
    _os_log_impl(&dword_216897000, v53, OS_LOG_TYPE_DEFAULT, "#I SMS Format: %s", (uint8_t *)&aBlock, 0xCu);
  }
  v59 = QMIServiceMsg::create();
  v55 = MEMORY[0x24BDAC760];
  v63[0] = MEMORY[0x24BDAC760];
  v63[1] = 1174405120;
  v63[2] = ___ZN21QMI_STK_CommandDriver25envelopeSmsPPDataDownloadE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_bNS1_8functionIFvbS7_EEE_block_invoke;
  v63[3] = &__block_descriptor_tmp_18_1;
  v63[4] = v11;
  v56 = v64;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v64, a6);
  *(_QWORD *)&aBlock = v55;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SendDecodedEnvelopeCmd8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v77 = &unk_24D5C94F0;
  v78 = v63;
  v57 = _Block_copy(&aBlock);
  v60 = v57;
  if (v59)
  {
    qmi::Client::send();
    v57 = v60;
  }
  if (v57)
    _Block_release(v57);
  if (v65 == v64)
  {
    v58 = 4;
  }
  else
  {
    if (!v65)
      goto LABEL_79;
    v58 = 5;
    v56 = v65;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v58))(v56);
LABEL_79:
  if (SHIBYTE(v72) < 0)
    operator delete(*((void **)&v71 + 1));
  if (SBYTE7(v71) < 0)
    operator delete((void *)v70);
  if (SBYTE7(v69) < 0)
    operator delete((void *)v68);
  if (SHIBYTE(v67) < 0)
    operator delete(*((void **)&buf + 1));
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2168FFC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,void *a29)
{
  _QWORD *v29;
  uint64_t v31;

  if (a28 == v29)
  {
    v31 = 4;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
    v29 = a28;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v31))(v29);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  CSIPhoneNumber::~CSIPhoneNumber(&a29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver25envelopeSmsPPDataDownloadE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_bNS1_8functionIFvbS7_EEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  uint64_t TlvValue;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  std::string::value_type *v14;
  uint64_t v15;
  std::string __p;
  std::string v17;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;
  uint8_t buf[8];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 1);
  v5 = **(NSObject ***)(a1 + 32);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v4;
      LOWORD(v22) = 2080;
      *(_QWORD *)((char *)&v22 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending SMS-PP data download resulted in error with code %d - %s", buf, 0x12u);
    }
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    buf[0] = 0;
    v7 = *(_QWORD *)(a1 + 64);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, buf, v18);
    if (SHIBYTE(v19) < 0)
    {
      v8 = (void *)v18[0];
LABEL_26:
      operator delete(v8);
      return;
    }
    return;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending SMS-PP data download resulted in success", buf, 2u);
  }
  memset(&v17, 0, sizeof(v17));
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  v11 = TlvValue;
  if (TlvValue)
  {
    v12 = v10;
    v20 = TlvValue;
    *(_QWORD *)buf = 0;
    v22 = 0uLL;
    tlv::parseV<cat::tlv::SmsPPUiccAck>(&v20, v10, buf);
    v13 = v20;
    if (v20)
    {
      v14 = (std::string::value_type *)v22;
      if ((_QWORD)v22 == *(_QWORD *)buf)
      {
LABEL_14:
        if (v14)
        {
          *(_QWORD *)&v22 = v14;
          operator delete(v14);
        }
        if (!v13)
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 26, v11, v12);
        goto LABEL_18;
      }
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(&v17, *(std::string::value_type **)buf, (std::string::value_type *)v22, v22 - *(_QWORD *)buf);
    }
    v14 = *(std::string::value_type **)buf;
    goto LABEL_14;
  }
LABEL_18:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    __p = v17;
  buf[0] = 1;
  v15 = *(_QWORD *)(a1 + 64);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *, std::string *))(*(_QWORD *)v15 + 48))(v15, buf, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v17.__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
}

void sub_2168FFF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c85_ZTSNSt3__18functionIFvbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c85_ZTSNSt3__18functionIFvbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMI_STK_CommandDriver::envelopeSendCallControlSms(uint64_t a1, unsigned int a2, int *a3, CSIPhoneNumber *a4, CSIPhoneNumber *a5, uint64_t a6)
{
  os_log_t *v12;
  char *v13;
  char v14;
  NSObject *v15;
  char *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  const void **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void **v37;
  __int128 v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  const void **v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void **v58;
  __int128 v59;
  NSObject *v60;
  uint8_t *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  void *__p[2];
  __int128 v67;
  _QWORD v68[5];
  _BYTE v69[24];
  _BYTE *v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  void *aBlock;
  uint8_t buf[16];
  void (*v76)(uint64_t, QMIServiceMsg *);
  void *v77;
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v12 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  *(_OWORD *)__p = 0u;
  v67 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v13 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(__p, 19);
  if (a2 >= 4)
    v14 = 0;
  else
    v14 = a2;
  *v13 = v14;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(__p) = 5;
  v15 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 5;
    _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending Call Control with command type: %d", buf, 8u);
  }
  v16 = qmi::MutableMessageBase::getTLV<cat::tlv::RadioAccessTechnology>(__p);
  v17 = *a3;
  *(_DWORD *)v16 = *a3;
  v18 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I Call Control - RAT : %d", buf, 8u);
  }
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::CallType>(__p) = 3;
  v19 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 3;
    _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I Call Control - Call Type : %d", buf, 8u);
  }
  CSIPhoneNumber::getBaseNumber(a4);
  if (SHIBYTE(v76) < 0)
  {
    v20 = *(_QWORD *)&buf[8];
    operator delete(*(void **)buf);
    if (!v20)
      goto LABEL_46;
  }
  else if (!HIBYTE(v76))
  {
    goto LABEL_46;
  }
  v21 = (const void **)__p[1];
  if (__p[1] != (void *)v67)
  {
    while (*((_BYTE *)*v21 + 8) != 34)
    {
      if (++v21 == (const void **)v67)
        goto LABEL_21;
    }
  }
  if (v21 == (const void **)v67)
  {
LABEL_21:
    v24 = operator new();
    v25 = v24;
    *(_BYTE *)(v24 + 8) = 34;
    *(_QWORD *)v24 = off_24D5C95D8;
    *(_WORD *)(v24 + 16) = 0;
    v23 = (char *)(v24 + 16);
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    v26 = v67;
    if ((unint64_t)v67 >= *((_QWORD *)&v67 + 1))
    {
      v28 = (uint64_t)(v67 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(*((_QWORD *)&v67 + 1) - (unint64_t)__p[1]) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (*((_QWORD *)&v67 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v67 + 8, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v25;
      v27 = v32 + 1;
      v35 = (char *)__p[1];
      v34 = (char *)v67;
      if ((void *)v67 != __p[1])
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)__p[1];
      }
      __p[1] = v32;
      *(_QWORD *)&v67 = v27;
      *((_QWORD *)&v67 + 1) = v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v67 = v24;
      v27 = (_QWORD *)(v26 + 8);
    }
    *(_QWORD *)&v67 = v27;
  }
  else
  {
    if (!v22)
      __cxa_bad_cast();
    v23 = v22 + 16;
  }
  *v23 = (CSIPhoneNumber::getTypeOfAddress(a4) >> 4) & 3;
  v23[1] = CSIPhoneNumber::getTypeOfAddress(a4) & 0xF;
  CSIPhoneNumber::getBaseNumber(a4);
  v37 = (void **)(v23 + 8);
  if (v23[31] < 0)
    operator delete(*v37);
  v38 = *(_OWORD *)buf;
  *((_QWORD *)v23 + 3) = v76;
  *(_OWORD *)v37 = v38;
  v39 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getBaseNumber(a4);
    v40 = SHIBYTE(v76) >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(v71) = 136315138;
    *(_QWORD *)((char *)&v71 + 4) = v40;
    _os_log_impl(&dword_216897000, v39, OS_LOG_TYPE_DEFAULT, "#I Call Control - Destination Number : %s", (uint8_t *)&v71, 0xCu);
    if (SHIBYTE(v76) < 0)
      operator delete(*(void **)buf);
  }
LABEL_46:
  CSIPhoneNumber::getBaseNumber(a5);
  if (SHIBYTE(v76) < 0)
  {
    v41 = *(_QWORD *)&buf[8];
    operator delete(*(void **)buf);
    if (!v41)
      goto LABEL_82;
  }
  else if (!HIBYTE(v76))
  {
    goto LABEL_82;
  }
  v42 = (const void **)__p[1];
  if (__p[1] != (void *)v67)
  {
    while (*((_BYTE *)*v42 + 8) != 33)
    {
      if (++v42 == (const void **)v67)
        goto LABEL_57;
    }
  }
  if (v42 == (const void **)v67)
  {
LABEL_57:
    v45 = operator new();
    v46 = v45;
    *(_BYTE *)(v45 + 8) = 33;
    *(_QWORD *)v45 = off_24D5C9628;
    *(_WORD *)(v45 + 16) = 0;
    v44 = (char *)(v45 + 16);
    *(_QWORD *)(v45 + 32) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(v45 + 24) = 0;
    v47 = v67;
    if ((unint64_t)v67 >= *((_QWORD *)&v67 + 1))
    {
      v49 = (uint64_t)(v67 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v50 = (uint64_t)(*((_QWORD *)&v67 + 1) - (unint64_t)__p[1]) >> 2;
      if (v50 <= v49 + 1)
        v50 = v49 + 1;
      if (*((_QWORD *)&v67 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v67 + 8, v51);
      else
        v52 = 0;
      v53 = (uint64_t *)&v52[8 * v49];
      v54 = &v52[8 * v51];
      *v53 = v46;
      v48 = v53 + 1;
      v56 = (char *)__p[1];
      v55 = (char *)v67;
      if ((void *)v67 != __p[1])
      {
        do
        {
          v57 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *--v53 = v57;
        }
        while (v55 != v56);
        v55 = (char *)__p[1];
      }
      __p[1] = v53;
      *(_QWORD *)&v67 = v48;
      *((_QWORD *)&v67 + 1) = v54;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_QWORD *)v67 = v45;
      v48 = (_QWORD *)(v47 + 8);
    }
    *(_QWORD *)&v67 = v48;
  }
  else
  {
    if (!v43)
      __cxa_bad_cast();
    v44 = v43 + 16;
  }
  *v44 = (CSIPhoneNumber::getTypeOfAddress(a5) >> 4) & 3;
  v44[1] = CSIPhoneNumber::getTypeOfAddress(a5) & 0xF;
  CSIPhoneNumber::getBaseNumber(a5);
  v58 = (void **)(v44 + 8);
  if (v44[31] < 0)
    operator delete(*v58);
  v59 = *(_OWORD *)buf;
  *((_QWORD *)v44 + 3) = v76;
  *(_OWORD *)v58 = v59;
  v60 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getBaseNumber(a5);
    v61 = SHIBYTE(v76) >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(v71) = 136315138;
    *(_QWORD *)((char *)&v71 + 4) = v61;
    _os_log_impl(&dword_216897000, v60, OS_LOG_TYPE_DEFAULT, "#I Call Control - Service Center Number : %s", (uint8_t *)&v71, 0xCu);
    if (SHIBYTE(v76) < 0)
      operator delete(*(void **)buf);
  }
LABEL_82:
  *(_QWORD *)&v71 = a1 + 72;
  *((_QWORD *)&v71 + 1) = QMIServiceMsg::create();
  v72 = 25000;
  v73 = 0;
  aBlock = 0;
  v62 = MEMORY[0x24BDAC760];
  v68[0] = MEMORY[0x24BDAC760];
  v68[1] = 1174405120;
  v68[2] = ___ZN21QMI_STK_CommandDriver26envelopeSendCallControlSmsE14STKSimSlotInfoRK20AccessTechnologyTypeRK14CSIPhoneNumberS6_NSt3__18functionIFv17CallControlResultS4_S4_EEE_block_invoke;
  v68[3] = &__block_descriptor_tmp_19_1;
  v68[4] = v12;
  v63 = v69;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v69, a6);
  *(_QWORD *)buf = v62;
  *(_QWORD *)&buf[8] = 0x40000000;
  v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SendDecodedEnvelopeCmd8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v77 = &unk_24D5C94F0;
  v78 = v68;
  v64 = _Block_copy(buf);
  aBlock = v64;
  if (*((_QWORD *)&v71 + 1))
  {
    qmi::Client::send();
    v64 = aBlock;
  }
  if (v64)
    _Block_release(v64);
  if (v70 == v69)
  {
    v65 = 4;
    goto LABEL_90;
  }
  if (v70)
  {
    v65 = 5;
    v63 = v70;
LABEL_90:
    (*(void (**)(_QWORD *))(*v63 + 8 * v65))(v63);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169006FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,char a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a22 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
    v23 = a22;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver26envelopeSendCallControlSmsE14STKSimSlotInfoRK20AccessTechnologyTypeRK14CSIPhoneNumberS6_NSt3__18functionIFv17CallControlResultS4_S4_EEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  uint64_t TlvValue;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  _BYTE v34[8];
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43[2];
  __int128 v44;
  void *v45[2];
  __int128 v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[8];
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *__p;
  char v60;
  _BYTE v61[8];
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70[2];
  __int128 v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t buf[32];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 1);
  v5 = **(NSObject ***)(a1 + 32);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Call Control resulted in error with code %d - %s", buf, 0x12u);
    }
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)v61);
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)v52);
    *(_DWORD *)buf = 0;
    v7 = *(_QWORD *)(a1 + 64);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint8_t *, _BYTE *, _BYTE *))(*(_QWORD *)v7 + 48))(v7, buf, v61, v52);
    if (v60 < 0)
      operator delete(__p);
    if (v58 < 0)
      operator delete(v57);
    if (v56 < 0)
      operator delete(v55);
    if (v54 < 0)
      operator delete(v53);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
    {
      v8 = v62;
LABEL_77:
      operator delete(v8);
      return;
    }
    return;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Call Control resulted in success", buf, 2u);
  }
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  v11 = TlvValue;
  if (TlvValue)
  {
    v12 = v10;
    *(_QWORD *)buf = TlvValue;
    v13 = tlv::parseV<cat::tlv::CallControlResult>((unint64_t *)buf, v10);
    if (*(_QWORD *)buf)
      goto LABEL_27;
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v11, v12);
  }
  v13 = 0;
LABEL_27:
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  memset(buf, 0, sizeof(buf));
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)buf);
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)v43);
  if (v13 == 2)
  {
    v14 = qmi::MessageBase::findTlvValue(a2);
    v16 = v14;
    if (v14)
    {
      v17 = v15;
      v72 = v14;
      *(_OWORD *)v70 = 0u;
      v71 = 0u;
      tlv::parseV<cat::tlv::TpAddress>(&v72, v15, v70);
      v18 = v72;
      if (v72)
      {
        CSIPhoneNumber::setTypeOfAddress((CSIPhoneNumber *)buf);
        v73 = 0;
        v74 = 0;
        v75 = 0;
        decodeBCDExtendedAddress();
        CSIPhoneNumber::setBaseNumber();
        if (SHIBYTE(v75) < 0)
          operator delete(v73);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[1]);
      if (!v18)
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 28, v16, v17);
    }
    v19 = qmi::MessageBase::findTlvValue(a2);
    v21 = v19;
    if (v19)
    {
      v22 = v20;
      v72 = v19;
      *(_OWORD *)v70 = 0u;
      v71 = 0u;
      tlv::parseV<cat::tlv::RpAddress>(&v72, v20, v70);
      v23 = v72;
      if (v72)
      {
        CSIPhoneNumber::setTypeOfAddress((CSIPhoneNumber *)v43);
        v73 = 0;
        v74 = 0;
        v75 = 0;
        decodeBCDExtendedAddress();
        CSIPhoneNumber::setBaseNumber();
        if (SHIBYTE(v75) < 0)
          operator delete(v73);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[1]);
      if (!v23)
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 27, v21, v22);
    }
  }
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)v34, (const CSIPhoneNumber *)buf);
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v25, (const CSIPhoneNumber *)v43);
  LODWORD(v70[0]) = v13;
  v24 = *(_QWORD *)(a1 + 64);
  if (!v24)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, _BYTE *, uint64_t *))(*(_QWORD *)v24 + 48))(v24, v70, v34, &v25);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (SHIBYTE(v49) < 0)
    operator delete(v48[1]);
  if (SHIBYTE(v48[0]) < 0)
    operator delete(v47[0]);
  if (SBYTE7(v46) < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[1]);
  if (SHIBYTE(v81) < 0)
    operator delete(*((void **)&v80 + 1));
  if (SBYTE7(v80) < 0)
    operator delete((void *)v79);
  if (SBYTE7(v78) < 0)
    operator delete((void *)v77);
  if ((char)buf[31] < 0)
  {
    v8 = *(void **)&buf[8];
    goto LABEL_77;
  }
}

void sub_216900C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  CSIPhoneNumber::~CSIPhoneNumber(&a43);
  CSIPhoneNumber::~CSIPhoneNumber((void **)(v43 - 208));
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c64_ZTSNSt3__18functionIFv17CallControlResult14CSIPhoneNumberS2_EEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c64_ZTSNSt3__18functionIFv17CallControlResult14CSIPhoneNumberS2_EEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMI_STK_CommandDriver::envelopeSendCallControlVoice(uint64_t a1, unsigned int a2, int *a3, CSIPhoneNumber *a4, uint64_t a5)
{
  os_log_t *v10;
  char *v11;
  char v12;
  NSObject *v13;
  char *v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _OWORD v26[2];
  _QWORD v27[5];
  _BYTE v28[24];
  _BYTE *v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  void *aBlock;
  uint8_t buf[8];
  uint64_t v35;
  void (*v36)(uint64_t, QMIServiceMsg *);
  void *v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v10 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v26, 0, sizeof(v26));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v26);
  v11 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v26, 19);
  if (a2 >= 4)
    v12 = 0;
  else
    v12 = a2;
  *v11 = v12;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v26) = 5;
  v13 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 5;
    _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I Sending Call Control with command type: %d", buf, 8u);
  }
  v14 = qmi::MutableMessageBase::getTLV<cat::tlv::RadioAccessTechnology>(v26);
  v15 = *a3;
  *(_DWORD *)v14 = *a3;
  v16 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I Call Control - RAT : %d", buf, 8u);
  }
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::CallType>(v26) = 0;
  v17 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 67109120;
    _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I Call Control - Call Type : %d", buf, 8u);
  }
  CSIPhoneNumber::getBaseNumber(a4);
  if (SHIBYTE(v36) < 0)
  {
    v18 = v35;
    operator delete(*(void **)buf);
    if (!v18)
      goto LABEL_20;
  }
  else if (!HIBYTE(v36))
  {
    goto LABEL_20;
  }
  v19 = qmi::MutableMessageBase::getTLV<cat::tlv::Address>(v26);
  getAddressTlvFromCSIPhoneNumber<cat::tlv::Address>(a4, (uint64_t)v19);
  v20 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getBaseNumber(a4);
    v21 = SHIBYTE(v36) >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(v30) = 136315138;
    *(_QWORD *)((char *)&v30 + 4) = v21;
    _os_log_impl(&dword_216897000, v20, OS_LOG_TYPE_DEFAULT, "#I Call Control - Destination Number : %s", (uint8_t *)&v30, 0xCu);
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)buf);
  }
LABEL_20:
  *(_QWORD *)&v30 = a1 + 72;
  *((_QWORD *)&v30 + 1) = QMIServiceMsg::create();
  v31 = 25000;
  v32 = 0;
  aBlock = 0;
  v22 = MEMORY[0x24BDAC760];
  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 1174405120;
  v27[2] = ___ZN21QMI_STK_CommandDriver28envelopeSendCallControlVoiceE14STKSimSlotInfoRK20AccessTechnologyTypeRK14CSIPhoneNumberNSt3__18functionIFv17CallControlResultS4_EEE_block_invoke;
  v27[3] = &__block_descriptor_tmp_20_1;
  v27[4] = v10;
  v23 = v28;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v28, a5);
  *(_QWORD *)buf = v22;
  v35 = 0x40000000;
  v36 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SendDecodedEnvelopeCmd8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v37 = &unk_24D5C94F0;
  v38 = v27;
  v24 = _Block_copy(buf);
  aBlock = v24;
  if (*((_QWORD *)&v30 + 1))
  {
    qmi::Client::send();
    v24 = aBlock;
  }
  if (v24)
    _Block_release(v24);
  if (v29 == v28)
  {
    v25 = 4;
    goto LABEL_28;
  }
  if (v29)
  {
    v25 = 5;
    v23 = v29;
LABEL_28:
    (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v26);
}

void sub_2169010DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,char a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a22 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
    v23 = a22;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver28envelopeSendCallControlVoiceE14STKSimSlotInfoRK20AccessTechnologyTypeRK14CSIPhoneNumberNSt3__18functionIFv17CallControlResultS4_EEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t TlvValue;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  _BYTE v28[8];
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  void *v37[2];
  __int128 v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 1);
  if (v3)
  {
    v4 = **(NSObject ***)(a1 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Sending Call Control resulted in error with code %d - %s", buf, 0x12u);
    }
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)v28);
    *(_DWORD *)buf = 0;
    v5 = *(_QWORD *)(a1 + 64);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v5 + 48))(v5, buf, v28);
    if (v36 < 0)
      operator delete(__p);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
    {
      v6 = v29;
LABEL_43:
      operator delete(v6);
      return;
    }
    return;
  }
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_16;
  v10 = TlvValue;
  v11 = v9;
  *(_QWORD *)buf = TlvValue;
  v12 = tlv::parseV<cat::tlv::CallControlResult>((unint64_t *)buf, v9);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v10, v11);
LABEL_16:
    v12 = 0;
  }
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  memset(buf, 0, sizeof(buf));
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)buf);
  if (v12 == 2)
  {
    v13 = qmi::MessageBase::findTlvValue(this);
    v15 = v13;
    if (v13)
    {
      v16 = v14;
      v39 = v13;
      *(_OWORD *)v37 = 0u;
      v38 = 0u;
      tlv::parseV<cat::tlv::Address>(&v39, v14, v37);
      v17 = v39;
      if (v39)
      {
        CSIPhoneNumber::setTypeOfAddress((CSIPhoneNumber *)buf);
        v40 = 0;
        v41 = 0;
        v42 = 0;
        decodeBCDExtendedAddress();
        CSIPhoneNumber::setBaseNumber();
        if (SHIBYTE(v42) < 0)
          operator delete(v40);
      }
      if (SHIBYTE(v38) < 0)
        operator delete(v37[1]);
      if (!v17)
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 17, v15, v16);
    }
  }
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v19, (const CSIPhoneNumber *)buf);
  LODWORD(v37[0]) = v12;
  v18 = *(_QWORD *)(a1 + 64);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v18 + 48))(v18, v37, &v19);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (SHIBYTE(v48) < 0)
    operator delete(*((void **)&v47 + 1));
  if (SBYTE7(v47) < 0)
    operator delete((void *)v46);
  if (SBYTE7(v45) < 0)
    operator delete((void *)v44);
  if ((char)buf[31] < 0)
  {
    v6 = *(void **)&buf[8];
    goto LABEL_43;
  }
}

void sub_216901490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a49 < 0)
    operator delete(__p);
  CSIPhoneNumber::~CSIPhoneNumber((void **)(v49 - 208));
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c61_ZTSNSt3__18functionIFv17CallControlResult14CSIPhoneNumberEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c61_ZTSNSt3__18functionIFv17CallControlResult14CSIPhoneNumberEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMI_STK_CommandDriver::envelopeMTCall(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, CSIPhoneNumber *a5)
{
  os_log_t *v9;
  char *v10;
  char v11;
  NSObject *v12;
  std::string::size_type size;
  std::string *v14;
  NSObject *v15;
  std::string *p_str;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  __int128 *v20;
  void *v21;
  _QWORD v22[5];
  _OWORD v23[2];
  std::string __str;
  __int128 v25;
  int v26;
  uint64_t v27;
  void *aBlock;
  __int128 buf;
  void (*v30)(uint64_t, uint64_t);
  void *v31;
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(&__str, 0, sizeof(__str));
  memset(v23, 0, sizeof(v23));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
  v10 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v23, 19);
  if (a2 >= 4)
    v11 = 0;
  else
    v11 = a2;
  *v10 = v11;
  *(_DWORD *)qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v23) = 9;
  v12 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&buf = 0x904000100;
    _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending MT Call Event with command type: %d", (uint8_t *)&buf, 8u);
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    v14 = (std::string *)qmi::MutableMessageBase::getTLV<cat::tlv::TransactionID>(v23);
    std::string::operator=(v14, &__str);
    v15 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = p_str;
      _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#I MT Call Event - TransactionID : %s", (uint8_t *)&buf, 0xCu);
    }
  }
  CSIPhoneNumber::getBaseNumber(a5);
  if (SHIBYTE(v30) < 0)
  {
    v17 = *((_QWORD *)&buf + 1);
    operator delete((void *)buf);
    if (!v17)
      goto LABEL_23;
  }
  else if (!HIBYTE(v30))
  {
    goto LABEL_23;
  }
  v18 = qmi::MutableMessageBase::getTLV<cat::tlv::Address>(v23);
  getAddressTlvFromCSIPhoneNumber<cat::tlv::Address>(a5, (uint64_t)v18);
  v19 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getBaseNumber(a5);
    v20 = SHIBYTE(v30) >= 0 ? &buf : (__int128 *)buf;
    LODWORD(v25) = 136315138;
    *(_QWORD *)((char *)&v25 + 4) = v20;
    _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I MT Call Event - Calling Number : %s", (uint8_t *)&v25, 0xCu);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)buf);
  }
LABEL_23:
  *(_QWORD *)&v25 = a1 + 72;
  *((_QWORD *)&v25 + 1) = QMIServiceMsg::create();
  v26 = 25000;
  v27 = 0;
  aBlock = 0;
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 0x40000000;
  v22[2] = ___ZN21QMI_STK_CommandDriver14envelopeMTCallE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjRK14CSIPhoneNumber_block_invoke;
  v22[3] = &__block_descriptor_tmp_21_2;
  v22[4] = v9;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v30 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v31 = &unk_24D5C7FB0;
  v32 = v22;
  v21 = _Block_copy(&buf);
  aBlock = v21;
  if (*((_QWORD *)&v25 + 1))
  {
    qmi::Client::send();
    v21 = aBlock;
  }
  if (v21)
    _Block_release(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_216901854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a26);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::stkTransactionId(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v9[4];
  void *__p[2];
  __int128 v11;
  __int128 v12;
  _OWORD v13[9];
  uint64_t v14;

  v14 = 0;
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9 + 8, a1);
  *(_QWORD *)&v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)&v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v9[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v11) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199FEA70](v13);
}

void sub_2169019CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver14envelopeMTCallE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjRK14CSIPhoneNumber_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending MT Call Event resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending MT Call Event resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::envelopeCallConnected(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  os_log_t *v9;
  char *v10;
  char v11;
  char *v12;
  int v13;
  NSObject *v14;
  std::string::size_type size;
  std::string *v16;
  NSObject *v17;
  std::string *p_str;
  void *v19;
  _QWORD v20[6];
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *aBlock;
  std::string __str;
  _OWORD v26[2];
  __int128 buf;
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v26, 0, sizeof(v26));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v26);
  v10 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v26, 19);
  if (a2 >= 4)
    v11 = 0;
  else
    v11 = a2;
  *v10 = v11;
  v12 = qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v26);
  if (a5)
    v13 = 11;
  else
    v13 = 10;
  *(_DWORD *)v12 = v13;
  v14 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v13;
    _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Sending Call Connected Event with command type: %d", (uint8_t *)&buf, 8u);
  }
  memset(&__str, 0, sizeof(__str));
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    v16 = (std::string *)qmi::MutableMessageBase::getTLV<cat::tlv::TransactionID>(v26);
    std::string::operator=(v16, &__str);
    v17 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = p_str;
      _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I Call Connected Event - TransactionID : %s", (uint8_t *)&buf, 0xCu);
    }
  }
  v20[5] = a1 + 72;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  aBlock = 0;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = ___ZN21QMI_STK_CommandDriver21envelopeCallConnectedE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjb_block_invoke;
  v20[3] = &__block_descriptor_tmp_22_1;
  v20[4] = v9;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v28 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v29 = &unk_24D5C7FB0;
  v30 = v20;
  v19 = _Block_copy(&buf);
  aBlock = v19;
  if (v21)
  {
    qmi::Client::send();
    v19 = aBlock;
  }
  if (v19)
    _Block_release(v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v26);
}

void sub_216901D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a15);
  if (a25 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a26);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver21envelopeCallConnectedE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending Call Connected Event resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending Call Connected Event resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::envelopeCallDisconnected(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  os_log_t *v9;
  char *v10;
  char v11;
  char *v12;
  int v13;
  NSObject *v14;
  std::string::size_type size;
  std::string *v16;
  NSObject *v17;
  std::string *p_str;
  void *v19;
  _QWORD v20[6];
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *aBlock;
  std::string __str;
  _OWORD v26[2];
  __int128 buf;
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  memset(v26, 0, sizeof(v26));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v26);
  v10 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(v26, 19);
  if (a2 >= 4)
    v11 = 0;
  else
    v11 = a2;
  *v10 = v11;
  v12 = qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(v26);
  if (a5)
    v13 = 12;
  else
    v13 = 13;
  *(_DWORD *)v12 = v13;
  v14 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v13;
    _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Sending Call Disconnected Event with command type: %d", (uint8_t *)&buf, 8u);
  }
  memset(&__str, 0, sizeof(__str));
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    v16 = (std::string *)qmi::MutableMessageBase::getTLV<cat::tlv::TransactionID>(v26);
    std::string::operator=(v16, &__str);
    v17 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = p_str;
      _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I Call Disconnected Event - TransactionID : %s", (uint8_t *)&buf, 0xCu);
    }
  }
  v20[5] = a1 + 72;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  aBlock = 0;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = ___ZN21QMI_STK_CommandDriver24envelopeCallDisconnectedE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjb_block_invoke;
  v20[3] = &__block_descriptor_tmp_23_0;
  v20[4] = v9;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v28 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v29 = &unk_24D5C7FB0;
  v30 = v20;
  v19 = _Block_copy(&buf);
  aBlock = v19;
  if (v21)
  {
    qmi::Client::send();
    v19 = aBlock;
  }
  if (v19)
    _Block_release(v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v26);
}

void sub_2169020D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a15);
  if (a25 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a26);
  _Unwind_Resume(a1);
}

void ___ZN21QMI_STK_CommandDriver24envelopeCallDisconnectedE14STKSimSlotInfoRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 32);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Sending Call Disconnected Event resulted in error with code %d - %s";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Sending Call Disconnected Event resulted in success";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void QMI_STK_CommandDriver::sendEventConfirmation(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  os_log_t *v13;
  char *v14;
  char v15;
  const void **v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  const char *v34;
  const void **v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  const char *v53;
  void *v54;
  _QWORD v55[6];
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *aBlock;
  void *__p[2];
  __int128 v64;
  __int128 buf;
  void (*v66)(uint64_t, uint64_t);
  void *v67;
  _QWORD *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v13 = (os_log_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  *(_OWORD *)__p = 0u;
  v64 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v14 = qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(__p, 18);
  if (a2 >= 4)
    v15 = 0;
  else
    v15 = a2;
  *v14 = v15;
  if (a3)
  {
    v16 = (const void **)__p[1];
    if (__p[1] != (void *)v64)
    {
      while (*((_BYTE *)*v16 + 8) != 16)
      {
        if (++v16 == (const void **)v64)
          goto LABEL_12;
      }
    }
    if (v16 == (const void **)v64)
    {
LABEL_12:
      v19 = operator new();
      v20 = v19;
      *(_WORD *)(v19 + 8) = 16;
      *(_QWORD *)v19 = &off_24D5C96C8;
      v21 = v64;
      if ((unint64_t)v64 >= *((_QWORD *)&v64 + 1))
      {
        v23 = (uint64_t)(v64 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v24 = (uint64_t)(*((_QWORD *)&v64 + 1) - (unint64_t)__p[1]) >> 2;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if (*((_QWORD *)&v64 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v64 + 8, v25);
        else
          v26 = 0;
        v27 = (uint64_t *)&v26[8 * v23];
        v28 = &v26[8 * v25];
        *v27 = v20;
        v22 = v27 + 1;
        v30 = (char *)__p[1];
        v29 = (char *)v64;
        if ((void *)v64 != __p[1])
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v27 = v31;
          }
          while (v29 != v30);
          v29 = (char *)__p[1];
        }
        __p[1] = v27;
        *(_QWORD *)&v64 = v22;
        *((_QWORD *)&v64 + 1) = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v64 = v19;
        v22 = (_QWORD *)(v21 + 8);
      }
      v18 = (_BYTE *)(v20 + 9);
      *(_QWORD *)&v64 = v22;
    }
    else
    {
      if (!v17)
        __cxa_bad_cast();
      v18 = v17 + 9;
    }
    v32 = *a3;
    *v18 = v32;
    v33 = *v13;
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      v34 = "Accepted";
      if (!v32)
        v34 = "Denied";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v34;
      _os_log_impl(&dword_216897000, v33, OS_LOG_TYPE_DEFAULT, "#I Adding User Confirmation: %s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a4)
  {
    v35 = (const void **)__p[1];
    if (__p[1] != (void *)v64)
    {
      while (*((_BYTE *)*v35 + 8) != 17)
      {
        if (++v35 == (const void **)v64)
          goto LABEL_41;
      }
    }
    if (v35 == (const void **)v64)
    {
LABEL_41:
      v38 = operator new();
      v39 = v38;
      *(_WORD *)(v38 + 8) = 17;
      *(_QWORD *)v38 = &off_24D5C9718;
      v40 = v64;
      if ((unint64_t)v64 >= *((_QWORD *)&v64 + 1))
      {
        v42 = (uint64_t)(v64 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v43 = (uint64_t)(*((_QWORD *)&v64 + 1) - (unint64_t)__p[1]) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if (*((_QWORD *)&v64 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v64 + 8, v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v42];
        v47 = &v45[8 * v44];
        *v46 = v39;
        v41 = v46 + 1;
        v49 = (char *)__p[1];
        v48 = (char *)v64;
        if ((void *)v64 != __p[1])
        {
          do
          {
            v50 = *((_QWORD *)v48 - 1);
            v48 -= 8;
            *--v46 = v50;
          }
          while (v48 != v49);
          v48 = (char *)__p[1];
        }
        __p[1] = v46;
        *(_QWORD *)&v64 = v41;
        *((_QWORD *)&v64 + 1) = v47;
        if (v48)
          operator delete(v48);
      }
      else
      {
        *(_QWORD *)v64 = v38;
        v41 = (_QWORD *)(v40 + 8);
      }
      v37 = (_BYTE *)(v39 + 9);
      *(_QWORD *)&v64 = v41;
    }
    else
    {
      if (!v36)
        __cxa_bad_cast();
      v37 = v36 + 9;
    }
    v51 = *a4;
    *v37 = v51;
    v52 = *v13;
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      v53 = "Displayed";
      if (!v51)
        v53 = "Not Displayed";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v53;
      _os_log_impl(&dword_216897000, v52, OS_LOG_TYPE_DEFAULT, "#I Adding Icon Display: %s", (uint8_t *)&buf, 0xCu);
    }
  }
  v58 = a1 + 72;
  v59 = QMIServiceMsg::create();
  v60 = 25000;
  v61 = 0;
  aBlock = 0;
  v55[0] = MEMORY[0x24BDAC760];
  v55[1] = 0x40000000;
  v55[2] = ___ZN21QMI_STK_CommandDriver21sendEventConfirmationE14STKSimSlotInfoPbS1_jh16ProactiveCommand20NotificationResponse26SendSessionCompletionEvent_block_invoke;
  v55[3] = &__block_descriptor_tmp_24_1;
  v55[4] = a1;
  v55[5] = v13;
  v56 = a2;
  v57 = a9;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v66 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  v67 = &unk_24D5C7FB0;
  v68 = v55;
  v54 = _Block_copy(&buf);
  aBlock = v54;
  if (v59)
  {
    qmi::Client::send();
    v54 = aBlock;
  }
  if (v54)
    _Block_release(v54);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216902700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_216902730()
{
  JUMPOUT(0x216902728);
}

void sub_216902738(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x216902728);
}

void ___ZN21QMI_STK_CommandDriver21sendEventConfirmationE14STKSimSlotInfoPbS1_jh16ProactiveCommand20NotificationResponse26SendSessionCompletionEvent_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  os_log_t *v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(os_log_t **)(a1 + 40);
  v6 = *v5;
  v7 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v13[0] = 67109378;
      v13[1] = v3;
      v14 = 2080;
      v15 = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Event Confirmation resulted in error with code %d - %s", (uint8_t *)v13, 0x12u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 52);
    v10 = v4;
    v11 = v5;
    v12 = 0;
  }
  else
  {
    if (v7)
    {
      LOWORD(v13[0]) = 0;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending Event Confirmation resulted in success", (uint8_t *)v13, 2u);
      v5 = *(os_log_t **)(a1 + 40);
    }
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 52);
    v10 = v4;
    v11 = v5;
    v12 = 1;
  }
  QMI_STK_CommandDriver::sendStkSessionEvent(v10, v11, v8, v9, 1, v12);
}

void QMI_STK_CommandDriver::~QMI_STK_CommandDriver(QMI_STK_CommandDriver *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5C78B0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  qmi::Client::~Client((QMI_STK_CommandDriver *)((char *)this + 72));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  STK_CommandDriver::~STK_CommandDriver(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5C78B0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  qmi::Client::~Client((QMI_STK_CommandDriver *)((char *)this + 72));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  STK_CommandDriver::~STK_CommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::DecodedEventReportReqMask>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::DecodedEventReportReqMask>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::DecodedEventReportReqMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::DecodedEventReportReqMask>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C7CE8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::SlotMask>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SlotMask>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::SlotMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SlotMask>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C7D38;
  return result;
}

void std::vector<SelectionItem>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        SelectionItem::~SelectionItem((SelectionItem *)(v3 - 40));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        SelectionItem::~SelectionItem((SelectionItem *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::shared_ptr<QMI_STK_CommandDriver>::shared_ptr[abi:ne180100]<QMI_STK_CommandDriver,std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5C7D70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216902C20(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver*)#1}::operator() const(QMI_STK_CommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216902C40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMI_STK_CommandDriver *,std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver *)#1},std::allocator<QMI_STK_CommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMI_STK_CommandDriver *,std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver *)#1},std::allocator<QMI_STK_CommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver*)#1}::operator() const(QMI_STK_CommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMI_STK_CommandDriver *,std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver *)#1},std::allocator<QMI_STK_CommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMI_STK_CommandDriver> ctu::SharedSynchronizable<QMI_STK_CommandDriver>::make_shared_ptr<QMI_STK_CommandDriver>(QMI_STK_CommandDriver*)::{lambda(QMI_STK_CommandDriver*)#1}::operator() const(QMI_STK_CommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5C7DD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5C7DD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<char const* (*)(subscriber::HardwareSimSlot),std::allocator<char const* (*)(subscriber::HardwareSimSlot)>,char const* const ()(subscriber::HardwareSimSlot)>::target_type()
{
}

uint64_t std::__function::__value_func<char const* const ()(subscriber::HardwareSimSlot)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void SimInstanceLoggable<QMI_STK_CommandDriver,ctu::OsLogLogger,subscriber::HardwareSimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMI_STK_CommandDriver,ctu::OsLogLogger,subscriber::HardwareSimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

uint64_t SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::HardwareSimSlot,std::function<char const* const ()(subscriber::HardwareSimSlot)>>::~SimInstanceLoggerDefault(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5C7ED0;
  MEMORY[0x2199FDF6C](a1 + 32);
  std::__tree<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>>>::destroy(*(_QWORD **)(a1 + 16));
  return a1;
}

void SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::HardwareSimSlot,std::function<char const* const ()(subscriber::HardwareSimSlot)>>::~SimInstanceLoggerDefault(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5C7ED0;
  MEMORY[0x2199FDF6C](a1 + 32);
  std::__tree<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>>>::destroy(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::HardwareSimSlot,std::function<char const* const ()(subscriber::HardwareSimSlot)>>::getLoggerForSlot(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return a1 + 32;
  v3 = a1 + 16;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 16 && *(_DWORD *)(v3 + 32) <= a2)
    return v3 + 40;
  else
    return a1 + 32;
}

void std::__tree<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::HardwareSimSlot,std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>,std::less<subscriber::HardwareSimSlot>,true>,std::allocator<std::__value_type<subscriber::HardwareSimSlot,ctu::OsLogLogger>>>::destroy(a1[1]);
    MEMORY[0x2199FDF6C](a1 + 5);
    operator delete(a1);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMI_STK_CommandDriver>::execute_wrapped<QMI_STK_CommandDriver::start(void)::$_0>(QMI_STK_CommandDriver::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMI_STK_CommandDriver::start(void)::$_0,dispatch_queue_s *::default_delete<QMI_STK_CommandDriver::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t **v5;
  uint8_t buf[16];

  v5 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  qmi::Client::start((qmi::Client *)(v2 + 72));
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_216902FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMI_STK_CommandDriver>::execute_wrapped<QMI_STK_CommandDriver::bootstrap(dispatch::group_session)::$_0>(QMI_STK_CommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMI_STK_CommandDriver::bootstrap(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMI_STK_CommandDriver::bootstrap(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  capabilities::ct *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37[2];
  void (*v38)(_QWORD *);
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint8_t buf[8];
  uint64_t v45;
  __int128 v46;
  void **v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *__p[2];
  void (*v52)(uint64_t, std::string::size_type *);
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  dispatch_object_t v58;

  v1 = *a1;
  v35 = a1;
  v36 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "QMI_STK_CommandDriver");
  v4 = *(NSObject **)(v2 + 24);
  v58 = v4;
  if (v4)
    dispatch_retain(v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "cat");
  v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v5 || (v6 = *(_QWORD *)(v2 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v56 = 0;
  v57 = 0;
  v13 = std::__shared_weak_count::lock(v8);
  v14 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  else
  {
    v6 = 0;
  }
  v17 = v57;
  v56 = v6;
  v57 = v14;
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  Registry::getServerConnection(*(Registry **)(v2 + 56));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v2 + 88, &v46);
  qmi::Client::~Client((qmi::Client *)buf);
  v20 = v55;
  if (v55)
  {
    v21 = (unint64_t *)&v55->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  if (v58)
    dispatch_release(v58);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  v23 = (void *)MEMORY[0x24BDAC760];
  __p[0] = (void *)MEMORY[0x24BDAC760];
  __p[1] = (void *)0x40000000;
  v52 = ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v53 = &__block_descriptor_tmp_35_1;
  v54 = v2;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v45 = 0x40000000;
  *(_QWORD *)&v46 = ___ZNK3qmi6Client13setIndHandlerIRKN3cat14SetEventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v46 + 1) = &unk_24D5C7F88;
  v47 = __p;
  qmi::Client::setIndHandler();
  v24 = operator new(4uLL);
  *v24 = 1;
  if (capabilities::ct::supportsGemini((capabilities::ct *)v24))
  {
    v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(2uLL);
    v27 = v26;
    v25[1] = 2;
    *v25 = *v24;
    operator delete(v24);
    v29 = (uint64_t)(v25 + 2);
    if (!capabilities::ct::supportsHydra(v28))
    {
LABEL_42:
      v24 = v25;
      goto LABEL_44;
    }
    if (v27 >= 3)
    {
      v25[2] = 3;
      v29 = (uint64_t)(v25 + 3);
      goto LABEL_42;
    }
    v31 = 3;
    if ((unint64_t)((4 * v27) >> 1) > 3)
      v31 = (4 * v27) >> 1;
    if ((unint64_t)(4 * v27) >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v32);
    v33 = 0;
    v34 = v32 + 8;
    *(_DWORD *)(v32 + 8) = 3;
    v29 = v32 + 12;
    do
    {
      *(_DWORD *)(v34 + v33 * 4 - 4) = v25[v33 + 1];
      --v33;
    }
    while (v33 != -2);
    operator delete(v25);
    v24 = (_DWORD *)(v34 - 8);
  }
  else
  {
    v29 = (uint64_t)(v24 + 1);
  }
LABEL_44:
  *(_QWORD *)buf = v23;
  v45 = 1174405120;
  *(_QWORD *)&v46 = ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  *((_QWORD *)&v46 + 1) = &__block_descriptor_tmp_37_2;
  v47 = (void **)v2;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  std::vector<subscriber::HardwareSimSlot>::__init_with_size[abi:ne180100]<subscriber::HardwareSimSlot*,subscriber::HardwareSimSlot*>(&v48, v24, v29, (v29 - (uint64_t)v24) >> 2);
  qmi::Client::setHandler();
  v37[0] = v23;
  v37[1] = (void *)1174405120;
  v38 = ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke_38;
  v39 = &__block_descriptor_tmp_39_0;
  v40 = v2;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::vector<subscriber::HardwareSimSlot>::__init_with_size[abi:ne180100]<subscriber::HardwareSimSlot*,subscriber::HardwareSimSlot*>(&v41, v24, v29, (v29 - (uint64_t)v24) >> 2);
  qmi::Client::setHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 72));
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  operator delete(v24);
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v36);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v35);
}

void sub_21690349C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  operator delete(v35);
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1, std::string::size_type *this)
{
  uint64_t v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  os_log_t *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  NSObject *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  os_log_t *v38;
  std::string::size_type v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unint64_t *v47;
  unint64_t v48;
  os_log_t *v49;
  std::string::size_type v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int *v55;
  int *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  NSObject *v61;
  NSObject *v62;
  char *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string::size_type v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  unint64_t *v71;
  unint64_t v72;
  std::string::size_type v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  std::string::size_type v81;
  std::string::size_type v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::string::size_type v86;
  uint64_t v87;
  std::string::size_type v88;
  std::string::size_type v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::string::size_type v93;
  uint64_t v94;
  std::string::size_type v95;
  std::string::size_type v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string::size_type v103;
  unint64_t *v104;
  unint64_t v105;
  std::string::size_type v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t ProactiveCommand;
  std::string::size_type v114;
  std::string::size_type v115;
  unint64_t *v116;
  unint64_t v117;
  std::string::size_type v118;
  uint64_t v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string::size_type v122;
  unint64_t *v123;
  unint64_t v124;
  std::string::size_type v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  std::string::size_type v131;
  std::string::size_type v132;
  unint64_t *v133;
  unint64_t v134;
  std::string::size_type v135;
  uint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  unint64_t *v139;
  unint64_t v140;
  std::string::size_type v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  std::string *v149;
  capabilities::ct *v150;
  std::mutex *ServiceMap;
  uint64_t v152;
  uint64_t v153;
  BOOL *v154;
  CFTypeID v155;
  const __CFBoolean *v156;
  int v157;
  NSObject *v158;
  char v159;
  std::string::size_type v160;
  std::string::size_type v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::string::size_type v165;
  uint64_t v166;
  std::string::size_type v167;
  std::string::size_type v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  NSObject **v172;
  uint64_t v173;
  int v174;
  std::string::value_type v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  std::string::size_type v179;
  std::string::size_type v180;
  unint64_t *v181;
  unint64_t v182;
  std::string::size_type v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  NSObject **v194;
  int v195;
  std::string::value_type v196;
  NSObject *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  NSObject **v204;
  int v205;
  std::string::value_type v206;
  NSObject *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  NSObject **v214;
  int v215;
  std::string::value_type v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219;
  std::string::size_type v220;
  std::string::size_type v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  std::string::size_type v225;
  uint64_t v226;
  std::string::size_type v227;
  std::string::size_type v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  std::string::size_type v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  NSObject **v239;
  int v240;
  std::string::value_type v241;
  NSObject **v242;
  int v243;
  std::string::value_type v244;
  NSObject **v245;
  int v246;
  std::string::value_type v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  int v254;
  std::string::size_type v255;
  NSObject **v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  NSObject **v261;
  int v262;
  std::string::value_type v263;
  NSObject **v264;
  int v265;
  std::string::value_type v266;
  NSObject **v267;
  int v268;
  std::string::value_type v269;
  NSObject **v270;
  int v271;
  std::string::value_type v272;
  NSObject **v273;
  int v274;
  std::string::value_type v275;
  NSObject *v276;
  uint64_t v277;
  uint64_t v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  NSObject *v282;
  uint64_t v283;
  uint64_t v284;
  NSObject *v285;
  uint64_t v286;
  uint64_t v287;
  NSObject *v288;
  uint64_t v289;
  uint64_t v290;
  NSObject *v291;
  uint64_t v292;
  uint64_t v293;
  NSObject **v294;
  int v295;
  std::string::value_type v296;
  NSObject *v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  uint64_t v301;
  uint64_t v302;
  NSObject *v303;
  uint64_t v304;
  uint64_t v305;
  NSObject *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  NSObject **v310;
  uint64_t v311;
  int v312;
  std::string::value_type v313;
  NSObject *v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  int *v326;
  int *v327;
  unsigned __int8 *v328;
  int v329;
  int v330;
  int v331;
  NSObject *v332;
  NSObject *v333;
  char *v334;
  std::string::size_type size;
  std::string *v336;
  __int128 v337;
  std::string::size_type v338;
  uint64_t v339;
  int v340;
  NSObject **v341;
  uint64_t v342;
  int v343;
  std::string::value_type v344;
  NSObject *v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  int v357;
  int v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  std::string::size_type v365;
  NSObject **v366;
  NSObject *v367;
  uint64_t v368;
  uint64_t v369;
  NSObject **v370;
  int v371;
  std::string::value_type v372;
  NSObject *v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  int v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  NSObject **v395;
  int v396;
  std::string::value_type v397;
  NSObject *v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  std::string::size_type v402;
  NSObject **v403;
  NSObject *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  NSObject **v413;
  int v414;
  std::string::value_type v415;
  NSObject *v416;
  uint64_t v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  int v427;
  NSObject **v428;
  int v429;
  std::string::value_type v430;
  NSObject *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  std::string::size_type v441;
  std::string::size_type v442;
  std::string::size_type v443;
  uint8_t *v444;
  std::string v445[4];
  _OWORD v446[2];
  _OWORD v447[5];
  uint64_t v448;
  _BYTE v449[32];
  uint8_t *v450;
  std::string::size_type v451;
  std::string v452;
  _OWORD v453[2];
  uint64_t v454;
  std::string v455;
  void *v456;
  _BYTE *v457;
  uint8_t v458[8];
  __int16 v459;
  char *v460;
  __int16 v461;
  int v462;
  _BYTE cf[32];
  std::string v464;
  uint64_t v465;
  __int128 v466;
  uint64_t v467;
  __int128 v468;
  uint64_t v469;
  __int128 v470;
  char v471;
  uint8_t buf[16];
  _BYTE v473[160];
  __int128 v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;
  uint64_t v478;

  v478 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)this);
  if (!TlvValue)
    goto LABEL_7;
  v6 = TlvValue;
  v7 = v5;
  *(_QWORD *)buf = TlvValue;
  v8 = tlv::parseV<cat::tlv::Slot>((unint64_t *)buf, v5);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 80, v6, v7);
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v9 = (v8 - 1);
  if (v9 < 3)
    v10 = v9 + 1;
  else
    v10 = 0;
LABEL_8:
  v11 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
  v12 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Received Event Report Indication from baseband", buf, 2u);
  }
  v13 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)this);
  v15 = v13;
  if (v13)
  {
    v16 = v14;
    v440 = v13;
    v17 = tlv::parseV<cat::tlv::DecodedHeaderId>((unint64_t *)&v440, v14);
    if (!v440)
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 27, v15, v16);
      return;
    }
    v18 = v17;
    v19 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v18;
      _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I Proactive command being carried in indication is %d", buf, 8u);
    }
    switch(v18)
    {
      case 1u:
        v20 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v20;
        v21 = this[2];
        v455.__r_.__value_.__r.__words[2] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v24 = v3;
        v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        memset(v445, 0, 40);
        v444 = (uint8_t *)(MEMORY[0x24BDC4590] + 16);
        v445[1].__r_.__value_.__r.__words[2] = -1;
        v445[2].__r_.__value_.__l.__size_ = -1;
        v445[2].__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v26 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z13getTextStringIN3cat11DisplayText10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C80A0;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v25;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::TextString,void({block_pointer}&)(cat::tlv::TextString const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z15getHighPriorityIN3cat11DisplayText10IndicationEE8PriorityPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C80C8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v25;
        v248 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v250 = v248;
        if (v248)
        {
          v251 = v249;
          *(_QWORD *)v449 = v248;
          LODWORD(v453[0]) = tlv::parseV<cat::tlv::HighPriority>((unint64_t *)v449, v249);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)v453);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 29, v250, v251);
        }
        v358 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v358;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getUserControlIN3cat11DisplayText10IndicationEE11UserControlPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C80F0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v25;
        v359 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v361 = v359;
        if (v359)
        {
          v362 = v360;
          *(_QWORD *)v449 = v359;
          LODWORD(v453[0]) = tlv::parseV<cat::tlv::UserControl>((unint64_t *)v449, v360);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)v453);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 30, v361, v362);
        }
        v381 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[1].__r_.__value_.__r.__words[2]) = v381;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z20getImmediateResponseIN3cat11DisplayText10IndicationEE17ImmediateResponsePKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8118;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v25;
        v382 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v384 = v382;
        if (v382)
        {
          v385 = v383;
          *(_QWORD *)v449 = v382;
          LODWORD(v453[0]) = tlv::parseV<cat::tlv::ImmediateResponseRequired>((unint64_t *)v449, v383);
          if (*(_QWORD *)v449)
            ___Z20getImmediateResponseIN3cat11DisplayText10IndicationEE17ImmediateResponsePKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)buf, (int *)v453);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 63, v384, v385);
        }
        v401 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[2].__r_.__value_.__l.__data_) = v401;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getDurationIN3cat11DisplayText10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8140;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v25;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::Duration,void({block_pointer}&)(cat::tlv::Duration const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v402 = *(int *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[2].__r_.__value_.__l.__size_ = v402;
        v403 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 16))(*(_QWORD *)(v24 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat11DisplayText10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8168;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v403;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LODWORD(v402) = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v402;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v26;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat11DisplayText10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8190;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v403;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LOBYTE(v402) = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v402;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = MEMORY[0x24BDC4590] + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
        *(_QWORD *)&v473[56] = v445[2].__r_.__value_.__l.__size_;
        *(_DWORD *)buf = 1;
        v404 = *v403;
        if (os_log_type_enabled(v404, OS_LOG_TYPE_DEFAULT))
        {
          v405 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v405;
          _os_log_impl(&dword_216897000, v404, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v406 = *(_QWORD *)(v24 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v406 + 24))(v406, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        DisplayText::~DisplayText((DisplayText *)&v444);
        goto LABEL_491;
      case 2u:
        v102 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v102;
        v103 = this[2];
        v455.__r_.__value_.__r.__words[2] = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v106 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        v107 = MEMORY[0x24BDC4650];
        v444 = (uint8_t *)(MEMORY[0x24BDC4650] + 16);
        memset(v445, 0, 40);
        v445[1].__r_.__value_.__r.__words[2] = -1;
        v445[2].__r_.__value_.__r.__words[0] = -1;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v108 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z13getTextStringIN3cat8GetInkey10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C82F8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v106;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::TextString,void({block_pointer}&)(cat::tlv::TextString const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        v252 = v3;
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z17getResponseFormatIN3cat8GetInkey10IndicationEE14ResponseFormatPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8320;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v106;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::ResponseFormat,void({block_pointer}&)(cat::tlv::ResponseFormat const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v253 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v253;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getHelpAvailabilityIN3cat8GetInkey10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8348;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v106;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::HelpAvailable,void({block_pointer}&)(cat::tlv::HelpAvailable const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v254 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[1].__r_.__value_.__r.__words[2]) = v254;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getDurationIN3cat8GetInkey10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8370;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v106;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::Duration,void({block_pointer}&)(cat::tlv::Duration const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v255 = *(int *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[2].__r_.__value_.__r.__words[0] = v255;
        v256 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v252 + 48) + 16))(*(_QWORD *)(v252 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat8GetInkey10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8398;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v256;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LODWORD(v255) = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v255;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat8GetInkey10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C83C0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v256;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LOBYTE(v255) = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v255;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v107 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
        *(_DWORD *)buf = 2;
        v303 = *v256;
        if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
        {
          v304 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v304;
          _os_log_impl(&dword_216897000, v303, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v305 = *(_QWORD *)(v252 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v305 + 24))(v305, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        GetInkey::~GetInkey((GetInkey *)&v444);
        goto LABEL_491;
      case 3u:
        v27 = this[1];
        *(_QWORD *)&v453[0] = *this;
        *((_QWORD *)&v453[0] + 1) = v27;
        v28 = this[2];
        *(_QWORD *)&v453[1] = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v453);
        v31 = v3;
        v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        v445[2].__r_.__value_.__r.__words[0] = 0;
        memset(&v445[2].__r_.__value_.__r.__words[2], 0, 32);
        memset(v445, 0, 40);
        v444 = (uint8_t *)(MEMORY[0x24BDC4658] + 16);
        v445[1].__r_.__value_.__r.__words[2] = -1;
        v445[2].__r_.__value_.__l.__size_ = -1;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v33 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z13getTextStringIN3cat8GetInput10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C83E8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v32;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::TextString,void({block_pointer}&)(cat::tlv::TextString const&)>((qmi::MessageBase *)v453, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z17getResponseFormatIN3cat8GetInput10IndicationEE14ResponseFormatPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8410;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v32;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::ResponseFormat,void({block_pointer}&)(cat::tlv::ResponseFormat const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v234 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v234;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z24getResponsePackingFormatIN3cat8GetInput10IndicationEE21ResponsePackingFormatPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8438;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v32;
        v235 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v237 = v235;
        if (v235)
        {
          v238 = v236;
          *(_QWORD *)v449 = v235;
          LODWORD(v455.__r_.__value_.__l.__data_) = tlv::parseV<cat::tlv::ResponsePackingFormat>((unint64_t *)v449, v236);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)&v455);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 35, v237, v238);
        }
        v376 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[1].__r_.__value_.__r.__words[2]) = v376;
        v445[2].__r_.__value_.__s.__data_[16] = 1;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)v449 = 0;
        *(_QWORD *)&v449[8] = v449;
        *(_QWORD *)&v449[16] = 0x2000000000;
        *(_DWORD *)&v449[24] = -1;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z17getResponseLengthIN3cat8GetInput10IndicationEENSt3__14pairIiiEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8460;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v449;
        *(_QWORD *)&v473[32] = v32;
        v377 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v379 = v377;
        if (v377)
        {
          v380 = v378;
          v455.__r_.__value_.__r.__words[0] = v377;
          *(_WORD *)v458 = tlv::parseV<cat::tlv::ResponseLength>((unint64_t *)&v455, v378);
          if (v455.__r_.__value_.__r.__words[0])
            (*(void (**)(uint64_t, unsigned __int8 *))v473)((uint64_t)buf, v458);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 36, v379, v380);
        }
        v386 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        v387 = *(_DWORD *)(*(_QWORD *)&v449[8] + 24);
        _Block_object_dispose(v449, 8);
        _Block_object_dispose(cf, 8);
        v445[2].__r_.__value_.__r.__words[0] = __PAIR64__(v387, v386);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getHelpAvailabilityIN3cat8GetInput10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8488;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v32;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::HelpAvailable,void({block_pointer}&)(cat::tlv::HelpAvailable const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v388 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[2].__r_.__value_.__r.__words[1]) = v388;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z16getShowUserInputIN3cat8GetInput10IndicationEE13ShowUserInputPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C84B0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v32;
        v389 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v391 = v389;
        if (v389)
        {
          v392 = v390;
          *(_QWORD *)v449 = v389;
          LODWORD(v455.__r_.__value_.__l.__data_) = tlv::parseV<cat::tlv::ShowUserInput>((unint64_t *)v449, v390);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)&v455);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 37, v391, v392);
        }
        v407 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[2].__r_.__value_.__r.__words[1]) = v407;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v33;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z14getDefaultTextIN3cat8GetInput10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C84D8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v32;
        v408 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v410 = v408;
        if (v408)
        {
          v411 = v409;
          *(_QWORD *)v458 = v408;
          memset(v449, 0, sizeof(v449));
          tlv::parseV<cat::tlv::DefaultText>((unint64_t *)v458, v409, v449);
          v412 = *(_QWORD *)v458;
          if (*(_QWORD *)v458)
            ___Z14getDefaultTextIN3cat8GetInput10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)cf, v449);
          if ((v449[31] & 0x80000000) != 0)
            operator delete(*(void **)&v449[8]);
          if (!v412)
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 62, v410, v411);
        }
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
          std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        else
          v455 = *(std::string *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (SHIBYTE(v445[3].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445[3].__r_.__value_.__l.__data_);
        v445[3] = v455;
        v413 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v31 + 48) + 16))(*(_QWORD *)(v31 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat8GetInput10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8500;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v413;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v414 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v414;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v33;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat8GetInput10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8528;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v413;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v415 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v415;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = MEMORY[0x24BDC4658] + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v473[49] = *(_OWORD *)((char *)&v445[2].__r_.__value_.__l.__data_ + 1);
        if (SHIBYTE(v445[3].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v473[72], v445[3].__r_.__value_.__l.__data_, v445[3].__r_.__value_.__l.__size_);
        else
          *(std::string *)&v473[72] = v445[3];
        *(_DWORD *)buf = 3;
        v416 = *v413;
        if (os_log_type_enabled(v416, OS_LOG_TYPE_DEFAULT))
        {
          v417 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v417;
          _os_log_impl(&dword_216897000, v416, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v418 = *(_QWORD *)(v31 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v418 + 24))(v418, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FE314](&v444);
        goto LABEL_516;
      case 5u:
        v114 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v114;
        v115 = this[2];
        v455.__r_.__value_.__r.__words[2] = v115;
        if (v115)
        {
          v116 = (unint64_t *)(v115 + 8);
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v118 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        memset(v445, 0, 48);
        v119 = MEMORY[0x24BDC4660];
        v444 = (uint8_t *)(MEMORY[0x24BDC4660] + 16);
        v445[2].__r_.__value_.__r.__words[0] = -1;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v120 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat8PlayTone10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8550;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v118;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v120;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z7getToneIN3cat8PlayTone10IndicationEE14SIMToolkitTonePKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8578;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v118;
        v257 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v259 = v257;
        if (v257)
        {
          v260 = v258;
          *(_QWORD *)v449 = v257;
          LODWORD(v453[0]) = tlv::parseV<cat::tlv::Tone>((unint64_t *)v449, v258);
          if (*(_QWORD *)v449)
            ___Z7getToneIN3cat8PlayTone10IndicationEE14SIMToolkitTonePKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)buf, (int *)v453);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 38, v259, v260);
        }
        v363 = v119;
        v364 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v364;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v120;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getDurationIN3cat8PlayTone10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C85A0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v118;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::Duration,void({block_pointer}&)(cat::tlv::Duration const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v365 = *(int *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[2].__r_.__value_.__r.__words[0] = v365;
        v366 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v120;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat8PlayTone10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C85C8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v366;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LODWORD(v365) = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v365;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v120;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat8PlayTone10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C85F0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v366;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        LOBYTE(v365) = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v365;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v363 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
        *(_DWORD *)buf = 4;
        v367 = *v366;
        if (os_log_type_enabled(v367, OS_LOG_TYPE_DEFAULT))
        {
          v368 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v368;
          _os_log_impl(&dword_216897000, v367, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v369 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v369 + 24))(v369, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        PlayTone::~PlayTone((PlayTone *)&v444);
        goto LABEL_491;
      case 6u:
        v34 = this[1];
        v441 = *this;
        v442 = v34;
        v35 = this[2];
        v443 = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v441);
        v38 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_OWORD *)&v445[0].__r_.__value_.__l.__data_ = 0u;
        v444 = (uint8_t *)(MEMORY[0x24BDC4588] + 16);
        *(std::string::size_type *)((char *)&v445[0].__r_.__value_.__r.__words[1] + 4) = -1;
        HIDWORD(v445[0].__r_.__value_.__r.__words[2]) = -1;
        memset(&v445[1], 0, 48);
        v445[3].__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        v39 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getHelpAvailabilityIN3cat10SelectItem10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8618;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v38;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::HelpAvailable,void({block_pointer}&)(cat::tlv::HelpAvailable const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v40 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v40;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v39;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z15getPresentationIN3cat10SelectItem10IndicationEE12PresentationPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8640;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v38;
        v41 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v441);
        v43 = v41;
        if (v41)
        {
          v44 = v42;
          *(_QWORD *)v449 = v41;
          LODWORD(v455.__r_.__value_.__l.__data_) = tlv::parseV<cat::tlv::Presentation>((unint64_t *)v449, v42);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)&v455);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])((unsigned __int16)v441, 44, v43, v44);
        }
        v322 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[0].__r_.__value_.__r.__words[2]) = v322;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v39;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getSoftkeySelectionIN3cat10SelectItem10IndicationEE16SoftkeySelectionPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8668;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v38;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::SoftkeySelection,void({block_pointer}&)(cat::tlv::SoftkeySelection const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v439 = v3;
        v435 = v10;
        v323 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[2]) = v323;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy__111;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose__112;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x4002000000;
        *(_QWORD *)&cf[24] = __Block_byref_object_copy__113;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)__Block_byref_object_dispose__114;
        v465 = 0;
        *(_OWORD *)&v464.__r_.__value_.__r.__words[1] = 0uLL;
        *(_QWORD *)v449 = v39;
        *(_QWORD *)&v449[8] = 0x40000000;
        *(_QWORD *)&v449[16] = ___Z17getSelectionItemsIN3cat10SelectItem10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v449[24] = &unk_24D5C8690;
        v450 = buf;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)v449;
        qmi::MessageBase::applyTlv<cat::tlv::Items,void({block_pointer}&)(cat::tlv::Items const&)>((qmi::MessageBase *)&v441, (uint64_t)&v455);
        v455.__r_.__value_.__r.__words[0] = v39;
        v455.__r_.__value_.__l.__size_ = 0x40000000;
        v455.__r_.__value_.__r.__words[2] = (std::string::size_type)___Z17getSelectionItemsIN3cat10SelectItem10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke_2;
        v456 = &unk_24D5C86B8;
        v457 = cf;
        *(_QWORD *)&v453[0] = &v455;
        qmi::MessageBase::applyTlv<cat::tlv::NextActionIndicatorList,void({block_pointer}&)(cat::tlv::NextActionIndicatorList const&)>((qmi::MessageBase *)&v441, (uint64_t)v453);
        v324 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
        v325 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 48);
        v327 = *(int **)(*(_QWORD *)&cf[8] + 40);
        v326 = *(int **)(*(_QWORD *)&cf[8] + 48);
        memset(&v452, 0, sizeof(v452));
        for (; v324 != v325; v324 = v328 + 24)
        {
          v454 = 0;
          memset(v453, 0, sizeof(v453));
          v329 = *v324;
          v328 = v324 + 8;
          LODWORD(v453[0]) = v329;
          decodeString();
          if (v327 == v326)
          {
            v331 = 0;
            LODWORD(v454) = 0;
            v327 = v326;
          }
          else
          {
            v330 = *v327;
            if (*v327 > 0xD)
              v331 = 0;
            else
              v331 = dword_216AA15FC[v330];
            v332 = *v38;
            if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v458 = 67109376;
              *(_DWORD *)&v458[4] = v330;
              v459 = 1024;
              LODWORD(v460) = v331;
              _os_log_impl(&dword_216897000, v332, OS_LOG_TYPE_DEFAULT, "#I Received Next Action: %d, and mapped to: %d", v458, 0xEu);
            }
            LODWORD(v454) = v331;
            ++v327;
          }
          v333 = *v38;
          if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
          {
            if (v453[1] >= 0)
              v334 = (char *)v453 + 8;
            else
              v334 = (char *)*((_QWORD *)&v453[0] + 1);
            *(_DWORD *)v458 = 67109634;
            *(_DWORD *)&v458[4] = v453[0];
            v459 = 2080;
            v460 = v334;
            v461 = 1024;
            v462 = v331;
            _os_log_impl(&dword_216897000, v333, OS_LOG_TYPE_DEFAULT, "#I Received Item with ID: %d, Text: %s, and next action: %d", v458, 0x18u);
          }
          size = v452.__r_.__value_.__l.__size_;
          if (v452.__r_.__value_.__l.__size_ >= v452.__r_.__value_.__r.__words[2])
          {
            v338 = std::vector<SelectionItem>::__push_back_slow_path<SelectionItem const&>(&v452, (uint64_t)v453);
          }
          else
          {
            *(_DWORD *)v452.__r_.__value_.__l.__size_ = v453[0];
            v336 = (std::string *)(size + 8);
            if (SHIBYTE(v453[1]) < 0)
            {
              std::string::__init_copy_ctor_external(v336, *((const std::string::value_type **)&v453[0] + 1), *(std::string::size_type *)&v453[1]);
            }
            else
            {
              v337 = *(_OWORD *)((char *)v453 + 8);
              *(_QWORD *)(size + 24) = *((_QWORD *)&v453[1] + 1);
              *(_OWORD *)&v336->__r_.__value_.__l.__data_ = v337;
            }
            *(_DWORD *)(size + 32) = v454;
            v338 = size + 40;
          }
          v452.__r_.__value_.__l.__size_ = v338;
          SelectionItem::~SelectionItem((SelectionItem *)v453);
        }
        _Block_object_dispose(cf, 8);
        if (v464.__r_.__value_.__l.__size_)
        {
          v464.__r_.__value_.__r.__words[2] = v464.__r_.__value_.__l.__size_;
          operator delete((void *)v464.__r_.__value_.__l.__size_);
        }
        _Block_object_dispose(buf, 8);
        *(_QWORD *)cf = &v473[24];
        std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
        std::vector<SelectionItem>::__vdeallocate((void **)&v445[1].__r_.__value_.__l.__data_);
        v445[1] = v452;
        memset(&v452, 0, sizeof(v452));
        *(_QWORD *)buf = &v452;
        std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v339 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat10SelectItem10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C86E0;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v441, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445[2].__r_.__value_.__l.__data_);
        v445[2] = *(std::string *)v449;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v339;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getDefaultItemIN3cat10SelectItem10IndicationEEiPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8708;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v38;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DefaultItem,void({block_pointer}&)(cat::tlv::DefaultItem const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v340 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[3].__r_.__value_.__l.__data_) = v340;
        v341 = (NSObject **)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v439 + 48) + 16))(*(_QWORD *)(v439 + 48), v435);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v339;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat10SelectItem10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8730;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v341;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v342 = v339;
        v343 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v343;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v342;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat10SelectItem10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8758;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v341;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v344 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v344;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        *(_OWORD *)v473 = 0u;
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = MEMORY[0x24BDC4588] + 16;
        *(_QWORD *)&v473[12] = *(std::string::size_type *)((char *)&v445[0].__r_.__value_.__r.__words[1] + 4);
        *(_DWORD *)&v473[20] = HIDWORD(v445[0].__r_.__value_.__r.__words[2]);
        memset(&v473[24], 0, 136);
        std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>(&v473[24], (uint64_t)v445[1].__r_.__value_.__l.__data_, v445[1].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(v445[1].__r_.__value_.__l.__size_ - v445[1].__r_.__value_.__r.__words[0]) >> 3));
        if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v473[48], v445[2].__r_.__value_.__l.__data_, v445[2].__r_.__value_.__l.__size_);
        else
          *(std::string *)&v473[48] = v445[2];
        *(_DWORD *)&v473[72] = v445[3].__r_.__value_.__l.__data_;
        *(_DWORD *)buf = 11;
        v345 = *v341;
        if (os_log_type_enabled(v345, OS_LOG_TYPE_DEFAULT))
        {
          v346 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v346;
          _os_log_impl(&dword_216897000, v345, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v347 = *(_QWORD *)(v439 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v347 + 24))(v347, v435, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FD2AC](&v444);
        goto LABEL_393;
      case 7u:
        v121 = this[1];
        *(_QWORD *)&v453[0] = *this;
        *((_QWORD *)&v453[0] + 1) = v121;
        v122 = this[2];
        *(_QWORD *)&v453[1] = v122;
        if (v122)
        {
          v123 = (unint64_t *)(v122 + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v453);
        v125 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        memset(v445, 0, 40);
        v448 = 0;
        memset(v447, 0, sizeof(v447));
        memset(v446, 0, sizeof(v446));
        memset(&v445[2], 0, 48);
        v444 = (uint8_t *)(MEMORY[0x24BDC45C0] + 16);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = -1;
        v445[1].__r_.__value_.__r.__words[2] = 0xFFFFFFFFLL;
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v445[2]);
        memset((char *)&v447[3] + 8, 0, 24);
        BYTE4(v448) = 0;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        v126 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z18getPackingRequiredIN3cat16SendShortMessage10IndicationEE15PackingRequiredPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8780;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v125;
        v127 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v129 = v127;
        if (v127)
        {
          v130 = v128;
          *(_QWORD *)v449 = v127;
          LODWORD(v455.__r_.__value_.__l.__data_) = tlv::parseV<cat::tlv::PackingRequired>((unint64_t *)v449, v128);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)&v455);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 45, v129, v130);
        }
        v348 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v348;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v126;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z10getSmsTpduIN3cat16SendShortMessage10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C87A8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v125;
        v349 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v351 = v349;
        if (v349)
        {
          v352 = v350;
          *(_QWORD *)v458 = v349;
          memset(v449, 0, 24);
          tlv::parseV<cat::tlv::SmsTpdu>((unint64_t *)v458, v350, (std::string *)v449);
          v353 = *(_QWORD *)v458;
          if (*(_QWORD *)v458)
            ___Z10getSmsTpduIN3cat16SendShortMessage10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)cf, (const std::string *)v449);
          if ((v449[23] & 0x80000000) != 0)
            operator delete(*(void **)v449);
          if (!v353)
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 46, v351, v352);
        }
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
          std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        else
          v455 = *(std::string *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(std::string *)((char *)v445 + 16) = v455;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z12getIsCDMASmsIN3cat16SendShortMessage10IndicationEE7SMSTypePKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C87D0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v125;
        v354 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v356 = v354;
        if (v354)
        {
          v357 = v355;
          *(_QWORD *)v449 = v354;
          LODWORD(v455.__r_.__value_.__l.__data_) = tlv::parseV<cat::tlv::IsCDMASms>((unint64_t *)v449, v355);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)&v455);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 47, v356, v357);
        }
        v393 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v393;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0xB002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy__131;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose__132;
        memset(&v473[24], 0, 136);
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v473[24]);
        *(_QWORD *)v449 = v126;
        *(_QWORD *)&v449[8] = 0x40000000;
        *(_QWORD *)&v449[16] = ___Z10getAddressIN3cat16SendShortMessage10IndicationEE14CSIPhoneNumberPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v449[24] = &unk_24D5C87F8;
        v450 = buf;
        v451 = v125;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)v449;
        qmi::MessageBase::applyTlv<cat::tlv::Address,void({block_pointer}&)(cat::tlv::Address const&)>((qmi::MessageBase *)v453, (uint64_t)&v455);
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)cf, (const CSIPhoneNumber *)(*(_QWORD *)&buf[8] + 40));
        _Block_object_dispose(buf, 8);
        if ((v473[135] & 0x80000000) != 0)
          operator delete(*(void **)&v473[112]);
        if ((v473[111] & 0x80000000) != 0)
          operator delete(*(void **)&v473[88]);
        if ((v473[79] & 0x80000000) != 0)
          operator delete(*(void **)&v473[56]);
        if ((v473[55] & 0x80000000) != 0)
          operator delete(*(void **)&v473[32]);
        v445[2].__r_.__value_.__r.__words[0] = *(_QWORD *)cf;
        if (v445[3].__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v445[2].__r_.__value_.__l.__size_);
        *(_OWORD *)&v445[2].__r_.__value_.__r.__words[1] = *(_OWORD *)&cf[8];
        v445[3].__r_.__value_.__r.__words[0] = *(_QWORD *)&cf[24];
        cf[31] = 0;
        cf[8] = 0;
        if (SBYTE7(v446[0]) < 0)
          operator delete((void *)v445[3].__r_.__value_.__l.__size_);
        *(_OWORD *)&v445[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&v464.__r_.__value_.__l.__data_;
        *(_QWORD *)&v446[0] = *((_QWORD *)&v464.__r_.__value_.__l + 2);
        *((_BYTE *)&v464.__r_.__value_.__s + 23) = 0;
        v464.__r_.__value_.__s.__data_[0] = 0;
        DWORD2(v446[0]) = v465;
        BYTE12(v446[0]) = BYTE4(v465);
        if (SBYTE7(v447[0]) < 0)
          operator delete(*(void **)&v446[1]);
        v446[1] = v466;
        *(_QWORD *)&v447[0] = v467;
        HIBYTE(v467) = 0;
        LOBYTE(v466) = 0;
        if (SHIBYTE(v447[1]) < 0)
        {
          operator delete(*((void **)&v447[0] + 1));
          *(_OWORD *)((char *)v447 + 8) = v468;
          *((_QWORD *)&v447[1] + 1) = v469;
          HIBYTE(v469) = 0;
          LOBYTE(v468) = 0;
          v447[2] = v470;
          LOBYTE(v447[3]) = v471;
          if (SHIBYTE(v467) < 0)
            operator delete((void *)v466);
        }
        else
        {
          *(_OWORD *)((char *)v447 + 8) = v468;
          *((_QWORD *)&v447[1] + 1) = v469;
          HIBYTE(v469) = 0;
          LOBYTE(v468) = 0;
          v447[2] = v470;
          LOBYTE(v447[3]) = v471;
        }
        if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v464.__r_.__value_.__l.__data_);
        if ((cf[31] & 0x80000000) != 0)
          operator delete(*(void **)&cf[8]);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v126;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat16SendShortMessage10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8820;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v125;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)v453, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (SHIBYTE(v447[4]) < 0)
          operator delete(*((void **)&v447[3] + 1));
        *(_OWORD *)((char *)&v447[3] + 8) = *(_OWORD *)v449;
        *((_QWORD *)&v447[4] + 1) = *(_QWORD *)&v449[16];
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z15getResponseTypeIN3cat16SendShortMessage10IndicationEE12ResponseTypePKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8848;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v125;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::ResponseType,void({block_pointer}&)(cat::tlv::ResponseType const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v394 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v448) = v394;
        if (!v394)
        {
          LODWORD(v448) = 1;
          BYTE4(v448) = 1;
        }
        v395 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat16SendShortMessage10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8870;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v395;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v396 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v396;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat16SendShortMessage10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8898;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v395;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v397 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v397;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v473, 0, sizeof(v473));
        SendShortMessage::SendShortMessage((uint64_t)&buf[8], (uint64_t)&v444);
        *(_DWORD *)buf = 5;
        v398 = *v395;
        if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
        {
          v399 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v399;
          _os_log_impl(&dword_216897000, v398, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v400 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v400 + 24))(v400, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FD9CC](&v444);
        goto LABEL_516;
      case 8u:
        v131 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v131;
        v132 = this[2];
        v455.__r_.__value_.__r.__words[2] = v132;
        if (v132)
        {
          v133 = (unint64_t *)(v132 + 8);
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v135 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        memset(v447, 0, 48);
        memset(v446, 0, sizeof(v446));
        memset(v445, 0, sizeof(v445));
        v444 = (uint8_t *)(MEMORY[0x24BDC4648] + 16);
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v445[0].__r_.__value_.__r.__words[2]);
        memset((char *)&v447[1] + 8, 0, 24);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0xB002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy__131;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose__132;
        memset(&v473[24], 0, 136);
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v473[24]);
        v136 = MEMORY[0x24BDAC760];
        *(_QWORD *)v449 = MEMORY[0x24BDAC760];
        *(_QWORD *)&v449[8] = 0x40000000;
        *(_QWORD *)&v449[16] = ___Z10getAddressIN3cat6SendSS10IndicationEE14CSIPhoneNumberPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v449[24] = &unk_24D5C88C0;
        v450 = buf;
        v451 = v135;
        *(_QWORD *)&v453[0] = v449;
        qmi::MessageBase::applyTlv<cat::tlv::Address,void({block_pointer}&)(cat::tlv::Address const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)cf, (const CSIPhoneNumber *)(*(_QWORD *)&buf[8] + 40));
        _Block_object_dispose(buf, 8);
        if ((v473[135] & 0x80000000) != 0)
          operator delete(*(void **)&v473[112]);
        if ((v473[111] & 0x80000000) != 0)
          operator delete(*(void **)&v473[88]);
        if ((v473[79] & 0x80000000) != 0)
          operator delete(*(void **)&v473[56]);
        if ((v473[55] & 0x80000000) != 0)
          operator delete(*(void **)&v473[32]);
        v445[0].__r_.__value_.__r.__words[2] = *(_QWORD *)cf;
        if (SHIBYTE(v445[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445[1].__r_.__value_.__l.__data_);
        v445[1] = *(std::string *)&cf[8];
        cf[31] = 0;
        cf[8] = 0;
        if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445[2].__r_.__value_.__l.__data_);
        v445[2] = v464;
        *((_BYTE *)&v464.__r_.__value_.__s + 23) = 0;
        v464.__r_.__value_.__s.__data_[0] = 0;
        LODWORD(v445[3].__r_.__value_.__l.__data_) = v465;
        v445[3].__r_.__value_.__s.__data_[4] = BYTE4(v465);
        if (SBYTE7(v446[0]) < 0)
          operator delete((void *)v445[3].__r_.__value_.__l.__size_);
        *(_OWORD *)&v445[3].__r_.__value_.__r.__words[1] = v466;
        *(_QWORD *)&v446[0] = v467;
        HIBYTE(v467) = 0;
        LOBYTE(v466) = 0;
        if (SHIBYTE(v446[1]) < 0)
        {
          operator delete(*((void **)&v446[0] + 1));
          *(_OWORD *)((char *)v446 + 8) = v468;
          *((_QWORD *)&v446[1] + 1) = v469;
          HIBYTE(v469) = 0;
          LOBYTE(v468) = 0;
          v447[0] = v470;
          LOBYTE(v447[1]) = v471;
          if (SHIBYTE(v467) < 0)
            operator delete((void *)v466);
        }
        else
        {
          *(_OWORD *)((char *)v446 + 8) = v468;
          *((_QWORD *)&v446[1] + 1) = v469;
          HIBYTE(v469) = 0;
          LOBYTE(v468) = 0;
          v447[0] = v470;
          LOBYTE(v447[1]) = v471;
        }
        if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v464.__r_.__value_.__l.__data_);
        if ((cf[31] & 0x80000000) != 0)
          operator delete(*(void **)&cf[8]);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v136;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat6SendSS10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C88E8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v135;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (SHIBYTE(v447[2]) < 0)
          operator delete(*((void **)&v447[1] + 1));
        *(_OWORD *)((char *)&v447[1] + 8) = *(_OWORD *)v449;
        *((_QWORD *)&v447[2] + 1) = *(_QWORD *)&v449[16];
        v294 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v136;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat6SendSS10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8910;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v294;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v295 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v295;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v136;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat6SendSS10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8938;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v294;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v296 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v296;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v473, 0, sizeof(v473));
        SendSS::SendSS((uint64_t)&buf[8], (uint64_t)&v444);
        *(_DWORD *)buf = 6;
        v297 = *v294;
        if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
        {
          v298 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v298;
          _os_log_impl(&dword_216897000, v297, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v299 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v299 + 24))(v299, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FE2CC](&v444);
        goto LABEL_491;
      case 9u:
        v137 = this[1];
        *(_QWORD *)&v453[0] = *this;
        *((_QWORD *)&v453[0] + 1) = v137;
        v138 = this[2];
        *(_QWORD *)&v453[1] = v138;
        if (v138)
        {
          v139 = (unint64_t *)(v138 + 8);
          do
            v140 = __ldxr(v139);
          while (__stxr(v140 + 1, v139));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v453);
        v438 = v3;
        v141 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        v142 = MEMORY[0x24BDC4678];
        v444 = (uint8_t *)(MEMORY[0x24BDC4678] + 16);
        memset(v445, 0, 64);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v143 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z13getUSSDStringIN3cat8SendUSSD10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8960;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v141;
        v144 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v146 = v144;
        if (v144)
        {
          v147 = v145;
          *(_QWORD *)v458 = v144;
          memset(v449, 0, sizeof(v449));
          tlv::parseV<cat::tlv::USSDString>((unint64_t *)v458, v145, v449);
          v148 = *(_QWORD *)v458;
          if (*(_QWORD *)v458)
            ___Z13getUSSDStringIN3cat8SendUSSD10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)cf, (uint64_t)v449);
          if ((v449[31] & 0x80000000) != 0)
            operator delete(*(void **)&v449[8]);
          if (!v148)
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 61, v146, v147);
        }
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
          std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        else
          v455 = *(std::string *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(std::string *)((char *)v445 + 16) = v455;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v143;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat8SendUSSD10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8988;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v141;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)v453, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[2].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[1].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[2].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v273 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v143;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat8SendUSSD10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C89B0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v273;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v274 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v274;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v143;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat8SendUSSD10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C89D8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v273;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v275 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v275;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v142 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        if (v445[2].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[40], (const std::string::value_type *)v445[1].__r_.__value_.__r.__words[2], v445[2].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[56] = v445[2].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 7;
        v306 = *v273;
        if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
        {
          v307 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v307;
          _os_log_impl(&dword_216897000, v306, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v308 = *(_QWORD *)(v438 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v308 + 24))(v308, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FE350](&v444);
        goto LABEL_516;
      case 0xAu:
        qmi::Indication<(unsigned short)1,cat::SetupCall::IndicationTLVList>::Indication((qmi::MessageBase *)buf, this);
        QMI_STK_CommandDriver::handleSetupCallUserConfirmation_ind(v3, v10, (qmi::MessageBase *)buf);
        v149 = (std::string *)buf;
        goto LABEL_545;
      case 0xBu:
        v150 = qmi::Indication<(unsigned short)1,cat::SetupCall::IndicationTLVList>::Indication((qmi::MessageBase *)v449, this);
        if (!capabilities::ct::supportsForceUserConfirmationForSTKCalls(v150))
          goto LABEL_525;
        memset(buf, 0, sizeof(buf));
        ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 56));
        ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<CarrierSettingsInterface>(ServiceMap, buf);
        v152 = *(_QWORD *)buf;
        v153 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 104) + 16))(*(_QWORD *)(v3 + 104), v10);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)v152 + 96))(cf, v152, v153, 1, CFSTR("ForceUserConfirmationForSTKCalls"), *MEMORY[0x24BDBD270], 0);
        v154 = *(BOOL **)cf;
        LOBYTE(v444) = 0;
        if (*(_QWORD *)cf)
        {
          v155 = CFGetTypeID(*(CFTypeRef *)cf);
          if (v155 == CFBooleanGetTypeID())
            ctu::cf::assign((ctu::cf *)&v444, v154, v156);
          v157 = v444;
          ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)cf);
          if (v157)
          {
            v158 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)cf = 0;
              _os_log_impl(&dword_216897000, v158, OS_LOG_TYPE_DEFAULT, "#I Received Setup call alpha display indication; modifying it as Setup call user confirmation",
                cf,
                2u);
            }
            QMI_STK_CommandDriver::handleSetupCallUserConfirmation_ind(v3, v10, (qmi::MessageBase *)v449);
            v159 = 0;
LABEL_519:
            v419 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v420 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v421 = __ldaxr(v420);
              while (__stlxr(v421 - 1, v420));
              if (!v421)
              {
                ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                std::__shared_weak_count::__release_weak(v419);
              }
            }
            if ((v159 & 1) != 0)
            {
LABEL_525:
              v422 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
              *(_OWORD *)&v445[0].__r_.__value_.__l.__data_ = 1uLL;
              memset(&v445[0].__r_.__value_.__r.__words[2], 0, sizeof(std::string));
              v445[1].__r_.__value_.__r.__words[2] = -1;
              memset(&v445[2], 0, 48);
              memset(v446, 0, 24);
              *((_QWORD *)&v446[1] + 1) = 0xFFFFFFFFLL;
              v423 = MEMORY[0x24BDC45E8];
              v444 = (uint8_t *)(MEMORY[0x24BDC45E8] + 16);
              getAddress<cat::SetupCall::Indication>((CSIPhoneNumber *)buf, v422, (qmi::MessageBase *)v449);
              CSIPhoneNumber::getFullNumber((CSIPhoneNumber *)buf);
              if (v445[1].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
              *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)cf;
              v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&cf[16];
              cf[23] = 0;
              cf[0] = 0;
              if ((v473[95] & 0x80000000) != 0)
                operator delete(*(void **)&v473[72]);
              if ((v473[71] & 0x80000000) != 0)
                operator delete(*(void **)&v473[48]);
              if ((v473[39] & 0x80000000) != 0)
                operator delete(*(void **)&v473[16]);
              if ((v473[15] & 0x80000000) != 0)
                operator delete(*(void **)&buf[8]);
              *(_QWORD *)cf = 0;
              *(_QWORD *)&cf[8] = cf;
              *(_QWORD *)&cf[16] = 0x2000000000;
              *(_DWORD *)&cf[24] = -1;
              v424 = MEMORY[0x24BDAC760];
              *(_QWORD *)buf = MEMORY[0x24BDAC760];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)v473 = ___Z23getCallSetupRequirementIN3cat9SetupCall10IndicationEE20CallSetupRequirementPKN3ctu11OsLogLoggerERKT__block_invoke;
              *(_QWORD *)&v473[8] = &unk_24D5C8A28;
              *(_QWORD *)&v473[16] = cf;
              *(_QWORD *)&v473[24] = v422;
              v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              qmi::MessageBase::applyTlv<cat::tlv::CallSetupRequirement,void({block_pointer}&)(cat::tlv::CallSetupRequirement const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
              v425 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
              _Block_object_dispose(cf, 8);
              LODWORD(v445[1].__r_.__value_.__r.__words[2]) = v425;
              *(_QWORD *)cf = 0;
              *(_QWORD *)&cf[8] = cf;
              *(_QWORD *)&cf[16] = 0x2000000000;
              *(_DWORD *)&cf[24] = -1;
              *(_QWORD *)buf = v424;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)v473 = ___Z20getRedialRequirementIN3cat9SetupCall10IndicationEE17RedialRequirementPKN3ctu11OsLogLoggerERKT__block_invoke;
              *(_QWORD *)&v473[8] = &unk_24D5C8A50;
              *(_QWORD *)&v473[16] = cf;
              *(_QWORD *)&v473[24] = v422;
              v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              qmi::MessageBase::applyTlv<cat::tlv::Redial,void({block_pointer}&)(cat::tlv::Redial const&)>((qmi::MessageBase *)v449, &v455);
              v426 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
              _Block_object_dispose(cf, 8);
              HIDWORD(v445[1].__r_.__value_.__r.__words[2]) = v426;
              getSubaddress<cat::SetupCall::Indication>((std::string *)buf, v422, (qmi::MessageBase *)v449);
              if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v445[2].__r_.__value_.__l.__data_);
              *(_OWORD *)&v445[2].__r_.__value_.__l.__data_ = *(_OWORD *)buf;
              v445[2].__r_.__value_.__r.__words[2] = *(_QWORD *)v473;
              getSetupCallDisplayAlpha<cat::SetupCall::Indication>((std::string *)buf, v422, (qmi::MessageBase *)v449);
              if (SBYTE7(v446[1]) < 0)
                operator delete(*(void **)&v446[0]);
              v446[0] = *(_OWORD *)buf;
              *(_QWORD *)&v446[1] = *(_QWORD *)v473;
              *(_QWORD *)cf = 0;
              *(_QWORD *)&cf[8] = cf;
              *(_QWORD *)&cf[16] = 0x2000000000;
              *(_DWORD *)&cf[24] = -1;
              *(_QWORD *)buf = v424;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)v473 = ___Z15getResponseTypeIN3cat9SetupCall10IndicationEE12ResponseTypePKN3ctu11OsLogLoggerERKT__block_invoke;
              *(_QWORD *)&v473[8] = &unk_24D5C8AF0;
              *(_QWORD *)&v473[16] = cf;
              *(_QWORD *)&v473[24] = v422;
              v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              qmi::MessageBase::applyTlv<cat::tlv::ResponseType,void({block_pointer}&)(cat::tlv::ResponseType const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
              v427 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
              _Block_object_dispose(cf, 8);
              DWORD2(v446[1]) = v427;
              if (!v427)
              {
                DWORD2(v446[1]) = 1;
                BYTE12(v446[1]) = 1;
              }
              v428 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
              *(_QWORD *)cf = 0;
              *(_QWORD *)&cf[8] = cf;
              *(_QWORD *)&cf[16] = 0x2000000000;
              *(_DWORD *)&cf[24] = 0;
              *(_QWORD *)buf = v424;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat9SetupCall10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
              *(_QWORD *)&v473[8] = &unk_24D5C8B18;
              *(_QWORD *)&v473[16] = cf;
              *(_QWORD *)&v473[24] = v428;
              v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
              v429 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
              _Block_object_dispose(cf, 8);
              HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v429;
              *(_QWORD *)cf = 0;
              *(_QWORD *)&cf[8] = cf;
              *(_QWORD *)&cf[16] = 0x2000000000;
              cf[24] = 0;
              *(_QWORD *)buf = v424;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat9SetupCall10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
              *(_QWORD *)&v473[8] = &unk_24D5C8B40;
              *(_QWORD *)&v473[16] = cf;
              *(_QWORD *)&v473[24] = v428;
              v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
              v430 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
              _Block_object_dispose(cf, 8);
              v445[0].__r_.__value_.__s.__data_[8] = v430;
              v477 = 0;
              v475 = 0u;
              v476 = 0u;
              v474 = 0u;
              *(_OWORD *)buf = 0u;
              memset(v473, 0, sizeof(v473));
              SetupCall::SetupCall((uint64_t)&buf[8], (uint64_t)&v444);
              *(_QWORD *)&buf[8] = v423 + 16;
              *(_DWORD *)buf = 9;
              v431 = *v428;
              if (os_log_type_enabled(v431, OS_LOG_TYPE_DEFAULT))
              {
                v432 = asString();
                *(_DWORD *)cf = 136315138;
                *(_QWORD *)&cf[4] = v432;
                _os_log_impl(&dword_216897000, v431, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
              }
              v433 = *(_QWORD *)(v3 + 104);
              _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
              (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v433 + 24))(v433, v10, cf);
              _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
              _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
              MEMORY[0x2199FDBA0](&v444);
            }
LABEL_544:
            v149 = (std::string *)v449;
LABEL_545:
            qmi::MessageBase::~MessageBase((qmi::MessageBase *)v149);
            return;
          }
        }
        else
        {
          ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)cf);
        }
        v159 = 1;
        goto LABEL_519;
      case 0xCu:
        v45 = this[1];
        v441 = *this;
        v442 = v45;
        v46 = this[2];
        v443 = v46;
        if (v46)
        {
          v47 = (unint64_t *)(v46 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v441);
        v49 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        memset((char *)&v445[0].__r_.__value_.__r.__words[2] + 4, 0, 52);
        *(_OWORD *)&v445[0].__r_.__value_.__l.__data_ = 0u;
        v444 = (uint8_t *)(MEMORY[0x24BDC4690] + 16);
        *(std::string::size_type *)((char *)&v445[0].__r_.__value_.__r.__words[1] + 4) = -1;
        v445[3].__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        v50 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getHelpAvailabilityIN3cat9SetupMenu10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8B68;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v49;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::HelpAvailable,void({block_pointer}&)(cat::tlv::HelpAvailable const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v51 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v51;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v50;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z19getSoftkeySelectionIN3cat9SetupMenu10IndicationEE16SoftkeySelectionPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8B90;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v49;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::SoftkeySelection,void({block_pointer}&)(cat::tlv::SoftkeySelection const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v436 = v3;
        v434 = v10;
        v52 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[0].__r_.__value_.__r.__words[2]) = v52;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy__111;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose__112;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x4002000000;
        *(_QWORD *)&cf[24] = __Block_byref_object_copy__113;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)__Block_byref_object_dispose__114;
        v465 = 0;
        *(_OWORD *)&v464.__r_.__value_.__r.__words[1] = 0uLL;
        *(_QWORD *)v449 = v50;
        *(_QWORD *)&v449[8] = 0x40000000;
        *(_QWORD *)&v449[16] = ___Z17getSelectionItemsIN3cat9SetupMenu10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v449[24] = &unk_24D5C8BB8;
        v450 = buf;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)v449;
        qmi::MessageBase::applyTlv<cat::tlv::Items,void({block_pointer}&)(cat::tlv::Items const&)>((qmi::MessageBase *)&v441, (uint64_t)&v455);
        v455.__r_.__value_.__r.__words[0] = v50;
        v455.__r_.__value_.__l.__size_ = 0x40000000;
        v455.__r_.__value_.__r.__words[2] = (std::string::size_type)___Z17getSelectionItemsIN3cat9SetupMenu10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke_2;
        v456 = &unk_24D5C8BE0;
        v457 = cf;
        *(_QWORD *)&v453[0] = &v455;
        qmi::MessageBase::applyTlv<cat::tlv::NextActionIndicatorList,void({block_pointer}&)(cat::tlv::NextActionIndicatorList const&)>((qmi::MessageBase *)&v441, (uint64_t)v453);
        v53 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
        v54 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 48);
        v55 = *(int **)(*(_QWORD *)&cf[8] + 40);
        v56 = *(int **)(*(_QWORD *)&cf[8] + 48);
        memset(&v452, 0, sizeof(v452));
        for (; v53 != v54; v53 = v57 + 24)
        {
          v454 = 0;
          memset(v453, 0, sizeof(v453));
          v58 = *v53;
          v57 = v53 + 8;
          LODWORD(v453[0]) = v58;
          decodeString();
          if (v55 == v56)
          {
            v60 = 0;
            LODWORD(v454) = 0;
            v55 = v56;
          }
          else
          {
            v59 = *v55;
            if (*v55 > 0xD)
              v60 = 0;
            else
              v60 = dword_216AA15FC[v59];
            v61 = *v49;
            if (os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v458 = 67109376;
              *(_DWORD *)&v458[4] = v59;
              v459 = 1024;
              LODWORD(v460) = v60;
              _os_log_impl(&dword_216897000, v61, OS_LOG_TYPE_DEFAULT, "#I Received Next Action: %d, and mapped to: %d", v458, 0xEu);
            }
            LODWORD(v454) = v60;
            ++v55;
          }
          v62 = *v49;
          if (os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
          {
            if (v453[1] >= 0)
              v63 = (char *)v453 + 8;
            else
              v63 = (char *)*((_QWORD *)&v453[0] + 1);
            *(_DWORD *)v458 = 67109634;
            *(_DWORD *)&v458[4] = v453[0];
            v459 = 2080;
            v460 = v63;
            v461 = 1024;
            v462 = v60;
            _os_log_impl(&dword_216897000, v62, OS_LOG_TYPE_DEFAULT, "#I Received Item with ID: %d, Text: %s, and next action: %d", v458, 0x18u);
          }
          v64 = v452.__r_.__value_.__l.__size_;
          if (v452.__r_.__value_.__l.__size_ >= v452.__r_.__value_.__r.__words[2])
          {
            v67 = std::vector<SelectionItem>::__push_back_slow_path<SelectionItem const&>(&v452, (uint64_t)v453);
          }
          else
          {
            *(_DWORD *)v452.__r_.__value_.__l.__size_ = v453[0];
            v65 = (std::string *)(v64 + 8);
            if (SHIBYTE(v453[1]) < 0)
            {
              std::string::__init_copy_ctor_external(v65, *((const std::string::value_type **)&v453[0] + 1), *(std::string::size_type *)&v453[1]);
            }
            else
            {
              v66 = *(_OWORD *)((char *)v453 + 8);
              *(_QWORD *)(v64 + 24) = *((_QWORD *)&v453[1] + 1);
              *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
            }
            *(_DWORD *)(v64 + 32) = v454;
            v67 = v64 + 40;
          }
          v452.__r_.__value_.__l.__size_ = v67;
          SelectionItem::~SelectionItem((SelectionItem *)v453);
        }
        _Block_object_dispose(cf, 8);
        if (v464.__r_.__value_.__l.__size_)
        {
          v464.__r_.__value_.__r.__words[2] = v464.__r_.__value_.__l.__size_;
          operator delete((void *)v464.__r_.__value_.__l.__size_);
        }
        _Block_object_dispose(buf, 8);
        *(_QWORD *)cf = &v473[24];
        std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
        std::vector<SelectionItem>::__vdeallocate((void **)&v445[1].__r_.__value_.__l.__data_);
        v445[1] = v452;
        memset(&v452, 0, sizeof(v452));
        *(_QWORD *)buf = &v452;
        std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v68 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat9SetupMenu10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8C08;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v441, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445[2].__r_.__value_.__l.__data_);
        v445[2] = *(std::string *)v449;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        *(_QWORD *)buf = v68;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getDefaultItemIN3cat9SetupMenu10IndicationEEiPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8C30;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v49;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DefaultItem,void({block_pointer}&)(cat::tlv::DefaultItem const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v309 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        LODWORD(v445[3].__r_.__value_.__l.__data_) = v309;
        v310 = (NSObject **)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v436 + 48) + 16))(*(_QWORD *)(v436 + 48), v434);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v68;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat9SetupMenu10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8C58;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v310;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v311 = v68;
        v312 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v312;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v311;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat9SetupMenu10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8C80;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v310;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v441, (uint64_t)v449);
        v313 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v313;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        memset(&v473[20], 0, 140);
        *(_QWORD *)buf = 0;
        *(_OWORD *)v473 = 0u;
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = MEMORY[0x24BDC4690] + 16;
        *(_QWORD *)&v473[12] = *(std::string::size_type *)((char *)&v445[0].__r_.__value_.__r.__words[1] + 4);
        std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>(&v473[24], (uint64_t)v445[1].__r_.__value_.__l.__data_, v445[1].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(v445[1].__r_.__value_.__l.__size_ - v445[1].__r_.__value_.__r.__words[0]) >> 3));
        if (SHIBYTE(v445[2].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v473[48], v445[2].__r_.__value_.__l.__data_, v445[2].__r_.__value_.__l.__size_);
        else
          *(std::string *)&v473[48] = v445[2];
        *(_DWORD *)&v473[72] = v445[3].__r_.__value_.__l.__data_;
        *(_DWORD *)buf = 10;
        v314 = *v310;
        if (os_log_type_enabled(v314, OS_LOG_TYPE_DEFAULT))
        {
          v315 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v315;
          _os_log_impl(&dword_216897000, v314, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v316 = *(_QWORD *)(v436 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v316 + 24))(v316, v434, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FE3B0](&v444);
LABEL_393:
        v149 = (std::string *)&v441;
        goto LABEL_545;
      case 0xDu:
        v160 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v160;
        v161 = this[2];
        v455.__r_.__value_.__r.__words[2] = v161;
        if (v161)
        {
          v162 = (unint64_t *)(v161 + 8);
          do
            v163 = __ldxr(v162);
          while (__stxr(v163 + 1, v162));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v164 = MEMORY[0x24BDC45B8];
        v444 = (uint8_t *)(MEMORY[0x24BDC45B8] + 16);
        memset(v445, 0, 40);
        v165 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v166 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z13getTextStringIN3cat17SetupIdleModeText10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8CA8;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v165;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::TextString,void({block_pointer}&)(cat::tlv::TextString const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v261 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v166;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat17SetupIdleModeText10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8CD0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v261;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v262 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v262;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v166;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat17SetupIdleModeText10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8CF8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v261;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v263 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v263;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v164 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 12;
        v285 = *v261;
        if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
        {
          v286 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v286;
          _os_log_impl(&dword_216897000, v285, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v287 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v287 + 24))(v287, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        SetupIdleText::~SetupIdleText((SetupIdleText *)&v444);
        goto LABEL_491;
      case 0xEu:
        v167 = this[1];
        *(_QWORD *)v449 = *this;
        *(_QWORD *)&v449[8] = v167;
        v168 = this[2];
        *(_QWORD *)&v449[16] = v168;
        if (v168)
        {
          v169 = (unint64_t *)(v168 + 8);
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 1, v169));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v449);
        v171 = MEMORY[0x24BDC4600];
        v444 = (uint8_t *)(MEMORY[0x24BDC4600] + 16);
        *(_OWORD *)&v445[0].__r_.__value_.__l.__data_ = 0uLL;
        v172 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        v173 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat20ProvideLocalInfoLang10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8D20;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v172;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v174 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v174;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v173;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat20ProvideLocalInfoLang10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8D48;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v172;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v175 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v175;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 13;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v171 + 16;
        v176 = *v172;
        if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
        {
          v177 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v177;
          _os_log_impl(&dword_216897000, v176, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v178 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v178 + 24))(v178, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        ProvideLocalInfoLanguage::~ProvideLocalInfoLanguage((ProvideLocalInfoLanguage *)&v444);
        goto LABEL_544;
      case 0xFu:
        v69 = this[1];
        *(_QWORD *)&v453[0] = *this;
        *((_QWORD *)&v453[0] + 1) = v69;
        v70 = this[2];
        *(_QWORD *)&v453[1] = v70;
        if (v70)
        {
          v71 = (unint64_t *)(v70 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v453);
        v437 = v3;
        v73 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        v74 = MEMORY[0x24BDC4668];
        v444 = (uint8_t *)(MEMORY[0x24BDC4668] + 16);
        memset(v445, 0, 64);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v75 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z7getDTMFIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8D70;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v73;
        v76 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v453);
        v78 = v76;
        if (v76)
        {
          v79 = v77;
          *(_QWORD *)v458 = v76;
          memset(v449, 0, 24);
          tlv::parseV<cat::tlv::DTMF>((unint64_t *)v458, v77, (std::string *)v449);
          v80 = *(_QWORD *)v458;
          if (*(_QWORD *)v458)
            ___Z7getDTMFIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)cf, (const std::string *)v449);
          if ((v449[23] & 0x80000000) != 0)
            operator delete(*(void **)v449);
          if (!v80)
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v453[0]), 53, v78, v79);
        }
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
          std::string::__init_copy_ctor_external(&v455, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        else
          v455 = *(std::string *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(std::string *)((char *)v445 + 16) = v455;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        *(_QWORD *)cf = v75;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8D98;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v73;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)v453, (uint64_t)&v455);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[2].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[1].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[2].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v270 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v75;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat9SetupDtmf10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8DC0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v270;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v271 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v271;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v75;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat9SetupDtmf10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8DE8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v270;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v453, (uint64_t)v449);
        v272 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v272;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v74 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        if (v445[2].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[40], (const std::string::value_type *)v445[1].__r_.__value_.__r.__words[2], v445[2].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[40] = *(_OWORD *)&v445[1].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[56] = v445[2].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 14;
        v300 = *v270;
        if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT))
        {
          v301 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v301;
          _os_log_impl(&dword_216897000, v300, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v302 = *(_QWORD *)(v437 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v302 + 24))(v302, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        MEMORY[0x2199FE338](&v444);
LABEL_516:
        v149 = (std::string *)v453;
        goto LABEL_545;
      case 0x10u:
        v179 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v179;
        v180 = this[2];
        v455.__r_.__value_.__r.__words[2] = v180;
        if (v180)
        {
          v181 = (unint64_t *)(v180 + 8);
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v183 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        v184 = MEMORY[0x24BDC45E0];
        v444 = (uint8_t *)(MEMORY[0x24BDC45E0] + 16);
        v445[0].__r_.__value_.__r.__words[0] = 0;
        v445[0].__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        memset(&v445[0].__r_.__value_.__r.__words[2], 0, sizeof(std::string));
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = -1;
        v185 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z31getSpecificLanguageNotificationIN3cat20LanguageNotification10IndicationEE24SpecificLanguagePresencePKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8E10;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v183;
        v186 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v188 = v186;
        if (v186)
        {
          v189 = v187;
          *(_QWORD *)v449 = v186;
          LODWORD(v453[0]) = tlv::parseV<cat::tlv::SpecificLanguageNotification>((unint64_t *)v449, v187);
          if (*(_QWORD *)v449)
            (*(void (**)(uint64_t, int *))v473)((uint64_t)buf, (int *)v453);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 54, v188, v189);
        }
        v317 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v317;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        *(_QWORD *)&v473[40] = 0x200000000000000;
        *(_QWORD *)&v473[24] = 0;
        *(_QWORD *)&v473[32] = 0;
        *(_QWORD *)cf = v185;
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z11getLanguageIN3cat20LanguageNotification10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8E38;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v183;
        v318 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)&v455);
        v320 = v318;
        if (v318)
        {
          v321 = v319;
          *(_QWORD *)&v453[0] = v318;
          *(_WORD *)v458 = tlv::parseV<cat::tlv::Language>((unint64_t *)v453, v319);
          if (*(_QWORD *)&v453[0])
            ___Z11getLanguageIN3cat20LanguageNotification10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke((uint64_t)cf, v458);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v455.__r_.__value_.__l.__data_), 55, v320, v321);
        }
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v370 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v185;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat20LanguageNotification10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8E60;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v370;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v371 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v371;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v185;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat20LanguageNotification10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8E88;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v370;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v372 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v372;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v184 + 16;
        *(_DWORD *)&v473[12] = HIDWORD(v445[0].__r_.__value_.__r.__words[1]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 15;
        v373 = *v370;
        if (os_log_type_enabled(v373, OS_LOG_TYPE_DEFAULT))
        {
          v374 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v374;
          _os_log_impl(&dword_216897000, v373, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v375 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v375 + 24))(v375, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        LanguageNotification::~LanguageNotification((LanguageNotification *)&v444);
        goto LABEL_491;
      case 0x11u:
        qmi::Indication<(unsigned short)1,cat::SetupEventList::IndicationTLVList>::Indication((qmi::MessageBase *)v449, this);
        v445[0].__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        v190 = MEMORY[0x24BDC45F8];
        v444 = (uint8_t *)(MEMORY[0x24BDC45F8] + 16);
        v445[0].__r_.__value_.__r.__words[0] = 0;
        v191 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        v192 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z23getNotificationRequiredIN3cat14SetupEventList10IndicationEE23NotificationRequirementPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8EB0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v191;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::NotificationRequired,void({block_pointer}&)(cat::tlv::NotificationRequired const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v193 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v193;
        v194 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v192;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat14SetupEventList10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8ED8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v194;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v195 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v195;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v192;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat14SetupEventList10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8F00;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v194;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v196 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v196;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 16;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_DWORD *)&v473[12] = HIDWORD(v445[0].__r_.__value_.__r.__words[1]);
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v190 + 16;
        v197 = *v194;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
        {
          v198 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v198;
          _os_log_impl(&dword_216897000, v197, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v199 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v199 + 24))(v199, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        SetupEventUserActivity::~SetupEventUserActivity((SetupEventUserActivity *)&v444);
        goto LABEL_544;
      case 0x12u:
        qmi::Indication<(unsigned short)1,cat::SetupEventList::IndicationTLVList>::Indication((qmi::MessageBase *)v449, this);
        v445[0].__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        v200 = MEMORY[0x24BDC4620];
        v444 = (uint8_t *)(MEMORY[0x24BDC4620] + 16);
        v445[0].__r_.__value_.__r.__words[0] = 0;
        v201 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        v202 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z23getNotificationRequiredIN3cat14SetupEventList10IndicationEE23NotificationRequirementPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8EB0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v201;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::NotificationRequired,void({block_pointer}&)(cat::tlv::NotificationRequired const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v203 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v203;
        v204 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v202;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat14SetupEventList10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8ED8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v204;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v205 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v205;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v202;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat14SetupEventList10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8F00;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v204;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v206 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v206;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 17;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_DWORD *)&v473[12] = HIDWORD(v445[0].__r_.__value_.__r.__words[1]);
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v200 + 16;
        v207 = *v204;
        if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
        {
          v208 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v208;
          _os_log_impl(&dword_216897000, v207, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v209 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v209 + 24))(v209, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        SetupEventIdleScreenNotify::~SetupEventIdleScreenNotify((SetupEventIdleScreenNotify *)&v444);
        goto LABEL_544;
      case 0x13u:
        qmi::Indication<(unsigned short)1,cat::SetupEventList::IndicationTLVList>::Indication((qmi::MessageBase *)v449, this);
        v445[0].__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        v210 = MEMORY[0x24BDC4638];
        v444 = (uint8_t *)(MEMORY[0x24BDC4638] + 16);
        v445[0].__r_.__value_.__r.__words[0] = 0;
        v211 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        v212 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z23getNotificationRequiredIN3cat14SetupEventList10IndicationEE23NotificationRequirementPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8EB0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v211;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::NotificationRequired,void({block_pointer}&)(cat::tlv::NotificationRequired const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v213 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[1]) = v213;
        v214 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v212;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat14SetupEventList10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8ED8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v214;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v215 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v215;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v212;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat14SetupEventList10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8F00;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v214;
        v455.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)v449, (uint64_t)&v455);
        v216 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v216;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 18;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_DWORD *)&v473[12] = HIDWORD(v445[0].__r_.__value_.__r.__words[1]);
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v210 + 16;
        v217 = *v214;
        if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
        {
          v218 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v218;
          _os_log_impl(&dword_216897000, v217, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v219 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v219 + 24))(v219, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        SetupEventLanguageSelectNotify::~SetupEventLanguageSelectNotify((SetupEventLanguageSelectNotify *)&v444);
        goto LABEL_544;
      case 0x14u:
        v81 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v81;
        v82 = this[2];
        v455.__r_.__value_.__r.__words[2] = v82;
        if (v82)
        {
          v83 = (unint64_t *)(v82 + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v85 = MEMORY[0x24BDC4598];
        v444 = (uint8_t *)(MEMORY[0x24BDC4598] + 16);
        memset(v445, 0, 40);
        v86 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v87 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat11OpenChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8F28;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v86;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v239 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v87;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat11OpenChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8F50;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v239;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v240 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v240;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v87;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat11OpenChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8F78;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v239;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v241 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v241;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v85 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 20;
        v276 = *v239;
        if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
        {
          v277 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v277;
          _os_log_impl(&dword_216897000, v276, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v278 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v278 + 24))(v278, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        OpenChannel::~OpenChannel((OpenChannel *)&v444);
        goto LABEL_491;
      case 0x15u:
        v220 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v220;
        v221 = this[2];
        v455.__r_.__value_.__r.__words[2] = v221;
        if (v221)
        {
          v222 = (unint64_t *)(v221 + 8);
          do
            v223 = __ldxr(v222);
          while (__stxr(v223 + 1, v222));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v224 = MEMORY[0x24BDC45A8];
        v444 = (uint8_t *)(MEMORY[0x24BDC45A8] + 16);
        memset(v445, 0, 40);
        v225 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v226 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat12CloseChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C8FA0;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v225;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v264 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v226;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat12CloseChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8FC8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v264;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v265 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v265;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v226;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat12CloseChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8FF0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v264;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v266 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v266;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v224 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 21;
        v288 = *v264;
        if (os_log_type_enabled(v288, OS_LOG_TYPE_DEFAULT))
        {
          v289 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v289;
          _os_log_impl(&dword_216897000, v288, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v290 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v290 + 24))(v290, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        CloseChannel::~CloseChannel((CloseChannel *)&v444);
        goto LABEL_491;
      case 0x16u:
        v227 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v227;
        v228 = this[2];
        v455.__r_.__value_.__r.__words[2] = v228;
        if (v228)
        {
          v229 = (unint64_t *)(v228 + 8);
          do
            v230 = __ldxr(v229);
          while (__stxr(v230 + 1, v229));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v231 = MEMORY[0x24BDC45A0];
        v444 = (uint8_t *)(MEMORY[0x24BDC45A0] + 16);
        memset(v445, 0, 40);
        v232 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v233 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat11ReceiveData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C9018;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v232;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v267 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v233;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat11ReceiveData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C9040;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v267;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v268 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v268;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v233;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat11ReceiveData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C9068;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v267;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v269 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v269;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v231 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 23;
        v291 = *v267;
        if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
        {
          v292 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v292;
          _os_log_impl(&dword_216897000, v291, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v293 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v293 + 24))(v293, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        ReceiveData::~ReceiveData((ReceiveData *)&v444);
        goto LABEL_491;
      case 0x17u:
        v88 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v88;
        v89 = this[2];
        v455.__r_.__value_.__r.__words[2] = v89;
        if (v89)
        {
          v90 = (unint64_t *)(v89 + 8);
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v92 = MEMORY[0x24BDC4670];
        v444 = (uint8_t *)(MEMORY[0x24BDC4670] + 16);
        memset(v445, 0, 40);
        v93 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v94 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat8SendData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C9090;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v93;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v242 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v94;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat8SendData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C90B8;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v242;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v243 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v243;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v94;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat8SendData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C90E0;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v242;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v244 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v244;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v92 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 22;
        v279 = *v242;
        if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
        {
          v280 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v280;
          _os_log_impl(&dword_216897000, v279, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v281 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v281 + 24))(v281, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        SendData::~SendData((SendData *)&v444);
        goto LABEL_491;
      case 0x1Au:
        v95 = this[1];
        v455.__r_.__value_.__r.__words[0] = *this;
        v455.__r_.__value_.__l.__size_ = v95;
        v96 = this[2];
        v455.__r_.__value_.__r.__words[2] = v96;
        if (v96)
        {
          v97 = (unint64_t *)(v96 + 8);
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v455);
        v99 = MEMORY[0x24BDC45B0];
        v444 = (uint8_t *)(MEMORY[0x24BDC45B0] + 16);
        memset(v445, 0, 40);
        v100 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v473 = 0x4002000000;
        *(_QWORD *)&v473[8] = __Block_byref_object_copy_;
        *(_QWORD *)&v473[16] = __Block_byref_object_dispose_;
        memset(&v473[24], 0, 24);
        v101 = MEMORY[0x24BDAC760];
        *(_QWORD *)cf = MEMORY[0x24BDAC760];
        *(_QWORD *)&cf[8] = 0x40000000;
        *(_QWORD *)&cf[16] = ___Z8getAlphaIN3cat12RefreshAlpha10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&cf[24] = &unk_24D5C9108;
        v464.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v464.__r_.__value_.__l.__size_ = v100;
        *(_QWORD *)&v453[0] = cf;
        qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>((qmi::MessageBase *)&v455, (uint64_t)v453);
        if (*(char *)(*(_QWORD *)&buf[8] + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
        }
        else
        {
          *(_OWORD *)v449 = *(_OWORD *)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
        }
        _Block_object_dispose(buf, 8);
        if ((v473[47] & 0x80000000) != 0)
          operator delete(*(void **)&v473[24]);
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v445[0].__r_.__value_.__r.__words[2]);
        *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v449;
        v445[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v449[16];
        v245 = (NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v10);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        *(_QWORD *)buf = v101;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat12RefreshAlpha10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C9130;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v245;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v246 = *(_DWORD *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        HIDWORD(v445[0].__r_.__value_.__r.__words[0]) = v246;
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v101;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat12RefreshAlpha10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C9158;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v245;
        *(_QWORD *)v449 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)&v455, (uint64_t)v449);
        v247 = *(_BYTE *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        v445[0].__r_.__value_.__s.__data_[8] = v247;
        v477 = 0;
        v475 = 0u;
        v476 = 0u;
        v474 = 0u;
        *(_QWORD *)buf = 0;
        memset(v473, 0, sizeof(v473));
        *(_WORD *)&v473[8] = v445[0].__r_.__value_.__r.__words[1];
        *(_QWORD *)v473 = v445[0].__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[8] = v99 + 16;
        if (v445[1].__r_.__value_.__s.__data_[15] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v473[16], (const std::string::value_type *)v445[0].__r_.__value_.__r.__words[2], v445[1].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)&v473[16] = *(_OWORD *)&v445[0].__r_.__value_.__r.__words[2];
          *(_QWORD *)&v473[32] = v445[1].__r_.__value_.__l.__size_;
        }
        *(_DWORD *)buf = 24;
        v282 = *v245;
        if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
        {
          v283 = asString();
          *(_DWORD *)cf = 136315138;
          *(_QWORD *)&cf[4] = v283;
          _os_log_impl(&dword_216897000, v282, OS_LOG_TYPE_DEFAULT, "#I Sending SIM event with Proactive Command %s", cf, 0xCu);
        }
        v284 = *(_QWORD *)(v3 + 104);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_((uint64_t)cf, (uint64_t)buf);
        (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v284 + 24))(v284, v10, cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(cf);
        _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(buf);
        RefreshAlpha::~RefreshAlpha((RefreshAlpha *)&v444);
LABEL_491:
        v149 = &v455;
        goto LABEL_545;
      default:
        v109 = *v11;
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v109, OS_LOG_TYPE_DEFAULT, "#I Not handling the proactive command, sending out 'Not Supported'", buf, 2u);
        }
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        *(_DWORD *)&cf[24] = 0;
        v110 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z11getUIMRefIdIN3cat14SetEventReport10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8050;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v11;
        v444 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)this, (uint64_t)&v444);
        v111 = *(unsigned int *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = cf;
        *(_QWORD *)&cf[16] = 0x2000000000;
        cf[24] = 0;
        *(_QWORD *)buf = v110;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)v473 = ___Z14getBBSessionIdIN3cat14SetEventReport10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke;
        *(_QWORD *)&v473[8] = &unk_24D5C8078;
        *(_QWORD *)&v473[16] = cf;
        *(_QWORD *)&v473[24] = v11;
        v444 = buf;
        qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>((qmi::MessageBase *)this, (uint64_t)&v444);
        v112 = *(unsigned __int8 *)(*(_QWORD *)&cf[8] + 24);
        _Block_object_dispose(cf, 8);
        ProactiveCommand = getProactiveCommand(v18);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v10, v111, v112, ProactiveCommand, 9, 1);
        return;
    }
  }
}

void sub_21690A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  v50 = (std::__shared_weak_count *)STACK[0x308];
  if (STACK[0x308])
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a49);
  _Unwind_Resume(a1);
}

void ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD v9[6];
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *aBlock;
  _OWORD v14[2];
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  _QWORD *v19;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I QMIClient::QMI_CAT registered", buf, 2u);
  }
  if (*(_QWORD *)(v2 + 88))
  {
    memset(v14, 0, sizeof(v14));
    v9[5] = v2 + 72;
    v10 = QMIServiceMsg::create();
    v11 = 25000;
    v12 = 0;
    aBlock = 0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 0x40000000;
    v9[2] = ___ZN21QMI_STK_CommandDriver19setEventReport_syncEv_block_invoke;
    v9[3] = &__block_descriptor_tmp_4;
    v9[4] = v2;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v16 = 0x40000000;
    v17 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
    v18 = &unk_24D5C7FB0;
    v19 = v9;
    v4 = _Block_copy(buf);
    aBlock = v4;
    if (v10)
    {
      qmi::Client::send();
      v4 = aBlock;
    }
    if (v4)
      _Block_release(v4);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
  }
  else
  {
    v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I QMI Client Invalid while registering for SetEventReport Indication", buf, 2u);
    }
  }
  v7 = (unsigned int *)a1[5];
  v6 = (unsigned int *)a1[6];
  while (v7 != v6)
  {
    v8 = *v7++;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 104) + 32))(*(_QWORD *)(v2 + 104), v8, 0, 1);
  }
}

void sub_21690B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c71_ZTSNSt3__16vectorIN10subscriber15HardwareSimSlotENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<subscriber::HardwareSimSlot>::__init_with_size[abi:ne180100]<subscriber::HardwareSimSlot*,subscriber::HardwareSimSlot*>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
}

void __destroy_helper_block_e8_40c71_ZTSNSt3__16vectorIN10subscriber15HardwareSimSlotENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZZN21QMI_STK_CommandDriver9bootstrapEN8dispatch13group_sessionEENK3__0clEv_block_invoke_38(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint8_t v7[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I QMIClient::QMI_CAT deregistered", v7, 2u);
  }
  v5 = (unsigned int *)a1[5];
  v4 = (unsigned int *)a1[6];
  while (v5 != v4)
  {
    v6 = *v5++;
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 104) + 32))(*(_QWORD *)(v2 + 104), v6, 0, 0);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3cat14SetEventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21690B4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

_QWORD *std::vector<subscriber::HardwareSimSlot>::__init_with_size[abi:ne180100]<subscriber::HardwareSimSlot*,subscriber::HardwareSimSlot*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_21690B5C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMI_STK_CommandDriver>::execute_wrapped<QMI_STK_CommandDriver::shutdown(dispatch::group_session)::$_0>(QMI_STK_CommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMI_STK_CommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMI_STK_CommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t *v5;
  uint64_t v6;
  uint8_t buf[16];

  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  qmi::Client::stop((qmi::Client *)(v2 + 72));
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_21690B660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::FullFuncEventReportMask>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::FullFuncEventReportMask>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::FullFuncEventReportMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::FullFuncEventReportMask>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C7FF8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SetEventReportRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21690B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)1,cat::SetupCall::IndicationTLVList>::Indication(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_21690B894(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)1,cat::SetupEventList::IndicationTLVList>::Indication(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_21690B8FC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___Z11getUIMRefIdIN3cat14SetEventReport10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::DecodedHeaderId,void({block_pointer}&)(cat::tlv::DecodedHeaderId const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v11 = result;
    v9 = tlv::parseV<cat::tlv::DecodedHeaderId>((unint64_t *)&v11, v5);
    v10 = v8;
    if (v11)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 27, v6, v7);
  }
  return result;
}

void ___Z14getBBSessionIdIN3cat14SetEventReport10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___Z13getTextStringIN3cat11DisplayText10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded text string %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void qmi::MessageBase::applyTlv<cat::tlv::TextString,void({block_pointer}&)(cat::tlv::TextString const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *__p[2];
  __int128 v10;
  unint64_t v11;

  TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = TlvValue;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    tlv::parseV<cat::tlv::TextString>(&v11, v5, __p);
    v8 = v11;
    if (v11)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      if (v8)
        return;
LABEL_8:
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 28, v6, v7);
      return;
    }
    operator delete(__p[1]);
    if (!v8)
      goto LABEL_8;
  }
}

void sub_21690BD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___Z15getHighPriorityIN3cat11DisplayText10IndicationEE8PriorityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Priority: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z14getUserControlIN3cat11DisplayText10IndicationEE11UserControlPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received User Control: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z20getImmediateResponseIN3cat11DisplayText10IndicationEE17ImmediateResponsePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Immediate Response: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z11getDurationIN3cat11DisplayText10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 == 2)
  {
    v5 = a2[1];
  }
  else if (v4 == 1)
  {
    v5 = 10 * a2[1];
  }
  else
  {
    if (*a2)
      goto LABEL_8;
    v5 = 600 * a2[1];
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
LABEL_8:
  v6 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2[1];
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v9[0] = 67109376;
    v9[1] = v7;
    v10 = 1024;
    v11 = v8;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Received interval: %d, and calculated duration %d", (uint8_t *)v9, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::Duration,void({block_pointer}&)(cat::tlv::Duration const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::Duration>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 32, v6, v7);
  }
  return result;
}

void ___Z11getUIMRefIdIN3cat11DisplayText10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat11DisplayText10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

uint64_t _ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEEC2ERKS2T_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(ModelBase *__hidden);
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v2 = (uint64_t *)(a2 + 8);
  v3 = *(_DWORD *)a2;
  v6 = (_QWORD *)(a1 + 8);
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v8 = MEMORY[0x24BDC4640];
      goto LABEL_47;
    case 1:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<DisplayText>((__n128 *)(a1 + 8), *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v10 = *(_QWORD *)(a2 + 16);
      v11 = MEMORY[0x24BDC4590];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v11 + 16;
      *(_QWORD *)(a1 + 16) = v10;
      v12 = (std::string *)(a1 + 32);
      if (*(char *)(a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
      }
      else
      {
        v13 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v72 = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      goto LABEL_105;
    case 2:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<GetInkey>((__n128 *)(a1 + 8), *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v14 = *(_QWORD *)(a2 + 16);
      v15 = MEMORY[0x24BDC4650];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v15 + 16;
      *(_QWORD *)(a1 + 16) = v14;
      v16 = (std::string *)(a1 + 32);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_103;
    case 3:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<GetInput>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v17 = *(_QWORD *)(a2 + 16);
      v18 = MEMORY[0x24BDC4658];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v18 + 16;
      *(_QWORD *)(a1 + 16) = v17;
      if (*(char *)(a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
      }
      else
      {
        v19 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = v19;
      }
      v73 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(a1 + 56) = v73;
      v40 = (std::string *)(a1 + 88);
      if ((*(char *)(a2 + 111) & 0x80000000) == 0)
      {
        v60 = a2 + 88;
        goto LABEL_112;
      }
      std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
      goto LABEL_113;
    case 4:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<PlayTone>((__n128 *)(a1 + 8), *v2);
      }
      else
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v20 = *(_QWORD *)(a2 + 16);
        v21 = MEMORY[0x24BDC4660];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v21 + 16;
        *(_QWORD *)(a1 + 16) = v20;
        v16 = (std::string *)(a1 + 32);
        if (*(char *)(a2 + 55) < 0)
        {
LABEL_103:
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
        }
        else
        {
LABEL_16:
          v22 = *(_OWORD *)(a2 + 32);
          v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v22;
        }
        v72 = *(_OWORD *)(a2 + 56);
LABEL_105:
        *(_OWORD *)(a1 + 56) = v72;
      }
      goto LABEL_113;
    case 5:
      if (v3 >= 0)
        v23 = a2 + 8;
      else
        v23 = *v2;
      SendShortMessage::SendShortMessage(a1 + 8, v23);
      goto LABEL_113;
    case 6:
      if (v3 >= 0)
        v24 = a2 + 8;
      else
        v24 = *v2;
      SendSS::SendSS(a1 + 8, v24);
      goto LABEL_113;
    case 7:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<SendUSSD>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v25 = *(_QWORD *)(a2 + 16);
      v26 = MEMORY[0x24BDC4678];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v26 + 16;
      *(_QWORD *)(a1 + 16) = v25;
      if (*(char *)(a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
      }
      else
      {
        v27 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = v27;
      }
      v40 = (std::string *)(a1 + 56);
      if (*(char *)(a2 + 79) < 0)
        goto LABEL_108;
      goto LABEL_111;
    case 8:
      if (v3 >= 0)
        v28 = a2 + 8;
      else
        v28 = *v2;
      SetupCall::SetupCall(a1 + 8, v28);
      v29 = MEMORY[0x24BDC4610];
      goto LABEL_36;
    case 9:
      if (v3 >= 0)
        v30 = a2 + 8;
      else
        v30 = *v2;
      SetupCall::SetupCall(a1 + 8, v30);
      v29 = MEMORY[0x24BDC45E8];
LABEL_36:
      *v6 = v29 + 16;
      goto LABEL_113;
    case 0xA:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<SetupMenu>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v31 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4690] + 16;
      *(_QWORD *)(a1 + 16) = v31;
      v32 = *(_QWORD *)(a2 + 28);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 28) = v32;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>((_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
      v33 = (std::string *)(a1 + 64);
      if ((*(char *)(a2 + 87) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_117;
    case 0xB:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<SelectItem>(a1 + 8, *v2);
      }
      else
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v34 = *(_QWORD *)(a2 + 16);
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4588] + 16;
        *(_QWORD *)(a1 + 16) = v34;
        v35 = *(_QWORD *)(a2 + 28);
        v36 = *(_DWORD *)(a2 + 36);
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 36) = v36;
        *(_QWORD *)(a1 + 28) = v35;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>((_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
        v33 = (std::string *)(a1 + 64);
        if (*(char *)(a2 + 87) < 0)
        {
LABEL_117:
          std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
        }
        else
        {
LABEL_42:
          v37 = *(_OWORD *)(a2 + 64);
          v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v37;
        }
        *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      }
      goto LABEL_113;
    case 0xC:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<SetupIdleText>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v38 = *(_QWORD *)(a2 + 16);
      v39 = MEMORY[0x24BDC45B8];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v39 + 16;
      *(_QWORD *)(a1 + 16) = v38;
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_73;
      goto LABEL_70;
    case 0xD:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v8 = MEMORY[0x24BDC4600];
LABEL_47:
      v9 = (uint64_t (**)(ModelBase *__hidden))(v8 + 16);
      goto LABEL_77;
    case 0xE:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<SendDTMF>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v41 = *(_QWORD *)(a2 + 16);
      v42 = MEMORY[0x24BDC4668];
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v42 + 16;
      *(_QWORD *)(a1 + 16) = v41;
      if (*(char *)(a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
      }
      else
      {
        v43 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = v43;
      }
      v40 = (std::string *)(a1 + 56);
      if (*(char *)(a2 + 79) < 0)
      {
LABEL_108:
        std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
        goto LABEL_113;
      }
LABEL_111:
      v60 = a2 + 56;
      goto LABEL_112;
    case 0xF:
      if (v3 < 0)
      {
        boost::detail::variant::copy_into::internal_visit<LanguageNotification>(a1 + 8, *v2);
        goto LABEL_113;
      }
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v44 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC45E0] + 16;
      *(_QWORD *)(a1 + 16) = v44;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_73;
      goto LABEL_70;
    case 0x10:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v45 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v45;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      v46 = MEMORY[0x24BDC45F8];
      goto LABEL_58;
    case 0x11:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v47 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v47;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      v46 = MEMORY[0x24BDC4620];
      goto LABEL_58;
    case 0x12:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v48 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v48;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      v46 = MEMORY[0x24BDC4638];
      goto LABEL_58;
    case 0x13:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v49 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v49;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      v46 = MEMORY[0x24BDC45F0];
LABEL_58:
      *(_QWORD *)(a1 + 8) = v46 + 16;
      goto LABEL_113;
    case 0x14:
      if ((v3 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v50 = *(_QWORD *)(a2 + 16);
        v51 = MEMORY[0x24BDC4598];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v51 + 16;
        *(_QWORD *)(a1 + 16) = v50;
        v40 = (std::string *)(a1 + 32);
        if ((*(char *)(a2 + 55) & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_70;
      }
      v61 = *v2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v62 = *(_QWORD *)(v61 + 8);
      v63 = MEMORY[0x24BDC4598];
      *(_WORD *)(a1 + 24) = *(_WORD *)(v61 + 16);
      *(_QWORD *)(a1 + 8) = v63 + 16;
      *(_QWORD *)(a1 + 16) = v62;
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(v61 + 47) & 0x80000000) == 0)
        goto LABEL_97;
      goto LABEL_95;
    case 0x15:
      if ((v3 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v52 = *(_QWORD *)(a2 + 16);
        v53 = MEMORY[0x24BDC45A8];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v53 + 16;
        *(_QWORD *)(a1 + 16) = v52;
        v40 = (std::string *)(a1 + 32);
        if ((*(char *)(a2 + 55) & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_70;
      }
      v61 = *v2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v64 = *(_QWORD *)(v61 + 8);
      v65 = MEMORY[0x24BDC45A8];
      *(_WORD *)(a1 + 24) = *(_WORD *)(v61 + 16);
      *(_QWORD *)(a1 + 8) = v65 + 16;
      *(_QWORD *)(a1 + 16) = v64;
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(v61 + 47) & 0x80000000) == 0)
        goto LABEL_97;
      goto LABEL_95;
    case 0x16:
      if ((v3 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v54 = *(_QWORD *)(a2 + 16);
        v55 = MEMORY[0x24BDC4670];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v55 + 16;
        *(_QWORD *)(a1 + 16) = v54;
        v40 = (std::string *)(a1 + 32);
        if ((*(char *)(a2 + 55) & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_70;
      }
      v61 = *v2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v66 = *(_QWORD *)(v61 + 8);
      v67 = MEMORY[0x24BDC4670];
      *(_WORD *)(a1 + 24) = *(_WORD *)(v61 + 16);
      *(_QWORD *)(a1 + 8) = v67 + 16;
      *(_QWORD *)(a1 + 16) = v66;
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(v61 + 47) & 0x80000000) == 0)
        goto LABEL_97;
      goto LABEL_95;
    case 0x17:
      if ((v3 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v56 = *(_QWORD *)(a2 + 16);
        v57 = MEMORY[0x24BDC45A0];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v57 + 16;
        *(_QWORD *)(a1 + 16) = v56;
        v40 = (std::string *)(a1 + 32);
        if ((*(char *)(a2 + 55) & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_70;
      }
      v61 = *v2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v68 = *(_QWORD *)(v61 + 8);
      v69 = MEMORY[0x24BDC45A0];
      *(_WORD *)(a1 + 24) = *(_WORD *)(v61 + 16);
      *(_QWORD *)(a1 + 8) = v69 + 16;
      *(_QWORD *)(a1 + 16) = v68;
      v40 = (std::string *)(a1 + 32);
      if ((*(char *)(v61 + 47) & 0x80000000) == 0)
        goto LABEL_97;
      goto LABEL_95;
    case 0x18:
      if (v3 < 0)
      {
        v61 = *v2;
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v70 = *(_QWORD *)(v61 + 8);
        v71 = MEMORY[0x24BDC45B0];
        *(_WORD *)(a1 + 24) = *(_WORD *)(v61 + 16);
        *(_QWORD *)(a1 + 8) = v71 + 16;
        *(_QWORD *)(a1 + 16) = v70;
        v40 = (std::string *)(a1 + 32);
        if (*(char *)(v61 + 47) < 0)
        {
LABEL_95:
          std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(v61 + 24), *(_QWORD *)(v61 + 32));
          goto LABEL_113;
        }
LABEL_97:
        v60 = v61 + 24;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
        v58 = *(_QWORD *)(a2 + 16);
        v59 = MEMORY[0x24BDC45B0];
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v59 + 16;
        *(_QWORD *)(a1 + 16) = v58;
        v40 = (std::string *)(a1 + 32);
        if (*(char *)(a2 + 55) < 0)
        {
LABEL_70:
          std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
          goto LABEL_113;
        }
LABEL_73:
        v60 = a2 + 32;
      }
LABEL_112:
      v74 = *(_OWORD *)v60;
      v40->__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
      *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v74;
LABEL_113:
      *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
      return a1;
    case 0x19:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v9 = &off_24D5C81C0;
      goto LABEL_77;
    case 0x1A:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v9 = &off_24D5C8200;
      goto LABEL_77;
    case 0x1B:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v9 = &off_24D5C8240;
      goto LABEL_77;
    case 0x1C:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v9 = &off_24D5C8280;
      goto LABEL_77;
    case 0x1D:
      *(_QWORD *)(a1 + 8) = MEMORY[0x24BDC4680] + 16;
      v7 = *(_QWORD *)(a2 + 16);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
      v9 = &off_24D5C82C0;
LABEL_77:
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
      goto LABEL_113;
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void sub_21690CD88(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

__n128 boost::detail::variant::copy_into::internal_visit<DisplayText>(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  __n128 result;

  a1->n128_u64[0] = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4590];
  a1[1].n128_u16[0] = *(_WORD *)(a2 + 16);
  a1->n128_u64[0] = v5 + 16;
  a1->n128_u64[1] = v4;
  v6 = (std::string *)&a1[1].n128_i8[8];
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  result = *(__n128 *)(a2 + 48);
  a1[4].n128_u64[0] = *(_QWORD *)(a2 + 64);
  a1[3] = result;
  return result;
}

void sub_21690CEA4(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

__n128 boost::detail::variant::copy_into::internal_visit<GetInkey>(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  __n128 result;

  a1->n128_u64[0] = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4650];
  a1[1].n128_u16[0] = *(_WORD *)(a2 + 16);
  a1->n128_u64[0] = v5 + 16;
  a1->n128_u64[1] = v4;
  v6 = (std::string *)&a1[1].n128_i8[8];
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  result = *(__n128 *)(a2 + 48);
  a1[3] = result;
  return result;
}

void sub_21690CF34(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<GetInput>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4658];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v5 + 16;
  *(_QWORD *)(a1 + 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_21690D008(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[47] < 0)
    operator delete(*v2);
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

__n128 boost::detail::variant::copy_into::internal_visit<PlayTone>(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  __n128 result;

  a1->n128_u64[0] = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4660];
  a1[1].n128_u16[0] = *(_WORD *)(a2 + 16);
  a1->n128_u64[0] = v5 + 16;
  a1->n128_u64[1] = v4;
  v6 = (std::string *)&a1[1].n128_i8[8];
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  result = *(__n128 *)(a2 + 48);
  a1[3] = result;
  return result;
}

void sub_21690D0B0(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SendShortMessage::SendShortMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = MEMORY[0x24BDC45C0] + 16;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(a1 + 56), (const CSIPhoneNumber *)(a2 + 56));
  v6 = (std::string *)(a1 + 192);
  if (*(char *)(a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 192), *(_QWORD *)(a2 + 200));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_DWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v8;
  return a1;
}

void sub_21690D1A8(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  CSIPhoneNumber::~CSIPhoneNumber(v3);
  if (v1[47] < 0)
    operator delete(*v2);
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t SendSS::SendSS(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4648];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v5 + 16;
  *(_QWORD *)(a1 + 8) = v4;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(a1 + 24), (const CSIPhoneNumber *)(a2 + 24));
  v6 = (std::string *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_21690D268(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 135) < 0)
    operator delete(*(void **)(v1 + 112));
  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<SendUSSD>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4678];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v5 + 16;
  *(_QWORD *)(a1 + 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_21690D374(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[47] < 0)
    operator delete(*v2);
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t SetupCall::SetupCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4688];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v5 + 16;
  *(_QWORD *)(a1 + 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v8;
  }
  v9 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v11;
  return a1;
}

void sub_21690D4D4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[103] < 0)
    operator delete(*v4);
  if (v1[79] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<SetupMenu>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = MEMORY[0x24BDC4690] + 16;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 20) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
}

void sub_21690D5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ModelBase *v2;
  va_list va;

  va_start(va, a2);
  std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ModelBase::~ModelBase(v2);
  _Unwind_Resume(a1);
}

void std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SelectionItem>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[40 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        *(_DWORD *)&v7[v9] = *(_DWORD *)(a2 + v9);
        v11 = (std::string *)&v7[v9 + 8];
        v12 = (const std::string::value_type **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(v10 + 16));
        }
        else
        {
          v13 = *(_OWORD *)v12;
          *(_QWORD *)&v7[v9 + 24] = *(_QWORD *)(a2 + v9 + 24);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
        }
        *(_DWORD *)&v7[v9 + 32] = *(_DWORD *)(v10 + 32);
        v9 += 40;
      }
      while (v10 + 40 != a3);
      v7 += v9;
    }
    a1[1] = v7;
  }
}

void sub_21690D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SelectionItem>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

void boost::detail::variant::copy_into::internal_visit<SelectItem>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = MEMORY[0x24BDC4588] + 16;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 20);
  v6 = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 28) = v6;
  *(_QWORD *)(a1 + 20) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<SelectionItem>::__init_with_size[abi:ne180100]<SelectionItem*,SelectionItem*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v7 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
}

void sub_21690D858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ModelBase *v2;
  va_list va;

  va_start(va, a2);
  std::vector<SelectionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ModelBase::~ModelBase(v2);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<SetupIdleText>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = MEMORY[0x24BDC45B8];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v3 + 16;
  *(_QWORD *)(a1 + 8) = v2;
  v4 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_21690D8F4(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<SendDTMF>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = MEMORY[0x24BDC4668];
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = v5 + 16;
  *(_QWORD *)(a1 + 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_21690D9B8(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[47] < 0)
    operator delete(*v2);
  ModelBase::~ModelBase((ModelBase *)v1);
  _Unwind_Resume(a1);
}

void boost::detail::variant::copy_into::internal_visit<LanguageNotification>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = MEMORY[0x24BDC4680] + 16;
  v2 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = MEMORY[0x24BDC45E0] + 16;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

void sub_21690DA64(_Unwind_Exception *a1)
{
  ModelBase *v1;

  ModelBase::~ModelBase(v1);
  _Unwind_Resume(a1);
}

BOOL ModelBase::shouldNotifyOnSessionCompletion(ModelBase *this)
{
  return *((_DWORD *)this + 2) == 0;
}

void fill<26>::~fill(ModelBase *a1)
{
  ModelBase::~ModelBase(a1);
  JUMPOUT(0x2199FEAC4);
}

void fill<27>::~fill(ModelBase *a1)
{
  ModelBase::~ModelBase(a1);
  JUMPOUT(0x2199FEAC4);
}

void fill<28>::~fill(ModelBase *a1)
{
  ModelBase::~ModelBase(a1);
  JUMPOUT(0x2199FEAC4);
}

void fill<29>::~fill(ModelBase *a1)
{
  ModelBase::~ModelBase(a1);
  JUMPOUT(0x2199FEAC4);
}

void fill<30>::~fill(ModelBase *a1)
{
  ModelBase::~ModelBase(a1);
  JUMPOUT(0x2199FEAC4);
}

void boost::detail::variant::forced_return<void>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

_QWORD *_ZN5boost7variantINS_6detail7variant13over_sequenceINS_3mpl6l_itemIN4mpl_5long_ILl30EEE4NoneNS5_INS7_ILl29EEE11DisplayTextNS5_INS7_ILl28EEE8GetInkeyNS5_INS7_ILl27EEE8GetInputNS5_INS7_ILl26EEE8PlayToneNS5_INS7_ILl25EEE16SendShortMessageNS5_INS7_ILl24EEE6SendSSNS5_INS7_ILl23EEE8SendUSSDNS5_INS7_ILl22EEE25SetupCallUserConfirmationNS5_INS7_ILl21EEE21SetupCallAlphaDisplayNS5_INS7_ILl20EEE9SetupMenuNS5_INS7_ILl19EEE10SelectItemNS5_INS7_ILl18EEE13SetupIdleTextNS5_INS7_ILl17EEE24ProvideLocalInfoLanguageNS5_INS7_ILl16EEE8SendDTMFNS5_INS7_ILl15EEE20LanguageNotificationNS5_INS7_ILl14EEE22SetupEventUserActivityNS5_INS7_ILl13EEE26SetupEventIdleScreenNotifyNS5_INS7_ILl12EEE30SetupEventLanguageSelectNotifyNS5_INS7_ILl11EEE22SetupEventIMSRegNotifyNS5_INS7_ILl10EEE11OpenChannelNS5_INS7_ILl9EEE12CloseChannelNS5_INS7_ILl8EEE8SendDataNS5_INS7_ILl7EEE11ReceiveDataNS5_INS7_ILl6EEE12RefreshAlphaNS5_INS7_ILl5EEE4fillILi26EENS5_INS7_ILl4EEES1N_ILi27EENS5_INS7_ILl3EEES1N_ILi28EENS5_INS7_ILl2EEES1N_ILi29EENS5_INS7_ILl1EEES1N_ILi30EENS4_5l_endEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEJEE15destroy_contentEv(_DWORD *a1)
{
  _QWORD *result;
  int v2;
  int v3;
  uint64_t (**v4)(_QWORD);

  v3 = *a1;
  result = a1 + 2;
  v2 = v3;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
    case 0xD:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      v4 = (uint64_t (**)(_QWORD))*result;
      return (_QWORD *)((uint64_t (**)(_QWORD *))v4)[1](result);
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
      v4 = (uint64_t (**)(_QWORD))*result;
      if ((v2 & 0x80000000) == 0)
        return (_QWORD *)((uint64_t (**)(_QWORD *))v4)[1](result);
      if (v4)
        return (_QWORD *)(*((uint64_t (**)(_QWORD))*v4 + 2))(*result);
      return result;
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void ___Z13getTextStringIN3cat8GetInkey10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded text string %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z17getResponseFormatIN3cat8GetInkey10IndicationEE14ResponseFormatPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Response Format: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::ResponseFormat,void({block_pointer}&)(cat::tlv::ResponseFormat const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::ResponseFormat>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 33, v6, v7);
  }
  return result;
}

void ___Z19getHelpAvailabilityIN3cat8GetInkey10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Help Availability: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::HelpAvailable,void({block_pointer}&)(cat::tlv::HelpAvailable const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::HelpAvailable>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 34, v6, v7);
  }
  return result;
}

void ___Z11getDurationIN3cat8GetInkey10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 == 2)
  {
    v5 = a2[1];
  }
  else if (v4 == 1)
  {
    v5 = 10 * a2[1];
  }
  else
  {
    if (*a2)
      goto LABEL_8;
    v5 = 600 * a2[1];
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
LABEL_8:
  v6 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2[1];
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v9[0] = 67109376;
    v9[1] = v7;
    v10 = 1024;
    v11 = v8;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Received interval: %d, and calculated duration %d", (uint8_t *)v9, 0xEu);
  }
}

void ___Z11getUIMRefIdIN3cat8GetInkey10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8GetInkey10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z13getTextStringIN3cat8GetInput10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded text string %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z17getResponseFormatIN3cat8GetInput10IndicationEE14ResponseFormatPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Response Format: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z24getResponsePackingFormatIN3cat8GetInput10IndicationEE21ResponsePackingFormatPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Response Packing Format: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z17getResponseLengthIN3cat8GetInput10IndicationEENSt3__14pairIiiEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2[1];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a2;
  v3 = **(NSObject ***)(a1 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v4;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received Response Length, with min: %d, and max: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z19getHelpAvailabilityIN3cat8GetInput10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Help Availability: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z16getShowUserInputIN3cat8GetInput10IndicationEE13ShowUserInputPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Show User Input: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z14getDefaultTextIN3cat8GetInput10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded default text %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat8GetInput10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8GetInput10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat8PlayTone10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void qmi::MessageBase::applyTlv<cat::tlv::Alpha,void({block_pointer}&)(cat::tlv::Alpha const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *__p[2];
  __int128 v10;
  unint64_t v11;

  TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = TlvValue;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    tlv::parseV<cat::tlv::Alpha>(&v11, v5, __p);
    v8 = v11;
    if (v11)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      if (v8)
        return;
LABEL_8:
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 69, v6, v7);
      return;
    }
    operator delete(__p[1]);
    if (!v8)
      goto LABEL_8;
  }
}

void sub_21690EB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___Z7getToneIN3cat8PlayTone10IndicationEE14SIMToolkitTonePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *a2 + 1;
  if (v3 <= 0xE && ((0x7FFDu >> v3) & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dword_216AA1634[v3];
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109378;
    v5[1] = v2;
    v6 = 2080;
    v7 = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Play Tone: %d, and mapped to: %s", (uint8_t *)v5, 0x12u);
  }
}

void ___Z11getDurationIN3cat8PlayTone10IndicationEENSt3__16chrono8durationIxNS3_5ratioILl1ELl10EEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 == 2)
  {
    v5 = a2[1];
  }
  else if (v4 == 1)
  {
    v5 = 10 * a2[1];
  }
  else
  {
    if (*a2)
      goto LABEL_8;
    v5 = 600 * a2[1];
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
LABEL_8:
  v6 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2[1];
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v9[0] = 67109376;
    v9[1] = v7;
    v10 = 1024;
    v11 = v8;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Received interval: %d, and calculated duration %d", (uint8_t *)v9, 0xEu);
  }
}

void ___Z11getUIMRefIdIN3cat8PlayTone10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8PlayTone10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z19getHelpAvailabilityIN3cat10SelectItem10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Help Availability: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z15getPresentationIN3cat10SelectItem10IndicationEE12PresentationPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Presentation %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z19getSoftkeySelectionIN3cat10SelectItem10IndicationEE16SoftkeySelectionPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Softkey Selection: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::SoftkeySelection,void({block_pointer}&)(cat::tlv::SoftkeySelection const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::SoftkeySelection>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 39, v6, v7);
  }
  return result;
}

__n128 __Block_byref_object_copy__111(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__112(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__113(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__114(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___Z17getSelectionItemsIN3cat10SelectItem10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2 != a2)
    std::vector<cat::tlv::Item>::__assign_with_size[abi:ne180100]<cat::tlv::Item*,cat::tlv::Item*>(v2, (_BYTE *)*a2, (_BYTE *)a2[1], (a2[1] - *a2) >> 5);
}

void qmi::MessageBase::applyTlv<cat::tlv::Items,void({block_pointer}&)(cat::tlv::Items const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8[3];
  unsigned __int8 *v9;
  void **v10;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    memset(v8, 0, sizeof(v8));
    tlv::parseV<cat::tlv::Items>(&v9, v5, v8);
    if (v9)
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v10 = (void **)v8;
      std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    else
    {
      v10 = (void **)v8;
      std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v10);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 40, v6, v7);
    }
  }
}

void sub_21690F3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<cat::tlv::Item>::__assign_with_size[abi:ne180100]<cat::tlv::Item*,cat::tlv::Item*>(uint64_t *a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void **v18;
  void **i;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (_BYTE *)*a1;
  if (a4 > (v8 - *a1) >> 5)
  {
    if (v10)
    {
      std::vector<vs::tlv::RemoteNumberListItem>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_20;
    v11 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v11 = a4;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v11;
    if (v12 >> 59)
LABEL_20:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v9, v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)v13 + 32 * v14;
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cat::tlv::Item>,cat::tlv::Item*,cat::tlv::Item*,cat::tlv::Item*>(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
    goto LABEL_14;
  }
  v16 = (a1[1] - (uint64_t)v10) >> 5;
  if (v16 < a4)
  {
    v17 = &a2[32 * v16];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cat::tlv::Item *,cat::tlv::Item *,cat::tlv::Item *,0>(a2, v17, v10);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cat::tlv::Item>,cat::tlv::Item*,cat::tlv::Item*,cat::tlv::Item*>(v9, (uint64_t)v17, (uint64_t)a3, a1[1]);
LABEL_14:
    a1[1] = v15;
    return;
  }
  v18 = (void **)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cat::tlv::Item *,cat::tlv::Item *,cat::tlv::Item *,0>(a2, a3, v10);
  for (i = (void **)a1[1]; i != v18; i -= 4)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  a1[1] = (uint64_t)v18;
}

void sub_21690F534(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21690F53C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cat::tlv::Item>,cat::tlv::Item*,cat::tlv::Item*,cat::tlv::Item*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_BYTE *)v4 = *((_BYTE *)v6 - 8);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_21690F5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
  }
  return a1;
}

_BYTE *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cat::tlv::Item *,cat::tlv::Item *,cat::tlv::Item *,0>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v5;
  const std::string *v6;
  char v7;
  std::string *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (const std::string *)(v5 + 8);
      v7 = *v5;
      v5 += 32;
      v8 = (std::string *)(a3 + 8);
      *a3 = v7;
      a3 += 32;
      std::string::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return a3;
}

void qmi::MessageBase::applyTlv<cat::tlv::NextActionIndicatorList,void({block_pointer}&)(cat::tlv::NextActionIndicatorList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  std::vector<unsigned int> __p;
  unsigned __int8 *v10;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(&__p, 0, sizeof(__p));
    tlv::parseV<cat::tlv::NextActionIndicatorList>(&v10, v5, &__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 42, v6, v7);
  }
}

void sub_21690F77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<QMI_NextActionIndicator>::__assign_with_size[abi:ne180100]<QMI_NextActionIndicator*,QMI_NextActionIndicator*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      goto LABEL_23;
    v11 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v11 = a4;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 62)
LABEL_23:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>(v9, v12);
    v10 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v10) >> 2;
  if (v17 >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  v18 = &__src[4 * v17];
  if (v16 != v10)
  {
    result = memmove((void *)*result, __src, v16 - v10);
    v10 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v10;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v10[v14];
  return result;
}

uint64_t std::vector<SelectionItem>::__push_back_slow_path<SelectionItem const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[24];
  _QWORD *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333)
    v7 = 0x666666666666666;
  else
    v7 = v3;
  v19 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SelectionItem>>(v7);
  else
    v8 = 0;
  v17 = v7;
  *(_QWORD *)v18 = v7 + 40 * v2;
  *(_QWORD *)&v18[16] = v7 + 40 * v8;
  std::construct_at[abi:ne180100]<SelectionItem,SelectionItem const&,SelectionItem*>(*(_DWORD **)v18, a2);
  v9 = 0;
  *(_QWORD *)&v18[8] = *(_QWORD *)v18 + 40;
  v11 = *a1;
  for (i = a1[1];
        i + v9 != v11;
        std::construct_at[abi:ne180100]<SelectionItem,SelectionItem const&,SelectionItem*>((_DWORD *)(v9 + *(_QWORD *)v18), v9 + i))
  {
    v9 -= 40;
  }
  v12 = a1[2];
  v13 = *(_OWORD *)&v18[8];
  v16 = *(_QWORD *)&v18[8];
  v14 = *(_OWORD *)a1;
  *a1 = *(_QWORD *)v18 + v9;
  *(_OWORD *)v18 = v14;
  *(_OWORD *)(a1 + 1) = v13;
  *(_QWORD *)&v18[16] = v12;
  v17 = v14;
  std::__split_buffer<SelectionItem>::~__split_buffer((uint64_t)&v17);
  return v16;
}

void sub_21690FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<SelectionItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *std::construct_at[abi:ne180100]<SelectionItem,SelectionItem const&,SelectionItem*>(_DWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t std::__split_buffer<SelectionItem>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    SelectionItem::~SelectionItem((SelectionItem *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___Z8getAlphaIN3cat10SelectItem10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z14getDefaultItemIN3cat10SelectItem10IndicationEEiPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received default item: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::DefaultItem,void({block_pointer}&)(cat::tlv::DefaultItem const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::DefaultItem>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 41, v6, v7);
  }
  return result;
}

void ___Z11getUIMRefIdIN3cat10SelectItem10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat10SelectItem10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z18getPackingRequiredIN3cat16SendShortMessage10IndicationEE15PackingRequiredPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Packing Required: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z10getSmsTpduIN3cat16SendShortMessage10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)(v4 + 40);
    if (*(char *)(v4 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received SMS PDU: %s", (uint8_t *)&v6, 0xCu);
  }
}

void ___Z12getIsCDMASmsIN3cat16SendShortMessage10IndicationEE7SMSTypePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received SMS Type: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

__n128 __Block_byref_object_copy__131(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v5 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  result = *(__n128 *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(__n128 *)(a1 + 152) = result;
  return result;
}

void __Block_byref_object_dispose__132(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___Z10getAddressIN3cat16SendShortMessage10IndicationEE14CSIPhoneNumberPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, char *a2)
{
  char v3;
  char v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  _OWORD *v9;
  int v10;
  NSObject *v11;
  void **v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  decodeBCDExtendedAddress();
  MEMORY[0x2199FD7C8](&v13, v4 & 0xF | (16 * (v3 & 7)) | 0x80u, v26);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(v5 + 40) = v13;
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(v5 + 64) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  v7 = (void **)(v5 + 72);
  if (*(char *)(v5 + 95) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v16;
  *(_QWORD *)(v5 + 88) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  *(_DWORD *)(v5 + 96) = v18;
  *(_BYTE *)(v5 + 100) = v19;
  v8 = (void **)(v5 + 104);
  if (*(char *)(v5 + 127) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = __p;
  *(_QWORD *)(v5 + 120) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p) = 0;
  v9 = (_OWORD *)(v5 + 128);
  if (*(char *)(v5 + 151) < 0)
  {
    operator delete(*(void **)(v5 + 128));
    v10 = SHIBYTE(v21);
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
    if (v10 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
  }
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  v11 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getFullNumber((CSIPhoneNumber *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    v12 = v14 >= 0 ? &v13 : (void **)v13;
    *(_DWORD *)buf = 136315138;
    v29 = v12;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Received address: %s", buf, 0xCu);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_216910478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<cat::tlv::Address,void({block_pointer}&)(cat::tlv::Address const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *__p[2];
  __int128 v10;
  unint64_t v11;

  TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = TlvValue;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    tlv::parseV<cat::tlv::Address>(&v11, v5, __p);
    v8 = v11;
    if (v11)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      if (v8)
        return;
LABEL_8:
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 48, v6, v7);
      return;
    }
    operator delete(__p[1]);
    if (!v8)
      goto LABEL_8;
  }
}

void sub_216910564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___Z8getAlphaIN3cat16SendShortMessage10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z15getResponseTypeIN3cat16SendShortMessage10IndicationEE12ResponseTypePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Response Type %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::ResponseType,void({block_pointer}&)(cat::tlv::ResponseType const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::ResponseType>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 104, v6, v7);
  }
  return result;
}

void ___Z11getUIMRefIdIN3cat16SendShortMessage10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat16SendShortMessage10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z10getAddressIN3cat6SendSS10IndicationEE14CSIPhoneNumberPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, char *a2)
{
  char v3;
  char v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  _OWORD *v9;
  int v10;
  NSObject *v11;
  void **v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  decodeBCDExtendedAddress();
  MEMORY[0x2199FD7C8](&v13, v4 & 0xF | (16 * (v3 & 7)) | 0x80u, v26);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(v5 + 40) = v13;
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(v5 + 64) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  v7 = (void **)(v5 + 72);
  if (*(char *)(v5 + 95) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v16;
  *(_QWORD *)(v5 + 88) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  *(_DWORD *)(v5 + 96) = v18;
  *(_BYTE *)(v5 + 100) = v19;
  v8 = (void **)(v5 + 104);
  if (*(char *)(v5 + 127) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = __p;
  *(_QWORD *)(v5 + 120) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p) = 0;
  v9 = (_OWORD *)(v5 + 128);
  if (*(char *)(v5 + 151) < 0)
  {
    operator delete(*(void **)(v5 + 128));
    v10 = SHIBYTE(v21);
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
    if (v10 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
  }
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  v11 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getFullNumber((CSIPhoneNumber *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    v12 = v14 >= 0 ? &v13 : (void **)v13;
    *(_DWORD *)buf = 136315138;
    v29 = v12;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Received address: %s", buf, 0xCu);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_216910BCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

void ___Z8getAlphaIN3cat6SendSS10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat6SendSS10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat6SendSS10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z13getUSSDStringIN3cat8SendUSSD10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*(_BYTE *)(a2 + 1));
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(unsigned __int8 *)(a2 + 1);
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded USSD %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z8getAlphaIN3cat8SendUSSD10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat8SendUSSD10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8SendUSSD10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z10getAddressIN3cat9SetupCall10IndicationEE14CSIPhoneNumberPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, char *a2)
{
  char v3;
  char v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  _OWORD *v9;
  int v10;
  NSObject *v11;
  void **v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  decodeBCDExtendedAddress();
  MEMORY[0x2199FD7C8](&v13, v4 & 0xF | (16 * (v3 & 7)) | 0x80u, v26);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(v5 + 40) = v13;
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(v5 + 64) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  v7 = (void **)(v5 + 72);
  if (*(char *)(v5 + 95) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v16;
  *(_QWORD *)(v5 + 88) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  *(_DWORD *)(v5 + 96) = v18;
  *(_BYTE *)(v5 + 100) = v19;
  v8 = (void **)(v5 + 104);
  if (*(char *)(v5 + 127) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = __p;
  *(_QWORD *)(v5 + 120) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p) = 0;
  v9 = (_OWORD *)(v5 + 128);
  if (*(char *)(v5 + 151) < 0)
  {
    operator delete(*(void **)(v5 + 128));
    v10 = SHIBYTE(v21);
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
    if (v10 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *v9 = v22;
    *(_QWORD *)(v5 + 144) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    *(_OWORD *)(v5 + 152) = v24;
    *(_BYTE *)(v5 + 168) = v25;
  }
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  v11 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CSIPhoneNumber::getFullNumber((CSIPhoneNumber *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    v12 = v14 >= 0 ? &v13 : (void **)v13;
    *(_DWORD *)buf = 136315138;
    v29 = v12;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Received address: %s", buf, 0xCu);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_216911424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

void ___Z23getCallSetupRequirementIN3cat9SetupCall10IndicationEE20CallSetupRequirementPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Call Setup Requirement: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::CallSetupRequirement,void({block_pointer}&)(cat::tlv::CallSetupRequirement const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::CallSetupRequirement>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 49, v6, v7);
  }
  return result;
}

void ___Z20getRedialRequirementIN3cat9SetupCall10IndicationEE17RedialRequirementPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Redial Requirement: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

unsigned __int8 *qmi::MessageBase::applyTlv<cat::tlv::Redial,void({block_pointer}&)(cat::tlv::Redial const&)>(qmi::MessageBase *a1, _QWORD *a2)
{
  unsigned __int8 *result;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::Redial>(&v9, v5);
    if (v9)
      return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*a2 + 16))(*a2);
    else
      return (unsigned __int8 *)((uint64_t (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 50, v6, v7);
  }
  return result;
}

void ___Z13getSubaddressIN3cat9SetupCall10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)(v4 + 40);
    if (*(char *)(v4 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received Sub Address: %s", (uint8_t *)&v6, 0xCu);
  }
}

void ___Z24getUserConfirmationAlphaIN3cat9SetupCall10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded User Confirmation Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z24getSetupCallDisplayAlphaIN3cat9SetupCall10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Setup Call Display Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z15getResponseTypeIN3cat9SetupCall10IndicationEE12ResponseTypePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Response Type %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z11getUIMRefIdIN3cat9SetupCall10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupCall10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z19getHelpAvailabilityIN3cat9SetupMenu10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Help Availability: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z19getSoftkeySelectionIN3cat9SetupMenu10IndicationEE16SoftkeySelectionPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Softkey Selection: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z17getSelectionItemsIN3cat9SetupMenu10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2 != a2)
    std::vector<cat::tlv::Item>::__assign_with_size[abi:ne180100]<cat::tlv::Item*,cat::tlv::Item*>(v2, (_BYTE *)*a2, (_BYTE *)a2[1], (a2[1] - *a2) >> 5);
}

void ___Z8getAlphaIN3cat9SetupMenu10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z14getDefaultItemIN3cat9SetupMenu10IndicationEEiPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received default item: %d", (uint8_t *)v5, 8u);
  }
}

void ___Z11getUIMRefIdIN3cat9SetupMenu10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupMenu10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z13getTextStringIN3cat17SetupIdleModeText10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded text string %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat17SetupIdleModeText10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat17SetupIdleModeText10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z11getUIMRefIdIN3cat20ProvideLocalInfoLang10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat20ProvideLocalInfoLang10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z7getDTMFIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)(v4 + 40);
    if (*(char *)(v4 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received DTMF Address: %s", (uint8_t *)&v6, 0xCu);
  }
}

void ___Z8getAlphaIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat9SetupDtmf10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupDtmf10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z31getSpecificLanguageNotificationIN3cat20LanguageNotification10IndicationEE24SpecificLanguagePresencePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Language presence: %d, mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z11getLanguageIN3cat20LanguageNotification10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (_QWORD *)(v3 + 40);
  if (*(char *)(v3 + 63) < 0)
    v4 = (_QWORD *)*v4;
  *(_BYTE *)v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (uint64_t *)(v5 + 40);
  if (*(char *)(v5 + 63) < 0)
    v6 = (uint64_t *)*v6;
  *((_BYTE *)v6 + 1) = a2[1];
  v7 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = (_QWORD *)(v8 + 40);
    if (*(char *)(v8 + 63) < 0)
      v9 = (_QWORD *)*v9;
    v10 = 136315138;
    v11 = v9;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Received language: %s", (uint8_t *)&v10, 0xCu);
  }
}

void ___Z11getUIMRefIdIN3cat20LanguageNotification10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat20LanguageNotification10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z23getNotificationRequiredIN3cat14SetupEventList10IndicationEE23NotificationRequirementPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (*a2 <= 1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Notification Requirement %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::NotificationRequired,void({block_pointer}&)(cat::tlv::NotificationRequired const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<cat::tlv::NotificationRequired>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 70, v6, v7);
  }
  return result;
}

void ___Z11getUIMRefIdIN3cat14SetupEventList10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat14SetupEventList10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat11OpenChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat11OpenChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat11OpenChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat12CloseChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat12CloseChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat12CloseChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat11ReceiveData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat11ReceiveData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat11ReceiveData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat8SendData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat8SendData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8SendData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat12RefreshAlpha10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  getDataCodingScheme(*a2);
  decodeString();
  v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (_QWORD *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 1024;
    v11 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat12RefreshAlpha10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat12RefreshAlpha10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(_QWORD *a1, int a2)
{
  char v2;
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = a2;
  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((unsigned __int8 *)*v4 + 8) != a2)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = v2;
    *(_BYTE *)(v9 + 9) = 0;
    v8 = v9 + 9;
    *(_QWORD *)v9 = &off_24D5C91A0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    return v7 + 9;
  }
  return (char *)v8;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C91A0;
  return result;
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::TerminalResponse>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5C91F0;
    *(_DWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_WORD *)(v7 + 20) = 0;
    *(_DWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5C91F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5C91F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::TerminalResponse>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::TerminalResponse>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5C91F0;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 32), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_216913F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C4085B429EELL);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9240;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9240;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::GetInkeyExtraInfo>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::GetInkeyExtraInfo>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C9240;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a1 + 20);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_216914220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C409CA0F745);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::LanguageInfo>(_QWORD *a1, int a2)
{
  char v2;
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = a2;
  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((unsigned __int8 *)*v4 + 8) != a2)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = v2;
    *(_WORD *)(v9 + 9) = 0;
    v8 = v9 + 9;
    *(_QWORD *)v9 = &off_24D5C9290;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    return v7 + 9;
  }
  return (char *)v8;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 9));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9290;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C92E0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C92E0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::TextString>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::TextString>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C92E0;
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + 16);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_2169145F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4040040ABCLL);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::ItemIdentifier>(_QWORD *a1, int a2)
{
  char v2;
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = a2;
  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((unsigned __int8 *)*v4 + 8) != a2)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = v2;
    *(_BYTE *)(v9 + 9) = 0;
    v8 = v9 + 9;
    *(_QWORD *)v9 = &off_24D5C9330;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    return v7 + 9;
  }
  return (char *)v8;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9330;
  return result;
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 1;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = v7 + 12;
    *(_QWORD *)v7 = &off_24D5C9380;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 12;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::IPPref>((_BYTE **)a2, (_DWORD *)(a1 + 12));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9380;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::IPPref>((_BYTE **)a2, (_DWORD *)(a1 + 12));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C93D0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::Address>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 20)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 20;
    *(_QWORD *)v7 = off_24D5C9420;
    *(_WORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9420;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9420;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::Address>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C9420;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_216914E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

double getAddressTlvFromCSIPhoneNumber<cat::tlv::Address>(CSIPhoneNumber *a1, uint64_t a2)
{
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)a2 = (CSIPhoneNumber::getTypeOfAddress(a1) >> 4) & 3;
  *(_BYTE *)(a2 + 1) = CSIPhoneNumber::getTypeOfAddress(a1) & 0xF;
  CSIPhoneNumber::getBaseNumber(a1);
  v4 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9470;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9470;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::HWVersion>((_BYTE **)a2, (_BYTE *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C9470;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_216915048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::IPPref>((_BYTE **)a2, (_DWORD *)(a1 + 12));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C94C0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SendDecodedEnvelopeCmd8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169151F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::RadioAccessTechnology>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 30)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 30;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = v7 + 12;
    *(_QWORD *)v7 = &off_24D5C9538;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 12;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9538;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::CallType>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 31)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 31;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = v7 + 12;
    *(_QWORD *)v7 = &off_24D5C9588;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 12;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9588;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C95D8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C95D8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::Address>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C95D8;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_216915824(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9628;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9628;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<cat::tlv::Address>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C9628;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

void sub_2169159B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::TransactionID>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 32)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 32;
    *(_QWORD *)v7 = off_24D5C9678;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9678;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5C9678;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::HWVersion>((_BYTE **)a2, (_BYTE *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5C9678;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_216915CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C96C8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9718;
  return result;
}

void QMIPreferredNetworksCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, xpc_object_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  dispatch_object_t object;

  v8 = (_QWORD *)operator new();
  v9 = *a2;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = *a3;
  v11 = v10;
  if (v10)
  {
    xpc_retain(v10);
  }
  else
  {
    v10 = xpc_null_create();
    v11 = v10;
  }
  QMIPreferredNetworksCommandDriver::QMIPreferredNetworksCommandDriver(v8, a1, &object, &v11);
  *a4 = 0;
  a4[1] = 0;
  std::shared_ptr<QMIPreferredNetworksCommandDriver>::shared_ptr[abi:ne180100]<QMIPreferredNetworksCommandDriver,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1},void>(a4, (uint64_t)v8);
  xpc_release(v10);
  if (object)
    dispatch_release(object);
}

void sub_216915F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;
  void *v11;
  int v12;

  xpc_release(v11);
  if (object)
    dispatch_release(object);
  if (v12)
    MEMORY[0x2199FEAC4](v10, 0x10E1C40A0F2FCEFLL);
  _Unwind_Resume(a1);
}

_QWORD *QMIPreferredNetworksCommandDriver::QMIPreferredNetworksCommandDriver(_QWORD *a1, uint64_t a2, NSObject **a3, void **a4)
{
  _QWORD *v7;
  void *v8;
  _BYTE v10[16];

  v7 = (_QWORD *)PreferredNetworksCommandDriver::PreferredNetworksCommandDriver();
  v7[5] = MEMORY[0x24BDC3D48] + 16;
  v7[6] = 0;
  v7[7] = 0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const char *)*MEMORY[0x24BDC3E90], "pnp.qmi");
  ctu::SharedLoggable<QMIPreferredNetworksCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(a1 + 8, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *a1 = &off_24D5C9768;
  a1[5] = &unk_24D5C97D8;
  a1[13] = &unk_24D5C9818;
  v8 = *a4;
  a1[14] = *a4;
  if (v8)
    xpc_retain(v8);
  else
    a1[14] = xpc_null_create();
  a1[15] = 0;
  a1[16] = 0;
  return a1;
}

void sub_21691603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PreferredNetworksCommandDriver *v9;
  PreferredNetworksCommandDriverEventHandler *v10;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v10);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(v9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<QMIPreferredNetworksCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(_QWORD *a1, NSObject **a2)
{
  NSObject *v3;
  _BYTE v5[8];

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  a1[2] = *a2;
  if (v3)
    dispatch_retain(v3);
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v5);
  return a1;
}

void QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(QMIPreferredNetworksCommandDriver *this)
{
  PreferredNetworksCommandDriverEventHandler *v2;

  *(_QWORD *)this = &off_24D5C9768;
  *((_QWORD *)this + 5) = &unk_24D5C97D8;
  v2 = (QMIPreferredNetworksCommandDriver *)((char *)this + 40);
  *((_QWORD *)this + 13) = &unk_24D5C9818;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  MEMORY[0x2199FDF6C]((char *)this + 96);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 8);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v2);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(this);
}

{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(QMIPreferredNetworksCommandDriver *this)
{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 40));
}

{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 104));
}

{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 40));
  JUMPOUT(0x2199FEAC4);
}

{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 104));
  JUMPOUT(0x2199FEAC4);
}

std::__shared_weak_count *QMIPreferredNetworksCommandDriver::createCommandDriver@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *result;
  std::mutex *ServiceMap;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  void *v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  xpc_object_t object;
  void *__p[2];
  char v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v4 = a1 + 120;
  if (!*(_QWORD *)(a1 + 120))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 24));
    ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v24);
    v9 = v24;
    std::string::basic_string[abi:ne180100]<0>(__p, "registration");
    v10 = MEMORY[0x2199FEDD0](*(_QWORD *)(a1 + 112));
    v11 = MEMORY[0x24BDACFB0];
    if (v10 == MEMORY[0x24BDACFB0])
    {
      v12 = xpc_null_create();
      object = v12;
      if (MEMORY[0x2199FEDD0](*(_QWORD *)(a1 + 112)) == v11)
      {
        v13 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(a1 + 112));
        if (!v13)
          v13 = xpc_null_create();
        v14 = xpc_null_create();
        object = v13;
        xpc_release(v12);
        xpc_release(v14);
      }
    }
    else
    {
      object = xpc_null_create();
    }
    QMIClientPool::requestClient(v9, 3u, (uint64_t *)__p, a1 + 104, (uint64_t)&object, &v26);
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v4, &v26);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    xpc_release(object);
    object = 0;
    if (v23 < 0)
      operator delete(__p[0]);
    v18 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5 || (v6 = *(_QWORD *)(a1 + 64), (result = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  *a2 = v6;
  a2[1] = result;
  return result;
}

void sub_2169163F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  xpc_release(object);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *`non-virtual thunk to'QMIPreferredNetworksCommandDriver::createCommandDriver@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return QMIPreferredNetworksCommandDriver::createCommandDriver(a1 - 40, a2);
}

uint64_t QMIPreferredNetworksCommandDriver::stopCommandDriverEventHandler(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[2];

  v2 = *(_QWORD *)(this + 120);
  if (v2)
  {
    v3[0] = v2 + 88;
    v3[1] = 1;
    MEMORY[0x2199FDF3C](v2 + 88, a2);
    *(_BYTE *)(v2 + 74) = 0;
    return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v3);
  }
  return this;
}

uint64_t `non-virtual thunk to'QMIPreferredNetworksCommandDriver::stopCommandDriverEventHandler(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[2];

  v2 = *(_QWORD *)(this + 80);
  if (v2)
  {
    v3[0] = v2 + 88;
    v3[1] = 1;
    MEMORY[0x2199FDF3C](v2 + 88, a2);
    *(_BYTE *)(v2 + 74) = 0;
    return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v3);
  }
  return this;
}

void QMIPreferredNetworksCommandDriver::registered(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t buf[8];

  v4 = a1[12];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Client has started", buf, 2u);
  }
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a1[9];
  if (!v9 || (v10 = a1[8], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (_QWORD *)operator new();
  *v13 = v5;
  v13[1] = v6;
  v13[2] = a1;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[10];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = (_QWORD *)operator new();
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  v19 = 0;
  *(_QWORD *)buf = 0;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void `non-virtual thunk to'QMIPreferredNetworksCommandDriver::registered(uint64_t a1, uint64_t *a2)
{
  QMIPreferredNetworksCommandDriver::registered((_QWORD *)(a1 - 104), a2);
}

void QMIPreferredNetworksCommandDriver::deregistered(_QWORD *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t buf[8];

  v2 = a1[12];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has stopped", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)a1[9];
  if (!v3 || (v4 = a1[8], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = (_QWORD *)operator new();
  *v7 = a1;
  v8 = a1[10];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (_QWORD *)operator new();
  *v11 = v7;
  v11[1] = v4;
  v11[2] = v6;
  v13 = 0;
  *(_QWORD *)buf = 0;
  dispatch_async_f(v8, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void `non-virtual thunk to'QMIPreferredNetworksCommandDriver::deregistered(uint64_t a1)
{
  QMIPreferredNetworksCommandDriver::deregistered((_QWORD *)(a1 - 104));
}

void QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(QMIPreferredNetworksCommandDriver *this, int a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v25;
  void (*v26)(_QWORD *, uint64_t);
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  QMIPreferredNetworksCommandDriver *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, sizeof(v17));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
  *(_DWORD *)qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>(v17, 16) = a2;
  v4 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC: %08x", buf, 8u);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v5
    || (v6 = *((_QWORD *)this + 15), v7 = *((_QWORD *)this + 8), (v8 = std::__shared_weak_count::lock(v5)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!*(_BYTE *)(v6 + 72) || !*(_QWORD *)(v6 + 56))
    __TUAssertTrigger();
  v18 = v6 + 40;
  v19 = QMIServiceMsg::create();
  v20 = 25000;
  v21 = 0;
  v22 = 0;
  v14 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v25 = 1174405120;
  v26 = ___ZN16QMIVirtualClient4sendIN3nas25PreferredPlmnListChecksum7RequestE33QMIPreferredNetworksCommandDriverZNS4_20sendPreferredPlmnCRCEjE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS6_8weak_ptrIT0_EES8__block_invoke;
  v27 = &__block_descriptor_tmp_8_2;
  v28 = v7;
  v29 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v30 = this;
  aBlock[0] = v14;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_4;
  aBlock[3] = &unk_24D5C99F8;
  aBlock[4] = buf;
  v16 = _Block_copy(aBlock);
  v22 = v16;
  if (v19)
  {
    qmi::Client::send();
    v16 = v22;
  }
  if (v16)
    _Block_release(v16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  std::__shared_weak_count::__release_weak(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_2169169D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;

  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a13);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _BYTE *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  _OWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  memset(v55, 0, sizeof(v55));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v55);
  v8 = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>(v55, 16);
  *v8 = a2;
  v8[1] = a3;
  v9 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 8);
    v11 = *(unsigned __int8 *)(a1 + 9);
    v12 = *(unsigned __int8 *)(a1 + 10);
    v13 = *(unsigned __int8 *)(a1 + 11);
    v14 = *(unsigned __int8 *)(a1 + 12);
    v15 = *(unsigned __int8 *)(a1 + 13);
    v16 = *(unsigned __int8 *)(a1 + 14);
    v17 = *(unsigned __int8 *)(a1 + 15);
    v18 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67111168;
    *(_DWORD *)&buf[4] = v10;
    LOWORD(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 2) = v11;
    HIWORD(v63) = 1024;
    LODWORD(v64) = v12;
    WORD2(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 6) = v13;
    WORD5(v64) = 1024;
    HIDWORD(v64) = v14;
    LOWORD(v65) = 1024;
    *(_DWORD *)((char *)&v65 + 2) = v15;
    HIWORD(v65) = 1024;
    LODWORD(v66) = v16;
    WORD2(v66) = 1024;
    *(_DWORD *)((char *)&v66 + 6) = v17;
    WORD5(v66) = 1024;
    HIDWORD(v66) = v18;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I IMSI length = %u (0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x)", buf, 0x38u);
  }
  v19 = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>(v55, 17);
  v20 = *(unsigned __int8 *)(a1 + 8);
  *v19 = v20;
  if (v20)
  {
    v21 = 0;
    do
    {
      v19[v21 + 1] = *(_BYTE *)(a1 + 9 + v21);
      ++v21;
    }
    while (v21 < *(unsigned __int8 *)(a1 + 8));
  }
  *(_QWORD *)buf = 0;
  v63 = 0;
  *(_QWORD *)&v64 = 0;
  std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(buf, *(const void **)a4, *(_QWORD *)(a4 + 8), 0x6DB6DB6DB6DB6DB7 * (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4));
  v22 = (uint64_t *)qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>(v55, 18);
  v23 = (char *)v63;
  if (v63 != *(_QWORD *)buf)
  {
    v24 = 0;
    v25 = v22 + 2;
    v26 = (unint64_t *)v22[1];
    v23 = *(char **)buf;
    do
    {
      v27 = &v23[8 * v24 - v24];
      v28 = *(unsigned __int16 *)v27;
      v29 = *((unsigned __int16 *)v27 + 1);
      v30 = v27[4];
      v31 = v27[5];
      v32 = v27[6];
      if ((unint64_t)v26 >= *v25)
      {
        v33 = ((uint64_t)v26 - *v22) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v34 = *v25 - *v22;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v22 + 2), v36);
        else
          v37 = 0;
        v38 = &v37[8 * v33];
        *(_QWORD *)v38 = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
        v26 = (unint64_t *)(v38 + 8);
        v40 = *v22;
        v39 = v22[1];
        if (v39 != *v22)
        {
          do
          {
            v41 = *(_DWORD *)(v39 - 8);
            v39 -= 8;
            v42 = *(_DWORD *)(v39 + 3);
            *((_DWORD *)v38 - 2) = v41;
            v38 -= 8;
            *(_DWORD *)(v38 + 3) = v42;
          }
          while (v39 != v40);
          v39 = *v22;
        }
        *v22 = (uint64_t)v38;
        v22[1] = (uint64_t)v26;
        v22[2] = (uint64_t)&v37[8 * v36];
        if (v39)
          operator delete((void *)v39);
      }
      else
      {
        *v26++ = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
      }
      v22[1] = (uint64_t)v26;
      ++v24;
      v23 = *(char **)buf;
    }
    while (v24 < 0x6DB6DB6DB6DB6DB7 * (v63 - *(_QWORD *)buf));
  }
  if (v23)
  {
    v63 = (uint64_t)v23;
    operator delete(v23);
  }
  v43 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v43
    || (v44 = *(_QWORD *)(a1 + 120), v45 = *(_QWORD *)(a1 + 64), (v46 = std::__shared_weak_count::lock(v43)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v47 = v46;
  p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
  do
    v51 = __ldaxr(p_shared_owners);
  while (__stlxr(v51 - 1, p_shared_owners));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (!*(_BYTE *)(v44 + 72) || !*(_QWORD *)(v44 + 56))
    __TUAssertTrigger();
  v56 = v44 + 40;
  v57 = QMIServiceMsg::create();
  v58 = 25000;
  v59 = 0;
  v60 = 0;
  v52 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v63 = 1174405120;
  *(_QWORD *)&v64 = ___ZN16QMIVirtualClient4sendIN3nas17PreferredPlmnList7RequestE33QMIPreferredNetworksCommandDriverZNS4_21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS5_9allocatorIS7_EEEEE3__3EENS5_9enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS5_8weak_ptrIT0_EESF__block_invoke;
  *((_QWORD *)&v64 + 1) = &__block_descriptor_tmp_12_1;
  v65 = v45;
  *(_QWORD *)&v66 = v47;
  do
    v53 = __ldxr(p_shared_weak_owners);
  while (__stxr(v53 + 1, p_shared_weak_owners));
  *((_QWORD *)&v66 + 1) = a1;
  aBlock[0] = v52;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_4;
  aBlock[3] = &unk_24D5C99F8;
  aBlock[4] = buf;
  v54 = _Block_copy(aBlock);
  v60 = v54;
  if (v57)
  {
    qmi::Client::send();
    v54 = v60;
  }
  if (v54)
    _Block_release(v54);
  if ((_QWORD)v66)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v66);
  std::__shared_weak_count::__release_weak(v47);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v55);
}

void sub_216916EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;

  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a13);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216916FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2492492492492493)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::CallListItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4 - v4];
  return result;
}

uint64_t *std::shared_ptr<QMIPreferredNetworksCommandDriver>::shared_ptr[abi:ne180100]<QMIPreferredNetworksCommandDriver,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5C9920;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 64);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21691707C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[10], v1, (dispatch_function_t)std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1}::operator() const(QMIPreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21691709C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 80), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1}::operator() const(QMIPreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1}::operator() const(QMIPreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(std::mutex *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;

  v4 = "13QMIClientPool";
  if (((unint64_t)"13QMIClientPool" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"13QMIClientPool" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = (const char *)v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(this);
  v16 = v4;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&this[1].__m_.__sig, (unint64_t *)&v16);
  if (v8)
  {
    v10 = v8[3];
    v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  std::mutex::unlock(this);
  *a2 = v10;
  a2[1] = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_216917238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;

  v1 = *a1;
  v10 = a1;
  v11 = v1;
  v2 = *(_QWORD **)(v1 + 16);
  QMIVirtualClient::disableNasServingSystemIndications(*(QMIVirtualClient **)v1, (const ctu::OsLogLogger *)(v2 + 12));
  v3 = (std::__shared_weak_count *)v2[7];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = v2[6];
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 1);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2169172F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v3, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 48);
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, 1);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_216917438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::Checksum>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::Checksum>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 12;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::Checksum>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = &off_24D5C9998;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9998;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3nas25PreferredPlmnListChecksum7RequestE33QMIPreferredNetworksCommandDriverZNS4_20sendPreferredPlmnCRCEjE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS6_8weak_ptrIT0_EES8__block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t TlvValue;
  int v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  const char *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE buf[12];
  uint8_t v35[8];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v33 = v5;
  if (!v5)
    return;
  if (!a1[4])
  {
    v10 = v5;
LABEL_30:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v6 = (_QWORD *)a1[6];
  v7 = *(_DWORD *)(a2 + 4);
  if (v7)
  {
    v8 = v6[12];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v35 = 67109378;
      *(_DWORD *)&v35[4] = v7;
      LOWORD(v36) = 2080;
      *(_QWORD *)((char *)&v36 + 2) = qmi::asString();
      _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Preferred PLMN List CRC check failed: Error in response with code = %d (%s)", v35, 0x12u);
    }
    v9 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v35 = *(_QWORD *)a2;
  *(_QWORD *)&v36 = v11;
  v12 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v36 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v35);
  v17 = TlvValue;
  if (!TlvValue)
    goto LABEL_15;
  v18 = v16;
  *(_QWORD *)buf = TlvValue;
  v9 = tlv::parseV<nas::tlv::ChecksumResult>((unint64_t *)buf, v16);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v35, 1, v17, v18);
LABEL_15:
    v9 = 0;
  }
  v19 = v6[12];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = (const char *)&unk_216AC4FCA;
    if (!v9)
      v20 = "no";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v20;
    _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC check completed, result: %s match", buf, 0xCu);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v35);
LABEL_21:
  v21 = (std::__shared_weak_count *)v6[9];
  if (!v21 || (v22 = v6[8], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  v25 = operator new();
  *(_QWORD *)v25 = v6;
  *(_BYTE *)(v25 + 8) = v9;
  v26 = v6[10];
  v27 = (unint64_t *)&v24->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = (_QWORD *)operator new();
  *v29 = v25;
  v29[1] = v22;
  v29[2] = v24;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)buf = 0;
  dispatch_async_f(v26, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)v35);
  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  v10 = v33;
  if (v33)
    goto LABEL_30;
}

void sub_2169179DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c58_ZTSNSt3__18weak_ptrI33QMIPreferredNetworksCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__18weak_ptrI33QMIPreferredNetworksCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 48);
      if (v6)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 1, *((unsigned __int8 *)v1 + 8));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_216917B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::MessageSequence>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::MessageSequence>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::MessageSequence>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_WORD *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5C9A40;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileIdentifer>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9A40;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnImsi>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnImsi>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnImsi>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)v4 = &off_24D5C9A90;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)(v4 + 10) = 0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::PreferredPlmnImsi>(a2, a1 + 9);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9A90;
  *(_QWORD *)(result + 9) = *(_QWORD *)(a1 + 9);
  *(_BYTE *)(result + 17) = *(_BYTE *)(a1 + 17);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnList>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnList>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 16;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnList>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)v4 = &off_24D5C9AE0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 16;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5C9AE0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5C9AE0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2K1XHints>((_QWORD *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::PreferredPlmnList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5C9AE0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<nas::tlv::PlmnPriorityData>::__init_with_size[abi:ne180100]<nas::tlv::PlmnPriorityData*,nas::tlv::PlmnPriorityData*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  return v2;
}

void sub_2169182FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nas::tlv::PlmnPriorityData>::__init_with_size[abi:ne180100]<nas::tlv::PlmnPriorityData*,nas::tlv::PlmnPriorityData*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 1);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21691837C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3nas17PreferredPlmnList7RequestE33QMIPreferredNetworksCommandDriverZNS4_21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS5_9allocatorIS7_EEEEE3__3EENS5_9enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS5_8weak_ptrIT0_EESF__block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint8_t buf[8];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v28 = std::__shared_weak_count::lock(v3);
    if (v28)
    {
      if (a1[4])
      {
        v5 = (_QWORD *)a1[6];
        v6 = *(_DWORD *)(a2 + 4);
        v7 = v5[12];
        if (v6)
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = v6;
            v31 = 2080;
            v32 = qmi::asString();
            _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Preferred PLMN List push failed: Error in response with code = %d 9%s)", buf, 0x12u);
          }
          v8 = (std::__shared_weak_count *)v5[9];
          if (!v8 || (v9 = v5[8], (v10 = std::__shared_weak_count::lock(v8)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v11 = v10;
          v12 = (_QWORD *)operator new();
          *v12 = v5;
          v13 = v5[10];
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          v16 = (_QWORD *)operator new();
          *v16 = v12;
          v16[1] = v9;
          v16[2] = v11;
          v29 = 0;
          *(_QWORD *)buf = 0;
          dispatch_async_f(v13, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
          std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
          std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
        }
        else
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List segment push completed", buf, 2u);
          }
          v18 = (std::__shared_weak_count *)v5[9];
          if (!v18 || (v19 = v5[8], (v20 = std::__shared_weak_count::lock(v18)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v11 = v20;
          v21 = (_QWORD *)operator new();
          *v21 = v5;
          v22 = v5[10];
          v23 = (unint64_t *)&v11->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          v25 = (_QWORD *)operator new();
          *v25 = v21;
          v25[1] = v19;
          v25[2] = v11;
          v29 = 0;
          *(_QWORD *)buf = 0;
          dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>>)::{lambda(void *)#1}::__invoke);
          std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
          std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
          do
            v17 = __ldaxr(v23);
          while (__stlxr(v17 - 1, v23));
        }
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  if (v28)
  {
    v26 = (unint64_t *)&v28->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_2169186B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 48);
      if (v6)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, 1, 0);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2169187A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 48);
      if (v6)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, 1, 1);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2169188B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t QmiEosCommandDriver::create@<X0>(capabilities::euicc *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;

  result = capabilities::euicc::supportsEOS(a1);
  if ((result & 1) != 0)
  {
    v4 = operator new();
    EosCommandDriver::EosCommandDriver();
    *(_QWORD *)v4 = &off_24D5C9B48;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    v5 = 0uLL;
    result = (uint64_t)std::shared_ptr<QmiEosCommandDriver>::shared_ptr[abi:ne180100]<QmiEosCommandDriver,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1},void>((uint64_t *)&v5, v4);
    *(_OWORD *)a2 = v5;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

void sub_2169189AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0xE1C40223276F2);
  _Unwind_Resume(a1);
}

void sub_216918A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_3(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t TlvValue;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13[2];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Error processing EosStatus Indication", (uint8_t *)v13, 2u);
    }
  }
  else
  {
    TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      v7 = TlvValue;
      v8 = v6;
      v13[0] = TlvValue;
      tlv::parseV<vinyl::tlv::IndEosState>(v13, v6);
      if (!v13[0])
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 3, v7, v8);
    }
    v9 = qmi::MessageBase::findTlvValue(this);
    if (v9)
    {
      v11 = v9;
      v12 = v10;
      v13[0] = v9;
      tlv::parseV<vinyl::tlv::IndEosAssertionState>(v13, v10);
      if (!v13[0])
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 4, v11, v12);
    }
    QmiEosCommandDriver::handleQmiEosStatus_sync(v2);
  }
}

void QmiEosCommandDriver::queryEosStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  _QWORD v15[5];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v9 = a1 + 80;
  v10 = QMIServiceMsg::create();
  v11 = 25000;
  v12 = 0;
  v13 = 0;
  v4 = MEMORY[0x24BDAC760];
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN19QmiEosCommandDriver14queryEosStatusENSt3__18functionIFvN3ctu6resultINS0_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_8_3;
  v15[4] = a1;
  v5 = v16;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl16EosStatusMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5C9D48;
  aBlock[4] = v15;
  v6 = _Block_copy(aBlock);
  v13 = v6;
  if (v10)
  {
    qmi::Client::send();
    v6 = v13;
  }
  if (v6)
    _Block_release(v6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
  if (v17 == v16)
  {
    v7 = 4;
  }
  else
  {
    if (!v17)
      return;
    v7 = 5;
    v5 = v17;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
}

void sub_216918D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31)
{
  _QWORD *v31;
  uint64_t v33;

  if (a31 == v31)
  {
    v33 = 4;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v33 = 5;
    v31 = a31;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v33))(v31);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19QmiEosCommandDriver22registerForIndicationsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "Error processing EosRegisterMessage Response, error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t QmiEosCommandDriver::handleQmiEosStatus_sync(uint64_t a1)
{
  NSObject *v1;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = asString();
    v5 = 2080;
    v6 = asString();
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Handling EOS status - state : %s, assertionState : %s", (uint8_t *)&v3, 0x16u);
  }
  return EosCommandDriver::publishEosStatus();
}

uint64_t ___ZN19QmiEosCommandDriver14queryEosStatusENSt3__18functionIFvN3ctu6resultINS0_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20[4];
  unint64_t v21;
  _BYTE v22[12];
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Error processing EosStatusMessage Response, error: %s", buf, 0xCu);
    }
    result = *(_QWORD *)(a1 + 64);
    if (result)
    {
      v22[0] = 2;
      v22[4] = 3;
      return (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)result + 48))(result, v22);
    }
    return result;
  }
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v9 = TlvValue;
    v10 = v8;
    *(_QWORD *)buf = TlvValue;
    v11 = tlv::parseV<vinyl::tlv::RespEosState>((unint64_t *)buf, v8);
    if (*(_QWORD *)buf)
      goto LABEL_10;
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 3, v9, v10);
  }
  v11 = 0;
LABEL_10:
  v12 = qmi::MessageBase::findTlvValue(this);
  v14 = v12;
  if (!v12)
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  v15 = v13;
  *(_QWORD *)buf = v12;
  v16 = tlv::parseV<vinyl::tlv::RespEosAssertionState>((unint64_t *)buf, v13);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 4, v14, v15);
    goto LABEL_13;
  }
LABEL_14:
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
  {
    if (((v11 - 1) & 0xFC) != 0)
      v18 = 0;
    else
      v18 = (v11 - 1) + 1;
    v19 = 0x100000000;
    if (v16 != 1)
      v19 = (unint64_t)(v16 == 2) << 33;
    v20[0] = 1;
    v21 = v18 | v19;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 48))(v17, v20);
    v20[0] = 0;
  }
  return QmiEosCommandDriver::handleQmiEosStatus_sync(v3);
}

uint64_t __copy_helper_block_e8_40c89_ZTSNSt3__18functionIFvN3ctu6resultINS_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c89_ZTSNSt3__18functionIFvN3ctu6resultINS_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t QmiEosCommandDriver::bootstrap_sync(Registry **this)
{
  char *Name;
  NSObject *v3;
  std::__shared_weak_count *v4;
  Registry *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  _QWORD v17[5];
  void *__p[2];
  uint64_t (*v19)();
  void *v20;
  Registry **v21;
  void *v22[2];
  _QWORD *(*v23)(uint64_t);
  void *v24;
  Registry **v25;
  std::__shared_weak_count *v26;
  Registry *v27;
  std::__shared_weak_count *v28;
  dispatch_object_t v29;
  _QWORD v30[2];
  __int128 v31;
  _QWORD *v32;

  Name = (char *)EosCommandDriver::getName((EosCommandDriver *)this);
  std::string::basic_string[abi:ne180100]<0>(v22, Name);
  v3 = this[3];
  v29 = v3;
  if (v3)
    dispatch_retain(v3);
  std::string::basic_string[abi:ne180100]<0>(__p, "eos");
  v4 = (std::__shared_weak_count *)this[2];
  if (!v4 || (v5 = this[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v27 = v5;
  v28 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  Registry::getServerConnection(this[6]);
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)(this + 12), &v31);
  qmi::Client::~Client((qmi::Client *)v30);
  v10 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  v13 = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (v29)
    dispatch_release(v29);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  v15 = (void *)MEMORY[0x24BDAC760];
  v22[0] = (void *)MEMORY[0x24BDAC760];
  v22[1] = (void *)0x40000000;
  v23 = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke;
  v24 = &__block_descriptor_tmp_5;
  v25 = this;
  qmi::Client::setHandler();
  __p[0] = v15;
  __p[1] = (void *)0x40000000;
  v19 = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_2;
  v20 = &__block_descriptor_tmp_4_0;
  v21 = this;
  qmi::Client::setHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(this + 10));
  v17[0] = v15;
  v17[1] = 0x40000000;
  v17[2] = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_3;
  v17[3] = &__block_descriptor_tmp_6;
  v17[4] = this;
  v30[0] = v15;
  v30[1] = 0x40000000;
  *(_QWORD *)&v31 = ___ZNK3qmi6Client13setIndHandlerIRKN5vinyl9EosStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v31 + 1) = &unk_24D5C9CA8;
  v32 = v17;
  return qmi::Client::setIndHandler();
}

void sub_216919400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;

  if (a32)
  {
    p_shared_owners = (unint64_t *)&a32->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
      std::__shared_weak_count::__release_weak(a32);
    }
  }
  v37 = *(std::__shared_weak_count **)(v33 - 104);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  v38 = (unint64_t *)&v32->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (a20 < 0)
    operator delete(__p);
  v40 = *(NSObject **)(v33 - 96);
  if (v40)
    dispatch_release(v40);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void QmiEosCommandDriver::start_sync(QmiEosCommandDriver *this)
{
  char *v2;
  const void **v3;
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  __int128 v26;
  _QWORD aBlock[5];

  v2 = (char *)this + 80;
  qmi::Client::start((QmiEosCommandDriver *)((char *)this + 80));
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v3 = (const void **)__p[1];
  if (__p[1] != (void *)v26)
  {
    while (*((_BYTE *)*v3 + 8) != 16)
    {
      if (++v3 == (const void **)v26)
        goto LABEL_8;
    }
  }
  if (v3 == (const void **)v26)
  {
LABEL_8:
    v6 = operator new();
    v7 = v6;
    *(_WORD *)(v6 + 8) = 16;
    *(_QWORD *)v6 = &off_24D5C9CF0;
    v8 = v26;
    if ((unint64_t)v26 >= *((_QWORD *)&v26 + 1))
    {
      v10 = (uint64_t)(v26 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v11 = (uint64_t)(*((_QWORD *)&v26 + 1) - (unint64_t)__p[1]) >> 2;
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if (*((_QWORD *)&v26 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v26 + 8, v12);
      else
        v13 = 0;
      v14 = (uint64_t *)&v13[8 * v10];
      v15 = &v13[8 * v12];
      *v14 = v7;
      v9 = v14 + 1;
      v17 = (char *)__p[1];
      v16 = (char *)v26;
      if ((void *)v26 != __p[1])
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)__p[1];
      }
      __p[1] = v14;
      *(_QWORD *)&v26 = v9;
      *((_QWORD *)&v26 + 1) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v26 = v6;
      v9 = (_QWORD *)(v8 + 8);
    }
    v5 = (_BYTE *)(v7 + 9);
    *(_QWORD *)&v26 = v9;
  }
  else
  {
    if (!v4)
      __cxa_bad_cast();
    v5 = v4 + 9;
  }
  *v5 = 1;
  v20[5] = v2;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  v24 = 0;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = ___ZN19QmiEosCommandDriver22registerForIndicationsEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_7_0;
  v20[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl18EosRegisterMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5C9D20;
  aBlock[4] = v20;
  v19 = _Block_copy(aBlock);
  v24 = v19;
  if (v21)
  {
    qmi::Client::send();
    v19 = v24;
  }
  if (v19)
    _Block_release(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216919718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t QmiEosCommandDriver::stop_sync(QmiEosCommandDriver *this)
{
  return qmi::Client::stop((QmiEosCommandDriver *)((char *)this + 80));
}

void QmiEosCommandDriver::~QmiEosCommandDriver(QmiEosCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5C9B48;
  qmi::Client::~Client((QmiEosCommandDriver *)((char *)this + 80));
  EosCommandDriver::~EosCommandDriver(this);
}

{
  *(_QWORD *)this = &off_24D5C9B48;
  qmi::Client::~Client((QmiEosCommandDriver *)((char *)this + 80));
  EosCommandDriver::~EosCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::shared_ptr<QmiEosCommandDriver>::shared_ptr[abi:ne180100]<QmiEosCommandDriver,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5C9C50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216919848(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1}::operator() const(QmiEosCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216919868(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1}::operator() const(QmiEosCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1}::operator() const(QmiEosCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5vinyl9EosStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169199C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9CF0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl18EosRegisterMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216919B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl16EosStatusMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216919C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

BOOL EurekaGSMCallFormatter::isTechnology(uint64_t a1, int a2)
{
  return a2 == 5 || (a2 & 0xFFFFFFFE) == 2;
}

void EurekaGSMCallFormatter::createSecondCallDialReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 48) = 25000;
  v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "createSecondCallDialReq for GSM not needed", v3, 2u);
  }
}

void EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  qmi::MutableMessageBase *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[8];
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Answering waiting call (if any), holding active", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  v5 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v5);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v5);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 25000;
  v16 = *(_QWORD *)buf;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a2, &v16);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v20[0] = &off_24D5C9FA0;
  v20[1] = a1;
  v21 = v20;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a2 + 16), (uint64_t)v20);
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_16:
  *(_DWORD *)(a2 + 48) = 95000;
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_216919F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

const void **EurekaGSMCallFormatter::createSwapReq(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v6;

  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::SharedRef(&v6, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a3);
  return ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&v6);
}

void sub_21691A014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  qmi::MutableMessageBase *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[8];
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Answering waiting call, ending active", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  v5 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v5);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v5);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 25000;
  v16 = *(_QWORD *)buf;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a2, &v16);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v20[0] = &off_24D5CA020;
  v20[1] = a1;
  v21 = v20;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a2 + 16), (uint64_t)v20);
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_16:
  *(_DWORD *)(a2 + 48) = 95000;
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21691A218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createEndThisCallReq(uint64_t a1@<X0>, const CallInfo *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  qmi::MutableMessageBase *v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  qmi::MutableMessageBase *v22;
  _QWORD *v23;
  _BYTE *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34[51];
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD v37[4];
  void *v38[51];
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD v41[4];
  void *v42[51];
  _BYTE v43[24];
  _BYTE *v44;
  uint8_t buf[8];
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_DWORD *)a2 + 23);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I EurekaGSMCallFormatter: Ending call %d", buf, 8u);
  }
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 48) = 25000;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
  v9 = *(NSObject **)(a1 + 8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8 == 1)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Using EndCall request", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    v46 = 0;
    v11 = (qmi::MutableMessageBase *)operator new();
    *(_OWORD *)v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    qmi::MutableMessageBase::MutableMessageBase(v11);
    std::shared_ptr<vs::EndCall::Request>::shared_ptr[abi:ne180100]<vs::EndCall::Request,void>(buf, (uint64_t)v11);
    v12 = *(_QWORD **)buf;
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 1174405120;
    v41[2] = ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke;
    v41[3] = &__block_descriptor_tmp_5_1;
    CallInfo::CallInfo((CallInfo *)v42, a2);
    v13 = (_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>(v12, 1);
    ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke((uint64_t)v41, v13);
    v39 = *(_QWORD **)buf;
    v40 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a3, (uint64_t *)&v39);
    v16 = v40;
    if (v40)
    {
      v17 = (unint64_t *)&v40->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    CallInfo::~CallInfo(v42);
    v19 = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_31;
    }
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Using ManageCalls request", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    v46 = 0;
    v22 = (qmi::MutableMessageBase *)operator new();
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    qmi::MutableMessageBase::MutableMessageBase(v22);
    std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v22);
    *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 9;
    v23 = *(_QWORD **)buf;
    v37[0] = MEMORY[0x24BDAC760];
    v37[1] = 1174405120;
    v37[2] = ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke_2;
    v37[3] = &__block_descriptor_tmp_9_0;
    CallInfo::CallInfo((CallInfo *)v38, a2);
    v24 = (_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>(v23, 16);
    ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke_2((uint64_t)v37, v24);
    v35 = *(_QWORD *)buf;
    v36 = v46;
    if (v46)
    {
      v25 = (unint64_t *)&v46->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a3, &v35);
    v27 = v36;
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    *(_DWORD *)(a3 + 48) = 95000;
    CallInfo::~CallInfo(v38);
    v19 = v46;
    if (v46)
    {
      v30 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v30);
      while (__stlxr(v21 - 1, v30));
LABEL_31:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  CallInfo::CallInfo((CallInfo *)v34, a2);
  v44 = 0;
  v31 = operator new(0x1A8uLL);
  *v31 = &off_24D5CA0A0;
  v31[1] = a1;
  CallInfo::CallInfo((CallInfo *)(v31 + 2), (const CallInfo *)v34);
  v44 = v31;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a3 + 16), (uint64_t)v43);
  v32 = v44;
  if (v44 == v43)
  {
    v33 = 4;
    v32 = v43;
    goto LABEL_37;
  }
  if (v44)
  {
    v33 = 5;
LABEL_37:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  CallInfo::~CallInfo(v34);
}

void sub_21691A6F4(_Unwind_Exception *a1)
{
  EurekaVoiceRequestMessage *v1;
  uint64_t v2;

  MEMORY[0x2199FEAC4](v2, 0x1080C407FDA5F58);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

void __copy_helper_block_e8_32c14_ZTSK8CallInfo(uint64_t a1, uint64_t a2)
{
  CallInfo::CallInfo((CallInfo *)(a1 + 32), (const CallInfo *)(a2 + 32));
}

void __destroy_helper_block_e8_32c14_ZTSK8CallInfo(uint64_t a1)
{
  CallInfo::~CallInfo((void **)(a1 + 32));
}

uint64_t ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

void EurekaGSMCallFormatter::createSendToVoicemailReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  qmi::MutableMessageBase *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[8];
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Sending calls to VM now.", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  v5 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v5);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v5);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 25000;
  v16 = *(_QWORD *)buf;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a2, &v16);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v20[0] = &off_24D5CA120;
  v20[1] = a1;
  v21 = v20;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a2 + 16), (uint64_t)v20);
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_16:
  *(_DWORD *)(a2 + 48) = 95000;
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21691A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createEndHeldReq(EurekaGSMCallFormatter *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  qmi::MutableMessageBase *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[8];
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Ending the held or any waiting calls", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  v5 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v5);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v5);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 25000;
  v16 = *(_QWORD *)buf;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a2, &v16);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v20[0] = &off_24D5CA1A0;
  v20[1] = this;
  v21 = v20;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a2 + 16), (uint64_t)v20);
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_16:
  *(_DWORD *)(a2 + 48) = 95000;
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21691AC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createMergeReq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  qmi::MutableMessageBase *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[51];
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  std::__shared_weak_count *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Creating msg to create multi party call", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v25 = 0;
  v7 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v7);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(buf, (uint64_t)v7);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(*(_QWORD **)buf) = 5;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 48) = 25000;
  v22 = *(_QWORD *)buf;
  v23 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a3, &v22);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  CallInfo::CallInfo((CallInfo *)v20, (const CallInfo *)a2);
  if (*(char *)(a2 + 431) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 408), *(_QWORD *)(a2 + 416));
  else
    __p = *(std::string *)(a2 + 408);
  v27 = 0;
  v13 = operator new(0x1C0uLL);
  *v13 = off_24D5CA220;
  v13[1] = a1;
  CallInfo::CallInfo((CallInfo *)(v13 + 2), (const CallInfo *)v20);
  v14 = (std::string *)(v13 + 53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v13[55] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v27 = v13;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a3 + 16), (uint64_t)v26);
  v15 = v27;
  if (v27 == v26)
  {
    v16 = 4;
    v15 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_22;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  CallInfo::~CallInfo(v20);
  *(_DWORD *)(a3 + 48) = 95000;
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_21691AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EurekaVoiceRequestMessage *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;

  v14 = v11;
  CallInfo::~CallInfo(v14);
  operator delete(v12);
  EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0::~$_0((uint64_t)&a10);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v10);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v13 - 112);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createPrivateConversationReq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  qmi::MutableMessageBase *v6;
  _BYTE *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[51];
  std::string __p;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[5];
  _QWORD *v25;
  std::__shared_weak_count *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v25 = 0;
  v26 = 0;
  v6 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v6);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(&v25, (uint64_t)v6);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(v25) = 4;
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 0x40000000;
  v24[2] = ___ZN22EurekaGSMCallFormatter28createPrivateConversationReqE20CallOperationContext_block_invoke_2;
  v24[3] = &__block_descriptor_tmp_18_2;
  v24[4] = a2;
  v7 = (_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>(v25, 16);
  ___ZN22EurekaGSMCallFormatter28createPrivateConversationReqE20CallOperationContext_block_invoke_2((uint64_t)v24, v7);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 48) = 25000;
  v22 = v25;
  v23 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a3, (uint64_t *)&v22);
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  CallInfo::CallInfo((CallInfo *)v20, (const CallInfo *)a2);
  if (*(char *)(a2 + 431) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 408), *(_QWORD *)(a2 + 416));
  else
    __p = *(std::string *)(a2 + 408);
  v28 = 0;
  v13 = operator new(0x1C0uLL);
  *v13 = off_24D5CA2A0;
  v13[1] = a1;
  CallInfo::CallInfo((CallInfo *)(v13 + 2), (const CallInfo *)v20);
  v14 = (std::string *)(v13 + 53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v13[55] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v28 = v13;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a3 + 16), (uint64_t)v27);
  v15 = v28;
  if (v28 == v27)
  {
    v16 = 4;
    v15 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_20;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  CallInfo::~CallInfo(v20);
  *(_DWORD *)(a3 + 48) = 95000;
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_21691B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EurekaVoiceRequestMessage *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;

  v14 = v11;
  CallInfo::~CallInfo(v14);
  operator delete(v12);
  EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0::~$_0((uint64_t)&a10);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v10);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v13 - 104);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22EurekaGSMCallFormatter28createPrivateConversationReqE20CallOperationContext_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 92);
  return result;
}

void EurekaGSMCallFormatter::createEndAllCallsReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  qmi::MutableMessageBase *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v4);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(&v17, (uint64_t)v4);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(v17) = 8;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 25000;
  v15 = v17;
  v16 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a2, (uint64_t *)&v15);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v19[0] = &off_24D5CA320;
  v19[1] = a1;
  v20 = v19;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a2 + 16), (uint64_t)v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_14;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
  *(_DWORD *)(a2 + 48) = 95000;
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21691B570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createExplicitCallTransferReq(uint64_t a1@<X8>)
{
  qmi::MutableMessageBase *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v17 = 0;
  v3 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v3);
  std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(&v16, (uint64_t)v3);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(v16) = 6;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = 25000;
  v14 = v16;
  v15 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a1, (uint64_t *)&v14);
  v6 = v15;
  if (v15)
  {
    v7 = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v18[0] = &off_24D5CA3A0;
  v19 = v18;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a1 + 16), (uint64_t)v18);
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_14;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_14:
  *(_DWORD *)(a1 + 48) = 95000;
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_21691B790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  EurekaVoiceRequestMessage *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createVoicePrivacyReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 48) = 25000;
  v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "Voice privacy feature does not exist in GW!", v3, 2u);
  }
}

uint64_t EurekaGSMCallFormatter::okToDialTestEmergency(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::waitForCallerId(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::supportsCallSwapIfMaxCalls(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::supportsInBandTones(EurekaGSMCallFormatter *this)
{
  return 0;
}

void EurekaGSMCallFormatter::~EurekaGSMCallFormatter(EurekaGSMCallFormatter *this)
{
  EurekaCallFormatter::~EurekaCallFormatter(this);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5C9ED8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21691B930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<vs::SetVoicePrivacy::Request>::reset[abi:ne180100]((qmi::MutableMessageBase **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

qmi::MutableMessageBase *std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::__on_zero_shared(uint64_t a1)
{
  qmi::MutableMessageBase *result;

  result = *(qmi::MutableMessageBase **)(a1 + 24);
  if (result)
  {
    qmi::MutableMessageBase::~MutableMessageBase(result);
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5C9F68;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5C9F68;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5C9FA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5C9FA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Got error when trying to answer waiting and holding active calls. Error: %s", (uint8_t *)&v4, 0xCu);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 72))(*(_QWORD *)(v2 + 16));
  }
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CA020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CA020;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "Got error when trying to answer waiting and ending active calls. Error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5CA0A0;
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5CA0A0;
  CallInfo::~CallInfo((void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x1A8uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D5CA0A0;
  v2[1] = v3;
  CallInfo::CallInfo((CallInfo *)(v2 + 2), (const CallInfo *)(a1 + 16));
  return v2;
}

void sub_21691BF90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D5CA0A0;
  a2[1] = v2;
  CallInfo::CallInfo((CallInfo *)(a2 + 2), (const CallInfo *)(a1 + 16));
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
  CallInfo::~CallInfo((void **)(a1 + 16));
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void **a1)
{
  CallInfo::~CallInfo(a1 + 2);
  operator delete(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315138;
      v8 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v6, OS_LOG_TYPE_ERROR, "Got error when trying to end specific call. Error: %s", (uint8_t *)&v7, 0xCu);
      v2 = *(_DWORD *)(a2 + 4);
    }
    if (v2 == 41)
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), a1 + 16, 0);
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CA120;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CA120;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Sending calls to voicemail failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CA1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CA1A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Ending held/waiting calls failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA220;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA220;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  CallInfo::~CallInfo((void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1C0uLL);
  *v2 = off_24D5CA220;
  std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_21691C4EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D5CA220;
  return std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  _OWORD v8[15];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(NSObject **)(v3 + 8);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v3 + 8), OS_LOG_TYPE_ERROR))
    {
      v6 = qmi::asString();
      v7 = *(_DWORD *)(a2 + 4);
      LODWORD(v8[0]) = 136315394;
      *(_QWORD *)((char *)v8 + 4) = v6;
      WORD6(v8[0]) = 1024;
      *(_DWORD *)((char *)v8 + 14) = v7;
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Merging calls into conference failed with error %s (%u)", (uint8_t *)v8, 0x12u);
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 56))(*(_QWORD *)(v3 + 16), a1 + 16);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v3 + 8), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Merging calls into conference succeeded", (uint8_t *)v8, 2u);
    }
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    memset(v8, 0, sizeof(v8));
    CallInfo::CallInfo((CallInfo *)v8);
    HIDWORD(v9) = *(_DWORD *)(a1 + 268);
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v3 + 16) + 48))(*(_QWORD *)(v3 + 16), v8);
    CallInfo::~CallInfo((void **)v8);
  }
}

void sub_21691C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  CallInfo::~CallInfo(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_QWORD *)a2;
  CallInfo::CallInfo((CallInfo *)(a1 + 1), (const CallInfo *)(a2 + 8));
  v4 = (std::string *)(a1 + 52);
  if (*(char *)(a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 416), *(_QWORD *)(a2 + 424));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 416);
    a1[54] = *(_QWORD *)(a2 + 432);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21691C7A8(_Unwind_Exception *a1)
{
  void **v1;

  CallInfo::~CallInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA2A0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA2A0;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  CallInfo::~CallInfo((void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1C0uLL);
  *v2 = off_24D5CA2A0;
  std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_21691C894(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D5CA2A0;
  return std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t (*v5)(void);
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(NSObject **)(v2 + 8);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 8), OS_LOG_TYPE_ERROR))
    {
      v7 = qmi::asString();
      v8 = *(_DWORD *)(a2 + 4);
      v9 = 136315394;
      v10 = v7;
      v11 = 1024;
      v12 = v8;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Unmerging calls failed with error %s (%u)", (uint8_t *)&v9, 0x12u);
    }
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 16) + 128);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 8), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Unmerging calls from conference succeeded", (uint8_t *)&v9, 2u);
    }
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 16) + 128);
  }
  return v5();
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_QWORD *)a2;
  CallInfo::CallInfo((CallInfo *)(a1 + 1), (const CallInfo *)(a2 + 8));
  v4 = (std::string *)(a1 + 52);
  if (*(char *)(a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 416), *(_QWORD *)(a2 + 424));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 416);
    a1[54] = *(_QWORD *)(a2 + 432);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21691CAE4(_Unwind_Exception *a1)
{
  void **v1;

  CallInfo::~CallInfo(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CA320;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CA320;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Ending all calls failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5CA3A0;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5CA3A0;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void QMIMav20DataSubscriptionCommandDriver::~QMIMav20DataSubscriptionCommandDriver(QMIMav20DataSubscriptionCommandDriver *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D5CA420;
  v2 = (char *)this + 272;
  v3 = (char *)*((_QWORD *)this + 37);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  if (*((_BYTE *)this + 264) && *((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(this);
}

{
  QMIMav20DataSubscriptionCommandDriver::~QMIMav20DataSubscriptionCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMIMav20DataSubscriptionCommandDriver::registerSubscriptionConfigurationClient_sync(QMIMav20DataSubscriptionCommandDriver *this@<X0>, qmi::Client *a2@<X8>)
{
  NSObject *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[6];
  std::__shared_weak_count *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(_QWORD *);
  void *v30;
  QMIMav20DataSubscriptionCommandDriver *v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  void *v37;
  QMIMav20DataSubscriptionCommandDriver *v38;
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  char v47;
  dispatch_object_t v48;
  void *v49;
  uint64_t v50;
  void (*v51)(uint64_t, QMIServiceMsg *);
  void *v52;
  _QWORD *v53;

  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v49, *((char **)this + 10));
  v4 = *((_QWORD *)this + 3);
  v48 = v4;
  if (v4)
    dispatch_retain(v4);
  std::string::basic_string[abi:ne180100]<0>(&v46, "registration");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v42, (_QWORD *)this + 1);
  v44 = v42;
  v45 = v43;
  if (v43)
  {
    p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  Registry::getServerConnection(*((Registry **)this + 8));
  qmi::Client::createWithQueueLocal();
  if (v41)
  {
    p_shared_owners = &v41->__shared_owners_;
    do
      v8 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v8 - 1, (unint64_t *)p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v9 = v43;
  if (v43)
  {
    v10 = (unint64_t *)&v43->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v47 < 0)
    operator delete(v46);
  if (v48)
    dispatch_release(v48);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v49, (_QWORD *)this + 1);
  v13 = v49;
  v12 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v14 = (unint64_t *)(v50 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = (void *)MEMORY[0x24BDAC760];
  v34 = MEMORY[0x24BDAC760];
  v35 = 1174405120;
  v36 = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke;
  v37 = &__block_descriptor_tmp_6;
  v38 = this;
  v39 = v13;
  v40 = v12;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  qmi::Client::setHandler();
  v27 = v18;
  v28 = 1174405120;
  v29 = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_3;
  v30 = &__block_descriptor_tmp_4_1;
  v31 = this;
  v32 = v13;
  v33 = v12;
  if (v12)
  {
    v21 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  qmi::Client::setHandler();
  v25[0] = v18;
  v25[1] = 1174405120;
  v25[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_5;
  v25[3] = &__block_descriptor_tmp_7_1;
  v25[4] = this;
  v25[5] = v13;
  v26 = v12;
  if (v12)
  {
    v23 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v49 = v18;
  v50 = 0x40000000;
  v51 = ___ZNK3qmi6Client13setIndHandlerIRKN3nas22DisableIccidIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v52 = &unk_24D5CA5A0;
  v53 = v25;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake(a2);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void sub_21691D0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,char a30)
{
  qmi::Client *v30;
  std::__shared_weak_count *v31;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  qmi::Client::~Client(v30);
  _Unwind_Resume(a1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::registered(v3, 3u);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21691D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__18weak_ptrI33DataSubscriptionBaseCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__18weak_ptrI33DataSubscriptionBaseCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_3(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::deregistered(v3, 3u);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21691D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_5(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  subscriber *TlvValue;
  unint64_t v9;
  void *v10;
  _BYTE *v11;
  NSObject *v12;
  std::string::size_type v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28[2];
  std::string __p;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_37:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v25 = 0;
      v26 = 0;
      v27 = 0;
      TlvValue = (subscriber *)qmi::MessageBase::findTlvValue(a2);
      if (TlvValue)
      {
        v28[0] = qmi::MessageBase::findTlvValue(a2);
        v28[1] = v9;
        if (v28[0])
        {
          tlv::parseV<nas::tlv::Iccid>(v28, v9, &__p);
          v10 = (void *)__p.__r_.__value_.__r.__words[0];
          if (v28[0])
          {
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v25, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
            if (v10)
              operator delete(v10);
            TlvValue = (subscriber *)v25;
            v11 = v26;
LABEL_11:
            subscriber::sDecodeIccid(TlvValue, (const unsigned __int8 *)(v11 - (_BYTE *)TlvValue));
            std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v5 + 240, (__int128 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v12 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              v13 = v5 + 240;
              if (*(char *)(v5 + 263) < 0)
                v13 = *(_QWORD *)(v5 + 240);
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v13;
              _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Disable iccid Updated (%s)", (uint8_t *)&__p, 0xCu);
            }
            v14 = *(std::__shared_weak_count **)(v5 + 56);
            if (v14)
            {
              v15 = std::__shared_weak_count::lock(v14);
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
              if (v15)
              {
                v16 = v15;
                v17 = *(_QWORD *)(v5 + 48);
                __p.__r_.__value_.__r.__words[0] = v17;
                if (v17)
                  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v17 + 32))(v17, v5 + 240);
                v18 = (unint64_t *)&v16->__shared_owners_;
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
              }
            }
            if (!*(_QWORD *)(v5 + 296))
              goto LABEL_35;
            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)(v5 + 240));
            v20 = *(_QWORD *)(v5 + 296);
            if (!v20)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 48))(v20, &__p);
            if (v30 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v21 = *(_QWORD **)(v5 + 296);
            *(_QWORD *)(v5 + 296) = 0;
            if (v21 == (_QWORD *)(v5 + 272))
            {
              v22 = 4;
              v21 = (_QWORD *)(v5 + 272);
            }
            else
            {
              if (!v21)
                goto LABEL_35;
              v22 = 5;
            }
            (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_35:
            if (v25)
            {
              v26 = v25;
              operator delete(v25);
            }
            goto LABEL_37;
          }
          if (__p.__r_.__value_.__r.__words[0])
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      v11 = 0;
      goto LABEL_11;
    }
  }
}

void sub_21691D634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(QMIMav20DataSubscriptionCommandDriver *this)
{
  const void **v2;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *__p[2];
  __int128 v28;
  std::string aBlock;
  void *v30;
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v2 = (const void **)__p[1];
  if (__p[1] != (void *)v28)
  {
    while (*((_BYTE *)*v2 + 8) != 66)
    {
      if (++v2 == (const void **)v28)
        goto LABEL_8;
    }
  }
  if (v2 == (const void **)v28)
  {
LABEL_8:
    v5 = operator new();
    v6 = v5;
    *(_WORD *)(v5 + 8) = 66;
    *(_QWORD *)v5 = &off_24D5CA5E8;
    v7 = v28;
    if ((unint64_t)v28 >= *((_QWORD *)&v28 + 1))
    {
      v9 = (uint64_t)(v28 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v10 = (uint64_t)(*((_QWORD *)&v28 + 1) - (unint64_t)__p[1]) >> 2;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if (*((_QWORD *)&v28 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v28 + 8, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v9];
      v14 = &v12[8 * v11];
      *v13 = v6;
      v8 = v13 + 1;
      v16 = (char *)__p[1];
      v15 = (char *)v28;
      if ((void *)v28 != __p[1])
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)__p[1];
      }
      __p[1] = v13;
      *(_QWORD *)&v28 = v8;
      *((_QWORD *)&v28 + 1) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v28 = v5;
      v8 = (_QWORD *)(v7 + 8);
    }
    v4 = (_BYTE *)(v6 + 9);
    *(_QWORD *)&v28 = v8;
  }
  else
  {
    if (!v3)
      __cxa_bad_cast();
    v4 = v3 + 9;
  }
  *v4 = 1;
  v22[5] = (char *)this + 168;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 0x40000000;
  v22[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver46handleSubscriptionConfigurationRegistered_syncEv_block_invoke;
  v22[3] = &__block_descriptor_tmp_8_4;
  v22[4] = this;
  aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  aBlock.__r_.__value_.__l.__size_ = 0x40000000;
  aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v30 = &unk_24D5CA618;
  v31 = v22;
  v18 = _Block_copy(&aBlock);
  v26 = v18;
  if (v23)
  {
    qmi::Client::send();
    v18 = v26;
  }
  if (v18)
    _Block_release(v18);
  if (*((_BYTE *)this + 264))
  {
    v19 = (void **)((char *)this + 240);
    memset(&aBlock, 0, sizeof(aBlock));
    if (*((char *)this + 263) < 0)
    {
      std::string::__init_copy_ctor_external(&aBlock, *((const std::string::value_type **)this + 30), *((_QWORD *)this + 31));
      if (!*((_BYTE *)this + 264))
      {
LABEL_33:
        v32[0] = &off_24D5CA648;
        v33 = v32;
        QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync((uint64_t)this, (unsigned __int8 *)&aBlock, v32);
        v20 = v33;
        if (v33 == v32)
        {
          v21 = 4;
          v20 = v32;
        }
        else
        {
          if (!v33)
            goto LABEL_41;
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_41:
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
          operator delete(aBlock.__r_.__value_.__l.__data_);
        goto LABEL_43;
      }
      if (*((char *)this + 263) < 0)
        operator delete(*v19);
    }
    else
    {
      *(_OWORD *)&aBlock.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      aBlock.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 32);
    }
    *((_BYTE *)this + 264) = 0;
    goto LABEL_33;
  }
LABEL_43:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21691D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver46handleSubscriptionConfigurationRegistered_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Registration for NAS indications failed, error %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Registration for NAS indications succeeded", (uint8_t *)v4, 2u);
  }
}

void QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  NSObject *v12;
  const std::string::value_type *v13;
  uint64_t v14;
  char v15;
  const void **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[5];
  void *v43[2];
  __int128 v44;
  std::string __p;
  char v46;
  std::string v47;
  uint64_t v48;
  void *aBlock;
  __int128 buf;
  void (*v51)(uint64_t, QMIServiceMsg *);
  __int128 *p_buf;
  _QWORD *v53;
  uint64_t v54;

  v4 = a2;
  v54 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 264))
    goto LABEL_17;
  v6 = *(unsigned __int8 *)(a1 + 263);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a1 + 263);
  else
    v7 = *(_QWORD *)(a1 + 248);
  v8 = a2[23];
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 1);
  if (v7 != v8)
    goto LABEL_17;
  v10 = (const void **)(a1 + 240);
  if (v9 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, a2, *(_QWORD *)(a1 + 248)))
      goto LABEL_17;
LABEL_35:
    v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID unchanged", (uint8_t *)&buf, 2u);
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)v10);
    v24 = a3[3];
    if (!v24)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 48))(v24, &__p);
    if (v46)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 263))
    goto LABEL_35;
  v11 = (unsigned __int8 *)(a1 + 240);
  while (*v11 == *a2)
  {
    ++v11;
    ++a2;
    if (!--v6)
      goto LABEL_35;
  }
LABEL_17:
  v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if ((v4[23] & 0x80u) == 0)
      v13 = (const std::string::value_type *)v4;
    else
      v13 = *(const std::string::value_type **)v4;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending disable iccid (%s)", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v43);
  v14 = v4[23];
  v15 = v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)v4 + 1);
  if (v14)
  {
    v16 = (const void **)v43[1];
    if (v43[1] != (void *)v44)
    {
      while (*((_BYTE *)*v16 + 8) != 16)
      {
        if (++v16 == (const void **)v44)
          goto LABEL_33;
      }
    }
    if (v16 == (const void **)v44)
    {
LABEL_33:
      v19 = operator new();
      v20 = v19;
      *(_BYTE *)(v19 + 8) = 16;
      *(_QWORD *)(v19 + 16) = 0;
      v18 = (char *)(v19 + 16);
      *(_QWORD *)v19 = &off_24D5CA770;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0;
      v21 = v44;
      if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
      {
        v25 = (uint64_t)(v44 - (unint64_t)v43[1]) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v26 = (uint64_t)(*((_QWORD *)&v44 + 1) - (unint64_t)v43[1]) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if (*((_QWORD *)&v44 + 1) - (unint64_t)v43[1] >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v44 + 8, v27);
        else
          v28 = 0;
        v29 = (uint64_t *)&v28[8 * v25];
        v30 = &v28[8 * v27];
        *v29 = v20;
        v22 = v29 + 1;
        v32 = (char *)v43[1];
        v31 = (char *)v44;
        if ((void *)v44 != v43[1])
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v29 = v33;
          }
          while (v31 != v32);
          v31 = (char *)v43[1];
        }
        v43[1] = v29;
        *(_QWORD *)&v44 = v22;
        *((_QWORD *)&v44 + 1) = v30;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v44 = v19;
        v22 = (_QWORD *)(v21 + 8);
      }
      *(_QWORD *)&v44 = v22;
      if ((v4[23] & 0x80) != 0)
      {
LABEL_32:
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
LABEL_57:
        subscriber::encodeIccid();
        v34 = *(void **)v18;
        if (*(_QWORD *)v18)
        {
          *((_QWORD *)v18 + 1) = v34;
          operator delete(v34);
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = 0;
        }
        *(_OWORD *)v18 = buf;
        *((_QWORD *)v18 + 2) = v51;
        buf = 0uLL;
        v51 = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
    }
    else
    {
      if (!v17)
        __cxa_bad_cast();
      v18 = v17 + 16;
      if (v15 < 0)
        goto LABEL_32;
    }
    v47 = *(std::string *)v4;
    goto LABEL_57;
  }
LABEL_61:
  v35 = a3[3];
  if (!v35)
  {
LABEL_64:
    p_buf = (__int128 *)v35;
    goto LABEL_66;
  }
  if ((_QWORD *)v35 != a3)
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    goto LABEL_64;
  }
  p_buf = &buf;
  (*(void (**)(_QWORD *, __int128 *))(*a3 + 24))(a3, &buf);
LABEL_66:
  v36 = a1 + 272;
  if (&buf != (__int128 *)(a1 + 272))
  {
    v37 = p_buf;
    v38 = *(_QWORD *)(a1 + 296);
    if (p_buf == &buf)
    {
      if (v38 == v36)
      {
        memset(&v47, 0, sizeof(v47));
        (*(void (**)(__int128 *, std::string *))(buf + 24))(&buf, &v47);
        (*(void (**)(__int128 *))(*(_QWORD *)p_buf + 32))(p_buf);
        p_buf = 0;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 296) + 24))(*(_QWORD *)(a1 + 296), &buf);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 32))(*(_QWORD *)(a1 + 296));
        *(_QWORD *)(a1 + 296) = 0;
        p_buf = &buf;
        (*(void (**)(std::string *, uint64_t))(v47.__r_.__value_.__r.__words[0] + 24))(&v47, a1 + 272);
        (*(void (**)(std::string *))(v47.__r_.__value_.__r.__words[0] + 32))(&v47);
      }
      else
      {
        (*(void (**)(__int128 *, uint64_t))(buf + 24))(&buf, a1 + 272);
        (*(void (**)(__int128 *))(*(_QWORD *)p_buf + 32))(p_buf);
        p_buf = *(__int128 **)(a1 + 296);
      }
      *(_QWORD *)(a1 + 296) = v36;
    }
    else if (v38 == v36)
    {
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v36 + 24))(a1 + 272, &buf);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 32))(*(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 296) = p_buf;
      p_buf = &buf;
    }
    else
    {
      p_buf = *(__int128 **)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v37;
    }
  }
  v39 = p_buf;
  if (p_buf == &buf)
  {
    v40 = 4;
    v39 = &buf;
    goto LABEL_79;
  }
  if (p_buf)
  {
    v40 = 5;
LABEL_79:
    (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
  }
  v47.__r_.__value_.__r.__words[0] = a1 + 168;
  v47.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
  LODWORD(v47.__r_.__value_.__r.__words[2]) = 25000;
  v48 = 0;
  aBlock = 0;
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 0x40000000;
  v42[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver28sendDisableIccidCommand_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvNS0_8optionalIS6_EEEEE_block_invoke;
  v42[3] = &__block_descriptor_tmp_9_1;
  v42[4] = a1;
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 0x40000000;
  v51 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas19DisableIccidRequest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  p_buf = (__int128 *)&unk_24D5CA7A0;
  v53 = v42;
  v41 = _Block_copy(&buf);
  aBlock = v41;
  if (v47.__r_.__value_.__l.__size_)
  {
    qmi::Client::send();
    v41 = aBlock;
  }
  if (v41)
    _Block_release(v41);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v43);
}

void sub_21691E150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25)
  {
    if (a24 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const void **v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  NSObject *v15;
  NSObject *v17;
  const std::string::value_type *v18;
  char *v19;
  std::string *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  std::string __p;
  int v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint8_t buf[4];
  const std::string::value_type *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & 1) == 0)
  {
    v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_216897000, v15, OS_LOG_TYPE_ERROR, "Client not ready", buf, 2u);
    }
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 264))
  {
    LOBYTE(v10) = *(_BYTE *)(a3 + 23);
    goto LABEL_35;
  }
  v8 = *(unsigned __int8 *)(a1 + 263);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a1 + 263);
  else
    v9 = *(_QWORD *)(a1 + 248);
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  if (v9 == v11)
  {
    v12 = (const void **)(a1 + 240);
    if (v10 >= 0)
      v13 = (const std::string::value_type *)a3;
    else
      v13 = *(const std::string::value_type **)a3;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v12, v13, *(_QWORD *)(a1 + 248)))
        goto LABEL_24;
    }
    else if (*(_BYTE *)(a1 + 263))
    {
      v14 = v13;
      while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v14)
      {
        v12 = (const void **)((char *)v12 + 1);
        ++v14;
        if (!--v8)
          goto LABEL_48;
      }
      goto LABEL_24;
    }
LABEL_48:
    v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v29 = v13;
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID unchanged (%s)", buf, 0xCu);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a4, 1);
    return;
  }
LABEL_24:
  if (!v11 && !*a2 && a2[1] == 0)
  {
    v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(const std::string::value_type **)a3;
      if (v10 >= 0)
        v18 = (const std::string::value_type *)a3;
      *(_DWORD *)buf = 136315138;
      v29 = v18;
      _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID (%s) on baseband should remain unchanged till a new SIM comes up", buf, 0xCu);
    }
LABEL_21:
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
    return;
  }
LABEL_35:
  if ((v10 & 0x80) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v25 = a4;
  v27 = 0;
  v19 = (char *)operator new(0x30uLL);
  *(_QWORD *)v19 = off_24D5CA6D8;
  *((_QWORD *)v19 + 1) = a1;
  v20 = (std::string *)(v19 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    LODWORD(a4) = v25;
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v19 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v19 + 10) = a4;
  v27 = v19;
  QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync(a1, (unsigned __int8 *)a3, v26);
  v21 = v27;
  if (v27 == v26)
  {
    v22 = 4;
    v21 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_46;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_46:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21691E4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;

  operator delete(v21);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_21691E704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_21691E754(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas22DisableIccidIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21691E88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CA5E8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21691E9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_21691EA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21691EABC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21691EAFC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5CA648;
  return result;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5CA648;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(void **)a2;
    v3 = *(char *)(a2 + 23);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    if (v3 < 0)
      operator delete(v2);
  }
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::target_type()
{
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA6D8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5CA6D8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_24D5CA6D8;
  std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21691EC98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D5CA6D8;
  return std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  char v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void **v9;
  void **v10;
  void *__p[2];
  uint64_t v12;
  char v13;

  LOBYTE(__p[0]) = 0;
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = 0;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)__p = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = 1;
  v13 = 1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 39);
  if ((v6 & 0x80u) == 0)
    v7 = (void *)*(unsigned __int8 *)(a1 + 39);
  else
    v7 = *(void **)(a1 + 24);
  v8 = (void *)HIBYTE(v12);
  v2 = HIBYTE(v12);
  if (v12 < 0)
    v8 = __p[1];
  if (v7 != v8)
    goto LABEL_17;
  v9 = (const void **)(a1 + 16);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v9, v10, *(_QWORD *)(a1 + 24)))
      goto LABEL_23;
LABEL_17:
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
    goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v10)
    {
      v9 = (const void **)((char *)v9 + 1);
      v10 = (void **)((char *)v10 + 1);
      if (!--v6)
        goto LABEL_23;
    }
    v4 = 1;
    goto LABEL_17;
  }
LABEL_23:
  v4 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 96))(v5, *(unsigned int *)(a1 + 40), 1);
LABEL_18:
  if (v4)
  {
    if (v2 < 0)
      operator delete(__p[0]);
  }
}

void sub_21691EE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  char v9;
  int v10;

  if (v10)
  {
    if (v9 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CA770;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CA770;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::NextHdrProtList>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CA770;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_21691F050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas19DisableIccidRequest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21691F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void QMIAQMCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  dispatch_object_t v8;

  v6 = (_QWORD *)operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  QMIAQMCommandDriver::QMIAQMCommandDriver(v6, a1, &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIAQMCommandDriver>::shared_ptr[abi:ne180100]<QMIAQMCommandDriver,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1},void>(a3, (uint64_t)v6);
  if (v7)
    dispatch_release(v7);
}

void sub_21691F224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C40FB9B6D2BLL);
  _Unwind_Resume(exception_object);
}

_QWORD *QMIAQMCommandDriver::QMIAQMCommandDriver(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *object;

  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  AQMCommandDriver::AQMCommandDriver();
  if (object)
    dispatch_release(object);
  *a1 = &off_24D5CA7D0;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = &unk_24D5CA820;
  return a1;
}

void sub_21691F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void QMIAQMCommandDriver::bootstrap(uint64_t a1, uint64_t a2, void **a3, __int128 *a4)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::mutex *ServiceMap;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[5];
  xpc_object_t object;
  void *__p[2];
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  __int128 aBlock;
  void (*v48)(uint64_t, _QWORD *);
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unsigned __int16 *v53;

  v6 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v42);
  v11 = v42;
  std::string::basic_string[abi:ne180100]<0>(__p, "aqm");
  v12 = *a3;
  object = v12;
  if (v12)
    xpc_retain(v12);
  else
    object = xpc_null_create();
  QMIClientPool::requestClient(v11, 0xE2u, (uint64_t *)__p, a1 + 88, (uint64_t)&object, &aBlock);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 96, &aBlock);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
  if (*((_QWORD *)&aBlock + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&aBlock + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  xpc_release(object);
  object = 0;
  if (v41 < 0)
    operator delete(__p[0]);
  v16 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v17 = (unint64_t *)(v43 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = MEMORY[0x24BDAC760];
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 0x40000000;
  v38[2] = ___ZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEE_block_invoke;
  v38[3] = &__block_descriptor_tmp_7;
  v38[4] = a1;
  v21 = *(std::__shared_weak_count **)(v19 + 8);
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v21);
    v52 = v22;
    if (v22)
    {
      v23 = v22;
      v51 = *(_QWORD *)v19;
      v24 = v51;
      if (v51)
      {
        v42 = (_QWORD *)(v19 + 88);
        v43 = 1;
        MEMORY[0x2199FDF3C]();
        v25 = *(_QWORD *)(v19 + 24);
        if (v25)
        {
          v26 = v19 + 24;
          do
          {
            v27 = *(unsigned __int16 *)(v25 + 32);
            v28 = v27 >= 0x50;
            if (v27 >= 0x50)
              v29 = (uint64_t *)v25;
            else
              v29 = (uint64_t *)(v25 + 8);
            if (v28)
              v26 = v25;
            v25 = *v29;
          }
          while (*v29);
          if (v26 != v19 + 24 && *(unsigned __int16 *)(v26 + 32) <= 0x50u)
            __TUAssertTrigger();
        }
        *(_QWORD *)&aBlock = v20;
        *((_QWORD *)&aBlock + 1) = 0x40000000;
        v48 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3bsp19AQMReportIndication10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        v49 = &unk_24D5CA910;
        v50 = v38;
        v30 = (uint64_t *)_Block_copy(&aBlock);
        v46 = 80;
        v53 = &v46;
        v31 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v19 + 16), &v46, (uint64_t)&std::piecewise_construct, &v53);
        v32 = v31[5];
        v31[5] = v30;
        if (v32)
          _Block_release(v32);
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v42);
        v42 = 0;
        v43 = 0;
        v33 = *(_QWORD *)(v19 + 64);
        v44 = *(_QWORD *)(v19 + 56);
        v45 = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        QMIClientPool::registerUnsolicitedHandler(v24, (uint64_t)&v42, v19, 0x50u);
        qmi::Client::~Client((qmi::Client *)&v42);
      }
      v36 = (unint64_t *)&v23->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_21691F5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v22 - 96);
  _Unwind_Resume(a1);
}

void ___ZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapENS_13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSA_10unique_ptrISF_NSA_14default_deleteISF_EEEEENUlPvE_8__invokeESO_);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(&v21);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

uint64_t QMIAQMCommandDriver::shutdown(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *(_QWORD *)(a1 + 96);
  v4[0] = v2 + 88;
  v4[1] = 1;
  MEMORY[0x2199FDF3C](v2 + 88, a2);
  *(_BYTE *)(v2 + 74) = 0;
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v4);
}

void QMIAQMCommandDriver::~QMIAQMCommandDriver(QMIAQMCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5CA7D0;
  *((_QWORD *)this + 11) = &unk_24D5CA820;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  AQMCommandDriver::~AQMCommandDriver(this);
}

{
  *(_QWORD *)this = &off_24D5CA7D0;
  *((_QWORD *)this + 11) = &unk_24D5CA820;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  AQMCommandDriver::~AQMCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIAQMCommandDriver::~QMIAQMCommandDriver(QMIAQMCommandDriver *this)
{
  AQMCommandDriver *v1;

  *((_QWORD *)this - 11) = &off_24D5CA7D0;
  v1 = (QMIAQMCommandDriver *)((char *)this - 88);
  *(_QWORD *)this = &unk_24D5CA820;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  AQMCommandDriver::~AQMCommandDriver(v1);
}

{
  QMIAQMCommandDriver::~QMIAQMCommandDriver((QMIAQMCommandDriver *)((char *)this - 88));
}

uint64_t QMIAQMCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  uint64_t result;

  result = QMIVirtualClient::getServiceType(*a2);
  if ((_DWORD)result != 226)
    return __TUAssertTrigger();
  return result;
}

uint64_t QMIVirtualClient::getServiceType(QMIVirtualClient *this)
{
  if (!*((_BYTE *)this + 72) || !*((_QWORD *)this + 7))
    __TUAssertTrigger();
  return qmi::Client::getSvcType((QMIVirtualClient *)((char *)this + 40));
}

uint64_t `non-virtual thunk to'QMIAQMCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  uint64_t result;

  result = QMIVirtualClient::getServiceType(*a2);
  if ((_DWORD)result != 226)
    return __TUAssertTrigger();
  return result;
}

void QMIAQMCommandDriver::enableAQMReport(QMIAQMCommandDriver *this, int a2)
{
  const void **v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *__p[2];
  __int128 v23;
  _QWORD v24[6];
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v23 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v23)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v23)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v23)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_BYTE *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_24D5CA958;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = (_DWORD *)(v7 + 12);
    v9 = v23;
    if ((unint64_t)v23 >= *((_QWORD *)&v23 + 1))
    {
      v11 = (uint64_t)(v23 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v23 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v23 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v23 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v23;
      if ((void *)v23 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v23 = v10;
      *((_QWORD *)&v23 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v23 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    *(_QWORD *)&v23 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 12;
  }
  *v6 = a2;
  v20 = *((_QWORD *)this + 12);
  if (!*(_BYTE *)(v20 + 72) || !*(_QWORD *)(v20 + 56))
    __TUAssertTrigger();
  v24[5] = v20 + 40;
  v25 = QMIServiceMsg::create();
  v26 = 25000;
  v27 = 0;
  v28 = 0;
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 0x40000000;
  v24[2] = ___ZN16QMIVirtualClient4sendIN3bsp15EnableAQMReport7RequestEZN19QMIAQMCommandDriver15enableAQMReportEbE3__1EEvRKT_T0__block_invoke;
  v24[3] = &__block_descriptor_tmp_10_2;
  v24[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_5;
  aBlock[3] = &unk_24D5CA9A8;
  aBlock[4] = v24;
  v21 = _Block_copy(aBlock);
  v28 = v21;
  if (v25)
  {
    qmi::Client::send();
    v21 = v28;
  }
  if (v21)
    _Block_release(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21691FC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<QMIAQMCommandDriver>::shared_ptr[abi:ne180100]<QMIAQMCommandDriver,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CA8B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21691FCA8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1}::operator() const(QMIAQMCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21691FCC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1}::operator() const(QMIAQMCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1}::operator() const(QMIAQMCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t *_ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x2199FEAC4](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapENS_13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSA_10unique_ptrISF_NSA_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(_QWORD **a1)
{
  _QWORD *v1;
  qmi::MessageBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TlvValue;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21[2];
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;

  v1 = *a1;
  v18 = a1;
  v19 = v1;
  v4 = *v1;
  v2 = (qmi::MessageBase *)(v1 + 1);
  v3 = v4;
  v23 = 0;
  v24 = 0;
  v22 = (uint64_t *)&v23;
  TlvValue = qmi::MessageBase::findTlvValue(v2);
  v7 = TlvValue;
  if (TlvValue)
  {
    v8 = v6;
    v20 = (uint64_t *)TlvValue;
    v9 = tlv::parseV<bsp::tlv::AQMReportRBUplinkRate>((unint64_t *)&v20, v6);
    if (v20)
    {
      v25 = 0;
      v10 = 0;
      *((_DWORD *)std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(&v22, 0, &v25)+ 8) = v9;
      goto LABEL_6;
    }
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v2, 16, v7, v8);
  }
  v10 = 1;
LABEL_6:
  v11 = qmi::MessageBase::findTlvValue(v2);
  v13 = v11;
  if (!v11)
    goto LABEL_10;
  v14 = v12;
  v20 = (uint64_t *)v11;
  v15 = tlv::parseV<bsp::tlv::AQMReportRBDownlinkRate>((unint64_t *)&v20, v12);
  if (!v20)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v2, 17, v13, v14);
LABEL_10:
    if ((v10 & 1) != 0)
      goto LABEL_16;
    goto LABEL_11;
  }
  v25 = 2;
  *((_DWORD *)std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(&v22, 2, &v25)+ 8) = v15;
LABEL_11:
  v16 = *(_QWORD *)(v3 + 72);
  if (v16)
  {
    v20 = v22;
    v21[0] = v23;
    v21[1] = v24;
    if (v24)
    {
      v23[2] = v21;
      v22 = (uint64_t *)&v23;
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v20 = (uint64_t *)v21;
    }
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v16 + 16))(v16, &v20);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v21[0]);
  }
LABEL_16:
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v23);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v19);
  return _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev((uint64_t *)&v18);
}

void sub_21691FF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a13);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a16);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a11);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x2199FEAC4](v2, 0x1060C4072938BA3);
  }
  return a1;
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3bsp19AQMReportIndication10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_216920088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  _WORD *v12;
  _QWORD v14[3];

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((unsigned __int16 *)v6 + 16);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v14[2] = 1;
    v12 = operator new(0x30uLL);
    v14[1] = v7;
    v12[16] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned short const,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned short const,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,0>(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 8);
  if (v1)
    _Block_release(v1);
}

uint64_t std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    MEMORY[0x2199FDF48](*(_QWORD *)a1);
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CA958;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3bsp15EnableAQMReport7RequestEZN19QMIAQMCommandDriver15enableAQMReportEbE3__1EEvRKT_T0__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Failed to register for AQM indications: 0x%x (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void QMIBasebandSettingsDriver::create(uint64_t *a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  dispatch_object_t object;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  object = *a2;
  *a2 = 0;
  QMIBasebandSettingsDriver::QMIBasebandSettingsDriver(v6, (uint64_t)&v15, &object);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIBasebandSettingsDriver>::shared_ptr[abi:ne180100]<QMIBasebandSettingsDriver,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1},void>(a3, v7);
  if (object)
    dispatch_release(object);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_216920720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  uint64_t v11;
  int v12;

  if (object)
    dispatch_release(object);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v12)
    MEMORY[0x2199FEAC4](v11, 0x10F1C407C03E483);
  _Unwind_Resume(a1);
}

uint64_t QMIBasebandSettingsDriver::QMIBasebandSettingsDriver(uint64_t a1, uint64_t a2, NSObject **a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *object;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  object = *a3;
  *a3 = 0;
  v10[0] = &unk_24D5C4F88;
  v11 = v10;
  BasebandSettingsDriver::BasebandSettingsDriver();
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (object)
    dispatch_release(object);
  *(_QWORD *)a1 = &off_24D5CA9D8;
  v6 = subscriber::expectedSimCount();
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(a1 + 112, v6, 0);
  v7 = subscriber::expectedSimCount();
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(a1 + 144, v7, 0);
  *(_WORD *)(a1 + 176) = 0;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 184), *(os_log_s **)(a1 + 40));
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 200), *(os_log_s **)(a1 + 40));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  return a1;
}

void sub_2169208CC(_Unwind_Exception *a1)
{
  BasebandSettingsDriver *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v5 = v3;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5);
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(v4);
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(v2);
  BasebandSettingsDriver::~BasebandSettingsDriver(v1);
  _Unwind_Resume(a1);
}

void sub_21692091C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == v15)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (object)
    dispatch_release(object);
  JUMPOUT(0x216920914);
}

uint64_t *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(uint64_t *a1)
{
  void *v2;

  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants(a1))
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void QMIBasebandSettingsDriver::~QMIBasebandSettingsDriver(QMIBasebandSettingsDriver *this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  *(_QWORD *)this = &off_24D5CA9D8;
  std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*((_QWORD **)this + 36));
  qmi::Client::~Client((QMIBasebandSettingsDriver *)((char *)this + 248));
  qmi::Client::~Client((QMIBasebandSettingsDriver *)((char *)this + 216));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v2 = (void **)((char *)this + 144);
  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants((uint64_t *)this + 18))
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  v3 = *v2;
  if (*v2)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 112);
  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants((uint64_t *)this + 14))
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  v5 = *v4;
  if (*v4)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  BasebandSettingsDriver::~BasebandSettingsDriver(this);
}

{
  QMIBasebandSettingsDriver::~QMIBasebandSettingsDriver(this);
  JUMPOUT(0x2199FEAC4);
}

__int128 *QMIBasebandSettingsDriver::bootstrap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  capabilities::ct *ShouldWake;
  NSObject *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  _BYTE *v94;
  __int128 *v95;
  uint64_t v96;
  _QWORD *v97;
  __int128 *v98;
  uint64_t v99;
  _BYTE *v100;
  __int128 *v101;
  uint64_t v102;
  _QWORD *v103;
  capabilities::ct *v104;
  uint64_t v105;
  __int128 *result;
  uint64_t v107;
  Registry **v108;
  _QWORD v109[15];
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  dispatch_object_t v113;
  _QWORD v114[5];
  _QWORD v115[25];
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  dispatch_object_t object;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t (*v122)(_QWORD);
  __int128 v123;
  void *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  dispatch_object_t v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v108 = (Registry **)(a1 + 56);
  subscriber::makeSimSlotRange();
  v10 = v120;
  if (v120 != v121)
  {
    while ((v122(*v10) & 1) == 0)
    {
      if (++v10 == v121)
      {
        v10 = v121;
        break;
      }
    }
    if (v10 != v121)
    {
      while (1)
      {
        if (*v10 == 1)
        {
          v11 = "QMIBasebandSettingsDriver::dms.1";
          v12 = "QMIBasebandSettingsDriver::registration.1";
        }
        else if (*v10 == 2)
        {
          v11 = "QMIBasebandSettingsDriver::dms.2";
          v12 = "QMIBasebandSettingsDriver::registration.2";
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v13 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v13 || (v14 = *(_QWORD *)(a1 + 8), (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
        }
        Registry::getServerConnection(*v108);
        v133 = 0u;
        v134 = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v124, v12);
        v21 = *(NSObject **)(a1 + 24);
        v132 = v21;
        if (v21)
          dispatch_retain(v21);
        std::string::basic_string[abi:ne180100]<0>(v130, "registration");
        v128 = 0;
        v129 = 0;
        v22 = std::__shared_weak_count::lock(v16);
        if (!v22)
          break;
        v23 = v22;
        v24 = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v128 = v14;
        v129 = v22;
        std::__shared_weak_count::__release_weak(v16);
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          v16 = v23;
LABEL_37:
          std::__shared_weak_count::__release_weak(v16);
        }
        v127 = v123;
        v123 = 0uLL;
        qmi::Client::createWithQueueLocal();
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
        if (*((_QWORD *)&v127 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (v129)
          std::__shared_weak_count::__release_weak(v129);
        if (v131 < 0)
          operator delete(v130[0]);
        if (v132)
          dispatch_release(v132);
        if (SBYTE7(v126) < 0)
          operator delete(v124);
        v124 = 0;
        v125 = 0;
        v126 = v134;
        v134 = 0uLL;
        qmi::ClientRouter::addClient();
        qmi::Client::~Client((qmi::Client *)&v124);
        qmi::ClientRouter::get();
        qmi::Client::~Client((qmi::Client *)&v133);
        if (*((_QWORD *)&v123 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
          }
        }
        v33 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v33 || (v34 = *(_QWORD *)(a1 + 8), (v35 = std::__shared_weak_count::lock(v33)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v36 = v35;
        v37 = (unint64_t *)&v35->__shared_weak_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v39 = (unint64_t *)&v35->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v36);
        }
        Registry::getServerConnection(*v108);
        v133 = 0u;
        v134 = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v124, v11);
        v41 = *(NSObject **)(a1 + 24);
        v132 = v41;
        if (v41)
          dispatch_retain(v41);
        std::string::basic_string[abi:ne180100]<0>(v130, "dms");
        v128 = 0;
        v129 = 0;
        v42 = std::__shared_weak_count::lock(v36);
        if (v42)
        {
          v43 = v42;
          v44 = (unint64_t *)&v42->__shared_weak_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
          v128 = v34;
          v129 = v42;
          std::__shared_weak_count::__release_weak(v36);
          v46 = (unint64_t *)&v43->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (v47)
            goto LABEL_75;
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          v36 = v43;
        }
        else
        {
          v128 = 0;
          v129 = 0;
        }
        std::__shared_weak_count::__release_weak(v36);
LABEL_75:
        v127 = v123;
        v123 = 0uLL;
        qmi::Client::createWithQueueLocal();
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
        if (*((_QWORD *)&v127 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v129)
          std::__shared_weak_count::__release_weak(v129);
        if (v131 < 0)
          operator delete(v130[0]);
        if (v132)
          dispatch_release(v132);
        if (SBYTE7(v126) < 0)
          operator delete(v124);
        v124 = 0;
        v125 = 0;
        v126 = v134;
        v134 = 0uLL;
        qmi::ClientRouter::addClient();
        qmi::Client::~Client((qmi::Client *)&v124);
        qmi::ClientRouter::get();
        qmi::Client::~Client((qmi::Client *)&v133);
        if (*((_QWORD *)&v123 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
          }
        }
        v53 = v10 + 1;
        v10 = v121;
        if (v53 != v121)
        {
          v10 = v53;
          while ((v122(*v10) & 1) == 0)
          {
            if (++v10 == v121)
            {
              v10 = v121;
              break;
            }
          }
        }
        if (v10 == v121)
          goto LABEL_99;
      }
      v128 = 0;
      v129 = 0;
      goto LABEL_37;
    }
  }
LABEL_99:
  std::string::basic_string[abi:ne180100]<0>(&v124, *(char **)(a1 + 88));
  v54 = *(NSObject **)(a1 + 24);
  object = v54;
  if (v54)
    dispatch_retain(v54);
  std::string::basic_string[abi:ne180100]<0>(v130, "bsp");
  v55 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v55 || (v56 = *(_QWORD *)(a1 + 8), (v57 = std::__shared_weak_count::lock(v55)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v58 = v57;
  v59 = (unint64_t *)&v57->__shared_weak_owners_;
  do
    v60 = __ldxr(v59);
  while (__stxr(v60 + 1, v59));
  v61 = (unint64_t *)&v57->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v58);
  }
  v117 = 0;
  v118 = 0;
  v63 = std::__shared_weak_count::lock(v58);
  v64 = v63;
  if (v63)
  {
    v65 = (unint64_t *)&v63->__shared_weak_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  else
  {
    v56 = 0;
  }
  v117 = v56;
  v118 = v63;
  std::__shared_weak_count::__release_weak(v58);
  if (v64)
  {
    v67 = (unint64_t *)&v64->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  Registry::getServerConnection(*v108);
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 232, &v134);
  qmi::Client::~Client((qmi::Client *)&v133);
  if (v116)
  {
    v69 = &v116->__shared_owners_;
    do
      v70 = __ldaxr((unint64_t *)v69);
    while (__stlxr(v70 - 1, (unint64_t *)v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (v118)
    std::__shared_weak_count::__release_weak(v118);
  if (v131 < 0)
    operator delete(v130[0]);
  if (object)
    dispatch_release(object);
  if (SBYTE7(v126) < 0)
    operator delete(v124);
  v71 = MEMORY[0x24BDAC760];
  v115[20] = MEMORY[0x24BDAC760];
  v115[21] = 0x40000000;
  v115[22] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke;
  v115[23] = &__block_descriptor_tmp_8;
  v115[24] = a1;
  qmi::Client::setHandler();
  v115[15] = v71;
  v115[16] = 0x40000000;
  v115[17] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5;
  v115[18] = &__block_descriptor_tmp_6_0;
  v115[19] = a1;
  qmi::Client::setHandler();
  v115[10] = v71;
  v115[11] = 0x40000000;
  v115[12] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_7;
  v115[13] = &__block_descriptor_tmp_9_2;
  v115[14] = a1;
  qmi::Client::setHandler();
  v115[5] = v71;
  v115[6] = 0x40000000;
  v115[7] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_2;
  v115[8] = &__block_descriptor_tmp_10_3;
  v115[9] = a1;
  qmi::Client::setHandler();
  v115[0] = v71;
  v115[1] = 0x40000000;
  v115[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_3;
  v115[3] = &__block_descriptor_tmp_12_4;
  v115[4] = a1;
  *(_QWORD *)&v133 = v71;
  *((_QWORD *)&v133 + 1) = 0x40000000;
  *(_QWORD *)&v134 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp11GetCDRXInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v134 + 1) = &unk_24D5CAFA0;
  v135 = v115;
  qmi::Client::setIndHandler();
  v114[0] = v71;
  v114[1] = 0x40000000;
  v114[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_4;
  v114[3] = &__block_descriptor_tmp_13_3;
  v114[4] = a1;
  *(_QWORD *)&v133 = v71;
  *((_QWORD *)&v133 + 1) = 0x40000000;
  *(_QWORD *)&v134 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18FileTransferStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v134 + 1) = &unk_24D5CAFC8;
  v135 = v114;
  qmi::Client::setIndHandler();
  ShouldWake = (capabilities::ct *)qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 216));
  if (capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(ShouldWake))
  {
    std::string::basic_string[abi:ne180100]<0>(&v124, *(char **)(a1 + 88));
    v73 = *(NSObject **)(a1 + 24);
    v113 = v73;
    if (v73)
      dispatch_retain(v73);
    std::string::basic_string[abi:ne180100]<0>(v130, "pdc");
    v74 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v74 || (v75 = *(_QWORD *)(a1 + 8), (v76 = std::__shared_weak_count::lock(v74)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v77 = v76;
    v78 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = (unint64_t *)&v76->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v77);
    }
    v111 = 0;
    v112 = 0;
    v82 = std::__shared_weak_count::lock(v77);
    v83 = v82;
    if (v82)
    {
      v84 = (unint64_t *)&v82->__shared_weak_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    else
    {
      v75 = 0;
    }
    v111 = v75;
    v112 = v82;
    std::__shared_weak_count::__release_weak(v77);
    if (v83)
    {
      v86 = (unint64_t *)&v83->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    Registry::getServerConnection(*v108);
    qmi::Client::createWithQueueLocal();
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 264, &v134);
    qmi::Client::~Client((qmi::Client *)&v133);
    if (v110)
    {
      v88 = &v110->__shared_owners_;
      do
        v89 = __ldaxr((unint64_t *)v88);
      while (__stlxr(v89 - 1, (unint64_t *)v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (v112)
      std::__shared_weak_count::__release_weak(v112);
    if (v131 < 0)
      operator delete(v130[0]);
    if (v113)
      dispatch_release(v113);
    if (SBYTE7(v126) < 0)
      operator delete(v124);
    v109[10] = v71;
    v109[11] = 0x40000000;
    v109[12] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5;
    v109[13] = &__block_descriptor_tmp_15_3;
    v109[14] = a1;
    qmi::Client::setHandler();
    v109[5] = v71;
    v109[6] = 0x40000000;
    v109[7] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_16;
    v109[8] = &__block_descriptor_tmp_17_2;
    v109[9] = a1;
    qmi::Client::setHandler();
    v109[0] = v71;
    v109[1] = 0x40000000;
    v109[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_18;
    v109[3] = &__block_descriptor_tmp_19_2;
    v109[4] = a1;
    *(_QWORD *)&v133 = v71;
    *((_QWORD *)&v133 + 1) = 0x40000000;
    *(_QWORD *)&v134 = ___ZNK3qmi6Client13setIndHandlerIRKN3pdc14ActivateConfig10IndicationEEEvtU13block_pointerFvT_E_block_invoke_0;
    *((_QWORD *)&v134 + 1) = &unk_24D5CAFF0;
    v135 = v109;
    qmi::Client::setIndHandler();
    qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 248));
  }
  *(_QWORD *)&v133 = &off_24D5CB020;
  *((_QWORD *)&v133 + 1) = a1;
  *((_QWORD *)&v134 + 1) = &v133;
  qmi::ClientRouter::setIndHandlerInternal();
  v90 = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v91 = 4;
    v90 = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_172;
    v91 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
LABEL_172:
  if (!_os_feature_enabled_impl())
    goto LABEL_178;
  *(_QWORD *)&v133 = &off_24D5CB0A0;
  *((_QWORD *)&v133 + 1) = a1;
  *((_QWORD *)&v134 + 1) = &v133;
  qmi::ClientRouter::setIndHandlerInternal();
  v92 = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v93 = 4;
    v92 = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_178;
    v93 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
LABEL_178:
  v94 = operator new(0x28uLL);
  *(_QWORD *)v94 = &off_24D5CAE48;
  v94[8] = 3;
  *((_QWORD *)v94 + 2) = "NAS";
  *((_QWORD *)v94 + 3) = a1;
  *((_QWORD *)v94 + 4) = a1 + 112;
  *((_QWORD *)&v134 + 1) = v94;
  qmi::ClientRouter::setHandler();
  v95 = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v96 = 4;
    v95 = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_183;
    v96 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v95 + 8 * v96))();
LABEL_183:
  v97 = operator new(0x20uLL);
  *v97 = &off_24D5CAEC8;
  v97[1] = a1;
  v97[2] = "NAS";
  v97[3] = a1 + 112;
  *((_QWORD *)&v134 + 1) = v97;
  qmi::ClientRouter::setHandler();
  v98 = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v99 = 4;
    v98 = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_188;
    v99 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v98 + 8 * v99))();
LABEL_188:
  v100 = operator new(0x28uLL);
  *(_QWORD *)v100 = &off_24D5CAE48;
  v100[8] = 2;
  *((_QWORD *)v100 + 2) = "DMS";
  *((_QWORD *)v100 + 3) = a1;
  *((_QWORD *)v100 + 4) = a1 + 144;
  *((_QWORD *)&v134 + 1) = v100;
  qmi::ClientRouter::setHandler();
  v101 = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v102 = 4;
    v101 = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_193;
    v102 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v101 + 8 * v102))();
LABEL_193:
  v103 = operator new(0x20uLL);
  *v103 = &off_24D5CAEC8;
  v103[1] = a1;
  v103[2] = "DMS";
  v103[3] = a1 + 144;
  *((_QWORD *)&v134 + 1) = v103;
  qmi::ClientRouter::setHandler();
  v104 = (capabilities::ct *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v105 = 4;
    v104 = (capabilities::ct *)&v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_198;
    v105 = 5;
  }
  v104 = (capabilities::ct *)(*(uint64_t (**)(void))(*(_QWORD *)v104 + 8 * v105))();
LABEL_198:
  result = (__int128 *)capabilities::ct::supports5G(v104);
  if (!(_DWORD)result)
    return result;
  *(_QWORD *)&v133 = &off_24D5CB120;
  *((_QWORD *)&v133 + 1) = a1;
  *((_QWORD *)&v134 + 1) = &v133;
  qmi::ClientRouter::setIndHandlerInternal();
  result = (__int128 *)*((_QWORD *)&v134 + 1);
  if (*((__int128 **)&v134 + 1) == &v133)
  {
    v107 = 4;
    result = &v133;
  }
  else
  {
    if (!*((_QWORD *)&v134 + 1))
      return result;
    v107 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v107))();
}

void sub_2169219A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v2 - 136);
  if (v5 == v1)
  {
    v3 = 4;
    v5 = (_QWORD *)(v2 - 160);
  }
  else
  {
    if (!v5)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v3))();
LABEL_7:
  _Unwind_Resume(a1);
}

void ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const void **v3;
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *aBlock;
  void *__p[2];
  __int128 v26;
  uint8_t buf[8];
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void *v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I BSP QMI client has started", buf, 2u);
  }
  *(_BYTE *)(v1 + 176) = 1;
  QMIBasebandSettingsDriver::handleClientStarted_sync(v1);
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v3 = (const void **)__p[1];
  if (__p[1] != (void *)v26)
  {
    while (*((_BYTE *)*v3 + 8) != 16)
    {
      if (++v3 == (const void **)v26)
        goto LABEL_10;
    }
  }
  if (v3 == (const void **)v26)
  {
LABEL_10:
    v6 = operator new();
    v7 = v6;
    *(_WORD *)(v6 + 8) = 16;
    *(_QWORD *)v6 = &off_24D5CB638;
    v8 = v26;
    if ((unint64_t)v26 >= *((_QWORD *)&v26 + 1))
    {
      v10 = (uint64_t)(v26 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v11 = (uint64_t)(*((_QWORD *)&v26 + 1) - (unint64_t)__p[1]) >> 2;
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if (*((_QWORD *)&v26 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v26 + 8, v12);
      else
        v13 = 0;
      v14 = (uint64_t *)&v13[8 * v10];
      v15 = &v13[8 * v12];
      *v14 = v7;
      v9 = v14 + 1;
      v17 = (char *)__p[1];
      v16 = (char *)v26;
      if ((void *)v26 != __p[1])
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)__p[1];
      }
      __p[1] = v14;
      *(_QWORD *)&v26 = v9;
      *((_QWORD *)&v26 + 1) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v26 = v6;
      v9 = (_QWORD *)(v8 + 8);
    }
    v5 = (_BYTE *)(v7 + 9);
    *(_QWORD *)&v26 = v9;
  }
  else
  {
    if (!v4)
      __cxa_bad_cast();
    v5 = v4 + 9;
  }
  *v5 = 1;
  v20[5] = v1 + 216;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  aBlock = 0;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK25QMIBasebandSettingsDriver27registerCDRXIndication_syncEv_block_invoke_2;
  v20[3] = &__block_descriptor_tmp_41_2;
  v20[4] = v1;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v28 = 0x40000000;
  v29 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  v30 = &unk_24D5CB668;
  v31 = v20;
  v19 = _Block_copy(buf);
  aBlock = v19;
  if (v21)
  {
    qmi::Client::send();
    v19 = aBlock;
  }
  if (v19)
    _Block_release(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216921EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

capabilities::ct *QMIBasebandSettingsDriver::handleClientStarted_sync(uint64_t a1)
{
  capabilities::ct *result;

  result = (capabilities::ct *)boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(*(int8x8_t **)(a1 + 112), *(_QWORD *)(a1 + 120));
  if (result == *(capabilities::ct **)(a1 + 136))
  {
    result = (capabilities::ct *)boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(*(int8x8_t **)(a1 + 144), *(_QWORD *)(a1 + 152));
    if (result == *(capabilities::ct **)(a1 + 168))
    {
      if (*(_BYTE *)(a1 + 176))
      {
        result = (capabilities::ct *)capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(result);
        if (!(_DWORD)result || *(_BYTE *)(a1 + 177))
          return (capabilities::ct *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 1);
      }
    }
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I BSP QMI client has stopped", v4, 2u);
  }
  *(_BYTE *)(v1 + 176) = 0;
  return QMIBasebandSettingsDriver::handleClientStopped_sync(v1);
}

uint64_t QMIBasebandSettingsDriver::handleClientStopped_sync(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = result;
  v2 = *(unint64_t **)(result + 112);
  v3 = *(_QWORD *)(result + 120) - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 3;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    v6 = *v2;
    if (*v2)
      return result;
    v7 = v2 + 1;
    v8 = v5 - 1;
    while (v8 != v6)
    {
      if (v7[v6++])
      {
        if (v6 < v4)
          return result;
        break;
      }
    }
  }
  v10 = *(unint64_t **)(result + 144);
  v11 = *(_QWORD *)(result + 152) - (_QWORD)v10;
  if (v11)
  {
    v12 = v11 >> 3;
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    v14 = *v10;
    if (*v10)
      return result;
    v15 = v10 + 1;
    v16 = v13 - 1;
    while (v16 != v14)
    {
      if (v15[v14++])
      {
        if (v14 < v12)
          return result;
        break;
      }
    }
  }
  if (*(_BYTE *)(result + 176))
    return result;
  result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot((capabilities::ct *)result);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 72) + 16))(*(_QWORD *)(v1 + 72), 0);
  if (!*(_BYTE *)(v1 + 177))
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*(_QWORD **)(v1 + 288));
    *(_QWORD *)(v1 + 288) = 0;
    *(_QWORD *)(v1 + 296) = 0;
    *(_QWORD *)(v1 + 280) = v1 + 288;
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 72) + 16))(*(_QWORD *)(v1 + 72), 0);
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 72) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 72) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_3(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD v8[5];
  BOOL v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK25QMIBasebandSettingsDriver26handleBSPEventCDRXInd_syncERKN3bsp11GetCDRXInfo10IndicationE_block_invoke;
  v8[3] = &__block_descriptor_tmp_43_0;
  v8[4] = v3;
  result = qmi::MessageBase::findTlvValue(this);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v10 = result;
    v9 = tlv::parseV<bsp::tlv::CDRXInfo>((unint64_t *)&v10, v5);
    if (v10)
      return ___ZNK25QMIBasebandSettingsDriver26handleBSPEventCDRXInd_syncERKN3bsp11GetCDRXInfo10IndicationE_block_invoke((uint64_t)v8, &v9);
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v6, v7);
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_4(capabilities::ct *a1, qmi::MessageBase *a2)
{
  unint64_t v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13[5];
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 4);
  if (capabilities::ct::supportsGemini(a1))
  {
    TlvValue = qmi::MessageBase::findTlvValue(a2);
    if (TlvValue)
    {
      v6 = TlvValue;
      v7 = v5;
      v13[0] = TlvValue;
      v8 = tlv::parseV<bsp::tlv::SubscriptionID>(v13, v5);
      if (v13[0])
      {
        LODWORD(TlvValue) = subscriber::instanceAsSimSlot((subscriber *)v8);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v6, v7);
        LODWORD(TlvValue) = 0;
      }
    }
  }
  else
  {
    LODWORD(TlvValue) = 1;
  }
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = (unint64_t)___ZN25QMIBasebandSettingsDriver29handleFileTransferStatus_syncERKN3bsp18FileTransferStatus10IndicationE_block_invoke;
  v13[3] = (unint64_t)&__block_descriptor_tmp_83;
  v13[4] = v3;
  v14 = TlvValue;
  result = qmi::MessageBase::findTlvValue(a2);
  if (result)
  {
    v11 = result;
    v12 = v10;
    v16 = result;
    v15 = tlv::parseV<bsp::tlv::TransferStatus>((unint64_t *)&v16, v10);
    if (v16)
      return ___ZN25QMIBasebandSettingsDriver29handleFileTransferStatus_syncERKN3bsp18FileTransferStatus10IndicationE_block_invoke((uint64_t)v13, (uint64_t)&v15);
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v11, v12);
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_16(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I PDC QMI client has stopped", v4, 2u);
  }
  *(_BYTE *)(v1 + 177) = 0;
  return QMIBasebandSettingsDriver::handleClientStopped_sync(v1);
}

void ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_18(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  subscriber *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BYTE buf[18];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v40 = TlvValue;
    v8 = tlv::parseV<pdc::tlv::ErrorCode>(&v40, v5);
    if (v40)
    {
      if (v8)
      {
        v9 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v10 = *((_DWORD *)this + 1);
          v11 = qmi::asString();
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v10;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v11;
          _os_log_error_impl(&dword_216897000, v9, OS_LOG_TYPE_ERROR, "PDC active configuration indication failed: %d (%s)", buf, 0x12u);
        }
      }
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 1, v6, v7);
    }
  }
  v12 = qmi::MessageBase::findTlvValue(this);
  v14 = v12;
  if (!v12)
    goto LABEL_12;
  v15 = v13;
  *(_QWORD *)buf = v12;
  v16 = (subscriber *)tlv::parseV<pdc::tlv::IndicationToken>((unint64_t *)buf, v13);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v14, v15);
LABEL_12:
    LODWORD(v17) = 0;
    goto LABEL_13;
  }
  v17 = subscriber::instanceAsSimSlot(v16);
  v18 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v40) = 0;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I PDC refresh completed successfully", (uint8_t *)&v40, 2u);
  }
LABEL_13:
  v19 = *(_QWORD *)(v3 + 288);
  if (!v19)
    goto LABEL_23;
  v20 = (uint64_t **)(v3 + 288);
  v21 = v3 + 288;
  do
  {
    v22 = *(_DWORD *)(v19 + 32);
    v23 = v22 < (int)v17;
    if (v22 >= (int)v17)
      v24 = (uint64_t *)v19;
    else
      v24 = (uint64_t *)(v19 + 8);
    if (!v23)
      v21 = v19;
    v19 = *v24;
  }
  while (*v24);
  if ((uint64_t **)v21 == v20 || (int)v17 < *(_DWORD *)(v21 + 32))
  {
LABEL_23:
    v25 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    {
      v35 = subscriber::asString();
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v35;
      _os_log_fault_impl(&dword_216897000, v25, OS_LOG_TYPE_FAULT, "Received PDC activate configuration indication (%s) with no callback", buf, 0xCu);
    }
    return;
  }
  FilePushTransactionResult::FilePushTransactionResult();
  v26 = *(_QWORD *)(v21 + 64);
  *(_QWORD *)buf = v40;
  v41 = v17;
  if (!v26)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v26 + 48))(v26, &v41, buf);
  v27 = *v20;
  if (*v20)
  {
    v28 = (uint64_t *)(v3 + 288);
    v29 = *v20;
    do
    {
      v30 = *((_DWORD *)v29 + 8);
      v31 = v30 < (int)v17;
      if (v30 >= (int)v17)
        v32 = (uint64_t **)v29;
      else
        v32 = (uint64_t **)(v29 + 1);
      if (!v31)
        v28 = v29;
      v29 = *v32;
    }
    while (*v32);
    if (v28 != (uint64_t *)v20 && *((_DWORD *)v28 + 8) <= (int)v17)
    {
      v33 = (uint64_t *)v28[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
      else
      {
        v36 = v28;
        do
        {
          v34 = (uint64_t *)v36[2];
          v37 = *v34 == (_QWORD)v36;
          v36 = v34;
        }
        while (!v37);
      }
      if (*(uint64_t **)(v3 + 280) == v28)
        *(_QWORD *)(v3 + 280) = v34;
      --*(_QWORD *)(v3 + 296);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v27, v28);
      v38 = (uint64_t *)v28[8];
      if (v38 == v28 + 5)
      {
        v39 = 4;
        v38 = v28 + 5;
      }
      else
      {
        if (!v38)
        {
LABEL_51:
          operator delete(v28);
          return;
        }
        v39 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v39))();
      goto LABEL_51;
    }
  }
}

uint64_t QMIBasebandSettingsDriver::start(QMIBasebandSettingsDriver *this)
{
  NSObject *v2;
  capabilities::ct *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", v5, 2u);
  }
  qmi::ClientRouter::start();
  qmi::ClientRouter::start();
  v3 = (capabilities::ct *)qmi::Client::start((QMIBasebandSettingsDriver *)((char *)this + 216));
  result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(v3);
  if ((_DWORD)result)
    return qmi::Client::start((QMIBasebandSettingsDriver *)((char *)this + 248));
  return result;
}

uint64_t QMIBasebandSettingsDriver::shutdown(uint64_t a1)
{
  capabilities::ct *v2;
  uint64_t result;

  qmi::ClientRouter::stop();
  qmi::ClientRouter::stop();
  v2 = (capabilities::ct *)qmi::Client::stop((qmi::Client *)(a1 + 216));
  result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(v2);
  if ((_DWORD)result)
    return qmi::Client::stop((qmi::Client *)(a1 + 248));
  return result;
}

uint64_t boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(int8x8_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64x2_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint8x8_t v6;

  v2 = (a2 - (uint64_t)a1) >> 3;
  v3 = 0uLL;
  if ((unint64_t)(a2 - (_QWORD)a1) >= 9)
  {
    do
    {
      v4 = *(int8x16_t *)a1->i8;
      a1 += 2;
      v3 = vpadalq_u32(v3, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v4))));
      v2 -= 2;
    }
    while (v2 > 1);
  }
  v5 = v3.i64[0];
  if (v2)
  {
    v6 = (uint8x8_t)vcnt_s8(*a1);
    v6.i16[0] = vaddlv_u8(v6);
    v5 = v6.u32[0] + v3.i64[0];
  }
  return v5 + v3.i64[1];
}

void ___ZNK25QMIBasebandSettingsDriver27registerCDRXIndication_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#N Registering for CDRX indications failed with code %d (%s)";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Register for CDRX indications succeeded";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

uint64_t ___ZNK25QMIBasebandSettingsDriver26handleBSPEventCDRXInd_syncERKN3bsp11GetCDRXInfo10IndicationE_block_invoke(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315138;
    v7 = CSIBOOLAsString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I CDRX Indication: LTE with CDRX is %s", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v3 + 72) + 56))(*(_QWORD *)(v3 + 72), *a2 == 0);
}

uint64_t QMIBasebandSettingsDriver::queryLTEWithCDRXState(QMIBasebandSettingsDriver *this)
{
  void *v2;
  _QWORD v4[6];
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  _OWORD v9[2];
  _QWORD aBlock[5];

  memset(v9, 0, sizeof(v9));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
  v4[5] = (char *)this + 216;
  v5 = QMIServiceMsg::create();
  v6 = 25000;
  v7 = 0;
  v8 = 0;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN25QMIBasebandSettingsDriver21queryLTEWithCDRXStateEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_44;
  v4[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp11GetCDRXInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CB690;
  aBlock[4] = v4;
  v2 = _Block_copy(aBlock);
  v8 = v2;
  if (v5)
  {
    qmi::Client::send();
    v2 = v8;
  }
  if (v2)
    _Block_release(v2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  return 1;
}

void sub_216922B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver21queryLTEWithCDRXStateEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t TlvValue;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint8_t buf[4];
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *((_DWORD *)this + 1);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v18[0] = v3;
      LOWORD(v18[1]) = 2080;
      *(_QWORD *)((char *)&v18[1] + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N Querying for for CDRX has failed with code %d (%s)", buf, 0x12u);
    }
    goto LABEL_10;
  }
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
  {
LABEL_10:
    v14 = 2;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 56))(*(_QWORD *)(v2 + 72), v14);
  }
  v8 = TlvValue;
  v9 = v7;
  v16 = TlvValue;
  v10 = tlv::parseV<bsp::tlv::CDRXInfo>((unint64_t *)&v16, v7);
  if (!v16)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v8, v9);
    goto LABEL_10;
  }
  v11 = v10;
  v12 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = CSIBOOLAsString();
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v18 = v13;
    _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I LTE with CDRX is %s", buf, 0xCu);
  }
  v14 = !v11;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 56))(*(_QWORD *)(v2 + 72), v14);
}

void QMIBasebandSettingsDriver::setActiveBands(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  int v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD **v17;
  int v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD **v23;
  int v24;
  _QWORD *v25;
  int *v26;
  _QWORD *v27;
  int *v28;
  int v29;
  _QWORD *v30;
  int *v31;
  capabilities::ct *v32;
  unsigned __int16 *v33;
  const void **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int *v50;
  int *v51;
  int *v52;
  int *v53;
  int v54;
  const void **v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  const void **v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD **v88;
  _QWORD *v89;
  _QWORD **v90;
  int v91;
  _QWORD *v92;
  int *v93;
  const void **v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  unsigned __int16 *v110;
  uint64_t i;
  unsigned __int16 *v112;
  _WORD *v113;
  int v114;
  uint64_t v115;
  char *v116;
  unint64_t *v117;
  _QWORD **v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  _QWORD **v132;
  _QWORD *v133;
  uint64_t v134;
  char v135[8];
  uint64_t v136;
  _QWORD v137[2];
  uint64_t (*v138)(uint64_t, _QWORD *);
  void *v139;
  int *v140;
  _QWORD v141[2];
  void (*v142)();
  void *v143;
  int *v144;
  _QWORD v145[2];
  uint64_t (*v146)(_QWORD *, _QWORD *);
  void *v147;
  _QWORD **v148;
  _QWORD **v149;
  _QWORD **v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  _QWORD *v154[2];
  unsigned __int16 *v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t);
  void *v158;
  char *v159;
  std::__shared_weak_count *v160;
  char *v161;
  std::__shared_weak_count *v162;
  _QWORD aBlock[7];

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v153 = 0;
  v154[0] = 0;
  v154[1] = 0;
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)&v153, a3);
  v7 = v154[0];
  if (!v154[0])
    goto LABEL_10;
  v8 = v154;
  v9 = v154[0];
  do
  {
    v10 = v9;
    v11 = v8;
    v12 = *((_DWORD *)v9 + 8);
    v13 = v9 + 1;
    if (v12 >= 5)
    {
      v13 = v10;
      v8 = (_QWORD **)v10;
    }
    v9 = (_QWORD *)*v13;
  }
  while (v9);
  if (v8 == v154)
    goto LABEL_10;
  if (v12 < 5)
    v10 = v11;
  if (*((int *)v10 + 8) >= 6)
LABEL_10:
    v8 = v154;
  if (!v154[0])
    goto LABEL_20;
  v14 = v154;
  v15 = v154[0];
  do
  {
    v16 = v15;
    v17 = v14;
    v18 = *((_DWORD *)v15 + 8);
    v19 = v15 + 1;
    if (v18 >= 0)
    {
      v19 = v16;
      v14 = (_QWORD **)v16;
    }
    v15 = (_QWORD *)*v19;
  }
  while (v15);
  if (v14 == v154)
    goto LABEL_20;
  if (v18 < 0)
    v16 = v17;
  if (*((int *)v16 + 8) >= 1)
LABEL_20:
    v14 = v154;
  if (!v154[0])
    goto LABEL_30;
  v20 = v154;
  v21 = v154[0];
  do
  {
    v22 = v21;
    v23 = v20;
    v24 = *((_DWORD *)v21 + 8);
    v25 = v21 + 1;
    if (v24 >= 2)
    {
      v25 = v22;
      v20 = (_QWORD **)v22;
    }
    v21 = (_QWORD *)*v25;
  }
  while (v21);
  if (v20 == v154)
    goto LABEL_30;
  if (v24 < 2)
    v22 = v23;
  if (*((int *)v22 + 8) >= 3)
LABEL_30:
    v20 = v154;
  if (!v154[0])
    goto LABEL_41;
  v26 = (int *)v154;
  do
  {
    v27 = v7;
    v28 = v26;
    v29 = *((_DWORD *)v7 + 8);
    v30 = v7 + 1;
    if (v29 >= 9)
    {
      v30 = v27;
      v26 = (int *)v27;
    }
    v7 = (_QWORD *)*v30;
  }
  while (v7);
  if (v26 == (int *)v154 || (v29 >= 9 ? (v31 = (int *)v27) : (v31 = v28), v31[8] >= 10))
LABEL_41:
    v26 = (int *)v154;
  v151 = 0u;
  v152 = 0u;
  v32 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v151);
  v33 = (unsigned __int16 *)MEMORY[0x24BDAC760];
  if (v8 != v154 && v14 != v154 && v20 != v154)
  {
    v145[0] = MEMORY[0x24BDAC760];
    v145[1] = 0x40000000;
    v146 = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke;
    v147 = &__block_descriptor_tmp_46_1;
    v148 = v8;
    v149 = v14;
    v150 = v20;
    v34 = (const void **)*((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1) != (_QWORD)v152)
    {
      while (*((_BYTE *)*v34 + 8) != 18)
      {
        if (++v34 == (const void **)v152)
          goto LABEL_52;
      }
    }
    if (v34 == (const void **)v152)
    {
LABEL_52:
      v36 = operator new();
      v37 = v36;
      *(_BYTE *)(v36 + 8) = 18;
      *(_QWORD *)v36 = &off_24D5CB7F8;
      *(_QWORD *)(v36 + 16) = 0;
      v38 = v36 + 16;
      v39 = v152;
      if ((unint64_t)v152 >= *((_QWORD *)&v152 + 1))
      {
        v41 = (uint64_t)(v152 - *((_QWORD *)&v151 + 1)) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          goto LABEL_203;
        v42 = (uint64_t)(*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1)) >> 2;
        if (v42 <= v41 + 1)
          v42 = v41 + 1;
        if (*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v152 + 8, v43);
        else
          v44 = 0;
        v45 = (uint64_t *)&v44[8 * v41];
        v46 = &v44[8 * v43];
        *v45 = v37;
        v40 = v45 + 1;
        v48 = (char *)*((_QWORD *)&v151 + 1);
        v47 = (char *)v152;
        if ((_QWORD)v152 != *((_QWORD *)&v151 + 1))
        {
          do
          {
            v49 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v45 = v49;
          }
          while (v47 != v48);
          v47 = (char *)*((_QWORD *)&v151 + 1);
        }
        *((_QWORD *)&v151 + 1) = v45;
        *(_QWORD *)&v152 = v40;
        *((_QWORD *)&v152 + 1) = v46;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v152 = v36;
        v40 = (_QWORD *)(v39 + 8);
      }
      *(_QWORD *)&v152 = v40;
      v146(v145, (_QWORD *)v38);
    }
    else
    {
      if (!v35)
        goto LABEL_202;
      ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke(v145, v35 + 2);
    }
    v32 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(&v151, 17);
    *(_WORD *)v32 |= 0xFu;
  }
  v50 = (int *)v154[0];
  if (v154[0])
  {
    v51 = (int *)v154;
    do
    {
      v52 = v50;
      v53 = v51;
      v54 = v50[8];
      if (v54 >= 7)
        v51 = v50;
      else
        v50 += 2;
      v50 = *(int **)v50;
    }
    while (v50);
    if (v51 != (int *)v154)
    {
      if (v54 < 7)
        v52 = v53;
      if (v52[8] <= 7)
      {
        v141[0] = v33;
        v141[1] = 0x40000000;
        v142 = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3;
        v143 = &__block_descriptor_tmp_51_1;
        v144 = v51;
        v55 = (const void **)*((_QWORD *)&v151 + 1);
        if (*((_QWORD *)&v151 + 1) != (_QWORD)v152)
        {
          while (*((_BYTE *)*v55 + 8) != 36)
          {
            if (++v55 == (const void **)v152)
              goto LABEL_87;
          }
        }
        if (v55 == (const void **)v152)
        {
LABEL_87:
          v57 = operator new();
          v58 = v57;
          *(_BYTE *)(v57 + 8) = 36;
          *(_QWORD *)v57 = &off_24D5CB898;
          *(_OWORD *)(v57 + 9) = 0u;
          v59 = v57 + 9;
          *(_OWORD *)(v57 + 25) = 0u;
          v60 = v152;
          if ((unint64_t)v152 >= *((_QWORD *)&v152 + 1))
          {
            v62 = (uint64_t)(v152 - *((_QWORD *)&v151 + 1)) >> 3;
            if ((unint64_t)(v62 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v63 = (uint64_t)(*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1)) >> 2;
            if (v63 <= v62 + 1)
              v63 = v62 + 1;
            if (*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v63;
            if (v64)
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v152 + 8, v64);
            else
              v65 = 0;
            v66 = (uint64_t *)&v65[8 * v62];
            v67 = &v65[8 * v64];
            *v66 = v58;
            v61 = v66 + 1;
            v69 = (char *)*((_QWORD *)&v151 + 1);
            v68 = (char *)v152;
            if ((_QWORD)v152 != *((_QWORD *)&v151 + 1))
            {
              do
              {
                v70 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *--v66 = v70;
              }
              while (v68 != v69);
              v68 = (char *)*((_QWORD *)&v151 + 1);
            }
            *((_QWORD *)&v151 + 1) = v66;
            *(_QWORD *)&v152 = v61;
            *((_QWORD *)&v152 + 1) = v67;
            if (v68)
              operator delete(v68);
          }
          else
          {
            *(_QWORD *)v152 = v57;
            v61 = (_QWORD *)(v60 + 8);
          }
          *(_QWORD *)&v152 = v61;
          ((void (*)(_QWORD *, uint64_t))v142)(v141, v59);
        }
        else
        {
          if (!v56)
            __cxa_bad_cast();
          ((void (*)(_QWORD *, char *))___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3)(v141, v56 + 9);
        }
        v32 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(&v151, 17);
        *(_WORD *)v32 |= 0x10u;
      }
    }
  }
  if (v26 != (int *)v154)
  {
    v137[0] = v33;
    v137[1] = 0x40000000;
    v138 = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5;
    v139 = &__block_descriptor_tmp_55_1;
    v140 = v26;
    v71 = (const void **)*((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1) != (_QWORD)v152)
    {
      while (*((_BYTE *)*v71 + 8) != 29)
      {
        if (++v71 == (const void **)v152)
          goto LABEL_113;
      }
    }
    if (v71 != (const void **)v152)
    {
      if (v72)
      {
        ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5((uint64_t)v137, v72 + 2);
LABEL_130:
        v32 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(&v151, 17);
        *(_WORD *)v32 |= 0x20u;
        goto LABEL_131;
      }
LABEL_202:
      __cxa_bad_cast();
    }
LABEL_113:
    v73 = operator new();
    v74 = v73;
    *(_BYTE *)(v73 + 8) = 29;
    *(_QWORD *)v73 = &off_24D5CB8E8;
    *(_QWORD *)(v73 + 16) = 0;
    v75 = (_QWORD *)(v73 + 16);
    v76 = v152;
    if ((unint64_t)v152 < *((_QWORD *)&v152 + 1))
    {
      *(_QWORD *)v152 = v73;
      v77 = (_QWORD *)(v76 + 8);
LABEL_129:
      *(_QWORD *)&v152 = v77;
      v138((uint64_t)v137, v75);
      goto LABEL_130;
    }
    v78 = (uint64_t)(v152 - *((_QWORD *)&v151 + 1)) >> 3;
    if (!((unint64_t)(v78 + 1) >> 61))
    {
      v79 = (uint64_t)(*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1)) >> 2;
      if (v79 <= v78 + 1)
        v79 = v78 + 1;
      if (*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v152 + 8, v80);
      else
        v81 = 0;
      v82 = (uint64_t *)&v81[8 * v78];
      v83 = &v81[8 * v80];
      *v82 = v74;
      v77 = v82 + 1;
      v85 = (char *)*((_QWORD *)&v151 + 1);
      v84 = (char *)v152;
      if ((_QWORD)v152 != *((_QWORD *)&v151 + 1))
      {
        do
        {
          v86 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *--v82 = v86;
        }
        while (v84 != v85);
        v84 = (char *)*((_QWORD *)&v151 + 1);
      }
      *((_QWORD *)&v151 + 1) = v82;
      *(_QWORD *)&v152 = v77;
      *((_QWORD *)&v152 + 1) = v83;
      if (v84)
        operator delete(v84);
      goto LABEL_129;
    }
LABEL_203:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
LABEL_131:
  v87 = v154[0];
  if (v154[0])
  {
    v88 = v154;
    do
    {
      v89 = v87;
      v90 = v88;
      v91 = *((_DWORD *)v87 + 8);
      v92 = v87 + 1;
      if (v91 >= 10)
      {
        v92 = v89;
        v88 = (_QWORD **)v89;
      }
      v87 = (_QWORD *)*v92;
    }
    while (v87);
    if (v88 != v154)
    {
      v93 = (int *)(v91 >= 10 ? v89 : v90);
      if (v93[8] <= 10 && capabilities::ct::supports5G(v32))
      {
        v94 = (const void **)*((_QWORD *)&v151 + 1);
        if (*((_QWORD *)&v151 + 1) != (_QWORD)v152)
        {
          while (*((_BYTE *)*v94 + 8) != 43)
          {
            if (++v94 == (const void **)v152)
              goto LABEL_149;
          }
        }
        if (v94 == (const void **)v152)
        {
LABEL_149:
          v96 = operator new();
          v95 = (_BYTE *)v96;
          *(_BYTE *)(v96 + 8) = 43;
          *(_QWORD *)v96 = &off_24D5CB938;
          *(_OWORD *)(v96 + 9) = 0u;
          *(_OWORD *)(v96 + 25) = 0u;
          *(_OWORD *)(v96 + 41) = 0u;
          *(_OWORD *)(v96 + 57) = 0u;
          v97 = v152;
          if ((unint64_t)v152 >= *((_QWORD *)&v152 + 1))
          {
            v99 = (uint64_t)(v152 - *((_QWORD *)&v151 + 1)) >> 3;
            if ((unint64_t)(v99 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v100 = (uint64_t)(*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1)) >> 2;
            if (v100 <= v99 + 1)
              v100 = v99 + 1;
            if (*((_QWORD *)&v152 + 1) - *((_QWORD *)&v151 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v101 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v101 = v100;
            if (v101)
              v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v152 + 8, v101);
            else
              v102 = 0;
            v103 = &v102[8 * v99];
            v104 = &v102[8 * v101];
            *(_QWORD *)v103 = v95;
            v98 = v103 + 8;
            v106 = (char *)*((_QWORD *)&v151 + 1);
            v105 = (char *)v152;
            if ((_QWORD)v152 != *((_QWORD *)&v151 + 1))
            {
              do
              {
                v107 = *((_QWORD *)v105 - 1);
                v105 -= 8;
                *((_QWORD *)v103 - 1) = v107;
                v103 -= 8;
              }
              while (v105 != v106);
              v105 = (char *)*((_QWORD *)&v151 + 1);
            }
            *((_QWORD *)&v151 + 1) = v103;
            *(_QWORD *)&v152 = v98;
            *((_QWORD *)&v152 + 1) = v104;
            if (v105)
              operator delete(v105);
          }
          else
          {
            *(_QWORD *)v152 = v96;
            v98 = (_QWORD *)(v97 + 8);
          }
          *(_QWORD *)&v152 = v98;
        }
        else
        {
          if (!v95)
            __cxa_bad_cast();
        }
        v155 = 0;
        v156 = 0;
        v157 = 0;
        convertMaskToBandsForRat();
        v108 = 0;
        v109 = v155;
        v110 = (unsigned __int16 *)v156;
        do
        {
          for (i = 0; i != 8; ++i)
          {
            if (v109 == v110)
            {
              v112 = v109;
            }
            else
            {
              v112 = v109;
              while (*v112 != (unsigned __int16)(((8 * v108) | 1) + i))
              {
                if (++v112 == v110)
                {
                  v112 = v110;
                  break;
                }
              }
            }
            if (v112 != v110)
              v95[v108 + 9] |= 1 << i;
          }
          ++v108;
        }
        while (v108 != 64);
        if (v109)
        {
          v156 = (uint64_t)v109;
          operator delete(v109);
        }
        v113 = (_WORD *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(&v151, 17);
        *v113 |= 0x40u;
      }
    }
  }
  if ((a2 - 1) >= 3)
    v114 = 0;
  else
    v114 = a2;
  v115 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::SetSystemSelectionPreference::Request>((uint64_t)v135, v114, v115);
  *(_QWORD *)&v131 = a1;
  DWORD2(v131) = a2;
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)&v132, &v153);
  v116 = (char *)operator new(0x48uLL);
  *((_QWORD *)v116 + 1) = 0;
  v117 = (unint64_t *)(v116 + 8);
  *((_QWORD *)v116 + 2) = 0;
  *(_QWORD *)v116 = &off_24D5CB9A0;
  *(_OWORD *)(v116 + 24) = v131;
  v118 = v132;
  *((_QWORD *)v116 + 5) = v6;
  *((_QWORD *)v116 + 6) = v118;
  v119 = v133;
  v120 = v134;
  *((_QWORD *)v116 + 7) = v133;
  v121 = v116 + 56;
  *((_QWORD *)v116 + 8) = v120;
  if (v120)
  {
    v119[2] = v121;
    v132 = &v133;
    v133 = 0;
    v134 = 0;
  }
  else
  {
    *((_QWORD *)v116 + 6) = v121;
  }
  v161 = v116 + 24;
  v162 = (std::__shared_weak_count *)v116;
  v122 = v136;
  v155 = v33;
  v156 = 1174405120;
  v157 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS6_4lessIS8_EENS6_9allocatorINS6_4pairIKS8_yEEEEEEE3__2EEOS1_OT__block_invoke;
  v158 = &__block_descriptor_tmp_118_0;
  v159 = v116 + 24;
  v160 = (std::__shared_weak_count *)v116;
  do
    v123 = __ldxr(v117);
  while (__stxr(v123 + 1, v117));
  aBlock[0] = v33;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = &v155;
  *(_QWORD *)(v122 + 32) = _Block_copy(aBlock);
  v124 = v160;
  if (v160)
  {
    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
    do
      v126 = __ldaxr(p_shared_owners);
    while (__stlxr(v126 - 1, p_shared_owners));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v162;
  if (v162)
  {
    v128 = (unint64_t *)&v162->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v133);
  v130 = v136;
  v136 = 0;
  if (v130)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v136, v130);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v151);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v154[0]);
}

void sub_216923854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(_QWORD **)(v35 - 216));
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(a1[4] + 40);
  do
  {
    if (((1 << v4) & v6) != 0)
      v5 |= nas::asBand(1 << v4);
    ++v4;
  }
  while (v4 != 64);
  v7 = 0;
  v8 = 0;
  *a2 |= v5;
  v9 = *(_QWORD *)(a1[5] + 40);
  do
  {
    if (((1 << v7) & v9) != 0)
      v8 |= nas::asBand(1 << v7);
    ++v7;
  }
  while (v7 != 64);
  v10 = 0;
  v11 = 0;
  *a2 |= v8;
  v12 = *(_QWORD *)(a1[6] + 40);
  do
  {
    result = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      result = nas::asBand(result);
      v11 |= result;
    }
    ++v10;
  }
  while (v10 != 64);
  *a2 |= v11;
  return result;
}

void ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3()
{
  uint64_t i;
  uint64_t j;

  convertMaskToBandsForRat();
  for (i = 0; i != 32; ++i)
  {
    for (j = 0; j != 8; ++j)
      ;
  }
}

uint64_t ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  do
  {
    result = 1 << v3;
    if (((1 << v3) & v5) != 0)
    {
      result = nas::asBand(result);
      v4 |= result;
    }
    ++v3;
  }
  while (v3 != 64);
  *a2 = v4;
  return result;
}

void QMIBasebandSettingsDriver::getBandCapability(_QWORD **a1, int a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  unsigned int *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _QWORD aBlock[5];

  if (a2 == 3)
  {
    subscriber::makeSimSlotRange();
    v3 = v21;
    if (v21 != (unsigned int *)v22)
    {
      while ((((uint64_t (*)(_QWORD))v23)(*v3) & 1) == 0)
      {
        if (++v3 == (unsigned int *)v22)
        {
          v3 = (unsigned int *)v22;
          break;
        }
      }
LABEL_6:
      while (v3 != (unsigned int *)v22)
      {
        v4 = v3 + 1;
        ((void (*)(_QWORD **, _QWORD))(*a1)[6])(a1, *v3);
        v3 = (unsigned int *)v22;
        if (v4 != (unsigned int *)v22)
        {
          v3 = v4;
          while ((((uint64_t (*)(_QWORD))v23)(*v3) & 1) == 0)
          {
            if (++v3 == (unsigned int *)v22)
            {
              v3 = (unsigned int *)v22;
              goto LABEL_6;
            }
          }
        }
      }
    }
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1[6] + 16))(a1[6]);
    memset(v20, 0, sizeof(v20));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
    v6 = qmi::ClientRouter::get();
    v7 = operator new();
    *(_QWORD *)v7 = v6;
    *(_QWORD *)(v7 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v7 + 16) = 25000;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v19 = v7;
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBA20;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v27 = &v8[1].__vftable;
    v28 = v8;
    v10 = MEMORY[0x24BDAC760];
    v21 = (unsigned int *)MEMORY[0x24BDAC760];
    v22 = 1174405120;
    v23 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke;
    v24 = &__block_descriptor_tmp_119;
    v25 = &v8[1].__vftable;
    v26 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    aBlock[0] = v10;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms19GetBandCapabilityEx8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5CBA68;
    aBlock[4] = &v21;
    *(_QWORD *)(v7 + 32) = _Block_copy(aBlock);
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v19;
    v19 = 0;
    if (v18)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v19, v18);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
  }
}

void sub_216923D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v5 = v4;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v3, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t QMIBasebandSettingsDriver::exitNoServiceState(std::__shared_weak_count_vtbl *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _OWORD v17[2];
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  _QWORD aBlock[5];

  memset(v17, 0, sizeof(v17));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
  v2 = qmi::ClientRouter::get();
  v3 = operator new();
  *(_QWORD *)v3 = v2;
  *(_QWORD *)(v3 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v3 + 16) = 25000;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v16 = v3;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBBD8;
  v4[1].__vftable = this;
  v20 = &v4[1].__vftable;
  v21 = v4;
  v6 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1174405120;
  v18[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EEOS1_OT__block_invoke;
  v18[3] = &__block_descriptor_tmp_121;
  v18[4] = v4 + 1;
  v19 = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = v18;
  *(_QWORD *)(v3 + 32) = _Block_copy(aBlock);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v16;
  v16 = 0;
  if (v14)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v16, v14);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
  return 1;
}

void sub_216923FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a3);
  v6 = v4;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v6);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5 - 88);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v3, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::sendTimeToBaseband(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  unsigned int v8;
  const void **v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  __int128 v40;
  _OWORD v41[3];
  _QWORD *v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  memset(v41, 0, sizeof(v41));
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v3 + 48))(v41);
  v4 = CSIDateToSeconds();
  v5 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Current Time: %u seconds", buf, 8u);
  }
  (*((void (**)(uint8_t *__return_ptr, std::__shared_weak_count_vtbl *, _OWORD *))a1->~__shared_weak_count + 9))(buf, a1, v41);
  v6 = CSIDateToSeconds();
  v7 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I 1980 Time: %u seconds", buf, 8u);
    v7 = a1[1].~__shared_weak_count;
  }
  v8 = v4 - v6;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Difference: %u seconds", buf, 8u);
  }
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v9 = (const void **)__p[1];
  if (__p[1] != (void *)v40)
  {
    while (*((_BYTE *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v40)
        goto LABEL_15;
    }
  }
  if (v9 == (const void **)v40)
  {
LABEL_15:
    v12 = operator new();
    v13 = v12;
    *(_BYTE *)(v12 + 8) = 1;
    *(_QWORD *)v12 = &off_24D5CBC40;
    *(_QWORD *)(v12 + 16) = 0;
    v11 = (_QWORD *)(v12 + 16);
    v14 = v40;
    if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
    {
      v16 = (uint64_t)(v40 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v17 = (uint64_t)(*((_QWORD *)&v40 + 1) - (unint64_t)__p[1]) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if (*((_QWORD *)&v40 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v40 + 8, v18);
      else
        v19 = 0;
      v20 = (uint64_t *)&v19[8 * v16];
      v21 = &v19[8 * v18];
      *v20 = v13;
      v15 = v20 + 1;
      v23 = (char *)__p[1];
      v22 = (char *)v40;
      if ((void *)v40 != __p[1])
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v20 = v24;
        }
        while (v22 != v23);
        v22 = (char *)__p[1];
      }
      __p[1] = v20;
      *(_QWORD *)&v40 = v15;
      *((_QWORD *)&v40 + 1) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_QWORD *)v40 = v12;
      v15 = (_QWORD *)(v14 + 8);
    }
    *(_QWORD *)&v40 = v15;
  }
  else
  {
    if (!v10)
      __cxa_bad_cast();
    v11 = v10 + 16;
  }
  *v11 = 1000 * v8;
  v25 = qmi::ClientRouter::get();
  v26 = operator new();
  *(_QWORD *)v26 = v25;
  *(_QWORD *)(v26 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v26 + 16) = 25000;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v38 = v26;
  v27 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBCA8;
  v27[1].__vftable = a1;
  v42 = &v27[1].__vftable;
  v43 = v27;
  v29 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v46 = 1174405120;
  v47 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEEE3__0EEOS1_OT__block_invoke;
  v48 = &__block_descriptor_tmp_122;
  v49 = &v27[1].__vftable;
  v50 = v27;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  aBlock[0] = v29;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = buf;
  *(_QWORD *)(v26 + 32) = _Block_copy(aBlock);
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v38;
  v38 = 0;
  if (v37)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v38, v37);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169244E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v3, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

double QMIBasebandSettingsDriver::getRelativeBasebandTime@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  int v3;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)&result = 0x100000006;
  *(_QWORD *)(a2 + 12) = 0x100000006;
  v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 20) = 1980;
  *(_DWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 28);
  return result;
}

void QMIBasebandSettingsDriver::enableIMSISwitch(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  const void **v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *aBlock;
  void *__p[2];
  __int128 v30;
  _QWORD v31[5];
  _BYTE v32[24];
  _BYTE *v33;
  __int128 buf;
  void (*v35)(uint64_t, uint64_t);
  void *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = CSIBOOLAsString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending config settings with IMSI Switch: %s", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v30)
  {
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v30)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v30)
  {
LABEL_10:
    v10 = operator new();
    v11 = v10;
    *(_WORD *)(v10 + 8) = 16;
    *(_QWORD *)v10 = &off_24D5CBD10;
    v12 = v30;
    if ((unint64_t)v30 >= *((_QWORD *)&v30 + 1))
    {
      v14 = (uint64_t)(v30 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = (uint64_t)(*((_QWORD *)&v30 + 1) - (unint64_t)__p[1]) >> 2;
      if (v15 <= v14 + 1)
        v15 = v14 + 1;
      if (*((_QWORD *)&v30 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v30 + 8, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v14];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v13 = v18 + 1;
      v21 = (char *)__p[1];
      v20 = (char *)v30;
      if ((void *)v30 != __p[1])
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = (char *)__p[1];
      }
      __p[1] = v18;
      *(_QWORD *)&v30 = v13;
      *((_QWORD *)&v30 + 1) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v30 = v10;
      v13 = (_QWORD *)(v12 + 8);
    }
    v9 = (_BYTE *)(v11 + 9);
    *(_QWORD *)&v30 = v13;
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 9;
  }
  *v9 = a2;
  v27 = QMIServiceMsg::create();
  v23 = MEMORY[0x24BDAC760];
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 1174405120;
  v31[2] = ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_62_1;
  v31[4] = a1;
  v24 = v32;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, a3);
  *(_QWORD *)&buf = v23;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v35 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  v36 = &unk_24D5CB668;
  v37 = v31;
  v25 = _Block_copy(&buf);
  aBlock = v25;
  if (v27)
  {
    qmi::Client::send();
    v25 = aBlock;
  }
  if (v25)
    _Block_release(v25);
  if (v33 == v32)
  {
    v26 = 4;
    goto LABEL_35;
  }
  if (v33)
  {
    v26 = 5;
    v24 = v33;
LABEL_35:
    (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169248AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  _QWORD *v28;
  uint64_t v30;

  if (a28 == v28)
  {
    v30 = 4;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
    v28 = a28;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v30))(v28);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      v8 = 136315138;
      v9 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N QMI BSP SetConfig::Response returned error: %s", (uint8_t *)&v8, 0xCu);
    }
    LOBYTE(v8) = 0;
  }
  else
  {
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Successfully pushed the baseband config", (uint8_t *)&v8, 2u);
    }
    LOBYTE(v8) = 1;
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v8);
}

uint64_t __copy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMIBasebandSettingsDriver::allowMultiplePDNToSameAPN(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  const void **v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *aBlock;
  void *__p[2];
  __int128 v30;
  _QWORD v31[5];
  _BYTE v32[24];
  _BYTE *v33;
  __int128 buf;
  void (*v35)(uint64_t, uint64_t);
  void *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = CSIBOOLAsString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending config settings with AllowMultiPDN: %s", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v30)
  {
    while (*((_BYTE *)*v7 + 8) != 17)
    {
      if (++v7 == (const void **)v30)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v30)
  {
LABEL_10:
    v10 = operator new();
    v11 = v10;
    *(_WORD *)(v10 + 8) = 17;
    *(_QWORD *)v10 = &off_24D5CBD60;
    v12 = v30;
    if ((unint64_t)v30 >= *((_QWORD *)&v30 + 1))
    {
      v14 = (uint64_t)(v30 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = (uint64_t)(*((_QWORD *)&v30 + 1) - (unint64_t)__p[1]) >> 2;
      if (v15 <= v14 + 1)
        v15 = v14 + 1;
      if (*((_QWORD *)&v30 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v30 + 8, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v14];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v13 = v18 + 1;
      v21 = (char *)__p[1];
      v20 = (char *)v30;
      if ((void *)v30 != __p[1])
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = (char *)__p[1];
      }
      __p[1] = v18;
      *(_QWORD *)&v30 = v13;
      *((_QWORD *)&v30 + 1) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v30 = v10;
      v13 = (_QWORD *)(v12 + 8);
    }
    v9 = (_BYTE *)(v11 + 9);
    *(_QWORD *)&v30 = v13;
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 9;
  }
  *v9 = a2;
  v27 = QMIServiceMsg::create();
  v23 = MEMORY[0x24BDAC760];
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 1174405120;
  v31[2] = ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_65_2;
  v31[4] = a1;
  v24 = v32;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, a3);
  *(_QWORD *)&buf = v23;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v35 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  v36 = &unk_24D5CB668;
  v37 = v31;
  v25 = _Block_copy(&buf);
  aBlock = v25;
  if (v27)
  {
    qmi::Client::send();
    v25 = aBlock;
  }
  if (v25)
    _Block_release(v25);
  if (v33 == v32)
  {
    v26 = 4;
    goto LABEL_35;
  }
  if (v33)
  {
    v26 = 5;
    v24 = v33;
LABEL_35:
    (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216924D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  _QWORD *v28;
  uint64_t v30;

  if (a28 == v28)
  {
    v30 = 4;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
    v28 = a28;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v30))(v28);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      v8 = 136315138;
      v9 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N QMI BSP SetConfig::Response returned error: %s", (uint8_t *)&v8, 0xCu);
    }
    LOBYTE(v8) = 0;
  }
  else
  {
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Successfully pushed the baseband config", (uint8_t *)&v8, 2u);
    }
    LOBYTE(v8) = 1;
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v8);
}

void QMIBasebandSettingsDriver::sendScreenStatus(QMIBasebandSettingsDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *__p[2];
  __int128 v27;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v27 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v27)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v27)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v27)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_24D5CBDB0;
    v9 = v27;
    if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1))
    {
      v11 = (uint64_t)(v27 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v27 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v27 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v27 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v27;
      if ((void *)v27 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v27 = v10;
      *((_QWORD *)&v27 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v27 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v27 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v21[5] = (char *)this + 216;
  v22 = QMIServiceMsg::create();
  v23 = 25000;
  v24 = 0;
  v25 = 0;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_68_0;
  v21[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = v21;
  v20 = _Block_copy(aBlock);
  v25 = v20;
  if (v22)
  {
    qmi::Client::send();
    v20 = v25;
  }
  if (v20)
    _Block_release(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216925154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP screen status returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::sendSleepStatus(QMIBasebandSettingsDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *__p[2];
  __int128 v27;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v27 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v27)
  {
    while (*((_BYTE *)*v4 + 8) != 17)
    {
      if (++v4 == (const void **)v27)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v27)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 17;
    *(_QWORD *)v7 = &off_24D5CBE00;
    v9 = v27;
    if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1))
    {
      v11 = (uint64_t)(v27 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v27 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v27 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v27 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v27;
      if ((void *)v27 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v27 = v10;
      *((_QWORD *)&v27 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v27 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v27 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v21[5] = (char *)this + 216;
  v22 = QMIServiceMsg::create();
  v23 = 25000;
  v24 = 0;
  v25 = 0;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_71_0;
  v21[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = v21;
  v20 = _Block_copy(aBlock);
  v25 = v20;
  if (v22)
  {
    qmi::Client::send();
    v20 = v25;
  }
  if (v20)
    _Block_release(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216925470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP sleep status returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::sendTetheringStatus(QMIBasebandSettingsDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *__p[2];
  __int128 v27;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v27 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v27)
  {
    while (*((_BYTE *)*v4 + 8) != 18)
    {
      if (++v4 == (const void **)v27)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v27)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 18;
    *(_QWORD *)v7 = &off_24D5CBE50;
    v9 = v27;
    if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1))
    {
      v11 = (uint64_t)(v27 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v27 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v27 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v27 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v27;
      if ((void *)v27 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v27 = v10;
      *((_QWORD *)&v27 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v27 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v27 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v21[5] = (char *)this + 216;
  v22 = QMIServiceMsg::create();
  v23 = 25000;
  v24 = 0;
  v25 = 0;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_74_1;
  v21[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = v21;
  v20 = _Block_copy(aBlock);
  v25 = v20;
  if (v22)
  {
    qmi::Client::send();
    v20 = v25;
  }
  if (v20)
    _Block_release(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21692578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP tethering status for returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t isValidSimSlot;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x24BDAC8D0];
  isValidSimSlot = subscriber::isValidSimSlot();
  if ((isValidSimSlot & 1) == 0)
  {
    v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = subscriber::asString();
      _os_log_error_impl(&dword_216897000, v14, OS_LOG_TYPE_ERROR, "Failed to prepare file push transaction for invalid instance %s", (uint8_t *)buf, 0xCu);
    }
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  if ((capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot((capabilities::ct *)isValidSimSlot) & 1) != 0)
  {
    v26 = a2;
    v9 = v27;
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)v27, a3);
    v30 = 0;
    v10 = operator new(0x38uLL);
    *v10 = &off_24D5CBF78;
    v10[1] = a1;
    *((_DWORD *)v10 + 4) = v26;
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v10 + 3), (uint64_t)v27);
    v30 = v10;
    FilePushTransaction::create();
    v11 = buf[0];
    *a4 = buf[0];
    if (v11)
    {
      v12 = (_QWORD *)operator new();
      v13 = buf[0];
      *v12 = &off_24D5CBF18;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = v13;
    }
    else
    {
      v12 = 0;
    }
    a4[1] = v12;
    buf[0] = 0;
    v19 = v30;
    if (v30 == v29)
    {
      v20 = 4;
      v19 = v29;
    }
    else
    {
      if (!v30)
      {
LABEL_20:
        if (v28 == v27)
        {
          v23 = 4;
        }
        else
        {
          if (!v28)
            return;
          v23 = 5;
          v9 = v28;
        }
        (*(void (**)(_QWORD *))(*v9 + 8 * v23))(v9);
        return;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_20;
  }
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)v31, a3);
  v34 = 0;
  v15 = operator new(0x28uLL);
  *v15 = &off_24D5CBE88;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v31);
  v34 = v15;
  FilePushTransaction::create();
  v16 = buf[0];
  *a4 = buf[0];
  if (v16)
  {
    v17 = (_QWORD *)operator new();
    v18 = buf[0];
    *v17 = &off_24D5CBF18;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = v18;
  }
  else
  {
    v17 = 0;
  }
  a4[1] = v17;
  buf[0] = 0;
  v21 = v34;
  if (v34 == v33)
  {
    v22 = 4;
    v21 = v33;
    goto LABEL_24;
  }
  if (v34)
  {
    v22 = 5;
LABEL_24:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  v24 = v32;
  if (v32 == v31)
  {
    v25 = 4;
    v24 = v31;
  }
  else
  {
    if (!v32)
      return;
    v25 = 5;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v25))(v24);
}

void sub_216925B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  std::unique_ptr<FilePushTransaction>::reset[abi:ne180100]((uint64_t *)(v26 - 80));
  v28 = a26;
  if (a26 == &a23)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a22;
  if (a22 == &a19)
  {
    v31 = 4;
    v30 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v30 + 8 * v31))(v30);
LABEL_11:
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::startFileTransfer_sync(_QWORD **a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, int a7, const void **a8, char a9, int a10, unsigned __int16 a11)
{
  int v17;
  BOOL v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type size;
  NSObject *v29;
  std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int16 v34;
  std::string *v35;
  std::string::size_type v36;
  size_t v37;
  std::string *p_buf;
  size_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  uint64_t v57[2];
  std::string v58;
  std::string v59;
  void *__dst;
  std::__shared_weak_count *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unsigned __int128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::string buf;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v17 = -1;
  switch(a3)
  {
    case 0:
      v18 = a7 == 2;
      v19 = 2;
      v20 = 9;
      goto LABEL_7;
    case 1:
      v17 = 4;
      break;
    case 2:
      v17 = 1;
      break;
    case 5:
      v17 = 0;
      break;
    case 6:
      v18 = a7 == 2;
      v19 = 8;
      v20 = 10;
LABEL_7:
      if (v18)
        v17 = v20;
      else
        v17 = v19;
      break;
    case 7:
      v17 = 3;
      break;
    default:
      break;
  }
  v67 = 0u;
  v68 = 0u;
  v66 = 0u;
  BasebandSettingsDriver::getAllocator_sync<unsigned char>(&__dst, a1[13]);
  v66 = 0uLL;
  v21 = v61;
  *(_QWORD *)&v67 = 0;
  *((_QWORD *)&v67 + 1) = __dst;
  *(_QWORD *)&v68 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    *((_QWORD *)&v68 + 1) = v62;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (v24)
    {
      if (v17)
      {
LABEL_18:
        BasebandSettingsDriver::readSegment();
        std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign((uint64_t)&v66, (uint64_t)&__dst);
        std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&__dst);
        v25 = v64;
        if (v64)
        {
          v26 = (unint64_t *)&v64->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        goto LABEL_77;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (v17)
        goto LABEL_18;
    }
  }
  else
  {
    v68 = __PAIR128__(v62, 0);
    if (v17)
      goto LABEL_18;
  }
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v59 = *(std::string *)a6;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  BasebandSettingsDriver::getAllocator_sync<unsigned char>(&v69, a1[13]);
  if ((*(_BYTE *)(*a4 + *(_QWORD *)(*(_QWORD *)*a4 - 24) + 32) & 2) != 0)
  {
    __dst = 0;
    v61 = 0;
    v31 = v70;
    v62 = 0;
    v63 = v69;
    v64 = v70;
    if (v70)
    {
      v40 = (unint64_t *)&v70->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v65 = v71;
  }
  else
  {
    size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v59.__r_.__value_.__l.__size_;
    if (size >= 0x2B)
    {
      std::string::resize(&v59, 0x2AuLL, 0);
      v29 = *(NSObject **)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[6] + 16))(a1[6], a2);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = &v59;
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = (std::string *)v59.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#N Truncating file path name to: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    __dst = 0;
    v61 = 0;
    v31 = v70;
    v62 = 0;
    v63 = v69;
    v64 = v70;
    if (v70)
    {
      v32 = (unint64_t *)&v70->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v65 = v71;
    std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append((ctu::MallocZone *)&__dst, 0x400uLL);
    memset(&buf, 0, sizeof(buf));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v34 = v59.__r_.__value_.__r.__words[1];
    std::string::push_back(&buf, v34 / 0xAu + 48);
    std::string::push_back(&buf, (v34 % 0xAu) | 0x30);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v59;
    else
      v35 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v36 = v59.__r_.__value_.__l.__size_;
    std::string::append(&buf, (const std::string::value_type *)v35, v36);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      v37 = buf.__r_.__value_.__l.__size_;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    memcpy(__dst, p_buf, v37);
    std::istream::read();
    v39 = *(_QWORD *)(*a4 + 8) + v37;
    if (v39 <= (char *)v61 - (_BYTE *)__dst)
    {
      if (v39 < (char *)v61 - (_BYTE *)__dst)
        v61 = (std::__shared_weak_count *)((char *)__dst + v39);
    }
    else
    {
      std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append((ctu::MallocZone *)&__dst, v39 - ((char *)v61 - (_BYTE *)__dst));
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31)
  {
    v42 = (unint64_t *)&v31->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign((uint64_t)&v66, (uint64_t)&__dst);
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&__dst);
  v44 = v64;
  if (v64)
  {
    v45 = (unint64_t *)&v64->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
LABEL_77:
  if ((_QWORD)v66 == *((_QWORD *)&v66 + 1))
  {
    v47 = *(NSObject **)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[6] + 16))(a1[6], a2);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__dst) = 0;
      _os_log_impl(&dword_216897000, v47, OS_LOG_TYPE_DEFAULT, "#I Failed to read the file data", (uint8_t *)&__dst, 2u);
    }
    BasebandSettingsDriver::reportFileTransferStatus_sync();
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v58 = *(std::string *)a5;
    v48 = (std::__shared_weak_count *)a4[1];
    v57[0] = *a4;
    v57[1] = (uint64_t)v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&v56, a8);
    QMIBasebandSettingsDriver::sendSegmentWithData_sync(a1, a2, v17, (uint64_t)&v58, v57, 0, a11, (uint64_t)&v66, 0, &v56, a9);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v56);
    if (v48)
    {
      v51 = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
  }
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&v66);
  v53 = (std::__shared_weak_count *)v68;
  if ((_QWORD)v68)
  {
    v54 = (unint64_t *)(v68 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_21692629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v41 - 152);
  if (a30 < 0)
    operator delete(__p);
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_216926388()
{
  JUMPOUT(0x216926380);
}

void BasebandSettingsDriver::getAllocator_sync<unsigned char>(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  if (a2)
  {
    v4 = *a2;
    v3 = (std::__shared_weak_count *)a2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = a2[2];
    goto LABEL_6;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  MEMORY[0x2199FDF24](&v14, "BasebandSettingDriver zone", 0);
  v4 = v14;
  v3 = v15;
  if (!v15)
  {
    v7 = v16;
LABEL_6:
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v7;
    return;
  }
  v8 = (unint64_t *)&v15->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v11 = v15;
  v10 = v16;
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void QMIBasebandSettingsDriver::sendSegmentWithData_sync(_QWORD **a1, int a2, int a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t a8, char a9, const void **a10, char a11)
{
  os_log_t *v17;
  NSObject *v18;
  const char *v19;
  const void **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  const __CFData *v37;
  uint64_t (*v38)(uint64_t);
  NSObject *v39;
  const void *Length;
  NSObject *v41;
  const void **v42;
  const void **v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  const void **v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const void **v82;
  uint64_t v85;
  _QWORD v86[6];
  std::string __p;
  uint64_t v88;
  std::__shared_weak_count *v89;
  const void *v90;
  int v91;
  int v92;
  __int16 v93;
  __int16 v94;
  char v95;
  char v96;
  _QWORD **v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void *aBlock;
  _QWORD v102[2];
  _QWORD *(*v103)(uint64_t, char *);
  void *v104;
  const void *v105[2];
  _QWORD v106[2];
  _DWORD *(*v107)(_DWORD *, uint64_t);
  void *v108;
  uint64_t v109;
  int v110;
  __int16 v111;
  __int16 v112;
  char v113;
  __int128 v114;
  __int128 v115;
  _BYTE buf[24];
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v17 = (os_log_t *)(*(uint64_t (**)(_QWORD *))(*a1[6] + 16))(a1[6]);
  v114 = 0u;
  v115 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v114);
  v85 = ((uint64_t (*)(_QWORD **))(*a1)[18])(a1);
  v18 = *v17;
  if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
  {
    v19 = bsp::asString(a3);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a6;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a7;
    LOWORD(v117) = 2048;
    *(_QWORD *)((char *)&v117 + 2) = v85;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I Sending file of type %s, segment number: %d of total segments %d, timeout %lld seconds", buf, 0x22u);
  }
  v106[0] = MEMORY[0x24BDAC760];
  v106[1] = 0x40000000;
  v107 = ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke;
  v108 = &__block_descriptor_tmp_75_1;
  v110 = a3;
  v113 = a11;
  v111 = a6;
  v112 = a7;
  v109 = a8;
  v20 = (const void **)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
  {
    while (*((_BYTE *)*v20 + 8) != 1)
    {
      if (++v20 == (const void **)v115)
        goto LABEL_10;
    }
  }
  if (v20 == (const void **)v115)
  {
LABEL_10:
    v23 = operator new();
    v24 = v23;
    *(_BYTE *)(v23 + 8) = 1;
    *(_QWORD *)v23 = &off_24D5CC068;
    *(_DWORD *)(v23 + 16) = 0;
    v25 = v23 + 16;
    *(_BYTE *)(v23 + 20) = 0;
    *(_DWORD *)(v23 + 22) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 32) = 0;
    v26 = v115;
    if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
    {
      v28 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v24;
      v27 = v32 + 1;
      v35 = (char *)*((_QWORD *)&v114 + 1);
      v34 = (char *)v115;
      if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)*((_QWORD *)&v114 + 1);
      }
      *((_QWORD *)&v114 + 1) = v32;
      *(_QWORD *)&v115 = v27;
      *((_QWORD *)&v115 + 1) = v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v115 = v23;
      v27 = (_QWORD *)(v26 + 8);
    }
    *(_QWORD *)&v115 = v27;
    v22 = (uint64_t)v107(v106, v25);
  }
  else
  {
    if (!v21)
      __cxa_bad_cast();
    v22 = (uint64_t)___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke(v106, (uint64_t)v21 + 16);
  }
  if (a7 - 1 == a6)
  {
    v37 = (const __CFData *)*a10;
    if (*a10)
      v38 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v38 = 0;
    v39 = *v17;
    v22 = os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT);
    if (v38)
    {
      if ((_DWORD)v22)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v39, OS_LOG_TYPE_DEFAULT, "#I Last segment, adding signature", buf, 2u);
        v37 = (const __CFData *)*a10;
      }
      Length = (const void *)CFDataGetLength(v37);
      v41 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v41, OS_LOG_TYPE_DEFAULT, "#I This is the last segment, and we have a signature for the file", buf, 2u);
      }
      v102[0] = MEMORY[0x24BDAC760];
      v102[1] = 1174405120;
      v103 = (_QWORD *(*)(uint64_t, char *))___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_76;
      v104 = &__block_descriptor_tmp_77;
      v42 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(v105, a10);
      v105[1] = Length;
      v43 = (const void **)*((_QWORD *)&v114 + 1);
      v82 = v42;
      if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
      {
        while (*((_BYTE *)*v43 + 8) != 16)
        {
          if (++v43 == (const void **)v115)
            goto LABEL_45;
        }
      }
      if (v43 == (const void **)v115)
      {
LABEL_45:
        v46 = operator new();
        v47 = v46;
        *(_BYTE *)(v46 + 8) = 16;
        *(_QWORD *)(v46 + 16) = 0;
        v45 = (char *)(v46 + 16);
        *(_QWORD *)v46 = &off_24D5CC0B8;
        *(_QWORD *)(v46 + 24) = 0;
        *(_QWORD *)(v46 + 32) = 0;
        v48 = v115;
        if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
        {
          v50 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v51 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
          if (v51 <= v50 + 1)
            v51 = v50 + 1;
          if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v52);
          else
            v53 = 0;
          v54 = (uint64_t *)&v53[8 * v50];
          v55 = &v53[8 * v52];
          *v54 = v47;
          v49 = v54 + 1;
          v57 = (char *)*((_QWORD *)&v114 + 1);
          v56 = (char *)v115;
          if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v54 = v58;
            }
            while (v56 != v57);
            v56 = (char *)*((_QWORD *)&v114 + 1);
          }
          *((_QWORD *)&v114 + 1) = v54;
          *(_QWORD *)&v115 = v49;
          *((_QWORD *)&v115 + 1) = v55;
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_QWORD *)v115 = v46;
          v49 = (_QWORD *)(v48 + 8);
        }
        *(_QWORD *)&v115 = v49;
      }
      else
      {
        if (!v44)
          __cxa_bad_cast();
        v45 = v44 + 16;
      }
      v103((uint64_t)v102, v45);
      v22 = (uint64_t)ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(v82);
    }
    else if ((_DWORD)v22)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v39, OS_LOG_TYPE_DEFAULT, "#I Last segment, but no signature to add", buf, 2u);
    }
  }
  if (capabilities::ct::supportsGemini((capabilities::ct *)v22))
  {
    v59 = (const void **)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
    {
      while (*((_BYTE *)*v59 + 8) != 17)
      {
        if (++v59 == (const void **)v115)
          goto LABEL_71;
      }
    }
    if (v59 == (const void **)v115)
    {
LABEL_71:
      v62 = operator new();
      v63 = v62;
      *(_WORD *)(v62 + 8) = 17;
      *(_QWORD *)v62 = &off_24D5CC108;
      v64 = v115;
      if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
      {
        v66 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
        if ((unint64_t)(v66 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v67 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
        if (v67 <= v66 + 1)
          v67 = v66 + 1;
        if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v68);
        else
          v69 = 0;
        v70 = (uint64_t *)&v69[8 * v66];
        v71 = &v69[8 * v68];
        *v70 = v63;
        v65 = v70 + 1;
        v73 = (char *)*((_QWORD *)&v114 + 1);
        v72 = (char *)v115;
        if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
        {
          do
          {
            v74 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *--v70 = v74;
          }
          while (v72 != v73);
          v72 = (char *)*((_QWORD *)&v114 + 1);
        }
        *((_QWORD *)&v114 + 1) = v70;
        *(_QWORD *)&v115 = v65;
        *((_QWORD *)&v115 + 1) = v71;
        if (v72)
          operator delete(v72);
      }
      else
      {
        *(_QWORD *)v115 = v62;
        v65 = (_QWORD *)(v64 + 8);
      }
      v61 = (_BYTE *)(v63 + 9);
      *(_QWORD *)&v115 = v65;
    }
    else
    {
      if (!v60)
        __cxa_bad_cast();
      v61 = v60 + 9;
    }
    *v61 = subscriber::simSlotAsInstance();
  }
  v97 = a1 + 27;
  v98 = QMIServiceMsg::create();
  v100 = 0;
  aBlock = 0;
  v99 = 1000 * v85;
  v86[0] = MEMORY[0x24BDAC760];
  v86[1] = 1174405120;
  v86[2] = ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_78;
  v86[3] = &__block_descriptor_tmp_79_0;
  v86[4] = a1;
  v86[5] = v17;
  v93 = a6;
  v94 = a7;
  v91 = a2;
  v92 = a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v75 = (std::__shared_weak_count *)a5[1];
  v88 = *a5;
  v89 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(p_shared_owners);
    while (__stxr(v77 + 1, p_shared_owners));
  }
  v95 = a9;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&v90, a10);
  v96 = a11;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  *(_QWORD *)&v117 = &unk_24D5CB668;
  *((_QWORD *)&v117 + 1) = v86;
  v78 = _Block_copy(buf);
  aBlock = v78;
  if (v98)
  {
    qmi::Client::send();
    v78 = aBlock;
  }
  if (v78)
    _Block_release(v78);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v90);
  v79 = v89;
  if (v89)
  {
    v80 = (unint64_t *)&v89->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v114);
}

void sub_216926CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v32 - 192));
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **__copy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef((const void **)(a1 + 32), (const void **)(a2 + 32));
}

const void **__destroy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 32));
}

void ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_78(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  int v27;
  os_log_t *v28;
  uint64_t TlvValue;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  CFTypeRef cf;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string v51;
  _QWORD v52[3];
  CFTypeRef v53;
  _QWORD v54[2];
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, std::string *);
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  __int16 v62;
  std::string v63;
  uint8_t buf[32];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = **(NSObject ***)(a1 + 40);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      v8 = qmi::asString();
      v9 = *(unsigned __int16 *)(a1 + 104);
      v10 = *(unsigned __int16 *)(a1 + 106);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v10;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send file returned error (%s) for segment number: %d out of %d", buf, 0x18u);
    }
    BasebandSettingsDriver::reportFileTransferStatus_sync();
  }
  else
  {
    if (v7)
    {
      v11 = *(unsigned __int16 *)(a1 + 104);
      v12 = *(unsigned __int16 *)(a1 + 106);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v12;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I QMI BSP Send file for segment number: %d out of %d was successful", buf, 0xEu);
    }
    v13 = *(unsigned int *)(a1 + 96);
    v14 = *(_QWORD *)(a2 + 8);
    v52[0] = *(_QWORD *)a2;
    v52[1] = v14;
    v15 = *(_QWORD *)(a2 + 16);
    v52[2] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v52);
    v18 = *(int *)(a1 + 100);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v51 = *(std::string *)(a1 + 48);
    v19 = *(std::__shared_weak_count **)(a1 + 80);
    v49 = *(_QWORD *)(a1 + 72);
    v50 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v22 = *(unsigned __int16 *)(a1 + 104);
    v23 = *(unsigned __int16 *)(a1 + 106);
    v24 = *(_BYTE *)(a1 + 108);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&cf, (const void **)(a1 + 88));
    v25 = *(unsigned __int8 *)(a1 + 109);
    v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 16))(*(_QWORD *)(v5 + 48), v13);
    v27 = v22 + 1;
    if (v22 + 1 == (_DWORD)v23)
    {
      BasebandSettingsDriver::reportFileTransferStatus_sync();
    }
    else
    {
      v28 = (os_log_t *)v26;
      v47 = v25;
      v59 = 0;
      v60 = &v59;
      v61 = 0x2000000000;
      v62 = 0;
      v55[0] = MEMORY[0x24BDAC760];
      v55[1] = 0x40000000;
      v56 = (uint64_t (*)(uint64_t, std::string *))___ZN25QMIBasebandSettingsDriver31handleFileTransferResponse_syncEN10subscriber7SimSlotERKN3bsp8SendFile8ResponseENS2_11QMIFileTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENS8_10shared_ptrINS8_13basic_istreamIcSB_EEEEtthN3ctu2cf11CFSharedRefIK8__CFDataEEb_block_invoke;
      v57 = &unk_24D5CADE0;
      v58 = &v59;
      TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
      v31 = TlvValue;
      if (TlvValue)
      {
        v32 = v30;
        *(_QWORD *)buf = TlvValue;
        LOWORD(v63.__r_.__value_.__l.__data_) = tlv::parseV<bsp::tlv::ExpectedSegmentInfo>((unint64_t *)buf, v30);
        if (*(_QWORD *)buf)
          v56((uint64_t)v55, &v63);
        else
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v52[0]), 64, v31, v32);
      }
      v33 = *((unsigned __int16 *)v60 + 12);
      if (v27 == v33)
      {
        v65 = 0u;
        memset(buf, 0, sizeof(buf));
        BasebandSettingsDriver::readSegment();
        if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
        {
          v35 = *v28;
          if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v63.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v63.__r_.__value_.__r.__words[0]) = v27;
            _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#N Failed to read the segment %d, reporting failure", (uint8_t *)&v63, 8u);
          }
          BasebandSettingsDriver::reportFileTransferStatus_sync();
        }
        else
        {
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v63, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
          else
            v63 = v51;
          v36 = v50;
          v54[0] = v49;
          v54[1] = v50;
          if (v50)
          {
            v37 = (unint64_t *)&v50->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v53 = cf;
          if (cf)
            CFRetain(cf);
          QMIBasebandSettingsDriver::sendSegmentWithData_sync(v5, v13, v18, &v63, v54, (unsigned __int16)v27, v23, buf, v24, &v53, v47 != 0);
          ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v53);
          if (v36)
          {
            v39 = (unint64_t *)&v36->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
        }
        std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)buf);
        v41 = (std::__shared_weak_count *)v65;
        if ((_QWORD)v65)
        {
          v42 = (unint64_t *)(v65 + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
        v34 = *v28;
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v27;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v33;
          _os_log_impl(&dword_216897000, v34, OS_LOG_TYPE_DEFAULT, "#N Next segment numbers are not matching: %d and %d", buf, 0xEu);
        }
        BasebandSettingsDriver::reportFileTransferStatus_sync();
      }
      _Block_object_dispose(&v59, 8);
    }
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&cf);
    v44 = v50;
    if (v50)
    {
      v45 = (unint64_t *)&v50->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v52);
  }
}

void sub_2169274DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

const void **__copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c68_ZTSNSt3__110shared_ptrINS_13basic_istreamIcNS_11char_traitsIcEEEEEE88c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef((const void **)(a1 + 88), (const void **)(a2 + 88));
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c68_ZTSNSt3__110shared_ptrINS_13basic_istreamIcNS_11char_traitsIcEEEEEE88c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 72;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 88));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t ___ZN25QMIBasebandSettingsDriver31handleFileTransferResponse_syncEN10subscriber7SimSlotERKN3bsp8SendFile8ResponseENS2_11QMIFileTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENS8_10shared_ptrINS8_13basic_istreamIcSB_EEEEtthN3ctu2cf11CFSharedRefIK8__CFDataEEb_block_invoke(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver29handleFileTransferStatus_syncERKN3bsp18FileTransferStatus10IndicationE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(unsigned int *)(a1 + 40));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = bsp::asString(*(_DWORD *)a2);
    v5 = bsp::asString(*(_DWORD *)(a2 + 4));
    v7 = 136315394;
    v8 = v4;
    v9 = 2080;
    v10 = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received indication from baseband file: %s result %s", (uint8_t *)&v7, 0x16u);
  }
  return BasebandSettingsDriver::reportFileTransferStatus_sync();
}

void QMIBasebandSettingsDriver::setBatterySaverMode(QMIBasebandSettingsDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  __int128 v35;
  _QWORD v36[5];
  std::__shared_weak_count *v37;
  char *v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v35)
  {
    while (*((_BYTE *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v35)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v35)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5CC158;
    v9 = v35;
    if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
    {
      v11 = (uint64_t)(v35 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v35 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v35 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v35 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v35;
      if ((void *)v35 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v35 = v10;
      *((_QWORD *)&v35 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v35 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v35 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v20 = qmi::ClientRouter::get();
  v21 = operator new();
  *(_QWORD *)v21 = v20;
  *(_QWORD *)(v21 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v21 + 16) = 25000;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  v33 = v21;
  v22 = operator new(0x28uLL);
  v22[1] = 0;
  v23 = v22 + 1;
  v22[2] = 0;
  *v22 = &off_24D5CC1C0;
  v22[3] = this;
  *((_BYTE *)v22 + 32) = a2;
  v38 = (char *)(v22 + 3);
  v39 = (std::__shared_weak_count *)v22;
  v24 = MEMORY[0x24BDAC760];
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 1174405120;
  v36[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EEOS1_OT__block_invoke;
  v36[3] = &__block_descriptor_tmp_126;
  v36[4] = v22 + 3;
  v37 = (std::__shared_weak_count *)v22;
  do
    v25 = __ldxr(v23);
  while (__stxr(v25 + 1, v23));
  aBlock[0] = v24;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = v36;
  *(_QWORD *)(v21 + 32) = _Block_copy(aBlock);
  v26 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v33;
  v33 = 0;
  if (v32)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v33, v32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216927ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v4, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t QMIBasebandSettingsDriver::getFileSegmentSize(QMIBasebandSettingsDriver *this)
{
  return 1024;
}

void QMIBasebandSettingsDriver::sendSmartDataMode(uint64_t a1, int a2, char a3)
{
  const void **v6;
  NSObject *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v43)(uint64_t, uint64_t);
  void *v44;
  char *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if ((subscriber::isValidSimSlot() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v6 = (const void **)__p[1];
    if (__p[1] != (void *)v38)
    {
      while (*((_BYTE *)*v6 + 8) != 16)
      {
        if (++v6 == (const void **)v38)
          goto LABEL_11;
      }
    }
    if (v6 == (const void **)v38)
    {
LABEL_11:
      v10 = operator new();
      v11 = v10;
      *(_WORD *)(v10 + 8) = 16;
      *(_QWORD *)v10 = &off_24D5CC228;
      v12 = v38;
      if ((unint64_t)v38 >= *((_QWORD *)&v38 + 1))
      {
        v14 = (uint64_t)(v38 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v38 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v38 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v38 + 8, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v13 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v38;
        if ((void *)v38 != __p[1])
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v38 = v13;
        *((_QWORD *)&v38 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v38 = v10;
        v13 = (_QWORD *)(v12 + 8);
      }
      v9 = (_BYTE *)(v11 + 9);
      *(_QWORD *)&v38 = v13;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = v8 + 9;
    }
    *v9 = a3;
    v23 = qmi::ClientRouter::get();
    v24 = operator new();
    *(_QWORD *)v24 = v23;
    *(_QWORD *)(v24 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v24 + 16) = 25000;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    v36 = v24;
    v25 = operator new(0x28uLL);
    v25[1] = 0;
    v26 = v25 + 1;
    v25[2] = 0;
    *v25 = &off_24D5CC290;
    v25[3] = a1;
    *((_DWORD *)v25 + 8) = a2;
    v39 = (char *)(v25 + 3);
    v40 = (std::__shared_weak_count *)v25;
    v27 = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 1174405120;
    v43 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EEOS1_OT__block_invoke;
    v44 = &__block_descriptor_tmp_127_0;
    v45 = (char *)(v25 + 3);
    v46 = (std::__shared_weak_count *)v25;
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
    aBlock[0] = v27;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
    aBlock[3] = &unk_24D5CB668;
    aBlock[4] = &buf;
    *(_QWORD *)(v24 + 32) = _Block_copy(aBlock);
    v29 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v40;
    if (v40)
    {
      v33 = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v36;
    v36 = 0;
    if (v35)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v36, v35);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = subscriber::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Failed to send smart data mode for invalid instance %s", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_216927F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v4, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::sendActiveSubs(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned __int8 v12;
  const void **v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  uint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  void *__p[2];
  __int128 v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  void *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v44 = 0;
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      v7 = *((_DWORD *)v5 + 7);
      if (v7 == 1)
        break;
      if (v7 == 2)
      {
        v8 = 2;
LABEL_6:
        nas::operator|=(&v44, v8);
      }
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
      if (v10 == v4)
      {
        v12 = v44;
        goto LABEL_15;
      }
    }
    v8 = 1;
    goto LABEL_6;
  }
  v12 = 0;
LABEL_15:
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v46)
  {
    while (*((_BYTE *)*v13 + 8) != 20)
    {
      if (++v13 == (const void **)v46)
        goto LABEL_22;
    }
  }
  if (v13 == (const void **)v46)
  {
LABEL_22:
    v16 = operator new();
    v17 = v16;
    *(_BYTE *)(v16 + 8) = 20;
    *(_QWORD *)v16 = &off_24D5CC2F8;
    *(_QWORD *)(v16 + 9) = 0;
    v15 = (unsigned __int8 *)(v16 + 9);
    v18 = v46;
    if ((unint64_t)v46 >= *((_QWORD *)&v46 + 1))
    {
      v20 = (uint64_t)(v46 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v21 = (uint64_t)(*((_QWORD *)&v46 + 1) - (unint64_t)__p[1]) >> 2;
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      if (*((_QWORD *)&v46 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v46 + 8, v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v20];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v19 = v24 + 1;
      v27 = (char *)__p[1];
      v26 = (char *)v46;
      if ((void *)v46 != __p[1])
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = (char *)__p[1];
      }
      __p[1] = v24;
      *(_QWORD *)&v46 = v19;
      *((_QWORD *)&v46 + 1) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v46 = v16;
      v19 = (_QWORD *)(v18 + 8);
    }
    *(_QWORD *)&v46 = v19;
  }
  else
  {
    if (!v14)
      __cxa_bad_cast();
    v15 = (unsigned __int8 *)(v14 + 9);
  }
  *v15 = v12;
  v29 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v44;
    _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I Sending StandbyPreference activeSubs:0x%X", buf, 8u);
  }
  v30 = qmi::ClientRouter::get();
  v31 = operator new();
  *(_QWORD *)v31 = v30;
  *(_QWORD *)(v31 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v31 + 16) = 25000;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  v43 = v31;
  v32 = (std::__shared_weak_count *)operator new(0x20uLL);
  v32->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC360;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v47 = &v32[1].__vftable;
  v48 = v32;
  v34 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v51 = 1174405120;
  v52 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3__0EEOS1_OT__block_invoke;
  v53 = &__block_descriptor_tmp_128_0;
  v54 = &v32[1].__vftable;
  v55 = v32;
  do
    v35 = __ldxr(p_shared_owners);
  while (__stxr(v35 + 1, p_shared_owners));
  aBlock[0] = v34;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas17StandbyPreference8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CC3A8;
  aBlock[4] = buf;
  *(_QWORD *)(v31 + 32) = _Block_copy(aBlock);
  v36 = v55;
  if (v55)
  {
    v37 = (unint64_t *)&v55->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v48;
  if (v48)
  {
    v40 = (unint64_t *)&v48->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v43;
  v43 = 0;
  if (v42)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v43, v42);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169283B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v7 = v5;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a4)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v6, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::sendInMetroStatus(QMIBasebandSettingsDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v42)(uint64_t, uint64_t);
  void *v43;
  char *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v37)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v37)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v37)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_24D5CC3F0;
    v9 = v37;
    if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
    {
      v11 = (uint64_t)(v37 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v37 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v37 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v37 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v37;
      if ((void *)v37 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v37 = v10;
      *((_QWORD *)&v37 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v37 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v37 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v20 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = CSIBOOLAsString();
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_216897000, v20, OS_LOG_TYPE_DEFAULT, "#I Sending InMetroStatus: %s", (uint8_t *)&buf, 0xCu);
  }
  v22 = qmi::ClientRouter::get();
  v23 = operator new();
  *(_QWORD *)v23 = v22;
  *(_QWORD *)(v23 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v23 + 16) = 25000;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v35 = v23;
  v24 = operator new(0x28uLL);
  v24[1] = 0;
  v25 = v24 + 1;
  v24[2] = 0;
  *v24 = &off_24D5CC458;
  v24[3] = this;
  *((_BYTE *)v24 + 32) = a2;
  v38 = (char *)(v24 + 3);
  v39 = (std::__shared_weak_count *)v24;
  v26 = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 1174405120;
  v42 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EEOS1_OT__block_invoke;
  v43 = &__block_descriptor_tmp_130_0;
  v44 = (char *)(v24 + 3);
  v45 = (std::__shared_weak_count *)v24;
  do
    v27 = __ldxr(v25);
  while (__stxr(v27 + 1, v25));
  aBlock[0] = v26;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = &buf;
  *(_QWORD *)(v23 + 32) = _Block_copy(aBlock);
  v28 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v39;
  if (v39)
  {
    v32 = (unint64_t *)&v39->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v35;
  v35 = 0;
  if (v34)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v35, v34);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169287E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D5CAE48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5CAE48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t *v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  std::__shared_weak_count *v44;
  uint64_t aBlock;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void *v48;
  __int128 *p_buf;
  __int128 buf;
  void (*v51)(uint64_t, uint64_t);
  void *v52;
  char *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (*a2 - 1 >= 3)
    v5 = 0;
  else
    v5 = v3;
  v6 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v5);
  v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 16);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s QMI client has started", (uint8_t *)&buf, 0xCu);
  }
  v9 = subscriber::simSlotAsInstance();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) <= (unint64_t)v9)
  {
    v23 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      v24 = qmi::asString();
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_error_impl(&dword_216897000, v23, OS_LOG_TYPE_ERROR, "Failed to handle QMI client start for subtype %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::set(*(_QWORD **)(a1 + 32), v9, 1);
    QMIBasebandSettingsDriver::handleClientStarted_sync(v4);
    v10 = *(unsigned __int8 *)(a1 + 8);
    if (v10 == 2)
    {
      v41 = 0u;
      v42 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
      v25 = (_DWORD *)qmi::MutableMessageBase::getTLV<dms::tlv::SubscriptionType>(&v41, 1);
      if (v3 == 2)
        v26 = 2;
      else
        v26 = 1;
      *v25 = v26;
      v27 = qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<dms::BindSubscription::Request>((uint64_t)&v39, v3, v27);
      v28 = operator new(0x28uLL);
      v28[1] = 0;
      v29 = v28 + 1;
      v28[2] = 0;
      *v28 = &off_24D5CB318;
      v28[3] = v4;
      *((_DWORD *)v28 + 8) = v3;
      v43 = (char *)(v28 + 3);
      v44 = (std::__shared_weak_count *)v28;
      v30 = v40;
      v31 = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 1174405120;
      v51 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
      v52 = &__block_descriptor_tmp_112;
      v53 = (char *)(v28 + 3);
      v54 = (std::__shared_weak_count *)v28;
      do
        v32 = __ldxr(v29);
      while (__stxr(v32 + 1, v29));
      aBlock = v31;
      v46 = 0x40000000;
      v47 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v48 = &unk_24D5CB360;
      p_buf = &buf;
      *(_QWORD *)(v30 + 32) = _Block_copy(&aBlock);
      v33 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v20 = v44;
      if (!v44)
        goto LABEL_37;
      v36 = (unint64_t *)&v44->__shared_owners_;
      do
        v22 = __ldaxr(v36);
      while (__stlxr(v22 - 1, v36));
      goto LABEL_35;
    }
    if (v10 == 3)
    {
      v41 = 0u;
      v42 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
      *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(&v41, 1) = v3 == 2;
      v11 = qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>((uint64_t)&v39, v3, v11);
      v12 = operator new(0x28uLL);
      v12[1] = 0;
      v13 = v12 + 1;
      v12[2] = 0;
      *v12 = &off_24D5CB220;
      v12[3] = v4;
      *((_DWORD *)v12 + 8) = v3;
      v43 = (char *)(v12 + 3);
      v44 = (std::__shared_weak_count *)v12;
      v14 = v40;
      v15 = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 1174405120;
      v51 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
      v52 = &__block_descriptor_tmp_110_0;
      v53 = (char *)(v12 + 3);
      v54 = (std::__shared_weak_count *)v12;
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
      aBlock = v15;
      v46 = 0x40000000;
      v47 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v48 = &unk_24D5CB268;
      p_buf = &buf;
      *(_QWORD *)(v14 + 32) = _Block_copy(&aBlock);
      v17 = v54;
      if (v54)
      {
        v18 = (unint64_t *)&v54->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v44;
      if (!v44)
        goto LABEL_37;
      v21 = (unint64_t *)&v44->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_35:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_37:
      v37 = v40;
      v40 = 0;
      if (v37)
        std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v40, v37);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v41);
      return;
    }
    v38 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v10;
      _os_log_fault_impl(&dword_216897000, v38, OS_LOG_TYPE_FAULT, "Unhandled QMI service type (%d)", (uint8_t *)&buf, 8u);
    }
  }
}

void sub_216928DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)va, v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target_type()
{
}

_QWORD *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::set(_QWORD *a1, unint64_t a2, int a3)
{
  if (a1[3] <= a2)
    __assert_rtn("set", "dynamic_bitset.hpp", 1035, "pos < m_num_bits");
  if (a3)
    *(_QWORD *)(*a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  else
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(a1, a2);
  return a1;
}

_QWORD *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(_QWORD *result, unint64_t a2)
{
  if (result[3] <= a2)
    __assert_rtn("reset", "dynamic_bitset.hpp", 1065, "pos < m_num_bits");
  *(_QWORD *)(*result + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D5CAEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D5CAEC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::operator()(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if ((*a2 - 1) >= 3)
    v4 = 0;
  else
    v4 = *a2;
  v5 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v4);
  v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[2];
    v12 = 136315138;
    v13 = v7;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s QMI client has stopped", (uint8_t *)&v12, 0xCu);
  }
  v8 = subscriber::simSlotAsInstance();
  v9 = (_QWORD *)a1[3];
  if (v9[3] <= (unint64_t)v8)
  {
    v10 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      v11 = qmi::asString();
      v12 = 136315138;
      v13 = v11;
      _os_log_error_impl(&dword_216897000, v10, OS_LOG_TYPE_ERROR, "Failed to handle QMI client stop for subtype %s", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(v9, v8);
    QMIBasebandSettingsDriver::handleClientStopped_sync(v3);
  }
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign(uint64_t a1, uint64_t a2)
{
  ctu::MallocZone *v4;
  uint64_t result;
  char *v6;
  char *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;
  _BYTE *v21;
  char v22;

  v4 = (ctu::MallocZone *)(a1 + 24);
  result = ctu::MallocZone::operator==();
  if ((result & 1) != 0)
  {
    result = std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    v7 = *(char **)a2;
    v6 = *(char **)(a2 + 8);
    v8 = (unint64_t)&v6[-*(_QWORD *)a2];
    v9 = *(_BYTE **)a1;
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 >= v8)
    {
      v14 = *(_BYTE **)(a1 + 8);
      v15 = v14 - v9;
      if (v14 - v9 >= v8)
      {
        if (v7 == v6)
        {
          v21 = *(_BYTE **)a1;
        }
        else
        {
          v21 = (_BYTE *)(&v9[(_QWORD)v6] - v7);
          do
          {
            v22 = *v7++;
            *v9++ = v22;
          }
          while (v7 != v6);
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else
      {
        v16 = &v7[v15];
        if (v14 != v9)
        {
          do
          {
            v17 = *v7++;
            *v9++ = v17;
            --v15;
          }
          while (v15);
          v9 = *(_BYTE **)(a1 + 8);
        }
        v18 = v9;
        if (v16 != v6)
        {
          v18 = v9;
          v19 = v9;
          do
          {
            v20 = *v16++;
            *v19++ = v20;
            ++v18;
          }
          while (v16 != v6);
        }
        *(_QWORD *)(a1 + 8) = v18;
      }
    }
    else
    {
      std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(a1);
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_29;
      v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
      v11 = 2 * v10;
      if (2 * v10 <= v8)
        v11 = v8;
      v12 = v10 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v11;
      if (v12 < 0)
LABEL_29:
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      result = ctu::MallocZone::malloc(v4);
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = result;
      *(_QWORD *)(a1 + 16) = result + v12;
      while (v7 != v6)
      {
        v13 = *v7++;
        *(_BYTE *)result++ = v13;
      }
      *(_QWORD *)(a1 + 8) = result;
    }
  }
  return result;
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(uint64_t result)
{
  void *v1;
  _QWORD *v2;

  v1 = *(void **)result;
  if (*(_QWORD *)result)
  {
    v2 = (_QWORD *)result;
    *(_QWORD *)(result + 8) = v1;
    result = ctu::MallocZone::free((ctu::MallocZone *)(result + 24), v1);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__destroy_vector::operator()[abi:ne180100](uint64_t result)
{
  void *v1;

  v1 = *(void **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)(result + 8) = v1;
    return ctu::MallocZone::free((ctu::MallocZone *)(result + 24), v1);
  }
  return result;
}

void std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append(ctu::MallocZone *this, size_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;

  v6 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 1);
  v5 = *((_QWORD *)v6 + 1);
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v12 = &v4[a2];
      bzero(v4, a2);
      v4 = v12;
    }
    *((_QWORD *)this + 1) = v4;
  }
  else
  {
    v7 = &v4[-*(_QWORD *)this];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)this;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = ctu::MallocZone::malloc((ctu::MallocZone *)((char *)this + 24));
    else
      v11 = 0;
    v13 = &v7[v11];
    v14 = v11 + v10;
    v15 = &v13[a2];
    bzero(v13, a2);
    v17 = *(char **)this;
    v16 = (char *)*((_QWORD *)this + 1);
    if (v16 != *(char **)this)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v15;
    *((_QWORD *)this + 2) = v14;
    if (v16)
      ctu::MallocZone::free((ctu::MallocZone *)((char *)this + 24), v16);
  }
}

uint64_t *std::shared_ptr<QMIBasebandSettingsDriver>::shared_ptr[abi:ne180100]<QMIBasebandSettingsDriver,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CAF48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169294E8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1}::operator() const(QMIBasebandSettingsDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216929508(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1}::operator() const(QMIBasebandSettingsDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1}::operator() const(QMIBasebandSettingsDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long((_QWORD *)a1, a2, a3);
  return a1;
}

void sub_2169295D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1[1] != *a1)
    __assert_rtn("init_from_unsigned_long", "dynamic_bitset.hpp", 472, "m_bits.size() == 0");
  if ((a2 & 0x3F) != 0)
    v6 = (a2 >> 6) + 1;
  else
    v6 = a2 >> 6;
  std::vector<unsigned long>::resize((uint64_t)a1, v6);
  a1[3] = a2;
  v7 = -1;
  if (a2 < 0x40)
    v7 = ~(-1 << a2);
  v8 = v7 & a3;
  if (v8)
    *(_QWORD *)*a1 = v8;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

BOOL boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;

  v1 = a1[3];
  v2 = *a1;
  v3 = a1[1];
  v4 = v1 & 0x3F;
  if ((v1 & 0x3F) != 0)
  {
    if (v3 == v2)
      __assert_rtn("m_highest_block", "dynamic_bitset.hpp", 2025, "size() > 0 && num_blocks() > 0");
    if (*(_QWORD *)(v3 - 8) >> v4)
      return 0;
  }
  v5 = (v3 - v2) >> 3;
  if (v5 > (a1[2] - v2) >> 3)
    return 0;
  v7 = v1 >> 6;
  if (v4)
    ++v7;
  return v5 == v7;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(a1[1]);
    v2 = (_QWORD *)a1[8];
    if (v2 == a1 + 5)
    {
      v3 = 4;
      v2 = a1 + 5;
    }
    else
    {
      if (!v2)
      {
LABEL_8:
        operator delete(a1);
        return;
      }
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
    goto LABEL_8;
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp11GetCDRXInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216929964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18FileTransferStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216929A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3pdc14ActivateConfig10IndicationEEEvtU13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<pdc::ActivateConfig::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_216929AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CB020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CB020;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *TlvValue;
  _QWORD *v17;
  char v18;
  char v19;
  char v20;
  _QWORD *v21;
  uint8_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  _BYTE v53[24];
  _QWORD v54[3];
  uint64_t *v55;
  _QWORD *v56[2];
  int v57;
  _BYTE v58[32];
  _OWORD v59[2];
  uint8_t buf[64];
  char v61;
  char v62;
  _BYTE v63[31];
  char v64;
  _BYTE v65[33];
  _BYTE v66[31];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  cast_message_type<nas::SystemSelectionPreference::Indication const&>::cast(a3, (qmi::MessageBase *)v53);
  v5 = v4 - 1;
  if (v4 - 1 >= 3)
    v6 = 0;
  else
    v6 = v4;
  v52 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v52 + 48) + 16))(*(_QWORD *)(v52 + 48), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Received system selection preference update from baseband", buf, 2u);
  }
  *(_QWORD *)buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v53);
  *(_QWORD *)&buf[8] = v8;
  if (*(_QWORD *)buf)
  {
    v9 = tlv::parseV<nas::tlv::BandPref>((unint64_t *)buf, v8);
    v10 = *(_QWORD *)buf != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  if (v10)
    v11 = v9;
  else
    v11 = 0;
  *(_QWORD *)buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v53);
  *(_QWORD *)&buf[8] = v12;
  if (*(_QWORD *)buf)
  {
    v13 = tlv::parseV<nas::tlv::TDSCDMABandPref>((unint64_t *)buf, v12);
    v14 = *(_QWORD *)buf != 0;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  if (v14)
    v15 = v13;
  else
    v15 = 0;
  *(_QWORD *)v63 = 0;
  *(_QWORD *)&v63[8] = 0;
  *(_QWORD *)&v63[23] = 0;
  *(_QWORD *)&v63[16] = 0;
  v61 = 0;
  memset(buf, 0, sizeof(buf));
  TlvValue = (uint64_t *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v53);
  v55 = TlvValue;
  v56[0] = v17;
  if (TlvValue
    && (tlv::parseV<nas::tlv::LTEBandPrefExtended>((unint64_t *)&v55, (int)v17, v65),
        v18 = v65[0],
        *(_OWORD *)v58 = *(_OWORD *)&v65[1],
        *(_OWORD *)&v58[15] = *(_OWORD *)&v65[16],
        v55))
  {
    v19 = 0;
    *(_OWORD *)v63 = *(_OWORD *)v58;
    *(_OWORD *)&v63[15] = *(_OWORD *)&v58[15];
    v20 = 1;
  }
  else
  {
    v18 = 0;
    v20 = 0;
    v19 = 1;
  }
  v62 = v18;
  v64 = v20;
  if (capabilities::ct::supports5G((capabilities::ct *)TlvValue))
  {
    v55 = (uint64_t *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v53);
    v56[0] = v21;
    if (v55
      && (tlv::parseV<nas::tlv::NRBandPref>((unint64_t *)&v55, (int)v21, v65),
          v22 = v65[0],
          *(_OWORD *)v58 = *(_OWORD *)&v65[1],
          *(_OWORD *)&v58[16] = *(_OWORD *)&v65[17],
          v59[0] = *(_OWORD *)v66,
          *(_OWORD *)((char *)v59 + 15) = *(_OWORD *)&v66[15],
          v55))
    {
      *(_OWORD *)&buf[1] = *(_OWORD *)v58;
      *(_OWORD *)&buf[17] = *(_OWORD *)&v58[16];
      *(_OWORD *)&buf[33] = v59[0];
      *(_OWORD *)&buf[48] = *(_OWORD *)((char *)v59 + 15);
      v23 = 1;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    buf[0] = v22;
    v61 = v23;
  }
  else
  {
    v23 = 0;
  }
  *(_QWORD *)v65 = &off_24D5CB6C0;
  *(_QWORD *)&v65[8] = 0;
  *(_QWORD *)&v65[16] = 0;
  *(_QWORD *)&v65[24] = v65;
  *(_QWORD *)v58 = &off_24D5CB750;
  *(_QWORD *)&v58[8] = v65;
  *(_QWORD *)&v58[16] = 0;
  *(_QWORD *)&v58[24] = v58;
  v56[0] = 0;
  v56[1] = 0;
  v55 = (uint64_t *)v56;
  if (v10)
  {
    if (v9)
    {
      v24 = 0;
      v25 = 0;
      v54[0] = 0;
      do
      {
        if (((1 << v24) & v11) != 0)
          v25 |= nas::asBand(1 << v24);
        ++v24;
      }
      while (v24 != 64);
      v54[0] = v25;
      v57 = 5;
      if (!*(_QWORD *)&v58[24])
        goto LABEL_92;
      (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
      v26 = 0;
      v27 = 0;
      do
      {
        if (((1 << v26) & v11) != 0)
          v27 |= nas::asBand(1 << v26);
        ++v26;
      }
      while (v26 != 64);
      v54[0] = v27;
      v57 = 0;
      if (!*(_QWORD *)&v58[24])
        goto LABEL_92;
      (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
      v28 = 0;
      v29 = 0;
      do
      {
        if (((1 << v28) & v11) != 0)
          v29 |= nas::asBand(1 << v28);
        ++v28;
      }
      while (v28 != 64);
      v54[0] = v29;
      v57 = 2;
      if (!*(_QWORD *)&v58[24])
LABEL_92:
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
    }
    else
    {
      LODWORD(v54[0]) = 5;
      std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(&v55, 5, v54)[5] = 0;
      LODWORD(v54[0]) = 0;
      if (!*(_QWORD *)&v65[24])
        goto LABEL_93;
      (*(void (**)(_QWORD, uint64_t **, _QWORD *))(**(_QWORD **)&v65[24] + 48))(*(_QWORD *)&v65[24], &v55, v54);
      LODWORD(v54[0]) = 2;
      if (!*(_QWORD *)&v65[24])
        goto LABEL_93;
      (*(void (**)(_QWORD, uint64_t **, _QWORD *))(**(_QWORD **)&v65[24] + 48))(*(_QWORD *)&v65[24], &v55, v54);
    }
  }
  if ((v19 & 1) == 0)
  {
    v51 = v14;
    v30 = v23;
    v31 = v13;
    v32 = v4;
    v33 = v4 - 1;
    v34 = 0;
    v54[0] = 0;
    v35 = 1;
    do
    {
      v36 = 0;
      v37 = v63[v34 - 1];
      do
      {
        if (((v37 >> v36) & 1) != 0)
          v54[0] |= ctConvertLteBandToMask();
        ++v36;
      }
      while (v36 != 8);
      ++v34;
      v35 += 8;
    }
    while (v34 != 32);
    v57 = 7;
    if (!*(_QWORD *)&v58[24])
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
    v5 = v33;
    v4 = v32;
    v13 = v31;
    v23 = v30;
    v14 = v51;
  }
  if (v14)
  {
    if (v13)
    {
      v38 = 0;
      v39 = 0;
      v54[0] = 0;
      do
      {
        if (((1 << v38) & v15) != 0)
          v39 |= nas::asBand(1 << v38);
        ++v38;
      }
      while (v38 != 64);
      v54[0] = v39;
      v57 = 9;
      if (!*(_QWORD *)&v58[24])
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
      goto LABEL_69;
    }
    LODWORD(v54[0]) = 9;
    if (*(_QWORD *)&v65[24])
    {
      (*(void (**)(_QWORD, uint64_t **, _QWORD *))(**(_QWORD **)&v65[24] + 48))(*(_QWORD *)&v65[24], &v55, v54);
      goto LABEL_69;
    }
LABEL_93:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_69:
  if (v23)
  {
    v40 = 0;
    v41 = 0;
    v54[0] = 0;
    v42 = 1;
    do
    {
      v43 = 0;
      v44 = buf[v41];
      do
      {
        if (((v44 >> v43) & 1) != 0)
        {
          v40 |= ctConvertNrBandToMask();
          v54[0] = v40;
        }
        ++v43;
      }
      while (v43 != 8);
      ++v41;
      v42 += 8;
    }
    while (v41 != 64);
    v57 = 10;
    if (!*(_QWORD *)&v58[24])
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD, uint64_t **, _QWORD *, int *))(**(_QWORD **)&v58[24] + 48))(*(_QWORD *)&v58[24], &v55, v54, &v57);
  }
  v45 = *(_QWORD *)(v52 + 72);
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v54, &v55);
  if (v5 >= 3)
    v46 = 0;
  else
    v46 = v4;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v45 + 48))(v45, v46, v54);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy((_QWORD *)v54[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v56[0]);
  v47 = *(_QWORD **)&v58[24];
  if (*(_BYTE **)&v58[24] == v58)
  {
    v48 = 4;
    v47 = v58;
  }
  else
  {
    if (!*(_QWORD *)&v58[24])
      goto LABEL_86;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_86:
  v49 = *(_QWORD **)&v65[24];
  if (*(_BYTE **)&v65[24] == v65)
  {
    v50 = 4;
    v49 = v65;
    goto LABEL_90;
  }
  if (*(_QWORD *)&v65[24])
  {
    v50 = 5;
LABEL_90:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v53);
}

void sub_21692A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a18);
  v26 = a24;
  if (a24 == &a21)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = *(_QWORD **)(v24 - 144);
  if (v28 == (_QWORD *)(v24 - 168))
  {
    v29 = 4;
    v28 = (_QWORD *)(v24 - 168);
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

void cast_message_type<nas::SystemSelectionPreference::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_21692A3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21692A40C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21692A44C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CB0A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CB0A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned __int8 v15;
  BOOL v16;
  int v17;
  void *v18;
  unsigned __int8 active;
  BOOL v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  _BYTE v25[24];
  void *__p;
  void *v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v27 = 0;
    v28[0] = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v25, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v25);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v25);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 16))(*(_QWORD *)(v6 + 48), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Received standby preference update from baseband", (uint8_t *)&__p, 2u);
  }
  __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  v27 = v9;
  if (__p)
  {
    v10 = tlv::parseV<nas::tlv::StandbyPreferenceReport>((_BYTE **)&__p, (int)v9);
    v11 = __p == 0;
    if (__p)
    {
      v12 = v10;
      v13 = HIBYTE(v10);
      goto LABEL_18;
    }
  }
  else
  {
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
LABEL_18:
  __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  v27 = v14;
  if (__p)
  {
    v15 = tlv::parseV<nas::tlv::DefaultVoiceSubs>((unint64_t *)&__p, (int)v14);
    v16 = __p == 0;
    v17 = v15;
  }
  else
  {
    v17 = 0;
    v16 = 1;
  }
  __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  v27 = v18;
  if (__p)
  {
    active = tlv::parseV<nas::tlv::ActiveSubs>((unint64_t *)&__p, (int)v18);
    v20 = __p == 0;
    v21 = active;
    if (v11)
      goto LABEL_27;
  }
  else
  {
    v21 = 0;
    v20 = 1;
    if (v11)
      goto LABEL_27;
  }
  v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 67109888;
    HIDWORD(__p) = v12;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = BYTE1(v12);
    HIWORD(v27) = 1024;
    LODWORD(v28[0]) = BYTE2(v12);
    WORD2(v28[0]) = 1024;
    *(_DWORD *)((char *)v28 + 6) = v13;
    _os_log_impl(&dword_216897000, v22, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> fStandbyPref:0x%x, fPrioritySubs:0x%x, fActiveSubsMask:0x%x, fDefaultDataSubs:0x%x", (uint8_t *)&__p, 0x1Au);
  }
LABEL_27:
  if (!v16)
  {
    v23 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v17;
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> defVoiceSub:0x%x", (uint8_t *)&__p, 8u);
    }
  }
  if (!v20)
  {
    v24 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v21;
      _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> activeSubs:0x%x", (uint8_t *)&__p, 8u);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v25);
}

void sub_21692A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CB120;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CB120;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint8_t *v17;
  void *v18;
  uint8_t *v19;
  void *v20;
  os_log_t *v21;
  os_log_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  _BYTE v48[24];
  void *__p[2];
  __int128 v50;
  void *v51[2];
  __int128 v52;
  _QWORD **v53;
  _QWORD *v54[2];
  int v55;
  _OWORD v56[2];
  uint64_t (**TlvValue)();
  uint8_t *v58;
  uint64_t v59;
  unint64_t *p_TlvValue;
  uint8_t buf[8];
  void *v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    *(_QWORD *)buf = 0;
    v62 = 0;
    v63 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v48, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v48);
    if (*(_QWORD *)buf)
    {
      v62 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v48);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 16))(*(_QWORD *)(v6 + 48), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Received extended band capability update from baseband", buf, 2u);
  }
  *(_QWORD *)buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
  v62 = v9;
  if (*(_QWORD *)buf)
  {
    v10 = tlv::parseV<dms::tlv::BandCapability>((unint64_t *)buf, (int)v9);
    v11 = *(_QWORD *)buf != 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if (v11)
    v12 = v10;
  else
    v12 = 0;
  *(_QWORD *)buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
  v62 = v13;
  if (*(_QWORD *)buf)
  {
    v14 = tlv::parseV<dms::tlv::TDSCDMABandCapability>((unint64_t *)buf, (int)v13);
    v15 = *(_QWORD *)buf != 0;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  TlvValue = (uint64_t (**)())qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
  v58 = v17;
  if (!TlvValue)
    goto LABEL_31;
  tlv::parseV<dms::tlv::LTEBandCapabilityExtended>((unint64_t *)&TlvValue, (int)v17, (uint64_t)buf);
  v18 = *(void **)buf;
  if (!TlvValue)
  {
    if (*(_QWORD *)buf)
      operator delete(*(void **)buf);
LABEL_31:
    LOBYTE(v51[0]) = 0;
    BYTE8(v52) = 0;
    goto LABEL_32;
  }
  v51[1] = 0;
  *(_QWORD *)&v52 = 0;
  v51[0] = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v51, *(const void **)buf, (uint64_t)v62, ((uint64_t)v62 - *(_QWORD *)buf) >> 1);
  BYTE8(v52) = 1;
  if (v18)
    operator delete(v18);
LABEL_32:
  *(_OWORD *)__p = 0u;
  v50 = 0u;
  TlvValue = (uint64_t (**)())qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
  v58 = v19;
  if (!TlvValue)
  {
LABEL_38:
    LOBYTE(__p[0]) = 0;
    BYTE8(v50) = 0;
    goto LABEL_39;
  }
  tlv::parseV<dms::tlv::NRBandCapability>((unint64_t *)&TlvValue, (int)v19, (uint64_t)buf);
  v20 = *(void **)buf;
  if (!TlvValue)
  {
    if (*(_QWORD *)buf)
      operator delete(*(void **)buf);
    goto LABEL_38;
  }
  __p[1] = 0;
  *(_QWORD *)&v50 = 0;
  __p[0] = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(__p, *(const void **)buf, (uint64_t)v62, ((uint64_t)v62 - *(_QWORD *)buf) >> 1);
  BYTE8(v50) = 1;
  if (v20)
    operator delete(v20);
LABEL_39:
  v21 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 16))(*(_QWORD *)(v6 + 48), v7);
  v22 = v21;
  *(_QWORD *)buf = &off_24D5CBA98;
  v62 = 0;
  v63 = 0;
  v64 = buf;
  TlvValue = &off_24D5CBB18;
  v58 = buf;
  v59 = 0;
  p_TlvValue = (unint64_t *)&TlvValue;
  v54[0] = 0;
  v54[1] = 0;
  v53 = v54;
  if (v11)
  {
    v23 = *v21;
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v56[0]) = 134217984;
      *(_QWORD *)((char *)v56 + 4) = v10;
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I Band Capability: 0x%llx", (uint8_t *)v56, 0xCu);
    }
    if (v10)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        if (((1 << v24) & v12) != 0)
          v25 |= nas::asBand(1 << v24);
        ++v24;
      }
      while (v24 != 64);
      *(_QWORD *)&v56[0] = v25;
      v55 = 5;
      if (!p_TlvValue)
        goto LABEL_115;
      (*(void (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
      v26 = 0;
      v27 = 0;
      do
      {
        if (((1 << v26) & v12) != 0)
          v27 |= nas::asBand(1 << v26);
        ++v26;
      }
      while (v26 != 64);
      *(_QWORD *)&v56[0] = v27;
      v55 = 0;
      if (!p_TlvValue)
        goto LABEL_115;
      (*(void (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
      v28 = 0;
      v29 = 0;
      do
      {
        if (((1 << v28) & v12) != 0)
          v29 |= nas::asBand(1 << v28);
        ++v28;
      }
      while (v28 != 64);
      *(_QWORD *)&v56[0] = v29;
      v55 = 2;
      if (!p_TlvValue)
LABEL_115:
        std::__throw_bad_function_call[abi:ne180100]();
      v21 = (os_log_t *)(*(uint64_t (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
    }
    else
    {
      LODWORD(v56[0]) = 5;
      if (!v64
        || ((*(void (**)(uint8_t *, _QWORD ***, _OWORD *))(*(_QWORD *)v64 + 48))(v64, &v53, v56),
            LODWORD(v56[0]) = 0,
            !v64)
        || ((*(void (**)(uint8_t *, _QWORD ***, _OWORD *))(*(_QWORD *)v64 + 48))(v64, &v53, v56),
            LODWORD(v56[0]) = 2,
            !v64))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v21 = (os_log_t *)(*(uint64_t (**)(uint8_t *, _QWORD ***, _OWORD *))(*(_QWORD *)v64 + 48))(v64, &v53, v56);
    }
  }
  if (BYTE8(v52))
  {
    v30 = (char *)v51[0];
    v31 = (char *)v51[1];
    if (v51[0] == v51[1])
    {
      v32 = 0;
    }
    else
    {
      v32 = 0;
      do
      {
        v32 |= ctConvertLteBandToMask();
        v30 += 2;
      }
      while (v30 != v31);
    }
    v33 = *v22;
    if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v56[0]) = 134217984;
      *(_QWORD *)((char *)v56 + 4) = v32;
      _os_log_impl(&dword_216897000, v33, OS_LOG_TYPE_DEFAULT, "#I LTE extended band capability: 0x%016llx", (uint8_t *)v56, 0xCu);
    }
    *(_QWORD *)&v56[0] = v32;
    v55 = 7;
    if (!p_TlvValue)
      std::__throw_bad_function_call[abi:ne180100]();
    v21 = (os_log_t *)(*(uint64_t (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
  }
  if (v15)
  {
    v34 = *v22;
    if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v56[0]) = 134217984;
      *(_QWORD *)((char *)v56 + 4) = v14;
      _os_log_impl(&dword_216897000, v34, OS_LOG_TYPE_DEFAULT, "#I TDSCDMA Band Capability: 0x%llx", (uint8_t *)v56, 0xCu);
    }
    if (v14)
    {
      v35 = 0;
      v36 = 0;
      do
      {
        if (((1 << v35) & v16) != 0)
          v36 |= nas::asBand(1 << v35);
        ++v35;
      }
      while (v35 != 64);
      *(_QWORD *)&v56[0] = v36;
      v55 = 9;
      if (!p_TlvValue)
        std::__throw_bad_function_call[abi:ne180100]();
      v21 = (os_log_t *)(*(uint64_t (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
    }
    else
    {
      LODWORD(v56[0]) = 9;
      if (!v64)
        std::__throw_bad_function_call[abi:ne180100]();
      v21 = (os_log_t *)(*(uint64_t (**)(uint8_t *, _QWORD ***, _OWORD *))(*(_QWORD *)v64 + 48))(v64, &v53, v56);
    }
  }
  v37 = capabilities::ct::supports5G((capabilities::ct *)v21);
  if (BYTE8(v50))
    v38 = v37;
  else
    v38 = 0;
  if (v38 == 1)
  {
    v39 = (char *)__p[0];
    v40 = (char *)__p[1];
    if (__p[0] == __p[1])
    {
      v41 = 0;
    }
    else
    {
      v41 = 0;
      do
      {
        v41 |= ctConvertNrBandToMask();
        v39 += 2;
      }
      while (v39 != v40);
    }
    v42 = *v22;
    if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v56[0]) = 134217984;
      *(_QWORD *)((char *)v56 + 4) = v41;
      _os_log_impl(&dword_216897000, v42, OS_LOG_TYPE_DEFAULT, "#I NR5G extended band capability: 0x%016llx", (uint8_t *)v56, 0xCu);
    }
    *(_QWORD *)&v56[0] = v41;
    v55 = 10;
    if (!p_TlvValue)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(unint64_t *, _QWORD ***, _OWORD *, int *))(*p_TlvValue + 48))(p_TlvValue, &v53, v56, &v55);
  }
  v43 = *(_QWORD *)(v6 + 72);
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v56, &v53);
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v43 + 40))(v43, v7, v56);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((_QWORD **)&v56[0] + 1));
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v54[0]);
  v44 = (uint64_t (***)())p_TlvValue;
  if (p_TlvValue == (unint64_t *)&TlvValue)
  {
    v45 = 4;
    v44 = &TlvValue;
  }
  else
  {
    if (!p_TlvValue)
      goto LABEL_103;
    v45 = 5;
  }
  (*v44)[v45]();
LABEL_103:
  v46 = v64;
  if (v64 == buf)
  {
    v47 = 4;
    v46 = buf;
    goto LABEL_107;
  }
  if (v64)
  {
    v47 = 5;
LABEL_107:
    (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
  }
  if (BYTE8(v50) && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (BYTE8(v52) && v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v48);
}

void sub_21692B0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  if (v32)
    operator delete(v32);
  if (a20)
  {
    if (__p)
    {
      a18 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21692B2F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::SubType>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::SubType>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::SubType>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5CB1B8;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB1B8;
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21692B610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  const void **v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  __int128 v42;
  _QWORD aBlock[5];
  _BYTE buf[24];
  void *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *((_DWORD *)v2 + 2);
    v6 = v5 - 1 >= 3 ? 0 : v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#N Error binding NAS subscription: %s (0x%x)", buf, 0x12u);
    }
  }
  v10 = *((_DWORD *)v2 + 2);
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SystemSelectionPreference>(__p, 16) = 1;
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>(__p, 19) = 0;
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>(__p, 24) = 0;
  v11 = _os_feature_enabled_impl() ^ 1;
  if (v10 != 1)
    LOBYTE(v11) = 1;
  if ((v11 & 1) == 0)
  {
    v12 = (const void **)__p[1];
    if (__p[1] != (void *)v42)
    {
      while (*((_BYTE *)*v12 + 8) != 20)
      {
        if (++v12 == (const void **)v42)
          goto LABEL_17;
      }
    }
    if (v12 == (const void **)v42)
    {
LABEL_17:
      v15 = operator new();
      v16 = v15;
      *(_WORD *)(v15 + 8) = 20;
      *(_QWORD *)v15 = &off_24D5CB498;
      v17 = v42;
      if ((unint64_t)v42 >= *((_QWORD *)&v42 + 1))
      {
        v19 = (uint64_t)(v42 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v20 = (uint64_t)(*((_QWORD *)&v42 + 1) - (unint64_t)__p[1]) >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if (*((_QWORD *)&v42 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v42 + 8, v21);
        else
          v22 = 0;
        v23 = (uint64_t *)&v22[8 * v19];
        v24 = &v22[8 * v21];
        *v23 = v16;
        v18 = v23 + 1;
        v26 = (char *)__p[1];
        v25 = (char *)v42;
        if ((void *)v42 != __p[1])
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v23 = v27;
          }
          while (v25 != v26);
          v25 = (char *)__p[1];
        }
        __p[1] = v23;
        *(_QWORD *)&v42 = v18;
        *((_QWORD *)&v42 + 1) = v24;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v42 = v15;
        v18 = (_QWORD *)(v17 + 8);
      }
      v14 = (_BYTE *)(v16 + 9);
      *(_QWORD *)&v42 = v18;
    }
    else
    {
      if (!v13)
        __cxa_bad_cast();
      v14 = v13 + 9;
    }
    *v14 = 1;
  }
  v28 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>((uint64_t)&v39, v10, v28);
  v29 = (std::__shared_weak_count *)operator new(0x28uLL);
  v29->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB500;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v29[1].__shared_owners_) = v10;
  v31 = v40;
  v32 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&buf[16] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v45 = &__block_descriptor_tmp_114;
  v46 = v29 + 1;
  v47 = v29;
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  aBlock[0] = v32;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = buf;
  *(_QWORD *)(v31 + 32) = _Block_copy(aBlock);
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v38 = v40;
  v40 = 0;
  if (v38)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v40, v38);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21692BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v29 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v27);
  while (__stlxr(v32 - 1, v27));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v33 = a10;
  a10 = 0;
  if (v33)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21692BBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_21692BC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21692BC88(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21692BCC8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<dms::tlv::SubscriptionType>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<dms::tlv::SubscriptionType>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<dms::tlv::SubscriptionType>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 12;
}

uint64_t qmi::MutableMessageBase::createTLV<dms::tlv::SubscriptionType>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = &off_24D5CB2B0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB2B0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<dms::BindSubscription::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21692BFA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  const void **v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  __int128 v41;
  _QWORD aBlock[5];
  _BYTE buf[24];
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *((_DWORD *)v2 + 2);
    v6 = v5 - 1 >= 3 ? 0 : v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#N Error binding DMS subscription: %s (0x%x)", buf, 0x12u);
    }
  }
  v10 = *((_DWORD *)v2 + 2);
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v11 = (const void **)__p[1];
  if (__p[1] != (void *)v41)
  {
    while (*((_BYTE *)*v11 + 8) != 20)
    {
      if (++v11 == (const void **)v41)
        goto LABEL_14;
    }
  }
  if (v11 == (const void **)v41)
  {
LABEL_14:
    v14 = operator new();
    v15 = v14;
    *(_WORD *)(v14 + 8) = 20;
    *(_QWORD *)v14 = &off_24D5CB568;
    v16 = v41;
    if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
    {
      v18 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v18];
      v23 = &v21[8 * v20];
      *v22 = v15;
      v17 = v22 + 1;
      v25 = (char *)__p[1];
      v24 = (char *)v41;
      if ((void *)v41 != __p[1])
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = (char *)__p[1];
      }
      __p[1] = v22;
      *(_QWORD *)&v41 = v17;
      *((_QWORD *)&v41 + 1) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v41 = v14;
      v17 = (_QWORD *)(v16 + 8);
    }
    v13 = (_BYTE *)(v15 + 9);
    *(_QWORD *)&v41 = v17;
  }
  else
  {
    if (!v12)
      __cxa_bad_cast();
    v13 = v12 + 9;
  }
  *v13 = 1;
  v27 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<dms::SetEventReport::Request>((uint64_t)&v38, v10, v27);
  v28 = (std::__shared_weak_count *)operator new(0x28uLL);
  v28->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  v28->__shared_weak_owners_ = 0;
  v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB5D0;
  v28[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v28[1].__shared_owners_) = v10;
  v30 = v39;
  v31 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&buf[16] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v44 = &__block_descriptor_tmp_115_0;
  v45 = v28 + 1;
  v46 = v28;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  aBlock[0] = v31;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_24D5CB668;
  aBlock[4] = buf;
  *(_QWORD *)(v30 + 32) = _Block_copy(aBlock);
  v33 = v46;
  if (v46)
  {
    v34 = (unint64_t *)&v46->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  v37 = v39;
  v39 = 0;
  if (v37)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v39, v37);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21692C37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v29 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v27);
  while (__stlxr(v32 - 1, v27));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v33 = a10;
  a10 = 0;
  if (v33)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<dms::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21692C4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<dms::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_21692C584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21692C5CC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21692C60C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::SystemSelectionPreference>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::SystemSelectionPreference>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::SystemSelectionPreference>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::SystemSelectionPreference>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5CB3A8;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB3A8;
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::ServingSysEvents>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::ServingSysEvents>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::ServingSysEvents>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5CB3F8;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB3F8;
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::SysInfoEvents>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::SysInfoEvents>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::SysInfoEvents>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5CB448;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB448;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB498;
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21692CE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  os_log_t *v7;
  int v8;
  os_log_t v9;
  _BOOL4 v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3)
    v6 = 0;
  else
    v6 = v5;
  v7 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *v7;
  v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (!v10)
      return;
    v14[0] = 67109378;
    v14[1] = v8;
    v15 = 2080;
    v16 = qmi::asString();
    v11 = "#N Register for NAS indications failed: Error in response with code %d (%s)";
    v12 = v9;
    v13 = 18;
  }
  else
  {
    if (!v10)
      return;
    LOWORD(v14[0]) = 0;
    v11 = "#I Register for NAS indications succeeded";
    v12 = v9;
    v13 = 2;
  }
  _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)v14, v13);
}

uint64_t __copy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB568;
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<dms::SetEventReport::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21692D110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  os_log_t *v7;
  int v8;
  os_log_t v9;
  _BOOL4 v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3)
    v6 = 0;
  else
    v6 = v5;
  v7 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *v7;
  v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (!v10)
      return;
    v14[0] = 67109378;
    v14[1] = v8;
    v15 = 2080;
    v16 = qmi::asString();
    v11 = "#N Register for DMS indications failed: Error in response with code %d (%s)";
    v12 = v9;
    v13 = 18;
  }
  else
  {
    if (!v10)
      return;
    LOWORD(v14[0]) = 0;
    v11 = "#I Register for DMS indications succeeded";
    v12 = v9;
    v13 = 2;
  }
  _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)v14, v13);
}

uint64_t __copy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB638;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp11GetCDRXInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21692D42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5CB6C0;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5CB6C0;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, int *a3)
{
  uint64_t **result;
  int v4;

  v4 = *a3;
  result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v4);
  result[5] = 0;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CB750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CB750;
  a2[1] = v2;
  return result;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3, int *a4)
{
  int v4;
  uint64_t *v5;
  uint64_t **result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v4 = *a4;
  v9 = *a4;
  v5 = *a3;
  if (*a3)
  {
    result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v9);
    result[5] = v5;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v10 = v4;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **, int *))(*(_QWORD *)v8 + 48))(v8, a2, &v10);
  }
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::target_type()
{
}

uint64_t std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *((_DWORD *)v5 + 8);
      v7 = *(_QWORD *)(a1 + 8);
      v8 = v3;
      if (*(uint64_t ***)a1 == v3)
        goto LABEL_8;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v3;
      if (v7)
      {
        do
        {
          v8 = (uint64_t **)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v10[2];
          v11 = *v8 == (uint64_t *)v10;
          v10 = v8;
        }
        while (v11);
      }
      if (*((_DWORD *)v8 + 8) < v6)
      {
LABEL_8:
        if (v7)
          v12 = v8;
        else
          v12 = v3;
        if (v7)
          v13 = v8 + 1;
        else
          v13 = v3;
        if (*v13)
          goto LABEL_25;
      }
      else
      {
        v13 = v3;
        v12 = v3;
        if (v7)
        {
          v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v14;
              v15 = *((_DWORD *)v14 + 8);
              if (v15 <= v6)
                break;
              v14 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_24;
            }
            if (v15 >= v6)
              goto LABEL_25;
            v14 = v12[1];
            if (!v14)
            {
              v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      v16 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v5 + 2);
      std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      v17 = (_QWORD *)v5[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v5[2];
          v11 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v11);
      }
      v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_21692D860(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_QWORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileTypeMask>((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB7F8;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::ModePreference>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::ModePreference>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 10;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::ModePreference>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_WORD *)(v4 + 10) = 0;
  *(_QWORD *)v4 = &off_24D5CB848;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB848;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::getSize()
{
  return tlv::size<nas::tlv::LTEBandPrefExtended>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _OWORD *v4;
  uint64_t v5;
  char *v6;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_OWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::LTEBandPrefExtended>((_OWORD **)a2, a1 + 9);
  v6 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v6;
}

__n128 qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CB898;
  *(_OWORD *)(v2 + 9) = *(_OWORD *)(a1 + 9);
  result = *(__n128 *)(a1 + 25);
  *(__n128 *)(v2 + 25) = result;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_QWORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileTypeMask>((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CB8E8;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::getSize()
{
  return tlv::size<nas::tlv::NRBandPref>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::NRBandPref>(a2, a1 + 9);
  v6 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

__n128 qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CB938;
  *(_OWORD *)(v2 + 9) = *(_OWORD *)(a1 + 9);
  *(_OWORD *)(v2 + 25) = *(_OWORD *)(a1 + 25);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  result = *(__n128 *)(a1 + 57);
  *(__n128 *)(v2 + 57) = result;
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<nas::SetSystemSelectionPreference::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21692DE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS6_4lessIS8_EENS6_9allocatorINS6_4pairIKS8_yEEEEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[2];
  _QWORD *v10[3];

  v10[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)v2[2];
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v9[0] = 67109378;
      v9[1] = v4;
      LOWORD(v10[0]) = 2080;
      *(_QWORD **)((char *)v10 + 2) = (_QWORD *)qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#N Set active bands failed: Error in response with code %d (%s)", (uint8_t *)v9, 0x12u);
    }
  }
  else
  {
    if (v6)
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Set active bands succeeded", (uint8_t *)v9, 2u);
    }
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *((unsigned int *)v2 + 2);
    std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v9, v2 + 3);
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v7 + 48))(v7, v8, v9);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v10[0]);
  }
}

void sub_21692DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENS_3mapI21RadioAccessTechnologyyNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_yEEEEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENS_3mapI21RadioAccessTechnologyyNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_yEEEEEEE3__2EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CB9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(_QWORD **)(a1 + 56));
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Failed to query for extended band capability: Error: %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c102_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c102_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0,std::allocator<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0,std::allocator<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBA20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms19GetBandCapabilityEx8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21692E248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5CBA98;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5CBA98;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, int *a3)
{
  uint64_t **result;
  int v4;

  v4 = *a3;
  result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v4);
  result[5] = 0;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target_type()
{
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CBB18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CBB18;
  a2[1] = v2;
  return result;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3, int *a4)
{
  uint64_t *v4;
  int v5;
  uint64_t **result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v4 = *a3;
  v5 = *a4;
  v9 = *a4;
  if (v4)
  {
    result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v5, &v9);
    result[5] = v4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v10 = v5;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **, int *))(*(_QWORD *)v8 + 48))(v8, a2, &v10);
  }
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::target_type()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(NSObject **)(**(_QWORD **)(a1 + 32) + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#N Exit No Service failed: Error in response with code %d (%s)";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Exit No Service succeeded";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

uint64_t __copy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0,std::allocator<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0,std::allocator<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_QWORD **qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileTypeMask>((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBC40;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(NSObject **)(**(_QWORD **)(a1 + 32) + 40);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "SetTime failed: failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I SetTime succeeded", (uint8_t *)v4, 2u);
  }
}

uint64_t __copy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNS_8functionIF7CSIDatevEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNS_8functionIF7CSIDatevEEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBCA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CBCA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBD10;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBD60;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBDB0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBE00;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CBE50;
  return result;
}

uint64_t std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D5CBE88;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D5CBE88;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D5CBE88;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21692ED20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5CBE88;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *a2;
  FilePushTransactionResult::FilePushTransactionResult();
  v4 = *(_QWORD *)(a1 + 32);
  v8 = v6;
  v7 = v3;
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7, &v8);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target_type()
{
}

uint64_t std::unique_ptr<FilePushTransaction>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x2199FDAE0]();
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

void std::__shared_ptr_pointer<FilePushTransaction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<FilePushTransaction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    MEMORY[0x2199FDAE0]();
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<FilePushTransaction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D5CBF78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D5CBF78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D5CBF78;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 3), a1 + 24);
  return v2;
}

void sub_21692F070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_24D5CBF78;
  v2 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2 + 24, a1 + 24);
}

_QWORD *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::operator()(uint64_t a1, unsigned int *a2, int *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  capabilities::ct *v7;
  NSObject **v8;
  NSObject *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  uint64_t v30;
  NSObject **v31;
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (capabilities::ct *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 48) + 16))(*(_QWORD *)(v6 + 48), *a2);
  v8 = (NSObject **)v7;
  if (!v5 || !capabilities::ct::supportsCompleteCleanupOnFilePushFailure(v7))
  {
    memset(v24, 0, sizeof(v24));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v24);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::ConfigurationType>(v24, 1) = 1;
    v11 = (_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::IndicationToken>(v24, 16);
    *v11 = subscriber::simSlotAsInstance();
    *(_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::ActivationType>(v24, 17) = 1;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    v12 = (_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::SlotId>(v24, 19);
    v13 = (_DWORD)v11 - 1;
    if (((_DWORD)v11 - 1) >= 3)
      v13 = -1;
    *v12 = v13;
    v14 = (_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::SubscriptionId>(v24, 18);
    *v14 = subscriber::simSlotAsInstance();
    v19 = v6 + 248;
    v20 = QMIServiceMsg::create();
    v21 = 25000;
    v22 = 0;
    v15 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v27 = 1174405120;
    v28 = ___ZZN25QMIBasebandSettingsDriver31prepareFilePushTransaction_syncEN10subscriber7SimSlotENS0_15HardwareSimSlotENSt3__18functionIFvS1_25FilePushTransactionResultEEEENK3__1clES1_25FilePushTransactionStatus_block_invoke;
    v29 = &__block_descriptor_tmp_123_0;
    v30 = v6;
    v31 = v8;
    v16 = v32;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 24);
    v34 = v4;
    aBlock[0] = v15;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3pdc14ActivateConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
    aBlock[3] = &unk_24D5CC010;
    aBlock[4] = buf;
    v17 = _Block_copy(aBlock);
    v23 = v17;
    if (v20)
    {
      qmi::Client::send();
      v17 = v23;
    }
    if (v17)
      _Block_release(v17);
    if (v33 == v32)
    {
      v18 = 4;
    }
    else
    {
      if (!v33)
      {
LABEL_18:
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
        return;
      }
      v18 = 5;
      v16 = v33;
    }
    (*(void (**)(_QWORD *))(*v16 + 8 * v18))(v16);
    goto LABEL_18;
  }
  v9 = *v8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Transaction aborted. PDC refresh not sent", buf, 2u);
  }
  FilePushTransactionResult::FilePushTransactionResult();
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)buf = aBlock[0];
  LODWORD(v19) = v4;
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v10 + 48))(v10, &v19, buf);
}

void sub_21692F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34)
{
  _QWORD *v34;
  uint64_t v36;

  if (a34 == v34)
  {
    v36 = 4;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v36 = 5;
    v34 = a34;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v36))(v34);
LABEL_6:
  if (a11)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target_type()
{
}

void ___ZZN25QMIBasebandSettingsDriver31prepareFilePushTransaction_syncEN10subscriber7SimSlotENS0_15HardwareSimSlotENSt3__18functionIFvS1_25FilePushTransactionResultEEEENK3__1clES1_25FilePushTransactionStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint8_t buf[16];

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = **(NSObject ***)(a1 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#N PDC refresh failed", buf, 2u);
    }
    v7 = *(_DWORD *)(a1 + 80);
    FilePushTransactionResult::FilePushTransactionResult();
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)buf = v17;
    v18 = v7;
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)v8 + 48))(v8, &v18, buf);
  }
  else
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I PDC refresh initiated", buf, 2u);
    }
    v9 = *(_DWORD *)(a1 + 80);
    v10 = *(_QWORD *)(v4 + 288);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v11 = (_QWORD *)v10;
          v12 = *(_DWORD *)(v10 + 32);
          if (v12 <= v9)
            break;
          v10 = *v11;
          v13 = v11;
          if (!*v11)
            goto LABEL_16;
        }
        if (v12 >= v9)
          break;
        v10 = v11[1];
        if (!v10)
        {
          v13 = v11 + 1;
          goto LABEL_16;
        }
      }
    }
    else
    {
      v13 = (_QWORD *)(v4 + 288);
      v11 = (_QWORD *)(v4 + 288);
LABEL_16:
      v14 = a1 + 48;
      v15 = operator new(0x48uLL);
      v15[8] = v9;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v15 + 10), v14);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v11;
      *v13 = v15;
      v16 = **(_QWORD **)(v4 + 280);
      if (v16)
      {
        *(_QWORD *)(v4 + 280) = v16;
        v15 = (_DWORD *)*v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 288), (uint64_t *)v15);
      ++*(_QWORD *)(v4 + 296);
    }
  }
}

void sub_21692F644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c75_ZTSNSt3__18functionIFvN10subscriber7SimSlotE25FilePushTransactionResultEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_e8_48c75_ZTSNSt3__18functionIFvN10subscriber7SimSlotE25FilePushTransactionResultEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pdc14ActivateConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<pdc::ActivateConfig::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21692F6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC068;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC068;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::getSize(uint64_t a1)
{
  return tlv::size<bsp::tlv::FileTransferInfo>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<bsp::tlv::FileTransferInfo>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CC068;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_WORD *)(v2 + 24) = *(_WORD *)(a1 + 24);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 32), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_21692F850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40B943FB0DLL);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC0B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC0B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CC0B8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_21692F9C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC108;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC158;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(**(_QWORD **)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N SetBatterySaverMode::Request returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1,std::allocator<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1,std::allocator<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC228;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  os_log_t *v3;
  int v4;
  os_log_t v5;
  _BOOL4 v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (os_log_t *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)(a1 + 32) + 48) + 16))(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 48), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *v3;
  v6 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6)
      return;
    v10[0] = 67109378;
    v10[1] = v4;
    v11 = 2080;
    v12 = qmi::asString();
    v7 = "#N Send smart data mode failed. Error: %d (%s)";
    v8 = v5;
    v9 = 18;
  }
  else
  {
    if (!v6)
      return;
    LOWORD(v10[0]) = 0;
    v7 = "#I Send smart data mode succeeded";
    v8 = v5;
    v9 = 2;
  }
  _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)v10, v9);
}

uint64_t __copy_helper_block_e8_32c103_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c103_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::ActiveSubs>(a2, a1 + 9);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC2F8;
  *(_QWORD *)(result + 9) = *(_QWORD *)(a1 + 9);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(**(_QWORD **)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Error StandbyPreference: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c144_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNS_3setIN10subscriber7SimSlotENS_4lessIS4_EENS_9allocatorIS4_EEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c144_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNS_3setIN10subscriber7SimSlotENS_4lessIS4_EENS_9allocatorIS4_EEEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas17StandbyPreference8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169304FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC3F0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(**(_QWORD **)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N InMetroStatus TransitClassifierInfo::Request returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CC458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

Registry **QMICDMASettingsCommandDriver::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  Registry **result;
  NSObject *v9;

  *a3 = 0;
  a3[1] = 0;
  v6 = operator new();
  v9 = *a2;
  v7 = v9;
  *a2 = 0;
  QMICDMASettingsCommandDriver::QMICDMASettingsCommandDriver(v6, a1, &v9);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<QMICDMASettingsCommandDriver,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
  result = (Registry **)*a3;
  if (*a3)
    return (Registry **)QMICDMASettingsCommandDriver::init(result);
  return result;
}

void sub_2169307C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMICDMASettingsCommandDriver::init(Registry **this)
{
  char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v6;

  v2 = (char *)(this + 11);
  Registry::createRestModuleOneTimeUseConnection(this[9]);
  ctu::RestModule::connect();
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)())v6->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return ctu::rest::property_source_t<calls_active_in_settings>::bind(this + 13, (uint64_t)v2);
}

void sub_216930890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::rest::property_source_t<calls_active_in_settings>::bind(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  std::function<void ()(BOOL const&)>::operator=<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},void>(a1, &v4);
  result = a1[3];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 48))(result, a1 + 4);
  return result;
}

void QMICDMASettingsCommandDriver::start(Registry **this)
{
  xpc_object_t v2;
  std::mutex *ServiceMap;
  std::__shared_weak_count *v4;
  Registry *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  QMIVirtualClient **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  QMIVirtualClient *v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  void (*v45)(uint64_t, uint64_t *);
  void *v46;
  Registry *v47;
  std::__shared_weak_count *v48;
  xpc_object_t object;
  void *__p[2];
  char v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 v58;
  _QWORD aBlock[5];
  uint64_t v60;
  std::__shared_weak_count *v61;
  unsigned __int16 *v62;

  v2 = xpc_null_create();
  v52 = 0;
  v53 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[9]);
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v52);
  v4 = (std::__shared_weak_count *)this[2];
  if (!v4 || (v5 = this[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = v52;
  std::string::basic_string[abi:ne180100]<0>(__p, "settings");
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  QMIClientPool::requestClient(v12, 9u, (uint64_t *)__p, (uint64_t)(this + 6), (uint64_t)&object, &v44);
  v13 = this + 7;
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)v13, &v44);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  xpc_release(object);
  object = 0;
  if (v51 < 0)
    operator delete(__p[0]);
  v17 = *v13;
  v18 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v44 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v44 + 1) = 1174405120;
  v45 = ___ZN28QMICDMASettingsCommandDriver5startEN3xpc10connectionE_block_invoke;
  v46 = &__block_descriptor_tmp_9;
  v47 = v5;
  v48 = v7;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v20 = (std::__shared_weak_count *)*((_QWORD *)v17 + 1);
  if (v20)
  {
    v21 = std::__shared_weak_count::lock(v20);
    v61 = v21;
    if (v21)
    {
      v26 = v21;
      v60 = *(_QWORD *)v17;
      v27 = v60;
      if (v60)
      {
        v54 = (char *)v17 + 88;
        v55 = 1;
        MEMORY[0x2199FDF3C]((char *)v17 + 88, v22, v23, v24, v25);
        v28 = *((_QWORD *)v17 + 3);
        if (v28)
        {
          v29 = (unsigned __int16 *)((char *)v17 + 24);
          do
          {
            v30 = *(unsigned __int16 *)(v28 + 32);
            v31 = v30 >= 0x2E;
            if (v30 >= 0x2E)
              v32 = (uint64_t *)v28;
            else
              v32 = (uint64_t *)(v28 + 8);
            if (v31)
              v29 = (unsigned __int16 *)v28;
            v28 = *v32;
          }
          while (*v32);
          if (v29 != (unsigned __int16 *)((char *)v17 + 24) && v29[16] <= 0x2Eu)
            __TUAssertTrigger();
        }
        aBlock[0] = v18;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN2vs15VoiceCallStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        aBlock[3] = &unk_24D5CC700;
        aBlock[4] = &v44;
        v33 = (uint64_t *)_Block_copy(aBlock);
        v58 = 46;
        v62 = &v58;
        v34 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v17 + 2, &v58, (uint64_t)&std::piecewise_construct, &v62);
        v35 = v34[5];
        v34[5] = v33;
        if (v35)
          _Block_release(v35);
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v54);
        v54 = 0;
        v55 = 0;
        v36 = *((_QWORD *)v17 + 8);
        v56 = *((_QWORD *)v17 + 7);
        v57 = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        QMIClientPool::registerUnsolicitedHandler(v27, (uint64_t)&v54, (uint64_t)v17, 0x2Eu);
        qmi::Client::~Client((qmi::Client *)&v54);
      }
      v39 = (unint64_t *)&v26->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  QMIVirtualClient::addToPowerMode(*v13);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  std::__shared_weak_count::__release_weak(v7);
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  xpc_release(v2);
}

void sub_216930C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, xpc_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;

  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v26 - 112);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::__shared_weak_count::__release_weak(v25);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ___ZN28QMICDMASettingsCommandDriver5startEN3xpc10connectionE_block_invoke(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD **)(a1 + 32);
      if (v7)
      {
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v7[2];
        if (!v13 || (v14 = v7[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v7;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v7[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v6->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c53_ZTSNSt3__18weak_ptrI28QMICDMASettingsCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSNSt3__18weak_ptrI28QMICDMASettingsCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t QMIVirtualClient::addToPowerMode(QMIVirtualClient *this)
{
  if (!*((_BYTE *)this + 72) || !*((_QWORD *)this + 7))
    __TUAssertTrigger();
  return qmi::Client::setIndShouldWake((QMIVirtualClient *)((char *)this + 40));
}

uint64_t QMICDMASettingsCommandDriver::stop(QMICDMASettingsCommandDriver *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v5[0] = v3 + 88;
    v5[1] = 1;
    MEMORY[0x2199FDF3C](v3 + 88, a2);
    *(_BYTE *)(v3 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v5);
  }
  return ctu::RestModule::disconnect((QMICDMASettingsCommandDriver *)((char *)this + 88));
}

uint64_t QMICDMASettingsCommandDriver::QMICDMASettingsCommandDriver(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v13;
  void *__p;
  char v15;
  _BYTE v16[16];
  _BYTE v17[8];

  *(_QWORD *)a1 = MEMORY[0x24BDC4608] + 16;
  v6 = (_QWORD *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v16, (const char *)*MEMORY[0x24BDC3E90], "set.cdma.qmi");
  *v6 = 0;
  v6[1] = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v7)
    dispatch_retain(v7);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(_QWORD *)a1 = &off_24D5CC4D8;
  *(_QWORD *)(a1 + 48) = &unk_24D5CC520;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 80) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "QMICDMASettingsCommandDriver");
  v11 = *(NSObject **)(a1 + 24);
  v13 = v11;
  if (v11)
    dispatch_retain(v11);
  ctu::RestModule::RestModule();
  if (v13)
    dispatch_release(v13);
  if (v15 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = -1;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_216931170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  CDMASettingsCommandDriver *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (object)
    dispatch_release(object);
  if (a10)
    dispatch_release(a10);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v20);
  MEMORY[0x2199FDF6C](v19);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v18);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v17);
  _Unwind_Resume(a1);
}

BOOL QMICDMASettingsCommandDriver::dialSettingCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  _BOOL4 v27;
  _OWORD v28[2];
  uint8_t buf[8];
  uint64_t v30;
  void (*v31)(_QWORD *, _QWORD *);
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void (*v35)(_QWORD *, uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  _QWORD aBlock[5];

  if (*(_QWORD *)(a1 + 176))
  {
    v5 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "A call is already on going!", buf, 2u);
    return 0;
  }
  std::function<void ()(void)>::operator=((_QWORD *)(a1 + 152), a4);
  v8 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v8 + 72) || !*(_QWORD *)(v8 + 56))
  {
    v26 = *(NSObject **)(a1 + 40);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v27)
      return result;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v26, OS_LOG_TYPE_DEFAULT, "#I fVSClient is not ready to send dial request", buf, 2u);
    return 0;
  }
  memset(v28, 0, sizeof(v28));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v9 = (_QWORD *)qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>(v28, 1);
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (char *)a3;
  else
    v11 = *(char **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v9, v11, &v11[v12], v12);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallType>(v28, 16) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  v13 = *(_QWORD *)(a1 + 128);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v14
    || (v15 = *(_QWORD *)(a1 + 56), v16 = *(_QWORD *)(a1 + 8), (v17 = std::__shared_weak_count::lock(v14)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (!*(_BYTE *)(v15 + 72) || !*(_QWORD *)(v15 + 56))
    __TUAssertTrigger();
  v37 = v15 + 40;
  v38 = QMIServiceMsg::create();
  v39 = 25000;
  v40 = 0;
  v41 = 0;
  v23 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v30 = 1174405120;
  v31 = ___ZN16QMIVirtualClient4sendIN2vs13VoiceDialCall7RequestE28QMICDMASettingsCommandDriverMS4_FvRKNS2_8ResponseEEEENSt3__19enable_ifIXsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
  v32 = &__block_descriptor_tmp_15_4;
  v33 = v16;
  v34 = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v35 = QMICDMASettingsCommandDriver::handleVoiceDialCallResp;
  v36 = 0;
  aBlock[0] = v23;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_7;
  aBlock[3] = &unk_24D5CC7F8;
  aBlock[4] = buf;
  v25 = _Block_copy(aBlock);
  v41 = v25;
  if (v38)
  {
    qmi::Client::send();
    v25 = v41;
  }
  if (v25)
    _Block_release(v25);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
  return 1;
}

void sub_2169314C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,char a21)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void QMICDMASettingsCommandDriver::handleVoiceDialCallResp(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (v9 = a1[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = a1;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a1[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void QMICDMASettingsCommandDriver::~QMICDMASettingsCommandDriver(QMICDMASettingsCommandDriver *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  QMICDMASettingsCommandDriver *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24D5CC4D8;
  *((_QWORD *)this + 6) = &unk_24D5CC520;
  v2 = (char *)this + 152;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (QMICDMASettingsCommandDriver *)*((_QWORD *)this + 16);
  if (v5 == (QMICDMASettingsCommandDriver *)((char *)this + 104))
  {
    v6 = 4;
    v5 = (QMICDMASettingsCommandDriver *)((char *)this + 104);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  QMICDMASettingsCommandDriver *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24D5CC4D8;
  *((_QWORD *)this + 6) = &unk_24D5CC520;
  v2 = (char *)this + 152;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (QMICDMASettingsCommandDriver *)*((_QWORD *)this + 16);
  if (v5 == (QMICDMASettingsCommandDriver *)((char *)this + 104))
  {
    v6 = 4;
    v5 = (QMICDMASettingsCommandDriver *)((char *)this + 104);
  }
  else
  {
    if (!v5)
    {
LABEL_11:
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
      MEMORY[0x2199FDF6C]((char *)this + 40);
      ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
      CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);
      JUMPOUT(0x2199FEAC4);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  goto LABEL_11;
}

void `non-virtual thunk to'QMICDMASettingsCommandDriver::~QMICDMASettingsCommandDriver(QMICDMASettingsCommandDriver *this)
{
  CDMASettingsCommandDriver *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  QMICDMASettingsCommandDriver *v6;
  uint64_t v7;

  *((_QWORD *)this - 6) = &off_24D5CC4D8;
  v2 = (QMICDMASettingsCommandDriver *)((char *)this - 48);
  *(_QWORD *)this = &unk_24D5CC520;
  v3 = (char *)this + 104;
  v4 = (char *)*((_QWORD *)this + 16);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (QMICDMASettingsCommandDriver *)*((_QWORD *)this + 10);
  if (v6 == (QMICDMASettingsCommandDriver *)((char *)this + 56))
  {
    v7 = 4;
    v6 = (QMICDMASettingsCommandDriver *)((char *)this + 56);
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  MEMORY[0x2199FDF6C]((char *)this - 8);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this - 5);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v2);
}

{
  CDMASettingsCommandDriver *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  QMICDMASettingsCommandDriver *v6;
  uint64_t v7;

  *((_QWORD *)this - 6) = &off_24D5CC4D8;
  v2 = (QMICDMASettingsCommandDriver *)((char *)this - 48);
  *(_QWORD *)this = &unk_24D5CC520;
  v3 = (char *)this + 104;
  v4 = (char *)*((_QWORD *)this + 16);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (QMICDMASettingsCommandDriver *)*((_QWORD *)this + 10);
  if (v6 == (QMICDMASettingsCommandDriver *)((char *)this + 56))
  {
    v7 = 4;
    v6 = (QMICDMASettingsCommandDriver *)((char *)this + 56);
  }
  else
  {
    if (!v6)
    {
LABEL_11:
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
      MEMORY[0x2199FDF6C]((char *)this - 8);
      ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this - 5);
      CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v2);
      JUMPOUT(0x2199FEAC4);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_11;
}

uint64_t *std::shared_ptr<QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<QMICDMASettingsCommandDriver,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CC618;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216931AC0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1}::operator() const(QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216931AE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1}::operator() const(QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1}::operator() const(QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::function<void ()(BOOL const&)>::operator=<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v7[0] = &off_24D5CC678;
  v7[1] = v3;
  v8 = v7;
  std::__function::__value_func<void ()(BOOL const&)>::swap[abi:ne180100](v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CC678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CC678;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, BOOL *a2)
{
  ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

void ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}::operator()(uint64_t a1, BOOL *a2)
{
  xpc_object_t v2;
  xpc_object_t object;
  void *__p;
  char v5;

  v2 = xpc_BOOL_create(*a2);
  if (!v2)
    v2 = xpc_null_create();
  std::string::basic_string[abi:ne180100]<0>(&__p, "/cc/props/calls_active_in_settings");
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0)
    operator delete(__p);
  xpc_release(v2);
}

void sub_216931D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  xpc_release(object);
  if (a15 < 0)
    operator delete(__p);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(BOOL const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216931F44(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN2vs15VoiceCallStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_216931FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216932148(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<vs::tlv::CallingNumber>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<vs::tlv::CallingNumber>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 16;
}

uint64_t qmi::MutableMessageBase::createTLV<vs::tlv::CallingNumber>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)v4 = &off_24D5CC748;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 16;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC748;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CC748;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CC748;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_216932434(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<vs::tlv::CallType>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<vs::tlv::CallType>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<vs::tlv::CallType>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<vs::tlv::CallType>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5CC798;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CC798;
  return result;
}

void ___ZN16QMIVirtualClient4sendIN2vs13VoiceDialCall7RequestE28QMICDMASettingsCommandDriverMS4_FvRKNS2_8ResponseEEEENSt3__19enable_ifIXsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _BYTE *);
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = a1[4];
      v14 = v7;
      if (v7)
      {
        v9 = (void (*)(_QWORD *, _BYTE *))a1[6];
        v8 = a1[7];
        v10 = (_QWORD *)(v7 + (v8 >> 1));
        if ((v8 & 1) != 0)
          v9 = *(void (**)(_QWORD *, _BYTE *))(*v10 + v9);
        qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response((qmi::MessageBase *)v13, a2);
        v9(v10, v13);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v13);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216932760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_2169327D8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint8_t buf[8];
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v13 = a1;
  v14 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    LODWORD(v16[0]) = 67109120;
    HIDWORD(v16[0]) = v3;
    v5 = "#E Voice dial call response failed with error code = 0x%x";
    v6 = (uint8_t *)v16;
    v7 = v4;
    v8 = 8;
    goto LABEL_7;
  }
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 0x40000000;
  v16[2] = ___ZZN28QMICDMASettingsCommandDriver23handleVoiceDialCallRespERKN2vs13VoiceDialCall8ResponseEENK3__0clEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_18_3;
  v16[4] = v2;
  *(_QWORD *)buf = v16;
  if ((qmi::MessageBase::applyTlv<vs::tlv::CallIdentifier,void({block_pointer})(vs::tlv::CallIdentifier const&)>((qmi::MessageBase *)(v1 + 8), 16, (uint64_t)buf) & 1) != 0)goto LABEL_10;
  v9 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v5 = "#E No Call ID present";
    v6 = buf;
    v7 = v9;
    v8 = 2;
LABEL_7:
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, v5, v6, v8);
  }
LABEL_8:
  *(_BYTE *)(v2 + 136) = 0;
  v10 = v2 + 136;
  v11 = *(_QWORD *)(v10 - 8);
  if (v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v10);
LABEL_10:
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v14);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

void sub_216932950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZZN28QMICDMASettingsCommandDriver23handleVoiceDialCallRespERKN2vs13VoiceDialCall8ResponseEENK3__0clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  *(_BYTE *)(v2 + 144) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Call ID: %u", (uint8_t *)v5, 8u);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(_QWORD *, uint64_t);
  void (*v23)(uint64_t);
  void *__p;
  void *v25;
  uint64_t v26;
  uint8_t buf[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v16 = a1;
  v17 = (uint64_t *)*a1;
  v1 = *v17;
  v19 = 0;
  v20 = &v19;
  v21 = 0x4002000000;
  v22 = __Block_byref_object_copy__0;
  v23 = __Block_byref_object_dispose__0;
  v25 = 0;
  v26 = 0;
  __p = 0;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v18[2] = ___ZZN28QMICDMASettingsCommandDriver24handleVoiceCallStatusIndERKN2vs15VoiceCallStatus10IndicationEENK3__0clEv_block_invoke;
  v18[3] = &unk_24D5CC840;
  v18[4] = &v19;
  *(_QWORD *)buf = v18;
  if ((qmi::MessageBase::applyTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>((qmi::MessageBase *)(v17 + 1), 1, (uint64_t)buf) & 1) == 0)
  {
    v11 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
    *(_WORD *)buf = 0;
    v12 = "#I Voice call status doesn't have mandatory TLV \"Identifier List\" (0x01)";
LABEL_20:
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    goto LABEL_21;
  }
  v2 = (unsigned __int8 *)v20[5];
  if (!(-73 * (*((_BYTE *)v20 + 48) - (_BYTE)v2)))
  {
    v11 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
    *(_WORD *)buf = 0;
    v12 = "#I No call instances reported";
    goto LABEL_20;
  }
  v3 = (-73 * (*((_BYTE *)v20 + 48) - (_BYTE)v2));
  if (v3 >= 2)
  {
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v3;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Got '%d' call instances instead of just '1'; reading the first one",
        buf,
        8u);
      v2 = (unsigned __int8 *)v20[5];
    }
  }
  if (v2[1] != 9)
    goto LABEL_21;
  v5 = *v2;
  v6 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Call end event for call %u", buf, 8u);
  }
  v7 = *(unsigned __int8 *)(v1 + 144);
  if (v5 != v7 || v7 == 255)
    goto LABEL_21;
  *(_BYTE *)(v1 + 136) = 0;
  v8 = *(_QWORD *)(v1 + 128);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  *(_OWORD *)buf = 0u;
  v28 = 0u;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, v1 + 152);
  v9 = *(_QWORD **)(v1 + 176);
  *(_QWORD *)(v1 + 176) = 0;
  if (v9 == (_QWORD *)(v1 + 152))
  {
    v10 = 4;
    v9 = (_QWORD *)(v1 + 152);
    goto LABEL_25;
  }
  if (v9)
  {
    v10 = 5;
LABEL_25:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_BYTE *)(v1 + 144) = -1;
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_21;
  (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 48))(*((_QWORD *)&v28 + 1));
  v14 = (uint8_t *)*((_QWORD *)&v28 + 1);
  if (*((uint8_t **)&v28 + 1) == buf)
  {
    v15 = 4;
    v14 = buf;
  }
  else
  {
    if (!*((_QWORD *)&v28 + 1))
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_21:
  _Block_object_dispose(&v19, 8);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v17);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v16);
}

void sub_216932D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 56);
  if (v25 == (_QWORD *)(v23 - 80))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 80);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t qmi::MessageBase::applyTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>((uint64_t)a1, (unsigned __int8 *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  unsigned __int8 *v5;
  void *__p;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v9 = 0;
  v10 = a2;
  __p = 0;
  v8 = 0;
  tlv::parseV<vs::tlv::CallList>(&v10, a3, (uint64_t *)&__p);
  v5 = v10;
  if (v10)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_216932F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<vs::tlv::CallListItem>::__assign_with_size[abi:ne180100]<vs::tlv::CallListItem*,vs::tlv::CallListItem*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * (v8 - *(_QWORD *)result) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2492492492492492)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * v8;
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x1249249249249249)
      v12 = 0x2492492492492492;
    else
      v12 = v11;
    result = std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * (v15 - v9) >= a4)
    goto LABEL_16;
  v16 = &__src[0x6DB6DB6DB6DB6DB8 * (v15 - v9) + 0x9249249249249249 * (v15 - v9)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void Mav16QMIAttachApnCommandDriver::create(unint64_t *a1@<X0>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint8_t v30[16];
  uint8_t buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  v6 = operator new();
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v29 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    *(_OWORD *)buf = *a1;
  }
  AttachApnCommandDriver::AttachApnCommandDriver();
  *(_QWORD *)v6 = off_24D5C33B0;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_BYTE *)(v6 + 128) = 0;
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  *(_QWORD *)v6 = &off_24D5CC870;
  if (a2 != 1)
  {
    v14 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v30 = 0;
      _os_log_fault_impl(&dword_216897000, v14, OS_LOG_TYPE_FAULT, "IMPLEMENTATION BUG", v30, 2u);
    }
  }
  *a3 = v6;
  a3[1] = 0;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CCCC8;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  a3[1] = (uint64_t)v15;
  v17 = *(std::__shared_weak_count **)(v6 + 16);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_29;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *(_QWORD *)(v6 + 8) = v6;
    *(_QWORD *)(v6 + 16) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)(v6 + 8) = v6;
    *(_QWORD *)(v6 + 16) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_29:
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v27 = *(NSObject **)(*a3 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v28 = subscriber::asString();
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl(&dword_216897000, v27, OS_LOG_TYPE_DEFAULT, "#I Mav16QMIAttachApnCommandDriver created for %s", buf, 0xCu);
  }
}

void sub_216933354(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav16QMIAttachApnCommandDriver::~Mav16QMIAttachApnCommandDriver(Mav16QMIAttachApnCommandDriver *this)
{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav16QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav16QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

__int128 *Mav16QMIAttachApnCommandDriver::performPushSettingsToBB_sync(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  const void **v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t);
  void **v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  int *v22;
  int Int;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  int *v33;
  CFTypeID v34;
  const __CFNumber *v35;
  int v36;
  _BYTE *v37;
  BOOL *v38;
  BOOL *v39;
  CFTypeID v40;
  const __CFBoolean *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t (**v47)(_QWORD, _QWORD);
  uint64_t (**v48)(_QWORD, _QWORD);
  int v49;
  void *v50;
  NSObject *v51;
  _QWORD *v52;
  xpc_object_t *v53;
  uint64_t v54;
  _QWORD *v55;
  const void *v56;
  _QWORD *v57;
  int v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void **v63;
  const void **v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __CFString *v69;
  const void *v70;
  _QWORD *v71;
  uint64_t (*v72)(uint64_t);
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int *v83;
  int v84;
  _DWORD *v85;
  int *v86;
  int *v87;
  CFTypeID v88;
  const __CFNumber *v89;
  int v90;
  _BYTE *v91;
  BOOL *v92;
  BOOL *v93;
  CFTypeID v94;
  const __CFBoolean *v95;
  int v96;
  char v97;
  __int128 v98;
  std::string::size_type size;
  std::string::size_type v100;
  int v101;
  void *v102;
  const void *v103;
  _QWORD *v104;
  int v105;
  NSObject *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  NSObject *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *result;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  std::string *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  const void **v131;
  NSObject *v132;
  _QWORD v134[5];
  const void *v135;
  _QWORD v136[6];
  dispatch_group_t group;
  int v138;
  const void *v139;
  const void **v140;
  const void **v141;
  uint64_t v142;
  uint64_t (**v143)(_QWORD, _QWORD);
  uint64_t (**v144)(_QWORD, _QWORD);
  uint64_t v145;
  _QWORD v146[3];
  char v147;
  __CFString *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  char v152;
  __int128 v153;
  __int128 v154;
  char v155;
  void *v156;
  uint64_t v157;
  void (*v158)(void **, uint64_t);
  void *v159;
  _QWORD v160[2];
  void *v161;
  const void **v162;
  uint64_t v163;
  __CFString *v164;
  uint64_t v165;
  void (*v166)(__CFString **, uint64_t);
  void *v167;
  _QWORD v168[2];
  void *v169[2];
  __int128 v170;
  _QWORD v171[2];
  void *__p[2];
  __int128 v173;
  __CFDictionary *v174[2];
  xpc_object_t object;
  xpc_object_t v176;
  xpc_object_t v177;
  __int128 aBlock;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  dispatch_group_t v182[2];
  void *v183[2];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  std::string v196;
  char v197;
  __CFString *v198;
  uint64_t v199;
  void (*v200)(uint64_t, _BYTE *);
  void *v201;
  int v202;
  int v203;
  __CFString *v204;
  uint64_t v205;
  void (*v206)(uint64_t, _DWORD *);
  void *v207;
  int v208;
  __CFString *v209;
  uint64_t v210;
  void (*v211)(uint64_t, _DWORD *);
  void *v212;
  uint64_t (***v213)(_QWORD, _QWORD);
  __CFString *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  std::string v218;
  std::string v219;
  xpc_object_t v220[2];
  __int128 v221;
  std::string v222;
  std::string __s;
  __int128 v224;
  void (*v225)(uint64_t, std::string *);
  void *v226;
  std::string v227;
  _QWORD block[6];
  __int128 v229;
  _BYTE v230[24];
  _BYTE *v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  v232 = 0u;
  v233 = 0u;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v232, a3);
  v5 = *(unsigned __int8 *)(a3 + 32);
  v146[0] = 0;
  v146[1] = v146;
  v146[2] = 0x2000000000;
  v147 = 0;
  v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
    dispatch_release(v7);
  }
  v8 = &loc_216A9C000;
  v132 = v7;
  if (!*(_BYTE *)(a2 + 8)
    || (*(_QWORD *)a2
      ? (v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (v9 = 0),
        !v9))
  {
    v51 = a1[5];
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(aBlock) = 0;
      _os_log_impl(&dword_216897000, v51, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", (uint8_t *)&aBlock, 2u);
    }
    goto LABEL_249;
  }
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v125 = a2;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v139, (const void **)a2);
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v139);
  v10 = v140;
  v11 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v131 = v141;
  if (v140 == v141)
    goto LABEL_89;
  v124 = v5;
  v12 = 0;
  v130 = (char *)*MEMORY[0x24BDC3DA8];
  v13 = *MEMORY[0x24BEDB7F0];
  v128 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v127 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v14 = 32;
  v126 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v176 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v176, v10);
    v195 = 0;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    *(_OWORD *)v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    *(_OWORD *)v182 = 0u;
    v179 = 0u;
    v180 = 0u;
    aBlock = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v179, (uint64_t)"trying to push 3GPP attach APN ", 31);
    if (v176)
      v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v17 = 0;
    if (v17)
    {
      ctu::cf_to_xpc((ctu *)v176, v15);
      xpc::object::to_string((xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "empty");
    }
    if ((SBYTE7(v173) & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if ((SBYTE7(v173) & 0x80u) == 0)
      v19 = BYTE7(v173);
    else
      v19 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
    if (SBYTE7(v173) < 0)
    {
      operator delete(__p[0]);
      if (!v17)
        goto LABEL_27;
LABEL_26:
      xpc_release(object);
      goto LABEL_27;
    }
    if (v17)
      goto LABEL_26;
LABEL_27:
    v20 = a1[11];
    if (v20)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v20 + 48))(v20, &aBlock);
    v174[1] = 0;
    v174[0] = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v174, (const __CFDictionary *)v176);
    v21 = (__CFString *)MEMORY[0x24BDAC760];
    *(_OWORD *)__p = 0u;
    v173 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v169[0] = v21;
    v169[1] = (void *)1174405120;
    *(_QWORD *)&v170 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke;
    *((_QWORD *)&v170 + 1) = &__block_descriptor_tmp_15_5;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v171, (const ctu::cf::dict_adapter *)v174);
    v22 = (int *)qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>(__p, 17);
    ((void (*)(uint64_t, int *))v170)((uint64_t)v169, v22);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "AllowedProtocolMaskInRoamingLTE");
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v174, (const __CFString *)__s.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__s);
    if ((Int - 1) <= 2)
    {
      v209 = v21;
      v210 = 0x40000000;
      v211 = (void (*)(uint64_t, _DWORD *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2;
      v212 = &__block_descriptor_tmp_21_3;
      LODWORD(v213) = Int - 1;
      v24 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>(__p, 65);
      v211((uint64_t)&v209, v24);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "AllowedProtocolMaskInRoamingUMTS");
    v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v174, (const __CFString *)__s.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__s);
    if ((v25 - 1) <= 2)
    {
      v204 = v21;
      v205 = 0x40000000;
      v206 = (void (*)(uint64_t, _DWORD *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3;
      v207 = &__block_descriptor_tmp_24_2;
      v208 = v25 - 1;
      v26 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>(__p, 66);
      v206((uint64_t)&v204, v26);
    }
    v164 = v21;
    v165 = 1174405120;
    v166 = (void (*)(__CFString **, uint64_t))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_4;
    v167 = &__block_descriptor_tmp_27;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v168, (const ctu::cf::dict_adapter *)v174);
    v27 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>(__p, 20);
    v166(&v164, v27);
    memset(&__s, 0, sizeof(__s));
    memset(&v219, 0, sizeof(v219));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v196, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&v196);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__s.__r_.__value_.__l.__size_)
        goto LABEL_42;
      *(_QWORD *)&v224 = v21;
      *((_QWORD *)&v224 + 1) = 1174405120;
      v225 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_29;
      v226 = &__block_descriptor_tmp_30;
      std::string::__init_copy_ctor_external(&v227, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
        goto LABEL_42;
      *(_QWORD *)&v224 = v21;
      *((_QWORD *)&v224 + 1) = 1174405120;
      v225 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_29;
      v226 = &__block_descriptor_tmp_30;
      v227 = __s;
    }
    v28 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::UserName>(__p, 27);
    v225((uint64_t)&v224, v28);
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v227.__r_.__value_.__l.__data_);
LABEL_42:
    memset(&v219, 0, sizeof(v219));
    memset(&v196, 0, sizeof(v196));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v161, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&v161);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v219.__r_.__value_.__l.__size_)
        goto LABEL_51;
      v220[0] = v21;
      v220[1] = (xpc_object_t)1174405120;
      *(_QWORD *)&v221 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_32;
      *((_QWORD *)&v221 + 1) = &__block_descriptor_tmp_33_0;
      std::string::__init_copy_ctor_external(&v222, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&v219.__r_.__value_.__s + 23))
        goto LABEL_51;
      v220[0] = v21;
      v220[1] = (xpc_object_t)1174405120;
      *(_QWORD *)&v221 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_32;
      *((_QWORD *)&v221 + 1) = &__block_descriptor_tmp_33_0;
      v222 = v219;
    }
    v29 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::Password>(__p, 28);
    ((void (*)(uint64_t, std::string *))v221)((uint64_t)v220, v29);
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v222.__r_.__value_.__l.__data_);
LABEL_51:
    memset(&v196, 0, sizeof(v196));
    v161 = 0;
    v162 = 0;
    v163 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v177, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&v177);
    if (SHIBYTE(v163) < 0)
      operator delete(v161);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v196.__r_.__value_.__l.__size_)
        goto LABEL_60;
      v214 = v21;
      v215 = 1174405120;
      v216 = (uint64_t)___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_35;
      v217 = (uint64_t)&__block_descriptor_tmp_37_3;
      std::string::__init_copy_ctor_external(&v218, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&v196.__r_.__value_.__s + 23))
        goto LABEL_60;
      v214 = v21;
      v215 = 1174405120;
      v216 = (uint64_t)___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_35;
      v217 = (uint64_t)&__block_descriptor_tmp_37_3;
      v218 = v196;
    }
    v30 = (char *)qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>(__p, 29);
    ((void (*)(uint64_t, char *))v216)((uint64_t)&v214, v30);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
LABEL_60:
    v156 = v21;
    v157 = 1174405120;
    v158 = (void (*)(void **, uint64_t))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_38;
    v159 = &__block_descriptor_tmp_42_2;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v160, (const ctu::cf::dict_adapter *)v174);
    v31 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>(__p, 31);
    v158(&v156, v31);
    LODWORD(v177) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v161, "APNClass");
    v32 = (int *)(*(uint64_t (**)(__CFDictionary **, void *))v174[0])(v174, v161);
    v33 = v32;
    if (v32)
    {
      v34 = CFGetTypeID(v32);
      if (v34 == CFNumberGetTypeID())
        v36 = ctu::cf::assign((ctu::cf *)&v177, v33, v35);
      else
        v36 = 0;
      CFRelease(v33);
    }
    else
    {
      v36 = 0;
    }
    MEMORY[0x2199FDFFC](&v161);
    if (v36 && (v177 & 0x80000000) == 0)
    {
      v198 = v21;
      v199 = 0x40000000;
      v200 = (void (*)(uint64_t, _BYTE *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_44;
      v201 = &__block_descriptor_tmp_46_2;
      v202 = (int)v177;
      v37 = (_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>(__p, 49);
      v200((uint64_t)&v198, v37);
    }
    LOBYTE(v203) = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v161, v130);
    v38 = (BOOL *)(*(uint64_t (**)(__CFDictionary **, void *))v174[0])(v174, v161);
    v39 = v38;
    if (v38)
    {
      v40 = CFGetTypeID(v38);
      if (v40 == CFBooleanGetTypeID())
        v42 = ctu::cf::assign((ctu::cf *)&v203, v39, v41);
      else
        v42 = 0;
      CFRelease(v39);
      MEMORY[0x2199FDFFC](&v161);
      if (v42)
      {
        *(_QWORD *)&v153 = v21;
        *((_QWORD *)&v153 + 1) = 0x40000000;
        *(_QWORD *)&v154 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2_47;
        *((_QWORD *)&v154 + 1) = &__block_descriptor_tmp_49_2;
        v155 = v203;
        v43 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>(__p, 62);
        ((void (*)(__int128 *, uint64_t))v154)(&v153, v43);
      }
    }
    else
    {
      MEMORY[0x2199FDFFC](&v161);
    }
    v148 = v21;
    v149 = 0x40000000;
    v150 = (uint64_t)___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3_50;
    v151 = &__block_descriptor_tmp_52_0;
    v152 = v12 & 1;
    v44 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>(__p, 144);
    ((void (*)(__CFString **, uint64_t))v150)(&v148, v44);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(__p, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100]((uint64_t *)&v143);
    MEMORY[0x2199FE02C](v160);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    v11 = (_QWORD *)MEMORY[0x24BEDB7F0];
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    MEMORY[0x2199FE02C](v168);
    MEMORY[0x2199FE02C](v171);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    MEMORY[0x2199FE02C](v174);
    *(_QWORD *)&aBlock = v13;
    *(_QWORD *)((char *)&aBlock + *(_QWORD *)(v13 - 24)) = v128;
    *(_QWORD *)&v179 = v127;
    *((_QWORD *)&v179 + 1) = v126;
    if (SHIBYTE(v184) < 0)
      operator delete(v183[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199FEA70](&v186);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v176);
    ++v10;
    v14 -= 32;
    v12 = 1;
  }
  while (v10 != v131);
  v45 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(&v143[v14 / 0xFFFFFFFFFFFFFFF8], 145);
  if (v124)
    v46 = 2;
  else
    v46 = 1;
  *v45 = v46;
LABEL_89:
  v48 = v143;
  v47 = v144;
  if (v143 != v144)
  {
    v49 = 0;
    do
    {
      v221 = 0u;
      *(_OWORD *)v220 = 0u;
      qmi::MutableMessageBase::MutableMessageBase();
      *(_QWORD *)&v224 = a1 + 12;
      *((_QWORD *)&v224 + 1) = QMIServiceMsg::create();
      LODWORD(v225) = 25000;
      v226 = 0;
      v227.__r_.__value_.__r.__words[0] = 0;
      v136[0] = MEMORY[0x24BDAC760];
      v136[1] = 1174405120;
      v136[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke;
      v136[3] = &unk_24D5CC8C8;
      v136[5] = a1;
      group = v132;
      if (v132)
      {
        dispatch_retain(v132);
        if (group)
          dispatch_group_enter(group);
      }
      v136[4] = v146;
      v138 = v49;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 0x40000000;
      *(_QWORD *)&v179 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_8;
      *((_QWORD *)&v179 + 1) = &unk_24D5CCD20;
      *(_QWORD *)&v180 = v136;
      v50 = _Block_copy(&aBlock);
      v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      if (*((_QWORD *)&v224 + 1))
      {
        qmi::Client::send();
        v50 = (void *)v227.__r_.__value_.__r.__words[0];
      }
      if (v50)
        _Block_release(v50);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v220);
      v48 += 4;
      ++v49;
    }
    while (v48 != v47);
    goto LABEL_132;
  }
  v195 = 0;
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  v185 = 0u;
  v186 = 0u;
  *(_OWORD *)v183 = 0u;
  v184 = 0u;
  v181 = 0u;
  *(_OWORD *)v182 = 0u;
  v179 = 0u;
  v180 = 0u;
  aBlock = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v179, (uint64_t)"Nothing found to push for ", 26);
  v224 = 0uLL;
  v225 = 0;
  ctu::cf::assign();
  *(_OWORD *)v220 = v224;
  *(_QWORD *)&v221 = v225;
  if (SHIBYTE(v225) >= 0)
    v53 = v220;
  else
    v53 = (xpc_object_t *)v224;
  if (SHIBYTE(v225) >= 0)
    v54 = HIBYTE(v225);
  else
    v54 = *((_QWORD *)&v224 + 1);
  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
  v58 = *(unsigned __int8 *)(v125 + 8);
  if (*(_BYTE *)(v125 + 8))
  {
    ctu::cf_to_xpc(*(ctu **)v125, v56);
    xpc::object::to_string((xpc::object *)&v176);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v224, "empty");
  }
  if (SHIBYTE(v225) >= 0)
    v59 = &v224;
  else
    v59 = (__int128 *)v224;
  if (SHIBYTE(v225) >= 0)
    v60 = HIBYTE(v225);
  else
    v60 = *((_QWORD *)&v224 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v59, v60);
  if (SHIBYTE(v225) < 0)
  {
    operator delete((void *)v224);
    if (v58)
      goto LABEL_124;
  }
  else
  {
    if (!v58)
      goto LABEL_125;
LABEL_124:
    xpc_release(v176);
  }
LABEL_125:
  if (SBYTE7(v221) < 0)
    operator delete(v220[0]);
  v61 = a1[11];
  if (v61)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v61 + 48))(v61, &aBlock);
  *(_QWORD *)&aBlock = *v11;
  v62 = v11[9];
  *(_QWORD *)((char *)&aBlock + *(_QWORD *)(aBlock - 24)) = v11[8];
  *(_QWORD *)&v179 = v62;
  *((_QWORD *)&v179 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v184) < 0)
    operator delete(v183[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199FEA70](&v186);
LABEL_132:
  *(_QWORD *)&aBlock = &v140;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  *(_QWORD *)&aBlock = &v143;
  std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  v161 = 0;
  v162 = 0;
  v163 = 0;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v135, (const void **)v125);
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v135);
  v64 = (const void **)v161;
  v63 = v162;
  v7 = v132;
  v8 = &loc_216A9C000;
  if (v161 == v162)
  {
    v195 = 0;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    *(_OWORD *)v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    *(_OWORD *)v182 = 0u;
    v179 = 0u;
    v180 = 0u;
    aBlock = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v179, (uint64_t)"Nothing found for fallback APNs: ", 33);
    v105 = *(unsigned __int8 *)(v125 + 8);
    if (*(_BYTE *)(v125 + 8))
    {
      ctu::cf_to_xpc(*(ctu **)v125, v103);
      xpc::object::to_string((xpc::object *)v220);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v224, "empty");
    }
    if (SHIBYTE(v225) >= 0)
      v107 = &v224;
    else
      v107 = (__int128 *)v224;
    if (SHIBYTE(v225) >= 0)
      v108 = HIBYTE(v225);
    else
      v108 = *((_QWORD *)&v224 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v107, v108);
    if (SHIBYTE(v225) < 0)
    {
      operator delete((void *)v224);
      if (!v105)
      {
LABEL_243:
        v109 = a1[11];
        if (v109)
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v109 + 48))(v109, &aBlock);
        *(_QWORD *)&aBlock = *MEMORY[0x24BEDB7F0];
        v110 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)((char *)&aBlock + *(_QWORD *)(aBlock - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        *(_QWORD *)&v179 = v110;
        *((_QWORD *)&v179 + 1) = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v184) < 0)
          operator delete(v183[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2199FEA70](&v186);
        goto LABEL_248;
      }
    }
    else if (!v105)
    {
      goto LABEL_243;
    }
    xpc_release(v220[0]);
    goto LABEL_243;
  }
  if (v132)
  {
    dispatch_retain(v132);
    dispatch_group_enter(v132);
    v64 = (const void **)v161;
    v63 = v162;
  }
  v134[0] = MEMORY[0x24BDAC760];
  v134[1] = 0x40000000;
  v134[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_5;
  v134[3] = &unk_24D5CC900;
  v134[4] = v146;
  if (v64 != v63)
  {
    v148 = 0;
    v149 = (uint64_t)&v148;
    v150 = 0x2000000000;
    LOBYTE(v151) = 0;
    memset(&v196, 0, sizeof(v196));
    v65 = (const char *)*MEMORY[0x24BDC3DA8];
    v66 = *MEMORY[0x24BEDB7F0];
    v129 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v67 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v68 = MEMORY[0x24BEDB848] + 16;
    v69 = (__CFString *)MEMORY[0x24BDAC760];
    while (1)
    {
      v174[0] = 0;
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)v174, v64);
      v195 = 0;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v189 = 0u;
      v190 = 0u;
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      *(_OWORD *)v183 = 0u;
      v184 = 0u;
      v181 = 0u;
      *(_OWORD *)v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      aBlock = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v179, (uint64_t)"trying to push fallback APN ", 28);
      v72 = v174[0]
          ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
          : 0;
      if (v72)
      {
        ctu::cf_to_xpc(v174[0], v70);
        xpc::object::to_string((xpc::object *)&v177);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v224, "empty");
      }
      v73 = SHIBYTE(v225) >= 0 ? &v224 : (__int128 *)v224;
      v74 = SHIBYTE(v225) >= 0 ? HIBYTE(v225) : *((_QWORD *)&v224 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
      if (SHIBYTE(v225) < 0)
        break;
      if (v72)
        goto LABEL_153;
LABEL_154:
      v75 = a1[11];
      if (v75)
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 48))(v75, &aBlock);
      v143 = 0;
      v144 = 0;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v143, v174[0]);
      v153 = 0u;
      v154 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v153);
      v76 = qmi::MutableMessageBase::getTLV<wds::tlv::ProfileId>(&v153, 1);
      *(_DWORD *)v76 = 1;
      *(_BYTE *)(v76 + 4) = -1;
      __p[1] = 0;
      __p[0] = 0;
      *(_QWORD *)&v173 = 0;
      v169[1] = 0;
      v169[0] = 0;
      *(_QWORD *)&v170 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v164, "username");
      ctu::cf::map_adapter::getString();
      MEMORY[0x2199FDFFC](&v164);
      if (SBYTE7(v170) < 0)
        operator delete(v169[0]);
      if (SBYTE7(v173) < 0)
      {
        if (!__p[1])
          goto LABEL_165;
        *(_QWORD *)&v224 = v69;
        *((_QWORD *)&v224 + 1) = 1174405120;
        v225 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2;
        v226 = &__block_descriptor_tmp_65_3;
        std::string::__init_copy_ctor_external(&v227, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        if (!BYTE7(v173))
          goto LABEL_165;
        *(_QWORD *)&v224 = v69;
        *((_QWORD *)&v224 + 1) = 1174405120;
        v225 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2;
        v226 = &__block_descriptor_tmp_65_3;
        *(_OWORD *)&v227.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v227.__r_.__value_.__r.__words[2] = v173;
      }
      v77 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::UserName>(&v153, 155);
      v225((uint64_t)&v224, v77);
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v227.__r_.__value_.__l.__data_);
LABEL_165:
      memset(&__s, 0, sizeof(__s));
      v169[1] = 0;
      v169[0] = 0;
      *(_QWORD *)&v170 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v164, "password");
      ctu::cf::map_adapter::getString();
      MEMORY[0x2199FDFFC](&v164);
      if (SBYTE7(v170) < 0)
        operator delete(v169[0]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__s.__r_.__value_.__l.__size_)
          goto LABEL_174;
        v220[0] = v69;
        v220[1] = (xpc_object_t)1174405120;
        *(_QWORD *)&v221 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_66;
        *((_QWORD *)&v221 + 1) = &__block_descriptor_tmp_67_1;
        std::string::__init_copy_ctor_external(&v222, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else
      {
        if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
          goto LABEL_174;
        v220[0] = v69;
        v220[1] = (xpc_object_t)1174405120;
        *(_QWORD *)&v221 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_66;
        *((_QWORD *)&v221 + 1) = &__block_descriptor_tmp_67_1;
        v222 = __s;
      }
      v78 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::Password>(&v153, 156);
      ((void (*)(uint64_t, std::string *))v221)((uint64_t)v220, v78);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
LABEL_174:
      v169[0] = v69;
      v169[1] = (void *)0x40000000;
      *(_QWORD *)&v170 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_68;
      *((_QWORD *)&v170 + 1) = &__block_descriptor_tmp_69_1;
      v171[0] = &v143;
      v79 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>(&v153, 161);
      ((void (*)(uint64_t, std::string *))v170)((uint64_t)v169, v79);
      v164 = v69;
      v165 = 0x40000000;
      v166 = (void (*)(__CFString **, uint64_t))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_70;
      v167 = &__block_descriptor_tmp_72_0;
      v168[0] = &v143;
      v80 = qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP2>(&v153, 162);
      v166(&v164, v80);
      memset(&v219, 0, sizeof(v219));
      v156 = 0;
      v157 = 0;
      v158 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v209, "auth_type");
      ctu::cf::map_adapter::getString();
      MEMORY[0x2199FDFFC](&v209);
      if (SHIBYTE(v158) < 0)
        operator delete(v156);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v219.__r_.__value_.__l.__size_)
        {
          v214 = v69;
          v215 = 1174405120;
          v216 = (uint64_t)___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3;
          v217 = (uint64_t)&__block_descriptor_tmp_73_0;
          std::string::__init_copy_ctor_external(&v218, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
LABEL_181:
          v81 = (char *)qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>(&v153, 154);
          ((void (*)(uint64_t, char *))v216)((uint64_t)&v214, v81);
          if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v218.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)&v219.__r_.__value_.__s + 23))
      {
        v214 = v69;
        v215 = 1174405120;
        v216 = (uint64_t)___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3;
        v217 = (uint64_t)&__block_descriptor_tmp_73_0;
        v218 = v219;
        goto LABEL_181;
      }
      v156 = v69;
      v157 = 0x40000000;
      v158 = (void (*)(void **, uint64_t))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_74;
      v159 = &__block_descriptor_tmp_77_0;
      v160[0] = &v143;
      v82 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrNeeded>(&v153, 163);
      v158(&v156, v82);
      v209 = v69;
      v210 = 0x40000000;
      v211 = (void (*)(uint64_t, _DWORD *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_78;
      v212 = &__block_descriptor_tmp_82_0;
      v213 = &v143;
      v83 = (int *)qmi::MutableMessageBase::getTLV<wds::tlv::RatType>(&v153, 168);
      v211((uint64_t)&v209, v83);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v204, "InactivityTimeout");
      v84 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v143, v204);
      MEMORY[0x2199FDFFC](&v204);
      if (v84 >= 1)
      {
        v204 = v69;
        v205 = 0x40000000;
        v206 = (void (*)(uint64_t, _DWORD *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3_84;
        v207 = &__block_descriptor_tmp_86_0;
        v208 = v84;
        v85 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::InactivityTimer>(&v153, 170);
        v206((uint64_t)&v204, v85);
      }
      v203 = -1;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v198, "APNClass");
      v86 = (int *)(*v143)(&v143, v198);
      v87 = v86;
      if (v86)
      {
        v88 = CFGetTypeID(v86);
        if (v88 == CFNumberGetTypeID())
          v90 = ctu::cf::assign((ctu::cf *)&v203, v87, v89);
        else
          v90 = 0;
        CFRelease(v87);
      }
      else
      {
        v90 = 0;
      }
      MEMORY[0x2199FDFFC](&v198);
      if (v90 && (v203 & 0x80000000) == 0)
      {
        v198 = v69;
        v199 = 0x40000000;
        v200 = (void (*)(uint64_t, _BYTE *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_4;
        v201 = &__block_descriptor_tmp_87;
        v202 = v203;
        v91 = (_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>(&v153, 49);
        v200((uint64_t)&v198, v91);
      }
      v197 = 1;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v140, v65);
      v92 = (BOOL *)(*v143)(&v143, v140);
      v93 = v92;
      if (v92)
      {
        v94 = CFGetTypeID(v92);
        if (v94 == CFBooleanGetTypeID())
          v96 = ctu::cf::assign((ctu::cf *)&v197, v93, v95);
        else
          v96 = 0;
        CFRelease(v93);
        MEMORY[0x2199FDFFC](&v140);
        if (v96)
        {
          v97 = v197;
          *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>(&v153, 62) = v97 ^ 1;
        }
      }
      else
      {
        MEMORY[0x2199FDFFC](&v140);
      }
      v98 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
      *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::Append>(&v153, 240) = (_QWORD)v98 != *((_QWORD *)&v98 + 1);
      std::vector<wds::ModifyProfileSettings3GPP2::Request>::push_back[abi:ne180100]((uint64_t *)&v196);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SBYTE7(v173) < 0)
        operator delete(__p[0]);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v153);
      MEMORY[0x2199FE02C](&v143);
      *(_QWORD *)&aBlock = v66;
      *(_QWORD *)((char *)&aBlock + *(_QWORD *)(v66 - 24)) = v129;
      *(_QWORD *)&v179 = v67;
      *((_QWORD *)&v179 + 1) = v68;
      if (SHIBYTE(v184) < 0)
        operator delete(v183[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2199FEA70](&v186);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)v174);
      if (++v64 == v63)
      {
        size = v196.__r_.__value_.__l.__size_;
        v100 = v196.__r_.__value_.__r.__words[0];
        if (v196.__r_.__value_.__r.__words[0] == v196.__r_.__value_.__l.__size_)
        {
          v106 = a1[5];
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(aBlock) = 0;
            _os_log_impl(&dword_216897000, v106, OS_LOG_TYPE_DEFAULT, "#I Nothing to push for fallback APN", (uint8_t *)&aBlock, 2u);
          }
        }
        else
        {
          v101 = 0;
          v214 = 0;
          v215 = (uint64_t)&v214;
          v216 = 0x2000000000;
          v217 = (uint64_t)(v196.__r_.__value_.__l.__size_ - v196.__r_.__value_.__r.__words[0]) >> 5;
          do
          {
            *(_OWORD *)v169 = 0u;
            v170 = 0u;
            qmi::MutableMessageBase::MutableMessageBase();
            v220[0] = a1 + 12;
            v220[1] = (xpc_object_t)QMIServiceMsg::create();
            LODWORD(v221) = 25000;
            *((_QWORD *)&v221 + 1) = 0;
            v222.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
            *((_QWORD *)&aBlock + 1) = 1174405120;
            *(_QWORD *)&v179 = ___ZN30Mav16QMIAttachApnCommandDriver21pushFallbackApns_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEEN8dispatch13group_sessionEU13block_pointerFvbE_block_invoke;
            *((_QWORD *)&v179 + 1) = &unk_24D5CCB20;
            *((_QWORD *)&v181 + 1) = a1;
            v182[0] = v132;
            if (v132)
            {
              dispatch_retain(v132);
              if (v182[0])
                dispatch_group_enter(v182[0]);
            }
            LODWORD(v182[1]) = v101;
            *(_QWORD *)&v181 = &v214;
            *((_QWORD *)&v180 + 1) = &v148;
            *(_QWORD *)&v180 = v134;
            *(_QWORD *)&v224 = MEMORY[0x24BDAC760];
            *((_QWORD *)&v224 + 1) = 0x40000000;
            v225 = (void (*)(uint64_t, std::string *))___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_8;
            v226 = &unk_24D5CCD20;
            v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&aBlock;
            v102 = _Block_copy(&v224);
            v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
            if (v220[1])
            {
              qmi::Client::send();
              v102 = (void *)v222.__r_.__value_.__r.__words[0];
            }
            if (v102)
              _Block_release(v102);
            if (v182[0])
            {
              dispatch_group_leave(v182[0]);
              if (v182[0])
                dispatch_release(v182[0]);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v169);
            v100 += 32;
            ++v101;
          }
          while (v100 != size);
          _Block_object_dispose(&v214, 8);
        }
        *(_QWORD *)&v224 = &v196;
        std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
        _Block_object_dispose(&v148, 8);
        v7 = v132;
        v8 = (_QWORD *)&loc_216A9C000;
        goto LABEL_229;
      }
    }
    operator delete((void *)v224);
    if (!v72)
      goto LABEL_154;
LABEL_153:
    xpc_release(v177);
    goto LABEL_154;
  }
LABEL_229:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
LABEL_248:
  *(_QWORD *)&aBlock = &v161;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
LABEL_249:
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, a1 + 1);
  v111 = aBlock;
  if (*((_QWORD *)&aBlock + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&aBlock + 1) + 16);
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
    v114 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v111 + 1) + 16))(*((_QWORD *)&v111 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v111 + 1));
    }
  }
  v116 = a1[3];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = v8[115];
  block[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_9;
  block[3] = &unk_24D5CC928;
  block[5] = a1;
  v229 = v111;
  if (*((_QWORD *)&v111 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 16);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  block[4] = v146;
  v119 = v230;
  v120 = *((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    if (*((__int128 **)&v233 + 1) != &v232)
    {
      v120 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v233 + 1) + 16))(*((_QWORD *)&v233 + 1));
      goto LABEL_262;
    }
    v231 = v230;
    (*(void (**)(__int128 *, _BYTE *))(v232 + 24))(&v232, v230);
  }
  else
  {
LABEL_262:
    v231 = (_BYTE *)v120;
  }
  dispatch_group_notify(v7, v116, block);
  if (v231 == v230)
  {
    v121 = 4;
LABEL_268:
    (*(void (**)(_QWORD *))(*v119 + 8 * v121))(v119);
  }
  else if (v231)
  {
    v121 = 5;
    v119 = v231;
    goto LABEL_268;
  }
  if (*((_QWORD *)&v229 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v229 + 1));
  if (*((_QWORD *)&v111 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v111 + 1));
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  _Block_object_dispose(v146, 8);
  result = (__int128 *)*((_QWORD *)&v233 + 1);
  if (*((__int128 **)&v233 + 1) == &v232)
  {
    v123 = 4;
    result = &v232;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v123))();
  }
  else if (*((_QWORD *)&v233 + 1))
  {
    v123 = 5;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v123))();
  }
  return result;
}

void sub_2169350A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 67109378;
      v10 = v4;
      v11 = 2080;
      v12 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v9, 0x12u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(a1 + 56);
      v9 = 67109120;
      v10 = v8;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v9, 8u);
    }
  }
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_5(uint64_t result, int a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_9(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[5];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[6])
        goto LABEL_10;
      v6 = *(_QWORD *)(v3 + 88);
      if (!v6)
        goto LABEL_10;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(a1 + 8));
      (*(void (**)(uint64_t, BOOL, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v7 != 0, 0, 1, v12);
      v8 = v13;
      if (v13 == v12)
      {
        v9 = 4;
        v8 = v12;
      }
      else
      {
        if (!v13)
          goto LABEL_10;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2169359CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke(uint64_t a1, int *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;
  int v5;
  __CFString *v6;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  result = MEMORY[0x2199FDFFC](&v6);
  v5 = 2 * ((_DWORD)v3 == 2);
  if ((_DWORD)v3 == 3)
    v5 = 3;
  *a2 = v5;
  return result;
}

uint64_t __copy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1, uint64_t a2)
{
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 32), (const ctu::cf::dict_adapter *)(a2 + 32));
}

void __destroy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE()
{
  JUMPOUT(0x2199FE02CLL);
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_4(uint64_t a1, std::string *a2)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x2199FDFFC](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_216935B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_29(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_32(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_35(uint64_t a1, char *a2)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  size_t result;
  _QWORD *v8;
  char v9;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 55);
  else
    v5 = *(_QWORD *)(a1 + 40);
  if (v5 == strlen((const char *)*MEMORY[0x24BDC3DC8]))
  {
    v6 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v6, (const void *)*MEMORY[0x24BDC3DC8], v5);
    if (!(_DWORD)result)
    {
      v9 = 1;
      goto LABEL_16;
    }
  }
  result = strlen((const char *)*MEMORY[0x24BDC3DC0]);
  if (v5 == result)
  {
    v8 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v8, (const void *)*MEMORY[0x24BDC3DC0], v5);
    if (!(_DWORD)result)
    {
      v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_38(uint64_t a1, _BYTE *a2)
{
  std::string *p_p;
  char Bool;
  std::string __p;
  __CFString *v7;

  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x2199FDFFC](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_44(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2_47(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3_50(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  v2 = (uint64_t)(a1 + 2);
  v3 = v4;
  v5 = *(_QWORD *)(v2 - 8);
  if (v5 >= v4)
  {
    v8 = (uint64_t)(v5 - *a1) >> 5;
    if ((unint64_t)(v8 + 1) >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v3 - *a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v17 = v2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v2, v11);
    else
      v12 = 0;
    v13 = v12;
    v14 = &v12[32 * v8];
    v16 = &v12[32 * v11];
    qmi::MutableMessageBase::MutableMessageBase();
    v15 = v14 + 32;
    std::vector<wds::ModifyProfileSettings3GPP2::Request>::__swap_out_circular_buffer(a1, &v13);
    v7 = a1[1];
    result = std::__split_buffer<wds::ModifyProfileSettings3GPP::Request>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    result = qmi::MutableMessageBase::MutableMessageBase();
    v7 = v5 + 32;
    a1[1] = v5 + 32;
  }
  a1[1] = v7;
  return result;
}

void sub_216935EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav16QMIAttachApnCommandDriver21pushFallbackApns_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEEN8dispatch13group_sessionEU13block_pointerFvbE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 67109378;
      v11 = v4;
      v12 = 2080;
      v13 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending fallback APN failed with error %d (%s)", (uint8_t *)&v10, 0x12u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(a1 + 72);
      v10 = 67109120;
      v11 = v8;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Fallback APN success response received (request order %d)", (uint8_t *)&v10, 8u);
    }
  }
  if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  }
}

void __copy_helper_block_e8_64c31_ZTSKN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 64);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_64c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 64);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_66(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_68(uint64_t a1, std::string *a2)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x2199FDFFC](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_2169361B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_70(uint64_t a1, int *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;
  int v5;
  __CFString *v6;

  v3 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  result = MEMORY[0x2199FDFFC](&v6);
  v5 = (_DWORD)v3 == 2;
  if ((_DWORD)v3 == 3)
    v5 = 2;
  *a2 = v5;
  return result;
}

size_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3(uint64_t a1, char *a2)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  size_t result;
  _QWORD *v8;
  char v9;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 55);
  else
    v5 = *(_QWORD *)(a1 + 40);
  if (v5 == strlen((const char *)*MEMORY[0x24BDC3DC8]))
  {
    v6 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v6, (const void *)*MEMORY[0x24BDC3DC8], v5);
    if (!(_DWORD)result)
    {
      v9 = 1;
      goto LABEL_16;
    }
  }
  result = strlen((const char *)*MEMORY[0x24BDC3DC0]);
  if (v5 == result)
  {
    v8 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v8, (const void *)*MEMORY[0x24BDC3DC0], v5);
    if (!(_DWORD)result)
    {
      v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_74(uint64_t a1, _BYTE *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;
  __CFString *v5;

  v3 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "PcscfAddressRequired");
  LOBYTE(v3) = ctu::cf::map_adapter::getBool(v3, v5);
  result = MEMORY[0x2199FDFFC](&v5);
  *a2 = (_BYTE)v3;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_78(uint64_t a1, int *a2)
{
  ctu::cf::map_adapter *v4;
  int Bool;
  ctu::cf::map_adapter *v6;
  uint64_t result;
  int v8;
  __CFString *v9;

  v4 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, "hrpd");
  Bool = ctu::cf::map_adapter::getBool(v4, v9);
  MEMORY[0x2199FDFFC](&v9);
  v6 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, "ehrpd");
  LODWORD(v6) = ctu::cf::map_adapter::getBool(v6, v9);
  result = MEMORY[0x2199FDFFC](&v9);
  if ((_DWORD)v6)
    v8 = 3;
  else
    v8 = 1;
  if (!Bool)
    v8 = 2;
  *a2 = v8;
  return result;
}

void sub_216936454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FDFFC](va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3_84(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_4(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver*)#1}::operator() const(Mav16QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver*)#1}::operator() const(Mav16QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::AttachProfileAction>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::AttachProfileAction>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 12;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::AttachProfileAction>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = &off_24D5CCD68;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CCD68;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t getQmiDownLinkAudioPath(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  if (a1 == 0x4000000)
    v1 = 10;
  else
    v1 = 0;
  if (a1 == 0x2000000)
    v2 = 9;
  else
    v2 = v1;
  if (a1 == 0x1000000)
    v3 = 8;
  else
    v3 = v2;
  if (a1 == 0x800000)
    v4 = 7;
  else
    v4 = 0;
  if (a1 == 0x2000)
    v5 = 6;
  else
    v5 = v4;
  if (a1 <= 0xFFFFFF)
    v6 = v5;
  else
    v6 = v3;
  if (a1 == 32)
    v7 = 5;
  else
    v7 = 0;
  if (a1 == 16)
    v8 = 4;
  else
    v8 = v7;
  if (a1 == 8)
    v9 = 3;
  else
    v9 = v8;
  if (a1 == 4)
    v10 = 2;
  else
    v10 = 0;
  if (a1 == 2)
    v11 = 1;
  else
    v11 = v10;
  if (a1 <= 7)
    v9 = v11;
  if (a1 < 0x2000)
    return v9;
  else
    return v6;
}

uint64_t getQmiUplinkAudioPath(int a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;

  if (a1 == 0x200000)
    v1 = 8;
  else
    v1 = 0;
  if (a1 == 0x100000)
    v2 = 7;
  else
    v2 = v1;
  if (a1 == 0x80000)
    v3 = 6;
  else
    v3 = 0;
  if (a1 == 128)
    v4 = 5;
  else
    v4 = v3;
  if (a1 < 0x100000)
    v2 = v4;
  if (a1 == 32)
    v5 = 4;
  else
    v5 = 0;
  if (a1 == 8)
    v6 = 3;
  else
    v6 = v5;
  if (a1 == 4)
    v7 = 2;
  else
    v7 = 0;
  if (a1 == 2)
    v8 = 1;
  else
    v8 = v7;
  if (a1 <= 7)
    v6 = v8;
  if (a1 <= 127)
    return v6;
  else
    return v2;
}

void QMIEmbmsCommandDriver::create(_QWORD *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;

  *a3 = 0;
  a3[1] = 0;
  v6 = operator new();
  v8 = *a2;
  v7 = v8;
  *a2 = 0;
  QMIEmbmsCommandDriver::QMIEmbmsCommandDriver(v6, a1, &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIEmbmsCommandDriver>::shared_ptr[abi:ne180100]<QMIEmbmsCommandDriver,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
}

void sub_216936938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0x10E1C40C2CCF1AALL);
  _Unwind_Resume(exception_object);
}

uint64_t QMIEmbmsCommandDriver::QMIEmbmsCommandDriver(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v6;
  NSObject *v7;
  capabilities::ct *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[3];
  _QWORD *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = MEMORY[0x24BDC45D0] + 16;
  v6 = (_QWORD *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v27, (const char *)*MEMORY[0x24BDC3E90], "embms.qmi");
  *v6 = 0;
  v6[1] = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v7)
    dispatch_retain(v7);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v25);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
  v23[0] = &unk_24D5CCF40;
  v24 = v23;
  v8 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v23);
  *(_QWORD *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_24D5CCFE0;
    v9[1] = a1;
    v10 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    if (!v10)
      goto LABEL_14;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v11 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v27, (uint64_t)v25);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v11);
    v12 = v28;
    if (v28 == v27)
    {
      v13 = 4;
      v12 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_12;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
    v14 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_14:
  v15 = v26;
  if (v26 == v25)
  {
    v16 = 4;
    v15 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_19;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
  v17 = v24;
  if (v24 == v23)
  {
    v18 = 4;
    v17 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_24;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_24:
  *(_QWORD *)a1 = &off_24D5CCDA0;
  *(_QWORD *)(a1 + 56) = *a2;
  v19 = a2[1];
  *(_QWORD *)(a1 + 64) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 72), *(os_log_s **)(a1 + 40));
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_216936C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  EmbmsCommandDriver *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  MEMORY[0x2199FEAC4](v24, 0x10A1C40FF1576FELL);
  v29 = *((_QWORD *)v21 + 6);
  *((_QWORD *)v21 + 6) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = a17;
  if (a17 == &a14)
  {
    v31 = 4;
    v30 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_13:
  v32 = a13;
  if (a13 == &a10)
  {
    v33 = 4;
    v32 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_18;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_18:
  MEMORY[0x2199FDF6C](v23);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v22);
  EmbmsCommandDriver::~EmbmsCommandDriver(v21);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::~QMIEmbmsCommandDriver(QMIEmbmsCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D5CCDA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  EmbmsCommandDriver::~EmbmsCommandDriver(this);
}

{
  QMIEmbmsCommandDriver::~QMIEmbmsCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t QMIEmbmsCommandDriver::start(QMIEmbmsCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMIEmbmsCommandDriver::shutdown(uint64_t a1)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutdown", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

uint64_t QMIEmbmsCommandDriver::bootstrap(_QWORD *a1, uint64_t a2, xpc_endpoint_t *a3, uint64_t *a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t (**v12)();
  unsigned int v13;
  char *v14;
  xpc_object_t v15;
  void *v16;
  xpc_object_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  xpc_object_t v32;
  uint64_t (**v33)();
  uint8_t *v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  xpc_object_t object;
  std::__shared_weak_count *v49;
  NSObject *v50;
  uint64_t (**v51)();
  uint64_t (**v52)();
  uint64_t (*v53)(_QWORD);
  uint64_t (***v54)();
  void *__p[2];
  char v56;
  void **v57;
  void *v58;
  _QWORD *v59;
  __int128 v60;
  uint8_t buf[16];
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  v8 = *a4;
  v7 = a4[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a1[13];
  a1[12] = v8;
  a1[13] = v7;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  subscriber::makeSimSlotRange();
  v12 = v51;
  if (v51 != v52)
  {
    while ((v53(*(unsigned int *)v12) & 1) == 0)
    {
      v12 = (uint64_t (**)())((char *)v12 + 4);
      if (v12 == v52)
      {
        v12 = v52;
        break;
      }
    }
    while (v12 != v52)
    {
      v13 = *(_DWORD *)v12 - 1;
      if (v13 > 2)
        v14 = 0;
      else
        v14 = off_24D5CD7A0[v13];
      v15 = xpc_null_create();
      if (MEMORY[0x2199FEDD0](*a3) == MEMORY[0x24BDACFB0])
      {
        v16 = xpc_connection_create_from_endpoint(*a3);
        if (!v16)
          v16 = xpc_null_create();
        v17 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v17);
      }
      else
      {
        v16 = v15;
      }
      v18 = (std::__shared_weak_count *)a1[2];
      if (!v18 || (v19 = std::__shared_weak_count::lock(v18)) == 0)
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v20 = v19;
      p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v22 = __ldxr(p_shared_weak_owners);
      while (__stxr(v22 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v20);
      }
      *(_OWORD *)buf = 0u;
      v62 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v58, v14);
      v25 = a1[3];
      v50 = v25;
      if (v25)
        dispatch_retain(v25);
      std::string::basic_string[abi:ne180100]<0>(__p, "registration");
      v26 = std::__shared_weak_count::lock(v20);
      if (v26)
      {
        v27 = v26;
        v28 = (unint64_t *)&v26->__shared_weak_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v49 = v26;
        std::__shared_weak_count::__release_weak(v20);
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (v31)
          goto LABEL_40;
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        v20 = v27;
      }
      else
      {
        v49 = 0;
      }
      std::__shared_weak_count::__release_weak(v20);
LABEL_40:
      object = v16;
      v32 = xpc_null_create();
      qmi::Client::createWithQueue();
      xpc_release(object);
      if (v49)
        std::__shared_weak_count::__release_weak(v49);
      if (v56 < 0)
        operator delete(__p[0]);
      if (v50)
        dispatch_release(v50);
      if (SBYTE7(v60) < 0)
        operator delete(v58);
      v58 = 0;
      v59 = 0;
      v60 = v62;
      v62 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v58);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)buf);
      xpc_release(v32);
      v33 = (uint64_t (**)())((char *)v12 + 4);
      v12 = v52;
      if (v33 != v52)
      {
        v12 = v33;
        while ((v53(*(unsigned int *)v12) & 1) == 0)
        {
          v12 = (uint64_t (**)())((char *)v12 + 4);
          if (v12 == v52)
          {
            v12 = v52;
            break;
          }
        }
      }
    }
  }
  *(_QWORD *)buf = &off_24D5CD020;
  *(_QWORD *)&buf[8] = a1;
  *((_QWORD *)&v62 + 1) = buf;
  qmi::ClientRouter::setHandler();
  v34 = (uint8_t *)*((_QWORD *)&v62 + 1);
  if (*((uint8_t **)&v62 + 1) == buf)
  {
    v35 = 4;
    v34 = buf;
  }
  else
  {
    if (!*((_QWORD *)&v62 + 1))
      goto LABEL_59;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_59:
  v58 = &off_24D5CD0A0;
  v59 = a1;
  *((_QWORD *)&v60 + 1) = &v58;
  qmi::ClientRouter::setHandler();
  v36 = (void **)*((_QWORD *)&v60 + 1);
  if (*((void ***)&v60 + 1) == &v58)
  {
    v37 = 4;
    v36 = &v58;
  }
  else
  {
    if (!*((_QWORD *)&v60 + 1))
      goto LABEL_64;
    v37 = 5;
  }
  (*((void (**)(void))*v36 + v37))();
LABEL_64:
  __p[0] = &off_24D5CD120;
  __p[1] = a1;
  v57 = __p;
  qmi::ClientRouter::setHandler();
  v38 = v57;
  if (v57 == __p)
  {
    v39 = 4;
    v38 = __p;
  }
  else
  {
    if (!v57)
      goto LABEL_69;
    v39 = 5;
  }
  (*((void (**)(void))*v38 + v39))();
LABEL_69:
  v51 = &off_24D5CD1A0;
  v52 = (uint64_t (**)())a1;
  v54 = &v51;
  qmi::ClientRouter::setHandler();
  v40 = v54;
  if (v54 == &v51)
  {
    v41 = 4;
    v40 = &v51;
  }
  else
  {
    if (!v54)
      goto LABEL_74;
    v41 = 5;
  }
  (*v40)[v41]();
LABEL_74:
  *(_QWORD *)buf = &off_24D5CD220;
  *(_QWORD *)&buf[8] = a1;
  *((_QWORD *)&v62 + 1) = buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v42 = (uint8_t *)*((_QWORD *)&v62 + 1);
  if (*((uint8_t **)&v62 + 1) == buf)
  {
    v43 = 4;
    v42 = buf;
  }
  else
  {
    if (!*((_QWORD *)&v62 + 1))
      goto LABEL_79;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_79:
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 9));
  *(_QWORD *)buf = &off_24D5CD2A0;
  *(_QWORD *)&buf[8] = a1;
  *((_QWORD *)&v62 + 1) = buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v44 = (uint8_t *)*((_QWORD *)&v62 + 1);
  if (*((uint8_t **)&v62 + 1) == buf)
  {
    v45 = 4;
    v44 = buf;
    goto LABEL_83;
  }
  if (*((_QWORD *)&v62 + 1))
  {
    v45 = 5;
LABEL_83:
    (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
  }
  return qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 9));
}

void sub_2169374A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  v37 = *(_QWORD **)(v35 - 104);
  if (v37 == v34)
  {
    v38 = 4;
    v37 = (_QWORD *)(v35 - 128);
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const void **v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  __int128 v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void *v46;
  char *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending NAS Indication Register %d", buf, 8u);
  }
  *(_OWORD *)__p = 0u;
  v39 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v39)
  {
    while (*((_BYTE *)*v7 + 8) != 31)
    {
      if (++v7 == (const void **)v39)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v39)
  {
LABEL_10:
    v10 = operator new();
    v11 = v10;
    *(_WORD *)(v10 + 8) = 31;
    *(_QWORD *)v10 = &off_24D5CD3E0;
    v12 = v39;
    if ((unint64_t)v39 >= *((_QWORD *)&v39 + 1))
    {
      v14 = (uint64_t)(v39 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = (uint64_t)(*((_QWORD *)&v39 + 1) - (unint64_t)__p[1]) >> 2;
      if (v15 <= v14 + 1)
        v15 = v14 + 1;
      if (*((_QWORD *)&v39 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v39 + 8, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v14];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v13 = v18 + 1;
      v21 = (char *)__p[1];
      v20 = (char *)v39;
      if ((void *)v39 != __p[1])
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = (char *)__p[1];
      }
      __p[1] = v18;
      *(_QWORD *)&v39 = v13;
      *((_QWORD *)&v39 + 1) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v39 = v10;
      v13 = (_QWORD *)(v12 + 8);
    }
    v9 = (_BYTE *)(v11 + 9);
    *(_QWORD *)&v39 = v13;
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 9;
  }
  *v9 = a3;
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>(__p, 24) = 1;
  v23 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>((uint64_t)&v36, a2, v23);
  v24 = operator new(0x28uLL);
  v24[1] = 0;
  v25 = v24 + 1;
  v24[2] = 0;
  *v24 = &off_24D5CD448;
  v24[3] = a1;
  *((_DWORD *)v24 + 8) = a2;
  v40 = (char *)(v24 + 3);
  v41 = (std::__shared_weak_count *)v24;
  v26 = v37;
  v27 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v44 = 1174405120;
  v45 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncENS_16SubscriptionTypeEbE3__0EEOS1_OT__block_invoke;
  v46 = &__block_descriptor_tmp_13_4;
  v47 = (char *)(v24 + 3);
  v48 = (std::__shared_weak_count *)v24;
  do
    v28 = __ldxr(v25);
  while (__stxr(v28 + 1, v25));
  aBlock[0] = v27;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_24D5CD490;
  aBlock[4] = buf;
  *(_QWORD *)(v26 + 32) = _Block_copy(aBlock);
  v29 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v41;
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v37;
  v37 = 0;
  if (v35)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v37, v35);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169379A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  v4 = v5;
  v5 = 0;
  if (v4)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)va, v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::updateEMBMSStatus_sync(uint64_t a1, int a2, unsigned int a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  NSObject *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _BYTE v22[22];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v5 & 1) == a2)
  {
    v8 = (unsigned int *)(a1 + 92);
    v10 = atomic_load((unsigned int *)(a1 + 92));
    if (v10 == a3)
      return;
  }
  else
  {
    v6 = a2;
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      atomic_load((unsigned __int8 *)(a1 + 88));
      *(_DWORD *)v22 = 136315394;
      *(_QWORD *)&v22[4] = asStringBool();
      *(_WORD *)&v22[12] = 2080;
      *(_QWORD *)&v22[14] = asStringBool();
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I (change states) EMBMSStatus %s ==>> %s", v22, 0x16u);
    }
    atomic_store(v6, (unsigned __int8 *)(a1 + 88));
    v8 = (unsigned int *)(a1 + 92);
    v9 = atomic_load((unsigned int *)(a1 + 92));
    if (v9 == a3)
      goto LABEL_10;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = atomic_load(v8);
    v13 = wds::asString(v12);
    v14 = wds::asString(a3);
    *(_DWORD *)v22 = 136315394;
    *(_QWORD *)&v22[4] = v13;
    *(_WORD *)&v22[12] = 2080;
    *(_QWORD *)&v22[14] = v14;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I (change states) fLTEEMBMSCoverageStatus %s ==>> %s", v22, 0x16u);
  }
  atomic_store(a3, v8);
LABEL_10:
  v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    *(_QWORD *)&v22[8] = v16;
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)v22 = v18;
      if (!v18
        || (v19 = atomic_load((unsigned __int8 *)(a1 + 88)),
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, v19 & 1),
            (v17 = *(std::__shared_weak_count **)&v22[8]) != 0))
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
}

void sub_216937BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::getEMBMSSigInfo(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _OWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = __PAIR64__(a3, a2);
  v5 = v20;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a4);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = (_OWORD *)operator new();
  *v10 = v19;
  std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v20);
  v11 = a1[3];
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = (_QWORD *)operator new();
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  v17 = 0;
  v18 = 0;
  dispatch_async_f(v11, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v18);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v21 == v20)
  {
    v16 = 4;
  }
  else
  {
    if (!v21)
      return;
    v16 = 5;
    v5 = v21;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v16))(v5);
}

void sub_216937D98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void QMIEmbmsCommandDriver::setEMBMSActive(QMIEmbmsCommandDriver *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v3 || (v5 = *((_QWORD *)this + 1), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new();
  *(_QWORD *)v8 = this;
  *(_BYTE *)(v8 + 8) = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 3);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>(QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0,dispatch_queue_s *::default_delete<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t QMIEmbmsCommandDriver::getEMBMSStatus(QMIEmbmsCommandDriver *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 88);
  return v1 & 1;
}

void QMIEmbmsCommandDriver::getEMBMSSAIListInfo(_QWORD *a1, int a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[3];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v4 = v22;
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v23[0] = v22;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v22);
    }
    else
    {
      v23[0] = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v23[0] = 0;
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new();
  v11 = v10;
  *(_DWORD *)v10 = v21;
  if (v23[0])
  {
    if ((_QWORD *)v23[0] == v22)
    {
      *(_QWORD *)(v10 + 32) = v10 + 8;
      (*(void (**)(_QWORD *))(v22[0] + 24))(v22);
      goto LABEL_14;
    }
    v12 = v23;
    *(_QWORD *)(v10 + 32) = v23[0];
  }
  else
  {
    v12 = (_QWORD *)(v10 + 32);
  }
  *v12 = 0;
LABEL_14:
  v13 = a1[3];
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = (_QWORD *)operator new();
  *v16 = v11;
  v16[1] = v7;
  v16[2] = v9;
  v19 = 0;
  v20 = 0;
  dispatch_async_f(v13, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v19);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v20);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if ((_QWORD *)v23[0] == v22)
  {
    v18 = 4;
  }
  else
  {
    if (!v23[0])
      return;
    v18 = 5;
    v4 = (_QWORD *)v23[0];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v18))(v4);
}

void sub_2169380C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, a3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new();
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](v8, (uint64_t)v18);
  v9 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v16 = 0;
  v17 = 0;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>(QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v16);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  result = v19;
  if (v19 == v18)
  {
    v15 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_216938250(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::shared_ptr<QMIEmbmsCommandDriver>::shared_ptr[abi:ne180100]<QMIEmbmsCommandDriver,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CCEE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169382D4(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1}::operator() const(QMIEmbmsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169382F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1}::operator() const(QMIEmbmsCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1}::operator() const(QMIEmbmsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D5CCF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D5CCF40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target_type()
{
}

void SimInstanceLoggable<QMIEmbmsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMIEmbmsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD020;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  std::__shared_weak_count_vtbl *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  _QWORD aBlock[5];

  v2 = *a2;
  v3 = *(std::__shared_weak_count_vtbl **)(a1 + 8);
  memset(v17, 0, sizeof(v17));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(v17, 1) = v2 == 2;
  v4 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>((uint64_t)&v15, v2, v4);
  v5 = (std::__shared_weak_count *)operator new(0x28uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD350;
  v5[1].__vftable = v3;
  LODWORD(v5[1].__shared_owners_) = v2;
  v7 = v16;
  v8 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1174405120;
  v18[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v18[3] = &__block_descriptor_tmp_11;
  v18[4] = v5 + 1;
  v19 = v5;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  aBlock[0] = v8;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_24D5CD398;
  aBlock[4] = v18;
  *(_QWORD *)(v7 + 32) = _Block_copy(aBlock);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v14 = v16;
  v16 = 0;
  if (v14)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v16, v14);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_216938698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::__shared_weak_count *v21;
  unint64_t *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v24 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v22);
  while (__stlxr(v27 - 1, v22));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  v28 = a10;
  a10 = 0;
  if (v28)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD0A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD0A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I client stopped", v2, 2u);
  }
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD120;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD120;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(*(_QWORD *)(a1 + 8), *a2, 0);
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD1A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  _OWORD v29[2];
  uint8_t buf[8];
  uint64_t v31;
  void (*v32)(uint64_t, qmi::MessageBase *);
  void *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t aBlock;
  uint64_t v37;
  void (*v38)(uint64_t, QMIServiceMsg *);
  void *v39;
  uint8_t *v40;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(v3, *a2, 1);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I initial eMBMS state requesting", buf, 2u);
  }
  memset(v29, 0, sizeof(v29));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v29);
  v5 = qmi::ClientRouter::get();
  LODWORD(v28[0]) = v2;
  v6 = operator new();
  *(_QWORD *)v6 = v5;
  *(_QWORD *)(v6 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v6 + 16) = 25000;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *((_QWORD *)&v28[0] + 1) = v6;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD4F0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v7[1].__shared_owners_) = v2;
  v9 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v31 = 1174405120;
  v32 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v33 = &__block_descriptor_tmp_15_6;
  v34 = v7 + 1;
  v35 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  aBlock = v9;
  v37 = 0x40000000;
  v38 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v39 = &unk_24D5CD538;
  v40 = buf;
  *(_QWORD *)(v6 + 32) = _Block_copy(&aBlock);
  v11 = v35;
  if (v35)
  {
    v12 = (unint64_t *)&v35->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v15 = *((_QWORD *)&v28[0] + 1);
  *((_QWORD *)&v28[0] + 1) = 0;
  if (v15)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)v28 + 8, v15);
  memset(v28, 0, sizeof(v28));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v16 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::GetSysInfo::Request>((uint64_t)&v26, v2, v16);
  v17 = (std::__shared_weak_count *)operator new(0x28uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD598;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v17[1].__shared_owners_) = v2;
  v19 = v27;
  *(_QWORD *)buf = v9;
  v31 = 1174405120;
  v32 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__1EEOS1_OT__block_invoke;
  v33 = &__block_descriptor_tmp_17_3;
  v34 = v17 + 1;
  v35 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  aBlock = v9;
  v37 = 0x40000000;
  v38 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetSysInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v39 = &unk_24D5CD5E0;
  v40 = buf;
  *(_QWORD *)(v19 + 32) = _Block_copy(&aBlock);
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(v18);
  while (__stlxr(v24 - 1, v18));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v25 = v27;
  v27 = 0;
  if (v25)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v27, v25);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v29);
}

void sub_216938D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  unint64_t *v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v27 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v30 = __ldaxr(v25);
  while (__stlxr(v30 - 1, v25));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  v31 = a10;
  a10 = 0;
  if (v31)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v31);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD220;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  uint64_t v5;
  uint64_t TlvValue;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  NSObject *v12;
  unsigned int v13;
  _WORD v14[12];
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v17 = 0;
    v18 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v14, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
  }
  v5 = *(_QWORD *)(a1 + 8);
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  v8 = TlvValue;
  if (TlvValue)
  {
    v9 = v7;
    v15 = TlvValue;
    v10 = tlv::parseV<nas::tlv::EMBMSStatus>((unint64_t *)&v15, v7);
    if (v15)
    {
      v11 = v10;
      v12 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v11;
        _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSStatus Ind %d", (uint8_t *)&__p, 8u);
      }
      v13 = atomic_load((unsigned int *)(v5 + 92));
      QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v5, v11, v13);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v14[0], 1, v8, v9);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_2169390F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5CD2A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5CD2A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t TlvValue;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  const char *v12;
  unsigned __int8 v13;
  _WORD v14[12];
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  cast_message_type<nas::SysInfo::Indication const&>::cast(a3, (qmi::MessageBase *)v14);
  v4 = *(_QWORD *)(a1 + 8);
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  v7 = TlvValue;
  if (TlvValue)
  {
    v8 = v6;
    v15 = TlvValue;
    v9 = tlv::parseV<nas::tlv::LTEEMBMSCoverageInfo>((unint64_t *)&v15, v6);
    if (v15)
    {
      v10 = v9;
      v11 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = wds::asString(v10);
        *(_DWORD *)buf = 136315138;
        v17 = v12;
        _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Received SysInfo LTEEMBMSCoverageInfo is %s", buf, 0xCu);
      }
      v13 = atomic_load((unsigned __int8 *)(v4 + 88));
      QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v13 & 1, v10);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v14[0], 71, v7, v8);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_216939318(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

uint64_t qmi::Indication<(unsigned short)78,nas::SysInfo::IndicationTLVList>::Indication(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2169393A8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *(_DWORD *)(v2 + 8);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      v10 = 136315394;
      v11 = v8;
      v12 = 1024;
      v13 = v9;
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(v3, *(_DWORD *)(v2 + 8), 1);
  }
}

uint64_t __copy_helper_block_e8_32c104_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c104_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21693958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CD3E0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncENS_16SubscriptionTypeEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *((_DWORD *)v2 + 2);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)(a2 + 4);
      v10[0] = 67109378;
      v10[1] = v8;
      v11 = 2080;
      v12 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "NAS IndicationRegister error: 0x%x (%s)", (uint8_t *)v10, 0x12u);
    }
  }
  else
  {
    v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Success response to NAS IndicationRegister received", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncEN3qmi16SubscriptionTypeEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncEN3qmi16SubscriptionTypeEbE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0,std::allocator<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0,std::allocator<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21693983C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t TlvValue;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  NSObject *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  _BOOL4 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)v3;
  if (*((_DWORD *)this + 1))
  {
    v5 = *(_DWORD *)(v3 + 8);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v16 = *((_DWORD *)this + 1);
      *(_DWORD *)buf = 67109378;
      v19 = v16;
      v20 = 2080;
      v21 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error in response to EMBMSStatus with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      v10 = TlvValue;
      v11 = v9;
      v17 = TlvValue;
      v12 = tlv::parseV<nas::tlv::EMBMSStatus>((unint64_t *)&v17, v9);
      if (v17)
      {
        v13 = v12;
        v14 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v19 = v13;
          _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSStatus is %d", buf, 8u);
        }
        v15 = atomic_load((unsigned int *)(v4 + 92));
        QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v13, v15);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v10, v11);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216939B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<nas::GetSysInfo::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_216939BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t TlvValue;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  const char *v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  _DWORD v20[7];

  *(_QWORD *)&v20[5] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)v3;
  if (*((_DWORD *)this + 1))
  {
    v5 = *(_DWORD *)(v3 + 8);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v17 = *((_DWORD *)this + 1);
      *(_DWORD *)buf = 67109378;
      v20[0] = v17;
      LOWORD(v20[1]) = 2080;
      *(_QWORD *)((char *)&v20[1] + 2) = qmi::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error in response to GetSysInfo with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      v10 = TlvValue;
      v11 = v9;
      v18 = TlvValue;
      v12 = tlv::parseV<nas::tlv::LTEEMBMSCoverageInfo>((unint64_t *)&v18, v9);
      if (v18)
      {
        v13 = v12;
        v14 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = wds::asString(v13);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v20 = v15;
          _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Received LTEEMBMSCoverageInfo is %s", buf, 0xCu);
        }
        v16 = atomic_load((unsigned __int8 *)(v4 + 88));
        QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v16 & 1, v13);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 70, v10, v11);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__1EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetSysInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216939EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  std::mutex *ServiceMap;
  int v7;
  _BOOL4 v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _OWORD v33[2];
  void **v34[5];
  std::__shared_weak_count *v35;
  _QWORD aBlock[5];
  uint8_t buf[48];
  uint8_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v29 = a1;
  v30 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(v1 + 8);
    v5 = *(unsigned int *)(v1 + 12);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v5;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting sig embms info for serviceType=%d, earfcn=%lu", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<DataServiceInterface>(ServiceMap, buf);
  if (*(_QWORD *)buf)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 760))(*(_QWORD *)buf);
    v8 = (v7 - 4) < 0xFFFFFFFD;
    if ((v7 - 4) >= 0xFFFFFFFD)
      v9 = v7;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
    v8 = 1;
  }
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_12;
  v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v8)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (v8)
    {
LABEL_13:
      v13 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I preferred SIM unkonwn yet", buf, 2u);
      }
      memset(buf, 0, 32);
      LOBYTE(aBlock[0]) = 0;
      v14 = *(_QWORD *)(v1 + 40);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _QWORD *, uint8_t *))(*(_QWORD *)v14 + 48))(v14, aBlock, buf);
      v34[0] = (void **)&buf[8];
      std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](v34);
      goto LABEL_36;
    }
  }
  memset(v33, 0, sizeof(v33));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v33);
  v15 = qmi::ClientRouter::get();
  v31 = v9;
  v16 = operator new();
  *(_QWORD *)v16 = v15;
  *(_QWORD *)(v16 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v16 + 16) = 25000;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  v32 = v16;
  *(_QWORD *)buf = v2;
  *(_DWORD *)&buf[8] = v9;
  *(_QWORD *)&buf[12] = *(_QWORD *)(v1 + 8);
  v17 = &buf[24];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&buf[24], v1 + 16);
  v18 = (std::__shared_weak_count *)operator new(0x50uLL);
  v18->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD640;
  v18[1].std::__shared_count = *(std::__shared_count *)buf;
  LODWORD(v18[1].__shared_weak_owners_) = *(_DWORD *)&buf[16];
  std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::__value_func[abi:ne180100]((uint64_t)&v18[2], (uint64_t)&buf[24]);
  v20 = MEMORY[0x24BDAC760];
  v34[0] = (void **)MEMORY[0x24BDAC760];
  v34[1] = (void **)1174405120;
  v34[2] = (void **)___ZNO3qmi12ClientRouter9SendProxy8callbackIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNSt3__18functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EEOS1_OT__block_invoke;
  v34[3] = (void **)&__block_descriptor_tmp_19_4;
  v34[4] = (void **)&v18[1].__vftable;
  v35 = v18;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  aBlock[0] = v20;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSSigExt8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CD688;
  aBlock[4] = v34;
  *(_QWORD *)(v32 + 32) = _Block_copy(aBlock);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v38 == &buf[24])
  {
    v26 = 4;
    goto LABEL_32;
  }
  if (v38)
  {
    v26 = 5;
    v17 = v38;
LABEL_32:
    (*(void (**)(uint8_t *))(*(_QWORD *)v17 + 8 * v26))(v17);
  }
  v27 = v32;
  v32 = 0;
  if (v27)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v32, v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v33);
LABEL_36:
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&v30);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v29);
}

void sub_21693A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v29 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v26);
  while (__stlxr(v32 - 1, v26));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  v33 = *(_QWORD **)(v27 - 80);
  if (v33 == v24)
  {
    v34 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_14;
    v34 = 5;
    v24 = *(_QWORD **)(v27 - 80);
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v34))(v24);
LABEL_14:
  v35 = a12;
  a12 = 0;
  if (v35)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v23, v35);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 40);
    if (v3 == (_QWORD *)(v2 + 16))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 16);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x2199FEAC4](v2, 0x1060C40A1523CDALL);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

void ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<DataServiceInterface>(std::mutex *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(MEMORY[0x24BDC3C88] + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(this);
  v16 = v4;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&this[1].__m_.__sig, &v16);
  if (v8)
  {
    v10 = v8[3];
    v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  std::mutex::unlock(this);
  *a2 = v10;
  a2[1] = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21693A640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNSt3__18functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 *TlvValue;
  int v10;
  unsigned __int8 *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t i;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint8_t *v53;
  int64x2_t v54;
  unint64_t v55;
  uint8_t buf[32];
  unint64_t *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  if (*((_DWORD *)this + 1))
  {
    v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v45 = *((_DWORD *)this + 1);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error in response to EMBMSSigExt with code = 0x%x (%s)", buf, 0x12u);
    }
    memset(buf, 0, sizeof(buf));
    LOBYTE(v49) = 0;
    v8 = v3[6];
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(_QWORD *)v8 + 48))(v8, &v49, buf);
    v53 = &buf[8];
    std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  }
  else
  {
    TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      v11 = TlvValue;
      v12 = v10;
      v51 = 0;
      v52 = TlvValue;
      v49 = 0;
      v50 = 0;
      tlv::parseV<nas::tlv::EMBMSSignalQualityAndTMGIInfoData>(&v52, v10, &v49);
      if (v52)
      {
        v13 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSSigExt", buf, 2u);
        }
        v53 = (uint8_t *)vrev64_s32(*(int32x2_t *)((char *)v3 + 12));
        v46 = v3;
        v55 = 0;
        v54 = 0uLL;
        v14 = v49;
        for (i = v50; v14 != i; v14 += 40)
        {
          v48 = *(_BYTE *)v14;
          v16 = *(_QWORD *)(v14 + 16);
          v15 = *(_QWORD *)(v14 + 24);
          if (v16 == v15)
          {
            v17 = 0;
            v23 = 0;
          }
          else
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            do
            {
              v20 = *(unsigned __int8 *)(v16 + 1);
              v21 = *(unsigned __int8 *)(v16 + 2);
              v22 = *(unsigned int *)(v16 + 3) | ((unint64_t)*(unsigned __int16 *)(v16 + 7) << 32);
              if ((unint64_t)v18 >= v19)
              {
                v24 = (v18 - v17) >> 3;
                v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v19 - (_QWORD)v17) >> 2 > v25)
                  v25 = (uint64_t)(v19 - (_QWORD)v17) >> 2;
                if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
                  v26 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v26 = v25;
                if (v26)
                  v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v26);
                else
                  v27 = 0;
                v28 = (unint64_t *)(v26 + 8 * v24);
                *v28 = (v20 << 48) | (v21 << 56) | v22 & 0xFFFFFFFFFFFFLL;
                v23 = (uint64_t)(v28 + 1);
                while (v18 != v17)
                {
                  v29 = *((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *--v28 = v29;
                }
                v19 = v26 + 8 * v27;
                if (v17)
                  operator delete(v17);
                v17 = (char *)v28;
              }
              else
              {
                *(_QWORD *)v18 = (v20 << 48) | (v21 << 56) | v22 & 0xFFFFFFFFFFFFLL;
                v23 = (uint64_t)(v18 + 8);
              }
              v16 += 9;
              v18 = (char *)v23;
            }
            while (v16 != v15);
          }
          v30 = (_QWORD *)v54.i64[1];
          if (v54.i64[1] >= v55)
          {
            v32 = (v54.i64[1] - v54.i64[0]) >> 5;
            if ((unint64_t)(v32 + 1) >> 59)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v33 = (uint64_t)(v55 - v54.i64[0]) >> 4;
            if (v33 <= v32 + 1)
              v33 = v32 + 1;
            if (v55 - v54.i64[0] >= 0x7FFFFFFFFFFFFFE0)
              v34 = 0x7FFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            v57 = &v55;
            if (v34)
            {
              if (v34 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v35 = (char *)operator new(32 * v34);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[32 * v32];
            *(_QWORD *)buf = v35;
            *(_QWORD *)&buf[8] = v36;
            *(_QWORD *)&buf[16] = v36;
            *(_QWORD *)&buf[24] = &v35[32 * v34];
            *v36 = v48;
            *((_QWORD *)v36 + 2) = 0;
            *((_QWORD *)v36 + 3) = 0;
            *((_QWORD *)v36 + 1) = 0;
            std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>((_QWORD *)v36 + 1, v17, v23, (v23 - (uint64_t)v17) >> 3);
            v37 = *(_QWORD *)&buf[8];
            v31 = *(_QWORD *)&buf[16] + 32;
            *(_QWORD *)&buf[16] += 32;
            v38 = v54;
            if (v54.i64[1] == v54.i64[0])
            {
              v42 = vdupq_n_s64(v54.u64[1]);
            }
            else
            {
              v39 = 0;
              do
              {
                v40 = v37 + v39;
                v41 = v38.i64[1] + v39;
                *(_BYTE *)(v40 - 32) = *(_BYTE *)(v38.i64[1] + v39 - 32);
                *(_QWORD *)(v40 - 16) = 0;
                *(_QWORD *)(v40 - 8) = 0;
                *(_QWORD *)(v40 - 24) = 0;
                *(_OWORD *)(v40 - 24) = *(_OWORD *)(v38.i64[1] + v39 - 24);
                *(_QWORD *)(v40 - 8) = *(_QWORD *)(v38.i64[1] + v39 - 8);
                *(_QWORD *)(v41 - 24) = 0;
                *(_QWORD *)(v41 - 16) = 0;
                *(_QWORD *)(v41 - 8) = 0;
                v39 -= 32;
              }
              while (v38.i64[1] + v39 != v38.i64[0]);
              v42 = v54;
              v31 = *(_QWORD *)&buf[16];
              v37 += v39;
            }
            v54.i64[0] = v37;
            v54.i64[1] = v31;
            *(int64x2_t *)&buf[8] = v42;
            v43 = v55;
            v55 = *(_QWORD *)&buf[24];
            *(_QWORD *)&buf[24] = v43;
            *(_QWORD *)buf = v42.i64[0];
            std::__split_buffer<embms::AreaInfo>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_BYTE *)v54.i64[1] = v48;
            v30[2] = 0;
            v30[3] = 0;
            v30[1] = 0;
            std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>(v30 + 1, v17, v23, (v23 - (uint64_t)v17) >> 3);
            v31 = (uint64_t)(v30 + 4);
          }
          v54.i64[1] = v31;
          if (v17)
            operator delete(v17);
        }
        buf[0] = 1;
        v44 = v46[6];
        if (!v44)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint8_t *, uint8_t **))(*(_QWORD *)v44 + 48))(v44, buf, &v53);
        *(_QWORD *)buf = &v54;
        std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v49;
        std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        *(_QWORD *)buf = &v49;
        std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 17, v11, v12);
      }
    }
  }
}

void sub_21693ABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = a10;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](&a22);
  a18 = (void **)&a14;
  std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c173_ZTSNSt3__110shared_ptrIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNS_8functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c173_ZTSNSt3__110shared_ptrIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNS_8functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSSigExt8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21693AE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_21693AEF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<embms::AreaInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>(QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0,dispatch_queue_s *::default_delete<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  unsigned __int8 v6;
  std::mutex *ServiceMap;
  int v8;
  _BOOL4 v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  char v15;
  const void **v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t **v44;
  int v45;
  uint64_t v46;
  void *__p[2];
  __int128 v48;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  void *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v44 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned __int8 *)v1 + 8);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I setEMBMSActive %d", buf, 8u);
  }
  v5 = *((unsigned __int8 *)v1 + 8);
  v6 = atomic_load((unsigned __int8 *)(v2 + 88));
  if (v5 != (v6 & 1))
  {
    *(_QWORD *)buf = 0;
    v51 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
    ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<DataServiceInterface>(ServiceMap, buf);
    if (*(_QWORD *)buf)
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 760))(*(_QWORD *)buf);
      v9 = (v8 - 4) < 0xFFFFFFFD;
      if ((v8 - 4) >= 0xFFFFFFFD)
        v10 = v8;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
      v9 = 1;
    }
    v11 = (std::__shared_weak_count *)v51;
    if (!v51)
      goto LABEL_13;
    v12 = (unint64_t *)(v51 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v9)
      {
LABEL_14:
        v14 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I preferred SIM unkonwn yet", buf, 2u);
        }
        goto LABEL_54;
      }
    }
    else
    {
LABEL_13:
      if (v9)
        goto LABEL_14;
    }
    *(_OWORD *)__p = 0u;
    v48 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v15 = *((_BYTE *)v1 + 8);
    v16 = (const void **)__p[1];
    if (__p[1] != (void *)v48)
    {
      while (*((_BYTE *)*v16 + 8) != 1)
      {
        if (++v16 == (const void **)v48)
          goto LABEL_24;
      }
    }
    if (v16 == (const void **)v48)
    {
LABEL_24:
      v19 = operator new();
      v20 = v19;
      *(_WORD *)(v19 + 8) = 1;
      *(_QWORD *)v19 = &off_24D5CD6D0;
      v21 = v48;
      if ((unint64_t)v48 >= *((_QWORD *)&v48 + 1))
      {
        v23 = (uint64_t)(v48 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v24 = (uint64_t)(*((_QWORD *)&v48 + 1) - (unint64_t)__p[1]) >> 2;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if (*((_QWORD *)&v48 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v48 + 8, v25);
        else
          v26 = 0;
        v27 = (uint64_t *)&v26[8 * v23];
        v28 = &v26[8 * v25];
        *v27 = v20;
        v22 = v27 + 1;
        v30 = (char *)__p[1];
        v29 = (char *)v48;
        if ((void *)v48 != __p[1])
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v27 = v31;
          }
          while (v29 != v30);
          v29 = (char *)__p[1];
        }
        __p[1] = v27;
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v48 = v19;
        v22 = (_QWORD *)(v21 + 8);
      }
      v18 = (_BYTE *)(v20 + 9);
      *(_QWORD *)&v48 = v22;
    }
    else
    {
      if (!v17)
        __cxa_bad_cast();
      v18 = v17 + 9;
    }
    *v18 = v15;
    v32 = qmi::ClientRouter::get();
    v45 = v10;
    v33 = operator new();
    *(_QWORD *)v33 = v32;
    *(_QWORD *)(v33 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v33 + 16) = 25000;
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    v46 = v33;
    v34 = (std::__shared_weak_count *)operator new(0x28uLL);
    v34->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    v34->__shared_weak_owners_ = 0;
    v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD738;
    v34[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    LODWORD(v34[1].__shared_owners_) = v10;
    v36 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v51 = 1174405120;
    v52 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EEOS1_OT__block_invoke;
    v53 = &__block_descriptor_tmp_21_4;
    v54 = v34 + 1;
    v55 = v34;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
    aBlock[0] = v36;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11ConfigEMBMS8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5CD780;
    aBlock[4] = buf;
    *(_QWORD *)(v33 + 32) = _Block_copy(aBlock);
    v38 = v55;
    if (v55)
    {
      v39 = (unint64_t *)&v55->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    v42 = v46;
    v46 = 0;
    if (v42)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v46, v42);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
LABEL_54:
  MEMORY[0x2199FEAC4](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v44);
}

void sub_21693B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v33 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  do
    v36 = __ldaxr(v31);
  while (__stlxr(v36 - 1, v31));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  v37 = a12;
  a12 = 0;
  if (v37)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v29, v37);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  MEMORY[0x2199FEAC4](v28, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CD6D0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *((_DWORD *)v2 + 2);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)(a2 + 4);
      v10[0] = 67109378;
      v10[1] = v8;
      v11 = 2080;
      v12 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error in response to ConfigEMBMS with code = 0x%x (%s)", (uint8_t *)v10, 0x12u);
    }
  }
  else
  {
    v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Success in response to ConfigEMBMS", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CD738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11ConfigEMBMS8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21693B8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  void *__p[2];
  __int128 v9;
  char v10;
  void **v11;

  v1 = *a1;
  v4 = a1;
  v5 = v1;
  memset(v6, 0, sizeof(v6));
  LODWORD(v6[0]) = *(_DWORD *)v1;
  memset((char *)v6 + 8, 0, 50);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 0;
  v2 = *(_QWORD *)(v1 + 32);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char *, _OWORD *))(*(_QWORD *)v2 + 48))(v2, &v10, v6);
  if (__p[1])
  {
    *(void **)&v9 = __p[1];
    operator delete(__p[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (*(_QWORD *)&v6[2])
  {
    *((_QWORD *)&v6[2] + 1) = *(_QWORD *)&v6[2];
    operator delete(*(void **)&v6[2]);
  }
  v11 = (void **)v6 + 1;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_21693B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  *(_QWORD *)(v24 - 24) = v23;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 24));
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (v3 == (_QWORD *)(v2 + 8))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x2199FEAC4](v2, 0x1020C400293E721);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>(QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v4 = a1;
  v5 = v1;
  v6 = 0;
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v6);
  std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_21693BB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x2199FEAC4](v2, 0x1020C40A5B76CDFLL);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

void awd::QMIAwdCommandDriver::create(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  awd::QMIAwdCommandDriver *v4;
  char shouldAWDWakeAP;

  *a1 = 0;
  a1[1] = 0;
  v2 = operator new();
  awd::AwdCommandDriver::AwdCommandDriver();
  *(_QWORD *)v2 = &off_24D5CD7C8;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *a1 = 0;
  a1[1] = 0;
  v3 = std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(a1, v2);
  v4 = (awd::QMIAwdCommandDriver *)*a1;
  shouldAWDWakeAP = capabilities::ct::shouldAWDWakeAP((capabilities::ct *)v3);
  awd::QMIAwdCommandDriver::init_sync(v4, shouldAWDWakeAP);
}

void sub_21693BC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::init_sync(awd::QMIAwdCommandDriver *this, char a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v14, (_QWORD *)this + 1);
  v4 = operator new();
  *(_QWORD *)v4 = this;
  *(_BYTE *)(v4 + 8) = a2;
  v5 = *((_QWORD *)this + 3);
  v6 = v14;
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (_QWORD *)operator new();
  *v10 = v4;
  v10[1] = v6;
  v10[2] = v7;
  v16 = 0;
  v17 = 0;
  dispatch_async_f(v5, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>(awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v16);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

double awd::QMIMav20AwdCommandDriver::create@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  awd::QMIAwdCommandDriver *v4;
  char shouldAWDWakeAP;
  double result;
  __int128 v7;

  v2 = operator new();
  awd::AwdCommandDriver::AwdCommandDriver();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_QWORD *)v2 = &off_24D5CD868;
  v7 = 0uLL;
  v3 = std::shared_ptr<awd::QMIMav20AwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIMav20AwdCommandDriver,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1},void>((uint64_t *)&v7, v2);
  v4 = (awd::QMIAwdCommandDriver *)v7;
  shouldAWDWakeAP = capabilities::ct::shouldAWDWakeAP((capabilities::ct *)v3);
  awd::QMIAwdCommandDriver::init_sync(v4, shouldAWDWakeAP);
  result = *(double *)&v7;
  *a1 = v7;
  return result;
}

void sub_21693BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::start(awd::QMIAwdCommandDriver *this)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v12, (_QWORD *)this + 1);
  v2 = (_QWORD *)operator new();
  *v2 = this;
  v3 = *((_QWORD *)this + 3);
  v4 = v12;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v3, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::start(void)::$_0>(awd::QMIAwdCommandDriver::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::start(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void awd::QMIAwdCommandDriver::shutdown(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v12, (_QWORD *)(a1 + 8));
  v2 = (_QWORD *)operator new();
  *v2 = a1;
  v3 = *(NSObject **)(a1 + 24);
  v4 = v12;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v3, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>(awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t awd::QMIAwdCommandDriver::checkIn_sync(uint64_t a1, awd::AppContext **a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*a2);
  if ((_DWORD)result)
    return __TUAssertTrigger();
  return result;
}

uint64_t awd::QMIAwdCommandDriver::checkOut_sync(uint64_t a1, awd::AppContext **a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*a2);
  if ((_DWORD)result)
    return __TUAssertTrigger();
  return result;
}

void awd::QMIAwdCommandDriver::sendEnableMetricSubmission(uint64_t a1, uint64_t *a2, char a3, const void **a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*a4)
    v10 = _Block_copy(*a4);
  else
    v10 = 0;
  v21 = 0;
  v22 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v21, (_QWORD *)(a1 + 8));
  v11 = operator new();
  *(_QWORD *)v11 = v6;
  *(_QWORD *)(v11 + 8) = v7;
  *(_BYTE *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = a1;
  v12 = *(NSObject **)(a1 + 24);
  v13 = v21;
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (_QWORD *)operator new();
  *v17 = v11;
  v17[1] = v13;
  v17[2] = v14;
  v23 = 0;
  v24 = 0;
  dispatch_async_f(v12, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v23);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(uint64_t a1, uint64_t *a2, char a3, const void **a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*a4)
    v10 = _Block_copy(*a4);
  else
    v10 = 0;
  v21 = 0;
  v22 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v21, (_QWORD *)(a1 + 8));
  v11 = operator new();
  *(_QWORD *)v11 = v6;
  *(_QWORD *)(v11 + 8) = v7;
  *(_BYTE *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = a1;
  v12 = *(NSObject **)(a1 + 24);
  v13 = v21;
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (_QWORD *)operator new();
  *v17 = v11;
  v17[1] = v13;
  v17[2] = v14;
  v23 = 0;
  v24 = 0;
  dispatch_async_f(v12, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v23);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void awd::QMIAwdCommandDriver::sendAddConfiguration(_QWORD *a1, _QWORD *a2, char a3, uint64_t a4, void **a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  __int128 v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  void *__p;
  _BYTE *v28;
  uint64_t v29;
  void *aBlock[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;

  v7 = a2[1];
  *(_QWORD *)&v25 = *a2;
  *((_QWORD *)&v25 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v28 = 0;
  v29 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  v10 = *a5;
  if (*a5)
    v10 = _Block_copy(v10);
  aBlock[0] = v10;
  aBlock[1] = a1;
  v31 = 0;
  v32 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v31, a1 + 1);
  v11 = operator new();
  *(_OWORD *)v11 = v25;
  *(_BYTE *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  v12 = __p;
  v13 = (uint64_t)v28;
  v14 = v28 - (_BYTE *)__p;
  *(_QWORD *)(v11 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v11 + 24), v12, v13, v14);
  v15 = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  *(_OWORD *)(v11 + 48) = v15;
  v16 = a1[3];
  v17 = v31;
  v18 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (_QWORD *)operator new();
  *v21 = v11;
  v21[1] = v17;
  v21[2] = v18;
  v33 = 0;
  v34 = 0;
  dispatch_async_f(v16, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v33);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v34);
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (aBlock[0])
    _Block_release(aBlock[0]);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
}

void sub_21693C54C(void *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  __clang_call_terminate(a1);
}

void awd::QMIAwdCommandDriver::sendComponentConfiguration_sync(uint64_t a1, _QWORD *a2, _QWORD *a3, void **a4)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD block[7];
  std::__shared_weak_count *v39;
  void *v40;
  _QWORD v41[5];
  dispatch_group_t group;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  _QWORD v48[2];
  _QWORD *(*v49)(uint64_t, uint64_t);
  void *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[3];
  char v58;
  _QWORD aBlock[6];

  v5 = dispatch_group_create();
  v6 = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v6);
  }
  v57[0] = 0;
  v57[1] = v57;
  v57[2] = 0x2000000000;
  v58 = 1;
  v7 = a3[1] - *a3;
  v8 = MEMORY[0x24BDAC760];
  if ((unint64_t)(v7 + 1499) >= 0x5DC)
  {
    LODWORD(v9) = 0;
    do
    {
      v55 = 0u;
      v56 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v55);
      v10 = *a3 + (1500 * v9);
      v11 = *a3 + v7;
      if (v11 >= v10 + 1500)
        v11 = v10 + 1500;
      v48[0] = v8;
      v48[1] = 0x40000000;
      v49 = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
      v50 = &__block_descriptor_tmp_12;
      v54 = v9;
      v51 = (v7 + 1499) / 0x5DCuLL;
      v52 = v10;
      v53 = v11;
      v12 = (const void **)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) != (_QWORD)v56)
      {
        while (*((_BYTE *)*v12 + 8) != 64)
        {
          if (++v12 == (const void **)v56)
            goto LABEL_14;
        }
      }
      if (v12 == (const void **)v56)
      {
LABEL_14:
        v14 = operator new();
        v15 = v14;
        *(_BYTE *)(v14 + 8) = 64;
        *(_QWORD *)v14 = &off_24D5CDED0;
        *(_QWORD *)(v14 + 16) = 0;
        v16 = v14 + 16;
        *(_QWORD *)(v14 + 40) = 0;
        *(_QWORD *)(v14 + 48) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 22) = 0;
        v17 = v56;
        if ((unint64_t)v56 >= *((_QWORD *)&v56 + 1))
        {
          v19 = (uint64_t)(v56 - *((_QWORD *)&v55 + 1)) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v20 = (uint64_t)(*((_QWORD *)&v56 + 1) - *((_QWORD *)&v55 + 1)) >> 2;
          if (v20 <= v19 + 1)
            v20 = v19 + 1;
          if (*((_QWORD *)&v56 + 1) - *((_QWORD *)&v55 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v56 + 8, v21);
          else
            v22 = 0;
          v23 = (uint64_t *)&v22[8 * v19];
          *v23 = v15;
          v18 = v23 + 1;
          v25 = (char *)*((_QWORD *)&v55 + 1);
          v24 = (char *)v56;
          if ((_QWORD)v56 != *((_QWORD *)&v55 + 1))
          {
            do
            {
              v26 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v23 = v26;
            }
            while (v24 != v25);
            v24 = (char *)*((_QWORD *)&v55 + 1);
          }
          *((_QWORD *)&v55 + 1) = v23;
          *(_QWORD *)&v56 = v18;
          *((_QWORD *)&v56 + 1) = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v56 = v14;
          v18 = (_QWORD *)(v17 + 8);
        }
        *(_QWORD *)&v56 = v18;
        v49((uint64_t)v48, v16);
      }
      else
      {
        if (!v13)
          __cxa_bad_cast();
        ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v48, (uint64_t)v13 + 16);
      }
      v43 = a1 + 96;
      v44 = QMIServiceMsg::create();
      v45 = 25000;
      v46 = 0;
      v47 = 0;
      v41[0] = v8;
      v41[1] = 1174405120;
      v41[2] = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
      v41[3] = &unk_24D5CD920;
      group = v6;
      if (v6)
      {
        dispatch_retain(v6);
        if (group)
          dispatch_group_enter(group);
      }
      v41[4] = v57;
      aBlock[0] = v8;
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      aBlock[3] = &unk_24D5CDF00;
      aBlock[4] = v41;
      v27 = _Block_copy(aBlock);
      v47 = v27;
      if (v44)
      {
        qmi::Client::send();
        v27 = v47;
      }
      if (v27)
        _Block_release(v27);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v55);
      v9 = (v9 + 1);
    }
    while ((v7 + 1499) / 0x5DCuLL > v9);
  }
  block[0] = v8;
  block[1] = 1174405120;
  block[2] = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_5;
  block[3] = &unk_24D5CD958;
  block[4] = v57;
  block[5] = a1;
  v28 = (std::__shared_weak_count *)a2[1];
  block[6] = *a2;
  v39 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *a4;
  if (*a4)
    v31 = _Block_copy(v31);
  v40 = v31;
  dispatch_group_notify(v6, *(dispatch_queue_t *)(a1 + 24), block);
  if (v40)
    _Block_release(v40);
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  _Block_object_dispose(v57, 8);
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
    dispatch_release(v6);
  }
}

void sub_21693CA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,dispatch_group_t group,char a30)
{
  NSObject *v30;
  uint64_t v31;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v31 - 208));
  _Block_object_dispose((const void *)(v31 - 176), 8);
  if (v30)
  {
    dispatch_group_leave(v30);
    dispatch_release(v30);
    dispatch_release(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_5(_QWORD *a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  void *v7;
  void *aBlock;
  uint8_t buf[2];
  __int16 v10;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
  v3 = *(NSObject **)(a1[5] + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      goto LABEL_7;
    v10 = 0;
    v5 = "#I Configuration succeeded";
    v6 = (uint8_t *)&v10;
  }
  else
  {
    if (!v4)
      goto LABEL_7;
    *(_WORD *)buf = 0;
    v5 = "#E Configuration failed";
    v6 = buf;
  }
  _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
LABEL_7:
  v7 = (void *)a1[8];
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_21693CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

uint64_t __destroy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 48);
}

void awd::QMIAwdCommandDriver::sendClearConfiguration(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*a3)
    v8 = _Block_copy(*a3);
  else
    v8 = 0;
  v19 = 0;
  v20 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v19, (_QWORD *)(a1 + 8));
  v9 = (_QWORD *)operator new();
  *v9 = v4;
  v9[1] = v5;
  v9[2] = v8;
  v9[3] = a1;
  v10 = *(NSObject **)(a1 + 24);
  v11 = v19;
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (_QWORD *)operator new();
  *v15 = v9;
  v15[1] = v11;
  v15[2] = v12;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v10, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void awd::QMIAwdCommandDriver::sendUpdateProperties(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*a3)
    v8 = _Block_copy(*a3);
  else
    v8 = 0;
  v19 = 0;
  v20 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v19, (_QWORD *)(a1 + 8));
  v9 = (_QWORD *)operator new();
  *v9 = v4;
  v9[1] = v5;
  v9[2] = v8;
  v9[3] = a1;
  v10 = *(NSObject **)(a1 + 24);
  v11 = v19;
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (_QWORD *)operator new();
  *v15 = v9;
  v15[1] = v11;
  v15[2] = v12;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v10, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void awd::QMIMav20AwdCommandDriver::sendUpdateProperties(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*a3)
    v8 = _Block_copy(*a3);
  else
    v8 = 0;
  v19 = 0;
  v20 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v19, (_QWORD *)(a1 + 8));
  v9 = (_QWORD *)operator new();
  *v9 = v4;
  v9[1] = v5;
  v9[2] = v8;
  v9[3] = a1;
  v10 = *(NSObject **)(a1 + 24);
  v11 = v19;
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (_QWORD *)operator new();
  *v15 = v9;
  v15[1] = v11;
  v15[2] = v12;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v10, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, const void **a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;

  v10 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*a6)
    v14 = _Block_copy(*a6);
  else
    v14 = 0;
  v25 = 0;
  v26 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v25, (_QWORD *)(a1 + 8));
  v15 = operator new();
  *(_QWORD *)v15 = v10;
  *(_QWORD *)(v15 + 8) = v11;
  *(_DWORD *)(v15 + 16) = a3;
  *(_DWORD *)(v15 + 20) = a4;
  *(_DWORD *)(v15 + 24) = a5;
  *(_QWORD *)(v15 + 32) = v14;
  *(_QWORD *)(v15 + 40) = a1;
  v16 = *(NSObject **)(a1 + 24);
  v17 = v25;
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (_QWORD *)operator new();
  *v21 = v15;
  v21[1] = v17;
  v21[2] = v18;
  v27 = 0;
  v28 = 0;
  dispatch_async_f(v16, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v27);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void awd::QMIMav20AwdCommandDriver::sendQueriableMetric(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, const void **a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;

  v10 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*a6)
    v14 = _Block_copy(*a6);
  else
    v14 = 0;
  v25 = 0;
  v26 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v25, (_QWORD *)(a1 + 8));
  v15 = operator new();
  *(_QWORD *)v15 = v10;
  *(_QWORD *)(v15 + 8) = v11;
  *(_DWORD *)(v15 + 16) = a3;
  *(_DWORD *)(v15 + 20) = a4;
  *(_DWORD *)(v15 + 24) = a5;
  *(_QWORD *)(v15 + 32) = v14;
  *(_QWORD *)(v15 + 40) = a1;
  v16 = *(NSObject **)(a1 + 24);
  v17 = v25;
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (_QWORD *)operator new();
  *v21 = v15;
  v21[1] = v17;
  v21[2] = v18;
  v27 = 0;
  v28 = 0;
  dispatch_async_f(v16, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v27);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void awd::QMIAwdCommandDriver::handleTriggerSubmissionInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD v7[5];
  _QWORD v8[3];
  uint64_t v9;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK3awd19QMIAwdCommandDriver31handleTriggerSubmissionInd_syncERKNS_13SubmitTrigger10IndicationE_block_invoke;
  v7[3] = &__block_descriptor_tmp_9_3;
  v7[4] = a1;
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_5;
  v5 = TlvValue;
  v6 = v4;
  v9 = TlvValue;
  memset(v8, 0, sizeof(v8));
  tlv::parseV<awd::tlv::SubmitTrigger>((unint64_t *)&v9, v4, v8);
  if (v9)
  {
    ___ZNK3awd19QMIAwdCommandDriver31handleTriggerSubmissionInd_syncERKNS_13SubmitTrigger10IndicationE_block_invoke((uint64_t)v7);
    return;
  }
  if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 121, v5, v6) & 1) == 0)LABEL_5:__TUAssertTrigger();
}

void ___ZNK3awd19QMIAwdCommandDriver31handleTriggerSubmissionInd_syncERKNS_13SubmitTrigger10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 64);
  v2 = (_QWORD *)(v1 + 64);
  v3 = v4;
  if (v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((_BYTE *)v5 + 32))
    {
      v6 = v5[5];
      v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        awd::AppContext::submitTrigger();
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_21693D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::handlePIILocationUsedInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD v7[5];
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK3awd19QMIAwdCommandDriver29handlePIILocationUsedInd_syncERKNS_15PIILocationUsed10IndicationE_block_invoke;
  v7[3] = &__block_descriptor_tmp_14_3;
  v7[4] = a1;
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_5;
  v5 = TlvValue;
  v6 = v4;
  v10 = TlvValue;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  tlv::parseV<awd::tlv::PIILocationUsed>((unint64_t *)&v10, v4, (uint64_t)v8);
  if (v10)
  {
    ___ZNK3awd19QMIAwdCommandDriver29handlePIILocationUsedInd_syncERKNS_15PIILocationUsed10IndicationE_block_invoke((uint64_t)v7);
    return;
  }
  if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 122, v5, v6) & 1) == 0)LABEL_5:__TUAssertTrigger();
}

void ___ZNK3awd19QMIAwdCommandDriver29handlePIILocationUsedInd_syncERKNS_15PIILocationUsed10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 64);
  v2 = (_QWORD *)(v1 + 64);
  v3 = v4;
  if (v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((_BYTE *)v5 + 32))
    {
      v6 = v5[5];
      v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        awd::AppContext::updateAppSettingsUsed();
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_21693D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::handleMetricSubmissionInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD v8[5];
  __int128 v9;
  void *__p[2];
  __int128 v11;
  unint64_t v12;

  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK3awd19QMIAwdCommandDriver30handleMetricSubmissionInd_syncERKNS_16MetricSubmission10IndicationE_block_invoke;
  v8[3] = &__block_descriptor_tmp_17_4;
  v8[4] = a1;
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_8;
  v5 = TlvValue;
  v6 = v4;
  v12 = TlvValue;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v9 = 0u;
  tlv::parseV<awd::tlv::MetricData>(&v12, v4, &v9);
  v7 = v12;
  if (v12)
    ___ZNK3awd19QMIAwdCommandDriver30handleMetricSubmissionInd_syncERKNS_16MetricSubmission10IndicationE_block_invoke((uint64_t)v8, (uint64_t)&v9);
  if (__p[1])
  {
    *(void **)&v11 = __p[1];
    operator delete(__p[1]);
  }
  if (!v7
    && (((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 119, v5, v6) & 1) == 0)
  {
LABEL_8:
    __TUAssertTrigger();
  }
}

void sub_21693D7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK3awd19QMIAwdCommandDriver30handleMetricSubmissionInd_syncERKNS_16MetricSubmission10IndicationE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD **)(v2 + 64);
  v3 = (_QWORD *)(v2 + 64);
  v4 = v5;
  if (v5)
  {
    do
    {
      v6 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v6 != v3 && !*((_BYTE *)v6 + 32))
    {
      v8 = v6[5];
      v7 = (std::__shared_weak_count *)v6[6];
      v16 = v8;
      v17 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v8)
      {
        v14 = 0;
        v15 = 0;
        __p = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
        awd::AppContext::submitMetricPayload();
        if (__p)
        {
          v14 = __p;
          operator delete(__p);
        }
      }
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_21693D8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::handleMetricSubmissionEndInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD v7[5];
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK3awd19QMIAwdCommandDriver33handleMetricSubmissionEndInd_syncERKNS_19MetricSubmissionEnd10IndicationE_block_invoke;
  v7[3] = &__block_descriptor_tmp_20_3;
  v7[4] = a1;
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_5;
  v5 = TlvValue;
  v6 = v4;
  v10 = TlvValue;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  tlv::parseV<awd::tlv::MetricDataEnd>((unint64_t *)&v10, v4, (uint64_t)v8);
  if (v10)
  {
    ___ZNK3awd19QMIAwdCommandDriver33handleMetricSubmissionEndInd_syncERKNS_19MetricSubmissionEnd10IndicationE_block_invoke((uint64_t)v7);
    return;
  }
  if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 120, v5, v6) & 1) == 0)LABEL_5:__TUAssertTrigger();
}

void ___ZNK3awd19QMIAwdCommandDriver33handleMetricSubmissionEndInd_syncERKNS_19MetricSubmissionEnd10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 64);
  v2 = (_QWORD *)(v1 + 64);
  v3 = v4;
  if (v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((_BYTE *)v5 + 32))
    {
      v6 = v5[5];
      v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        awd::AppContext::markMetricSubmissionComplete();
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_21693DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3awd19QMIAwdCommandDriver34handleConfigurationSuccessInd_syncERKNS_20ConfigurationSuccess10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  awd::AppContext *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 64);
  v2 = (_QWORD *)(v1 + 64);
  v3 = v4;
  if (v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((_BYTE *)v5 + 32))
    {
      v6 = (awd::AppContext *)v5[5];
      v7 = (std::__shared_weak_count *)v5[6];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        awd::AppContext::sendConfigurationResult(v6);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_21693DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::~QMIAwdCommandDriver(awd::QMIAwdCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5CD7C8;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  *(_QWORD *)this = &off_24D5CD7C8;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void awd::QMIMav20AwdCommandDriver::~QMIMav20AwdCommandDriver(awd::QMIMav20AwdCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5CD7C8;
  qmi::Client::~Client((awd::QMIMav20AwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  *(_QWORD *)this = &off_24D5CD7C8;
  qmi::Client::~Client((awd::QMIMav20AwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CDAE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21693DCB0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21693DCD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t *std::shared_ptr<awd::QMIMav20AwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIMav20AwdCommandDriver,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CDB48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21693DDE0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1}::operator() const(awd::QMIMav20AwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21693DE00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1}::operator() const(awd::QMIMav20AwdCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1}::operator() const(awd::QMIMav20AwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::start(void)::$_0>(awd::QMIAwdCommandDriver::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::start(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  qmi::Client::start((qmi::Client *)(**(_QWORD **)a1 + 96));
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_21693DEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>(awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  qmi::Client::stop((qmi::Client *)(**(_QWORD **)a1 + 96));
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_21693DF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>(awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char *Name;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t **v18;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[15];
  void *v24[2];
  uint64_t (*v25)();
  void *v26;
  uint64_t v27;
  void *v28[2];
  uint64_t (*v29)();
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  dispatch_object_t v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;

  v18 = a1;
  v1 = *a1;
  v2 = **a1;
  Name = (char *)awd::AwdCommandDriver::getName((awd::AwdCommandDriver *)v2);
  std::string::basic_string[abi:ne180100]<0>(v28, Name);
  v4 = *(NSObject **)(v2 + 24);
  v35 = v4;
  if (v4)
    dispatch_retain(v4);
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)*MEMORY[0x24BDC43F0]);
  v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v5 || (v6 = *(_QWORD *)(v2 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v33 = v6;
  v34 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  Registry::getServerConnection(*(Registry **)(v2 + 80));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v2 + 112, &v38);
  qmi::Client::~Client((qmi::Client *)&v36);
  v11 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v14 = (unint64_t *)&v8->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  if (v35)
    dispatch_release(v35);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  v16 = (void *)MEMORY[0x24BDAC760];
  v28[0] = (void *)MEMORY[0x24BDAC760];
  v28[1] = (void *)0x40000000;
  v29 = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke;
  v30 = &__block_descriptor_tmp_26_0;
  v31 = v2;
  qmi::Client::setHandler();
  v24[0] = v16;
  v24[1] = (void *)0x40000000;
  v25 = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_2;
  v26 = &__block_descriptor_tmp_27_0;
  v27 = v2;
  qmi::Client::setHandler();
  v23[10] = v16;
  v23[11] = 0x40000000;
  v23[12] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_3;
  v23[13] = &__block_descriptor_tmp_28_1;
  v23[14] = v2;
  qmi::Client::setHandler();
  v23[5] = v16;
  v23[6] = 0x40000000;
  v23[7] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_4;
  v23[8] = &__block_descriptor_tmp_29;
  v23[9] = v2;
  qmi::Client::setHandler();
  v23[0] = v16;
  v23[1] = 0x40000000;
  v23[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_5;
  v23[3] = &__block_descriptor_tmp_30_0;
  v23[4] = v2;
  v36 = v16;
  v37 = 0x40000000;
  *(_QWORD *)&v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v38 + 1) = &unk_24D5CDCC0;
  v39 = v23;
  qmi::Client::setIndHandler();
  v22[0] = v16;
  v22[1] = 0x40000000;
  v22[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_6;
  v22[3] = &__block_descriptor_tmp_31_0;
  v22[4] = v2;
  v36 = v16;
  v37 = 0x40000000;
  *(_QWORD *)&v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd19MetricSubmissionEnd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v38 + 1) = &unk_24D5CDCE8;
  v39 = v22;
  qmi::Client::setIndHandler();
  v21[0] = v16;
  v21[1] = 0x40000000;
  v21[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_7;
  v21[3] = &__block_descriptor_tmp_32_0;
  v21[4] = v2;
  v36 = v16;
  v37 = 0x40000000;
  *(_QWORD *)&v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v38 + 1) = &unk_24D5CDD10;
  v39 = v21;
  qmi::Client::setIndHandler();
  v20[0] = v16;
  v20[1] = 0x40000000;
  v20[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_8;
  v20[3] = &__block_descriptor_tmp_33_1;
  v20[4] = v2;
  v36 = v16;
  v37 = 0x40000000;
  *(_QWORD *)&v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd15PIILocationUsed10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v38 + 1) = &unk_24D5CDD38;
  v39 = v20;
  qmi::Client::setIndHandler();
  v19[0] = v16;
  v19[1] = 0x40000000;
  v19[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_9;
  v19[3] = &__block_descriptor_tmp_34_2;
  v19[4] = v2;
  v36 = v16;
  v37 = 0x40000000;
  *(_QWORD *)&v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd20ConfigurationSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v38 + 1) = &unk_24D5CDD60;
  v39 = v19;
  qmi::Client::setIndHandler();
  if (*((_BYTE *)v1 + 8))
  {
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
  }
  MEMORY[0x2199FEAC4](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v18);
}

void sub_21693E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;

  v13 = *(std::__shared_weak_count **)(v11 - 136);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(v11 - 120);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v17 = (unint64_t *)&v10->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (*(char *)(v11 - 201) < 0)
    operator delete(*(void **)(v11 - 224));
  v19 = *(NSObject **)(v11 - 112);
  if (v19)
    dispatch_release(v19);
  if (*(char *)(v11 - 161) < 0)
    operator delete(*(void **)(v11 - 184));
  MEMORY[0x2199FEAC4](v9, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_2()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_3()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_4()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32));
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 128))(*(_QWORD *)(a1 + 32));
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32));
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32));
}

void ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_9(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD v8[6];
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK3awd19QMIAwdCommandDriver34handleConfigurationSuccessInd_syncERKNS_20ConfigurationSuccess10IndicationE_block_invoke;
  v8[3] = &__block_descriptor_tmp_24_3;
  v8[4] = v3;
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    v8[5] = tlv::parseV<awd::tlv::ConfigurationSuccess>((unint64_t *)&v9, v5);
    if (v9)
      ___ZNK3awd19QMIAwdCommandDriver34handleConfigurationSuccessInd_syncERKNS_20ConfigurationSuccess10IndicationE_block_invoke((uint64_t)v8);
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 118, v6, v7);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd20ConfigurationSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21693E708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __darwin_time_t tv_sec;
  unint64_t tv_usec;
  char v5;
  const void **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[5];
  std::__shared_weak_count *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  timeval v42;
  void *__p[2];
  __int128 v44;
  _QWORD aBlock[5];

  v1 = *a1;
  v32 = a1;
  v33 = v1;
  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)__p = 0u;
  v44 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v42.tv_sec = 0;
  *(_QWORD *)&v42.tv_usec = 0;
  gettimeofday(&v42, 0);
  tv_sec = v42.tv_sec;
  tv_usec = v42.tv_usec;
  v5 = *(_BYTE *)(v1 + 16);
  v6 = (const void **)__p[1];
  if (__p[1] != (void *)v44)
  {
    while (*((_BYTE *)*v6 + 8) != 104)
    {
      if (++v6 == (const void **)v44)
        goto LABEL_8;
    }
  }
  if (v6 == (const void **)v44)
  {
LABEL_8:
    v9 = operator new();
    v10 = v9;
    *(_BYTE *)(v9 + 8) = 104;
    *(_QWORD *)v9 = &off_24D5CDDD8;
    *(_BYTE *)(v9 + 16) = 0;
    v8 = (char *)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    v11 = v44;
    if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
    {
      v13 = (uint64_t)(v44 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(*((_QWORD *)&v44 + 1) - (unint64_t)__p[1]) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*((_QWORD *)&v44 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v44 + 8, v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v13];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v12 = v17 + 1;
      v20 = (char *)__p[1];
      v19 = (char *)v44;
      if ((void *)v44 != __p[1])
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)__p[1];
      }
      __p[1] = v17;
      *(_QWORD *)&v44 = v12;
      *((_QWORD *)&v44 + 1) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v44 = v9;
      v12 = (_QWORD *)(v11 + 8);
    }
    *(_QWORD *)&v44 = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7 + 16;
  }
  *v8 = v5;
  *((_QWORD *)v8 + 1) = 1000 * tv_sec + tv_usec / 0x3E8;
  v37 = v2 + 96;
  v38 = QMIServiceMsg::create();
  v39 = 25000;
  v40 = 0;
  v41 = 0;
  v22 = MEMORY[0x24BDAC760];
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 1174405120;
  v34[2] = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_43_1;
  v34[4] = *(_QWORD *)v1;
  v23 = *(std::__shared_weak_count **)(v1 + 8);
  v35 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = *(void **)(v1 + 24);
  if (v26)
    v26 = _Block_copy(v26);
  v36 = v26;
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CDE08;
  aBlock[4] = v34;
  v27 = _Block_copy(aBlock);
  v41 = v27;
  if (v38)
  {
    qmi::Client::send();
    v27 = v41;
  }
  if (v27)
    _Block_release(v27);
  if (v36)
    _Block_release(v36);
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v33);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v32);
}

void sub_21693EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (aBlock)
    _Block_release(aBlock);
  v26 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 24);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0x10E0C40B6EF74F0);
  }
  return a1;
}

void ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_21693EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

uint64_t __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::MetricIndication>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new();
  v2->n128_u8[8] = a1->n128_u8[8];
  v2->n128_u64[0] = (unint64_t)&off_24D5CDDD8;
  result = a1[1];
  v2[1] = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21693EE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __darwin_time_t tv_sec;
  unint64_t tv_usec;
  char v5;
  const void **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[5];
  std::__shared_weak_count *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  timeval v42;
  void *__p[2];
  __int128 v44;
  _QWORD aBlock[5];

  v1 = *a1;
  v32 = a1;
  v33 = v1;
  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)__p = 0u;
  v44 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v42.tv_sec = 0;
  *(_QWORD *)&v42.tv_usec = 0;
  gettimeofday(&v42, 0);
  tv_sec = v42.tv_sec;
  tv_usec = v42.tv_usec;
  v5 = *(_BYTE *)(v1 + 16);
  v6 = (const void **)__p[1];
  if (__p[1] != (void *)v44)
  {
    while (*((_BYTE *)*v6 + 8) != 68)
    {
      if (++v6 == (const void **)v44)
        goto LABEL_8;
    }
  }
  if (v6 == (const void **)v44)
  {
LABEL_8:
    v9 = operator new();
    v10 = v9;
    *(_BYTE *)(v9 + 8) = 68;
    *(_DWORD *)(v9 + 16) = 0;
    v8 = (char *)(v9 + 16);
    *(_QWORD *)v9 = &off_24D5CDE80;
    *(_BYTE *)(v9 + 20) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v11 = v44;
    if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
    {
      v13 = (uint64_t)(v44 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(*((_QWORD *)&v44 + 1) - (unint64_t)__p[1]) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*((_QWORD *)&v44 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v44 + 8, v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v13];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v12 = v17 + 1;
      v20 = (char *)__p[1];
      v19 = (char *)v44;
      if ((void *)v44 != __p[1])
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)__p[1];
      }
      __p[1] = v17;
      *(_QWORD *)&v44 = v12;
      *((_QWORD *)&v44 + 1) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v44 = v9;
      v12 = (_QWORD *)(v11 + 8);
    }
    *(_QWORD *)&v44 = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7 + 16;
  }
  *(_DWORD *)v8 = 0;
  v8[4] = v5;
  *((_QWORD *)v8 + 1) = 1000 * tv_sec + tv_usec / 0x3E8;
  v37 = v2 + 96;
  v38 = QMIServiceMsg::create();
  v39 = 25000;
  v40 = 0;
  v41 = 0;
  v22 = MEMORY[0x24BDAC760];
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 1174405120;
  v34[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_47_1;
  v34[4] = *(_QWORD *)v1;
  v23 = *(std::__shared_weak_count **)(v1 + 8);
  v35 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = *(void **)(v1 + 24);
  if (v26)
    v26 = _Block_copy(v26);
  v36 = v26;
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CDE08;
  aBlock[4] = v34;
  v27 = _Block_copy(aBlock);
  v41 = v27;
  if (v38)
  {
    qmi::Client::send();
    v27 = v41;
  }
  if (v27)
    _Block_release(v27);
  if (v36)
    _Block_release(v36);
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v33);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v32);
}

void sub_21693F194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (aBlock)
    _Block_release(aBlock);
  v26 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 24);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0x10E0C40B6EF74F0);
  }
  return a1;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_21693F2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::getSize()
{
  return tlv::size<vs::tlv::CallBarringPassword>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::MetricIndicationExt>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new();
  v2->n128_u8[8] = a1->n128_u8[8];
  v2->n128_u64[0] = (unint64_t)&off_24D5CDE80;
  result = a1[1];
  v2[1] = result;
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  void *v15;
  _QWORD *v17;
  _QWORD *v18;
  void *aBlock;
  uint8_t buf[8];
  std::__shared_weak_count *v21;

  v1 = *a1;
  v17 = a1;
  v18 = (_QWORD *)v1;
  v2 = *(_QWORD **)(v1 + 56);
  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 1)
  {
    if (*(_QWORD *)(v1 + 32) != *(_QWORD *)(v1 + 24))
    {
      v4 = *(std::__shared_weak_count **)(v1 + 8);
      *(_QWORD *)buf = *(_QWORD *)v1;
      v21 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = *(void **)(v1 + 48);
      if (v7)
        v7 = _Block_copy(v7);
      aBlock = v7;
      (*(void (**)(_QWORD *, uint8_t *, uint64_t, void **))(*v2 + 136))(v2, buf, v1 + 24, &aBlock);
      if (aBlock)
        _Block_release(aBlock);
      v8 = v21;
      if (v21)
      {
        v9 = (unint64_t *)&v21->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      goto LABEL_27;
    }
    v14 = v2[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#E Empty payload; trivially success and no change to baseband",
        buf,
        2u);
    }
    v15 = *(void **)(v1 + 48);
    if (v15)
      v15 = _Block_copy(v15);
    *(_QWORD *)buf = v15;
    awd::AppContext::postResultToHandler();
    v13 = *(const void **)buf;
    if (*(_QWORD *)buf)
LABEL_26:
      _Block_release(v13);
  }
  else
  {
    v11 = v2[5];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 16777472;
      buf[4] = v3;
      _os_log_error_impl(&dword_216897000, v11, OS_LOG_TYPE_ERROR, "Illegal payload type: %hhu", buf, 5u);
    }
    v12 = *(void **)(v1 + 48);
    if (v12)
      v12 = _Block_copy(v12);
    *(_QWORD *)buf = v12;
    awd::AppContext::postResultToHandler();
    v13 = *(const void **)buf;
    if (*(_QWORD *)buf)
      goto LABEL_26;
  }
LABEL_27:
  std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v18);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
}

void sub_21693F5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, void *a12, void *aBlock, uint64_t a14)
{
  if (aBlock)
    _Block_release(aBlock);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (const void *)v2[6];
    if (v3)
      _Block_release(v3);
    v4 = (void *)v2[3];
    if (v4)
    {
      v2[4] = v4;
      operator delete(v4);
    }
    v5 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v2);
    MEMORY[0x2199FEAC4](v5, 0x10F0C403F736783);
  }
  return a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CDED0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CDED0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::getSize(uint64_t a1)
{
  return tlv::size<awd::tlv::AddConfig>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::AddConfig>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CDED0;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 22) = *(_QWORD *)(a1 + 22);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 32), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_21693F828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C409EC0D692);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21693F908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void **v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD **v29;
  _QWORD *v30;
  _QWORD v31[5];
  std::__shared_weak_count *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *__p[2];
  __int128 v40;
  _QWORD aBlock[5];

  v1 = *a1;
  v29 = a1;
  v30 = v1;
  v2 = v1[3];
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v3 = (const void **)__p[1];
  if (__p[1] != (void *)v40)
  {
    while (*((_BYTE *)*v3 + 8) != 65)
    {
      if (++v3 == (const void **)v40)
        goto LABEL_8;
    }
  }
  if (v3 == (const void **)v40)
  {
LABEL_8:
    v6 = operator new();
    v7 = v6;
    *(_BYTE *)(v6 + 8) = 65;
    *(_QWORD *)v6 = &off_24D5CDF78;
    *(_DWORD *)(v6 + 12) = 0;
    v5 = (_QWORD *)(v6 + 12);
    *(_DWORD *)(v6 + 16) = 0;
    v8 = v40;
    if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
    {
      v10 = (uint64_t)(v40 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v11 = (uint64_t)(*((_QWORD *)&v40 + 1) - (unint64_t)__p[1]) >> 2;
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if (*((_QWORD *)&v40 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v40 + 8, v12);
      else
        v13 = 0;
      v14 = (uint64_t *)&v13[8 * v10];
      v15 = &v13[8 * v12];
      *v14 = v7;
      v9 = v14 + 1;
      v17 = (char *)__p[1];
      v16 = (char *)v40;
      if ((void *)v40 != __p[1])
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)__p[1];
      }
      __p[1] = v14;
      *(_QWORD *)&v40 = v9;
      *((_QWORD *)&v40 + 1) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v40 = v6;
      v9 = (_QWORD *)(v8 + 8);
    }
    *(_QWORD *)&v40 = v9;
  }
  else
  {
    if (!v4)
      __cxa_bad_cast();
    v5 = v4 + 12;
  }
  *v5 = 0;
  v34 = v2 + 96;
  v35 = QMIServiceMsg::create();
  v36 = 25000;
  v37 = 0;
  v38 = 0;
  v19 = MEMORY[0x24BDAC760];
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 1174405120;
  v31[2] = ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_51_2;
  v31[4] = *v1;
  v20 = (std::__shared_weak_count *)v1[1];
  v32 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (void *)v1[2];
  if (v23)
    v23 = _Block_copy(v23);
  v33 = v23;
  aBlock[0] = v19;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CDF00;
  aBlock[4] = v31;
  v24 = _Block_copy(aBlock);
  v38 = v24;
  if (v35)
  {
    qmi::Client::send();
    v24 = v38;
  }
  if (v24)
    _Block_release(v24);
  if (v33)
    _Block_release(v33);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v29);
}

void sub_21693FC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (aBlock)
    _Block_release(aBlock);
  v24 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

void ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_21693FDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PeripheralEndPoint>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CDF78;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 AppSettings;
  const void **v4;
  char *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[5];
  std::__shared_weak_count *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *__p[2];
  __int128 v41;
  _QWORD aBlock[5];

  v1 = *a1;
  v30 = a1;
  v31 = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  AppSettings = awd::AppContext::getAppSettings(*(awd::AppContext **)v1);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v41)
  {
    while (*((_BYTE *)*v4 + 8) != 105)
    {
      if (++v4 == (const void **)v41)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v41)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 105;
    *(_QWORD *)v7 = &off_24D5CDFF8;
    *(_BYTE *)(v7 + 10) = 0;
    v9 = v41;
    if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
    {
      v11 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v41;
      if ((void *)v41 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v41 = v10;
      *((_QWORD *)&v41 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v41 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_WORD *)(v8 + 9);
    *(_QWORD *)&v41 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = AppSettings;
  v35 = v2 + 96;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  v39 = 0;
  v20 = MEMORY[0x24BDAC760];
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 1174405120;
  v32[2] = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_54_0;
  v32[4] = *(_QWORD *)v1;
  v21 = *(std::__shared_weak_count **)(v1 + 8);
  v33 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v24 = *(void **)(v1 + 16);
  if (v24)
    v24 = _Block_copy(v24);
  v34 = v24;
  aBlock[0] = v20;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CDE08;
  aBlock[4] = v32;
  v25 = _Block_copy(aBlock);
  v39 = v25;
  if (v36)
  {
    qmi::Client::send();
    v25 = v39;
  }
  if (v25)
    _Block_release(v25);
  if (v34)
    _Block_release(v34);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v31);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
}

void sub_216940178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (aBlock)
    _Block_release(aBlock);
  v24 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_2169402DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileIdentifer>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CDFF8;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 AppSettings;
  const void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[5];
  std::__shared_weak_count *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *__p[2];
  __int128 v41;
  _QWORD aBlock[5];

  v1 = *a1;
  v30 = a1;
  v31 = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  AppSettings = awd::AppContext::getAppSettings(*(awd::AppContext **)v1);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v41)
  {
    while (*((_BYTE *)*v4 + 8) != 69)
    {
      if (++v4 == (const void **)v41)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v41)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_BYTE *)(v7 + 8) = 69;
    *(_QWORD *)v7 = &off_24D5CE078;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = (char *)(v7 + 12);
    *(_WORD *)(v7 + 16) = 0;
    v9 = v41;
    if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
    {
      v11 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v41;
      if ((void *)v41 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v41 = v10;
      *((_QWORD *)&v41 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v41 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    *(_QWORD *)&v41 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 12;
  }
  *(_DWORD *)v6 = 0;
  *((_WORD *)v6 + 2) = AppSettings;
  v35 = v2 + 96;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  v39 = 0;
  v20 = MEMORY[0x24BDAC760];
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 1174405120;
  v32[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_57_1;
  v32[4] = *(_QWORD *)v1;
  v21 = *(std::__shared_weak_count **)(v1 + 8);
  v33 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v24 = *(void **)(v1 + 16);
  if (v24)
    v24 = _Block_copy(v24);
  v34 = v24;
  aBlock[0] = v20;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CDE08;
  aBlock[4] = v32;
  v25 = _Block_copy(aBlock);
  v39 = v25;
  if (v36)
  {
    qmi::Client::send();
    v25 = v39;
  }
  if (v25)
    _Block_release(v25);
  if (v34)
    _Block_release(v34);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v31);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v30);
}

void sub_2169406CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (aBlock)
    _Block_release(aBlock);
  v24 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_216940830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::PIILocationExt>(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CE078;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const void **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[5];
  std::__shared_weak_count *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *__p[2];
  __int128 v42;
  _QWORD aBlock[5];

  v1 = *a1;
  v31 = a1;
  v32 = v1;
  v2 = *(_QWORD *)(v1 + 40);
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v3 = *(_QWORD *)(v1 + 20);
  v4 = *(_DWORD *)(v1 + 16);
  v5 = (const void **)__p[1];
  if (__p[1] != (void *)v42)
  {
    while (*((_BYTE *)*v5 + 8) != 103)
    {
      if (++v5 == (const void **)v42)
        goto LABEL_8;
    }
  }
  if (v5 == (const void **)v42)
  {
LABEL_8:
    v8 = operator new();
    v9 = v8;
    *(_BYTE *)(v8 + 8) = 103;
    *(_DWORD *)(v8 + 12) = 0;
    v7 = (char *)(v8 + 12);
    *(_QWORD *)v8 = &off_24D5CE0F8;
    *(_QWORD *)(v8 + 16) = 0;
    v10 = v42;
    if ((unint64_t)v42 >= *((_QWORD *)&v42 + 1))
    {
      v12 = (uint64_t)(v42 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = (uint64_t)(*((_QWORD *)&v42 + 1) - (unint64_t)__p[1]) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (*((_QWORD *)&v42 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v42 + 8, v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v12];
      v17 = &v15[8 * v14];
      *v16 = v9;
      v11 = v16 + 1;
      v19 = (char *)__p[1];
      v18 = (char *)v42;
      if ((void *)v42 != __p[1])
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = (char *)__p[1];
      }
      __p[1] = v16;
      *(_QWORD *)&v42 = v11;
      *((_QWORD *)&v42 + 1) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)v42 = v8;
      v11 = (_QWORD *)(v10 + 8);
    }
    *(_QWORD *)&v42 = v11;
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    v7 = v6 + 12;
  }
  *(_QWORD *)v7 = v3;
  *((_DWORD *)v7 + 2) = v4;
  v36 = v2 + 96;
  v37 = QMIServiceMsg::create();
  v38 = 25000;
  v39 = 0;
  v40 = 0;
  v21 = MEMORY[0x24BDAC760];
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 1174405120;
  v33[2] = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v33[3] = &__block_descriptor_tmp_60_0;
  v33[4] = *(_QWORD *)v1;
  v22 = *(std::__shared_weak_count **)(v1 + 8);
  v34 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(void **)(v1 + 32);
  if (v25)
    v25 = _Block_copy(v25);
  v35 = v25;
  aBlock[0] = v21;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CE128;
  aBlock[4] = v33;
  v26 = _Block_copy(aBlock);
  v40 = v26;
  if (v37)
  {
    qmi::Client::send();
    v26 = v40;
  }
  if (v26)
    _Block_release(v26);
  if (v35)
    _Block_release(v35);
  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v32);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v31);
}

void sub_216940C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (aBlock)
    _Block_release(aBlock);
  v24 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0x10E0C40E99E353BLL);
  }
  return a1;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_216940D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::getSize()
{
  return tlv::size<wds::tlv::Ipv4Address>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::Metrics>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CE0F8;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216940F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const void **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[5];
  std::__shared_weak_count *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *__p[2];
  __int128 v42;
  _QWORD aBlock[5];

  v1 = *a1;
  v31 = a1;
  v32 = v1;
  v2 = *(_QWORD *)(v1 + 40);
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v3 = *(_QWORD *)(v1 + 20);
  v4 = *(_DWORD *)(v1 + 16);
  v5 = (const void **)__p[1];
  if (__p[1] != (void *)v42)
  {
    while (*((_BYTE *)*v5 + 8) != 66)
    {
      if (++v5 == (const void **)v42)
        goto LABEL_8;
    }
  }
  if (v5 == (const void **)v42)
  {
LABEL_8:
    v8 = operator new();
    v9 = v8;
    *(_BYTE *)(v8 + 8) = 66;
    *(_QWORD *)v8 = &off_24D5CE1A0;
    *(_QWORD *)(v8 + 12) = 0;
    v7 = (char *)(v8 + 12);
    *(_QWORD *)(v8 + 20) = 0;
    v10 = v42;
    if ((unint64_t)v42 >= *((_QWORD *)&v42 + 1))
    {
      v12 = (uint64_t)(v42 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = (uint64_t)(*((_QWORD *)&v42 + 1) - (unint64_t)__p[1]) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (*((_QWORD *)&v42 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v42 + 8, v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v12];
      v17 = &v15[8 * v14];
      *v16 = v9;
      v11 = v16 + 1;
      v19 = (char *)__p[1];
      v18 = (char *)v42;
      if ((void *)v42 != __p[1])
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = (char *)__p[1];
      }
      __p[1] = v16;
      *(_QWORD *)&v42 = v11;
      *((_QWORD *)&v42 + 1) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)v42 = v8;
      v11 = (_QWORD *)(v10 + 8);
    }
    *(_QWORD *)&v42 = v11;
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    v7 = v6 + 12;
  }
  *(_DWORD *)v7 = 0;
  *(_QWORD *)(v7 + 4) = v3;
  *((_DWORD *)v7 + 3) = v4;
  v36 = v2 + 96;
  v37 = QMIServiceMsg::create();
  v38 = 25000;
  v39 = 0;
  v40 = 0;
  v21 = MEMORY[0x24BDAC760];
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 1174405120;
  v33[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v33[3] = &__block_descriptor_tmp_64_0;
  v33[4] = *(_QWORD *)v1;
  v22 = *(std::__shared_weak_count **)(v1 + 8);
  v34 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(void **)(v1 + 32);
  if (v25)
    v25 = _Block_copy(v25);
  v35 = v25;
  aBlock[0] = v21;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CE128;
  aBlock[4] = v33;
  v26 = _Block_copy(aBlock);
  v40 = v26;
  if (v37)
  {
    qmi::Client::send();
    v26 = v40;
  }
  if (v26)
    _Block_release(v26);
  if (v35)
    _Block_release(v35);
  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v32);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v31);
}

void sub_216941274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (aBlock)
    _Block_release(aBlock);
  v24 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x2199FEAC4](v4, 0x10E0C40E99E353BLL);
  }
  return a1;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  void *v1;
  void *aBlock;

  v1 = *(void **)(a1 + 48);
  if (v1)
    v1 = _Block_copy(v1);
  aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_2169413D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::getSize()
{
  return tlv::size<wds::tlv::Ipv4AddressExtended>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::MetricsExt>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CE1A0;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

void QMIATCommandDriver::create(dispatch_object_t *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *object;
  __int128 v11;

  v6 = operator new();
  object = *a1;
  if (*a1)
    dispatch_retain(*a1);
  ATCommandDriver::ATCommandDriver();
  *(_QWORD *)v6 = &off_24D5CE1D8;
  v7 = a2[1];
  *(_QWORD *)(v6 + 104) = *a2;
  *(_QWORD *)(v6 + 112) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  std::shared_ptr<QMIATCommandDriver>::shared_ptr[abi:ne180100]<QMIATCommandDriver,void>((uint64_t *)&v11, v6);
  *a3 = v11;
  v11 = 0uLL;
  if (object)
    dispatch_release(object);
}

void sub_216941594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;
  int v11;

  if (object)
    dispatch_release(object);
  if (v11)
    MEMORY[0x2199FEAC4](v10, 0x10E1C401EB18A05);
  _Unwind_Resume(exception_object);
}

void QMIATCommandDriver::~QMIATCommandDriver(QMIATCommandDriver *this)
{
  char *v2;

  *(_QWORD *)this = &off_24D5CE1D8;
  v2 = (char *)this + 104;
  qmi::Client::~Client((QMIATCommandDriver *)((char *)this + 120));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  ATCommandDriver::~ATCommandDriver(this);
}

{
  QMIATCommandDriver::~QMIATCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t QMIATCommandDriver::bootstrap_sync(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  dispatch_object_t v21;
  void *v22;
  char v23;
  _QWORD v24[2];
  __int128 v25;
  _QWORD *v26;

  std::string::basic_string[abi:ne180100]<0>(&v22, "QMIATCommandDriver");
  v2 = *(NSObject **)(a1 + 24);
  v21 = v2;
  if (v2)
    dispatch_retain(v2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "at");
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v15 = v4;
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (v16 = v5) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v4;
  v18 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  Registry::getServerConnection(*(Registry **)(a1 + 104));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 136, &v25);
  qmi::Client::~Client((qmi::Client *)v24);
  if (v14)
  {
    p_shared_owners = &v14->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__shared_weak_count::__release_weak(v18);
  if (v16)
  {
    v10 = &v16->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)v10);
    while (__stlxr(v11 - 1, (unint64_t *)v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v20 < 0)
    operator delete(__p);
  if (v21)
    dispatch_release(v21);
  if (v23 < 0)
    operator delete(v22);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke;
  v13[3] = &__block_descriptor_tmp_13;
  v13[4] = a1;
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 0x40000000;
  *(_QWORD *)&v25 = ___ZNK3qmi6Client13setIndHandlerIRKN2at15ReceivedCommand10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v25 + 1) = &unk_24D5CE318;
  v26 = v13;
  qmi::Client::setIndHandler();
  return qmi::Client::setHandler();
}

void sub_216941854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  NSObject *v32;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a30 < 0)
    operator delete(__p);
  v32 = *(NSObject **)(v30 - 120);
  if (v32)
    dispatch_release(v32);
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  _Unwind_Resume(a1);
}

void ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  QMIATCommandDriver *v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const std::string::value_type *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  std::string __p;
  std::string v31;
  uint8_t buf[8];
  void *v33[2];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = *(QMIATCommandDriver **)(a1 + 32);
  memset(&__p, 0, sizeof(__p));
  TlvValue = qmi::MessageBase::findTlvValue(this);
  v6 = TlvValue;
  if (TlvValue)
  {
    v7 = v5;
    *(_QWORD *)buf = TlvValue;
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    tlv::parseV<at::tlv::Command>((unint64_t *)buf, v5, v33);
    v8 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v9 = (int)v33[0];
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v31, (char *)v33[1], (char *)v34, v34 - (unint64_t)v33[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v31;
    }
    else
    {
      v9 = 0;
    }
    if (v33[1])
    {
      *(void **)&v34 = v33[1];
      operator delete(v33[1]);
    }
    if (v8)
      LOBYTE(v6) = 1;
    else
      LOBYTE(v6) = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 1, v6, v7);
  }
  else
  {
    v9 = 0;
  }
  v10 = qmi::MessageBase::findTlvValue(this);
  v12 = v10;
  if (v10)
  {
    v13 = v11;
    *(_QWORD *)buf = v10;
    memset(&v31, 0, sizeof(v31));
    tlv::parseV<at::tlv::Token>((unint64_t *)buf, v11, &v31);
    v14 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v33, v31.__r_.__value_.__l.__data_, (char *)v31.__r_.__value_.__l.__size_, v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]);
      v15 = (SBYTE7(v34) & 0x80u) == 0 ? (const std::string::value_type *)v33 : (const std::string::value_type *)v33[0];
      v16 = (SBYTE7(v34) & 0x80u) == 0 ? (void *)BYTE7(v34) : v33[1];
      std::string::append(&__p, v15, (std::string::size_type)v16);
      if (SBYTE7(v34) < 0)
        operator delete(v33[0]);
    }
    if (v31.__r_.__value_.__r.__words[0])
    {
      v31.__r_.__value_.__l.__size_ = v31.__r_.__value_.__r.__words[0];
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (!v14)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v12, v13);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
  if (!v17 || (v18 = *((_QWORD *)v3 + 1), (v19 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v31 = __p;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  *((_QWORD *)&v34 + 1) = 0;
  v26 = operator new(0x28uLL);
  *v26 = &off_24D5CE348;
  v26[1] = v18;
  v26[2] = v20;
  v26[3] = v3;
  *((_DWORD *)v26 + 8) = v9;
  *((_QWORD *)&v34 + 1) = v26;
  ATCommandDriver::handleCommand_sync();
  v27 = (void **)*((_QWORD *)&v34 + 1);
  if (*((void ***)&v34 + 1) == v33)
  {
    v28 = 4;
    v27 = v33;
  }
  else
  {
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_44;
    v28 = 5;
  }
  (*((void (**)(void))*v27 + v28))();
LABEL_44:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((v6 & 1) != 0)
      goto LABEL_51;
  }
  else if ((v6 & 1) != 0)
  {
    goto LABEL_51;
  }
  v29 = *((_QWORD *)v3 + 5);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_216897000, v29, OS_LOG_TYPE_ERROR, "Error in handling AT received command indication", buf, 2u);
  }
  QMIATCommandDriver::sendCommandResponse_sync(v3, 0, 1);
LABEL_51:
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216941C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  if (a30 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  QMIATCommandDriver *v1;
  const void **v2;
  char *v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *SupportedCommands;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  size_t v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  QMIATCommandDriver *v35;
  _OWORD v36[2];
  void *__p[2];
  __int128 v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[32];
  _QWORD v44[2];
  char *v45;
  char *v46;
  uint64_t *v47;

  v1 = *(QMIATCommandDriver **)(a1 + 32);
  memset(v36, 0, sizeof(v36));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v36);
  QMIATCommandDriver::send_sync(v1, (const qmi::MutableMessageBase *)v36);
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v2 = (const void **)__p[1];
  if (__p[1] != (void *)v38)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v38)
        goto LABEL_8;
    }
  }
  if (v2 == (const void **)v38)
  {
LABEL_8:
    v3 = (char *)operator new();
    v5 = v3;
    v3[8] = 1;
    *((_QWORD *)v3 + 2) = 0;
    v4 = (uint64_t *)(v3 + 16);
    *(_QWORD *)v3 = off_24D5CE468;
    *((_QWORD *)v3 + 3) = 0;
    *((_QWORD *)v3 + 4) = 0;
    v6 = v38;
    if ((unint64_t)v38 >= *((_QWORD *)&v38 + 1))
    {
      v8 = (uint64_t)(v38 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v9 = (uint64_t)(*((_QWORD *)&v38 + 1) - (unint64_t)__p[1]) >> 2;
      if (v9 <= v8 + 1)
        v9 = v8 + 1;
      if (*((_QWORD *)&v38 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10)
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v38 + 8, v10);
      else
        v11 = 0;
      v12 = &v11[8 * v8];
      v13 = &v11[8 * v10];
      *(_QWORD *)v12 = v5;
      v7 = v12 + 8;
      v14 = (char *)__p[1];
      v3 = (char *)v38;
      if ((void *)v38 != __p[1])
      {
        do
        {
          v15 = *((_QWORD *)v3 - 1);
          v3 -= 8;
          *((_QWORD *)v12 - 1) = v15;
          v12 -= 8;
        }
        while (v3 != v14);
        v3 = (char *)__p[1];
      }
      __p[1] = v12;
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v13;
      if (v3)
        operator delete(v3);
    }
    else
    {
      *(_QWORD *)v38 = v3;
      v7 = (_QWORD *)(v6 + 8);
    }
    *(_QWORD *)&v38 = v7;
  }
  else
  {
    if (!v3)
      __cxa_bad_cast();
    v4 = (uint64_t *)(v3 + 16);
  }
  SupportedCommands = (_QWORD *)ATCommandDriver::getSupportedCommands((ATCommandDriver *)v3);
  v35 = v1;
  v17 = SupportedCommands + 1;
  v18 = (_QWORD *)*SupportedCommands;
  if ((_QWORD *)*SupportedCommands != SupportedCommands + 1)
  {
    do
    {
      memset(v43, 0, sizeof(v43));
      if (*((char *)v18 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v43, (const std::string::value_type *)v18[4], v18[5]);
      }
      else
      {
        *(_OWORD *)v43 = *((_OWORD *)v18 + 2);
        *(_QWORD *)&v43[16] = v18[6];
      }
      *(_DWORD *)&v43[24] = *((_DWORD *)v18 + 14);
      v39 = 0;
      if (v43[23] >= 0)
        v19 = v43;
      else
        v19 = *(char **)v43;
      if (v43[23] >= 0)
        v20 = v43[23];
      else
        v20 = *(_QWORD *)&v43[8];
      v41 = 0;
      v42 = 0;
      v40 = 0;
      if (v20)
      {
        std::vector<unsigned char>::__vallocate[abi:ne180100](&v40, v20);
        v21 = v41;
        do
        {
          v22 = *v19++;
          *v21++ = v22;
          --v20;
        }
        while (v20);
        v41 = v21;
      }
      v24 = v4[1];
      v23 = v4[2];
      if (v24 >= v23)
      {
        v26 = (uint64_t)(v24 - *v4) >> 5;
        if ((unint64_t)(v26 + 1) >> 59)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v27 = v23 - *v4;
        v28 = v27 >> 4;
        if (v27 >> 4 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
          v29 = 0x7FFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        v47 = v4 + 2;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)(v4 + 2), v29);
        else
          v30 = 0;
        v31 = &v30[32 * v26];
        v44[0] = v30;
        v44[1] = v31;
        v45 = v31;
        v46 = &v30[32 * v29];
        *v31 = v39;
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = 0;
        *((_QWORD *)v31 + 1) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v31 + 1, v40, (uint64_t)v41, v41 - (_BYTE *)v40);
        v45 += 32;
        std::vector<at::tlv::CommandCallback>::__swap_out_circular_buffer(v4, v44);
        v25 = v4[1];
        std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)v44);
      }
      else
      {
        *(_BYTE *)v24 = v39;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 8) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v24 + 8), v40, (uint64_t)v41, v41 - (_BYTE *)v40);
        v25 = v24 + 32;
        v4[1] = v24 + 32;
      }
      v4[1] = v25;
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if ((v43[23] & 0x80000000) != 0)
        operator delete(*(void **)v43);
      v32 = (_QWORD *)v18[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v18[2];
          v34 = *v33 == (_QWORD)v18;
          v18 = v33;
        }
        while (!v34);
      }
      v18 = v33;
    }
    while (v33 != v17);
  }
  QMIATCommandDriver::send_sync(v35, (const qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v36);
}

void sub_2169420D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t QMIATCommandDriver::start(QMIATCommandDriver *this)
{
  return qmi::Client::start((QMIATCommandDriver *)((char *)this + 120));
}

uint64_t QMIATCommandDriver::shutdown(uint64_t a1)
{
  return qmi::Client::stop((qmi::Client *)(a1 + 120));
}

void QMIATCommandDriver::sendCommandResponse_sync(QMIATCommandDriver *a1, int a2, char a3)
{
  const void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[4];
  int v23;
  char v24;
  void *__p[2];
  __int128 v26;

  *(_OWORD *)__p = 0u;
  v26 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 0x40000000;
  v22[2] = ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke;
  v22[3] = &__block_descriptor_tmp_9_4;
  v23 = a2;
  v24 = a3;
  v6 = (const void **)__p[1];
  if (__p[1] != (void *)v26)
  {
    while (*((_BYTE *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v26)
        goto LABEL_8;
    }
  }
  if (v6 == (const void **)v26)
  {
LABEL_8:
    v9 = operator new();
    v10 = v9;
    *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = &off_24D5CE418;
    *(_DWORD *)(v9 + 16) = 0;
    v8 = v9 + 16;
    *(_WORD *)(v9 + 20) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v11 = v26;
    if ((unint64_t)v26 >= *((_QWORD *)&v26 + 1))
    {
      v13 = (uint64_t)(v26 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(*((_QWORD *)&v26 + 1) - (unint64_t)__p[1]) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*((_QWORD *)&v26 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v26 + 8, v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v13];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v12 = v17 + 1;
      v20 = (char *)__p[1];
      v19 = (char *)v26;
      if ((void *)v26 != __p[1])
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)__p[1];
      }
      __p[1] = v17;
      *(_QWORD *)&v26 = v12;
      *((_QWORD *)&v26 + 1) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v26 = v9;
      v12 = (_QWORD *)(v11 + 8);
    }
    *(_QWORD *)&v26 = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (uint64_t)v7 + 16;
  }
  ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke((uint64_t)v22, v8);
  QMIATCommandDriver::send_sync(a1, (const qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21694235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIATCommandDriver::send_sync(QMIATCommandDriver *this, const qmi::MutableMessageBase *a2)
{
  void *v3;
  _QWORD v4[6];
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  _QWORD aBlock[5];

  v4[5] = (char *)this + 120;
  v5 = QMIServiceMsg::create();
  v6 = 25000;
  v7 = 0;
  v8 = 0;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN18QMIATCommandDriver9send_syncERKN3qmi18MutableMessageBaseE_block_invoke;
  v4[3] = &__block_descriptor_tmp_7_4;
  v4[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_11MessageBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5CE3D0;
  aBlock[4] = v4;
  v3 = _Block_copy(aBlock);
  v8 = v3;
  if (v5)
  {
    qmi::Client::send();
    v3 = v8;
  }
  if (v3)
    _Block_release(v3);
}

void sub_216942434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  _Unwind_Resume(a1);
}

void ___ZN18QMIATCommandDriver9send_syncERKN3qmi18MutableMessageBaseE_block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_DWORD *)a2 + 1);
    v5 = *a2;
    v6[0] = 67109634;
    v6[1] = v5;
    v7 = 1024;
    v8 = v4;
    v9 = 2080;
    v10 = qmi::asString();
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I qmi AT response msg(%d) response(0x%04X, %s)", (uint8_t *)v6, 0x18u);
  }
}

void ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *p_p;
  size_t v6;
  _BYTE *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *__p;
  size_t v15;
  uint64_t v16;

  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 4) = at::convert(*(unsigned __int8 *)(a1 + 36));
  *(_BYTE *)(a2 + 5) = 3;
  if (*(_BYTE *)(a1 + 36))
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    v4 = (char *)at::asString();
    std::string::basic_string[abi:ne180100]<0>(&__p, v4);
    if (v16 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (v16 >= 0)
      v6 = HIBYTE(v16);
    else
      v6 = v15;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    if (v6)
    {
      std::vector<unsigned char>::__vallocate[abi:ne180100](&v11, v6);
      v7 = v12;
      do
      {
        v8 = *p_p++;
        *v7++ = v8;
        --v6;
      }
      while (v6);
      v12 = v7;
    }
    else
    {
      v7 = 0;
    }
    v9 = *(void **)(a2 + 8);
    if (v9)
    {
      *(_QWORD *)(a2 + 16) = v9;
      operator delete(v9);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v7 = v12;
    }
    v10 = v13;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v10;
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
  }
}

void sub_216942618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QMIATCommandDriver>::shared_ptr[abi:ne180100]<QMIATCommandDriver,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5CE2A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169426B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN2at15ReceivedCommand10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21694280C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_QWORD *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24D5CE348;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24D5CE348;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D5CE348;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24D5CE348;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::operator()(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v3;
  char v4;
  QMIATCommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v4 = *a2;
    v5 = *(QMIATCommandDriver **)(a1 + 24);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 8))
        QMIATCommandDriver::sendCommandResponse_sync(v5, *(_DWORD *)(a1 + 32), v4);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_216942AE0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::target_type()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_11MessageBaseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216942C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CE418;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CE418;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::getSize(uint64_t a1)
{
  return tlv::size<at::tlv::CommandResponse>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<at::tlv::CommandResponse>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CE418;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a1 + 20);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_216942D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C4066207FBFLL);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::~TlvWrapper(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D5CE468;
  v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D5CE468;
  v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199FEAC4](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::getSize(uint64_t a1)
{
  return tlv::size<at::tlv::DesiredCommands>((uint64_t *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<at::tlv::DesiredCommands>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::clone(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[3];
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5CE468;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = *(char **)(a1 + 16);
  v4 = *(char **)(a1 + 24);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v2 + 32, v5 >> 5);
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v6;
    *(_QWORD *)(v2 + 32) = &v6[32 * v7];
    v12 = v6;
    v13 = v6;
    v10[0] = v2 + 32;
    v10[1] = &v12;
    v8 = v6;
    v10[2] = &v13;
    v11 = 0;
    do
    {
      *v8 = *v3;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 1) = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v8 + 1, *((const void **)v3 + 1), *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 2) - *((_QWORD *)v3 + 1));
      v8 = v13 + 32;
      v13 += 32;
      v3 += 32;
    }
    while (v3 != v4);
    LOBYTE(v11) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<at::tlv::CommandCallback>,at::tlv::CommandCallback*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    *(_QWORD *)(v2 + 24) = v8;
  }
  return v2;
}

void sub_216942FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x2199FEAC4](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<at::tlv::CommandCallback>,at::tlv::CommandCallback*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 32)
    {
      v5 = *(void **)(i - 24);
      if (v5)
      {
        *(_QWORD *)(i - 16) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

const char *QMIDataCommandDriver::getName(QMIDataCommandDriver *this)
{
  if (PersonalitySpecificImpl::simSlot(this) == 1)
    return "DATA.QMIDriver.1";
  if (PersonalitySpecificImpl::simSlot(this) == 2)
    return "DATA.QMIDriver.2";
  return "DATA.QMIDriver.?";
}

uint64_t QMIDataCommandDriver::QMIDataCommandDriver(uint64_t a1, _QWORD *a2, uint64_t a3, NSObject **a4)
{
  const char *Name;
  NSObject *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  _BYTE v15[16];
  _BYTE v16[8];

  *(_QWORD *)a1 = MEMORY[0x24BDC3D38] + 16;
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  *(_QWORD *)(a1 + 32) = &unk_24D5CE778;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24D5CE4C8;
  *(_QWORD *)(a1 + 24) = &unk_24D5CE6A8;
  *(_QWORD *)(a1 + 56) = &unk_24D5CE8B0;
  Name = QMIDataCommandDriver::getName((QMIDataCommandDriver *)a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, (const char *)*MEMORY[0x24BDC3E90], Name);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = *a4;
  *(_QWORD *)(a1 + 80) = *a4;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 88) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(_QWORD *)a1 = &off_24D5CE4C8;
  *(_QWORD *)(a1 + 24) = &unk_24D5CE6A8;
  *(_QWORD *)(a1 + 32) = &unk_24D5CE778;
  *(_QWORD *)(a1 + 56) = &unk_24D5CE8B0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 128) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 136) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 216) = 850045863;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  v12 = (_QWORD *)operator new();
  *v12 = 0xFFFFFFFFLL;
  v12[1] = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = v12;
  *(_BYTE *)(a1 + 312) = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  *(_QWORD *)v13 = (char *)v13 + 8;
  *(_OWORD *)((char *)v13 + 40) = 0u;
  *(_OWORD *)((char *)v13 + 56) = 0u;
  *(_OWORD *)((char *)v13 + 72) = 0u;
  *(_OWORD *)((char *)v13 + 88) = 0u;
  *(_OWORD *)((char *)v13 + 104) = 0u;
  *(_OWORD *)((char *)v13 + 120) = 0u;
  *(_OWORD *)((char *)v13 + 24) = 0u;
  *(_QWORD *)(a1 + 336) = v13;
  *(_BYTE *)(a1 + 344) = 1;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_WORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  return a1;
}

void sub_216943304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10)
{
  uint64_t v10;
  _QWORD **v11;
  BBDataCommandDriverInterface *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  qmi::Client *v17;
  uint64_t v18;
  std::mutex *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v20 = *(std::__shared_weak_count **)(v10 + 328);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v16);
  v21 = *(_QWORD *)(v10 + 288);
  *(_QWORD *)(v10 + 288) = 0;
  if (v21)
    MEMORY[0x2199FEAC4](v21, 0x1000C40451B5BE8);
  std::mutex::~mutex(v19);
  if (*(char *)(v10 + 215) < 0)
    operator delete(*(void **)(v10 + 192));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v18);
  qmi::Client::~Client(v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v15);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v11);
  MEMORY[0x2199FDF6C](v14);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v13);
  BBDataCommandDriverInterface::~BBDataCommandDriverInterface(v12);
  PersonalitySpecificImpl::~PersonalitySpecificImpl((PersonalitySpecificImpl *)v10);
  PersonalitySpecific::~PersonalitySpecific((PersonalitySpecific *)v10);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::~QMIDataCommandDriver(QMIDataCommandDriver *this)
{
  BBDataCommandDriverInterface *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  void **v29;

  *(_QWORD *)this = &off_24D5CE4C8;
  *((_QWORD *)this + 3) = &unk_24D5CE6A8;
  *((_QWORD *)this + 4) = &unk_24D5CE778;
  v2 = (QMIDataCommandDriver *)((char *)this + 32);
  *((_QWORD *)this + 7) = &unk_24D5CE8B0;
  QMIDataCommandDriver::stopDataCommandDriver(this);
  v3 = (void **)*((_QWORD *)this + 56);
  v4 = (void **)*((_QWORD *)this + 57);
  if (v4 != v3)
  {
    v5 = *((_QWORD *)this + 59);
    v6 = &v3[v5 >> 4];
    v7 = (uint64_t)*v6 + 336 * (v5 & 0xF);
    v8 = (_QWORD *)((char *)this + 480);
    v9 = *(uint64_t *)((char *)v3 + (((*((_QWORD *)this + 60) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 336 * ((*((_DWORD *)this + 120) + (int)v5) & 0xF);
    if (v7 == v9)
      goto LABEL_13;
    while (1)
    {
      v10 = *(_QWORD **)(v7 + 328);
      if (v10 == (_QWORD *)(v7 + 304))
        break;
      if (v10)
      {
        v11 = 5;
LABEL_7:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      MEMORY[0x2199FDA50](v7);
      v7 += 336;
      if (v7 - (_QWORD)*v6 == 5376)
      {
        v12 = (uint64_t)v6[1];
        ++v6;
        v7 = v12;
      }
      if (v7 == v9)
      {
        v3 = (void **)*((_QWORD *)this + 56);
        v4 = (void **)*((_QWORD *)this + 57);
        goto LABEL_13;
      }
    }
    v10 = (_QWORD *)(v7 + 304);
    v11 = 4;
    goto LABEL_7;
  }
  v8 = (_QWORD *)((char *)this + 480);
  v4 = (void **)*((_QWORD *)this + 56);
LABEL_13:
  *v8 = 0;
  v13 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)*((_QWORD *)this + 57);
      v3 = (void **)(*((_QWORD *)this + 56) + 8);
      *((_QWORD *)this + 56) = v3;
      v13 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 8;
    goto LABEL_19;
  }
  if (v14 == 2)
  {
    v15 = 16;
LABEL_19:
    *((_QWORD *)this + 59) = v15;
  }
  if (v3 != v4)
  {
    do
    {
      v16 = *v3++;
      operator delete(v16);
    }
    while (v3 != v4);
    v18 = *((_QWORD *)this + 56);
    v17 = *((_QWORD *)this + 57);
    if (v17 != v18)
      *((_QWORD *)this + 57) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v19 = (void *)*((_QWORD *)this + 55);
  if (v19)
    operator delete(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((char **)this + 51));
  v29 = (void **)((char *)this + 376);
  std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v29);
  std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(*((_QWORD **)this + 45));
  v23 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v23)
  {
    std::deque<dispatch::group_session>::~deque[abi:ne180100](v23 + 88);
    std::deque<dispatch::group_session>::~deque[abi:ne180100](v23 + 40);
    v24 = *(std::__shared_weak_count **)(v23 + 32);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    std::__tree<std::string>::destroy(*(char **)(v23 + 8));
    MEMORY[0x2199FEAC4](v23, 0x10A0C408553B8AELL);
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  v28 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v28)
    MEMORY[0x2199FEAC4](v28, 0x1000C40451B5BE8);
  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  qmi::Client::~Client((QMIDataCommandDriver *)((char *)this + 144));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((_QWORD **)this + 14));
  MEMORY[0x2199FDF6C]((char *)this + 96);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 8);
  BBDataCommandDriverInterface::~BBDataCommandDriverInterface(v2);
  PersonalitySpecificImpl::~PersonalitySpecificImpl(this);
}

{
  PersonalitySpecific *v1;

  QMIDataCommandDriver::~QMIDataCommandDriver(this);
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;

  QMIDataCommandDriver::~QMIDataCommandDriver(this);
  PersonalitySpecific::~PersonalitySpecific(v1);
  JUMPOUT(0x2199FEAC4);
}

void QMIDataCommandDriver::stopDataCommandDriver(QMIDataCommandDriver *this)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v9) = 136315138;
    *(_QWORD *)((char *)&v9 + 4) = "stopDataCommandDriver";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: stopping...", (uint8_t *)&v9, 0xCu);
  }
  if (*((_QWORD *)this + 20))
  {
    qmi::Client::stop((QMIDataCommandDriver *)((char *)this + 144));
    v9 = 0u;
    v10 = 0u;
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)this + 160, &v10);
    qmi::Client::~Client((qmi::Client *)&v9);
  }
  v5 = *((_QWORD *)this + 22);
  v4 = (char *)this + 176;
  v3 = v5;
  if (v5)
  {
    QMIDataSystemDeterminationManager::shutdown_sync(v3);
    v9 = 0uLL;
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)v4, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::~QMIDataCommandDriver(QMIDataCommandDriver *this)
{
  PersonalitySpecific *v1;

  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;

  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 32));
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;

  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 56));
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 32));
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 56));
}

Registry **QMIDataCommandDriver::bootstrapDataCommandDriver(QMIDataCommandDriver *this)
{
  NSObject *v2;
  _QWORD *v3;
  Registry **result;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315138;
    v6 = "bootstrapDataCommandDriver";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: bootstrapping...", (uint8_t *)&v5, 0xCu);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 36);
  *v3 = 0xFFFFFFFFLL;
  v3[1] = 0;
  result = (Registry **)*((_QWORD *)this + 22);
  if (result)
    return (Registry **)QMIDataSystemDeterminationManager::bootstrap(result);
  return result;
}

Registry **`non-virtual thunk to'QMIDataCommandDriver::bootstrapDataCommandDriver(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::bootstrapDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

Registry **QMIDataCommandDriver::startDataCommandDriver(QMIDataCommandDriver *this)
{
  NSObject *v2;
  Registry **result;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "startDataCommandDriver";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: starting...", (uint8_t *)&v4, 0xCu);
  }
  result = (Registry **)*((_QWORD *)this + 22);
  if (result)
    return QMIDataSystemDeterminationManager::start(result);
  return result;
}

Registry **`non-virtual thunk to'QMIDataCommandDriver::startDataCommandDriver(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::startDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

void `non-virtual thunk to'QMIDataCommandDriver::stopDataCommandDriver(QMIDataCommandDriver *this)
{
  QMIDataCommandDriver::stopDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

void QMIDataCommandDriver::initialize_sync(QMIDataCommandDriver *this)
{
  NSObject *v2;
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  dispatch_object_t object;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "initialize_sync";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: initializing...", buf, 0xCu);
  }
  if (capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v3))
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    v20 = *((_QWORD *)this + 16);
    v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t *__return_ptr, QMIDataCommandDriver *))(*(_QWORD *)this + 16))(&v18, this);
    v7 = *((_QWORD *)this + 10);
    object = v7;
    if (v7)
      dispatch_retain(v7);
    QMIDataSystemDeterminationManager::create(&v20, (uint64_t)&v18, &object, (uint64_t)this + 56, (uint64_t *)buf);
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)this + 176, (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (object)
      dispatch_release(object);
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v21;
    if (v21)
    {
      v15 = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_216943C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  NSObject *v13;

  if (v13)
    dispatch_release(v13);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(QMIDataCommandDriver::QMIClientsInfo *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  std::deque<dispatch::group_session>::__move_assign((_QWORD *)this + 5, (uint64_t)&v6);
  std::deque<dispatch::group_session>::~deque[abi:ne180100]((uint64_t)&v6);
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  std::deque<dispatch::group_session>::__move_assign((_QWORD *)this + 11, (uint64_t)&v6);
  return std::deque<dispatch::group_session>::~deque[abi:ne180100]((uint64_t)&v6);
}

void QMIDataCommandDriver::resetSlicing_sync(QMIDataCommandDriver *this, int a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v4)
  {
    v21 = std::__shared_weak_count::lock(v4);
    if (v21)
    {
      v5 = *((_QWORD *)this + 40);
      if (v5)
      {
        v6 = PersonalitySpecificImpl::simSlot(this);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, v6, 0);
      }
    }
  }
  if (a2)
  {
    v7 = (unsigned __int16 *)*((_QWORD *)this + 53);
    if (v7)
    {
      v8 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *v7;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#N WDS PduSessionLookup: aborting pending transaction %u", buf, 8u);
        v7 = (unsigned __int16 *)*((_QWORD *)this + 53);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)&unk_216AC4FCA);
      v10 = *((_QWORD *)v7 + 4);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(v10, buf);
      if (v23 < 0)
        operator delete(*(void **)buf);
      std::shared_ptr<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::reset[abi:ne180100]((_QWORD *)this + 53);
    }
    while (*((_QWORD *)this + 60))
    {
      v11 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N WDS PduSessionLookup: aborting pending request", buf, 2u);
      }
      v12 = *((_QWORD *)this + 59);
      v13 = *(_QWORD *)(*((_QWORD *)this + 56) + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8));
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)&unk_216AC4FCA);
      v14 = *(_QWORD *)(v13 + 336 * (v12 & 0xF) + 328);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
      if (v23 < 0)
        operator delete(*(void **)buf);
      std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front((uint64_t)this + 440);
    }
    v16 = *((_QWORD *)this + 47);
    v15 = *((_QWORD *)this + 48);
    if (v16 != v15)
    {
      v17 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#N Reset Slicing: cleaning tds", buf, 2u);
        v16 = *((_QWORD *)this + 47);
        v15 = *((_QWORD *)this + 48);
      }
      while (v15 != v16)
      {
        v15 -= 304;
        MEMORY[0x2199FDA50](v15);
      }
      *((_QWORD *)this + 48) = v16;
    }
    if (*((_QWORD *)this + 52))
    {
      v18 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#N Reset Slicing: cleaning transaction in progress", buf, 2u);
      }
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((char **)this + 51));
      *((_QWORD *)this + 51) = 0;
      *((_QWORD *)this + 52) = 0;
      *((_QWORD *)this + 50) = (char *)this + 408;
    }
  }
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_21694400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::clientStarted(uint64_t a1, int a2, qmi::Client *this, int a4, int a5)
{
  uint64_t Name;
  __int128 v11;
  void **v12;
  uint64_t **v13;
  NSObject *v14;
  std::string *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t **v21;
  void **v22;
  _QWORD *v23;
  uint64_t *v24;
  std::string *v25;
  uint64_t *v26;
  NSObject *v27;
  const char *v28;
  std::string *v29;
  uint64_t *v30;
  uint64_t **v31;
  int v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  NSObject *v37;
  uint64_t v38;
  capabilities::ct *v39;
  capabilities::ct *v40;
  uint64_t v41;
  NSObject *v42;
  _BOOL4 v43;
  const void **v44;
  char *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  const void **v59;
  const void **i;
  char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  const void **j;
  char *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  const void **v90;
  const void **v91;
  const void **v92;
  char *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _BYTE *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  const void **v119;
  char *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  capabilities::ct *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  NSObject *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *p_shared_owners;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD v152[5];
  _QWORD v153[5];
  _QWORD v154[5];
  _QWORD v155[5];
  _QWORD v156[5];
  _QWORD v157[5];
  _QWORD v158[5];
  _QWORD v159[5];
  std::string v160;
  _QWORD v161[5];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  void *v167;
  _BYTE buf[24];
  std::string *v169;
  _QWORD *v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  memset(&v160, 0, sizeof(v160));
  Name = qmi::Client::getName(this);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v11 = *(_OWORD *)Name;
    v160.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v11;
  }
  v12 = std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1 + 336), (void **)&v160.__r_.__value_.__l.__data_);
  v13 = *(uint64_t ***)(a1 + 336);
  if (v13 + 1 != (uint64_t **)v12)
  {
    v14 = *(NSObject **)(a1 + 96);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    v15 = &v160;
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v160.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "clientStarted";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v15;
    v16 = "#E %s: client %s already active !";
    v17 = v14;
    v18 = 22;
    goto LABEL_30;
  }
  v19 = (uint64_t **)v12;
  v20 = *v12;
  if (*v12)
  {
    v21 = (uint64_t **)v12;
    while (1)
    {
      while (1)
      {
        v22 = (void **)v20;
        v23 = v20 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v160, (void **)v20 + 4) & 0x80) == 0)
          break;
        v20 = *v22;
        v21 = (uint64_t **)v22;
        if (!*v22)
          goto LABEL_18;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (void **)&v160.__r_.__value_.__l.__data_) & 0x80) == 0)break;
      v21 = (uint64_t **)(v22 + 1);
      v20 = v22[1];
      if (!v20)
        goto LABEL_18;
    }
    if (*v21)
      goto LABEL_24;
  }
  else
  {
    v21 = (uint64_t **)v12;
    v22 = v12;
  }
LABEL_18:
  v24 = (uint64_t *)operator new(0x38uLL);
  v25 = (std::string *)(v24 + 4);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    v24[6] = v160.__r_.__value_.__r.__words[2];
  }
  *v24 = 0;
  v24[1] = 0;
  v24[2] = (uint64_t)v22;
  *v21 = v24;
  v26 = (uint64_t *)**v13;
  if (v26)
  {
    *v13 = v26;
    v24 = *v21;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v19, v24);
  v13[2] = (uint64_t *)((char *)v13[2] + 1);
LABEL_24:
  v27 = *(NSObject **)(a1 + 96);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    goto LABEL_31;
  v28 = "non";
  if (a2)
    v28 = (const char *)&unk_216AC4FCA;
  *(_DWORD *)buf = 136315650;
  *(_QWORD *)&buf[4] = "clientStarted";
  v29 = &v160;
  if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = (std::string *)v160.__r_.__value_.__r.__words[0];
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = v28;
  *(_WORD *)&buf[22] = 2080;
  v169 = v29;
  v16 = "#I %s: %s primary client %s activated";
  v17 = v27;
  v18 = 32;
LABEL_30:
  _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
LABEL_31:
  if (a5 == 1)
  {
    v30 = *(uint64_t **)(a1 + 360);
    if (v30)
    {
      do
      {
        while (1)
        {
          v31 = (uint64_t **)v30;
          v32 = *((_DWORD *)v30 + 8);
          if (v32 <= a4)
            break;
          v30 = *v31;
          v33 = v31;
          if (!*v31)
            goto LABEL_41;
        }
        if (v32 >= a4)
        {
          v36 = (char *)v31;
          goto LABEL_44;
        }
        v30 = v31[1];
      }
      while (v30);
      v33 = v31 + 1;
    }
    else
    {
      v33 = (uint64_t **)(a1 + 360);
      v31 = (uint64_t **)(a1 + 360);
    }
LABEL_41:
    v36 = (char *)operator new(0x48uLL);
    *((_DWORD *)v36 + 8) = a4;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v31;
    *v33 = (uint64_t *)v36;
    v34 = **(_QWORD **)(a1 + 352);
    v35 = (uint64_t *)v36;
    if (v34)
    {
      *(_QWORD *)(a1 + 352) = v34;
      v35 = *v33;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 360), v35);
    ++*(_QWORD *)(a1 + 368);
LABEL_44:
    std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)v36 + 7, (uint64_t *)this + 2);
  }
  if (a2)
  {
    v37 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "clientStarted";
      _os_log_impl(&dword_216897000, v37, OS_LOG_TYPE_DEFAULT, "#I %s: basebandOn", buf, 0xCu);
    }
    std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), (uint64_t *)this + 2);
    v38 = MEMORY[0x24BDAC760];
    v159[0] = MEMORY[0x24BDAC760];
    v159[1] = 0x40000000;
    v159[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke;
    v159[3] = &__block_descriptor_tmp_14;
    v159[4] = a1;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v169 = (std::string *)&unk_24D5CFB20;
    v170 = v159;
    qmi::Client::setIndHandler();
    v158[0] = v38;
    v158[1] = 0x40000000;
    v158[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_2;
    v158[3] = &__block_descriptor_tmp_7_5;
    v158[4] = a1;
    *(_QWORD *)buf = v38;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds15LTEAttachParams10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v169 = (std::string *)&unk_24D5CFB48;
    v170 = v158;
    qmi::Client::setIndHandler();
    v157[0] = v38;
    v157[1] = 0x40000000;
    v157[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_3;
    v157[3] = &__block_descriptor_tmp_8_6;
    v157[4] = a1;
    *(_QWORD *)buf = v38;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds13FDBackoffTime10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v169 = (std::string *)&unk_24D5CFB70;
    v170 = v157;
    v39 = (capabilities::ct *)qmi::Client::setIndHandler();
    if (capabilities::ct::supports5GSlicing(v39))
    {
      v156[0] = v38;
      v156[1] = 0x40000000;
      v156[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_4;
      v156[3] = &__block_descriptor_tmp_9_5;
      v156[4] = a1;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds6TdInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v169 = (std::string *)&unk_24D5CFB98;
      v170 = v156;
      qmi::Client::setIndHandler();
      v155[0] = v38;
      v155[1] = 0x40000000;
      v155[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_5;
      v155[3] = &__block_descriptor_tmp_10_4;
      v155[4] = a1;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds9RouteInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v169 = (std::string *)&unk_24D5CFBC0;
      v170 = v155;
      qmi::Client::setIndHandler();
      v154[0] = v38;
      v154[1] = 0x40000000;
      v154[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_6;
      v154[3] = &__block_descriptor_tmp_11_3;
      v154[4] = a1;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds16PduSessionLookup10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v169 = (std::string *)&unk_24D5CFBE8;
      v170 = v154;
      qmi::Client::setIndHandler();
    }
    QMIDataCommandDriver::resetSlicing_sync((QMIDataCommandDriver *)a1, 1);
    v153[0] = v38;
    v153[1] = 0x40000000;
    v153[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_7;
    v153[3] = &__block_descriptor_tmp_12_7;
    v153[4] = a1;
    *(_QWORD *)buf = v38;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds10Congestion10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v169 = (std::string *)&unk_24D5CFC10;
    v170 = v153;
    v40 = (capabilities::ct *)qmi::Client::setIndHandler();
    if (capabilities::ct::supportsQMIWakeUpForDFC(v40))
    {
      v152[0] = v38;
      v152[1] = 0x40000000;
      v152[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_8;
      v152[3] = &__block_descriptor_tmp_13_6;
      v152[4] = a1;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds8WakeUpAp10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v169 = (std::string *)&unk_24D5CFC38;
      v170 = v152;
      qmi::Client::setIndHandler();
      qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 144));
    }
    QMIDataCommandDriver::updateCellularDataStatusInfo_sync((QMIDataCommandDriver *)a1, *(_BYTE *)(a1 + 344));
    v41 = *(_QWORD *)(a1 + 160);
    v42 = *(NSObject **)(a1 + 96);
    v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "sendWdsIndicationRegisterReq_sync";
        _os_log_impl(&dword_216897000, v42, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
      }
      goto LABEL_215;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "sendWdsIndicationRegisterReq_sync";
      _os_log_impl(&dword_216897000, v42, OS_LOG_TYPE_DEFAULT, "#I %s: Sending WDS Indication Register (control point)", buf, 0xCu);
    }
    v162 = 0u;
    v163 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v162);
    v44 = (const void **)*((_QWORD *)&v162 + 1);
    if (*((_QWORD *)&v162 + 1) != (_QWORD)v163)
    {
      while (*((_BYTE *)*v44 + 8) != 34)
      {
        if (++v44 == (const void **)v163)
          goto LABEL_64;
      }
    }
    if (v44 == (const void **)v163)
    {
LABEL_64:
      v45 = (char *)operator new();
      v47 = v45;
      *((_WORD *)v45 + 4) = 34;
      *(_QWORD *)v45 = &off_24D5CFF50;
      v48 = v163;
      if ((unint64_t)v163 >= *((_QWORD *)&v163 + 1))
      {
        v50 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_238;
        v51 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
        if (v51 <= v50 + 1)
          v51 = v50 + 1;
        if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v52);
        else
          v53 = 0;
        v54 = &v53[8 * v50];
        v55 = &v53[8 * v52];
        *(_QWORD *)v54 = v47;
        v49 = v54 + 8;
        v56 = (char *)*((_QWORD *)&v162 + 1);
        v45 = (char *)v163;
        if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
        {
          do
          {
            v57 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v45 != v56);
          v45 = (char *)*((_QWORD *)&v162 + 1);
        }
        *((_QWORD *)&v162 + 1) = v54;
        *(_QWORD *)&v163 = v49;
        *((_QWORD *)&v163 + 1) = v55;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v163 = v45;
        v49 = (_QWORD *)(v48 + 8);
      }
      v46 = v47 + 9;
      *(_QWORD *)&v163 = v49;
    }
    else
    {
      if (!v45)
        goto LABEL_239;
      v46 = v45 + 9;
    }
    *v46 = 1;
    v58 = capabilities::ct::supportsThroughputEngineering((capabilities::ct *)v45);
    v59 = (const void **)v163;
    if (v58)
    {
      for (i = (const void **)*((_QWORD *)&v162 + 1); ; ++i)
      {
        if (i == (const void **)v163)
          goto LABEL_91;
        if (*((_BYTE *)*i + 8) == 24)
          break;
      }
      if (i == (const void **)v163)
      {
LABEL_91:
        v63 = operator new();
        v64 = v63;
        *(_WORD *)(v63 + 8) = 24;
        *(_QWORD *)v63 = &off_24D5CFFA0;
        v65 = v163;
        if ((unint64_t)v163 >= *((_QWORD *)&v163 + 1))
        {
          v66 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
          if ((unint64_t)(v66 + 1) >> 61)
            goto LABEL_238;
          v67 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
          if (v67 <= v66 + 1)
            v67 = v66 + 1;
          if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v68 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v68 = v67;
          if (v68)
            v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v68);
          else
            v69 = 0;
          v70 = (uint64_t *)&v69[8 * v66];
          v71 = &v69[8 * v68];
          *v70 = v64;
          v59 = (const void **)(v70 + 1);
          v73 = (char *)*((_QWORD *)&v162 + 1);
          v72 = (char *)v163;
          if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
          {
            do
            {
              v74 = *((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v70 = v74;
            }
            while (v72 != v73);
            v72 = (char *)*((_QWORD *)&v162 + 1);
          }
          *((_QWORD *)&v162 + 1) = v70;
          *(_QWORD *)&v163 = v59;
          *((_QWORD *)&v163 + 1) = v71;
          if (v72)
            operator delete(v72);
        }
        else
        {
          *(_QWORD *)v163 = v63;
          v59 = (const void **)(v65 + 8);
        }
        v62 = (_BYTE *)(v64 + 9);
        *(_QWORD *)&v163 = v59;
      }
      else
      {
        if (!v61)
          goto LABEL_239;
        v62 = v61 + 9;
      }
      *v62 = 1;
    }
    for (j = (const void **)*((_QWORD *)&v162 + 1); ; ++j)
    {
      if (j == v59)
        goto LABEL_116;
      if (*((unsigned __int8 *)*j + 8) == 161)
        break;
    }
    if (j == v59)
    {
LABEL_116:
      v76 = (char *)operator new();
      v78 = v76;
      *((_WORD *)v76 + 4) = 161;
      *(_QWORD *)v76 = &off_24D5CFFF0;
      v79 = v163;
      if ((unint64_t)v163 >= *((_QWORD *)&v163 + 1))
      {
        v81 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_238;
        v82 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
        if (v82 <= v81 + 1)
          v82 = v81 + 1;
        if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
          v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v83);
        else
          v84 = 0;
        v85 = &v84[8 * v81];
        v86 = &v84[8 * v83];
        *(_QWORD *)v85 = v78;
        v80 = v85 + 8;
        v87 = (char *)*((_QWORD *)&v162 + 1);
        v76 = (char *)v163;
        if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
        {
          do
          {
            v88 = *((_QWORD *)v76 - 1);
            v76 -= 8;
            *((_QWORD *)v85 - 1) = v88;
            v85 -= 8;
          }
          while (v76 != v87);
          v76 = (char *)*((_QWORD *)&v162 + 1);
        }
        *((_QWORD *)&v162 + 1) = v85;
        *(_QWORD *)&v163 = v80;
        *((_QWORD *)&v163 + 1) = v86;
        if (v76)
          operator delete(v76);
      }
      else
      {
        *(_QWORD *)v163 = v76;
        v80 = (_QWORD *)(v79 + 8);
      }
      v77 = v78 + 9;
      *(_QWORD *)&v163 = v80;
    }
    else
    {
      if (!v76)
        goto LABEL_239;
      v77 = v76 + 9;
    }
    *v77 = 1;
    v89 = (char *)capabilities::ct::supports5GSlicing((capabilities::ct *)v76);
    if ((_DWORD)v89)
    {
      v90 = (const void **)*((_QWORD *)&v162 + 1);
      v91 = (const void **)v163;
      v92 = (const void **)*((_QWORD *)&v162 + 1);
      if (*((_QWORD *)&v162 + 1) != (_QWORD)v163)
      {
        v92 = (const void **)*((_QWORD *)&v162 + 1);
        while (*((_BYTE *)*v92 + 8) != 55)
        {
          if (++v92 == (const void **)v163)
            goto LABEL_142;
        }
      }
      if (v92 == (const void **)v163)
      {
LABEL_142:
        v95 = operator new();
        v96 = v95;
        *(_WORD *)(v95 + 8) = 55;
        *(_QWORD *)v95 = &off_24D5D0040;
        v97 = v163;
        if ((unint64_t)v163 >= *((_QWORD *)&v163 + 1))
        {
          v98 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
          if ((unint64_t)(v98 + 1) >> 61)
            goto LABEL_238;
          v99 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
          if (v99 <= v98 + 1)
            v99 = v98 + 1;
          if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v100 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v100 = v99;
          if (v100)
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v100);
          else
            v101 = 0;
          v102 = (uint64_t *)&v101[8 * v98];
          v103 = &v101[8 * v100];
          *v102 = v96;
          v91 = (const void **)(v102 + 1);
          v105 = (char *)*((_QWORD *)&v162 + 1);
          v104 = (char *)v163;
          if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
          {
            do
            {
              v106 = *((_QWORD *)v104 - 1);
              v104 -= 8;
              *--v102 = v106;
            }
            while (v104 != v105);
            v104 = (char *)*((_QWORD *)&v162 + 1);
          }
          *((_QWORD *)&v162 + 1) = v102;
          *(_QWORD *)&v163 = v91;
          *((_QWORD *)&v163 + 1) = v103;
          if (v104)
            operator delete(v104);
        }
        else
        {
          *(_QWORD *)v163 = v95;
          v91 = (const void **)(v97 + 8);
        }
        v94 = (_BYTE *)(v96 + 9);
        *(_QWORD *)&v163 = v91;
        v90 = (const void **)*((_QWORD *)&v162 + 1);
      }
      else
      {
        if (!v93)
          goto LABEL_239;
        v94 = v93 + 9;
      }
      *v94 = 1;
      while (1)
      {
        if (v90 == v91)
          goto LABEL_166;
        if (*((_BYTE *)*v90 + 8) == 56)
          break;
        ++v90;
      }
      if (v90 == v91)
      {
LABEL_166:
        v89 = (char *)operator new();
        v108 = v89;
        *((_WORD *)v89 + 4) = 56;
        *(_QWORD *)v89 = &off_24D5D0090;
        v109 = v163;
        if ((unint64_t)v163 >= *((_QWORD *)&v163 + 1))
        {
          v111 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
          if ((unint64_t)(v111 + 1) >> 61)
            goto LABEL_238;
          v112 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
          if (v112 <= v111 + 1)
            v112 = v111 + 1;
          if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v112;
          if (v113)
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v113);
          else
            v114 = 0;
          v115 = &v114[8 * v111];
          v116 = &v114[8 * v113];
          *(_QWORD *)v115 = v108;
          v110 = v115 + 8;
          v117 = (char *)*((_QWORD *)&v162 + 1);
          v89 = (char *)v163;
          if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
          {
            do
            {
              v118 = *((_QWORD *)v89 - 1);
              v89 -= 8;
              *((_QWORD *)v115 - 1) = v118;
              v115 -= 8;
            }
            while (v89 != v117);
            v89 = (char *)*((_QWORD *)&v162 + 1);
          }
          *((_QWORD *)&v162 + 1) = v115;
          *(_QWORD *)&v163 = v110;
          *((_QWORD *)&v163 + 1) = v116;
          if (v89)
            operator delete(v89);
        }
        else
        {
          *(_QWORD *)v163 = v89;
          v110 = (_QWORD *)(v109 + 8);
        }
        v107 = v108 + 9;
        *(_QWORD *)&v163 = v110;
      }
      else
      {
        if (!v89)
          goto LABEL_239;
        v107 = v89 + 9;
      }
      *v107 = 1;
    }
    if (!capabilities::ct::supports5G((capabilities::ct *)v89))
    {
LABEL_210:
      *(_QWORD *)&v164 = a1 + 144;
      *((_QWORD *)&v164 + 1) = QMIServiceMsg::create();
      v165 = 25000;
      v166 = 0;
      v167 = 0;
      v161[0] = v38;
      v161[1] = 0x40000000;
      v161[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_7;
      v161[3] = &__block_descriptor_tmp_86_1;
      v161[4] = a1;
      *(_QWORD *)buf = v38;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v169 = (std::string *)&unk_24D5D0110;
      v170 = v161;
      v135 = _Block_copy(buf);
      v167 = v135;
      if (*((_QWORD *)&v164 + 1))
      {
        qmi::Client::send();
        v135 = v167;
      }
      if (v135)
        _Block_release(v135);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v162);
LABEL_215:
      QMIDataCommandDriver::sendWdsSetEventReportReq_sync((QMIDataCommandDriver *)a1, 1);
      QMIDataCommandDriver::sendGetDeviceNAIRequest_sync((QMIDataCommandDriver *)a1);
      if ((capabilities::ct::supportsDataSystemDetermination(v136) & 1) == 0)
        QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync((QMIDataCommandDriver *)a1);
      v137 = *(std::__shared_weak_count **)(a1 + 48);
      if (v137)
      {
        v138 = std::__shared_weak_count::lock(v137);
        *(_QWORD *)&buf[8] = v138;
        if (v138)
        {
          v139 = v138;
          v140 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)buf = v140;
          if (!v140)
            goto LABEL_231;
          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 320))(v140);
          *(_WORD *)(a1 + 488) = 0;
          v141 = *(NSObject **)(a1 + 96);
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v164) = 136315138;
            *(_QWORD *)((char *)&v164 + 4) = "clientStarted";
            _os_log_impl(&dword_216897000, v141, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured: fSliceFlag reset", (uint8_t *)&v164, 0xCu);
          }
          v142 = *(std::__shared_weak_count **)(a1 + 328);
          if (v142)
          {
            v143 = std::__shared_weak_count::lock(v142);
            *((_QWORD *)&v164 + 1) = v143;
            if (v143)
            {
              v144 = v143;
              v145 = *(_QWORD *)(a1 + 320);
              *(_QWORD *)&v164 = v145;
              if (v145)
              {
                v146 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
                v147 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 88))(v145, v146);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, v147);
              }
              p_shared_owners = (unint64_t *)&v144->__shared_owners_;
              do
                v149 = __ldaxr(p_shared_owners);
              while (__stlxr(v149 - 1, p_shared_owners));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
          }
          v139 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
LABEL_231:
            v150 = (unint64_t *)&v139->__shared_owners_;
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
        }
      }
      goto LABEL_235;
    }
    v119 = (const void **)*((_QWORD *)&v162 + 1);
    if (*((_QWORD *)&v162 + 1) != (_QWORD)v163)
    {
      while (*((unsigned __int8 *)*v119 + 8) != 162)
      {
        if (++v119 == (const void **)v163)
          goto LABEL_192;
      }
    }
    if (v119 != (const void **)v163)
    {
      if (v120)
      {
        v121 = v120 + 9;
LABEL_209:
        *v121 = 1;
        goto LABEL_210;
      }
LABEL_239:
      __cxa_bad_cast();
    }
LABEL_192:
    v122 = operator new();
    v123 = v122;
    *(_WORD *)(v122 + 8) = 162;
    *(_QWORD *)v122 = &off_24D5D00E0;
    v124 = v163;
    if ((unint64_t)v163 < *((_QWORD *)&v163 + 1))
    {
      *(_QWORD *)v163 = v122;
      v125 = (_QWORD *)(v124 + 8);
LABEL_208:
      v121 = (_BYTE *)(v123 + 9);
      *(_QWORD *)&v163 = v125;
      goto LABEL_209;
    }
    v126 = (uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3;
    if (!((unint64_t)(v126 + 1) >> 61))
    {
      v127 = (uint64_t)(*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1)) >> 2;
      if (v127 <= v126 + 1)
        v127 = v126 + 1;
      if (*((_QWORD *)&v163 + 1) - *((_QWORD *)&v162 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v128 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v128 = v127;
      if (v128)
        v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v163 + 8, v128);
      else
        v129 = 0;
      v130 = (uint64_t *)&v129[8 * v126];
      v131 = &v129[8 * v128];
      *v130 = v123;
      v125 = v130 + 1;
      v133 = (char *)*((_QWORD *)&v162 + 1);
      v132 = (char *)v163;
      if ((_QWORD)v163 != *((_QWORD *)&v162 + 1))
      {
        do
        {
          v134 = *((_QWORD *)v132 - 1);
          v132 -= 8;
          *--v130 = v134;
        }
        while (v132 != v133);
        v132 = (char *)*((_QWORD *)&v162 + 1);
      }
      *((_QWORD *)&v162 + 1) = v130;
      *(_QWORD *)&v163 = v125;
      *((_QWORD *)&v163 + 1) = v131;
      if (v132)
        operator delete(v132);
      goto LABEL_208;
    }
LABEL_238:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
LABEL_235:
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
}

void sub_216945168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v54 - 208);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v54 - 160);
  if (a54 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  QMIDataCommandDriver *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  capabilities::ct *v10;
  uint64_t TlvValue;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  QMIDataCommandDriver *v21;
  _QWORD v22[5];
  _QWORD v23[5];
  unsigned __int8 v24;
  _QWORD *v25;
  __int128 buf;
  void (*v27)(uint64_t, unsigned __int8 *);
  void *v28;
  uint64_t *v29;
  QMIDataCommandDriver *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(QMIDataCommandDriver **)(a1 + 32);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)v2 + 5);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *((_QWORD *)v2 + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = "handleWdsEventReportInd_sync";
          _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS Set Event Report Indications", (uint8_t *)&buf, 0xCu);
        }
        v9 = MEMORY[0x24BDAC760];
        v23[0] = MEMORY[0x24BDAC760];
        v23[1] = 0x40000000;
        v23[2] = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke;
        v23[3] = &__block_descriptor_tmp_32_1;
        v23[4] = v2;
        *(_QWORD *)&buf = v23;
        v10 = (capabilities::ct *)qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(a2, 24, (uint64_t)&buf);
        if ((capabilities::ct::supportsDataSystemDetermination(v10) & 1) == 0)
        {
          v17 = 0;
          v18 = (uint64_t)&v17;
          v19 = 0x2000000000;
          LOBYTE(v20) = 0;
          *(_QWORD *)&buf = v9;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v27 = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_2;
          v28 = &unk_24D5CEB28;
          v29 = &v17;
          v30 = v2;
          v22[0] = &buf;
          qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(a2, 29, (uint64_t)v22);
          if (!*(_BYTE *)(v18 + 24))
            QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(v2);
          v22[0] = v9;
          v22[1] = 0x40000000;
          v22[2] = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_3;
          v22[3] = &__block_descriptor_tmp_35_2;
          v22[4] = v2;
          v25 = v22;
          qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(a2, 36, (uint64_t)&v25);
          _Block_object_dispose(&v17, 8);
        }
        v17 = v9;
        v18 = 0x40000000;
        v19 = (uint64_t)___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_4;
        v20 = &__block_descriptor_tmp_37_5;
        v21 = v2;
        TlvValue = qmi::MessageBase::findTlvValue(a2);
        v13 = TlvValue;
        if (TlvValue)
        {
          v14 = v12;
          v25 = (_QWORD *)TlvValue;
          v24 = tlv::parseV<wds::tlv::DataTransmitSpeed>((unint64_t *)&v25, v12);
          if (v25)
            ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_4((uint64_t)&v17, &v24);
          else
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 161, v13, v14);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2169454B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t TlvValue;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  void **v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  void **v27;
  NSObject *v28;
  int v29;
  void **v30;
  void **v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void **v37;
  void *v38;
  char v39;
  void *v40[2];
  uint64_t (*v41)(uint64_t, const unsigned __int8 *);
  void *v42;
  __int128 *v43;
  _QWORD *v44;
  void *__p[2];
  char v46;
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[5];
  _QWORD v51[2];
  uint64_t (*v52)(uint64_t, __int128 *);
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _BYTE v61[12];
  __int16 v62;
  void **v63;
  __int16 v64;
  void *v65;
  _BYTE v66[24];
  void *v67;
  __int128 v68;
  __int128 v69;
  void (*v70)(uint64_t, uint64_t);
  void *v71;
  __int128 *p_buf;
  _QWORD *v73;
  __int128 buf;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  void (*v77)(uint64_t);
  __int128 v78;
  __int128 v79;
  _OWORD v80[8];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (!v7
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0
        || (v8 = (std::__shared_weak_count *)v2[6]) == 0
        || (v9 = std::__shared_weak_count::lock(v8), (v60 = v9) == 0))
      {
LABEL_56:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v10 = v9;
      v11 = v2[5];
      v59 = v11;
      if (!v11)
      {
LABEL_52:
        v33 = (unint64_t *)&v10->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        goto LABEL_56;
      }
      v12 = v2[12];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "handleWdsLteAttachParamsInd_sync";
        _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS LTE Attach Params Indication", (uint8_t *)&buf, 0xCu);
      }
      v55 = 0;
      v56 = &v55;
      v57 = 0x2000000000;
      v13 = (void *)MEMORY[0x24BDAC760];
      v58 = 0;
      v51[0] = MEMORY[0x24BDAC760];
      v51[1] = 0x40000000;
      v52 = (uint64_t (*)(uint64_t, __int128 *))___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke;
      v53 = &unk_24D5CEB90;
      v54 = &v55;
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v16 = TlvValue;
      if (TlvValue)
      {
        v17 = v15;
        *(_QWORD *)&buf = TlvValue;
        LOBYTE(v69) = tlv::parseV<wds::tlv::AttachParamsValid>((unint64_t *)&buf, v15);
        if ((_QWORD)buf)
          v52((uint64_t)v51, &v69);
        else
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v16, v17);
      }
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v75 = 0xD002000000;
      v76 = __Block_byref_object_copy__1;
      v77 = __Block_byref_object_dispose__1;
      v78 = 0u;
      v79 = 0u;
      memset(v80, 0, sizeof(v80));
      v81 = 0;
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)v80 + 12));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v80[2] + 4));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v80[3] + 12));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v80[5] + 4));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v80[6] + 12));
      if (*((_BYTE *)v56 + 24))
      {
        *(_DWORD *)(*((_QWORD *)&buf + 1) + 72) = 1;
        *(_QWORD *)&v69 = v13;
        *((_QWORD *)&v69 + 1) = 0x40000000;
        v70 = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_40;
        v71 = &unk_24D5CEBB8;
        v73 = v2;
        p_buf = &buf;
        v49[0] = &v69;
        qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(a2, (uint64_t)v49);
        if (*(char *)(*((_QWORD *)&buf + 1) + 71) < 0)
          v18 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 56);
        else
          v18 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 71);
        if (!v18)
          goto LABEL_49;
        v50[0] = v13;
        v50[1] = 0x40000000;
        v50[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2;
        v50[3] = &unk_24D5CEBE0;
        v50[4] = &buf;
        v49[0] = v50;
        qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(a2, (uint64_t)v49);
        v20 = *((_QWORD *)&buf + 1);
        if ((*(_DWORD *)(*((_QWORD *)&buf + 1) + 80) | 2) == 3)
        {
          v49[0] = v13;
          v49[1] = 0x40000000;
          v49[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_3;
          v49[3] = &unk_24D5CEC08;
          v49[4] = &buf;
          v49[5] = v2;
          v48[0] = v49;
          qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(a2, 18, (uint64_t)v48);
          v48[0] = v13;
          v48[1] = 0x40000000;
          v48[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_4;
          v48[3] = &unk_24D5CEC30;
          v48[4] = &buf;
          v48[5] = v2;
          v47[0] = v48;
          qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(a2, 19, (uint64_t)v47);
          v47[0] = v13;
          v47[1] = 0x40000000;
          v47[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_5;
          v47[3] = &unk_24D5CEC58;
          v47[4] = &buf;
          v47[5] = v2;
          *(_QWORD *)v66 = v47;
          qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(a2, 20, (uint64_t)v66);
          v21 = v2[12];
          v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          v20 = *((_QWORD *)&buf + 1);
          if (v22)
          {
            CSIPacketAddress::operator std::string();
            if (SHIBYTE(v41) >= 0)
              v23 = v40;
            else
              v23 = (void **)v40[0];
            v37 = v23;
            CSIPacketAddress::operator std::string();
            v24 = SHIBYTE(v64);
            v25 = *(_BYTE **)v61;
            CSIPacketAddress::operator std::string();
            v26 = v61;
            if (v24 < 0)
              v26 = v25;
            v27 = __p;
            if (v46 < 0)
              v27 = (void **)__p[0];
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)&v66[4] = "handleWdsLteAttachParamsInd_sync";
            *(_WORD *)&v66[12] = 2080;
            *(_QWORD *)&v66[14] = v37;
            *(_WORD *)&v66[22] = 2080;
            v67 = v26;
            LOWORD(v68) = 2080;
            *(_QWORD *)((char *)&v68 + 2) = v27;
            _os_log_impl(&dword_216897000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv4: %s, Mask: %s, Gateway: %s", v66, 0x2Au);
            if (v46 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v64) < 0)
              operator delete(*(void **)v61);
            if (SHIBYTE(v41) < 0)
              operator delete(v40[0]);
            v20 = *((_QWORD *)&buf + 1);
          }
        }
        if ((*(_DWORD *)(v20 + 80) & 0xFFFFFFFE) == 2)
        {
          *(_QWORD *)v66 = v13;
          *(_QWORD *)&v66[8] = 0x40000000;
          *(_QWORD *)&v66[16] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_47;
          v67 = &unk_24D5CEC80;
          *(_QWORD *)&v68 = &buf;
          *((_QWORD *)&v68 + 1) = v2;
          v40[0] = v66;
          qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(a2, 21, (uint64_t)v40);
          v40[0] = v13;
          v40[1] = (void *)0x40000000;
          v41 = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2_49;
          v42 = &unk_24D5CECA8;
          v43 = &buf;
          v44 = v2;
          *(_QWORD *)v61 = v40;
          qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(a2, 22, (uint64_t)v61);
          v28 = v2[12];
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            CSIPacketAddress::operator std::string();
            v29 = v46;
            v30 = (void **)__p[0];
            CSIPacketAddress::operator std::string();
            v31 = __p;
            if (v29 < 0)
              v31 = v30;
            if (v39 >= 0)
              v32 = &v38;
            else
              v32 = v38;
            *(_DWORD *)v61 = 136315650;
            *(_QWORD *)&v61[4] = "handleWdsLteAttachParamsInd_sync";
            v62 = 2080;
            v63 = v31;
            v64 = 2080;
            v65 = v32;
            _os_log_impl(&dword_216897000, v28, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv6: %s, Gateway: %s", v61, 0x20u);
            if (v39 < 0)
              operator delete(v38);
            if (v46 < 0)
              operator delete(__p[0]);
          }
        }
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)&buf + 1) + 72) = -1;
        v19 = v2[12];
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v69) = 136315138;
          *(_QWORD *)((char *)&v69 + 4) = "handleWdsLteAttachParamsInd_sync";
          _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: AttachAPN parameters have been reset", (uint8_t *)&v69, 0xCu);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 632))(v11, *((_QWORD *)&buf + 1) + 40);
LABEL_49:
      _Block_object_dispose(&buf, 8);
      if (SHIBYTE(v79) < 0)
        operator delete(*((void **)&v78 + 1));
      _Block_object_dispose(&v55, 8);
      goto LABEL_52;
    }
  }
}

void sub_216945C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&STACK[0x210], 8);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  _Block_object_dispose(&a56, 8);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t TlvValue;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE v24[12];
  __int16 v25;
  unsigned int v26;
  __int128 buf;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = (std::__shared_weak_count *)v2[6];
          if (v8)
          {
            v9 = std::__shared_weak_count::lock(v8);
            if (v9)
            {
              v10 = v9;
              v11 = v2[5];
              if (v11)
              {
                v12 = v2[12];
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = "handleWdsFDBackoffTimeInd_sync";
                  _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS FastDormancy Backoff Time Indication", (uint8_t *)&buf, 0xCu);
                }
                *(_QWORD *)&buf = 0;
                *((_QWORD *)&buf + 1) = &buf;
                v28 = 0x2000000000;
                v29 = 0;
                TlvValue = qmi::MessageBase::findTlvValue(a2);
                v15 = TlvValue;
                if (TlvValue)
                {
                  v16 = v14;
                  *(_QWORD *)v24 = TlvValue;
                  v17 = tlv::parseV<wds::tlv::BackoffTimeMessage>((unint64_t *)v24, v14);
                  if (*(_QWORD *)v24)
                    *(_DWORD *)(*((_QWORD *)&buf + 1) + 24) = v17;
                  else
                    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v15, v16);
                }
                v18 = *(_DWORD *)(*((_QWORD *)&buf + 1) + 24);
                if (v18)
                {
                  v19 = v2[12];
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v24 = 136315394;
                    *(_QWORD *)&v24[4] = "handleWdsFDBackoffTimeInd_sync";
                    v25 = 1024;
                    v26 = v18;
                    _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: FastDormancy Backoff Timeout: %u", v24, 0x12u);
                    v18 = *(_DWORD *)(*((_QWORD *)&buf + 1) + 24);
                  }
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 640))(v11, v18);
                }
                _Block_object_dispose(&buf, 8);
              }
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
          }
        }
      }
      v22 = (unint64_t *)&v6->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216945F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a17, 8);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject **v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v36;
  __int128 buf;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            v9 = std::__shared_weak_count::lock(v8);
            v36 = v9;
            if (v9)
            {
              if (*(_QWORD *)(v2 + 40))
              {
                v10 = *(NSObject **)(v2 + 96);
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = "handleWdsTdInfoInd_sync";
                  _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS TdInfo Indication", (uint8_t *)&buf, 0xCu);
                }
                v11 = *(std::__shared_weak_count **)(v2 + 328);
                if (v11)
                {
                  v12 = std::__shared_weak_count::lock(v11);
                  v34 = v12;
                  if (v12)
                  {
                    v13 = v12;
                    v14 = *(_QWORD *)(v2 + 320);
                    v33 = v14;
                    if (!v14)
                      goto LABEL_28;
                    v15 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)v2);
                    *((_QWORD *)&buf + 1) = v13;
                    v38 = 0;
                    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                    *(_QWORD *)&buf = v14;
                    do
                      v17 = __ldxr(p_shared_owners);
                    while (__stxr(v17 + 1, p_shared_owners));
                    LODWORD(v38) = v15;
                    v31[1] = v13;
                    v32 = 0;
                    v31[0] = v14;
                    do
                      v18 = __ldxr(p_shared_owners);
                    while (__stxr(v18 + 1, p_shared_owners));
                    LODWORD(v32) = v15;
                    v30 = (NSObject **)(v2 + 96);
                    do
                      v19 = __ldaxr(p_shared_owners);
                    while (__stlxr(v19 - 1, p_shared_owners));
                    if (!v19)
                    {
                      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                      std::__shared_weak_count::__release_weak(v13);
                    }
                    v20 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                    {
                      v21 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                      do
                        v22 = __ldaxr(v21);
                      while (__stlxr(v22 - 1, v21));
                      if (!v22)
                      {
                        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                        std::__shared_weak_count::__release_weak(v20);
                      }
                    }
                    v13 = v34;
                    if (v34)
                    {
LABEL_28:
                      v23 = (unint64_t *)&v13->__shared_owners_;
                      do
                        v24 = __ldaxr(v23);
                      while (__stlxr(v24 - 1, v23));
                      if (!v24)
                      {
                        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                        std::__shared_weak_count::__release_weak(v13);
                      }
                    }
                  }
                }
                v25 = v36;
                if (!v36)
                  goto LABEL_39;
              }
              else
              {
                v25 = v9;
              }
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
        }
      }
LABEL_39:
      v28 = (unint64_t *)&v6->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2169462AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_5(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject **v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v36;
  __int128 buf;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            v9 = std::__shared_weak_count::lock(v8);
            v36 = v9;
            if (v9)
            {
              if (*(_QWORD *)(v2 + 40))
              {
                v10 = *(NSObject **)(v2 + 96);
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = "handleWdsRouteInfoInd_sync";
                  _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS RouteInfo Indication", (uint8_t *)&buf, 0xCu);
                }
                v11 = *(std::__shared_weak_count **)(v2 + 328);
                if (v11)
                {
                  v12 = std::__shared_weak_count::lock(v11);
                  v34 = v12;
                  if (v12)
                  {
                    v13 = v12;
                    v14 = *(_QWORD *)(v2 + 320);
                    v33 = v14;
                    if (!v14)
                      goto LABEL_28;
                    v15 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)v2);
                    *((_QWORD *)&buf + 1) = v13;
                    v38 = 0;
                    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                    *(_QWORD *)&buf = v14;
                    do
                      v17 = __ldxr(p_shared_owners);
                    while (__stxr(v17 + 1, p_shared_owners));
                    LODWORD(v38) = v15;
                    v31[1] = v13;
                    v32 = 0;
                    v31[0] = v14;
                    do
                      v18 = __ldxr(p_shared_owners);
                    while (__stxr(v18 + 1, p_shared_owners));
                    LODWORD(v32) = v15;
                    v30 = (NSObject **)(v2 + 96);
                    do
                      v19 = __ldaxr(p_shared_owners);
                    while (__stlxr(v19 - 1, p_shared_owners));
                    if (!v19)
                    {
                      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                      std::__shared_weak_count::__release_weak(v13);
                    }
                    v20 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                    {
                      v21 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                      do
                        v22 = __ldaxr(v21);
                      while (__stlxr(v22 - 1, v21));
                      if (!v22)
                      {
                        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                        std::__shared_weak_count::__release_weak(v20);
                      }
                    }
                    v13 = v34;
                    if (v34)
                    {
LABEL_28:
                      v23 = (unint64_t *)&v13->__shared_owners_;
                      do
                        v24 = __ldaxr(v23);
                      while (__stlxr(v24 - 1, v23));
                      if (!v24)
                      {
                        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                        std::__shared_weak_count::__release_weak(v13);
                      }
                    }
                  }
                }
                v25 = v36;
                if (!v36)
                  goto LABEL_39;
              }
              else
              {
                v25 = v9;
              }
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
        }
      }
LABEL_39:
      v28 = (unint64_t *)&v6->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2169465D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_6(uint64_t a1, qmi::MessageBase *a2)
{
  PersonalitySpecificImpl *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t TlvValue;
  int v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int16 *v24;
  int v25;
  NSObject *v26;
  _QWORD *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::value_type *v37;
  int v38;
  std::string::value_type *v39;
  int v40;
  std::string::value_type *v41;
  int v42;
  _QWORD v43[2];
  std::string *(*v44)(uint64_t, const std::string *);
  void *v45;
  __int128 *p_buf;
  _QWORD v47[2];
  uint64_t (*v48)(uint64_t, _DWORD *);
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, _DWORD *);
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  __int16 v62;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v66;
  std::string::value_type *v67;
  std::string v68;
  int v69;
  __int16 v70;
  const char *v71;
  __int128 buf;
  uint64_t v73;
  __n128 (*v74)(uint64_t, uint64_t);
  void (*v75)(uint64_t);
  void *v76[2];
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v2 = *(PersonalitySpecificImpl **)(a1 + 32);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)v2 + 5);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
          if (v8)
          {
            v9 = std::__shared_weak_count::lock(v8);
            v66 = v9;
            if (v9)
            {
              if (*((_QWORD *)v2 + 5))
              {
                v10 = *((_QWORD *)v2 + 12);
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = "handleWdsPduSessionLookupInd_sync";
                  _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS PduSessionLookup Indication", (uint8_t *)&buf, 0xCu);
                }
                v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 41);
                if (v11)
                {
                  v12 = std::__shared_weak_count::lock(v11);
                  v64 = v12;
                  if (v12)
                  {
                    v13 = v12;
                    if (*((_QWORD *)v2 + 40))
                    {
                      v59 = 0;
                      v60 = &v59;
                      v61 = 0x2000000000;
                      v14 = MEMORY[0x24BDAC760];
                      v62 = 0;
                      v55[0] = MEMORY[0x24BDAC760];
                      v55[1] = 0x40000000;
                      v56 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke;
                      v57 = &unk_24D5CF3D0;
                      v58 = &v59;
                      TlvValue = qmi::MessageBase::findTlvValue(a2);
                      v17 = TlvValue;
                      if (TlvValue)
                      {
                        v18 = v16;
                        *(_QWORD *)&buf = TlvValue;
                        LODWORD(v47[0]) = tlv::parseV<wds::tlv::TransactionId>((unint64_t *)&buf, v16);
                        if ((_QWORD)buf)
                          v56((uint64_t)v55, v47);
                        else
                          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v17, v18);
                      }
                      v51 = 0;
                      v52 = &v51;
                      v53 = 0x2000000000;
                      v54 = 0;
                      v47[0] = v14;
                      v47[1] = 0x40000000;
                      v48 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_2;
                      v49 = &unk_24D5CF3F8;
                      v50 = &v51;
                      v20 = qmi::MessageBase::findTlvValue(a2);
                      v22 = v20;
                      if (v20)
                      {
                        v23 = v21;
                        *(_QWORD *)&buf = v20;
                        LODWORD(v43[0]) = tlv::parseV<wds::tlv::SliceDnnLookupStatus>((unint64_t *)&buf, v21);
                        if ((_QWORD)buf)
                          v48((uint64_t)v47, v43);
                        else
                          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v22, v23);
                      }
                      *(_QWORD *)&buf = 0;
                      *((_QWORD *)&buf + 1) = &buf;
                      v73 = 0x4002000000;
                      v74 = __Block_byref_object_copy__196;
                      v75 = __Block_byref_object_dispose__197;
                      v76[1] = 0;
                      v77 = 0;
                      v76[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(v76, (char *)&unk_216AC4FCA);
                      if (!*((_DWORD *)v52 + 6))
                      {
                        v43[0] = v14;
                        v43[1] = 0x40000000;
                        v44 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_198;
                        v45 = &unk_24D5CF420;
                        p_buf = &buf;
                        v37 = (std::string::value_type *)qmi::MessageBase::findTlvValue(a2);
                        v39 = v37;
                        if (v37)
                        {
                          v40 = v38;
                          v67 = v37;
                          memset(&v68, 0, sizeof(v68));
                          tlv::parseV<wds::tlv::Dnn>(&v67, v38, &v68);
                          v41 = v67;
                          if (v67)
                            v44((uint64_t)v43, &v68);
                          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v68.__r_.__value_.__l.__data_);
                          if (!v41)
                            ((void (*)(_QWORD, uint64_t, std::string::value_type *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 17, v39, v40);
                        }
                      }
                      v24 = (unsigned __int16 *)*((_QWORD *)v2 + 53);
                      if (v24 && (v25 = *v24, v25 == *((unsigned __int16 *)v60 + 12)))
                      {
                        v26 = *((_QWORD *)v2 + 12);
                        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                        {
                          v27 = (_QWORD *)(*((_QWORD *)&buf + 1) + 40);
                          if (*(char *)(*((_QWORD *)&buf + 1) + 63) < 0)
                            v27 = (_QWORD *)*v27;
                          v28 = wds::asString(*((_DWORD *)v52 + 6));
                          LODWORD(v68.__r_.__value_.__l.__data_) = 136315906;
                          *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleWdsPduSessionLookupInd_sync";
                          WORD2(v68.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
                          HIWORD(v68.__r_.__value_.__r.__words[2]) = 1024;
                          v69 = v25;
                          v70 = 2080;
                          v71 = v28;
                          _os_log_impl(&dword_216897000, v26, OS_LOG_TYPE_DEFAULT, "#I %s: WDS PduSessionLookup: dnn=%s for tid %u (%s)", (uint8_t *)&v68, 0x26u);
                          v24 = (unsigned __int16 *)*((_QWORD *)v2 + 53);
                        }
                        v29 = *((_QWORD *)v24 + 4);
                        if (!v29)
                          std::__throw_bad_function_call[abi:ne180100]();
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 48))(v29, *((_QWORD *)&buf + 1) + 40);
                        std::shared_ptr<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::reset[abi:ne180100]((_QWORD *)v2 + 53);
                        QMIDataCommandDriver::processPendingLookupRequests_sync(v2);
                      }
                      else
                      {
                        v30 = *((_QWORD *)v2 + 12);
                        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                        {
                          v42 = *((unsigned __int16 *)v60 + 12);
                          LODWORD(v68.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleWdsPduSessionLookupInd_sync";
                          WORD2(v68.__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = v42;
                          _os_log_error_impl(&dword_216897000, v30, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: cannot find request for tid %u", (uint8_t *)&v68, 0x12u);
                        }
                      }
                      _Block_object_dispose(&buf, 8);
                      if (SHIBYTE(v77) < 0)
                        operator delete(v76[0]);
                      _Block_object_dispose(&v51, 8);
                      _Block_object_dispose(&v59, 8);
                    }
                    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                    do
                      v32 = __ldaxr(p_shared_owners);
                    while (__stlxr(v32 - 1, p_shared_owners));
                    if (!v32)
                    {
                      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                      std::__shared_weak_count::__release_weak(v13);
                    }
                  }
                }
                v19 = v66;
                if (!v66)
                  goto LABEL_45;
              }
              else
              {
                v19 = v9;
              }
              v33 = (unint64_t *)&v19->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
          }
        }
      }
LABEL_45:
      v35 = (unint64_t *)&v6->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216946BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 201) < 0)
    operator delete(*(void **)(v36 - 224));
  _Block_object_dispose((const void *)(v36 - 176), 8);
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a30, 8);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_7(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  capabilities::ct *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t TlvValue;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  capabilities::ct *v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            v9 = (capabilities::ct *)std::__shared_weak_count::lock(v8);
            v26 = v9;
            if (v9)
            {
              v10 = (std::__shared_weak_count *)v9;
              v11 = *(_QWORD *)(v2 + 40);
              v25 = v11;
              if (v11 && (capabilities::ct::supports5G(v9) & 1) != 0)
              {
                v21 = 0;
                v22 = &v21;
                v23 = 0x2000000000;
                v24 = 0;
                TlvValue = qmi::MessageBase::findTlvValue(a2);
                v14 = TlvValue;
                if (TlvValue)
                {
                  v15 = v13;
                  v27 = TlvValue;
                  v16 = tlv::parseV<wds::tlv::SwitchFromSub>((unint64_t *)&v27, v13);
                  if (v27)
                    *((_DWORD *)v22 + 6) = v16;
                  else
                    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v14, v15);
                }
                if (*((_DWORD *)v22 + 6))
                  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 656))(v11);
                _Block_object_dispose(&v21, 8);
              }
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
          }
        }
      }
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216946E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_8(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  uint64_t v10;
  std::__shared_weak_count *v11;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v11 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = v1[5];
      v10 = v5;
      if (v5)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 496))(v5) & 1) == 0)
        {
          v6 = v1[12];
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v9 = 0;
            _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Received wds::WakeUpAp::Indication", v9, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_216946F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::updateCellularDataStatusInfo_sync(QMIDataCommandDriver *this, char a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  char v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD aBlock[5];

  if (capabilities::ct::supportsDataQMIExtensions(this))
  {
    *((_BYTE *)this + 344) = a2;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (v4)
    {
      v5 = std::__shared_weak_count::lock(v4);
      v44 = v5;
      if (v5)
      {
        v6 = v5;
        v7 = *((_QWORD *)this + 5);
        v43 = v7;
        if (!v7
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0
          || !*((_QWORD *)this + 20))
        {
          goto LABEL_43;
        }
        *(_OWORD *)__p = 0u;
        v42 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        v8 = (const void **)__p[1];
        if (__p[1] != (void *)v42)
        {
          while (*((_BYTE *)*v8 + 8) != 16)
          {
            if (++v8 == (const void **)v42)
              goto LABEL_14;
          }
        }
        if (v8 == (const void **)v42)
        {
LABEL_14:
          v11 = operator new();
          v12 = v11;
          *(_WORD *)(v11 + 8) = 16;
          *(_QWORD *)v11 = &off_24D5D0830;
          v13 = v42;
          if ((unint64_t)v42 >= *((_QWORD *)&v42 + 1))
          {
            v15 = (uint64_t)(v42 - (unint64_t)__p[1]) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v16 = (uint64_t)(*((_QWORD *)&v42 + 1) - (unint64_t)__p[1]) >> 2;
            if (v16 <= v15 + 1)
              v16 = v15 + 1;
            if (*((_QWORD *)&v42 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v42 + 8, v17);
            else
              v18 = 0;
            v19 = (uint64_t *)&v18[8 * v15];
            v20 = &v18[8 * v17];
            *v19 = v12;
            v14 = v19 + 1;
            v22 = (char *)__p[1];
            v21 = (char *)v42;
            if ((void *)v42 != __p[1])
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v19 = v23;
              }
              while (v21 != v22);
              v21 = (char *)__p[1];
            }
            __p[1] = v19;
            *(_QWORD *)&v42 = v14;
            *((_QWORD *)&v42 + 1) = v20;
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v42 = v11;
            v14 = (_QWORD *)(v13 + 8);
          }
          v10 = (_BYTE *)(v12 + 9);
          *(_QWORD *)&v42 = v14;
        }
        else
        {
          if (!v9)
            __cxa_bad_cast();
          v10 = v9 + 9;
        }
        *v10 = a2;
        v36 = (char *)this + 144;
        v37 = QMIServiceMsg::create();
        v38 = 25000;
        v39 = 0;
        v40 = 0;
        v24 = MEMORY[0x24BDAC760];
        v33[0] = MEMORY[0x24BDAC760];
        v33[1] = 1174405120;
        v33[2] = ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke_2;
        v33[3] = &__block_descriptor_tmp_156;
        v33[4] = this;
        v33[5] = v7;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        v34 = v6;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
        v35 = a2;
        aBlock[0] = v24;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
        aBlock[3] = &unk_24D5CFD50;
        aBlock[4] = v33;
        v27 = _Block_copy(aBlock);
        v40 = v27;
        if (v37)
        {
          qmi::Client::send();
          v27 = v40;
        }
        if (v27)
          _Block_release(v27);
        v28 = v34;
        if (v34)
        {
          v29 = (unint64_t *)&v34->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        v6 = v44;
        if (v44)
        {
LABEL_43:
          v31 = (unint64_t *)&v6->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
}

void sub_216947278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v10);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v11 - 120);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendWdsSetEventReportReq_sync(QMIDataCommandDriver *this, char a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  capabilities::ct *v7;
  uint64_t v8;
  const void **v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  const void **v22;
  const void **v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  const void **v33;
  char *v34;
  char *v35;
  char *v36;
  const void *v37;
  const void **i;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[6];
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *aBlock;
  void *__p[2];
  __int128 v61;
  __int128 buf;
  void (*v63)(uint64_t, QMIServiceMsg *);
  void *v64;
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 20);
  v5 = *((_QWORD *)this + 12);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "sendWdsSetEventReportReq_sync";
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Sending WDS Set Event Report for Dormancy Status , Current data bearer indicator, ReportDataSystemStatus", (uint8_t *)&buf, 0xCu);
    }
    *(_OWORD *)__p = 0u;
    v61 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v7 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>(__p, 19);
    *(_BYTE *)v7 = a2;
    v8 = capabilities::ct::supportsDataSystemDetermination(v7);
    if ((v8 & 1) == 0)
    {
      v9 = (const void **)__p[1];
      if (__p[1] != (void *)v61)
      {
        while (*((_BYTE *)*v9 + 8) != 21)
        {
          if (++v9 == (const void **)v61)
            goto LABEL_14;
        }
      }
      if (v9 == (const void **)v61)
      {
LABEL_14:
        v8 = operator new();
        v11 = v8;
        *(_WORD *)(v8 + 8) = 21;
        *(_QWORD *)v8 = &off_24D5CFDE8;
        v12 = v61;
        if ((unint64_t)v61 >= *((_QWORD *)&v61 + 1))
        {
          v14 = (uint64_t)(v61 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            goto LABEL_89;
          v15 = (uint64_t)(*((_QWORD *)&v61 + 1) - (unint64_t)__p[1]) >> 2;
          if (v15 <= v14 + 1)
            v15 = v14 + 1;
          if (*((_QWORD *)&v61 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v61 + 8, v16);
          else
            v17 = 0;
          v18 = (uint64_t *)&v17[8 * v14];
          v19 = &v17[8 * v16];
          *v18 = v11;
          v13 = v18 + 1;
          v20 = __p[1];
          v8 = v61;
          if ((void *)v61 != __p[1])
          {
            do
            {
              v21 = *(_QWORD *)(v8 - 8);
              v8 -= 8;
              *--v18 = v21;
            }
            while ((void *)v8 != v20);
            v8 = (uint64_t)__p[1];
          }
          __p[1] = v18;
          *(_QWORD *)&v61 = v13;
          *((_QWORD *)&v61 + 1) = v19;
          if (v8)
            operator delete((void *)v8);
        }
        else
        {
          *(_QWORD *)v61 = v8;
          v13 = (_QWORD *)(v12 + 8);
        }
        v10 = (_BYTE *)(v11 + 9);
        *(_QWORD *)&v61 = v13;
      }
      else
      {
        if (!v8)
          goto LABEL_90;
        v10 = (_BYTE *)(v8 + 9);
      }
      *v10 = a2;
    }
    if (capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v8))
    {
      v22 = (const void **)v61;
    }
    else
    {
      v23 = (const void **)__p[1];
      v22 = (const void **)v61;
      if (__p[1] != (void *)v61)
      {
        while (*((_BYTE *)*v23 + 8) != 26)
        {
          if (++v23 == (const void **)v61)
            goto LABEL_41;
        }
      }
      if (v23 == (const void **)v61)
      {
LABEL_41:
        v26 = operator new();
        v27 = v26;
        *(_WORD *)(v26 + 8) = 26;
        *(_QWORD *)v26 = &off_24D5CFE38;
        v28 = v61;
        if ((unint64_t)v61 >= *((_QWORD *)&v61 + 1))
        {
          v29 = (uint64_t)(v61 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            goto LABEL_89;
          v30 = (uint64_t)(*((_QWORD *)&v61 + 1) - (unint64_t)__p[1]) >> 2;
          if (v30 <= v29 + 1)
            v30 = v29 + 1;
          if (*((_QWORD *)&v61 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v61 + 8, v31);
          else
            v32 = 0;
          v33 = (const void **)&v32[8 * v29];
          v34 = &v32[8 * v31];
          *v33 = (const void *)v27;
          v22 = v33 + 1;
          v36 = (char *)__p[1];
          v35 = (char *)v61;
          if ((void *)v61 != __p[1])
          {
            do
            {
              v37 = (const void *)*((_QWORD *)v35 - 1);
              v35 -= 8;
              *--v33 = v37;
            }
            while (v35 != v36);
            v35 = (char *)__p[1];
          }
          __p[1] = v33;
          *(_QWORD *)&v61 = v22;
          *((_QWORD *)&v61 + 1) = v34;
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_QWORD *)v61 = v26;
          v22 = (const void **)(v28 + 8);
        }
        v25 = (_BYTE *)(v27 + 9);
        *(_QWORD *)&v61 = v22;
      }
      else
      {
        if (!v24)
          goto LABEL_90;
        v25 = v24 + 9;
      }
      *v25 = a2;
    }
    for (i = (const void **)__p[1]; ; ++i)
    {
      if (i == v22)
        goto LABEL_66;
      if (*((unsigned __int8 *)*i + 8) == 161)
        break;
    }
    if (i != v22)
    {
      if (v39)
      {
        v40 = v39 + 9;
LABEL_83:
        *v40 = a2;
        v55[5] = (char *)this + 144;
        v56 = QMIServiceMsg::create();
        v57 = 25000;
        v58 = 0;
        aBlock = 0;
        v55[0] = MEMORY[0x24BDAC760];
        v55[1] = 0x40000000;
        v55[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_5;
        v55[3] = &__block_descriptor_tmp_64_1;
        v55[4] = this;
        *(_QWORD *)&buf = MEMORY[0x24BDAC760];
        *((_QWORD *)&buf + 1) = 0x40000000;
        v63 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetEventReport8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v64 = &unk_24D5CFEB8;
        v65 = v55;
        v54 = _Block_copy(&buf);
        aBlock = v54;
        if (v56)
        {
          qmi::Client::send();
          v54 = aBlock;
        }
        if (v54)
          _Block_release(v54);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
LABEL_90:
      __cxa_bad_cast();
    }
LABEL_66:
    v41 = operator new();
    v42 = v41;
    *(_WORD *)(v41 + 8) = 161;
    *(_QWORD *)v41 = &off_24D5CFE88;
    v43 = v61;
    if ((unint64_t)v61 < *((_QWORD *)&v61 + 1))
    {
      *(_QWORD *)v61 = v41;
      v44 = (_QWORD *)(v43 + 8);
LABEL_82:
      v40 = (_BYTE *)(v42 + 9);
      *(_QWORD *)&v61 = v44;
      goto LABEL_83;
    }
    v45 = (uint64_t)(v61 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      v46 = (uint64_t)(*((_QWORD *)&v61 + 1) - (unint64_t)__p[1]) >> 2;
      if (v46 <= v45 + 1)
        v46 = v45 + 1;
      if (*((_QWORD *)&v61 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      if (v47)
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v61 + 8, v47);
      else
        v48 = 0;
      v49 = (uint64_t *)&v48[8 * v45];
      v50 = &v48[8 * v47];
      *v49 = v42;
      v44 = v49 + 1;
      v52 = (char *)__p[1];
      v51 = (char *)v61;
      if ((void *)v61 != __p[1])
      {
        do
        {
          v53 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *--v49 = v53;
        }
        while (v51 != v52);
        v51 = (char *)__p[1];
      }
      __p[1] = v49;
      *(_QWORD *)&v61 = v44;
      *((_QWORD *)&v61 + 1) = v50;
      if (v51)
        operator delete(v51);
      goto LABEL_82;
    }
LABEL_89:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v6)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "sendWdsSetEventReportReq_sync";
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", (uint8_t *)&buf, 0xCu);
  }
}

void sub_21694785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendGetDeviceNAIRequest_sync(QMIDataCommandDriver *this)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  const void **v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[6];
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *aBlock;
  void *__p[2];
  __int128 v28;
  __int128 buf;
  void (*v30)(uint64_t, QMIServiceMsg *);
  void *v31;
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 20);
  v3 = *((_QWORD *)this + 12);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "sendGetDeviceNAIRequest_sync";
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: sending ReadMIPProfile::Request", (uint8_t *)&buf, 0xCu);
    }
    *(_OWORD *)__p = 0u;
    v28 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v5 = (const void **)__p[1];
    if (__p[1] != (void *)v28)
    {
      while (*((_BYTE *)*v5 + 8) != 1)
      {
        if (++v5 == (const void **)v28)
          goto LABEL_13;
      }
    }
    if (v5 == (const void **)v28)
    {
LABEL_13:
      v8 = operator new();
      v9 = v8;
      *(_WORD *)(v8 + 8) = 1;
      *(_QWORD *)v8 = &off_24D5D01F8;
      v10 = v28;
      if ((unint64_t)v28 >= *((_QWORD *)&v28 + 1))
      {
        v12 = (uint64_t)(v28 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)(*((_QWORD *)&v28 + 1) - (unint64_t)__p[1]) >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if (*((_QWORD *)&v28 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v28 + 8, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v12];
        v17 = &v15[8 * v14];
        *v16 = v9;
        v11 = v16 + 1;
        v19 = (char *)__p[1];
        v18 = (char *)v28;
        if ((void *)v28 != __p[1])
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v16 = v20;
          }
          while (v18 != v19);
          v18 = (char *)__p[1];
        }
        __p[1] = v16;
        *(_QWORD *)&v28 = v11;
        *((_QWORD *)&v28 + 1) = v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v28 = v8;
        v11 = (_QWORD *)(v10 + 8);
      }
      v7 = (_BYTE *)(v9 + 9);
      *(_QWORD *)&v28 = v11;
    }
    else
    {
      if (!v6)
        __cxa_bad_cast();
      v7 = v6 + 9;
    }
    *v7 = 0;
    v22[5] = (char *)this + 144;
    v23 = QMIServiceMsg::create();
    v24 = 25000;
    v25 = 0;
    aBlock = 0;
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 0x40000000;
    v22[2] = ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_2;
    v22[3] = &__block_descriptor_tmp_111_0;
    v22[4] = this;
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 0x40000000;
    v30 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14ReadMIPProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v31 = &unk_24D5D0228;
    v32 = v22;
    v21 = _Block_copy(&buf);
    aBlock = v21;
    if (v23)
    {
      qmi::Client::send();
      v21 = aBlock;
    }
    if (v21)
      _Block_release(v21);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else if (v4)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)&buf, 2u);
  }
}

void sub_216947B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync(QMIDataCommandDriver *this)
{
  void *v2;
  NSObject *v3;
  _QWORD v4[6];
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  _OWORD v9[2];
  _QWORD aBlock[6];

  if (*((_QWORD *)this + 20))
  {
    memset(v9, 0, sizeof(v9));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
    v4[5] = (char *)this + 144;
    v5 = QMIServiceMsg::create();
    v6 = 25000;
    v7 = 0;
    v8 = 0;
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke;
    v4[3] = &__block_descriptor_tmp_114_0;
    v4[4] = this;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26GetCurrentDataSystemStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D0250;
    aBlock[4] = v4;
    v2 = _Block_copy(aBlock);
    v8 = v2;
    if (v5)
    {
      qmi::Client::send();
      v2 = v8;
    }
    if (v2)
      _Block_release(v2);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  }
  else
  {
    v3 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_216947CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::clientStarted(uint64_t a1, int a2, qmi::Client *a3, int a4, int a5)
{
  QMIDataCommandDriver::clientStarted(a1 - 24, a2, a3, a4, a5);
}

void QMIDataCommandDriver::clientStopped(QMIDataCommandDriver *a1, int a2, qmi::Client *this, int a4, int a5)
{
  uint64_t Name;
  __int128 v10;
  NSObject *v11;
  void **v12;
  void ***v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  NSObject *v18;
  std::string *p_p;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  void **v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  const char *v27;
  std::string *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  NSObject *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  NSObject *v43;
  QMIDataCommandDriver::QMIClientsInfo *v44;
  NSObject *v45;
  _QWORD *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::string __p;
  uint8_t buf[32];
  uint8_t v51[4];
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 2))
  {
    memset(&__p, 0, sizeof(__p));
    Name = qmi::Client::getName(this);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v10 = *(_OWORD *)Name;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    v12 = std::__tree<std::string>::find<std::string>(*((_QWORD *)a1 + 42), (void **)&__p.__r_.__value_.__l.__data_);
    v13 = (void ***)*((_QWORD *)a1 + 42);
    if (v13 + 1 == (void ***)v12)
    {
      v18 = *((_QWORD *)a1 + 12);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "clientStopped";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = p_p;
      v20 = "#E %s: client %s already inactive !";
      v21 = v18;
      v22 = 22;
    }
    else
    {
      v14 = std::__tree<std::string>::find<std::string>(*((_QWORD *)a1 + 42), (void **)&__p.__r_.__value_.__l.__data_);
      if (v13 + 1 != (void ***)v14)
      {
        v15 = v14;
        v16 = (void **)v14[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (void **)*v16;
          }
          while (v16);
        }
        else
        {
          v23 = v14;
          do
          {
            v17 = (void **)v23[2];
            v24 = *v17 == v23;
            v23 = v17;
          }
          while (!v24);
        }
        if (*v13 == v14)
          *v13 = v17;
        v25 = (uint64_t *)v13[1];
        v13[2] = (void **)((char *)v13[2] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v25, (uint64_t *)v15);
        if (*((char *)v15 + 55) < 0)
          operator delete(v15[4]);
        operator delete(v15);
      }
      v26 = *((_QWORD *)a1 + 12);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      v27 = "non";
      if (a2)
        v27 = (const char *)&unk_216AC4FCA;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "clientStopped";
      v28 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v28;
      v20 = "#I %s: %s primary client %s deactivated";
      v21 = v26;
      v22 = 32;
    }
    _os_log_impl(&dword_216897000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
LABEL_31:
    if (a5 == 1)
    {
      v29 = (uint64_t *)*((_QWORD *)a1 + 45);
      if (v29)
      {
        v30 = (_QWORD *)((char *)a1 + 360);
        v31 = *((_QWORD *)a1 + 45);
        do
        {
          v32 = *(_DWORD *)(v31 + 32);
          v33 = v32 < a4;
          if (v32 >= a4)
            v34 = (uint64_t *)v31;
          else
            v34 = (uint64_t *)(v31 + 8);
          if (!v33)
            v30 = (_QWORD *)v31;
          v31 = *v34;
        }
        while (*v34);
        if (v30 != (_QWORD *)((char *)a1 + 360) && *((_DWORD *)v30 + 8) <= a4)
        {
          v35 = (_QWORD *)v30[1];
          if (v35)
          {
            do
            {
              v36 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            v37 = v30;
            do
            {
              v36 = (_QWORD *)v37[2];
              v24 = *v36 == (_QWORD)v37;
              v37 = v36;
            }
            while (!v24);
          }
          if (*((_QWORD **)a1 + 44) == v30)
            *((_QWORD *)a1 + 44) = v36;
          --*((_QWORD *)a1 + 46);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v30);
          qmi::Client::~Client((qmi::Client *)(v30 + 5));
          operator delete(v30);
        }
      }
    }
    if (a2)
    {
      v38 = *((_QWORD *)a1 + 12);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "clientStopped";
        _os_log_impl(&dword_216897000, v38, OS_LOG_TYPE_DEFAULT, "#I %s: clientStopped", buf, 0xCu);
        v38 = *((_QWORD *)a1 + 12);
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleBasebandOff_sync";
        _os_log_impl(&dword_216897000, v38, OS_LOG_TYPE_DEFAULT, "#I %s: baseband is off", buf, 0xCu);
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
      if (v39)
      {
        v40 = std::__shared_weak_count::lock(v39);
        *(_QWORD *)&buf[8] = v40;
        if (v40)
        {
          v41 = v40;
          v42 = *((_QWORD *)a1 + 5);
          *(_QWORD *)buf = v42;
          if (v42 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 496))(v42) & 1) == 0)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 328))(v42);
            v43 = *((_QWORD *)a1 + 12);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v51 = 136315138;
              v52 = "handleBasebandOff_sync";
              _os_log_impl(&dword_216897000, v43, OS_LOG_TYPE_DEFAULT, "#I %s: Clearing Current Data system status", v51, 0xCu);
            }
            v44 = (QMIDataCommandDriver::QMIClientsInfo *)*((_QWORD *)a1 + 42);
            if (*((_QWORD *)v44 + 3))
            {
              v45 = *((_QWORD *)a1 + 12);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v51 = 136315138;
                v52 = "handleBasebandOff_sync";
                _os_log_impl(&dword_216897000, v45, OS_LOG_TYPE_DEFAULT, "#N %s: resetting the sleeping group", v51, 0xCu);
                v44 = (QMIDataCommandDriver::QMIClientsInfo *)*((_QWORD *)a1 + 42);
              }
              QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(v44);
            }
            v46 = (_QWORD *)*((_QWORD *)a1 + 36);
            *v46 = 0xFFFFFFFFLL;
            v46[1] = 0;
            QMIDataCommandDriver::resetSlicing_sync(a1, 1);
          }
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      memset(buf, 0, sizeof(buf));
      std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)a1 + 160, (__int128 *)&buf[16]);
      qmi::Client::~Client((qmi::Client *)buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v11 = *((_QWORD *)a1 + 12);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I Null fWDSClient", buf, 2u);
  }
}

void sub_216948288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::clientStopped(uint64_t a1, int a2, qmi::Client *a3, int a4, int a5)
{
  QMIDataCommandDriver::clientStopped((QMIDataCommandDriver *)(a1 - 24), a2, a3, a4, a5);
}

void QMIDataCommandDriver::handleSimCdmaAuxInfoAvailable_sync(QMIDataCommandDriver *this, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  std::string __p;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleSimCdmaAuxInfoAvailable_sync";
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA Aux Info available, reading NAI...", (uint8_t *)&__p, 0xCu);
    }
    QMIDataCommandDriver::sendGetDeviceNAIRequest_sync(this);
  }
  else
  {
    if (v5)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleSimCdmaAuxInfoAvailable_sync";
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA Aux Info unavailable, clearing NAI...", (uint8_t *)&__p, 0xCu);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_216AC4FCA);
    QMIDataCommandDriver::setDeviceNAI((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2169483E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMIDataCommandDriver::setDeviceNAI(uint64_t a1, const std::string *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 216);
  std::mutex::lock((std::mutex *)(a1 + 216));
  std::string::operator=((std::string *)(a1 + 192), a2);
  std::mutex::unlock(v4);
}

void sub_21694844C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleSimCdmaAuxInfoAvailable_sync(QMIDataCommandDriver *this, int a2)
{
  QMIDataCommandDriver::handleSimCdmaAuxInfoAvailable_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync(QMIDataCommandDriver *this, int a2, char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  qmi::Client *v10;
  NSObject *v11;
  int SvcType;
  uint64_t Name;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  NSObject *v24;
  unint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  void **v50;
  NSObject *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  int v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  _QWORD v68[5];
  _QWORD v69[2];
  void *v70[2];
  __int128 v71;
  void *v72;
  _QWORD v73[2];
  uint64_t (*v74)(uint64_t, char *);
  void *v75;
  int v76;
  _QWORD v77[2];
  _QWORD *(*v78)(_QWORD *, void **);
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  _OWORD v83[2];
  int v84;
  void *__p[2];
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint8_t v89[4];
  const char *v90;
  __int16 v91;
  int v92;
  uint8_t aBlock[32];
  void *v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  _DWORD buf[12];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[17];
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v88 = v7;
  if (!v7)
    return;
  v8 = v7;
  v9 = *((_QWORD *)this + 5);
  v87 = v9;
  if (!v9
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 - 320)) + 280))(v9 + *(_QWORD *)(*(_QWORD *)v9 - 320)) & 1) == 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 496))(v9) & 1) != 0
    || !*((_QWORD *)this + 20))
  {
LABEL_88:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  v86 = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, a3);
    if (SHIBYTE(v86) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v86 = *(_QWORD *)&buf[4];
  }
  v10 = (QMIDataCommandDriver *)((char *)this + 144);
  v11 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    SvcType = qmi::Client::getSvcType((QMIDataCommandDriver *)((char *)this + 144));
    Name = qmi::Client::getName((QMIDataCommandDriver *)((char *)this + 144));
    if (*(char *)(Name + 23) >= 0)
      v14 = Name;
    else
      v14 = *(_QWORD *)Name;
    v15 = __p;
    if (v86 < 0)
      v15 = (void **)__p[0];
    buf[0] = 136316162;
    *(_QWORD *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = SvcType;
    HIWORD(buf[4]) = 2080;
    *(_QWORD *)&buf[5] = v14;
    LOWORD(buf[7]) = 1024;
    *(_DWORD *)((char *)&buf[7] + 2) = a2;
    HIWORD(buf[8]) = 2080;
    *(_QWORD *)&buf[9] = v15;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>1: svcType=%d, name=%s, value=%d, reason=%s", (uint8_t *)buf, 0x2Cu);
  }
  if (a2)
  {
    v84 = 0;
    memset(v107, 0, 268);
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v102 = 0u;
    memset(buf, 0, sizeof(buf));
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 472))(v9, &v84, buf);
    if (!v84)
      goto LABEL_80;
    v65 = a2;
    memset(v83, 0, sizeof(v83));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v83);
    v16 = 0;
    v70[0] = 0;
    v70[1] = 0;
    *(_QWORD *)&v71 = 0;
    v17 = buf;
    do
    {
      v18 = &buf[33 * v16];
      v21 = *((unsigned __int8 *)v18 + 129);
      v20 = (unsigned __int8 *)v18 + 129;
      v19 = v21;
      v100 = 0;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      *(_OWORD *)v94 = 0u;
      v95 = 0u;
      memset(aBlock, 0, sizeof(aBlock));
      if (v21 <= 0x80)
      {
        v22 = &buf[33 * v16];
        v23 = *((unsigned __int8 *)v22 + 128);
        if (*((_BYTE *)v22 + 128))
        {
          if (v23 == 1)
          {
            LOBYTE(v100) = 1;
          }
          else
          {
            v24 = *((_QWORD *)this + 12);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v89 = 136315394;
              v90 = "sendOffloadKeepaliveRequest_sync";
              v91 = 1024;
              v92 = v23;
              _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>3: wrong frame type=%d", v89, 0x12u);
              v19 = *v20;
            }
          }
        }
        BYTE1(v100) = v19;
        HIWORD(v100) = *((_WORD *)v107 + 66 * v16 + 1);
        if (v19)
        {
          v25 = 0;
          do
          {
            aBlock[v25] = *((_BYTE *)v17 + v25);
            ++v25;
          }
          while (v25 < BYTE1(v100));
        }
      }
      v26 = (char *)v70[1];
      if (v70[1] >= (void *)v71)
      {
        v28 = (char *)v70[0];
        v29 = 0xF83E0F83E0F83E1 * (((char *)v70[1] - (char *)v70[0]) >> 2);
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) > 0x1F07C1F07C1F07CLL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x1F07C1F07C1F07C2 * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 2) > v30)
          v30 = 0x1F07C1F07C1F07C2 * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 2);
        if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 2)) >= 0xF83E0F83E0F83ELL)
          v31 = 0x1F07C1F07C1F07CLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::FrameData>>((uint64_t)&v71, v31);
          v28 = (char *)v70[0];
          v26 = (char *)v70[1];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * (((char *)v70[1] - (char *)v70[0]) >> 2)];
        *((_OWORD *)v33 + 5) = v97;
        *((_OWORD *)v33 + 6) = v98;
        *((_OWORD *)v33 + 7) = v99;
        *((_DWORD *)v33 + 32) = v100;
        *((_OWORD *)v33 + 1) = *(_OWORD *)&aBlock[16];
        *((_OWORD *)v33 + 2) = *(_OWORD *)v94;
        *((_OWORD *)v33 + 3) = v95;
        *((_OWORD *)v33 + 4) = v96;
        *(_OWORD *)v33 = *(_OWORD *)aBlock;
        if (v26 == v28)
        {
          v41 = &v32[132 * v29];
        }
        else
        {
          v34 = &v32[132 * v29];
          do
          {
            *(_OWORD *)(v34 - 132) = *(_OWORD *)(v26 - 132);
            v35 = *(_OWORD *)(v26 - 116);
            v36 = *(_OWORD *)(v26 - 100);
            v37 = *(_OWORD *)(v26 - 84);
            *(_OWORD *)(v34 - 68) = *(_OWORD *)(v26 - 68);
            *(_OWORD *)(v34 - 84) = v37;
            *(_OWORD *)(v34 - 100) = v36;
            *(_OWORD *)(v34 - 116) = v35;
            v38 = *(_OWORD *)(v26 - 52);
            v39 = *(_OWORD *)(v26 - 36);
            v40 = *(_OWORD *)(v26 - 20);
            v41 = v34 - 132;
            *((_DWORD *)v34 - 1) = *((_DWORD *)v26 - 1);
            *(_OWORD *)(v34 - 20) = v40;
            *(_OWORD *)(v34 - 36) = v39;
            *(_OWORD *)(v34 - 52) = v38;
            v26 -= 132;
            v34 -= 132;
          }
          while (v26 != v28);
        }
        v27 = v33 + 132;
        v70[0] = v41;
        v70[1] = v33 + 132;
        *(_QWORD *)&v71 = &v32[132 * v31];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *((_OWORD *)v70[1] + 5) = v97;
        *((_OWORD *)v26 + 6) = v98;
        *((_OWORD *)v26 + 7) = v99;
        *((_DWORD *)v26 + 32) = v100;
        *((_OWORD *)v26 + 1) = *(_OWORD *)&aBlock[16];
        *((_OWORD *)v26 + 2) = *(_OWORD *)v94;
        *((_OWORD *)v26 + 3) = v95;
        *((_OWORD *)v26 + 4) = v96;
        *(_OWORD *)v26 = *(_OWORD *)aBlock;
        v27 = v26 + 132;
      }
      v70[1] = v27;
      ++v16;
      v17 += 33;
    }
    while (v16 != 3);
    v42 = MEMORY[0x24BDAC760];
    v77[0] = MEMORY[0x24BDAC760];
    v77[1] = 1174405120;
    v78 = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke;
    v79 = &__block_descriptor_tmp_15_7;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(&v80, v70[0], (uint64_t)v27, 0xF83E0F83E0F83E1 * ((int64_t)((uint64_t)v27 - (unint64_t)v70[0]) >> 2));
    v43 = qmi::MutableMessageBase::getTLV<wds::tlv::FrameList>(v83);
    v10 = (QMIDataCommandDriver *)((char *)this + 144);
    v78(v77, (void **)v43);
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    a2 = v65;
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
    v73[0] = v42;
    v73[1] = 0x40000000;
    v74 = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_16;
    v75 = &__block_descriptor_tmp_18_6;
    v76 = v84;
    v44 = qmi::MutableMessageBase::getTLV<wds::tlv::NumFrames>(v83);
    v74((uint64_t)v73, v44);
    *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>(v83) = 1;
    v45 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)aBlock = 136315394;
      *(_QWORD *)&aBlock[4] = "sendOffloadKeepaliveRequest_sync";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v84;
      _os_log_impl(&dword_216897000, v45, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>4: found good frames=%d", aBlock, 0x12u);
    }
    if (v84)
    {
      v46 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)aBlock = 136315394;
        *(_QWORD *)&aBlock[4] = "sendOffloadKeepaliveRequest_sync";
        *(_WORD *)&aBlock[12] = 2080;
        *(_QWORD *)&aBlock[14] = "sendOffloadKeepaliveRequest_sync";
        _os_log_impl(&dword_216897000, v46, OS_LOG_TYPE_DEFAULT, "#I %s: %s: Sending SetKeepaliveOffload Start request", aBlock, 0x16u);
      }
      *((_BYTE *)this + 312) = 1;
      v47 = v87;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 480))(v87, 1);
      v70[0] = (char *)this + 144;
      v70[1] = (void *)QMIServiceMsg::create();
      LODWORD(v71) = 25000;
      *((_QWORD *)&v71 + 1) = 0;
      v72 = 0;
      v68[0] = v42;
      v68[1] = 1174405120;
      v68[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_21;
      v68[3] = &__block_descriptor_tmp_22_4;
      v68[4] = this;
      v69[0] = v47;
      v69[1] = v88;
      if (v88)
      {
        v48 = (unint64_t *)&v88->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      *(_QWORD *)aBlock = v42;
      *(_QWORD *)&aBlock[8] = 0x40000000;
      *(_QWORD *)&aBlock[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
      *(_QWORD *)&aBlock[24] = &unk_24D5CFD50;
      v94[0] = v68;
      v72 = _Block_copy(aBlock);
      qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)v70);
      std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v69);
    }
    v50 = (void **)v83;
  }
  else
  {
    *(_OWORD *)v70 = 0u;
    v71 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v70);
    *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>(v70) = 0;
    v51 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(_QWORD *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
      LOWORD(buf[3]) = 2080;
      *(_QWORD *)((char *)&buf[3] + 2) = "sendOffloadKeepaliveRequest_sync";
      _os_log_impl(&dword_216897000, v51, OS_LOG_TYPE_DEFAULT, "#I %s: %s: Sending SetKeepaliveOffload Stop request", (uint8_t *)buf, 0x16u);
    }
    if (*((_BYTE *)this + 312))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 480))(v9, 0);
    *((_BYTE *)this + 312) = 0;
    *(_QWORD *)aBlock = (char *)this + 144;
    *(_QWORD *)&aBlock[8] = QMIServiceMsg::create();
    *(_DWORD *)&aBlock[16] = 25000;
    *(_QWORD *)&aBlock[24] = 0;
    v94[0] = 0;
    v52 = MEMORY[0x24BDAC760];
    v66[0] = MEMORY[0x24BDAC760];
    v66[1] = 1174405120;
    v66[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_26;
    v66[3] = &__block_descriptor_tmp_27_1;
    v66[4] = this;
    v66[5] = v9;
    v53 = (unint64_t *)&v8->__shared_owners_;
    v67 = v8;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    *(_QWORD *)buf = v52;
    *(_QWORD *)&buf[2] = 0x40000000;
    *(_QWORD *)&buf[4] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
    *(_QWORD *)&buf[6] = &unk_24D5CFD50;
    *(_QWORD *)&buf[8] = v66;
    v55 = _Block_copy(buf);
    v94[0] = v55;
    if (*(_QWORD *)&aBlock[8])
    {
      qmi::Client::send();
      v55 = v94[0];
    }
    if (v55)
      _Block_release(v55);
    v56 = v67;
    if (v67)
    {
      v57 = (unint64_t *)&v67->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v50 = v70;
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v50);
LABEL_80:
  v59 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    v60 = qmi::Client::getSvcType(v10);
    v61 = qmi::Client::getName(v10);
    if (*(char *)(v61 + 23) >= 0)
      v62 = v61;
    else
      v62 = *(_QWORD *)v61;
    buf[0] = 136315906;
    *(_QWORD *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = v60;
    HIWORD(buf[4]) = 2080;
    *(_QWORD *)&buf[5] = v62;
    LOWORD(buf[7]) = 1024;
    *(_DWORD *)((char *)&buf[7] + 2) = a2;
    _os_log_impl(&dword_216897000, v59, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>9: svcType=%d, name=%s, value=%d", (uint8_t *)buf, 0x22u);
  }
  if (SHIBYTE(v86) < 0)
    operator delete(__p[0]);
  v8 = v88;
  if (v88)
    goto LABEL_88;
}

void sub_216948EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char a60)
{
  uint64_t v60;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v60);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a47);
  if (a58 < 0)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c60_ZTSNSt3__16vectorIN3wds3tlv9FrameDataENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c60_ZTSNSt3__16vectorIN3wds3tlv9FrameDataENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_16(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_21(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v4 = v3 + 32;
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 32) + 192);
    if (*(_DWORD *)(a2 + 4))
    {
      v5(v4, 1, 0);
      v6 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        return;
      v7 = *(_DWORD *)(a2 + 4);
      v12 = 136315650;
      v13 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      v14 = 1024;
      v15 = v7;
      v16 = 2080;
      v17 = qmi::asString();
      v8 = "#I %s: <keepalive_offload>5: Baseband failed to set KeepaliveOffload: 0x%x (%s)";
      v9 = v6;
      v10 = 28;
    }
    else
    {
      v5(v4, 1, 1);
      v11 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        return;
      v12 = 136315138;
      v13 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      v8 = "#I %s: <keepalive_offload>6: KeepaliveOffload updated successfully: OK";
      v9 = v11;
      v10 = 12;
    }
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v10);
  }
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_26(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t);
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v4 = v3 + 32;
    v5 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 + 32) + 192);
    if (*(_DWORD *)(a2 + 4))
    {
      v5(v4, 0, 0);
      v6 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        return;
      v7 = *(_DWORD *)(a2 + 4);
      v12 = 136315650;
      v13 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      v14 = 1024;
      v15 = v7;
      v16 = 2080;
      v17 = qmi::asString();
      v8 = "#I %s: <keepalive_offload>7: Baseband failed to stop KeepaliveOffload: 0x%x (%s)";
      v9 = v6;
      v10 = 28;
    }
    else
    {
      v5(v4, 0, 1);
      v11 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        return;
      v12 = 136315138;
      v13 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      v8 = "#I %s: <keepalive_offload>8: KeepaliveOffload stopped successfully: OK";
      v9 = v11;
      v10 = 12;
    }
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v10);
  }
}

void QMIDataCommandDriver::processWdsTlvDormancyStatus(_QWORD *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = a1[5];
      if (v7)
      {
        v8 = *a2;
        v9 = a1[12];
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if ((v8 - 1) >= 2)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315394;
            v15 = "processWdsTlvDormancyStatus";
            v16 = 1024;
            LODWORD(v17) = v8;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Wrong dormancy status %d", buf, 0x12u);
          }
        }
        else
        {
          if (v10)
          {
            v11 = "dormancy_err";
            if (v8 == 2)
              v11 = "kDormancyStatusActive";
            if (v8 == 1)
              v11 = "kDormancyStatusDormant";
            *(_DWORD *)buf = 136315394;
            v15 = "processWdsTlvDormancyStatus";
            v16 = 2080;
            v17 = v11;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Dormancy status: %s", buf, 0x16u);
            v8 = *a2;
          }
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v7 + 544))(v7, v8 == 1);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216949600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::handleDataBearerLegacy(uint64_t a1, int a2, int a3)
{
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)a1) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 280);
    if (v6 != a2)
    {
      v7 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 136315650;
        v11 = "handleDataBearerLegacy";
        v12 = 1024;
        v13 = v6;
        v14 = 1024;
        v15 = a2;
        _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: fLegacyPreMav16RatMask from 0x%x to 0x%x", (uint8_t *)&v10, 0x18u);
      }
      *(_DWORD *)(a1 + 280) = a2;
    }
    v8 = *(_DWORD *)(a1 + 284);
    if (v8 != a3)
    {
      v9 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 136315650;
        v11 = "handleDataBearerLegacy";
        v12 = 1024;
        v13 = v8;
        v14 = 1024;
        v15 = a3;
        _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: fLegacyPreMav16CurrentNetwork from 0x%x to 0x%x", (uint8_t *)&v10, 0x18u);
      }
      *(_DWORD *)(a1 + 284) = a3;
    }
  }
  QMIDataCommandDriver::handleDataBearer((QMIDataCommandDriver *)a1);
}

void QMIDataCommandDriver::processWdsTlvDataSystemStatus(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v28;
  _QWORD *v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  void **v33;
  uint64_t v34;
  void **p_p;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  const char *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  void *__p;
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  _BYTE v58[10];
  void **v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;

  v2 = (_QWORD *)a1;
  v62 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v54 = v5;
    if (v5)
    {
      v44 = v5;
      v53 = v2[5];
      v48 = v53;
      if (v53 && *(_BYTE *)(a2 + 4))
      {
        v6 = 0;
        v7 = 0;
        v8 = 12 * *(unsigned __int8 *)(a2 + 4);
        v9 = *(_DWORD *)a2;
        v42 = v2;
        v43 = a2;
        v47 = v8;
        v46 = *(_DWORD *)a2;
        while (1)
        {
          v10 = *(_QWORD *)(a2 + 8);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v10) >> 2) <= v7)
            std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
          v11 = (_DWORD *)(v10 + v6);
          if (v9 != *v11)
            goto LABEL_52;
          v12 = v11[1];
          v50 = v11[2];
          v13 = v2[12];
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            break;
LABEL_26:
          v15 = a2;
          v49 = v12;
          v16 = v2;
          v17 = v2[36];
          v18 = QMIRATMaskToDataBearerInfo(*(_DWORD *)v17, *(_DWORD *)(v17 + 4), *(_QWORD *)(v17 + 8));
          v20 = v19;
          v21 = v12;
          v22 = QMIRATMaskToDataBearerInfo(v9, v12, v50);
          v24 = v23;
          if (*(_DWORD *)(v17 + 4) != v21)
          {
            if ((v21 & 0xF00) == 0x800)
              v25 = 1;
            else
              v25 = -1;
            if ((v21 & 0xF00) == 0x400)
              v26 = 0;
            else
              v26 = v25;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 608))(v48, v26, v22);
            *(_DWORD *)(v16[36] + 4) = v21;
          }
          v28 = (_DWORD)v18 != (_DWORD)v22 || HIDWORD(v18) != HIDWORD(v22) || v20 != v24;
          if (v21)
          {
            a2 = v15;
            if (v28)
            {
              v29 = v16;
              v30 = v16[12];
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                v31 = asString();
                asStringDataSoMask();
                v32 = v52;
                v33 = (void **)__p;
                v34 = asStringBool();
                *(_DWORD *)buf = 136316162;
                p_p = &__p;
                if (v32 < 0)
                  p_p = v33;
                v56 = "processWdsTlvDataSystemStatus";
                v57 = 2080;
                *(_QWORD *)v58 = v31;
                *(_WORD *)&v58[8] = 2082;
                v59 = p_p;
                LOWORD(v60) = 1024;
                *(_DWORD *)((char *)&v60 + 2) = HIDWORD(v22);
                HIWORD(v60) = 2080;
                v61 = v34;
                _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I %s: The data bearer data mode is: %s/%{public}s (%u)/%s", buf, 0x30u);
                if (v52 < 0)
                  operator delete(__p);
                v29 = v42;
                a2 = v43;
              }
              v36 = v29[36];
              *(_DWORD *)v36 = v46;
              *(_DWORD *)(v36 + 4) = v49;
              *(_QWORD *)(v36 + 8) = v50;
              v37 = v22;
              v9 = v46;
              v45 = v45 & 0xFFFFFFFF00000000 | v24;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 528))(v48, v37);
              v8 = v47;
              v2 = v29;
              goto LABEL_52;
            }
            v8 = v47;
            v9 = v46;
          }
          else
          {
            v8 = v47;
            v9 = v46;
            a2 = v15;
          }
          v2 = v16;
LABEL_52:
          ++v7;
          v6 += 12;
          if (v8 == v6)
            goto LABEL_59;
        }
        if (v9 != 1)
        {
          if (!v9)
          {
            v14 = "kLTE";
            if ((v12 & 0x20) != 0)
              goto LABEL_25;
            v14 = "kWCDMA";
            if ((v12 & 0x201) != 0)
              goto LABEL_25;
            v14 = "kHSDPA";
            if ((v12 & 0xC4) != 0)
              goto LABEL_25;
            v14 = "kHSUPA";
            if ((v12 & 8) != 0)
              goto LABEL_25;
            v14 = "kEDGE";
            if ((v12 & 0x10) != 0)
              goto LABEL_25;
            v14 = "kGPRS";
            if ((v12 & 2) != 0)
              goto LABEL_25;
          }
          goto LABEL_24;
        }
        v14 = "kLTE";
        if ((v12 & 0x20) != 0)
          goto LABEL_25;
        v14 = "keHRPD";
        if ((v12 & 0x10) != 0)
          goto LABEL_25;
        v14 = "kCDMAEVDORev0";
        if ((v12 & 2) != 0)
          goto LABEL_25;
        if ((v12 & 4) != 0)
        {
          v38 = (v50 & 8) == 0;
          v14 = "keHRPD";
          v39 = "kCDMAEVDORevA";
        }
        else
        {
          if ((v12 & 8) == 0)
          {
            v14 = "kCDMA1x";
            if ((v12 & 1) != 0)
            {
LABEL_25:
              *(_DWORD *)buf = 136316162;
              v56 = "processWdsTlvDataSystemStatus";
              v57 = 1024;
              *(_DWORD *)v58 = v9;
              *(_WORD *)&v58[4] = 1024;
              *(_DWORD *)&v58[6] = v12;
              LOWORD(v59) = 1024;
              *(_DWORD *)((char *)&v59 + 2) = v50;
              HIWORD(v59) = 2080;
              v60 = v14;
              _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Data System status: current network (0x%x), rat mask (0x%x) and service option mask (0x%x) become data mode (%s)", buf, 0x28u);
              goto LABEL_26;
            }
LABEL_24:
            v14 = "kNoData";
            goto LABEL_25;
          }
          v38 = (v50 & 0x28) == 0;
          v14 = "keHRPD";
          v39 = "kCDMAEVDORevB";
        }
        if (v38)
          v14 = v39;
        goto LABEL_25;
      }
LABEL_59:
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
}

void sub_216949C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t QMIRATMaskToDataBearerInfo(int a1, __int16 a2, char a3)
{
  int v3;
  uint64_t v5;

  v5 = 0;
  if (a1 != 1)
  {
    if (a1)
      return v5;
    if ((a2 & 0x20) == 0)
    {
      if ((a2 & 0x201) != 0)
      {
        v3 = 3;
LABEL_26:
        LODWORD(v5) = v3;
        return v5;
      }
      if ((a2 & 0xC4) != 0)
      {
        v3 = 4;
        goto LABEL_26;
      }
      if ((a2 & 8) != 0)
      {
        v3 = 5;
        goto LABEL_26;
      }
      if ((a2 & 0x10) != 0)
      {
        v3 = 2;
        goto LABEL_26;
      }
      if ((a2 & 2) != 0)
      {
        v3 = 1;
        goto LABEL_26;
      }
      return v5;
    }
LABEL_13:
    LODWORD(v5) = 14;
    appendDataSoMask();
    return v5;
  }
  if ((a2 & 0x20) != 0)
    goto LABEL_13;
  if ((a2 & 0x10) != 0)
  {
LABEL_25:
    v3 = 13;
    goto LABEL_26;
  }
  if ((a2 & 2) != 0)
  {
    v3 = 11;
    goto LABEL_26;
  }
  if ((a2 & 4) != 0)
  {
    if ((a3 & 8) == 0)
    {
      v3 = 12;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if ((a2 & 8) != 0)
  {
    if ((a3 & 0x28) == 0)
    {
      v3 = 15;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if ((a2 & 1) != 0)
  {
    v3 = 10;
    goto LABEL_26;
  }
  return v5;
}

void QMIDataCommandDriver::processDsdTlvDataSystemStatus(QMIDataCommandDriver *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  void **v34;
  uint64_t v35;
  void **v36;
  _QWORD *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  void *__p[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  _BYTE v57[14];
  __int16 v58;
  _BYTE v59[14];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  void **v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v51 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)a1 + 5);
      v50 = v7;
      if (!v7 || !*a2)
      {
LABEL_40:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v8 = *((_QWORD *)a2 + 1);
      if (*((_QWORD *)a2 + 2) == v8)
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      v9 = DSDRATValueToDataBearerInfo(*(_DWORD *)(v8 + 4), *(_QWORD *)(v8 + 8));
      v47 = v10;
      v11 = v9;
      v12 = (const char *)HIDWORD(v9);
      v13 = *((_QWORD *)a1 + 12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v45 = (int)v12;
        v46 = v11;
        v14 = dsd::asString(*(_DWORD *)v8);
        v15 = *(_DWORD *)v8;
        v12 = dsd::asString(*(_DWORD *)(v8 + 4));
        v16 = *(_DWORD *)(v8 + 4);
        v44 = dsd::asString(*(_QWORD *)(v8 + 8));
        v43 = *(_QWORD *)(v8 + 8);
        v42 = asString();
        asStringDataSoMask();
        v17 = asStringBool();
        v53 = "processDsdTlvDataSystemStatus";
        v18 = __p;
        *(_DWORD *)buf = 136317698;
        if (v49 < 0)
          v18 = (void **)__p[0];
        v54 = 2080;
        v55 = (uint64_t)v14;
        v56 = 1024;
        *(_DWORD *)v57 = v15;
        *(_WORD *)&v57[4] = 2080;
        *(_QWORD *)&v57[6] = v12;
        v58 = 1024;
        *(_DWORD *)v59 = v16;
        *(_WORD *)&v59[4] = 2080;
        LODWORD(v12) = v45;
        *(_QWORD *)&v59[6] = v44;
        v60 = 2048;
        v61 = v43;
        v62 = 2080;
        v63 = v42;
        v64 = 2082;
        v65 = v18;
        v66 = 1024;
        v67 = v45;
        v68 = 2080;
        v69 = v17;
        _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Data System status: Technology: %s (0x%x), rat value: %s (0x%x), service option mask: %s (0x%lx), data bearer info: %s/%{public}s (%u)/%s", buf, 0x64u);
        if (v49 < 0)
          operator delete(__p[0]);
        v11 = v46;
      }
      v19 = DSDRATValueToDataBearerInfo(*(_DWORD *)(*((_QWORD *)a1 + 36) + 4), *(_QWORD *)(*((_QWORD *)a1 + 36) + 8));
      v21 = v20;
      if (*a2)
      {
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2) - v22;
        if (!v23)
          std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
        v24 = *(_QWORD *)(v22 + 8);
        if (*(_DWORD *)(v22 + 4) != 6)
        {
          if ((v24 & 0x2000) != 0)
            v29 = 1;
          else
            v29 = -1;
          if ((v24 & 0x1000) != 0)
            v28 = 0;
          else
            v28 = v29;
LABEL_32:
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 608))(v7, v28, v11);
          if (v19 != __PAIR64__(v12, v11) || v21 != v47)
          {
            v30 = *((_QWORD *)a1 + 12);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              v31 = asString();
              v32 = (int)v12;
              asStringDataSoMask();
              v33 = v49;
              v34 = (void **)__p[0];
              v35 = asStringBool();
              v53 = "processDsdTlvDataSystemStatus";
              v36 = __p;
              *(_DWORD *)buf = 136316162;
              if (v33 < 0)
                v36 = v34;
              v54 = 2080;
              v55 = v31;
              v56 = 2082;
              *(_QWORD *)v57 = v36;
              *(_WORD *)&v57[8] = 1024;
              *(_DWORD *)&v57[10] = v32;
              v58 = 2080;
              *(_QWORD *)v59 = v35;
              _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I %s: The data bearer data mode is: %s, soMask: %{public}s (%u), available: %s", buf, 0x30u);
              if (v49 < 0)
                operator delete(__p[0]);
            }
            v37 = (_QWORD *)*((_QWORD *)a1 + 36);
            *v37 = *(_QWORD *)v8;
            v37[1] = *(_QWORD *)(v8 + 8);
            (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 528))(v7, v11, v47);
            QMIDataCommandDriver::handleDataBearer(a1);
          }
          goto LABEL_40;
        }
        if ((v24 & 0x100000000000) != 0)
        {
          v28 = (v24 >> 40) & 1;
          goto LABEL_32;
        }
        if ((v24 & 0x80000000000) != 0)
        {
          v25 = v23 >> 4;
          if (*a2 < v25)
            v25 = *a2;
          if (v25 >= 2)
          {
            v26 = (_QWORD *)(v22 + 24);
            v27 = v25 - 1;
            while (*((_DWORD *)v26 - 1) != 3)
            {
              v26 += 2;
              v28 = 0xFFFFFFFFLL;
              if (!--v27)
                goto LABEL_32;
            }
            v40 = *v26;
            if ((v40 & 0x2000) != 0)
              v41 = 1;
            else
              v41 = -1;
            if ((v40 & 0x1000) != 0)
              v28 = 0;
            else
              v28 = v41;
            goto LABEL_32;
          }
        }
      }
      v28 = 0xFFFFFFFFLL;
      goto LABEL_32;
    }
  }
}

void sub_21694A1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t DSDRATValueToDataBearerInfo(int a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v6;

  v6 = 0;
  switch(a1)
  {
    case 1:
    case 4:
      v3 = 3;
      goto LABEL_16;
    case 2:
    case 5:
    case 6:
      goto LABEL_6;
    case 3:
      if ((a2 & 0x80000000000) == 0)
        goto LABEL_12;
      goto LABEL_13;
    default:
      if (a1 == 101)
      {
        v3 = 10;
        goto LABEL_16;
      }
      if (a1 == 103)
      {
        v3 = 13;
LABEL_16:
        LODWORD(v6) = v3;
        goto LABEL_17;
      }
LABEL_6:
      if ((a2 & 0x100000000000) != 0)
      {
        v3 = 17;
        goto LABEL_16;
      }
      if ((a2 & 0x80000000000) != 0)
      {
LABEL_13:
        v4 = 16;
        goto LABEL_14;
      }
      if ((a2 & 0x1A) != 0)
      {
        v3 = 4;
        goto LABEL_16;
      }
      if ((a2 & 0x8004) != 0)
      {
        v3 = 5;
        goto LABEL_16;
      }
      if ((a2 & 0x100) != 0)
      {
        v3 = 2;
        goto LABEL_16;
      }
      if ((a2 & 0x80) != 0)
      {
        v3 = 1;
        goto LABEL_16;
      }
      if ((a2 & 0x33000) != 0)
      {
LABEL_12:
        v4 = 14;
LABEL_14:
        LODWORD(v6) = v4;
        appendDataSoMask();
        goto LABEL_17;
      }
      if ((a2 & 0x8000000) != 0)
      {
        v3 = 11;
        goto LABEL_16;
      }
      if ((a2 & 0x150000000) != 0)
      {
        if (a1 == 102)
        {
          v3 = 12;
          goto LABEL_16;
        }
      }
      else if (a1 == 102 && (a2 & 0x6A0000000) != 0)
      {
        v3 = 15;
        goto LABEL_16;
      }
LABEL_17:
      if ((a2 & 0x100000000000) != 0)
      {
        appendDataSoMask();
        if ((a2 & 0x80000000000) == 0)
        {
LABEL_19:
          if ((a2 & 0x10000000000) == 0)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
      else if ((a2 & 0x80000000000) == 0)
      {
        goto LABEL_19;
      }
      appendDataSoMask();
      if ((a2 & 0x10000000000) == 0)
      {
LABEL_20:
        if ((a2 & 0x20000000000) == 0)
          goto LABEL_21;
LABEL_27:
        appendDataSoMask();
        if ((a2 & 0x40000000000) == 0)
          return v6;
        goto LABEL_22;
      }
LABEL_26:
      appendDataSoMask();
      if ((a2 & 0x20000000000) != 0)
        goto LABEL_27;
LABEL_21:
      if ((a2 & 0x40000000000) != 0)
LABEL_22:
        appendDataSoMask();
      return v6;
  }
}

void QMIDataCommandDriver::handleDataBearer(QMIDataCommandDriver *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 5);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 568))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_21694A488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::processDsdTlvDataSystemStatus(uint64_t a1, unsigned __int8 *a2)
{
  QMIDataCommandDriver::processDsdTlvDataSystemStatus((QMIDataCommandDriver *)(a1 - 56), a2);
}

void QMIDataCommandDriver::handleUiMask_sync(uint64_t a1, uint64_t a2, char a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 40);
      if (!v9)
        goto LABEL_14;
      if ((a3 & 2) != 0)
      {
        v10 = dataUiModifierMask();
        if ((a3 & 1) == 0)
        {
LABEL_6:
          if ((a2 & 0x20000000000) == 0)
            goto LABEL_7;
          goto LABEL_11;
        }
      }
      else
      {
        v10 = 0;
        if ((a3 & 1) == 0)
          goto LABEL_6;
      }
      v10 = dataUiModifierMask() | v10;
      if ((a2 & 0x20000000000) == 0)
      {
LABEL_7:
        if ((a2 & 0x40000000000) == 0)
          goto LABEL_13;
        goto LABEL_12;
      }
LABEL_11:
      v10 = dataUiModifierMask() | v10;
      if ((a2 & 0x40000000000) == 0)
      {
LABEL_13:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 856))(v9, v10);
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
LABEL_12:
      v10 = dataUiModifierMask() | v10;
      goto LABEL_13;
    }
  }
}

void sub_21694A5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleUiMask_sync(uint64_t a1, uint64_t a2, char a3)
{
  QMIDataCommandDriver::handleUiMask_sync(a1 - 56, a2, a3);
}

void QMIDataCommandDriver::processWdsTlvAttachParamsAPN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const std::string::value_type *v7;
  std::string::size_type size;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  void **v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  std::string *v19;
  std::string v20;
  std::string v21;
  uint8_t buf[4];
  _BYTE __p[20];
  __int128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BYTE v30[52];

  *(_QWORD *)&v30[36] = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)__p = "processWdsTlvAttachParamsAPN";
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = v7;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN: %s", buf, 0x16u);
  }
  memset(&v21, 0, sizeof(v21));
  if (*(_QWORD *)(a1 + 296))
  {
    if (*(char *)(a3 + 31) < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
    else
      v21 = *(std::string *)(a3 + 8);
  }
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  size = v20.__r_.__value_.__l.__size_;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (size)
  {
    v9 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      v10 = v21.__r_.__value_.__l.__size_;
    if (v10 == size)
    {
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v20;
      else
        v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v21.__r_.__value_.__l.__data_, v11, v21.__r_.__value_.__l.__size_))
          goto LABEL_41;
      }
      else
      {
        if (!*((_BYTE *)&v21.__r_.__value_.__s + 23))
          goto LABEL_41;
        v12 = &v21;
        while (v12->__r_.__value_.__s.__data_[0] == v11->__r_.__value_.__s.__data_[0])
        {
          v12 = (std::string *)((char *)v12 + 1);
          v11 = (std::string *)((char *)v11 + 1);
          if (!--v9)
            goto LABEL_41;
        }
      }
    }
    std::string::operator=((std::string *)(a3 + 8), &v20);
    v18 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = &v20;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)__p = "processWdsTlvAttachParamsAPN";
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = v19;
      v15 = "#I %s: AttachAPN is set to %s";
      v16 = v18;
      v17 = 22;
      goto LABEL_40;
    }
  }
  else
  {
    *(_DWORD *)buf = 0;
    v25 = 0;
    *(_QWORD *)&v24 = 0;
    *(_OWORD *)&__p[4] = 0uLL;
    *(_QWORD *)((char *)&v24 + 6) = 0;
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v26);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v27);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v28);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v29);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v30);
    *(_DWORD *)a3 = *(_DWORD *)buf;
    v13 = (void **)(a3 + 8);
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = *(_OWORD *)&__p[4];
    *(_QWORD *)(a3 + 24) = v24;
    BYTE7(v24) = 0;
    __p[4] = 0;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v24 + 1);
    *(_DWORD *)(a3 + 40) = v25;
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    if (SBYTE7(v24) < 0)
      operator delete(*(void **)&__p[4]);
    v14 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)__p = "processWdsTlvAttachParamsAPN";
      v15 = "#I %s: AttachAPN parameters have been reset";
      v16 = v14;
      v17 = 12;
LABEL_40:
      _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }
LABEL_41:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_21694A97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  QMIDataCommandDriver::processWdsTlvDormancyStatus(*(_QWORD **)(a1 + 32), a2);
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v4 = *(NSObject **)(v3 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 1);
    v7 = *((_DWORD *)a2 + 2);
    v8 = 136315906;
    v9 = "processWdsTlvCurrentDataBearerTech";
    v10 = 1024;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Data Bearer Technology status: current network (0x%x) rat mask (0x%x) service option mask (0x%x)", (uint8_t *)&v8, 0x1Eu);
  }
  QMIDataCommandDriver::handleDataBearerLegacy(v3, *((_DWORD *)a2 + 1), *a2);
}

void QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(QMIDataCommandDriver *this)
{
  void *v2;
  NSObject *v3;
  _QWORD v4[6];
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  _OWORD v9[2];
  __int128 aBlock;
  void (*v11)(uint64_t, QMIServiceMsg *);
  void *v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 20))
  {
    memset(v9, 0, sizeof(v9));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
    v4[5] = (char *)this + 144;
    v5 = QMIServiceMsg::create();
    v6 = 25000;
    v7 = 0;
    v8 = 0;
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke;
    v4[3] = &__block_descriptor_tmp_71_1;
    v4[4] = this;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 0x40000000;
    v11 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetCurrentDataBearerTech8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v12 = &unk_24D5CFF08;
    v13 = v4;
    v2 = _Block_copy(&aBlock);
    v8 = v2;
    if (v5)
    {
      qmi::Client::send();
      v2 = v8;
    }
    if (v2)
      _Block_release(v2);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  }
  else
  {
    v3 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(aBlock) = 136315138;
      *(_QWORD *)((char *)&aBlock + 4) = "sendWdsGetCurrentDataBearerTechReq_sync";
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_21694AC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver::processWdsTlvDataSystemStatus(*(_QWORD *)(a1 + 32), a2);
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_4(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (v7)
      {
        v8 = v2[12];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *a2;
          v13 = 136315394;
          v14 = "processWdsTlvDataTransmitSpeed";
          v15 = 1024;
          v16 = v9;
          _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS DataTransmitSpeed = %d", (uint8_t *)&v13, 0x12u);
        }
        if (*a2 >= 3u)
          v10 = 3;
        else
          v10 = *a2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 560))(v7, v10);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694ADA0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 84), (const CSIPacketAddress *)(a2 + 84));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 108), (const CSIPacketAddress *)(a2 + 108));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 132), (const CSIPacketAddress *)(a2 + 132));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 156), (const CSIPacketAddress *)(a2 + 156));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 180), (const CSIPacketAddress *)(a2 + 180));
}

void sub_21694AE88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_40(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver::processWdsTlvAttachParamsAPN(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 80) = *a2 + 1;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_3(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_4(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 108));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_5(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 132));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_47(uint64_t a1, const unsigned __int8 *a2)
{
  CSIPacketAddress *v2;

  v2 = (CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 156);
  CSIPacketAddress::setIPv6Address(v2, a2);
  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2_49(uint64_t a1, const unsigned __int8 *a2)
{
  CSIPacketAddress *v2;

  v2 = (CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 180);
  CSIPacketAddress::setIPv6Address(v2, a2);
  return CSIPacketAddress::setPrefixLen(v2);
}

void QMIDataCommandDriver::handleUlHealthTCPBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 5);
      if (v7)
      {
        v8 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v12 = "handleUlHealthTCPBottleneck_sync";
          v13 = 1024;
          v14 = a2;
          _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received UL Congestion Indication: tcp bottleneck %d", buf, 0x12u);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 968))(v7, a2);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleUlHealthTCPBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  QMIDataCommandDriver::handleUlHealthTCPBottleneck_sync((QMIDataCommandDriver *)((char *)this - 56), a2);
}

void QMIDataCommandDriver::handleUlHealthEmergencyBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 5);
      if (v7)
      {
        v8 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v12 = "handleUlHealthEmergencyBottleneck_sync";
          v13 = 1024;
          v14 = a2;
          _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received UL Congestion Indication: emergency bottleneck %d", buf, 0x12u);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 976))(v7, a2);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleUlHealthEmergencyBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  QMIDataCommandDriver::handleUlHealthEmergencyBottleneck_sync((QMIDataCommandDriver *)((char *)this - 56), a2);
}

void ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_5(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL8 v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[6];
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *aBlock;
  _OWORD v21[2];
  _BYTE buf[32];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(QMIDataCommandDriver **)(a1 + 32);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)v2 + 5);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *((_QWORD *)v2 + 12);
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "sendWdsSetEventReportReq_sync_block_invoke_5";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to SetEventReport with code = 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "sendWdsSetEventReportReq_sync_block_invoke";
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to SetEventReport received", buf, 0xCu);
            v9 = *((_QWORD *)v2 + 12);
          }
          v11 = *((_QWORD *)v2 + 20);
          v12 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v11)
          {
            if (v12)
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "sendWdsGetDormancyStatusReq_sync";
              _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Getting current dormancy status", buf, 0xCu);
            }
            memset(v21, 0, sizeof(v21));
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
            v16[5] = (char *)v2 + 144;
            v17 = QMIServiceMsg::create();
            v18 = 25000;
            v19 = 0;
            aBlock = 0;
            v16[0] = MEMORY[0x24BDAC760];
            v16[1] = 0x40000000;
            v16[2] = ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke;
            v16[3] = &__block_descriptor_tmp_67_2;
            v16[4] = v2;
            *(_QWORD *)buf = MEMORY[0x24BDAC760];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17GetDormancyStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            *(_QWORD *)&buf[24] = &unk_24D5CFEE0;
            v23 = v16;
            v13 = _Block_copy(buf);
            aBlock = v13;
            if (v17)
            {
              qmi::Client::send();
              v13 = aBlock;
            }
            if (v13)
              _Block_release(v13);
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
          }
          else if (v12)
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "sendWdsGetDormancyStatusReq_sync";
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
          }
          if ((capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v12) & 1) == 0)
            QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(v2);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694B500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[7];
  _BYTE buf[12];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v13[6] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      v13[5] = v7;
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *((_DWORD *)a2 + 1);
        v9 = v2[12];
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "sendWdsGetDormancyStatusReq_sync_block_invoke";
            v15 = 1024;
            v16 = v8;
            v17 = 2080;
            v18 = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetDormancyStatus with code = 0x%x (%s)", buf, 0x1Cu);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 544))(v7, 1);
        }
        else
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "sendWdsGetDormancyStatusReq_sync_block_invoke";
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to GetDormancyStatus received", buf, 0xCu);
          }
          v13[0] = MEMORY[0x24BDAC760];
          v13[1] = 0x40000000;
          v13[2] = ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke_65;
          v13[3] = &__block_descriptor_tmp_66_1;
          v13[4] = v2;
          *(_QWORD *)buf = v13;
          qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(a2, 1, (uint64_t)buf);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke_65(uint64_t a1, unsigned __int8 *a2)
{
  QMIDataCommandDriver::processWdsTlvDormancyStatus(*(_QWORD **)(a1 + 32), a2);
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  _BYTE buf[28];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v26 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      v25 = v7;
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "sendWdsGetCurrentDataBearerTechReq_sync_block_invoke";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetCurrentDataBearerTech with code = 0x%x (%s)", buf, 0x1Cu);
          }
          QMIDataCommandDriver::handleDataBearerLegacy((uint64_t)v2, 0x8000, 0);
        }
        else
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          *(_DWORD *)&buf[24] = 0;
          v21 = 0;
          v22 = &v21;
          v23 = 0x2000000000;
          v24 = 0;
          v17 = 0;
          v18 = &v17;
          v19 = 0x2000000000;
          v20 = 0;
          v16[0] = MEMORY[0x24BDAC760];
          v16[1] = 0x40000000;
          v16[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke_68;
          v16[3] = &unk_24D5CED30;
          v16[4] = buf;
          v16[5] = &v21;
          v16[6] = &v17;
          *(_QWORD *)v27 = v16;
          qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(a2, 1, (uint64_t)v27);
          v10 = v2[12];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
            v12 = *((_DWORD *)v22 + 6);
            v13 = *((_DWORD *)v18 + 6);
            *(_DWORD *)v27 = 136315906;
            *(_QWORD *)&v27[4] = "sendWdsGetCurrentDataBearerTechReq_sync_block_invoke_2";
            v28 = 1024;
            v29 = v11;
            v30 = 1024;
            v31 = v12;
            v32 = 1024;
            v33 = v13;
            _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Data Bearer Technology status: current network (%d) rat mask (%d) service option mask (%d)", v27, 0x1Eu);
          }
          QMIDataCommandDriver::handleDataBearerLegacy((uint64_t)v2, *((_DWORD *)v22 + 6), *(_DWORD *)(*(_QWORD *)&buf[8] + 24));
          _Block_object_dispose(&v17, 8);
          _Block_object_dispose(&v21, 8);
          _Block_object_dispose(buf, 8);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694B9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_7(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL8 v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  const void **v14;
  char *v15;
  _DWORD *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  _BOOL4 v34;
  void *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *aBlock;
  void *__p[2];
  __int128 v49;
  _BYTE buf[32];
  uint64_t *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0)
        goto LABEL_54;
      v8 = *(_DWORD *)(a2 + 4);
      v9 = v2[12];
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (!v10)
          goto LABEL_54;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "sendWdsIndicationRegisterReq_sync_block_invoke_7";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = qmi::asString();
        v11 = "#I %s: Error registering for WDS indications: %d(%s)";
        v12 = v9;
        v13 = 28;
      }
      else
      {
        if (v10)
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "sendWdsIndicationRegisterReq_sync_block_invoke";
          _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to IndicationRegister (control point) received", buf, 0xCu);
        }
        if (capabilities::ct::supportsThroughputEngineering((capabilities::ct *)v10))
        {
          if (v2[20])
          {
            *(_OWORD *)__p = 0u;
            v49 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
            v14 = (const void **)__p[1];
            if (__p[1] != (void *)v49)
            {
              while (*((_BYTE *)*v14 + 8) != 16)
              {
                if (++v14 == (const void **)v49)
                  goto LABEL_22;
              }
            }
            if (v14 == (const void **)v49)
            {
LABEL_22:
              v18 = operator new();
              v19 = v18;
              *(_BYTE *)(v18 + 8) = 16;
              *(_QWORD *)v18 = &off_24D5D0158;
              *(_DWORD *)(v18 + 12) = 0;
              v16 = (_DWORD *)(v18 + 12);
              v20 = v49;
              if ((unint64_t)v49 >= *((_QWORD *)&v49 + 1))
              {
                v22 = (uint64_t)(v49 - (unint64_t)__p[1]) >> 3;
                if ((unint64_t)(v22 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v23 = (uint64_t)(*((_QWORD *)&v49 + 1) - (unint64_t)__p[1]) >> 2;
                if (v23 <= v22 + 1)
                  v23 = v22 + 1;
                if (*((_QWORD *)&v49 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
                  v24 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v24 = v23;
                if (v24)
                  v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v49 + 8, v24);
                else
                  v25 = 0;
                v26 = (uint64_t *)&v25[8 * v22];
                v27 = &v25[8 * v24];
                *v26 = v19;
                v21 = v26 + 1;
                v29 = (char *)__p[1];
                v28 = (char *)v49;
                if ((void *)v49 != __p[1])
                {
                  do
                  {
                    v30 = *((_QWORD *)v28 - 1);
                    v28 -= 8;
                    *--v26 = v30;
                  }
                  while (v28 != v29);
                  v28 = (char *)__p[1];
                }
                __p[1] = v26;
                *(_QWORD *)&v49 = v21;
                *((_QWORD *)&v49 + 1) = v27;
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_QWORD *)v49 = v18;
                v21 = (_QWORD *)(v20 + 8);
              }
              *(_QWORD *)&v49 = v21;
            }
            else
            {
              if (!v15)
                __cxa_bad_cast();
              v16 = v15 + 12;
            }
            *v16 = 2000;
            v43 = v2 + 18;
            v44 = QMIServiceMsg::create();
            v45 = 25000;
            v46 = 0;
            aBlock = 0;
            v38 = MEMORY[0x24BDAC760];
            v39 = 0x40000000;
            v40 = ___ZN20QMIDataCommandDriver33sendThroughputInfoIndFreqReq_syncEv_block_invoke_2;
            v41 = &__block_descriptor_tmp_90_0;
            v42 = v2;
            *(_QWORD *)buf = MEMORY[0x24BDAC760];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds27SetThroughputInfoIndFreqReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            *(_QWORD *)&buf[24] = &unk_24D5D0188;
            v51 = &v38;
            v31 = _Block_copy(buf);
            aBlock = v31;
            if (v44)
            {
              qmi::Client::send();
              v31 = aBlock;
            }
            if (v31)
              _Block_release(v31);
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          }
          else
          {
            v17 = v2[12];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "sendThroughputInfoIndFreqReq_sync";
              _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
            }
          }
        }
        v32 = v2[20];
        v33 = v2[12];
        v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "sendWdsGetLteAttachParamsReq_sync";
            _os_log_impl(&dword_216897000, v33, OS_LOG_TYPE_DEFAULT, "#I %s: Getting current LTE Attach Params", buf, 0xCu);
          }
          *(_OWORD *)__p = 0u;
          v49 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
          v43 = v2 + 18;
          v44 = QMIServiceMsg::create();
          v45 = 25000;
          v46 = 0;
          aBlock = 0;
          v38 = MEMORY[0x24BDAC760];
          v39 = 0x40000000;
          v40 = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke;
          v41 = &__block_descriptor_tmp_105_0;
          v42 = v2;
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18GetLTEAttachParams8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          *(_QWORD *)&buf[24] = &unk_24D5D01B0;
          v51 = &v38;
          v35 = _Block_copy(buf);
          aBlock = v35;
          if (v44)
          {
            qmi::Client::send();
            v35 = aBlock;
          }
          if (v35)
            _Block_release(v35);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          goto LABEL_54;
        }
        if (!v34)
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "sendWdsGetLteAttachParamsReq_sync";
        v11 = "#I %s: WDS Client is not ready";
        v12 = v33;
        v13 = 12;
      }
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
      goto LABEL_54;
    }
  }
}

void sub_21694BFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver33sendThroughputInfoIndFreqReq_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136315650;
      v5 = "sendThroughputInfoIndFreqReq_sync_block_invoke_2";
      v6 = 1024;
      v7 = v2;
      v8 = 2080;
      v9 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: Error setting throughput frequency: %d(%s)", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t TlvValue;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  void **v26;
  void **v27;
  void *p_p;
  NSObject *v29;
  _BOOL4 v30;
  int v31;
  void **v32;
  void **v33;
  void **v34;
  _QWORD v35[6];
  _QWORD v36[6];
  void *__p;
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[5];
  _QWORD v47[6];
  _QWORD v48[2];
  uint64_t (*v49)(uint64_t, unsigned __int8 *);
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _BYTE v58[12];
  __int16 v59;
  void **v60;
  __int16 v61;
  void **v62;
  __int16 v63;
  void *v64;
  _BYTE buf[32];
  void (*v66)(uint64_t);
  __int128 v67;
  __int128 v68;
  _OWORD v69[8];
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v57 = v5;
  if (!v5)
    return;
  v6 = v5;
  v7 = v2[5];
  v56 = v7;
  if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0)
  {
LABEL_5:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  v10 = *((_DWORD *)a2 + 1);
  v11 = v2[12];
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = qmi::asString();
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetLTEAttachParams with code = 0x%x (%s)", buf, 0x1Cu);
    }
    v13 = (std::__shared_weak_count *)v2[38];
    v2[37] = 0;
    v2[38] = 0;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_5;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke";
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Response to GetLTEAttachParams received", buf, 0xCu);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0xD002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__1;
  v66 = __Block_byref_object_dispose__1;
  v67 = 0u;
  v68 = 0u;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)v69 + 12));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v69[2] + 4));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v69[3] + 12));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v69[5] + 4));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v69[6] + 12));
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v16 = MEMORY[0x24BDAC760];
  v55 = 0;
  v48[0] = MEMORY[0x24BDAC760];
  v48[1] = 0x40000000;
  v49 = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_91;
  v50 = &unk_24D5CEDB8;
  v51 = &v52;
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  v19 = TlvValue;
  if (TlvValue)
  {
    v20 = v18;
    *(_QWORD *)v58 = TlvValue;
    LOBYTE(v41[0]) = tlv::parseV<wds::tlv::OTAAttachPerformed>((unint64_t *)v58, v18);
    if (*(_QWORD *)v58)
      v49((uint64_t)v48, (unsigned __int8 *)v41);
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 18, v19, v20);
  }
  if (!*((_DWORD *)v53 + 6))
  {
    v22 = *(_QWORD *)&buf[8] + 40;
    *(_DWORD *)(*(_QWORD *)&buf[8] + 72) = -1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 632))(v7, v22);
    goto LABEL_62;
  }
  v47[0] = v16;
  v47[1] = 0x40000000;
  v47[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2;
  v47[3] = &unk_24D5CEDE0;
  v47[4] = buf;
  v47[5] = v2;
  *(_QWORD *)v58 = v47;
  qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(a2, (uint64_t)v58);
  if (*(char *)(*(_QWORD *)&buf[8] + 71) < 0)
    v21 = *(_QWORD *)(*(_QWORD *)&buf[8] + 56);
  else
    v21 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 71);
  if (!v21)
  {
LABEL_62:
    _Block_object_dispose(&v52, 8);
    _Block_object_dispose(buf, 8);
    if (SHIBYTE(v68) < 0)
      operator delete(*((void **)&v67 + 1));
    goto LABEL_5;
  }
  v46[0] = v16;
  v46[1] = 0x40000000;
  v46[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_3;
  v46[3] = &unk_24D5CEE08;
  v46[4] = buf;
  *(_QWORD *)v58 = v46;
  qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(a2, (uint64_t)v58);
  v23 = *(_QWORD *)&buf[8];
  if ((*(_DWORD *)(*(_QWORD *)&buf[8] + 80) | 2) == 3)
  {
    v45[0] = v16;
    v45[1] = 0x40000000;
    v45[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_4;
    v45[3] = &unk_24D5CEE30;
    v45[4] = buf;
    v45[5] = v2;
    *(_QWORD *)v58 = v45;
    qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(a2, 19, (uint64_t)v58);
    v44[0] = v16;
    v44[1] = 0x40000000;
    v44[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_5;
    v44[3] = &unk_24D5CEE58;
    v44[4] = buf;
    v44[5] = v2;
    *(_QWORD *)v58 = v44;
    qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(a2, 20, (uint64_t)v58);
    v43[0] = v16;
    v43[1] = 0x40000000;
    v43[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_6;
    v43[3] = &unk_24D5CEE80;
    v43[4] = buf;
    v43[5] = v2;
    *(_QWORD *)v58 = v43;
    qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(a2, 21, (uint64_t)v58);
    v24 = v2[12];
    v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    v23 = *(_QWORD *)&buf[8];
    if (v25)
    {
      v26 = v41;
      CSIPacketAddress::operator std::string();
      if (v42 < 0)
        v26 = (void **)v41[0];
      CSIPacketAddress::operator std::string();
      CSIPacketAddress::operator std::string();
      v27 = v39;
      if (v40 < 0)
        v27 = (void **)v39[0];
      if (v38 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)v58 = 136315906;
      *(_QWORD *)&v58[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke_7";
      v59 = 2080;
      v60 = v26;
      v61 = 2080;
      v62 = v27;
      v63 = 2080;
      v64 = p_p;
      _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv4: %s, Mask: %s, Gateway: %s", v58, 0x2Au);
      if (v38 < 0)
        operator delete(__p);
      if (v40 < 0)
        operator delete(v39[0]);
      if (v42 < 0)
        operator delete(v41[0]);
      v23 = *(_QWORD *)&buf[8];
    }
  }
  if ((*(_DWORD *)(v23 + 80) & 0xFFFFFFFE) == 2)
  {
    v36[0] = v16;
    v36[1] = 0x40000000;
    v36[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_100;
    v36[3] = &unk_24D5CEEA8;
    v36[4] = buf;
    v36[5] = v2;
    *(_QWORD *)v58 = v36;
    qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(a2, 22, (uint64_t)v58);
    v35[0] = v16;
    v35[1] = 0x40000000;
    v35[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2_102;
    v35[3] = &unk_24D5CEED0;
    v35[4] = buf;
    v35[5] = v2;
    *(_QWORD *)v58 = v35;
    qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(a2, 23, (uint64_t)v58);
    v29 = v2[12];
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    v23 = *(_QWORD *)&buf[8];
    if (v30)
    {
      CSIPacketAddress::operator std::string();
      v31 = v42;
      v32 = (void **)v41[0];
      CSIPacketAddress::operator std::string();
      v33 = v41;
      if (v31 < 0)
        v33 = v32;
      if (v40 >= 0)
        v34 = v39;
      else
        v34 = (void **)v39[0];
      *(_DWORD *)v58 = 136315650;
      *(_QWORD *)&v58[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke_3";
      v59 = 2080;
      v60 = v33;
      v61 = 2080;
      v62 = v34;
      _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv6: %s, Gateway: %s", v58, 0x20u);
      if (v40 < 0)
        operator delete(v39[0]);
      if (v42 < 0)
        operator delete(v41[0]);
      v23 = *(_QWORD *)&buf[8];
    }
  }
  *(_DWORD *)(v23 + 72) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 632))(v7, v23 + 40);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(buf, 8);
  if (SHIBYTE(v68) < 0)
    operator delete(*((void **)&v67 + 1));
  v6 = v57;
  if (v57)
    goto LABEL_5;
}

void sub_21694C85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a72;

  if (a33 < 0)
    operator delete(__p);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_91(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver::processWdsTlvAttachParamsAPN(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 80) = *a2 + 1;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_4(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_5(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 108));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_6(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 132));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_100(uint64_t a1, const unsigned __int8 *a2)
{
  CSIPacketAddress *v2;

  v2 = (CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 156);
  CSIPacketAddress::setIPv6Address(v2, a2);
  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2_102(uint64_t a1, const unsigned __int8 *a2)
{
  CSIPacketAddress *v2;

  v2 = (CSIPacketAddress *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 180);
  CSIPacketAddress::setIPv6Address(v2, a2);
  return CSIPacketAddress::setPrefixLen(v2);
}

void ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  std::string::value_type *TlvValue;
  int v12;
  std::string::value_type *v13;
  int v14;
  std::string::value_type *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string::value_type *v26;
  _BYTE buf[28];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v25 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      v24 = v7;
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v20 = 0;
        v21 = &v20;
        v22 = 0x2000000000;
        v23 = 0;
        v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = qmi::asString();
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "sendGetDeviceNAIRequest_sync_block_invoke_2";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve NAI: 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          v19[0] = MEMORY[0x24BDAC760];
          v19[1] = 0x40000000;
          v19[2] = ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_109;
          v19[3] = &unk_24D5CEF18;
          v19[4] = &v20;
          v19[5] = v2;
          TlvValue = (std::string::value_type *)qmi::MessageBase::findTlvValue(a2);
          v13 = TlvValue;
          if (TlvValue)
          {
            v14 = v12;
            v26 = TlvValue;
            memset(buf, 0, 24);
            tlv::parseV<wds::tlv::ProfileNAI>(&v26, v12, (std::string *)buf);
            v15 = v26;
            if (v26)
              ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_109((uint64_t)v19, buf);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (!v15)
              ((void (*)(_QWORD, uint64_t, std::string::value_type *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 21, v13, v14);
          }
        }
        if (!*((_BYTE *)v21 + 24))
        {
          v16 = v2[12];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "sendGetDeviceNAIRequest_sync_block_invoke";
            _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: clearing device NAI", buf, 0xCu);
          }
          memset(buf, 0, 24);
          QMIDataCommandDriver::setDeviceNAI((uint64_t)v2, (const std::string *)buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        _Block_object_dispose(&v20, 8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  if (*(char *)(v8 - 73) < 0)
    operator delete(*(void **)(v8 - 96));
  _Block_object_dispose(va, 8);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_109(uint64_t a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v5 = v4;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, &a2[v5], v5);
  QMIDataCommandDriver::setDeviceNAI(v3, &__p);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v6 = *(NSObject **)(v3 + 96);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v10 = "sendGetDeviceNAIRequest_sync_block_invoke";
    v11 = 2080;
    v12 = p_p;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: device NAI: '%s'", buf, 0x16u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21694CDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[7];
  _BYTE buf[12];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v12[6] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      v12[5] = v7;
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "sendWdsGetCurrentDataSystemRequest_sync_block_invoke";
            v14 = 1024;
            v15 = v8;
            v16 = 2080;
            v17 = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve DataSystemStatus: 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          v12[0] = MEMORY[0x24BDAC760];
          v12[1] = 0x40000000;
          v12[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke_112;
          v12[3] = &__block_descriptor_tmp_113_0;
          v12[4] = v2;
          *(_QWORD *)buf = v12;
          qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(a2, 16, (uint64_t)buf);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke_112(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver::processWdsTlvDataSystemStatus(*(_QWORD *)(a1 + 32), a2);
}

void QMIDataCommandDriver::setObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 328);
  *(_QWORD *)(a1 + 320) = v3;
  *(_QWORD *)(a1 + 328) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'QMIDataCommandDriver::setObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v3;
  *(_QWORD *)(a1 + 304) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

BOOL QMIDataCommandDriver::preSleepState(QMIDataCommandDriver *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  char *v12;
  _QWORD *v13;
  char v14;

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK20QMIDataCommandDriver13preSleepStateEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_116_1;
  v4[4] = this;
  v5 = v4;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE20execute_wrapped_syncIU13block_pointerFbvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v6[3] = &__block_descriptor_tmp_240;
  v6[4] = (char *)this + 64;
  v6[5] = &v5;
  v7 = v6;
  v2 = (char *)this + 80;
  v1 = *((_QWORD *)this + 10);
  if (*((_QWORD *)v2 + 1))
  {
    v14 = 0;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_242;
    v12 = &v14;
    v13 = &v7;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v14 = 0;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_241_0;
    v12 = &v14;
    v13 = &v7;
    dispatch_sync(v1, &block);
  }
  return v14 != 0;
}

BOOL ___ZNK20QMIDataCommandDriver13preSleepStateEv_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 336) + 24) != 0;
}

BOOL `non-virtual thunk to'QMIDataCommandDriver::preSleepState(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::preSleepState((QMIDataCommandDriver *)((char *)this - 24));
}

void QMIDataCommandDriver::handleWDSEnterLowPower_sync(uint64_t a1, char *a2, int a3, NSObject **a4)
{
  void **v8;
  _QWORD *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  ctu::os::signpost_interval *v23;
  _QWORD *v24;
  uint64_t v25;
  std::string::size_type v26;
  char v27;
  NSObject *v28;
  NSObject *v29;
  ctu::os::signpost_interval *v30;
  _QWORD *v31;
  unint64_t *v32;
  NSObject *v33;
  NSObject *global_queue;
  NSObject *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  __n128 *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __n128 *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  __n128 v58;
  char *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_weak_owners;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject **v80;
  unint64_t v81;
  NSObject *v82;
  NSObject *v83;
  _QWORD *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  dispatch_group_t *v91;
  NSObject *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  NSObject *v98;
  NSObject *v99;
  _QWORD *v100;
  unint64_t v101;
  NSObject *v102;
  void **v103;
  NSObject *v104;
  NSObject *v105;
  capabilities::ct *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  NSObject **v116;
  char *v117;
  __n128 v118;
  uint64_t v119;
  _QWORD *v120;
  NSObject *v121;
  dispatch_group_t group;
  std::string v123;
  void *__p[2];
  uint64_t v125;
  __n128 v126;
  uint8_t v127[16];
  __int128 v128;
  __int128 v129;
  _QWORD v130[2];
  uint8_t buf[24];
  _QWORD v132[9];

  v132[6] = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v125 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v8 = std::__tree<std::string>::find<std::string>(*(_QWORD *)(a1 + 336), __p);
  v9 = *(_QWORD **)(a1 + 336);
  if (v9 + 1 == v8)
  {
    v15 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = __p;
      if (v125 < 0)
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v16;
      _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#N %s: client %s is not LPM-active !", buf, 0x16u);
    }
  }
  else
  {
    v117 = a2;
    if (!v9[3])
    {
      v115 = a3;
      v10 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = a2;
        _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Client %s initiating the sleeping group", buf, 0x16u);
      }
      v11 = dispatch_group_create();
      v12 = operator new(0x38uLL);
      v13 = v12;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = &off_24D5D02E0;
      v12[3] = v11;
      v14 = v12 + 3;
      if (v11)
      {
        dispatch_retain(v11);
        v13[4] = 0;
        v13[5] = 0;
        v13[6] = 0;
        dispatch_release(v11);
      }
      else
      {
        v12[4] = 0;
        v12[5] = 0;
        v12[6] = 0;
      }
      v17 = *(_QWORD *)(a1 + 336);
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      *(_QWORD *)(v17 + 24) = v14;
      *(_QWORD *)(v17 + 32) = v13;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v116 = a4;
      v21 = *(_QWORD **)(a1 + 336);
      v22 = (_QWORD *)*v21;
      v120 = v21 + 1;
      if ((_QWORD *)*v21 != v21 + 1)
      {
        v119 = a1;
        v23 = (ctu::os::signpost_interval *)v132;
        while (1)
        {
          v24 = *(_QWORD **)(a1 + 336);
          v25 = v24[3];
          if (*((char *)v22 + 55) < 0)
            std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)v22[4], v22[5]);
          else
            v123 = *(std::string *)(v22 + 4);
          v130[0] = v123.__r_.__value_.__l.__size_;
          v26 = v123.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)v130 + 7) = *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7);
          v27 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          memset(&v123, 0, sizeof(v123));
          *(_OWORD *)v127 = 0u;
          v128 = 0u;
          v129 = 0u;
          v28 = dispatch_group_create();
          v29 = v28;
          if (v28)
          {
            dispatch_retain(v28);
            dispatch_group_enter(v29);
            dispatch_release(v29);
          }
          v121 = v29;
          v30 = v23;
          v31 = operator new(0x30uLL);
          v31[1] = 0;
          v32 = v31 + 1;
          v31[2] = 0;
          *v31 = &off_24D5CFAD8;
          v31[3] = v26;
          v31[4] = v130[0];
          *(_QWORD *)((char *)v31 + 39) = *(_QWORD *)((char *)v130 + 7);
          *((_BYTE *)v31 + 47) = v27;
          v130[0] = 0;
          *(_QWORD *)((char *)v130 + 7) = 0;
          v126.n128_u64[0] = (unint64_t)(v31 + 3);
          v126.n128_u64[1] = (unint64_t)v31;
          v33 = *(NSObject **)v25;
          if (*(_QWORD *)v25)
          {
            dispatch_retain(*(dispatch_object_t *)v25);
            dispatch_group_enter(v33);
          }
          global_queue = dispatch_get_global_queue(0, 0);
          v35 = global_queue;
          if (global_queue)
            dispatch_retain(global_queue);
          *(_QWORD *)buf = v31 + 3;
          *(_QWORD *)&buf[8] = v31;
          do
            v36 = __ldxr(v32);
          while (__stxr(v36 + 1, v32));
          *(_QWORD *)&buf[16] = v33;
          if (v33)
          {
            dispatch_retain(v33);
            dispatch_group_enter(v33);
          }
          ctu::os::signpost_interval::signpost_interval(v23, v127);
          v37 = (_QWORD *)operator new();
          *(_OWORD *)v37 = *(_OWORD *)buf;
          v38 = *(_QWORD *)&buf[16];
          memset(buf, 0, sizeof(buf));
          v37[2] = v38;
          ctu::os::signpost_interval::signpost_interval(v37 + 3, v23);
          dispatch_group_notify_f(v121, v35, v37, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
          ctu::os::signpost_interval::~signpost_interval(v23);
          if (*(_QWORD *)&buf[16])
          {
            dispatch_group_leave(*(dispatch_group_t *)&buf[16]);
            if (*(_QWORD *)&buf[16])
              dispatch_release(*(dispatch_object_t *)&buf[16]);
          }
          v39 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
              break;
          }
          if (v35)
            goto LABEL_40;
LABEL_41:
          v42 = v126;
          v44 = *(char **)(v25 + 16);
          v43 = *(_QWORD *)(v25 + 24);
          if ((unint64_t)v44 >= v43)
          {
            v48 = *(char **)(v25 + 8);
            v49 = (v44 - v48) >> 4;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v118 = v126;
            v51 = v43 - (_QWORD)v48;
            if (v51 >> 3 > v50)
              v50 = v51 >> 3;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
              v52 = 0xFFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v53 = (char *)operator new(16 * v52);
            v54 = (__n128 *)&v53[16 * v49];
            v42 = v118;
            *v54 = v118;
            if (v118.n128_u64[1])
            {
              v55 = (unint64_t *)(v118.n128_u64[1] + 16);
              v23 = v30;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
              v48 = *(char **)(v25 + 8);
              v44 = *(char **)(v25 + 16);
            }
            else
            {
              v23 = v30;
            }
            v57 = &v53[16 * v52];
            v47 = v54 + 1;
            if (v44 == v48)
            {
              *(_QWORD *)(v25 + 8) = v54;
              *(_QWORD *)(v25 + 16) = v47;
              *(_QWORD *)(v25 + 24) = v57;
            }
            else
            {
              do
              {
                v58 = *((__n128 *)v44 - 1);
                v44 -= 16;
                v42 = v58;
                v54[-1] = v58;
                --v54;
                *(_QWORD *)v44 = 0;
                *((_QWORD *)v44 + 1) = 0;
              }
              while (v44 != v48);
              v48 = *(char **)(v25 + 8);
              v59 = *(char **)(v25 + 16);
              *(_QWORD *)(v25 + 8) = v54;
              *(_QWORD *)(v25 + 16) = v47;
              *(_QWORD *)(v25 + 24) = v57;
              while (v59 != v48)
              {
                v60 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
                if (v60)
                  std::__shared_weak_count::__release_weak(v60);
                v59 -= 16;
              }
            }
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(__n128 *)v44 = v126;
            if (v42.n128_u64[1])
            {
              v45 = (unint64_t *)(v42.n128_u64[1] + 16);
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            v47 = (__n128 *)(v44 + 16);
          }
          a1 = v119;
          *(_QWORD *)(v25 + 16) = v47;
          if (v33)
          {
            dispatch_group_leave(v33);
            dispatch_release(v33);
          }
          v61 = (std::__shared_weak_count *)v126.n128_u64[1];
          if (v126.n128_u64[1])
          {
            v62 = (unint64_t *)(v126.n128_u64[1] + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v42);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)v127);
          v64 = v24[13];
          v65 = v24[12];
          if (v64 == v65)
            v66 = 0;
          else
            v66 = ((v64 - v65) << 6) - 1;
          v67 = v24[16];
          v68 = v67 + v24[15];
          if (v66 == v68)
          {
            std::deque<dispatch::group_session>::__add_back_capacity(v24 + 11);
            v67 = v24[16];
            v65 = v24[12];
            v68 = v24[15] + v67;
          }
          *(_QWORD *)(*(_QWORD *)(v65 + ((v68 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v68 & 0x1FF)) = v121;
          v24[16] = v67 + 1;
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          v69 = (_QWORD *)v22[1];
          if (v69)
          {
            do
            {
              v70 = v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v70 = (_QWORD *)v22[2];
              v71 = *v70 == (_QWORD)v22;
              v22 = v70;
            }
            while (!v71);
          }
          v22 = v70;
          if (v70 == v120)
            goto LABEL_90;
        }
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (!v35)
          goto LABEL_41;
LABEL_40:
        dispatch_release(v35);
        goto LABEL_41;
      }
LABEL_90:
      v72 = *(std::__shared_weak_count **)(a1 + 72);
      if (!v72 || (v73 = *(_QWORD *)(a1 + 64), (v74 = std::__shared_weak_count::lock(v72)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v75 = v74;
      p_shared_weak_owners = (unint64_t *)&v74->__shared_weak_owners_;
      a4 = v116;
      do
        v77 = __ldxr(p_shared_weak_owners);
      while (__stxr(v77 + 1, p_shared_weak_owners));
      v78 = (unint64_t *)&v74->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v75);
      }
      v80 = *(NSObject ***)(*(_QWORD *)(a1 + 336) + 24);
      do
        v81 = __ldxr(p_shared_weak_owners);
      while (__stxr(v81 + 1, p_shared_weak_owners));
      v82 = *v80;
      v83 = *(NSObject **)(a1 + 80);
      v84 = (_QWORD *)operator new();
      *v84 = a1;
      v84[1] = v73;
      v84[2] = v75;
      *(_QWORD *)buf = 0;
      dispatch_group_notify_f(v82, v83, v84, (dispatch_function_t)dispatch::detail::group_notify<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      std::unique_ptr<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0,std::default_delete<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
      std::__shared_weak_count::__release_weak(v75);
      v9 = *(_QWORD **)(a1 + 336);
      a3 = v115;
    }
    v85 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      v86 = v9[2];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v117;
      *(_WORD *)&buf[22] = 2048;
      v132[0] = v86;
      _os_log_impl(&dword_216897000, v85, OS_LOG_TYPE_DEFAULT, "#I %s: Client %s joining the sleeping group, fActiveClients size = %lu", buf, 0x20u);
      v9 = *(_QWORD **)(a1 + 336);
    }
    v87 = v9[6];
    v88 = v9[7];
    v89 = ((v88 - v87) << 6) - 1;
    if (v88 == v87)
      v89 = 0;
    if (v89 == v9[10] + v9[9])
    {
      std::deque<dispatch::group_session>::__add_back_capacity(v9 + 5);
      v87 = v9[6];
      v88 = v9[7];
    }
    if (v88 == v87)
    {
      v91 = 0;
    }
    else
    {
      v90 = v9[10] + v9[9];
      v91 = (dispatch_group_t *)(*(_QWORD *)(v87 + ((v90 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v90 & 0x1FF));
    }
    v92 = *a4;
    *v91 = *a4;
    if (v92)
    {
      dispatch_retain(v92);
      if (*v91)
        dispatch_group_enter(*v91);
    }
    ++v9[10];
    v93 = *(_QWORD **)(a1 + 336);
    v94 = v93[16];
    if (v94)
    {
      v95 = v94 + v93[15] - 1;
      v96 = *(_QWORD *)(v93[12] + ((v95 >> 6) & 0x3FFFFFFFFFFFFF8));
      v97 = v95 & 0x1FF;
      v98 = *(NSObject **)(v96 + 8 * v97);
      if (v98)
      {
        dispatch_retain(*(dispatch_object_t *)(v96 + 8 * v97));
        dispatch_group_enter(v98);
      }
      v99 = *a4;
      *a4 = v98;
      if (v99)
      {
        dispatch_group_leave(v99);
        dispatch_release(v99);
      }
      v100 = *(_QWORD **)(a1 + 336);
      v101 = v100[16] + v100[15] - 1;
      std::__destroy_at[abi:ne180100]<dispatch::group_session,0>((dispatch_object_t *)(*(_QWORD *)(v100[12]
                                                                                                 + ((v101 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                     + 8 * (v101 & 0x1FF)));
      --v100[16];
      std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](v100 + 11, 1);
    }
    else
    {
      v102 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        v103 = __p;
        if (v125 < 0)
          v103 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v103;
        _os_log_impl(&dword_216897000, v102, OS_LOG_TYPE_DEFAULT, "#E %s: client %s has no placeholder session available, using the real session", buf, 0x16u);
      }
    }
    if (a3)
    {
      v104 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_216897000, v104, OS_LOG_TYPE_DEFAULT, "#I %s: (WDS) Entering low power", buf, 0xCu);
      }
      QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync((QMIDataCommandDriver *)a1, 1, "handleWDSEnterLowPower_sync");
      v105 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_216897000, v105, OS_LOG_TYPE_DEFAULT, "#I %s: Turn off packet indications due to entering low power", buf, 0xCu);
      }
      QMIDataCommandDriver::sendWdsSetEventReportReq_sync((QMIDataCommandDriver *)a1, 0);
      if ((capabilities::ct::supportsDataSystemDetermination(v106) & 1) != 0)
        QMIDataCommandDriver::handleDataBearer((QMIDataCommandDriver *)a1);
      else
        QMIDataCommandDriver::handleDataBearerLegacy(a1, *(_DWORD *)(a1 + 280), *(_DWORD *)(a1 + 284));
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v107 = *(std::__shared_weak_count **)(a1 + 328);
      if (v107)
      {
        v108 = std::__shared_weak_count::lock(v107);
        *(_QWORD *)&buf[8] = v108;
        if (v108)
        {
          v109 = *(_QWORD *)(a1 + 320);
          *(_QWORD *)buf = v109;
          if (v109)
          {
            v110 = *(NSObject **)(a1 + 96);
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v127 = 136315138;
              *(_QWORD *)&v127[4] = "handleWDSEnterLowPower_sync";
              _os_log_impl(&dword_216897000, v110, OS_LOG_TYPE_DEFAULT, "#I %s: Notifing observer about entering low power", v127, 0xCu);
            }
            v111 = *a4;
            group = v111;
            if (v111)
            {
              dispatch_retain(v111);
              dispatch_group_enter(v111);
            }
            (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v109 + 32))(v109, &group);
            if (group)
            {
              dispatch_group_leave(group);
              if (group)
                dispatch_release(group);
            }
LABEL_145:
            v113 = (unint64_t *)&v108->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
            goto LABEL_149;
          }
        }
      }
      else
      {
        v108 = 0;
      }
      v112 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v127 = 136315138;
        *(_QWORD *)&v127[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_216897000, v112, OS_LOG_TYPE_DEFAULT, "#N %s: BBDataCommandDriverEventHandlerObserver is empty !", v127, 0xCu);
      }
      if (v108)
        goto LABEL_145;
    }
  }
LABEL_149:
  if (SHIBYTE(v125) < 0)
    operator delete(__p[0]);
}

void sub_21694DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, dispatch_group_t a19, dispatch_group_t group,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v35 - 176);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleWDSEnterLowPower_sync(uint64_t a1, char *a2, int a3, NSObject **a4)
{
  QMIDataCommandDriver::handleWDSEnterLowPower_sync(a1 - 24, a2, a3, a4);
}

void QMIDataCommandDriver::handleWDSExitLowPower_sync(QMIDataCommandDriver *this, const char *a2, int a3)
{
  NSObject *v6;
  QMIDataCommandDriver::QMIClientsInfo *v7;
  NSObject *v8;
  capabilities::ct *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136315650;
    v11 = "handleWDSExitLowPower_sync";
    v12 = 2080;
    v13 = a2;
    v14 = 2080;
    v15 = asStringBool();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Exiting low power, client %s primary %s", (uint8_t *)&v10, 0x20u);
  }
  v7 = (QMIDataCommandDriver::QMIClientsInfo *)*((_QWORD *)this + 42);
  if (*((_QWORD *)v7 + 3))
  {
    v8 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315394;
      v11 = "handleWDSExitLowPower_sync";
      v12 = 2080;
      v13 = a2;
      _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#N %s: Client %s resetting the sleeping group", (uint8_t *)&v10, 0x16u);
      v7 = (QMIDataCommandDriver::QMIClientsInfo *)*((_QWORD *)this + 42);
    }
    QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(v7);
  }
  if (a3)
  {
    QMIDataCommandDriver::sendWdsSetEventReportReq_sync(this, 1);
    QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(this);
    if ((capabilities::ct::supportsDataSystemDetermination(v9) & 1) == 0)
      QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync(this);
    QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync(this, 0, "handleWDSExitLowPower_sync");
  }
}

void QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(QMIDataCommandDriver *this)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  void *v5;
  _QWORD v6[6];
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *aBlock;
  _OWORD v11[2];
  __int128 buf;
  void (*v13)(uint64_t, QMIServiceMsg *);
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (capabilities::ct::supports5GSlicing(this))
  {
    v2 = *((_QWORD *)this + 20);
    v3 = *((_QWORD *)this + 12);
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "sendWdsGetTdInfoReq_sync";
        _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: sending GetTdInfo::Request", (uint8_t *)&buf, 0xCu);
      }
      memset(v11, 0, sizeof(v11));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
      v6[5] = (char *)this + 144;
      v7 = QMIServiceMsg::create();
      v8 = 25000;
      v9 = 0;
      aBlock = 0;
      v6[0] = MEMORY[0x24BDAC760];
      v6[1] = 0x40000000;
      v6[2] = ___ZN20QMIDataCommandDriver24sendWdsGetTdInfoReq_syncEv_block_invoke;
      v6[3] = &__block_descriptor_tmp_169;
      v6[4] = this;
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 0x40000000;
      v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds9GetTdInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v14 = &unk_24D5D09A0;
      v15 = v6;
      v5 = _Block_copy(&buf);
      aBlock = v5;
      if (v7)
      {
        qmi::Client::send();
        v5 = aBlock;
      }
      if (v5)
        _Block_release(v5);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
    }
    else if (v4)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_21694E164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleWDSExitLowPower_sync(QMIDataCommandDriver *this, const char *a2, int a3)
{
  QMIDataCommandDriver::handleWDSExitLowPower_sync((QMIDataCommandDriver *)((char *)this - 24), a2, a3);
}

void QMIDataCommandDriver::pushVoipAppInfo(QMIDataCommandDriver *a1, int a2, char a3, char a4)
{
  const void **v8;
  const void **v9;
  const void **v10;
  char *v11;
  _DWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  const void **v21;
  char *v22;
  char *v23;
  char *v24;
  const void *v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  const void **v35;
  char *v36;
  char *v37;
  char *v38;
  const void *v39;
  const void **v40;
  const void **v41;
  char *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  const void **v51;
  char *v52;
  char *v53;
  char *v54;
  const void *v55;
  char *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  _QWORD v72[6];
  uint64_t v73;
  int v74;
  uint64_t v75;
  void *aBlock;
  void *__p[2];
  __int128 v78;
  _BYTE buf[24];
  void *v80;
  _QWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 20))
  {
    *(_OWORD *)__p = 0u;
    v78 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v8 = (const void **)__p[1];
    v9 = (const void **)v78;
    v10 = (const void **)__p[1];
    if (__p[1] != (void *)v78)
    {
      v10 = (const void **)__p[1];
      while (*((_BYTE *)*v10 + 8) != 16)
      {
        if (++v10 == (const void **)v78)
          goto LABEL_12;
      }
    }
    if (v10 == (const void **)v78)
    {
LABEL_12:
      v14 = operator new();
      v15 = v14;
      *(_BYTE *)(v14 + 8) = 16;
      *(_QWORD *)v14 = &off_24D5D0348;
      *(_DWORD *)(v14 + 12) = 0;
      v12 = (_DWORD *)(v14 + 12);
      v16 = v78;
      if ((unint64_t)v78 >= *((_QWORD *)&v78 + 1))
      {
        v17 = (uint64_t)(v78 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          goto LABEL_108;
        v18 = (uint64_t)(*((_QWORD *)&v78 + 1) - (unint64_t)__p[1]) >> 2;
        if (v18 <= v17 + 1)
          v18 = v17 + 1;
        if (*((_QWORD *)&v78 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v78 + 8, v19);
        else
          v20 = 0;
        v21 = (const void **)&v20[8 * v17];
        v22 = &v20[8 * v19];
        *v21 = (const void *)v15;
        v9 = v21 + 1;
        v24 = (char *)__p[1];
        v23 = (char *)v78;
        if ((void *)v78 != __p[1])
        {
          do
          {
            v25 = (const void *)*((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v21 = v25;
          }
          while (v23 != v24);
          v23 = (char *)__p[1];
        }
        __p[1] = v21;
        *(_QWORD *)&v78 = v9;
        *((_QWORD *)&v78 + 1) = v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v78 = v14;
        v9 = (const void **)(v16 + 8);
      }
      *(_QWORD *)&v78 = v9;
      v8 = (const void **)__p[1];
    }
    else
    {
      if (!v11)
        goto LABEL_109;
      v12 = v11 + 12;
    }
    *v12 = 1;
    while (1)
    {
      if (v8 == v9)
        goto LABEL_36;
      if (*((_BYTE *)*v8 + 8) == 17)
        break;
      ++v8;
    }
    if (v8 == v9)
    {
LABEL_36:
      v28 = operator new();
      v29 = v28;
      *(_BYTE *)(v28 + 8) = 17;
      *(_QWORD *)v28 = &off_24D5D0398;
      *(_DWORD *)(v28 + 12) = 0;
      v27 = (_DWORD *)(v28 + 12);
      v30 = v78;
      if ((unint64_t)v78 >= *((_QWORD *)&v78 + 1))
      {
        v31 = (uint64_t)(v78 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_108;
        v32 = (uint64_t)(*((_QWORD *)&v78 + 1) - (unint64_t)__p[1]) >> 2;
        if (v32 <= v31 + 1)
          v32 = v31 + 1;
        if (*((_QWORD *)&v78 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v78 + 8, v33);
        else
          v34 = 0;
        v35 = (const void **)&v34[8 * v31];
        v36 = &v34[8 * v33];
        *v35 = (const void *)v29;
        v9 = v35 + 1;
        v38 = (char *)__p[1];
        v37 = (char *)v78;
        if ((void *)v78 != __p[1])
        {
          do
          {
            v39 = (const void *)*((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v35 = v39;
          }
          while (v37 != v38);
          v37 = (char *)__p[1];
        }
        __p[1] = v35;
        *(_QWORD *)&v78 = v9;
        *((_QWORD *)&v78 + 1) = v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v78 = v28;
        v9 = (const void **)(v30 + 8);
      }
      *(_QWORD *)&v78 = v9;
    }
    else
    {
      if (!v26)
        goto LABEL_109;
      v27 = v26 + 12;
    }
    *v27 = a2;
    v40 = (const void **)__p[1];
    if (__p[1] == v9)
      goto LABEL_61;
    v41 = (const void **)__p[1];
    while (*((_BYTE *)*v41 + 8) != 18)
    {
      if (++v41 == v9)
        goto LABEL_61;
    }
    if (v41 == v9)
    {
LABEL_61:
      v44 = operator new();
      v45 = v44;
      *(_WORD *)(v44 + 8) = 18;
      *(_QWORD *)v44 = &off_24D5D03E8;
      v46 = v78;
      if ((unint64_t)v78 >= *((_QWORD *)&v78 + 1))
      {
        v47 = (uint64_t)(v78 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v47 + 1) >> 61)
          goto LABEL_108;
        v48 = (uint64_t)(*((_QWORD *)&v78 + 1) - (unint64_t)__p[1]) >> 2;
        if (v48 <= v47 + 1)
          v48 = v47 + 1;
        if (*((_QWORD *)&v78 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v78 + 8, v49);
        else
          v50 = 0;
        v51 = (const void **)&v50[8 * v47];
        v52 = &v50[8 * v49];
        *v51 = (const void *)v45;
        v9 = v51 + 1;
        v54 = (char *)__p[1];
        v53 = (char *)v78;
        if ((void *)v78 != __p[1])
        {
          do
          {
            v55 = (const void *)*((_QWORD *)v53 - 1);
            v53 -= 8;
            *--v51 = v55;
          }
          while (v53 != v54);
          v53 = (char *)__p[1];
        }
        __p[1] = v51;
        *(_QWORD *)&v78 = v9;
        *((_QWORD *)&v78 + 1) = v52;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v78 = v44;
        v9 = (const void **)(v46 + 8);
      }
      v43 = (_BYTE *)(v45 + 9);
      *(_QWORD *)&v78 = v9;
      v40 = (const void **)__p[1];
    }
    else
    {
      if (!v42)
        goto LABEL_109;
      v43 = v42 + 9;
    }
    *v43 = a3;
    while (1)
    {
      if (v40 == v9)
        goto LABEL_85;
      if (*((_BYTE *)*v40 + 8) == 19)
        break;
      ++v40;
    }
    if (v40 != v9)
    {
      if (v56)
      {
        v57 = v56 + 9;
LABEL_102:
        *v57 = a4;
        v72[5] = (char *)a1 + 144;
        v73 = QMIServiceMsg::create();
        v74 = 25000;
        v75 = 0;
        aBlock = 0;
        v72[0] = MEMORY[0x24BDAC760];
        v72[1] = 0x40000000;
        v72[2] = ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_5;
        v72[3] = &__block_descriptor_tmp_126_0;
        v72[4] = a1;
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds11VoIPAppInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v80 = &unk_24D5D0468;
        v81 = v72;
        v71 = _Block_copy(buf);
        aBlock = v71;
        if (v73)
        {
          qmi::Client::send();
          v71 = aBlock;
        }
        if (v71)
          _Block_release(v71);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
LABEL_109:
      __cxa_bad_cast();
    }
LABEL_85:
    v58 = operator new();
    v59 = v58;
    *(_WORD *)(v58 + 8) = 19;
    *(_QWORD *)v58 = &off_24D5D0438;
    v60 = v78;
    if ((unint64_t)v78 < *((_QWORD *)&v78 + 1))
    {
      *(_QWORD *)v78 = v58;
      v61 = (_QWORD *)(v60 + 8);
LABEL_101:
      v57 = (_BYTE *)(v59 + 9);
      *(_QWORD *)&v78 = v61;
      goto LABEL_102;
    }
    v62 = (uint64_t)(v78 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v62 + 1) >> 61))
    {
      v63 = (uint64_t)(*((_QWORD *)&v78 + 1) - (unint64_t)__p[1]) >> 2;
      if (v63 <= v62 + 1)
        v63 = v62 + 1;
      if (*((_QWORD *)&v78 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v78 + 8, v64);
      else
        v65 = 0;
      v66 = (uint64_t *)&v65[8 * v62];
      v67 = &v65[8 * v64];
      *v66 = v59;
      v61 = v66 + 1;
      v69 = (char *)__p[1];
      v68 = (char *)v78;
      if ((void *)v78 != __p[1])
      {
        do
        {
          v70 = *((_QWORD *)v68 - 1);
          v68 -= 8;
          *--v66 = v70;
        }
        while (v68 != v69);
        v68 = (char *)__p[1];
      }
      __p[1] = v66;
      *(_QWORD *)&v78 = v61;
      *((_QWORD *)&v78 + 1) = v67;
      if (v68)
        operator delete(v68);
      goto LABEL_101;
    }
LABEL_108:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  v13 = *((_QWORD *)a1 + 12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = QMIDataCommandDriver::getName(a1);
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "pushVoipAppInfo";
    _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#E DATA.%s: %s: WDS Client is not ready", buf, 0x16u);
  }
}

void sub_21694E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_5(uint64_t a1, uint64_t a2)
{
  QMIDataCommandDriver *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  const char *Name;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(QMIDataCommandDriver **)(a1 + 32);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)v2 + 5);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          if (*(_DWORD *)(a2 + 4))
          {
            v8 = *((_QWORD *)v2 + 12);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              Name = QMIDataCommandDriver::getName(v2);
              v10 = *(_DWORD *)(a2 + 4);
              *(_DWORD *)buf = 136315906;
              v14 = Name;
              v15 = 2080;
              v16 = "pushVoipAppInfo_block_invoke_5";
              v17 = 1024;
              v18 = v10;
              v19 = 2080;
              v20 = qmi::asString();
              _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#E DATA.%s: %s: Failed to send VoipAppInfo: 0x%x (%s)", buf, 0x26u);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::pushVoipAppInfo(uint64_t a1, int a2, char a3, char a4)
{
  QMIDataCommandDriver::pushVoipAppInfo((QMIDataCommandDriver *)(a1 - 32), a2, a3, a4);
}

uint64_t QMIDataCommandDriver::blockedCellularTrafficHint_sync(QMIDataCommandDriver *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 840))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_21694EA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::blockedCellularTrafficHint_sync(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::blockedCellularTrafficHint_sync((QMIDataCommandDriver *)((char *)this - 24));
}

uint64_t QMIDataCommandDriver::getRadioTransmitType(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  capabilities::ct *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
    return 0;
  v5 = (capabilities::ct *)std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = (std::__shared_weak_count *)v5;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if (!capabilities::ct::supportsDataSystemDetermination(v5))
    {
      switch(a2)
      {
        case 1:
          if (*(_DWORD *)(a1 + 284) != 2)
            goto LABEL_25;
          v12 = *(_DWORD *)(a1 + 280);
          if ((v12 & 0x20D) != 0)
            v13 = 150;
          else
            v13 = 0;
          if ((v12 & 0x12) != 0)
            v8 = 151;
          else
            v8 = v13;
          break;
        case 2:
        case 3:
          if (*(_DWORD *)(a1 + 284) != 1)
            goto LABEL_25;
          v10 = *(_DWORD *)(a1 + 280);
          if ((v10 & 0xE) != 0)
            v11 = 150;
          else
            v11 = 0;
          if ((v10 & 1) != 0)
            v8 = 151;
          else
            v8 = v11;
          break;
        case 4:
          v14 = *(_DWORD *)(a1 + 284);
LABEL_28:
          v9 = v14 == 2;
LABEL_29:
          v15 = 150;
LABEL_30:
          if (v9)
            v8 = v15;
          else
            v8 = 0;
          break;
        case 5:
        case 6:
          v8 = 150;
          break;
        default:
          goto LABEL_25;
      }
      goto LABEL_33;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 424))(v7) & 1) != 0)
    {
      v8 = 0;
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 512))(v7))
      {
        case 1u:
        case 2u:
          v9 = a2 == 1;
          goto LABEL_40;
        case 3u:
        case 4u:
        case 5u:
          v9 = a2 == 1;
          goto LABEL_29;
        case 0xAu:
          v9 = (a2 & 0xFFFFFFFE) == 2;
LABEL_40:
          v15 = 151;
          goto LABEL_30;
        case 0xBu:
        case 0xCu:
        case 0xFu:
          v14 = a2 & 0xFFFFFFFE;
          goto LABEL_28;
        case 0xDu:
          v9 = a2 == 3;
          goto LABEL_29;
        case 0xEu:
          v9 = (a2 & 0xFFFFFFFE) == 4;
          goto LABEL_29;
        case 0x10u:
          v9 = a2 == 5;
          goto LABEL_29;
        case 0x11u:
          v9 = a2 == 6;
          goto LABEL_29;
        default:
          goto LABEL_33;
      }
    }
  }
LABEL_25:
  v8 = 0;
LABEL_33:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_21694EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::getRadioTransmitType(uint64_t a1, int a2)
{
  return QMIDataCommandDriver::getRadioTransmitType(a1 - 32, a2);
}

void QMIDataCommandDriver::handleDataModeChanged_sync(PersonalitySpecificImpl *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 41);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)a1 + 40);
      if (v5)
      {
        v6 = PersonalitySpecificImpl::simSlot(a1);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v6))
        {
          QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(a1);
          v7 = PersonalitySpecificImpl::simSlot(a1);
          v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v7);
          (*(void (**)(PersonalitySpecificImpl *, uint64_t))(*(_QWORD *)a1 + 400))(a1, v8);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_21694ED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleDataModeChanged_sync(uint64_t a1)
{
  QMIDataCommandDriver::handleDataModeChanged_sync((PersonalitySpecificImpl *)(a1 - 32));
}

void QMIDataCommandDriver::handleNRSliceConfigFlagChange_sync(QMIDataCommandDriver *this, int a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  const void **v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[5];
  char v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *aBlock;
  void *__p[2];
  __int128 v34;
  _BYTE buf[24];
  void *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 20);
  v5 = *((_QWORD *)this + 12);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "handleNRSliceConfigFlagChange_sync";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = asStringBool();
      *(_WORD *)&buf[22] = 2080;
      v36 = (void *)asStringBool();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfig: %s (current value %s)", buf, 0x20u);
    }
    if (!*((_BYTE *)this + 489) || *((unsigned __int8 *)this + 488) != a2)
    {
      *(_OWORD *)__p = 0u;
      v34 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      v7 = (const void **)__p[1];
      if (__p[1] != (void *)v34)
      {
        while (*((_BYTE *)*v7 + 8) != 1)
        {
          if (++v7 == (const void **)v34)
            goto LABEL_15;
        }
      }
      if (v7 == (const void **)v34)
      {
LABEL_15:
        v10 = operator new();
        v11 = v10;
        *(_WORD *)(v10 + 8) = 1;
        *(_QWORD *)v10 = &off_24D5D04B0;
        v12 = v34;
        if ((unint64_t)v34 >= *((_QWORD *)&v34 + 1))
        {
          v14 = (uint64_t)(v34 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v15 = (uint64_t)(*((_QWORD *)&v34 + 1) - (unint64_t)__p[1]) >> 2;
          if (v15 <= v14 + 1)
            v15 = v14 + 1;
          if (*((_QWORD *)&v34 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v34 + 8, v16);
          else
            v17 = 0;
          v18 = (uint64_t *)&v17[8 * v14];
          v19 = &v17[8 * v16];
          *v18 = v11;
          v13 = v18 + 1;
          v21 = (char *)__p[1];
          v20 = (char *)v34;
          if ((void *)v34 != __p[1])
          {
            do
            {
              v22 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *--v18 = v22;
            }
            while (v20 != v21);
            v20 = (char *)__p[1];
          }
          __p[1] = v18;
          *(_QWORD *)&v34 = v13;
          *((_QWORD *)&v34 + 1) = v19;
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v34 = v10;
          v13 = (_QWORD *)(v12 + 8);
        }
        v9 = (_BYTE *)(v11 + 9);
        *(_QWORD *)&v34 = v13;
      }
      else
      {
        if (!v8)
          __cxa_bad_cast();
        v9 = v8 + 9;
      }
      *v9 = a2;
      v23 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = asStringBool();
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "handleNRSliceConfigFlagChange_sync";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v24;
        _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured: fSliceFlag updated tentatively to %s", buf, 0x16u);
      }
      *((_WORD *)this + 244) = a2 | 0x100;
      v28 = (char *)this + 144;
      v29 = QMIServiceMsg::create();
      v30 = 25000;
      v31 = 0;
      aBlock = 0;
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 0x40000000;
      v26[2] = ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke_129;
      v26[3] = &__block_descriptor_tmp_130_1;
      v26[4] = this;
      v27 = a2;
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
      v36 = &unk_24D5CFD50;
      v37 = v26;
      v25 = _Block_copy(buf);
      aBlock = v25;
      if (v29)
      {
        qmi::Client::send();
        v25 = aBlock;
      }
      if (v25)
        _Block_release(v25);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    }
  }
  else if (v6)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "handleNRSliceConfigFlagChange_sync";
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
  }
}

void sub_21694F170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke_129(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  _WORD v16[17];

  *(_QWORD *)&v16[13] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 40);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *(NSObject **)(v2 + 96);
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136315650;
            v14 = "handleNRSliceConfigFlagChange_sync_block_invoke";
            v15 = 1024;
            *(_DWORD *)v16 = v8;
            v16[2] = 2080;
            *(_QWORD *)&v16[3] = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Baseband failed to set NRSliceConfigured: 0x%x (%s), fSliceFlag unknown", buf, 0x1Cu);
          }
          *(_WORD *)(v2 + 488) = 0;
        }
        else if (v10)
        {
          *(_DWORD *)buf = 136315394;
          v14 = "handleNRSliceConfigFlagChange_sync_block_invoke";
          v15 = 2080;
          *(_QWORD *)v16 = asStringBool();
          _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured updated successfully: %s", buf, 0x16u);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21694F354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::handleNRSliceConfigFlagChange_sync(QMIDataCommandDriver *this, int a2)
{
  QMIDataCommandDriver::handleNRSliceConfigFlagChange_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void QMIDataCommandDriver::dumpDataCommandDriverState(QMIDataCommandDriver *this)
{
  NSObject *v2;
  uint64_t Name;
  const char *v4;
  int v5;
  int v6;
  NSObject *v7;
  __int128 *p_buf;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  TrafficDescriptor *v12;
  TrafficDescriptor *v13;
  NSObject *v14;
  NSObject *v15;
  _BYTE *v16;
  NSObject *v17;
  uint64_t v18;
  _BYTE v19[12];
  char v20;
  uint8_t v21[4];
  _BYTE *v22;
  __int128 buf;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: -------------------------- DATA.QMIDriver --------------------------", (uint8_t *)&buf, 2u);
    v2 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_QWORD *)this + 20))
    {
      Name = qmi::Client::getName((QMIDataCommandDriver *)((char *)this + 144));
      if (*(char *)(Name + 23) >= 0)
        v4 = (const char *)Name;
      else
        v4 = *(const char **)Name;
    }
    else
    {
      v4 = "null";
    }
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfWDSClient=%s", (uint8_t *)&buf, 0xCu);
    v2 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_DWORD *)this + 70);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v5;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfLegacyPreMav16RatMask=%d", (uint8_t *)&buf, 8u);
    v2 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_DWORD *)this + 71);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v6;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfLegacyPreMav16CurrentNetwork=%d", (uint8_t *)&buf, 8u);
  }
  buf = 0uLL;
  v24 = 0;
  (*(void (**)(__int128 *__return_ptr, QMIDataCommandDriver *))(*(_QWORD *)this + 80))(&buf, this);
  v7 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    p_buf = &buf;
    if (v24 < 0)
      p_buf = (__int128 *)buf;
    *(_DWORD *)v19 = 136315138;
    *(_QWORD *)&v19[4] = p_buf;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfDeviceNAI=%s", v19, 0xCu);
    v7 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfCurrentDataSystem: {", v19, 2u);
    v7 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = **((unsigned int **)this + 36);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)&v19[4] = v9;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfCurrentNw=0x%lx", v19, 0xCu);
    v7 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned int *)(*((_QWORD *)this + 36) + 4);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)&v19[4] = v10;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfRat=0x%lx", v19, 0xCu);
    v7 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 36) + 8);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)&v19[4] = v11;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfSoMask=0x%llx", v19, 0xCu);
  }
  v12 = (TrafficDescriptor *)*((_QWORD *)this + 47);
  v13 = (TrafficDescriptor *)*((_QWORD *)this + 48);
  if (v12 != v13)
  {
    v14 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfTrafficInfo:", v19, 2u);
      v12 = (TrafficDescriptor *)*((_QWORD *)this + 47);
      v13 = (TrafficDescriptor *)*((_QWORD *)this + 48);
    }
    for (; v12 != v13; v12 = (TrafficDescriptor *)((char *)v12 + 304))
    {
      v15 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        TrafficDescriptor::toString(v12);
        v16 = v20 >= 0 ? v19 : *(_BYTE **)v19;
        *(_DWORD *)v21 = 136446210;
        v22 = v16;
        _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\ttd=%{public}s", v21, 0xCu);
        if (v20 < 0)
          operator delete(*(void **)v19);
      }
    }
  }
  v17 = *((_QWORD *)this + 12);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = asStringBool();
    *(_DWORD *)v19 = 136315138;
    *(_QWORD *)&v19[4] = v18;
    _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I DATA:: \fSliceFlag=%s", v19, 0xCu);
    v17 = *((_QWORD *)this + 12);
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t}", v19, 2u);
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)buf);
}

void sub_21694F844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'QMIDataCommandDriver::dumpDataCommandDriverState(QMIDataCommandDriver *this)
{
  QMIDataCommandDriver::dumpDataCommandDriverState((QMIDataCommandDriver *)((char *)this - 32));
}

void QMIDataCommandDriver::sendWdsCdmaNai_sync(uint64_t a1, std::string::value_type *a2, void **a3, const std::string *a4)
{
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  std::string::value_type *v11;
  void *v12;
  const std::string *v13;
  const void **v14;
  char *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  std::string::value_type *v31;
  std::string::size_type v32;
  const void **v33;
  char *v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  std::string::value_type *v50;
  std::string::size_type v51;
  const void **v52;
  char *v53;
  BOOL *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  _QWORD v69[6];
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *aBlock;
  void *__p[2];
  __int128 v75;
  _BYTE buf[24];
  void *v77;
  _QWORD v78[4];

  v78[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(NSObject **)(a1 + 96);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      if (a2[23] >= 0)
        v11 = a2;
      else
        v11 = *(std::string::value_type **)a2;
      if (*((char *)a3 + 23) >= 0)
        v12 = a3;
      else
        v12 = *a3;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = a4;
      else
        v13 = (const std::string *)a4->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "sendWdsCdmaNai_sync";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2080;
      v77 = v12;
      LOWORD(v78[0]) = 2080;
      *(_QWORD *)((char *)v78 + 2) = v13;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA NAI push ('%s', '%s', '%s')", buf, 0x2Au);
    }
    *(_OWORD *)__p = 0u;
    v75 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v14 = (const void **)__p[1];
    if (__p[1] != (void *)v75)
    {
      while (*((_BYTE *)*v14 + 8) != 16)
      {
        if (++v14 == (const void **)v75)
          goto LABEL_22;
      }
    }
    if (v14 == (const void **)v75)
    {
LABEL_22:
      v17 = operator new();
      v18 = v17;
      *(_BYTE *)(v17 + 8) = 16;
      *(_QWORD *)(v17 + 16) = 0;
      v16 = (std::string *)(v17 + 16);
      *(_QWORD *)v17 = off_24D5D0500;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      v19 = v75;
      if ((unint64_t)v75 >= *((_QWORD *)&v75 + 1))
      {
        v21 = (uint64_t)(v75 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_106;
        v22 = (uint64_t)(*((_QWORD *)&v75 + 1) - (unint64_t)__p[1]) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (*((_QWORD *)&v75 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v75 + 8, v23);
        else
          v24 = 0;
        v25 = (uint64_t *)&v24[8 * v21];
        v26 = &v24[8 * v23];
        *v25 = v18;
        v20 = v25 + 1;
        v28 = (char *)__p[1];
        v27 = (char *)v75;
        if ((void *)v75 != __p[1])
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v25 = v29;
          }
          while (v27 != v28);
          v27 = (char *)__p[1];
        }
        __p[1] = v25;
        *(_QWORD *)&v75 = v20;
        *((_QWORD *)&v75 + 1) = v26;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v75 = v17;
        v20 = (_QWORD *)(v19 + 8);
      }
      *(_QWORD *)&v75 = v20;
    }
    else
    {
      if (!v15)
        goto LABEL_105;
      v16 = (std::string *)(v15 + 16);
    }
    v30 = a2[23];
    if (v30 >= 0)
      v31 = a2;
    else
      v31 = *(std::string::value_type **)a2;
    if (v30 >= 0)
      v32 = a2[23];
    else
      v32 = *((_QWORD *)a2 + 1);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v16, v31, &v31[v32], v32);
    v33 = (const void **)__p[1];
    if (__p[1] != (void *)v75)
    {
      while (*((_BYTE *)*v33 + 8) != 17)
      {
        if (++v33 == (const void **)v75)
          goto LABEL_52;
      }
    }
    if (v33 == (const void **)v75)
    {
LABEL_52:
      v36 = operator new();
      v37 = v36;
      *(_BYTE *)(v36 + 8) = 17;
      *(_QWORD *)(v36 + 16) = 0;
      v35 = (std::string *)(v36 + 16);
      *(_QWORD *)v36 = off_24D5D0550;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      v38 = v75;
      if ((unint64_t)v75 >= *((_QWORD *)&v75 + 1))
      {
        v40 = (uint64_t)(v75 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v40 + 1) >> 61)
          goto LABEL_106;
        v41 = (uint64_t)(*((_QWORD *)&v75 + 1) - (unint64_t)__p[1]) >> 2;
        if (v41 <= v40 + 1)
          v41 = v40 + 1;
        if (*((_QWORD *)&v75 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v75 + 8, v42);
        else
          v43 = 0;
        v44 = (uint64_t *)&v43[8 * v40];
        v45 = &v43[8 * v42];
        *v44 = v37;
        v39 = v44 + 1;
        v47 = (char *)__p[1];
        v46 = (char *)v75;
        if ((void *)v75 != __p[1])
        {
          do
          {
            v48 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *--v44 = v48;
          }
          while (v46 != v47);
          v46 = (char *)__p[1];
        }
        __p[1] = v44;
        *(_QWORD *)&v75 = v39;
        *((_QWORD *)&v75 + 1) = v45;
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_QWORD *)v75 = v36;
        v39 = (_QWORD *)(v38 + 8);
      }
      *(_QWORD *)&v75 = v39;
    }
    else
    {
      if (!v34)
        goto LABEL_105;
      v35 = (std::string *)(v34 + 16);
    }
    v49 = *((char *)a3 + 23);
    if (v49 >= 0)
      v50 = (std::string::value_type *)a3;
    else
      v50 = (std::string::value_type *)*a3;
    if (v49 >= 0)
      v51 = *((unsigned __int8 *)a3 + 23);
    else
      v51 = (std::string::size_type)a3[1];
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v35, v50, &v50[v51], v51);
    v52 = (const void **)__p[1];
    if (__p[1] != (void *)v75)
    {
      while (*((_BYTE *)*v52 + 8) != 18)
      {
        if (++v52 == (const void **)v75)
          goto LABEL_82;
      }
    }
    if (v52 != (const void **)v75)
    {
      if (v53)
      {
        v54 = (BOOL *)(v53 + 9);
LABEL_99:
        *v54 = std::string::compare(a4, "CHAP") == 0;
        v69[5] = a1 + 144;
        v70 = QMIServiceMsg::create();
        v71 = 25000;
        v72 = 0;
        aBlock = 0;
        v69[0] = MEMORY[0x24BDAC760];
        v69[1] = 0x40000000;
        v69[2] = ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_4;
        v69[3] = &__block_descriptor_tmp_138;
        v69[4] = a1;
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
        v77 = &unk_24D5CFD50;
        v78[0] = v69;
        v68 = _Block_copy(buf);
        aBlock = v68;
        if (v70)
        {
          qmi::Client::send();
          v68 = aBlock;
        }
        if (v68)
          _Block_release(v68);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
LABEL_105:
      __cxa_bad_cast();
    }
LABEL_82:
    v55 = operator new();
    v56 = v55;
    *(_WORD *)(v55 + 8) = 18;
    *(_QWORD *)v55 = &off_24D5D05A0;
    v57 = v75;
    if ((unint64_t)v75 < *((_QWORD *)&v75 + 1))
    {
      *(_QWORD *)v75 = v55;
      v58 = (_QWORD *)(v57 + 8);
LABEL_98:
      v54 = (BOOL *)(v56 + 9);
      *(_QWORD *)&v75 = v58;
      goto LABEL_99;
    }
    v59 = (uint64_t)(v75 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v59 + 1) >> 61))
    {
      v60 = (uint64_t)(*((_QWORD *)&v75 + 1) - (unint64_t)__p[1]) >> 2;
      if (v60 <= v59 + 1)
        v60 = v59 + 1;
      if (*((_QWORD *)&v75 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v75 + 8, v61);
      else
        v62 = 0;
      v63 = (uint64_t *)&v62[8 * v59];
      v64 = &v62[8 * v61];
      *v63 = v56;
      v58 = v63 + 1;
      v66 = (char *)__p[1];
      v65 = (char *)v75;
      if ((void *)v75 != __p[1])
      {
        do
        {
          v67 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *--v63 = v67;
        }
        while (v65 != v66);
        v65 = (char *)__p[1];
      }
      __p[1] = v63;
      *(_QWORD *)&v75 = v58;
      *((_QWORD *)&v75 + 1) = v64;
      if (v65)
        operator delete(v65);
      goto LABEL_98;
    }
LABEL_106:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v10)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "sendWdsCdmaNai_sync";
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
  }
}

void sub_21694FEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0)
        goto LABEL_11;
      v8 = *(_DWORD *)(a2 + 4);
      v9 = v2[12];
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (!v10)
          goto LABEL_11;
        *(_DWORD *)buf = 136315650;
        v17 = "sendWdsCdmaNai_sync_block_invoke_4";
        v18 = 1024;
        v19 = v8;
        v20 = 2080;
        v21 = qmi::asString();
        v11 = "#I %s: Baseband failed to set NAI: 0x%x (%s)";
        v12 = v9;
        v13 = 28;
      }
      else
      {
        if (!v10)
          goto LABEL_11;
        *(_DWORD *)buf = 136315138;
        v17 = "sendWdsCdmaNai_sync_block_invoke";
        v11 = "#I %s: CDMA NAI updated successfully: OK";
        v12 = v9;
        v13 = 12;
      }
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
LABEL_11:
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216950080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::QosRegisterIndex(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t **v13;
  NSObject *v14;
  unsigned int v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = a4;
  v8 = *(_QWORD *)(a1 + 112);
  if (!v8)
    goto LABEL_12;
  v9 = a1 + 112;
  do
  {
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v10 >= a4;
    if (v10 >= a4)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v11)
      v9 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 112 && *(_DWORD *)(v9 + 32) <= a4)
  {
    v14 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "QosRegisterIndex";
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: double registration", buf, 0xCu);
    }
  }
  else
  {
LABEL_12:
    v13 = (uint64_t **)(a1 + 104);
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), a4, &v15)+ 11) = a3;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)+ 12) = 0;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)+ 13) = a5;
    std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)[7] = a2;
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::QosRegisterIndex(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  QMIDataCommandDriver::QosRegisterIndex(a1 - 24, a2, a3, a4, a5);
}

void QMIDataCommandDriver::releaseQosIndex(_QWORD *a1, uint64_t **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = a1[5];
      if (v7)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 600))(v7, *((unsigned int *)*a2 + 8));
        v8 = *a2;
        v9 = (uint64_t *)v8[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v8;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        if ((uint64_t *)a1[13] == v8)
          a1[13] = v10;
        v13 = (uint64_t *)a1[14];
        --a1[15];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v8);
        operator delete(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216950300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::postQosStatus(QMIDataCommandDriver *this, unsigned int a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *((_QWORD *)this + 5);
      if (v9)
      {
        v10 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if (a3 - 1 > 2)
            v11 = "BB_QOS_STATUS_Unknown";
          else
            v11 = off_24D5D1190[(char)(a3 - 1)];
          *(_DWORD *)buf = 136315906;
          v15 = "postQosStatus";
          v16 = 1024;
          v17 = a2;
          v18 = 2080;
          v19 = v11;
          v20 = 1024;
          v21 = a3;
          _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: qos status ----- { flowIndex=%d status=%s(0x%x) }", buf, 0x22u);
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 624))(v9, 183, a2, a3);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216950484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::releaseQos(QMIDataCommandDriver *this, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  NSObject *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t *v20[3];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    v5 = (uint64_t *)std::__shared_weak_count::lock(v3);
    v20[2] = v5;
    if (v5)
    {
      v6 = (std::__shared_weak_count *)v5;
      v7 = (uint64_t *)*((_QWORD *)this + 5);
      v20[1] = v7;
      if (v7)
      {
        v8 = (char *)*((_QWORD *)this + 14);
        if (!v8)
          goto LABEL_15;
        v9 = (uint64_t *)((char *)this + 112);
        do
        {
          v10 = *((_DWORD *)v8 + 8);
          v11 = v10 >= a2;
          if (v10 >= a2)
            v12 = (char **)v8;
          else
            v12 = (char **)(v8 + 8);
          if (v11)
            v9 = (uint64_t *)v8;
          v8 = *v12;
        }
        while (*v12);
        if (v9 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v9 + 8) <= a2)
        {
          v20[0] = v9;
          switch(*((_DWORD *)v9 + 12))
          {
            case 0:
              v17 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                v22 = "releaseQos";
                v23 = 1024;
                v24 = a2;
                _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d for which we did not receive flow id yet", buf, 0x12u);
              }
              *((_DWORD *)v9 + 12) = 1;
              break;
            case 1:
              v13 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                v22 = "releaseQos";
                v23 = 1024;
                v24 = a2;
                v14 = "#I %s: ERR: Flow %d is already release";
                goto LABEL_17;
              }
              break;
            case 2:
              v18 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                v22 = "releaseQos";
                v23 = 1024;
                v24 = a2;
                _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d that failed before", buf, 0x12u);
              }
              goto LABEL_34;
            case 3:
              v19 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                v22 = "releaseQos";
                v23 = 1024;
                v24 = a2;
                _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d", buf, 0x12u);
              }
              (*(void (**)(uint64_t *))(*v7 + 592))(v7);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9[7] + 16))(v9[7], *((unsigned int *)v9 + 11), *((unsigned int *)v9 + 10));
LABEL_34:
              QMIDataCommandDriver::releaseQosIndex(this, v20);
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_15:
          v13 = *((_QWORD *)this + 12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v22 = "releaseQos";
            v23 = 1024;
            v24 = a2;
            v14 = "#I %s: Flow %d not found";
LABEL_17:
            _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0x12u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2169507B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataCommandDriver::releaseQos(QMIDataCommandDriver *this, unsigned int a2)
{
  QMIDataCommandDriver::releaseQos((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void QMIDataCommandDriver::freePduSessionId(NSObject **this, int a2)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  _QWORD v9[6];
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *aBlock;
  _OWORD v14[2];
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t, QMIServiceMsg *);
  void *v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!capabilities::ct::supports5G((capabilities::ct *)this))
    return;
  if (!this[20])
  {
    v6 = this[12];
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v7 = "invalid fWDSClient!";
    v8 = v6;
    goto LABEL_16;
  }
  v4 = this[12];
  if (a2 < 0)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v7 = "invalid pduSessionId to be freed";
    v8 = v4;
LABEL_16:
    _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, v7, buf, 2u);
    return;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I sending wds::freePduSessionId::Request %d", buf, 8u);
  }
  memset(v14, 0, sizeof(v14));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::PduSessionId>(v14, 1) = a2;
  v9[5] = this + 18;
  v10 = QMIServiceMsg::create();
  v11 = 25000;
  v12 = 0;
  aBlock = 0;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_141;
  v9[4] = this;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v16 = 0x40000000;
  v17 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16FreePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v18 = &unk_24D5D0620;
  v19 = v9;
  v5 = _Block_copy(buf);
  aBlock = v5;
  if (v10)
  {
    qmi::Client::send();
    v5 = aBlock;
  }
  if (v5)
    _Block_release(v5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_2169509C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v8[0] = 67109378;
    v8[1] = v2;
    v9 = 2080;
    v10 = qmi::asString();
    v5 = "#I Error Response to FreePduSessionId: %d(%s)";
    v6 = v3;
    v7 = 18;
  }
  else
  {
    if (!v4)
      return;
    LOWORD(v8[0]) = 0;
    v5 = "#I Successful Response to FreePduSessionId";
    v6 = v3;
    v7 = 2;
  }
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void `non-virtual thunk to'QMIDataCommandDriver::freePduSessionId(NSObject **this, int a2)
{
  QMIDataCommandDriver::freePduSessionId(this - 4, a2);
}

void QMIDataCommandDriver::notifyBBofDataService(uint64_t a1, int a2, int a3)
{
  const void **v6;
  const void **v7;
  char *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  const void **v18;
  char *v19;
  char *v20;
  char *v21;
  const void *v22;
  uint64_t v23;
  const void **i;
  char *v25;
  BOOL *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  _QWORD v41[6];
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *aBlock;
  void *__p[2];
  __int128 v47;
  uint8_t buf[8];
  uint64_t v49;
  void (*v50)(uint64_t, QMIServiceMsg *);
  void *v51;
  _QWORD *v52;

  if (*(_QWORD *)(a1 + 160))
  {
    *(_OWORD *)__p = 0u;
    v47 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v6 = (const void **)__p[1];
    v7 = (const void **)v47;
    if (__p[1] != (void *)v47)
    {
      while (*((_BYTE *)*v6 + 8) != 16)
      {
        if (++v6 == (const void **)v47)
          goto LABEL_11;
      }
    }
    if (v6 == (const void **)v47)
    {
LABEL_11:
      v11 = operator new();
      v12 = v11;
      *(_BYTE *)(v11 + 8) = 16;
      *(_QWORD *)v11 = &off_24D5D0668;
      *(_QWORD *)(v11 + 16) = 0;
      v9 = (uint64_t *)(v11 + 16);
      v13 = v47;
      if ((unint64_t)v47 >= *((_QWORD *)&v47 + 1))
      {
        v14 = (uint64_t)(v47 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v47 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v47 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v47 + 8, v16);
        else
          v17 = 0;
        v18 = (const void **)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = (const void *)v12;
        v7 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v47;
        if ((void *)v47 != __p[1])
        {
          do
          {
            v22 = (const void *)*((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v47 = v7;
        *((_QWORD *)&v47 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v47 = v11;
        v7 = (const void **)(v13 + 8);
      }
      *(_QWORD *)&v47 = v7;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = (uint64_t *)(v8 + 16);
    }
    v23 = 1;
    if (a2 > 16)
    {
      if (a2 == 17)
      {
        v23 = 2;
      }
      else if (a2 != 27)
      {
        if (a2 == 20)
          v23 = 8;
        else
LABEL_37:
          v23 = 0;
      }
    }
    else
    {
      switch(a2)
      {
        case 0:
        case 4:
          break;
        case 1:
          v23 = 16;
          break;
        case 2:
          v23 = 4;
          break;
        default:
          goto LABEL_37;
      }
    }
    *v9 = v23;
    for (i = (const void **)__p[1]; i != v7; ++i)
    {
      if (*((_BYTE *)*i + 8) == 17)
      {
        if (i != v7)
        {
          if (!v25)
            __cxa_bad_cast();
          v26 = (BOOL *)(v25 + 9);
          goto LABEL_62;
        }
        break;
      }
    }
    v27 = operator new();
    v28 = v27;
    *(_WORD *)(v27 + 8) = 17;
    *(_QWORD *)v27 = &off_24D5D06B8;
    v29 = v47;
    if ((unint64_t)v47 >= *((_QWORD *)&v47 + 1))
    {
      v31 = (uint64_t)(v47 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v32 = (uint64_t)(*((_QWORD *)&v47 + 1) - (unint64_t)__p[1]) >> 2;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if (*((_QWORD *)&v47 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v47 + 8, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v31];
      v36 = &v34[8 * v33];
      *v35 = v28;
      v30 = v35 + 1;
      v38 = (char *)__p[1];
      v37 = (char *)v47;
      if ((void *)v47 != __p[1])
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v35 = v39;
        }
        while (v37 != v38);
        v37 = (char *)__p[1];
      }
      __p[1] = v35;
      *(_QWORD *)&v47 = v30;
      *((_QWORD *)&v47 + 1) = v36;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_QWORD *)v47 = v27;
      v30 = (_QWORD *)(v29 + 8);
    }
    v26 = (BOOL *)(v28 + 9);
    *(_QWORD *)&v47 = v30;
LABEL_62:
    *v26 = a3 != 5;
    v41[5] = a1 + 144;
    v42 = QMIServiceMsg::create();
    v43 = 25000;
    v44 = 0;
    aBlock = 0;
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 0x40000000;
    v41[2] = ___ZNK20QMIDataCommandDriver21notifyBBofDataServiceE18DataConnectionType19DataConnectionState_block_invoke;
    v41[3] = &__block_descriptor_tmp_142_0;
    v41[4] = a1;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v49 = 0x40000000;
    v50 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17NotifyDataService8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v51 = &unk_24D5D06E8;
    v52 = v41;
    v40 = _Block_copy(buf);
    aBlock = v40;
    if (v42)
    {
      qmi::Client::send();
      v40 = aBlock;
    }
    if (v40)
      _Block_release(v40);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    v10 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_216897000, v10, OS_LOG_TYPE_ERROR, "invalid fWDSClient!", buf, 2u);
    }
  }
}

void sub_216950F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataCommandDriver21notifyBBofDataServiceE18DataConnectionType19DataConnectionState_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Error Response to NotifyDataService: %d(%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::notifyBBofDataService(uint64_t a1, int a2, int a3)
{
  QMIDataCommandDriver::notifyBBofDataService(a1 - 32, a2, a3);
}

void QMIDataCommandDriver::allocatePduSessionId(capabilities::ct *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *aBlock;
  _OWORD v15[2];
  uint8_t buf[8];
  uint64_t v17;
  void (*v18)(uint64_t, QMIServiceMsg *);
  void *v19;
  _QWORD *v20;
  _QWORD v21[5];
  _BYTE v22[24];
  _BYTE *v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((capabilities::ct::supports5G(a1) & 1) != 0)
  {
    v6 = *((_QWORD *)a1 + 12);
    if (*((_QWORD *)a1 + 20))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I sending wds::AllocatePduSessionId::Request", buf, 2u);
      }
      memset(v15, 0, sizeof(v15));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
      v13 = QMIServiceMsg::create();
      v7 = MEMORY[0x24BDAC760];
      v21[0] = MEMORY[0x24BDAC760];
      v21[1] = 1174405120;
      v21[2] = ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke;
      v21[3] = &__block_descriptor_tmp_146_0;
      v21[4] = a1;
      v8 = v22;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
      v24 = a3;
      *(_QWORD *)buf = v7;
      v17 = 0x40000000;
      v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds20AllocatePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v19 = &unk_24D5D0710;
      v20 = v21;
      v9 = _Block_copy(buf);
      aBlock = v9;
      if (v13)
      {
        qmi::Client::send();
        v9 = aBlock;
      }
      if (v9)
        _Block_release(v9);
      if (v23 == v22)
      {
        v10 = 4;
      }
      else
      {
        if (!v23)
        {
LABEL_20:
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
          return;
        }
        v10 = 5;
        v8 = v23;
      }
      (*(void (**)(_QWORD *))(*v8 + 8 * v10))(v8);
      goto LABEL_20;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_216897000, v6, OS_LOG_TYPE_ERROR, "invalid fWDSClient!", buf, 2u);
    }
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  }
}

void sub_216951298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v34;

  if (a32 == v32)
  {
    v34 = 4;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v34 = 5;
    v32 = a32;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t TlvValue;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  char v26;
  _QWORD v27[2];
  uint64_t (*v28)(uint64_t, unsigned __int8 *);
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  _BYTE *v34;
  int v35;
  uint8_t buf[8];
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 32);
  v25 = 0;
  v4 = (std::__shared_weak_count *)v3[6];
  if (!v4)
    goto LABEL_10;
  v6 = std::__shared_weak_count::lock(v4);
  v25 = v6;
  if (!v6)
    goto LABEL_10;
  v7 = v3[5];
  if (!v7)
    goto LABEL_10;
  v8 = v6;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0)
    goto LABEL_10;
  v9 = *((_DWORD *)a2 + 1);
  if (v9)
  {
    v10 = v3[12];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v9;
      v37 = 2080;
      v38 = qmi::asString();
      _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I Error in response to AllocatePduSessionId with code = 0x%x (%s)", buf, 0x12u);
    }
    v11 = *(_QWORD *)(a1 + 64);
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
    goto LABEL_10;
  }
  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 1174405120;
  v28 = ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke_143;
  v29 = &__block_descriptor_tmp_145;
  v30 = v3;
  v31 = v7;
  v32 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v35 = *(_DWORD *)(a1 + 72);
  v16 = v33;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  v19 = TlvValue;
  if (TlvValue)
  {
    v20 = v18;
    *(_QWORD *)buf = TlvValue;
    v26 = tlv::parseV<wds::tlv::PduSessionId>((unint64_t *)buf, v18);
    if (*(_QWORD *)buf)
      v28((uint64_t)v27, (unsigned __int8 *)&v26);
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v19, v20);
  }
  if (v34 == v33)
  {
    v21 = 4;
    goto LABEL_26;
  }
  if (v34)
  {
    v21 = 5;
    v16 = v34;
LABEL_26:
    (*(void (**)(_QWORD *))(*v16 + 8 * v21))(v16);
  }
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_10:
  if (v25)
  {
    v12 = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_2169515AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke_143(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Response to AllocatePduSessionId received pduSessionId = %d", (uint8_t *)v8, 8u);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 944))(*(_QWORD *)(a1 + 40), *a2, *(unsigned int *)(a1 + 88));
  v6 = *(_QWORD *)(a1 + 80);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_216951730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 40);
}

void `non-virtual thunk to'QMIDataCommandDriver::allocatePduSessionId(uint64_t a1, uint64_t a2, int a3)
{
  QMIDataCommandDriver::allocatePduSessionId((capabilities::ct *)(a1 - 32), a2, a3);
}

void QMIDataCommandDriver::QosRequestAccepted(QMIDataCommandDriver *this, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t *v9;
  char *v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t *v25[3];
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    v7 = (uint64_t *)std::__shared_weak_count::lock(v4);
    v25[2] = v7;
    if (v7)
    {
      v8 = (std::__shared_weak_count *)v7;
      v9 = (uint64_t *)*((_QWORD *)this + 5);
      v25[1] = v9;
      if (v9)
      {
        v10 = (char *)*((_QWORD *)this + 14);
        if (!v10)
          goto LABEL_15;
        v11 = (uint64_t *)((char *)this + 112);
        do
        {
          v12 = *((_DWORD *)v10 + 8);
          v13 = v12 >= a2;
          if (v12 >= a2)
            v14 = (char **)v10;
          else
            v14 = (char **)(v10 + 8);
          if (v13)
            v11 = (uint64_t *)v10;
          v10 = *v14;
        }
        while (*v14);
        if (v11 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v11 + 8) <= a2)
        {
          v25[0] = v11;
          switch(*((_DWORD *)v11 + 12))
          {
            case 0:
              v21 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v27 = "QosRequestAccepted";
                v28 = 1024;
                v29 = a2;
                v30 = 1024;
                v31 = a3;
                _os_log_impl(&dword_216897000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d accepted with flowId %d", buf, 0x18u);
              }
              if (((*(uint64_t (**)(uint64_t *, uint64_t))(*v9 + 584))(v9, a3) & 1) == 0)
              {
                v22 = *((_QWORD *)this + 12);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  v27 = "QosRequestAccepted";
                  v28 = 1024;
                  v29 = a2;
                  _os_log_impl(&dword_216897000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: Adding flow %d to AppleIPAppender failed", buf, 0x12u);
                }
                QMIDataCommandDriver::QosRequestFailed(this, a2);
              }
              *((_DWORD *)v11 + 12) = 3;
              *((_DWORD *)v11 + 10) = a3;
              break;
            case 1:
              v23 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v27 = "QosRequestAccepted";
                v28 = 1024;
                v29 = a2;
                v30 = 1024;
                v31 = a3;
                _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d accepted with flowId %d but was released before", buf, 0x18u);
              }
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11[7] + 16))(v11[7], *((unsigned int *)v11 + 11), a3);
              QMIDataCommandDriver::releaseQosIndex(this, v25);
              break;
            case 2:
              v24 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v27 = "QosRequestAccepted";
                v28 = 1024;
                v29 = a2;
                v30 = 1024;
                v31 = a3;
                v16 = "#I %s: ERR: Flow %d accepted with flowId %d after failure";
                goto LABEL_38;
              }
              break;
            case 3:
              v24 = *((_QWORD *)this + 12);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v27 = "QosRequestAccepted";
                v28 = 1024;
                v29 = a2;
                v30 = 1024;
                v31 = a3;
                v16 = "#I %s: ERR: Flow %d accepted with flowId %d while active";
LABEL_38:
                v17 = v24;
                v18 = 24;
                goto LABEL_17;
              }
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_15:
          v15 = *((_QWORD *)this + 12);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v27 = "QosRequestAccepted";
            v28 = 1024;
            v29 = a2;
            v16 = "#I %s: QoSId %d not found";
            v17 = v15;
            v18 = 18;
LABEL_17:
            _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216951B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::QosRequestFailed(QMIDataCommandDriver *this, unsigned int a2)
{
  char *v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)*((_QWORD *)this + 14);
  if (!v4)
    goto LABEL_12;
  v5 = (uint64_t *)((char *)this + 112);
  do
  {
    v6 = *((_DWORD *)v4 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v4;
    else
      v8 = (char **)(v4 + 8);
    if (v7)
      v5 = (uint64_t *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v5 + 8) <= a2)
  {
    v13 = v5;
    switch(*((_DWORD *)v5 + 12))
    {
      case 0:
        v11 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "QosRequestFailed";
          v16 = 1024;
          v17 = a2;
          _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d failed", buf, 0x12u);
        }
        *((_DWORD *)v5 + 12) = 2;
        QMIDataCommandDriver::postQosStatus(this, a2, 3u);
        break;
      case 1:
        v12 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "QosRequestFailed";
          v16 = 1024;
          v17 = a2;
          _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d failed but was already released", buf, 0x12u);
        }
        QMIDataCommandDriver::releaseQosIndex(this, &v13);
        break;
      case 2:
        v9 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "QosRequestFailed";
          v16 = 1024;
          v17 = a2;
          v10 = "#I %s: Err: Flow %d failed when already failed";
          goto LABEL_14;
        }
        break;
      case 3:
        v9 = *((_QWORD *)this + 12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "QosRequestFailed";
          v16 = 1024;
          v17 = a2;
          v10 = "#I %s: Err: Flow %d failed while active";
          goto LABEL_14;
        }
        break;
      default:
        return;
    }
  }
  else
  {
LABEL_12:
    v9 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "QosRequestFailed";
      v16 = 1024;
      v17 = a2;
      v10 = "#I %s: QoSId %d not found";
LABEL_14:
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::QosRequestAccepted(QMIDataCommandDriver *this, unsigned int a2, uint64_t a3)
{
  QMIDataCommandDriver::QosRequestAccepted((QMIDataCommandDriver *)((char *)this - 24), a2, a3);
}

void `non-virtual thunk to'QMIDataCommandDriver::QosRequestFailed(QMIDataCommandDriver *this, unsigned int a2)
{
  QMIDataCommandDriver::QosRequestFailed((QMIDataCommandDriver *)((char *)this - 24), a2);
}

void QMIDataCommandDriver::QosStatusInfo(QMIDataCommandDriver *this, int a2, unsigned int a3)
{
  QMIDataCommandDriver *v3;
  QMIDataCommandDriver *v4;
  QMIDataCommandDriver *v5;
  BOOL v6;

  v3 = (QMIDataCommandDriver *)*((_QWORD *)this + 13);
  if (v3 != (QMIDataCommandDriver *)((char *)this + 112))
  {
    while (*((_DWORD *)v3 + 10) != a2)
    {
      v4 = (QMIDataCommandDriver *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(QMIDataCommandDriver **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (QMIDataCommandDriver *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
      if (v5 == (QMIDataCommandDriver *)((char *)this + 112))
        return;
    }
    QMIDataCommandDriver::postQosStatus(this, *((_DWORD *)v3 + 8), a3);
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::QosStatusInfo(QMIDataCommandDriver *this, int a2, unsigned int a3)
{
  QMIDataCommandDriver::QosStatusInfo((QMIDataCommandDriver *)((char *)this - 24), a2, a3);
}

void `non-virtual thunk to'QMIDataCommandDriver::pushNAI(uint64_t a1, std::string::value_type *a2, void **a3, const std::string *a4)
{
  QMIDataCommandDriver::sendWdsCdmaNai_sync(a1 - 32, a2, a3, a4);
}

void QMIDataCommandDriver::updatePreferredDataSIM_sync(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  _QWORD v20[4];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BDAC760];
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 1174405120;
  v20[2] = ___ZN20QMIDataCommandDriver27updatePreferredDataSIM_syncEN10subscriber7SimSlotENSt3__18functionIFvbEEENS0_14MSimConfigModeE_block_invoke;
  v20[3] = &__block_descriptor_tmp_148;
  v5 = v21;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v21, a3);
  v6 = (std::__shared_weak_count *)a1[9];
  if (!v6 || (v7 = a1[8], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = a1[10];
  v18[0] = v4;
  v18[1] = 1174405120;
  v18[2] = ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  v18[3] = &unk_24D5D0738;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v18[5] = v7;
  v19 = v9;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v18[4] = v20;
  dispatch_async(v10, v18);
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v22 == v21)
  {
    v17 = 4;
  }
  else
  {
    if (!v22)
      return;
    v17 = 5;
    v5 = v22;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v17))(v5);
}

void sub_21695203C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN20QMIDataCommandDriver27updatePreferredDataSIM_syncEN10subscriber7SimSlotENSt3__18functionIFvbEEENS0_14MSimConfigModeE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v3 = 1;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void `non-virtual thunk to'QMIDataCommandDriver::updatePreferredDataSIM_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataCommandDriver::updatePreferredDataSIM_sync((_QWORD *)(a1 - 32), a2, a3);
}

void QMIDataCommandDriver::updateCurrentDataSIM_sync(capabilities::ct *a1, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  const void **v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD v50[6];
  std::__shared_weak_count *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *aBlock;
  void *__p[2];
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 buf;
  void (*v62)(uint64_t, uint64_t);
  void *v63;
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!capabilities::ct::supports5G(a1))
    return;
  v59 = 0;
  v60 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_12;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v60 = v5;
  if (!v5
    || (v6 = *((_QWORD *)a1 + 5), (v59 = v6) == 0)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 496))(v6) & 1) != 0
    || !*((_QWORD *)a1 + 20))
  {
LABEL_12:
    v8 = *((_QWORD *)a1 + 12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "updateCurrentDataSIM_sync";
      _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "%s: driver not ready", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_14;
  }
  *(_OWORD *)__p = 0u;
  v58 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v58)
  {
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v58)
        goto LABEL_23;
    }
  }
  if (v7 == (const void **)v58)
  {
LABEL_23:
    v13 = operator new();
    v14 = v13;
    *(_WORD *)(v13 + 8) = 16;
    *(_QWORD *)v13 = &off_24D5D0790;
    v15 = v58;
    if ((unint64_t)v58 >= *((_QWORD *)&v58 + 1))
    {
      v17 = (uint64_t)(v58 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_82;
      v18 = (uint64_t)(*((_QWORD *)&v58 + 1) - (unint64_t)__p[1]) >> 2;
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      if (*((_QWORD *)&v58 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v58 + 8, v19);
      else
        v20 = 0;
      v21 = (uint64_t *)&v20[8 * v17];
      v22 = &v20[8 * v19];
      *v21 = v14;
      v16 = v21 + 1;
      v24 = (char *)__p[1];
      v23 = (char *)v58;
      if ((void *)v58 != __p[1])
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = (char *)__p[1];
      }
      __p[1] = v21;
      *(_QWORD *)&v58 = v16;
      *((_QWORD *)&v58 + 1) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v58 = v13;
      v16 = (_QWORD *)(v15 + 8);
    }
    v12 = (_BYTE *)(v14 + 9);
    *(_QWORD *)&v58 = v16;
  }
  else
  {
    if (!v11)
      goto LABEL_81;
    v12 = v11 + 9;
  }
  *v12 = PersonalitySpecificImpl::simSlot(a1);
  v26 = (const void **)__p[1];
  if (__p[1] != (void *)v58)
  {
    while (*((_BYTE *)*v26 + 8) != 17)
    {
      if (++v26 == (const void **)v58)
        goto LABEL_47;
    }
  }
  if (v26 == (const void **)v58)
  {
LABEL_47:
    v29 = operator new();
    v30 = v29;
    *(_WORD *)(v29 + 8) = 17;
    *(_QWORD *)v29 = &off_24D5D07E0;
    v31 = v58;
    if ((unint64_t)v58 < *((_QWORD *)&v58 + 1))
    {
      *(_QWORD *)v58 = v29;
      v32 = (_QWORD *)(v31 + 8);
LABEL_63:
      v28 = (char *)(v30 + 9);
      *(_QWORD *)&v58 = v32;
      goto LABEL_64;
    }
    v33 = (uint64_t)(v58 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v33 + 1) >> 61))
    {
      v34 = (uint64_t)(*((_QWORD *)&v58 + 1) - (unint64_t)__p[1]) >> 2;
      if (v34 <= v33 + 1)
        v34 = v33 + 1;
      if (*((_QWORD *)&v58 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v58 + 8, v35);
      else
        v36 = 0;
      v37 = (uint64_t *)&v36[8 * v33];
      v38 = &v36[8 * v35];
      *v37 = v30;
      v32 = v37 + 1;
      v40 = (char *)__p[1];
      v39 = (char *)v58;
      if ((void *)v58 != __p[1])
      {
        do
        {
          v41 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *--v37 = v41;
        }
        while (v39 != v40);
        v39 = (char *)__p[1];
      }
      __p[1] = v37;
      *(_QWORD *)&v58 = v32;
      *((_QWORD *)&v58 + 1) = v38;
      if (v39)
        operator delete(v39);
      goto LABEL_63;
    }
LABEL_82:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (!v27)
LABEL_81:
    __cxa_bad_cast();
  v28 = v27 + 9;
LABEL_64:
  if (a2 == 4)
    v42 = 2;
  else
    v42 = 3;
  if (a2 == 3)
    v42 = 1;
  *v28 = v42;
  v52 = (_QWORD *)((char *)a1 + 144);
  v53 = QMIServiceMsg::create();
  v54 = 25000;
  v55 = 0;
  aBlock = 0;
  v43 = MEMORY[0x24BDAC760];
  v50[0] = MEMORY[0x24BDAC760];
  v50[1] = 1174405120;
  v50[2] = ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_3;
  v50[3] = &__block_descriptor_tmp_153;
  v50[4] = a1;
  v50[5] = v6;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v51 = v5;
  do
    v45 = __ldxr(p_shared_owners);
  while (__stxr(v45 + 1, p_shared_owners));
  *(_QWORD *)&buf = v43;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v62 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
  v63 = &unk_24D5CFD50;
  v64 = v50;
  v46 = _Block_copy(&buf);
  aBlock = v46;
  if (v53)
  {
    qmi::Client::send();
    v46 = aBlock;
  }
  if (v46)
    _Block_release(v46);
  v47 = v51;
  if (v51)
  {
    v48 = (unint64_t *)&v51->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v5 = v60;
LABEL_14:
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2169525E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      v5 = *(NSObject **)(v3 + 96);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109378;
        v6[1] = v4;
        v7 = 2080;
        v8 = qmi::asString();
        _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "NotifyCurrentDataSub failed: 0x%x (%s)", (uint8_t *)v6, 0x12u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSKNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c50_ZTSKNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 40);
}

void `non-virtual thunk to'QMIDataCommandDriver::updateCurrentDataSIM_sync(uint64_t a1, int a2)
{
  QMIDataCommandDriver::updateCurrentDataSIM_sync((capabilities::ct *)(a1 - 32), a2);
}

uint64_t QMIDataCommandDriver::setVoLTEAudioCodec_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint8_t v7[8];
  uint64_t v8;

  v4 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#E Device does not support setVoLTEAudioCodec", v7, 2u);
  }
  v8 = 0x2D00000001;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8);
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::setVoLTEAudioCodec_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QMIDataCommandDriver::setVoLTEAudioCodec_sync(a1 - 32, a2, a3);
}

void ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    v4 = *(NSObject **)(v3 + 96);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = asStringBool();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "SetCellularDataStatusInfo %s request failed", (uint8_t *)&v5, 0xCu);
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::updateCellularDataStatusInfo_sync(QMIDataCommandDriver *this, char a2)
{
  QMIDataCommandDriver::updateCellularDataStatusInfo_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void QMIDataCommandDriver::updateActiveSliceStatus_sync(QMIDataCommandDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];
  char v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *__p[2];
  __int128 v29;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v29 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v29)
  {
    while (*((_BYTE *)*v4 + 8) != 17)
    {
      if (++v4 == (const void **)v29)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v29)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 17;
    *(_QWORD *)v7 = &off_24D5D0880;
    v9 = v29;
    if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
    {
      v11 = (uint64_t)(v29 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v29 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v29 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v29 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v29;
      if ((void *)v29 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v29 = v10;
      *((_QWORD *)&v29 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v29 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v29 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v23 = (char *)this + 144;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  v27 = 0;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_159_0;
  v21[4] = this;
  v22 = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
  aBlock[3] = &unk_24D5CFD50;
  aBlock[4] = v21;
  v20 = _Block_copy(aBlock);
  v27 = v20;
  if (v24)
  {
    qmi::Client::send();
    v20 = v27;
  }
  if (v20)
    _Block_release(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216952AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 96);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 96), OS_LOG_TYPE_ERROR))
    {
      v5 = asStringBool();
      v6 = *(_DWORD *)(a2 + 4);
      v7 = 136315650;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      v11 = 2080;
      v12 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "DataActivityInfo[slice %s], Error code = 0x%x (%s)", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v2 + 96), OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315138;
    v8 = asStringBool();
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I DataActivityInfo[slice %s] success", (uint8_t *)&v7, 0xCu);
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::updateActiveSliceStatus_sync(QMIDataCommandDriver *this, char a2)
{
  QMIDataCommandDriver::updateActiveSliceStatus_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void QMIDataCommandDriver::reportPhsClients_sync(QMIDataCommandDriver *this, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  BOOL *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  int v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD aBlock[5];

  if (capabilities::ct::supportsReportingTetheringStateToBaseband(this))
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (v4)
    {
      v5 = std::__shared_weak_count::lock(v4);
      v44 = v5;
      if (v5)
      {
        v6 = v5;
        v7 = *((_QWORD *)this + 5);
        v43 = v7;
        if (!v7
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0
          || !*((_QWORD *)this + 20))
        {
          goto LABEL_43;
        }
        *(_OWORD *)__p = 0u;
        v42 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        v8 = (const void **)__p[1];
        if (__p[1] != (void *)v42)
        {
          while (*((_BYTE *)*v8 + 8) != 16)
          {
            if (++v8 == (const void **)v42)
              goto LABEL_14;
          }
        }
        if (v8 == (const void **)v42)
        {
LABEL_14:
          v11 = operator new();
          v12 = v11;
          *(_WORD *)(v11 + 8) = 16;
          *(_QWORD *)v11 = &off_24D5D08D0;
          v13 = v42;
          if ((unint64_t)v42 >= *((_QWORD *)&v42 + 1))
          {
            v15 = (uint64_t)(v42 - (unint64_t)__p[1]) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v16 = (uint64_t)(*((_QWORD *)&v42 + 1) - (unint64_t)__p[1]) >> 2;
            if (v16 <= v15 + 1)
              v16 = v15 + 1;
            if (*((_QWORD *)&v42 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v42 + 8, v17);
            else
              v18 = 0;
            v19 = (uint64_t *)&v18[8 * v15];
            v20 = &v18[8 * v17];
            *v19 = v12;
            v14 = v19 + 1;
            v22 = (char *)__p[1];
            v21 = (char *)v42;
            if ((void *)v42 != __p[1])
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v19 = v23;
              }
              while (v21 != v22);
              v21 = (char *)__p[1];
            }
            __p[1] = v19;
            *(_QWORD *)&v42 = v14;
            *((_QWORD *)&v42 + 1) = v20;
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v42 = v11;
            v14 = (_QWORD *)(v13 + 8);
          }
          v10 = (BOOL *)(v12 + 9);
          *(_QWORD *)&v42 = v14;
        }
        else
        {
          if (!v9)
            __cxa_bad_cast();
          v10 = (BOOL *)(v9 + 9);
        }
        *v10 = a2 > 0;
        v36 = (char *)this + 144;
        v37 = QMIServiceMsg::create();
        v38 = 25000;
        v39 = 0;
        v40 = 0;
        v24 = MEMORY[0x24BDAC760];
        v33[0] = MEMORY[0x24BDAC760];
        v33[1] = 1174405120;
        v33[2] = ___ZN20QMIDataCommandDriver21reportPhsClients_syncEi_block_invoke;
        v33[3] = &__block_descriptor_tmp_160;
        v33[4] = this;
        v33[5] = v7;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        v34 = v6;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
        v35 = a2;
        aBlock[0] = v24;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
        aBlock[3] = &unk_24D5CFD50;
        aBlock[4] = v33;
        v27 = _Block_copy(aBlock);
        v40 = v27;
        if (v37)
        {
          qmi::Client::send();
          v27 = v40;
        }
        if (v27)
          _Block_release(v27);
        v28 = v34;
        if (v34)
        {
          v29 = (unint64_t *)&v34->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        v6 = v44;
        if (v44)
        {
LABEL_43:
          v31 = (unint64_t *)&v6->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
}

void sub_216952F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v10);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v11 - 120);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver21reportPhsClients_syncEi_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    v5 = *(NSObject **)(v4 + 96);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a1 + 56);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "PhsStatusInfo %d request failed", (uint8_t *)v7, 8u);
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::reportPhsClients_sync(QMIDataCommandDriver *this, int a2)
{
  QMIDataCommandDriver::reportPhsClients_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

uint64_t QMIDataCommandDriver::dataBearerRequired(uint64_t a1, int a2)
{
  return DataUtils::lteishDataMode() | a2;
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::dataBearerRequired(uint64_t a1, int a2)
{
  return DataUtils::lteishDataMode() | a2;
}

void QMIDataCommandDriver::setCriticalActivity_sync(QMIDataCommandDriver *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  char v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *aBlock;
  void *__p[2];
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 buf;
  void (*v48)(uint64_t, uint64_t);
  void *v49;
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v46 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 5);
      v45 = v7;
      if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) != 0 || !*((_QWORD *)this + 20))
        goto LABEL_44;
      *(_OWORD *)__p = 0u;
      v44 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      v8 = (const void **)__p[1];
      if (__p[1] != (void *)v44)
      {
        while (*((_BYTE *)*v8 + 8) != 18)
        {
          if (++v8 == (const void **)v44)
            goto LABEL_13;
        }
      }
      if (v8 == (const void **)v44)
      {
LABEL_13:
        v11 = operator new();
        v12 = v11;
        *(_WORD *)(v11 + 8) = 18;
        *(_QWORD *)v11 = &off_24D5D0920;
        v13 = v44;
        if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
        {
          v15 = (uint64_t)(v44 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = (uint64_t)(*((_QWORD *)&v44 + 1) - (unint64_t)__p[1]) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if (*((_QWORD *)&v44 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v44 + 8, v17);
          else
            v18 = 0;
          v19 = (uint64_t *)&v18[8 * v15];
          v20 = &v18[8 * v17];
          *v19 = v12;
          v14 = v19 + 1;
          v22 = (char *)__p[1];
          v21 = (char *)v44;
          if ((void *)v44 != __p[1])
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = (char *)__p[1];
          }
          __p[1] = v19;
          *(_QWORD *)&v44 = v14;
          *((_QWORD *)&v44 + 1) = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v44 = v11;
          v14 = (_QWORD *)(v13 + 8);
        }
        v10 = (_BYTE *)(v12 + 9);
        *(_QWORD *)&v44 = v14;
      }
      else
      {
        if (!v9)
          __cxa_bad_cast();
        v10 = v9 + 9;
      }
      *v10 = a2;
      v24 = *((_QWORD *)this + 12);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v25 = asStringBool();
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Sending SetDataLowLatencyMode %s request", (uint8_t *)&buf, 0xCu);
      }
      v38 = (char *)this + 144;
      v39 = QMIServiceMsg::create();
      v40 = 25000;
      v41 = 0;
      aBlock = 0;
      v26 = MEMORY[0x24BDAC760];
      v35[0] = MEMORY[0x24BDAC760];
      v35[1] = 1174405120;
      v35[2] = ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke_163;
      v35[3] = &__block_descriptor_tmp_164;
      v35[4] = this;
      v35[5] = v7;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v36 = v6;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      v37 = a2;
      *(_QWORD *)&buf = v26;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v48 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
      v49 = &unk_24D5CFD50;
      v50 = v35;
      v29 = _Block_copy(&buf);
      aBlock = v29;
      if (v39)
      {
        qmi::Client::send();
        v29 = aBlock;
      }
      if (v29)
        _Block_release(v29);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
      v6 = v46;
      if (v46)
      {
LABEL_44:
        v33 = (unint64_t *)&v6->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_21695349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v15 - 128);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke_163(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v4 = *(_DWORD *)(a2 + 4);
    v5 = *(NSObject **)(v3 + 96);
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v6)
        return;
      v8 = 136315138;
      v9 = asStringBool();
      v7 = "#I SetDataLowLatencyMode %s request failed";
    }
    else
    {
      if (!v6)
        return;
      v8 = 136315138;
      v9 = asStringBool();
      v7 = "#I SetDataLowLatencyMode %s request: success";
    }
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0xCu);
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::setCriticalActivity_sync(QMIDataCommandDriver *this, char a2)
{
  QMIDataCommandDriver::setCriticalActivity_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

double ___ZNK20QMIDataCommandDriver19reportPdpStatisticsERKNSt3__110shared_ptrIKNS0_3mapIjN29PdpStatisticsServiceInterface9PdpStatusENS0_4lessIjEENS0_9allocatorINS0_4pairIKjS4_EEEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a1 + 32);
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void __copy_helper_block_e8_32c48_ZTSKN29PdpStatisticsServiceInterface9PdpStatusE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = v4;
  v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[3].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 72);
}

void __destroy_helper_block_e8_32c48_ZTSKN29PdpStatisticsServiceInterface9PdpStatusE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZNK20QMIDataCommandDriver19reportPdpStatisticsERKNSt3__110shared_ptrIKNS0_3mapIjN29PdpStatisticsServiceInterface9PdpStatusENS0_4lessIjEENS0_9allocatorINS0_4pairIKjS4_EEEEEEEE_block_invoke_167(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    v5 = *(NSObject **)(v4 + 96);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a1 + 56);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "LinkStats request failed for pdp %d", (uint8_t *)v7, 8u);
    }
  }
}

void ___ZN20QMIDataCommandDriver24sendWdsGetTdInfoReq_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[5];
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 496))(v7) & 1) == 0)
        {
          v8 = *(_DWORD *)(a2 + 4);
          if (v8)
          {
            v9 = v2[12];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              v13 = "sendWdsGetTdInfoReq_sync_block_invoke";
              v14 = 1024;
              v15 = v8;
              v16 = 2080;
              v17 = qmi::asString();
              _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve TD info: 0x%x (%s)", buf, 0x1Cu);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21695387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataCommandDriver::selectDnnForTd_sync(capabilities::ct *a1, TrafficDescriptor *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t i;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  _QWORD v123[3];
  _QWORD *v124;
  uint8_t buf[4];
  const char *v126;
  __int16 v127;
  void **v128;
  void *__p[2];
  char v130;
  _BYTE v131[24];
  _QWORD v132[3];

  v132[1] = *MEMORY[0x24BDAC8D0];
  result = capabilities::ct::supports5GSlicing(a1);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a1 + 20);
    v8 = *((_QWORD *)a1 + 12);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if ((_DWORD)result)
      {
        TrafficDescriptor::toString(a2);
        v9 = v130 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v126 = "selectDnnForTd_sync";
        v127 = 2082;
        v128 = v9;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: sending PduSessionLookup::Request for td=%{public}s", buf, 0x16u);
        if (v130 < 0)
          operator delete(__p[0]);
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v123, a3);
      MEMORY[0x2199FDA38](__p, a2);
      v10 = v131;
      v11 = (uint64_t)v124;
      if (v124)
      {
        if (v124 == v123)
        {
          v132[0] = v131;
          (*(void (**)(_QWORD *, _BYTE *))(v123[0] + 24))(v123, v131);
LABEL_16:
          v12 = (char *)*((_QWORD *)a1 + 56);
          v13 = (char *)*((_QWORD *)a1 + 57);
          v14 = v13 - v12;
          if (v13 == v12)
            v15 = 0;
          else
            v15 = 2 * (v13 - v12) - 1;
          v16 = *((_QWORD *)a1 + 59);
          if (v15 != *((_QWORD *)a1 + 60) + v16)
          {
LABEL_53:
            if (v13 == v12)
            {
              v62 = 0;
            }
            else
            {
              v61 = *((_QWORD *)a1 + 60) + *((_QWORD *)a1 + 59);
              v62 = *(_QWORD *)&v12[(v61 >> 1) & 0x7FFFFFFFFFFFFFF8] + 336 * (v61 & 0xF);
            }
            v63 = MEMORY[0x2199FDA2C](v62, __p);
            if (v132[0])
            {
              if ((_BYTE *)v132[0] == v131)
              {
                *(_QWORD *)(v63 + 328) = v63 + 304;
                (*(void (**)(_QWORD))(*(_QWORD *)v132[0] + 24))(v132[0]);
LABEL_62:
                ++*((_QWORD *)a1 + 60);
                if ((_BYTE *)v132[0] == v131)
                {
                  v65 = 4;
                }
                else
                {
                  if (!v132[0])
                    goto LABEL_67;
                  v65 = 5;
                  v10 = (_QWORD *)v132[0];
                }
                (*(void (**)(_QWORD *))(*v10 + 8 * v65))(v10);
LABEL_67:
                MEMORY[0x2199FDA50](__p);
                QMIDataCommandDriver::processPendingLookupRequests_sync(a1);
                v66 = v124;
                if (v124 == v123)
                {
                  v67 = 4;
                  v66 = v123;
                }
                else
                {
                  if (!v124)
                    return 1;
                  v67 = 5;
                }
                (*(void (**)(void))(*v66 + 8 * v67))();
                return 1;
              }
              v64 = v132;
              *(_QWORD *)(v63 + 328) = v132[0];
            }
            else
            {
              v64 = (_QWORD *)(v63 + 328);
            }
            *v64 = 0;
            goto LABEL_62;
          }
          v17 = v16 >= 0x10;
          v18 = v16 - 16;
          if (v17)
          {
            *((_QWORD *)a1 + 59) = v18;
            v21 = *(_QWORD *)v12;
            v19 = v12 + 8;
            v20 = v21;
            *((_QWORD *)a1 + 56) = v19;
            if (v13 == *((char **)a1 + 58))
            {
              v22 = *((_QWORD *)a1 + 55);
              v23 = (uint64_t)&v19[-v22];
              if ((unint64_t)v19 <= v22)
              {
                v49 = (uint64_t)&v13[-v22];
                v48 = v49 == 0;
                v50 = v49 >> 2;
                if (v48)
                  v51 = 1;
                else
                  v51 = v50;
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v51);
                v54 = &v52[8 * (v51 >> 2)];
                v55 = (uint64_t *)*((_QWORD *)a1 + 56);
                v13 = v54;
                v56 = *((_QWORD *)a1 + 57) - (_QWORD)v55;
                if (v56)
                {
                  v13 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
                  v57 = 8 * (v56 >> 3);
                  v58 = &v52[8 * (v51 >> 2)];
                  do
                  {
                    v59 = *v55++;
                    *(_QWORD *)v58 = v59;
                    v58 += 8;
                    v57 -= 8;
                  }
                  while (v57);
                }
                v60 = (void *)*((_QWORD *)a1 + 55);
                *((_QWORD *)a1 + 55) = v52;
                *((_QWORD *)a1 + 56) = v54;
                *((_QWORD *)a1 + 57) = v13;
                *((_QWORD *)a1 + 58) = &v52[8 * v53];
                if (v60)
                {
                  operator delete(v60);
                  v13 = (char *)*((_QWORD *)a1 + 57);
                }
              }
              else
              {
                v24 = v23 >> 3;
                v25 = v23 >> 3 < -1;
                v26 = (v23 >> 3) + 2;
                if (v25)
                  v27 = v26;
                else
                  v27 = v24 + 1;
                v28 = -(v27 >> 1);
                v29 = v27 >> 1;
                v30 = &v19[-8 * v29];
                v31 = v13 - v19;
                if (v13 != v19)
                {
                  memmove(&v19[-8 * v29], v19, v13 - v19);
                  v13 = (char *)*((_QWORD *)a1 + 56);
                }
                v32 = &v13[8 * v28];
                v13 = &v30[v31];
                *((_QWORD *)a1 + 56) = v32;
                *((_QWORD *)a1 + 57) = &v30[v31];
              }
            }
            *(_QWORD *)v13 = v20;
          }
          else
          {
            v33 = v14 >> 3;
            v34 = (char *)*((_QWORD *)a1 + 58);
            v35 = (char *)*((_QWORD *)a1 + 55);
            if (v14 >> 3 >= (unint64_t)((v34 - v35) >> 3))
            {
              if (v34 == v35)
                v38 = 1;
              else
                v38 = (v34 - v35) >> 2;
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v38);
              v41 = v40;
              v42 = operator new(0x1500uLL);
              v43 = &v39[8 * v33];
              v44 = &v39[8 * v41];
              if (v33 == v41)
              {
                v45 = 8 * v33;
                if (v14 < 1)
                {
                  v90 = v42;
                  v91 = v45 >> 2;
                  if (v13 == v12)
                    v92 = 1;
                  else
                    v92 = v91;
                  v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v92);
                  v43 = &v93[8 * (v92 >> 2)];
                  v44 = &v93[8 * v94];
                  if (v39)
                    operator delete(v39);
                  v39 = v93;
                  v42 = v90;
                }
                else
                {
                  v46 = v45 >> 3;
                  if (v46 >= -1)
                    v47 = v46 + 1;
                  else
                    v47 = v46 + 2;
                  v43 -= 8 * (v47 >> 1);
                }
              }
              *(_QWORD *)v43 = v42;
              v13 = v43 + 8;
              for (i = *((_QWORD *)a1 + 57); i != *((_QWORD *)a1 + 56); i -= 8)
              {
                if (v43 == v39)
                {
                  if (v13 >= v44)
                  {
                    if (v44 == v39)
                      v100 = 1;
                    else
                      v100 = (v44 - v39) >> 2;
                    v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v100);
                    v103 = v101;
                    v43 = &v101[(2 * v100 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v104 = v13 - v39;
                    v48 = v13 == v39;
                    v13 = v43;
                    if (!v48)
                    {
                      v13 = &v43[v104 & 0xFFFFFFFFFFFFFFF8];
                      v105 = 8 * (v104 >> 3);
                      v106 = v43;
                      v107 = v39;
                      do
                      {
                        v108 = *(_QWORD *)v107;
                        v107 += 8;
                        *(_QWORD *)v106 = v108;
                        v106 += 8;
                        v105 -= 8;
                      }
                      while (v105);
                    }
                    v44 = &v101[8 * v102];
                    if (v39)
                      operator delete(v39);
                    v39 = v103;
                  }
                  else
                  {
                    v96 = (v44 - v13) >> 3;
                    if (v96 >= -1)
                      v97 = v96 + 1;
                    else
                      v97 = v96 + 2;
                    v98 = v97 >> 1;
                    v43 = &v39[8 * (v97 >> 1)];
                    v99 = v39;
                    if (v13 != v39)
                    {
                      memmove(v43, v39, v13 - v39);
                      v99 = v13;
                    }
                    v13 = &v99[8 * v98];
                  }
                }
                v109 = *(_QWORD *)(i - 8);
                *((_QWORD *)v43 - 1) = v109;
                v43 -= 8;
              }
              v110 = (void *)*((_QWORD *)a1 + 55);
              *((_QWORD *)a1 + 55) = v39;
              *((_QWORD *)a1 + 56) = v43;
              *((_QWORD *)a1 + 57) = v13;
              *((_QWORD *)a1 + 58) = v44;
              if (v110)
              {
                operator delete(v110);
                v13 = (char *)*((_QWORD *)a1 + 57);
              }
              goto LABEL_52;
            }
            v36 = operator new(0x1500uLL);
            v37 = v36;
            if (v34 == v13)
            {
              if (v12 == v35)
              {
                if (v13 == v12)
                  v68 = 1;
                else
                  v68 = (v34 - v12) >> 2;
                v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v68);
                v12 = &v69[(2 * v68 + 6) & 0xFFFFFFFFFFFFFFF8];
                v71 = (uint64_t *)*((_QWORD *)a1 + 56);
                v72 = v12;
                v73 = *((_QWORD *)a1 + 57) - (_QWORD)v71;
                if (v73)
                {
                  v72 = &v12[v73 & 0xFFFFFFFFFFFFFFF8];
                  v74 = 8 * (v73 >> 3);
                  v75 = &v69[(2 * v68 + 6) & 0xFFFFFFFFFFFFFFF8];
                  do
                  {
                    v76 = *v71++;
                    *(_QWORD *)v75 = v76;
                    v75 += 8;
                    v74 -= 8;
                  }
                  while (v74);
                }
                v77 = (void *)*((_QWORD *)a1 + 55);
                *((_QWORD *)a1 + 55) = v69;
                *((_QWORD *)a1 + 56) = v12;
                *((_QWORD *)a1 + 57) = v72;
                *((_QWORD *)a1 + 58) = &v69[8 * v70];
                if (v77)
                {
                  operator delete(v77);
                  v12 = (char *)*((_QWORD *)a1 + 56);
                }
              }
              *((_QWORD *)v12 - 1) = v37;
              v78 = (char *)*((_QWORD *)a1 + 56);
              v79 = (char *)*((_QWORD *)a1 + 57);
              *((_QWORD *)a1 + 56) = v78 - 8;
              v80 = *((_QWORD *)v78 - 1);
              *((_QWORD *)a1 + 56) = v78;
              if (v79 == *((char **)a1 + 58))
              {
                v81 = *((_QWORD *)a1 + 55);
                v82 = (uint64_t)&v78[-v81];
                if ((unint64_t)v78 <= v81)
                {
                  v111 = (uint64_t)&v79[-v81];
                  v48 = v111 == 0;
                  v112 = v111 >> 2;
                  if (v48)
                    v113 = 1;
                  else
                    v113 = v112;
                  v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v113);
                  v116 = &v114[8 * (v113 >> 2)];
                  v117 = (uint64_t *)*((_QWORD *)a1 + 56);
                  v79 = v116;
                  v118 = *((_QWORD *)a1 + 57) - (_QWORD)v117;
                  if (v118)
                  {
                    v79 = &v116[v118 & 0xFFFFFFFFFFFFFFF8];
                    v119 = 8 * (v118 >> 3);
                    v120 = &v114[8 * (v113 >> 2)];
                    do
                    {
                      v121 = *v117++;
                      *(_QWORD *)v120 = v121;
                      v120 += 8;
                      v119 -= 8;
                    }
                    while (v119);
                  }
                  v122 = (void *)*((_QWORD *)a1 + 55);
                  *((_QWORD *)a1 + 55) = v114;
                  *((_QWORD *)a1 + 56) = v116;
                  *((_QWORD *)a1 + 57) = v79;
                  *((_QWORD *)a1 + 58) = &v114[8 * v115];
                  if (v122)
                  {
                    operator delete(v122);
                    v79 = (char *)*((_QWORD *)a1 + 57);
                  }
                }
                else
                {
                  v83 = v82 >> 3;
                  v25 = v82 >> 3 < -1;
                  v84 = (v82 >> 3) + 2;
                  if (v25)
                    v85 = v84;
                  else
                    v85 = v83 + 1;
                  v86 = -(v85 >> 1);
                  v87 = v85 >> 1;
                  v88 = &v78[-8 * v87];
                  v89 = v79 - v78;
                  if (v79 != v78)
                  {
                    memmove(&v78[-8 * v87], v78, v79 - v78);
                    v78 = (char *)*((_QWORD *)a1 + 56);
                  }
                  v79 = &v88[v89];
                  *((_QWORD *)a1 + 56) = &v78[8 * v86];
                  *((_QWORD *)a1 + 57) = &v88[v89];
                }
              }
              *(_QWORD *)v79 = v80;
            }
            else
            {
              *(_QWORD *)v13 = v36;
            }
          }
          v13 = (char *)(*((_QWORD *)a1 + 57) + 8);
          *((_QWORD *)a1 + 57) = v13;
LABEL_52:
          v12 = (char *)*((_QWORD *)a1 + 56);
          goto LABEL_53;
        }
        v11 = (*(uint64_t (**)(void))(*v124 + 16))();
      }
      v132[0] = v11;
      goto LABEL_16;
    }
    if ((_DWORD)result)
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)__p, 2u);
      return 0;
    }
  }
  return result;
}

void sub_216953F98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;

  operator delete(v18);
  if (v17)
    operator delete(v17);
  std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>::~pair((uint64_t)&a17);
}

void sub_216953FF0()
{
  JUMPOUT(0x21695402CLL);
}

void sub_216953FFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  _Unwind_Exception *v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(v12);
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::selectDnnForTd_sync(uint64_t a1, TrafficDescriptor *a2, uint64_t a3)
{
  return QMIDataCommandDriver::selectDnnForTd_sync((capabilities::ct *)(a1 - 32), a2, a3);
}

void std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>::~pair(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 304);
  v2 = *(_QWORD **)(a1 + 328);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2199FDA50);
}

PersonalitySpecificImpl *QMIDataCommandDriver::processPendingLookupRequests_sync(PersonalitySpecificImpl *this)
{
  PersonalitySpecificImpl *v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int128 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  const void **v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  const void **v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  const void **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  const void **v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  const void **v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  CSIPacketAddress *v100;
  const void **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  NSObject *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  const void **v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  const void **v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  const void **v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  unint64_t *p_shared_owners;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  _QWORD v180[2];
  void (*v181)(uint64_t, uint64_t);
  void *v182;
  _BYTE *v183;
  _QWORD v184[2];
  void (*v185)(uint64_t, uint64_t);
  void *v186;
  _BYTE *v187;
  _QWORD v188[2];
  void (*v189)(uint64_t, uint64_t);
  void *v190;
  _BYTE *v191;
  _QWORD v192[2];
  void (*v193)(uint64_t, uint64_t);
  void *v194;
  _BYTE *v195;
  _QWORD v196[2];
  void (*v197)(uint64_t, uint64_t *);
  void *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  _BYTE *v201;
  int v202;
  _QWORD v203[2];
  std::string *(*v204)(uint64_t, std::string *);
  void *v205;
  _BYTE *v206;
  _QWORD v207[2];
  uint64_t (*v208)(uint64_t, _WORD *);
  void *v209;
  __int16 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  _QWORD aBlock[5];
  _QWORD v216[3];
  _QWORD *v217;
  _BYTE v218[160];
  __int128 v219;
  _BYTE v220[32];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  void (*v231)(uint64_t, uint64_t);
  void *v232;
  PersonalitySpecificImpl *v233;
  _BYTE v234[24];
  _BYTE *v235;
  __int16 v236;
  __int128 buf;
  void (*v238)(void);
  void *v239;
  _QWORD v240[6];

  v240[3] = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 60))
  {
    v1 = this;
    if (!*((_QWORD *)this + 53))
    {
      v227 = 0u;
      v228 = 0u;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v221 = 0u;
      v222 = 0u;
      memset(v220, 0, sizeof(v220));
      v219 = 0u;
      memset(v218, 0, sizeof(v218));
      v2 = *((_QWORD *)this + 59);
      v3 = *(_QWORD *)(*((_QWORD *)this + 56) + ((v2 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v4 = v2 & 0xF;
      MEMORY[0x2199FDA38](v218, v3 + 336 * (v2 & 0xF));
      v5 = &v227;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v227, v3 + 336 * v4 + 304);
      std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front((uint64_t)v1 + 440);
      v6 = *((_QWORD *)&v228 + 1);
      if (*((_QWORD *)&v228 + 1))
      {
        if (*((__int128 **)&v228 + 1) == &v227)
        {
          v217 = v216;
          (*(void (**)(__int128 *, _QWORD *))(v227 + 24))(&v227, v216);
          goto LABEL_8;
        }
        v6 = (*(uint64_t (**)(void))(**((_QWORD **)&v228 + 1) + 16))();
      }
      v217 = (_QWORD *)v6;
LABEL_8:
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 41);
      if (!v7 || (v8 = std::__shared_weak_count::lock(v7), (v214 = v8) == 0))
      {
LABEL_283:
        v175 = v217;
        if (v217 == v216)
        {
          v176 = 4;
          v175 = v216;
        }
        else
        {
          if (!v217)
            goto LABEL_288;
          v176 = 5;
        }
        (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_288:
        if (*((__int128 **)&v228 + 1) == &v227)
        {
          v177 = 4;
        }
        else
        {
          if (!*((_QWORD *)&v228 + 1))
            return (PersonalitySpecificImpl *)MEMORY[0x2199FDA50](v218);
          v177 = 5;
          v5 = (__int128 *)*((_QWORD *)&v228 + 1);
        }
        (*(void (**)(__int128 *))(*(_QWORD *)v5 + 8 * v177))(v5);
        return (PersonalitySpecificImpl *)MEMORY[0x2199FDA50](v218);
      }
      v9 = v8;
      v10 = *((_QWORD *)v1 + 40);
      v213 = v10;
      if (!v10)
      {
LABEL_279:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v174 = __ldaxr(p_shared_owners);
        while (__stlxr(v174 - 1, p_shared_owners));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        goto LABEL_283;
      }
      v11 = PersonalitySpecificImpl::simSlot(v1);
      v211 = 0u;
      v212 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v211);
      v12 = QMIDataCommandDriver::fPduSessionLookupTransactionId++;
      v13 = MEMORY[0x24BDAC760];
      v207[0] = MEMORY[0x24BDAC760];
      v207[1] = 0x40000000;
      v208 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
      v209 = &__block_descriptor_tmp_171;
      v210 = v12;
      v14 = (const void **)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
      {
        while (*((_BYTE *)*v14 + 8) != 1)
        {
          if (++v14 == (const void **)v212)
            goto LABEL_18;
        }
      }
      if (v14 == (const void **)v212)
      {
LABEL_18:
        v16 = operator new();
        v17 = v16;
        *(_BYTE *)(v16 + 8) = 1;
        *(_QWORD *)v16 = &off_24D5D09E8;
        *(_WORD *)(v16 + 10) = 0;
        v18 = (_WORD *)(v16 + 10);
        v19 = v212;
        if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
        {
          v21 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
            goto LABEL_296;
          v22 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
          if (v22 <= v21 + 1)
            v22 = v21 + 1;
          if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v23);
          else
            v24 = 0;
          v25 = (uint64_t *)&v24[8 * v21];
          v26 = &v24[8 * v23];
          *v25 = v17;
          v20 = v25 + 1;
          v28 = (char *)*((_QWORD *)&v211 + 1);
          v27 = (char *)v212;
          if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *--v25 = v29;
            }
            while (v27 != v28);
            v27 = (char *)*((_QWORD *)&v211 + 1);
          }
          *((_QWORD *)&v211 + 1) = v25;
          *(_QWORD *)&v212 = v20;
          *((_QWORD *)&v212 + 1) = v26;
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v212 = v16;
          v20 = (_QWORD *)(v19 + 8);
        }
        *(_QWORD *)&v212 = v20;
        v208((uint64_t)v207, v18);
      }
      else
      {
        if (!v15)
          goto LABEL_295;
        ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke((uint64_t)v207, v15 + 5);
      }
      v30 = (const void **)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
      {
        while (*((_BYTE *)*v30 + 8) != 2)
        {
          if (++v30 == (const void **)v212)
            goto LABEL_42;
        }
      }
      if (v30 == (const void **)v212)
      {
LABEL_42:
        v33 = operator new();
        v34 = v33;
        *(_BYTE *)(v33 + 8) = 2;
        *(_QWORD *)v33 = &off_24D5D0A38;
        *(_DWORD *)(v33 + 10) = 0;
        v32 = (_DWORD *)(v33 + 10);
        v35 = v212;
        if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
        {
          v37 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            goto LABEL_296;
          v38 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
          if (v38 <= v37 + 1)
            v38 = v37 + 1;
          if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v39);
          else
            v40 = 0;
          v41 = (uint64_t *)&v40[8 * v37];
          v42 = &v40[8 * v39];
          *v41 = v34;
          v36 = v41 + 1;
          v44 = (char *)*((_QWORD *)&v211 + 1);
          v43 = (char *)v212;
          if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v41 = v45;
            }
            while (v43 != v44);
            v43 = (char *)*((_QWORD *)&v211 + 1);
          }
          *((_QWORD *)&v211 + 1) = v41;
          *(_QWORD *)&v212 = v36;
          *((_QWORD *)&v212 + 1) = v42;
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v212 = v33;
          v36 = (_QWORD *)(v35 + 8);
        }
        *(_QWORD *)&v212 = v36;
      }
      else
      {
        if (!v31)
          goto LABEL_295;
        v32 = v31 + 10;
      }
      *v32 = 1;
      if (TrafficDescriptor::hasDnnInfo((TrafficDescriptor *)v218))
      {
        v203[0] = v13;
        v203[1] = 0x40000000;
        v204 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3;
        v205 = &__block_descriptor_tmp_175_0;
        v206 = v218;
        v46 = (const void **)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
        {
          while (*((_BYTE *)*v46 + 8) != 17)
          {
            if (++v46 == (const void **)v212)
              goto LABEL_67;
          }
        }
        if (v46 == (const void **)v212)
        {
LABEL_67:
          v48 = operator new();
          v49 = v48;
          *(_BYTE *)(v48 + 8) = 17;
          *(_QWORD *)(v48 + 16) = 0;
          v50 = (std::string *)(v48 + 16);
          *(_QWORD *)v48 = off_24D5D0A88;
          *(_QWORD *)(v48 + 24) = 0;
          *(_QWORD *)(v48 + 32) = 0;
          v51 = v212;
          if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
          {
            v53 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
            if ((unint64_t)(v53 + 1) >> 61)
              goto LABEL_296;
            v54 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
            if (v54 <= v53 + 1)
              v54 = v53 + 1;
            if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v55);
            else
              v56 = 0;
            v57 = (uint64_t *)&v56[8 * v53];
            v58 = &v56[8 * v55];
            *v57 = v49;
            v52 = v57 + 1;
            v60 = (char *)*((_QWORD *)&v211 + 1);
            v59 = (char *)v212;
            if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
            {
              do
              {
                v61 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *--v57 = v61;
              }
              while (v59 != v60);
              v59 = (char *)*((_QWORD *)&v211 + 1);
            }
            *((_QWORD *)&v211 + 1) = v57;
            *(_QWORD *)&v212 = v52;
            *((_QWORD *)&v212 + 1) = v58;
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v212 = v48;
            v52 = (_QWORD *)(v51 + 8);
          }
          *(_QWORD *)&v212 = v52;
          v204((uint64_t)v203, v50);
        }
        else
        {
          if (!v47)
            goto LABEL_295;
          ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3((uint64_t)v203, (std::string *)(v47 + 16));
        }
      }
      if (TrafficDescriptor::hasBundleInfo((TrafficDescriptor *)v218))
      {
        v196[0] = v13;
        v196[1] = 1174405120;
        v197 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4;
        v198 = &__block_descriptor_tmp_176;
        v199 = v10;
        v200 = v9;
        v62 = (unint64_t *)&v9->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v202 = v11;
        v201 = v218;
        v64 = (const void **)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
        {
          while (*((_BYTE *)*v64 + 8) != 19)
          {
            if (++v64 == (const void **)v212)
              goto LABEL_94;
          }
        }
        if (v64 == (const void **)v212)
        {
LABEL_94:
          v67 = operator new();
          v68 = v67;
          *(_BYTE *)(v67 + 8) = 19;
          *(_QWORD *)(v67 + 16) = 0;
          v66 = (uint64_t *)(v67 + 16);
          *(_QWORD *)v67 = off_24D5D0AD8;
          *(_QWORD *)(v67 + 24) = 0;
          *(_QWORD *)(v67 + 32) = 0;
          v69 = v212;
          if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
          {
            v71 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
            if ((unint64_t)(v71 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v72 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
            if (v72 <= v71 + 1)
              v72 = v71 + 1;
            if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v73);
            else
              v74 = 0;
            v75 = (uint64_t *)&v74[8 * v71];
            v76 = &v74[8 * v73];
            *v75 = v68;
            v70 = v75 + 1;
            v78 = (char *)*((_QWORD *)&v211 + 1);
            v77 = (char *)v212;
            if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
            {
              do
              {
                v79 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *--v75 = v79;
              }
              while (v77 != v78);
              v77 = (char *)*((_QWORD *)&v211 + 1);
            }
            *((_QWORD *)&v211 + 1) = v75;
            *(_QWORD *)&v212 = v70;
            *((_QWORD *)&v212 + 1) = v76;
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_QWORD *)v212 = v67;
            v70 = (_QWORD *)(v69 + 8);
          }
          *(_QWORD *)&v212 = v70;
        }
        else
        {
          if (!v65)
            __cxa_bad_cast();
          v66 = (uint64_t *)(v65 + 16);
        }
        v197((uint64_t)v196, v66);
        v80 = v200;
        if (v200)
        {
          v81 = (unint64_t *)&v200->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      if (v220[0])
      {
        v83 = HIBYTE(v219);
        if (v219 < 0)
          v83 = v219;
        if (v83)
        {
          v192[0] = v13;
          v192[1] = 0x40000000;
          v193 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_177;
          v194 = &__block_descriptor_tmp_178_0;
          v195 = v218;
          v84 = (const void **)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
          {
            while (*((_BYTE *)*v84 + 8) != 18)
            {
              if (++v84 == (const void **)v212)
                goto LABEL_127;
            }
          }
          if (v84 == (const void **)v212)
          {
LABEL_127:
            v86 = operator new();
            v87 = v86;
            *(_BYTE *)(v86 + 8) = 18;
            *(_QWORD *)(v86 + 16) = 0;
            v88 = v86 + 16;
            *(_QWORD *)v86 = off_24D5D0B28;
            *(_QWORD *)(v86 + 24) = 0;
            *(_QWORD *)(v86 + 32) = 0;
            v89 = v212;
            if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
            {
              v91 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_296;
              v92 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
              if (v92 <= v91 + 1)
                v92 = v91 + 1;
              if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v92;
              if (v93)
                v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v93);
              else
                v94 = 0;
              v95 = (uint64_t *)&v94[8 * v91];
              v96 = &v94[8 * v93];
              *v95 = v87;
              v90 = v95 + 1;
              v98 = (char *)*((_QWORD *)&v211 + 1);
              v97 = (char *)v212;
              if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
              {
                do
                {
                  v99 = *((_QWORD *)v97 - 1);
                  v97 -= 8;
                  *--v95 = v99;
                }
                while (v97 != v98);
                v97 = (char *)*((_QWORD *)&v211 + 1);
              }
              *((_QWORD *)&v211 + 1) = v95;
              *(_QWORD *)&v212 = v90;
              *((_QWORD *)&v212 + 1) = v96;
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v212 = v86;
              v90 = (_QWORD *)(v89 + 8);
            }
            *(_QWORD *)&v212 = v90;
            v193((uint64_t)v192, v88);
          }
          else
          {
            if (!v85)
              goto LABEL_295;
            ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_177((uint64_t)v192, (uint64_t)v85 + 16);
          }
        }
      }
      if ((_BYTE)v221 && (CSIPacketAddress::isZeroIP((CSIPacketAddress *)&v220[8]) & 1) == 0)
      {
        v229 = 0;
        v230 = 0;
        v231 = 0;
        if (!(_BYTE)v221)
          std::__throw_bad_optional_access[abi:ne180100]();
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v229, (const CSIPacketAddress *)&v220[8]);
        if (CSIPacketAddress::isIPv4(v100))
        {
          *(_QWORD *)&buf = v13;
          *((_QWORD *)&buf + 1) = 1174405120;
          v238 = (void (*)(void))___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_179;
          v239 = &__block_descriptor_tmp_180_0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v240, (const CSIPacketAddress *)&v229);
          v101 = (const void **)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
          {
            while (*((_BYTE *)*v101 + 8) != 20)
            {
              if (++v101 == (const void **)v212)
                goto LABEL_157;
            }
          }
          if (v101 == (const void **)v212)
          {
LABEL_157:
            v102 = operator new();
            v103 = v102;
            *(_BYTE *)(v102 + 8) = 20;
            *(_QWORD *)(v102 + 16) = 0;
            *(_QWORD *)v102 = &off_24D5D0B78;
            *(_QWORD *)(v102 + 24) = 0;
            *(_QWORD *)(v102 + 32) = 0;
            v104 = v212;
            if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
            {
              v107 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
              if ((unint64_t)(v107 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v108 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
              if (v108 <= v107 + 1)
                v108 = v107 + 1;
              if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
                v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v109);
              else
                v110 = 0;
              v111 = (uint64_t *)&v110[8 * v107];
              v112 = &v110[8 * v109];
              *v111 = v103;
              v105 = v111 + 1;
              v114 = (char *)*((_QWORD *)&v211 + 1);
              v113 = (char *)v212;
              if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
              {
                do
                {
                  v115 = *((_QWORD *)v113 - 1);
                  v113 -= 8;
                  *--v111 = v115;
                }
                while (v113 != v114);
                v113 = (char *)*((_QWORD *)&v211 + 1);
              }
              *((_QWORD *)&v211 + 1) = v111;
              *(_QWORD *)&v212 = v105;
              *((_QWORD *)&v212 + 1) = v112;
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v212 = v102;
              v105 = (_QWORD *)(v104 + 8);
            }
            *(_QWORD *)&v212 = v105;
          }
          {
            __cxa_bad_cast();
          }
          goto LABEL_176;
        }
        if (CSIPacketAddress::isIPv6((CSIPacketAddress *)&v229))
        {
          *(_QWORD *)&buf = v13;
          *((_QWORD *)&buf + 1) = 1174405120;
          v238 = (void (*)(void))___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_181;
          v239 = &__block_descriptor_tmp_182_0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v240, (const CSIPacketAddress *)&v229);
          qmi::MutableMessageBase::getTLV<wds::tlv::Ipv6AddrList>(&v211);
LABEL_176:
          v238();
          goto LABEL_177;
        }
        v106 = *((_QWORD *)v1 + 12);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = "sendPduSessionLookupRequest_sync";
          _os_log_error_impl(&dword_216897000, v106, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: wrong address type", (uint8_t *)&buf, 0xCu);
        }
      }
LABEL_177:
      if (BYTE6(v221) && WORD2(v221))
      {
        v188[0] = v13;
        v188[1] = 0x40000000;
        v189 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_183;
        v190 = &__block_descriptor_tmp_184;
        v191 = v218;
        v116 = (const void **)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
        {
          while (*((_BYTE *)*v116 + 8) != 27)
          {
            if (++v116 == (const void **)v212)
              goto LABEL_186;
          }
        }
        if (v116 == (const void **)v212)
        {
LABEL_186:
          v118 = operator new();
          v119 = v118;
          *(_BYTE *)(v118 + 8) = 27;
          *(_QWORD *)(v118 + 16) = 0;
          v120 = v118 + 16;
          *(_QWORD *)v118 = &off_24D5D0C18;
          *(_QWORD *)(v118 + 24) = 0;
          *(_QWORD *)(v118 + 32) = 0;
          v121 = v212;
          if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
          {
            v123 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
            if ((unint64_t)(v123 + 1) >> 61)
              goto LABEL_296;
            v124 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
            if (v124 <= v123 + 1)
              v124 = v123 + 1;
            if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v125 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v125 = v124;
            if (v125)
              v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v125);
            else
              v126 = 0;
            v127 = (uint64_t *)&v126[8 * v123];
            v128 = &v126[8 * v125];
            *v127 = v119;
            v122 = v127 + 1;
            v130 = (char *)*((_QWORD *)&v211 + 1);
            v129 = (char *)v212;
            if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
            {
              do
              {
                v131 = *((_QWORD *)v129 - 1);
                v129 -= 8;
                *--v127 = v131;
              }
              while (v129 != v130);
              v129 = (char *)*((_QWORD *)&v211 + 1);
            }
            *((_QWORD *)&v211 + 1) = v127;
            *(_QWORD *)&v212 = v122;
            *((_QWORD *)&v212 + 1) = v128;
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_QWORD *)v212 = v118;
            v122 = (_QWORD *)(v121 + 8);
          }
          *(_QWORD *)&v212 = v122;
          v189((uint64_t)v188, v120);
        }
        else
        {
          if (!v117)
            goto LABEL_295;
          ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_183((uint64_t)v188, (uint64_t)v117 + 16);
        }
      }
      if (BYTE12(v221))
      {
        v184[0] = v13;
        v184[1] = 0x40000000;
        v185 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_185;
        v186 = &__block_descriptor_tmp_186;
        v187 = v218;
        v132 = (const void **)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
        {
          while (*((_BYTE *)*v132 + 8) != 30)
          {
            if (++v132 == (const void **)v212)
              goto LABEL_211;
          }
        }
        if (v132 == (const void **)v212)
        {
LABEL_211:
          v134 = operator new();
          v135 = v134;
          *(_BYTE *)(v134 + 8) = 30;
          *(_QWORD *)(v134 + 16) = 0;
          v136 = v134 + 16;
          *(_QWORD *)v134 = &off_24D5D0C68;
          *(_QWORD *)(v134 + 24) = 0;
          *(_QWORD *)(v134 + 32) = 0;
          v137 = v212;
          if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
          {
            v139 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
            if ((unint64_t)(v139 + 1) >> 61)
              goto LABEL_296;
            v140 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
            if (v140 <= v139 + 1)
              v140 = v139 + 1;
            if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v141 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v141 = v140;
            if (v141)
              v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v141);
            else
              v142 = 0;
            v143 = (uint64_t *)&v142[8 * v139];
            v144 = &v142[8 * v141];
            *v143 = v135;
            v138 = v143 + 1;
            v146 = (char *)*((_QWORD *)&v211 + 1);
            v145 = (char *)v212;
            if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
            {
              do
              {
                v147 = *((_QWORD *)v145 - 1);
                v145 -= 8;
                *--v143 = v147;
              }
              while (v145 != v146);
              v145 = (char *)*((_QWORD *)&v211 + 1);
            }
            *((_QWORD *)&v211 + 1) = v143;
            *(_QWORD *)&v212 = v138;
            *((_QWORD *)&v212 + 1) = v144;
            if (v145)
              operator delete(v145);
          }
          else
          {
            *(_QWORD *)v212 = v134;
            v138 = (_QWORD *)(v137 + 8);
          }
          *(_QWORD *)&v212 = v138;
          v185((uint64_t)v184, v136);
        }
        else
        {
          if (!v133)
            goto LABEL_295;
          ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_185((uint64_t)v184, (uint64_t)v133 + 16);
        }
      }
      if (!(_BYTE)v222 || !HIWORD(v221))
      {
LABEL_254:
        v164 = operator new(0x40uLL);
        v164[1] = 0;
        v164[2] = 0;
        *v164 = &off_24D5D0CF0;
        *((_WORD *)v164 + 12) = v12;
        v165 = (uint64_t)v217;
        if (v217)
        {
          if (v217 == v216)
          {
            v164[7] = v164 + 4;
            (*(void (**)(_QWORD *))(v216[0] + 24))(v216);
            goto LABEL_259;
          }
          v165 = (*(uint64_t (**)(void))(*v217 + 16))();
        }
        v164[7] = v165;
LABEL_259:
        v166 = (std::__shared_weak_count *)*((_QWORD *)v1 + 54);
        *((_QWORD *)v1 + 53) = v164 + 3;
        *((_QWORD *)v1 + 54) = v164;
        if (v166)
        {
          v167 = (unint64_t *)&v166->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        v178 = QMIServiceMsg::create();
        v229 = v13;
        v230 = 1174405120;
        v231 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4_189;
        v232 = &__block_descriptor_tmp_191;
        v233 = v1;
        v236 = v12;
        v169 = v234;
        v170 = (uint64_t)v217;
        if (v217)
        {
          if (v217 == v216)
          {
            v235 = v234;
            (*(void (**)(_QWORD *, _BYTE *))(v216[0] + 24))(v216, v234);
LABEL_269:
            aBlock[0] = v13;
            aBlock[1] = 0x40000000;
            aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16PduSessionLookup8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            aBlock[3] = &unk_24D5D0D38;
            aBlock[4] = &v229;
            v171 = _Block_copy(aBlock);
            v179 = v171;
            if (v178)
            {
              qmi::Client::send();
              v171 = v179;
            }
            if (v171)
              _Block_release(v171);
            if (v235 == v234)
            {
              v172 = 4;
            }
            else
            {
              if (!v235)
                goto LABEL_278;
              v172 = 5;
              v169 = v235;
            }
            (*(void (**)(_QWORD *))(*v169 + 8 * v172))(v169);
LABEL_278:
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v211);
            v9 = v214;
            if (!v214)
              goto LABEL_283;
            goto LABEL_279;
          }
          v170 = (*(uint64_t (**)(void))(*v217 + 16))();
        }
        v235 = (_BYTE *)v170;
        goto LABEL_269;
      }
      v180[0] = v13;
      v180[1] = 0x40000000;
      v181 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_187;
      v182 = &__block_descriptor_tmp_188;
      v183 = v218;
      v148 = (const void **)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1) != (_QWORD)v212)
      {
        while (*((_BYTE *)*v148 + 8) != 23)
        {
          if (++v148 == (const void **)v212)
            goto LABEL_237;
        }
      }
      if (v148 != (const void **)v212)
      {
        if (v149)
        {
          ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_187((uint64_t)v180, (uint64_t)v149 + 16);
          goto LABEL_254;
        }
LABEL_295:
        __cxa_bad_cast();
      }
LABEL_237:
      v150 = operator new();
      v151 = v150;
      *(_BYTE *)(v150 + 8) = 23;
      *(_QWORD *)(v150 + 16) = 0;
      v152 = v150 + 16;
      *(_QWORD *)v150 = &off_24D5D0CB8;
      *(_QWORD *)(v150 + 24) = 0;
      *(_QWORD *)(v150 + 32) = 0;
      v153 = v212;
      if ((unint64_t)v212 < *((_QWORD *)&v212 + 1))
      {
        *(_QWORD *)v212 = v150;
        v154 = (_QWORD *)(v153 + 8);
LABEL_253:
        *(_QWORD *)&v212 = v154;
        v181((uint64_t)v180, v152);
        goto LABEL_254;
      }
      v155 = (uint64_t)(v212 - *((_QWORD *)&v211 + 1)) >> 3;
      if (!((unint64_t)(v155 + 1) >> 61))
      {
        v156 = (uint64_t)(*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1)) >> 2;
        if (v156 <= v155 + 1)
          v156 = v155 + 1;
        if (*((_QWORD *)&v212 + 1) - *((_QWORD *)&v211 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v157 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v157 = v156;
        if (v157)
          v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v212 + 8, v157);
        else
          v158 = 0;
        v159 = (uint64_t *)&v158[8 * v155];
        v160 = &v158[8 * v157];
        *v159 = v151;
        v154 = v159 + 1;
        v162 = (char *)*((_QWORD *)&v211 + 1);
        v161 = (char *)v212;
        if ((_QWORD)v212 != *((_QWORD *)&v211 + 1))
        {
          do
          {
            v163 = *((_QWORD *)v161 - 1);
            v161 -= 8;
            *--v159 = v163;
          }
          while (v161 != v162);
          v161 = (char *)*((_QWORD *)&v211 + 1);
        }
        *((_QWORD *)&v211 + 1) = v159;
        *(_QWORD *)&v212 = v154;
        *((_QWORD *)&v212 + 1) = v160;
        if (v161)
          operator delete(v161);
        goto LABEL_253;
      }
LABEL_296:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
  }
  return this;
}

void sub_21695539C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char *a68;
  char a69;
  char *v69;
  uint64_t v70;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a53);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  v69 = a68;
  if (a68 == &a65)
  {
    v70 = 4;
    v69 = &a65;
  }
  else
  {
    if (!a68)
      goto LABEL_6;
    v70 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
LABEL_6:
  std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>::~pair((uint64_t)&a69);
}

void std::shared_ptr<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD v33[2];
  char *v34;
  char *v35;
  uint64_t *v36;
  __int128 v37;
  void *__p[2];
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  std::vector<wds::tlv::AppInfo>::__clear[abi:ne180100](a2);
  *(_OWORD *)__p = 0u;
  v39 = 0u;
  v37 = 0u;
  LOBYTE(v37) = (*(uint64_t (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), (char *)&v37 + 1);
  v4 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)(v4 + 72))
    std::__throw_bad_optional_access[abi:ne180100]();
  v5 = *(char *)(v4 + 71);
  if (v5 < 0)
  {
    v6 = *(char **)(v4 + 48);
    v7 = *(_QWORD *)(v4 + 56);
    if (!v7)
      goto LABEL_25;
  }
  else
  {
    v6 = (char *)(v4 + 48);
    v7 = *(unsigned __int8 *)(v4 + 71);
    if (!(_BYTE)v5)
      goto LABEL_25;
  }
  v8 = &v6[v7];
  v9 = (_BYTE *)v39;
  do
  {
    v10 = *v6;
    if ((unint64_t)v9 >= *((_QWORD *)&v39 + 1))
    {
      v12 = (unint64_t)__p[1];
      v13 = v9 - (char *)__p[1];
      v14 = v9 - (char *)__p[1] + 1;
      if (v14 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = *((_QWORD *)&v39 + 1) - (unint64_t)__p[1];
      if (2 * (*((_QWORD *)&v39 + 1) - (unint64_t)__p[1]) > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v13];
      v19 = &v17[v13];
      *v19 = v10;
      v11 = v19 + 1;
      if (v9 != (_BYTE *)v12)
      {
        v20 = &v9[~v12];
        do
        {
          v21 = *--v9;
          (v20--)[(_QWORD)v17] = v21;
        }
        while (v9 != (_BYTE *)v12);
        v9 = __p[1];
        v18 = v17;
      }
      __p[1] = v18;
      *(_QWORD *)&v39 = v11;
      *((_QWORD *)&v39 + 1) = &v17[v16];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v9 = v10;
      v11 = v9 + 1;
    }
    *(_QWORD *)&v39 = v11;
    ++v6;
    v9 = v11;
  }
  while (v6 != v8);
LABEL_25:
  v22 = a2[2];
  v23 = a2[1];
  if (v23 >= v22)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 4);
    if (v26 + 1 > 0x555555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 4);
    v28 = 2 * v27;
    if (2 * v27 <= v26 + 1)
      v28 = v26 + 1;
    if (v27 >= 0x2AAAAAAAAAAAAAALL)
      v29 = 0x555555555555555;
    else
      v29 = v28;
    v36 = a2 + 2;
    if (v29)
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::AppInfo>>((uint64_t)(a2 + 2), v29);
    else
      v30 = 0;
    v31 = &v30[48 * v26];
    v33[0] = v30;
    v33[1] = v31;
    v34 = v31;
    v35 = &v30[48 * v29];
    v32 = v37;
    v31[16] = (char)__p[0];
    *(_OWORD *)v31 = v32;
    *((_QWORD *)v31 + 4) = 0;
    *((_QWORD *)v31 + 5) = 0;
    *((_QWORD *)v31 + 3) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v31 + 3, __p[1], v39, v39 - (unint64_t)__p[1]);
    v34 += 48;
    std::vector<wds::tlv::AppInfo>::__swap_out_circular_buffer(a2, v33);
    v25 = a2[1];
    std::__split_buffer<wds::tlv::AppInfo>::~__split_buffer((uint64_t)v33);
  }
  else
  {
    v24 = v37;
    *(_BYTE *)(v23 + 16) = __p[0];
    *(_OWORD *)v23 = v24;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v23 + 24), __p[1], v39, v39 - (unint64_t)__p[1]);
    v25 = v23 + 48;
    a2[1] = v23 + 48;
  }
  a2[1] = v25;
  if (__p[1])
  {
    *(void **)&v39 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_216955824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 + 8) = v20;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c68_ZTSKNSt3__110shared_ptrI39BBDataCommandDriverEventHandlerObserverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c68_ZTSKNSt3__110shared_ptrI39BBDataCommandDriverEventHandlerObserverEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_177(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  unint64_t v13;
  std::__split_buffer<std::string>::pointer end;
  __int128 v15;
  std::string __p;
  std::__split_buffer<std::string> v17;

  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  memset(&__p, 0, sizeof(__p));
  v4 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v4 + 176))
    std::__throw_bad_optional_access[abi:ne180100]();
  std::string::operator=(&__p, (const std::string *)(v4 + 152));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    v17.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    else
      v12 = 0;
    end = v12 + v8;
    v17.__first_ = v12;
    v17.__begin_ = end;
    v17.__end_ = end;
    v17.__end_cap_.__value_ = &v12[v11];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(end, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      end = v17.__end_;
    }
    else
    {
      v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
    }
    v17.__end_ = end + 1;
    std::vector<wds::tlv::FqdnInfo>::__swap_out_circular_buffer((uint64_t *)a2, &v17);
    v13 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v17);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v6 = v7;
    }
    v13 = v6 + 24;
    *(_QWORD *)(a2 + 8) = v13;
  }
  *(_QWORD *)(a2 + 8) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216955A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_179(uint64_t a1, uint64_t **a2)
{
  CSIPacketAddress *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  char v19[24];

  a2[1] = *a2;
  v3 = (CSIPacketAddress *)(a1 + 32);
  if (CSIPacketAddress::getPrefixLen((CSIPacketAddress *)(a1 + 32)))
  {
    CSIPacketAddress::ipv4PrefixLenToMaskAddr(v3);
    v4 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v19) << 32;
  }
  else
  {
    v4 = 0xFFFFFFFF00000000;
  }
  v5 = CSIPacketAddress::toIPv4LE(v3);
  v6 = (unint64_t)a2[2];
  v7 = a2[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a2;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a2;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a2 + 2), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4 | v5;
    v8 = v14 + 1;
    v17 = *a2;
    v16 = (char *)a2[1];
    if (v16 != (char *)*a2)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != (char *)v17);
      v16 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = (uint64_t *)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v4 | v5;
    v8 = v7 + 1;
  }
  a2[1] = v8;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_181(uint64_t a1, char **a2)
{
  CSIPacketAddress *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char PrefixLen;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  a2[1] = *a2;
  v19 = 0uLL;
  PrefixLen = 0x80;
  v3 = (CSIPacketAddress *)(a1 + 32);
  if (CSIPacketAddress::getPrefixLen((CSIPacketAddress *)(a1 + 32)))
    PrefixLen = CSIPacketAddress::getPrefixLen(v3);
  CSIPacketAddress::toIPv6(v3, (unsigned __int8 *)&v19);
  v4 = (unint64_t)a2[2];
  v5 = (unint64_t)a2[1];
  if (v5 >= v4)
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * (v5 - (_QWORD)*a2);
    v9 = v8 + 1;
    if (v8 + 1 >= 0xF0F0F0F0F0F0F10)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * (v4 - (_QWORD)*a2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x787878787878787)
      v11 = 0xF0F0F0F0F0F0F0FLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv6AddrInfo>>((uint64_t)(a2 + 2), v11);
    else
      v12 = 0;
    v13 = &v12[17 * v8];
    v14 = &v12[17 * v11];
    v15 = v19;
    v13[16] = PrefixLen;
    *(_OWORD *)v13 = v15;
    v7 = v13 + 17;
    v17 = *a2;
    v16 = a2[1];
    if (v16 != *a2)
    {
      do
      {
        v18 = *(_OWORD *)(v16 - 17);
        *(v13 - 1) = *(v16 - 1);
        *(_OWORD *)(v13 - 17) = v18;
        v13 -= 17;
        v16 -= 17;
      }
      while (v16 != v17);
      v16 = *a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = v19;
    *(_BYTE *)(v5 + 16) = PrefixLen;
    *(_OWORD *)v5 = v6;
    v7 = (char *)(v5 + 17);
  }
  a2[1] = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_183(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _WORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  __int16 v16;

  v2 = *(_WORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 214))
    std::__throw_bad_optional_access[abi:ne180100]();
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v2 >= v6)
  {
    v8 = v6 - (_QWORD)v2;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5, v10);
    v12 = *(_WORD **)a2;
    v13 = *(_WORD **)(a2 + 8);
    v15 = &v11[v14];
    *v11 = *(_WORD *)(v3 + 212);
    v7 = v11 + 1;
    while (v13 != v12)
    {
      v16 = *--v13;
      *--v11 = v16;
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v2 = *(_WORD *)(v3 + 212);
    v7 = v2 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_185(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  int *v17;
  int v18;

  v2 = *(int **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 220))
    std::__throw_bad_optional_access[abi:ne180100]();
  v5 = *(unsigned __int16 *)(v3 + 216);
  v6 = *(unsigned __int16 *)(v3 + 218);
  v7 = a2 + 16;
  v8 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v2 >= v8)
  {
    v10 = v8 - (_QWORD)v2;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>(v7, v12);
    v15 = &v13[v14];
    *v13 = v5 | (v6 << 16);
    v9 = v13 + 1;
    v17 = *(int **)a2;
    v16 = *(int **)(a2 + 8);
    if (v16 != *(int **)a2)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = *(int **)a2;
    }
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v2 = v5 | (v6 << 16);
    v9 = v2 + 1;
  }
  *(_QWORD *)(a2 + 8) = v9;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_187(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  __int16 v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;

  v2 = *(_BYTE **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 224))
    std::__throw_bad_optional_access[abi:ne180100]();
  v5 = *(_WORD *)(v3 + 222);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v2 >= v6)
  {
    v8 = v6 - (_QWORD)v2;
    v9 = 2 * v8;
    if (2 * v8 <= 1)
      v9 = 1;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = operator new(v10);
    v12 = &v11[v10];
    *v11 = v5;
    v7 = v11 + 1;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v11 + 1;
    *(_QWORD *)(a2 + 16) = v12;
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v5;
    v7 = v2 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4_189(uint64_t a1, uint64_t a2)
{
  int v2;
  QMIDataCommandDriver *v4;
  NSObject *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  _BYTE __p[12];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v4 = *(QMIDataCommandDriver **)(a1 + 32);
    v5 = *((_QWORD *)v4 + 12);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = qmi::asString();
      v11 = *(unsigned __int16 *)(a1 + 72);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "sendPduSessionLookupRequest_sync_block_invoke_4";
      v13 = 1024;
      v14 = v2;
      v15 = 2080;
      v16 = v10;
      v17 = 1024;
      v18 = v11;
      _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: failed to perform lookup: 0x%x (%s), tid %u", __p, 0x22u);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_216AC4FCA);
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, __p);
    if (SBYTE3(v16) < 0)
      operator delete(*(void **)__p);
    v7 = (unsigned __int16 *)*((_QWORD *)v4 + 53);
    if (v7 && *v7 == *(unsigned __int16 *)(a1 + 72))
    {
      std::shared_ptr<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::reset[abi:ne180100]((_QWORD *)v4 + 53);
      QMIDataCommandDriver::processPendingLookupRequests_sync(v4);
    }
    else
    {
      v8 = *((_QWORD *)v4 + 12);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(unsigned __int16 *)(a1 + 72);
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "sendPduSessionLookupRequest_sync_block_invoke";
        v13 = 1024;
        v14 = v9;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#N %s: WDS PduSessionLookup: somebody cleaned pending transaction for tid %u", __p, 0x12u);
      }
    }
  }
}

void sub_2169560FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c86_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c86_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t QMIDataCommandDriver::sliceTrafficDescriptors_sync(QMIDataCommandDriver *this)
{
  return (uint64_t)this + 376;
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::sliceTrafficDescriptors_sync(QMIDataCommandDriver *this)
{
  return (uint64_t)this + 344;
}

uint64_t `anonymous namespace'::processWdsTdInfoInd<wds::TdInfo::Indication,QMIDataCommandDriver::TrafficInfo,ctu::OsLogLogger *,QMIDataCommandDriver::handleWdsTdInfoInd_sync(wds::TdInfo::Indication const&)::$_0,QMIDataCommandDriver::handleWdsTdInfoInd_sync(wds::TdInfo::Indication const&)::$_1>(qmi::MessageBase *a1, uint64_t a2, NSObject ***a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t ***v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t **v22;
  NSObject *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_t *v28;
  NSObject *v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  int v35;
  os_log_t *v36;
  os_log_t v37;
  int v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  uint64_t **v47;
  int v48;
  os_log_t *v49;
  NSObject *v50;
  int v51;
  uint64_t **v52;
  uint64_t **v53;
  int64x2_t *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  os_log_t *v58;
  NSObject *v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  int v68;
  const char *v69;
  NSObject *v70;
  int v71;
  int v72;
  int v73;
  NSObject *v74;
  uint32_t v75;
  os_log_t v76;
  int v77;
  int v78;
  int64x2_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t ***v85;
  uint64_t **v86;
  unsigned int v87;
  BOOL v88;
  uint64_t ***v89;
  NSObject *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  int v105;
  int v106;
  NSObject *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  NSObject *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  std::string *v119;
  std::string **p_size;
  std::string::size_type *v121;
  _BYTE *v122;
  _BYTE *v123;
  std::string *v124;
  __int128 v125;
  uint64_t v126;
  NSObject *v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string *v137;
  uint64_t *v138;
  uint64_t *v139;
  std::string::size_type *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::string *v146;
  CSIPacketAddress **v147;
  uint64_t v148;
  std::string::size_type *v149;
  CSIPacketAddress *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::string *v154;
  CSIPacketAddress **v155;
  uint64_t v156;
  std::string::size_type *v157;
  CSIPacketAddress *v158;
  uint64_t v159;
  __int16 *v160;
  __int16 *v161;
  std::string *v162;
  void **p_data;
  char **v164;
  std::string::size_type *v165;
  __int16 v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  __int16 v177;
  _WORD *v178;
  _WORD *v179;
  std::string *v180;
  void **v181;
  char *v182;
  char *size;
  void **v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  int v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  std::string *v199;
  char *v200;
  std::string::size_type *v201;
  char *v202;
  void **v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  __int16 v214;
  uint64_t *v215;
  os_log_t *v216;
  NSObject *v217;
  int v218;
  int v219;
  uint64_t i;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const std::string *v224;
  uint64_t v225;
  uint64_t k;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  const std::string *v233;
  uint64_t v234;
  uint64_t m;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  const CSIPacketAddress *v242;
  uint64_t v243;
  uint64_t n;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _WORD *v251;
  uint64_t v252;
  uint64_t ii;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  uint64_t jj;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _WORD *v269;
  uint64_t v270;
  uint64_t kk;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t mm;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  const std::string *v288;
  uint64_t v289;
  uint64_t nn;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  os_log_t *v299;
  NSObject *v300;
  int v301;
  TrafficDescriptor *v302;
  TrafficDescriptor *i1;
  os_log_t *v304;
  NSObject *v305;
  uint8_t *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  os_log_t *v316;
  NSObject *v317;
  int v318;
  int v319;
  os_log_t *v320;
  NSObject *v321;
  int v322;
  uint64_t j;
  uint64_t v324;
  uint64_t **v325;
  const std::string *v326;
  const std::string *v327;
  const CSIPacketAddress *v328;
  _WORD *v329;
  _DWORD *v330;
  _WORD *v331;
  uint64_t *v332;
  const std::string *v333;
  TrafficDescriptor *v334;
  uint64_t *v335;
  std::string *v337;
  std::string *v338;
  unsigned int v339;
  _QWORD v340[5];
  _QWORD v341[5];
  _QWORD v342[5];
  _QWORD v343[5];
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  _QWORD v347[5];
  _QWORD v348[5];
  _QWORD v349[5];
  _QWORD v350[5];
  _QWORD v351[5];
  _QWORD v352[5];
  __int128 __dst;
  __int128 v354;
  _QWORD *v355;
  _QWORD v356[5];
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t (*v360)(uint64_t, uint64_t);
  uint64_t (*v361)();
  int v362;
  _QWORD v363[5];
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t (*v367)(uint64_t, uint64_t);
  uint64_t (*v368)();
  int v369;
  uint8_t buf[32];
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  _BYTE v388[24];
  unint64_t v389;
  unint64_t *v390;
  uint64_t v391;

  v391 = *MEMORY[0x24BDAC8D0];
  v364 = 0;
  v365 = &v364;
  v366 = 0x3002000000;
  v367 = __Block_byref_object_copy__251;
  v368 = __Block_byref_object_dispose__252;
  v369 = 0;
  v9 = MEMORY[0x24BDAC760];
  v363[0] = MEMORY[0x24BDAC760];
  v363[1] = 0x40000000;
  v363[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke;
  v363[3] = &unk_24D5D0D60;
  v363[4] = &v364;
  *(_QWORD *)buf = v363;
  qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(a1, (uint64_t)buf);
  v357 = 0;
  v358 = &v357;
  v359 = 0x3002000000;
  v360 = __Block_byref_object_copy__255;
  v361 = __Block_byref_object_dispose__256;
  v362 = 0;
  v356[0] = v9;
  v356[1] = 0x40000000;
  v356[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_257;
  v356[3] = &unk_24D5D0D88;
  v356[4] = &v357;
  *(_QWORD *)buf = v356;
  qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(a1, (uint64_t)buf);
  v335 = (uint64_t *)a2;
  v12 = *(_QWORD *)(a2 + 32);
  v11 = (uint64_t ***)(a2 + 32);
  v10 = v12;
  v13 = (uint64_t **)(v11 - 1);
  v14 = v365;
  if (!v12)
    goto LABEL_12;
  v15 = *((unsigned __int16 *)v365 + 20);
  v16 = v11;
  do
  {
    v17 = *(unsigned __int16 *)(v10 + 32);
    v18 = v17 >= v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v10;
    else
      v19 = (uint64_t *)(v10 + 8);
    if (v18)
      v16 = (uint64_t ***)v10;
    v10 = *v19;
  }
  while (*v19);
  if (v16 == v11 || v15 < *((unsigned __int16 *)v16 + 16))
  {
LABEL_12:
    v20 = *((unsigned __int8 *)v365 + 42);
    if (!*((_BYTE *)v365 + 42))
    {
      v27 = *v335;
      v26 = v335[1];
      if (v26 != *v335)
      {
        do
          v26 = MEMORY[0x2199FDA50](v26 - 304);
        while (v26 != v27);
        v14 = v365;
      }
      v335[1] = v27;
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v13, *((_WORD *)v14 + 20));
      v28 = *a3;
      if (*a3)
      {
        v29 = *v28;
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *((unsigned __int16 *)v365 + 20);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, clearing all TDs (1)", buf, 0x12u);
        }
      }
      goto LABEL_79;
    }
    v21 = *((unsigned __int8 *)v365 + 43);
    if (*((_BYTE *)v365 + 43))
    {
      v22 = (uint64_t **)(v11 - 1);
      v23 = **a3;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((unsigned __int16 *)v14 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v24;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v21;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v20;
        v25 = "#E  TdInfo transactionId: %u, wrong segment: %u of %u (4)";
LABEL_31:
        _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, v25, buf, 0x14u);
        v14 = v365;
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    v42 = v358;
    v43 = *((unsigned __int16 *)v358 + 21);
    if (*((_WORD *)v358 + 21) || !*((_WORD *)v358 + 20))
    {
      v22 = (uint64_t **)(v11 - 1);
      v23 = **a3;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *((unsigned __int16 *)v14 + 20);
        v45 = *((unsigned __int16 *)v42 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v44;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v45;
        v25 = "#E TdInfo transactionId: %u, wrong fragment: %u of %u (3)";
        goto LABEL_31;
      }
LABEL_32:
      v46 = *((_WORD *)v14 + 20);
      v47 = v22;
LABEL_78:
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v47, v46);
LABEL_79:
      v96 = 1;
      goto LABEL_80;
    }
    v58 = *a3;
    if (*a3)
    {
      v59 = *v58;
      if (os_log_type_enabled(*v58, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *((unsigned __int16 *)v14 + 20);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v60;
        _os_log_impl(&dword_216897000, v59, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, starting a new transaction (2)", buf, 0x12u);
      }
    }
    v325 = (uint64_t **)(v11 - 1);
    v355 = 0;
    __dst = 0u;
    v354 = 0u;
    v379 = 0u;
    v380 = 0u;
    v377 = 0u;
    v378 = 0u;
    v375 = 0u;
    v376 = 0u;
    v373 = 0u;
    v374 = 0u;
    v371 = 0u;
    v372 = 0u;
    memset(buf, 0, sizeof(buf));
    v390 = (unint64_t *)&v355;
    v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(1uLL);
    v63 = &v61[24 * v62];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v61, (uint64_t)buf);
    v65 = v64 + 192;
    v79 = vdupq_n_s64(0);
    *(_QWORD *)&v354 = v64;
    *(int64x2_t *)&v388[8] = v79;
    v80 = (unint64_t)v355;
    v355 = v63;
    v389 = v80;
    *(_QWORD *)v388 = v79.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)v388);
    *((_QWORD *)&v354 + 1) = v65;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
    v81 = std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v325, *((_WORD *)v365 + 20), (_WORD *)v365 + 20);
    *(_OWORD *)(v81 + 40) = __dst;
    if (v81 + 40 != (char *)&__dst)
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((uint64_t)(v81 + 56), v354, *((uint64_t *)&v354 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v354 + 1) - v354) >> 6));
    *(_QWORD *)buf = &v354;
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    goto LABEL_63;
  }
  v31 = *((_DWORD *)v16 + 11);
  v32 = *((unsigned __int8 *)v365 + 43);
  v325 = (uint64_t **)(v11 - 1);
  if (v31 == v32)
  {
    v33 = *((_DWORD *)v16 + 13) + 1;
    if (v33 < *((_DWORD *)v16 + 12))
    {
      v34 = v358;
      v35 = *((unsigned __int16 *)v358 + 21);
      v36 = *a3;
      if (v33 == v35)
      {
        if (v36)
        {
          v37 = *v36;
          if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
          {
            v38 = *((unsigned __int16 *)v34 + 20);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v33;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v38;
            v39 = "#I %s: TdInfo transactionId: %u, adding a new fragment %u of %u (5)";
            v40 = v37;
            v41 = 30;
LABEL_41:
            _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, v39, buf, v41);
            goto LABEL_63;
          }
        }
        goto LABEL_63;
      }
      v76 = *v36;
      if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
      {
        v77 = *((unsigned __int16 *)v34 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v35;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v77;
        v69 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (6)";
        v74 = v76;
LABEL_56:
        v75 = 20;
        goto LABEL_57;
      }
LABEL_58:
      v46 = *((_WORD *)v14 + 20);
LABEL_77:
      v47 = v325;
      goto LABEL_78;
    }
    v66 = **a3;
    if (!os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      goto LABEL_58;
    v67 = *((unsigned __int16 *)v358 + 21);
    v68 = *((unsigned __int16 *)v358 + 20);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v67;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v68;
    v69 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (7)";
LABEL_55:
    v74 = v66;
    goto LABEL_56;
  }
  v48 = v31 + 1;
  if ((v31 + 1) >= *((_DWORD *)v16 + 10))
  {
    v70 = **a3;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      v71 = *((unsigned __int8 *)v14 + 42);
      v72 = *((unsigned __int16 *)v358 + 21);
      v73 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v32;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v71;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v72;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v73;
      v69 = "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (10)";
      v74 = v70;
      v75 = 32;
LABEL_57:
      _os_log_impl(&dword_216897000, v74, OS_LOG_TYPE_DEFAULT, v69, buf, v75);
      v14 = v365;
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v49 = *a3;
  if (v48 != v32)
  {
    v66 = *v49;
    if (!os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
      goto LABEL_58;
    v78 = *((unsigned __int8 *)v14 + 42);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v78;
    v69 = "#E TdInfo transactionId: %u, wrong new TD %u of %u (9)";
    goto LABEL_55;
  }
  if (v49)
  {
    v50 = *v49;
    if (os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *((unsigned __int8 *)v14 + 42);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v32;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v51;
      _os_log_impl(&dword_216897000, v50, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, adding a new TD %u of %u (8)", buf, 0x1Eu);
      v32 = *((unsigned __int8 *)v365 + 43);
    }
  }
  v52 = v16[7];
  v53 = v16[8];
  v54 = (int64x2_t *)(v16 + 7);
  v55 = ((char *)v53 - (char *)v52) >> 6;
  v56 = -1431655765 * v55;
  if (0xAAAAAAAAAAAAAAABLL * v55 > v32)
  {
    v57 = **a3;
    if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v56;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    v39 = "#E TdInfo: wrong td array state: size=%u, new td %u";
    v40 = v57;
    v41 = 14;
    goto LABEL_41;
  }
  v379 = 0u;
  v380 = 0u;
  v377 = 0u;
  v378 = 0u;
  v375 = 0u;
  v376 = 0u;
  v373 = 0u;
  v374 = 0u;
  v371 = 0u;
  v372 = 0u;
  memset(buf, 0, sizeof(buf));
  std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(v54, (uint64_t)buf);
  QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
LABEL_63:
  v82 = v365;
  v83 = MEMORY[0x24BDAC760];
  if (!*v11)
    goto LABEL_74;
  v84 = *((unsigned __int16 *)v365 + 20);
  v85 = v11;
  v86 = *v11;
  do
  {
    v87 = *((unsigned __int16 *)v86 + 16);
    v88 = v87 >= v84;
    if (v87 >= v84)
      v89 = (uint64_t ***)v86;
    else
      v89 = (uint64_t ***)(v86 + 1);
    if (v88)
      v85 = (uint64_t ***)v86;
    v86 = *v89;
  }
  while (*v89);
  if (v85 == v11 || v84 < *((unsigned __int16 *)v85 + 16))
  {
LABEL_74:
    v90 = **a3;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      v91 = *((unsigned __int16 *)v82 + 20);
      v92 = *((unsigned __int8 *)v82 + 43);
      v93 = *((unsigned __int8 *)v82 + 42);
      v94 = *((unsigned __int16 *)v358 + 21);
      v95 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v91;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v92;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v93;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v94;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v95;
      _os_log_impl(&dword_216897000, v90, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (11)", buf, 0x20u);
      v82 = v365;
    }
    v46 = *((_WORD *)v82 + 20);
    goto LABEL_77;
  }
  v98 = std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(*v11, v84);
  v99 = v98;
  v100 = *((unsigned __int8 *)v365 + 43);
  *((_DWORD *)v98 + 1) = v100;
  if (!*(_DWORD *)v98)
    *(_DWORD *)v98 = *((unsigned __int8 *)v365 + 42);
  *((_DWORD *)v98 + 3) = *((unsigned __int16 *)v358 + 21);
  *((_DWORD *)v98 + 2) = *((unsigned __int16 *)v358 + 20);
  if (0xAAAAAAAAAAAAAAABLL * ((v98[3] - v98[2]) >> 6) != v100 + 1)
  {
    v107 = **a3;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      v108 = *((unsigned __int16 *)v365 + 20);
      v109 = *((unsigned __int8 *)v365 + 43);
      v110 = *((unsigned __int8 *)v365 + 42);
      v111 = *((unsigned __int16 *)v358 + 21);
      v112 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v108;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v109;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v110;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v111;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v112;
      _os_log_impl(&dword_216897000, v107, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (12)", buf, 0x20u);
    }
    v46 = *((_WORD *)v365 + 20);
    goto LABEL_77;
  }
  *(_QWORD *)v388 = 0;
  *(_QWORD *)&v388[8] = v388;
  *(_QWORD *)&v388[16] = 0x2000000000;
  v389 = 0;
  v352[0] = v83;
  v352[1] = 0x40000000;
  v352[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_260;
  v352[3] = &unk_24D5D0DB0;
  v352[4] = v388;
  *(_QWORD *)buf = v352;
  qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(a1, buf);
  v101 = *(_QWORD *)(*(_QWORD *)&v388[8] + 24);
  if (v101 >= 2)
  {
    v113 = **a3;
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      v114 = wds::asString(v101);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v114;
      _os_log_impl(&dword_216897000, v113, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is about non-Internet traffic: %s", buf, 0xCu);
    }
LABEL_231:
    _Block_object_dispose(v388, 8);
    goto LABEL_233;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__263;
  *(_QWORD *)&v371 = __Block_byref_object_dispose__264;
  *((_QWORD *)&v371 + 1) = 0;
  v372 = 0uLL;
  v351[0] = v83;
  v351[1] = 0x40000000;
  v351[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_265;
  v351[3] = &unk_24D5D0DD8;
  v351[4] = buf;
  v344 = v351;
  qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v344);
  v103 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v102 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  if (v103 != v102)
  {
    while (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a5 + 64))(*(_QWORD *)a5, a5[4], v103) & 1) == 0)
    {
      v103 += 24;
      if (v103 == v102)
      {
        v104 = **a3;
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst) = 0;
          _os_log_impl(&dword_216897000, v104, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for the corporate DNN", (uint8_t *)&__dst, 2u);
        }
        v105 = 0;
        v106 = 47;
        goto LABEL_97;
      }
    }
  }
  v106 = 0;
  v105 = 1;
LABEL_97:
  _Block_object_dispose(buf, 8);
  *(_QWORD *)&__dst = (char *)&v371 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  v115 = MEMORY[0x24BDAC760];
  if (!v105)
    goto LABEL_232;
  v339 = *((_DWORD *)v99 + 1);
  v338 = (std::string *)v99[2];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__267;
  *(_QWORD *)&v371 = __Block_byref_object_dispose__268;
  *((_QWORD *)&v371 + 1) = 0;
  v372 = 0uLL;
  v350[0] = MEMORY[0x24BDAC760];
  v350[1] = 0x40000000;
  v350[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_269;
  v350[3] = &unk_24D5D0E00;
  v350[4] = buf;
  v344 = v350;
  qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(a1, (uint64_t)&v344);
  v117 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v116 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  if (v117 == v116)
  {
    v106 = 0;
    v118 = 1;
    goto LABEL_124;
  }
  LOBYTE(v118) = 0;
  v119 = &v338[8 * v339];
  p_size = (std::string **)&v119[1].__r_.__value_.__l.__size_;
  v337 = v119 + 1;
  v121 = &v119[1].__r_.__value_.__r.__words[2];
  do
  {
    while (1)
    {
      v122 = *(_BYTE **)(v117 + 24);
      v123 = *(_BYTE **)(v117 + 32);
      if (v122 == v123)
        goto LABEL_103;
      if (*(_BYTE *)v117)
        break;
LABEL_106:
      __dst = 0uLL;
      *(_QWORD *)&v354 = 0;
      if (v123 == v122)
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      std::string::basic_string[abi:ne180100](&__dst, v122, v123 - v122);
      v124 = *p_size;
      if ((unint64_t)*p_size >= *v121)
      {
        v126 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)v337, &__dst);
      }
      else
      {
        if (SBYTE7(v354) < 0)
        {
          std::string::__init_copy_ctor_external(*p_size, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
        }
        else
        {
          v125 = __dst;
          v124->__r_.__value_.__r.__words[2] = v354;
          *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v125;
        }
        v126 = (uint64_t)&v124[1];
        *p_size = v124 + 1;
      }
      *p_size = (std::string *)v126;
      if (SBYTE7(v354) < 0)
        operator delete((void *)__dst);
      v117 += 48;
      v118 = 1;
      if (v117 == v116)
      {
        v106 = 0;
LABEL_119:
        v115 = MEMORY[0x24BDAC760];
        goto LABEL_124;
      }
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a4 + 48))(*(_QWORD *)a4, a4[4], v117 + 1))
    {
      v122 = *(_BYTE **)(v117 + 24);
      v123 = *(_BYTE **)(v117 + 32);
      goto LABEL_106;
    }
LABEL_103:
    v117 += 48;
  }
  while (v117 != v116);
  if ((v118 & 1) != 0)
  {
    v106 = 0;
    v118 = 1;
    goto LABEL_119;
  }
  v127 = **a3;
  v128 = os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT);
  v115 = MEMORY[0x24BDAC760];
  if (v128)
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_216897000, v127, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for iOS apps", (uint8_t *)&__dst, 2u);
  }
  v118 = 0;
  v106 = 47;
LABEL_124:
  _Block_object_dispose(buf, 8);
  *(_QWORD *)&__dst = (char *)&v371 + 8;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (v118)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__263;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__264;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v349[0] = v115;
    v349[1] = 0x40000000;
    v349[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_271;
    v349[3] = &unk_24D5D0E28;
    v349[4] = buf;
    v344 = v349;
    qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v344);
    v130 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v129 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v130 != v129)
    {
      v131 = (uint64_t *)&v338[8 * v339];
      do
      {
        if (*(char *)(v130 + 23) < 0)
          v132 = *(_QWORD *)(v130 + 8);
        else
          v132 = *(unsigned __int8 *)(v130 + 23);
        if (v132)
        {
          v133 = v131[1];
          if (v133 >= v131[2])
          {
            v134 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v131, (__int128 *)v130);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v131, (__int128 *)v130);
            v134 = v133 + 24;
          }
          v131[1] = v134;
        }
        v130 += 24;
      }
      while (v130 != v129);
    }
    _Block_object_dispose(buf, 8);
    *(_QWORD *)&__dst = (char *)&v371 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__273;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__274;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v348[0] = v115;
    v348[1] = 0x40000000;
    v348[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_275;
    v348[3] = &unk_24D5D0E50;
    v348[4] = buf;
    v344 = v348;
    qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(a1, (uint64_t)&v344);
    v136 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v135 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v136 != v135)
    {
      v137 = &v338[8 * v339];
      v138 = (uint64_t *)&v137[2];
      v139 = (uint64_t *)&v137[2].__r_.__value_.__l.__size_;
      v140 = &v137[2].__r_.__value_.__r.__words[2];
      do
      {
        if (*(char *)(v136 + 23) < 0)
          v141 = *(_QWORD *)(v136 + 8);
        else
          v141 = *(unsigned __int8 *)(v136 + 23);
        if (v141)
        {
          v142 = *v139;
          if (*v139 >= *v140)
          {
            v143 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v138, (__int128 *)v136);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v138, (__int128 *)v136);
            v143 = v142 + 24;
          }
          *v139 = v143;
        }
        v136 += 24;
      }
      while (v136 != v135);
    }
    _Block_object_dispose(buf, 8);
    *(_QWORD *)&__dst = (char *)&v371 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__277;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__278;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v347[0] = MEMORY[0x24BDAC760];
    v347[1] = 0x40000000;
    v347[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_279;
    v347[3] = &unk_24D5D0E78;
    v347[4] = buf;
    *(_QWORD *)&__dst = v347;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(a1, (uint64_t)&__dst);
    v144 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v145 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v144 != v145)
    {
      v146 = &v338[8 * v339];
      v147 = (CSIPacketAddress **)&v146[3].__r_.__value_.__l.__size_;
      v148 = (uint64_t)&v146[3];
      v149 = &v146[3].__r_.__value_.__r.__words[2];
      do
      {
        __dst = 0uLL;
        *(_QWORD *)&v354 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&__dst);
        if (*(_DWORD *)(v144 + 4))
        {
          v344 = 0;
          v345 = 0;
          v346 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v344);
          CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&v344);
          CSIPacketAddress::maskToPrefix((CSIPacketAddress *)&v344);
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        v150 = *v147;
        if ((unint64_t)*v147 >= *v149)
        {
          v151 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v148, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v147, (const CSIPacketAddress *)&__dst);
          v151 = (uint64_t)v150 + 24;
          *v147 = (CSIPacketAddress *)((char *)v150 + 24);
        }
        *v147 = (CSIPacketAddress *)v151;
        v144 += 8;
      }
      while (v144 != v145);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__281;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__282;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v343[0] = MEMORY[0x24BDAC760];
    v343[1] = 0x40000000;
    v343[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_283;
    v343[3] = &unk_24D5D0EA0;
    v343[4] = buf;
    *(_QWORD *)&__dst = v343;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(a1, (uint64_t)&__dst);
    v153 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v152 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v153 != v152)
    {
      v154 = &v338[8 * v339];
      v155 = (CSIPacketAddress **)&v154[3].__r_.__value_.__l.__size_;
      v156 = (uint64_t)&v154[3];
      v157 = &v154[3].__r_.__value_.__r.__words[2];
      do
      {
        __dst = 0uLL;
        *(_QWORD *)&v354 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv6Address((CSIPacketAddress *)&__dst, (const unsigned __int8 *)v153);
        if (*(char *)(v153 + 16) >= 1)
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        v158 = *v155;
        if ((unint64_t)*v155 >= *v157)
        {
          v159 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v156, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v155, (const CSIPacketAddress *)&__dst);
          v159 = (uint64_t)v158 + 24;
          *v155 = (CSIPacketAddress *)((char *)v158 + 24);
        }
        *v155 = (CSIPacketAddress *)v159;
        v153 += 17;
      }
      while (v153 != v152);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__285;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__286;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v342[0] = MEMORY[0x24BDAC760];
    v342[1] = 0x40000000;
    v342[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_287;
    v342[3] = &unk_24D5D0EC8;
    v342[4] = buf;
    *(_QWORD *)&__dst = v342;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(a1, (uint64_t)&__dst);
    v160 = *(__int16 **)(*(_QWORD *)&buf[8] + 40);
    v161 = *(__int16 **)(*(_QWORD *)&buf[8] + 48);
    if (v160 != v161)
    {
      v162 = &v338[8 * v339];
      p_data = (void **)&v162[4].__r_.__value_.__l.__data_;
      v164 = (char **)&v162[4].__r_.__value_.__l.__size_;
      v165 = &v162[4].__r_.__value_.__r.__words[2];
      do
      {
        v166 = *v160;
        if (*v160)
        {
          v167 = *v164;
          if ((unint64_t)*v164 >= *v165)
          {
            v169 = (char *)*p_data;
            v170 = v167 - (_BYTE *)*p_data;
            if (v170 <= -3)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v171 = v170 >> 1;
            v172 = *v165 - (_QWORD)v169;
            if (v172 <= (v170 >> 1) + 1)
              v173 = v171 + 1;
            else
              v173 = *v165 - (_QWORD)v169;
            if (v172 >= 0x7FFFFFFFFFFFFFFELL)
              v174 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v174 = v173;
            if (v174)
            {
              v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v165, v174);
              v167 = *v164;
              v169 = (char *)*p_data;
              v166 = *v160;
            }
            else
            {
              v175 = 0;
            }
            v176 = &v175[2 * v171];
            *(_WORD *)v176 = v166;
            v168 = v176 + 2;
            while (v167 != v169)
            {
              v177 = *((_WORD *)v167 - 1);
              v167 -= 2;
              *((_WORD *)v176 - 1) = v177;
              v176 -= 2;
            }
            *p_data = v176;
            *v164 = v168;
            *v165 = (std::string::size_type)&v175[2 * v174];
            if (v169)
              operator delete(v169);
          }
          else
          {
            *(_WORD *)v167 = v166;
            v168 = v167 + 2;
          }
          *v164 = v168;
        }
        ++v160;
      }
      while (v160 != v161);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__289;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__290;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v341[0] = MEMORY[0x24BDAC760];
    v341[1] = 0x40000000;
    v341[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_291;
    v341[3] = &unk_24D5D0EF0;
    v341[4] = buf;
    *(_QWORD *)&__dst = v341;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(a1, (uint64_t)&__dst);
    v178 = *(_WORD **)(*(_QWORD *)&buf[8] + 40);
    v179 = *(_WORD **)(*(_QWORD *)&buf[8] + 48);
    if (v178 != v179)
    {
      v180 = &v338[8 * v339];
      size = (char *)v180[5].__r_.__value_.__l.__size_;
      v181 = (void **)&v180[5].__r_.__value_.__l.__size_;
      v182 = size;
      v184 = v181 - 1;
      v185 = v181 + 1;
      do
      {
        if ((unint64_t)v182 >= *v185)
        {
          v186 = (v182 - (_BYTE *)*v184) >> 2;
          if ((unint64_t)(v186 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v187 = *v185 - (_QWORD)*v184;
          v188 = v187 >> 1;
          if (v187 >> 1 <= (unint64_t)(v186 + 1))
            v188 = v186 + 1;
          if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
            v189 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v189 = v188;
          v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v181 + 1), v189);
          v192 = &v190[4 * v186];
          *(_WORD *)v192 = *v178;
          *((_WORD *)v192 + 1) = v178[1];
          v193 = (char *)*v181;
          v194 = (char *)*v184;
          v195 = v192;
          if (*v181 != *v184)
          {
            do
            {
              v196 = *((_DWORD *)v193 - 1);
              v193 -= 4;
              *((_DWORD *)v195 - 1) = v196;
              v195 -= 4;
            }
            while (v193 != v194);
            v193 = (char *)*v184;
          }
          *v184 = v195;
          v182 = v192 + 4;
          *v181 = v192 + 4;
          *v185 = &v190[4 * v191];
          if (v193)
            operator delete(v193);
        }
        else
        {
          *(_WORD *)v182 = *v178;
          *((_WORD *)v182 + 1) = v178[1];
          v182 += 4;
        }
        *v181 = v182;
        v178 += 2;
      }
      while (v178 != v179);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__293;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__294;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v340[0] = MEMORY[0x24BDAC760];
    v340[1] = 0x40000000;
    v340[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_295;
    v340[3] = &unk_24D5D0F18;
    v340[4] = buf;
    *(_QWORD *)&__dst = v340;
    qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(a1, (uint64_t)&__dst);
    v197 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
    v198 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 48);
    if (v197 != v198)
    {
      v199 = &v338[8 * v339];
      v202 = (char *)v199[6].__r_.__value_.__l.__size_;
      v201 = &v199[6].__r_.__value_.__l.__size_;
      v200 = v202;
      v203 = (void **)(v201 - 1);
      v204 = v201 + 1;
      do
      {
        if ((unint64_t)v200 >= *v204)
        {
          v206 = (char *)*v203;
          v207 = v200 - (_BYTE *)*v203;
          if (v207 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v208 = v207 >> 1;
          v209 = *v204 - (_QWORD)v206;
          if (v209 <= (v207 >> 1) + 1)
            v210 = v208 + 1;
          else
            v210 = *v204 - (_QWORD)v206;
          if (v209 >= 0x7FFFFFFFFFFFFFFELL)
            v211 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v211 = v210;
          if (v211)
          {
            v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v201 + 1), v211);
            v200 = (char *)*v201;
            v206 = (char *)*v203;
          }
          else
          {
            v212 = 0;
          }
          v213 = &v212[2 * v208];
          *(_WORD *)v213 = *v197;
          v205 = v213 + 2;
          while (v200 != v206)
          {
            v214 = *((_WORD *)v200 - 1);
            v200 -= 2;
            *((_WORD *)v213 - 1) = v214;
            v213 -= 2;
          }
          *v203 = v213;
          *v201 = (std::string::size_type)v205;
          *v204 = &v212[2 * v211];
          if (v206)
            operator delete(v206);
        }
        else
        {
          *(_WORD *)v200 = *v197;
          v205 = v200 + 2;
        }
        *v201 = (std::string::size_type)v205;
        ++v197;
        v200 = v205;
      }
      while (v197 != v198);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    goto LABEL_231;
  }
LABEL_232:
  _Block_object_dispose(v388, 8);
  if (v106 != 47)
    goto LABEL_79;
LABEL_233:
  v215 = v365;
  if (*((unsigned __int8 *)v365 + 42) - 1 == *((unsigned __int8 *)v365 + 43)
    && *((unsigned __int16 *)v358 + 20) - 1 == *((unsigned __int16 *)v358 + 21))
  {
    v216 = *a3;
    if (*a3)
    {
      v217 = *v216;
      if (os_log_type_enabled(*v216, OS_LOG_TYPE_DEFAULT))
      {
        v218 = *((unsigned __int16 *)v215 + 20);
        v219 = -1431655765 * ((unint64_t)(v99[3] - v99[2]) >> 6);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v218;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v219;
        _os_log_impl(&dword_216897000, v217, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13), transactionInfo.tds.size()=%u", buf, 0x18u);
      }
    }
    v221 = *v335;
    for (i = v335[1]; i != v221; i = MEMORY[0x2199FDA50](i - 304))
      ;
    v335[1] = v221;
    v324 = v99[2];
    for (j = v99[3]; v324 != j; v324 += 192)
    {
      __dst = 0uLL;
      *(_QWORD *)&v354 = 0;
      MEMORY[0x2199FDA44](buf);
      v222 = *((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1) >= (unint64_t)v354)
      {
        v223 = std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>((uint64_t *)&__dst, (uint64_t)buf);
      }
      else
      {
        MEMORY[0x2199FDA2C](*((_QWORD *)&__dst + 1), buf);
        v223 = v222 + 304;
      }
      *((_QWORD *)&__dst + 1) = v223;
      MEMORY[0x2199FDA50](buf);
      v224 = *(const std::string **)(v324 + 24);
      v326 = *(const std::string **)(v324 + 32);
      if (v224 != v326)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v225 = *((_QWORD *)&__dst + 1);
          for (k = __dst; k != v225; k += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, k);
            std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v372, v224);
            v227 = v345;
            if (v345 >= v346)
            {
              v229 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v230 = v229 + 1;
              if (v229 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v230)
                v230 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v231 = 0xD79435E50D7943;
              else
                v231 = v230;
              v390 = &v346;
              if (v231)
                v231 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v231);
              else
                v232 = 0;
              *(_QWORD *)v388 = v231;
              *(_QWORD *)&v388[8] = v231 + 304 * v229;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v231 + 304 * v232;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v228 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v228 = v227 + 304;
            }
            v345 = v228;
            MEMORY[0x2199FDA50](buf);
          }
          ++v224;
        }
        while (v224 != v326);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v233 = *(const std::string **)(v324 + 48);
      v327 = *(const std::string **)(v324 + 56);
      if (v233 != v327)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v234 = *((_QWORD *)&__dst + 1);
          for (m = __dst; m != v234; m += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, m);
            std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)((char *)&v378 + 8), v233);
            v236 = v345;
            if (v345 >= v346)
            {
              v238 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v239 = v238 + 1;
              if (v238 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v239)
                v239 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v240 = 0xD79435E50D7943;
              else
                v240 = v239;
              v390 = &v346;
              if (v240)
                v240 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v240);
              else
                v241 = 0;
              *(_QWORD *)v388 = v240;
              *(_QWORD *)&v388[8] = v240 + 304 * v238;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v240 + 304 * v241;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v237 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v237 = v236 + 304;
            }
            v345 = v237;
            MEMORY[0x2199FDA50](buf);
          }
          ++v233;
        }
        while (v233 != v327);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v242 = *(const CSIPacketAddress **)(v324 + 72);
      v328 = *(const CSIPacketAddress **)(v324 + 80);
      if (v242 != v328)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v243 = *((_QWORD *)&__dst + 1);
          for (n = __dst; n != v243; n += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, n);
            std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>((CSIPacketAddress *)((char *)&v380 + 8), v242);
            v245 = v345;
            if (v345 >= v346)
            {
              v247 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v248 = v247 + 1;
              if (v247 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v248)
                v248 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v249 = 0xD79435E50D7943;
              else
                v249 = v248;
              v390 = &v346;
              if (v249)
                v249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v249);
              else
                v250 = 0;
              *(_QWORD *)v388 = v249;
              *(_QWORD *)&v388[8] = v249 + 304 * v247;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v249 + 304 * v250;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v246 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v246 = v245 + 304;
            }
            v345 = v246;
            MEMORY[0x2199FDA50](buf);
          }
          v242 = (const CSIPacketAddress *)((char *)v242 + 24);
        }
        while (v242 != v328);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v251 = *(_WORD **)(v324 + 96);
      v329 = *(_WORD **)(v324 + 104);
      if (v251 != v329)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v252 = *((_QWORD *)&__dst + 1);
          for (ii = __dst; ii != v252; ii += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, ii);
            WORD2(v382) = *v251;
            BYTE6(v382) = 1;
            v254 = v345;
            if (v345 >= v346)
            {
              v256 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v257 = v256 + 1;
              if (v256 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v257)
                v257 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v258 = 0xD79435E50D7943;
              else
                v258 = v257;
              v390 = &v346;
              if (v258)
                v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v258);
              else
                v259 = 0;
              *(_QWORD *)v388 = v258;
              *(_QWORD *)&v388[8] = v258 + 304 * v256;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v258 + 304 * v259;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v255 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v255 = v254 + 304;
            }
            v345 = v255;
            MEMORY[0x2199FDA50](buf);
          }
          ++v251;
        }
        while (v251 != v329);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v260 = *(_DWORD **)(v324 + 120);
      v330 = *(_DWORD **)(v324 + 128);
      if (v260 != v330)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v261 = *((_QWORD *)&__dst + 1);
          for (jj = __dst; jj != v261; jj += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, jj);
            DWORD2(v382) = *v260;
            if (!BYTE12(v382))
              BYTE12(v382) = 1;
            v263 = v345;
            if (v345 >= v346)
            {
              v265 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v266 = v265 + 1;
              if (v265 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v266)
                v266 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v267 = 0xD79435E50D7943;
              else
                v267 = v266;
              v390 = &v346;
              if (v267)
                v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v267);
              else
                v268 = 0;
              *(_QWORD *)v388 = v267;
              *(_QWORD *)&v388[8] = v267 + 304 * v265;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v267 + 304 * v268;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v264 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v264 = v263 + 304;
            }
            v345 = v264;
            MEMORY[0x2199FDA50](buf);
          }
          ++v260;
        }
        while (v260 != v330);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v269 = *(_WORD **)(v324 + 144);
      v331 = *(_WORD **)(v324 + 152);
      if (v269 != v331)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v270 = *((_QWORD *)&__dst + 1);
          for (kk = __dst; kk != v270; kk += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, kk);
            HIWORD(v382) = *v269;
            LOBYTE(v383) = 1;
            v272 = v345;
            if (v345 >= v346)
            {
              v274 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v275 = v274 + 1;
              if (v274 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v275)
                v275 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v276 = 0xD79435E50D7943;
              else
                v276 = v275;
              v390 = &v346;
              if (v276)
                v276 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v276);
              else
                v277 = 0;
              *(_QWORD *)v388 = v276;
              *(_QWORD *)&v388[8] = v276 + 304 * v274;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v276 + 304 * v277;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v273 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v273 = v272 + 304;
            }
            v345 = v273;
            MEMORY[0x2199FDA50](buf);
          }
          ++v269;
        }
        while (v269 != v331);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v278 = *(uint64_t **)(v324 + 168);
      v332 = *(uint64_t **)(v324 + 176);
      if (v278 != v332)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v279 = *((_QWORD *)&__dst + 1);
          for (mm = __dst; mm != v279; mm += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, mm);
            v281 = *v278;
            if (!BYTE8(v383))
              BYTE8(v383) = 1;
            DWORD1(v383) = v281;
            v282 = v345;
            if (v345 >= v346)
            {
              v284 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v285 = v284 + 1;
              if (v284 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v285)
                v285 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v286 = 0xD79435E50D7943;
              else
                v286 = v285;
              v390 = &v346;
              if (v286)
                v286 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v286);
              else
                v287 = 0;
              *(_QWORD *)v388 = v286;
              *(_QWORD *)&v388[8] = v286 + 304 * v284;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v286 + 304 * v287;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v283 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v283 = v282 + 304;
            }
            v345 = v283;
            MEMORY[0x2199FDA50](buf);
          }
          ++v278;
        }
        while (v278 != v332);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      if (*(_QWORD *)v324 != *(_QWORD *)(v324 + 8))
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        v288 = *(const std::string **)v324;
        v333 = *(const std::string **)(v324 + 8);
        if (*(const std::string **)v324 == v333)
        {
          v298 = 0;
          v297 = 0;
        }
        else
        {
          do
          {
            v289 = *((_QWORD *)&__dst + 1);
            for (nn = __dst; nn != v289; nn += 304)
            {
              v386 = 0u;
              v387 = 0u;
              v384 = 0u;
              v385 = 0u;
              v382 = 0u;
              v383 = 0u;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
              v376 = 0u;
              v377 = 0u;
              v374 = 0u;
              v375 = 0u;
              v372 = 0u;
              v373 = 0u;
              v371 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x2199FDA38](buf, nn);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v384, v288);
              v291 = v345;
              if (v345 >= v346)
              {
                v293 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
                v294 = v293 + 1;
                if (v293 + 1 > 0xD79435E50D7943)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v294)
                  v294 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                  v295 = 0xD79435E50D7943;
                else
                  v295 = v294;
                v390 = &v346;
                if (v295)
                  v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v295);
                else
                  v296 = 0;
                *(_QWORD *)v388 = v295;
                *(_QWORD *)&v388[8] = v295 + 304 * v293;
                *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
                v389 = v295 + 304 * v296;
                MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
                *(_QWORD *)&v388[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
                v292 = v345;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
              }
              else
              {
                MEMORY[0x2199FDA38](v345, buf);
                v292 = v291 + 304;
              }
              v345 = v292;
              MEMORY[0x2199FDA50](buf);
            }
            ++v288;
          }
          while (v288 != v333);
          v297 = (uint64_t)v344;
          v298 = v345;
        }
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, v297, v298, 0x86BCA1AF286BCA1BLL * ((v298 - v297) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v299 = *a3;
      if (*a3)
      {
        v300 = *v299;
        if (os_log_type_enabled(*v299, OS_LOG_TYPE_DEFAULT))
        {
          v301 = *((unsigned __int16 *)v365 + 20);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v301;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 678152731 * ((*((_QWORD *)&__dst + 1) - (_QWORD)__dst) >> 4);
          _os_log_impl(&dword_216897000, v300, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.1), newTds.size()=%u", buf, 0x18u);
        }
      }
      v302 = (TrafficDescriptor *)*((_QWORD *)&__dst + 1);
      v334 = (TrafficDescriptor *)*((_QWORD *)&__dst + 1);
      for (i1 = (TrafficDescriptor *)__dst; i1 != v302; i1 = (TrafficDescriptor *)((char *)i1 + 304))
      {
        v304 = *a3;
        if (*a3)
        {
          v305 = *v304;
          if (os_log_type_enabled(*v304, OS_LOG_TYPE_DEFAULT))
          {
            TrafficDescriptor::toString(i1);
            v306 = buf;
            if ((buf[23] & 0x80u) != 0)
              v306 = *(uint8_t **)buf;
            *(_DWORD *)v388 = 136315394;
            *(_QWORD *)&v388[4] = "processWdsTdInfoInd";
            *(_WORD *)&v388[12] = 2082;
            *(_QWORD *)&v388[14] = v306;
            _os_log_impl(&dword_216897000, v305, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo newTd: %{public}s", v388, 0x16u);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
        }
        if ((TrafficDescriptor::empty(i1) & 1) == 0)
        {
          v308 = v335[1];
          v307 = v335[2];
          if (v308 >= v307)
          {
            v311 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v308 - *v335) >> 4);
            v312 = v311 + 1;
            if (v311 + 1 > 0xD79435E50D7943)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v313 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v307 - *v335) >> 4);
            if (2 * v313 > v312)
              v312 = 2 * v313;
            if (v313 >= 0x6BCA1AF286BCA1)
              v314 = 0xD79435E50D7943;
            else
              v314 = v312;
            *(_QWORD *)&v371 = v335 + 2;
            if (v314)
              v314 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v314);
            else
              v315 = 0;
            *(_QWORD *)buf = v314;
            *(_QWORD *)&buf[8] = v314 + 304 * v311;
            *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[24] = v314 + 304 * v315;
            MEMORY[0x2199FDA38](*(_QWORD *)&buf[8], i1);
            v310 = v335;
            *(_QWORD *)&buf[16] += 304;
            std::vector<TrafficDescriptor>::__swap_out_circular_buffer(v335, buf);
            v309 = v335[1];
            std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            MEMORY[0x2199FDA38](v335[1], i1);
            v309 = v308 + 304;
            v310 = v335;
            v335[1] = v309;
          }
          v310[1] = v309;
        }
        v302 = v334;
      }
      *(_QWORD *)buf = &__dst;
      std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    v316 = *a3;
    if (*a3)
    {
      v317 = *v316;
      if (os_log_type_enabled(*v316, OS_LOG_TYPE_DEFAULT))
      {
        v318 = *((unsigned __int16 *)v365 + 20);
        v319 = 678152731 * ((unint64_t)(v335[1] - *v335) >> 4);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v318;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v319;
        _os_log_impl(&dword_216897000, v317, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.2), trafficInfo.trafficDescriptors.size()=%u", buf, 0x18u);
      }
    }
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v325, *((_WORD *)v365 + 20));
    v96 = 1;
  }
  else
  {
    v96 = 0;
  }
  v320 = *a3;
  if (*a3)
  {
    v321 = *v320;
    if (os_log_type_enabled(*v320, OS_LOG_TYPE_DEFAULT))
    {
      v322 = *((unsigned __int16 *)v365 + 20);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v322;
      _os_log_impl(&dword_216897000, v321, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u (14)", buf, 0x12u);
    }
  }
LABEL_80:
  _Block_object_dispose(&v357, 8);
  _Block_object_dispose(&v364, 8);
  return v96;
}

void sub_216958A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  *v22 = v21;
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  _Block_object_dispose(&STACK[0x300], 8);
  STACK[0x220] = a21;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Block_object_dispose((const void *)(v23 - 160), 8);
  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::processWdsTdInfoInd<wds::RouteInfo::Indication,QMIDataCommandDriver::TrafficInfo,ctu::OsLogLogger *,QMIDataCommandDriver::handleWdsRouteInfoInd_sync(wds::RouteInfo::Indication const&)::$_0,QMIDataCommandDriver::handleWdsRouteInfoInd_sync(wds::RouteInfo::Indication const&)::$_1>(qmi::MessageBase *a1, uint64_t a2, NSObject ***a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t ***v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t **v22;
  NSObject *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_t *v28;
  NSObject *v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  int v35;
  os_log_t *v36;
  os_log_t v37;
  int v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  uint64_t **v47;
  int v48;
  os_log_t *v49;
  NSObject *v50;
  int v51;
  uint64_t **v52;
  uint64_t **v53;
  int64x2_t *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  os_log_t *v58;
  NSObject *v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  int v68;
  const char *v69;
  NSObject *v70;
  int v71;
  int v72;
  int v73;
  NSObject *v74;
  uint32_t v75;
  os_log_t v76;
  int v77;
  int v78;
  int64x2_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t ***v85;
  uint64_t **v86;
  unsigned int v87;
  BOOL v88;
  uint64_t ***v89;
  NSObject *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  int v105;
  int v106;
  NSObject *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  NSObject *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  std::string *v119;
  std::string **p_size;
  std::string::size_type *v121;
  _BYTE *v122;
  _BYTE *v123;
  std::string *v124;
  __int128 v125;
  uint64_t v126;
  NSObject *v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string *v137;
  uint64_t *v138;
  uint64_t *v139;
  std::string::size_type *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::string *v146;
  CSIPacketAddress **v147;
  uint64_t v148;
  std::string::size_type *v149;
  CSIPacketAddress *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::string *v154;
  CSIPacketAddress **v155;
  uint64_t v156;
  std::string::size_type *v157;
  CSIPacketAddress *v158;
  uint64_t v159;
  __int16 *v160;
  __int16 *v161;
  std::string *v162;
  void **p_data;
  char **v164;
  std::string::size_type *v165;
  __int16 v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  __int16 v177;
  _WORD *v178;
  _WORD *v179;
  std::string *v180;
  void **v181;
  char *v182;
  char *size;
  void **v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  int v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  std::string *v199;
  char *v200;
  std::string::size_type *v201;
  char *v202;
  void **v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  __int16 v214;
  uint64_t *v215;
  os_log_t *v216;
  NSObject *v217;
  int v218;
  int v219;
  uint64_t i;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const std::string *v224;
  uint64_t v225;
  uint64_t k;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  const std::string *v233;
  uint64_t v234;
  uint64_t m;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  const CSIPacketAddress *v242;
  uint64_t v243;
  uint64_t n;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _WORD *v251;
  uint64_t v252;
  uint64_t ii;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  uint64_t jj;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _WORD *v269;
  uint64_t v270;
  uint64_t kk;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t mm;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  const std::string *v288;
  uint64_t v289;
  uint64_t nn;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  os_log_t *v299;
  NSObject *v300;
  int v301;
  TrafficDescriptor *v302;
  TrafficDescriptor *i1;
  os_log_t *v304;
  NSObject *v305;
  uint8_t *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  os_log_t *v316;
  NSObject *v317;
  int v318;
  int v319;
  os_log_t *v320;
  NSObject *v321;
  int v322;
  uint64_t j;
  uint64_t v324;
  uint64_t **v325;
  const std::string *v326;
  const std::string *v327;
  const CSIPacketAddress *v328;
  _WORD *v329;
  _DWORD *v330;
  _WORD *v331;
  uint64_t *v332;
  const std::string *v333;
  TrafficDescriptor *v334;
  uint64_t *v335;
  std::string *v337;
  std::string *v338;
  unsigned int v339;
  _QWORD v340[5];
  _QWORD v341[5];
  _QWORD v342[5];
  _QWORD v343[5];
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  _QWORD v347[5];
  _QWORD v348[5];
  _QWORD v349[5];
  _QWORD v350[5];
  _QWORD v351[5];
  _QWORD v352[5];
  __int128 __dst;
  __int128 v354;
  _QWORD *v355;
  _QWORD v356[5];
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t (*v360)(uint64_t, uint64_t);
  uint64_t (*v361)();
  int v362;
  _QWORD v363[5];
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t (*v367)(uint64_t, uint64_t);
  uint64_t (*v368)();
  int v369;
  uint8_t buf[32];
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  _BYTE v388[24];
  unint64_t v389;
  unint64_t *v390;
  uint64_t v391;

  v391 = *MEMORY[0x24BDAC8D0];
  v364 = 0;
  v365 = &v364;
  v366 = 0x3002000000;
  v367 = __Block_byref_object_copy__251;
  v368 = __Block_byref_object_dispose__252;
  v369 = 0;
  v9 = MEMORY[0x24BDAC760];
  v363[0] = MEMORY[0x24BDAC760];
  v363[1] = 0x40000000;
  v363[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke;
  v363[3] = &unk_24D5D0F40;
  v363[4] = &v364;
  *(_QWORD *)buf = v363;
  qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(a1, (uint64_t)buf);
  v357 = 0;
  v358 = &v357;
  v359 = 0x3002000000;
  v360 = __Block_byref_object_copy__255;
  v361 = __Block_byref_object_dispose__256;
  v362 = 0;
  v356[0] = v9;
  v356[1] = 0x40000000;
  v356[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2;
  v356[3] = &unk_24D5D0F68;
  v356[4] = &v357;
  *(_QWORD *)buf = v356;
  qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(a1, (uint64_t)buf);
  v335 = (uint64_t *)a2;
  v12 = *(_QWORD *)(a2 + 32);
  v11 = (uint64_t ***)(a2 + 32);
  v10 = v12;
  v13 = (uint64_t **)(v11 - 1);
  v14 = v365;
  if (!v12)
    goto LABEL_12;
  v15 = *((unsigned __int16 *)v365 + 20);
  v16 = v11;
  do
  {
    v17 = *(unsigned __int16 *)(v10 + 32);
    v18 = v17 >= v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v10;
    else
      v19 = (uint64_t *)(v10 + 8);
    if (v18)
      v16 = (uint64_t ***)v10;
    v10 = *v19;
  }
  while (*v19);
  if (v16 == v11 || v15 < *((unsigned __int16 *)v16 + 16))
  {
LABEL_12:
    v20 = *((unsigned __int8 *)v365 + 42);
    if (!*((_BYTE *)v365 + 42))
    {
      v27 = *v335;
      v26 = v335[1];
      if (v26 != *v335)
      {
        do
          v26 = MEMORY[0x2199FDA50](v26 - 304);
        while (v26 != v27);
        v14 = v365;
      }
      v335[1] = v27;
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v13, *((_WORD *)v14 + 20));
      v28 = *a3;
      if (*a3)
      {
        v29 = *v28;
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *((unsigned __int16 *)v365 + 20);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, clearing all TDs (1)", buf, 0x12u);
        }
      }
      goto LABEL_79;
    }
    v21 = *((unsigned __int8 *)v365 + 43);
    if (*((_BYTE *)v365 + 43))
    {
      v22 = (uint64_t **)(v11 - 1);
      v23 = **a3;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((unsigned __int16 *)v14 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v24;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v21;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v20;
        v25 = "#E  TdInfo transactionId: %u, wrong segment: %u of %u (4)";
LABEL_31:
        _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, v25, buf, 0x14u);
        v14 = v365;
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    v42 = v358;
    v43 = *((unsigned __int16 *)v358 + 21);
    if (*((_WORD *)v358 + 21) || !*((_WORD *)v358 + 20))
    {
      v22 = (uint64_t **)(v11 - 1);
      v23 = **a3;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *((unsigned __int16 *)v14 + 20);
        v45 = *((unsigned __int16 *)v42 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v44;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v45;
        v25 = "#E TdInfo transactionId: %u, wrong fragment: %u of %u (3)";
        goto LABEL_31;
      }
LABEL_32:
      v46 = *((_WORD *)v14 + 20);
      v47 = v22;
LABEL_78:
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v47, v46);
LABEL_79:
      v96 = 1;
      goto LABEL_80;
    }
    v58 = *a3;
    if (*a3)
    {
      v59 = *v58;
      if (os_log_type_enabled(*v58, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *((unsigned __int16 *)v14 + 20);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v60;
        _os_log_impl(&dword_216897000, v59, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, starting a new transaction (2)", buf, 0x12u);
      }
    }
    v325 = (uint64_t **)(v11 - 1);
    v355 = 0;
    __dst = 0u;
    v354 = 0u;
    v379 = 0u;
    v380 = 0u;
    v377 = 0u;
    v378 = 0u;
    v375 = 0u;
    v376 = 0u;
    v373 = 0u;
    v374 = 0u;
    v371 = 0u;
    v372 = 0u;
    memset(buf, 0, sizeof(buf));
    v390 = (unint64_t *)&v355;
    v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(1uLL);
    v63 = &v61[24 * v62];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v61, (uint64_t)buf);
    v65 = v64 + 192;
    v79 = vdupq_n_s64(0);
    *(_QWORD *)&v354 = v64;
    *(int64x2_t *)&v388[8] = v79;
    v80 = (unint64_t)v355;
    v355 = v63;
    v389 = v80;
    *(_QWORD *)v388 = v79.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)v388);
    *((_QWORD *)&v354 + 1) = v65;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
    v81 = std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v325, *((_WORD *)v365 + 20), (_WORD *)v365 + 20);
    *(_OWORD *)(v81 + 40) = __dst;
    if (v81 + 40 != (char *)&__dst)
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((uint64_t)(v81 + 56), v354, *((uint64_t *)&v354 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v354 + 1) - v354) >> 6));
    *(_QWORD *)buf = &v354;
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    goto LABEL_63;
  }
  v31 = *((_DWORD *)v16 + 11);
  v32 = *((unsigned __int8 *)v365 + 43);
  v325 = (uint64_t **)(v11 - 1);
  if (v31 == v32)
  {
    v33 = *((_DWORD *)v16 + 13) + 1;
    if (v33 < *((_DWORD *)v16 + 12))
    {
      v34 = v358;
      v35 = *((unsigned __int16 *)v358 + 21);
      v36 = *a3;
      if (v33 == v35)
      {
        if (v36)
        {
          v37 = *v36;
          if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
          {
            v38 = *((unsigned __int16 *)v34 + 20);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v33;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v38;
            v39 = "#I %s: TdInfo transactionId: %u, adding a new fragment %u of %u (5)";
            v40 = v37;
            v41 = 30;
LABEL_41:
            _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, v39, buf, v41);
            goto LABEL_63;
          }
        }
        goto LABEL_63;
      }
      v76 = *v36;
      if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
      {
        v77 = *((unsigned __int16 *)v34 + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v35;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v77;
        v69 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (6)";
        v74 = v76;
LABEL_56:
        v75 = 20;
        goto LABEL_57;
      }
LABEL_58:
      v46 = *((_WORD *)v14 + 20);
LABEL_77:
      v47 = v325;
      goto LABEL_78;
    }
    v66 = **a3;
    if (!os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      goto LABEL_58;
    v67 = *((unsigned __int16 *)v358 + 21);
    v68 = *((unsigned __int16 *)v358 + 20);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v67;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v68;
    v69 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (7)";
LABEL_55:
    v74 = v66;
    goto LABEL_56;
  }
  v48 = v31 + 1;
  if ((v31 + 1) >= *((_DWORD *)v16 + 10))
  {
    v70 = **a3;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      v71 = *((unsigned __int8 *)v14 + 42);
      v72 = *((unsigned __int16 *)v358 + 21);
      v73 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v32;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v71;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v72;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v73;
      v69 = "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (10)";
      v74 = v70;
      v75 = 32;
LABEL_57:
      _os_log_impl(&dword_216897000, v74, OS_LOG_TYPE_DEFAULT, v69, buf, v75);
      v14 = v365;
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v49 = *a3;
  if (v48 != v32)
  {
    v66 = *v49;
    if (!os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
      goto LABEL_58;
    v78 = *((unsigned __int8 *)v14 + 42);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v78;
    v69 = "#E TdInfo transactionId: %u, wrong new TD %u of %u (9)";
    goto LABEL_55;
  }
  if (v49)
  {
    v50 = *v49;
    if (os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *((unsigned __int8 *)v14 + 42);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v32;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v51;
      _os_log_impl(&dword_216897000, v50, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, adding a new TD %u of %u (8)", buf, 0x1Eu);
      v32 = *((unsigned __int8 *)v365 + 43);
    }
  }
  v52 = v16[7];
  v53 = v16[8];
  v54 = (int64x2_t *)(v16 + 7);
  v55 = ((char *)v53 - (char *)v52) >> 6;
  v56 = -1431655765 * v55;
  if (0xAAAAAAAAAAAAAAABLL * v55 > v32)
  {
    v57 = **a3;
    if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v56;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    v39 = "#E TdInfo: wrong td array state: size=%u, new td %u";
    v40 = v57;
    v41 = 14;
    goto LABEL_41;
  }
  v379 = 0u;
  v380 = 0u;
  v377 = 0u;
  v378 = 0u;
  v375 = 0u;
  v376 = 0u;
  v373 = 0u;
  v374 = 0u;
  v371 = 0u;
  v372 = 0u;
  memset(buf, 0, sizeof(buf));
  std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(v54, (uint64_t)buf);
  QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
LABEL_63:
  v82 = v365;
  v83 = MEMORY[0x24BDAC760];
  if (!*v11)
    goto LABEL_74;
  v84 = *((unsigned __int16 *)v365 + 20);
  v85 = v11;
  v86 = *v11;
  do
  {
    v87 = *((unsigned __int16 *)v86 + 16);
    v88 = v87 >= v84;
    if (v87 >= v84)
      v89 = (uint64_t ***)v86;
    else
      v89 = (uint64_t ***)(v86 + 1);
    if (v88)
      v85 = (uint64_t ***)v86;
    v86 = *v89;
  }
  while (*v89);
  if (v85 == v11 || v84 < *((unsigned __int16 *)v85 + 16))
  {
LABEL_74:
    v90 = **a3;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      v91 = *((unsigned __int16 *)v82 + 20);
      v92 = *((unsigned __int8 *)v82 + 43);
      v93 = *((unsigned __int8 *)v82 + 42);
      v94 = *((unsigned __int16 *)v358 + 21);
      v95 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v91;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v92;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v93;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v94;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v95;
      _os_log_impl(&dword_216897000, v90, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (11)", buf, 0x20u);
      v82 = v365;
    }
    v46 = *((_WORD *)v82 + 20);
    goto LABEL_77;
  }
  v98 = std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(*v11, v84);
  v99 = v98;
  v100 = *((unsigned __int8 *)v365 + 43);
  *((_DWORD *)v98 + 1) = v100;
  if (!*(_DWORD *)v98)
    *(_DWORD *)v98 = *((unsigned __int8 *)v365 + 42);
  *((_DWORD *)v98 + 3) = *((unsigned __int16 *)v358 + 21);
  *((_DWORD *)v98 + 2) = *((unsigned __int16 *)v358 + 20);
  if (0xAAAAAAAAAAAAAAABLL * ((v98[3] - v98[2]) >> 6) != v100 + 1)
  {
    v107 = **a3;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      v108 = *((unsigned __int16 *)v365 + 20);
      v109 = *((unsigned __int8 *)v365 + 43);
      v110 = *((unsigned __int8 *)v365 + 42);
      v111 = *((unsigned __int16 *)v358 + 21);
      v112 = *((unsigned __int16 *)v358 + 20);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v108;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v109;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v110;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v111;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v112;
      _os_log_impl(&dword_216897000, v107, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (12)", buf, 0x20u);
    }
    v46 = *((_WORD *)v365 + 20);
    goto LABEL_77;
  }
  *(_QWORD *)v388 = 0;
  *(_QWORD *)&v388[8] = v388;
  *(_QWORD *)&v388[16] = 0x2000000000;
  v389 = 0;
  v352[0] = v83;
  v352[1] = 0x40000000;
  v352[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_312;
  v352[3] = &unk_24D5D0F90;
  v352[4] = v388;
  *(_QWORD *)buf = v352;
  qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(a1, buf);
  v101 = *(_QWORD *)(*(_QWORD *)&v388[8] + 24);
  if (v101 >= 2)
  {
    v113 = **a3;
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      v114 = wds::asString(v101);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v114;
      _os_log_impl(&dword_216897000, v113, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is about non-Internet traffic: %s", buf, 0xCu);
    }
LABEL_231:
    _Block_object_dispose(v388, 8);
    goto LABEL_233;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__263;
  *(_QWORD *)&v371 = __Block_byref_object_dispose__264;
  *((_QWORD *)&v371 + 1) = 0;
  v372 = 0uLL;
  v351[0] = v83;
  v351[1] = 0x40000000;
  v351[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_315;
  v351[3] = &unk_24D5D0FB8;
  v351[4] = buf;
  v344 = v351;
  qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v344);
  v103 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v102 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  if (v103 != v102)
  {
    while (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a5 + 64))(*(_QWORD *)a5, a5[4], v103) & 1) == 0)
    {
      v103 += 24;
      if (v103 == v102)
      {
        v104 = **a3;
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst) = 0;
          _os_log_impl(&dword_216897000, v104, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for the corporate DNN", (uint8_t *)&__dst, 2u);
        }
        v105 = 0;
        v106 = 47;
        goto LABEL_97;
      }
    }
  }
  v106 = 0;
  v105 = 1;
LABEL_97:
  _Block_object_dispose(buf, 8);
  *(_QWORD *)&__dst = (char *)&v371 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  v115 = MEMORY[0x24BDAC760];
  if (!v105)
    goto LABEL_232;
  v339 = *((_DWORD *)v99 + 1);
  v338 = (std::string *)v99[2];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__267;
  *(_QWORD *)&v371 = __Block_byref_object_dispose__268;
  *((_QWORD *)&v371 + 1) = 0;
  v372 = 0uLL;
  v350[0] = MEMORY[0x24BDAC760];
  v350[1] = 0x40000000;
  v350[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_318;
  v350[3] = &unk_24D5D0FE0;
  v350[4] = buf;
  v344 = v350;
  qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(a1, (uint64_t)&v344);
  v117 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v116 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  if (v117 == v116)
  {
    v106 = 0;
    v118 = 1;
    goto LABEL_124;
  }
  LOBYTE(v118) = 0;
  v119 = &v338[8 * v339];
  p_size = (std::string **)&v119[1].__r_.__value_.__l.__size_;
  v337 = v119 + 1;
  v121 = &v119[1].__r_.__value_.__r.__words[2];
  do
  {
    while (1)
    {
      v122 = *(_BYTE **)(v117 + 24);
      v123 = *(_BYTE **)(v117 + 32);
      if (v122 == v123)
        goto LABEL_103;
      if (*(_BYTE *)v117)
        break;
LABEL_106:
      __dst = 0uLL;
      *(_QWORD *)&v354 = 0;
      if (v123 == v122)
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      std::string::basic_string[abi:ne180100](&__dst, v122, v123 - v122);
      v124 = *p_size;
      if ((unint64_t)*p_size >= *v121)
      {
        v126 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)v337, &__dst);
      }
      else
      {
        if (SBYTE7(v354) < 0)
        {
          std::string::__init_copy_ctor_external(*p_size, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
        }
        else
        {
          v125 = __dst;
          v124->__r_.__value_.__r.__words[2] = v354;
          *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v125;
        }
        v126 = (uint64_t)&v124[1];
        *p_size = v124 + 1;
      }
      *p_size = (std::string *)v126;
      if (SBYTE7(v354) < 0)
        operator delete((void *)__dst);
      v117 += 48;
      v118 = 1;
      if (v117 == v116)
      {
        v106 = 0;
LABEL_119:
        v115 = MEMORY[0x24BDAC760];
        goto LABEL_124;
      }
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a4 + 48))(*(_QWORD *)a4, a4[4], v117 + 1))
    {
      v122 = *(_BYTE **)(v117 + 24);
      v123 = *(_BYTE **)(v117 + 32);
      goto LABEL_106;
    }
LABEL_103:
    v117 += 48;
  }
  while (v117 != v116);
  if ((v118 & 1) != 0)
  {
    v106 = 0;
    v118 = 1;
    goto LABEL_119;
  }
  v127 = **a3;
  v128 = os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT);
  v115 = MEMORY[0x24BDAC760];
  if (v128)
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_216897000, v127, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for iOS apps", (uint8_t *)&__dst, 2u);
  }
  v118 = 0;
  v106 = 47;
LABEL_124:
  _Block_object_dispose(buf, 8);
  *(_QWORD *)&__dst = (char *)&v371 + 8;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (v118)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__263;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__264;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v349[0] = v115;
    v349[1] = 0x40000000;
    v349[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_321;
    v349[3] = &unk_24D5D1008;
    v349[4] = buf;
    v344 = v349;
    qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v344);
    v130 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v129 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v130 != v129)
    {
      v131 = (uint64_t *)&v338[8 * v339];
      do
      {
        if (*(char *)(v130 + 23) < 0)
          v132 = *(_QWORD *)(v130 + 8);
        else
          v132 = *(unsigned __int8 *)(v130 + 23);
        if (v132)
        {
          v133 = v131[1];
          if (v133 >= v131[2])
          {
            v134 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v131, (__int128 *)v130);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v131, (__int128 *)v130);
            v134 = v133 + 24;
          }
          v131[1] = v134;
        }
        v130 += 24;
      }
      while (v130 != v129);
    }
    _Block_object_dispose(buf, 8);
    *(_QWORD *)&__dst = (char *)&v371 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__273;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__274;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v348[0] = v115;
    v348[1] = 0x40000000;
    v348[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2_323;
    v348[3] = &unk_24D5D1030;
    v348[4] = buf;
    v344 = v348;
    qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(a1, (uint64_t)&v344);
    v136 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v135 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v136 != v135)
    {
      v137 = &v338[8 * v339];
      v138 = (uint64_t *)&v137[2];
      v139 = (uint64_t *)&v137[2].__r_.__value_.__l.__size_;
      v140 = &v137[2].__r_.__value_.__r.__words[2];
      do
      {
        if (*(char *)(v136 + 23) < 0)
          v141 = *(_QWORD *)(v136 + 8);
        else
          v141 = *(unsigned __int8 *)(v136 + 23);
        if (v141)
        {
          v142 = *v139;
          if (*v139 >= *v140)
          {
            v143 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v138, (__int128 *)v136);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v138, (__int128 *)v136);
            v143 = v142 + 24;
          }
          *v139 = v143;
        }
        v136 += 24;
      }
      while (v136 != v135);
    }
    _Block_object_dispose(buf, 8);
    *(_QWORD *)&__dst = (char *)&v371 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__277;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__278;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v347[0] = MEMORY[0x24BDAC760];
    v347[1] = 0x40000000;
    v347[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_3;
    v347[3] = &unk_24D5D1058;
    v347[4] = buf;
    *(_QWORD *)&__dst = v347;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(a1, (uint64_t)&__dst);
    v144 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v145 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v144 != v145)
    {
      v146 = &v338[8 * v339];
      v147 = (CSIPacketAddress **)&v146[3].__r_.__value_.__l.__size_;
      v148 = (uint64_t)&v146[3];
      v149 = &v146[3].__r_.__value_.__r.__words[2];
      do
      {
        __dst = 0uLL;
        *(_QWORD *)&v354 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&__dst);
        if (*(_DWORD *)(v144 + 4))
        {
          v344 = 0;
          v345 = 0;
          v346 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v344);
          CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&v344);
          CSIPacketAddress::maskToPrefix((CSIPacketAddress *)&v344);
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        v150 = *v147;
        if ((unint64_t)*v147 >= *v149)
        {
          v151 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v148, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v147, (const CSIPacketAddress *)&__dst);
          v151 = (uint64_t)v150 + 24;
          *v147 = (CSIPacketAddress *)((char *)v150 + 24);
        }
        *v147 = (CSIPacketAddress *)v151;
        v144 += 8;
      }
      while (v144 != v145);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__281;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__282;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v343[0] = MEMORY[0x24BDAC760];
    v343[1] = 0x40000000;
    v343[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_4;
    v343[3] = &unk_24D5D1080;
    v343[4] = buf;
    *(_QWORD *)&__dst = v343;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(a1, (uint64_t)&__dst);
    v153 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    v152 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
    if (v153 != v152)
    {
      v154 = &v338[8 * v339];
      v155 = (CSIPacketAddress **)&v154[3].__r_.__value_.__l.__size_;
      v156 = (uint64_t)&v154[3];
      v157 = &v154[3].__r_.__value_.__r.__words[2];
      do
      {
        __dst = 0uLL;
        *(_QWORD *)&v354 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv6Address((CSIPacketAddress *)&__dst, (const unsigned __int8 *)v153);
        if (*(char *)(v153 + 16) >= 1)
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        v158 = *v155;
        if ((unint64_t)*v155 >= *v157)
        {
          v159 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v156, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v155, (const CSIPacketAddress *)&__dst);
          v159 = (uint64_t)v158 + 24;
          *v155 = (CSIPacketAddress *)((char *)v158 + 24);
        }
        *v155 = (CSIPacketAddress *)v159;
        v153 += 17;
      }
      while (v153 != v152);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__285;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__286;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v342[0] = MEMORY[0x24BDAC760];
    v342[1] = 0x40000000;
    v342[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_5;
    v342[3] = &unk_24D5D10A8;
    v342[4] = buf;
    *(_QWORD *)&__dst = v342;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(a1, (uint64_t)&__dst);
    v160 = *(__int16 **)(*(_QWORD *)&buf[8] + 40);
    v161 = *(__int16 **)(*(_QWORD *)&buf[8] + 48);
    if (v160 != v161)
    {
      v162 = &v338[8 * v339];
      p_data = (void **)&v162[4].__r_.__value_.__l.__data_;
      v164 = (char **)&v162[4].__r_.__value_.__l.__size_;
      v165 = &v162[4].__r_.__value_.__r.__words[2];
      do
      {
        v166 = *v160;
        if (*v160)
        {
          v167 = *v164;
          if ((unint64_t)*v164 >= *v165)
          {
            v169 = (char *)*p_data;
            v170 = v167 - (_BYTE *)*p_data;
            if (v170 <= -3)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v171 = v170 >> 1;
            v172 = *v165 - (_QWORD)v169;
            if (v172 <= (v170 >> 1) + 1)
              v173 = v171 + 1;
            else
              v173 = *v165 - (_QWORD)v169;
            if (v172 >= 0x7FFFFFFFFFFFFFFELL)
              v174 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v174 = v173;
            if (v174)
            {
              v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v165, v174);
              v167 = *v164;
              v169 = (char *)*p_data;
              v166 = *v160;
            }
            else
            {
              v175 = 0;
            }
            v176 = &v175[2 * v171];
            *(_WORD *)v176 = v166;
            v168 = v176 + 2;
            while (v167 != v169)
            {
              v177 = *((_WORD *)v167 - 1);
              v167 -= 2;
              *((_WORD *)v176 - 1) = v177;
              v176 -= 2;
            }
            *p_data = v176;
            *v164 = v168;
            *v165 = (std::string::size_type)&v175[2 * v174];
            if (v169)
              operator delete(v169);
          }
          else
          {
            *(_WORD *)v167 = v166;
            v168 = v167 + 2;
          }
          *v164 = v168;
        }
        ++v160;
      }
      while (v160 != v161);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__289;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__290;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v341[0] = MEMORY[0x24BDAC760];
    v341[1] = 0x40000000;
    v341[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_6;
    v341[3] = &unk_24D5D10D0;
    v341[4] = buf;
    *(_QWORD *)&__dst = v341;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(a1, (uint64_t)&__dst);
    v178 = *(_WORD **)(*(_QWORD *)&buf[8] + 40);
    v179 = *(_WORD **)(*(_QWORD *)&buf[8] + 48);
    if (v178 != v179)
    {
      v180 = &v338[8 * v339];
      size = (char *)v180[5].__r_.__value_.__l.__size_;
      v181 = (void **)&v180[5].__r_.__value_.__l.__size_;
      v182 = size;
      v184 = v181 - 1;
      v185 = v181 + 1;
      do
      {
        if ((unint64_t)v182 >= *v185)
        {
          v186 = (v182 - (_BYTE *)*v184) >> 2;
          if ((unint64_t)(v186 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v187 = *v185 - (_QWORD)*v184;
          v188 = v187 >> 1;
          if (v187 >> 1 <= (unint64_t)(v186 + 1))
            v188 = v186 + 1;
          if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
            v189 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v189 = v188;
          v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v181 + 1), v189);
          v192 = &v190[4 * v186];
          *(_WORD *)v192 = *v178;
          *((_WORD *)v192 + 1) = v178[1];
          v193 = (char *)*v181;
          v194 = (char *)*v184;
          v195 = v192;
          if (*v181 != *v184)
          {
            do
            {
              v196 = *((_DWORD *)v193 - 1);
              v193 -= 4;
              *((_DWORD *)v195 - 1) = v196;
              v195 -= 4;
            }
            while (v193 != v194);
            v193 = (char *)*v184;
          }
          *v184 = v195;
          v182 = v192 + 4;
          *v181 = v192 + 4;
          *v185 = &v190[4 * v191];
          if (v193)
            operator delete(v193);
        }
        else
        {
          *(_WORD *)v182 = *v178;
          *((_WORD *)v182 + 1) = v178[1];
          v182 += 4;
        }
        *v181 = v182;
        v178 += 2;
      }
      while (v178 != v179);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4002000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__293;
    *(_QWORD *)&v371 = __Block_byref_object_dispose__294;
    *((_QWORD *)&v371 + 1) = 0;
    v372 = 0uLL;
    v340[0] = MEMORY[0x24BDAC760];
    v340[1] = 0x40000000;
    v340[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_7;
    v340[3] = &unk_24D5D10F8;
    v340[4] = buf;
    *(_QWORD *)&__dst = v340;
    qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(a1, (uint64_t)&__dst);
    v197 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
    v198 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 48);
    if (v197 != v198)
    {
      v199 = &v338[8 * v339];
      v202 = (char *)v199[6].__r_.__value_.__l.__size_;
      v201 = &v199[6].__r_.__value_.__l.__size_;
      v200 = v202;
      v203 = (void **)(v201 - 1);
      v204 = v201 + 1;
      do
      {
        if ((unint64_t)v200 >= *v204)
        {
          v206 = (char *)*v203;
          v207 = v200 - (_BYTE *)*v203;
          if (v207 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v208 = v207 >> 1;
          v209 = *v204 - (_QWORD)v206;
          if (v209 <= (v207 >> 1) + 1)
            v210 = v208 + 1;
          else
            v210 = *v204 - (_QWORD)v206;
          if (v209 >= 0x7FFFFFFFFFFFFFFELL)
            v211 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v211 = v210;
          if (v211)
          {
            v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v201 + 1), v211);
            v200 = (char *)*v201;
            v206 = (char *)*v203;
          }
          else
          {
            v212 = 0;
          }
          v213 = &v212[2 * v208];
          *(_WORD *)v213 = *v197;
          v205 = v213 + 2;
          while (v200 != v206)
          {
            v214 = *((_WORD *)v200 - 1);
            v200 -= 2;
            *((_WORD *)v213 - 1) = v214;
            v213 -= 2;
          }
          *v203 = v213;
          *v201 = (std::string::size_type)v205;
          *v204 = &v212[2 * v211];
          if (v206)
            operator delete(v206);
        }
        else
        {
          *(_WORD *)v200 = *v197;
          v205 = v200 + 2;
        }
        *v201 = (std::string::size_type)v205;
        ++v197;
        v200 = v205;
      }
      while (v197 != v198);
    }
    _Block_object_dispose(buf, 8);
    if (*((_QWORD *)&v371 + 1))
    {
      *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
      operator delete(*((void **)&v371 + 1));
    }
    goto LABEL_231;
  }
LABEL_232:
  _Block_object_dispose(v388, 8);
  if (v106 != 47)
    goto LABEL_79;
LABEL_233:
  v215 = v365;
  if (*((unsigned __int8 *)v365 + 42) - 1 == *((unsigned __int8 *)v365 + 43)
    && *((unsigned __int16 *)v358 + 20) - 1 == *((unsigned __int16 *)v358 + 21))
  {
    v216 = *a3;
    if (*a3)
    {
      v217 = *v216;
      if (os_log_type_enabled(*v216, OS_LOG_TYPE_DEFAULT))
      {
        v218 = *((unsigned __int16 *)v215 + 20);
        v219 = -1431655765 * ((unint64_t)(v99[3] - v99[2]) >> 6);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v218;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v219;
        _os_log_impl(&dword_216897000, v217, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13), transactionInfo.tds.size()=%u", buf, 0x18u);
      }
    }
    v221 = *v335;
    for (i = v335[1]; i != v221; i = MEMORY[0x2199FDA50](i - 304))
      ;
    v335[1] = v221;
    v324 = v99[2];
    for (j = v99[3]; v324 != j; v324 += 192)
    {
      __dst = 0uLL;
      *(_QWORD *)&v354 = 0;
      MEMORY[0x2199FDA44](buf);
      v222 = *((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1) >= (unint64_t)v354)
      {
        v223 = std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>((uint64_t *)&__dst, (uint64_t)buf);
      }
      else
      {
        MEMORY[0x2199FDA2C](*((_QWORD *)&__dst + 1), buf);
        v223 = v222 + 304;
      }
      *((_QWORD *)&__dst + 1) = v223;
      MEMORY[0x2199FDA50](buf);
      v224 = *(const std::string **)(v324 + 24);
      v326 = *(const std::string **)(v324 + 32);
      if (v224 != v326)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v225 = *((_QWORD *)&__dst + 1);
          for (k = __dst; k != v225; k += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, k);
            std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v372, v224);
            v227 = v345;
            if (v345 >= v346)
            {
              v229 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v230 = v229 + 1;
              if (v229 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v230)
                v230 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v231 = 0xD79435E50D7943;
              else
                v231 = v230;
              v390 = &v346;
              if (v231)
                v231 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v231);
              else
                v232 = 0;
              *(_QWORD *)v388 = v231;
              *(_QWORD *)&v388[8] = v231 + 304 * v229;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v231 + 304 * v232;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v228 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v228 = v227 + 304;
            }
            v345 = v228;
            MEMORY[0x2199FDA50](buf);
          }
          ++v224;
        }
        while (v224 != v326);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v233 = *(const std::string **)(v324 + 48);
      v327 = *(const std::string **)(v324 + 56);
      if (v233 != v327)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v234 = *((_QWORD *)&__dst + 1);
          for (m = __dst; m != v234; m += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, m);
            std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)((char *)&v378 + 8), v233);
            v236 = v345;
            if (v345 >= v346)
            {
              v238 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v239 = v238 + 1;
              if (v238 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v239)
                v239 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v240 = 0xD79435E50D7943;
              else
                v240 = v239;
              v390 = &v346;
              if (v240)
                v240 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v240);
              else
                v241 = 0;
              *(_QWORD *)v388 = v240;
              *(_QWORD *)&v388[8] = v240 + 304 * v238;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v240 + 304 * v241;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v237 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v237 = v236 + 304;
            }
            v345 = v237;
            MEMORY[0x2199FDA50](buf);
          }
          ++v233;
        }
        while (v233 != v327);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v242 = *(const CSIPacketAddress **)(v324 + 72);
      v328 = *(const CSIPacketAddress **)(v324 + 80);
      if (v242 != v328)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v243 = *((_QWORD *)&__dst + 1);
          for (n = __dst; n != v243; n += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, n);
            std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>((CSIPacketAddress *)((char *)&v380 + 8), v242);
            v245 = v345;
            if (v345 >= v346)
            {
              v247 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v248 = v247 + 1;
              if (v247 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v248)
                v248 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v249 = 0xD79435E50D7943;
              else
                v249 = v248;
              v390 = &v346;
              if (v249)
                v249 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v249);
              else
                v250 = 0;
              *(_QWORD *)v388 = v249;
              *(_QWORD *)&v388[8] = v249 + 304 * v247;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v249 + 304 * v250;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v246 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v246 = v245 + 304;
            }
            v345 = v246;
            MEMORY[0x2199FDA50](buf);
          }
          v242 = (const CSIPacketAddress *)((char *)v242 + 24);
        }
        while (v242 != v328);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v251 = *(_WORD **)(v324 + 96);
      v329 = *(_WORD **)(v324 + 104);
      if (v251 != v329)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v252 = *((_QWORD *)&__dst + 1);
          for (ii = __dst; ii != v252; ii += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, ii);
            WORD2(v382) = *v251;
            BYTE6(v382) = 1;
            v254 = v345;
            if (v345 >= v346)
            {
              v256 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v257 = v256 + 1;
              if (v256 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v257)
                v257 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v258 = 0xD79435E50D7943;
              else
                v258 = v257;
              v390 = &v346;
              if (v258)
                v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v258);
              else
                v259 = 0;
              *(_QWORD *)v388 = v258;
              *(_QWORD *)&v388[8] = v258 + 304 * v256;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v258 + 304 * v259;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v255 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v255 = v254 + 304;
            }
            v345 = v255;
            MEMORY[0x2199FDA50](buf);
          }
          ++v251;
        }
        while (v251 != v329);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v260 = *(_DWORD **)(v324 + 120);
      v330 = *(_DWORD **)(v324 + 128);
      if (v260 != v330)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v261 = *((_QWORD *)&__dst + 1);
          for (jj = __dst; jj != v261; jj += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, jj);
            DWORD2(v382) = *v260;
            if (!BYTE12(v382))
              BYTE12(v382) = 1;
            v263 = v345;
            if (v345 >= v346)
            {
              v265 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v266 = v265 + 1;
              if (v265 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v266)
                v266 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v267 = 0xD79435E50D7943;
              else
                v267 = v266;
              v390 = &v346;
              if (v267)
                v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v267);
              else
                v268 = 0;
              *(_QWORD *)v388 = v267;
              *(_QWORD *)&v388[8] = v267 + 304 * v265;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v267 + 304 * v268;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v264 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v264 = v263 + 304;
            }
            v345 = v264;
            MEMORY[0x2199FDA50](buf);
          }
          ++v260;
        }
        while (v260 != v330);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v269 = *(_WORD **)(v324 + 144);
      v331 = *(_WORD **)(v324 + 152);
      if (v269 != v331)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v270 = *((_QWORD *)&__dst + 1);
          for (kk = __dst; kk != v270; kk += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, kk);
            HIWORD(v382) = *v269;
            LOBYTE(v383) = 1;
            v272 = v345;
            if (v345 >= v346)
            {
              v274 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v275 = v274 + 1;
              if (v274 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v275)
                v275 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v276 = 0xD79435E50D7943;
              else
                v276 = v275;
              v390 = &v346;
              if (v276)
                v276 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v276);
              else
                v277 = 0;
              *(_QWORD *)v388 = v276;
              *(_QWORD *)&v388[8] = v276 + 304 * v274;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v276 + 304 * v277;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v273 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v273 = v272 + 304;
            }
            v345 = v273;
            MEMORY[0x2199FDA50](buf);
          }
          ++v269;
        }
        while (v269 != v331);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v278 = *(uint64_t **)(v324 + 168);
      v332 = *(uint64_t **)(v324 + 176);
      if (v278 != v332)
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        do
        {
          v279 = *((_QWORD *)&__dst + 1);
          for (mm = __dst; mm != v279; mm += 304)
          {
            v386 = 0u;
            v387 = 0u;
            v384 = 0u;
            v385 = 0u;
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v378 = 0u;
            v379 = 0u;
            v376 = 0u;
            v377 = 0u;
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v371 = 0u;
            memset(buf, 0, sizeof(buf));
            MEMORY[0x2199FDA38](buf, mm);
            v281 = *v278;
            if (!BYTE8(v383))
              BYTE8(v383) = 1;
            DWORD1(v383) = v281;
            v282 = v345;
            if (v345 >= v346)
            {
              v284 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
              v285 = v284 + 1;
              if (v284 + 1 > 0xD79435E50D7943)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v285)
                v285 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                v286 = 0xD79435E50D7943;
              else
                v286 = v285;
              v390 = &v346;
              if (v286)
                v286 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v286);
              else
                v287 = 0;
              *(_QWORD *)v388 = v286;
              *(_QWORD *)&v388[8] = v286 + 304 * v284;
              *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
              v389 = v286 + 304 * v287;
              MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
              *(_QWORD *)&v388[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
              v283 = v345;
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
            }
            else
            {
              MEMORY[0x2199FDA38](v345, buf);
              v283 = v282 + 304;
            }
            v345 = v283;
            MEMORY[0x2199FDA50](buf);
          }
          ++v278;
        }
        while (v278 != v332);
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v344, v345, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      if (*(_QWORD *)v324 != *(_QWORD *)(v324 + 8))
      {
        v344 = 0;
        v345 = 0;
        v346 = 0;
        v288 = *(const std::string **)v324;
        v333 = *(const std::string **)(v324 + 8);
        if (*(const std::string **)v324 == v333)
        {
          v298 = 0;
          v297 = 0;
        }
        else
        {
          do
          {
            v289 = *((_QWORD *)&__dst + 1);
            for (nn = __dst; nn != v289; nn += 304)
            {
              v386 = 0u;
              v387 = 0u;
              v384 = 0u;
              v385 = 0u;
              v382 = 0u;
              v383 = 0u;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
              v376 = 0u;
              v377 = 0u;
              v374 = 0u;
              v375 = 0u;
              v372 = 0u;
              v373 = 0u;
              v371 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x2199FDA38](buf, nn);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v384, v288);
              v291 = v345;
              if (v345 >= v346)
              {
                v293 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v345 - (_QWORD)v344) >> 4);
                v294 = v293 + 1;
                if (v293 + 1 > 0xD79435E50D7943)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                if (0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4) > v294)
                  v294 = 0xD79435E50D79436 * ((uint64_t)(v346 - (_QWORD)v344) >> 4);
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v346 - (_QWORD)v344) >> 4) >= 0x6BCA1AF286BCA1)
                  v295 = 0xD79435E50D7943;
                else
                  v295 = v294;
                v390 = &v346;
                if (v295)
                  v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v295);
                else
                  v296 = 0;
                *(_QWORD *)v388 = v295;
                *(_QWORD *)&v388[8] = v295 + 304 * v293;
                *(_QWORD *)&v388[16] = *(_QWORD *)&v388[8];
                v389 = v295 + 304 * v296;
                MEMORY[0x2199FDA38](*(_QWORD *)&v388[8], buf);
                *(_QWORD *)&v388[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v344, v388);
                v292 = v345;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v388);
              }
              else
              {
                MEMORY[0x2199FDA38](v345, buf);
                v292 = v291 + 304;
              }
              v345 = v292;
              MEMORY[0x2199FDA50](buf);
            }
            ++v288;
          }
          while (v288 != v333);
          v297 = (uint64_t)v344;
          v298 = v345;
        }
        std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, v297, v298, 0x86BCA1AF286BCA1BLL * ((v298 - v297) >> 4));
        *(_QWORD *)buf = &v344;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v299 = *a3;
      if (*a3)
      {
        v300 = *v299;
        if (os_log_type_enabled(*v299, OS_LOG_TYPE_DEFAULT))
        {
          v301 = *((unsigned __int16 *)v365 + 20);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v301;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 678152731 * ((*((_QWORD *)&__dst + 1) - (_QWORD)__dst) >> 4);
          _os_log_impl(&dword_216897000, v300, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.1), newTds.size()=%u", buf, 0x18u);
        }
      }
      v302 = (TrafficDescriptor *)*((_QWORD *)&__dst + 1);
      v334 = (TrafficDescriptor *)*((_QWORD *)&__dst + 1);
      for (i1 = (TrafficDescriptor *)__dst; i1 != v302; i1 = (TrafficDescriptor *)((char *)i1 + 304))
      {
        v304 = *a3;
        if (*a3)
        {
          v305 = *v304;
          if (os_log_type_enabled(*v304, OS_LOG_TYPE_DEFAULT))
          {
            TrafficDescriptor::toString(i1);
            v306 = buf;
            if ((buf[23] & 0x80u) != 0)
              v306 = *(uint8_t **)buf;
            *(_DWORD *)v388 = 136315394;
            *(_QWORD *)&v388[4] = "processWdsTdInfoInd";
            *(_WORD *)&v388[12] = 2082;
            *(_QWORD *)&v388[14] = v306;
            _os_log_impl(&dword_216897000, v305, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo newTd: %{public}s", v388, 0x16u);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
        }
        if ((TrafficDescriptor::empty(i1) & 1) == 0)
        {
          v308 = v335[1];
          v307 = v335[2];
          if (v308 >= v307)
          {
            v311 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v308 - *v335) >> 4);
            v312 = v311 + 1;
            if (v311 + 1 > 0xD79435E50D7943)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v313 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v307 - *v335) >> 4);
            if (2 * v313 > v312)
              v312 = 2 * v313;
            if (v313 >= 0x6BCA1AF286BCA1)
              v314 = 0xD79435E50D7943;
            else
              v314 = v312;
            *(_QWORD *)&v371 = v335 + 2;
            if (v314)
              v314 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v314);
            else
              v315 = 0;
            *(_QWORD *)buf = v314;
            *(_QWORD *)&buf[8] = v314 + 304 * v311;
            *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[24] = v314 + 304 * v315;
            MEMORY[0x2199FDA38](*(_QWORD *)&buf[8], i1);
            v310 = v335;
            *(_QWORD *)&buf[16] += 304;
            std::vector<TrafficDescriptor>::__swap_out_circular_buffer(v335, buf);
            v309 = v335[1];
            std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            MEMORY[0x2199FDA38](v335[1], i1);
            v309 = v308 + 304;
            v310 = v335;
            v335[1] = v309;
          }
          v310[1] = v309;
        }
        v302 = v334;
      }
      *(_QWORD *)buf = &__dst;
      std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    v316 = *a3;
    if (*a3)
    {
      v317 = *v316;
      if (os_log_type_enabled(*v316, OS_LOG_TYPE_DEFAULT))
      {
        v318 = *((unsigned __int16 *)v365 + 20);
        v319 = 678152731 * ((unint64_t)(v335[1] - *v335) >> 4);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v318;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v319;
        _os_log_impl(&dword_216897000, v317, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.2), trafficInfo.trafficDescriptors.size()=%u", buf, 0x18u);
      }
    }
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v325, *((_WORD *)v365 + 20));
    v96 = 1;
  }
  else
  {
    v96 = 0;
  }
  v320 = *a3;
  if (*a3)
  {
    v321 = *v320;
    if (os_log_type_enabled(*v320, OS_LOG_TYPE_DEFAULT))
    {
      v322 = *((unsigned __int16 *)v365 + 20);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v322;
      _os_log_impl(&dword_216897000, v321, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u (14)", buf, 0x12u);
    }
  }
LABEL_80:
  _Block_object_dispose(&v357, 8);
  _Block_object_dispose(&v364, 8);
  return v96;
}

void sub_21695B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  *v22 = v21;
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  _Block_object_dispose(&STACK[0x300], 8);
  STACK[0x220] = a21;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Block_object_dispose((const void *)(v23 - 160), 8);
  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

__n128 __Block_byref_object_copy__196(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__197(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void QMIDataCommandDriver::notifyCellularDataSwitchingAllowed_sync(QMIDataCommandDriver *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  const void **v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *aBlock;
  void *__p[2];
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 buf;
  void (*v45)(uint64_t, uint64_t);
  void *v46;
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  v43 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v3);
  v43 = v5;
  if (!v5
    || (v6 = *((_QWORD *)this + 5), (v42 = v6) == 0)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 496))(v6) & 1) != 0
    || !*((_QWORD *)this + 20))
  {
LABEL_11:
    v8 = *((_QWORD *)this + 12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "notifyCellularDataSwitchingAllowed_sync";
      _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "%s: driver not ready", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_13;
  }
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v41)
  {
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v41)
        goto LABEL_22;
    }
  }
  if (v7 == (const void **)v41)
  {
LABEL_22:
    v13 = operator new();
    v14 = v13;
    *(_WORD *)(v13 + 8) = 16;
    *(_QWORD *)v13 = &off_24D5D1140;
    v15 = v41;
    if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
    {
      v17 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v18 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v19);
      else
        v20 = 0;
      v21 = (uint64_t *)&v20[8 * v17];
      v22 = &v20[8 * v19];
      *v21 = v14;
      v16 = v21 + 1;
      v24 = (char *)__p[1];
      v23 = (char *)v41;
      if ((void *)v41 != __p[1])
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = (char *)__p[1];
      }
      __p[1] = v21;
      *(_QWORD *)&v41 = v16;
      *((_QWORD *)&v41 + 1) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v41 = v13;
      v16 = (_QWORD *)(v15 + 8);
    }
    v12 = (_BYTE *)(v14 + 9);
    *(_QWORD *)&v41 = v16;
  }
  else
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = v11 + 9;
  }
  *v12 = a2;
  v35 = (char *)this + 144;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  aBlock = 0;
  v26 = MEMORY[0x24BDAC760];
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 1174405120;
  v33[2] = ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke_2;
  v33[3] = &__block_descriptor_tmp_202_0;
  v33[4] = this;
  v33[5] = v6;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v34 = v5;
  do
    v28 = __ldxr(p_shared_owners);
  while (__stxr(v28 + 1, p_shared_owners));
  *(_QWORD *)&buf = v26;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v45 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
  v46 = &unk_24D5CFD50;
  v47 = v33;
  v29 = _Block_copy(&buf);
  aBlock = v29;
  if (v36)
  {
    qmi::Client::send();
    v29 = aBlock;
  }
  if (v29)
    _Block_release(v29);
  v30 = v34;
  if (v34)
  {
    v31 = (unint64_t *)&v34->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v5 = v43;
LABEL_13:
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21695BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 496))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      v5 = *(NSObject **)(v3 + 96);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109378;
        v6[1] = v4;
        v7 = 2080;
        v8 = qmi::asString();
        _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "NotifyDynamicCellularDataSwitchState failed: 0x%x (%s)", (uint8_t *)v6, 0x12u);
      }
    }
  }
}

void `non-virtual thunk to'QMIDataCommandDriver::notifyCellularDataSwitchingAllowed_sync(QMIDataCommandDriver *this, char a2)
{
  QMIDataCommandDriver::notifyCellularDataSwitchingAllowed_sync((QMIDataCommandDriver *)((char *)this - 32), a2);
}

void BBDataCommandDriverInterface::setDataDriver(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

uint64_t BBDataCommandDriverInterface::getDataDriver@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

const char *QMIDataCommandDriver::getDriverTypeName(QMIDataCommandDriver *this)
{
  return "QMIDriver";
}

const char *QMIDataCommandDriver::getDriverName(QMIDataCommandDriver *this)
{
  return "qmi";
}

void QMIDataCommandDriver::getDeviceNAI(QMIDataCommandDriver *this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 24), *((_QWORD *)this + 25));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 12);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 26);
  }
  std::mutex::unlock(v4);
}

void sub_21695BF7C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataCommandDriver::isCDMASupported(QMIDataCommandDriver *this)
{
  return 1;
}

uint64_t QMIDataCommandDriver::useRealBBDataSettingsInUnitTests(QMIDataCommandDriver *this)
{
  return 1;
}

const char *`non-virtual thunk to'QMIDataCommandDriver::getDriverTypeName(QMIDataCommandDriver *this)
{
  return "QMIDriver";
}

const char *`non-virtual thunk to'QMIDataCommandDriver::getDriverName(QMIDataCommandDriver *this)
{
  return "qmi";
}

void `non-virtual thunk to'QMIDataCommandDriver::getDeviceNAI(QMIDataCommandDriver *this@<X0>, std::string *a2@<X8>)
{
  QMIDataCommandDriver::getDeviceNAI((QMIDataCommandDriver *)((char *)this - 32), a2);
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::isCDMASupported(QMIDataCommandDriver *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'QMIDataCommandDriver::useRealBBDataSettingsInUnitTests(QMIDataCommandDriver *this)
{
  return 1;
}

void std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 56);
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(v4 - 192));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor(QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = MEMORY[0x2199FDA50](v4 - 304);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<tlv::NestedTlv<(unsigned char)16,qos::tlv::QoSFilter>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21695C200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t std::deque<dispatch::group_session>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  dispatch_object_t *v7;
  uint64_t v8;
  dispatch_object_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (dispatch_object_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (dispatch_object_t *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(v7++);
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (dispatch_object_t *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (dispatch_object_t *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 512;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(dispatch_object_t *a1)
{
  NSObject *v2;

  v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1)
      dispatch_release(*a1);
  }
}

void std::deque<dispatch::group_session>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_21695C7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 24));
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CFAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5CFAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  if (result)
  {
    v1 = result;
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(result + 24));
    v2 = *(NSObject **)(v1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *(NSObject **)(v1 + 16);
      if (v3)
        dispatch_release(v3);
    }
    std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

_QWORD *ctu::os::signpost_interval::signpost_interval(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2 + 2;
  v6 = a2 + 5;
  v7 = (_QWORD *)a2[5];
  if (!v7)
  {
    v6 = a1 + 5;
    goto LABEL_5;
  }
  if (v7 != v5)
  {
    a1[5] = v7;
LABEL_5:
    *v6 = 0;
    goto LABEL_7;
  }
  a1[5] = a1 + 2;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_7:
  *a2 = 0;
  a2[1] = 0;
  v8 = (_QWORD *)a2[5];
  a2[5] = 0;
  if (v8 == v5)
  {
    v9 = 4;
    v8 = v5;
    goto LABEL_11;
  }
  if (v8)
  {
    v9 = 5;
LABEL_11:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  ctu::os::signpost_interval *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v11, &v10);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
    os_release(v4);
  v5 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 1) = 0;
  v6 = (ctu::os::signpost_interval *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    v7 = 4;
    v6 = (ctu::os::signpost_interval *)((char *)this + 16);
  }
  else
  {
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)this = 0;
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
    v5 = v8;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(*a1);
    std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(a1[1]);
    qmi::Client::~Client((qmi::Client *)(a1 + 5));
    operator delete(a1);
  }
}

void **std::__tree<std::string>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695CCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds15LTEAttachParams10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695CDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds13FDBackoffTime10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695CED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds6TdInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695CFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds9RouteInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695D0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds16PduSessionLookup10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695D1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds10Congestion10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds8WakeUpAp10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695D3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::FrameList>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 17)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 17;
    *(_QWORD *)v7 = &off_24D5CFC80;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CFC80;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5CFC80;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FrameList>((_QWORD *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::FrameList>(a2, (__int128 **)(a1 + 16));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5CFC80;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
  return v2;
}

void sub_21695D6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::NumFrames>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 16)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_24D5CFCD0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFCD0;
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5CFD20;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFD20;
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v11 = result;
    v10 = tlv::parseV<wds::tlv::DormancyStatus>((unint64_t *)&v11, v7);
    if (v11)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v13 = result;
    v11 = tlv::parseV<wds::tlv::CurrentDataBearerTech>((unint64_t *)&v13, v7);
    v12 = v10;
    if (v13)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *TlvValue;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  void *__p[2];
  __int128 v12;
  unsigned __int8 *v13;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v8 = TlvValue;
    v9 = v7;
    v13 = TlvValue;
    *(_OWORD *)__p = 0u;
    v12 = 0u;
    tlv::parseV<wds::tlv::DataSystemStatus>(&v13, v7, __p);
    v10 = v13;
    if (v13)
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
    if (__p[1])
    {
      *(void **)&v12 = __p[1];
      operator delete(__p[1]);
    }
    if (!v10)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
}

void sub_21695DD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  std::string::value_type *TlvValue;
  int v5;
  std::string::value_type *v6;
  int v7;
  std::string::value_type *v8;
  std::string __p;
  std::string::value_type *v10;

  TlvValue = (std::string::value_type *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(&__p, 0, sizeof(__p));
    tlv::parseV<wds::tlv::AttachParamsAPN>(&v10, v5, &__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v8)
        return;
LABEL_8:
      ((void (*)(_QWORD, uint64_t, std::string::value_type *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 16, v6, v7);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v8)
      goto LABEL_8;
  }
}

void sub_21695DE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<wds::tlv::AttachParamsIPType>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 17, v6, v7);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v11 = result;
    v10 = tlv::parseV<wds::tlv::AttachParamsIPv4Addr>((unint64_t *)&v11, v7);
    if (v11)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v11 = result;
    v10 = tlv::parseV<wds::tlv::AttachParamsIPv4Gateway>((unint64_t *)&v11, v7);
    if (v11)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v11 = result;
    v10 = tlv::parseV<wds::tlv::AttachParamsIPv4Mask>((unint64_t *)&v11, v7);
    if (v11)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v10 = result;
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    tlv::parseV<wds::tlv::AttachParamsIPv6Addr>((unint64_t *)&v10, v7, (uint64_t)v11);
    if (v10)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v10 = result;
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    tlv::parseV<wds::tlv::AttachParamsIPv6Gateway>((unint64_t *)&v10, v7, (uint64_t)v11);
    if (v10)
      return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::ReportDormancyStatus>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::ReportDormancyStatus>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::ReportDormancyStatus>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &unk_24D5CFD98;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D5CFD98;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFDE8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFE38;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFE88;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetEventReport8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17GetDormancyStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695E940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetCurrentDataBearerTech8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695EA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFF50;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFFA0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5CFFF0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0040;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0090;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D00E0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<wds::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21695EF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<wds::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_21695EFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21695F02C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21695F06C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0158;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds27SetThroughputInfoIndFreqReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695F204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18GetLTEAttachParams8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695F300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D01F8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14ReadMIPProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695F4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26GetCurrentDataSystemStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695F5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

double std::deque<dispatch::group_session>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  dispatch_object_t *v9;
  uint64_t v10;
  dispatch_object_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  if ((void **)v5 == v4)
  {
    v6 = a1 + 5;
    v5 = a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 >> 9];
    v9 = (dispatch_object_t *)((char *)*v8 + 8 * (v7 & 0x1FF));
    v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v7) & 0x1FF);
    if (v9 != (dispatch_object_t *)v10)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(v9++);
        if ((char *)v9 - (_BYTE *)*v8 == 4096)
        {
          v11 = (dispatch_object_t *)v8[1];
          ++v8;
          v9 = v11;
        }
      }
      while (v9 != (dispatch_object_t *)v10);
      v4 = (void **)a1[1];
      v5 = a1[2];
    }
  }
  *v6 = 0;
  v12 = v5 - (_QWORD)v4;
  if ((unint64_t)(v5 - (_QWORD)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v5 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v12 = v5 - (_QWORD)v4;
    }
    while ((unint64_t)(v5 - (_QWORD)v4) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 256;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_15;
    v14 = 512;
  }
  a1[4] = v14;
LABEL_15:
  if (a1[5])
  {
    if (a1[4] >= 0x200uLL)
    {
      operator delete(*v4);
      a1[1] += 8;
      a1[4] -= 512;
    }
    std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    if ((void **)v5 != v4)
    {
      do
      {
        operator delete(*(void **)(v5 - 8));
        v15 = a1[1];
        v5 = a1[2] - 8;
        a1[2] = v5;
      }
      while (v5 != v15);
    }
    a1[4] = 0;
  }
  std::__split_buffer<dispatch::group_session *>::shrink_to_fit((void **)a1);
  v17 = a1[1];
  v16 = a1[2];
  if (v16 != v17)
    a1[2] = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<dispatch::group_session *>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v18;
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = ((v3 - v4) << 6) - 1;
  v6 = v5 - (a1[5] + a1[4]);
  if (v6 < 0x200)
    a2 = 1;
  if (v6 > 0x3FF || (a2 & 1) == 0)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<dispatch::group_session *>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D02E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D02E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = a1[3];
  if (v6)
    dispatch_release(v6);
}

uint64_t *std::unique_ptr<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0,std::default_delete<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x2199FEAC4](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v10;
  uint8_t buf[4];
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = *a1;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[1])
      {
        v6 = *(NSObject **)(v3 + 96);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v12 = "operator()";
          _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Sleep group done, we clear everything", buf, 0xCu);
        }
        QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(*(QMIDataCommandDriver::QMIClientsInfo **)(v3 + 336));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return std::unique_ptr<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0,std::default_delete<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0348;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0398;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D03E8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0438;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds11VoIPAppInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21695FF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D04B0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0500;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0500;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<wds::tlv::Dnn>(a2, (_QWORD *)(a1 + 16));
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D0500;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_2169601AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0550;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0550;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<wds::tlv::Dnn>(a2, (_QWORD *)(a1 + 16));
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D0550;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_216960330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D05A0;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::PduSessionId>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::PduSessionId>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::PduSessionId>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::PduSessionId>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &unk_24D5D05F0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D5D05F0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16FreePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169607F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_QWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileTypeMask>((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0668;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D06B8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17NotifyDataService8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216960A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds20AllocatePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216960B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIK20QMIDataCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIK20QMIDataCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0790;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D07E0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0830;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0880;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D08D0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0920;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LinkStat>(a2, (_DWORD *)(a1 + 12));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0970;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds9GetTdInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21696124C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int64x2_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v2 >> 1) & 0x7FFFFFFFFFFFFFF8));
  v4 = v2 & 0xF;
  v5 = v3 + 336 * (v2 & 0xF);
  v6 = (_QWORD *)(v5 + 304);
  v7 = *(_QWORD **)(v5 + 328);
  if (v7 == (_QWORD *)(v5 + 304))
  {
    v8 = 4;
    v7 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  MEMORY[0x2199FDA50](v3 + 336 * v4);
  v9 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_216AA7A50);
  *(int64x2_t *)(a1 + 32) = v9;
  if (v9.i64[0] >= 0x20uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D09E8;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D0A38;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0A88;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D0A88;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<wds::tlv::Dnn>(a2, (_QWORD *)(a1 + 16));
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D0A88;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_216961640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::~TlvWrapper(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D5D0AD8;
  v3 = (void **)(a1 + 16);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D5D0AD8;
  v3 = (void **)(a1 + 16);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199FEAC4](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::AppList>((uint64_t *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::AppList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::clone(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D0AD8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = *(__int128 **)(a1 + 16);
  v4 = *(__int128 **)(a1 + 24);
  if (v4 != v3)
  {
    std::vector<wds::tlv::AppInfo>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 16), 0xAAAAAAAAAAAAAAABLL * (v4 - v3));
    *(_QWORD *)(v2 + 24) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v2 + 32, v3, v4, *(_QWORD *)(v2 + 24));
  }
  return v2;
}

void sub_21696180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 24) = v10;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x2199FEAC4](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::AppInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::AppInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_BYTE *)(v4 + 16) = *((_BYTE *)v6 + 16);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v4 + 24), *((const void **)v6 + 3), *((_QWORD *)v6 + 4), *((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3));
      v4 = v12 + 48;
      v12 += 48;
      v6 += 3;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216961938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 48)
    {
      v5 = *(void **)(i - 24);
      if (v5)
      {
        *(_QWORD *)(i - 16) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::~TlvWrapper(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D5D0B28;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D5D0B28;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199FEAC4](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FqdnList>((uint64_t *)(a1 + 16));
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::write(uint64_t a1, char **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  char *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  result = tlv::writeV<wds::tlv::FqdnList>(a2, (_DWORD *)(a1 + 16));
  v7 = &(*a2)[-v5];
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::clone(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D0B28;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = *(__int128 **)(a1 + 16);
  v4 = *(__int128 **)(a1 + 24);
  if (v4 != v3)
  {
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 16), 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v3) >> 3));
    *(_QWORD *)(v2 + 24) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v2 + 32, v3, v4, *(std::string **)(v2 + 24));
  }
  return v2;
}

void sub_216961B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 24) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x2199FEAC4](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216961C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
  }
  return a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0B78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0B78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Ipv4AddrList>((_QWORD *)(a1 + 16));
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Ipv4AddrList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  v2 = operator new();
  v3 = v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D0B78;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 16), v6 >> 3);
    v7 = *(char **)(v3 + 24);
    memmove(v7, v5, v6);
    *(_QWORD *)(v3 + 24) = &v7[8 * (v6 >> 3)];
  }
  return v3;
}

void sub_216961E78(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Ipv6AddrList>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 21)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 21;
    *(_QWORD *)v7 = &off_24D5D0BC8;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0BC8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0BC8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Ipv6AddrList>((_QWORD *)(a1 + 16));
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Ipv6AddrList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;

  v2 = operator new();
  v3 = v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D0BC8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<wds::tlv::Ipv6AddrInfo>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 16), 0xF0F0F0F0F0F0F0F1 * v6);
    v7 = *(char **)(v3 + 24);
    memmove(v7, v5, v6);
    *(_QWORD *)(v3 + 24) = &v7[v6];
  }
  return v3;
}

void sub_2169621C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::Ipv6AddrInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF0F0F0F0F0F0F10)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv6AddrInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[17 * v4];
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0C18;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0C18;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::DestPortList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D0C18;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1);
  return v2;
}

void sub_216962394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0C68;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0C68;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::DestPortRangeList>((_QWORD *)(a1 + 16));
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::DestPortRangeList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  v2 = operator new();
  v3 = v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D0C68;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100]((_QWORD *)(v2 + 16), v6 >> 2);
    v7 = *(char **)(v3 + 24);
    memmove(v7, v5, v6);
    *(_QWORD *)(v3 + 24) = &v7[4 * (v6 >> 2)];
  }
  return v3;
}

void sub_216962544(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0CB8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D0CB8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::NextHdrProtList>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D0CB8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169626C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D0CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D0CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16PduSessionLookup8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21696281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__251(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t __Block_byref_object_copy__255(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_257(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = *a2;
  return result;
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(int64x2_t *a1, uint64_t a2)
{
  int64x2_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t *v24;

  v4 = a1 + 1;
  v5 = a1[1].u64[0];
  v6 = (_QWORD *)a1->i64[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - a1->i64[0]) >> 6);
    if (v9 + 1 > 0x155555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - a1->i64[0]) >> 6);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0xAAAAAAAAAAAAAALL)
      v12 = 0x155555555555555;
    else
      v12 = v11;
    v24 = (uint64_t *)v4;
    if (v12)
    {
      v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(v12);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = (char *)&v14[24 * v13];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(&v14[24 * v9], a2);
    v8 = v16 + 192;
    v18 = a1->i64[0];
    v17 = a1->u64[1];
    if (v17 == a1->i64[0])
    {
      v19 = vdupq_n_s64(v17);
    }
    else
    {
      do
      {
        v17 -= 192;
        std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((_QWORD *)(v16 - 192), v17);
      }
      while (v17 != v18);
      v19 = *a1;
    }
    a1->i64[0] = v16;
    a1->i64[1] = v8;
    v22 = v19;
    v20 = a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v15;
    v23 = v20;
    v21 = v19.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v6, a2);
    v8 = v7 + 192;
  }
  a1->i64[1] = v8;
}

uint64_t *std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(uint64_t **a1, unsigned __int16 a2)
{
  unsigned int v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *((unsigned __int16 *)a1 + 16);
      if (v2 <= a2)
        break;
      a1 = (uint64_t **)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return (uint64_t *)(a1 + 5);
    a1 = (uint64_t **)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_260(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

__n128 __Block_byref_object_copy__263(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__264(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_265(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

__n128 __Block_byref_object_copy__267(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__268(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_269(uint64_t a1, __int128 **a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2 != (uint64_t *)a2)
    std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_271(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

__n128 __Block_byref_object_copy__273(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__274(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_275(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

__n128 __Block_byref_object_copy__277(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__278(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__281(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__282(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__285(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__286(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__289(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__290(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__293(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__294(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

CSIPacketAddress *std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>(CSIPacketAddress *this, const CSIPacketAddress *a2)
{
  if (*((_BYTE *)this + 24))
  {
    CSIPacketAddress::operator=();
  }
  else
  {
    CSIPacketAddress::CSIPacketAddress(this, a2);
    *((_BYTE *)this + 24) = 1;
  }
  return this;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<wds::tlv::TransactionInfo>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 1, v6, v7);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<wds::tlv::TdFragmentInfo>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 2, v6, v7);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  void **v14;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = *((unsigned __int16 *)v6 + 16);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      v14 = (void **)(v5 + 7);
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v14);
      operator delete(v5);
    }
  }
}

__n128 std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 21) = result;
  a1[23] = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(unint64_t a1)
{
  if (a1 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a1);
}

uint64_t std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(i - 192));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)v5;
        v8 = v5[16];
        if (v8 <= a2)
          break;
        v5 = *(unsigned __int16 **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int16 *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_WORD *)v7 + 16) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  std::vector<std::string> *v9;
  std::vector<std::string> *v10;
  std::vector<std::string> *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<std::string> *v19;
  std::vector<std::string> *i;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::vector<std::string> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 6) < a4)
  {
    if (v9)
    {
      v10 = *(std::vector<std::string> **)(a1 + 8);
      v11 = v9;
      if (v10 != v9)
      {
        do
          QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)&v10[-8]);
        while (v10 != v9);
        v11 = *(std::vector<std::string> **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x155555555555555)
      goto LABEL_22;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v13;
    if (v14 > 0x155555555555555)
LABEL_22:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(v14);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = &v15[192 * v16];
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(a2, a3, (uint64_t)v15);
    goto LABEL_17;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6) < a4)
  {
    v18 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6 << 6);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(a2, v18, v9);
    v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v18, a3, *(_QWORD *)(a1 + 8));
LABEL_17:
    *(_QWORD *)(a1 + 8) = v17;
    return;
  }
  v19 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(a2, a3, v9);
  for (i = *(std::vector<std::string> **)(a1 + 8);
        i != v19;
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_2169634D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2169634DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;

  if (a1 != a2)
  {
    v5 = 0;
    do
    {
      v6 = (_QWORD *)(a3 + v5);
      v7 = a1 + v5;
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + v5), *(__int128 **)(a1 + v5), *(__int128 **)(a1 + v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v5 + 8) - *(_QWORD *)(a1 + v5)) >> 3));
      v6[3] = 0;
      v6[4] = 0;
      v8 = (std::string *)(a3 + v5 + 24);
      v8->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *(__int128 **)(v7 + 24), *(__int128 **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 3));
      v9 = a3 + v5;
      v10 = a3 + v5;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      v11 = (std::string *)(a3 + v5 + 48);
      v11->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)(v7 + 48), *(__int128 **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 80) = 0;
      v12 = (_QWORD *)(a3 + v5 + 72);
      *(_QWORD *)(a3 + v5 + 88) = 0;
      v13 = *(_QWORD *)(a1 + v5 + 72);
      v14 = *(_QWORD *)(a1 + v5 + 80);
      if (v14 != v13)
      {
        std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](v12, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3));
        std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>((uint64_t)v12, v13, v14);
      }
      v15 = a3 + v5;
      v16 = a3 + v5;
      *(_QWORD *)(v16 + 96) = 0;
      *(_QWORD *)(v16 + 104) = 0;
      v17 = (_QWORD *)(a3 + v5 + 96);
      v17[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v17, *(const void **)(v7 + 96), *(_QWORD *)(v7 + 104), (uint64_t)(*(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96)) >> 1);
      *(_QWORD *)(v15 + 120) = 0;
      *(_QWORD *)(v15 + 128) = 0;
      v18 = a3 + v5 + 120;
      *(_QWORD *)(v18 + 16) = 0;
      std::vector<std::pair<unsigned short,unsigned short>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>*>((char *)v18, *(int **)(v7 + 120), *(int **)(v7 + 128), (uint64_t)(*(_QWORD *)(v7 + 128) - *(_QWORD *)(v7 + 120)) >> 2);
      v19 = a3 + v5;
      v20 = a3 + v5;
      *(_QWORD *)(v20 + 144) = 0;
      *(_QWORD *)(v20 + 152) = 0;
      v21 = (_QWORD *)(a3 + v5 + 144);
      v21[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v21, *(const void **)(v7 + 144), *(_QWORD *)(v7 + 152), (uint64_t)(*(_QWORD *)(v7 + 152) - *(_QWORD *)(v7 + 144)) >> 1);
      *(_QWORD *)(v19 + 168) = 0;
      *(_QWORD *)(v19 + 176) = 0;
      *(_QWORD *)(a3 + v5 + 184) = 0;
      v23 = *(_BYTE **)(v7 + 168);
      v22 = *(_BYTE **)(v7 + 176);
      v24 = v22 - v23;
      if (v22 != v23)
      {
        std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100]((_QWORD *)(a3 + v5 + 168), v24 >> 3);
        v25 = *(char **)(a3 + v5 + 176);
        memmove(v25, v23, v24);
        *(_QWORD *)(a3 + v5 + 176) = &v25[8 * (v24 >> 3)];
      }
      v5 += 192;
    }
    while (v7 + 192 != a2);
    a3 += v5;
  }
  return a3;
}

void sub_2169636A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v13 = v10 + v11;
  v14 = *(void **)(v10 + v11 + 168);
  if (v14)
  {
    *(_QWORD *)(v13 + 176) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v13 + 144);
  if (v15)
  {
    *(_QWORD *)(v10 + v11 + 152) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v10 + v11 + 120);
  if (v16)
  {
    *(_QWORD *)(v10 + v11 + 128) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v10 + v11 + 96);
  if (v17)
  {
    *(_QWORD *)(v10 + v11 + 104) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v10 + v11 + 72);
  if (v18)
  {
    *(_QWORD *)(v10 + v11 + 80) = v18;
    operator delete(v18);
  }
  a10 = (void **)(v10 + v11 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + v11 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + v11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v11)
  {
    v19 = v10 - 192;
    do
    {
      QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(v19 + v11));
      v11 -= 192;
    }
    while (v11);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2169637FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2169638C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(v4 + v7), (const CSIPacketAddress *)(a2 + v7));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_2169639B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned short,unsigned short>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>*>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_216963A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(uint64_t a1, uint64_t a2, std::vector<std::string> *this)
{
  uint64_t v4;
  uint64_t v5;
  std::string *begin;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *value;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<std::string> *v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<std::string>::pointer v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v25;
  int v26;
  int64_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  std::vector<std::string>::pointer v31;
  _DWORD *v32;
  int v33;
  std::vector<std::string>::pointer v34;
  std::vector<std::string>::pointer v35;
  int v36;
  std::string *v37;
  char *v38;
  _BYTE *v39;
  size_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::string **p_end;
  uint64_t v46;
  std::vector<std::string>::pointer v47;
  unint64_t v48;
  char *v49;
  std::vector<std::string>::pointer v50;

  if (a1 != a2)
  {
    v4 = a2;
    v5 = a1;
    while (this == (std::vector<std::string> *)v5)
    {
LABEL_63:
      v5 += 192;
      this += 8;
      if (v5 == v4)
        return this;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *(std::string **)(v5 + 24), *(__int128 **)(v5 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *(std::string **)(v5 + 48), *(__int128 **)(v5 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 3));
    begin = this[3].__begin_;
    v8 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
    value = this[3].__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= v9)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)this[3].__end_ - (char *)begin) >> 3) >= v9)
      {
        this[3].__end_ = (std::vector<std::string>::pointer)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(*(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), (uint64_t)begin);
LABEL_18:
        std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)&this[4], *(char **)(v5 + 96), *(_QWORD *)(v5 + 104), (uint64_t)(*(_QWORD *)(v5 + 104) - *(_QWORD *)(v5 + 96)) >> 1);
        v17 = this[5].__begin_;
        v19 = *(char **)(v5 + 120);
        v18 = *(char **)(v5 + 128);
        v20 = (v18 - v19) >> 2;
        v21 = (uint64_t)this[5].__end_cap_.__value_;
        if (v20 <= (v21 - (uint64_t)v17) >> 2)
        {
          end = this[5].__end_;
          v28 = ((char *)end - (char *)v17) >> 2;
          if (v28 >= v20)
          {
            v34 = this[5].__begin_;
            if (v19 != v18)
            {
              v35 = this[5].__begin_;
              do
              {
                v36 = *(_DWORD *)v19;
                v19 += 4;
                LODWORD(v35->__r_.__value_.__l.__data_) = v36;
                v35 = (std::vector<std::string>::pointer)((char *)v35 + 4);
                v34 = (std::vector<std::string>::pointer)((char *)v34 + 4);
              }
              while (v19 != v18);
            }
            v27 = (char *)v34 - (char *)v17;
            end = v17;
          }
          else
          {
            v29 = &v19[4 * v28];
            if (end != v17)
            {
              do
              {
                v30 = *(_DWORD *)v19;
                v19 += 4;
                LODWORD(v17->__r_.__value_.__l.__data_) = v30;
                v17 = (std::vector<std::string>::pointer)((char *)v17 + 4);
              }
              while (v19 != v29);
            }
            v31 = end;
            if (v29 != v18)
            {
              v32 = end;
              do
              {
                v33 = *(_DWORD *)v29;
                v29 += 4;
                *v32++ = v33;
                v31 = (std::vector<std::string>::pointer)((char *)v31 + 4);
              }
              while (v29 != v18);
            }
            v27 = (char *)v31 - (char *)end;
          }
        }
        else
        {
          if (v17)
          {
            this[5].__end_ = v17;
            operator delete(v17);
            v21 = 0;
            this[5].__begin_ = 0;
            this[5].__end_ = 0;
            this[5].__end_cap_.__value_ = 0;
          }
          if (v18 - v19 < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v22 = v21 >> 1;
          if (v21 >> 1 <= v20)
            v22 = (v18 - v19) >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          std::vector<unsigned int>::__vallocate[abi:ne180100](&this[5].__begin_, v23);
          end = this[5].__end_;
          v25 = end;
          if (v19 != v18)
          {
            v25 = this[5].__end_;
            do
            {
              v26 = *(_DWORD *)v19;
              v19 += 4;
              LODWORD(v25->__r_.__value_.__l.__data_) = v26;
              v25 = (std::vector<std::string>::pointer)((char *)v25 + 4);
            }
            while (v19 != v18);
          }
          v27 = (char *)v25 - (char *)end;
        }
        this[5].__end_ = (std::vector<std::string>::pointer)((char *)end + v27);
        std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)&this[6], *(char **)(v5 + 144), *(_QWORD *)(v5 + 152), (uint64_t)(*(_QWORD *)(v5 + 152) - *(_QWORD *)(v5 + 144)) >> 1);
        v37 = this[7].__begin_;
        v38 = *(char **)(v5 + 168);
        v39 = *(_BYTE **)(v5 + 176);
        v40 = v39 - v38;
        v41 = (v39 - v38) >> 3;
        v42 = (uint64_t)this[7].__end_cap_.__value_;
        if (v41 > (v42 - (uint64_t)v37) >> 3)
        {
          if (v37)
          {
            this[7].__end_ = v37;
            operator delete(v37);
            v42 = 0;
            this[7].__begin_ = 0;
            this[7].__end_ = 0;
            this[7].__end_cap_.__value_ = 0;
          }
          if ((v40 & 0x8000000000000000) != 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v43 = v42 >> 2;
          if (v42 >> 2 <= v41)
            v43 = (v39 - v38) >> 3;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](&this[7].__begin_, v44);
          p_end = &this[7].__end_;
          v37 = this[7].__end_;
          if (v39 != v38)
            memmove(this[7].__end_, v38, v39 - v38);
          goto LABEL_62;
        }
        v46 = v4;
        p_end = &this[7].__end_;
        v47 = this[7].__end_;
        v48 = ((char *)v47 - (char *)v37) >> 3;
        if (v48 >= v41)
        {
          if (v39 == v38)
          {
LABEL_61:
            v4 = v46;
LABEL_62:
            *p_end = (std::string *)((char *)v37 + v40);
            goto LABEL_63;
          }
          v50 = this[7].__begin_;
          v49 = *(char **)(v5 + 168);
        }
        else
        {
          if (v47 != v37)
          {
            memmove(this[7].__begin_, *(const void **)(v5 + 168), (char *)v47 - (char *)v37);
            v37 = *p_end;
          }
          v49 = &v38[8 * v48];
          v40 = v39 - v49;
          if (v39 == v49)
            goto LABEL_61;
          v50 = v37;
        }
        memmove(v50, v49, v40);
        goto LABEL_61;
      }
      v16 = v8 + 8 * (((char *)this[3].__end_ - (char *)begin) >> 3);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(*(_QWORD *)(v5 + 72), v16, (uint64_t)begin);
      v14 = this + 3;
      v15 = v16;
    }
    else
    {
      if (begin)
      {
        this[3].__end_ = begin;
        operator delete(begin);
        value = 0;
        this[3].__begin_ = 0;
        this[3].__end_ = 0;
        this[3].__end_cap_.__value_ = 0;
      }
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v9)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](&this[3].__begin_, v13);
      v14 = this + 3;
      v15 = v8;
    }
    std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>((uint64_t)v14, v15, v7);
    goto LABEL_18;
  }
  return this;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_216963F94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216963F9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      CSIPacketAddress::operator=();
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(qmi::MessageBase *a1, _QWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<wds::tlv::TdApnTypeMask>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(_QWORD))(*a2 + 16))(*a2);
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 16, v6, v7);
  }
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8[3];
  unsigned __int8 *v9;
  void **v10;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    memset(v8, 0, sizeof(v8));
    tlv::parseV<wds::tlv::DnnList>(&v9, v5, v8);
    if (v9)
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v10 = (void **)v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    else
    {
      v10 = (void **)v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 17, v6, v7);
    }
  }
}

void sub_2169642F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *i;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_20;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_20:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v13);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[v15];
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v9, (__int128 *)__str, a3, v14);
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3) < a4)
  {
    v17 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v9, (__int128 *)v17, a3, *(std::string **)(a1 + 8));
LABEL_14:
    *(_QWORD *)(a1 + 8) = v16;
    return;
  }
  v18 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, (std::string *)a3, v10);
  for (i = *(std::string **)(a1 + 8); i != v18; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(a1 + 8) = v18;
}

void sub_216964494(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21696449C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216964548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

void qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8[3];
  unsigned __int8 *v9;
  void **v10;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    memset(v8, 0, sizeof(v8));
    tlv::parseV<wds::tlv::AppList>(&v9, v5, v8);
    if (v9)
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v10 = (void **)v8;
      std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    else
    {
      v10 = (void **)v8;
      std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 19, v6, v7);
    }
  }
}

void sub_21696467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<wds::tlv::AppInfo>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    std::vector<wds::tlv::AppInfo>::__vallocate[abi:ne180100](a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 4) < a4)
  {
    v15 = &a2[(a1[1] - v10) >> 4];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(a2, v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(a2, a3, v10);
  for (i = a1[1]; i != v16; i -= 48)
  {
    v18 = *(void **)(i - 24);
    if (v18)
    {
      *(_QWORD *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  a1[1] = v16;
}

void sub_216964804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21696480C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      *(_OWORD *)a3 = v6;
      if (v5 != (__int128 *)a3)
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 24), *((char **)v5 + 3), *((char **)v5 + 4), *((_QWORD *)v5 + 4) - *((_QWORD *)v5 + 3));
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_2169648D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2169649EC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8[3];
  unsigned __int8 *v9;
  void **v10;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    memset(v8, 0, sizeof(v8));
    tlv::parseV<wds::tlv::FqdnList>(&v9, v5, v8);
    if (v9)
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v10 = (void **)v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    else
    {
      v10 = (void **)v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 18, v6, v7);
    }
  }
}

void sub_216964ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *i;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100]((_QWORD *)a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v9, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3) < a4)
  {
    v15 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v9, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_13:
    *(_QWORD *)(a1 + 8) = v14;
    return;
  }
  v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, (std::string *)a3, v10);
  for (i = *(std::string **)(a1 + 8); i != v16; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_216964C54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216964C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<wds::tlv::Ipv4AddrList>(&v12, v5, &__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 20, v6, v7);
  }
}

void sub_216964D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::Ipv4AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv4AddrInfo*,wds::tlv::Ipv4AddrInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(uint64_t a1, const CSIPacketAddress *a2)
{
  const CSIPacketAddress *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  CSIPacketAddress *v14;
  CSIPacketAddress *v15;
  char *v16;
  uint64_t v17;

  v3 = *(const CSIPacketAddress **)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 16;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = (CSIPacketAddress *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  CSIPacketAddress::CSIPacketAddress(v14, a2);
  v15 = (CSIPacketAddress *)((char *)v14 + 24);
  std::vector<CSIPacketAddress>::__swap_out_circular_buffer((const CSIPacketAddress **)a1, &__p);
  v11 = *(_QWORD *)(a1 + 8);
  if (v15 != v14)
    v15 = (CSIPacketAddress *)((char *)v14 + (v15 - v14 - 24) % 0x18uLL);
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_216964F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<CSIPacketAddress>::__swap_out_circular_buffer(const CSIPacketAddress **a1, _QWORD *a2)
{
  const CSIPacketAddress *v4;
  const CSIPacketAddress *v5;
  const CSIPacketAddress *v6;
  const CSIPacketAddress *v7;
  const CSIPacketAddress *v8;
  const CSIPacketAddress *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (const CSIPacketAddress *)a2[1];
  while (v4 != v5)
  {
    v4 = (const CSIPacketAddress *)((char *)v4 - 24);
    CSIPacketAddress::CSIPacketAddress((const CSIPacketAddress *)((char *)v6 - 24), v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (const CSIPacketAddress *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (const CSIPacketAddress *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<wds::tlv::Ipv6AddrList>(&v12, v5, (uint64_t *)&__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 21, v6, v7);
  }
}

void sub_216965100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::Ipv6AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv6AddrInfo*,wds::tlv::Ipv6AddrInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xF0F0F0F0F0F0F0F1 * (v8 - *(_QWORD *)result) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >= 0xF0F0F0F0F0F0F10)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * v8;
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x787878787878787)
      v12 = 0xF0F0F0F0F0F0F0FLL;
    else
      v12 = v11;
    result = std::vector<wds::tlv::Ipv6AddrInfo>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xF0F0F0F0F0F0F0F1 * (v15 - v9) >= a4)
    goto LABEL_16;
  v16 = &__src[v15 - v9];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unint64_t v12;

  TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<wds::tlv::DestPortList>(&v12, v5, (uint64_t)&__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 27, v6, v7);
  }
}

void sub_21696530C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<wds::tlv::DestPortRangeList>(&v12, v5, &__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 30, v6, v7);
  }
}

void sub_2169653E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::DestPortRangeInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DestPortRangeInfo*,wds::tlv::DestPortRangeInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unint64_t v12;

  TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<wds::tlv::NextHdrProtList>(&v12, v5, &__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 23, v6, v7);
  }
}

void sub_2169655CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0xD79435E50D7943)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 4);
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) >= 0x6BCA1AF286BCA1)
    v7 = 0xD79435E50D7943;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v7);
  else
    v8 = 0;
  v11 = v7;
  v12 = v7 + 304 * v2;
  v14 = v7 + 304 * v8;
  MEMORY[0x2199FDA2C](v12, a2);
  v13 = v12 + 304;
  std::vector<TrafficDescriptor>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_2169656EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TrafficDescriptor>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = 0;
  v6 = *result;
  v5 = result[1];
  v7 = a2[1];
  while (v5 + v4 != v6)
  {
    v4 -= 304;
    result = (uint64_t *)MEMORY[0x2199FDA38](v4 + v7, v4 + v5);
  }
  a2[1] = v7 + v4;
  v8 = *v3;
  *v3 = v7 + v4;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(unint64_t a1)
{
  if (a1 >= 0xD79435E50D7944)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(304 * a1);
}

uint64_t std::__split_buffer<TrafficDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 304;
    MEMORY[0x2199FDA50]();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v8 = a1[2];
  v9 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = MEMORY[0x2199FDA50](v10 - 304);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xD79435E50D7943)
      goto LABEL_22;
    v12 = 0x86BCA1AF286BCA1BLL * (v8 >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x6BCA1AF286BCA1 ? 0xD79435E50D7943 : v13;
    if (v14 > 0xD79435E50D7943)
LABEL_22:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v14);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + 304 * v16;
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(a2, a3, (uint64_t)v15);
    goto LABEL_17;
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1] - v9) >> 4) < a4)
  {
    v18 = a2 + 16 * ((a1[1] - v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(a2, v18, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(v18, a3, a1[1]);
LABEL_17:
    a1[1] = result;
    return result;
  }
  v19 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(a2, a3, v9);
  for (result = a1[1]; result != v19; result = MEMORY[0x2199FDA50](result - 304))
    ;
  a1[1] = v19;
  return result;
}

void sub_216965A00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216965A08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      MEMORY[0x2199FDA38](a3 + v6, a1 + v6);
      v6 += 304;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_216965A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 304;
    do
    {
      MEMORY[0x2199FDA50](v4 + v2);
      v2 -= 304;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      TrafficDescriptor::operator=();
      v5 += 304;
      a3 += 304;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_312(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_315(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_318(uint64_t a1, __int128 **a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2 != (uint64_t *)a2)
    std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_321(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2_323(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != a2)
    std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1140;
  return result;
}

_QWORD *std::function<void ()(qmi::ResponseBase const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(qmi::ResponseBase const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216965FA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void QMIDataContextActivationGuard::~QMIDataContextActivationGuard(QMIDataContextActivationGuard *this)
{
  JUMPOUT(0x2199FEAC4);
}

void QMIActivationLock::~QMIActivationLock(QMIActivationLock *this)
{
  char *v1;

  *(_QWORD *)this = &off_24D5D11B8;
  v1 = (char *)this + 8;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24D5D11B8;
  v1 = (char *)this + 8;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x2199FEAC4);
}

void QMIDataContextIPActivationLock::~QMIDataContextIPActivationLock(QMIDataContextIPActivationLock *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_24D5D11D8;
  v3 = *((_QWORD *)this + 1);
  v1 = (char *)this + 8;
  v2 = v3;
  v4 = *(_BYTE *)(v3 + 8) - 1;
  *(_BYTE *)(v3 + 8) = v4;
  if (!v4)
    *(_DWORD *)(v2 + 12) = 0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_24D5D11D8;
  v3 = *((_QWORD *)this + 1);
  v1 = (char *)this + 8;
  v2 = v3;
  v4 = *(_BYTE *)(v3 + 8) - 1;
  *(_BYTE *)(v3 + 8) = v4;
  if (!v4)
    *(_DWORD *)(v2 + 12) = 0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t asString@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  v4 = v12;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*a1)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"[mask: ", 7);
    v6 = (const char *)asString();
    v7 = strlen(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" semaphore: ", 12);
    v4 = (_QWORD *)std::ostream::operator<<();
    v9 = "]";
    v10 = 1;
  }
  else
  {
    v9 = "empty";
    v10 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  *(_QWORD *)&v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)&v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v12[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199FEA70](v16);
}

void sub_21696626C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t asString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  void *__p[2];
  unsigned __int8 v20;
  _OWORD v21[4];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  _BYTE v25[144];
  uint64_t v26;

  v26 = 0;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  if (*(_QWORD *)a1)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"{guard: ", 8);
    v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
    v18[0] = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v18[1] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    asString(v18, __p);
    if ((v20 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v9 = v20;
    else
      v9 = (uint64_t)__p[1];
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" lock family: ", 14);
    v12 = (const char *)asString();
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"}", 1);
    if ((char)v20 < 0)
      operator delete(__p[0]);
    if (v5)
    {
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"empty", 5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21 + 8, a2);
  *(_QWORD *)&v21[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(*(_QWORD *)&v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v21[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v23) < 0)
    operator delete(v22[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199FEA70](v25);
}

void sub_216966478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void QMIP2PCommandDriver::create(_QWORD *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  dispatch_object_t v8;

  v6 = operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  QMIP2PCommandDriver::QMIP2PCommandDriver(v6, a1, (uint64_t)"QMIDriver:p2p", (uint64_t)"p2p.qmi", &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIP2PCommandDriver>::shared_ptr[abi:ne180100]<QMIP2PCommandDriver,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
}

void sub_216966578(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C408174DE9DLL);
  _Unwind_Resume(exception_object);
}

uint64_t QMIP2PCommandDriver::QMIP2PCommandDriver(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, dispatch_object_t *a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *object;

  object = *a5;
  if (*a5)
    dispatch_retain(*a5);
  P2PCommandDriver::P2PCommandDriver();
  if (object)
    dispatch_release(object);
  *(_QWORD *)a1 = &off_24D5D1268;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v7 = a2[1];
  *(_QWORD *)(a1 + 104) = *a2;
  *(_QWORD *)(a1 + 112) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void sub_216966650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void QMIP2PCommandDriver::~QMIP2PCommandDriver(QMIP2PCommandDriver *this)
{
  qmi::Client *v2;

  *(_QWORD *)this = &off_24D5D1268;
  v2 = (QMIP2PCommandDriver *)((char *)this + 72);
  if (*((_QWORD *)this + 11))
    qmi::Client::stop((QMIP2PCommandDriver *)((char *)this + 72));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  qmi::Client::~Client(v2);
  P2PCommandDriver::~P2PCommandDriver(this);
}

{
  QMIP2PCommandDriver::~QMIP2PCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t QMIP2PCommandDriver::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD v21[5];
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  char v28;
  dispatch_object_t v29;
  void *v30;
  char v31;
  uint8_t buf[8];
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I initializing the driver", buf, 2u);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, *(char **)(a1 + 48));
  v10 = *(NSObject **)(a1 + 24);
  v29 = v10;
  if (v10)
    dispatch_retain(v10);
  std::string::basic_string[abi:ne180100]<0>(&v27, "p2p");
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v12;
  if (!v11 || (v13 = std::__shared_weak_count::lock(v11), (v24 = v13) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v25 = v12;
  v26 = v13;
  v14 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  Registry::getServerConnection(*(Registry **)(a1 + 104));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 88, &v34);
  qmi::Client::~Client((qmi::Client *)buf);
  if (v22)
  {
    p_shared_owners = &v22->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v17 - 1, (unint64_t *)p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__shared_weak_count::__release_weak(v26);
  if (v24)
  {
    v18 = &v24->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v28 < 0)
    operator delete(v27);
  if (v29)
    dispatch_release(v29);
  if (v31 < 0)
    operator delete(v30);
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_15;
  v21[4] = a1;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v33 = 0x40000000;
  *(_QWORD *)&v34 = ___ZNK3qmi6Client13setIndHandlerIRKN3p2p10P2PMessage10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v34 + 1) = &unk_24D5D1508;
  v35 = v21;
  qmi::Client::setIndHandler();
  qmi::Client::setHandler();
  return qmi::Client::setHandler();
}

void sub_2169669B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  NSObject *v31;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (*(char *)(v29 - 129) < 0)
    operator delete(*(void **)(v29 - 152));
  v31 = *(NSObject **)(v29 - 128);
  if (v31)
    dispatch_release(v31);
  if (*(char *)(v29 - 97) < 0)
    operator delete(*(void **)(v29 - 120));
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *TlvValue;
  int v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t (*v32)(uint64_t, unsigned __int16 *);
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  void *__p;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE buf[24];
  __int128 v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = v3[6];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "handleP2PMessageIndication_sync";
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: received P2PMessage indication", buf, 0x16u);
  }
  v6 = *((_DWORD *)a2 + 1);
  if (v6)
  {
    v7 = v3[5];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v3[6];
      v9 = qmi::asString();
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "handleP2PMessageIndication_sync";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v48) = v6;
      WORD2(v48) = 2080;
      *(_QWORD *)((char *)&v48 + 6) = v9;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#N DATA.%s: %s: P2PMessage::Indication error: %d (%s)", buf, 0x26u);
    }
  }
  else
  {
    v10 = (std::__shared_weak_count *)v3[8];
    if (v10)
    {
      v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        v12 = v11;
        v13 = v3[7];
        if (v13)
        {
          v39 = 0;
          v40 = &v39;
          v41 = 0x2000000000;
          v42 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4002000000;
          *(_QWORD *)&v48 = __Block_byref_object_copy__2;
          *((_QWORD *)&v48 + 1) = __Block_byref_object_dispose__2;
          v50 = 0;
          v51 = 0;
          v49 = 0;
          v35 = 0;
          v36 = &v35;
          v37 = 0x2000000000;
          v38 = 0;
          v31[0] = MEMORY[0x24BDAC760];
          v31[1] = 0x40000000;
          v32 = ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke;
          v33 = &unk_24D5D1308;
          v34 = &v39;
          TlvValue = (void *)qmi::MessageBase::findTlvValue(a2);
          v16 = TlvValue;
          if (TlvValue)
          {
            v17 = v15;
            __p = TlvValue;
            LOWORD(v46) = tlv::parseV<p2p::tlv::MessageType>((unint64_t *)&__p, v15);
            if (__p)
              v32((uint64_t)v31, (unsigned __int16 *)&v46);
            else
              ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 2, v16, v17);
          }
          v18 = qmi::MessageBase::findTlvValue(a2);
          v20 = v18;
          if (v18)
          {
            v21 = v19;
            v45 = 0;
            v46 = v18;
            __p = 0;
            v44 = 0;
            tlv::parseV<p2p::tlv::MessageData>(&v46, v19, &__p);
            v22 = v46;
            if (v46 && (void **)(*(_QWORD *)&buf[8] + 40) != &__p)
              std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(*(_QWORD *)&buf[8] + 40), (char *)__p, v44, v44 - (_BYTE *)__p);
            if (__p)
            {
              v44 = (char *)__p;
              operator delete(__p);
            }
            if (!v22)
              ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v20, v21);
          }
          v23 = (void *)qmi::MessageBase::findTlvValue(a2);
          v25 = v23;
          if (v23)
          {
            v26 = v24;
            __p = v23;
            v27 = tlv::parseV<p2p::tlv::Delete>((unint64_t *)&__p, v24);
            if (__p)
              *((_BYTE *)v36 + 24) = v27 != 0;
            else
              ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 17, v25, v26);
          }
          v28 = *((unsigned int *)v40 + 6);
          v44 = 0;
          v45 = 0;
          __p = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(*(_QWORD *)&buf[8] + 40), *(_QWORD *)(*(_QWORD *)&buf[8] + 48), *(_QWORD *)(*(_QWORD *)&buf[8] + 48) - *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
          (*(void (**)(uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)v13 + 32))(v13, v28, &__p, *((unsigned __int8 *)v36 + 24));
          if (__p)
          {
            v44 = (char *)__p;
            operator delete(__p);
          }
          _Block_object_dispose(&v35, 8);
          _Block_object_dispose(buf, 8);
          if (v49)
          {
            v50 = v49;
            operator delete(v49);
          }
          _Block_object_dispose(&v39, 8);
        }
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
}

void sub_216966E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a27, 8);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Block_object_dispose(&a19, 8);
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke_2(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has started", (uint8_t *)v9, 2u);
  }
  v3 = (std::__shared_weak_count *)v1[8];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v9[1] = v4;
    if (v4)
    {
      v5 = v4;
      v6 = v1[7];
      v9[0] = v6;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_216966F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke_7(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has stopped", (uint8_t *)v9, 2u);
  }
  v3 = (std::__shared_weak_count *)v1[8];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v9[1] = v4;
    if (v4)
    {
      v5 = v4;
      v6 = v1[7];
      v9[0] = v6;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_216967050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIP2PCommandDriver::start(uint64_t this)
{
  if (*(_QWORD *)(this + 88))
    return qmi::Client::start((qmi::Client *)(this + 72));
  return this;
}

uint64_t QMIP2PCommandDriver::stop(uint64_t this)
{
  if (*(_QWORD *)(this + 88))
    return qmi::Client::stop((qmi::Client *)(this + 72));
  return this;
}

__n128 __Block_byref_object_copy__2(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke(uint64_t result, unsigned __int16 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void QMIP2PCommandDriver::handleP2PProximityStatusChanged(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  BOOL *v11;
  capabilities::ct *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void **v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const void **v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const void **v65;
  char *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  const __CFDictionary *v81;
  uint64_t (*v82)(uint64_t);
  const void *Value;
  const void *v84;
  CFTypeID v85;
  const void **v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD v114[6];
  uint64_t v115;
  int v116;
  uint64_t v117;
  void *aBlock;
  _QWORD v119[5];
  _QWORD v120[2];
  uint64_t (*v121)(uint64_t, _DWORD *);
  void *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _QWORD v125[2];
  std::string *(*v126)(uint64_t, std::string *);
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  _QWORD v130[2];
  uint64_t (*v131)(uint64_t, _DWORD *);
  void *v132;
  int v133;
  _QWORD v134[2];
  uint64_t (*v135)(uint64_t, BOOL *);
  void *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  __int128 v140;
  _BYTE buf[24];
  void *v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v139 = 0u;
  v140 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v139);
  v6 = MEMORY[0x24BDAC760];
  v134[0] = MEMORY[0x24BDAC760];
  v134[1] = 1174405120;
  v135 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke;
  v136 = &__block_descriptor_tmp_15_8;
  v7 = (std::__shared_weak_count *)a3[1];
  v137 = *a3;
  v138 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (const void **)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1) != (_QWORD)v140)
  {
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v140)
        goto LABEL_11;
    }
  }
  if (v10 == (const void **)v140)
  {
LABEL_11:
    v13 = operator new();
    v14 = v13;
    *(_WORD *)(v13 + 8) = 1;
    *(_QWORD *)v13 = &off_24D5D1550;
    v15 = v140;
    if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
    {
      v17 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v18 = (uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 2;
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      if (*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v140 + 8, v19);
      else
        v20 = 0;
      v21 = (uint64_t *)&v20[8 * v17];
      v22 = &v20[8 * v19];
      *v21 = v14;
      v16 = v21 + 1;
      v24 = (char *)*((_QWORD *)&v139 + 1);
      v23 = (char *)v140;
      if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = (char *)*((_QWORD *)&v139 + 1);
      }
      *((_QWORD *)&v139 + 1) = v21;
      *(_QWORD *)&v140 = v16;
      *((_QWORD *)&v140 + 1) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v140 = v13;
      v16 = (_QWORD *)(v15 + 8);
    }
    *(_QWORD *)&v140 = v16;
    v12 = (capabilities::ct *)v135((uint64_t)v134, (BOOL *)(v14 + 9));
  }
  else
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = (capabilities::ct *)___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke((uint64_t)v134, v11 + 9);
  }
  if (capabilities::ct::supportsDataQMIExtensions(v12))
  {
    v130[0] = v6;
    v130[1] = 0x40000000;
    v131 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16;
    v132 = &__block_descriptor_tmp_18_7;
    v133 = a2;
    v26 = (const void **)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1) != (_QWORD)v140)
    {
      while (*((_BYTE *)*v26 + 8) != 19)
      {
        if (++v26 == (const void **)v140)
          goto LABEL_36;
      }
    }
    if (v26 == (const void **)v140)
    {
LABEL_36:
      v28 = operator new();
      v29 = v28;
      *(_BYTE *)(v28 + 8) = 19;
      *(_QWORD *)v28 = &off_24D5D15A0;
      *(_DWORD *)(v28 + 12) = 0;
      v30 = (_DWORD *)(v28 + 12);
      v31 = v140;
      if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
      {
        v33 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v34 = (uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 2;
        if (v34 <= v33 + 1)
          v34 = v33 + 1;
        if (*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v140 + 8, v35);
        else
          v36 = 0;
        v37 = (uint64_t *)&v36[8 * v33];
        v38 = &v36[8 * v35];
        *v37 = v29;
        v32 = v37 + 1;
        v40 = (char *)*((_QWORD *)&v139 + 1);
        v39 = (char *)v140;
        if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *--v37 = v41;
          }
          while (v39 != v40);
          v39 = (char *)*((_QWORD *)&v139 + 1);
        }
        *((_QWORD *)&v139 + 1) = v37;
        *(_QWORD *)&v140 = v32;
        *((_QWORD *)&v140 + 1) = v38;
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v140 = v28;
        v32 = (_QWORD *)(v31 + 8);
      }
      *(_QWORD *)&v140 = v32;
      v131((uint64_t)v130, v30);
    }
    else
    {
      if (!v27)
        __cxa_bad_cast();
      ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16((uint64_t)v130, v27 + 3);
    }
  }
  v42 = *a3;
  if (*a3)
  {
    v125[0] = v6;
    v125[1] = 1174405120;
    v126 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_2;
    v127 = &__block_descriptor_tmp_20_4;
    v43 = (std::__shared_weak_count *)a3[1];
    v128 = v42;
    v129 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = (const void **)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1) != (_QWORD)v140)
    {
      while (*((_BYTE *)*v46 + 8) != 16)
      {
        if (++v46 == (const void **)v140)
          goto LABEL_64;
      }
    }
    if (v46 == (const void **)v140)
    {
LABEL_64:
      v49 = operator new();
      v50 = v49;
      *(_BYTE *)(v49 + 8) = 16;
      *(_QWORD *)(v49 + 16) = 0;
      v48 = (std::string *)(v49 + 16);
      *(_QWORD *)v49 = off_24D5D15F0;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0;
      v51 = v140;
      if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
      {
        v53 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 3;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v54 = (uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 2;
        if (v54 <= v53 + 1)
          v54 = v53 + 1;
        if (*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v140 + 8, v55);
        else
          v56 = 0;
        v57 = (uint64_t *)&v56[8 * v53];
        v58 = &v56[8 * v55];
        *v57 = v50;
        v52 = v57 + 1;
        v60 = (char *)*((_QWORD *)&v139 + 1);
        v59 = (char *)v140;
        if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
        {
          do
          {
            v61 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *--v57 = v61;
          }
          while (v59 != v60);
          v59 = (char *)*((_QWORD *)&v139 + 1);
        }
        *((_QWORD *)&v139 + 1) = v57;
        *(_QWORD *)&v140 = v52;
        *((_QWORD *)&v140 + 1) = v58;
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_QWORD *)v140 = v49;
        v52 = (_QWORD *)(v51 + 8);
      }
      *(_QWORD *)&v140 = v52;
    }
    else
    {
      if (!v47)
        __cxa_bad_cast();
      v48 = (std::string *)(v47 + 16);
    }
    v126((uint64_t)v125, v48);
    v120[0] = v6;
    v120[1] = 1174405120;
    v121 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_21;
    v122 = &__block_descriptor_tmp_23_1;
    v62 = (std::__shared_weak_count *)a3[1];
    v123 = *a3;
    v124 = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = (const void **)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1) != (_QWORD)v140)
    {
      while (*((_BYTE *)*v65 + 8) != 17)
      {
        if (++v65 == (const void **)v140)
          goto LABEL_91;
      }
    }
    if (v65 == (const void **)v140)
    {
LABEL_91:
      v68 = operator new();
      v69 = v68;
      *(_BYTE *)(v68 + 8) = 17;
      *(_QWORD *)v68 = &off_24D5D1640;
      *(_DWORD *)(v68 + 12) = 0;
      v67 = (_DWORD *)(v68 + 12);
      v70 = v140;
      if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
      {
        v72 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v73 = (uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 2;
        if (v73 <= v72 + 1)
          v73 = v72 + 1;
        if (*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v140 + 8, v74);
        else
          v75 = 0;
        v76 = (uint64_t *)&v75[8 * v72];
        v77 = &v75[8 * v74];
        *v76 = v69;
        v71 = v76 + 1;
        v79 = (char *)*((_QWORD *)&v139 + 1);
        v78 = (char *)v140;
        if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
        {
          do
          {
            v80 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *--v76 = v80;
          }
          while (v78 != v79);
          v78 = (char *)*((_QWORD *)&v139 + 1);
        }
        *((_QWORD *)&v139 + 1) = v76;
        *(_QWORD *)&v140 = v71;
        *((_QWORD *)&v140 + 1) = v77;
        if (v78)
          operator delete(v78);
      }
      else
      {
        *(_QWORD *)v140 = v68;
        v71 = (_QWORD *)(v70 + 8);
      }
      *(_QWORD *)&v140 = v71;
    }
    else
    {
      if (!v66)
        __cxa_bad_cast();
      v67 = v66 + 12;
    }
    v121((uint64_t)v120, v67);
    v81 = *(const __CFDictionary **)(*a3 + 64);
    v82 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v81)
      v82 = 0;
    if (v82)
    {
      Value = CFDictionaryGetValue(v81, CFSTR("bbinfo"));
      v84 = Value;
      if (Value)
      {
        v85 = CFGetTypeID(Value);
        if (v85 == CFDataGetTypeID())
        {
          v119[0] = v6;
          v119[1] = 0x40000000;
          v119[2] = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_25;
          v119[3] = &__block_descriptor_tmp_26_1;
          v119[4] = v84;
          v86 = (const void **)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1) != (_QWORD)v140)
          {
            while (*((_BYTE *)*v86 + 8) != 18)
            {
              if (++v86 == (const void **)v140)
                goto LABEL_120;
            }
          }
          if (v86 == (const void **)v140)
          {
LABEL_120:
            v89 = operator new();
            v90 = v89;
            *(_BYTE *)(v89 + 8) = 18;
            *(_QWORD *)(v89 + 16) = 0;
            v88 = v89 + 16;
            *(_QWORD *)v89 = &off_24D5D1690;
            *(_QWORD *)(v89 + 24) = 0;
            *(_QWORD *)(v89 + 32) = 0;
            v91 = v140;
            if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
            {
              v93 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 3;
              if ((unint64_t)(v93 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v94 = (uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 2;
              if (v94 <= v93 + 1)
                v94 = v93 + 1;
              if (*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
                v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v140 + 8, v95);
              else
                v96 = 0;
              v97 = (uint64_t *)&v96[8 * v93];
              v98 = &v96[8 * v95];
              *v97 = v90;
              v92 = v97 + 1;
              v100 = (char *)*((_QWORD *)&v139 + 1);
              v99 = (char *)v140;
              if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
              {
                do
                {
                  v101 = *((_QWORD *)v99 - 1);
                  v99 -= 8;
                  *--v97 = v101;
                }
                while (v99 != v100);
                v99 = (char *)*((_QWORD *)&v139 + 1);
              }
              *((_QWORD *)&v139 + 1) = v97;
              *(_QWORD *)&v140 = v92;
              *((_QWORD *)&v140 + 1) = v98;
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_QWORD *)v140 = v89;
              v92 = (_QWORD *)(v91 + 8);
            }
            *(_QWORD *)&v140 = v92;
          }
          else
          {
            if (!v87)
              __cxa_bad_cast();
            v88 = (uint64_t)v87 + 16;
          }
          ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_25((uint64_t)v119, v88);
        }
      }
    }
    v102 = v124;
    if (v124)
    {
      v103 = (unint64_t *)&v124->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = v129;
    if (v129)
    {
      v106 = (unint64_t *)&v129->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
  }
  v108 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    v109 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v109;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "handleP2PProximityStatusChanged";
    _os_log_impl(&dword_216897000, v108, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: sending ProximityNotification", buf, 0x16u);
  }
  v114[5] = a1 + 72;
  v115 = QMIServiceMsg::create();
  v116 = 25000;
  v117 = 0;
  aBlock = 0;
  v114[0] = v6;
  v114[1] = 0x40000000;
  v114[2] = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_27;
  v114[3] = &__block_descriptor_tmp_28_2;
  v114[4] = a1;
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p21ProximityNotification8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v142 = &unk_24D5D16C0;
  v143 = v114;
  v110 = _Block_copy(buf);
  aBlock = v110;
  if (v115)
  {
    qmi::Client::send();
    v110 = aBlock;
  }
  if (v110)
    _Block_release(v110);
  v111 = v138;
  if (v138)
  {
    v112 = (unint64_t *)&v138->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v139);
}

void sub_216967B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v6 - 192);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v6 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke(uint64_t result, BOOL *a2)
{
  *a2 = *(_QWORD *)(result + 32) != 0;
  return result;
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14P2PDeviceDescrEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14P2PDeviceDescrEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = subscriber::simSlotAsInstance();
  *a2 = result;
  return result;
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_21(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 24);
  return result;
}

void ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_25(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;

  ctu::cf::assign();
  v3 = 0uLL;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
    v3 = 0uLL;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_216967CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_27(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[8];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = v2[7];
      if (v7)
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = v2[5];
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)buf = 67109378;
            v15 = v8;
            v16 = 2080;
            v17 = qmi::asString();
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#N ProximityNotification failed: %d (%s)", buf, 0x12u);
          }
          v11 = 0xFFFFFFFFLL;
        }
        else
        {
          if (v10)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I ProximityNotification succeed", buf, 2u);
          }
          v11 = 0;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v11);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216967E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIP2PCommandDriver::sendP2PCompanionMessage(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  const void **v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  const void **v28;
  char *v29;
  const __CFNumber *v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const void **v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  const void **v62;
  char *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  const void **v79;
  char *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  _QWORD v99[7];
  uint64_t v100;
  int v101;
  uint64_t v102;
  void *aBlock;
  _QWORD v104[5];
  void *__p[2];
  __int128 v106;
  _BYTE buf[24];
  void *v108;
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  v106 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12 = (const void **)__p[1];
  if (__p[1] != (void *)v106)
  {
    while (*((_BYTE *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v106)
        goto LABEL_8;
    }
  }
  if (v12 == (const void **)v106)
  {
LABEL_8:
    v15 = operator new();
    v16 = v15;
    *(_BYTE *)(v15 + 8) = 1;
    *(_QWORD *)v15 = &off_24D5D1708;
    *(_DWORD *)(v15 + 12) = 0;
    v14 = (_DWORD *)(v15 + 12);
    v17 = v106;
    if ((unint64_t)v106 >= *((_QWORD *)&v106 + 1))
    {
      v19 = (uint64_t)(v106 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        goto LABEL_138;
      v20 = (uint64_t)(*((_QWORD *)&v106 + 1) - (unint64_t)__p[1]) >> 2;
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      if (*((_QWORD *)&v106 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v106 + 8, v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v19];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v18 = v23 + 1;
      v26 = (char *)__p[1];
      v25 = (char *)v106;
      if ((void *)v106 != __p[1])
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v23 = v27;
        }
        while (v25 != v26);
        v25 = (char *)__p[1];
      }
      __p[1] = v23;
      *(_QWORD *)&v106 = v18;
      *((_QWORD *)&v106 + 1) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v106 = v15;
      v18 = (_QWORD *)(v17 + 8);
    }
    *(_QWORD *)&v106 = v18;
  }
  else
  {
    if (!v13)
      goto LABEL_137;
    v14 = v13 + 12;
  }
  *v14 = time(0);
  if (a2)
  {
    v28 = (const void **)__p[1];
    if (__p[1] != (void *)v106)
    {
      while (*((_BYTE *)*v28 + 8) != 16)
      {
        if (++v28 == (const void **)v106)
          goto LABEL_33;
      }
    }
    if (v28 == (const void **)v106)
    {
LABEL_33:
      v32 = operator new();
      v33 = v32;
      *(_BYTE *)(v32 + 8) = 16;
      *(_QWORD *)v32 = &off_24D5D1758;
      *(_WORD *)(v32 + 10) = 0;
      v31 = (_WORD *)(v32 + 10);
      v34 = v106;
      if ((unint64_t)v106 >= *((_QWORD *)&v106 + 1))
      {
        v36 = (uint64_t)(v106 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_138;
        v37 = (uint64_t)(*((_QWORD *)&v106 + 1) - (unint64_t)__p[1]) >> 2;
        if (v37 <= v36 + 1)
          v37 = v36 + 1;
        if (*((_QWORD *)&v106 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v106 + 8, v38);
        else
          v39 = 0;
        v40 = (uint64_t *)&v39[8 * v36];
        v41 = &v39[8 * v38];
        *v40 = v33;
        v35 = v40 + 1;
        v43 = (char *)__p[1];
        v42 = (char *)v106;
        if ((void *)v106 != __p[1])
        {
          do
          {
            v44 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            *--v40 = v44;
          }
          while (v42 != v43);
          v42 = (char *)__p[1];
        }
        __p[1] = v40;
        *(_QWORD *)&v106 = v35;
        *((_QWORD *)&v106 + 1) = v41;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_QWORD *)v106 = v32;
        v35 = (_QWORD *)(v34 + 8);
      }
      *(_QWORD *)&v106 = v35;
    }
    else
    {
      if (!v29)
        goto LABEL_137;
      v31 = v29 + 10;
    }
    *(_DWORD *)buf = 0;
    ctu::cf::assign((ctu::cf *)buf, a2, v30);
    *v31 = *(_WORD *)buf;
  }
  v45 = MEMORY[0x24BDAC760];
  if (a3)
  {
    v104[0] = MEMORY[0x24BDAC760];
    v104[1] = 0x40000000;
    v104[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3;
    v104[3] = &__block_descriptor_tmp_33_2;
    v104[4] = a3;
    v46 = (const void **)__p[1];
    if (__p[1] != (void *)v106)
    {
      while (*((_BYTE *)*v46 + 8) != 17)
      {
        if (++v46 == (const void **)v106)
          goto LABEL_59;
      }
    }
    if (v46 == (const void **)v106)
    {
LABEL_59:
      v49 = operator new();
      v50 = v49;
      *(_BYTE *)(v49 + 8) = 17;
      *(_QWORD *)(v49 + 16) = 0;
      v48 = v49 + 16;
      *(_QWORD *)v49 = &off_24D5D17A8;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0;
      v51 = v106;
      if ((unint64_t)v106 >= *((_QWORD *)&v106 + 1))
      {
        v53 = (uint64_t)(v106 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v53 + 1) >> 61)
          goto LABEL_138;
        v54 = (uint64_t)(*((_QWORD *)&v106 + 1) - (unint64_t)__p[1]) >> 2;
        if (v54 <= v53 + 1)
          v54 = v53 + 1;
        if (*((_QWORD *)&v106 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v106 + 8, v55);
        else
          v56 = 0;
        v57 = (uint64_t *)&v56[8 * v53];
        v58 = &v56[8 * v55];
        *v57 = v50;
        v52 = v57 + 1;
        v60 = (char *)__p[1];
        v59 = (char *)v106;
        if ((void *)v106 != __p[1])
        {
          do
          {
            v61 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *--v57 = v61;
          }
          while (v59 != v60);
          v59 = (char *)__p[1];
        }
        __p[1] = v57;
        *(_QWORD *)&v106 = v52;
        *((_QWORD *)&v106 + 1) = v58;
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_QWORD *)v106 = v49;
        v52 = (_QWORD *)(v51 + 8);
      }
      *(_QWORD *)&v106 = v52;
    }
    else
    {
      if (!v47)
        goto LABEL_137;
      v48 = (uint64_t)v47 + 16;
    }
    ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3((uint64_t)v104, v48);
  }
  if (a4)
  {
    v62 = (const void **)__p[1];
    if (__p[1] != (void *)v106)
    {
      while (*((_BYTE *)*v62 + 8) != 18)
      {
        if (++v62 == (const void **)v106)
          goto LABEL_85;
      }
    }
    if (v62 == (const void **)v106)
    {
LABEL_85:
      v65 = operator new();
      v66 = v65;
      *(_WORD *)(v65 + 8) = 18;
      *(_QWORD *)v65 = &off_24D5D17F8;
      v67 = v106;
      if ((unint64_t)v106 >= *((_QWORD *)&v106 + 1))
      {
        v69 = (uint64_t)(v106 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v69 + 1) >> 61)
          goto LABEL_138;
        v70 = (uint64_t)(*((_QWORD *)&v106 + 1) - (unint64_t)__p[1]) >> 2;
        if (v70 <= v69 + 1)
          v70 = v69 + 1;
        if (*((_QWORD *)&v106 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
          v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v106 + 8, v71);
        else
          v72 = 0;
        v73 = (uint64_t *)&v72[8 * v69];
        v74 = &v72[8 * v71];
        *v73 = v66;
        v68 = v73 + 1;
        v76 = (char *)__p[1];
        v75 = (char *)v106;
        if ((void *)v106 != __p[1])
        {
          do
          {
            v77 = *((_QWORD *)v75 - 1);
            v75 -= 8;
            *--v73 = v77;
          }
          while (v75 != v76);
          v75 = (char *)__p[1];
        }
        __p[1] = v73;
        *(_QWORD *)&v106 = v68;
        *((_QWORD *)&v106 + 1) = v74;
        if (v75)
          operator delete(v75);
      }
      else
      {
        *(_QWORD *)v106 = v65;
        v68 = (_QWORD *)(v67 + 8);
      }
      v64 = (_BYTE *)(v66 + 9);
      *(_QWORD *)&v106 = v68;
    }
    else
    {
      if (!v63)
        goto LABEL_137;
      v64 = v63 + 9;
    }
    *v64 = 1;
  }
  if (*(_QWORD *)a5)
  {
    v78 = *(_DWORD *)(*(_QWORD *)a5 + 72);
    if (v78)
    {
      v79 = (const void **)__p[1];
      if (__p[1] != (void *)v106)
      {
        while (*((_BYTE *)*v79 + 8) != 19)
        {
          if (++v79 == (const void **)v106)
            goto LABEL_112;
        }
      }
      if (v79 != (const void **)v106)
      {
        if (v80)
        {
          v81 = v80 + 12;
LABEL_129:
          *v81 = v78;
          goto LABEL_130;
        }
LABEL_137:
        __cxa_bad_cast();
      }
LABEL_112:
      v82 = operator new();
      v83 = v82;
      *(_BYTE *)(v82 + 8) = 19;
      *(_QWORD *)v82 = &off_24D5D1848;
      *(_DWORD *)(v82 + 12) = 0;
      v81 = (_DWORD *)(v82 + 12);
      v84 = v106;
      if ((unint64_t)v106 < *((_QWORD *)&v106 + 1))
      {
        *(_QWORD *)v106 = v82;
        v85 = (_QWORD *)(v84 + 8);
LABEL_128:
        *(_QWORD *)&v106 = v85;
        v78 = *(_DWORD *)(*(_QWORD *)a5 + 72);
        goto LABEL_129;
      }
      v86 = (uint64_t)(v106 - (unint64_t)__p[1]) >> 3;
      if (!((unint64_t)(v86 + 1) >> 61))
      {
        v87 = (uint64_t)(*((_QWORD *)&v106 + 1) - (unint64_t)__p[1]) >> 2;
        if (v87 <= v86 + 1)
          v87 = v86 + 1;
        if (*((_QWORD *)&v106 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v106 + 8, v88);
        else
          v89 = 0;
        v90 = (uint64_t *)&v89[8 * v86];
        v91 = &v89[8 * v88];
        *v90 = v83;
        v85 = v90 + 1;
        v93 = (char *)__p[1];
        v92 = (char *)v106;
        if ((void *)v106 != __p[1])
        {
          do
          {
            v94 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *--v90 = v94;
          }
          while (v92 != v93);
          v92 = (char *)__p[1];
        }
        __p[1] = v90;
        *(_QWORD *)&v106 = v85;
        *((_QWORD *)&v106 + 1) = v91;
        if (v92)
          operator delete(v92);
        goto LABEL_128;
      }
LABEL_138:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_130:
  v95 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    v96 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v96;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "sendP2PCompanionMessage";
    _os_log_impl(&dword_216897000, v95, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: sending P2PMessageDelivery", buf, 0x16u);
  }
  v97 = _Block_copy(a6);
  v99[6] = a1 + 72;
  v100 = QMIServiceMsg::create();
  v101 = 25000;
  v102 = 0;
  aBlock = 0;
  v99[0] = v45;
  v99[1] = 0x40000000;
  v99[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_39;
  v99[3] = &unk_24D5D1468;
  v99[4] = v97;
  v99[5] = a1;
  *(_QWORD *)buf = v45;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p18P2PMessageDelivery8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v108 = &unk_24D5D1878;
  v109 = v99;
  v98 = _Block_copy(buf);
  aBlock = v98;
  if (v100)
  {
    qmi::Client::send();
    v98 = aBlock;
  }
  if (v98)
    _Block_release(v98);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

